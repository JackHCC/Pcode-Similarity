[(stack, 0xfffffffffffffff8, 8) COPY (ram, 0x47da38, 8)]
[ ---  CBRANCH (ram, 0x417d74, 1) , (unique, 0x18e80, 1), (unique, 0x18e80, 1) INT_EQUAL (register, 0x4008, 8) , (const, 0x0, 8)]
[(unique, 0x10000470, 8) COPY (register, 0x4008, 8)]
[(unique, 0x100004e8, 8) COPY (register, 0x4000, 8)]
[ ---  CBRANCH (ram, 0x417d54, 1) , (unique, 0x18f80, 1), (unique, 0x18f80, 1) INT_EQUAL (register, 0x4000, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x4181ac, 1) , (unique, 0x18e80, 1), (unique, 0x18e80, 1) INT_NOTEQUAL (register, 0x4000, 8) , (const, 0x0, 8)]
[(ram, 0x47da38, 8) INDIRECT (ram, 0x47da38, 8) , (const, 0x51b, 4)]
[(ram, 0x47df90, 8) INDIRECT (ram, 0x47df90, 8) , (const, 0x51b, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000052a, 8) , (const, 0x16, 4), (unique, 0x1000052a, 8) CAST (unique, 0x7580, 8), (unique, 0x7580, 8) PTRADD (ram, 0x47df90, 8) , (unique, 0x1000012f, 8) , (const, 0x1, 8), (unique, 0x1000012f, 8) CALLOTHER (const, 0x275, 4) , (register, 0x1660, 1)]
[(unique, 0x100004d0, 8) COPY (register, 0x40b8, 8), (register, 0x40b8, 8) COPY (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x417fb8, 1)]
[(ram, 0x47da38, 8) INDIRECT (ram, 0x47da38, 8) , (const, 0x25, 4)]
[(ram, 0x47df90, 8) INDIRECT (ram, 0x47df90, 8) , (const, 0x25, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x25, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x25, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x25, 4)]
[(stack, 0xfffffffffffffff8, 8) INDIRECT (stack, 0xfffffffffffffff8, 8) , (const, 0x25, 4)]
[ ---  CBRANCH (const, 0x2, 1) , (unique, 0x1d80, 1), (unique, 0x1d80, 1) INT_SLESS (register, 0x4000, 4) , (const, 0x1000, 4), (register, 0x4000, 4) CALL (ram, 0x4184c0, 8)]
[(unique, 0x22280, 4) COPY (const, 0x1000, 4)]
[(unique, 0x10000468, 8) COPY (register, 0x4008, 8), (register, 0x4008, 8) INT_SEXT (unique, 0x22280, 4), (unique, 0x22280, 4) MULTIEQUAL (register, 0x4000, 4) , (unique, 0x22280, 4)]
[(ram, 0x47da38, 8) INDIRECT (ram, 0x47da38, 8) , (const, 0x3c, 4), (ram, 0x47da38, 8) MULTIEQUAL (ram, 0x47da38, 8) , (ram, 0x47da38, 8)]
[(ram, 0x47df90, 8) INDIRECT (ram, 0x47df90, 8) , (const, 0x3c, 4), (ram, 0x47df90, 8) MULTIEQUAL (ram, 0x47df90, 8) , (ram, 0x47df90, 8)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x3c, 4), (stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x3c, 4), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x3c, 4), (stack, 0xffffffffffffff88, 4) MULTIEQUAL (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4)]
[(stack, 0xfffffffffffffff8, 8) INDIRECT (stack, 0xfffffffffffffff8, 8) , (const, 0x3c, 4), (stack, 0xfffffffffffffff8, 8) MULTIEQUAL (stack, 0xfffffffffffffff8, 8) , (stack, 0xfffffffffffffff8, 8)]
[ ---  CBRANCH (ram, 0x417fb4, 1) , (unique, 0x18f80, 1), (unique, 0x18f80, 1) INT_NOTEQUAL (register, 0x4000, 8) , (const, 0x0, 8), (register, 0x4000, 8) CAST (unique, 0x10000532, 8), (unique, 0x10000532, 8) CALL (ram, 0x412de8, 8) , (register, 0x4008, 8), (register, 0x4008, 8) MULTIEQUAL (unique, 0x10000468, 8) , (unique, 0x10000470, 8)]
[(stack, 0xfffffffffffffff8, 8) MULTIEQUAL (stack, 0xfffffffffffffff8, 8) , (stack, 0xfffffffffffffff8, 8)]
[(stack, 0xffffffffffffff88, 4) MULTIEQUAL (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(ram, 0x47da38, 8) MULTIEQUAL (ram, 0x47da38, 8) , (ram, 0x47da38, 8)]
[(unique, 0x10000420, 8) COPY (ram, 0x47df90, 8), (ram, 0x47df90, 8) MULTIEQUAL (ram, 0x47df90, 8) , (ram, 0x47df90, 8)]
[ ---  CALLOTHER (const, 0x19, 4) , (const, 0x0, 2)]
[(register, 0x4000, 4) SUBPIECE (register, 0x40b8, 8) , (const, 0x0, 4), (register, 0x40b8, 8) MULTIEQUAL (unique, 0x100004e8, 8) , (register, 0x4000, 8)]
[ ---  CBRANCH (ram, 0x4181e4, 1) , (unique, 0xe80, 1), (unique, 0xe80, 1) INT_LESS (register, 0x40b8, 8) , (const, 0xfffffffffffff001, 8), (register, 0x40b8, 8) MULTIEQUAL (unique, 0x100004e8, 8) , (register, 0x4000, 8)]
[(ram, 0x47da38, 8) INDIRECT (ram, 0x47da38, 8) , (const, 0x50e, 4)]
[(ram, 0x47df90, 8) INDIRECT (ram, 0x47df90, 8) , (const, 0x50e, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000053a, 8) , (unique, 0x2ed00, 4), (unique, 0x1000053a, 8) CAST (unique, 0x7580, 8), (unique, 0x7580, 8) PTRADD (ram, 0x47df90, 8) , (unique, 0x10000127, 8) , (const, 0x1, 8), (unique, 0x2ed00, 4) INT_2COMP (register, 0x4000, 4), (unique, 0x10000127, 8) CALLOTHER (const, 0x275, 4) , (register, 0x1660, 1)]
[ ---  BRANCH (ram, 0x417f90, 1)]
[(register, 0x108, 1) INT_NOTEQUAL (register, 0x4000, 4) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x417f7c, 1) , (unique, 0x1580, 1), (unique, 0x1580, 1) INT_SLESS (register, 0x4000, 4) , (const, 0x1, 4)]
[(unique, 0x1000011f, 8) CALLOTHER (const, 0x275, 4) , (register, 0x1660, 1)]
[ ---  CBRANCH (ram, 0x4181c8, 1) , (register, 0x108, 1)]
[(unique, 0x28a80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000542, 8), (unique, 0x10000542, 8) CAST (unique, 0x7580, 8), (unique, 0x7580, 8) PTRADD (ram, 0x47df90, 8) , (unique, 0x1000011f, 8) , (const, 0x1, 8)]
[(ram, 0x47df90, 8) MULTIEQUAL (ram, 0x47df90, 8) , (ram, 0x47df90, 8)]
[(ram, 0x47da38, 8) MULTIEQUAL (ram, 0x47da38, 8) , (ram, 0x47da38, 8)]
[(register, 0x40a8, 8) MULTIEQUAL (unique, 0x1000011f, 8) , (unique, 0x10000127, 8)]
[ ---  CBRANCH (ram, 0x4181c8, 1) , (register, 0x108, 1), (register, 0x108, 1) INT_NOTEQUAL (register, 0x4000, 4) , (const, 0x24, 4), (register, 0x4000, 4) MULTIEQUAL (unique, 0x28a80, 4) , (unique, 0x2ed00, 4)]
[ ---  CBRANCH (ram, 0x417fac, 1) , (register, 0x108, 1), (register, 0x108, 1) INT_EQUAL (register, 0x4000, 4) , (const, 0x22, 4)]
[ ---  CBRANCH (ram, 0x41837c, 1) , (register, 0x101, 1), (register, 0x101, 1) BOOL_AND (register, 0x108, 1) , (unique, 0x1000024c, 1), (unique, 0x1000024c, 1) INT_EQUAL (register, 0x4008, 8) , (const, 0x0, 8), (register, 0x108, 1) INT_EQUAL (register, 0x4000, 8) , (const, 0x0, 8)]
[(stack, 0xfffffffffffffff8, 8) INDIRECT (stack, 0xfffffffffffffff8, 8) , (const, 0x4e1, 4)]
[ ---  CALL (ram, 0x400d88, 8) , (unique, 0x10000389, 8) , (unique, 0x10000381, 8) , (const, 0x79, 4) , (unique, 0x10000391, 8), (unique, 0x10000391, 8) COPY (const, 0x451000, 8), (unique, 0x10000389, 8) COPY (const, 0x450fd0, 8), (unique, 0x10000381, 8) COPY (const, 0x450fa8, 8)]
[(ram, 0x47da38, 8) COPY (ram, 0x47da38, 8), (ram, 0x47da38, 8) INDIRECT (ram, 0x47da38, 8) , (const, 0x4e1, 4)]
[(ram, 0x47df90, 8) COPY (ram, 0x47df90, 8), (ram, 0x47df90, 8) INDIRECT (ram, 0x47df90, 8) , (const, 0x4e1, 4)]
[ ---  RETURN (const, 0x1, 4)]
[ ---  CBRANCH (ram, 0x418218, 1) , (unique, 0x18f80, 1), (unique, 0x18f80, 1) INT_EQUAL (register, 0x4000, 8) , (const, 0x0, 8)]
[(ram, 0x47da38, 8) INDIRECT (ram, 0x47da38, 8) , (const, 0x4b7, 4)]
[(ram, 0x47df90, 8) INDIRECT (ram, 0x47df90, 8) , (const, 0x4b7, 4)]
[(stack, 0xfffffffffffffff8, 8) INDIRECT (stack, 0xfffffffffffffff8, 8) , (const, 0x4b7, 4)]
[ ---  CALL (ram, 0x413448, 8) , (register, 0x40b8, 8)]
[(unique, 0x100004c8, 8) COPY (register, 0x40b8, 8), (register, 0x40b8, 8) COPY (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x417fb8, 1)]
[(ram, 0x47df90, 8) MULTIEQUAL (ram, 0x47df90, 8) , (ram, 0x47df90, 8)]
[(ram, 0x47da38, 8) MULTIEQUAL (ram, 0x47da38, 8) , (ram, 0x47da38, 8)]
[(register, 0x40a8, 8) MULTIEQUAL (unique, 0x1000011f, 8) , (register, 0x40a8, 8)]
[ ---  CBRANCH (ram, 0x417dcc, 1) , (unique, 0x1000035b, 1), (unique, 0x1000035b, 1) BOOL_OR (register, 0x108, 1) , (register, 0x108, 1), (register, 0x108, 1) INT_NOTEQUAL (register, 0x4008, 8) , (const, 0x0, 8), (register, 0x108, 1) INT_NOTEQUAL (register, 0x4000, 8) , (const, 0x0, 8)]
[(unique, 0x10000117, 8) CALLOTHER (const, 0x275, 4) , (register, 0x1660, 1)]
[(unique, 0x22280, 1) BOOL_AND (register, 0x108, 1) , (register, 0x108, 1), (register, 0x108, 1) INT_EQUAL (register, 0x4008, 8) , (const, 0x0, 8), (register, 0x108, 1) INT_EQUAL (register, 0x4000, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x418188, 1) , (register, 0x108, 1), (register, 0x108, 1) INT_EQUAL (unique, 0x28e00, 1) , (const, 0x2f, 1), (unique, 0x28e00, 1) LOAD (const, 0x1b1, 4) , (register, 0x40b8, 8)]
[ ---  CBRANCH (ram, 0x4181fc, 1) , (unique, 0x22280, 1)]
[(ram, 0x47da38, 8) INDIRECT (ram, 0x47da38, 8) , (const, 0x46c, 4)]
[(ram, 0x47df90, 8) INDIRECT (ram, 0x47df90, 8) , (const, 0x46c, 4)]
[(stack, 0xfffffffffffffff8, 8) INDIRECT (stack, 0xfffffffffffffff8, 8) , (const, 0x46c, 4)]
[(register, 0x4000, 8) CAST (unique, 0x1000054a, 8), (unique, 0x1000054a, 8) CALL (ram, 0x413540, 8) , (register, 0x40b8, 8) , (register, 0x4008, 8), (register, 0x4008, 8) INT_SEXT (register, 0x4000, 4)]
[ ---  BRANCH (ram, 0x41818c, 1)]
[(stack, 0xfffffffffffffff8, 8) MULTIEQUAL (stack, 0xfffffffffffffff8, 8) , (stack, 0xfffffffffffffff8, 8)]
[(ram, 0x47df90, 8) MULTIEQUAL (ram, 0x47df90, 8) , (ram, 0x47df90, 8)]
[(ram, 0x47da38, 8) MULTIEQUAL (ram, 0x47da38, 8) , (ram, 0x47da38, 8)]
[(unique, 0x100004d8, 8) COPY (register, 0x40b8, 8)]
[ ---  CBRANCH (const, 0x2, 1) , (register, 0x108, 1), (register, 0x108, 1) INT_NOTEQUAL (register, 0x4098, 8) , (const, 0x0, 8), (register, 0x4098, 8) MULTIEQUAL (register, 0x4000, 8) , (register, 0x4000, 8)]
[(unique, 0x100004e0, 8) COPY (register, 0x4098, 8)]
[ ---  CBRANCH (ram, 0x417de4, 1) , (unique, 0x22280, 1)]
[ ---  CALL (ram, 0x413448, 8) , (register, 0x40b8, 8)]
[(unique, 0x28a80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000552, 8), (unique, 0x10000552, 8) CAST (unique, 0x7580, 8), (unique, 0x7580, 8) PTRADD (unique, 0x10000420, 8) , (register, 0x40a8, 8) , (const, 0x1, 8), (register, 0x40a8, 8) MULTIEQUAL (unique, 0x10000117, 8) , (register, 0x40a8, 8)]
[(ram, 0x47da38, 8) INDIRECT (ram, 0x47da38, 8) , (const, 0x44a, 4), (ram, 0x47da38, 8) INDIRECT (ram, 0x47da38, 8) , (const, 0x43f, 4), (ram, 0x47da38, 8) MULTIEQUAL (ram, 0x47da38, 8) , (ram, 0x47da38, 8)]
[(ram, 0x47df90, 8) INDIRECT (ram, 0x47df90, 8) , (const, 0x44a, 4), (ram, 0x47df90, 8) INDIRECT (ram, 0x47df90, 8) , (const, 0x43f, 4), (ram, 0x47df90, 8) MULTIEQUAL (ram, 0x47df90, 8) , (ram, 0x47df90, 8)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x44a, 4), (stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x43f, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x44a, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x43f, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x44a, 4), (stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x43f, 4)]
[(stack, 0xfffffffffffffff8, 8) INDIRECT (stack, 0xfffffffffffffff8, 8) , (const, 0x44a, 4), (stack, 0xfffffffffffffff8, 8) INDIRECT (stack, 0xfffffffffffffff8, 8) , (const, 0x43f, 4)]
[(stack, 0xffffffffffffff58, 8) COPY (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x418164, 1) , (unique, 0x18f80, 1), (unique, 0x18f80, 1) INT_NOTEQUAL (register, 0x4000, 8) , (const, 0x0, 8), (register, 0x4000, 8) CAST (unique, 0x1000055a, 8), (unique, 0x1000055a, 8) CALL (ram, 0x412de8, 8) , (const, 0x1001, 8)]
[(stack, 0xffffffffffffff50, 8) COPY (const, 0x1001, 8)]
[(ram, 0x47df90, 8) MULTIEQUAL (ram, 0x47df90, 8) , (ram, 0x47df90, 8)]
[(ram, 0x47da38, 8) MULTIEQUAL (ram, 0x47da38, 8) , (ram, 0x47da38, 8)]
[(register, 0x40a8, 8) MULTIEQUAL (unique, 0x10000117, 8) , (register, 0x40a8, 8)]
[ ---  CBRANCH (ram, 0x41819c, 1) , (unique, 0x18e80, 1), (unique, 0x18e80, 1) INT_EQUAL (register, 0x4008, 8) , (const, 0x0, 8)]
[(ram, 0x47da38, 8) INDIRECT (ram, 0x47da38, 8) , (const, 0xa0, 4)]
[(ram, 0x47df90, 8) INDIRECT (ram, 0x47df90, 8) , (const, 0xa0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000562, 8) , (const, 0x16, 4), (unique, 0x10000562, 8) CAST (unique, 0x7580, 8), (unique, 0x7580, 8) PTRADD (unique, 0x10000420, 8) , (register, 0x40a8, 8) , (const, 0x1, 8)]
[(unique, 0x100004b0, 8) COPY (register, 0x40b8, 8), (register, 0x40b8, 8) COPY (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x417fb8, 1)]
[(unique, 0x28a80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x1000056a, 8), (unique, 0x1000056a, 8) CAST (unique, 0x7580, 8), (unique, 0x7580, 8) PTRADD (unique, 0x10000420, 8) , (register, 0x40a8, 8) , (const, 0x1, 8)]
[(unique, 0x10000510, 8) COPY (unique, 0x10000572, 8), (unique, 0x10000572, 8) CAST (register, 0x4008, 8)]
[(unique, 0x10000518, 8) COPY (register, 0x40b8, 8)]
[ ---  BRANCH (ram, 0x417e10, 1)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (unique, 0x10000518, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff34, 4) MULTIEQUAL (unique, 0x28a80, 4) , (unique, 0x28a80, 4)]
[(register, 0x40a8, 8) MULTIEQUAL (register, 0x40a8, 8) , (register, 0x40a8, 8)]
[(register, 0x4000, 8) PTRADD (unique, 0x12480, 8) , (const, 0xffffffffffffffff, 8) , (const, 0x1, 8), (unique, 0x12480, 8) PTRADD (register, 0x40b8, 8) , (unique, 0x10000582, 8) , (const, 0x1, 8), (unique, 0x10000582, 8) CAST (stack, 0xffffffffffffff50, 8), (register, 0x40b8, 8) MULTIEQUAL (register, 0x40b8, 8) , (register, 0x4000, 8), (stack, 0xffffffffffffff50, 8) MULTIEQUAL (unique, 0x10000510, 8) , (stack, 0xffffffffffffff50, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x6980, 8) , (const, 0x0, 1), (unique, 0x6980, 8) PTRADD (unique, 0x12480, 8) , (const, 0xffffffffffffffff, 8) , (const, 0x1, 8), (unique, 0x12480, 8) PTRADD (register, 0x40b8, 8) , (unique, 0x10000582, 8) , (const, 0x1, 8), (unique, 0x10000582, 8) CAST (stack, 0xffffffffffffff50, 8), (register, 0x40b8, 8) MULTIEQUAL (register, 0x40b8, 8) , (register, 0x4000, 8), (stack, 0xffffffffffffff50, 8) MULTIEQUAL (unique, 0x10000510, 8) , (stack, 0xffffffffffffff50, 8)]
[(ram, 0x47da38, 8) INDIRECT (ram, 0x47da38, 8) , (const, 0x109, 4), (ram, 0x47da38, 8) INDIRECT (ram, 0x47da38, 8) , (const, 0x107, 4), (ram, 0x47da38, 8) MULTIEQUAL (ram, 0x47da38, 8) , (ram, 0x47da38, 8)]
[(ram, 0x47df90, 8) INDIRECT (ram, 0x47df90, 8) , (const, 0x109, 4), (ram, 0x47df90, 8) INDIRECT (ram, 0x47df90, 8) , (const, 0x107, 4), (ram, 0x47df90, 8) MULTIEQUAL (ram, 0x47df90, 8) , (ram, 0x47df90, 8)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x109, 4), (stack, 0xffffffffffffff88, 4) MULTIEQUAL (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4)]
[(stack, 0xfffffffffffffff8, 8) INDIRECT (stack, 0xfffffffffffffff8, 8) , (const, 0x109, 4), (stack, 0xfffffffffffffff8, 8) MULTIEQUAL (stack, 0xfffffffffffffff8, 8) , (stack, 0xfffffffffffffff8, 8)]
[(unique, 0x10000440, 8) COPY (stack, 0xffffffffffffff80, 8), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x109, 4), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(unique, 0x10000428, 8) COPY (stack, 0xffffffffffffff78, 8), (stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x109, 4), (stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[ ---  CBRANCH (ram, 0x41822c, 1) , (unique, 0x18a80, 1), (unique, 0x18a80, 1) INT_SLESS (register, 0x4000, 4) , (const, 0x0, 4), (register, 0x4000, 4) CALL (ram, 0x4387e0, 8) , (const, 0x0, 4) , (unique, 0x10000371, 8) , (unique, 0x11f80, 8), (unique, 0x10000371, 8) COPY (const, 0x450f98, 8), (unique, 0x11f80, 8) CAST (unique, 0x1000057a, 8), (unique, 0x1000057a, 8) PTRSUB (register, 0x8, 8) , (const, 0xffffffffffffff78, 8)]
[(unique, 0x28a80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x1000058a, 8), (unique, 0x1000058a, 8) CAST (unique, 0x7580, 8), (unique, 0x7580, 8) PTRADD (unique, 0x10000420, 8) , (register, 0x40a8, 8) , (const, 0x1, 8)]
[ ---  BRANCH (ram, 0x418144, 1)]
[(stack, 0xffffffffffffff68, 8) COPY (stack, 0xffffffffffffff80, 8)]
[(ram, 0x47da38, 8) INDIRECT (ram, 0x47da38, 8) , (const, 0x12a, 4)]
[(ram, 0x47df90, 8) INDIRECT (ram, 0x47df90, 8) , (const, 0x12a, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x12a, 4)]
[(stack, 0xfffffffffffffff8, 8) INDIRECT (stack, 0xfffffffffffffff8, 8) , (const, 0x12a, 4)]
[(unique, 0x10000448, 8) COPY (stack, 0xffffffffffffff80, 8), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x12a, 4)]
[(unique, 0x10000430, 8) COPY (stack, 0xffffffffffffff78, 8), (stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x12a, 4)]
[ ---  CBRANCH (ram, 0x418234, 1) , (unique, 0x18a80, 1), (unique, 0x18a80, 1) INT_SLESS (register, 0x4000, 4) , (const, 0x0, 4), (register, 0x4000, 4) CALL (ram, 0x4387e0, 8) , (const, 0x0, 4) , (unique, 0x10000399, 8) , (unique, 0x11f80, 8), (unique, 0x10000399, 8) COPY (const, 0x451df8, 8), (unique, 0x11f80, 8) CAST (unique, 0x10000592, 8), (unique, 0x10000592, 8) PTRSUB (register, 0x8, 8) , (const, 0xffffffffffffff78, 8)]
[(unique, 0x28a80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x1000059a, 8), (unique, 0x1000059a, 8) CAST (unique, 0x7580, 8), (unique, 0x7580, 8) PTRADD (unique, 0x10000420, 8) , (register, 0x40a8, 8) , (const, 0x1, 8)]
[ ---  BRANCH (ram, 0x418144, 1)]
[(unique, 0x1000035c, 1) BOOL_OR (register, 0x108, 1) , (register, 0x108, 1), (register, 0x108, 1) INT_NOTEQUAL (unique, 0x10000440, 8) , (stack, 0xffffffffffffff80, 8), (register, 0x108, 1) INT_NOTEQUAL (unique, 0x10000428, 8) , (stack, 0xffffffffffffff78, 8)]
[(unique, 0x10000490, 8) COPY (register, 0x40b8, 8)]
[ ---  CBRANCH (ram, 0x4182a8, 1) , (unique, 0x1000035d, 1), (unique, 0x1000035d, 1) BOOL_AND (unique, 0x1000036d, 1) , (unique, 0x1000036e, 1), (unique, 0x1000036e, 1) BOOL_NEGATE (register, 0x108, 1), (unique, 0x1000036d, 1) BOOL_NEGATE (register, 0x108, 1), (register, 0x108, 1) INT_NOTEQUAL (unique, 0x10000440, 8) , (stack, 0xffffffffffffff80, 8), (register, 0x108, 1) INT_NOTEQUAL (unique, 0x10000428, 8) , (stack, 0xffffffffffffff78, 8)]
[(register, 0x40b0, 8) COPY (const, 0x0, 8)]
[(register, 0x40d8, 4) COPY (const, 0xffffff9c, 4)]
[(unique, 0x10000498, 8) COPY (register, 0x40b8, 8)]
[(unique, 0x100004f0, 8) COPY (unique, 0x10000428, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (register, 0x4000, 8)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (register, 0x4000, 8) , (register, 0x4000, 8)]
[(register, 0x40e0, 8) MULTIEQUAL (unique, 0x100004f0, 8) , (unique, 0x100004f8, 8)]
[(register, 0x40b8, 8) MULTIEQUAL (unique, 0x10000498, 8) , (unique, 0x100004a0, 8)]
[(register, 0x40b0, 8) MULTIEQUAL (register, 0x40b0, 8) , (register, 0x4000, 8)]
[(ram, 0x47da38, 8) INDIRECT (ram, 0x47da38, 8) , (const, 0x16e, 4), (ram, 0x47da38, 8) MULTIEQUAL (ram, 0x47da38, 8) , (ram, 0x47da38, 8)]
[(ram, 0x47df90, 8) INDIRECT (ram, 0x47df90, 8) , (const, 0x16e, 4), (ram, 0x47df90, 8) MULTIEQUAL (ram, 0x47df90, 8) , (ram, 0x47df90, 8)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x16e, 4), (stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x16e, 4), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x16e, 4), (stack, 0xffffffffffffff88, 4) MULTIEQUAL (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4)]
[(stack, 0xfffffffffffffff8, 8) INDIRECT (stack, 0xfffffffffffffff8, 8) , (const, 0x16e, 4), (stack, 0xfffffffffffffff8, 8) MULTIEQUAL (stack, 0xfffffffffffffff8, 8) , (stack, 0xfffffffffffffff8, 8)]
[ ---  CBRANCH (ram, 0x41830c, 1) , (unique, 0x18a80, 1), (unique, 0x18a80, 1) INT_SLESS (register, 0x4000, 4) , (const, 0x0, 4), (register, 0x4000, 4) CALL (ram, 0x4389d0, 8) , (register, 0x40d8, 4) , (unique, 0x10000379, 8) , (const, 0x80000, 8), (unique, 0x10000379, 8) PTRSUB (const, 0x0, 8) , (const, 0x450fa0, 8), (register, 0x40d8, 4) MULTIEQUAL (register, 0x40d8, 4) , (register, 0x4000, 4)]
[(unique, 0x28a80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100005a2, 8), (unique, 0x100005a2, 8) CAST (unique, 0x7580, 8), (unique, 0x7580, 8) PTRADD (unique, 0x10000420, 8) , (register, 0x40a8, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x418360, 1) , (unique, 0x18e80, 1), (unique, 0x18e80, 1) INT_NOTEQUAL (register, 0x40b0, 8) , (const, 0x0, 8)]
[(ram, 0x47da38, 8) INDIRECT (ram, 0x47da38, 8) , (const, 0x420, 4)]
[(ram, 0x47df90, 8) INDIRECT (ram, 0x47df90, 8) , (const, 0x420, 4)]
[(stack, 0xfffffffffffffff8, 8) INDIRECT (stack, 0xfffffffffffffff8, 8) , (const, 0x420, 4)]
[ ---  CALL (ram, 0x438428, 8) , (register, 0x40b0, 8)]
[ ---  BRANCH (ram, 0x418144, 1)]
[(ram, 0x47da38, 8) INDIRECT (ram, 0x47da38, 8) , (const, 0x17f, 4)]
[(ram, 0x47df90, 8) INDIRECT (ram, 0x47df90, 8) , (const, 0x17f, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x17f, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x17f, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x17f, 4)]
[(stack, 0xfffffffffffffff8, 8) INDIRECT (stack, 0xfffffffffffffff8, 8) , (const, 0x17f, 4)]
[ ---  CBRANCH (ram, 0x418268, 1) , (unique, 0x18a80, 1), (unique, 0x18a80, 1) INT_SLESS (register, 0x4000, 4) , (const, 0x0, 4), (register, 0x4000, 4) CALL (ram, 0x417548, 8) , (const, 0x0, 4) , (register, 0x4000, 4) , (unique, 0x11f80, 8), (unique, 0x11f80, 8) CAST (unique, 0x100005aa, 8), (unique, 0x100005aa, 8) PTRSUB (register, 0x8, 8) , (const, 0xffffffffffffff78, 8)]
[(unique, 0x28a80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100005b2, 8), (unique, 0x100005b2, 8) CAST (unique, 0x7580, 8), (unique, 0x7580, 8) PTRADD (unique, 0x10000420, 8) , (register, 0x40a8, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x41824c, 1) , (unique, 0x18f80, 1), (unique, 0x18f80, 1) INT_NOTEQUAL (register, 0x40b0, 8) , (const, 0x0, 8)]
[(ram, 0x47da38, 8) INDIRECT (ram, 0x47da38, 8) , (const, 0x406, 4)]
[(ram, 0x47df90, 8) INDIRECT (ram, 0x47df90, 8) , (const, 0x406, 4)]
[(stack, 0xfffffffffffffff8, 8) INDIRECT (stack, 0xfffffffffffffff8, 8) , (const, 0x406, 4)]
[ ---  CALL (ram, 0x438428, 8) , (register, 0x40b0, 8)]
[ ---  BRANCH (ram, 0x41824c, 1)]
[ ---  CBRANCH (ram, 0x417ed8, 1) , (unique, 0x18f80, 1), (unique, 0x18f80, 1) INT_NOTEQUAL (register, 0x40b0, 8) , (const, 0x0, 8)]
[(ram, 0x47da38, 8) INDIRECT (ram, 0x47da38, 8) , (const, 0x189, 4)]
[(ram, 0x47df90, 8) INDIRECT (ram, 0x47df90, 8) , (const, 0x189, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x189, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x189, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x189, 4)]
[(stack, 0xfffffffffffffff8, 8) INDIRECT (stack, 0xfffffffffffffff8, 8) , (const, 0x189, 4)]
[ ---  CBRANCH (ram, 0x418244, 1) , (unique, 0x18e00, 1), (unique, 0x18e00, 1) INT_NOTEQUAL (register, 0x4000, 4) , (const, 0x0, 4), (register, 0x4000, 4) CALL (ram, 0x438428, 8) , (register, 0x40b0, 8)]
[(unique, 0x10000450, 8) COPY (stack, 0xffffffffffffff80, 8), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(unique, 0x10000438, 8) COPY (stack, 0xffffffffffffff78, 8), (stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(ram, 0x47da38, 8) INDIRECT (ram, 0x47da38, 8) , (const, 0x194, 4), (ram, 0x47da38, 8) MULTIEQUAL (ram, 0x47da38, 8) , (ram, 0x47da38, 8)]
[(ram, 0x47df90, 8) INDIRECT (ram, 0x47df90, 8) , (const, 0x194, 4), (ram, 0x47df90, 8) MULTIEQUAL (ram, 0x47df90, 8) , (ram, 0x47df90, 8)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x194, 4), (stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x194, 4), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x194, 4), (stack, 0xffffffffffffff88, 4) MULTIEQUAL (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4)]
[(stack, 0xfffffffffffffff8, 8) INDIRECT (stack, 0xfffffffffffffff8, 8) , (const, 0x194, 4), (stack, 0xfffffffffffffff8, 8) MULTIEQUAL (stack, 0xfffffffffffffff8, 8) , (stack, 0xfffffffffffffff8, 8)]
[(unique, 0x10000527, 1) COPY (unique, 0x1000035c, 1)]
[ ---  CBRANCH (ram, 0x418244, 1) , (unique, 0x18f80, 1), (unique, 0x18f80, 1) INT_EQUAL (register, 0x4000, 8) , (const, 0x0, 8), (register, 0x4000, 8) CALL (ram, 0x438698, 8) , (register, 0x4000, 4)]
[(stack, 0xfffffffffffffff8, 8) MULTIEQUAL (stack, 0xfffffffffffffff8, 8) , (stack, 0xfffffffffffffff8, 8)]
[(ram, 0x47df90, 8) MULTIEQUAL (ram, 0x47df90, 8) , (ram, 0x47df90, 8)]
[(ram, 0x47da38, 8) MULTIEQUAL (ram, 0x47da38, 8) , (ram, 0x47da38, 8)]
[(unique, 0x28a80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100005ba, 8), (unique, 0x100005ba, 8) CAST (unique, 0x7580, 8), (unique, 0x7580, 8) PTRADD (unique, 0x10000420, 8) , (register, 0x40a8, 8) , (const, 0x1, 8)]
[(register, 0x4008, 4) MULTIEQUAL (unique, 0x28a80, 4) , (unique, 0x28a80, 4) , (unique, 0x28a80, 4)]
[(ram, 0x47da38, 8) INDIRECT (ram, 0x47da38, 8) , (const, 0x3ed, 4), (ram, 0x47da38, 8) MULTIEQUAL (ram, 0x47da38, 8) , (ram, 0x47da38, 8) , (ram, 0x47da38, 8)]
[(ram, 0x47df90, 8) INDIRECT (ram, 0x47df90, 8) , (const, 0x3ed, 4), (ram, 0x47df90, 8) MULTIEQUAL (ram, 0x47df90, 8) , (ram, 0x47df90, 8) , (ram, 0x47df90, 8)]
[(stack, 0xfffffffffffffff8, 8) INDIRECT (stack, 0xfffffffffffffff8, 8) , (const, 0x3ed, 4), (stack, 0xfffffffffffffff8, 8) MULTIEQUAL (stack, 0xfffffffffffffff8, 8) , (stack, 0xfffffffffffffff8, 8) , (stack, 0xfffffffffffffff8, 8)]
[ ---  CALL (ram, 0x417cd0, 8) , (register, 0x4000, 4)]
[ ---  BRANCH (ram, 0x418144, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100005c2, 8) , (const, 0x0, 4), (unique, 0x100005c2, 8) CAST (unique, 0x7580, 8), (unique, 0x7580, 8) PTRADD (unique, 0x10000420, 8) , (register, 0x40a8, 8) , (const, 0x1, 8)]
[(ram, 0x47da38, 8) INDIRECT (ram, 0x47da38, 8) , (const, 0x1ad, 4), (ram, 0x47da38, 8) INDIRECT (ram, 0x47da38, 8) , (const, 0x1a3, 4), (ram, 0x47da38, 8) MULTIEQUAL (unique, 0x100002f9, 8) , (ram, 0x47da38, 8) , (ram, 0x47da38, 8) , (ram, 0x47da38, 8) , (ram, 0x47da38, 8) , (ram, 0x47da38, 8) , (unique, 0x100002f9, 8) , (ram, 0x47da38, 8) , (unique, 0x100002f9, 8)]
[(ram, 0x47df90, 8) INDIRECT (ram, 0x47df90, 8) , (const, 0x1ad, 4), (ram, 0x47df90, 8) INDIRECT (ram, 0x47df90, 8) , (const, 0x1a3, 4), (ram, 0x47df90, 8) MULTIEQUAL (unique, 0x10000301, 8) , (ram, 0x47df90, 8) , (ram, 0x47df90, 8) , (ram, 0x47df90, 8) , (ram, 0x47df90, 8) , (ram, 0x47df90, 8) , (unique, 0x10000301, 8) , (ram, 0x47df90, 8) , (unique, 0x10000301, 8)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x1ad, 4), (stack, 0xffffffffffffff78, 8) MULTIEQUAL (unique, 0x10000339, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (unique, 0x10000339, 8) , (stack, 0xffffffffffffff78, 8) , (unique, 0x10000339, 8)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x1ad, 4), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (unique, 0x10000341, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (unique, 0x10000341, 8) , (stack, 0xffffffffffffff80, 8) , (unique, 0x10000341, 8)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x1ad, 4), (stack, 0xffffffffffffff88, 4) MULTIEQUAL (unique, 0x10000349, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (unique, 0x10000349, 4) , (stack, 0xffffffffffffff88, 4) , (unique, 0x10000349, 4)]
[(stack, 0xfffffffffffffff8, 8) INDIRECT (stack, 0xfffffffffffffff8, 8) , (const, 0x1ad, 4), (stack, 0xfffffffffffffff8, 8) MULTIEQUAL (unique, 0x1000034d, 8) , (stack, 0xfffffffffffffff8, 8) , (stack, 0xfffffffffffffff8, 8) , (stack, 0xfffffffffffffff8, 8) , (stack, 0xfffffffffffffff8, 8) , (stack, 0xfffffffffffffff8, 8) , (unique, 0x1000034d, 8) , (stack, 0xfffffffffffffff8, 8) , (unique, 0x1000034d, 8)]
[(register, 0x4000, 8) CALL (ram, 0x438470, 8) , (register, 0x4000, 8)]
[(unique, 0x10000528, 1) COPY (unique, 0x1000035e, 1), (unique, 0x1000035e, 1) MULTIEQUAL (unique, 0x10000520, 1) , (unique, 0x10000521, 1) , (unique, 0x10000522, 1) , (unique, 0x10000523, 1) , (unique, 0x10000524, 1) , (unique, 0x10000525, 1) , (unique, 0x10000526, 1) , (unique, 0x10000527, 1) , (unique, 0x1000035f, 1)]
[(unique, 0x1000035f, 1) MULTIEQUAL (unique, 0x10000528, 1) , (unique, 0x10000529, 1)]
[(unique, 0x100002f9, 8) MULTIEQUAL (ram, 0x47da38, 8) , (ram, 0x47da38, 8)]
[(unique, 0x10000301, 8) MULTIEQUAL (ram, 0x47df90, 8) , (ram, 0x47df90, 8)]
[(unique, 0x10000339, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(unique, 0x10000341, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(unique, 0x10000349, 4) MULTIEQUAL (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4)]
[(unique, 0x1000034d, 8) MULTIEQUAL (stack, 0xfffffffffffffff8, 8) , (stack, 0xfffffffffffffff8, 8)]
[ ---  CBRANCH (ram, 0x417f60, 1) , (unique, 0x100002ec, 1), (unique, 0x100002ec, 1) INT_NOTEQUAL (unique, 0x100002ed, 8) , (const, 0x0, 8), (unique, 0x100002ed, 8) MULTIEQUAL (register, 0x4000, 8) , (register, 0x4000, 8)]
[(unique, 0x10000520, 1) COPY (unique, 0x1000035f, 1)]
[ ---  CBRANCH (ram, 0x417ef8, 1) , (register, 0x108, 1), (register, 0x108, 1) INT_NOTEQUAL (unique, 0x10000254, 1) , (const, 0x0, 1), (unique, 0x10000254, 1) INT_AND (unique, 0x28e00, 1) , (const, 0xfb, 1), (unique, 0x28e00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x6200, 8), (unique, 0x6200, 8) PTRSUB (unique, 0x100002ed, 8) , (const, 0x12, 8)]
[ ---  CBRANCH (ram, 0x418104, 1) , (register, 0x108, 1), (register, 0x108, 1) INT_EQUAL (unique, 0x28e00, 1) , (const, 0x2e, 1), (unique, 0x28e00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x6200, 8), (unique, 0x6200, 8) PTRSUB (unique, 0x100002ed, 8) , (const, 0x13, 8)]
[(unique, 0x10000526, 1) COPY (unique, 0x1000035f, 1)]
[ ---  CBRANCH (ram, 0x417ef8, 1) , (unique, 0x18f00, 1), (unique, 0x18f00, 1) INT_EQUAL (unique, 0x28e00, 1) , (const, 0x0, 1), (unique, 0x28e00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x6200, 8), (unique, 0x6200, 8) PTRADD (unique, 0x100003f1, 8) , (const, 0x1, 8) , (const, 0x1, 8), (unique, 0x100003f1, 8) PTRSUB (unique, 0x100002ed, 8) , (const, 0x13, 8)]
[ ---  CBRANCH (ram, 0x417f28, 1) , (register, 0x108, 1), (register, 0x108, 1) INT_EQUAL (unique, 0x29000, 2) , (const, 0x2e, 2), (unique, 0x29000, 2) LOAD (const, 0x1b1, 4) , (unique, 0x100005ca, 8), (unique, 0x100005ca, 8) CAST (unique, 0x6300, 8), (unique, 0x6300, 8) PTRADD (unique, 0x10000409, 8) , (const, 0x1, 8) , (const, 0x1, 8), (unique, 0x10000409, 8) PTRSUB (unique, 0x100002ed, 8) , (const, 0x13, 8)]
[ ---  CBRANCH (ram, 0x417fe4, 1) , (unique, 0x10000363, 1), (unique, 0x10000363, 1) BOOL_NEGATE (unique, 0x10000362, 1), (unique, 0x10000362, 1) CAST (unique, 0x100005d2, 1), (unique, 0x100005d2, 1) INT_AND (unique, 0x1000035f, 1) , (register, 0x108, 1), (register, 0x108, 1) INT_EQUAL (unique, 0x10000438, 8) , (register, 0x40e0, 8)]
[ ---  CBRANCH (ram, 0x417fe4, 1) , (register, 0x108, 1), (register, 0x108, 1) INT_EQUAL (register, 0x4010, 8) , (stack, 0xffffffffffffff68, 8), (register, 0x4010, 8) LOAD (const, 0x1b1, 4) , (unique, 0x100003c9, 8), (unique, 0x100003c9, 8) PTRSUB (unique, 0x100002ed, 8) , (const, 0x0, 8)]
[(ram, 0x47da38, 8) INDIRECT (unique, 0x100002f9, 8) , (const, 0x27f, 4)]
[(ram, 0x47df90, 8) INDIRECT (unique, 0x10000301, 8) , (const, 0x27f, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (unique, 0x10000339, 8) , (const, 0x27f, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (unique, 0x10000341, 8) , (const, 0x27f, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (unique, 0x10000349, 4) , (const, 0x27f, 4)]
[(stack, 0xfffffffffffffff8, 8) INDIRECT (unique, 0x1000034d, 8) , (const, 0x27f, 4)]
[(unique, 0x10000522, 1) COPY (unique, 0x1000035f, 1)]
[ ---  CBRANCH (ram, 0x417ef8, 1) , (unique, 0x18a80, 1), (unique, 0x18a80, 1) INT_SLESS (register, 0x4000, 4) , (const, 0x0, 4), (register, 0x4000, 4) CALL (ram, 0x438838, 8) , (const, 0x0, 4) , (register, 0x4000, 4) , (unique, 0x11f80, 8) , (unique, 0x11f80, 8) , (const, 0x100, 4), (unique, 0x11f80, 8) CAST (unique, 0x100005d3, 8), (unique, 0x100005d3, 8) PTRSUB (register, 0x8, 8) , (const, 0xffffffffffffff78, 8), (unique, 0x11f80, 8) PTRSUB (unique, 0x100002ed, 8) , (const, 0x13, 8)]
[(unique, 0x10000523, 1) COPY (unique, 0x1000035f, 1)]
[ ---  CBRANCH (ram, 0x417ef8, 1) , (register, 0x108, 1), (register, 0x108, 1) INT_NOTEQUAL (unique, 0x12580, 4) , (const, 0x4000, 4), (unique, 0x12580, 4) INT_AND (stack, 0xffffffffffffff88, 4) , (const, 0xf000, 4)]
[(unique, 0x10000524, 1) COPY (unique, 0x1000035f, 1)]
[ ---  CBRANCH (ram, 0x417ef8, 1) , (register, 0x108, 1), (register, 0x108, 1) INT_NOTEQUAL (stack, 0xffffffffffffff78, 8) , (register, 0x40e0, 8)]
[(unique, 0x10000525, 1) COPY (unique, 0x1000035f, 1)]
[ ---  CBRANCH (ram, 0x417ef8, 1) , (register, 0x108, 1), (register, 0x108, 1) INT_NOTEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff68, 8)]
[(ram, 0x47da38, 8) INDIRECT (ram, 0x47da38, 8) , (const, 0x2b5, 4)]
[(ram, 0x47df90, 8) INDIRECT (ram, 0x47df90, 8) , (const, 0x2b5, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x2b5, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x2b5, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x2b5, 4)]
[(stack, 0xfffffffffffffff8, 8) INDIRECT (stack, 0xfffffffffffffff8, 8) , (const, 0x2b5, 4)]
[(unique, 0x10000478, 8) COPY (register, 0x40b8, 8)]
[(unique, 0x10000500, 8) COPY (stack, 0xffffffffffffff50, 8)]
[ ---  CBRANCH (ram, 0x4180b4, 1) , (register, 0x105, 1), (register, 0x105, 1) INT_LESSEQUAL (register, 0x4020, 8) , (register, 0x4000, 8), (register, 0x4020, 8) PTRADD (stack, 0xffffffffffffff38, 8) , (unique, 0x100001b3, 8) , (const, 0x1, 8), (unique, 0x100001b3, 8) INT_2COMP (unique, 0x100005e3, 8), (unique, 0x100005e3, 8) CAST (register, 0x40b8, 8), (register, 0x4000, 8) CAST (unique, 0x100005db, 8), (unique, 0x100005db, 8) CALL (ram, 0x414c40, 8) , (unique, 0x11f80, 8)]
[ ---  CBRANCH (ram, 0x4183b4, 1) , (unique, 0x18e80, 1), (unique, 0x18e80, 1) INT_NOTEQUAL (register, 0x4008, 8) , (const, 0x0, 8)]
[(register, 0x4008, 4) COPY (const, 0x22, 4)]
[(ram, 0x47da38, 8) INDIRECT (ram, 0x47da38, 8) , (const, 0x3ca, 4)]
[(ram, 0x47df90, 8) INDIRECT (ram, 0x47df90, 8) , (const, 0x3ca, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100005eb, 8) , (const, 0x22, 4), (unique, 0x100005eb, 8) CAST (unique, 0x7580, 8), (unique, 0x7580, 8) PTRADD (unique, 0x10000420, 8) , (register, 0x40a8, 8) , (const, 0x1, 8)]
[ ---  BRANCH (ram, 0x418128, 1)]
[(unique, 0x10000458, 8) COPY (register, 0x4000, 8)]
[ ---  CBRANCH (const, 0x2, 1) , (register, 0x105, 1), (register, 0x105, 1) INT_LESS (register, 0x4000, 8) , (stack, 0xffffffffffffff50, 8)]
[(unique, 0x10000460, 8) COPY (stack, 0xffffffffffffff50, 8)]
[(ram, 0x47da38, 8) INDIRECT (ram, 0x47da38, 8) , (const, 0x2de, 4)]
[(ram, 0x47df90, 8) INDIRECT (ram, 0x47df90, 8) , (const, 0x2de, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x2de, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x2de, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x2de, 4)]
[(stack, 0xfffffffffffffff8, 8) INDIRECT (stack, 0xfffffffffffffff8, 8) , (const, 0x2de, 4)]
[ ---  CBRANCH (ram, 0x4183a8, 1) , (unique, 0x18f80, 1), (unique, 0x18f80, 1) INT_EQUAL (register, 0x4000, 8) , (const, 0x0, 8), (register, 0x4000, 8) CAST (unique, 0x1000060b, 8), (unique, 0x1000060b, 8) CALL (ram, 0x413540, 8) , (register, 0x40b8, 8) , (unique, 0x10000603, 8), (unique, 0x10000603, 8) CAST (register, 0x40e0, 8), (register, 0x40e0, 8) CAST (unique, 0x100005fb, 8), (unique, 0x100005fb, 8) INT_MULT (unique, 0x100005f3, 8) , (const, 0x2, 8), (unique, 0x100005f3, 8) CAST (unique, 0x22400, 8), (unique, 0x22400, 8) MULTIEQUAL (unique, 0x10000458, 8) , (unique, 0x10000460, 8)]
[(unique, 0x28a80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000613, 8), (unique, 0x10000613, 8) CAST (unique, 0x7580, 8), (unique, 0x7580, 8) PTRADD (unique, 0x10000420, 8) , (register, 0x40a8, 8) , (const, 0x1, 8)]
[ ---  BRANCH (ram, 0x418128, 1)]
[(ram, 0x47da38, 8) INDIRECT (ram, 0x47da38, 8) , (const, 0x302, 4)]
[(ram, 0x47df90, 8) INDIRECT (ram, 0x47df90, 8) , (const, 0x302, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x302, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x302, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x302, 4)]
[(stack, 0xfffffffffffffff8, 8) INDIRECT (stack, 0xfffffffffffffff8, 8) , (const, 0x302, 4)]
[(register, 0x4000, 8) CAST (unique, 0x10000643, 8), (unique, 0x10000643, 8) CALL (ram, 0x400250, 8) , (unique, 0x12480, 8) , (unique, 0x12480, 8), (unique, 0x12480, 8) PTRADD (register, 0x4000, 8) , (unique, 0x1000063b, 8) , (const, 0x1, 8), (unique, 0x1000063b, 8) CAST (register, 0x4000, 8), (register, 0x4000, 8) PTRADD (register, 0x40e0, 8) , (unique, 0x100001c3, 8) , (const, 0x1, 8), (unique, 0x100001c3, 8) INT_2COMP (unique, 0x10000633, 8), (unique, 0x10000633, 8) CAST (register, 0x4010, 8), (register, 0x4010, 8) PTRADD (register, 0x40b8, 8) , (unique, 0x1000062b, 8) , (const, 0x1, 8), (unique, 0x1000062b, 8) CAST (unique, 0x100003e1, 8), (unique, 0x100003e1, 8) PTRADD (stack, 0xffffffffffffff50, 8) , (unique, 0x100001bb, 8) , (const, 0x1, 8), (unique, 0x100001bb, 8) INT_2COMP (unique, 0x10000623, 8), (unique, 0x10000623, 8) CAST (stack, 0xffffffffffffff38, 8), (unique, 0x12480, 8) PTRADD (register, 0x4000, 8) , (unique, 0x1000061b, 8) , (const, 0x1, 8), (unique, 0x1000061b, 8) CAST (register, 0x4020, 8)]
[(unique, 0x10000508, 8) COPY (register, 0x40e0, 8)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (unique, 0x10000500, 8) , (unique, 0x10000508, 8)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x312, 4), (stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x312, 4), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x312, 4), (stack, 0xffffffffffffff88, 4) MULTIEQUAL (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4)]
[(stack, 0xfffffffffffffff8, 8) INDIRECT (stack, 0xfffffffffffffff8, 8) , (const, 0x312, 4), (stack, 0xfffffffffffffff8, 8) MULTIEQUAL (stack, 0xfffffffffffffff8, 8) , (stack, 0xfffffffffffffff8, 8)]
[(ram, 0x47da38, 8) INDIRECT (ram, 0x47da38, 8) , (const, 0x318, 4), (ram, 0x47da38, 8) INDIRECT (ram, 0x47da38, 8) , (const, 0x312, 4), (ram, 0x47da38, 8) MULTIEQUAL (ram, 0x47da38, 8) , (ram, 0x47da38, 8)]
[(ram, 0x47df90, 8) INDIRECT (ram, 0x47df90, 8) , (const, 0x318, 4), (ram, 0x47df90, 8) INDIRECT (ram, 0x47df90, 8) , (const, 0x312, 4), (ram, 0x47df90, 8) MULTIEQUAL (ram, 0x47df90, 8) , (ram, 0x47df90, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x6980, 8) , (const, 0x2f, 1), (unique, 0x6980, 8) CAST (unique, 0x10000653, 8), (unique, 0x10000653, 8) INT_ADD (register, 0x4000, 8) , (const, 0xffffffffffffffff, 8), (register, 0x4000, 8) CALL (ram, 0x400250, 8) , (register, 0x4018, 8) , (unique, 0x11f80, 8) , (register, 0x4000, 8), (register, 0x4018, 8) PTRADD (stack, 0xffffffffffffff38, 8) , (unique, 0x100001cb, 8) , (const, 0x1, 8), (unique, 0x100001cb, 8) INT_2COMP (unique, 0x1000064b, 8), (unique, 0x1000064b, 8) CAST (register, 0x4000, 8), (stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (register, 0x4000, 8)]
[(register, 0x4000, 8) CAST (unique, 0x1000065b, 8), (unique, 0x1000065b, 8) INT_ADD (register, 0x4000, 8) , (const, 0xffffffffffffffff, 8), (register, 0x4000, 8) CALL (ram, 0x400250, 8) , (register, 0x4018, 8) , (unique, 0x11f80, 8) , (register, 0x4000, 8), (register, 0x4018, 8) PTRADD (stack, 0xffffffffffffff38, 8) , (unique, 0x100001cb, 8) , (const, 0x1, 8), (unique, 0x100001cb, 8) INT_2COMP (unique, 0x1000064b, 8), (unique, 0x1000064b, 8) CAST (register, 0x4000, 8), (stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (register, 0x4000, 8)]
[(register, 0x4000, 8) COPY (unique, 0x10000450, 8)]
[(unique, 0x100004a0, 8) COPY (register, 0x40b8, 8), (register, 0x40b8, 8) MULTIEQUAL (unique, 0x10000478, 8) , (register, 0x4000, 8)]
[(unique, 0x100004f8, 8) COPY (unique, 0x10000438, 8)]
[ ---  CBRANCH (ram, 0x418288, 1) , (unique, 0x10000265, 1), (unique, 0x10000265, 1) BOOL_OR (register, 0x108, 1) , (unique, 0x10000252, 1), (unique, 0x10000252, 1) INT_NOTEQUAL (unique, 0x10000448, 8) , (unique, 0x10000450, 8), (register, 0x108, 1) INT_NOTEQUAL (unique, 0x10000430, 8) , (unique, 0x10000438, 8)]
[(ram, 0x47da38, 8) INDIRECT (ram, 0x47da38, 8) , (const, 0x34a, 4)]
[(ram, 0x47df90, 8) INDIRECT (ram, 0x47df90, 8) , (const, 0x34a, 4)]
[(stack, 0xfffffffffffffff8, 8) INDIRECT (stack, 0xfffffffffffffff8, 8) , (const, 0x34a, 4)]
[ ---  CBRANCH (ram, 0x418338, 1) , (unique, 0x18e00, 1), (unique, 0x18e00, 1) INT_NOTEQUAL (register, 0x4000, 4) , (const, 0x0, 4), (register, 0x4000, 4) CALL (ram, 0x438428, 8) , (register, 0x4000, 8)]
[(unique, 0x12480, 8) PTRADD (register, 0x40b8, 8) , (unique, 0x10000663, 8) , (const, 0x1, 8), (unique, 0x10000663, 8) CAST (stack, 0xffffffffffffff50, 8)]
[(stack, 0xfffffffffffffff8, 8) MULTIEQUAL (stack, 0xfffffffffffffff8, 8) , (stack, 0xfffffffffffffff8, 8)]
[(ram, 0x47df90, 8) MULTIEQUAL (ram, 0x47df90, 8) , (ram, 0x47df90, 8)]
[(ram, 0x47da38, 8) MULTIEQUAL (ram, 0x47da38, 8) , (ram, 0x47da38, 8)]
[(register, 0x4098, 8) MULTIEQUAL (unique, 0x12480, 8) , (unique, 0x12480, 8)]
[ ---  CBRANCH (ram, 0x418324, 1) , (register, 0x108, 1), (register, 0x108, 1) INT_EQUAL (unique, 0x12480, 8) , (stack, 0xffffffffffffff38, 8), (unique, 0x12480, 8) PTRADD (register, 0x40b8, 8) , (unique, 0x1000066b, 8) , (const, 0x1, 8), (unique, 0x1000066b, 8) CAST (register, 0x4000, 8), (register, 0x4000, 8) PTRADD (stack, 0xffffffffffffff50, 8) , (const, 0xffffffffffffffff, 8) , (const, 0x1, 8), (register, 0x40b8, 8) MULTIEQUAL (unique, 0x10000490, 8) , (register, 0x40b8, 8), (stack, 0xffffffffffffff38, 8) MULTIEQUAL (register, 0x4000, 8) , (register, 0x4000, 8), (stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(register, 0x4008, 8) PTRADD (stack, 0xffffffffffffff38, 8) , (const, 0xffffffffffffffff, 8) , (const, 0x1, 8)]
[(ram, 0x47da38, 8) INDIRECT (ram, 0x47da38, 8) , (const, 0x3a8, 4)]
[(ram, 0x47df90, 8) INDIRECT (ram, 0x47df90, 8) , (const, 0x3a8, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x6980, 8) , (const, 0x2f, 1), (unique, 0x6980, 8) PTRADD (unique, 0x12480, 8) , (const, 0xffffffffffffffff, 8) , (const, 0x1, 8)]
[ ---  BRANCH (ram, 0x4182c0, 1)]
[(ram, 0x47da38, 8) INDIRECT (ram, 0x47da38, 8) , (const, 0x376, 4), (ram, 0x47da38, 8) MULTIEQUAL (ram, 0x47da38, 8) , (ram, 0x47da38, 8)]
[(ram, 0x47df90, 8) INDIRECT (ram, 0x47df90, 8) , (const, 0x376, 4), (ram, 0x47df90, 8) MULTIEQUAL (ram, 0x47df90, 8) , (ram, 0x47df90, 8)]
[(stack, 0xfffffffffffffff8, 8) INDIRECT (stack, 0xfffffffffffffff8, 8) , (const, 0x376, 4)]
[ ---  CALL (ram, 0x400240, 8) , (register, 0x40b8, 8) , (stack, 0xffffffffffffff38, 8) , (register, 0x4098, 8), (register, 0x4098, 8) PTRADD (register, 0x4098, 8) , (unique, 0x10000223, 8) , (const, 0x1, 8), (unique, 0x10000223, 8) INT_2COMP (unique, 0x10000673, 8), (unique, 0x10000673, 8) CAST (stack, 0xffffffffffffff38, 8), (stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (register, 0x4008, 8)]
[ ---  CBRANCH (ram, 0x4182e8, 1) , (unique, 0x18e80, 1), (unique, 0x18e80, 1) INT_EQUAL (register, 0x4008, 8) , (const, 0x0, 8)]
[(ram, 0x47da38, 8) INDIRECT (ram, 0x47da38, 8) , (const, 0x37c, 4)]
[(ram, 0x47df90, 8) INDIRECT (ram, 0x47df90, 8) , (const, 0x37c, 4)]
[(stack, 0xfffffffffffffff8, 8) INDIRECT (stack, 0xfffffffffffffff8, 8) , (const, 0x37c, 4)]
[(register, 0x4000, 8) CAST (unique, 0x10000683, 8), (unique, 0x10000683, 8) CALL (ram, 0x413540, 8) , (register, 0x40b8, 8) , (unique, 0x1000067b, 8), (unique, 0x1000067b, 8) CAST (register, 0x4098, 8)]
[(stack, 0xfffffffffffffff8, 8) MULTIEQUAL (stack, 0xfffffffffffffff8, 8) , (stack, 0xfffffffffffffff8, 8)]
[(ram, 0x47da38, 8) INDIRECT (ram, 0x47da38, 8) , (const, 0x393, 4), (ram, 0x47da38, 8) MULTIEQUAL (ram, 0x47da38, 8) , (ram, 0x47da38, 8)]
[(ram, 0x47df90, 8) INDIRECT (ram, 0x47df90, 8) , (const, 0x393, 4), (ram, 0x47df90, 8) MULTIEQUAL (ram, 0x47df90, 8) , (ram, 0x47df90, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000068b, 8) , (stack, 0xffffffffffffff34, 4), (unique, 0x1000068b, 8) CAST (unique, 0x7580, 8), (unique, 0x7580, 8) PTRADD (unique, 0x10000420, 8) , (register, 0x40a8, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (const, 0x2, 1) , (register, 0x108, 1), (register, 0x108, 1) INT_NOTEQUAL (stack, 0xffffffffffffff58, 8) , (const, 0x0, 8), (stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (register, 0x4000, 8)]
[(unique, 0x100004a8, 8) COPY (stack, 0xffffffffffffff58, 8)]
[(unique, 0x28a80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000693, 8), (unique, 0x10000693, 8) CAST (unique, 0x7580, 8), (unique, 0x7580, 8) PTRADD (unique, 0x10000420, 8) , (register, 0x40a8, 8) , (const, 0x1, 8)]
[ ---  BRANCH (ram, 0x418144, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000069b, 8) , (const, 0x0, 4), (unique, 0x1000069b, 8) CAST (unique, 0x7580, 8), (unique, 0x7580, 8) PTRADD (unique, 0x10000420, 8) , (register, 0x40a8, 8) , (const, 0x1, 8)]
[(ram, 0x47da38, 8) INDIRECT (ram, 0x47da38, 8) , (const, 0x1fd, 4), (ram, 0x47da38, 8) INDIRECT (unique, 0x100002f9, 8) , (const, 0x1f3, 4)]
[(ram, 0x47df90, 8) INDIRECT (ram, 0x47df90, 8) , (const, 0x1fd, 4), (ram, 0x47df90, 8) INDIRECT (unique, 0x10000301, 8) , (const, 0x1f3, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (unique, 0x10000339, 8) , (const, 0x1fd, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (unique, 0x10000341, 8) , (const, 0x1fd, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (unique, 0x10000349, 4) , (const, 0x1fd, 4)]
[(stack, 0xfffffffffffffff8, 8) INDIRECT (unique, 0x1000034d, 8) , (const, 0x1fd, 4)]
[(register, 0x4000, 8) CALL (ram, 0x438470, 8) , (register, 0x4000, 8)]
[(unique, 0x10000529, 1) COPY (unique, 0x10000362, 1)]
[ ---  CBRANCH (ram, 0x418210, 1) , (unique, 0x18e00, 1), (unique, 0x18e00, 1) INT_NOTEQUAL (unique, 0x28a80, 4) , (const, 0x0, 4), (unique, 0x28a80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100006a3, 8), (unique, 0x100006a3, 8) CAST (unique, 0x7580, 8), (unique, 0x7580, 8) PTRADD (unique, 0x10000420, 8) , (register, 0x40a8, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x41811c, 1) , (unique, 0x1000035f, 1)]
[(ram, 0x47da38, 8) INDIRECT (unique, 0x100002f9, 8) , (const, 0x20d, 4)]
[(ram, 0x47df90, 8) INDIRECT (unique, 0x10000301, 8) , (const, 0x20d, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (unique, 0x10000339, 8) , (const, 0x20d, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (unique, 0x10000341, 8) , (const, 0x20d, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (unique, 0x10000349, 4) , (const, 0x20d, 4)]
[(stack, 0xfffffffffffffff8, 8) INDIRECT (unique, 0x1000034d, 8) , (const, 0x20d, 4)]
[ ---  CALL (ram, 0x4385c0, 8) , (register, 0x4000, 8)]
[(unique, 0x10000521, 1) COPY (unique, 0x10000365, 1), (unique, 0x10000365, 1) COPY (const, 0x0, 1)]
[ ---  BRANCH (ram, 0x417ef8, 1)]
[(register, 0x4008, 4) COPY (const, 0x2, 4)]
[(ram, 0x47da38, 8) INDIRECT (unique, 0x100002f9, 8) , (const, 0x213, 4)]
[(ram, 0x47df90, 8) INDIRECT (unique, 0x10000301, 8) , (const, 0x213, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100006ab, 8) , (const, 0x2, 4), (unique, 0x100006ab, 8) CAST (unique, 0x7580, 8)]
[(register, 0x4008, 4) MULTIEQUAL (register, 0x4008, 4) , (unique, 0x28a80, 4) , (register, 0x4008, 4) , (unique, 0x28a80, 4)]
[(ram, 0x47da38, 8) INDIRECT (ram, 0x47da38, 8) , (const, 0x218, 4), (ram, 0x47da38, 8) MULTIEQUAL (ram, 0x47da38, 8) , (ram, 0x47da38, 8) , (ram, 0x47da38, 8) , (unique, 0x100002f9, 8)]
[(ram, 0x47df90, 8) INDIRECT (ram, 0x47df90, 8) , (const, 0x218, 4), (ram, 0x47df90, 8) MULTIEQUAL (ram, 0x47df90, 8) , (ram, 0x47df90, 8) , (ram, 0x47df90, 8) , (unique, 0x10000301, 8)]
[(stack, 0xfffffffffffffff8, 8) INDIRECT (stack, 0xfffffffffffffff8, 8) , (const, 0x218, 4), (stack, 0xfffffffffffffff8, 8) MULTIEQUAL (unique, 0x1000034d, 8) , (stack, 0xfffffffffffffff8, 8) , (stack, 0xfffffffffffffff8, 8) , (unique, 0x1000034d, 8)]
[ ---  CALL (ram, 0x438428, 8) , (register, 0x4000, 8)]
[(unique, 0x10000480, 8) COPY (register, 0x40b8, 8)]
[(stack, 0xfffffffffffffff8, 8) MULTIEQUAL (stack, 0xfffffffffffffff8, 8) , (stack, 0xfffffffffffffff8, 8) , (stack, 0xfffffffffffffff8, 8) , (stack, 0xfffffffffffffff8, 8) , (stack, 0xfffffffffffffff8, 8) , (stack, 0xfffffffffffffff8, 8) , (stack, 0xfffffffffffffff8, 8)]
[(ram, 0x47df90, 8) MULTIEQUAL (ram, 0x47df90, 8) , (ram, 0x47df90, 8) , (ram, 0x47df90, 8) , (ram, 0x47df90, 8) , (ram, 0x47df90, 8) , (ram, 0x47df90, 8) , (ram, 0x47df90, 8)]
[(ram, 0x47da38, 8) MULTIEQUAL (ram, 0x47da38, 8) , (ram, 0x47da38, 8) , (ram, 0x47da38, 8) , (ram, 0x47da38, 8) , (ram, 0x47da38, 8) , (ram, 0x47da38, 8) , (ram, 0x47da38, 8)]
[(register, 0x40b8, 8) MULTIEQUAL (unique, 0x10000480, 8) , (unique, 0x100004a0, 8) , (register, 0x40b8, 8) , (register, 0x40b8, 8) , (register, 0x40b8, 8) , (register, 0x40b8, 8) , (register, 0x40b8, 8)]
[(register, 0x4008, 4) MULTIEQUAL (register, 0x4008, 4) , (unique, 0x28a80, 4) , (register, 0x4008, 4) , (unique, 0x28a80, 4) , (unique, 0x28a80, 4) , (unique, 0x28a80, 4) , (unique, 0x28a80, 4)]
[ ---  CBRANCH (ram, 0x418160, 1) , (unique, 0x18e80, 1), (unique, 0x18e80, 1) INT_EQUAL (stack, 0xffffffffffffff58, 8) , (const, 0x0, 8)]
[(ram, 0x47da38, 8) INDIRECT (ram, 0x47da38, 8) , (const, 0x22c, 4)]
[(ram, 0x47df90, 8) INDIRECT (ram, 0x47df90, 8) , (const, 0x22c, 4)]
[(stack, 0xfffffffffffffff8, 8) INDIRECT (stack, 0xfffffffffffffff8, 8) , (const, 0x22c, 4)]
[ ---  CALL (ram, 0x413448, 8) , (register, 0x40b8, 8)]
[(stack, 0xfffffffffffffff8, 8) MULTIEQUAL (stack, 0xfffffffffffffff8, 8) , (stack, 0xfffffffffffffff8, 8)]
[(ram, 0x47da38, 8) INDIRECT (ram, 0x47da38, 8) , (const, 0x235, 4), (ram, 0x47da38, 8) MULTIEQUAL (ram, 0x47da38, 8) , (ram, 0x47da38, 8)]
[(ram, 0x47df90, 8) INDIRECT (ram, 0x47df90, 8) , (const, 0x235, 4), (ram, 0x47df90, 8) MULTIEQUAL (ram, 0x47df90, 8) , (ram, 0x47df90, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100006b3, 8) , (register, 0x4008, 4), (unique, 0x100006b3, 8) CAST (unique, 0x7580, 8), (unique, 0x7580, 8) PTRADD (unique, 0x10000420, 8) , (register, 0x40a8, 8) , (const, 0x1, 8)]
[(stack, 0xfffffffffffffff8, 8) MULTIEQUAL (stack, 0xfffffffffffffff8, 8) , (stack, 0xfffffffffffffff8, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(ram, 0x47df90, 8) MULTIEQUAL (ram, 0x47df90, 8) , (ram, 0x47df90, 8)]
[(ram, 0x47da38, 8) MULTIEQUAL (ram, 0x47da38, 8) , (ram, 0x47da38, 8)]
[ ---  CBRANCH (ram, 0x417fb0, 1) , (unique, 0x1000028b, 1), (unique, 0x1000028b, 1) BOOL_AND (register, 0x108, 1) , (unique, 0x10000358, 1), (register, 0x108, 1) INT_NOTEQUAL (register, 0x4008, 8) , (const, 0x0, 8), (unique, 0x10000358, 1) INT_EQUAL (register, 0x4000, 8) , (const, 0x0, 8)]
[(ram, 0x47da38, 8) INDIRECT (ram, 0x47da38, 8) , (const, 0x25e, 4)]
[(ram, 0x47df90, 8) INDIRECT (ram, 0x47df90, 8) , (const, 0x25e, 4)]
[(stack, 0xfffffffffffffff8, 8) INDIRECT (stack, 0xfffffffffffffff8, 8) , (const, 0x25e, 4)]
[ ---  CALL (ram, 0x413448, 8) , (stack, 0xffffffffffffff58, 8)]
[(unique, 0x100004b8, 8) COPY (register, 0x40b8, 8), (register, 0x40b8, 8) COPY (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x417fb8, 1)]
[(stack, 0xfffffffffffffff8, 8) MULTIEQUAL (stack, 0xfffffffffffffff8, 8) , (stack, 0xfffffffffffffff8, 8) , (stack, 0xfffffffffffffff8, 8)]
[(ram, 0x47df90, 8) MULTIEQUAL (ram, 0x47df90, 8) , (ram, 0x47df90, 8) , (ram, 0x47df90, 8)]
[(ram, 0x47da38, 8) MULTIEQUAL (ram, 0x47da38, 8) , (ram, 0x47da38, 8) , (ram, 0x47da38, 8)]
[(unique, 0x100004c0, 8) COPY (register, 0x40b8, 8), (register, 0x40b8, 8) COPY (const, 0x0, 8)]
[(ram, 0x47df90, 8) MULTIEQUAL (ram, 0x47df90, 8) , (ram, 0x47df90, 8) , (ram, 0x47df90, 8) , (ram, 0x47df90, 8) , (ram, 0x47df90, 8) , (ram, 0x47df90, 8) , (ram, 0x47df90, 8) , (ram, 0x47df90, 8) , (ram, 0x47df90, 8)]
[(register, 0x4000, 8) COPY (register, 0x40b8, 8), (register, 0x40b8, 8) MULTIEQUAL (unique, 0x100004b0, 8) , (unique, 0x100004b8, 8) , (unique, 0x100004c0, 8) , (unique, 0x100004c8, 8) , (unique, 0x100004d0, 8) , (unique, 0x100004d8, 8) , (unique, 0x100004e0, 8) , (register, 0x40b8, 8) , (unique, 0x100004a8, 8)]
[ ---  CBRANCH (ram, 0x41834c, 1) , (unique, 0x18e80, 1), (unique, 0x18e80, 1) INT_NOTEQUAL (stack, 0xfffffffffffffff8, 8) , (ram, 0x47da38, 8), (ram, 0x47da38, 8) MULTIEQUAL (ram, 0x47da38, 8) , (ram, 0x47da38, 8) , (ram, 0x47da38, 8) , (ram, 0x47da38, 8) , (ram, 0x47da38, 8) , (ram, 0x47da38, 8) , (ram, 0x47da38, 8) , (ram, 0x47da38, 8) , (ram, 0x47da38, 8), (stack, 0xfffffffffffffff8, 8) MULTIEQUAL (stack, 0xfffffffffffffff8, 8) , (stack, 0xfffffffffffffff8, 8) , (stack, 0xfffffffffffffff8, 8) , (stack, 0xfffffffffffffff8, 8) , (stack, 0xfffffffffffffff8, 8) , (stack, 0xfffffffffffffff8, 8) , (stack, 0xfffffffffffffff8, 8) , (stack, 0xfffffffffffffff8, 8) , (stack, 0xfffffffffffffff8, 8)]
[(ram, 0x47da38, 8) COPY (ram, 0x47da38, 8)]
[(ram, 0x47df90, 8) COPY (ram, 0x47df90, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x4000, 8)]
[(stack, 0xfffffffffffffff8, 8) INDIRECT (stack, 0xfffffffffffffff8, 8) , (const, 0xd5, 4)]
[ ---  CALL (ram, 0x4199e0, 8)]
[(ram, 0x47da38, 8) COPY (ram, 0x47da38, 8), (ram, 0x47da38, 8) INDIRECT (ram, 0x47da38, 8) , (const, 0xd5, 4)]
[(ram, 0x47df90, 8) COPY (ram, 0x47df90, 8), (ram, 0x47df90, 8) INDIRECT (ram, 0x47df90, 8) , (const, 0xd5, 4)]
[ ---  RETURN (const, 0x1, 4)]
