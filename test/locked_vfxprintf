[(stack, 0xfffffffffffffff8, 8) COPY (ram, 0x47da38, 8)]
[(unique, 0x10000166, 8) COPY (register, 0x4008, 8)]
[ ---  CBRANCH (ram, 0x406a14, 1) , (unique, 0x1580, 1), (unique, 0x1580, 1) INT_SLESS (unique, 0x28500, 4) , (const, 0x1, 4), (unique, 0x28500, 4) LOAD (const, 0x1b1, 4) , (unique, 0x6400, 8), (unique, 0x6400, 8) PTRSUB (register, 0x4000, 8) , (const, 0xc0, 8)]
[(ram, 0x47da38, 8) INDIRECT (ram, 0x47da38, 8) , (const, 0x160, 4)]
[(ram, 0x47df90, 8) INDIRECT (ram, 0x47df90, 8) , (const, 0x160, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (register, 0x4020, 8) , (const, 0x160, 4), (register, 0x4020, 8) LOAD (const, 0x1b1, 4) , (register, 0x4010, 8)]
[(stack, 0xffffffffffffffc8, 8) INDIRECT (register, 0x4028, 8) , (const, 0x160, 4), (register, 0x4028, 8) LOAD (const, 0x1b1, 4) , (unique, 0x28280, 8), (unique, 0x28280, 8) PTRADD (register, 0x4010, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (register, 0x4010, 8) , (const, 0x160, 4), (register, 0x4010, 8) LOAD (const, 0x1b1, 4) , (unique, 0x7b80, 8), (unique, 0x7b80, 8) PTRADD (register, 0x4010, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[(stack, 0xffffffffffffffd8, 8) INDIRECT (register, 0x4018, 8) , (const, 0x160, 4), (register, 0x4018, 8) LOAD (const, 0x1b1, 4) , (unique, 0x28280, 8), (unique, 0x28280, 8) PTRADD (register, 0x4010, 8) , (const, 0x3, 8) , (const, 0x8, 8)]
[(stack, 0xffffffffffffffe8, 8) INDIRECT (unique, 0x10000166, 8) , (const, 0x160, 4)]
[(stack, 0xfffffffffffffff0, 8) INDIRECT (stack, 0xfffffffffffffff0, 8) , (const, 0x160, 4)]
[(stack, 0xfffffffffffffff8, 8) INDIRECT (stack, 0xfffffffffffffff8, 8) , (const, 0x160, 4)]
[(register, 0x4098, 8) INT_ZEXT (register, 0x4000, 4), (register, 0x4000, 4) CALL (ram, 0x428030, 8) , (register, 0x4000, 8) , (register, 0x4008, 8) , (unique, 0x11f80, 8), (unique, 0x11f80, 8) PTRSUB (register, 0x8, 8) , (const, 0xffffffffffffffc0, 8)]
[ ---  BRANCH (ram, 0x4069bc, 1)]
[(ram, 0x47da38, 8) INDIRECT (ram, 0x47da38, 8) , (const, 0x3c, 4)]
[(ram, 0x47df90, 8) INDIRECT (ram, 0x47df90, 8) , (const, 0x3c, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x3c, 4)]
[(stack, 0xffffffffffffffc8, 8) INDIRECT (stack, 0xffffffffffffffc8, 8) , (const, 0x3c, 4)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0x3c, 4)]
[(stack, 0xffffffffffffffd8, 8) INDIRECT (stack, 0xffffffffffffffd8, 8) , (const, 0x3c, 4)]
[(stack, 0xffffffffffffffe8, 8) INDIRECT (unique, 0x10000166, 8) , (const, 0x3c, 4)]
[(stack, 0xfffffffffffffff0, 8) INDIRECT (stack, 0xfffffffffffffff0, 8) , (const, 0x3c, 4)]
[(stack, 0xfffffffffffffff8, 8) INDIRECT (stack, 0xfffffffffffffff8, 8) , (const, 0x3c, 4)]
[ ---  CBRANCH (ram, 0x406a34, 1) , (unique, 0xe80, 1), (unique, 0xe80, 1) INT_LESS (unique, 0x11f80, 8) , (const, 0x4000000000000000, 8), (unique, 0x11f80, 8) INT_ADD (register, 0x4000, 8) , (const, 0x1, 8), (register, 0x4000, 8) CALL (ram, 0x414c40, 8) , (register, 0x4008, 8)]
[(register, 0x4098, 8) COPY (const, 0xffffffff, 8)]
[(ram, 0x47da38, 8) INDIRECT (ram, 0x47da38, 8) , (const, 0x142, 4)]
[(ram, 0x47df90, 8) INDIRECT (ram, 0x47df90, 8) , (const, 0x142, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000016e, 8) , (const, 0x4b, 4), (unique, 0x1000016e, 8) CAST (unique, 0x7580, 8), (unique, 0x7580, 8) PTRADD (ram, 0x47df90, 8) , (unique, 0x1000005a, 8) , (const, 0x1, 8), (unique, 0x1000005a, 8) CALLOTHER (const, 0x275, 4) , (register, 0x1660, 1)]
[ ---  BRANCH (ram, 0x4069bc, 1)]
[(ram, 0x47da38, 8) INDIRECT (ram, 0x47da38, 8) , (const, 0x54, 4)]
[(ram, 0x47df90, 8) INDIRECT (ram, 0x47df90, 8) , (const, 0x54, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x54, 4)]
[(stack, 0xffffffffffffffc8, 8) INDIRECT (stack, 0xffffffffffffffc8, 8) , (const, 0x54, 4)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0x54, 4)]
[(stack, 0xffffffffffffffd8, 8) INDIRECT (stack, 0xffffffffffffffd8, 8) , (const, 0x54, 4)]
[(stack, 0xffffffffffffffe8, 8) INDIRECT (stack, 0xffffffffffffffe8, 8) , (const, 0x54, 4)]
[(stack, 0xfffffffffffffff0, 8) INDIRECT (stack, 0xfffffffffffffff0, 8) , (const, 0x54, 4)]
[(stack, 0xfffffffffffffff8, 8) INDIRECT (stack, 0xfffffffffffffff8, 8) , (const, 0x54, 4)]
[ ---  CBRANCH (ram, 0x406a50, 1) , (register, 0x101, 1), (register, 0x101, 1) BOOL_OR (unique, 0x10000084, 1) , (unique, 0x10000085, 1), (unique, 0x10000085, 1) INT_NOTEQUAL (register, 0x4000, 4) , (const, 0x0, 4), (unique, 0x10000084, 1) INT_LESS (register, 0x4098, 8) , (const, 0x8001, 8), (register, 0x4000, 4) CALL (ram, 0x419818, 8) , (register, 0x4098, 8), (register, 0x4098, 8) INT_MULT (unique, 0x11f80, 8) , (const, 0x4, 8)]
[(ram, 0x47da38, 8) INDIRECT (ram, 0x47da38, 8) , (const, 0xef, 4)]
[(ram, 0x47df90, 8) INDIRECT (ram, 0x47df90, 8) , (const, 0xef, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xef, 4)]
[(stack, 0xffffffffffffffc8, 8) INDIRECT (stack, 0xffffffffffffffc8, 8) , (const, 0xef, 4)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0xef, 4)]
[(stack, 0xffffffffffffffd8, 8) INDIRECT (stack, 0xffffffffffffffd8, 8) , (const, 0xef, 4)]
[(stack, 0xffffffffffffffe8, 8) INDIRECT (stack, 0xffffffffffffffe8, 8) , (const, 0xef, 4)]
[(stack, 0xfffffffffffffff0, 8) INDIRECT (stack, 0xfffffffffffffff0, 8) , (const, 0xef, 4)]
[(stack, 0xfffffffffffffff8, 8) INDIRECT (stack, 0xfffffffffffffff8, 8) , (const, 0xef, 4)]
[ ---  CBRANCH (ram, 0x4069b8, 1) , (unique, 0x18f80, 1), (unique, 0x18f80, 1) INT_NOTEQUAL (register, 0x4000, 8) , (const, 0x0, 8), (register, 0x4000, 8) CAST (unique, 0x10000176, 8), (unique, 0x10000176, 8) CALL (ram, 0x412de8, 8) , (register, 0x4098, 8)]
[(ram, 0x47da38, 8) INDIRECT (ram, 0x47da38, 8) , (const, 0x106, 4)]
[(ram, 0x47df90, 8) INDIRECT (ram, 0x47df90, 8) , (const, 0x106, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x106, 4)]
[(stack, 0xffffffffffffffc8, 8) INDIRECT (stack, 0xffffffffffffffc8, 8) , (const, 0x106, 4)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0x106, 4)]
[(stack, 0xffffffffffffffd8, 8) INDIRECT (stack, 0xffffffffffffffd8, 8) , (const, 0x106, 4)]
[(stack, 0xffffffffffffffe8, 8) INDIRECT (stack, 0xffffffffffffffe8, 8) , (const, 0x106, 4)]
[(stack, 0xfffffffffffffff0, 8) INDIRECT (stack, 0xfffffffffffffff0, 8) , (const, 0x106, 4), (stack, 0xfffffffffffffff0, 8) COPY (const, 0x0, 8)]
[(stack, 0xfffffffffffffff8, 8) INDIRECT (stack, 0xfffffffffffffff8, 8) , (const, 0x106, 4)]
[(register, 0x4098, 8) INT_AND (register, 0x4000, 8) , (const, 0xffffffff, 8), (register, 0x4000, 8) CALL (ram, 0x416820, 8) , (register, 0x4000, 8) , (unique, 0x11f80, 8) , (unique, 0x11f80, 8) , (unique, 0x11f80, 8), (unique, 0x11f80, 8) PTRSUB (register, 0x8, 8) , (const, 0xffffffffffffffe8, 8), (unique, 0x11f80, 8) PTRSUB (register, 0x8, 8) , (const, 0xfffffffffffffff0, 8)]
[ ---  CBRANCH (ram, 0x406aa4, 1) , (register, 0x108, 1), (register, 0x108, 1) INT_NOTEQUAL (register, 0x4000, 4) , (const, 0xffffffff, 4), (register, 0x4000, 4) SUBPIECE (register, 0x4000, 8) , (const, 0x0, 4), (register, 0x4000, 8) CALL (ram, 0x416820, 8) , (register, 0x4000, 8) , (unique, 0x11f80, 8) , (unique, 0x11f80, 8) , (unique, 0x11f80, 8), (unique, 0x11f80, 8) PTRSUB (register, 0x8, 8) , (const, 0xffffffffffffffe8, 8), (unique, 0x11f80, 8) PTRSUB (register, 0x8, 8) , (const, 0xfffffffffffffff0, 8)]
[(ram, 0x47da38, 8) INDIRECT (ram, 0x47da38, 8) , (const, 0x131, 4)]
[(ram, 0x47df90, 8) INDIRECT (ram, 0x47df90, 8) , (const, 0x131, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (register, 0x4010, 8) , (const, 0x131, 4), (register, 0x4010, 8) LOAD (const, 0x1b1, 4) , (register, 0x4010, 8)]
[(stack, 0xffffffffffffffc8, 8) INDIRECT (register, 0x4018, 8) , (const, 0x131, 4), (register, 0x4018, 8) LOAD (const, 0x1b1, 4) , (unique, 0x28280, 8), (unique, 0x28280, 8) PTRADD (register, 0x4010, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (register, 0x4000, 8) , (const, 0x131, 4), (register, 0x4000, 8) LOAD (const, 0x1b1, 4) , (unique, 0x7b80, 8), (unique, 0x7b80, 8) PTRADD (register, 0x4010, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[(stack, 0xffffffffffffffd8, 8) INDIRECT (register, 0x4008, 8) , (const, 0x131, 4), (register, 0x4008, 8) LOAD (const, 0x1b1, 4) , (unique, 0x28280, 8), (unique, 0x28280, 8) PTRADD (register, 0x4010, 8) , (const, 0x3, 8) , (const, 0x8, 8)]
[(stack, 0xffffffffffffffe8, 8) INDIRECT (stack, 0xffffffffffffffe8, 8) , (const, 0x131, 4)]
[(stack, 0xfffffffffffffff0, 8) INDIRECT (stack, 0xfffffffffffffff0, 8) , (const, 0x131, 4)]
[(stack, 0xfffffffffffffff8, 8) INDIRECT (stack, 0xfffffffffffffff8, 8) , (const, 0x131, 4)]
[(register, 0x4098, 8) INT_ZEXT (register, 0x4000, 4), (register, 0x4000, 4) CALL (ram, 0x430cd8, 8) , (unique, 0x1000017e, 8) , (register, 0x4000, 8) , (unique, 0x11f80, 8), (unique, 0x1000017e, 8) CAST (register, 0x4000, 8), (unique, 0x11f80, 8) PTRSUB (register, 0x8, 8) , (const, 0xffffffffffffffc0, 8)]
[(register, 0x4098, 8) MULTIEQUAL (register, 0x4098, 8) , (register, 0x4098, 8)]
[(ram, 0x47da38, 8) INDIRECT (ram, 0x47da38, 8) , (const, 0x135, 4), (ram, 0x47da38, 8) MULTIEQUAL (ram, 0x47da38, 8) , (ram, 0x47da38, 8)]
[(ram, 0x47df90, 8) INDIRECT (ram, 0x47df90, 8) , (const, 0x135, 4), (ram, 0x47df90, 8) MULTIEQUAL (ram, 0x47df90, 8) , (ram, 0x47df90, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x135, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffc8, 8) INDIRECT (stack, 0xffffffffffffffc8, 8) , (const, 0x135, 4), (stack, 0xffffffffffffffc8, 8) MULTIEQUAL (stack, 0xffffffffffffffc8, 8) , (stack, 0xffffffffffffffc8, 8)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0x135, 4), (stack, 0xffffffffffffffd0, 8) MULTIEQUAL (stack, 0xffffffffffffffd0, 8) , (stack, 0xffffffffffffffd0, 8)]
[(stack, 0xffffffffffffffd8, 8) INDIRECT (stack, 0xffffffffffffffd8, 8) , (const, 0x135, 4), (stack, 0xffffffffffffffd8, 8) MULTIEQUAL (stack, 0xffffffffffffffd8, 8) , (stack, 0xffffffffffffffd8, 8)]
[(stack, 0xffffffffffffffe8, 8) INDIRECT (stack, 0xffffffffffffffe8, 8) , (const, 0x135, 4), (stack, 0xffffffffffffffe8, 8) MULTIEQUAL (stack, 0xffffffffffffffe8, 8) , (stack, 0xffffffffffffffe8, 8)]
[(stack, 0xfffffffffffffff0, 8) INDIRECT (stack, 0xfffffffffffffff0, 8) , (const, 0x135, 4), (stack, 0xfffffffffffffff0, 8) MULTIEQUAL (stack, 0xfffffffffffffff0, 8) , (stack, 0xfffffffffffffff0, 8)]
[(stack, 0xfffffffffffffff8, 8) INDIRECT (stack, 0xfffffffffffffff8, 8) , (const, 0x135, 4), (stack, 0xfffffffffffffff8, 8) MULTIEQUAL (stack, 0xfffffffffffffff8, 8) , (stack, 0xfffffffffffffff8, 8)]
[ ---  CALL (ram, 0x413448, 8) , (register, 0x4000, 8)]
[ ---  BRANCH (ram, 0x4069bc, 1)]
[(register, 0x8, 8) PTRADD (unique, 0x100000cc, 8) , (unique, 0x1000007a, 8) , (const, 0x1, 8), (unique, 0x100000cc, 8) PTRSUB (register, 0x8, 8) , (const, 0xffffffffffffff80, 8), (unique, 0x1000007a, 8) INT_2COMP (register, 0x4098, 8), (register, 0x4098, 8) INT_AND (unique, 0x11f80, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x11f80, 8) INT_ADD (register, 0x4098, 8) , (const, 0x1e, 8)]
[(ram, 0x47da38, 8) INDIRECT (ram, 0x47da38, 8) , (const, 0x97, 4)]
[(ram, 0x47df90, 8) INDIRECT (ram, 0x47df90, 8) , (const, 0x97, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x97, 4)]
[(stack, 0xffffffffffffffc8, 8) INDIRECT (stack, 0xffffffffffffffc8, 8) , (const, 0x97, 4)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0x97, 4)]
[(stack, 0xffffffffffffffd8, 8) INDIRECT (stack, 0xffffffffffffffd8, 8) , (const, 0x97, 4)]
[(stack, 0xffffffffffffffe8, 8) INDIRECT (stack, 0xffffffffffffffe8, 8) , (const, 0x97, 4)]
[(stack, 0xfffffffffffffff0, 8) INDIRECT (stack, 0xfffffffffffffff0, 8) , (const, 0x97, 4), (stack, 0xfffffffffffffff0, 8) COPY (const, 0x0, 8)]
[(stack, 0xfffffffffffffff8, 8) INDIRECT (stack, 0xfffffffffffffff8, 8) , (const, 0x97, 4)]
[ ---  CBRANCH (ram, 0x4069ec, 1) , (register, 0x108, 1), (register, 0x108, 1) INT_NOTEQUAL (register, 0x4000, 4) , (const, 0xffffffff, 4), (register, 0x4000, 4) SUBPIECE (register, 0x4000, 8) , (const, 0x0, 4), (register, 0x4000, 8) CALL (ram, 0x416820, 8) , (unique, 0x10000186, 8) , (unique, 0x11f80, 8) , (unique, 0x11f80, 8) , (unique, 0x11f80, 8), (unique, 0x10000186, 8) CAST (register, 0x8, 8), (unique, 0x11f80, 8) PTRSUB (register, 0x8, 8) , (const, 0xffffffffffffffe8, 8), (register, 0x8, 8) PTRADD (unique, 0x100000b4, 8) , (unique, 0x1000007a, 8) , (const, 0x1, 8), (unique, 0x100000b4, 8) PTRSUB (register, 0x8, 8) , (const, 0xffffffffffffff80, 8), (unique, 0x1000007a, 8) INT_2COMP (register, 0x4098, 8), (register, 0x4098, 8) INT_AND (unique, 0x11f80, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x11f80, 8) PTRSUB (register, 0x8, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x11f80, 8) INT_ADD (register, 0x4098, 8) , (const, 0x1e, 8)]
[(ram, 0x47da38, 8) INDIRECT (ram, 0x47da38, 8) , (const, 0xea, 4)]
[(ram, 0x47df90, 8) INDIRECT (ram, 0x47df90, 8) , (const, 0xea, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xea, 4), (stack, 0xffffffffffffffc0, 8) COPY (register, 0x4010, 8), (register, 0x4010, 8) LOAD (const, 0x1b1, 4) , (register, 0x4010, 8)]
[(stack, 0xffffffffffffffc8, 8) INDIRECT (stack, 0xffffffffffffffc8, 8) , (const, 0xea, 4), (stack, 0xffffffffffffffc8, 8) COPY (register, 0x4018, 8), (register, 0x4018, 8) LOAD (const, 0x1b1, 4) , (unique, 0x28280, 8), (unique, 0x28280, 8) PTRADD (register, 0x4010, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0xea, 4), (stack, 0xffffffffffffffd0, 8) COPY (register, 0x4000, 8), (register, 0x4000, 8) LOAD (const, 0x1b1, 4) , (unique, 0x7b80, 8), (unique, 0x7b80, 8) PTRADD (register, 0x4010, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[(stack, 0xffffffffffffffd8, 8) INDIRECT (stack, 0xffffffffffffffd8, 8) , (const, 0xea, 4), (stack, 0xffffffffffffffd8, 8) COPY (register, 0x4008, 8), (register, 0x4008, 8) LOAD (const, 0x1b1, 4) , (unique, 0x28280, 8), (unique, 0x28280, 8) PTRADD (register, 0x4010, 8) , (const, 0x3, 8) , (const, 0x8, 8)]
[(stack, 0xffffffffffffffe8, 8) INDIRECT (stack, 0xffffffffffffffe8, 8) , (const, 0xea, 4)]
[(stack, 0xfffffffffffffff0, 8) INDIRECT (stack, 0xfffffffffffffff0, 8) , (const, 0xea, 4)]
[(stack, 0xfffffffffffffff8, 8) INDIRECT (stack, 0xfffffffffffffff8, 8) , (const, 0xea, 4)]
[(register, 0x4098, 8) INT_ZEXT (register, 0x4000, 4), (register, 0x4000, 4) CALL (ram, 0x430cd8, 8) , (unique, 0x1000018e, 8) , (unique, 0x10000196, 8) , (unique, 0x11f80, 8), (unique, 0x10000196, 8) CAST (register, 0x8, 8), (unique, 0x1000018e, 8) CAST (register, 0x4000, 8), (unique, 0x11f80, 8) PTRSUB (register, 0x8, 8) , (const, 0xffffffffffffffc0, 8)]
[ ---  BRANCH (ram, 0x4069bc, 1)]
[(stack, 0xfffffffffffffff8, 8) MULTIEQUAL (stack, 0xfffffffffffffff8, 8) , (stack, 0xfffffffffffffff8, 8)]
[(stack, 0xfffffffffffffff0, 8) MULTIEQUAL (stack, 0xfffffffffffffff0, 8) , (stack, 0xfffffffffffffff0, 8)]
[(stack, 0xffffffffffffffe8, 8) MULTIEQUAL (stack, 0xffffffffffffffe8, 8) , (stack, 0xffffffffffffffe8, 8)]
[(stack, 0xffffffffffffffd8, 8) MULTIEQUAL (stack, 0xffffffffffffffd8, 8) , (stack, 0xffffffffffffffd8, 8)]
[(stack, 0xffffffffffffffd0, 8) MULTIEQUAL (stack, 0xffffffffffffffd0, 8) , (stack, 0xffffffffffffffd0, 8)]
[(stack, 0xffffffffffffffc8, 8) MULTIEQUAL (stack, 0xffffffffffffffc8, 8) , (stack, 0xffffffffffffffc8, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(ram, 0x47df90, 8) MULTIEQUAL (ram, 0x47df90, 8) , (ram, 0x47df90, 8)]
[(ram, 0x47da38, 8) MULTIEQUAL (ram, 0x47da38, 8) , (ram, 0x47da38, 8)]
[(register, 0x4098, 8) COPY (const, 0xffffffff, 8)]
[(stack, 0xfffffffffffffff0, 8) MULTIEQUAL (stack, 0xfffffffffffffff0, 8) , (stack, 0xfffffffffffffff0, 8) , (stack, 0xfffffffffffffff0, 8) , (stack, 0xfffffffffffffff0, 8) , (stack, 0xfffffffffffffff0, 8)]
[(stack, 0xffffffffffffffe8, 8) MULTIEQUAL (stack, 0xffffffffffffffe8, 8) , (stack, 0xffffffffffffffe8, 8) , (stack, 0xffffffffffffffe8, 8) , (stack, 0xffffffffffffffe8, 8) , (stack, 0xffffffffffffffe8, 8)]
[(stack, 0xffffffffffffffd8, 8) MULTIEQUAL (stack, 0xffffffffffffffd8, 8) , (stack, 0xffffffffffffffd8, 8) , (stack, 0xffffffffffffffd8, 8) , (stack, 0xffffffffffffffd8, 8) , (stack, 0xffffffffffffffd8, 8)]
[(stack, 0xffffffffffffffd0, 8) MULTIEQUAL (stack, 0xffffffffffffffd0, 8) , (stack, 0xffffffffffffffd0, 8) , (stack, 0xffffffffffffffd0, 8) , (stack, 0xffffffffffffffd0, 8) , (stack, 0xffffffffffffffd0, 8)]
[(stack, 0xffffffffffffffc8, 8) MULTIEQUAL (stack, 0xffffffffffffffc8, 8) , (stack, 0xffffffffffffffc8, 8) , (stack, 0xffffffffffffffc8, 8) , (stack, 0xffffffffffffffc8, 8) , (stack, 0xffffffffffffffc8, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(ram, 0x47df90, 8) MULTIEQUAL (ram, 0x47df90, 8) , (ram, 0x47df90, 8) , (ram, 0x47df90, 8) , (ram, 0x47df90, 8) , (ram, 0x47df90, 8)]
[(register, 0x4098, 8) MULTIEQUAL (register, 0x4098, 8) , (register, 0x4098, 8) , (register, 0x4098, 8) , (register, 0x4098, 8) , (register, 0x4098, 8)]
[ ---  CBRANCH (ram, 0x406ab0, 1) , (unique, 0x18e80, 1), (unique, 0x18e80, 1) INT_EQUAL (stack, 0xfffffffffffffff8, 8) , (ram, 0x47da38, 8), (ram, 0x47da38, 8) MULTIEQUAL (ram, 0x47da38, 8) , (ram, 0x47da38, 8) , (ram, 0x47da38, 8) , (ram, 0x47da38, 8) , (ram, 0x47da38, 8), (stack, 0xfffffffffffffff8, 8) MULTIEQUAL (stack, 0xfffffffffffffff8, 8) , (stack, 0xfffffffffffffff8, 8) , (stack, 0xfffffffffffffff8, 8) , (stack, 0xfffffffffffffff8, 8) , (stack, 0xfffffffffffffff8, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xc9, 4)]
[(stack, 0xffffffffffffffc8, 8) INDIRECT (stack, 0xffffffffffffffc8, 8) , (const, 0xc9, 4)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0xc9, 4)]
[(stack, 0xffffffffffffffd8, 8) INDIRECT (stack, 0xffffffffffffffd8, 8) , (const, 0xc9, 4)]
[(stack, 0xffffffffffffffe8, 8) INDIRECT (stack, 0xffffffffffffffe8, 8) , (const, 0xc9, 4)]
[(stack, 0xfffffffffffffff0, 8) INDIRECT (stack, 0xfffffffffffffff0, 8) , (const, 0xc9, 4)]
[(stack, 0xfffffffffffffff8, 8) INDIRECT (stack, 0xfffffffffffffff8, 8) , (const, 0xc9, 4)]
[ ---  CALL (ram, 0x4199e0, 8) , (register, 0x4098, 8)]
[(ram, 0x47da38, 8) COPY (ram, 0x47da38, 8), (ram, 0x47da38, 8) INDIRECT (ram, 0x47da38, 8) , (const, 0xc9, 4)]
[(ram, 0x47df90, 8) COPY (ram, 0x47df90, 8), (ram, 0x47df90, 8) INDIRECT (ram, 0x47df90, 8) , (const, 0xc9, 4)]
[ ---  RETURN (const, 0x1, 4)]
[(ram, 0x47da38, 8) COPY (ram, 0x47da38, 8)]
[(ram, 0x47df90, 8) COPY (ram, 0x47df90, 8)]
[ ---  RETURN (const, 0x0, 8)]
