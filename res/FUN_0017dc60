[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffb8, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffb8, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffb8, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffb8, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x1000024c, 8), (unique, 0x1000024c, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8)]
[(unique, 0x10000244, 8) COPY (register, 0x30, 8)]
[ ---  CBRANCH (ram, 0x17dd50, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (unique, 0xbc80, 4) , (const, 0x1, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3c80, 8), (unique, 0x3c80, 8) PTRSUB (register, 0x38, 8) , (const, 0xc0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x115, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x115, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x115, 4), (stack, 0xffffffffffffffb0, 8) COPY (const, 0x17dd58, 8)]
[(stack, 0xffffffffffffffbc, 4) INDIRECT (stack, 0xffffffffffffffbc, 4) , (const, 0x115, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (unique, 0x10000244, 8) , (const, 0x115, 4)]
[(stack, 0xffffffffffffffc8, 8) INDIRECT (stack, 0xffffffffffffffc8, 8) , (const, 0x115, 4)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x115, 4)]
[(register, 0x0, 4) CALL (ram, 0x15b390, 8) , (unique, 0x10000254, 8) , (register, 0x30, 8) , (register, 0x10, 8), (unique, 0x10000254, 8) CAST (register, 0x38, 8)]
[ ---  BRANCH (ram, 0x17dd11, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x41, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x41, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x41, 4), (stack, 0xffffffffffffffb0, 8) COPY (const, 0x17dca0, 8)]
[(stack, 0xffffffffffffffbc, 4) INDIRECT (stack, 0xffffffffffffffbc, 4) , (const, 0x41, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (unique, 0x10000244, 8) , (const, 0x41, 4)]
[(stack, 0xffffffffffffffc8, 8) INDIRECT (stack, 0xffffffffffffffc8, 8) , (const, 0x41, 4)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x41, 4)]
[ ---  CBRANCH (ram, 0x17dd60, 1) , (unique, 0xc900, 1), (unique, 0xc900, 1) INT_LESS (unique, 0x3100, 8) , (const, 0x4000000000000000, 8), (unique, 0x3100, 8) INT_ADD (register, 0x0, 8) , (const, 0x1, 8), (register, 0x0, 8) CALL (ram, 0x121100, 8) , (register, 0x30, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x10f, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000025c, 8) , (const, 0x4b, 4), (unique, 0x1000025c, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (ram, 0x4eae68, 8) , (register, 0x110, 8) , (const, 0x1, 8)]
[(register, 0x0, 4) COPY (const, 0xffffffff, 4)]
[(unique, 0x10000220, 8) COPY (register, 0x20, 8)]
[ ---  BRANCH (ram, 0x17dd11, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x56, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x56, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x56, 4), (stack, 0xffffffffffffffb0, 8) COPY (const, 0x17dcc7, 8)]
[(stack, 0xffffffffffffffbc, 4) INDIRECT (stack, 0xffffffffffffffbc, 4) , (const, 0x56, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x56, 4)]
[(stack, 0xffffffffffffffc8, 8) INDIRECT (stack, 0xffffffffffffffc8, 8) , (const, 0x56, 4)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0x56, 4)]
[(register, 0x0, 4) CALL (ram, 0x2300b0, 8) , (unique, 0x3680, 8), (unique, 0x3680, 8) INT_MULT (unique, 0x3100, 8) , (const, 0x4, 8)]
[ ---  CBRANCH (ram, 0x17dcd8, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (unique, 0x3680, 8) , (const, 0x1001, 8), (unique, 0x3680, 8) INT_MULT (unique, 0x3100, 8) , (const, 0x4, 8)]
[ ---  CBRANCH (ram, 0x17dd75, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xd8, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xd8, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0xd8, 4), (stack, 0xffffffffffffffb0, 8) COPY (const, 0x17dd7d, 8)]
[(stack, 0xffffffffffffffbc, 4) INDIRECT (stack, 0xffffffffffffffbc, 4) , (const, 0xd8, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xd8, 4)]
[(stack, 0xffffffffffffffc8, 8) INDIRECT (stack, 0xffffffffffffffc8, 8) , (const, 0xd8, 4)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0xd8, 4)]
[ ---  CBRANCH (ram, 0x17dd0c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10000264, 8), (unique, 0x10000264, 8) CALL (ram, 0x1212c0, 8) , (unique, 0x3680, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xef, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xef, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0xef, 4), (stack, 0xffffffffffffffb0, 8) COPY (const, 0x17dda0, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xef, 4)]
[(stack, 0xffffffffffffffc8, 8) INDIRECT (stack, 0xffffffffffffffc8, 8) , (const, 0xef, 4), (stack, 0xffffffffffffffc8, 8) COPY (const, 0x0, 8)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0xef, 4)]
[ ---  CBRANCH (ram, 0x17ddb3, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0xffffffff, 4), (register, 0x0, 4) SUBPIECE (register, 0x0, 8) , (const, 0x0, 4), (register, 0x0, 8) CALL (ram, 0x1bde00, 8) , (register, 0x0, 8) , (unique, 0x3100, 8) , (unique, 0x3100, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffc0, 8), (unique, 0x3100, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffc8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xff, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xff, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0xff, 4), (stack, 0xffffffffffffffb0, 8) COPY (const, 0x17ddb3, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xff, 4)]
[(stack, 0xffffffffffffffc8, 8) INDIRECT (stack, 0xffffffffffffffc8, 8) , (const, 0xff, 4)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0xff, 4)]
[(register, 0x0, 4) CALL (ram, 0x167d60, 8) , (register, 0x38, 8) , (register, 0x0, 8) , (register, 0x10, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x106, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x106, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x106, 4), (stack, 0xffffffffffffffb0, 8) COPY (const, 0x17ddbe, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x106, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffc8, 8) INDIRECT (stack, 0xffffffffffffffc8, 8) , (const, 0x106, 4), (stack, 0xffffffffffffffc8, 8) MULTIEQUAL (stack, 0xffffffffffffffc8, 8) , (stack, 0xffffffffffffffc8, 8)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0x106, 4), (stack, 0xffffffffffffffd0, 8) MULTIEQUAL (stack, 0xffffffffffffffd0, 8) , (stack, 0xffffffffffffffd0, 8)]
[ ---  CALL (ram, 0x1212c8, 8) , (register, 0x0, 8)]
[(unique, 0x10000218, 8) COPY (register, 0x20, 8)]
[(unique, 0x10000240, 4) COPY (stack, 0xffffffffffffffbc, 4), (stack, 0xffffffffffffffbc, 4) INDIRECT (register, 0x0, 4) , (const, 0x106, 4), (register, 0x0, 4) MULTIEQUAL (register, 0x0, 4) , (register, 0x0, 4)]
[ ---  BRANCH (ram, 0x17dd11, 1)]
[(register, 0x20, 8) PTRADD (unique, 0x10000170, 8) , (unique, 0x100000ac, 8) , (const, 0x1, 8), (unique, 0x10000170, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffb8, 8), (unique, 0x100000ac, 8) INT_2COMP (register, 0x18, 8), (register, 0x18, 8) INT_AND (register, 0x18, 8) , (const, 0xfffffffffffffff0, 8), (register, 0x18, 8) INT_ADD (unique, 0x3680, 8) , (const, 0x1e, 8)]
[(register, 0x20, 8) PTRADD (unique, 0x10000188, 8) , (unique, 0x100000ac, 8) , (const, 0x1, 8), (unique, 0x10000188, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffb8, 8), (unique, 0x100000ac, 8) INT_2COMP (register, 0x18, 8), (register, 0x18, 8) INT_AND (register, 0x18, 8) , (const, 0xfffffffffffffff0, 8), (register, 0x18, 8) INT_ADD (unique, 0x3680, 8) , (const, 0x1e, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000027c, 8) , (const, 0x17dd07, 8), (unique, 0x1000027c, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x100001e0, 8) , (unique, 0x100001d8, 8) , (const, 0x1, 8), (unique, 0x100001e0, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffb8, 8), (unique, 0x100001d8, 8) INT_ADD (unique, 0x100000ac, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x100000ac, 8) INT_2COMP (register, 0x18, 8), (register, 0x18, 8) INT_AND (register, 0x18, 8) , (const, 0xfffffffffffffff0, 8), (register, 0x18, 8) INT_ADD (unique, 0x3680, 8) , (const, 0x1e, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x9d, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x9d, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x9d, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x9c, 4)]
[(stack, 0xffffffffffffffbc, 4) INDIRECT (stack, 0xffffffffffffffbc, 4) , (const, 0x9d, 4), (stack, 0xffffffffffffffbc, 4) INDIRECT (stack, 0xffffffffffffffbc, 4) , (const, 0x9c, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x9d, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x9c, 4)]
[(stack, 0xffffffffffffffc8, 8) INDIRECT (stack, 0xffffffffffffffc8, 8) , (const, 0x9d, 4), (stack, 0xffffffffffffffc8, 8) INDIRECT (stack, 0xffffffffffffffc8, 8) , (const, 0x9c, 4), (stack, 0xffffffffffffffc8, 8) COPY (const, 0x0, 8)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0x9d, 4), (stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0x9c, 4)]
[ ---  CBRANCH (ram, 0x17dd38, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0xffffffff, 4), (register, 0x0, 4) SUBPIECE (register, 0x0, 8) , (const, 0x0, 4), (register, 0x0, 8) CALL (ram, 0x1bde00, 8) , (unique, 0x10000284, 8) , (unique, 0x3100, 8) , (unique, 0x3100, 8) , (unique, 0x3100, 8), (unique, 0x10000284, 8) CAST (unique, 0x3800, 8), (unique, 0x3800, 8) CAST (unique, 0x10000274, 8), (unique, 0x10000274, 8) INT_ADD (unique, 0x1000026c, 8) , (unique, 0x100000ac, 8), (unique, 0x1000026c, 8) CAST (unique, 0x100001c8, 8), (unique, 0x100001c8, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffc0, 8), (unique, 0x100000ac, 8) INT_2COMP (register, 0x18, 8), (register, 0x18, 8) INT_AND (register, 0x18, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3100, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffc0, 8), (unique, 0x3100, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffc8, 8), (register, 0x18, 8) INT_ADD (unique, 0x3680, 8) , (const, 0x1e, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000028c, 8) , (const, 0x17dd46, 8), (unique, 0x1000028c, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x100001f8, 8) , (unique, 0x100001f0, 8) , (const, 0x1, 8), (unique, 0x100001f8, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffb8, 8), (unique, 0x100001f0, 8) INT_ADD (unique, 0x100000ac, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xd3, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xd3, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0xd3, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0xd2, 4)]
[(stack, 0xffffffffffffffbc, 4) INDIRECT (stack, 0xffffffffffffffbc, 4) , (const, 0xd3, 4), (stack, 0xffffffffffffffbc, 4) INDIRECT (stack, 0xffffffffffffffbc, 4) , (const, 0xd2, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xd3, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xd2, 4)]
[(stack, 0xffffffffffffffc8, 8) INDIRECT (stack, 0xffffffffffffffc8, 8) , (const, 0xd3, 4), (stack, 0xffffffffffffffc8, 8) INDIRECT (stack, 0xffffffffffffffc8, 8) , (const, 0xd2, 4)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0xd3, 4), (stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0xd2, 4)]
[(unique, 0x10000210, 8) COPY (register, 0x20, 8)]
[(unique, 0x1000023c, 4) COPY (register, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x167d60, 8) , (register, 0x38, 8) , (unique, 0x10000294, 8) , (register, 0x10, 8), (unique, 0x10000294, 8) CAST (unique, 0x3800, 8)]
[ ---  BRANCH (ram, 0x17dd11, 1)]
[(stack, 0xffffffffffffffd0, 8) MULTIEQUAL (stack, 0xffffffffffffffd0, 8) , (stack, 0xffffffffffffffd0, 8)]
[(stack, 0xffffffffffffffc8, 8) MULTIEQUAL (stack, 0xffffffffffffffc8, 8) , (stack, 0xffffffffffffffc8, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffbc, 4) MULTIEQUAL (stack, 0xffffffffffffffbc, 4) , (stack, 0xffffffffffffffbc, 4)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x10000208, 8) COPY (register, 0x20, 8), (register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8)]
[(unique, 0x10000238, 4) COPY (register, 0x0, 4), (register, 0x0, 4) COPY (const, 0xffffffff, 4)]
[(stack, 0xffffffffffffffc8, 8) MULTIEQUAL (stack, 0xffffffffffffffc8, 8) , (stack, 0xffffffffffffffc8, 8) , (stack, 0xffffffffffffffc8, 8) , (stack, 0xffffffffffffffc8, 8) , (stack, 0xffffffffffffffc8, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffbc, 4) MULTIEQUAL (stack, 0xffffffffffffffbc, 4) , (stack, 0xffffffffffffffbc, 4) , (stack, 0xffffffffffffffbc, 4) , (stack, 0xffffffffffffffbc, 4) , (stack, 0xffffffffffffffbc, 4)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x20, 8) MULTIEQUAL (unique, 0x10000208, 8) , (unique, 0x10000210, 8) , (unique, 0x10000218, 8) , (unique, 0x10000220, 8) , (register, 0x20, 8)]
[(register, 0x0, 4) MULTIEQUAL (unique, 0x10000238, 4) , (unique, 0x1000023c, 4) , (unique, 0x10000240, 4) , (register, 0x0, 4) , (register, 0x0, 4)]
[ ---  CBRANCH (ram, 0x17ddc6, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffffd0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x1000029c, 8), (unique, 0x1000029c, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8), (stack, 0xffffffffffffffd0, 8) MULTIEQUAL (stack, 0xffffffffffffffd0, 8) , (stack, 0xffffffffffffffd0, 8) , (stack, 0xffffffffffffffd0, 8) , (stack, 0xffffffffffffffd0, 8) , (stack, 0xffffffffffffffd0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100002a4, 8) , (unique, 0x10000118, 8), (unique, 0x100002a4, 8) CAST (register, 0x20, 8), (unique, 0x10000118, 8) PTRSUB (const, 0x0, 8) , (const, 0x17ddcb, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0xcb, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0xca, 4)]
[(stack, 0xffffffffffffffbc, 4) INDIRECT (stack, 0xffffffffffffffbc, 4) , (const, 0xcb, 4), (stack, 0xffffffffffffffbc, 4) INDIRECT (stack, 0xffffffffffffffbc, 4) , (const, 0xca, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xcb, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xca, 4)]
[(stack, 0xffffffffffffffc8, 8) INDIRECT (stack, 0xffffffffffffffc8, 8) , (const, 0xcb, 4), (stack, 0xffffffffffffffc8, 8) INDIRECT (stack, 0xffffffffffffffc8, 8) , (const, 0xca, 4)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0xcb, 4), (stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0xca, 4)]
[ ---  CALL (ram, 0x234c80, 8)]
[(ram, 0x4eae68, 8) COPY (ram, 0x4eae68, 8), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xcb, 4)]
[ ---  RETURN (const, 0x1, 4)]
[(ram, 0x4eae68, 8) COPY (ram, 0x4eae68, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 4)]
