[(unique, 0x100000eb, 8) COPY (ram, 0x4eae58, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x100000fb, 8), (unique, 0x100000fb, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8)]
[ ---  CBRANCH (ram, 0x1bbfd7, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (const, 0x1, 4) , (unique, 0xbd00, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000103, 8), (unique, 0x10000103, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (ram, 0x4eae58, 8) , (const, 0x6c, 8) , (const, 0x1, 8)]
[(stack, 0xffffffffffffffbe, 1) COPY (const, 0x0, 1)]
[(stack, 0xffffffffffffffbf, 1) COPY (const, 0x0, 1)]
[(stack, 0xffffffffffffffb4, 4) COPY (const, 0x1, 4)]
[(unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffbe, 8)]
[(unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffbf, 8)]
[(unique, 0x100000f3, 4) COPY (register, 0xa8, 4), (register, 0xa8, 4) COPY (const, 0x1, 4)]
[ ---  BRANCH (ram, 0x1bbee3, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (unique, 0xbd80, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffbf, 1) MULTIEQUAL (stack, 0xffffffffffffffbf, 1) , (stack, 0xffffffffffffffbf, 1)]
[(stack, 0xffffffffffffffbe, 1) MULTIEQUAL (stack, 0xffffffffffffffbe, 1) , (stack, 0xffffffffffffffbe, 1)]
[(stack, 0xffffffffffffffb4, 4) MULTIEQUAL (stack, 0xffffffffffffffb4, 4) , (stack, 0xffffffffffffffb4, 4)]
[(ram, 0x4eae58, 8) MULTIEQUAL (ram, 0x4eae58, 8) , (ram, 0x4eae58, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x2c100, 4) LOAD (const, 0x1b1, 4) , (unique, 0x2c080, 8), (unique, 0x2c080, 8) PTRADD (unique, 0x2ae80, 8) , (const, 0x1, 8) , (const, 0x4, 8), (unique, 0x2ae80, 8) CAST (unique, 0x1000010b, 8), (unique, 0x1000010b, 8) CALLOTHER (const, 0x2b, 4) , (const, 0x2, 4)]
[(unique, 0x2c280, 4) LOAD (const, 0x1b1, 4) , (unique, 0x2c200, 8), (unique, 0x2c200, 8) PTRADD (unique, 0x2ae80, 8) , (const, 0x2, 8) , (const, 0x4, 8), (unique, 0x2ae80, 8) CAST (unique, 0x1000010b, 8), (unique, 0x1000010b, 8) CALLOTHER (const, 0x2b, 4) , (const, 0x2, 4)]
[(unique, 0x2c400, 4) LOAD (const, 0x1b1, 4) , (unique, 0x2c380, 8), (unique, 0x2c380, 8) PTRADD (unique, 0x2ae80, 8) , (const, 0x3, 8) , (const, 0x4, 8), (unique, 0x2ae80, 8) CAST (unique, 0x1000010b, 8), (unique, 0x1000010b, 8) CALLOTHER (const, 0x2b, 4) , (const, 0x2, 4)]
[(register, 0x30, 8) INT_ZEXT (unique, 0x2bf80, 4), (unique, 0x2bf80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x2ae80, 8), (unique, 0x2ae80, 8) CAST (unique, 0x1000010b, 8), (unique, 0x1000010b, 8) CALLOTHER (const, 0x2b, 4) , (const, 0x2, 4)]
[ ---  CBRANCH (ram, 0x1bbf04, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xa8, 4) , (const, 0x1, 4), (register, 0xa8, 4) MULTIEQUAL (unique, 0x100000f3, 4) , (unique, 0x100000f7, 4)]
[(register, 0x0, 4) INT_AND (unique, 0x2bf80, 4) , (const, 0xff, 4)]
[(register, 0x30, 8) INT_LEFT (unique, 0x10000078, 8) , (const, 0x8, 4), (unique, 0x10000078, 8) INT_ZEXT (unique, 0x10000075, 3), (unique, 0x10000075, 3) SUBPIECE (unique, 0x100000e7, 4) , (const, 0x0, 4), (unique, 0x100000e7, 4) INT_RIGHT (unique, 0x2bf80, 4) , (const, 0x8, 4)]
[(stack, 0xffffffffffffffb4, 4) MULTIEQUAL (stack, 0xffffffffffffffb4, 4) , (register, 0x0, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xc6, 4)]
[(ram, 0x4eae58, 8) INDIRECT (ram, 0x4eae58, 8) , (const, 0xc6, 4)]
[(stack, 0xffffffffffffffbe, 1) INDIRECT (stack, 0xffffffffffffffbe, 1) , (const, 0xc6, 4)]
[(stack, 0xffffffffffffffbf, 1) INDIRECT (stack, 0xffffffffffffffbf, 1) , (const, 0xc6, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xc6, 4)]
[ ---  CBRANCH (ram, 0x1bbfb0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x1bbb80, 8) , (register, 0x38, 4) , (register, 0x30, 8) , (unique, 0x3800, 8) , (unique, 0x3800, 8) , (unique, 0x3200, 8) , (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (unique, 0x100000eb, 8) , (const, 0xa0, 8) , (const, 0x1, 8), (unique, 0x3200, 8) PTRADD (unique, 0x100000eb, 8) , (const, 0xa4, 8) , (const, 0x1, 8), (register, 0x30, 8) MULTIEQUAL (register, 0x30, 8) , (register, 0x30, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xde, 4)]
[(ram, 0x4eae58, 8) INDIRECT (ram, 0x4eae58, 8) , (const, 0xde, 4)]
[(stack, 0xffffffffffffffbe, 1) INDIRECT (stack, 0xffffffffffffffbe, 1) , (const, 0xde, 4)]
[(stack, 0xffffffffffffffbf, 1) INDIRECT (stack, 0xffffffffffffffbf, 1) , (const, 0xde, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xde, 4)]
[ ---  CBRANCH (ram, 0x1bbfb0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x1bbb80, 8) , (register, 0x38, 4) , (unique, 0x2c100, 4) , (unique, 0x3800, 8) , (unique, 0x3800, 8) , (unique, 0x3200, 8) , (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (unique, 0x100000eb, 8) , (const, 0xa0, 8) , (const, 0x1, 8), (unique, 0x3200, 8) PTRADD (unique, 0x100000eb, 8) , (const, 0xa4, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xf8, 4)]
[(ram, 0x4eae58, 8) INDIRECT (ram, 0x4eae58, 8) , (const, 0xf8, 4)]
[(stack, 0xffffffffffffffbe, 1) INDIRECT (stack, 0xffffffffffffffbe, 1) , (const, 0xf8, 4)]
[(stack, 0xffffffffffffffbf, 1) INDIRECT (stack, 0xffffffffffffffbf, 1) , (const, 0xf8, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xf8, 4)]
[ ---  CBRANCH (ram, 0x1bbfb0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x1bbb80, 8) , (register, 0x38, 4) , (unique, 0x2c400, 4) , (unique, 0x3800, 8) , (unique, 0x3800, 8) , (unique, 0x3200, 8) , (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (unique, 0x100000eb, 8) , (const, 0xa0, 8) , (const, 0x1, 8), (unique, 0x3200, 8) PTRADD (unique, 0x100000eb, 8) , (const, 0xa4, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x112, 4)]
[(ram, 0x4eae58, 8) INDIRECT (ram, 0x4eae58, 8) , (const, 0x112, 4)]
[(stack, 0xffffffffffffffbe, 1) INDIRECT (stack, 0xffffffffffffffbe, 1) , (const, 0x112, 4)]
[(stack, 0xffffffffffffffbf, 1) INDIRECT (stack, 0xffffffffffffffbf, 1) , (const, 0x112, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x112, 4)]
[ ---  CBRANCH (ram, 0x1bbfb0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x1bbb80, 8) , (register, 0x38, 4) , (unique, 0x2c280, 4) , (unique, 0x3800, 8) , (unique, 0x3800, 8) , (unique, 0x3200, 8) , (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (unique, 0x100000eb, 8) , (const, 0xa0, 8) , (const, 0x1, 8), (unique, 0x3200, 8) PTRADD (unique, 0x100000eb, 8) , (const, 0xa4, 8) , (const, 0x1, 8)]
[(unique, 0x100000f7, 4) COPY (unique, 0x3100, 4), (unique, 0x3100, 4) INT_ADD (register, 0xa8, 4) , (const, 0x1, 4)]
[ ---  CBRANCH (ram, 0x1bbee0, 1) , (unique, 0xc900, 1), (unique, 0xc900, 1) INT_LESS (register, 0xa8, 4) , (stack, 0xffffffffffffffb4, 4)]
[ ---  CBRANCH (ram, 0x1bbfd0, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (const, 0x5, 4) , (register, 0x28, 4), (register, 0x28, 4) INT_SUB (register, 0x38, 4) , (const, 0xbf, 4)]
[ ---  CBRANCH (ram, 0x1bbfb0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffffbe, 1) , (const, 0x0, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (unique, 0xbd80, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffbf, 1) MULTIEQUAL (stack, 0xffffffffffffffbf, 1) , (stack, 0xffffffffffffffbf, 1)]
[(stack, 0xffffffffffffffbe, 1) MULTIEQUAL (stack, 0xffffffffffffffbe, 1) , (stack, 0xffffffffffffffbe, 1)]
[(ram, 0x4eae58, 8) MULTIEQUAL (ram, 0x4eae58, 8) , (ram, 0x4eae58, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x0, 8) COPY (const, 0xffffffffffffffff, 8)]
[ ---  BRANCH (ram, 0x1bbfb0, 1)]
[(stack, 0xffffffffffffffbf, 1) MULTIEQUAL (stack, 0xffffffffffffffbf, 1) , (stack, 0xffffffffffffffbf, 1) , (stack, 0xffffffffffffffbf, 1) , (stack, 0xffffffffffffffbf, 1) , (stack, 0xffffffffffffffbf, 1) , (stack, 0xffffffffffffffbf, 1) , (stack, 0xffffffffffffffbf, 1)]
[(stack, 0xffffffffffffffbe, 1) MULTIEQUAL (stack, 0xffffffffffffffbe, 1) , (stack, 0xffffffffffffffbe, 1) , (stack, 0xffffffffffffffbe, 1) , (stack, 0xffffffffffffffbe, 1) , (stack, 0xffffffffffffffbe, 1) , (stack, 0xffffffffffffffbe, 1) , (stack, 0xffffffffffffffbe, 1)]
[(ram, 0x4eae58, 8) MULTIEQUAL (ram, 0x4eae58, 8) , (ram, 0x4eae58, 8) , (ram, 0x4eae58, 8) , (ram, 0x4eae58, 8) , (ram, 0x4eae58, 8) , (ram, 0x4eae58, 8) , (ram, 0x4eae58, 8)]
[(register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8) , (register, 0x0, 8) , (register, 0x0, 8) , (register, 0x0, 8) , (register, 0x0, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x1bbfe0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffffc0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10000113, 8), (unique, 0x10000113, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffbe, 1) INDIRECT (stack, 0xffffffffffffffbe, 1) , (const, 0x170, 4)]
[(stack, 0xffffffffffffffbf, 1) INDIRECT (stack, 0xffffffffffffffbf, 1) , (const, 0x170, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x170, 4)]
[ ---  CALL (ram, 0x234c80, 8)]
[(ram, 0x4eae58, 8) COPY (ram, 0x4eae58, 8), (ram, 0x4eae58, 8) INDIRECT (ram, 0x4eae58, 8) , (const, 0x170, 4)]
[ ---  RETURN (const, 0x1, 4)]
[(ram, 0x4eae58, 8) COPY (ram, 0x4eae58, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8)]
