[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff78, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x38, 4)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x38, 4), (register, 0x20a, 1) COPY (const, 0x0, 1)]
[(ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x38, 4)]
[(ram, 0x4eb358, 4) INDIRECT (ram, 0x4eb358, 4) , (const, 0x38, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x38, 4), (stack, 0xffffffffffffff70, 8) COPY (const, 0x21efc7, 8)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x38, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x38, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x38, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x38, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x38, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x38, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x38, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x38, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x100007ad, 8), (unique, 0x100007ad, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8)]
[(stack, 0xffffffffffffff88, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x121260, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x21f340, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (ram, 0x4ee410, 8), (register, 0x0, 8) CALL (ram, 0x121260, 8) , (const, 0x0, 8), (ram, 0x4ee410, 8) INDIRECT (ram, 0x4ee410, 8) , (const, 0x38, 4)]
[ ---  CBRANCH (ram, 0x21f13e, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (const, 0xffffffff, 4) , (unique, 0x100007b5, 4), (unique, 0x100007b5, 4) CAST (ram, 0x4eb358, 4)]
[(register, 0xa8, 8) INT_ADD (register, 0xa8, 8) , (const, 0x1800, 8), (register, 0xa8, 8) INT_AND (unique, 0x1000012d, 8) , (const, 0xffffffffffffe980, 8), (unique, 0x1000012d, 8) INT_2COMP (unique, 0x12600, 8), (unique, 0x12600, 8) INT_ZEXT (register, 0x200, 1), (register, 0x200, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x2300b0, 8) , (const, 0x2000, 8)]
[(register, 0x20, 8) PTRADD (unique, 0x100003d4, 8) , (unique, 0x10000145, 8) , (const, 0x1, 8), (unique, 0x100003d4, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff78, 8), (unique, 0x10000145, 8) INT_2COMP (unique, 0x3c80, 8), (unique, 0x3c80, 8) INT_ADD (register, 0xa0, 8) , (const, 0x2010, 8), (register, 0xa0, 8) INT_AND (unique, 0x1000013d, 8) , (const, 0xffffffffffffe200, 8), (unique, 0x1000013d, 8) INT_2COMP (unique, 0x12600, 8), (unique, 0x12600, 8) INT_ZEXT (register, 0x200, 1), (register, 0x200, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x2300b0, 8) , (const, 0x2000, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100007d9, 8) , (const, 0x21f061, 8), (unique, 0x100007d9, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x100004e4, 8) , (unique, 0x100004dc, 8) , (const, 0x1, 8), (unique, 0x100004e4, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff78, 8), (unique, 0x100004dc, 8) INT_ADD (unique, 0x10000145, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x10000145, 8) INT_2COMP (unique, 0x3c80, 8), (unique, 0x3c80, 8) INT_ADD (register, 0xa0, 8) , (const, 0x2010, 8), (register, 0xa0, 8) INT_AND (unique, 0x1000013d, 8) , (const, 0xffffffffffffe200, 8), (unique, 0x1000013d, 8) INT_2COMP (unique, 0x12600, 8), (unique, 0x12600, 8) INT_ZEXT (register, 0x200, 1), (register, 0x200, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x2300b0, 8) , (const, 0x2000, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x104, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x4b, 4)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x104, 4), (register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x4b, 4)]
[(ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x104, 4), (ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x4b, 4)]
[(ram, 0x4eb358, 4) INDIRECT (ram, 0x4eb358, 4) , (const, 0x104, 4), (ram, 0x4eb358, 4) INDIRECT (ram, 0x4eb358, 4) , (const, 0x4b, 4)]
[(ram, 0x4ee410, 8) INDIRECT (ram, 0x4ee410, 8) , (const, 0x104, 4), (ram, 0x4ee410, 8) INDIRECT (ram, 0x4ee410, 8) , (const, 0x4b, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x104, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x103, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x4b, 4), (stack, 0xffffffffffffff70, 8) COPY (const, 0x21efe8, 8)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x104, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x103, 4), (stack, 0xffffffffffffff80, 8) COPY (register, 0x18, 8), (register, 0x18, 8) INT_ADD (register, 0x18, 8) , (const, 0x800, 8), (register, 0x18, 8) INT_AND (unique, 0x1000011d, 8) , (const, 0xfffffffffffff880, 8), (unique, 0x1000011d, 8) INT_2COMP (unique, 0x12600, 8), (unique, 0x12600, 8) INT_ZEXT (register, 0x200, 1), (register, 0x200, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x2300b0, 8) , (const, 0x2000, 8)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x104, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x103, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x4b, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x104, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x103, 4), (stack, 0xffffffffffffff90, 8) COPY (unique, 0x3800, 8), (unique, 0x3800, 8) CAST (unique, 0x100007c1, 8), (unique, 0x100007c1, 8) INT_ADD (unique, 0x100007b9, 8) , (unique, 0x10000145, 8), (unique, 0x100007b9, 8) CAST (unique, 0x100004cc, 8), (unique, 0x100004cc, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff80, 8), (unique, 0x10000145, 8) INT_2COMP (unique, 0x3c80, 8), (unique, 0x3c80, 8) INT_ADD (register, 0xa0, 8) , (const, 0x2010, 8), (register, 0xa0, 8) INT_AND (unique, 0x1000013d, 8) , (const, 0xffffffffffffe200, 8), (unique, 0x1000013d, 8) INT_2COMP (unique, 0x12600, 8), (unique, 0x12600, 8) INT_ZEXT (register, 0x200, 1), (register, 0x200, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x2300b0, 8) , (const, 0x2000, 8)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x104, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x103, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x4b, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x104, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x103, 4), (stack, 0xffffffffffffffa8, 8) COPY (register, 0xa0, 8), (register, 0xa0, 8) CAST (unique, 0x100007d1, 8), (unique, 0x100007d1, 8) INT_ADD (register, 0xa0, 8) , (unique, 0x100007c9, 8), (unique, 0x100007c9, 8) CAST (unique, 0x3800, 8), (unique, 0x3800, 8) CAST (unique, 0x100007c1, 8), (unique, 0x100007c1, 8) INT_ADD (unique, 0x100007b9, 8) , (unique, 0x10000145, 8), (unique, 0x100007b9, 8) CAST (unique, 0x100004cc, 8), (unique, 0x100004cc, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff80, 8), (unique, 0x10000145, 8) INT_2COMP (unique, 0x3c80, 8), (register, 0xa0, 8) INT_ADD (register, 0xa0, 8) , (const, 0x2000, 8), (unique, 0x3c80, 8) INT_ADD (register, 0xa0, 8) , (const, 0x2010, 8), (register, 0xa0, 8) INT_AND (unique, 0x1000013d, 8) , (const, 0xffffffffffffe200, 8), (unique, 0x1000013d, 8) INT_2COMP (unique, 0x12600, 8), (unique, 0x12600, 8) INT_ZEXT (register, 0x200, 1), (register, 0x200, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x2300b0, 8) , (const, 0x2000, 8)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x104, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x103, 4), (stack, 0xffffffffffffffb0, 8) COPY (register, 0xa0, 8), (register, 0xa0, 8) CAST (unique, 0x100007d1, 8), (unique, 0x100007d1, 8) INT_ADD (register, 0xa0, 8) , (unique, 0x100007c9, 8), (unique, 0x100007c9, 8) CAST (unique, 0x3800, 8), (unique, 0x3800, 8) CAST (unique, 0x100007c1, 8), (unique, 0x100007c1, 8) INT_ADD (unique, 0x100007b9, 8) , (unique, 0x10000145, 8), (unique, 0x100007b9, 8) CAST (unique, 0x100004cc, 8), (unique, 0x100004cc, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff80, 8), (unique, 0x10000145, 8) INT_2COMP (unique, 0x3c80, 8), (register, 0xa0, 8) INT_ADD (register, 0xa0, 8) , (const, 0x2000, 8), (unique, 0x3c80, 8) INT_ADD (register, 0xa0, 8) , (const, 0x2010, 8), (register, 0xa0, 8) INT_AND (unique, 0x1000013d, 8) , (const, 0xffffffffffffe200, 8), (unique, 0x1000013d, 8) INT_2COMP (unique, 0x12600, 8), (unique, 0x12600, 8) INT_ZEXT (register, 0x200, 1), (register, 0x200, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x2300b0, 8) , (const, 0x2000, 8)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x104, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x103, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x4b, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x104, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x103, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x4b, 4)]
[(stack, 0xffffffffffffff98, 8) CAST (unique, 0x100007e5, 8), (unique, 0x100007e5, 8) INT_ADD (unique, 0x100006a1, 8) , (register, 0x0, 4), (unique, 0x100006a1, 8) INT_LEFT (unique, 0x10000699, 8) , (const, 0x20, 8), (unique, 0x10000699, 8) INT_SEXT (unique, 0x100007e1, 4), (unique, 0x100007e1, 4) CAST (stack, 0xffffffffffffff9c, 4), (register, 0x0, 4) CALL (ram, 0x20fd70, 8) , (unique, 0x100003ac, 8) , (const, 0x80000, 8), (stack, 0xffffffffffffff9c, 4) INDIRECT (stack, 0xffffffffffffff9c, 4) , (const, 0x104, 4), (unique, 0x100003ac, 8) COPY (const, 0x2b9e38, 8), (stack, 0xffffffffffffff9c, 4) INDIRECT (stack, 0xffffffffffffff9c, 4) , (const, 0x103, 4), (stack, 0xffffffffffffff9c, 4) SUBPIECE (stack, 0xffffffffffffff98, 8) , (const, 0x4, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x4b, 4)]
[ ---  CBRANCH (ram, 0x21f1a0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0xffffffff, 4), (register, 0x0, 4) CALL (ram, 0x20fd70, 8) , (unique, 0x100003ac, 8) , (const, 0x80000, 8), (unique, 0x100003ac, 8) COPY (const, 0x2b9e38, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100007ed, 8) , (const, 0x21f088, 8), (unique, 0x100007ed, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x100004fc, 8) , (unique, 0x100004f4, 8) , (const, 0x1, 8), (unique, 0x100004fc, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff78, 8), (unique, 0x100004f4, 8) INT_ADD (unique, 0x10000145, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x11e, 4)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x11e, 4)]
[(ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x11e, 4)]
[(ram, 0x4eb358, 4) INDIRECT (ram, 0x4eb358, 4) , (const, 0x11e, 4)]
[(ram, 0x4ee410, 8) INDIRECT (ram, 0x4ee410, 8) , (const, 0x11e, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x11e, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x11d, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x11e, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x11d, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x11e, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x11d, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x11e, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x11d, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x11e, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x11d, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x11e, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x11d, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x11e, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x11d, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x11e, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x11d, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x11e, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x11d, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x11e, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x11d, 4)]
[ ---  CBRANCH (ram, 0x21f198, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x100007f5, 8), (unique, 0x100007f5, 8) CALL (ram, 0x21edf0, 8) , (register, 0x0, 4) , (unique, 0x3800, 8) , (unique, 0x3100, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffa8, 8), (unique, 0x3100, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffb0, 8)]
[(unique, 0x3100, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffb8, 8)]
[(register, 0x18, 4) COPY (const, 0x0, 4)]
[(register, 0x18, 4) MULTIEQUAL (register, 0x18, 4) , (register, 0x80, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100007fd, 8) , (const, 0x21f0b0, 8), (unique, 0x100007fd, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x10000514, 8) , (unique, 0x1000050c, 8) , (const, 0x1, 8), (unique, 0x10000514, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff78, 8), (unique, 0x1000050c, 8) INT_ADD (unique, 0x10000145, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x13d, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x13d, 4), (register, 0x20a, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1)]
[(ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x13d, 4), (ram, 0x4eae00, 8) MULTIEQUAL (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8)]
[(ram, 0x4eb358, 4) INDIRECT (ram, 0x4eb358, 4) , (const, 0x13d, 4), (ram, 0x4eb358, 4) MULTIEQUAL (ram, 0x4eb358, 4) , (ram, 0x4eb358, 4)]
[(ram, 0x4ee410, 8) INDIRECT (ram, 0x4ee410, 8) , (const, 0x13d, 4), (ram, 0x4ee410, 8) MULTIEQUAL (ram, 0x4ee410, 8) , (ram, 0x4ee410, 8)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x13d, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x13c, 4), (stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x13d, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x13c, 4), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x13d, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x13c, 4), (stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x13d, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x13c, 4), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x13d, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x13c, 4), (stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x13d, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x13c, 4), (stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x13d, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x13c, 4), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x13d, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x13c, 4), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x13d, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x13c, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(register, 0x0, 8) CAST (unique, 0x10000815, 8), (unique, 0x10000815, 8) CALL (ram, 0x145140, 8) , (unique, 0x10000805, 8) , (unique, 0x1000080d, 8) , (const, 0xa, 4), (unique, 0x1000080d, 8) CAST (unique, 0x3100, 8), (unique, 0x10000805, 8) CAST (register, 0xb0, 8), (register, 0xb0, 8) MULTIEQUAL (register, 0x0, 8) , (unique, 0x1000068d, 8)]
[ ---  CBRANCH (ram, 0x21f198, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffffb8, 8) , (register, 0xb0, 8), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x13d, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x13c, 4), (register, 0xb0, 8) MULTIEQUAL (register, 0x0, 8) , (unique, 0x1000068d, 8), (stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(unique, 0x100006e1, 8) COPY (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x21f168, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x2d, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x1000081d, 8), (unique, 0x1000081d, 8) CAST (stack, 0xffffffffffffffb8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000835, 8) , (const, 0x21f180, 8), (unique, 0x10000835, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x10000544, 8) , (unique, 0x1000053c, 8) , (const, 0x1, 8), (unique, 0x10000544, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff78, 8), (unique, 0x1000053c, 8) INT_ADD (unique, 0x10000145, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x467, 4)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x467, 4)]
[(ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x467, 4)]
[(ram, 0x4eb358, 4) INDIRECT (ram, 0x4eb358, 4) , (const, 0x467, 4)]
[(ram, 0x4ee410, 8) INDIRECT (ram, 0x4ee410, 8) , (const, 0x467, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x467, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x466, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x467, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x466, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x467, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x466, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x467, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x466, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x467, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x466, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x467, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x466, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x467, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x466, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x467, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x466, 4)]
[(register, 0x0, 8) CAST (unique, 0x1000084d, 8), (unique, 0x1000084d, 8) CALL (ram, 0x145140, 8) , (unique, 0x1000083d, 8) , (unique, 0x10000845, 8) , (const, 0xa, 4), (unique, 0x10000845, 8) CAST (unique, 0x3100, 8), (unique, 0x1000083d, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000082d, 8), (unique, 0x1000082d, 8) INT_ADD (unique, 0x10000825, 8) , (const, 0x1, 8), (unique, 0x10000825, 8) CAST (stack, 0xffffffffffffffb8, 8)]
[(unique, 0x100006e9, 8) COPY (stack, 0xffffffffffffffa0, 8), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x467, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x466, 4), (stack, 0xffffffffffffffa0, 8) COPY (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x21f0c9, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffffb8, 8) , (unique, 0x3100, 8), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x467, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x466, 4), (unique, 0x3100, 8) CAST (unique, 0x1000082d, 8), (unique, 0x1000082d, 8) INT_ADD (unique, 0x10000825, 8) , (const, 0x1, 8), (unique, 0x10000825, 8) CAST (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(ram, 0x4ee410, 8) MULTIEQUAL (ram, 0x4ee410, 8) , (ram, 0x4ee410, 8)]
[(ram, 0x4eb358, 4) MULTIEQUAL (ram, 0x4eb358, 4) , (ram, 0x4eb358, 4)]
[(ram, 0x4eae00, 8) MULTIEQUAL (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8)]
[(register, 0x20a, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x80, 4) INT_ADD (register, 0x18, 4) , (unique, 0x10000182, 4), (unique, 0x10000182, 4) SUBPIECE (register, 0x0, 8) , (const, 0x0, 4), (register, 0x18, 4) INT_SUB (register, 0x18, 4) , (register, 0x8, 4), (register, 0x8, 4) SUBPIECE (register, 0x8, 8) , (const, 0x0, 4), (register, 0x18, 4) INT_ADD (register, 0x18, 4) , (const, 0x1, 4), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8), (register, 0x8, 8) MULTIEQUAL (unique, 0x100006e1, 8) , (unique, 0x100006e9, 8)]
[ ---  CBRANCH (ram, 0x21f118, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESSEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb8, 8), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8), (stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) CAST (unique, 0x10000865, 8), (unique, 0x10000865, 8) INT_ADD (unique, 0x3880, 8) , (unique, 0x3900, 8), (unique, 0x3900, 8) INT_MULT (register, 0x0, 8) , (const, 0x2, 8), (unique, 0x3880, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x1, 8), (register, 0x0, 8) INT_SEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x1000085d, 8), (unique, 0x1000085d, 8) CAST (stack, 0xffffffffffffffb8, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000855, 8), (unique, 0x10000855, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (ram, 0x4eae00, 8) , (register, 0x110, 8) , (const, 0x1, 8)]
[(unique, 0x100007a5, 8) COPY (stack, 0xffffffffffffffb8, 8)]
[(unique, 0x1000068d, 8) MULTIEQUAL (unique, 0x100007a5, 8) , (register, 0x10, 8)]
[ ---  CBRANCH (ram, 0x21f10f, 1) , (unique, 0x1000068c, 1), (unique, 0x1000068c, 1) INT_NOTEQUAL (unique, 0x58c00, 1) , (const, 0x0, 1), (unique, 0x58c00, 1) INT_AND (unique, 0xbb00, 1) , (const, 0x20, 1), (unique, 0xbb00, 1) MULTIEQUAL (unique, 0xbb00, 1) , (unique, 0xbb00, 1)]
[ ---  CBRANCH (ram, 0x21f100, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x10, 8) , (stack, 0xffffffffffffffb0, 8), (register, 0x10, 8) CAST (unique, 0x10000875, 8), (unique, 0x10000875, 8) INT_ADD (unique, 0x1000086d, 8) , (const, 0x1, 8), (unique, 0x1000086d, 8) CAST (unique, 0x1000068d, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000895, 8) , (const, 0x21f124, 8), (unique, 0x10000895, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x1000052c, 8) , (unique, 0x10000524, 8) , (const, 0x1, 8), (unique, 0x1000052c, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff78, 8), (unique, 0x10000524, 8) INT_ADD (unique, 0x10000145, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1b6, 4)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x1b6, 4)]
[(ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x1b6, 4)]
[(ram, 0x4eb358, 4) INDIRECT (ram, 0x4eb358, 4) , (const, 0x1b6, 4)]
[(ram, 0x4ee410, 8) INDIRECT (ram, 0x4ee410, 8) , (const, 0x1b6, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x1b6, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x1b5, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x1b6, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x1b5, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x1b6, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x1b5, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x1b6, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x1b5, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x1b6, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x1b5, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x1b6, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x1b5, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x1b6, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x1b5, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1b6, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1b5, 4)]
[ ---  CALL (ram, 0x210940, 8) , (register, 0x38, 8), (register, 0x38, 8) INT_AND (unique, 0x1000087d, 8) , (const, 0xffffffff, 8), (unique, 0x1000087d, 8) CAST (stack, 0xffffffffffffff98, 8)]
[ ---  CBRANCH (ram, 0x21f1a0, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (const, 0x0, 4) , (stack, 0xffffffffffffffa0, 4), (stack, 0xffffffffffffffa0, 4) SUBPIECE (stack, 0xffffffffffffffa0, 8) , (const, 0x0, 8), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x1b6, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x1b5, 4), (stack, 0xffffffffffffffa0, 8) CAST (unique, 0x1000088d, 8), (unique, 0x1000088d, 8) INT_OR (unique, 0x10000352, 8) , (unique, 0x1000035a, 8), (unique, 0x1000035a, 8) INT_ZEXT (register, 0x80, 4), (unique, 0x10000352, 8) INT_AND (unique, 0x10000885, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10000885, 8) CAST (stack, 0xffffffffffffffa0, 8)]
[(unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) CAST (unique, 0x100008a5, 8), (unique, 0x100008a5, 8) INT_ADD (unique, 0x3880, 8) , (unique, 0x3900, 8), (unique, 0x3900, 8) INT_MULT (register, 0x8, 8) , (const, 0x2, 8), (unique, 0x3880, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x1, 8), (register, 0x8, 8) INT_SEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x1000089d, 8), (unique, 0x1000089d, 8) CAST (register, 0x10, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100008b5, 8) , (const, 0x21f1a0, 8), (unique, 0x100008b5, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x1000055c, 8) , (unique, 0x10000554, 8) , (const, 0x1, 8), (unique, 0x1000055c, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff78, 8), (unique, 0x10000554, 8) INT_ADD (unique, 0x10000145, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x47f, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x47f, 4), (register, 0x20a, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1) , (register, 0x20a, 1)]
[(ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x47f, 4), (ram, 0x4eae00, 8) MULTIEQUAL (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8)]
[(ram, 0x4eb358, 4) INDIRECT (ram, 0x4eb358, 4) , (const, 0x47f, 4), (ram, 0x4eb358, 4) MULTIEQUAL (ram, 0x4eb358, 4) , (ram, 0x4eb358, 4) , (ram, 0x4eb358, 4)]
[(ram, 0x4ee410, 8) INDIRECT (ram, 0x4ee410, 8) , (const, 0x47f, 4), (ram, 0x4ee410, 8) MULTIEQUAL (ram, 0x4ee410, 8) , (ram, 0x4ee410, 8) , (ram, 0x4ee410, 8)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x47f, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x47e, 4), (stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x47f, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x47e, 4), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x47f, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x47e, 4), (stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x47f, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x47e, 4), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x47f, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x47e, 4), (stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x47f, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x47e, 4), (stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x47f, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x47e, 4), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x47f, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x47e, 4), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x47f, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x47e, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CALL (ram, 0x210940, 8) , (register, 0x38, 8), (register, 0x38, 8) INT_AND (unique, 0x100008ad, 8) , (const, 0xffffffff, 8), (unique, 0x100008ad, 8) CAST (stack, 0xffffffffffffff98, 8), (stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100008bd, 8) , (const, 0x21f1bb, 8), (unique, 0x100008bd, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x10000574, 8) , (unique, 0x1000056c, 8) , (const, 0x1, 8), (unique, 0x10000574, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff78, 8), (unique, 0x1000056c, 8) INT_ADD (unique, 0x10000145, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x208, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x208, 4), (register, 0x20a, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1) , (register, 0x20a, 1)]
[(ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x208, 4), (ram, 0x4eae00, 8) MULTIEQUAL (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8)]
[(ram, 0x4eb358, 4) INDIRECT (ram, 0x4eb358, 4) , (const, 0x208, 4), (ram, 0x4eb358, 4) MULTIEQUAL (ram, 0x4eb358, 4) , (ram, 0x4eb358, 4) , (ram, 0x4eb358, 4)]
[(ram, 0x4ee410, 8) INDIRECT (ram, 0x4ee410, 8) , (const, 0x208, 4), (ram, 0x4ee410, 8) MULTIEQUAL (ram, 0x4ee410, 8) , (ram, 0x4ee410, 8) , (ram, 0x4ee410, 8)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x208, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x207, 4), (stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x208, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x207, 4), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x208, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x207, 4), (stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x208, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x207, 4), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x208, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x207, 4), (stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x208, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x207, 4), (stack, 0xffffffffffffffa8, 8) COPY (register, 0xa0, 8)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x208, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x207, 4), (stack, 0xffffffffffffffb0, 8) COPY (register, 0xa0, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x208, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x207, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffa0, 8) CAST (unique, 0x100008cd, 8), (unique, 0x100008cd, 8) INT_OR (unique, 0x10000365, 8) , (unique, 0x1000036d, 8), (unique, 0x1000036d, 8) INT_ZEXT (register, 0x0, 4), (unique, 0x10000365, 8) INT_AND (unique, 0x100008c5, 8) , (const, 0xffffffff00000000, 8), (unique, 0x100008c5, 8) CAST (stack, 0xffffffffffffffa0, 8), (register, 0x0, 4) CALL (ram, 0x20fd70, 8) , (unique, 0x1000038c, 8) , (const, 0x80000, 8), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x208, 4), (unique, 0x1000038c, 8) COPY (const, 0x2b5916, 8), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x207, 4), (stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[ ---  CBRANCH (ram, 0x21f353, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0xffffffff, 4), (register, 0x0, 4) CALL (ram, 0x20fd70, 8) , (unique, 0x1000038c, 8) , (const, 0x80000, 8), (unique, 0x1000038c, 8) COPY (const, 0x2b5916, 8)]
[(register, 0x18, 4) COPY (const, 0x0, 4)]
[(stack, 0xffffffffffffff98, 8) COPY (register, 0xa8, 8), (register, 0xa8, 8) CAST (unique, 0x100008dd, 8), (unique, 0x100008dd, 8) INT_ADD (register, 0xa8, 8) , (unique, 0x100008d5, 8), (unique, 0x100008d5, 8) CAST (stack, 0xffffffffffffff90, 8)]
[(unique, 0x10000759, 8) COPY (stack, 0xffffffffffffffb0, 8)]
[ ---  BRANCH (ram, 0x21f22b, 1)]
[(register, 0x18, 4) MULTIEQUAL (register, 0x18, 4) , (register, 0x18, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100008fd, 8) , (const, 0x21f241, 8), (unique, 0x100008fd, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x1000058c, 8) , (unique, 0x10000584, 8) , (const, 0x1, 8), (unique, 0x1000058c, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff78, 8), (unique, 0x10000584, 8) INT_ADD (unique, 0x10000145, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x246, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x246, 4), (register, 0x20a, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1)]
[(ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x246, 4), (ram, 0x4eae00, 8) MULTIEQUAL (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8)]
[(ram, 0x4eb358, 4) INDIRECT (ram, 0x4eb358, 4) , (const, 0x246, 4), (ram, 0x4eb358, 4) MULTIEQUAL (ram, 0x4eb358, 4) , (ram, 0x4eb358, 4)]
[(ram, 0x4ee410, 8) INDIRECT (ram, 0x4ee410, 8) , (const, 0x246, 4), (ram, 0x4ee410, 8) MULTIEQUAL (ram, 0x4ee410, 8) , (ram, 0x4ee410, 8)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x246, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x245, 4), (stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x246, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x245, 4), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x246, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x245, 4), (stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x246, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x245, 4), (stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x246, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x245, 4), (stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x246, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x245, 4), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x246, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x245, 4), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x246, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x245, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(unique, 0x100006b1, 8) COPY (stack, 0xffffffffffffff90, 8), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x246, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x245, 4), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(unique, 0x10000751, 8) COPY (register, 0xa8, 8), (register, 0xa8, 8) MULTIEQUAL (unique, 0x10000759, 8) , (unique, 0x10000761, 8)]
[(unique, 0x10000781, 8) COPY (unique, 0x100006c9, 8), (unique, 0x100006c9, 8) COPY (stack, 0xffffffffffffffa8, 8), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[ ---  CBRANCH (ram, 0x21f1e0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x1210c0, 8) , (unique, 0x100006c9, 8) , (const, 0xa, 4) , (unique, 0x10000905, 8), (unique, 0x10000905, 8) CAST (register, 0xb8, 8), (register, 0xb8, 8) CAST (unique, 0x100008f5, 8), (unique, 0x100008f5, 8) INT_SUB (unique, 0x100008e5, 8) , (unique, 0x100008ed, 8), (unique, 0x100008ed, 8) CAST (stack, 0xffffffffffffffa8, 8), (unique, 0x100008e5, 8) CAST (register, 0xa8, 8), (unique, 0x100006c9, 8) COPY (stack, 0xffffffffffffffa8, 8), (register, 0xa8, 8) MULTIEQUAL (unique, 0x10000759, 8) , (unique, 0x10000761, 8), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(unique, 0x10000769, 8) COPY (unique, 0x100006c9, 8)]
[ ---  CBRANCH (ram, 0x21f251, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffff90, 8) , (unique, 0x100006c9, 8)]
[(unique, 0x10000771, 8) COPY (unique, 0x100006c9, 8)]
[ ---  CBRANCH (ram, 0x21f268, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xa0, 8) , (register, 0xa8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000090d, 8) , (const, 0x21f27a, 8), (unique, 0x1000090d, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x100005a4, 8) , (unique, 0x1000059c, 8) , (const, 0x1, 8), (unique, 0x100005a4, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff78, 8), (unique, 0x1000059c, 8) INT_ADD (unique, 0x10000145, 8) , (const, 0xfffffffffffffff8, 8)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x2fc, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x2fb, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x2fc, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x2fb, 4)]
[ ---  CALL (ram, 0x1212b0, 8) , (unique, 0x100006b1, 8) , (unique, 0x100006c9, 8) , (unique, 0x10000915, 8), (unique, 0x10000915, 8) CAST (register, 0xb8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000955, 8) , (const, 0x21f294, 8), (unique, 0x10000955, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x100005bc, 8) , (unique, 0x100005b4, 8) , (const, 0x1, 8), (unique, 0x100005bc, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff78, 8), (unique, 0x100005b4, 8) INT_ADD (unique, 0x10000145, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x316, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x2fc, 4)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x316, 4), (register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x2fc, 4)]
[(ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x316, 4), (ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x2fc, 4)]
[(ram, 0x4eb358, 4) INDIRECT (ram, 0x4eb358, 4) , (const, 0x316, 4), (ram, 0x4eb358, 4) INDIRECT (ram, 0x4eb358, 4) , (const, 0x2fc, 4)]
[(ram, 0x4ee410, 8) INDIRECT (ram, 0x4ee410, 8) , (const, 0x316, 4), (ram, 0x4ee410, 8) INDIRECT (ram, 0x4ee410, 8) , (const, 0x2fc, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x316, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x315, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x2fc, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x2fb, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x316, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x315, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x2fc, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x2fb, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x316, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x315, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x2fc, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x2fb, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x316, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x315, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x2fc, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x2fb, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x316, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x315, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x2fc, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x2fb, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x316, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x315, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x2fc, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x2fb, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x316, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x315, 4), (stack, 0xffffffffffffffb0, 8) COPY (unique, 0x3400, 8), (unique, 0x3400, 8) CAST (unique, 0x1000092d, 8), (unique, 0x1000092d, 8) INT_ADD (unique, 0x1000091d, 8) , (unique, 0x10000925, 8), (unique, 0x10000925, 8) CAST (register, 0xb8, 8), (unique, 0x1000091d, 8) CAST (unique, 0x100006b1, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x316, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x315, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2fc, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2fb, 4)]
[(unique, 0x100006d1, 8) COPY (stack, 0xffffffffffffffa8, 8), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x316, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x315, 4), (stack, 0xffffffffffffffa8, 8) COPY (unique, 0x100006b1, 8)]
[ ---  CBRANCH (ram, 0x21f330, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x210110, 8) , (register, 0x38, 8) , (unique, 0x3400, 8) , (register, 0x10, 8), (register, 0x10, 8) CAST (unique, 0x1000094d, 8), (unique, 0x1000094d, 8) INT_SUB (unique, 0x1000093d, 8) , (unique, 0x10000945, 8), (unique, 0x10000945, 8) CAST (unique, 0x3400, 8), (unique, 0x1000093d, 8) CAST (register, 0xa0, 8), (register, 0x38, 8) INT_AND (unique, 0x10000935, 8) , (const, 0xffffffff, 8), (unique, 0x10000935, 8) CAST (stack, 0xffffffffffffffa0, 8), (unique, 0x3400, 8) CAST (unique, 0x1000092d, 8), (unique, 0x1000092d, 8) INT_ADD (unique, 0x1000091d, 8) , (unique, 0x10000925, 8), (unique, 0x10000925, 8) CAST (register, 0xb8, 8), (unique, 0x1000091d, 8) CAST (unique, 0x100006b1, 8), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x2fc, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x2fb, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000985, 8) , (const, 0x21f2bf, 8), (unique, 0x10000985, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x100005d4, 8) , (unique, 0x100005cc, 8) , (const, 0x1, 8), (unique, 0x100005d4, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff78, 8), (unique, 0x100005cc, 8) INT_ADD (unique, 0x10000145, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x343, 4)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x343, 4)]
[(ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x343, 4)]
[(ram, 0x4eb358, 4) INDIRECT (ram, 0x4eb358, 4) , (const, 0x343, 4)]
[(ram, 0x4ee410, 8) INDIRECT (ram, 0x4ee410, 8) , (const, 0x343, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x343, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x342, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x343, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x342, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x343, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x342, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x343, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x342, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x343, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x342, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x343, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x342, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x343, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x342, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x343, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x342, 4), (stack, 0xffffffffffffffb0, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10000965, 8), (unique, 0x10000965, 8) INT_ADD (register, 0x0, 8) , (unique, 0x1000095d, 8), (unique, 0x1000095d, 8) CAST (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x343, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x342, 4)]
[(unique, 0x10000791, 8) COPY (unique, 0x100006d1, 8)]
[ ---  CBRANCH (ram, 0x21f3fd, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x1210c0, 8) , (unique, 0x100006d1, 8) , (const, 0xa, 4) , (unique, 0x1000098d, 8), (unique, 0x1000098d, 8) CAST (register, 0x10, 8), (register, 0x10, 8) CAST (unique, 0x1000097d, 8), (unique, 0x1000097d, 8) INT_SUB (unique, 0x1000096d, 8) , (unique, 0x10000975, 8), (unique, 0x10000975, 8) CAST (stack, 0xffffffffffffffa8, 8), (unique, 0x1000096d, 8) CAST (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10000965, 8), (unique, 0x10000965, 8) INT_ADD (register, 0x0, 8) , (unique, 0x1000095d, 8), (unique, 0x1000095d, 8) CAST (stack, 0xffffffffffffffb0, 8)]
[ ---  CBRANCH (ram, 0x21f30a, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (register, 0xa0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000099d, 8) , (const, 0x21f321, 8), (unique, 0x1000099d, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x10000604, 8) , (unique, 0x100005fc, 8) , (const, 0x1, 8), (unique, 0x10000604, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff78, 8), (unique, 0x100005fc, 8) INT_ADD (unique, 0x10000145, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x36c, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x36c, 4), (register, 0x20a, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1)]
[(ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x36c, 4), (ram, 0x4eae00, 8) MULTIEQUAL (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8)]
[(ram, 0x4eb358, 4) INDIRECT (ram, 0x4eb358, 4) , (const, 0x36c, 4), (ram, 0x4eb358, 4) MULTIEQUAL (ram, 0x4eb358, 4) , (ram, 0x4eb358, 4)]
[(ram, 0x4ee410, 8) INDIRECT (ram, 0x4ee410, 8) , (const, 0x36c, 4), (ram, 0x4ee410, 8) MULTIEQUAL (ram, 0x4ee410, 8) , (ram, 0x4ee410, 8)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x36c, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x36b, 4), (stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x36c, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x36b, 4), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x36c, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x36b, 4), (stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x36c, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x36b, 4), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x36c, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x36b, 4), (stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x36c, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x36b, 4), (stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x36c, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x36b, 4), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x36c, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x36b, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(unique, 0x100006d9, 8) COPY (stack, 0xffffffffffffffb0, 8), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x36c, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x36b, 4), (stack, 0xffffffffffffffb0, 8) COPY (stack, 0xffffffffffffff98, 8), (stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[ ---  CBRANCH (ram, 0x21f2d8, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (unique, 0x100009a5, 8) , (const, 0x0, 8), (unique, 0x100009a5, 8) CAST (register, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x210110, 8) , (register, 0x38, 8) , (unique, 0x100006c1, 8) , (unique, 0x100006a9, 8), (register, 0x38, 8) INT_AND (unique, 0x10000995, 8) , (const, 0xffffffff, 8), (unique, 0x10000995, 8) CAST (stack, 0xffffffffffffffa0, 8), (unique, 0x100006a9, 8) COPY (stack, 0xffffffffffffff80, 8), (unique, 0x100006c1, 8) COPY (stack, 0xffffffffffffff98, 8), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8), (stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8), (stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100009ad, 8) , (const, 0x21f2ec, 8), (unique, 0x100009ad, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x100005ec, 8) , (unique, 0x100005e4, 8) , (const, 0x1, 8), (unique, 0x100005ec, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff78, 8), (unique, 0x100005e4, 8) INT_ADD (unique, 0x10000145, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x381, 4)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x381, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x381, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x380, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x381, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x380, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x381, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x380, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x381, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x380, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x381, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x380, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x381, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x380, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x381, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x380, 4)]
[(ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x383, 4), (ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x381, 4)]
[(ram, 0x4eb358, 4) INDIRECT (ram, 0x4eb358, 4) , (const, 0x383, 4), (ram, 0x4eb358, 4) INDIRECT (ram, 0x4eb358, 4) , (const, 0x381, 4)]
[(ram, 0x4ee410, 8) INDIRECT (ram, 0x4ee410, 8) , (const, 0x383, 4), (ram, 0x4ee410, 8) INDIRECT (ram, 0x4ee410, 8) , (const, 0x381, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100009b5, 8) , (const, 0xa, 1), (unique, 0x100009b5, 8) CAST (unique, 0x100006d9, 8)]
[(stack, 0xffffffffffffffb0, 8) COPY (register, 0xb8, 8), (register, 0xb8, 8) CAST (unique, 0x100009c5, 8), (unique, 0x100009c5, 8) INT_ADD (register, 0x0, 8) , (unique, 0x100009bd, 8), (unique, 0x100009bd, 8) CAST (stack, 0xffffffffffffffb0, 8), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x381, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x380, 4)]
[(unique, 0x10000799, 8) COPY (stack, 0xffffffffffffffa8, 8), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x381, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x380, 4)]
[ ---  CBRANCH (ram, 0x21f3dd, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x1210c0, 8) , (unique, 0x100006d9, 8) , (const, 0xa, 4) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x21f3e9, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xb8, 8) , (register, 0xa8, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(ram, 0x4ee410, 8) MULTIEQUAL (ram, 0x4ee410, 8) , (ram, 0x4ee410, 8) , (ram, 0x4ee410, 8) , (ram, 0x4ee410, 8)]
[(ram, 0x4eb358, 4) MULTIEQUAL (ram, 0x4eb358, 4) , (ram, 0x4eb358, 4) , (ram, 0x4eb358, 4) , (ram, 0x4eb358, 4)]
[(ram, 0x4eae00, 8) MULTIEQUAL (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8)]
[(register, 0x20a, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1) , (register, 0x20a, 1) , (register, 0x20a, 1)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x3100, 8) CAST (unique, 0x100009d5, 8), (unique, 0x100009d5, 8) INT_ADD (unique, 0x100009cd, 8) , (const, 0xffffffffffffffff, 8), (unique, 0x100009cd, 8) CAST (register, 0xa8, 8), (register, 0xa8, 8) MULTIEQUAL (unique, 0x10000751, 8) , (unique, 0x10000751, 8) , (register, 0xb8, 8) , (register, 0x0, 8)]
[(unique, 0x10000789, 8) COPY (register, 0xb0, 8), (register, 0xb0, 8) MULTIEQUAL (unique, 0x10000769, 8) , (unique, 0x10000771, 8) , (unique, 0x10000799, 8) , (unique, 0x100006d1, 8)]
[ ---  BRANCH (ram, 0x21f1e0, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(ram, 0x4ee410, 8) MULTIEQUAL (ram, 0x4ee410, 8) , (ram, 0x4ee410, 8) , (ram, 0x4ee410, 8) , (ram, 0x4ee410, 8)]
[(ram, 0x4eb358, 4) MULTIEQUAL (ram, 0x4eb358, 4) , (ram, 0x4eb358, 4) , (ram, 0x4eb358, 4) , (ram, 0x4eb358, 4)]
[(ram, 0x4eae00, 8) MULTIEQUAL (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8)]
[(register, 0x20a, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1) , (register, 0x20a, 1) , (register, 0x20a, 1)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb0, 8) MULTIEQUAL (unique, 0x10000781, 8) , (unique, 0x10000789, 8) , (unique, 0x10000791, 8) , (unique, 0x10000799, 8)]
[(stack, 0xffffffffffffffa8, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x100009e5, 8), (unique, 0x100009e5, 8) INT_ADD (unique, 0x100009dd, 8) , (const, 0x1, 8), (unique, 0x100009dd, 8) CAST (register, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (unique, 0x3100, 8) , (register, 0x0, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x21f40a, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (register, 0xa8, 8) , (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x100009e5, 8), (unique, 0x100009e5, 8) INT_ADD (unique, 0x100009dd, 8) , (const, 0x1, 8), (unique, 0x100009dd, 8) CAST (register, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (unique, 0x3100, 8) , (register, 0x0, 8) , (register, 0x0, 8), (register, 0xa8, 8) MULTIEQUAL (unique, 0x10000751, 8) , (register, 0xa8, 8) , (register, 0x0, 8) , (register, 0xb8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100009ed, 8) , (unique, 0x1000037c, 8), (unique, 0x100009ed, 8) CAST (register, 0x20, 8), (unique, 0x1000037c, 8) PTRSUB (const, 0x0, 8) , (const, 0x21f429, 8), (register, 0x20, 8) PTRADD (unique, 0x1000067c, 8) , (unique, 0x10000674, 8) , (const, 0x1, 8), (unique, 0x1000067c, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff78, 8), (unique, 0x10000674, 8) INT_ADD (unique, 0x10000145, 8) , (const, 0xfffffffffffffff8, 8)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x2f1, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x2f0, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x2f1, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x2f0, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x2f1, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x2f0, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x2f1, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x2f0, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x2f1, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x2f0, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x2f1, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x2f0, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x2f1, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x2f0, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x2f1, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x2f0, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2f1, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2f0, 4)]
[ ---  CALL (ram, 0x1303d0, 8) , (unique, 0x10000384, 8) , (unique, 0x100003a4, 8) , (const, 0x77, 4) , (unique, 0x100003b4, 8), (unique, 0x100003b4, 8) COPY (const, 0x2b9e58, 8), (unique, 0x100003a4, 8) COPY (const, 0x2b9e08, 8), (unique, 0x10000384, 8) COPY (const, 0x2b590b, 8)]
[(ram, 0x4eae00, 8) COPY (ram, 0x4eae00, 8), (ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x2f1, 4)]
[(ram, 0x4eb358, 4) COPY (ram, 0x4eb358, 4), (ram, 0x4eb358, 4) INDIRECT (ram, 0x4eb358, 4) , (const, 0x2f1, 4)]
[(ram, 0x4ee410, 8) COPY (ram, 0x4ee410, 8), (ram, 0x4ee410, 8) INDIRECT (ram, 0x4ee410, 8) , (const, 0x2f1, 4)]
[ ---  RETURN (const, 0x1, 4)]
[ ---  CBRANCH (ram, 0x21f330, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xb0, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x21f330, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xb0, 8) , (register, 0xa8, 8)]
[(register, 0x8, 8) COPY (const, 0x3, 8)]
[(unique, 0x100006f1, 8) COPY (register, 0xb0, 8)]
[(unique, 0x10000711, 8) COPY (register, 0x38, 8), (register, 0x38, 8) COPY (const, 0x2b594d, 8)]
[(register, 0x206, 1) MULTIEQUAL (register, 0x206, 1) , (register, 0x206, 1)]
[(register, 0x38, 8) MULTIEQUAL (unique, 0x10000711, 8) , (unique, 0x10000719, 8)]
[(register, 0x30, 8) MULTIEQUAL (unique, 0x100006f1, 8) , (unique, 0x100006f9, 8)]
[ ---  CBRANCH (ram, 0x21f214, 1) , (unique, 0xd600, 1), (unique, 0xd600, 1) INT_EQUAL (register, 0x8, 8) , (const, 0x0, 8), (register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8)]
[(register, 0x8, 8) INT_ADD (register, 0x8, 8) , (const, 0xffffffffffffffff, 8)]
[(unique, 0x100006f9, 8) COPY (register, 0x30, 8), (register, 0x30, 8) CAST (unique, 0x100009fd, 8), (unique, 0x100009fd, 8) INT_ADD (unique, 0x100009f5, 8) , (unique, 0x10000444, 8), (unique, 0x100009f5, 8) CAST (register, 0x30, 8), (unique, 0x10000444, 8) INT_ADD (unique, 0x100001e2, 8) , (const, 0x1, 8), (unique, 0x100001e2, 8) INT_MULT (unique, 0xa380, 8) , (const, 0xfffffffffffffffe, 8), (unique, 0xa380, 8) INT_ZEXT (register, 0x20a, 1)]
[(unique, 0x10000719, 8) COPY (register, 0x38, 8), (register, 0x38, 8) PTRADD (register, 0x38, 8) , (unique, 0x1000043c, 8) , (const, 0x1, 8), (unique, 0x1000043c, 8) INT_ADD (unique, 0x100001da, 8) , (const, 0x1, 8), (unique, 0x100001da, 8) INT_MULT (unique, 0xaf80, 8) , (const, 0xfffffffffffffffe, 8), (unique, 0xaf80, 8) INT_ZEXT (register, 0x20a, 1)]
[ ---  CBRANCH (ram, 0x21f212, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xa500, 1) , (unique, 0xb100, 1), (unique, 0xb100, 1) LOAD (const, 0x1b1, 4) , (register, 0x38, 8), (unique, 0xa500, 1) LOAD (const, 0x1b1, 4) , (unique, 0x10000a05, 8), (unique, 0x10000a05, 8) CAST (register, 0x30, 8)]
[ ---  CBRANCH (ram, 0x21f330, 1) , (unique, 0xc680, 1), (unique, 0xc680, 1) BOOL_NEGATE (register, 0x206, 1), (register, 0x206, 1) MULTIEQUAL (register, 0x206, 1) , (register, 0x206, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000a15, 8) , (const, 0x21f338, 8), (unique, 0x10000a15, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x1000061c, 8) , (unique, 0x10000614, 8) , (const, 0x1, 8), (unique, 0x1000061c, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff78, 8), (unique, 0x10000614, 8) INT_ADD (unique, 0x10000145, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x2e9, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x2e9, 4), (ram, 0x4eae00, 8) MULTIEQUAL (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8)]
[(ram, 0x4eb358, 4) INDIRECT (ram, 0x4eb358, 4) , (const, 0x2e9, 4), (ram, 0x4eb358, 4) MULTIEQUAL (ram, 0x4eb358, 4) , (ram, 0x4eb358, 4) , (ram, 0x4eb358, 4) , (ram, 0x4eb358, 4) , (ram, 0x4eb358, 4)]
[(ram, 0x4ee410, 8) INDIRECT (ram, 0x4ee410, 8) , (const, 0x2e9, 4), (ram, 0x4ee410, 8) MULTIEQUAL (ram, 0x4ee410, 8) , (ram, 0x4ee410, 8) , (ram, 0x4ee410, 8) , (ram, 0x4ee410, 8) , (ram, 0x4ee410, 8)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x2e9, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x2e8, 4), (stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x2e9, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x2e8, 4), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x2e9, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x2e8, 4), (stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x2e9, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x2e8, 4), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x2e9, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x2e8, 4), (stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x2e9, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x2e8, 4), (stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x2e9, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x2e8, 4), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x2e9, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x2e8, 4), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2e9, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2e8, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CALL (ram, 0x210940, 8) , (register, 0x38, 8), (register, 0x38, 8) INT_AND (unique, 0x10000a0d, 8) , (const, 0xffffffff, 8), (unique, 0x10000a0d, 8) CAST (stack, 0xffffffffffffffa0, 8), (stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[ ---  BRANCH (ram, 0x21f12d, 1)]
[(register, 0x18, 4) INT_ADD (register, 0x18, 4) , (unique, 0x12080, 4), (unique, 0x12080, 4) INT_ZEXT (register, 0x200, 1), (register, 0x200, 1) INT_LESS (register, 0x10, 4) , (const, 0xa, 4), (register, 0x10, 4) INT_SUB (register, 0x10, 4) , (const, 0x30, 4), (register, 0x10, 4) INT_SEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000a25, 8), (unique, 0x10000a25, 8) INT_ADD (unique, 0x10000a1d, 8) , (const, 0x3, 8), (unique, 0x10000a1d, 8) CAST (register, 0xb0, 8)]
[(unique, 0x10000761, 8) COPY (register, 0xa8, 8)]
[(register, 0x18, 4) COPY (const, 0x2, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000a2d, 8) , (const, 0x21f36b, 8), (unique, 0x10000a2d, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x10000634, 8) , (unique, 0x1000062c, 8) , (const, 0x1, 8), (unique, 0x10000634, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff78, 8), (unique, 0x1000062c, 8) INT_ADD (unique, 0x10000145, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x3c5, 4)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x3c5, 4)]
[(ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x3c5, 4)]
[(ram, 0x4eb358, 4) INDIRECT (ram, 0x4eb358, 4) , (const, 0x3c5, 4)]
[(ram, 0x4ee410, 8) INDIRECT (ram, 0x4ee410, 8) , (const, 0x3c5, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x3c5, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x3c4, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x3c5, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x3c4, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x3c5, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x3c4, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x3c5, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x3c4, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x3c5, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x3c4, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x3c5, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x3c4, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x3c5, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x3c4, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x3c5, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x3c4, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x3c5, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x3c4, 4)]
[ ---  CBRANCH (ram, 0x21f12d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0xffffffff, 4), (register, 0x0, 4) CALL (ram, 0x20fd70, 8) , (unique, 0x10000394, 8) , (const, 0x80000, 8), (unique, 0x10000394, 8) COPY (const, 0x2b5921, 8)]
[(register, 0x18, 4) COPY (const, 0x0, 4)]
[(unique, 0x3100, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffa8, 8)]
[(unique, 0x10000731, 8) COPY (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffb0, 8)]
[ ---  BRANCH (ram, 0x21f3ab, 1)]
[(register, 0x18, 4) MULTIEQUAL (register, 0x18, 4) , (register, 0x18, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000a35, 8) , (const, 0x21f3c4, 8), (unique, 0x10000a35, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x1000064c, 8) , (unique, 0x10000644, 8) , (const, 0x1, 8), (unique, 0x1000064c, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff78, 8), (unique, 0x10000644, 8) INT_ADD (unique, 0x10000145, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x3ef, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x3ef, 4), (register, 0x20a, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1)]
[(ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x3ef, 4), (ram, 0x4eae00, 8) MULTIEQUAL (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8)]
[(ram, 0x4eb358, 4) INDIRECT (ram, 0x4eb358, 4) , (const, 0x3ef, 4), (ram, 0x4eb358, 4) MULTIEQUAL (ram, 0x4eb358, 4) , (ram, 0x4eb358, 4)]
[(ram, 0x4ee410, 8) INDIRECT (ram, 0x4ee410, 8) , (const, 0x3ef, 4), (ram, 0x4ee410, 8) MULTIEQUAL (ram, 0x4ee410, 8) , (ram, 0x4ee410, 8)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x3ef, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x3ee, 4), (stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x3ef, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x3ee, 4), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x3ef, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x3ee, 4), (stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x3ef, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x3ee, 4), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x3ef, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x3ee, 4), (stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x3ef, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x3ee, 4), (stack, 0xffffffffffffffa0, 8) COPY (register, 0x88, 8), (register, 0x88, 8) MULTIEQUAL (unique, 0x10000731, 8) , (unique, 0x10000739, 8)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x3ef, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x3ee, 4), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x3ef, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x3ee, 4), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x3ef, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x3ee, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(register, 0x200, 1) COPY (const, 0x0, 1)]
[ ---  CBRANCH (ram, 0x21f390, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10000a3d, 8), (unique, 0x10000a3d, 8) CALL (ram, 0x21edf0, 8) , (register, 0x0, 4) , (unique, 0x100006b9, 8) , (unique, 0x3100, 8) , (register, 0x88, 8) , (register, 0xa0, 8), (unique, 0x100006b9, 8) COPY (stack, 0xffffffffffffff90, 8), (register, 0x88, 8) MULTIEQUAL (unique, 0x10000731, 8) , (unique, 0x10000739, 8), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000a45, 8) , (const, 0x21f3d8, 8), (unique, 0x10000a45, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x10000664, 8) , (unique, 0x1000065c, 8) , (const, 0x1, 8), (unique, 0x10000664, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff78, 8), (unique, 0x1000065c, 8) INT_ADD (unique, 0x10000145, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x403, 4)]
[(ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x403, 4)]
[(ram, 0x4eb358, 4) INDIRECT (ram, 0x4eb358, 4) , (const, 0x403, 4)]
[(ram, 0x4ee410, 8) INDIRECT (ram, 0x4ee410, 8) , (const, 0x403, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x403, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x402, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x403, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x402, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x403, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x402, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x403, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x402, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x403, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x402, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x403, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x402, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x403, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x402, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x403, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x402, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x403, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x402, 4)]
[ ---  CALL (ram, 0x210940, 8) , (register, 0x0, 4)]
[ ---  BRANCH (ram, 0x21f12d, 1)]
[(register, 0x8, 8) COPY (const, 0x9, 8)]
[(unique, 0x10000701, 8) COPY (register, 0x0, 8)]
[(unique, 0x10000721, 8) COPY (unique, 0x10000a4d, 8), (unique, 0x10000a4d, 8) CAST (register, 0x38, 8), (register, 0x38, 8) COPY (const, 0x2b592f, 8)]
[(register, 0x206, 1) MULTIEQUAL (register, 0x206, 1) , (register, 0x206, 1)]
[(register, 0x200, 1) MULTIEQUAL (register, 0x200, 1) , (register, 0x200, 1)]
[(register, 0x38, 8) MULTIEQUAL (unique, 0x10000721, 8) , (unique, 0x10000729, 8)]
[(register, 0x30, 8) MULTIEQUAL (unique, 0x10000701, 8) , (unique, 0x10000709, 8)]
[ ---  CBRANCH (ram, 0x21f39a, 1) , (unique, 0xd600, 1), (unique, 0xd600, 1) INT_EQUAL (register, 0x8, 8) , (const, 0x0, 8), (register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8)]
[(register, 0x8, 8) INT_ADD (register, 0x8, 8) , (const, 0xffffffffffffffff, 8)]
[(register, 0x200, 1) INT_LESS (unique, 0xa500, 1) , (unique, 0xb100, 1), (unique, 0xb100, 1) LOAD (const, 0x1b1, 4) , (register, 0x38, 8), (unique, 0xa500, 1) LOAD (const, 0x1b1, 4) , (register, 0x30, 8)]
[(unique, 0x10000709, 8) COPY (register, 0x30, 8), (register, 0x30, 8) PTRADD (register, 0x30, 8) , (unique, 0x100004a4, 8) , (const, 0x1, 8), (unique, 0x100004a4, 8) INT_ADD (unique, 0x10000283, 8) , (const, 0x1, 8), (unique, 0x10000283, 8) INT_MULT (unique, 0xa380, 8) , (const, 0xfffffffffffffffe, 8), (unique, 0xa380, 8) INT_ZEXT (register, 0x20a, 1)]
[(unique, 0x10000729, 8) COPY (register, 0x38, 8), (register, 0x38, 8) PTRADD (register, 0x38, 8) , (unique, 0x1000049c, 8) , (const, 0x1, 8), (unique, 0x1000049c, 8) INT_ADD (unique, 0x1000027b, 8) , (const, 0x1, 8), (unique, 0x1000027b, 8) INT_MULT (unique, 0xaf80, 8) , (const, 0xfffffffffffffffe, 8), (unique, 0xaf80, 8) INT_ZEXT (register, 0x20a, 1)]
[ ---  CBRANCH (ram, 0x21f398, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xa500, 1) , (unique, 0xb100, 1), (unique, 0xb100, 1) LOAD (const, 0x1b1, 4) , (register, 0x38, 8), (unique, 0xa500, 1) LOAD (const, 0x1b1, 4) , (register, 0x30, 8)]
[(register, 0x18, 4) INT_ADD (register, 0x18, 4) , (unique, 0x12080, 4), (unique, 0x12080, 4) INT_ZEXT (register, 0x200, 1), (register, 0x200, 1) INT_EQUAL (unique, 0xc900, 1) , (register, 0x200, 1), (unique, 0xc900, 1) BOOL_AND (unique, 0x1000028c, 1) , (unique, 0x1000028d, 1), (unique, 0x1000028d, 1) BOOL_NEGATE (register, 0x206, 1), (unique, 0x1000028c, 1) BOOL_NEGATE (register, 0x200, 1), (register, 0x200, 1) MULTIEQUAL (register, 0x200, 1) , (register, 0x200, 1), (register, 0x206, 1) MULTIEQUAL (register, 0x206, 1) , (register, 0x206, 1)]
[(unique, 0x10000739, 8) COPY (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(ram, 0x4eae00, 8) MULTIEQUAL (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4ee410, 8) COPY (stack, 0xffffffffffffff88, 8), (stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(unique, 0x100007a1, 4) COPY (register, 0x18, 4), (register, 0x18, 4) MULTIEQUAL (register, 0x80, 4) , (register, 0x18, 4) , (register, 0x18, 4) , (register, 0x18, 4)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(ram, 0x4ee410, 8) MULTIEQUAL (ram, 0x4ee410, 8) , (ram, 0x4ee410, 8)]
[(ram, 0x4eb358, 4) MULTIEQUAL (unique, 0x100007a1, 4) , (ram, 0x4eb358, 4)]
[(ram, 0x4eae00, 8) MULTIEQUAL (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8)]
[(register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x21f405, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffffc0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10000a55, 8), (unique, 0x10000a55, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000a5d, 8) , (const, 0x21f40a, 8), (unique, 0x10000a5d, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x1f1, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x1f0, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x1f1, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x1f0, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x1f1, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x1f0, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x1f1, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x1f0, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x1f1, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x1f0, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x1f1, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x1f0, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x1f1, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x1f0, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x1f1, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x1f0, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1f1, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1f0, 4)]
[ ---  CALL (ram, 0x234c80, 8)]
[(ram, 0x4eae00, 8) COPY (ram, 0x4eae00, 8), (ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x1f1, 4)]
[(ram, 0x4eb358, 4) COPY (ram, 0x4eb358, 4), (ram, 0x4eb358, 4) INDIRECT (ram, 0x4eb358, 4) , (const, 0x1f1, 4)]
[(ram, 0x4ee410, 8) COPY (ram, 0x4ee410, 8), (ram, 0x4ee410, 8) INDIRECT (ram, 0x4ee410, 8) , (const, 0x1f1, 4)]
[ ---  RETURN (const, 0x1, 4)]
[(ram, 0x4eae00, 8) COPY (ram, 0x4eae00, 8)]
[(ram, 0x4eb358, 4) COPY (ram, 0x4eb358, 4)]
[(ram, 0x4ee410, 8) COPY (ram, 0x4ee410, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 4), (register, 0x0, 4) CAST (unique, 0x10000a65, 4), (unique, 0x10000a65, 4) COPY (ram, 0x4eb358, 4)]
