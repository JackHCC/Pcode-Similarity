[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x134495, 8), (register, 0x20, 8) CAST (unique, 0x10000516, 8), (unique, 0x10000516, 8) INT_ADD (unique, 0x1000050e, 8) , (unique, 0x100000d0, 8), (unique, 0x1000050e, 8) CAST (unique, 0x100001b6, 8), (unique, 0x100001b6, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffdd0, 8), (unique, 0x100000d0, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (unique, 0x3100, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3100, 8) INT_ADD (register, 0x10, 8) , (const, 0x2c, 8), (register, 0x10, 8) INT_SEXT (register, 0x30, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x0, 8) , (const, 0x2e656c61636f6c2f, 8), (register, 0x0, 8) CAST (unique, 0x1000051e, 8), (unique, 0x1000051e, 8) CALL (ram, 0x121230, 8) , (unique, 0x3800, 8) , (register, 0x38, 8) , (register, 0x10, 8), (unique, 0x3800, 8) CAST (unique, 0x10000506, 8), (unique, 0x10000506, 8) INT_ADD (unique, 0x100004fe, 8) , (unique, 0x1000043b, 8), (unique, 0x100004fe, 8) CAST (unique, 0x10000443, 8), (unique, 0x10000443, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffdd0, 8), (unique, 0x1000043b, 8) INT_ADD (unique, 0x100000d0, 8) , (const, 0x10, 8), (unique, 0x100000d0, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (unique, 0x3100, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3100, 8) INT_ADD (register, 0x10, 8) , (const, 0x2c, 8), (register, 0x10, 8) INT_SEXT (register, 0x30, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000526, 8) , (const, 0x61696c61, 4), (unique, 0x10000526, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x8, 8), (register, 0x0, 8) CAST (unique, 0x1000051e, 8), (unique, 0x1000051e, 8) CALL (ram, 0x121230, 8) , (unique, 0x3800, 8) , (register, 0x38, 8) , (register, 0x10, 8), (unique, 0x3800, 8) CAST (unique, 0x10000506, 8), (unique, 0x10000506, 8) INT_ADD (unique, 0x100004fe, 8) , (unique, 0x1000043b, 8), (unique, 0x100004fe, 8) CAST (unique, 0x10000443, 8), (unique, 0x10000443, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffdd0, 8), (unique, 0x1000043b, 8) INT_ADD (unique, 0x100000d0, 8) , (const, 0x10, 8), (unique, 0x100000d0, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (unique, 0x3100, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3100, 8) INT_ADD (register, 0x10, 8) , (const, 0x2c, 8), (register, 0x10, 8) INT_SEXT (register, 0x30, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (const, 0x73, 2), (unique, 0x3100, 8) CAST (unique, 0x10000536, 8), (unique, 0x10000536, 8) INT_ADD (unique, 0x1000052e, 8) , (const, 0xc, 8), (unique, 0x1000052e, 8) CAST (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x1000051e, 8), (unique, 0x1000051e, 8) CALL (ram, 0x121230, 8) , (unique, 0x3800, 8) , (register, 0x38, 8) , (register, 0x10, 8), (unique, 0x3800, 8) CAST (unique, 0x10000506, 8), (unique, 0x10000506, 8) INT_ADD (unique, 0x100004fe, 8) , (unique, 0x1000043b, 8), (unique, 0x100004fe, 8) CAST (unique, 0x10000443, 8), (unique, 0x10000443, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffdd0, 8), (unique, 0x1000043b, 8) INT_ADD (unique, 0x100000d0, 8) , (const, 0x10, 8), (unique, 0x100000d0, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (unique, 0x3100, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3100, 8) INT_ADD (register, 0x10, 8) , (const, 0x2c, 8), (register, 0x10, 8) INT_SEXT (register, 0x30, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x1344c1, 8), (register, 0x20, 8) CAST (unique, 0x10000546, 8), (unique, 0x10000546, 8) INT_ADD (unique, 0x1000053e, 8) , (unique, 0x100000d0, 8), (unique, 0x1000053e, 8) CAST (unique, 0x100001be, 8), (unique, 0x100001be, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffdd0, 8), (unique, 0x100000d0, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (unique, 0x3100, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3100, 8) INT_ADD (register, 0x10, 8) , (const, 0x2c, 8), (register, 0x10, 8) INT_SEXT (register, 0x30, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x5f, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x50, 4)]
[(ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x5f, 4), (ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x5c, 4), (ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x58, 4), (ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x55, 4), (ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x50, 4)]
[(ram, 0x4ec860, 8) INDIRECT (ram, 0x4ec860, 8) , (const, 0x5f, 4), (ram, 0x4ec860, 8) INDIRECT (ram, 0x4ec860, 8) , (const, 0x5c, 4), (ram, 0x4ec860, 8) INDIRECT (ram, 0x4ec860, 8) , (const, 0x58, 4), (ram, 0x4ec860, 8) INDIRECT (ram, 0x4ec860, 8) , (const, 0x55, 4), (ram, 0x4ec860, 8) INDIRECT (ram, 0x4ec860, 8) , (const, 0x50, 4)]
[(ram, 0x4ec868, 8) INDIRECT (ram, 0x4ec868, 8) , (const, 0x5f, 4), (ram, 0x4ec868, 8) INDIRECT (ram, 0x4ec868, 8) , (const, 0x5c, 4), (ram, 0x4ec868, 8) INDIRECT (ram, 0x4ec868, 8) , (const, 0x58, 4), (ram, 0x4ec868, 8) INDIRECT (ram, 0x4ec868, 8) , (const, 0x55, 4), (ram, 0x4ec868, 8) INDIRECT (ram, 0x4ec868, 8) , (const, 0x50, 4)]
[(ram, 0x4eccf8, 8) INDIRECT (ram, 0x4eccf8, 8) , (const, 0x5f, 4), (ram, 0x4eccf8, 8) INDIRECT (ram, 0x4eccf8, 8) , (const, 0x5c, 4), (ram, 0x4eccf8, 8) INDIRECT (ram, 0x4eccf8, 8) , (const, 0x58, 4), (ram, 0x4eccf8, 8) INDIRECT (ram, 0x4eccf8, 8) , (const, 0x55, 4), (ram, 0x4eccf8, 8) INDIRECT (ram, 0x4eccf8, 8) , (const, 0x50, 4)]
[(ram, 0x4ecd00, 8) INDIRECT (ram, 0x4ecd00, 8) , (const, 0x5f, 4), (ram, 0x4ecd00, 8) INDIRECT (ram, 0x4ecd00, 8) , (const, 0x5c, 4), (ram, 0x4ecd00, 8) INDIRECT (ram, 0x4ecd00, 8) , (const, 0x58, 4), (ram, 0x4ecd00, 8) INDIRECT (ram, 0x4ecd00, 8) , (const, 0x55, 4), (ram, 0x4ecd00, 8) INDIRECT (ram, 0x4ecd00, 8) , (const, 0x50, 4)]
[(ram, 0x4ecd08, 8) INDIRECT (ram, 0x4ecd08, 8) , (const, 0x5f, 4), (ram, 0x4ecd08, 8) INDIRECT (ram, 0x4ecd08, 8) , (const, 0x5c, 4), (ram, 0x4ecd08, 8) INDIRECT (ram, 0x4ecd08, 8) , (const, 0x58, 4), (ram, 0x4ecd08, 8) INDIRECT (ram, 0x4ecd08, 8) , (const, 0x55, 4), (ram, 0x4ecd08, 8) INDIRECT (ram, 0x4ecd08, 8) , (const, 0x50, 4)]
[(ram, 0x4ecd10, 8) INDIRECT (ram, 0x4ecd10, 8) , (const, 0x5f, 4), (ram, 0x4ecd10, 8) INDIRECT (ram, 0x4ecd10, 8) , (const, 0x5c, 4), (ram, 0x4ecd10, 8) INDIRECT (ram, 0x4ecd10, 8) , (const, 0x58, 4), (ram, 0x4ecd10, 8) INDIRECT (ram, 0x4ecd10, 8) , (const, 0x55, 4), (ram, 0x4ecd10, 8) INDIRECT (ram, 0x4ecd10, 8) , (const, 0x50, 4)]
[(stack, 0xfffffffffffffde0, 8) INDIRECT (stack, 0xfffffffffffffde0, 8) , (const, 0x5f, 4), (stack, 0xfffffffffffffde0, 8) INDIRECT (stack, 0xfffffffffffffde0, 8) , (const, 0x5e, 4), (stack, 0xfffffffffffffde0, 8) INDIRECT (stack, 0xfffffffffffffde0, 8) , (const, 0x50, 4), (stack, 0xfffffffffffffde0, 8) INDIRECT (stack, 0xfffffffffffffde0, 8) , (const, 0x4f, 4)]
[(stack, 0xfffffffffffffde8, 8) INDIRECT (stack, 0xfffffffffffffde8, 8) , (const, 0x5f, 4), (stack, 0xfffffffffffffde8, 8) INDIRECT (stack, 0xfffffffffffffde8, 8) , (const, 0x5e, 4), (stack, 0xfffffffffffffde8, 8) INDIRECT (stack, 0xfffffffffffffde8, 8) , (const, 0x50, 4), (stack, 0xfffffffffffffde8, 8) INDIRECT (stack, 0xfffffffffffffde8, 8) , (const, 0x4f, 4)]
[(stack, 0xfffffffffffffdf0, 8) INDIRECT (stack, 0xfffffffffffffdf0, 8) , (const, 0x5f, 4), (stack, 0xfffffffffffffdf0, 8) INDIRECT (stack, 0xfffffffffffffdf0, 8) , (const, 0x5e, 4), (stack, 0xfffffffffffffdf0, 8) INDIRECT (stack, 0xfffffffffffffdf0, 8) , (const, 0x50, 4), (stack, 0xfffffffffffffdf0, 8) INDIRECT (stack, 0xfffffffffffffdf0, 8) , (const, 0x4f, 4)]
[(stack, 0xfffffffffffffdf8, 8) INDIRECT (stack, 0xfffffffffffffdf8, 8) , (const, 0x5f, 4), (stack, 0xfffffffffffffdf8, 8) INDIRECT (stack, 0xfffffffffffffdf8, 8) , (const, 0x5e, 4), (stack, 0xfffffffffffffdf8, 8) INDIRECT (stack, 0xfffffffffffffdf8, 8) , (const, 0x50, 4), (stack, 0xfffffffffffffdf8, 8) INDIRECT (stack, 0xfffffffffffffdf8, 8) , (const, 0x4f, 4)]
[(stack, 0xfffffffffffffe00, 8) INDIRECT (stack, 0xfffffffffffffe00, 8) , (const, 0x5f, 4), (stack, 0xfffffffffffffe00, 8) INDIRECT (stack, 0xfffffffffffffe00, 8) , (const, 0x5e, 4), (stack, 0xfffffffffffffe00, 8) INDIRECT (stack, 0xfffffffffffffe00, 8) , (const, 0x50, 4), (stack, 0xfffffffffffffe00, 8) INDIRECT (stack, 0xfffffffffffffe00, 8) , (const, 0x4f, 4)]
[(stack, 0xfffffffffffffe08, 8) INDIRECT (stack, 0xfffffffffffffe08, 8) , (const, 0x5f, 4), (stack, 0xfffffffffffffe08, 8) INDIRECT (stack, 0xfffffffffffffe08, 8) , (const, 0x5e, 4), (stack, 0xfffffffffffffe08, 8) INDIRECT (stack, 0xfffffffffffffe08, 8) , (const, 0x50, 4), (stack, 0xfffffffffffffe08, 8) INDIRECT (stack, 0xfffffffffffffe08, 8) , (const, 0x4f, 4)]
[(stack, 0xfffffffffffffe10, 8) INDIRECT (stack, 0xfffffffffffffe10, 8) , (const, 0x5f, 4), (stack, 0xfffffffffffffe10, 8) INDIRECT (stack, 0xfffffffffffffe10, 8) , (const, 0x5e, 4), (stack, 0xfffffffffffffe10, 8) INDIRECT (stack, 0xfffffffffffffe10, 8) , (const, 0x50, 4), (stack, 0xfffffffffffffe10, 8) INDIRECT (stack, 0xfffffffffffffe10, 8) , (const, 0x4f, 4)]
[(stack, 0xfffffffffffffe18, 8) INDIRECT (stack, 0xfffffffffffffe18, 8) , (const, 0x5f, 4), (stack, 0xfffffffffffffe18, 8) INDIRECT (stack, 0xfffffffffffffe18, 8) , (const, 0x5e, 4), (stack, 0xfffffffffffffe18, 8) INDIRECT (stack, 0xfffffffffffffe18, 8) , (const, 0x50, 4), (stack, 0xfffffffffffffe18, 8) INDIRECT (stack, 0xfffffffffffffe18, 8) , (const, 0x4f, 4)]
[(stack, 0xfffffffffffffe28, 1) INDIRECT (stack, 0xfffffffffffffe28, 1) , (const, 0x5f, 4), (stack, 0xfffffffffffffe28, 1) INDIRECT (stack, 0xfffffffffffffe28, 1) , (const, 0x5e, 4), (stack, 0xfffffffffffffe28, 1) INDIRECT (stack, 0xfffffffffffffe28, 1) , (const, 0x50, 4), (stack, 0xfffffffffffffe28, 1) INDIRECT (stack, 0xfffffffffffffe28, 1) , (const, 0x4f, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x5f, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x5e, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x50, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x4f, 4), (stack, 0xffffffffffffffc0, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x100004f6, 8), (unique, 0x100004f6, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8)]
[(stack, 0xfffffffffffffe20, 8) COPY (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x1345d6, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x17ee30, 8) , (unique, 0x3800, 8) , (unique, 0x10000313, 8), (unique, 0x10000313, 8) COPY (const, 0x2b3893, 8), (unique, 0x3800, 8) CAST (unique, 0x10000506, 8), (unique, 0x10000506, 8) INT_ADD (unique, 0x100004fe, 8) , (unique, 0x1000043b, 8), (unique, 0x100004fe, 8) CAST (unique, 0x10000443, 8), (unique, 0x10000443, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffdd0, 8), (unique, 0x1000043b, 8) INT_ADD (unique, 0x100000d0, 8) , (const, 0x10, 8), (unique, 0x100000d0, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (unique, 0x3100, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3100, 8) INT_ADD (register, 0x10, 8) , (const, 0x2c, 8), (register, 0x10, 8) INT_SEXT (register, 0x30, 4)]
[(unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffe28, 8)]
[(ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x88, 4)]
[(ram, 0x4ec860, 8) INDIRECT (ram, 0x4ec860, 8) , (const, 0x88, 4)]
[(ram, 0x4ec868, 8) INDIRECT (ram, 0x4ec868, 8) , (const, 0x88, 4)]
[(ram, 0x4eccf8, 8) INDIRECT (ram, 0x4eccf8, 8) , (const, 0x88, 4)]
[(ram, 0x4ecd00, 8) INDIRECT (ram, 0x4ecd00, 8) , (const, 0x88, 4)]
[(ram, 0x4ecd08, 8) INDIRECT (ram, 0x4ecd08, 8) , (const, 0x88, 4)]
[(ram, 0x4ecd10, 8) INDIRECT (ram, 0x4ecd10, 8) , (const, 0x88, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000034b, 8) , (register, 0x10, 4), (unique, 0x1000034b, 8) PTRSUB (register, 0x0, 8) , (const, 0x0, 8), (register, 0x10, 4) INT_OR (unique, 0xbc80, 4) , (const, 0x8000, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x1000033b, 8), (unique, 0x1000033b, 8) PTRSUB (register, 0x0, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x134912, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x10000100, 4) , (const, 0x0, 4), (unique, 0x10000100, 4) INT_AND (unique, 0xbc80, 4) , (const, 0x10, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x1000033b, 8), (unique, 0x1000033b, 8) PTRSUB (register, 0x0, 8) , (const, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x134508, 8), (register, 0x20, 8) CAST (unique, 0x10000556, 8), (unique, 0x10000556, 8) INT_ADD (unique, 0x1000054e, 8) , (unique, 0x100000d0, 8), (unique, 0x1000054e, 8) CAST (unique, 0x1000021e, 8), (unique, 0x1000021e, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffdd0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x92, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x92, 4), (ram, 0x4eae00, 8) MULTIEQUAL (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8)]
[(ram, 0x4ec860, 8) INDIRECT (ram, 0x4ec860, 8) , (const, 0x92, 4), (ram, 0x4ec860, 8) MULTIEQUAL (ram, 0x4ec860, 8) , (ram, 0x4ec860, 8)]
[(ram, 0x4ec868, 8) INDIRECT (ram, 0x4ec868, 8) , (const, 0x92, 4), (ram, 0x4ec868, 8) MULTIEQUAL (ram, 0x4ec868, 8) , (ram, 0x4ec868, 8)]
[(ram, 0x4eccf8, 8) INDIRECT (ram, 0x4eccf8, 8) , (const, 0x92, 4), (ram, 0x4eccf8, 8) MULTIEQUAL (ram, 0x4eccf8, 8) , (ram, 0x4eccf8, 8)]
[(ram, 0x4ecd00, 8) INDIRECT (ram, 0x4ecd00, 8) , (const, 0x92, 4), (ram, 0x4ecd00, 8) MULTIEQUAL (ram, 0x4ecd00, 8) , (ram, 0x4ecd00, 8)]
[(ram, 0x4ecd08, 8) INDIRECT (ram, 0x4ecd08, 8) , (const, 0x92, 4), (ram, 0x4ecd08, 8) MULTIEQUAL (ram, 0x4ecd08, 8) , (ram, 0x4ecd08, 8)]
[(ram, 0x4ecd10, 8) INDIRECT (ram, 0x4ecd10, 8) , (const, 0x92, 4), (ram, 0x4ecd10, 8) MULTIEQUAL (ram, 0x4ecd10, 8) , (ram, 0x4ecd10, 8)]
[(stack, 0xfffffffffffffde0, 8) INDIRECT (stack, 0xfffffffffffffde0, 8) , (const, 0x92, 4), (stack, 0xfffffffffffffde0, 8) INDIRECT (stack, 0xfffffffffffffde0, 8) , (const, 0x91, 4), (stack, 0xfffffffffffffde0, 8) MULTIEQUAL (stack, 0xfffffffffffffde0, 8) , (stack, 0xfffffffffffffde0, 8)]
[(stack, 0xfffffffffffffde8, 8) INDIRECT (stack, 0xfffffffffffffde8, 8) , (const, 0x92, 4), (stack, 0xfffffffffffffde8, 8) INDIRECT (stack, 0xfffffffffffffde8, 8) , (const, 0x91, 4), (stack, 0xfffffffffffffde8, 8) MULTIEQUAL (stack, 0xfffffffffffffde8, 8) , (stack, 0xfffffffffffffde8, 8)]
[(stack, 0xfffffffffffffdf0, 8) INDIRECT (stack, 0xfffffffffffffdf0, 8) , (const, 0x92, 4), (stack, 0xfffffffffffffdf0, 8) INDIRECT (stack, 0xfffffffffffffdf0, 8) , (const, 0x91, 4), (stack, 0xfffffffffffffdf0, 8) MULTIEQUAL (stack, 0xfffffffffffffdf0, 8) , (stack, 0xfffffffffffffdf0, 8)]
[(stack, 0xfffffffffffffdf8, 8) INDIRECT (stack, 0xfffffffffffffdf8, 8) , (const, 0x92, 4), (stack, 0xfffffffffffffdf8, 8) INDIRECT (stack, 0xfffffffffffffdf8, 8) , (const, 0x91, 4), (stack, 0xfffffffffffffdf8, 8) MULTIEQUAL (stack, 0xfffffffffffffdf8, 8) , (stack, 0xfffffffffffffdf8, 8)]
[(stack, 0xfffffffffffffe00, 8) INDIRECT (stack, 0xfffffffffffffe00, 8) , (const, 0x92, 4), (stack, 0xfffffffffffffe00, 8) INDIRECT (stack, 0xfffffffffffffe00, 8) , (const, 0x91, 4), (stack, 0xfffffffffffffe00, 8) MULTIEQUAL (stack, 0xfffffffffffffe00, 8) , (stack, 0xfffffffffffffe00, 8)]
[(stack, 0xfffffffffffffe08, 8) INDIRECT (stack, 0xfffffffffffffe08, 8) , (const, 0x92, 4), (stack, 0xfffffffffffffe08, 8) INDIRECT (stack, 0xfffffffffffffe08, 8) , (const, 0x91, 4), (stack, 0xfffffffffffffe08, 8) MULTIEQUAL (stack, 0xfffffffffffffe08, 8) , (stack, 0xfffffffffffffe08, 8)]
[(stack, 0xfffffffffffffe10, 8) INDIRECT (stack, 0xfffffffffffffe10, 8) , (const, 0x92, 4), (stack, 0xfffffffffffffe10, 8) INDIRECT (stack, 0xfffffffffffffe10, 8) , (const, 0x91, 4), (stack, 0xfffffffffffffe10, 8) MULTIEQUAL (stack, 0xfffffffffffffe10, 8) , (stack, 0xfffffffffffffe10, 8)]
[(stack, 0xfffffffffffffe18, 8) INDIRECT (stack, 0xfffffffffffffe18, 8) , (const, 0x92, 4), (stack, 0xfffffffffffffe18, 8) INDIRECT (stack, 0xfffffffffffffe18, 8) , (const, 0x91, 4), (stack, 0xfffffffffffffe18, 8) MULTIEQUAL (stack, 0xfffffffffffffe18, 8) , (stack, 0xfffffffffffffe18, 8)]
[(stack, 0xfffffffffffffe20, 8) INDIRECT (stack, 0xfffffffffffffe20, 8) , (const, 0x92, 4), (stack, 0xfffffffffffffe20, 8) INDIRECT (stack, 0xfffffffffffffe20, 8) , (const, 0x91, 4), (stack, 0xfffffffffffffe20, 8) MULTIEQUAL (stack, 0xfffffffffffffe20, 8) , (stack, 0xfffffffffffffe20, 8)]
[(stack, 0xfffffffffffffe28, 1) INDIRECT (stack, 0xfffffffffffffe28, 1) , (const, 0x92, 4), (stack, 0xfffffffffffffe28, 1) INDIRECT (stack, 0xfffffffffffffe28, 1) , (const, 0x91, 4), (stack, 0xfffffffffffffe28, 1) MULTIEQUAL (stack, 0xfffffffffffffe28, 1) , (stack, 0xfffffffffffffe28, 1)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x92, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x91, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CBRANCH (ram, 0x1345c0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x18a590, 8) , (unique, 0x1000055e, 8) , (const, 0x190, 4) , (register, 0x0, 8), (unique, 0x1000055e, 8) CAST (unique, 0x3200, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x134521, 8), (register, 0x20, 8) CAST (unique, 0x1000056e, 8), (unique, 0x1000056e, 8) INT_ADD (unique, 0x10000566, 8) , (unique, 0x100000d0, 8), (unique, 0x10000566, 8) CAST (unique, 0x10000226, 8), (unique, 0x10000226, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffdd0, 8)]
[(ram, 0x4ec860, 8) INDIRECT (ram, 0x4ec860, 8) , (const, 0xa2, 4)]
[(ram, 0x4ec868, 8) INDIRECT (ram, 0x4ec868, 8) , (const, 0xa2, 4)]
[(ram, 0x4eccf8, 8) INDIRECT (ram, 0x4eccf8, 8) , (const, 0xa2, 4)]
[(ram, 0x4ecd00, 8) INDIRECT (ram, 0x4ecd00, 8) , (const, 0xa2, 4)]
[(ram, 0x4ecd08, 8) INDIRECT (ram, 0x4ecd08, 8) , (const, 0xa2, 4)]
[(ram, 0x4ecd10, 8) INDIRECT (ram, 0x4ecd10, 8) , (const, 0xa2, 4)]
[(stack, 0xfffffffffffffde0, 8) INDIRECT (stack, 0xfffffffffffffde0, 8) , (const, 0xa2, 4), (stack, 0xfffffffffffffde0, 8) INDIRECT (stack, 0xfffffffffffffde0, 8) , (const, 0xa1, 4)]
[(stack, 0xfffffffffffffde8, 8) INDIRECT (stack, 0xfffffffffffffde8, 8) , (const, 0xa2, 4), (stack, 0xfffffffffffffde8, 8) INDIRECT (stack, 0xfffffffffffffde8, 8) , (const, 0xa1, 4)]
[(stack, 0xfffffffffffffdf0, 8) INDIRECT (stack, 0xfffffffffffffdf0, 8) , (const, 0xa2, 4), (stack, 0xfffffffffffffdf0, 8) INDIRECT (stack, 0xfffffffffffffdf0, 8) , (const, 0xa1, 4)]
[(stack, 0xfffffffffffffdf8, 8) INDIRECT (stack, 0xfffffffffffffdf8, 8) , (const, 0xa2, 4), (stack, 0xfffffffffffffdf8, 8) INDIRECT (stack, 0xfffffffffffffdf8, 8) , (const, 0xa1, 4)]
[(stack, 0xfffffffffffffe00, 8) INDIRECT (stack, 0xfffffffffffffe00, 8) , (const, 0xa2, 4), (stack, 0xfffffffffffffe00, 8) INDIRECT (stack, 0xfffffffffffffe00, 8) , (const, 0xa1, 4)]
[(stack, 0xfffffffffffffe08, 8) INDIRECT (stack, 0xfffffffffffffe08, 8) , (const, 0xa2, 4), (stack, 0xfffffffffffffe08, 8) INDIRECT (stack, 0xfffffffffffffe08, 8) , (const, 0xa1, 4)]
[(stack, 0xfffffffffffffe10, 8) INDIRECT (stack, 0xfffffffffffffe10, 8) , (const, 0xa2, 4), (stack, 0xfffffffffffffe10, 8) INDIRECT (stack, 0xfffffffffffffe10, 8) , (const, 0xa1, 4)]
[(stack, 0xfffffffffffffe18, 8) INDIRECT (stack, 0xfffffffffffffe18, 8) , (const, 0xa2, 4), (stack, 0xfffffffffffffe18, 8) INDIRECT (stack, 0xfffffffffffffe18, 8) , (const, 0xa1, 4)]
[(stack, 0xfffffffffffffe20, 8) INDIRECT (stack, 0xfffffffffffffe20, 8) , (const, 0xa2, 4), (stack, 0xfffffffffffffe20, 8) INDIRECT (stack, 0xfffffffffffffe20, 8) , (const, 0xa1, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xa2, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xa1, 4)]
[(register, 0x0, 8) CALL (ram, 0x121110, 8) , (unique, 0x10000576, 8) , (const, 0xa, 4), (unique, 0x10000576, 8) CAST (unique, 0x3200, 8)]
[(unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) CAST (unique, 0x10000586, 8), (unique, 0x10000586, 8) INT_ADD (unique, 0x3880, 8) , (unique, 0x3900, 8), (unique, 0x3900, 8) INT_MULT (register, 0x8, 8) , (const, 0x2, 8), (unique, 0x3880, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x1, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x1000057e, 8), (unique, 0x1000057e, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (ram, 0x4eae00, 8) , (register, 0x110, 8) , (const, 0x1, 8), (register, 0x8, 8) INT_ZEXT (stack, 0xfffffffffffffe28, 1), (stack, 0xfffffffffffffe28, 1) INDIRECT (stack, 0xfffffffffffffe28, 1) , (const, 0xa2, 4), (ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0xa2, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xa2, 4), (stack, 0xfffffffffffffe28, 1) INDIRECT (stack, 0xfffffffffffffe28, 1) , (const, 0xa1, 4)]
[(unique, 0x100004e5, 8) COPY (unique, 0x3200, 8)]
[(unique, 0x100004ed, 1) COPY (stack, 0xfffffffffffffe28, 1), (stack, 0xfffffffffffffe28, 1) INDIRECT (stack, 0xfffffffffffffe28, 1) , (const, 0xa2, 4), (stack, 0xfffffffffffffe28, 1) INDIRECT (stack, 0xfffffffffffffe28, 1) , (const, 0xa1, 4)]
[(unique, 0x10000265, 8) MULTIEQUAL (unique, 0x100004e5, 8) , (register, 0x18, 8)]
[(unique, 0x1000026e, 1) MULTIEQUAL (unique, 0x100004ed, 1) , (unique, 0xbb00, 1)]
[ ---  CBRANCH (ram, 0x134551, 1) , (unique, 0x1000026d, 1), (unique, 0x1000026d, 1) INT_NOTEQUAL (unique, 0x58c00, 1) , (const, 0x0, 1), (unique, 0x58c00, 1) INT_AND (unique, 0xbb00, 1) , (const, 0x20, 1), (unique, 0xbb00, 1) MULTIEQUAL (unique, 0xbb00, 1) , (unique, 0xbb00, 1)]
[(unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) CAST (unique, 0x1000058e, 8), (unique, 0x1000058e, 8) INT_ADD (unique, 0x3880, 8) , (unique, 0x3900, 8), (unique, 0x3900, 8) INT_MULT (register, 0x8, 8) , (const, 0x2, 8), (unique, 0x3880, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x1, 8), (register, 0x8, 8) INT_ZEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0x18, 8), (register, 0x18, 8) PTRADD (unique, 0x10000265, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x1345b0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x1000026e, 1) , (const, 0x0, 1)]
[ ---  CBRANCH (ram, 0x1345b0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x1000026e, 1) , (const, 0x23, 1)]
[(unique, 0x3100, 8) PTRADD (unique, 0x10000265, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[(unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0x10000265, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[ ---  BRANCH (ram, 0x134578, 1)]
[(register, 0x30, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0x30, 8)]
[(register, 0x0, 2) INT_AND (unique, 0xbc00, 2) , (const, 0x2000, 2), (unique, 0xbc00, 2) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) CAST (unique, 0x10000596, 8), (unique, 0x10000596, 8) INT_ADD (unique, 0xbd80, 8) , (unique, 0x3300, 8), (unique, 0x3300, 8) INT_MULT (register, 0x0, 8) , (const, 0x2, 8), (register, 0x0, 8) INT_ZEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) MULTIEQUAL (unique, 0xbb00, 1) , (unique, 0xbb00, 1)]
[ ---  CBRANCH (ram, 0x134568, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) MULTIEQUAL (unique, 0xbb00, 1) , (unique, 0xbb00, 1)]
[ ---  CBRANCH (ram, 0x134630, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 2) , (const, 0x0, 2)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x3f6, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x30, 8) , (const, 0x0, 1)]
[(unique, 0x3100, 8) PTRADD (register, 0x30, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x134590, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x58c00, 1) , (const, 0x0, 1), (unique, 0x58c00, 1) INT_AND (unique, 0xbb00, 1) , (const, 0x20, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) CAST (unique, 0x1000059e, 8), (unique, 0x1000059e, 8) INT_ADD (unique, 0x3880, 8) , (unique, 0x3900, 8), (unique, 0x3900, 8) INT_MULT (register, 0x30, 8) , (const, 0x2, 8), (unique, 0x3880, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x1, 8), (register, 0x30, 8) INT_ZEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x30, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x1345b0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x0, 1)]
[(unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0x30, 8), (register, 0x30, 8) PTRADD (register, 0x30, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[(unique, 0x100004bd, 8) COPY (register, 0x30, 8)]
[ ---  CBRANCH (ram, 0x1345b0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 2) , (const, 0x0, 2)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CBRANCH (ram, 0x134590, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x58c00, 1) , (const, 0x0, 1), (unique, 0x58c00, 1) INT_AND (unique, 0xbb00, 1) , (const, 0x20, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) CAST (unique, 0x100005a6, 8), (unique, 0x100005a6, 8) INT_ADD (unique, 0x3880, 8) , (unique, 0x3900, 8), (unique, 0x3900, 8) INT_MULT (register, 0x8, 8) , (const, 0x2, 8), (unique, 0x3880, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x1, 8), (register, 0x8, 8) INT_ZEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0xa8, 8), (register, 0xa8, 8) PTRADD (register, 0xa8, 8) , (const, 0x1, 8) , (const, 0x1, 8), (register, 0xa8, 8) MULTIEQUAL (unique, 0x100004bd, 8) , (register, 0xa8, 8) , (unique, 0x3100, 8)]
[ ---  CBRANCH (ram, 0x134658, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x0, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(unique, 0x3100, 8) CAST (unique, 0x100005ae, 8), (unique, 0x100005ae, 8) PTRADD (register, 0xa8, 8) , (const, 0x1, 8) , (const, 0x1, 8), (register, 0xa8, 8) MULTIEQUAL (register, 0xa8, 8) , (unique, 0x3100, 8)]
[ ---  CBRANCH (ram, 0x134691, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xa8, 8) , (const, 0x1, 8) , (const, 0x1, 8), (register, 0xa8, 8) MULTIEQUAL (register, 0xa8, 8) , (unique, 0x3100, 8)]
[(unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) CAST (unique, 0x100005b6, 8), (unique, 0x100005b6, 8) INT_ADD (unique, 0x3880, 8) , (unique, 0x3900, 8), (unique, 0x3900, 8) INT_MULT (register, 0x38, 8) , (const, 0x2, 8), (unique, 0x3880, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x1, 8), (register, 0x38, 8) INT_ZEXT (unique, 0xbb00, 1)]
[(unique, 0x10000423, 1) MULTIEQUAL (unique, 0xbb00, 1) , (unique, 0xbb00, 1)]
[(unique, 0x10000424, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0x30, 8)]
[ ---  CBRANCH (ram, 0x134686, 1) , (unique, 0x1000042c, 1), (unique, 0x1000042c, 1) INT_EQUAL (unique, 0x58c00, 1) , (const, 0x0, 1), (unique, 0x58c00, 1) INT_AND (unique, 0xbb00, 1) , (const, 0x20, 1), (unique, 0xbb00, 1) MULTIEQUAL (unique, 0xbb00, 1) , (unique, 0xbb00, 1)]
[ ---  CBRANCH (ram, 0x134678, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x100005ce, 8), (unique, 0x100005ce, 8) CAST (register, 0x30, 8), (register, 0x30, 8) CAST (unique, 0x100005c6, 8), (unique, 0x100005c6, 8) INT_ADD (unique, 0x100005be, 8) , (const, 0x1, 8), (unique, 0x100005be, 8) CAST (unique, 0x10000424, 8)]
[(unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) CAST (unique, 0x100005d6, 8), (unique, 0x100005d6, 8) INT_ADD (unique, 0x3880, 8) , (unique, 0x3900, 8), (unique, 0x3900, 8) INT_MULT (register, 0x8, 8) , (const, 0x2, 8), (unique, 0x3880, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x1, 8), (register, 0x8, 8) INT_ZEXT (unique, 0xbb00, 1)]
[ ---  CBRANCH (ram, 0x1348ac, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x10000423, 1) , (const, 0xa, 1)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x3b4, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100005de, 8) , (const, 0x0, 1), (unique, 0x100005de, 8) CAST (unique, 0x10000424, 8)]
[ ---  BRANCH (ram, 0x134691, 1)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1e9, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000424, 8) , (const, 0xa00, 2)]
[ ---  BRANCH (ram, 0x134691, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffe18, 8) COPY (ram, 0x4ecd00, 8)]
[(unique, 0x100004c5, 8) COPY (ram, 0x4ec860, 8)]
[ ---  CBRANCH (ram, 0x134868, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESSEQUAL (ram, 0x4eccf8, 8) , (ram, 0x4ecd00, 8)]
[ ---  CBRANCH (ram, 0x1348b4, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4eccf8, 8) , (const, 0x0, 8)]
[(register, 0x30, 8) INT_LEFT (ram, 0x4eccf8, 8) , (const, 0x5, 4)]
[(stack, 0xfffffffffffffe10, 8) COPY (unique, 0x100001a6, 8), (unique, 0x100001a6, 8) INT_MULT (ram, 0x4eccf8, 8) , (const, 0x2, 8)]
[ ---  BRANCH (ram, 0x13487d, 1)]
[(register, 0x30, 8) COPY (const, 0x640, 8)]
[(stack, 0xfffffffffffffe10, 8) COPY (const, 0x64, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x134889, 8), (register, 0x20, 8) CAST (unique, 0x100005ee, 8), (unique, 0x100005ee, 8) INT_ADD (unique, 0x100005e6, 8) , (unique, 0x100000d0, 8), (unique, 0x100005e6, 8) CAST (unique, 0x1000020e, 8), (unique, 0x1000020e, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffdd0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x376, 4)]
[(ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x376, 4)]
[(ram, 0x4ec860, 8) INDIRECT (ram, 0x4ec860, 8) , (const, 0x376, 4)]
[(ram, 0x4ec868, 8) INDIRECT (ram, 0x4ec868, 8) , (const, 0x376, 4)]
[(ram, 0x4eccf8, 8) INDIRECT (ram, 0x4eccf8, 8) , (const, 0x376, 4)]
[(ram, 0x4ecd00, 8) INDIRECT (ram, 0x4ecd00, 8) , (const, 0x376, 4)]
[(ram, 0x4ecd08, 8) INDIRECT (ram, 0x4ecd08, 8) , (const, 0x376, 4)]
[(ram, 0x4ecd10, 8) INDIRECT (ram, 0x4ecd10, 8) , (const, 0x376, 4)]
[(stack, 0xfffffffffffffde0, 8) INDIRECT (stack, 0xfffffffffffffde0, 8) , (const, 0x376, 4), (stack, 0xfffffffffffffde0, 8) INDIRECT (stack, 0xfffffffffffffde0, 8) , (const, 0x375, 4)]
[(stack, 0xfffffffffffffde8, 8) INDIRECT (stack, 0xfffffffffffffde8, 8) , (const, 0x376, 4), (stack, 0xfffffffffffffde8, 8) INDIRECT (stack, 0xfffffffffffffde8, 8) , (const, 0x375, 4)]
[(stack, 0xfffffffffffffdf0, 8) INDIRECT (stack, 0xfffffffffffffdf0, 8) , (const, 0x376, 4), (stack, 0xfffffffffffffdf0, 8) INDIRECT (stack, 0xfffffffffffffdf0, 8) , (const, 0x375, 4)]
[(stack, 0xfffffffffffffdf8, 8) INDIRECT (stack, 0xfffffffffffffdf8, 8) , (const, 0x376, 4), (stack, 0xfffffffffffffdf8, 8) INDIRECT (stack, 0xfffffffffffffdf8, 8) , (const, 0x375, 4)]
[(stack, 0xfffffffffffffe00, 8) INDIRECT (stack, 0xfffffffffffffe00, 8) , (const, 0x376, 4), (stack, 0xfffffffffffffe00, 8) INDIRECT (stack, 0xfffffffffffffe00, 8) , (const, 0x375, 4)]
[(stack, 0xfffffffffffffe08, 8) INDIRECT (stack, 0xfffffffffffffe08, 8) , (const, 0x376, 4), (stack, 0xfffffffffffffe08, 8) INDIRECT (stack, 0xfffffffffffffe08, 8) , (const, 0x375, 4)]
[(stack, 0xfffffffffffffe10, 8) INDIRECT (stack, 0xfffffffffffffe10, 8) , (const, 0x376, 4), (stack, 0xfffffffffffffe10, 8) INDIRECT (stack, 0xfffffffffffffe10, 8) , (const, 0x375, 4), (stack, 0xfffffffffffffe10, 8) MULTIEQUAL (stack, 0xfffffffffffffe10, 8) , (stack, 0xfffffffffffffe10, 8)]
[(stack, 0xfffffffffffffe18, 8) INDIRECT (stack, 0xfffffffffffffe18, 8) , (const, 0x376, 4), (stack, 0xfffffffffffffe18, 8) INDIRECT (stack, 0xfffffffffffffe18, 8) , (const, 0x375, 4)]
[(stack, 0xfffffffffffffe20, 8) INDIRECT (stack, 0xfffffffffffffe20, 8) , (const, 0x376, 4), (stack, 0xfffffffffffffe20, 8) INDIRECT (stack, 0xfffffffffffffe20, 8) , (const, 0x375, 4)]
[(stack, 0xfffffffffffffe28, 1) INDIRECT (stack, 0xfffffffffffffe28, 1) , (const, 0x376, 4), (stack, 0xfffffffffffffe28, 1) INDIRECT (stack, 0xfffffffffffffe28, 1) , (const, 0x375, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x376, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x375, 4)]
[ ---  CBRANCH (ram, 0x1345c0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x100005f6, 8), (unique, 0x100005f6, 8) CALL (ram, 0x121020, 8) , (ram, 0x4ec860, 8) , (register, 0x30, 8), (register, 0x30, 8) MULTIEQUAL (register, 0x30, 8) , (register, 0x30, 8)]
[(unique, 0xbd80, 8) COPY (stack, 0xfffffffffffffe10, 8)]
[(unique, 0x100004cd, 8) COPY (register, 0x0, 8)]
[ ---  BRANCH (ram, 0x1346af, 1)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x1346b7, 8), (register, 0x20, 8) CAST (unique, 0x10000606, 8), (unique, 0x10000606, 8) INT_ADD (unique, 0x100005fe, 8) , (unique, 0x100000d0, 8), (unique, 0x100005fe, 8) CAST (unique, 0x100001de, 8), (unique, 0x100001de, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffdd0, 8)]
[(stack, 0xfffffffffffffe10, 8) INDIRECT (stack, 0xfffffffffffffe10, 8) , (const, 0x1fe, 4), (stack, 0xfffffffffffffe10, 8) INDIRECT (stack, 0xfffffffffffffe10, 8) , (const, 0x1fd, 4), (stack, 0xfffffffffffffe10, 8) MULTIEQUAL (stack, 0xfffffffffffffe10, 8) , (stack, 0xfffffffffffffe10, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x1346ca, 8), (register, 0x20, 8) CAST (unique, 0x1000061e, 8), (unique, 0x1000061e, 8) INT_ADD (unique, 0x10000616, 8) , (unique, 0x100000d0, 8), (unique, 0x10000616, 8) CAST (unique, 0x100001e6, 8), (unique, 0x100001e6, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffdd0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x207, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1fe, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x207, 4), (ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x1fe, 4), (ram, 0x4eae00, 8) MULTIEQUAL (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8)]
[(ram, 0x4eccf8, 8) INDIRECT (ram, 0x4eccf8, 8) , (const, 0x207, 4), (ram, 0x4eccf8, 8) INDIRECT (ram, 0x4eccf8, 8) , (const, 0x1fe, 4), (ram, 0x4eccf8, 8) MULTIEQUAL (ram, 0x4eccf8, 8) , (unique, 0xbd80, 8)]
[(ram, 0x4ecd00, 8) INDIRECT (ram, 0x4ecd00, 8) , (const, 0x207, 4), (ram, 0x4ecd00, 8) INDIRECT (ram, 0x4ecd00, 8) , (const, 0x1fe, 4), (ram, 0x4ecd00, 8) MULTIEQUAL (ram, 0x4ecd00, 8) , (ram, 0x4ecd00, 8)]
[(stack, 0xfffffffffffffde0, 8) INDIRECT (stack, 0xfffffffffffffde0, 8) , (const, 0x207, 4), (stack, 0xfffffffffffffde0, 8) INDIRECT (stack, 0xfffffffffffffde0, 8) , (const, 0x206, 4), (stack, 0xfffffffffffffde0, 8) INDIRECT (stack, 0xfffffffffffffde0, 8) , (const, 0x1fe, 4), (stack, 0xfffffffffffffde0, 8) INDIRECT (stack, 0xfffffffffffffde0, 8) , (const, 0x1fd, 4), (stack, 0xfffffffffffffde0, 8) MULTIEQUAL (stack, 0xfffffffffffffde0, 8) , (stack, 0xfffffffffffffde0, 8)]
[(stack, 0xfffffffffffffde8, 8) INDIRECT (stack, 0xfffffffffffffde8, 8) , (const, 0x207, 4), (stack, 0xfffffffffffffde8, 8) INDIRECT (stack, 0xfffffffffffffde8, 8) , (const, 0x206, 4), (stack, 0xfffffffffffffde8, 8) INDIRECT (stack, 0xfffffffffffffde8, 8) , (const, 0x1fe, 4), (stack, 0xfffffffffffffde8, 8) INDIRECT (stack, 0xfffffffffffffde8, 8) , (const, 0x1fd, 4), (stack, 0xfffffffffffffde8, 8) MULTIEQUAL (stack, 0xfffffffffffffde8, 8) , (stack, 0xfffffffffffffde8, 8)]
[(stack, 0xfffffffffffffdf0, 8) INDIRECT (stack, 0xfffffffffffffdf0, 8) , (const, 0x207, 4), (stack, 0xfffffffffffffdf0, 8) INDIRECT (stack, 0xfffffffffffffdf0, 8) , (const, 0x206, 4), (stack, 0xfffffffffffffdf0, 8) INDIRECT (stack, 0xfffffffffffffdf0, 8) , (const, 0x1fe, 4), (stack, 0xfffffffffffffdf0, 8) INDIRECT (stack, 0xfffffffffffffdf0, 8) , (const, 0x1fd, 4), (stack, 0xfffffffffffffdf0, 8) MULTIEQUAL (stack, 0xfffffffffffffdf0, 8) , (stack, 0xfffffffffffffdf0, 8)]
[(stack, 0xfffffffffffffdf8, 8) INDIRECT (stack, 0xfffffffffffffdf8, 8) , (const, 0x207, 4), (stack, 0xfffffffffffffdf8, 8) INDIRECT (stack, 0xfffffffffffffdf8, 8) , (const, 0x206, 4), (stack, 0xfffffffffffffdf8, 8) INDIRECT (stack, 0xfffffffffffffdf8, 8) , (const, 0x1fe, 4), (stack, 0xfffffffffffffdf8, 8) INDIRECT (stack, 0xfffffffffffffdf8, 8) , (const, 0x1fd, 4), (stack, 0xfffffffffffffdf8, 8) MULTIEQUAL (stack, 0xfffffffffffffdf8, 8) , (stack, 0xfffffffffffffdf8, 8)]
[(stack, 0xfffffffffffffe00, 8) INDIRECT (stack, 0xfffffffffffffe00, 8) , (const, 0x207, 4), (stack, 0xfffffffffffffe00, 8) INDIRECT (stack, 0xfffffffffffffe00, 8) , (const, 0x206, 4), (stack, 0xfffffffffffffe00, 8) INDIRECT (stack, 0xfffffffffffffe00, 8) , (const, 0x1fe, 4), (stack, 0xfffffffffffffe00, 8) INDIRECT (stack, 0xfffffffffffffe00, 8) , (const, 0x1fd, 4), (stack, 0xfffffffffffffe00, 8) MULTIEQUAL (stack, 0xfffffffffffffe00, 8) , (stack, 0xfffffffffffffe00, 8)]
[(stack, 0xfffffffffffffe08, 8) INDIRECT (stack, 0xfffffffffffffe08, 8) , (const, 0x207, 4), (stack, 0xfffffffffffffe08, 8) INDIRECT (stack, 0xfffffffffffffe08, 8) , (const, 0x206, 4), (stack, 0xfffffffffffffe08, 8) INDIRECT (stack, 0xfffffffffffffe08, 8) , (const, 0x1fe, 4), (stack, 0xfffffffffffffe08, 8) INDIRECT (stack, 0xfffffffffffffe08, 8) , (const, 0x1fd, 4), (stack, 0xfffffffffffffe08, 8) MULTIEQUAL (stack, 0xfffffffffffffe08, 8) , (stack, 0xfffffffffffffe08, 8)]
[(stack, 0xfffffffffffffe18, 8) INDIRECT (stack, 0xfffffffffffffe18, 8) , (const, 0x207, 4), (stack, 0xfffffffffffffe18, 8) INDIRECT (stack, 0xfffffffffffffe18, 8) , (const, 0x206, 4), (stack, 0xfffffffffffffe18, 8) INDIRECT (stack, 0xfffffffffffffe18, 8) , (const, 0x1fe, 4), (stack, 0xfffffffffffffe18, 8) INDIRECT (stack, 0xfffffffffffffe18, 8) , (const, 0x1fd, 4), (stack, 0xfffffffffffffe18, 8) MULTIEQUAL (stack, 0xfffffffffffffe18, 8) , (stack, 0xfffffffffffffe18, 8)]
[(stack, 0xfffffffffffffe20, 8) INDIRECT (stack, 0xfffffffffffffe20, 8) , (const, 0x207, 4), (stack, 0xfffffffffffffe20, 8) INDIRECT (stack, 0xfffffffffffffe20, 8) , (const, 0x206, 4), (stack, 0xfffffffffffffe20, 8) INDIRECT (stack, 0xfffffffffffffe20, 8) , (const, 0x1fe, 4), (stack, 0xfffffffffffffe20, 8) INDIRECT (stack, 0xfffffffffffffe20, 8) , (const, 0x1fd, 4), (stack, 0xfffffffffffffe20, 8) MULTIEQUAL (stack, 0xfffffffffffffe20, 8) , (stack, 0xfffffffffffffe20, 8)]
[(stack, 0xfffffffffffffe28, 1) INDIRECT (stack, 0xfffffffffffffe28, 1) , (const, 0x207, 4), (stack, 0xfffffffffffffe28, 1) INDIRECT (stack, 0xfffffffffffffe28, 1) , (const, 0x206, 4), (stack, 0xfffffffffffffe28, 1) INDIRECT (stack, 0xfffffffffffffe28, 1) , (const, 0x1fe, 4), (stack, 0xfffffffffffffe28, 1) INDIRECT (stack, 0xfffffffffffffe28, 1) , (const, 0x1fd, 4), (stack, 0xfffffffffffffe28, 1) MULTIEQUAL (stack, 0xfffffffffffffe28, 1) , (stack, 0xfffffffffffffe28, 1)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x207, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x206, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1fe, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1fd, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffe10, 8) COPY (unique, 0x3400, 8), (unique, 0x3400, 8) INT_ADD (unique, 0x1000062e, 8) , (stack, 0xfffffffffffffe10, 8), (unique, 0x1000062e, 8) CAST (ram, 0x4ecd10, 8), (stack, 0xfffffffffffffe10, 8) INDIRECT (stack, 0xfffffffffffffe10, 8) , (const, 0x207, 4), (ram, 0x4ecd10, 8) INDIRECT (ram, 0x4ecd10, 8) , (const, 0x207, 4), (stack, 0xfffffffffffffe10, 8) INDIRECT (stack, 0xfffffffffffffe10, 8) , (const, 0x206, 4), (stack, 0xfffffffffffffe10, 8) COPY (unique, 0x3100, 8), (unique, 0x3100, 8) INT_ADD (register, 0x0, 8) , (const, 0x1, 8), (register, 0x0, 8) CALL (ram, 0x121100, 8) , (unique, 0x1000060e, 8), (ram, 0x4ecd10, 8) INDIRECT (ram, 0x4ecd10, 8) , (const, 0x1fe, 4), (unique, 0x1000060e, 8) CAST (unique, 0x10000265, 8), (ram, 0x4ecd10, 8) MULTIEQUAL (ram, 0x4ecd10, 8) , (ram, 0x4ecd10, 8)]
[(stack, 0xfffffffffffffe08, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10000636, 8), (unique, 0x10000636, 8) INT_ADD (unique, 0x3400, 8) , (unique, 0x3100, 8), (unique, 0x3400, 8) INT_ADD (unique, 0x1000062e, 8) , (stack, 0xfffffffffffffe10, 8), (unique, 0x1000062e, 8) CAST (ram, 0x4ecd10, 8), (unique, 0x3100, 8) INT_ADD (register, 0x0, 8) , (const, 0x1, 8), (register, 0x0, 8) CALL (ram, 0x121100, 8) , (unique, 0x10000626, 8), (stack, 0xfffffffffffffe10, 8) INDIRECT (stack, 0xfffffffffffffe10, 8) , (const, 0x207, 4), (ram, 0x4ecd10, 8) INDIRECT (ram, 0x4ecd10, 8) , (const, 0x207, 4), (unique, 0x10000626, 8) CAST (register, 0xa8, 8), (stack, 0xfffffffffffffe10, 8) INDIRECT (stack, 0xfffffffffffffe10, 8) , (const, 0x206, 4), (stack, 0xfffffffffffffe10, 8) COPY (unique, 0x3100, 8), (unique, 0x3100, 8) INT_ADD (register, 0x0, 8) , (const, 0x1, 8), (register, 0x0, 8) CALL (ram, 0x121100, 8) , (unique, 0x1000060e, 8), (ram, 0x4ecd10, 8) INDIRECT (ram, 0x4ecd10, 8) , (const, 0x1fe, 4), (unique, 0x1000060e, 8) CAST (unique, 0x10000265, 8), (ram, 0x4ecd10, 8) MULTIEQUAL (ram, 0x4ecd10, 8) , (ram, 0x4ecd10, 8)]
[(unique, 0x10000475, 8) COPY (ram, 0x4ec860, 8), (ram, 0x4ec860, 8) INDIRECT (ram, 0x4ec860, 8) , (const, 0x207, 4), (ram, 0x4ec860, 8) INDIRECT (ram, 0x4ec860, 8) , (const, 0x1fe, 4), (ram, 0x4ec860, 8) MULTIEQUAL (unique, 0x100004c5, 8) , (unique, 0x100004cd, 8)]
[(unique, 0x1000047d, 8) COPY (unique, 0x1000046d, 8), (unique, 0x1000046d, 8) COPY (stack, 0xfffffffffffffe10, 8), (stack, 0xfffffffffffffe10, 8) INDIRECT (stack, 0xfffffffffffffe10, 8) , (const, 0x207, 4), (stack, 0xfffffffffffffe10, 8) INDIRECT (stack, 0xfffffffffffffe10, 8) , (const, 0x206, 4), (stack, 0xfffffffffffffe10, 8) COPY (unique, 0x3100, 8), (unique, 0x3100, 8) INT_ADD (register, 0x0, 8) , (const, 0x1, 8), (register, 0x0, 8) CALL (ram, 0x121100, 8) , (unique, 0x1000060e, 8), (unique, 0x1000060e, 8) CAST (unique, 0x10000265, 8)]
[(unique, 0x1000049d, 8) COPY (unique, 0x3100, 8), (unique, 0x3100, 8) INT_ADD (register, 0x0, 8) , (const, 0x1, 8), (register, 0x0, 8) CALL (ram, 0x121100, 8) , (unique, 0x10000626, 8), (unique, 0x10000626, 8) CAST (register, 0xa8, 8)]
[(unique, 0x100004b5, 8) COPY (ram, 0x4ecd10, 8), (ram, 0x4ecd10, 8) INDIRECT (ram, 0x4ecd10, 8) , (const, 0x207, 4), (ram, 0x4ecd10, 8) INDIRECT (ram, 0x4ecd10, 8) , (const, 0x1fe, 4), (ram, 0x4ecd10, 8) MULTIEQUAL (ram, 0x4ecd10, 8) , (ram, 0x4ecd10, 8)]
[(unique, 0x100004d5, 8) COPY (ram, 0x4ec868, 8), (ram, 0x4ec868, 8) INDIRECT (ram, 0x4ec868, 8) , (const, 0x207, 4), (ram, 0x4ec868, 8) INDIRECT (ram, 0x4ec868, 8) , (const, 0x1fe, 4), (ram, 0x4ec868, 8) MULTIEQUAL (ram, 0x4ec868, 8) , (ram, 0x4ec868, 8)]
[ ---  CBRANCH (ram, 0x1347a5, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (ram, 0x4ecd08, 8) , (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10000636, 8), (unique, 0x10000636, 8) INT_ADD (unique, 0x3400, 8) , (unique, 0x3100, 8), (unique, 0x3400, 8) INT_ADD (unique, 0x1000062e, 8) , (stack, 0xfffffffffffffe10, 8), (unique, 0x1000062e, 8) CAST (ram, 0x4ecd10, 8), (unique, 0x3100, 8) INT_ADD (register, 0x0, 8) , (const, 0x1, 8), (register, 0x0, 8) CALL (ram, 0x121100, 8) , (unique, 0x10000626, 8), (stack, 0xfffffffffffffe10, 8) INDIRECT (stack, 0xfffffffffffffe10, 8) , (const, 0x207, 4), (ram, 0x4ecd10, 8) INDIRECT (ram, 0x4ecd10, 8) , (const, 0x207, 4), (ram, 0x4ecd08, 8) INDIRECT (ram, 0x4ecd08, 8) , (const, 0x207, 4), (unique, 0x10000626, 8) CAST (register, 0xa8, 8), (stack, 0xfffffffffffffe10, 8) INDIRECT (stack, 0xfffffffffffffe10, 8) , (const, 0x206, 4), (stack, 0xfffffffffffffe10, 8) COPY (unique, 0x3100, 8), (unique, 0x3100, 8) INT_ADD (register, 0x0, 8) , (const, 0x1, 8), (register, 0x0, 8) CALL (ram, 0x121100, 8) , (unique, 0x1000060e, 8), (ram, 0x4ecd10, 8) INDIRECT (ram, 0x4ecd10, 8) , (const, 0x1fe, 4), (ram, 0x4ecd08, 8) INDIRECT (ram, 0x4ecd08, 8) , (const, 0x1fe, 4), (unique, 0x1000060e, 8) CAST (unique, 0x10000265, 8), (ram, 0x4ecd08, 8) MULTIEQUAL (ram, 0x4ecd08, 8) , (ram, 0x4ecd08, 8), (ram, 0x4ecd10, 8) MULTIEQUAL (ram, 0x4ecd10, 8) , (ram, 0x4ecd10, 8)]
[(stack, 0xfffffffffffffde0, 8) COPY (ram, 0x4ecd10, 8)]
[(stack, 0xfffffffffffffde8, 8) COPY (unique, 0x3100, 8)]
[(stack, 0xfffffffffffffdf0, 8) COPY (unique, 0x1000046d, 8)]
[(stack, 0xfffffffffffffe00, 8) COPY (ram, 0x4ec868, 8)]
[ ---  CBRANCH (ram, 0x134742, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (unique, 0x3400, 8) , (const, 0x400, 8), (unique, 0x3400, 8) INT_ADD (unique, 0x1000046d, 8) , (unique, 0x3100, 8)]
[(register, 0x30, 8) COPY (const, 0x400, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x134758, 8), (register, 0x20, 8) CAST (unique, 0x10000656, 8), (unique, 0x10000656, 8) INT_ADD (unique, 0x1000064e, 8) , (unique, 0x100000d0, 8), (unique, 0x1000064e, 8) CAST (unique, 0x100001ee, 8), (unique, 0x100001ee, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffdd0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x255, 4)]
[(ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x255, 4)]
[(ram, 0x4ec868, 8) INDIRECT (ram, 0x4ec868, 8) , (const, 0x255, 4)]
[(ram, 0x4eccf8, 8) INDIRECT (ram, 0x4eccf8, 8) , (const, 0x255, 4)]
[(ram, 0x4ecd00, 8) INDIRECT (ram, 0x4ecd00, 8) , (const, 0x255, 4)]
[(ram, 0x4ecd08, 8) INDIRECT (ram, 0x4ecd08, 8) , (const, 0x255, 4)]
[(ram, 0x4ecd10, 8) INDIRECT (ram, 0x4ecd10, 8) , (const, 0x255, 4)]
[(stack, 0xfffffffffffffde0, 8) INDIRECT (stack, 0xfffffffffffffde0, 8) , (const, 0x255, 4), (stack, 0xfffffffffffffde0, 8) INDIRECT (stack, 0xfffffffffffffde0, 8) , (const, 0x254, 4)]
[(stack, 0xfffffffffffffde8, 8) INDIRECT (stack, 0xfffffffffffffde8, 8) , (const, 0x255, 4), (stack, 0xfffffffffffffde8, 8) INDIRECT (stack, 0xfffffffffffffde8, 8) , (const, 0x254, 4)]
[(stack, 0xfffffffffffffdf0, 8) INDIRECT (stack, 0xfffffffffffffdf0, 8) , (const, 0x255, 4), (stack, 0xfffffffffffffdf0, 8) INDIRECT (stack, 0xfffffffffffffdf0, 8) , (const, 0x254, 4)]
[(stack, 0xfffffffffffffdf8, 8) INDIRECT (stack, 0xfffffffffffffdf8, 8) , (const, 0x255, 4), (stack, 0xfffffffffffffdf8, 8) INDIRECT (stack, 0xfffffffffffffdf8, 8) , (const, 0x254, 4), (stack, 0xfffffffffffffdf8, 8) COPY (unique, 0x3400, 8), (unique, 0x3400, 8) CAST (unique, 0x10000646, 8), (unique, 0x10000646, 8) INT_ADD (register, 0x30, 8) , (unique, 0x1000063e, 8), (unique, 0x1000063e, 8) CAST (ram, 0x4ecd08, 8), (register, 0x30, 8) MULTIEQUAL (unique, 0x3400, 8) , (register, 0x30, 8)]
[(stack, 0xfffffffffffffe00, 8) INDIRECT (stack, 0xfffffffffffffe00, 8) , (const, 0x255, 4), (stack, 0xfffffffffffffe00, 8) INDIRECT (stack, 0xfffffffffffffe00, 8) , (const, 0x254, 4)]
[(stack, 0xfffffffffffffe08, 8) INDIRECT (stack, 0xfffffffffffffe08, 8) , (const, 0x255, 4), (stack, 0xfffffffffffffe08, 8) INDIRECT (stack, 0xfffffffffffffe08, 8) , (const, 0x254, 4)]
[(stack, 0xfffffffffffffe10, 8) INDIRECT (stack, 0xfffffffffffffe10, 8) , (const, 0x255, 4), (stack, 0xfffffffffffffe10, 8) INDIRECT (stack, 0xfffffffffffffe10, 8) , (const, 0x254, 4)]
[(stack, 0xfffffffffffffe18, 8) INDIRECT (stack, 0xfffffffffffffe18, 8) , (const, 0x255, 4), (stack, 0xfffffffffffffe18, 8) INDIRECT (stack, 0xfffffffffffffe18, 8) , (const, 0x254, 4)]
[(stack, 0xfffffffffffffe20, 8) INDIRECT (stack, 0xfffffffffffffe20, 8) , (const, 0x255, 4), (stack, 0xfffffffffffffe20, 8) INDIRECT (stack, 0xfffffffffffffe20, 8) , (const, 0x254, 4)]
[(stack, 0xfffffffffffffe28, 1) INDIRECT (stack, 0xfffffffffffffe28, 1) , (const, 0x255, 4), (stack, 0xfffffffffffffe28, 1) INDIRECT (stack, 0xfffffffffffffe28, 1) , (const, 0x254, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x255, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x254, 4)]
[(unique, 0x10000455, 8) COPY (ram, 0x4ec860, 8), (ram, 0x4ec860, 8) INDIRECT (ram, 0x4ec860, 8) , (const, 0x255, 4)]
[ ---  CBRANCH (ram, 0x1345c0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10000666, 8), (unique, 0x10000666, 8) CALL (ram, 0x121020, 8) , (ram, 0x4ec868, 8) , (unique, 0x1000065e, 8), (unique, 0x1000065e, 8) CAST (unique, 0x3400, 8), (unique, 0x3400, 8) CAST (unique, 0x10000646, 8), (unique, 0x10000646, 8) INT_ADD (register, 0x30, 8) , (unique, 0x1000063e, 8), (unique, 0x1000063e, 8) CAST (ram, 0x4ecd08, 8), (register, 0x30, 8) MULTIEQUAL (unique, 0x3400, 8) , (register, 0x30, 8)]
[ ---  CBRANCH (ram, 0x1348c5, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (stack, 0xfffffffffffffe00, 8)]
[ ---  CBRANCH (ram, 0x134794, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xfffffffffffffe18, 8) , (const, 0x0, 8)]
[(register, 0x30, 8) CAST (unique, 0x1000067e, 8), (unique, 0x1000067e, 8) INT_SUB (unique, 0x1000066e, 8) , (unique, 0x10000676, 8), (unique, 0x10000676, 8) CAST (stack, 0xfffffffffffffe00, 8), (unique, 0x1000066e, 8) CAST (register, 0x0, 8)]
[(register, 0x38, 8) PTRADD (ram, 0x4ec860, 8) , (unique, 0x100003d3, 8) , (const, 0x8, 8), (unique, 0x100003d3, 8) INT_MULT (stack, 0xfffffffffffffe18, 8) , (const, 0x2, 8)]
[(unique, 0x1000048d, 8) COPY (ram, 0x4ec860, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x30, 8) , (register, 0x1200, 8), (register, 0x1200, 8) INT_ADD (unique, 0x10000236, 8) , (unique, 0x10000686, 8), (unique, 0x10000686, 8) CAST (register, 0x30, 8), (unique, 0x10000236, 8) LOAD (const, 0x1b1, 4) , (register, 0x30, 8), (register, 0x30, 8) MULTIEQUAL (unique, 0x1000048d, 8) , (unique, 0x10000495, 8)]
[(ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x97c, 4), (ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x97b, 4), (ram, 0x4eae00, 8) MULTIEQUAL (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8)]
[(ram, 0x4ec860, 8) INDIRECT (ram, 0x4ec860, 8) , (const, 0x97c, 4), (ram, 0x4ec860, 8) INDIRECT (ram, 0x4ec860, 8) , (const, 0x97b, 4), (ram, 0x4ec860, 8) MULTIEQUAL (ram, 0x4ec860, 8) , (ram, 0x4ec860, 8)]
[(ram, 0x4eccf8, 8) INDIRECT (ram, 0x4eccf8, 8) , (const, 0x97c, 4), (ram, 0x4eccf8, 8) INDIRECT (ram, 0x4eccf8, 8) , (const, 0x97b, 4), (ram, 0x4eccf8, 8) MULTIEQUAL (ram, 0x4eccf8, 8) , (ram, 0x4eccf8, 8)]
[(ram, 0x4ecd00, 8) INDIRECT (ram, 0x4ecd00, 8) , (const, 0x97c, 4), (ram, 0x4ecd00, 8) INDIRECT (ram, 0x4ecd00, 8) , (const, 0x97b, 4), (ram, 0x4ecd00, 8) MULTIEQUAL (ram, 0x4ecd00, 8) , (ram, 0x4ecd00, 8)]
[(ram, 0x4ecd10, 8) INDIRECT (ram, 0x4ecd10, 8) , (const, 0x97c, 4), (ram, 0x4ecd10, 8) INDIRECT (ram, 0x4ecd10, 8) , (const, 0x97b, 4), (ram, 0x4ecd10, 8) MULTIEQUAL (ram, 0x4ecd10, 8) , (ram, 0x4ecd10, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000024e, 8) , (register, 0x1208, 8), (unique, 0x1000024e, 8) PTRADD (register, 0x30, 8) , (const, 0x1, 8) , (const, 0x8, 8), (register, 0x1208, 8) INT_ADD (unique, 0x1000023e, 8) , (unique, 0x1000068e, 8), (unique, 0x1000068e, 8) CAST (register, 0x30, 8), (unique, 0x1000023e, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000246, 8), (unique, 0x10000246, 8) PTRADD (register, 0x30, 8) , (const, 0x1, 8) , (const, 0x8, 8), (register, 0x30, 8) MULTIEQUAL (unique, 0x1000048d, 8) , (unique, 0x10000495, 8)]
[(unique, 0x10000495, 8) COPY (register, 0x30, 8), (register, 0x30, 8) PTRADD (register, 0x30, 8) , (const, 0x2, 8) , (const, 0x8, 8), (register, 0x30, 8) MULTIEQUAL (unique, 0x1000048d, 8) , (unique, 0x10000495, 8)]
[ ---  CBRANCH (ram, 0x1348f8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x38, 8) , (register, 0x30, 8), (register, 0x30, 8) PTRADD (register, 0x30, 8) , (const, 0x2, 8) , (const, 0x8, 8), (register, 0x30, 8) MULTIEQUAL (unique, 0x1000048d, 8) , (unique, 0x10000495, 8)]
[(ram, 0x4ecd10, 8) MULTIEQUAL (ram, 0x4ecd10, 8) , (ram, 0x4ecd10, 8) , (ram, 0x4ecd10, 8)]
[(ram, 0x4ecd00, 8) MULTIEQUAL (ram, 0x4ecd00, 8) , (ram, 0x4ecd00, 8) , (ram, 0x4ecd00, 8)]
[(ram, 0x4eccf8, 8) MULTIEQUAL (ram, 0x4eccf8, 8) , (ram, 0x4eccf8, 8) , (ram, 0x4eccf8, 8)]
[(ram, 0x4ec860, 8) MULTIEQUAL (ram, 0x4ec860, 8) , (ram, 0x4ec860, 8) , (ram, 0x4ec860, 8)]
[(ram, 0x4eae00, 8) MULTIEQUAL (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8)]
[(ram, 0x4ecd08, 8) COPY (stack, 0xfffffffffffffdf8, 8)]
[(unique, 0x10000485, 8) COPY (stack, 0xfffffffffffffdf0, 8)]
[(unique, 0x100004a5, 8) COPY (stack, 0xfffffffffffffde8, 8)]
[(unique, 0x100004ad, 8) COPY (stack, 0xfffffffffffffde0, 8)]
[(unique, 0x100004dd, 8) COPY (register, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x1347d5, 8), (register, 0x20, 8) CAST (unique, 0x100006be, 8), (unique, 0x100006be, 8) INT_ADD (unique, 0x100006b6, 8) , (unique, 0x100000d0, 8), (unique, 0x100006b6, 8) CAST (unique, 0x100001f6, 8), (unique, 0x100001f6, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffdd0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (stack, 0xfffffffffffffe00, 8) , (register, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x121160, 8) , (unique, 0x3400, 8) , (unique, 0x10000265, 8) , (register, 0x10, 8), (stack, 0xfffffffffffffe00, 8) INDIRECT (stack, 0xfffffffffffffe00, 8) , (const, 0x2b8, 4), (stack, 0xfffffffffffffe00, 8) INDIRECT (stack, 0xfffffffffffffe00, 8) , (const, 0x2b7, 4), (unique, 0x3400, 8) CAST (unique, 0x100006ae, 8), (unique, 0x100006ae, 8) INT_ADD (unique, 0x1000069e, 8) , (unique, 0x100006a6, 8), (unique, 0x100006a6, 8) CAST (register, 0x98, 8), (unique, 0x1000069e, 8) CAST (ram, 0x4ec868, 8), (stack, 0xfffffffffffffe00, 8) COPY (unique, 0x10000696, 8), (unique, 0x10000696, 8) CAST (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (register, 0x8, 8) , (unique, 0x1000039b, 8) , (const, 0x8, 8), (unique, 0x1000039b, 8) INT_MULT (stack, 0xfffffffffffffe18, 8) , (const, 0x2, 8), (register, 0x8, 8) MULTIEQUAL (unique, 0x10000475, 8) , (unique, 0x10000455, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0x1000047d, 8) , (unique, 0x10000485, 8), (register, 0x98, 8) MULTIEQUAL (unique, 0x100004b5, 8) , (unique, 0x100004ad, 8), (ram, 0x4ec868, 8) MULTIEQUAL (unique, 0x100004d5, 8) , (unique, 0x100004dd, 8), (stack, 0xfffffffffffffe18, 8) MULTIEQUAL (stack, 0xfffffffffffffe18, 8) , (stack, 0xfffffffffffffe18, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x134802, 8), (register, 0x20, 8) CAST (unique, 0x100006de, 8), (unique, 0x100006de, 8) INT_ADD (unique, 0x100006d6, 8) , (unique, 0x100000d0, 8), (unique, 0x100006d6, 8) CAST (unique, 0x100001fe, 8), (unique, 0x100001fe, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffdd0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x2d4, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x2b8, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4ecd00, 8) INDIRECT (ram, 0x4ecd00, 8) , (const, 0x2d4, 4), (ram, 0x4ecd00, 8) INDIRECT (ram, 0x4ecd00, 8) , (const, 0x2c7, 4), (ram, 0x4ecd00, 8) INDIRECT (ram, 0x4ecd00, 8) , (const, 0x2b8, 4), (ram, 0x4ecd00, 8) MULTIEQUAL (ram, 0x4ecd00, 8) , (ram, 0x4ecd00, 8)]
[(ram, 0x4ecd10, 8) INDIRECT (ram, 0x4ecd10, 8) , (const, 0x2d4, 4), (ram, 0x4ecd10, 8) INDIRECT (ram, 0x4ecd10, 8) , (const, 0x2c7, 4), (ram, 0x4ecd10, 8) INDIRECT (ram, 0x4ecd10, 8) , (const, 0x2b8, 4), (ram, 0x4ecd10, 8) MULTIEQUAL (ram, 0x4ecd10, 8) , (ram, 0x4ecd10, 8)]
[(stack, 0xfffffffffffffde0, 8) INDIRECT (stack, 0xfffffffffffffde0, 8) , (const, 0x2d4, 4), (stack, 0xfffffffffffffde0, 8) INDIRECT (stack, 0xfffffffffffffde0, 8) , (const, 0x2d3, 4), (stack, 0xfffffffffffffde0, 8) INDIRECT (stack, 0xfffffffffffffde0, 8) , (const, 0x2b8, 4), (stack, 0xfffffffffffffde0, 8) INDIRECT (stack, 0xfffffffffffffde0, 8) , (const, 0x2b7, 4), (stack, 0xfffffffffffffde0, 8) MULTIEQUAL (stack, 0xfffffffffffffde0, 8) , (stack, 0xfffffffffffffde0, 8)]
[(stack, 0xfffffffffffffde8, 8) INDIRECT (stack, 0xfffffffffffffde8, 8) , (const, 0x2d4, 4), (stack, 0xfffffffffffffde8, 8) INDIRECT (stack, 0xfffffffffffffde8, 8) , (const, 0x2d3, 4), (stack, 0xfffffffffffffde8, 8) INDIRECT (stack, 0xfffffffffffffde8, 8) , (const, 0x2b8, 4), (stack, 0xfffffffffffffde8, 8) INDIRECT (stack, 0xfffffffffffffde8, 8) , (const, 0x2b7, 4), (stack, 0xfffffffffffffde8, 8) MULTIEQUAL (stack, 0xfffffffffffffde8, 8) , (stack, 0xfffffffffffffde8, 8)]
[(stack, 0xfffffffffffffdf0, 8) INDIRECT (stack, 0xfffffffffffffdf0, 8) , (const, 0x2d4, 4), (stack, 0xfffffffffffffdf0, 8) INDIRECT (stack, 0xfffffffffffffdf0, 8) , (const, 0x2d3, 4), (stack, 0xfffffffffffffdf0, 8) INDIRECT (stack, 0xfffffffffffffdf0, 8) , (const, 0x2b8, 4), (stack, 0xfffffffffffffdf0, 8) INDIRECT (stack, 0xfffffffffffffdf0, 8) , (const, 0x2b7, 4), (stack, 0xfffffffffffffdf0, 8) COPY (register, 0x90, 8), (register, 0x90, 8) MULTIEQUAL (unique, 0x1000049d, 8) , (unique, 0x100004a5, 8)]
[(stack, 0xfffffffffffffdf8, 8) INDIRECT (stack, 0xfffffffffffffdf8, 8) , (const, 0x2d4, 4), (stack, 0xfffffffffffffdf8, 8) INDIRECT (stack, 0xfffffffffffffdf8, 8) , (const, 0x2d3, 4), (stack, 0xfffffffffffffdf8, 8) INDIRECT (stack, 0xfffffffffffffdf8, 8) , (const, 0x2b8, 4), (stack, 0xfffffffffffffdf8, 8) INDIRECT (stack, 0xfffffffffffffdf8, 8) , (const, 0x2b7, 4), (stack, 0xfffffffffffffdf8, 8) COPY (ram, 0x4ec868, 8), (ram, 0x4ec868, 8) MULTIEQUAL (unique, 0x100004d5, 8) , (unique, 0x100004dd, 8)]
[(stack, 0xfffffffffffffe00, 8) INDIRECT (stack, 0xfffffffffffffe00, 8) , (const, 0x2d4, 4), (stack, 0xfffffffffffffe00, 8) INDIRECT (stack, 0xfffffffffffffe00, 8) , (const, 0x2d3, 4), (stack, 0xfffffffffffffe00, 8) INDIRECT (stack, 0xfffffffffffffe00, 8) , (const, 0x2b8, 4), (stack, 0xfffffffffffffe00, 8) INDIRECT (stack, 0xfffffffffffffe00, 8) , (const, 0x2b7, 4), (stack, 0xfffffffffffffe00, 8) COPY (unique, 0x10000696, 8), (unique, 0x10000696, 8) CAST (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (register, 0x8, 8) , (unique, 0x1000039b, 8) , (const, 0x8, 8), (unique, 0x1000039b, 8) INT_MULT (stack, 0xfffffffffffffe18, 8) , (const, 0x2, 8), (register, 0x8, 8) MULTIEQUAL (unique, 0x10000475, 8) , (unique, 0x10000455, 8), (stack, 0xfffffffffffffe18, 8) MULTIEQUAL (stack, 0xfffffffffffffe18, 8) , (stack, 0xfffffffffffffe18, 8)]
[(stack, 0xfffffffffffffe10, 8) INDIRECT (stack, 0xfffffffffffffe10, 8) , (const, 0x2d4, 4), (stack, 0xfffffffffffffe10, 8) INDIRECT (stack, 0xfffffffffffffe10, 8) , (const, 0x2d3, 4), (stack, 0xfffffffffffffe10, 8) INDIRECT (stack, 0xfffffffffffffe10, 8) , (const, 0x2b8, 4), (stack, 0xfffffffffffffe10, 8) INDIRECT (stack, 0xfffffffffffffe10, 8) , (const, 0x2b7, 4), (stack, 0xfffffffffffffe10, 8) MULTIEQUAL (stack, 0xfffffffffffffe10, 8) , (stack, 0xfffffffffffffe10, 8)]
[(stack, 0xfffffffffffffe28, 1) INDIRECT (stack, 0xfffffffffffffe28, 1) , (const, 0x2d4, 4), (stack, 0xfffffffffffffe28, 1) INDIRECT (stack, 0xfffffffffffffe28, 1) , (const, 0x2d3, 4), (stack, 0xfffffffffffffe28, 1) INDIRECT (stack, 0xfffffffffffffe28, 1) , (const, 0x2b8, 4), (stack, 0xfffffffffffffe28, 1) INDIRECT (stack, 0xfffffffffffffe28, 1) , (const, 0x2b7, 4), (stack, 0xfffffffffffffe28, 1) MULTIEQUAL (stack, 0xfffffffffffffe28, 1) , (stack, 0xfffffffffffffe28, 1)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2d4, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2d3, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2b8, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2b7, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x2dd, 4), (ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x2d4, 4), (ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x2c7, 4), (ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x2b8, 4), (ram, 0x4eae00, 8) MULTIEQUAL (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8)]
[(ram, 0x4ec860, 8) INDIRECT (ram, 0x4ec860, 8) , (const, 0x2dd, 4), (ram, 0x4ec860, 8) INDIRECT (ram, 0x4ec860, 8) , (const, 0x2d4, 4), (ram, 0x4ec860, 8) INDIRECT (ram, 0x4ec860, 8) , (const, 0x2c7, 4), (ram, 0x4ec860, 8) INDIRECT (ram, 0x4ec860, 8) , (const, 0x2b8, 4), (ram, 0x4ec860, 8) MULTIEQUAL (ram, 0x4ec860, 8) , (ram, 0x4ec860, 8)]
[(ram, 0x4ec868, 8) INDIRECT (ram, 0x4ec868, 8) , (const, 0x2dd, 4), (ram, 0x4ec868, 8) INDIRECT (ram, 0x4ec868, 8) , (const, 0x2d4, 4), (ram, 0x4ec868, 8) INDIRECT (ram, 0x4ec868, 8) , (const, 0x2c7, 4), (ram, 0x4ec868, 8) INDIRECT (ram, 0x4ec868, 8) , (const, 0x2b8, 4), (ram, 0x4ec868, 8) MULTIEQUAL (unique, 0x100004d5, 8) , (unique, 0x100004dd, 8)]
[(ram, 0x4eccf8, 8) INDIRECT (ram, 0x4eccf8, 8) , (const, 0x2dd, 4), (ram, 0x4eccf8, 8) INDIRECT (ram, 0x4eccf8, 8) , (const, 0x2d4, 4), (ram, 0x4eccf8, 8) INDIRECT (ram, 0x4eccf8, 8) , (const, 0x2c7, 4), (ram, 0x4eccf8, 8) INDIRECT (ram, 0x4eccf8, 8) , (const, 0x2b8, 4), (ram, 0x4eccf8, 8) MULTIEQUAL (ram, 0x4eccf8, 8) , (ram, 0x4eccf8, 8)]
[(ram, 0x4ecd08, 8) INDIRECT (ram, 0x4ecd08, 8) , (const, 0x2dd, 4), (ram, 0x4ecd08, 8) INDIRECT (ram, 0x4ecd08, 8) , (const, 0x2d4, 4), (ram, 0x4ecd08, 8) INDIRECT (ram, 0x4ecd08, 8) , (const, 0x2c7, 4), (ram, 0x4ecd08, 8) INDIRECT (ram, 0x4ecd08, 8) , (const, 0x2b8, 4), (ram, 0x4ecd08, 8) MULTIEQUAL (ram, 0x4ecd08, 8) , (ram, 0x4ecd08, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (register, 0x0, 8), (unique, 0x3100, 8) PTRADD (unique, 0x10000465, 8) , (const, 0x1, 8) , (const, 0x8, 8), (register, 0x0, 8) CALL (ram, 0x121160, 8) , (register, 0x38, 8) , (register, 0xa8, 8) , (unique, 0x1000045d, 8), (register, 0x38, 8) CAST (unique, 0x100006ce, 8), (unique, 0x100006ce, 8) INT_ADD (stack, 0xfffffffffffffe10, 8) , (unique, 0x100006c6, 8), (unique, 0x100006c6, 8) CAST (stack, 0xfffffffffffffdf8, 8), (unique, 0x1000045d, 8) COPY (stack, 0xfffffffffffffdf0, 8), (unique, 0x10000465, 8) COPY (stack, 0xfffffffffffffe00, 8), (stack, 0xfffffffffffffe10, 8) INDIRECT (stack, 0xfffffffffffffe10, 8) , (const, 0x2b8, 4), (stack, 0xfffffffffffffe00, 8) INDIRECT (stack, 0xfffffffffffffe00, 8) , (const, 0x2b8, 4), (stack, 0xfffffffffffffdf8, 8) INDIRECT (stack, 0xfffffffffffffdf8, 8) , (const, 0x2b8, 4), (stack, 0xfffffffffffffdf0, 8) INDIRECT (stack, 0xfffffffffffffdf0, 8) , (const, 0x2b8, 4), (stack, 0xfffffffffffffe10, 8) INDIRECT (stack, 0xfffffffffffffe10, 8) , (const, 0x2b7, 4), (stack, 0xfffffffffffffe00, 8) INDIRECT (stack, 0xfffffffffffffe00, 8) , (const, 0x2b7, 4), (stack, 0xfffffffffffffdf8, 8) INDIRECT (stack, 0xfffffffffffffdf8, 8) , (const, 0x2b7, 4), (stack, 0xfffffffffffffdf0, 8) INDIRECT (stack, 0xfffffffffffffdf0, 8) , (const, 0x2b7, 4), (stack, 0xfffffffffffffe00, 8) COPY (unique, 0x10000696, 8), (unique, 0x10000696, 8) CAST (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (register, 0x8, 8) , (unique, 0x1000039b, 8) , (const, 0x8, 8), (unique, 0x1000039b, 8) INT_MULT (stack, 0xfffffffffffffe18, 8) , (const, 0x2, 8), (stack, 0xfffffffffffffdf8, 8) COPY (ram, 0x4ec868, 8), (stack, 0xfffffffffffffdf0, 8) COPY (register, 0x90, 8), (register, 0x8, 8) MULTIEQUAL (unique, 0x10000475, 8) , (unique, 0x10000455, 8), (register, 0x90, 8) MULTIEQUAL (unique, 0x1000049d, 8) , (unique, 0x100004a5, 8), (ram, 0x4ec868, 8) MULTIEQUAL (unique, 0x100004d5, 8) , (unique, 0x100004dd, 8), (stack, 0xfffffffffffffe10, 8) MULTIEQUAL (stack, 0xfffffffffffffe10, 8) , (stack, 0xfffffffffffffe10, 8), (stack, 0xfffffffffffffe18, 8) MULTIEQUAL (stack, 0xfffffffffffffe18, 8) , (stack, 0xfffffffffffffe18, 8)]
[(stack, 0xfffffffffffffe20, 8) COPY (unique, 0xbe00, 8), (unique, 0xbe00, 8) INT_ADD (stack, 0xfffffffffffffe20, 8) , (const, 0x1, 8), (stack, 0xfffffffffffffe20, 8) INDIRECT (stack, 0xfffffffffffffe20, 8) , (const, 0x2d4, 4), (stack, 0xfffffffffffffe20, 8) INDIRECT (stack, 0xfffffffffffffe20, 8) , (const, 0x2d3, 4), (stack, 0xfffffffffffffe20, 8) INDIRECT (stack, 0xfffffffffffffe20, 8) , (const, 0x2b8, 4), (stack, 0xfffffffffffffe20, 8) INDIRECT (stack, 0xfffffffffffffe20, 8) , (const, 0x2b7, 4), (stack, 0xfffffffffffffe20, 8) MULTIEQUAL (stack, 0xfffffffffffffe20, 8) , (stack, 0xfffffffffffffe20, 8)]
[(register, 0xa8, 8) INT_ADD (stack, 0xfffffffffffffe18, 8) , (const, 0x1, 8), (stack, 0xfffffffffffffe18, 8) INDIRECT (stack, 0xfffffffffffffe18, 8) , (const, 0x2d4, 4), (stack, 0xfffffffffffffe18, 8) INDIRECT (stack, 0xfffffffffffffe18, 8) , (const, 0x2d3, 4), (stack, 0xfffffffffffffe18, 8) INDIRECT (stack, 0xfffffffffffffe18, 8) , (const, 0x2b8, 4), (stack, 0xfffffffffffffe18, 8) INDIRECT (stack, 0xfffffffffffffe18, 8) , (const, 0x2b7, 4), (stack, 0xfffffffffffffe18, 8) MULTIEQUAL (stack, 0xfffffffffffffe18, 8) , (stack, 0xfffffffffffffe18, 8)]
[(unique, 0x100004ee, 8) COPY (stack, 0xfffffffffffffe08, 8), (stack, 0xfffffffffffffe08, 8) INDIRECT (stack, 0xfffffffffffffe08, 8) , (const, 0x2d4, 4), (stack, 0xfffffffffffffe08, 8) INDIRECT (stack, 0xfffffffffffffe08, 8) , (const, 0x2d3, 4), (stack, 0xfffffffffffffe08, 8) INDIRECT (stack, 0xfffffffffffffe08, 8) , (const, 0x2b8, 4), (stack, 0xfffffffffffffe08, 8) INDIRECT (stack, 0xfffffffffffffe08, 8) , (const, 0x2b7, 4), (stack, 0xfffffffffffffe08, 8) MULTIEQUAL (stack, 0xfffffffffffffe08, 8) , (stack, 0xfffffffffffffe08, 8)]
[ ---  BRANCH (ram, 0x1345b0, 1)]
[(unique, 0x10000270, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x10000278, 8) MULTIEQUAL (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8)]
[(unique, 0x10000280, 8) MULTIEQUAL (ram, 0x4ec860, 8) , (ram, 0x4ec860, 8) , (ram, 0x4ec860, 8) , (ram, 0x4ec860, 8) , (ram, 0x4ec860, 8) , (ram, 0x4ec860, 8) , (ram, 0x4ec860, 8)]
[(unique, 0x10000288, 8) MULTIEQUAL (ram, 0x4ec868, 8) , (ram, 0x4ec868, 8) , (ram, 0x4ec868, 8) , (ram, 0x4ec868, 8) , (ram, 0x4ec868, 8) , (ram, 0x4ec868, 8) , (ram, 0x4ec868, 8)]
[(unique, 0x10000290, 8) MULTIEQUAL (ram, 0x4eccf8, 8) , (ram, 0x4eccf8, 8) , (ram, 0x4eccf8, 8) , (ram, 0x4eccf8, 8) , (ram, 0x4eccf8, 8) , (ram, 0x4eccf8, 8) , (ram, 0x4eccf8, 8)]
[(unique, 0x10000298, 8) MULTIEQUAL (ram, 0x4ecd00, 8) , (ram, 0x4ecd00, 8) , (ram, 0x4ecd00, 8) , (ram, 0x4ecd00, 8) , (register, 0xa8, 8) , (ram, 0x4ecd00, 8) , (ram, 0x4ecd00, 8)]
[(unique, 0x100002a0, 8) MULTIEQUAL (ram, 0x4ecd08, 8) , (ram, 0x4ecd08, 8) , (ram, 0x4ecd08, 8) , (ram, 0x4ecd08, 8) , (ram, 0x4ecd08, 8) , (ram, 0x4ecd08, 8) , (ram, 0x4ecd08, 8)]
[(unique, 0x100002a8, 8) MULTIEQUAL (ram, 0x4ecd10, 8) , (ram, 0x4ecd10, 8) , (ram, 0x4ecd10, 8) , (ram, 0x4ecd10, 8) , (unique, 0x100004ee, 8) , (ram, 0x4ecd10, 8) , (ram, 0x4ecd10, 8)]
[(unique, 0x100002b0, 8) MULTIEQUAL (stack, 0xfffffffffffffde0, 8) , (stack, 0xfffffffffffffde0, 8) , (stack, 0xfffffffffffffde0, 8) , (stack, 0xfffffffffffffde0, 8) , (stack, 0xfffffffffffffde0, 8) , (stack, 0xfffffffffffffde0, 8) , (stack, 0xfffffffffffffde0, 8)]
[(unique, 0x100002b8, 8) MULTIEQUAL (stack, 0xfffffffffffffde8, 8) , (stack, 0xfffffffffffffde8, 8) , (stack, 0xfffffffffffffde8, 8) , (stack, 0xfffffffffffffde8, 8) , (stack, 0xfffffffffffffde8, 8) , (stack, 0xfffffffffffffde8, 8) , (stack, 0xfffffffffffffde8, 8)]
[(unique, 0x100002c0, 8) MULTIEQUAL (stack, 0xfffffffffffffdf0, 8) , (stack, 0xfffffffffffffdf0, 8) , (stack, 0xfffffffffffffdf0, 8) , (stack, 0xfffffffffffffdf0, 8) , (stack, 0xfffffffffffffdf0, 8) , (stack, 0xfffffffffffffdf0, 8) , (stack, 0xfffffffffffffdf0, 8)]
[(unique, 0x100002c8, 8) MULTIEQUAL (stack, 0xfffffffffffffdf8, 8) , (stack, 0xfffffffffffffdf8, 8) , (stack, 0xfffffffffffffdf8, 8) , (stack, 0xfffffffffffffdf8, 8) , (stack, 0xfffffffffffffdf8, 8) , (stack, 0xfffffffffffffdf8, 8) , (stack, 0xfffffffffffffdf8, 8)]
[(unique, 0x100002d0, 8) MULTIEQUAL (stack, 0xfffffffffffffe00, 8) , (stack, 0xfffffffffffffe00, 8) , (stack, 0xfffffffffffffe00, 8) , (stack, 0xfffffffffffffe00, 8) , (stack, 0xfffffffffffffe00, 8) , (stack, 0xfffffffffffffe00, 8) , (stack, 0xfffffffffffffe00, 8)]
[(unique, 0x100002d8, 8) MULTIEQUAL (stack, 0xfffffffffffffe08, 8) , (stack, 0xfffffffffffffe08, 8) , (stack, 0xfffffffffffffe08, 8) , (stack, 0xfffffffffffffe08, 8) , (stack, 0xfffffffffffffe08, 8) , (stack, 0xfffffffffffffe08, 8) , (stack, 0xfffffffffffffe08, 8)]
[(unique, 0x100002e0, 8) MULTIEQUAL (stack, 0xfffffffffffffe10, 8) , (stack, 0xfffffffffffffe10, 8) , (stack, 0xfffffffffffffe10, 8) , (stack, 0xfffffffffffffe10, 8) , (stack, 0xfffffffffffffe10, 8) , (stack, 0xfffffffffffffe10, 8) , (stack, 0xfffffffffffffe10, 8)]
[(unique, 0x100002e8, 8) MULTIEQUAL (stack, 0xfffffffffffffe18, 8) , (stack, 0xfffffffffffffe18, 8) , (stack, 0xfffffffffffffe18, 8) , (stack, 0xfffffffffffffe18, 8) , (stack, 0xfffffffffffffe18, 8) , (stack, 0xfffffffffffffe18, 8) , (stack, 0xfffffffffffffe18, 8)]
[(unique, 0x100002f0, 8) MULTIEQUAL (stack, 0xfffffffffffffe20, 8) , (stack, 0xfffffffffffffe20, 8) , (stack, 0xfffffffffffffe20, 8) , (stack, 0xfffffffffffffe20, 8) , (stack, 0xfffffffffffffe20, 8) , (stack, 0xfffffffffffffe20, 8) , (stack, 0xfffffffffffffe20, 8)]
[(unique, 0x100002f8, 1) MULTIEQUAL (stack, 0xfffffffffffffe28, 1) , (stack, 0xfffffffffffffe28, 1) , (stack, 0xfffffffffffffe28, 1) , (stack, 0xfffffffffffffe28, 1) , (stack, 0xfffffffffffffe28, 1) , (stack, 0xfffffffffffffe28, 1) , (stack, 0xfffffffffffffe28, 1)]
[(unique, 0x100002f9, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CBRANCH (ram, 0x134612, 1) , (unique, 0x1000026f, 1), (unique, 0x1000026f, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8) , (register, 0x0, 8) , (register, 0x0, 8) , (register, 0x0, 8) , (register, 0x0, 8) , (register, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x134622, 8), (register, 0x20, 8) CAST (unique, 0x100006ee, 8), (unique, 0x100006ee, 8) INT_ADD (unique, 0x100006e6, 8) , (unique, 0x100000d0, 8), (unique, 0x100006e6, 8) CAST (unique, 0x100001d6, 8), (unique, 0x100001d6, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffdd0, 8)]
[(register, 0x110, 8) INDIRECT (unique, 0x10000270, 8) , (const, 0x19e, 4)]
[(ram, 0x4eae00, 8) INDIRECT (unique, 0x10000278, 8) , (const, 0x19e, 4)]
[(ram, 0x4ec860, 8) INDIRECT (unique, 0x10000280, 8) , (const, 0x19e, 4)]
[(ram, 0x4ec868, 8) INDIRECT (unique, 0x10000288, 8) , (const, 0x19e, 4)]
[(ram, 0x4eccf8, 8) INDIRECT (unique, 0x10000290, 8) , (const, 0x19e, 4)]
[(ram, 0x4ecd00, 8) INDIRECT (unique, 0x10000298, 8) , (const, 0x19e, 4)]
[(ram, 0x4ecd08, 8) INDIRECT (unique, 0x100002a0, 8) , (const, 0x19e, 4)]
[(ram, 0x4ecd10, 8) INDIRECT (unique, 0x100002a8, 8) , (const, 0x19e, 4)]
[(stack, 0xfffffffffffffde0, 8) INDIRECT (stack, 0xfffffffffffffde0, 8) , (const, 0x19e, 4), (stack, 0xfffffffffffffde0, 8) INDIRECT (unique, 0x100002b0, 8) , (const, 0x19d, 4)]
[(stack, 0xfffffffffffffde8, 8) INDIRECT (stack, 0xfffffffffffffde8, 8) , (const, 0x19e, 4), (stack, 0xfffffffffffffde8, 8) INDIRECT (unique, 0x100002b8, 8) , (const, 0x19d, 4)]
[(stack, 0xfffffffffffffdf0, 8) INDIRECT (stack, 0xfffffffffffffdf0, 8) , (const, 0x19e, 4), (stack, 0xfffffffffffffdf0, 8) INDIRECT (unique, 0x100002c0, 8) , (const, 0x19d, 4)]
[(stack, 0xfffffffffffffdf8, 8) INDIRECT (stack, 0xfffffffffffffdf8, 8) , (const, 0x19e, 4), (stack, 0xfffffffffffffdf8, 8) INDIRECT (unique, 0x100002c8, 8) , (const, 0x19d, 4)]
[(stack, 0xfffffffffffffe00, 8) INDIRECT (stack, 0xfffffffffffffe00, 8) , (const, 0x19e, 4), (stack, 0xfffffffffffffe00, 8) INDIRECT (unique, 0x100002d0, 8) , (const, 0x19d, 4)]
[(stack, 0xfffffffffffffe08, 8) INDIRECT (stack, 0xfffffffffffffe08, 8) , (const, 0x19e, 4), (stack, 0xfffffffffffffe08, 8) INDIRECT (unique, 0x100002d8, 8) , (const, 0x19d, 4)]
[(stack, 0xfffffffffffffe10, 8) INDIRECT (stack, 0xfffffffffffffe10, 8) , (const, 0x19e, 4), (stack, 0xfffffffffffffe10, 8) INDIRECT (unique, 0x100002e0, 8) , (const, 0x19d, 4)]
[(stack, 0xfffffffffffffe18, 8) INDIRECT (stack, 0xfffffffffffffe18, 8) , (const, 0x19e, 4), (stack, 0xfffffffffffffe18, 8) INDIRECT (unique, 0x100002e8, 8) , (const, 0x19d, 4)]
[(stack, 0xfffffffffffffe20, 8) INDIRECT (stack, 0xfffffffffffffe20, 8) , (const, 0x19e, 4), (stack, 0xfffffffffffffe20, 8) INDIRECT (unique, 0x100002f0, 8) , (const, 0x19d, 4)]
[(stack, 0xfffffffffffffe28, 1) INDIRECT (stack, 0xfffffffffffffe28, 1) , (const, 0x19e, 4), (stack, 0xfffffffffffffe28, 1) INDIRECT (unique, 0x100002f8, 1) , (const, 0x19d, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x19e, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (unique, 0x100002f9, 8) , (const, 0x19d, 4)]
[ ---  CBRANCH (ram, 0x134600, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x18a590, 8) , (unique, 0x100006f6, 8) , (const, 0x190, 4) , (register, 0x0, 8), (unique, 0x100006f6, 8) CAST (unique, 0x3200, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (unique, 0x100002f9, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffe28, 1) MULTIEQUAL (unique, 0x100002f8, 1) , (stack, 0xfffffffffffffe28, 1)]
[(stack, 0xfffffffffffffe20, 8) MULTIEQUAL (unique, 0x100002f0, 8) , (stack, 0xfffffffffffffe20, 8)]
[(stack, 0xfffffffffffffe18, 8) MULTIEQUAL (unique, 0x100002e8, 8) , (stack, 0xfffffffffffffe18, 8)]
[(stack, 0xfffffffffffffe10, 8) MULTIEQUAL (unique, 0x100002e0, 8) , (stack, 0xfffffffffffffe10, 8)]
[(stack, 0xfffffffffffffe08, 8) MULTIEQUAL (unique, 0x100002d8, 8) , (stack, 0xfffffffffffffe08, 8)]
[(stack, 0xfffffffffffffe00, 8) MULTIEQUAL (unique, 0x100002d0, 8) , (stack, 0xfffffffffffffe00, 8)]
[(stack, 0xfffffffffffffdf8, 8) MULTIEQUAL (unique, 0x100002c8, 8) , (stack, 0xfffffffffffffdf8, 8)]
[(stack, 0xfffffffffffffdf0, 8) MULTIEQUAL (unique, 0x100002c0, 8) , (stack, 0xfffffffffffffdf0, 8)]
[(stack, 0xfffffffffffffde8, 8) MULTIEQUAL (unique, 0x100002b8, 8) , (stack, 0xfffffffffffffde8, 8)]
[(stack, 0xfffffffffffffde0, 8) MULTIEQUAL (unique, 0x100002b0, 8) , (stack, 0xfffffffffffffde0, 8)]
[(ram, 0x4ecd10, 8) MULTIEQUAL (unique, 0x100002a8, 8) , (ram, 0x4ecd10, 8)]
[(ram, 0x4ecd08, 8) MULTIEQUAL (unique, 0x100002a0, 8) , (ram, 0x4ecd08, 8)]
[(ram, 0x4ecd00, 8) MULTIEQUAL (unique, 0x10000298, 8) , (ram, 0x4ecd00, 8)]
[(ram, 0x4eccf8, 8) MULTIEQUAL (unique, 0x10000290, 8) , (ram, 0x4eccf8, 8)]
[(ram, 0x4ec868, 8) MULTIEQUAL (unique, 0x10000288, 8) , (ram, 0x4ec868, 8)]
[(ram, 0x4ec860, 8) MULTIEQUAL (unique, 0x10000280, 8) , (ram, 0x4ec860, 8)]
[(ram, 0x4eae00, 8) MULTIEQUAL (unique, 0x10000278, 8) , (ram, 0x4eae00, 8)]
[(register, 0x110, 8) MULTIEQUAL (unique, 0x10000270, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x1344f8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x58c00, 1) , (const, 0x0, 1), (unique, 0x58c00, 1) INT_AND (unique, 0xbb00, 1) , (const, 0x10, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x100006fe, 8), (unique, 0x100006fe, 8) CAST (unique, 0x10000363, 8), (unique, 0x10000363, 8) PTRSUB (register, 0x0, 8) , (const, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x13460d, 8), (register, 0x20, 8) CAST (unique, 0x1000070e, 8), (unique, 0x1000070e, 8) INT_ADD (unique, 0x10000706, 8) , (unique, 0x100000d0, 8), (unique, 0x10000706, 8) CAST (unique, 0x100001ce, 8), (unique, 0x100001ce, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffdd0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1af, 4)]
[(ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x1af, 4)]
[(ram, 0x4ec860, 8) INDIRECT (ram, 0x4ec860, 8) , (const, 0x1af, 4)]
[(ram, 0x4ec868, 8) INDIRECT (ram, 0x4ec868, 8) , (const, 0x1af, 4)]
[(ram, 0x4eccf8, 8) INDIRECT (ram, 0x4eccf8, 8) , (const, 0x1af, 4)]
[(ram, 0x4ecd00, 8) INDIRECT (ram, 0x4ecd00, 8) , (const, 0x1af, 4)]
[(ram, 0x4ecd08, 8) INDIRECT (ram, 0x4ecd08, 8) , (const, 0x1af, 4)]
[(ram, 0x4ecd10, 8) INDIRECT (ram, 0x4ecd10, 8) , (const, 0x1af, 4)]
[(stack, 0xfffffffffffffde0, 8) INDIRECT (stack, 0xfffffffffffffde0, 8) , (const, 0x1af, 4), (stack, 0xfffffffffffffde0, 8) INDIRECT (stack, 0xfffffffffffffde0, 8) , (const, 0x1ae, 4)]
[(stack, 0xfffffffffffffde8, 8) INDIRECT (stack, 0xfffffffffffffde8, 8) , (const, 0x1af, 4), (stack, 0xfffffffffffffde8, 8) INDIRECT (stack, 0xfffffffffffffde8, 8) , (const, 0x1ae, 4)]
[(stack, 0xfffffffffffffdf0, 8) INDIRECT (stack, 0xfffffffffffffdf0, 8) , (const, 0x1af, 4), (stack, 0xfffffffffffffdf0, 8) INDIRECT (stack, 0xfffffffffffffdf0, 8) , (const, 0x1ae, 4)]
[(stack, 0xfffffffffffffdf8, 8) INDIRECT (stack, 0xfffffffffffffdf8, 8) , (const, 0x1af, 4), (stack, 0xfffffffffffffdf8, 8) INDIRECT (stack, 0xfffffffffffffdf8, 8) , (const, 0x1ae, 4)]
[(stack, 0xfffffffffffffe00, 8) INDIRECT (stack, 0xfffffffffffffe00, 8) , (const, 0x1af, 4), (stack, 0xfffffffffffffe00, 8) INDIRECT (stack, 0xfffffffffffffe00, 8) , (const, 0x1ae, 4)]
[(stack, 0xfffffffffffffe08, 8) INDIRECT (stack, 0xfffffffffffffe08, 8) , (const, 0x1af, 4), (stack, 0xfffffffffffffe08, 8) INDIRECT (stack, 0xfffffffffffffe08, 8) , (const, 0x1ae, 4)]
[(stack, 0xfffffffffffffe10, 8) INDIRECT (stack, 0xfffffffffffffe10, 8) , (const, 0x1af, 4), (stack, 0xfffffffffffffe10, 8) INDIRECT (stack, 0xfffffffffffffe10, 8) , (const, 0x1ae, 4)]
[(stack, 0xfffffffffffffe18, 8) INDIRECT (stack, 0xfffffffffffffe18, 8) , (const, 0x1af, 4), (stack, 0xfffffffffffffe18, 8) INDIRECT (stack, 0xfffffffffffffe18, 8) , (const, 0x1ae, 4)]
[(stack, 0xfffffffffffffe20, 8) INDIRECT (stack, 0xfffffffffffffe20, 8) , (const, 0x1af, 4), (stack, 0xfffffffffffffe20, 8) INDIRECT (stack, 0xfffffffffffffe20, 8) , (const, 0x1ae, 4)]
[(stack, 0xfffffffffffffe28, 1) INDIRECT (stack, 0xfffffffffffffe28, 1) , (const, 0x1af, 4), (stack, 0xfffffffffffffe28, 1) INDIRECT (stack, 0xfffffffffffffe28, 1) , (const, 0x1ae, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1af, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1ae, 4)]
[(register, 0x0, 8) CALL (ram, 0x121110, 8) , (unique, 0x10000716, 8) , (const, 0xa, 4), (unique, 0x10000716, 8) CAST (unique, 0x3200, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x1345c8, 8), (register, 0x20, 8) CAST (unique, 0x10000726, 8), (unique, 0x10000726, 8) INT_ADD (unique, 0x1000071e, 8) , (unique, 0x100000d0, 8), (unique, 0x1000071e, 8) CAST (unique, 0x1000022e, 8), (unique, 0x1000022e, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffdd0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x158, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x158, 4), (ram, 0x4eae00, 8) MULTIEQUAL (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8)]
[(ram, 0x4ec860, 8) INDIRECT (ram, 0x4ec860, 8) , (const, 0x158, 4), (ram, 0x4ec860, 8) MULTIEQUAL (ram, 0x4ec860, 8) , (ram, 0x4ec860, 8) , (ram, 0x4ec860, 8) , (ram, 0x4ec860, 8)]
[(ram, 0x4ec868, 8) INDIRECT (ram, 0x4ec868, 8) , (const, 0x158, 4), (ram, 0x4ec868, 8) MULTIEQUAL (ram, 0x4ec868, 8) , (ram, 0x4ec868, 8) , (ram, 0x4ec868, 8) , (ram, 0x4ec868, 8)]
[(ram, 0x4eccf8, 8) INDIRECT (ram, 0x4eccf8, 8) , (const, 0x158, 4), (ram, 0x4eccf8, 8) MULTIEQUAL (ram, 0x4eccf8, 8) , (ram, 0x4eccf8, 8) , (ram, 0x4eccf8, 8) , (ram, 0x4eccf8, 8)]
[(ram, 0x4ecd00, 8) INDIRECT (ram, 0x4ecd00, 8) , (const, 0x158, 4), (ram, 0x4ecd00, 8) MULTIEQUAL (ram, 0x4ecd00, 8) , (ram, 0x4ecd00, 8) , (ram, 0x4ecd00, 8) , (ram, 0x4ecd00, 8)]
[(ram, 0x4ecd08, 8) INDIRECT (ram, 0x4ecd08, 8) , (const, 0x158, 4), (ram, 0x4ecd08, 8) MULTIEQUAL (ram, 0x4ecd08, 8) , (ram, 0x4ecd08, 8) , (ram, 0x4ecd08, 8) , (ram, 0x4ecd08, 8)]
[(ram, 0x4ecd10, 8) INDIRECT (ram, 0x4ecd10, 8) , (const, 0x158, 4), (ram, 0x4ecd10, 8) MULTIEQUAL (ram, 0x4ecd10, 8) , (ram, 0x4ecd10, 8) , (ram, 0x4ecd10, 8) , (ram, 0x4ecd10, 8)]
[(stack, 0xfffffffffffffde0, 8) INDIRECT (stack, 0xfffffffffffffde0, 8) , (const, 0x158, 4), (stack, 0xfffffffffffffde0, 8) INDIRECT (stack, 0xfffffffffffffde0, 8) , (const, 0x157, 4), (stack, 0xfffffffffffffde0, 8) MULTIEQUAL (stack, 0xfffffffffffffde0, 8) , (stack, 0xfffffffffffffde0, 8) , (stack, 0xfffffffffffffde0, 8) , (stack, 0xfffffffffffffde0, 8)]
[(stack, 0xfffffffffffffde8, 8) INDIRECT (stack, 0xfffffffffffffde8, 8) , (const, 0x158, 4), (stack, 0xfffffffffffffde8, 8) INDIRECT (stack, 0xfffffffffffffde8, 8) , (const, 0x157, 4), (stack, 0xfffffffffffffde8, 8) MULTIEQUAL (stack, 0xfffffffffffffde8, 8) , (stack, 0xfffffffffffffde8, 8) , (stack, 0xfffffffffffffde8, 8) , (stack, 0xfffffffffffffde8, 8)]
[(stack, 0xfffffffffffffdf0, 8) INDIRECT (stack, 0xfffffffffffffdf0, 8) , (const, 0x158, 4), (stack, 0xfffffffffffffdf0, 8) INDIRECT (stack, 0xfffffffffffffdf0, 8) , (const, 0x157, 4), (stack, 0xfffffffffffffdf0, 8) MULTIEQUAL (stack, 0xfffffffffffffdf0, 8) , (stack, 0xfffffffffffffdf0, 8) , (stack, 0xfffffffffffffdf0, 8) , (stack, 0xfffffffffffffdf0, 8)]
[(stack, 0xfffffffffffffdf8, 8) INDIRECT (stack, 0xfffffffffffffdf8, 8) , (const, 0x158, 4), (stack, 0xfffffffffffffdf8, 8) INDIRECT (stack, 0xfffffffffffffdf8, 8) , (const, 0x157, 4), (stack, 0xfffffffffffffdf8, 8) MULTIEQUAL (stack, 0xfffffffffffffdf8, 8) , (stack, 0xfffffffffffffdf8, 8) , (stack, 0xfffffffffffffdf8, 8) , (stack, 0xfffffffffffffdf8, 8)]
[(stack, 0xfffffffffffffe00, 8) INDIRECT (stack, 0xfffffffffffffe00, 8) , (const, 0x158, 4), (stack, 0xfffffffffffffe00, 8) INDIRECT (stack, 0xfffffffffffffe00, 8) , (const, 0x157, 4), (stack, 0xfffffffffffffe00, 8) MULTIEQUAL (stack, 0xfffffffffffffe00, 8) , (stack, 0xfffffffffffffe00, 8) , (stack, 0xfffffffffffffe00, 8) , (stack, 0xfffffffffffffe00, 8)]
[(stack, 0xfffffffffffffe08, 8) INDIRECT (stack, 0xfffffffffffffe08, 8) , (const, 0x158, 4), (stack, 0xfffffffffffffe08, 8) INDIRECT (stack, 0xfffffffffffffe08, 8) , (const, 0x157, 4), (stack, 0xfffffffffffffe08, 8) MULTIEQUAL (stack, 0xfffffffffffffe08, 8) , (stack, 0xfffffffffffffe08, 8) , (stack, 0xfffffffffffffe08, 8) , (stack, 0xfffffffffffffe08, 8)]
[(stack, 0xfffffffffffffe10, 8) INDIRECT (stack, 0xfffffffffffffe10, 8) , (const, 0x158, 4), (stack, 0xfffffffffffffe10, 8) INDIRECT (stack, 0xfffffffffffffe10, 8) , (const, 0x157, 4), (stack, 0xfffffffffffffe10, 8) MULTIEQUAL (stack, 0xfffffffffffffe10, 8) , (stack, 0xfffffffffffffe10, 8) , (stack, 0xfffffffffffffe10, 8) , (stack, 0xfffffffffffffe10, 8)]
[(stack, 0xfffffffffffffe18, 8) INDIRECT (stack, 0xfffffffffffffe18, 8) , (const, 0x158, 4), (stack, 0xfffffffffffffe18, 8) INDIRECT (stack, 0xfffffffffffffe18, 8) , (const, 0x157, 4), (stack, 0xfffffffffffffe18, 8) MULTIEQUAL (stack, 0xfffffffffffffe18, 8) , (stack, 0xfffffffffffffe18, 8) , (stack, 0xfffffffffffffe18, 8) , (stack, 0xfffffffffffffe18, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x158, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x157, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CALL (ram, 0x17e250, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x134833, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xfffffffffffffe20, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffe20, 8) INDIRECT (stack, 0xfffffffffffffe20, 8) , (const, 0x158, 4), (stack, 0xfffffffffffffe20, 8) INDIRECT (stack, 0xfffffffffffffe20, 8) , (const, 0x157, 4), (stack, 0xfffffffffffffe20, 8) MULTIEQUAL (stack, 0xfffffffffffffe20, 8) , (stack, 0xfffffffffffffe20, 8) , (stack, 0xfffffffffffffe20, 8) , (stack, 0xfffffffffffffe20, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x134852, 8), (register, 0x20, 8) CAST (unique, 0x10000736, 8), (unique, 0x10000736, 8) INT_ADD (unique, 0x1000072e, 8) , (unique, 0x100000d0, 8), (unique, 0x1000072e, 8) CAST (unique, 0x10000206, 8), (unique, 0x10000206, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffdd0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x197, 4)]
[(ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x197, 4)]
[(ram, 0x4ec860, 8) INDIRECT (ram, 0x4ec860, 8) , (const, 0x197, 4)]
[(ram, 0x4ec868, 8) INDIRECT (ram, 0x4ec868, 8) , (const, 0x197, 4)]
[(ram, 0x4eccf8, 8) INDIRECT (ram, 0x4eccf8, 8) , (const, 0x197, 4)]
[(ram, 0x4ecd00, 8) INDIRECT (ram, 0x4ecd00, 8) , (const, 0x197, 4)]
[(ram, 0x4ecd08, 8) INDIRECT (ram, 0x4ecd08, 8) , (const, 0x197, 4)]
[(ram, 0x4ecd10, 8) INDIRECT (ram, 0x4ecd10, 8) , (const, 0x197, 4)]
[(stack, 0xfffffffffffffde0, 8) INDIRECT (stack, 0xfffffffffffffde0, 8) , (const, 0x197, 4), (stack, 0xfffffffffffffde0, 8) INDIRECT (stack, 0xfffffffffffffde0, 8) , (const, 0x196, 4)]
[(stack, 0xfffffffffffffde8, 8) INDIRECT (stack, 0xfffffffffffffde8, 8) , (const, 0x197, 4), (stack, 0xfffffffffffffde8, 8) INDIRECT (stack, 0xfffffffffffffde8, 8) , (const, 0x196, 4)]
[(stack, 0xfffffffffffffdf0, 8) INDIRECT (stack, 0xfffffffffffffdf0, 8) , (const, 0x197, 4), (stack, 0xfffffffffffffdf0, 8) INDIRECT (stack, 0xfffffffffffffdf0, 8) , (const, 0x196, 4)]
[(stack, 0xfffffffffffffdf8, 8) INDIRECT (stack, 0xfffffffffffffdf8, 8) , (const, 0x197, 4), (stack, 0xfffffffffffffdf8, 8) INDIRECT (stack, 0xfffffffffffffdf8, 8) , (const, 0x196, 4)]
[(stack, 0xfffffffffffffe00, 8) INDIRECT (stack, 0xfffffffffffffe00, 8) , (const, 0x197, 4), (stack, 0xfffffffffffffe00, 8) INDIRECT (stack, 0xfffffffffffffe00, 8) , (const, 0x196, 4)]
[(stack, 0xfffffffffffffe08, 8) INDIRECT (stack, 0xfffffffffffffe08, 8) , (const, 0x197, 4), (stack, 0xfffffffffffffe08, 8) INDIRECT (stack, 0xfffffffffffffe08, 8) , (const, 0x196, 4)]
[(stack, 0xfffffffffffffe10, 8) INDIRECT (stack, 0xfffffffffffffe10, 8) , (const, 0x197, 4), (stack, 0xfffffffffffffe10, 8) INDIRECT (stack, 0xfffffffffffffe10, 8) , (const, 0x196, 4)]
[(stack, 0xfffffffffffffe18, 8) INDIRECT (stack, 0xfffffffffffffe18, 8) , (const, 0x197, 4), (stack, 0xfffffffffffffe18, 8) INDIRECT (stack, 0xfffffffffffffe18, 8) , (const, 0x196, 4)]
[(stack, 0xfffffffffffffe20, 8) INDIRECT (stack, 0xfffffffffffffe20, 8) , (const, 0x197, 4), (stack, 0xfffffffffffffe20, 8) INDIRECT (stack, 0xfffffffffffffe20, 8) , (const, 0x196, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x197, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x196, 4)]
[ ---  CALL (ram, 0x1426d0, 8) , (ram, 0x4ec860, 8) , (ram, 0x4ecd00, 8) , (const, 0x10, 8) , (unique, 0x10000303, 8), (unique, 0x10000303, 8) PTRSUB (const, 0x0, 8) , (const, 0x134430, 8)]
[ ---  BRANCH (ram, 0x1345d6, 1)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x13491a, 8), (register, 0x20, 8) CAST (unique, 0x10000746, 8), (unique, 0x10000746, 8) INT_ADD (unique, 0x1000073e, 8) , (unique, 0x100000d0, 8), (unique, 0x1000073e, 8) CAST (unique, 0x100001c6, 8), (unique, 0x100001c6, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffdd0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x41a, 4)]
[(ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x41a, 4)]
[(ram, 0x4ec860, 8) INDIRECT (ram, 0x4ec860, 8) , (const, 0x41a, 4)]
[(ram, 0x4ec868, 8) INDIRECT (ram, 0x4ec868, 8) , (const, 0x41a, 4)]
[(ram, 0x4eccf8, 8) INDIRECT (ram, 0x4eccf8, 8) , (const, 0x41a, 4)]
[(ram, 0x4ecd00, 8) INDIRECT (ram, 0x4ecd00, 8) , (const, 0x41a, 4)]
[(ram, 0x4ecd08, 8) INDIRECT (ram, 0x4ecd08, 8) , (const, 0x41a, 4)]
[(ram, 0x4ecd10, 8) INDIRECT (ram, 0x4ecd10, 8) , (const, 0x41a, 4)]
[(stack, 0xfffffffffffffde0, 8) INDIRECT (stack, 0xfffffffffffffde0, 8) , (const, 0x41a, 4), (stack, 0xfffffffffffffde0, 8) INDIRECT (stack, 0xfffffffffffffde0, 8) , (const, 0x419, 4)]
[(stack, 0xfffffffffffffde8, 8) INDIRECT (stack, 0xfffffffffffffde8, 8) , (const, 0x41a, 4), (stack, 0xfffffffffffffde8, 8) INDIRECT (stack, 0xfffffffffffffde8, 8) , (const, 0x419, 4)]
[(stack, 0xfffffffffffffdf0, 8) INDIRECT (stack, 0xfffffffffffffdf0, 8) , (const, 0x41a, 4), (stack, 0xfffffffffffffdf0, 8) INDIRECT (stack, 0xfffffffffffffdf0, 8) , (const, 0x419, 4)]
[(stack, 0xfffffffffffffdf8, 8) INDIRECT (stack, 0xfffffffffffffdf8, 8) , (const, 0x41a, 4), (stack, 0xfffffffffffffdf8, 8) INDIRECT (stack, 0xfffffffffffffdf8, 8) , (const, 0x419, 4)]
[(stack, 0xfffffffffffffe00, 8) INDIRECT (stack, 0xfffffffffffffe00, 8) , (const, 0x41a, 4), (stack, 0xfffffffffffffe00, 8) INDIRECT (stack, 0xfffffffffffffe00, 8) , (const, 0x419, 4)]
[(stack, 0xfffffffffffffe08, 8) INDIRECT (stack, 0xfffffffffffffe08, 8) , (const, 0x41a, 4), (stack, 0xfffffffffffffe08, 8) INDIRECT (stack, 0xfffffffffffffe08, 8) , (const, 0x419, 4)]
[(stack, 0xfffffffffffffe10, 8) INDIRECT (stack, 0xfffffffffffffe10, 8) , (const, 0x41a, 4), (stack, 0xfffffffffffffe10, 8) INDIRECT (stack, 0xfffffffffffffe10, 8) , (const, 0x419, 4)]
[(stack, 0xfffffffffffffe18, 8) INDIRECT (stack, 0xfffffffffffffe18, 8) , (const, 0x41a, 4), (stack, 0xfffffffffffffe18, 8) INDIRECT (stack, 0xfffffffffffffe18, 8) , (const, 0x419, 4)]
[(stack, 0xfffffffffffffe20, 8) INDIRECT (stack, 0xfffffffffffffe20, 8) , (const, 0x41a, 4), (stack, 0xfffffffffffffe20, 8) INDIRECT (stack, 0xfffffffffffffe20, 8) , (const, 0x419, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x41a, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x419, 4)]
[ ---  CALL (ram, 0x17e250, 8) , (register, 0x0, 8)]
[ ---  BRANCH (ram, 0x1345d6, 1)]
[(stack, 0xfffffffffffffe18, 8) MULTIEQUAL (stack, 0xfffffffffffffe18, 8) , (stack, 0xfffffffffffffe18, 8) , (stack, 0xfffffffffffffe18, 8) , (stack, 0xfffffffffffffe18, 8)]
[(stack, 0xfffffffffffffe10, 8) MULTIEQUAL (stack, 0xfffffffffffffe10, 8) , (stack, 0xfffffffffffffe10, 8) , (stack, 0xfffffffffffffe10, 8) , (stack, 0xfffffffffffffe10, 8)]
[(stack, 0xfffffffffffffe08, 8) MULTIEQUAL (stack, 0xfffffffffffffe08, 8) , (stack, 0xfffffffffffffe08, 8) , (stack, 0xfffffffffffffe08, 8) , (stack, 0xfffffffffffffe08, 8)]
[(stack, 0xfffffffffffffe00, 8) MULTIEQUAL (stack, 0xfffffffffffffe00, 8) , (stack, 0xfffffffffffffe00, 8) , (stack, 0xfffffffffffffe00, 8) , (stack, 0xfffffffffffffe00, 8)]
[(stack, 0xfffffffffffffdf8, 8) MULTIEQUAL (stack, 0xfffffffffffffdf8, 8) , (stack, 0xfffffffffffffdf8, 8) , (stack, 0xfffffffffffffdf8, 8) , (stack, 0xfffffffffffffdf8, 8)]
[(stack, 0xfffffffffffffdf0, 8) MULTIEQUAL (stack, 0xfffffffffffffdf0, 8) , (stack, 0xfffffffffffffdf0, 8) , (stack, 0xfffffffffffffdf0, 8) , (stack, 0xfffffffffffffdf0, 8)]
[(stack, 0xfffffffffffffde8, 8) MULTIEQUAL (stack, 0xfffffffffffffde8, 8) , (stack, 0xfffffffffffffde8, 8) , (stack, 0xfffffffffffffde8, 8) , (stack, 0xfffffffffffffde8, 8)]
[(stack, 0xfffffffffffffde0, 8) MULTIEQUAL (stack, 0xfffffffffffffde0, 8) , (stack, 0xfffffffffffffde0, 8) , (stack, 0xfffffffffffffde0, 8) , (stack, 0xfffffffffffffde0, 8)]
[(ram, 0x4ecd10, 8) MULTIEQUAL (ram, 0x4ecd10, 8) , (ram, 0x4ecd10, 8) , (ram, 0x4ecd10, 8) , (ram, 0x4ecd10, 8)]
[(ram, 0x4ecd08, 8) MULTIEQUAL (ram, 0x4ecd08, 8) , (ram, 0x4ecd08, 8) , (ram, 0x4ecd08, 8) , (ram, 0x4ecd08, 8)]
[(ram, 0x4ecd00, 8) MULTIEQUAL (ram, 0x4ecd00, 8) , (ram, 0x4ecd00, 8) , (ram, 0x4ecd00, 8) , (ram, 0x4ecd00, 8)]
[(ram, 0x4eccf8, 8) MULTIEQUAL (ram, 0x4eccf8, 8) , (ram, 0x4eccf8, 8) , (ram, 0x4eccf8, 8) , (ram, 0x4eccf8, 8)]
[(ram, 0x4ec868, 8) MULTIEQUAL (ram, 0x4ec868, 8) , (ram, 0x4ec868, 8) , (ram, 0x4ec868, 8) , (ram, 0x4ec868, 8)]
[(ram, 0x4ec860, 8) MULTIEQUAL (ram, 0x4ec860, 8) , (ram, 0x4ec860, 8) , (ram, 0x4ec860, 8) , (ram, 0x4ec860, 8)]
[(ram, 0x4eae00, 8) MULTIEQUAL (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8)]
[(register, 0x0, 8) COPY (stack, 0xfffffffffffffe20, 8), (stack, 0xfffffffffffffe20, 8) MULTIEQUAL (stack, 0xfffffffffffffe20, 8) , (stack, 0xfffffffffffffe20, 8) , (stack, 0xfffffffffffffe20, 8) , (stack, 0xfffffffffffffe20, 8)]
[ ---  CBRANCH (ram, 0x13491f, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffffc0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x1000074e, 8), (unique, 0x1000074e, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(ram, 0x4eae00, 8) COPY (ram, 0x4eae00, 8)]
[(ram, 0x4ec860, 8) COPY (ram, 0x4ec860, 8)]
[(ram, 0x4ec868, 8) COPY (ram, 0x4ec868, 8)]
[(ram, 0x4eccf8, 8) COPY (ram, 0x4eccf8, 8)]
[(ram, 0x4ecd00, 8) COPY (ram, 0x4ecd00, 8)]
[(ram, 0x4ecd08, 8) COPY (ram, 0x4ecd08, 8)]
[(ram, 0x4ecd10, 8) COPY (ram, 0x4ecd10, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (unique, 0x1000030b, 8), (unique, 0x1000030b, 8) PTRSUB (const, 0x0, 8) , (const, 0x134924, 8), (register, 0x20, 8) CAST (unique, 0x1000075e, 8), (unique, 0x1000075e, 8) INT_ADD (unique, 0x10000756, 8) , (unique, 0x100000d0, 8), (unique, 0x10000756, 8) CAST (unique, 0x10000216, 8), (unique, 0x10000216, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffdd0, 8)]
[(stack, 0xfffffffffffffde0, 8) INDIRECT (stack, 0xfffffffffffffde0, 8) , (const, 0x18e, 4), (stack, 0xfffffffffffffde0, 8) INDIRECT (stack, 0xfffffffffffffde0, 8) , (const, 0x18d, 4)]
[(stack, 0xfffffffffffffde8, 8) INDIRECT (stack, 0xfffffffffffffde8, 8) , (const, 0x18e, 4), (stack, 0xfffffffffffffde8, 8) INDIRECT (stack, 0xfffffffffffffde8, 8) , (const, 0x18d, 4)]
[(stack, 0xfffffffffffffdf0, 8) INDIRECT (stack, 0xfffffffffffffdf0, 8) , (const, 0x18e, 4), (stack, 0xfffffffffffffdf0, 8) INDIRECT (stack, 0xfffffffffffffdf0, 8) , (const, 0x18d, 4)]
[(stack, 0xfffffffffffffdf8, 8) INDIRECT (stack, 0xfffffffffffffdf8, 8) , (const, 0x18e, 4), (stack, 0xfffffffffffffdf8, 8) INDIRECT (stack, 0xfffffffffffffdf8, 8) , (const, 0x18d, 4)]
[(stack, 0xfffffffffffffe00, 8) INDIRECT (stack, 0xfffffffffffffe00, 8) , (const, 0x18e, 4), (stack, 0xfffffffffffffe00, 8) INDIRECT (stack, 0xfffffffffffffe00, 8) , (const, 0x18d, 4)]
[(stack, 0xfffffffffffffe08, 8) INDIRECT (stack, 0xfffffffffffffe08, 8) , (const, 0x18e, 4), (stack, 0xfffffffffffffe08, 8) INDIRECT (stack, 0xfffffffffffffe08, 8) , (const, 0x18d, 4)]
[(stack, 0xfffffffffffffe10, 8) INDIRECT (stack, 0xfffffffffffffe10, 8) , (const, 0x18e, 4), (stack, 0xfffffffffffffe10, 8) INDIRECT (stack, 0xfffffffffffffe10, 8) , (const, 0x18d, 4)]
[(stack, 0xfffffffffffffe18, 8) INDIRECT (stack, 0xfffffffffffffe18, 8) , (const, 0x18e, 4), (stack, 0xfffffffffffffe18, 8) INDIRECT (stack, 0xfffffffffffffe18, 8) , (const, 0x18d, 4)]
[(stack, 0xfffffffffffffe20, 8) INDIRECT (stack, 0xfffffffffffffe20, 8) , (const, 0x18e, 4), (stack, 0xfffffffffffffe20, 8) INDIRECT (stack, 0xfffffffffffffe20, 8) , (const, 0x18d, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x18e, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x18d, 4)]
[ ---  CALL (ram, 0x234c80, 8)]
[(ram, 0x4eae00, 8) COPY (ram, 0x4eae00, 8), (ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x18e, 4)]
[(ram, 0x4ec860, 8) COPY (ram, 0x4ec860, 8), (ram, 0x4ec860, 8) INDIRECT (ram, 0x4ec860, 8) , (const, 0x18e, 4)]
[(ram, 0x4ec868, 8) COPY (ram, 0x4ec868, 8), (ram, 0x4ec868, 8) INDIRECT (ram, 0x4ec868, 8) , (const, 0x18e, 4)]
[(ram, 0x4eccf8, 8) COPY (ram, 0x4eccf8, 8), (ram, 0x4eccf8, 8) INDIRECT (ram, 0x4eccf8, 8) , (const, 0x18e, 4)]
[(ram, 0x4ecd00, 8) COPY (ram, 0x4ecd00, 8), (ram, 0x4ecd00, 8) INDIRECT (ram, 0x4ecd00, 8) , (const, 0x18e, 4)]
[(ram, 0x4ecd08, 8) COPY (ram, 0x4ecd08, 8), (ram, 0x4ecd08, 8) INDIRECT (ram, 0x4ecd08, 8) , (const, 0x18e, 4)]
[(ram, 0x4ecd10, 8) COPY (ram, 0x4ecd10, 8), (ram, 0x4ecd10, 8) INDIRECT (ram, 0x4ecd10, 8) , (const, 0x18e, 4)]
[ ---  RETURN (const, 0x1, 4)]
