[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x100001ab, 8), (unique, 0x100001ab, 8) CAST (register, 0x30, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0x30, 8) , (const, 0x8, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x10, 8)]
[(unique, 0x100001a3, 8) COPY (register, 0x38, 8)]
[ ---  CBRANCH (ram, 0x236a50, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x100001b3, 8), (unique, 0x100001b3, 8) CAST (ram, 0x4c2f20, 8)]
[ ---  CBRANCH (ram, 0x236a6c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4c87a0, 4) , (const, 0x0, 4)]
[ ---  CBRANCH (const, 0x4, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4c7fb0, 4) , (const, 0x0, 4)]
[(ram, 0x4c7fb0, 4) COPY (const, 0x1, 4)]
[ ---  CALLOTHER (const, 0x11, 4)]
[ ---  CBRANCH (const, 0x4, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4c7fb0, 4) , (const, 0x0, 4)]
[(ram, 0x4c7fb0, 4) COPY (const, 0x1, 4)]
[ ---  BRANCH (ram, 0x236a8f, 1)]
[(ram, 0x4c2f20, 8) INDIRECT (ram, 0x4c2f20, 8) , (const, 0x12d, 4)]
[(ram, 0x4c7fb0, 4) INDIRECT (ram, 0x4c7fb0, 4) , (const, 0x12d, 4)]
[(ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x12d, 4)]
[(stack, 0xffffffffffffffb8, 4) INDIRECT (stack, 0xffffffffffffffb8, 4) , (const, 0x12d, 4)]
[(stack, 0xffffffffffffffbc, 4) INDIRECT (stack, 0xffffffffffffffbc, 4) , (const, 0x12d, 4)]
[(stack, 0xffffffffffffffc0, 4) INDIRECT (stack, 0xffffffffffffffc0, 4) , (const, 0x12d, 4)]
[(stack, 0xffffffffffffffc8, 8) INDIRECT (unique, 0x100001a3, 8) , (const, 0x12d, 4)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x12d, 4)]
[(stack, 0xffffffffffffffd8, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x12d, 4)]
[(stack, 0xffffffffffffffe0, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x12d, 4)]
[ ---  CALL (ram, 0x2147c0, 8) , (unique, 0x10000122, 8), (unique, 0x10000122, 8) PTRSUB (const, 0x0, 8) , (const, 0x4c7fb0, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffb8, 8)]
[(ram, 0x4c2f20, 8) INDIRECT (ram, 0x4c2f20, 8) , (const, 0x9f, 4), (ram, 0x4c2f20, 8) MULTIEQUAL (ram, 0x4c2f20, 8) , (ram, 0x4c2f20, 8) , (ram, 0x4c2f20, 8)]
[(ram, 0x4c7fb0, 4) INDIRECT (ram, 0x4c7fb0, 4) , (const, 0x9f, 4), (ram, 0x4c7fb0, 4) MULTIEQUAL (ram, 0x4c7fb0, 4) , (ram, 0x4c7fb0, 4) , (ram, 0x4c7fb0, 4)]
[(ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x9f, 4), (ram, 0x4c87a0, 4) MULTIEQUAL (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4)]
[(stack, 0xffffffffffffffb8, 4) INDIRECT (stack, 0xffffffffffffffb8, 4) , (const, 0x9f, 4), (stack, 0xffffffffffffffb8, 4) MULTIEQUAL (stack, 0xffffffffffffffb8, 4) , (stack, 0xffffffffffffffb8, 4) , (stack, 0xffffffffffffffb8, 4)]
[(stack, 0xffffffffffffffbc, 4) INDIRECT (stack, 0xffffffffffffffbc, 4) , (const, 0x9f, 4), (stack, 0xffffffffffffffbc, 4) MULTIEQUAL (stack, 0xffffffffffffffbc, 4) , (stack, 0xffffffffffffffbc, 4) , (stack, 0xffffffffffffffbc, 4)]
[(stack, 0xffffffffffffffc0, 4) INDIRECT (stack, 0xffffffffffffffc0, 4) , (const, 0x9f, 4), (stack, 0xffffffffffffffc0, 4) MULTIEQUAL (stack, 0xffffffffffffffc0, 4) , (stack, 0xffffffffffffffc0, 4) , (stack, 0xffffffffffffffc0, 4)]
[(stack, 0xffffffffffffffc8, 8) INDIRECT (stack, 0xffffffffffffffc8, 8) , (const, 0x9f, 4), (stack, 0xffffffffffffffc8, 8) MULTIEQUAL (unique, 0x100001a3, 8) , (stack, 0xffffffffffffffc8, 8) , (unique, 0x100001a3, 8)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0x9f, 4), (stack, 0xffffffffffffffd0, 8) MULTIEQUAL (unique, 0xbd80, 8) , (stack, 0xffffffffffffffd0, 8) , (unique, 0xbd80, 8)]
[(stack, 0xffffffffffffffd8, 8) INDIRECT (stack, 0xffffffffffffffd8, 8) , (const, 0x9f, 4), (stack, 0xffffffffffffffd8, 8) MULTIEQUAL (unique, 0xbd80, 8) , (stack, 0xffffffffffffffd8, 8) , (unique, 0xbd80, 8)]
[(stack, 0xffffffffffffffe0, 8) INDIRECT (stack, 0xffffffffffffffe0, 8) , (const, 0x9f, 4), (stack, 0xffffffffffffffe0, 8) MULTIEQUAL (unique, 0xbd80, 8) , (stack, 0xffffffffffffffe0, 8) , (unique, 0xbd80, 8)]
[(register, 0x10, 4) COPY (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x236ad4, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x236290, 8) , (const, 0x2, 8)]
[(ram, 0x4c2f20, 8) INDIRECT (ram, 0x4c2f20, 8) , (const, 0xc8, 4)]
[(ram, 0x4c7fb0, 4) INDIRECT (ram, 0x4c7fb0, 4) , (const, 0xc8, 4)]
[(ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0xc8, 4)]
[(stack, 0xffffffffffffffb8, 4) INDIRECT (stack, 0xffffffffffffffb8, 4) , (const, 0xc8, 4)]
[(stack, 0xffffffffffffffbc, 4) INDIRECT (stack, 0xffffffffffffffbc, 4) , (const, 0xc8, 4)]
[(stack, 0xffffffffffffffc0, 4) INDIRECT (stack, 0xffffffffffffffc0, 4) , (const, 0xc8, 4)]
[(stack, 0xffffffffffffffc8, 8) INDIRECT (stack, 0xffffffffffffffc8, 8) , (const, 0xc8, 4)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0xc8, 4)]
[(stack, 0xffffffffffffffd8, 8) INDIRECT (stack, 0xffffffffffffffd8, 8) , (const, 0xc8, 4)]
[(stack, 0xffffffffffffffe0, 8) INDIRECT (stack, 0xffffffffffffffe0, 8) , (const, 0xc8, 4)]
[(unique, 0x100000c2, 4) INT_ZEXT (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALLIND (unique, 0xbd80, 8) , (register, 0x0, 8) , (const, 0x7, 8) , (unique, 0x1000010a, 8) , (unique, 0x3800, 8) , (unique, 0x10000112, 8) , (register, 0x20, 8) , (const, 0x1e, 8) , (const, 0x0, 8), (unique, 0x10000112, 8) PTRSUB (const, 0x0, 8) , (const, 0x22fc60, 8), (unique, 0x1000010a, 8) PTRSUB (const, 0x0, 8) , (const, 0x22fc00, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0xbd80, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffc8, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100001bb, 8), (unique, 0x100001bb, 8) INT_ADD (register, 0x0, 8) , (const, 0x8, 8)]
[(register, 0x10, 4) MULTIEQUAL (register, 0x10, 4) , (unique, 0x100000c2, 4)]
[(stack, 0xffffffffffffffe0, 8) MULTIEQUAL (stack, 0xffffffffffffffe0, 8) , (stack, 0xffffffffffffffe0, 8)]
[(stack, 0xffffffffffffffd8, 8) MULTIEQUAL (stack, 0xffffffffffffffd8, 8) , (stack, 0xffffffffffffffd8, 8)]
[(stack, 0xffffffffffffffd0, 8) MULTIEQUAL (stack, 0xffffffffffffffd0, 8) , (stack, 0xffffffffffffffd0, 8)]
[(stack, 0xffffffffffffffc8, 8) MULTIEQUAL (stack, 0xffffffffffffffc8, 8) , (stack, 0xffffffffffffffc8, 8)]
[(stack, 0xffffffffffffffc0, 4) MULTIEQUAL (stack, 0xffffffffffffffc0, 4) , (stack, 0xffffffffffffffc0, 4)]
[(stack, 0xffffffffffffffbc, 4) MULTIEQUAL (stack, 0xffffffffffffffbc, 4) , (stack, 0xffffffffffffffbc, 4)]
[(stack, 0xffffffffffffffb8, 4) MULTIEQUAL (stack, 0xffffffffffffffb8, 4) , (stack, 0xffffffffffffffb8, 4)]
[(ram, 0x4c7fb0, 4) MULTIEQUAL (ram, 0x4c7fb0, 4) , (ram, 0x4c7fb0, 4)]
[(ram, 0x4c2f20, 8) MULTIEQUAL (ram, 0x4c2f20, 8) , (ram, 0x4c2f20, 8)]
[ ---  CBRANCH (ram, 0x236ae8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4c87a0, 4) , (const, 0x0, 4), (ram, 0x4c87a0, 4) MULTIEQUAL (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4)]
[ ---  CALLOTHER (const, 0x11, 4)]
[(unique, 0x10000177, 4) COPY (unique, 0x10000152, 4), (unique, 0x10000152, 4) INT_ADD (ram, 0x4c7fb0, 4) , (const, 0xffffffff, 4)]
[ ---  CBRANCH (ram, 0x236b0a, 1) , (unique, 0x10000156, 1), (unique, 0x10000156, 1) INT_NOTEQUAL (unique, 0x10000152, 4) , (const, 0x0, 4), (unique, 0x10000152, 4) INT_ADD (ram, 0x4c7fb0, 4) , (const, 0xffffffff, 4)]
[(ram, 0x4c2f20, 8) INDIRECT (ram, 0x4c2f20, 8) , (const, 0x10e, 4)]
[(ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x10e, 4)]
[(stack, 0xffffffffffffffb8, 4) INDIRECT (stack, 0xffffffffffffffb8, 4) , (const, 0x10e, 4)]
[(stack, 0xffffffffffffffbc, 4) INDIRECT (stack, 0xffffffffffffffbc, 4) , (const, 0x10e, 4)]
[(stack, 0xffffffffffffffc0, 4) INDIRECT (stack, 0xffffffffffffffc0, 4) , (const, 0x10e, 4)]
[(stack, 0xffffffffffffffc8, 8) INDIRECT (stack, 0xffffffffffffffc8, 8) , (const, 0x10e, 4)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0x10e, 4)]
[(stack, 0xffffffffffffffd8, 8) INDIRECT (stack, 0xffffffffffffffd8, 8) , (const, 0x10e, 4)]
[(stack, 0xffffffffffffffe0, 8) INDIRECT (stack, 0xffffffffffffffe0, 8) , (const, 0x10e, 4)]
[ ---  CALL (ram, 0x2147f0, 8) , (unique, 0x1000011a, 8), (unique, 0x1000011a, 8) PTRSUB (const, 0x0, 8) , (const, 0x4c7fb0, 8)]
[(unique, 0x10000173, 4) COPY (ram, 0x4c7fb0, 4), (ram, 0x4c7fb0, 4) INDIRECT (ram, 0x4c7fb0, 4) , (const, 0x10e, 4), (ram, 0x4c7fb0, 4) INT_ADD (ram, 0x4c7fb0, 4) , (const, 0xffffffff, 4)]
[(unique, 0x1000019f, 4) COPY (register, 0x10, 4), (register, 0x10, 4) INDIRECT (const, 0x0, 4) , (const, 0x10e, 4)]
[(stack, 0xffffffffffffffc0, 4) MULTIEQUAL (stack, 0xffffffffffffffc0, 4) , (stack, 0xffffffffffffffc0, 4)]
[(stack, 0xffffffffffffffbc, 4) MULTIEQUAL (stack, 0xffffffffffffffbc, 4) , (stack, 0xffffffffffffffbc, 4)]
[(stack, 0xffffffffffffffb8, 4) MULTIEQUAL (stack, 0xffffffffffffffb8, 4) , (stack, 0xffffffffffffffb8, 4)]
[(ram, 0x4c87a0, 4) MULTIEQUAL (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4)]
[(ram, 0x4c2f20, 8) MULTIEQUAL (ram, 0x4c2f20, 8) , (ram, 0x4c2f20, 8)]
[(ram, 0x4c7fb0, 4) COPY (unique, 0x1000017b, 4), (unique, 0x1000017b, 4) MULTIEQUAL (unique, 0x10000173, 4) , (unique, 0x10000177, 4)]
[ ---  CBRANCH (ram, 0x236a32, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x10, 4) , (const, 0x0, 4), (register, 0x10, 4) MULTIEQUAL (unique, 0x1000019f, 4) , (register, 0x10, 4)]
[(ram, 0x4c2f20, 8) COPY (ram, 0x4c2f20, 8)]
[(ram, 0x4c7fb0, 4) COPY (ram, 0x4c7fb0, 4)]
[(ram, 0x4c87a0, 4) COPY (ram, 0x4c87a0, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 4), (register, 0x0, 4) COPY (const, 0xffffffff, 4)]
[(ram, 0x4c2f20, 8) INDIRECT (ram, 0x4c2f20, 8) , (const, 0x39, 4), (ram, 0x4c2f20, 8) INDIRECT (ram, 0x4c2f20, 8) , (const, 0x32, 4)]
[(ram, 0x4c7fb0, 4) INDIRECT (ram, 0x4c7fb0, 4) , (const, 0x39, 4), (ram, 0x4c7fb0, 4) INDIRECT (ram, 0x4c7fb0, 4) , (const, 0x32, 4)]
[(ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x39, 4), (ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x32, 4)]
[(stack, 0xffffffffffffffc8, 8) INDIRECT (stack, 0xffffffffffffffc8, 8) , (const, 0x39, 4), (stack, 0xffffffffffffffc8, 8) INDIRECT (unique, 0x100001a3, 8) , (const, 0x32, 4)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0x39, 4), (stack, 0xffffffffffffffd0, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x32, 4)]
[(stack, 0xffffffffffffffd8, 8) INDIRECT (stack, 0xffffffffffffffd8, 8) , (const, 0x39, 4), (stack, 0xffffffffffffffd8, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x32, 4)]
[(stack, 0xffffffffffffffe0, 8) INDIRECT (stack, 0xffffffffffffffe0, 8) , (const, 0x39, 4), (stack, 0xffffffffffffffe0, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x32, 4)]
[(stack, 0xffffffffffffffb8, 4) SUBPIECE (unique, 0xbd80, 8) , (const, 0x0, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x100001c3, 8), (unique, 0x100001c3, 8) CALLIND (unique, 0xbd80, 8) , (register, 0x0, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffc8, 8), (register, 0x0, 4) CALL (ram, 0x1cc7d0, 8)]
[(stack, 0xffffffffffffffbc, 4) SUBPIECE (unique, 0x1000015b, 8) , (const, 0x0, 4), (unique, 0x1000015b, 8) INT_RIGHT (unique, 0x100001cb, 8) , (const, 0x20, 4), (unique, 0x100001cb, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x100001c3, 8), (unique, 0x100001c3, 8) CALLIND (unique, 0xbd80, 8) , (register, 0x0, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffc8, 8), (register, 0x0, 4) CALL (ram, 0x1cc7d0, 8)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100001d3, 8), (unique, 0x100001d3, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x8, 8), (register, 0x0, 8) CAST (unique, 0x100001c3, 8), (unique, 0x100001c3, 8) CALLIND (unique, 0xbd80, 8) , (register, 0x0, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffc8, 8), (register, 0x0, 4) CALL (ram, 0x1cc7d0, 8)]
[(stack, 0xffffffffffffffc0, 4) MULTIEQUAL (unique, 0xbc80, 4) , (stack, 0xffffffffffffffc0, 4)]
[(stack, 0xffffffffffffffbc, 4) MULTIEQUAL (stack, 0xffffffffffffffbc, 4) , (stack, 0xffffffffffffffbc, 4)]
[(ram, 0x4c87a0, 4) MULTIEQUAL (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4)]
[(ram, 0x4c7fb0, 4) MULTIEQUAL (ram, 0x4c7fb0, 4) , (ram, 0x4c7fb0, 4)]
[(ram, 0x4c2f20, 8) MULTIEQUAL (ram, 0x4c2f20, 8) , (ram, 0x4c2f20, 8)]
[ ---  CBRANCH (ram, 0x236b12, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffffb8, 4) , (const, 0x0, 4), (stack, 0xffffffffffffffb8, 4) MULTIEQUAL (stack, 0xffffffffffffffb8, 4) , (stack, 0xffffffffffffffb8, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x10, 8) , (unique, 0x100000f6, 8), (unique, 0x100000f6, 8) INT_ADD (unique, 0x1000016b, 8) , (stack, 0xffffffffffffffbc, 4), (unique, 0x1000016b, 8) INT_LEFT (unique, 0x10000163, 8) , (const, 0x20, 8), (unique, 0x10000163, 8) INT_SEXT (unique, 0x100001db, 4), (unique, 0x100001db, 4) CAST (stack, 0xffffffffffffffc0, 4)]
[(ram, 0x4c2f20, 8) COPY (ram, 0x4c2f20, 8), (ram, 0x4c2f20, 8) INDIRECT (ram, 0x4c2f20, 8) , (const, 0x57, 4)]
[(ram, 0x4c7fb0, 4) COPY (ram, 0x4c7fb0, 4), (ram, 0x4c7fb0, 4) INDIRECT (ram, 0x4c7fb0, 4) , (const, 0x57, 4)]
[(ram, 0x4c87a0, 4) COPY (ram, 0x4c87a0, 4), (ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x57, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 4), (register, 0x0, 4) COPY (const, 0x0, 4)]
[(ram, 0x4c2f20, 8) COPY (ram, 0x4c2f20, 8)]
[(ram, 0x4c7fb0, 4) COPY (ram, 0x4c7fb0, 4)]
[(ram, 0x4c87a0, 4) COPY (ram, 0x4c87a0, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 4), (register, 0x0, 4) COPY (const, 0xffffffff, 4)]
