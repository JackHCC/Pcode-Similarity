[(register, 0x0, 8) INT_AND (stack, 0xffffffffffffff90, 8) , (const, 0xffffffffffff, 8), (stack, 0xffffffffffffff90, 8) INT_ADD (unique, 0x1000066b, 8) , (register, 0x1208, 4), (unique, 0x1000066b, 8) INT_LEFT (unique, 0x10000663, 8) , (const, 0x20, 8), (unique, 0x10000663, 8) INT_SEXT (unique, 0x1000082b, 4), (unique, 0x1000082b, 4) CAST (register, 0x120c, 4)]
[(register, 0x30, 8) INT_ZEXT (unique, 0x100005a1, 4), (unique, 0x100005a1, 4) INT_RIGHT (register, 0x120c, 4) , (const, 0x1f, 4)]
[(register, 0x80, 2) INT_AND (register, 0x80, 2) , (const, 0x7fff, 2), (register, 0x80, 2) SUBPIECE (unique, 0x10000673, 4) , (const, 0x0, 4), (unique, 0x10000673, 4) INT_RIGHT (register, 0x120c, 4) , (const, 0x10, 4)]
[ ---  CBRANCH (ram, 0x297800, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x10000644, 4) , (const, 0x0, 4), (unique, 0x10000644, 4) INT_AND (register, 0x120c, 4) , (const, 0x7fff0000, 4)]
[ ---  CBRANCH (ram, 0x297948, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x90, 8) , (const, 0x0, 8), (register, 0x90, 8) INT_OR (register, 0x0, 8) , (register, 0x1200, 8)]
[(register, 0x98, 8) COPY (const, 0x0, 8)]
[(register, 0xa0, 8) COPY (const, 0x4, 8)]
[(register, 0x80, 8) COPY (const, 0x0, 8)]
[(register, 0xb0, 8) COPY (const, 0x1, 8)]
[(register, 0x38, 4) COPY (const, 0x0, 4)]
[ ---  BRANCH (ram, 0x297698, 1)]
[ ---  CBRANCH (ram, 0x297cf0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8)]
[(unique, 0x1b380, 8) COPY (const, 0x3f, 8)]
[ ---  CBRANCH (const, 0x6, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x1200, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (const, 0x3, 1) , (unique, 0x1b580, 1), (unique, 0x1b580, 1) INT_EQUAL (unique, 0x1b500, 8) , (const, 0x0, 8), (unique, 0x1b500, 8) INT_RIGHT (register, 0x1200, 8) , (unique, 0x1b380, 8), (unique, 0x1b380, 8) MULTIEQUAL (unique, 0x1b380, 8) , (unique, 0x1b380, 8)]
[(unique, 0x1b380, 8) INT_ADD (unique, 0x1b380, 8) , (const, 0xffffffffffffffff, 8)]
[ ---  BRANCH (const, 0xfffffffc, 1)]
[(register, 0x10, 8) INT_ADD (register, 0x10, 8) , (const, 0x40, 8), (register, 0x10, 8) INT_SEXT (unique, 0x1000082f, 4), (unique, 0x1000082f, 4) CAST (register, 0x10, 4), (register, 0x10, 4) INT_XOR (unique, 0x100002a3, 4) , (const, 0x3f, 4), (unique, 0x100002a3, 4) SUBPIECE (unique, 0x1b380, 8) , (const, 0x0, 4), (unique, 0x1b380, 8) MULTIEQUAL (unique, 0x1b380, 8) , (unique, 0x1b380, 8)]
[ ---  BRANCH (ram, 0x297820, 1)]
[(unique, 0x1b380, 8) COPY (const, 0x3f, 8)]
[ ---  CBRANCH (const, 0x6, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (const, 0x3, 1) , (unique, 0x1b580, 1), (unique, 0x1b580, 1) INT_EQUAL (unique, 0x1b500, 8) , (const, 0x0, 8), (unique, 0x1b500, 8) INT_RIGHT (register, 0x0, 8) , (unique, 0x1b380, 8), (unique, 0x1b380, 8) MULTIEQUAL (unique, 0x1b380, 8) , (unique, 0x1b380, 8)]
[(unique, 0x1b380, 8) INT_ADD (unique, 0x1b380, 8) , (const, 0xffffffffffffffff, 8)]
[ ---  BRANCH (const, 0xfffffffc, 1)]
[(register, 0x10, 8) INT_SEXT (unique, 0x10000833, 4), (unique, 0x10000833, 4) CAST (register, 0x10, 4), (register, 0x10, 4) INT_XOR (unique, 0x100000ad, 4) , (const, 0x3f, 4), (unique, 0x100000ad, 4) SUBPIECE (unique, 0x1b380, 8) , (const, 0x0, 4), (unique, 0x1b380, 8) MULTIEQUAL (unique, 0x1b380, 8) , (unique, 0x1b380, 8)]
[(unique, 0x1000041d, 1) SUBPIECE (unique, 0x3100, 8) , (const, 0x0, 4), (unique, 0x3100, 8) INT_ADD (register, 0x10, 8) , (const, 0xfffffffffffffff1, 8), (register, 0x10, 8) MULTIEQUAL (register, 0x10, 8) , (register, 0x10, 8)]
[ ---  CBRANCH (ram, 0x297cd8, 1) , (unique, 0xd080, 1), (unique, 0xd080, 1) INT_SLESS (unique, 0x3100, 8) , (const, 0x3d, 8), (unique, 0x3100, 8) INT_ADD (register, 0x10, 8) , (const, 0xfffffffffffffff1, 8), (register, 0x10, 8) MULTIEQUAL (register, 0x10, 8) , (register, 0x10, 8)]
[(register, 0x90, 8) COPY (const, 0x0, 8)]
[(register, 0x88, 8) INT_LEFT (register, 0x1200, 8) , (unique, 0x53700, 1), (unique, 0x53700, 1) INT_AND (register, 0x8, 1) , (const, 0x3f, 1), (register, 0x8, 1) INT_SUB (unique, 0x1000041d, 1) , (const, 0x3d, 1)]
[ ---  BRANCH (ram, 0x297851, 1)]
[(register, 0x88, 8) INT_LEFT (register, 0x1200, 8) , (unique, 0x53700, 1), (unique, 0x53700, 1) INT_AND (register, 0x8, 1) , (const, 0x3f, 1), (register, 0x8, 1) INT_ADD (unique, 0x1000041d, 1) , (const, 0x3, 1)]
[(register, 0x98, 8) INT_OR (register, 0x98, 8) , (register, 0x0, 8), (register, 0x98, 8) INT_RIGHT (register, 0x1200, 8) , (unique, 0x57680, 1), (unique, 0x57680, 1) INT_AND (register, 0x8, 1) , (const, 0x3f, 1), (register, 0x8, 1) INT_SUB (const, 0x3d, 1) , (unique, 0x1000041d, 1), (register, 0x0, 8) INT_LEFT (register, 0x0, 8) , (unique, 0x53700, 1), (unique, 0x53700, 1) INT_AND (register, 0x8, 1) , (const, 0x3f, 1), (register, 0x8, 1) INT_ADD (unique, 0x1000041d, 1) , (const, 0x3, 1)]
[(register, 0x98, 8) MULTIEQUAL (register, 0x98, 8) , (register, 0x88, 8)]
[(register, 0x90, 8) MULTIEQUAL (register, 0x88, 8) , (register, 0x90, 8)]
[(register, 0xa0, 8) COPY (const, 0x0, 8)]
[(register, 0xb0, 8) COPY (const, 0x0, 8)]
[(register, 0x80, 8) INT_SUB (const, 0xffffffffffffc011, 8) , (register, 0x10, 8)]
[(register, 0x38, 4) COPY (const, 0x2, 4)]
[ ---  BRANCH (ram, 0x297698, 1)]
[ ---  CBRANCH (ram, 0x297738, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x80, 2) , (const, 0x7fff, 2)]
[ ---  CBRANCH (ram, 0x297968, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x90, 8) , (const, 0x0, 8), (register, 0x90, 8) INT_OR (register, 0x0, 8) , (register, 0x1200, 8)]
[(register, 0xa0, 8) COPY (const, 0xc, 8)]
[(register, 0x80, 8) COPY (const, 0x7fff, 8)]
[(register, 0xb0, 8) COPY (const, 0x3, 8)]
[(register, 0x38, 4) INT_XOR (unique, 0x1000015d, 4) , (const, 0x1, 4), (unique, 0x1000015d, 4) SUBPIECE (unique, 0x10000693, 8) , (const, 0x0, 4), (unique, 0x10000693, 8) INT_RIGHT (register, 0x0, 8) , (const, 0x2f, 4)]
[(unique, 0x100007ab, 8) COPY (register, 0x1200, 8)]
[ ---  BRANCH (ram, 0x297698, 1)]
[(register, 0x98, 8) COPY (const, 0x0, 8)]
[(register, 0xa0, 8) COPY (const, 0x8, 8)]
[(register, 0x80, 8) COPY (const, 0x7fff, 8)]
[(register, 0xb0, 8) COPY (const, 0x2, 8)]
[(register, 0x38, 4) COPY (const, 0x0, 4)]
[(unique, 0x100007a3, 8) COPY (register, 0x90, 8)]
[ ---  BRANCH (ram, 0x297698, 1)]
[(register, 0xa0, 8) COPY (const, 0x0, 8)]
[(register, 0x80, 8) INT_SUB (register, 0x80, 8) , (const, 0x3fff, 8), (register, 0x80, 8) INT_RIGHT (unique, 0x10000568, 8) , (const, 0x30, 4), (unique, 0x10000568, 8) INT_LEFT (unique, 0x1000061c, 8) , (const, 0x20, 4), (unique, 0x1000061c, 8) INT_AND (unique, 0x100005c9, 8) , (const, 0x7fff0000, 8), (unique, 0x100005c9, 8) INT_ZEXT (register, 0x120c, 4)]
[(register, 0x98, 8) INT_OR (register, 0x98, 8) , (register, 0x0, 8), (register, 0x0, 8) INT_OR (unique, 0x1000064e, 8) , (const, 0x8000000000000, 8), (unique, 0x1000064e, 8) INT_RIGHT (register, 0x1200, 8) , (const, 0x3d, 4), (register, 0x98, 8) INT_LEFT (register, 0x0, 8) , (const, 0x3, 4)]
[(register, 0xb0, 8) COPY (const, 0x0, 8)]
[(register, 0x38, 4) COPY (const, 0x0, 4)]
[(unique, 0x1000079b, 8) COPY (unique, 0x3680, 8), (unique, 0x3680, 8) INT_MULT (register, 0x1200, 8) , (const, 0x8, 8)]
[(register, 0xb0, 8) MULTIEQUAL (register, 0xb0, 8) , (register, 0xb0, 8) , (register, 0xb0, 8) , (register, 0xb0, 8) , (register, 0xb0, 8)]
[(register, 0xa0, 8) MULTIEQUAL (register, 0xa0, 8) , (register, 0xa0, 8) , (register, 0xa0, 8) , (register, 0xa0, 8) , (register, 0xa0, 8)]
[(register, 0x98, 8) MULTIEQUAL (register, 0x98, 8) , (register, 0x98, 8) , (register, 0x0, 8) , (register, 0x98, 8) , (register, 0x98, 8)]
[(register, 0x90, 8) MULTIEQUAL (unique, 0x1000079b, 8) , (unique, 0x100007a3, 8) , (unique, 0x100007ab, 8) , (register, 0x90, 8) , (register, 0x90, 8)]
[(register, 0x80, 8) MULTIEQUAL (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8)]
[(register, 0x38, 4) MULTIEQUAL (register, 0x38, 4) , (register, 0x38, 4) , (register, 0x38, 4) , (register, 0x38, 4) , (register, 0x38, 4)]
[(register, 0x10, 8) INT_AND (unique, 0x1000054c, 8) , (const, 0xffffffffffff, 8), (unique, 0x1000054c, 8) INT_ADD (unique, 0x1000067f, 8) , (register, 0x1228, 4), (unique, 0x1000067f, 8) INT_LEFT (unique, 0x10000677, 8) , (const, 0x20, 8), (unique, 0x10000677, 8) INT_SEXT (unique, 0x10000837, 4), (unique, 0x10000837, 4) CAST (register, 0x122c, 4)]
[(register, 0x0, 8) INT_ZEXT (unique, 0x100005d9, 4), (unique, 0x100005d9, 4) INT_RIGHT (register, 0x122c, 4) , (const, 0x1f, 4)]
[(register, 0x8, 2) INT_AND (register, 0x8, 2) , (const, 0x7fff, 2), (register, 0x8, 2) SUBPIECE (unique, 0x10000687, 4) , (const, 0x0, 4), (unique, 0x10000687, 4) INT_RIGHT (register, 0x122c, 4) , (const, 0x10, 4)]
[ ---  CBRANCH (ram, 0x2978b0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x10000648, 4) , (const, 0x0, 4), (unique, 0x10000648, 4) INT_AND (register, 0x122c, 4) , (const, 0x7fff0000, 4)]
[ ---  CBRANCH (ram, 0x2979b0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x18, 8) , (const, 0x0, 8), (register, 0x18, 8) INT_OR (register, 0x10, 8) , (register, 0x1220, 8)]
[(register, 0xa0, 8) INT_OR (register, 0xa0, 8) , (const, 0x1, 8)]
[(register, 0x18, 8) COPY (const, 0x0, 8)]
[(register, 0x88, 8) COPY (const, 0x0, 8)]
[(unique, 0x100005fb, 1) COPY (const, 0x1, 1)]
[(register, 0xb8, 8) COPY (const, 0x1, 8)]
[ ---  BRANCH (ram, 0x297711, 1)]
[ ---  CBRANCH (ram, 0x297cc0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x10, 8) , (const, 0x0, 8)]
[(unique, 0x1b380, 8) COPY (const, 0x3f, 8)]
[ ---  CBRANCH (const, 0x6, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x1220, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (const, 0x3, 1) , (unique, 0x1b580, 1), (unique, 0x1b580, 1) INT_EQUAL (unique, 0x1b500, 8) , (const, 0x0, 8), (unique, 0x1b500, 8) INT_RIGHT (register, 0x1220, 8) , (unique, 0x1b380, 8), (unique, 0x1b380, 8) MULTIEQUAL (unique, 0x1b380, 8) , (unique, 0x1b380, 8)]
[(unique, 0x1b380, 8) INT_ADD (unique, 0x1b380, 8) , (const, 0xffffffffffffffff, 8)]
[ ---  BRANCH (const, 0xfffffffc, 1)]
[(register, 0xa8, 8) INT_ADD (register, 0xa8, 8) , (const, 0x40, 8), (register, 0xa8, 8) INT_SEXT (unique, 0x1000083b, 4), (unique, 0x1000083b, 4) CAST (register, 0xa8, 4), (register, 0xa8, 4) INT_XOR (unique, 0x10000283, 4) , (const, 0x3f, 4), (unique, 0x10000283, 4) SUBPIECE (unique, 0x1b380, 8) , (const, 0x0, 4), (unique, 0x1b380, 8) MULTIEQUAL (unique, 0x1b380, 8) , (unique, 0x1b380, 8)]
[ ---  BRANCH (ram, 0x2978cd, 1)]
[(unique, 0x1b380, 8) COPY (const, 0x3f, 8)]
[ ---  CBRANCH (const, 0x6, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x10, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (const, 0x3, 1) , (unique, 0x1b580, 1), (unique, 0x1b580, 1) INT_EQUAL (unique, 0x1b500, 8) , (const, 0x0, 8), (unique, 0x1b500, 8) INT_RIGHT (register, 0x10, 8) , (unique, 0x1b380, 8), (unique, 0x1b380, 8) MULTIEQUAL (unique, 0x1b380, 8) , (unique, 0x1b380, 8)]
[(unique, 0x1b380, 8) INT_ADD (unique, 0x1b380, 8) , (const, 0xffffffffffffffff, 8)]
[ ---  BRANCH (const, 0xfffffffc, 1)]
[(register, 0xa8, 8) INT_SEXT (unique, 0x1000083f, 4), (unique, 0x1000083f, 4) CAST (register, 0xa8, 4), (register, 0xa8, 4) INT_XOR (unique, 0x100000e9, 4) , (const, 0x3f, 4), (unique, 0x100000e9, 4) SUBPIECE (unique, 0x1b380, 8) , (const, 0x0, 4), (unique, 0x1b380, 8) MULTIEQUAL (unique, 0x1b380, 8) , (unique, 0x1b380, 8)]
[(unique, 0x10000421, 1) SUBPIECE (unique, 0x3100, 8) , (const, 0x0, 4), (unique, 0x3100, 8) INT_ADD (register, 0xa8, 8) , (const, 0xfffffffffffffff1, 8), (register, 0xa8, 8) MULTIEQUAL (register, 0xa8, 8) , (register, 0xa8, 8)]
[ ---  CBRANCH (ram, 0x297ca8, 1) , (unique, 0xd080, 1), (unique, 0xd080, 1) INT_SLESS (unique, 0x3100, 8) , (const, 0x3d, 8), (unique, 0x3100, 8) INT_ADD (register, 0xa8, 8) , (const, 0xfffffffffffffff1, 8), (register, 0xa8, 8) MULTIEQUAL (register, 0xa8, 8) , (register, 0xa8, 8)]
[(unique, 0x100005fd, 1) COPY (const, 0x1, 1)]
[(register, 0x88, 8) COPY (const, 0x0, 8)]
[(register, 0x18, 8) INT_LEFT (register, 0x1220, 8) , (unique, 0x53700, 1), (unique, 0x53700, 1) INT_AND (register, 0x8, 1) , (const, 0x3f, 1), (register, 0x8, 1) INT_SUB (unique, 0x10000421, 1) , (const, 0x3d, 1)]
[ ---  BRANCH (ram, 0x297903, 1)]
[(register, 0x18, 8) INT_OR (register, 0x18, 8) , (register, 0x10, 8), (register, 0x18, 8) INT_RIGHT (register, 0x1220, 8) , (unique, 0x57680, 1), (unique, 0x57680, 1) INT_AND (register, 0x8, 1) , (const, 0x3f, 1), (register, 0x8, 1) INT_SUB (const, 0x3d, 1) , (unique, 0x10000421, 1), (register, 0x10, 8) INT_LEFT (register, 0x10, 8) , (unique, 0x53700, 1), (unique, 0x53700, 1) INT_AND (register, 0x8, 1) , (const, 0x3f, 1), (register, 0x8, 1) INT_ADD (unique, 0x10000421, 1) , (const, 0x3, 1)]
[(register, 0x200, 1) INT_LESSEQUAL (register, 0x88, 8) , (register, 0x90, 8), (register, 0x88, 8) INT_LEFT (register, 0x1220, 8) , (unique, 0x53700, 1), (unique, 0x53700, 1) INT_AND (register, 0x8, 1) , (const, 0x3f, 1), (register, 0x8, 1) INT_ADD (unique, 0x10000421, 1) , (const, 0x3, 1)]
[(unique, 0x100005fc, 1) MULTIEQUAL (register, 0x200, 1) , (unique, 0x100005fd, 1)]
[(register, 0x88, 8) MULTIEQUAL (register, 0x88, 8) , (register, 0x88, 8)]
[(register, 0x18, 8) MULTIEQUAL (register, 0x18, 8) , (register, 0x18, 8)]
[(register, 0x38, 4) INT_OR (register, 0x38, 4) , (const, 0x2, 4)]
[(register, 0xb8, 8) COPY (const, 0x0, 8)]
[(register, 0x80, 8) INT_ADD (register, 0x80, 8) , (const, 0xffffffffffffc011, 8), (register, 0x80, 8) INT_SUB (register, 0x80, 8) , (register, 0xa8, 8)]
[ ---  BRANCH (ram, 0x297711, 1)]
[ ---  CBRANCH (ram, 0x297870, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x8, 2) , (const, 0x7fff, 2)]
[(register, 0x80, 8) INT_ADD (register, 0x80, 8) , (const, 0x7fff, 8)]
[ ---  CBRANCH (ram, 0x297990, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x8, 8) , (const, 0x0, 8), (register, 0x8, 8) INT_OR (register, 0x1220, 8) , (register, 0x10, 8)]
[(register, 0xa0, 8) INT_OR (register, 0xa0, 8) , (const, 0x2, 8)]
[(register, 0x18, 8) COPY (const, 0x0, 8)]
[(register, 0x88, 8) COPY (const, 0x0, 8)]
[(unique, 0x100005fe, 1) COPY (const, 0x1, 1)]
[(register, 0xb8, 8) COPY (const, 0x2, 8)]
[ ---  BRANCH (ram, 0x297711, 1)]
[(register, 0x200, 1) INT_LESSEQUAL (register, 0x1220, 8) , (register, 0x90, 8)]
[(register, 0xb8, 8) COPY (const, 0x3, 8)]
[(register, 0xa0, 8) INT_OR (register, 0xa0, 8) , (const, 0x3, 8)]
[(unique, 0x10000733, 8) COPY (register, 0x1220, 8)]
[ ---  CBRANCH (ram, 0x297711, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_EQUAL (unique, 0x1e000, 8) , (const, 0x0, 8), (unique, 0x1e000, 8) INT_RIGHT (register, 0x10, 8) , (const, 0x2f, 4)]
[(register, 0x38, 4) INT_OR (register, 0x38, 4) , (const, 0x1, 4)]
[ ---  BRANCH (ram, 0x297711, 1)]
[(unique, 0x3e80, 8) INT_ADD (unique, 0x3d00, 8) , (register, 0x80, 8), (unique, 0x3d00, 8) INT_SUB (register, 0x8, 8) , (const, 0x3fff, 8), (register, 0x8, 8) INT_ZEXT (register, 0x8, 2)]
[(register, 0x18, 8) INT_OR (register, 0x18, 8) , (register, 0x10, 8), (register, 0x10, 8) INT_OR (unique, 0x10000656, 8) , (const, 0x8000000000000, 8), (unique, 0x10000656, 8) INT_RIGHT (register, 0x1220, 8) , (const, 0x3d, 4), (register, 0x18, 8) INT_LEFT (register, 0x10, 8) , (const, 0x3, 4)]
[(register, 0x200, 1) INT_LESSEQUAL (register, 0x88, 8) , (register, 0x90, 8), (register, 0x88, 8) INT_LEFT (register, 0x1220, 8) , (const, 0x3, 4)]
[(register, 0xb8, 8) COPY (const, 0x0, 8)]
[(unique, 0x1000072b, 8) COPY (register, 0x88, 8), (register, 0x88, 8) INT_LEFT (register, 0x1220, 8) , (const, 0x3, 4)]
[(unique, 0x100005fa, 1) MULTIEQUAL (register, 0x200, 1) , (register, 0x200, 1) , (register, 0x200, 1) , (unique, 0x100005fe, 1) , (unique, 0x100005fc, 1) , (unique, 0x100005fb, 1)]
[(register, 0xb8, 8) MULTIEQUAL (register, 0xb8, 8) , (register, 0xb8, 8) , (register, 0xb8, 8) , (register, 0xb8, 8) , (register, 0xb8, 8) , (register, 0xb8, 8)]
[(register, 0x88, 8) MULTIEQUAL (unique, 0x1000072b, 8) , (unique, 0x10000733, 8) , (unique, 0x10000733, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8)]
[(register, 0x38, 4) MULTIEQUAL (register, 0x38, 4) , (register, 0x38, 4) , (register, 0x38, 4) , (register, 0x38, 4) , (register, 0x38, 4) , (register, 0x38, 4)]
[(register, 0x18, 8) MULTIEQUAL (register, 0x18, 8) , (register, 0x10, 8) , (register, 0x10, 8) , (register, 0x18, 8) , (register, 0x18, 8) , (register, 0x18, 8)]
[(unique, 0x3100, 8) INT_ADD (register, 0x80, 8) , (const, 0x1, 8), (register, 0x80, 8) MULTIEQUAL (unique, 0x3e80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8)]
[(unique, 0x1000077b, 8) COPY (register, 0x90, 8)]
[(unique, 0x100007b3, 8) COPY (register, 0x98, 8)]
[(unique, 0x100007d3, 8) COPY (register, 0xa8, 8), (register, 0xa8, 8) INT_ZEXT (register, 0x30, 1), (register, 0x30, 1) INT_RIGHT (unique, 0x10000843, 1) , (const, 0x7, 4), (unique, 0x10000843, 1) CAST (unique, 0x100004c9, 1), (unique, 0x100004c9, 1) INT_XOR (unique, 0x1000064c, 1) , (unique, 0x1000064d, 1), (unique, 0x1000064d, 1) SUBPIECE (unique, 0x1000068f, 4) , (const, 0x0, 4), (unique, 0x1000068f, 4) INT_RIGHT (register, 0x122c, 4) , (const, 0x18, 4), (unique, 0x1000064c, 1) SUBPIECE (unique, 0x1000068b, 4) , (const, 0x0, 4), (unique, 0x1000068b, 4) INT_RIGHT (register, 0x120c, 4) , (const, 0x18, 4)]
[(unique, 0x100007eb, 8) COPY (register, 0xb0, 8)]
[ ---  BRANCHIND (register, 0xa0, 8), (register, 0xa0, 8) MULTIEQUAL (register, 0xa0, 8) , (register, 0xa0, 8) , (register, 0xa0, 8) , (register, 0xa0, 8) , (register, 0xa0, 8) , (register, 0xa0, 8)]
[(unique, 0x10000763, 8) COPY (register, 0x90, 8)]
[ ---  CBRANCH (ram, 0x297e10, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESSEQUAL (register, 0x98, 8) , (register, 0x18, 8)]
[(unique, 0x1000076b, 8) COPY (register, 0x90, 8)]
[ ---  CBRANCH (ram, 0x297bb8, 1) , (unique, 0x100005f9, 1), (unique, 0x100005f9, 1) BOOL_NEGATE (unique, 0x10000844, 1), (unique, 0x10000844, 1) CAST (register, 0x10, 1), (register, 0x10, 1) INT_AND (register, 0x206, 1) , (unique, 0x100005fa, 1), (register, 0x206, 1) INT_EQUAL (register, 0x98, 8) , (register, 0x18, 8)]
[(unique, 0x10000773, 8) COPY (register, 0x88, 8)]
[(unique, 0x10000783, 8) COPY (register, 0x90, 8)]
[(unique, 0x100007bb, 8) COPY (register, 0x98, 8)]
[(unique, 0x100007db, 8) COPY (register, 0x30, 8)]
[(unique, 0x100007f3, 8) COPY (register, 0xb0, 8)]
[ ---  BRANCH (ram, 0x297769, 1)]
[(register, 0x38, 4) INT_OR (register, 0x38, 4) , (const, 0x1, 4)]
[(unique, 0x1000075b, 8) COPY (register, 0x90, 8), (register, 0x90, 8) COPY (const, 0x0, 8)]
[(unique, 0x1000078b, 8) COPY (register, 0x88, 8)]
[(unique, 0x100007c3, 8) COPY (register, 0x18, 8)]
[(unique, 0x100007e3, 8) COPY (register, 0x0, 8)]
[(unique, 0x100007fb, 8) COPY (register, 0xb8, 8)]
[ ---  BRANCH (ram, 0x297769, 1)]
[(unique, 0x10000793, 8) COPY (register, 0x88, 8)]
[(unique, 0x100007cb, 8) COPY (register, 0x18, 8)]
[(unique, 0x10000803, 8) COPY (register, 0xb8, 8)]
[(register, 0xa8, 8) MULTIEQUAL (unique, 0x100007d3, 8) , (unique, 0x100007db, 8) , (unique, 0x100007e3, 8) , (register, 0xa8, 8)]
[(register, 0x98, 8) MULTIEQUAL (unique, 0x100007b3, 8) , (unique, 0x100007bb, 8) , (unique, 0x100007c3, 8) , (unique, 0x100007cb, 8)]
[(register, 0x90, 8) MULTIEQUAL (unique, 0x1000077b, 8) , (unique, 0x10000783, 8) , (unique, 0x1000078b, 8) , (unique, 0x10000793, 8)]
[ ---  CBRANCH (ram, 0x297920, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xb0, 8) , (const, 0x2, 8), (register, 0xb0, 8) MULTIEQUAL (unique, 0x100007eb, 8) , (unique, 0x100007f3, 8) , (unique, 0x100007fb, 8) , (unique, 0x10000803, 8)]
[ ---  CBRANCH (ram, 0x298034, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xb0, 8) , (const, 0x3, 8)]
[(unique, 0x10000723, 8) COPY (unique, 0x3100, 8)]
[ ---  CBRANCH (ram, 0x297ee0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xb0, 8) , (const, 0x1, 8)]
[(unique, 0x10000753, 8) COPY (register, 0x90, 8), (register, 0x90, 8) COPY (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x297784, 1)]
[(unique, 0x1000074b, 8) COPY (register, 0x90, 8), (register, 0x90, 8) COPY (const, 0x0, 8)]
[(register, 0x98, 8) INT_OR (register, 0x98, 8) , (register, 0x0, 8), (register, 0x98, 8) INT_MULT (register, 0x98, 8) , (const, 0x2000, 8), (register, 0x0, 8) INT_RIGHT (register, 0x88, 8) , (const, 0x33, 4), (register, 0x98, 8) INT_ADD (register, 0x98, 8) , (register, 0x10, 8), (register, 0x98, 8) INT_ZEXT (unique, 0x10000846, 1), (unique, 0x10000846, 1) CAST (unique, 0x100004d7, 1), (unique, 0x100004d7, 1) INT_OR (register, 0x200, 1) , (register, 0x200, 1), (register, 0x88, 8) INT_ADD (register, 0x88, 8) , (register, 0x90, 8), (register, 0x200, 1) INT_CARRY (register, 0x88, 8) , (register, 0x90, 8), (register, 0x90, 8) INT_ZEXT (register, 0x200, 1), (register, 0x88, 8) INT_ADD (register, 0x10, 8) , (register, 0x28, 8), (register, 0x200, 1) INT_CARRY (register, 0x10, 8) , (register, 0x28, 8), (register, 0x200, 1) INT_CARRY (register, 0x0, 8) , (register, 0x90, 8), (register, 0x10, 8) INT_ADD (register, 0x10, 8) , (register, 0x98, 8), (register, 0x98, 8) INT_ZEXT (unique, 0x10000845, 1), (unique, 0x10000845, 1) CAST (unique, 0x100004d6, 1), (unique, 0x100004d6, 1) INT_OR (register, 0x200, 1) , (register, 0x200, 1), (register, 0x28, 8) INT_ADD (register, 0x28, 8) , (register, 0xb0, 8), (register, 0x200, 1) INT_CARRY (register, 0x28, 8) , (register, 0xb0, 8), (register, 0xb0, 8) INT_ZEXT (register, 0x200, 1), (register, 0x28, 8) INT_ADD (register, 0x10, 8) , (register, 0x0, 8), (register, 0x200, 1) INT_CARRY (register, 0x10, 8) , (register, 0x0, 8), (register, 0x90, 8) INT_ADD (register, 0x0, 8) , (register, 0x10, 8), (register, 0x200, 1) INT_CARRY (register, 0x0, 8) , (register, 0x10, 8), (register, 0x0, 8) SUBPIECE (unique, 0x3e200, 16) , (const, 0x0, 4), (register, 0x10, 8) SUBPIECE (unique, 0x100006cb, 16) , (const, 0x0, 4), (unique, 0x100006cb, 16) INT_RIGHT (unique, 0x3e200, 16) , (const, 0x40, 4), (unique, 0x3e200, 16) INT_MULT (unique, 0x3e080, 16) , (unique, 0x3e100, 16), (unique, 0x3e100, 16) INT_ZEXT (register, 0x18, 8), (unique, 0x3e080, 16) INT_ZEXT (register, 0x98, 8), (register, 0x0, 8) SUBPIECE (unique, 0x3e200, 16) , (const, 0x0, 4), (register, 0x10, 8) SUBPIECE (unique, 0x100006bb, 16) , (const, 0x0, 4), (unique, 0x100006bb, 16) INT_RIGHT (unique, 0x3e200, 16) , (const, 0x40, 4), (unique, 0x3e200, 16) INT_MULT (unique, 0x3e080, 16) , (unique, 0x3e100, 16), (unique, 0x3e100, 16) INT_ZEXT (register, 0x88, 8), (unique, 0x3e080, 16) INT_ZEXT (register, 0x98, 8), (register, 0x0, 8) SUBPIECE (unique, 0x3e200, 16) , (const, 0x0, 4), (register, 0x10, 8) SUBPIECE (unique, 0x100006ab, 16) , (const, 0x0, 4), (unique, 0x100006ab, 16) INT_RIGHT (unique, 0x3e200, 16) , (const, 0x40, 4), (unique, 0x3e200, 16) INT_MULT (unique, 0x3e080, 16) , (unique, 0x3e100, 16), (unique, 0x3e100, 16) INT_ZEXT (register, 0x18, 8), (unique, 0x3e080, 16) INT_ZEXT (register, 0x90, 8), (register, 0x10, 8) SUBPIECE (unique, 0x1000069b, 16) , (const, 0x0, 4), (unique, 0x1000069b, 16) INT_RIGHT (unique, 0x3e200, 16) , (const, 0x40, 4), (unique, 0x3e200, 16) INT_MULT (unique, 0x3e080, 16) , (unique, 0x3e100, 16), (unique, 0x3e100, 16) INT_ZEXT (register, 0x88, 8), (unique, 0x3e080, 16) INT_ZEXT (register, 0x90, 8)]
[(register, 0xb8, 8) INT_OR (register, 0xb8, 8) , (register, 0x88, 8), (register, 0xb8, 8) INT_OR (register, 0xb8, 8) , (register, 0x90, 8), (register, 0x88, 8) INT_MULT (register, 0x88, 8) , (const, 0x2000, 8), (register, 0xb8, 8) INT_RIGHT (register, 0xb8, 8) , (const, 0x33, 4), (register, 0x90, 8) INT_ZEXT (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) INT_OR (register, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) INT_MULT (register, 0xb8, 8) , (const, 0x2000, 8), (register, 0x88, 8) INT_ADD (register, 0x88, 8) , (register, 0x90, 8), (register, 0x90, 8) INT_ZEXT (register, 0x200, 1), (register, 0x88, 8) INT_ADD (register, 0x10, 8) , (register, 0x28, 8), (register, 0xb8, 8) INT_ADD (register, 0x0, 8) , (register, 0x90, 8), (register, 0x200, 1) INT_CARRY (register, 0x0, 8) , (register, 0x90, 8), (register, 0x28, 8) INT_ADD (register, 0x28, 8) , (register, 0xb0, 8), (register, 0xb0, 8) INT_ZEXT (register, 0x200, 1), (register, 0x28, 8) INT_ADD (register, 0x10, 8) , (register, 0x0, 8), (register, 0x90, 8) INT_ADD (register, 0x0, 8) , (register, 0x10, 8), (register, 0x200, 1) INT_CARRY (register, 0x0, 8) , (register, 0x10, 8), (register, 0x0, 8) SUBPIECE (unique, 0x3e200, 16) , (const, 0x0, 4), (unique, 0x3e200, 16) INT_MULT (unique, 0x3e080, 16) , (unique, 0x3e100, 16), (unique, 0x3e100, 16) INT_ZEXT (register, 0x18, 8), (unique, 0x3e080, 16) INT_ZEXT (register, 0x98, 8), (register, 0x0, 8) SUBPIECE (unique, 0x3e200, 16) , (const, 0x0, 4), (register, 0x10, 8) SUBPIECE (unique, 0x100006bb, 16) , (const, 0x0, 4), (unique, 0x100006bb, 16) INT_RIGHT (unique, 0x3e200, 16) , (const, 0x40, 4), (unique, 0x3e200, 16) INT_MULT (unique, 0x3e080, 16) , (unique, 0x3e100, 16), (unique, 0x3e100, 16) INT_ZEXT (register, 0x88, 8), (unique, 0x3e080, 16) INT_ZEXT (register, 0x98, 8), (register, 0x0, 8) SUBPIECE (unique, 0x3e200, 16) , (const, 0x0, 4), (register, 0x10, 8) SUBPIECE (unique, 0x100006ab, 16) , (const, 0x0, 4), (unique, 0x100006ab, 16) INT_RIGHT (unique, 0x3e200, 16) , (const, 0x40, 4), (unique, 0x3e200, 16) INT_MULT (unique, 0x3e080, 16) , (unique, 0x3e100, 16), (unique, 0x3e100, 16) INT_ZEXT (register, 0x18, 8), (unique, 0x3e080, 16) INT_ZEXT (register, 0x90, 8), (register, 0x0, 8) SUBPIECE (unique, 0x3e200, 16) , (const, 0x0, 4), (register, 0x10, 8) SUBPIECE (unique, 0x1000069b, 16) , (const, 0x0, 4), (unique, 0x1000069b, 16) INT_RIGHT (unique, 0x3e200, 16) , (const, 0x40, 4), (unique, 0x3e200, 16) INT_MULT (unique, 0x3e080, 16) , (unique, 0x3e100, 16), (unique, 0x3e100, 16) INT_ZEXT (register, 0x88, 8), (unique, 0x3e080, 16) INT_ZEXT (register, 0x90, 8)]
[ ---  CBRANCH (ram, 0x297e00, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_NOTEQUAL (unique, 0x1e080, 8) , (const, 0x0, 8), (unique, 0x1e080, 8) INT_AND (unique, 0x1e000, 8) , (const, 0x1, 8), (unique, 0x1e000, 8) INT_RIGHT (register, 0x98, 8) , (const, 0x34, 4), (register, 0x98, 8) INT_MULT (register, 0x98, 8) , (const, 0x2000, 8), (register, 0x98, 8) INT_ADD (register, 0x98, 8) , (register, 0x10, 8), (register, 0x98, 8) INT_ZEXT (unique, 0x10000846, 1), (unique, 0x10000846, 1) CAST (unique, 0x100004d7, 1), (unique, 0x100004d7, 1) INT_OR (register, 0x200, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_CARRY (register, 0x88, 8) , (register, 0x90, 8), (register, 0x90, 8) INT_ZEXT (register, 0x200, 1), (register, 0x88, 8) INT_ADD (register, 0x10, 8) , (register, 0x28, 8), (register, 0x200, 1) INT_CARRY (register, 0x10, 8) , (register, 0x28, 8), (register, 0x200, 1) INT_CARRY (register, 0x0, 8) , (register, 0x90, 8), (register, 0x10, 8) INT_ADD (register, 0x10, 8) , (register, 0x98, 8), (register, 0x98, 8) INT_ZEXT (unique, 0x10000845, 1), (unique, 0x10000845, 1) CAST (unique, 0x100004d6, 1), (unique, 0x100004d6, 1) INT_OR (register, 0x200, 1) , (register, 0x200, 1), (register, 0x28, 8) INT_ADD (register, 0x28, 8) , (register, 0xb0, 8), (register, 0x200, 1) INT_CARRY (register, 0x28, 8) , (register, 0xb0, 8), (register, 0xb0, 8) INT_ZEXT (register, 0x200, 1), (register, 0x28, 8) INT_ADD (register, 0x10, 8) , (register, 0x0, 8), (register, 0x200, 1) INT_CARRY (register, 0x10, 8) , (register, 0x0, 8), (register, 0x90, 8) INT_ADD (register, 0x0, 8) , (register, 0x10, 8), (register, 0x200, 1) INT_CARRY (register, 0x0, 8) , (register, 0x10, 8), (register, 0x0, 8) SUBPIECE (unique, 0x3e200, 16) , (const, 0x0, 4), (register, 0x10, 8) SUBPIECE (unique, 0x100006cb, 16) , (const, 0x0, 4), (unique, 0x100006cb, 16) INT_RIGHT (unique, 0x3e200, 16) , (const, 0x40, 4), (unique, 0x3e200, 16) INT_MULT (unique, 0x3e080, 16) , (unique, 0x3e100, 16), (unique, 0x3e100, 16) INT_ZEXT (register, 0x18, 8), (unique, 0x3e080, 16) INT_ZEXT (register, 0x98, 8), (register, 0x0, 8) SUBPIECE (unique, 0x3e200, 16) , (const, 0x0, 4), (register, 0x10, 8) SUBPIECE (unique, 0x100006bb, 16) , (const, 0x0, 4), (unique, 0x100006bb, 16) INT_RIGHT (unique, 0x3e200, 16) , (const, 0x40, 4), (unique, 0x3e200, 16) INT_MULT (unique, 0x3e080, 16) , (unique, 0x3e100, 16), (unique, 0x3e100, 16) INT_ZEXT (register, 0x88, 8), (unique, 0x3e080, 16) INT_ZEXT (register, 0x98, 8), (register, 0x0, 8) SUBPIECE (unique, 0x3e200, 16) , (const, 0x0, 4), (register, 0x10, 8) SUBPIECE (unique, 0x100006ab, 16) , (const, 0x0, 4), (unique, 0x100006ab, 16) INT_RIGHT (unique, 0x3e200, 16) , (const, 0x40, 4), (unique, 0x3e200, 16) INT_MULT (unique, 0x3e080, 16) , (unique, 0x3e100, 16), (unique, 0x3e100, 16) INT_ZEXT (register, 0x18, 8), (unique, 0x3e080, 16) INT_ZEXT (register, 0x90, 8), (register, 0x10, 8) SUBPIECE (unique, 0x1000069b, 16) , (const, 0x0, 4), (unique, 0x1000069b, 16) INT_RIGHT (unique, 0x3e200, 16) , (const, 0x40, 4), (unique, 0x3e200, 16) INT_MULT (unique, 0x3e080, 16) , (unique, 0x3e100, 16), (unique, 0x3e100, 16) INT_ZEXT (register, 0x88, 8), (unique, 0x3e080, 16) INT_ZEXT (register, 0x90, 8)]
[(register, 0x98, 8) INT_RIGHT (register, 0x98, 8) , (const, 0x1, 4)]
[(register, 0x90, 8) INT_OR (register, 0x90, 8) , (register, 0x0, 8), (register, 0x0, 8) INT_LEFT (register, 0x0, 8) , (const, 0x3f, 4), (register, 0x90, 8) INT_OR (register, 0x90, 8) , (register, 0x0, 8), (register, 0x0, 8) INT_RIGHT (register, 0xb8, 8) , (const, 0x1, 4), (register, 0x90, 8) INT_ZEXT (register, 0x90, 4), (register, 0x90, 4) INT_AND (register, 0x90, 4) , (const, 0x1, 4), (register, 0x90, 4) SUBPIECE (register, 0xb8, 8) , (const, 0x0, 4)]
[(unique, 0x1000071b, 8) COPY (unique, 0x3100, 8)]
[(register, 0xa8, 8) MULTIEQUAL (register, 0xa8, 8) , (register, 0xa8, 8) , (register, 0xa8, 8)]
[(register, 0x98, 8) MULTIEQUAL (register, 0x98, 8) , (register, 0x98, 8) , (register, 0x98, 8)]
[(register, 0x0, 4) SUBPIECE (register, 0x90, 8) , (const, 0x0, 4), (register, 0x90, 8) MULTIEQUAL (register, 0x90, 8) , (register, 0x90, 8) , (register, 0xb8, 8)]
[ ---  CBRANCH (ram, 0x297d08, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (unique, 0x3200, 8) , (const, 0x1, 8), (unique, 0x3200, 8) INT_ADD (register, 0x8, 8) , (const, 0x3fff, 8), (register, 0x8, 8) MULTIEQUAL (unique, 0x1000071b, 8) , (unique, 0x10000723, 8) , (register, 0x80, 8)]
[(unique, 0x1000048b, 1) SUBPIECE (register, 0x80, 8) , (const, 0x0, 4), (register, 0x80, 8) INT_SUB (const, 0x1, 8) , (unique, 0x3200, 8)]
[ ---  CBRANCH (ram, 0x297e28, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x3200, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x298053, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (const, 0x74, 8) , (register, 0x80, 8)]
[ ---  CBRANCH (ram, 0x297e80, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x90, 8) , (const, 0x0, 8), (register, 0x90, 8) INT_OR (register, 0x90, 8) , (register, 0x98, 8)]
[(register, 0x38, 4) INT_OR (register, 0x38, 4) , (const, 0x20, 4)]
[ ---  CBRANCH (ram, 0x297fd9, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x2000, 4), (register, 0x0, 4) INT_AND (register, 0x1084, 4) , (const, 0x6000, 4)]
[(register, 0x90, 8) COPY (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x297e80, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xa8, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x297fac, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x4000, 4)]
[(register, 0x90, 8) COPY (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x297e80, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xa8, 8) , (const, 0x0, 8)]
[(register, 0x90, 8) COPY (const, 0x1, 8)]
[ ---  BRANCH (ram, 0x297e80, 1)]
[(register, 0x90, 8) COPY (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x297e80, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4)]
[(register, 0x88, 8) COPY (const, 0x0, 8)]
[(register, 0x90, 8) MULTIEQUAL (register, 0x90, 8) , (register, 0x90, 8) , (register, 0x88, 8) , (register, 0x90, 8) , (register, 0x90, 8) , (register, 0x90, 8)]
[(register, 0x38, 4) INT_OR (register, 0x38, 4) , (const, 0x10, 4), (register, 0x38, 4) MULTIEQUAL (register, 0x38, 4) , (register, 0x38, 4) , (register, 0x38, 4) , (register, 0x38, 4) , (register, 0x38, 4) , (register, 0x38, 4)]
[ ---  BRANCH (ram, 0x297c1a, 1)]
[ ---  CBRANCH (ram, 0x2980df, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (register, 0x80, 8) , (const, 0x40, 8)]
[(register, 0x0, 4) COPY (const, 0x1, 4)]
[ ---  BRANCH (ram, 0x297d63, 1)]
[(register, 0x10, 8) INT_RIGHT (register, 0x98, 8) , (unique, 0x57680, 1), (unique, 0x57680, 1) INT_AND (register, 0x8, 1) , (const, 0x3f, 1), (register, 0x8, 1) INT_SUB (unique, 0x1000048b, 1) , (const, 0x40, 1)]
[ ---  CBRANCH (ram, 0x29807b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x80, 8) , (const, 0x40, 8)]
[(register, 0x90, 8) INT_OR (register, 0x90, 8) , (register, 0x98, 8), (register, 0x98, 8) INT_LEFT (register, 0x98, 8) , (unique, 0x53700, 1), (unique, 0x53700, 1) INT_AND (register, 0x8, 1) , (const, 0x3f, 1), (register, 0x8, 1) INT_SUB (const, 0x80, 1) , (unique, 0x1000048b, 1)]
[(register, 0x90, 8) INT_OR (register, 0x90, 8) , (register, 0x10, 8), (register, 0x90, 8) INT_ZEXT (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x90, 8) , (const, 0x0, 8), (register, 0x90, 8) MULTIEQUAL (register, 0x90, 8) , (register, 0x90, 8)]
[ ---  CBRANCH (ram, 0x2980d7, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x100003bb, 8) , (const, 0x0, 8), (unique, 0x100003bb, 8) INT_OR (register, 0x90, 8) , (unique, 0x100003cb, 8), (unique, 0x100003cb, 8) INT_AND (register, 0x10, 8) , (const, 0x7, 8), (register, 0x90, 8) INT_ZEXT (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x90, 8) , (const, 0x0, 8), (register, 0x90, 8) MULTIEQUAL (register, 0x90, 8) , (register, 0x90, 8)]
[(register, 0x38, 4) INT_OR (register, 0x38, 4) , (const, 0x20, 4)]
[ ---  CBRANCH (ram, 0x297f74, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x2000, 4), (register, 0x0, 4) INT_AND (register, 0x1084, 4) , (const, 0x6000, 4)]
[(register, 0x98, 8) COPY (const, 0x0, 8)]
[(register, 0x0, 4) COPY (const, 0x1, 4)]
[ ---  CBRANCH (ram, 0x297f56, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x4000, 4)]
[(register, 0x98, 8) COPY (const, 0x0, 8)]
[(register, 0x0, 4) COPY (const, 0x1, 4)]
[ ---  CBRANCH (ram, 0x297f87, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4)]
[(register, 0x98, 8) COPY (const, 0x0, 8)]
[(register, 0x0, 4) COPY (const, 0x1, 4)]
[(register, 0x90, 8) INT_RIGHT (register, 0x10, 8) , (const, 0x3, 4)]
[(register, 0x90, 8) INT_RIGHT (register, 0x10, 8) , (const, 0x3, 4)]
[ ---  BRANCH (ram, 0x2980c5, 1)]
[(unique, 0x100006e3, 8) COPY (register, 0x98, 8)]
[ ---  CBRANCH (ram, 0x297d58, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x100002b3, 8) , (const, 0x0, 8), (unique, 0x100002b3, 8) INT_AND (register, 0x90, 8) , (const, 0x7, 8)]
[(register, 0x38, 4) INT_OR (register, 0x38, 4) , (const, 0x20, 4)]
[ ---  CBRANCH (ram, 0x298026, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x2000, 4), (register, 0x0, 4) INT_AND (register, 0x1084, 4) , (const, 0x6000, 4)]
[ ---  CBRANCH (ram, 0x297d58, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xa8, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x29800a, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x4000, 4)]
[ ---  CBRANCH (ram, 0x297d58, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xa8, 8) , (const, 0x0, 8)]
[(unique, 0x10000703, 8) COPY (register, 0x0, 8), (register, 0x0, 8) INT_ADD (register, 0x98, 8) , (unique, 0x12080, 8), (unique, 0x12080, 8) INT_ZEXT (register, 0x200, 1), (register, 0x200, 1) INT_LESS (const, 0xfffffffffffffff7, 8) , (register, 0x90, 8)]
[ ---  BRANCH (ram, 0x297d58, 1)]
[ ---  CBRANCH (ram, 0x297fe7, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x297d58, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x10, 4) , (const, 0x4, 4), (register, 0x10, 4) INT_AND (register, 0x0, 4) , (const, 0xf, 4)]
[(unique, 0x100006f3, 8) COPY (register, 0x0, 8), (register, 0x0, 8) INT_ADD (register, 0x98, 8) , (unique, 0x12080, 8), (unique, 0x12080, 8) INT_ZEXT (register, 0x200, 1), (register, 0x200, 1) INT_LESS (const, 0xfffffffffffffffb, 8) , (register, 0x90, 8)]
[ ---  BRANCH (ram, 0x297d58, 1)]
[(register, 0x38, 4) MULTIEQUAL (register, 0x38, 4) , (register, 0x38, 4) , (register, 0x38, 4) , (register, 0x38, 4) , (register, 0x38, 4) , (register, 0x38, 4) , (register, 0x38, 4)]
[(register, 0x0, 4) INT_AND (register, 0x0, 4) , (const, 0x1, 4), (register, 0x0, 4) INT_XOR (unique, 0x100002c3, 4) , (const, 0x1, 4), (unique, 0x100002c3, 4) SUBPIECE (unique, 0x100006db, 8) , (const, 0x0, 4), (unique, 0x100006db, 8) INT_RIGHT (register, 0x0, 8) , (const, 0x34, 4), (register, 0x0, 8) MULTIEQUAL (unique, 0x100006e3, 8) , (unique, 0x100006e3, 8) , (unique, 0x100006f3, 8) , (unique, 0x100006e3, 8) , (unique, 0x10000703, 8) , (unique, 0x100006e3, 8) , (unique, 0x100006e3, 8)]
[(register, 0x38, 4) MULTIEQUAL (register, 0x38, 4) , (register, 0x38, 4)]
[(register, 0x0, 4) MULTIEQUAL (register, 0x0, 4) , (register, 0x0, 4)]
[(register, 0x98, 8) INT_RIGHT (register, 0x98, 8) , (unique, 0x57680, 1), (unique, 0x57680, 1) INT_AND (unique, 0x1000048b, 1) , (const, 0x3f, 1)]
[(register, 0x90, 8) INT_OR (register, 0x90, 8) , (register, 0x88, 8), (register, 0x90, 8) INT_ZEXT (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x90, 8) , (const, 0x0, 8), (register, 0x88, 8) INT_OR (register, 0x88, 8) , (register, 0x18, 8), (register, 0x90, 8) INT_LEFT (register, 0x90, 8) , (unique, 0x53700, 1), (unique, 0x53700, 1) INT_AND (register, 0x8, 1) , (const, 0x3f, 1), (register, 0x18, 8) INT_RIGHT (register, 0x90, 8) , (unique, 0x57680, 1), (unique, 0x57680, 1) INT_AND (unique, 0x1000048b, 1) , (const, 0x3f, 1), (register, 0x88, 8) INT_LEFT (register, 0x98, 8) , (unique, 0x53700, 1), (unique, 0x53700, 1) INT_AND (register, 0x8, 1) , (const, 0x3f, 1), (register, 0x8, 1) INT_SUB (const, 0x40, 1) , (unique, 0x1000048b, 1)]
[ ---  CBRANCH (ram, 0x297dd0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x100002d3, 8) , (const, 0x0, 8), (unique, 0x100002d3, 8) INT_OR (register, 0x90, 8) , (unique, 0x100002e3, 8), (unique, 0x100002e3, 8) INT_AND (register, 0x88, 8) , (const, 0x7, 8), (register, 0x90, 8) INT_ZEXT (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x90, 8) , (const, 0x0, 8), (register, 0x88, 8) INT_OR (register, 0x88, 8) , (register, 0x18, 8), (register, 0x90, 8) INT_LEFT (register, 0x90, 8) , (unique, 0x53700, 1), (unique, 0x53700, 1) INT_AND (register, 0x8, 1) , (const, 0x3f, 1), (register, 0x18, 8) INT_RIGHT (register, 0x90, 8) , (unique, 0x57680, 1), (unique, 0x57680, 1) INT_AND (unique, 0x1000048b, 1) , (const, 0x3f, 1), (register, 0x88, 8) INT_LEFT (register, 0x98, 8) , (unique, 0x53700, 1), (unique, 0x53700, 1) INT_AND (register, 0x8, 1) , (const, 0x3f, 1), (register, 0x8, 1) INT_SUB (const, 0x40, 1) , (unique, 0x1000048b, 1)]
[(register, 0x38, 4) INT_OR (register, 0x38, 4) , (const, 0x20, 4)]
[ ---  CBRANCH (ram, 0x297f7c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x10, 4) , (const, 0x2000, 4), (register, 0x10, 4) INT_AND (register, 0x1084, 4) , (const, 0x6000, 4)]
[(register, 0x98, 8) MULTIEQUAL (register, 0x98, 8) , (register, 0x98, 8)]
[(register, 0x90, 8) MULTIEQUAL (register, 0x90, 8) , (register, 0x90, 8)]
[(register, 0x38, 4) MULTIEQUAL (register, 0x38, 4) , (register, 0x38, 4)]
[(register, 0x0, 4) MULTIEQUAL (register, 0x0, 4) , (register, 0x0, 4)]
[ ---  CBRANCH (ram, 0x297dd0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xa8, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x297f5e, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x10, 4) , (const, 0x4000, 4)]
[(register, 0x98, 8) MULTIEQUAL (register, 0x98, 8) , (register, 0x98, 8)]
[(register, 0x90, 8) MULTIEQUAL (register, 0x90, 8) , (register, 0x90, 8)]
[(register, 0x38, 4) MULTIEQUAL (register, 0x38, 4) , (register, 0x38, 4)]
[(register, 0x0, 4) MULTIEQUAL (register, 0x0, 4) , (register, 0x0, 4)]
[ ---  CBRANCH (ram, 0x297dd0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xa8, 8) , (const, 0x0, 8)]
[(register, 0x38, 4) MULTIEQUAL (register, 0x38, 4) , (register, 0x38, 4)]
[(register, 0x0, 4) MULTIEQUAL (register, 0x0, 4) , (register, 0x0, 4)]
[(register, 0x90, 8) INT_ADD (register, 0x90, 8) , (const, 0x8, 8), (register, 0x90, 8) MULTIEQUAL (register, 0x90, 8) , (register, 0x90, 8)]
[(register, 0x98, 8) INT_ADD (register, 0x98, 8) , (unique, 0x12080, 8), (unique, 0x12080, 8) INT_ZEXT (register, 0x200, 1), (register, 0x200, 1) INT_LESS (const, 0xfffffffffffffff7, 8) , (register, 0x90, 8), (register, 0x90, 8) MULTIEQUAL (register, 0x90, 8) , (register, 0x90, 8), (register, 0x98, 8) MULTIEQUAL (register, 0x98, 8) , (register, 0x98, 8)]
[ ---  BRANCH (ram, 0x297dd0, 1)]
[ ---  CBRANCH (ram, 0x297f8f, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x10, 4) , (const, 0x0, 4)]
[(register, 0x98, 8) MULTIEQUAL (register, 0x98, 8) , (register, 0x98, 8)]
[(register, 0x38, 4) MULTIEQUAL (register, 0x38, 4) , (register, 0x38, 4)]
[(register, 0x0, 4) MULTIEQUAL (register, 0x0, 4) , (register, 0x0, 4)]
[ ---  CBRANCH (ram, 0x297dd0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x10, 4) , (const, 0x4, 4), (register, 0x10, 4) INT_AND (register, 0x10, 4) , (const, 0xf, 4), (register, 0x10, 4) SUBPIECE (register, 0x90, 8) , (const, 0x0, 4), (register, 0x90, 8) MULTIEQUAL (register, 0x90, 8) , (register, 0x90, 8)]
[(register, 0x90, 8) INT_ADD (register, 0x90, 8) , (const, 0x4, 8)]
[(register, 0x98, 8) INT_ADD (register, 0x98, 8) , (unique, 0x12080, 8), (unique, 0x12080, 8) INT_ZEXT (register, 0x200, 1), (register, 0x200, 1) INT_LESS (const, 0xfffffffffffffffb, 8) , (register, 0x90, 8)]
[ ---  BRANCH (ram, 0x297dd0, 1)]
[(register, 0x90, 8) MULTIEQUAL (register, 0x90, 8) , (register, 0x90, 8) , (register, 0x90, 8) , (register, 0x90, 8) , (register, 0x90, 8) , (register, 0x90, 8) , (register, 0x90, 8)]
[(register, 0x38, 4) MULTIEQUAL (register, 0x38, 4) , (register, 0x38, 4) , (register, 0x38, 4) , (register, 0x38, 4) , (register, 0x38, 4) , (register, 0x38, 4) , (register, 0x38, 4)]
[(register, 0x0, 4) MULTIEQUAL (register, 0x0, 4) , (register, 0x0, 4) , (register, 0x0, 4) , (register, 0x0, 4) , (register, 0x0, 4) , (register, 0x0, 4) , (register, 0x0, 4)]
[ ---  CBRANCH (ram, 0x297f2e, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_EQUAL (unique, 0x1e080, 8) , (const, 0x0, 8), (unique, 0x1e080, 8) INT_AND (unique, 0x1e000, 8) , (const, 0x1, 8), (unique, 0x1e000, 8) INT_RIGHT (register, 0x98, 8) , (const, 0x33, 4), (register, 0x98, 8) MULTIEQUAL (register, 0x98, 8) , (register, 0x98, 8) , (register, 0x98, 8) , (register, 0x98, 8) , (register, 0x98, 8) , (register, 0x98, 8) , (register, 0x98, 8)]
[(register, 0x90, 8) INT_OR (register, 0x90, 8) , (register, 0x98, 8), (register, 0x98, 8) INT_LEFT (register, 0x98, 8) , (const, 0x3d, 4), (register, 0x90, 8) INT_RIGHT (register, 0x90, 8) , (const, 0x3, 4)]
[ ---  CBRANCH (ram, 0x2980bf, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4)]
[(register, 0x90, 8) MULTIEQUAL (register, 0x90, 8) , (register, 0x90, 8)]
[ ---  CBRANCH (ram, 0x2980d0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x100003e3, 4) , (const, 0x0, 4), (unique, 0x100003e3, 4) INT_AND (register, 0x38, 4) , (const, 0x20, 4), (register, 0x38, 4) MULTIEQUAL (register, 0x38, 4) , (register, 0x38, 4)]
[(register, 0x90, 8) MULTIEQUAL (register, 0x90, 8) , (register, 0x90, 8)]
[(register, 0x38, 4) MULTIEQUAL (register, 0x38, 4) , (register, 0x38, 4)]
[ ---  CBRANCH (ram, 0x297f4c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x10000595, 4) , (const, 0x0, 4), (unique, 0x10000595, 4) INT_AND (register, 0x1084, 4) , (const, 0x800, 4)]
[(register, 0x38, 4) INT_OR (register, 0x38, 4) , (const, 0x20, 4)]
[(register, 0x90, 8) COPY (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x297c1a, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4)]
[(register, 0x90, 8) MULTIEQUAL (register, 0x90, 8) , (register, 0x90, 8) , (register, 0x90, 8)]
[(register, 0x38, 4) INT_OR (register, 0x38, 4) , (const, 0x10, 4), (register, 0x38, 4) MULTIEQUAL (register, 0x38, 4) , (register, 0x38, 4) , (register, 0x38, 4)]
[ ---  BRANCH (ram, 0x297c1a, 1)]
[ ---  CBRANCH (ram, 0x297ae8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x100001e5, 8) , (const, 0x0, 8), (unique, 0x100001e5, 8) INT_AND (register, 0x90, 8) , (const, 0x7, 8)]
[(register, 0x38, 4) INT_OR (register, 0x38, 4) , (const, 0x20, 4)]
[ ---  CBRANCH (ram, 0x297ec0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x2000, 4), (register, 0x0, 4) INT_AND (register, 0x1084, 4) , (const, 0x6000, 4)]
[ ---  CBRANCH (ram, 0x297ae8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xa8, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x297ef0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x4000, 4)]
[ ---  CBRANCH (ram, 0x297ae8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xa8, 8) , (const, 0x0, 8)]
[(register, 0x90, 8) INT_ADD (register, 0x90, 8) , (const, 0x8, 8)]
[(register, 0x98, 8) INT_ADD (register, 0x98, 8) , (unique, 0x12080, 8), (unique, 0x12080, 8) INT_ZEXT (register, 0x200, 1), (register, 0x200, 1) INT_LESS (const, 0xfffffffffffffff7, 8) , (register, 0x90, 8)]
[ ---  BRANCH (ram, 0x297ae8, 1)]
[ ---  CBRANCH (ram, 0x297ae8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x297ae8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x4, 4), (register, 0x0, 4) INT_AND (register, 0x0, 4) , (const, 0xf, 4)]
[(register, 0x90, 8) INT_ADD (register, 0x90, 8) , (const, 0x4, 8)]
[(register, 0x98, 8) INT_ADD (register, 0x98, 8) , (unique, 0x12080, 8), (unique, 0x12080, 8) INT_ZEXT (register, 0x200, 1), (register, 0x200, 1) INT_LESS (const, 0xfffffffffffffffb, 8) , (register, 0x90, 8)]
[(register, 0x90, 8) MULTIEQUAL (register, 0x90, 8) , (register, 0x90, 8) , (register, 0x90, 8) , (register, 0x90, 8) , (register, 0x90, 8) , (register, 0x90, 8) , (register, 0x90, 8)]
[(register, 0x38, 4) MULTIEQUAL (register, 0x38, 4) , (register, 0x38, 4) , (register, 0x38, 4) , (register, 0x38, 4) , (register, 0x38, 4) , (register, 0x38, 4) , (register, 0x38, 4)]
[ ---  CBRANCH (ram, 0x297b03, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_NOTEQUAL (unique, 0x1e080, 8) , (const, 0x0, 8), (unique, 0x1e080, 8) INT_AND (unique, 0x1e000, 8) , (const, 0x1, 8), (unique, 0x1e000, 8) INT_RIGHT (register, 0x98, 8) , (const, 0x34, 4), (register, 0x98, 8) MULTIEQUAL (register, 0x98, 8) , (register, 0x98, 8) , (register, 0x98, 8) , (register, 0x98, 8) , (register, 0x98, 8) , (register, 0x98, 8) , (register, 0x98, 8)]
[(unique, 0x3200, 8) INT_ADD (register, 0x8, 8) , (const, 0x4000, 8)]
[(register, 0x98, 8) INT_AND (register, 0x98, 8) , (const, 0xffefffffffffffff, 8)]
[(register, 0x98, 8) MULTIEQUAL (register, 0x98, 8) , (register, 0x98, 8)]
[ ---  CBRANCH (ram, 0x297bc0, 1) , (unique, 0xd080, 1), (unique, 0xd080, 1) INT_SLESS (const, 0x7ffe, 8) , (register, 0x10, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0x3200, 8) , (unique, 0x3200, 8)]
[ ---  CBRANCH (ram, 0x297e90, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x80, 4) , (const, 0x2000, 4), (register, 0x80, 4) INT_AND (register, 0x1084, 4) , (const, 0x6000, 4)]
[(unique, 0x10000349, 8) INT_2COMP (unique, 0x12600, 8), (unique, 0x12600, 8) INT_ZEXT (register, 0x200, 1), (register, 0x200, 1) INT_EQUAL (register, 0xa8, 8) , (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x297c17, 1)]
[ ---  CBRANCH (ram, 0x297f00, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x80, 4) , (const, 0x4000, 4)]
[(register, 0x90, 8) INT_2COMP (register, 0xa8, 8)]
[ ---  BRANCH (ram, 0x297c17, 1)]
[(register, 0x90, 8) INT_NEGATE (unique, 0x1000025b, 8), (unique, 0x1000025b, 8) INT_2COMP (unique, 0x12600, 8), (unique, 0x12600, 8) INT_ZEXT (register, 0x200, 1), (register, 0x200, 1) INT_EQUAL (register, 0x80, 4) , (const, 0x0, 4)]
[(register, 0x90, 8) MULTIEQUAL (register, 0x90, 8) , (register, 0x90, 8) , (unique, 0x10000349, 8)]
[(register, 0x38, 4) INT_OR (register, 0x38, 4) , (const, 0x28, 4)]
[(unique, 0x10000743, 8) COPY (register, 0x90, 8), (register, 0x90, 8) INT_OR (register, 0x90, 8) , (register, 0x0, 8), (register, 0x0, 8) INT_LEFT (register, 0x98, 8) , (const, 0x3d, 4), (register, 0x90, 8) INT_RIGHT (register, 0x90, 8) , (const, 0x3, 4)]
[ ---  BRANCH (ram, 0x297784, 1)]
[(register, 0x90, 8) MULTIEQUAL (unique, 0x10000743, 8) , (unique, 0x1000074b, 8) , (unique, 0x10000753, 8) , (unique, 0x1000075b, 8) , (unique, 0x10000763, 8) , (unique, 0x1000076b, 8) , (unique, 0x10000773, 8) , (register, 0x90, 8) , (register, 0x90, 8) , (register, 0x90, 8)]
[ ---  CBRANCH (ram, 0x297c85, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x38, 4) , (const, 0x0, 4), (register, 0x38, 4) MULTIEQUAL (register, 0x38, 4) , (register, 0x38, 4) , (register, 0x38, 4) , (register, 0x38, 4) , (register, 0x38, 4) , (register, 0x38, 4) , (register, 0x38, 4) , (register, 0x38, 4) , (register, 0x38, 4) , (register, 0x38, 4)]
[ ---  RETURN (const, 0x0, 8)]
[ ---  CALL (ram, 0x299bb0, 8) , (register, 0x1200, 8) , (register, 0x38, 4), (register, 0x38, 4) MULTIEQUAL (register, 0x38, 4) , (register, 0x38, 4) , (register, 0x38, 4) , (register, 0x38, 4) , (register, 0x38, 4), (register, 0x1200, 8) MULTIEQUAL (register, 0x90, 8) , (register, 0x90, 8) , (register, 0x90, 8) , (register, 0x90, 8) , (register, 0x90, 8)]
[ ---  RETURN (const, 0x0, 8)]
