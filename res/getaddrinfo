[(register, 0x20a, 1) COPY (const, 0x0, 1)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffab8, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffab8, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffab8, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffab8, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffab8, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffab8, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffab8, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffab8, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffab8, 8)]
[(stack, 0xfffffffffffffaf0, 8) COPY (register, 0x8, 8)]
[(stack, 0xfffffffffffffb40, 8) COPY (const, 0x0, 8)]
[(stack, 0xffffffffffffffc0, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x100010c3, 8), (unique, 0x100010c3, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8)]
[ ---  CBRANCH (ram, 0x20802a, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x38, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x208020, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x2a, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0x38, 8)]
[ ---  CBRANCH (ram, 0x207c10, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x38, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[(unique, 0x1000103d, 8) COPY (register, 0x38, 8)]
[ ---  CBRANCH (ram, 0x207c20, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x30, 8) , (const, 0x0, 8)]
[(unique, 0x10001045, 8) COPY (register, 0x38, 8)]
[ ---  CBRANCH (ram, 0x2084e0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x2a, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0x30, 8)]
[ ---  CBRANCH (ram, 0x2084ee, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x30, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[(register, 0xa8, 8) COPY (const, 0x0, 8)]
[(unique, 0x10000f9d, 8) COPY (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x208048, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x30, 8) , (const, 0x0, 8)]
[(register, 0xb0, 8) COPY (const, 0x0, 8)]
[(unique, 0x1000104d, 8) COPY (register, 0xb0, 8), (register, 0xb0, 8) COPY (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x207c20, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x2a, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0x30, 8)]
[(unique, 0x10000fa5, 8) COPY (register, 0x20, 8)]
[(unique, 0x10001055, 8) COPY (register, 0xb0, 8)]
[ ---  CBRANCH (ram, 0x207c20, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x30, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[(register, 0xb0, 8) MULTIEQUAL (unique, 0x1000103d, 8) , (unique, 0x10001045, 8) , (unique, 0x1000104d, 8) , (unique, 0x10001055, 8) , (register, 0x38, 8) , (register, 0x38, 8)]
[(register, 0xa8, 8) MULTIEQUAL (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0xa8, 8)]
[ ---  CBRANCH (ram, 0x208338, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x10, 8) , (const, 0x0, 8)]
[(register, 0xa0, 8) CAST (unique, 0x100010cb, 8), (unique, 0x100010cb, 8) PTRSUB (const, 0x0, 8) , (const, 0x2b15e0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x9ed, 4)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x9ed, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x9ed, 4)]
[(ram, 0x4ee040, 4) INDIRECT (ram, 0x4ee040, 4) , (const, 0x9ed, 4)]
[(ram, 0x4ee044, 4) INDIRECT (ram, 0x4ee044, 4) , (const, 0x9ed, 4)]
[(ram, 0x4ee050, 8) INDIRECT (ram, 0x4ee050, 8) , (const, 0x9ed, 4)]
[(ram, 0x4ee058, 8) INDIRECT (ram, 0x4ee058, 8) , (const, 0x9ed, 4)]
[(ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x9ed, 4)]
[(ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x9ed, 4)]
[(ram, 0x4f0870, 8) INDIRECT (ram, 0x4f0870, 8) , (const, 0x9ed, 4)]
[(ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x9ed, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x9ed, 4)]
[(stack, 0xfffffffffffffac4, 4) INDIRECT (stack, 0xfffffffffffffac4, 4) , (const, 0x9ed, 4)]
[(stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x9ed, 4)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x9ed, 4)]
[(stack, 0xfffffffffffffad8, 8) INDIRECT (stack, 0xfffffffffffffad8, 8) , (const, 0x9ed, 4)]
[(stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x9ed, 4)]
[(stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x9ed, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x9ed, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x9ed, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x9ed, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x9ed, 4)]
[(stack, 0xfffffffffffffb08, 4) INDIRECT (stack, 0xfffffffffffffb08, 4) , (const, 0x9ed, 4)]
[(stack, 0xfffffffffffffb0f, 1) INDIRECT (stack, 0xfffffffffffffb0f, 1) , (const, 0x9ed, 4)]
[(stack, 0xfffffffffffffb10, 4) INDIRECT (stack, 0xfffffffffffffb10, 4) , (const, 0x9ed, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x9ed, 4)]
[(stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x9ed, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x9ed, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x9ed, 4)]
[(stack, 0xfffffffffffffb3a, 1) INDIRECT (stack, 0xfffffffffffffb3a, 1) , (const, 0x9ed, 4), (stack, 0xfffffffffffffb3a, 1) COPY (const, 0x0, 1)]
[(stack, 0xfffffffffffffb3b, 1) INDIRECT (stack, 0xfffffffffffffb3b, 1) , (const, 0x9ed, 4), (stack, 0xfffffffffffffb3b, 1) COPY (const, 0x0, 1)]
[(stack, 0xfffffffffffffb3c, 4) INDIRECT (stack, 0xfffffffffffffb3c, 4) , (const, 0x9ed, 4)]
[(stack, 0xfffffffffffffb40, 8) INDIRECT (stack, 0xfffffffffffffb40, 8) , (const, 0x9ed, 4)]
[(stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x9ed, 4), (stack, 0xfffffffffffffb48, 8) COPY (const, 0x0, 8)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x9ed, 4), (stack, 0xfffffffffffffb50, 8) COPY (const, 0x0, 8)]
[(stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x9ed, 4)]
[(stack, 0xfffffffffffffb60, 4) INDIRECT (stack, 0xfffffffffffffb60, 4) , (const, 0x9ed, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x9ed, 4)]
[(stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x9ed, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x9ed, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x9ed, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x9ed, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x9ed, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x9ed, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x9ed, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x9ed, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x9ed, 4)]
[(stack, 0xfffffffffffffb98, 4) INDIRECT (stack, 0xfffffffffffffb98, 4) , (const, 0x9ed, 4)]
[(stack, 0xfffffffffffffb9c, 4) INDIRECT (stack, 0xfffffffffffffb9c, 4) , (const, 0x9ed, 4)]
[(stack, 0xfffffffffffffba0, 4) INDIRECT (stack, 0xfffffffffffffba0, 4) , (const, 0x9ed, 4)]
[(stack, 0xfffffffffffffba4, 4) INDIRECT (stack, 0xfffffffffffffba4, 4) , (const, 0x9ed, 4)]
[(stack, 0xfffffffffffffba8, 16) INDIRECT (stack, 0xfffffffffffffba8, 16) , (const, 0x9ed, 4)]
[(stack, 0xfffffffffffffbb8, 4) INDIRECT (stack, 0xfffffffffffffbb8, 4) , (const, 0x9ed, 4)]
[(stack, 0xfffffffffffffbbc, 4) INDIRECT (stack, 0xfffffffffffffbbc, 4) , (const, 0x9ed, 4)]
[(stack, 0xfffffffffffffc00, 8) INDIRECT (stack, 0xfffffffffffffc00, 8) , (const, 0x9ed, 4)]
[(stack, 0xfffffffffffffc08, 8) INDIRECT (stack, 0xfffffffffffffc08, 8) , (const, 0x9ed, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x9ed, 4)]
[ ---  CALL (ram, 0x2416d0, 8) , (unique, 0x3200, 8) , (unique, 0x3200, 8) , (unique, 0x3200, 8) , (unique, 0x3200, 8), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffb3a, 8), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffb3b, 8), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffb48, 8), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffb50, 8)]
[ ---  CBRANCH (ram, 0x2086c7, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x58a00, 4) , (const, 0x0, 4), (unique, 0x58a00, 4) INT_AND (unique, 0xbc80, 4) , (const, 0xfffff800, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100006e8, 8), (unique, 0x100006e8, 8) PTRSUB (register, 0x10, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x2086c7, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x18, 1) , (const, 0x0, 1), (register, 0x18, 1) INT_AND (register, 0x206, 1) , (register, 0x10, 1), (register, 0x10, 1) SUBPIECE (register, 0x10, 4) , (const, 0x0, 4), (register, 0x206, 1) INT_EQUAL (register, 0xb0, 8) , (const, 0x0, 8), (register, 0x10, 4) INT_RIGHT (unique, 0xbc80, 4) , (const, 0x1, 4)]
[(stack, 0xfffffffffffffb14, 4) COPY (const, 0xffffffff, 4)]
[ ---  BRANCH (ram, 0x207ff1, 1)]
[(stack, 0xfffffffffffffb48, 8) COPY (const, 0x0, 8)]
[(stack, 0xfffffffffffffb50, 8) COPY (const, 0x0, 8)]
[(stack, 0xfffffffffffffb3a, 1) COPY (const, 0x0, 1)]
[(stack, 0xfffffffffffffb3b, 1) COPY (const, 0x0, 1)]
[(unique, 0x100010b5, 1) COPY (register, 0x18, 1)]
[ ---  CBRANCH (ram, 0x2086d6, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x1000019e, 4) , (const, 0x0, 4), (unique, 0x1000019e, 4) INT_AND (unique, 0xbc80, 4) , (const, 0x20, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x93a, 4)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x93a, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x93a, 4)]
[(ram, 0x4ee040, 4) INDIRECT (ram, 0x4ee040, 4) , (const, 0x93a, 4)]
[(ram, 0x4ee044, 4) INDIRECT (ram, 0x4ee044, 4) , (const, 0x93a, 4)]
[(ram, 0x4ee050, 8) INDIRECT (ram, 0x4ee050, 8) , (const, 0x93a, 4)]
[(ram, 0x4ee058, 8) INDIRECT (ram, 0x4ee058, 8) , (const, 0x93a, 4)]
[(ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x93a, 4)]
[(ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x93a, 4)]
[(ram, 0x4f0870, 8) INDIRECT (ram, 0x4f0870, 8) , (const, 0x93a, 4)]
[(ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x93a, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x93a, 4)]
[(stack, 0xfffffffffffffac4, 4) INDIRECT (stack, 0xfffffffffffffac4, 4) , (const, 0x93a, 4)]
[(stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x93a, 4)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x93a, 4)]
[(stack, 0xfffffffffffffad8, 8) INDIRECT (stack, 0xfffffffffffffad8, 8) , (const, 0x93a, 4)]
[(stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x93a, 4)]
[(stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x93a, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x93a, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x93a, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x93a, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x93a, 4)]
[(stack, 0xfffffffffffffb08, 4) INDIRECT (stack, 0xfffffffffffffb08, 4) , (const, 0x93a, 4)]
[(stack, 0xfffffffffffffb0f, 1) INDIRECT (stack, 0xfffffffffffffb0f, 1) , (const, 0x93a, 4)]
[(stack, 0xfffffffffffffb10, 4) INDIRECT (stack, 0xfffffffffffffb10, 4) , (const, 0x93a, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x93a, 4)]
[(stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x93a, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x93a, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x93a, 4)]
[(stack, 0xfffffffffffffb3a, 1) INDIRECT (stack, 0xfffffffffffffb3a, 1) , (const, 0x93a, 4)]
[(stack, 0xfffffffffffffb3b, 1) INDIRECT (stack, 0xfffffffffffffb3b, 1) , (const, 0x93a, 4)]
[(stack, 0xfffffffffffffb3c, 4) INDIRECT (stack, 0xfffffffffffffb3c, 4) , (const, 0x93a, 4)]
[(stack, 0xfffffffffffffb40, 8) INDIRECT (stack, 0xfffffffffffffb40, 8) , (const, 0x93a, 4)]
[(stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x93a, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x93a, 4)]
[(stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x93a, 4)]
[(stack, 0xfffffffffffffb60, 4) INDIRECT (stack, 0xfffffffffffffb60, 4) , (const, 0x93a, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x93a, 4)]
[(stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x93a, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x93a, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x93a, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x93a, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x93a, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x93a, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x93a, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x93a, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x93a, 4)]
[(stack, 0xfffffffffffffb98, 4) INDIRECT (stack, 0xfffffffffffffb98, 4) , (const, 0x93a, 4)]
[(stack, 0xfffffffffffffb9c, 4) INDIRECT (stack, 0xfffffffffffffb9c, 4) , (const, 0x93a, 4)]
[(stack, 0xfffffffffffffba0, 4) INDIRECT (stack, 0xfffffffffffffba0, 4) , (const, 0x93a, 4)]
[(stack, 0xfffffffffffffba4, 4) INDIRECT (stack, 0xfffffffffffffba4, 4) , (const, 0x93a, 4)]
[(stack, 0xfffffffffffffba8, 16) INDIRECT (stack, 0xfffffffffffffba8, 16) , (const, 0x93a, 4)]
[(stack, 0xfffffffffffffbb8, 4) INDIRECT (stack, 0xfffffffffffffbb8, 4) , (const, 0x93a, 4)]
[(stack, 0xfffffffffffffbbc, 4) INDIRECT (stack, 0xfffffffffffffbbc, 4) , (const, 0x93a, 4)]
[(stack, 0xfffffffffffffc00, 8) INDIRECT (stack, 0xfffffffffffffc00, 8) , (const, 0x93a, 4)]
[(stack, 0xfffffffffffffc08, 8) INDIRECT (stack, 0xfffffffffffffc08, 8) , (const, 0x93a, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x93a, 4)]
[ ---  CALL (ram, 0x2416d0, 8) , (unique, 0x3200, 8) , (unique, 0x3200, 8) , (unique, 0x3200, 8) , (unique, 0x3200, 8), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffb3a, 8), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffb3b, 8), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffb48, 8), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffb50, 8)]
[ ---  CBRANCH (ram, 0x208384, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRSUB (register, 0x10, 8) , (const, 0x4, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffc08, 8) MULTIEQUAL (stack, 0xfffffffffffffc08, 8) , (stack, 0xfffffffffffffc08, 8)]
[(stack, 0xfffffffffffffc00, 8) MULTIEQUAL (stack, 0xfffffffffffffc00, 8) , (stack, 0xfffffffffffffc00, 8)]
[(stack, 0xfffffffffffffbbc, 4) MULTIEQUAL (stack, 0xfffffffffffffbbc, 4) , (stack, 0xfffffffffffffbbc, 4)]
[(stack, 0xfffffffffffffbb8, 4) MULTIEQUAL (stack, 0xfffffffffffffbb8, 4) , (stack, 0xfffffffffffffbb8, 4)]
[(stack, 0xfffffffffffffba8, 16) MULTIEQUAL (stack, 0xfffffffffffffba8, 16) , (stack, 0xfffffffffffffba8, 16)]
[(stack, 0xfffffffffffffba4, 4) MULTIEQUAL (stack, 0xfffffffffffffba4, 4) , (stack, 0xfffffffffffffba4, 4)]
[(stack, 0xfffffffffffffba0, 4) MULTIEQUAL (stack, 0xfffffffffffffba0, 4) , (stack, 0xfffffffffffffba0, 4)]
[(stack, 0xfffffffffffffb9c, 4) MULTIEQUAL (stack, 0xfffffffffffffb9c, 4) , (stack, 0xfffffffffffffb9c, 4)]
[(stack, 0xfffffffffffffb98, 4) MULTIEQUAL (stack, 0xfffffffffffffb98, 4) , (stack, 0xfffffffffffffb98, 4)]
[(stack, 0xfffffffffffffb94, 4) MULTIEQUAL (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4)]
[(stack, 0xfffffffffffffb90, 4) MULTIEQUAL (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4)]
[(stack, 0xfffffffffffffb8c, 4) MULTIEQUAL (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4)]
[(stack, 0xfffffffffffffb88, 4) MULTIEQUAL (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4)]
[(stack, 0xfffffffffffffb84, 4) MULTIEQUAL (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4)]
[(stack, 0xfffffffffffffb80, 4) MULTIEQUAL (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4)]
[(stack, 0xfffffffffffffb7c, 4) MULTIEQUAL (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb70, 4) MULTIEQUAL (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4)]
[(stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb60, 4) MULTIEQUAL (stack, 0xfffffffffffffb60, 4) , (stack, 0xfffffffffffffb60, 4)]
[(stack, 0xfffffffffffffb58, 8) MULTIEQUAL (stack, 0xfffffffffffffb58, 8) , (stack, 0xfffffffffffffb58, 8)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb40, 8) MULTIEQUAL (stack, 0xfffffffffffffb40, 8) , (stack, 0xfffffffffffffb40, 8)]
[(stack, 0xfffffffffffffb3c, 4) MULTIEQUAL (stack, 0xfffffffffffffb3c, 4) , (stack, 0xfffffffffffffb3c, 4)]
[(stack, 0xfffffffffffffb3b, 1) MULTIEQUAL (stack, 0xfffffffffffffb3b, 1) , (stack, 0xfffffffffffffb3b, 1)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb20, 8) MULTIEQUAL (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb10, 4) MULTIEQUAL (stack, 0xfffffffffffffb10, 4) , (stack, 0xfffffffffffffb10, 4)]
[(stack, 0xfffffffffffffb0f, 1) MULTIEQUAL (stack, 0xfffffffffffffb0f, 1) , (stack, 0xfffffffffffffb0f, 1)]
[(stack, 0xfffffffffffffb08, 4) MULTIEQUAL (stack, 0xfffffffffffffb08, 4) , (stack, 0xfffffffffffffb08, 4)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae4, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[(stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffad8, 8) MULTIEQUAL (stack, 0xfffffffffffffad8, 8) , (stack, 0xfffffffffffffad8, 8)]
[(stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffac8, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffac4, 4) MULTIEQUAL (stack, 0xfffffffffffffac4, 4) , (stack, 0xfffffffffffffac4, 4)]
[(ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(ram, 0x4f08e8, 4) MULTIEQUAL (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4)]
[(ram, 0x4f0870, 8) MULTIEQUAL (ram, 0x4f0870, 8) , (ram, 0x4f0870, 8)]
[(ram, 0x4ee064, 4) MULTIEQUAL (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4)]
[(ram, 0x4ee060, 4) MULTIEQUAL (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4)]
[(ram, 0x4ee058, 8) MULTIEQUAL (ram, 0x4ee058, 8) , (ram, 0x4ee058, 8)]
[(ram, 0x4ee050, 8) MULTIEQUAL (ram, 0x4ee050, 8) , (ram, 0x4ee050, 8)]
[(ram, 0x4ee044, 4) MULTIEQUAL (ram, 0x4ee044, 4) , (ram, 0x4ee044, 4)]
[(ram, 0x4ee040, 4) MULTIEQUAL (ram, 0x4ee040, 4) , (ram, 0x4ee040, 4)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x20a, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xa0, 8) MULTIEQUAL (register, 0x10, 8) , (register, 0xa0, 8)]
[ ---  CBRANCH (ram, 0x2084f3, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xfffffffffffffb3a, 1) , (const, 0x0, 1), (stack, 0xfffffffffffffb3a, 1) MULTIEQUAL (stack, 0xfffffffffffffb3a, 1) , (stack, 0xfffffffffffffb3a, 1)]
[ ---  CBRANCH (ram, 0x20855d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xfffffffffffffb3b, 1) , (const, 0x0, 1)]
[(register, 0x0, 4) COPY (const, 0xa, 4)]
[(stack, 0xfffffffffffffb78, 4) COPY (unique, 0x10000528, 4), (unique, 0x10000528, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000ca0, 8), (unique, 0x10000ca0, 8) PTRSUB (register, 0xa0, 8) , (const, 0x0, 8)]
[(stack, 0xfffffffffffffb80, 4) COPY (unique, 0x10000538, 4), (unique, 0x10000538, 4) LOAD (const, 0x1b1, 4) , (unique, 0x1000053c, 8), (unique, 0x1000053c, 8) PTRSUB (register, 0xa0, 8) , (const, 0x8, 8)]
[(stack, 0xfffffffffffffb84, 4) COPY (unique, 0x10000544, 4), (unique, 0x10000544, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000548, 8), (unique, 0x10000548, 8) PTRSUB (register, 0xa0, 8) , (const, 0xc, 8)]
[(stack, 0xfffffffffffffb88, 4) COPY (unique, 0x10000568, 4), (unique, 0x10000568, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRSUB (register, 0xa0, 8) , (const, 0x10, 8)]
[(stack, 0xfffffffffffffb8c, 4) COPY (unique, 0x1000056c, 4), (unique, 0x1000056c, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000570, 8), (unique, 0x10000570, 8) CAST (unique, 0x100010d3, 8), (unique, 0x100010d3, 8) PTRSUB (register, 0xa0, 8) , (const, 0x14, 8)]
[(stack, 0xfffffffffffffb90, 4) COPY (unique, 0x10000578, 4), (unique, 0x10000578, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100010db, 8), (unique, 0x100010db, 8) CAST (unique, 0x1000057c, 8), (unique, 0x1000057c, 8) PTRSUB (register, 0xa0, 8) , (const, 0x18, 8)]
[(stack, 0xfffffffffffffb94, 4) COPY (unique, 0x10000584, 4), (unique, 0x10000584, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000588, 8), (unique, 0x10000588, 8) CAST (unique, 0x100010eb, 8), (unique, 0x100010eb, 8) INT_ADD (unique, 0x100010e3, 8) , (const, 0x4, 8), (unique, 0x100010e3, 8) CAST (unique, 0x10000cd8, 8), (unique, 0x10000cd8, 8) PTRSUB (register, 0xa0, 8) , (const, 0x18, 8)]
[(stack, 0xfffffffffffffb98, 4) COPY (unique, 0x100005a8, 4), (unique, 0x100005a8, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100010f3, 8), (unique, 0x100010f3, 8) CAST (unique, 0x3800, 8), (unique, 0x3800, 8) PTRSUB (register, 0xa0, 8) , (const, 0x20, 8)]
[(stack, 0xfffffffffffffb9c, 4) COPY (unique, 0x100005ac, 4), (unique, 0x100005ac, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100005b0, 8), (unique, 0x100005b0, 8) CAST (unique, 0x10001103, 8), (unique, 0x10001103, 8) INT_ADD (unique, 0x100010fb, 8) , (const, 0x4, 8), (unique, 0x100010fb, 8) CAST (unique, 0x10000cf8, 8), (unique, 0x10000cf8, 8) PTRSUB (register, 0xa0, 8) , (const, 0x20, 8)]
[(stack, 0xfffffffffffffba0, 4) COPY (unique, 0x100005b8, 4), (unique, 0x100005b8, 4) LOAD (const, 0x1b1, 4) , (unique, 0x1000110b, 8), (unique, 0x1000110b, 8) CAST (unique, 0x100005bc, 8), (unique, 0x100005bc, 8) PTRSUB (register, 0xa0, 8) , (const, 0x28, 8)]
[(stack, 0xfffffffffffffba4, 4) COPY (unique, 0x100005c4, 4), (unique, 0x100005c4, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100005c8, 8), (unique, 0x100005c8, 8) CAST (unique, 0x1000111b, 8), (unique, 0x1000111b, 8) INT_ADD (unique, 0x10001113, 8) , (const, 0x4, 8), (unique, 0x10001113, 8) CAST (unique, 0x10000d18, 8), (unique, 0x10000d18, 8) PTRSUB (register, 0xa0, 8) , (const, 0x28, 8)]
[(unique, 0x100010b8, 1) COPY (stack, 0xfffffffffffffb3b, 1)]
[ ---  CBRANCH (ram, 0x207c76, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xfffffffffffffb3b, 1) , (const, 0x0, 1)]
[(register, 0x0, 4) COPY (const, 0x2, 4)]
[(stack, 0xfffffffffffffb78, 4) COPY (unique, 0x10000468, 4), (unique, 0x10000468, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000bb0, 8), (unique, 0x10000bb0, 8) PTRSUB (register, 0xa0, 8) , (const, 0x0, 8)]
[(stack, 0xfffffffffffffb80, 4) COPY (unique, 0x10000478, 4), (unique, 0x10000478, 4) LOAD (const, 0x1b1, 4) , (unique, 0x1000047c, 8), (unique, 0x1000047c, 8) PTRSUB (register, 0xa0, 8) , (const, 0x8, 8)]
[(stack, 0xfffffffffffffb84, 4) COPY (unique, 0x10000484, 4), (unique, 0x10000484, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000488, 8), (unique, 0x10000488, 8) PTRSUB (register, 0xa0, 8) , (const, 0xc, 8)]
[(stack, 0xfffffffffffffb88, 4) COPY (unique, 0x100004a8, 4), (unique, 0x100004a8, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRSUB (register, 0xa0, 8) , (const, 0x10, 8)]
[(stack, 0xfffffffffffffb8c, 4) COPY (unique, 0x100004ac, 4), (unique, 0x100004ac, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100004b0, 8), (unique, 0x100004b0, 8) CAST (unique, 0x10001123, 8), (unique, 0x10001123, 8) PTRSUB (register, 0xa0, 8) , (const, 0x14, 8)]
[(stack, 0xfffffffffffffb90, 4) COPY (unique, 0x100004b8, 4), (unique, 0x100004b8, 4) LOAD (const, 0x1b1, 4) , (unique, 0x1000112b, 8), (unique, 0x1000112b, 8) CAST (unique, 0x100004bc, 8), (unique, 0x100004bc, 8) PTRSUB (register, 0xa0, 8) , (const, 0x18, 8)]
[(stack, 0xfffffffffffffb94, 4) COPY (unique, 0x100004c4, 4), (unique, 0x100004c4, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100004c8, 8), (unique, 0x100004c8, 8) CAST (unique, 0x1000113b, 8), (unique, 0x1000113b, 8) INT_ADD (unique, 0x10001133, 8) , (const, 0x4, 8), (unique, 0x10001133, 8) CAST (unique, 0x10000be8, 8), (unique, 0x10000be8, 8) PTRSUB (register, 0xa0, 8) , (const, 0x18, 8)]
[(stack, 0xfffffffffffffb98, 4) COPY (unique, 0x100004e8, 4), (unique, 0x100004e8, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10001143, 8), (unique, 0x10001143, 8) CAST (unique, 0x3800, 8), (unique, 0x3800, 8) PTRSUB (register, 0xa0, 8) , (const, 0x20, 8)]
[(stack, 0xfffffffffffffb9c, 4) COPY (unique, 0x100004ec, 4), (unique, 0x100004ec, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100004f0, 8), (unique, 0x100004f0, 8) CAST (unique, 0x10001153, 8), (unique, 0x10001153, 8) INT_ADD (unique, 0x1000114b, 8) , (const, 0x4, 8), (unique, 0x1000114b, 8) CAST (unique, 0x10000c08, 8), (unique, 0x10000c08, 8) PTRSUB (register, 0xa0, 8) , (const, 0x20, 8)]
[(stack, 0xfffffffffffffba0, 4) COPY (unique, 0x100004f8, 4), (unique, 0x100004f8, 4) LOAD (const, 0x1b1, 4) , (unique, 0x1000115b, 8), (unique, 0x1000115b, 8) CAST (unique, 0x100004fc, 8), (unique, 0x100004fc, 8) PTRSUB (register, 0xa0, 8) , (const, 0x28, 8)]
[(stack, 0xfffffffffffffba4, 4) COPY (unique, 0x10000504, 4), (unique, 0x10000504, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000508, 8), (unique, 0x10000508, 8) CAST (unique, 0x1000116b, 8), (unique, 0x1000116b, 8) INT_ADD (unique, 0x10001163, 8) , (const, 0x4, 8), (unique, 0x10001163, 8) CAST (unique, 0x10000c28, 8), (unique, 0x10000c28, 8) PTRSUB (register, 0xa0, 8) , (const, 0x28, 8)]
[ ---  BRANCH (ram, 0x208525, 1)]
[(stack, 0xfffffffffffffba4, 4) MULTIEQUAL (stack, 0xfffffffffffffba4, 4) , (stack, 0xfffffffffffffba4, 4)]
[(stack, 0xfffffffffffffba0, 4) MULTIEQUAL (stack, 0xfffffffffffffba0, 4) , (stack, 0xfffffffffffffba0, 4)]
[(stack, 0xfffffffffffffb9c, 4) MULTIEQUAL (stack, 0xfffffffffffffb9c, 4) , (stack, 0xfffffffffffffb9c, 4)]
[(stack, 0xfffffffffffffb98, 4) MULTIEQUAL (stack, 0xfffffffffffffb98, 4) , (stack, 0xfffffffffffffb98, 4)]
[(stack, 0xfffffffffffffb94, 4) MULTIEQUAL (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4)]
[(stack, 0xfffffffffffffb90, 4) MULTIEQUAL (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4)]
[(stack, 0xfffffffffffffb8c, 4) MULTIEQUAL (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4)]
[(stack, 0xfffffffffffffb88, 4) MULTIEQUAL (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4)]
[(stack, 0xfffffffffffffb84, 4) MULTIEQUAL (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4)]
[(stack, 0xfffffffffffffb80, 4) MULTIEQUAL (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb7c, 4) COPY (register, 0x0, 4), (register, 0x0, 4) MULTIEQUAL (register, 0x0, 4) , (register, 0x0, 4)]
[(register, 0x18, 1) COPY (const, 0x1, 1)]
[(unique, 0x3200, 8) CAST (unique, 0x10001173, 8), (unique, 0x10001173, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffb78, 8)]
[ ---  BRANCH (ram, 0x207c76, 1)]
[(unique, 0x100010ba, 1) COPY (stack, 0xfffffffffffffb3a, 1)]
[ ---  CBRANCH (ram, 0x208738, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbc80, 4) , (const, 0x2, 4)]
[(unique, 0x100010b9, 1) COPY (stack, 0xfffffffffffffb3b, 1)]
[ ---  CBRANCH (ram, 0x20855d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbc80, 4) , (const, 0xa, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffc08, 8) MULTIEQUAL (stack, 0xfffffffffffffc08, 8) , (stack, 0xfffffffffffffc08, 8)]
[(stack, 0xfffffffffffffc00, 8) MULTIEQUAL (stack, 0xfffffffffffffc00, 8) , (stack, 0xfffffffffffffc00, 8)]
[(stack, 0xfffffffffffffbbc, 4) MULTIEQUAL (stack, 0xfffffffffffffbbc, 4) , (stack, 0xfffffffffffffbbc, 4)]
[(stack, 0xfffffffffffffbb8, 4) MULTIEQUAL (stack, 0xfffffffffffffbb8, 4) , (stack, 0xfffffffffffffbb8, 4)]
[(stack, 0xfffffffffffffba8, 16) MULTIEQUAL (stack, 0xfffffffffffffba8, 16) , (stack, 0xfffffffffffffba8, 16)]
[(stack, 0xfffffffffffffba4, 4) MULTIEQUAL (stack, 0xfffffffffffffba4, 4) , (stack, 0xfffffffffffffba4, 4)]
[(stack, 0xfffffffffffffba0, 4) MULTIEQUAL (stack, 0xfffffffffffffba0, 4) , (stack, 0xfffffffffffffba0, 4)]
[(stack, 0xfffffffffffffb9c, 4) MULTIEQUAL (stack, 0xfffffffffffffb9c, 4) , (stack, 0xfffffffffffffb9c, 4)]
[(stack, 0xfffffffffffffb98, 4) MULTIEQUAL (stack, 0xfffffffffffffb98, 4) , (stack, 0xfffffffffffffb98, 4)]
[(stack, 0xfffffffffffffb94, 4) MULTIEQUAL (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4)]
[(stack, 0xfffffffffffffb90, 4) MULTIEQUAL (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4)]
[(stack, 0xfffffffffffffb8c, 4) MULTIEQUAL (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4)]
[(stack, 0xfffffffffffffb88, 4) MULTIEQUAL (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4)]
[(stack, 0xfffffffffffffb84, 4) MULTIEQUAL (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4)]
[(stack, 0xfffffffffffffb80, 4) MULTIEQUAL (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4)]
[(stack, 0xfffffffffffffb7c, 4) MULTIEQUAL (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb70, 4) MULTIEQUAL (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4)]
[(stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb60, 4) MULTIEQUAL (stack, 0xfffffffffffffb60, 4) , (stack, 0xfffffffffffffb60, 4)]
[(stack, 0xfffffffffffffb58, 8) MULTIEQUAL (stack, 0xfffffffffffffb58, 8) , (stack, 0xfffffffffffffb58, 8)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb40, 8) MULTIEQUAL (stack, 0xfffffffffffffb40, 8) , (stack, 0xfffffffffffffb40, 8)]
[(stack, 0xfffffffffffffb3c, 4) MULTIEQUAL (stack, 0xfffffffffffffb3c, 4) , (stack, 0xfffffffffffffb3c, 4)]
[(stack, 0xfffffffffffffb3b, 1) MULTIEQUAL (stack, 0xfffffffffffffb3b, 1) , (stack, 0xfffffffffffffb3b, 1)]
[(stack, 0xfffffffffffffb3a, 1) MULTIEQUAL (stack, 0xfffffffffffffb3a, 1) , (stack, 0xfffffffffffffb3a, 1)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb20, 8) MULTIEQUAL (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb10, 4) MULTIEQUAL (stack, 0xfffffffffffffb10, 4) , (stack, 0xfffffffffffffb10, 4)]
[(stack, 0xfffffffffffffb0f, 1) MULTIEQUAL (stack, 0xfffffffffffffb0f, 1) , (stack, 0xfffffffffffffb0f, 1)]
[(stack, 0xfffffffffffffb08, 4) MULTIEQUAL (stack, 0xfffffffffffffb08, 4) , (stack, 0xfffffffffffffb08, 4)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae4, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[(stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffad8, 8) MULTIEQUAL (stack, 0xfffffffffffffad8, 8) , (stack, 0xfffffffffffffad8, 8)]
[(stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffac8, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffac4, 4) MULTIEQUAL (stack, 0xfffffffffffffac4, 4) , (stack, 0xfffffffffffffac4, 4)]
[(ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(ram, 0x4f08e8, 4) MULTIEQUAL (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4)]
[(ram, 0x4f0870, 8) MULTIEQUAL (ram, 0x4f0870, 8) , (ram, 0x4f0870, 8)]
[(ram, 0x4ee064, 4) MULTIEQUAL (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4)]
[(ram, 0x4ee060, 4) MULTIEQUAL (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4)]
[(ram, 0x4ee058, 8) MULTIEQUAL (ram, 0x4ee058, 8) , (ram, 0x4ee058, 8)]
[(ram, 0x4ee050, 8) MULTIEQUAL (ram, 0x4ee050, 8) , (ram, 0x4ee050, 8)]
[(ram, 0x4ee044, 4) MULTIEQUAL (ram, 0x4ee044, 4) , (ram, 0x4ee044, 4)]
[(ram, 0x4ee040, 4) MULTIEQUAL (ram, 0x4ee040, 4) , (ram, 0x4ee040, 4)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x20a, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xa0, 8) MULTIEQUAL (register, 0x10, 8) , (register, 0xa0, 8)]
[(unique, 0x100010b7, 1) COPY (register, 0x18, 1), (register, 0x18, 1) COPY (const, 0x1, 1)]
[ ---  BRANCH (ram, 0x207c76, 1)]
[(unique, 0x100010b6, 1) COPY (unique, 0x10000df9, 1), (unique, 0x10000df9, 1) MULTIEQUAL (unique, 0x100010ba, 1) , (unique, 0x100010b9, 1)]
[ ---  CBRANCH (ram, 0x207c76, 1) , (unique, 0x10000df8, 1), (unique, 0x10000df8, 1) INT_NOTEQUAL (unique, 0x10000df9, 1) , (const, 0x0, 1), (unique, 0x10000df9, 1) MULTIEQUAL (unique, 0x100010ba, 1) , (unique, 0x100010b9, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffc08, 8) MULTIEQUAL (stack, 0xfffffffffffffc08, 8) , (stack, 0xfffffffffffffc08, 8) , (stack, 0xfffffffffffffc08, 8) , (stack, 0xfffffffffffffc08, 8) , (stack, 0xfffffffffffffc08, 8)]
[(stack, 0xfffffffffffffc00, 8) MULTIEQUAL (stack, 0xfffffffffffffc00, 8) , (stack, 0xfffffffffffffc00, 8) , (stack, 0xfffffffffffffc00, 8) , (stack, 0xfffffffffffffc00, 8) , (stack, 0xfffffffffffffc00, 8)]
[(stack, 0xfffffffffffffbbc, 4) MULTIEQUAL (stack, 0xfffffffffffffbbc, 4) , (stack, 0xfffffffffffffbbc, 4) , (stack, 0xfffffffffffffbbc, 4) , (stack, 0xfffffffffffffbbc, 4) , (stack, 0xfffffffffffffbbc, 4)]
[(stack, 0xfffffffffffffbb8, 4) MULTIEQUAL (stack, 0xfffffffffffffbb8, 4) , (stack, 0xfffffffffffffbb8, 4) , (stack, 0xfffffffffffffbb8, 4) , (stack, 0xfffffffffffffbb8, 4) , (stack, 0xfffffffffffffbb8, 4)]
[(stack, 0xfffffffffffffba8, 16) MULTIEQUAL (stack, 0xfffffffffffffba8, 16) , (stack, 0xfffffffffffffba8, 16) , (stack, 0xfffffffffffffba8, 16) , (stack, 0xfffffffffffffba8, 16) , (stack, 0xfffffffffffffba8, 16)]
[(stack, 0xfffffffffffffba4, 4) MULTIEQUAL (stack, 0xfffffffffffffba4, 4) , (stack, 0xfffffffffffffba4, 4) , (stack, 0xfffffffffffffba4, 4) , (stack, 0xfffffffffffffba4, 4) , (stack, 0xfffffffffffffba4, 4)]
[(stack, 0xfffffffffffffba0, 4) MULTIEQUAL (stack, 0xfffffffffffffba0, 4) , (stack, 0xfffffffffffffba0, 4) , (stack, 0xfffffffffffffba0, 4) , (stack, 0xfffffffffffffba0, 4) , (stack, 0xfffffffffffffba0, 4)]
[(stack, 0xfffffffffffffb9c, 4) MULTIEQUAL (stack, 0xfffffffffffffb9c, 4) , (stack, 0xfffffffffffffb9c, 4) , (stack, 0xfffffffffffffb9c, 4) , (stack, 0xfffffffffffffb9c, 4) , (stack, 0xfffffffffffffb9c, 4)]
[(stack, 0xfffffffffffffb98, 4) MULTIEQUAL (stack, 0xfffffffffffffb98, 4) , (stack, 0xfffffffffffffb98, 4) , (stack, 0xfffffffffffffb98, 4) , (stack, 0xfffffffffffffb98, 4) , (stack, 0xfffffffffffffb98, 4)]
[(stack, 0xfffffffffffffb94, 4) MULTIEQUAL (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4)]
[(stack, 0xfffffffffffffb90, 4) MULTIEQUAL (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4)]
[(stack, 0xfffffffffffffb8c, 4) MULTIEQUAL (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4)]
[(stack, 0xfffffffffffffb88, 4) MULTIEQUAL (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4)]
[(stack, 0xfffffffffffffb84, 4) MULTIEQUAL (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4)]
[(stack, 0xfffffffffffffb80, 4) MULTIEQUAL (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4)]
[(stack, 0xfffffffffffffb7c, 4) MULTIEQUAL (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb70, 4) MULTIEQUAL (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4)]
[(stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb60, 4) MULTIEQUAL (stack, 0xfffffffffffffb60, 4) , (stack, 0xfffffffffffffb60, 4) , (stack, 0xfffffffffffffb60, 4) , (stack, 0xfffffffffffffb60, 4) , (stack, 0xfffffffffffffb60, 4)]
[(stack, 0xfffffffffffffb58, 8) MULTIEQUAL (stack, 0xfffffffffffffb58, 8) , (stack, 0xfffffffffffffb58, 8) , (stack, 0xfffffffffffffb58, 8) , (stack, 0xfffffffffffffb58, 8) , (stack, 0xfffffffffffffb58, 8)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb40, 8) MULTIEQUAL (stack, 0xfffffffffffffb40, 8) , (stack, 0xfffffffffffffb40, 8) , (stack, 0xfffffffffffffb40, 8) , (stack, 0xfffffffffffffb40, 8) , (stack, 0xfffffffffffffb40, 8)]
[(stack, 0xfffffffffffffb3c, 4) MULTIEQUAL (stack, 0xfffffffffffffb3c, 4) , (stack, 0xfffffffffffffb3c, 4) , (stack, 0xfffffffffffffb3c, 4) , (stack, 0xfffffffffffffb3c, 4) , (stack, 0xfffffffffffffb3c, 4)]
[(stack, 0xfffffffffffffb3b, 1) MULTIEQUAL (stack, 0xfffffffffffffb3b, 1) , (stack, 0xfffffffffffffb3b, 1) , (stack, 0xfffffffffffffb3b, 1) , (stack, 0xfffffffffffffb3b, 1) , (stack, 0xfffffffffffffb3b, 1)]
[(stack, 0xfffffffffffffb3a, 1) MULTIEQUAL (stack, 0xfffffffffffffb3a, 1) , (stack, 0xfffffffffffffb3a, 1) , (stack, 0xfffffffffffffb3a, 1) , (stack, 0xfffffffffffffb3a, 1) , (stack, 0xfffffffffffffb3a, 1)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb20, 8) MULTIEQUAL (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb10, 4) MULTIEQUAL (stack, 0xfffffffffffffb10, 4) , (stack, 0xfffffffffffffb10, 4) , (stack, 0xfffffffffffffb10, 4) , (stack, 0xfffffffffffffb10, 4) , (stack, 0xfffffffffffffb10, 4)]
[(stack, 0xfffffffffffffb0f, 1) MULTIEQUAL (stack, 0xfffffffffffffb0f, 1) , (stack, 0xfffffffffffffb0f, 1) , (stack, 0xfffffffffffffb0f, 1) , (stack, 0xfffffffffffffb0f, 1) , (stack, 0xfffffffffffffb0f, 1)]
[(stack, 0xfffffffffffffb08, 4) MULTIEQUAL (stack, 0xfffffffffffffb08, 4) , (stack, 0xfffffffffffffb08, 4) , (stack, 0xfffffffffffffb08, 4) , (stack, 0xfffffffffffffb08, 4) , (stack, 0xfffffffffffffb08, 4)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae4, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[(stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffad8, 8) MULTIEQUAL (stack, 0xfffffffffffffad8, 8) , (stack, 0xfffffffffffffad8, 8) , (stack, 0xfffffffffffffad8, 8) , (stack, 0xfffffffffffffad8, 8) , (stack, 0xfffffffffffffad8, 8)]
[(stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffac8, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffac4, 4) MULTIEQUAL (stack, 0xfffffffffffffac4, 4) , (stack, 0xfffffffffffffac4, 4) , (stack, 0xfffffffffffffac4, 4) , (stack, 0xfffffffffffffac4, 4) , (stack, 0xfffffffffffffac4, 4)]
[(ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(ram, 0x4f08e8, 4) MULTIEQUAL (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4)]
[(ram, 0x4f0870, 8) MULTIEQUAL (ram, 0x4f0870, 8) , (ram, 0x4f0870, 8) , (ram, 0x4f0870, 8) , (ram, 0x4f0870, 8) , (ram, 0x4f0870, 8)]
[(ram, 0x4ee064, 4) MULTIEQUAL (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4)]
[(ram, 0x4ee060, 4) MULTIEQUAL (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4)]
[(ram, 0x4ee058, 8) MULTIEQUAL (ram, 0x4ee058, 8) , (ram, 0x4ee058, 8) , (ram, 0x4ee058, 8) , (ram, 0x4ee058, 8) , (ram, 0x4ee058, 8)]
[(ram, 0x4ee050, 8) MULTIEQUAL (ram, 0x4ee050, 8) , (ram, 0x4ee050, 8) , (ram, 0x4ee050, 8) , (ram, 0x4ee050, 8) , (ram, 0x4ee050, 8)]
[(ram, 0x4ee044, 4) MULTIEQUAL (ram, 0x4ee044, 4) , (ram, 0x4ee044, 4) , (ram, 0x4ee044, 4) , (ram, 0x4ee044, 4) , (ram, 0x4ee044, 4)]
[(ram, 0x4ee040, 4) MULTIEQUAL (ram, 0x4ee040, 4) , (ram, 0x4ee040, 4) , (ram, 0x4ee040, 4) , (ram, 0x4ee040, 4) , (ram, 0x4ee040, 4)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x18, 1) MULTIEQUAL (unique, 0x100010b5, 1) , (unique, 0x100010b6, 1) , (unique, 0x100010b7, 1) , (unique, 0x100010b8, 1) , (register, 0x18, 1)]
[(register, 0x20a, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1) , (register, 0x20a, 1) , (register, 0x20a, 1) , (register, 0x20a, 1)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xa0, 8) MULTIEQUAL (register, 0x10, 8) , (register, 0x10, 8) , (register, 0xa0, 8) , (register, 0xa0, 8) , (unique, 0x3200, 8)]
[(register, 0x30, 8) COPY (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x207c88, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xa8, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x208058, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0xa8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x903, 4)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x903, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x903, 4)]
[(ram, 0x4ee040, 4) INDIRECT (ram, 0x4ee040, 4) , (const, 0x903, 4)]
[(ram, 0x4ee044, 4) INDIRECT (ram, 0x4ee044, 4) , (const, 0x903, 4)]
[(ram, 0x4ee050, 8) INDIRECT (ram, 0x4ee050, 8) , (const, 0x903, 4)]
[(ram, 0x4ee058, 8) INDIRECT (ram, 0x4ee058, 8) , (const, 0x903, 4)]
[(ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x903, 4)]
[(ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x903, 4)]
[(ram, 0x4f0870, 8) INDIRECT (ram, 0x4f0870, 8) , (const, 0x903, 4)]
[(ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x903, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x903, 4)]
[(stack, 0xfffffffffffffac4, 4) INDIRECT (stack, 0xfffffffffffffac4, 4) , (const, 0x903, 4)]
[(stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x903, 4)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x903, 4)]
[(stack, 0xfffffffffffffad8, 8) INDIRECT (stack, 0xfffffffffffffad8, 8) , (const, 0x903, 4)]
[(stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x903, 4)]
[(stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x903, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x903, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x903, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x903, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x903, 4)]
[(stack, 0xfffffffffffffb08, 4) INDIRECT (stack, 0xfffffffffffffb08, 4) , (const, 0x903, 4)]
[(stack, 0xfffffffffffffb0f, 1) INDIRECT (stack, 0xfffffffffffffb0f, 1) , (const, 0x903, 4)]
[(stack, 0xfffffffffffffb10, 4) INDIRECT (stack, 0xfffffffffffffb10, 4) , (const, 0x903, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x903, 4)]
[(stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x903, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x903, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x903, 4)]
[(stack, 0xfffffffffffffb3a, 1) INDIRECT (stack, 0xfffffffffffffb3a, 1) , (const, 0x903, 4)]
[(stack, 0xfffffffffffffb3b, 1) INDIRECT (stack, 0xfffffffffffffb3b, 1) , (const, 0x903, 4)]
[(stack, 0xfffffffffffffb3c, 4) INDIRECT (stack, 0xfffffffffffffb3c, 4) , (const, 0x903, 4)]
[(stack, 0xfffffffffffffb40, 8) INDIRECT (stack, 0xfffffffffffffb40, 8) , (const, 0x903, 4)]
[(stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x903, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x903, 4)]
[(stack, 0xfffffffffffffb58, 8) INDIRECT (unique, 0x100010ad, 8) , (const, 0x903, 4), (unique, 0x100010ad, 8) COPY (register, 0xa8, 8)]
[(stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x903, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x903, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x903, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x903, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x903, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x903, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x903, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x903, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x903, 4)]
[(stack, 0xfffffffffffffb98, 4) INDIRECT (stack, 0xfffffffffffffb98, 4) , (const, 0x903, 4)]
[(stack, 0xfffffffffffffb9c, 4) INDIRECT (stack, 0xfffffffffffffb9c, 4) , (const, 0x903, 4)]
[(stack, 0xfffffffffffffba0, 4) INDIRECT (stack, 0xfffffffffffffba0, 4) , (const, 0x903, 4)]
[(stack, 0xfffffffffffffba4, 4) INDIRECT (stack, 0xfffffffffffffba4, 4) , (const, 0x903, 4)]
[(stack, 0xfffffffffffffba8, 16) INDIRECT (stack, 0xfffffffffffffba8, 16) , (const, 0x903, 4)]
[(stack, 0xfffffffffffffbb8, 4) INDIRECT (stack, 0xfffffffffffffbb8, 4) , (const, 0x903, 4)]
[(stack, 0xfffffffffffffbbc, 4) INDIRECT (stack, 0xfffffffffffffbbc, 4) , (const, 0x903, 4)]
[(stack, 0xfffffffffffffc00, 8) INDIRECT (stack, 0xfffffffffffffc00, 8) , (const, 0x903, 4)]
[(stack, 0xfffffffffffffc08, 8) INDIRECT (stack, 0xfffffffffffffc08, 8) , (const, 0x903, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x903, 4)]
[(stack, 0xfffffffffffffb60, 4) COPY (register, 0x0, 4), (register, 0x0, 4) SUBPIECE (register, 0x0, 8) , (const, 0x0, 4), (register, 0x0, 8) CALL (ram, 0x145140, 8) , (register, 0xa8, 8) , (unique, 0x1000117b, 8) , (const, 0xa, 4), (unique, 0x1000117b, 8) CAST (unique, 0x3200, 8), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffb68, 8)]
[ ---  CBRANCH (ram, 0x20809d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (stack, 0xfffffffffffffb68, 8), (stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x903, 4)]
[ ---  CBRANCH (ram, 0x208721, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x58e00, 4) , (const, 0x0, 4), (unique, 0x58e00, 4) INT_AND (unique, 0xbd00, 4) , (const, 0x400, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000878, 8), (unique, 0x10000878, 8) PTRSUB (register, 0xa0, 8) , (const, 0x0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x92e, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x92e, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4ee040, 4) INDIRECT (ram, 0x4ee040, 4) , (const, 0x92e, 4), (ram, 0x4ee040, 4) MULTIEQUAL (ram, 0x4ee040, 4) , (ram, 0x4ee040, 4)]
[(ram, 0x4ee044, 4) INDIRECT (ram, 0x4ee044, 4) , (const, 0x92e, 4), (ram, 0x4ee044, 4) MULTIEQUAL (ram, 0x4ee044, 4) , (ram, 0x4ee044, 4)]
[(ram, 0x4ee050, 8) INDIRECT (ram, 0x4ee050, 8) , (const, 0x92e, 4), (ram, 0x4ee050, 8) MULTIEQUAL (ram, 0x4ee050, 8) , (ram, 0x4ee050, 8)]
[(ram, 0x4ee058, 8) INDIRECT (ram, 0x4ee058, 8) , (const, 0x92e, 4), (ram, 0x4ee058, 8) MULTIEQUAL (ram, 0x4ee058, 8) , (ram, 0x4ee058, 8)]
[(ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x92e, 4), (ram, 0x4ee060, 4) MULTIEQUAL (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4)]
[(ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x92e, 4), (ram, 0x4ee064, 4) MULTIEQUAL (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4)]
[(ram, 0x4f0870, 8) INDIRECT (ram, 0x4f0870, 8) , (const, 0x92e, 4), (ram, 0x4f0870, 8) MULTIEQUAL (ram, 0x4f0870, 8) , (ram, 0x4f0870, 8)]
[(ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x92e, 4), (ram, 0x4f08e8, 4) MULTIEQUAL (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x92e, 4), (ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(stack, 0xfffffffffffffac4, 4) INDIRECT (stack, 0xfffffffffffffac4, 4) , (const, 0x92e, 4), (stack, 0xfffffffffffffac4, 4) MULTIEQUAL (stack, 0xfffffffffffffac4, 4) , (stack, 0xfffffffffffffac4, 4)]
[(stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x92e, 4), (stack, 0xfffffffffffffac8, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x92e, 4), (stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffad8, 8) INDIRECT (stack, 0xfffffffffffffad8, 8) , (const, 0x92e, 4), (stack, 0xfffffffffffffad8, 8) MULTIEQUAL (stack, 0xfffffffffffffad8, 8) , (stack, 0xfffffffffffffad8, 8)]
[(stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x92e, 4), (stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x92e, 4), (stack, 0xfffffffffffffae4, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x92e, 4), (stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x92e, 4), (stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x92e, 4), (stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x92e, 4), (stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffb08, 4) INDIRECT (stack, 0xfffffffffffffb08, 4) , (const, 0x92e, 4), (stack, 0xfffffffffffffb08, 4) MULTIEQUAL (stack, 0xfffffffffffffb08, 4) , (stack, 0xfffffffffffffb08, 4)]
[(stack, 0xfffffffffffffb0f, 1) INDIRECT (stack, 0xfffffffffffffb0f, 1) , (const, 0x92e, 4), (stack, 0xfffffffffffffb0f, 1) MULTIEQUAL (stack, 0xfffffffffffffb0f, 1) , (stack, 0xfffffffffffffb0f, 1)]
[(stack, 0xfffffffffffffb10, 4) INDIRECT (stack, 0xfffffffffffffb10, 4) , (const, 0x92e, 4), (stack, 0xfffffffffffffb10, 4) MULTIEQUAL (stack, 0xfffffffffffffb10, 4) , (stack, 0xfffffffffffffb10, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x92e, 4), (stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x92e, 4), (stack, 0xfffffffffffffb20, 8) MULTIEQUAL (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x92e, 4), (stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x92e, 4), (stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb3a, 1) INDIRECT (stack, 0xfffffffffffffb3a, 1) , (const, 0x92e, 4), (stack, 0xfffffffffffffb3a, 1) MULTIEQUAL (stack, 0xfffffffffffffb3a, 1) , (stack, 0xfffffffffffffb3a, 1)]
[(stack, 0xfffffffffffffb3b, 1) INDIRECT (stack, 0xfffffffffffffb3b, 1) , (const, 0x92e, 4), (stack, 0xfffffffffffffb3b, 1) MULTIEQUAL (stack, 0xfffffffffffffb3b, 1) , (stack, 0xfffffffffffffb3b, 1)]
[(stack, 0xfffffffffffffb3c, 4) INDIRECT (stack, 0xfffffffffffffb3c, 4) , (const, 0x92e, 4), (stack, 0xfffffffffffffb3c, 4) MULTIEQUAL (stack, 0xfffffffffffffb3c, 4) , (stack, 0xfffffffffffffb3c, 4)]
[(stack, 0xfffffffffffffb40, 8) INDIRECT (stack, 0xfffffffffffffb40, 8) , (const, 0x92e, 4), (stack, 0xfffffffffffffb40, 8) MULTIEQUAL (stack, 0xfffffffffffffb40, 8) , (stack, 0xfffffffffffffb40, 8)]
[(stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x92e, 4), (stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x92e, 4), (stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x92e, 4), (stack, 0xfffffffffffffb58, 8) MULTIEQUAL (stack, 0xfffffffffffffb58, 8) , (stack, 0xfffffffffffffb58, 8)]
[(stack, 0xfffffffffffffb60, 4) INDIRECT (stack, 0xfffffffffffffb60, 4) , (const, 0x92e, 4), (stack, 0xfffffffffffffb60, 4) MULTIEQUAL (stack, 0xfffffffffffffb60, 4) , (stack, 0xfffffffffffffb60, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x92e, 4), (stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x92e, 4), (stack, 0xfffffffffffffb70, 4) MULTIEQUAL (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x92e, 4), (stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x92e, 4), (stack, 0xfffffffffffffb7c, 4) MULTIEQUAL (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x92e, 4), (stack, 0xfffffffffffffb80, 4) MULTIEQUAL (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x92e, 4), (stack, 0xfffffffffffffb84, 4) MULTIEQUAL (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x92e, 4), (stack, 0xfffffffffffffb88, 4) MULTIEQUAL (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x92e, 4), (stack, 0xfffffffffffffb8c, 4) MULTIEQUAL (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x92e, 4), (stack, 0xfffffffffffffb90, 4) MULTIEQUAL (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x92e, 4), (stack, 0xfffffffffffffb94, 4) MULTIEQUAL (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4)]
[(stack, 0xfffffffffffffb98, 4) INDIRECT (stack, 0xfffffffffffffb98, 4) , (const, 0x92e, 4), (stack, 0xfffffffffffffb98, 4) MULTIEQUAL (stack, 0xfffffffffffffb98, 4) , (stack, 0xfffffffffffffb98, 4)]
[(stack, 0xfffffffffffffb9c, 4) INDIRECT (stack, 0xfffffffffffffb9c, 4) , (const, 0x92e, 4), (stack, 0xfffffffffffffb9c, 4) MULTIEQUAL (stack, 0xfffffffffffffb9c, 4) , (stack, 0xfffffffffffffb9c, 4)]
[(stack, 0xfffffffffffffba0, 4) INDIRECT (stack, 0xfffffffffffffba0, 4) , (const, 0x92e, 4), (stack, 0xfffffffffffffba0, 4) MULTIEQUAL (stack, 0xfffffffffffffba0, 4) , (stack, 0xfffffffffffffba0, 4)]
[(stack, 0xfffffffffffffba4, 4) INDIRECT (stack, 0xfffffffffffffba4, 4) , (const, 0x92e, 4), (stack, 0xfffffffffffffba4, 4) MULTIEQUAL (stack, 0xfffffffffffffba4, 4) , (stack, 0xfffffffffffffba4, 4)]
[(stack, 0xfffffffffffffba8, 16) INDIRECT (stack, 0xfffffffffffffba8, 16) , (const, 0x92e, 4), (stack, 0xfffffffffffffba8, 16) MULTIEQUAL (stack, 0xfffffffffffffba8, 16) , (stack, 0xfffffffffffffba8, 16)]
[(stack, 0xfffffffffffffbb8, 4) INDIRECT (stack, 0xfffffffffffffbb8, 4) , (const, 0x92e, 4), (stack, 0xfffffffffffffbb8, 4) MULTIEQUAL (stack, 0xfffffffffffffbb8, 4) , (stack, 0xfffffffffffffbb8, 4)]
[(stack, 0xfffffffffffffbbc, 4) INDIRECT (stack, 0xfffffffffffffbbc, 4) , (const, 0x92e, 4), (stack, 0xfffffffffffffbbc, 4) MULTIEQUAL (stack, 0xfffffffffffffbbc, 4) , (stack, 0xfffffffffffffbbc, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x92e, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CALL (ram, 0x241ec0, 8) , (stack, 0xfffffffffffffb48, 8), (stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(unique, 0x10000f95, 8) COPY (register, 0x20, 8)]
[ ---  BRANCH (ram, 0x208048, 1)]
[(stack, 0xfffffffffffffb60, 4) COPY (const, 0xffffffff, 4)]
[(stack, 0xfffffffffffffb60, 4) MULTIEQUAL (stack, 0xfffffffffffffb60, 4) , (stack, 0xfffffffffffffb60, 4)]
[(unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffb58, 8)]
[ ---  BRANCH (ram, 0x207c88, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffc08, 8) MULTIEQUAL (stack, 0xfffffffffffffc08, 8) , (stack, 0xfffffffffffffc08, 8) , (stack, 0xfffffffffffffc08, 8)]
[(stack, 0xfffffffffffffc00, 8) MULTIEQUAL (stack, 0xfffffffffffffc00, 8) , (stack, 0xfffffffffffffc00, 8) , (stack, 0xfffffffffffffc00, 8)]
[(stack, 0xfffffffffffffbbc, 4) MULTIEQUAL (stack, 0xfffffffffffffbbc, 4) , (stack, 0xfffffffffffffbbc, 4) , (stack, 0xfffffffffffffbbc, 4)]
[(stack, 0xfffffffffffffbb8, 4) MULTIEQUAL (stack, 0xfffffffffffffbb8, 4) , (stack, 0xfffffffffffffbb8, 4) , (stack, 0xfffffffffffffbb8, 4)]
[(stack, 0xfffffffffffffba8, 16) MULTIEQUAL (stack, 0xfffffffffffffba8, 16) , (stack, 0xfffffffffffffba8, 16) , (stack, 0xfffffffffffffba8, 16)]
[(stack, 0xfffffffffffffba4, 4) MULTIEQUAL (stack, 0xfffffffffffffba4, 4) , (stack, 0xfffffffffffffba4, 4) , (stack, 0xfffffffffffffba4, 4)]
[(stack, 0xfffffffffffffba0, 4) MULTIEQUAL (stack, 0xfffffffffffffba0, 4) , (stack, 0xfffffffffffffba0, 4) , (stack, 0xfffffffffffffba0, 4)]
[(stack, 0xfffffffffffffb9c, 4) MULTIEQUAL (stack, 0xfffffffffffffb9c, 4) , (stack, 0xfffffffffffffb9c, 4) , (stack, 0xfffffffffffffb9c, 4)]
[(stack, 0xfffffffffffffb98, 4) MULTIEQUAL (stack, 0xfffffffffffffb98, 4) , (stack, 0xfffffffffffffb98, 4) , (stack, 0xfffffffffffffb98, 4)]
[(stack, 0xfffffffffffffb94, 4) MULTIEQUAL (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4)]
[(stack, 0xfffffffffffffb90, 4) MULTIEQUAL (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4)]
[(stack, 0xfffffffffffffb8c, 4) MULTIEQUAL (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4)]
[(stack, 0xfffffffffffffb88, 4) MULTIEQUAL (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4)]
[(stack, 0xfffffffffffffb84, 4) MULTIEQUAL (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4)]
[(stack, 0xfffffffffffffb80, 4) MULTIEQUAL (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4)]
[(stack, 0xfffffffffffffb7c, 4) MULTIEQUAL (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb70, 4) MULTIEQUAL (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4)]
[(stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb60, 4) MULTIEQUAL (stack, 0xfffffffffffffb60, 4) , (stack, 0xfffffffffffffb60, 4) , (stack, 0xfffffffffffffb60, 4)]
[(stack, 0xfffffffffffffb58, 8) MULTIEQUAL (stack, 0xfffffffffffffb58, 8) , (stack, 0xfffffffffffffb58, 8) , (stack, 0xfffffffffffffb58, 8)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb40, 8) MULTIEQUAL (stack, 0xfffffffffffffb40, 8) , (stack, 0xfffffffffffffb40, 8) , (stack, 0xfffffffffffffb40, 8)]
[(stack, 0xfffffffffffffb3b, 1) MULTIEQUAL (stack, 0xfffffffffffffb3b, 1) , (stack, 0xfffffffffffffb3b, 1) , (stack, 0xfffffffffffffb3b, 1)]
[(stack, 0xfffffffffffffb3a, 1) MULTIEQUAL (stack, 0xfffffffffffffb3a, 1) , (stack, 0xfffffffffffffb3a, 1) , (stack, 0xfffffffffffffb3a, 1)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb20, 8) MULTIEQUAL (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb10, 4) MULTIEQUAL (stack, 0xfffffffffffffb10, 4) , (stack, 0xfffffffffffffb10, 4) , (stack, 0xfffffffffffffb10, 4)]
[(stack, 0xfffffffffffffb0f, 1) MULTIEQUAL (stack, 0xfffffffffffffb0f, 1) , (stack, 0xfffffffffffffb0f, 1) , (stack, 0xfffffffffffffb0f, 1)]
[(stack, 0xfffffffffffffb08, 4) MULTIEQUAL (stack, 0xfffffffffffffb08, 4) , (stack, 0xfffffffffffffb08, 4) , (stack, 0xfffffffffffffb08, 4)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae4, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[(stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffad8, 8) MULTIEQUAL (stack, 0xfffffffffffffad8, 8) , (stack, 0xfffffffffffffad8, 8) , (stack, 0xfffffffffffffad8, 8)]
[(stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffac8, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffac4, 4) MULTIEQUAL (stack, 0xfffffffffffffac4, 4) , (stack, 0xfffffffffffffac4, 4) , (stack, 0xfffffffffffffac4, 4)]
[(ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(ram, 0x4f08e8, 4) MULTIEQUAL (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4)]
[(ram, 0x4f0870, 8) MULTIEQUAL (ram, 0x4f0870, 8) , (ram, 0x4f0870, 8) , (ram, 0x4f0870, 8)]
[(ram, 0x4ee064, 4) MULTIEQUAL (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4)]
[(ram, 0x4ee060, 4) MULTIEQUAL (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4)]
[(ram, 0x4ee058, 8) MULTIEQUAL (ram, 0x4ee058, 8) , (ram, 0x4ee058, 8) , (ram, 0x4ee058, 8)]
[(ram, 0x4ee050, 8) MULTIEQUAL (ram, 0x4ee050, 8) , (ram, 0x4ee050, 8) , (ram, 0x4ee050, 8)]
[(ram, 0x4ee044, 4) MULTIEQUAL (ram, 0x4ee044, 4) , (ram, 0x4ee044, 4) , (ram, 0x4ee044, 4)]
[(ram, 0x4ee040, 4) MULTIEQUAL (ram, 0x4ee040, 4) , (ram, 0x4ee040, 4) , (ram, 0x4ee040, 4)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x20a, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1) , (register, 0x20a, 1)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x30, 8) MULTIEQUAL (register, 0x30, 8) , (register, 0x30, 8) , (unique, 0x3200, 8)]
[(stack, 0xfffffffffffffb3c, 4) COPY (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x207ca7, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x58a00, 4) , (const, 0x0, 4), (unique, 0x58a00, 4) INT_AND (unique, 0xbc80, 4) , (const, 0xfffffffd, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRSUB (register, 0xa0, 8) , (const, 0x4, 8)]
[ ---  CBRANCH (ram, 0x2085df, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbc80, 4) , (const, 0xa, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x8f5, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x8f5, 4)]
[(ram, 0x4ee040, 4) INDIRECT (ram, 0x4ee040, 4) , (const, 0x8f5, 4)]
[(ram, 0x4ee044, 4) INDIRECT (ram, 0x4ee044, 4) , (const, 0x8f5, 4)]
[(ram, 0x4ee050, 8) INDIRECT (ram, 0x4ee050, 8) , (const, 0x8f5, 4)]
[(ram, 0x4ee058, 8) INDIRECT (ram, 0x4ee058, 8) , (const, 0x8f5, 4)]
[(ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x8f5, 4)]
[(ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x8f5, 4)]
[(ram, 0x4f0870, 8) INDIRECT (ram, 0x4f0870, 8) , (const, 0x8f5, 4)]
[(ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x8f5, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x8f5, 4)]
[(stack, 0xfffffffffffffac4, 4) INDIRECT (stack, 0xfffffffffffffac4, 4) , (const, 0x8f5, 4)]
[(stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x8f5, 4)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x8f5, 4)]
[(stack, 0xfffffffffffffad8, 8) INDIRECT (stack, 0xfffffffffffffad8, 8) , (const, 0x8f5, 4)]
[(stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x8f5, 4)]
[(stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x8f5, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x8f5, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x8f5, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x8f5, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x8f5, 4)]
[(stack, 0xfffffffffffffb08, 4) INDIRECT (stack, 0xfffffffffffffb08, 4) , (const, 0x8f5, 4)]
[(stack, 0xfffffffffffffb0f, 1) INDIRECT (stack, 0xfffffffffffffb0f, 1) , (const, 0x8f5, 4)]
[(stack, 0xfffffffffffffb10, 4) INDIRECT (stack, 0xfffffffffffffb10, 4) , (const, 0x8f5, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x8f5, 4)]
[(stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x8f5, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x8f5, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x8f5, 4)]
[(stack, 0xfffffffffffffb3a, 1) INDIRECT (stack, 0xfffffffffffffb3a, 1) , (const, 0x8f5, 4)]
[(stack, 0xfffffffffffffb3b, 1) INDIRECT (stack, 0xfffffffffffffb3b, 1) , (const, 0x8f5, 4)]
[(stack, 0xfffffffffffffb3c, 4) INDIRECT (stack, 0xfffffffffffffb3c, 4) , (const, 0x8f5, 4)]
[(stack, 0xfffffffffffffb40, 8) INDIRECT (stack, 0xfffffffffffffb40, 8) , (const, 0x8f5, 4)]
[(stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x8f5, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x8f5, 4)]
[(stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x8f5, 4)]
[(stack, 0xfffffffffffffb60, 4) INDIRECT (stack, 0xfffffffffffffb60, 4) , (const, 0x8f5, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x8f5, 4)]
[(stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x8f5, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x8f5, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x8f5, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x8f5, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x8f5, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x8f5, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x8f5, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x8f5, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x8f5, 4)]
[(stack, 0xfffffffffffffb98, 4) INDIRECT (stack, 0xfffffffffffffb98, 4) , (const, 0x8f5, 4)]
[(stack, 0xfffffffffffffb9c, 4) INDIRECT (stack, 0xfffffffffffffb9c, 4) , (const, 0x8f5, 4)]
[(stack, 0xfffffffffffffba0, 4) INDIRECT (stack, 0xfffffffffffffba0, 4) , (const, 0x8f5, 4)]
[(stack, 0xfffffffffffffba4, 4) INDIRECT (stack, 0xfffffffffffffba4, 4) , (const, 0x8f5, 4)]
[(stack, 0xfffffffffffffba8, 16) INDIRECT (stack, 0xfffffffffffffba8, 16) , (const, 0x8f5, 4)]
[(stack, 0xfffffffffffffbb8, 4) INDIRECT (stack, 0xfffffffffffffbb8, 4) , (const, 0x8f5, 4)]
[(stack, 0xfffffffffffffbbc, 4) INDIRECT (stack, 0xfffffffffffffbbc, 4) , (const, 0x8f5, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x8f5, 4)]
[ ---  CALL (ram, 0x241ec0, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb14, 4) COPY (const, 0xfffffffa, 4)]
[(unique, 0x10000f75, 8) COPY (register, 0x20, 8)]
[ ---  BRANCH (ram, 0x207ff1, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x108, 4)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x108, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x108, 4)]
[(ram, 0x4ee040, 4) INDIRECT (ram, 0x4ee040, 4) , (const, 0x108, 4)]
[(ram, 0x4ee044, 4) INDIRECT (ram, 0x4ee044, 4) , (const, 0x108, 4)]
[(ram, 0x4ee050, 8) INDIRECT (ram, 0x4ee050, 8) , (const, 0x108, 4)]
[(ram, 0x4ee058, 8) INDIRECT (ram, 0x4ee058, 8) , (const, 0x108, 4)]
[(ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x108, 4)]
[(ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x108, 4)]
[(ram, 0x4f0870, 8) INDIRECT (ram, 0x4f0870, 8) , (const, 0x108, 4)]
[(ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x108, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x108, 4)]
[(stack, 0xfffffffffffffac4, 4) INDIRECT (stack, 0xfffffffffffffac4, 4) , (const, 0x108, 4)]
[(stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x108, 4)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x108, 4)]
[(stack, 0xfffffffffffffad8, 8) INDIRECT (stack, 0xfffffffffffffad8, 8) , (const, 0x108, 4)]
[(stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x108, 4)]
[(stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x108, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x108, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x108, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x108, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x108, 4)]
[(stack, 0xfffffffffffffb08, 4) INDIRECT (stack, 0xfffffffffffffb08, 4) , (const, 0x108, 4)]
[(stack, 0xfffffffffffffb0f, 1) INDIRECT (stack, 0xfffffffffffffb0f, 1) , (const, 0x108, 4)]
[(stack, 0xfffffffffffffb10, 4) INDIRECT (stack, 0xfffffffffffffb10, 4) , (const, 0x108, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x108, 4)]
[(stack, 0xfffffffffffffb20, 8) INDIRECT (unique, 0x3200, 8) , (const, 0x108, 4), (unique, 0x3200, 8) CAST (unique, 0x10001183, 8), (unique, 0x10001183, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x108, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x108, 4)]
[(stack, 0xfffffffffffffb3a, 1) INDIRECT (stack, 0xfffffffffffffb3a, 1) , (const, 0x108, 4)]
[(stack, 0xfffffffffffffb3b, 1) INDIRECT (stack, 0xfffffffffffffb3b, 1) , (const, 0x108, 4)]
[(stack, 0xfffffffffffffb3c, 4) INDIRECT (stack, 0xfffffffffffffb3c, 4) , (const, 0x108, 4)]
[(stack, 0xfffffffffffffb40, 8) INDIRECT (stack, 0xfffffffffffffb40, 8) , (const, 0x108, 4)]
[(stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x108, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x108, 4)]
[(stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x108, 4)]
[(stack, 0xfffffffffffffb60, 4) INDIRECT (stack, 0xfffffffffffffb60, 4) , (const, 0x108, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x108, 4)]
[(stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x108, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x108, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x108, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x108, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x108, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x108, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x108, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x108, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x108, 4)]
[(stack, 0xfffffffffffffb98, 4) INDIRECT (stack, 0xfffffffffffffb98, 4) , (const, 0x108, 4)]
[(stack, 0xfffffffffffffb9c, 4) INDIRECT (stack, 0xfffffffffffffb9c, 4) , (const, 0x108, 4)]
[(stack, 0xfffffffffffffba0, 4) INDIRECT (stack, 0xfffffffffffffba0, 4) , (const, 0x108, 4)]
[(stack, 0xfffffffffffffba4, 4) INDIRECT (stack, 0xfffffffffffffba4, 4) , (const, 0x108, 4)]
[(stack, 0xfffffffffffffbb8, 4) INDIRECT (stack, 0xfffffffffffffbb8, 4) , (const, 0x108, 4)]
[(stack, 0xfffffffffffffbbc, 4) INDIRECT (stack, 0xfffffffffffffbbc, 4) , (const, 0x108, 4)]
[(stack, 0xfffffffffffffc00, 8) INDIRECT (stack, 0xfffffffffffffc00, 8) , (const, 0x108, 4)]
[(stack, 0xfffffffffffffc08, 8) INDIRECT (stack, 0xfffffffffffffc08, 8) , (const, 0x108, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x108, 4)]
[(stack, 0xfffffffffffffb14, 4) COPY (register, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x204ee0, 8) , (register, 0xb0, 8) , (register, 0x30, 8) , (register, 0xa0, 8)]
[ ---  CBRANCH (ram, 0x207cfb, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xfffffffffffffba8, 8) , (unique, 0x3100, 8), (stack, 0xfffffffffffffba8, 8) SUBPIECE (stack, 0xfffffffffffffba8, 16) , (const, 0x0, 8), (stack, 0xfffffffffffffba8, 16) INDIRECT (stack, 0xfffffffffffffba8, 16) , (const, 0x108, 4), (stack, 0xfffffffffffffba8, 16) INT_ADD (unique, 0x10000e2d, 16) , (unique, 0x1000118b, 8), (unique, 0x1000118b, 8) CAST (unique, 0x3100, 8), (unique, 0x10000e2d, 16) INT_LEFT (unique, 0x10000e1d, 16) , (const, 0x40, 16), (unique, 0x10000e1d, 16) INT_SEXT (const, 0x400, 8), (unique, 0x3100, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffbb8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x11b, 4)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x11b, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x11b, 4)]
[(ram, 0x4ee040, 4) INDIRECT (ram, 0x4ee040, 4) , (const, 0x11b, 4)]
[(ram, 0x4ee044, 4) INDIRECT (ram, 0x4ee044, 4) , (const, 0x11b, 4)]
[(ram, 0x4ee050, 8) INDIRECT (ram, 0x4ee050, 8) , (const, 0x11b, 4)]
[(ram, 0x4ee058, 8) INDIRECT (ram, 0x4ee058, 8) , (const, 0x11b, 4)]
[(ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x11b, 4)]
[(ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x11b, 4)]
[(ram, 0x4f0870, 8) INDIRECT (ram, 0x4f0870, 8) , (const, 0x11b, 4)]
[(ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x11b, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x11b, 4)]
[(stack, 0xfffffffffffffac4, 4) INDIRECT (stack, 0xfffffffffffffac4, 4) , (const, 0x11b, 4)]
[(stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x11b, 4)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x11b, 4)]
[(stack, 0xfffffffffffffad8, 8) INDIRECT (stack, 0xfffffffffffffad8, 8) , (const, 0x11b, 4)]
[(stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x11b, 4)]
[(stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x11b, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x11b, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x11b, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x11b, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x11b, 4)]
[(stack, 0xfffffffffffffb08, 4) INDIRECT (stack, 0xfffffffffffffb08, 4) , (const, 0x11b, 4)]
[(stack, 0xfffffffffffffb0f, 1) INDIRECT (stack, 0xfffffffffffffb0f, 1) , (const, 0x11b, 4)]
[(stack, 0xfffffffffffffb10, 4) INDIRECT (stack, 0xfffffffffffffb10, 4) , (const, 0x11b, 4)]
[(stack, 0xfffffffffffffb14, 4) INDIRECT (stack, 0xfffffffffffffb14, 4) , (const, 0x11b, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x11b, 4)]
[(stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x11b, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x11b, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x11b, 4)]
[(stack, 0xfffffffffffffb3a, 1) INDIRECT (stack, 0xfffffffffffffb3a, 1) , (const, 0x11b, 4)]
[(stack, 0xfffffffffffffb3b, 1) INDIRECT (stack, 0xfffffffffffffb3b, 1) , (const, 0x11b, 4)]
[(stack, 0xfffffffffffffb3c, 4) INDIRECT (stack, 0xfffffffffffffb3c, 4) , (const, 0x11b, 4)]
[(stack, 0xfffffffffffffb40, 8) INDIRECT (stack, 0xfffffffffffffb40, 8) , (const, 0x11b, 4)]
[(stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x11b, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x11b, 4)]
[(stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x11b, 4)]
[(stack, 0xfffffffffffffb60, 4) INDIRECT (stack, 0xfffffffffffffb60, 4) , (const, 0x11b, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x11b, 4)]
[(stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x11b, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x11b, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x11b, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x11b, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x11b, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x11b, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x11b, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x11b, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x11b, 4)]
[(stack, 0xfffffffffffffb98, 4) INDIRECT (stack, 0xfffffffffffffb98, 4) , (const, 0x11b, 4)]
[(stack, 0xfffffffffffffb9c, 4) INDIRECT (stack, 0xfffffffffffffb9c, 4) , (const, 0x11b, 4)]
[(stack, 0xfffffffffffffba0, 4) INDIRECT (stack, 0xfffffffffffffba0, 4) , (const, 0x11b, 4)]
[(stack, 0xfffffffffffffba4, 4) INDIRECT (stack, 0xfffffffffffffba4, 4) , (const, 0x11b, 4)]
[(stack, 0xfffffffffffffba8, 16) INDIRECT (stack, 0xfffffffffffffba8, 16) , (const, 0x11b, 4)]
[(stack, 0xfffffffffffffbb8, 4) INDIRECT (stack, 0xfffffffffffffbb8, 4) , (const, 0x11b, 4)]
[(stack, 0xfffffffffffffbbc, 4) INDIRECT (stack, 0xfffffffffffffbbc, 4) , (const, 0x11b, 4)]
[(stack, 0xfffffffffffffc00, 8) INDIRECT (stack, 0xfffffffffffffc00, 8) , (const, 0x11b, 4)]
[(stack, 0xfffffffffffffc08, 8) INDIRECT (stack, 0xfffffffffffffc08, 8) , (const, 0x11b, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x11b, 4)]
[ ---  CALL (ram, 0x1212c8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffc08, 8) MULTIEQUAL (stack, 0xfffffffffffffc08, 8) , (stack, 0xfffffffffffffc08, 8)]
[(stack, 0xfffffffffffffc00, 8) MULTIEQUAL (stack, 0xfffffffffffffc00, 8) , (stack, 0xfffffffffffffc00, 8)]
[(stack, 0xfffffffffffffbbc, 4) MULTIEQUAL (stack, 0xfffffffffffffbbc, 4) , (stack, 0xfffffffffffffbbc, 4)]
[(stack, 0xfffffffffffffbb8, 4) MULTIEQUAL (stack, 0xfffffffffffffbb8, 4) , (stack, 0xfffffffffffffbb8, 4)]
[(stack, 0xfffffffffffffba8, 16) MULTIEQUAL (stack, 0xfffffffffffffba8, 16) , (stack, 0xfffffffffffffba8, 16)]
[(stack, 0xfffffffffffffba4, 4) MULTIEQUAL (stack, 0xfffffffffffffba4, 4) , (stack, 0xfffffffffffffba4, 4)]
[(stack, 0xfffffffffffffba0, 4) MULTIEQUAL (stack, 0xfffffffffffffba0, 4) , (stack, 0xfffffffffffffba0, 4)]
[(stack, 0xfffffffffffffb9c, 4) MULTIEQUAL (stack, 0xfffffffffffffb9c, 4) , (stack, 0xfffffffffffffb9c, 4)]
[(stack, 0xfffffffffffffb98, 4) MULTIEQUAL (stack, 0xfffffffffffffb98, 4) , (stack, 0xfffffffffffffb98, 4)]
[(stack, 0xfffffffffffffb94, 4) MULTIEQUAL (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4)]
[(stack, 0xfffffffffffffb90, 4) MULTIEQUAL (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4)]
[(stack, 0xfffffffffffffb8c, 4) MULTIEQUAL (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4)]
[(stack, 0xfffffffffffffb88, 4) MULTIEQUAL (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4)]
[(stack, 0xfffffffffffffb84, 4) MULTIEQUAL (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4)]
[(stack, 0xfffffffffffffb80, 4) MULTIEQUAL (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4)]
[(stack, 0xfffffffffffffb7c, 4) MULTIEQUAL (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb70, 4) MULTIEQUAL (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4)]
[(stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb60, 4) MULTIEQUAL (stack, 0xfffffffffffffb60, 4) , (stack, 0xfffffffffffffb60, 4)]
[(stack, 0xfffffffffffffb58, 8) MULTIEQUAL (stack, 0xfffffffffffffb58, 8) , (stack, 0xfffffffffffffb58, 8)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb3c, 4) MULTIEQUAL (stack, 0xfffffffffffffb3c, 4) , (stack, 0xfffffffffffffb3c, 4)]
[(stack, 0xfffffffffffffb3b, 1) MULTIEQUAL (stack, 0xfffffffffffffb3b, 1) , (stack, 0xfffffffffffffb3b, 1)]
[(stack, 0xfffffffffffffb3a, 1) MULTIEQUAL (stack, 0xfffffffffffffb3a, 1) , (stack, 0xfffffffffffffb3a, 1)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb20, 8) MULTIEQUAL (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb10, 4) MULTIEQUAL (stack, 0xfffffffffffffb10, 4) , (stack, 0xfffffffffffffb10, 4)]
[(stack, 0xfffffffffffffb0f, 1) MULTIEQUAL (stack, 0xfffffffffffffb0f, 1) , (stack, 0xfffffffffffffb0f, 1)]
[(stack, 0xfffffffffffffb08, 4) MULTIEQUAL (stack, 0xfffffffffffffb08, 4) , (stack, 0xfffffffffffffb08, 4)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae4, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[(stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffad8, 8) MULTIEQUAL (stack, 0xfffffffffffffad8, 8) , (stack, 0xfffffffffffffad8, 8)]
[(stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffac8, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffac4, 4) MULTIEQUAL (stack, 0xfffffffffffffac4, 4) , (stack, 0xfffffffffffffac4, 4)]
[(ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(ram, 0x4f08e8, 4) MULTIEQUAL (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4)]
[(ram, 0x4f0870, 8) MULTIEQUAL (ram, 0x4f0870, 8) , (ram, 0x4f0870, 8)]
[(ram, 0x4ee064, 4) MULTIEQUAL (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4)]
[(ram, 0x4ee060, 4) MULTIEQUAL (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4)]
[(ram, 0x4ee058, 8) MULTIEQUAL (ram, 0x4ee058, 8) , (ram, 0x4ee058, 8)]
[(ram, 0x4ee050, 8) MULTIEQUAL (ram, 0x4ee050, 8) , (ram, 0x4ee050, 8)]
[(ram, 0x4ee044, 4) MULTIEQUAL (ram, 0x4ee044, 4) , (ram, 0x4ee044, 4)]
[(ram, 0x4ee040, 4) MULTIEQUAL (ram, 0x4ee040, 4) , (ram, 0x4ee040, 4)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x20a, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x10000fdd, 8) COPY (stack, 0xfffffffffffffb40, 8), (stack, 0xfffffffffffffb40, 8) MULTIEQUAL (stack, 0xfffffffffffffb40, 8) , (stack, 0xfffffffffffffb40, 8)]
[ ---  CBRANCH (ram, 0x207fda, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xfffffffffffffb14, 4) , (const, 0x0, 4), (stack, 0xfffffffffffffb14, 4) MULTIEQUAL (stack, 0xfffffffffffffb14, 4) , (stack, 0xfffffffffffffb14, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbbc, 4) MULTIEQUAL (stack, 0xfffffffffffffbbc, 4) , (stack, 0xfffffffffffffbbc, 4)]
[(stack, 0xfffffffffffffbb8, 4) MULTIEQUAL (stack, 0xfffffffffffffbb8, 4) , (stack, 0xfffffffffffffbb8, 4)]
[(stack, 0xfffffffffffffba8, 16) MULTIEQUAL (stack, 0xfffffffffffffba8, 16) , (stack, 0xfffffffffffffba8, 16)]
[(stack, 0xfffffffffffffba4, 4) MULTIEQUAL (stack, 0xfffffffffffffba4, 4) , (stack, 0xfffffffffffffba4, 4)]
[(stack, 0xfffffffffffffba0, 4) MULTIEQUAL (stack, 0xfffffffffffffba0, 4) , (stack, 0xfffffffffffffba0, 4)]
[(stack, 0xfffffffffffffb9c, 4) MULTIEQUAL (stack, 0xfffffffffffffb9c, 4) , (stack, 0xfffffffffffffb9c, 4)]
[(stack, 0xfffffffffffffb98, 4) MULTIEQUAL (stack, 0xfffffffffffffb98, 4) , (stack, 0xfffffffffffffb98, 4)]
[(stack, 0xfffffffffffffb94, 4) MULTIEQUAL (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4)]
[(stack, 0xfffffffffffffb90, 4) MULTIEQUAL (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4)]
[(stack, 0xfffffffffffffb8c, 4) MULTIEQUAL (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4)]
[(stack, 0xfffffffffffffb88, 4) MULTIEQUAL (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4)]
[(stack, 0xfffffffffffffb84, 4) MULTIEQUAL (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4)]
[(stack, 0xfffffffffffffb80, 4) MULTIEQUAL (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4)]
[(stack, 0xfffffffffffffb7c, 4) MULTIEQUAL (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb70, 4) MULTIEQUAL (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4)]
[(stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb60, 4) MULTIEQUAL (stack, 0xfffffffffffffb60, 4) , (stack, 0xfffffffffffffb60, 4)]
[(stack, 0xfffffffffffffb58, 8) MULTIEQUAL (stack, 0xfffffffffffffb58, 8) , (stack, 0xfffffffffffffb58, 8)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb40, 8) MULTIEQUAL (stack, 0xfffffffffffffb40, 8) , (stack, 0xfffffffffffffb40, 8)]
[(stack, 0xfffffffffffffb3c, 4) MULTIEQUAL (stack, 0xfffffffffffffb3c, 4) , (stack, 0xfffffffffffffb3c, 4)]
[(stack, 0xfffffffffffffb3b, 1) MULTIEQUAL (stack, 0xfffffffffffffb3b, 1) , (stack, 0xfffffffffffffb3b, 1)]
[(stack, 0xfffffffffffffb3a, 1) MULTIEQUAL (stack, 0xfffffffffffffb3a, 1) , (stack, 0xfffffffffffffb3a, 1)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb20, 8) MULTIEQUAL (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb14, 4) MULTIEQUAL (stack, 0xfffffffffffffb14, 4) , (stack, 0xfffffffffffffb14, 4)]
[(stack, 0xfffffffffffffb10, 4) MULTIEQUAL (stack, 0xfffffffffffffb10, 4) , (stack, 0xfffffffffffffb10, 4)]
[(stack, 0xfffffffffffffb0f, 1) MULTIEQUAL (stack, 0xfffffffffffffb0f, 1) , (stack, 0xfffffffffffffb0f, 1)]
[(stack, 0xfffffffffffffb08, 4) MULTIEQUAL (stack, 0xfffffffffffffb08, 4) , (stack, 0xfffffffffffffb08, 4)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae4, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[(stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffad8, 8) MULTIEQUAL (stack, 0xfffffffffffffad8, 8) , (stack, 0xfffffffffffffad8, 8)]
[(stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffac8, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffac4, 4) MULTIEQUAL (stack, 0xfffffffffffffac4, 4) , (stack, 0xfffffffffffffac4, 4)]
[(ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(ram, 0x4f08e8, 4) MULTIEQUAL (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4)]
[(ram, 0x4f0870, 8) MULTIEQUAL (ram, 0x4f0870, 8) , (ram, 0x4f0870, 8)]
[(ram, 0x4ee064, 4) MULTIEQUAL (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4)]
[(ram, 0x4ee060, 4) MULTIEQUAL (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4)]
[(ram, 0x4ee058, 8) MULTIEQUAL (ram, 0x4ee058, 8) , (ram, 0x4ee058, 8)]
[(ram, 0x4ee050, 8) MULTIEQUAL (ram, 0x4ee050, 8) , (ram, 0x4ee050, 8)]
[(ram, 0x4ee044, 4) MULTIEQUAL (ram, 0x4ee044, 4) , (ram, 0x4ee044, 4)]
[(ram, 0x4ee040, 4) MULTIEQUAL (ram, 0x4ee040, 4) , (ram, 0x4ee040, 4)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x207fc0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xa0, 8) , (const, 0x0, 8), (register, 0xa0, 8) MULTIEQUAL (unique, 0x10000fdd, 8) , (unique, 0x10000fe5, 8)]
[ ---  CALL (ram, 0x1212c8, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRSUB (register, 0xa0, 8) , (const, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x8ef, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x8ea, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x8ef, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x8ea, 4)]
[(ram, 0x4ee040, 4) INDIRECT (ram, 0x4ee040, 4) , (const, 0x8ef, 4), (ram, 0x4ee040, 4) INDIRECT (ram, 0x4ee040, 4) , (const, 0x8ea, 4)]
[(ram, 0x4ee044, 4) INDIRECT (ram, 0x4ee044, 4) , (const, 0x8ef, 4), (ram, 0x4ee044, 4) INDIRECT (ram, 0x4ee044, 4) , (const, 0x8ea, 4)]
[(ram, 0x4ee050, 8) INDIRECT (ram, 0x4ee050, 8) , (const, 0x8ef, 4), (ram, 0x4ee050, 8) INDIRECT (ram, 0x4ee050, 8) , (const, 0x8ea, 4)]
[(ram, 0x4ee058, 8) INDIRECT (ram, 0x4ee058, 8) , (const, 0x8ef, 4), (ram, 0x4ee058, 8) INDIRECT (ram, 0x4ee058, 8) , (const, 0x8ea, 4)]
[(ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x8ef, 4), (ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x8ea, 4)]
[(ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x8ef, 4), (ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x8ea, 4)]
[(ram, 0x4f0870, 8) INDIRECT (ram, 0x4f0870, 8) , (const, 0x8ef, 4), (ram, 0x4f0870, 8) INDIRECT (ram, 0x4f0870, 8) , (const, 0x8ea, 4)]
[(ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x8ef, 4), (ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x8ea, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x8ef, 4), (ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x8ea, 4)]
[(stack, 0xfffffffffffffac4, 4) INDIRECT (stack, 0xfffffffffffffac4, 4) , (const, 0x8ef, 4), (stack, 0xfffffffffffffac4, 4) INDIRECT (stack, 0xfffffffffffffac4, 4) , (const, 0x8ea, 4)]
[(stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x8ef, 4), (stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x8ea, 4)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x8ef, 4), (stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x8ea, 4)]
[(stack, 0xfffffffffffffad8, 8) INDIRECT (stack, 0xfffffffffffffad8, 8) , (const, 0x8ef, 4), (stack, 0xfffffffffffffad8, 8) INDIRECT (stack, 0xfffffffffffffad8, 8) , (const, 0x8ea, 4)]
[(stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x8ef, 4), (stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x8ea, 4)]
[(stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x8ef, 4), (stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x8ea, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x8ef, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x8ea, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x8ef, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x8ea, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x8ef, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x8ea, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x8ef, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x8ea, 4)]
[(stack, 0xfffffffffffffb08, 4) INDIRECT (stack, 0xfffffffffffffb08, 4) , (const, 0x8ef, 4), (stack, 0xfffffffffffffb08, 4) INDIRECT (stack, 0xfffffffffffffb08, 4) , (const, 0x8ea, 4)]
[(stack, 0xfffffffffffffb0f, 1) INDIRECT (stack, 0xfffffffffffffb0f, 1) , (const, 0x8ef, 4), (stack, 0xfffffffffffffb0f, 1) INDIRECT (stack, 0xfffffffffffffb0f, 1) , (const, 0x8ea, 4)]
[(stack, 0xfffffffffffffb10, 4) INDIRECT (stack, 0xfffffffffffffb10, 4) , (const, 0x8ef, 4), (stack, 0xfffffffffffffb10, 4) INDIRECT (stack, 0xfffffffffffffb10, 4) , (const, 0x8ea, 4)]
[(stack, 0xfffffffffffffb14, 4) INDIRECT (stack, 0xfffffffffffffb14, 4) , (const, 0x8ef, 4), (stack, 0xfffffffffffffb14, 4) INDIRECT (stack, 0xfffffffffffffb14, 4) , (const, 0x8ea, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x8ef, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x8ea, 4)]
[(stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x8ef, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x8ea, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x8ef, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x8ea, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x8ef, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x8ea, 4)]
[(stack, 0xfffffffffffffb3a, 1) INDIRECT (stack, 0xfffffffffffffb3a, 1) , (const, 0x8ef, 4), (stack, 0xfffffffffffffb3a, 1) INDIRECT (stack, 0xfffffffffffffb3a, 1) , (const, 0x8ea, 4)]
[(stack, 0xfffffffffffffb3b, 1) INDIRECT (stack, 0xfffffffffffffb3b, 1) , (const, 0x8ef, 4), (stack, 0xfffffffffffffb3b, 1) INDIRECT (stack, 0xfffffffffffffb3b, 1) , (const, 0x8ea, 4)]
[(stack, 0xfffffffffffffb3c, 4) INDIRECT (stack, 0xfffffffffffffb3c, 4) , (const, 0x8ef, 4), (stack, 0xfffffffffffffb3c, 4) INDIRECT (stack, 0xfffffffffffffb3c, 4) , (const, 0x8ea, 4)]
[(stack, 0xfffffffffffffb40, 8) INDIRECT (stack, 0xfffffffffffffb40, 8) , (const, 0x8ef, 4), (stack, 0xfffffffffffffb40, 8) INDIRECT (stack, 0xfffffffffffffb40, 8) , (const, 0x8ea, 4)]
[(stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x8ef, 4), (stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x8ea, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x8ef, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x8ea, 4)]
[(stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x8ef, 4), (stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x8ea, 4)]
[(stack, 0xfffffffffffffb60, 4) INDIRECT (stack, 0xfffffffffffffb60, 4) , (const, 0x8ef, 4), (stack, 0xfffffffffffffb60, 4) INDIRECT (stack, 0xfffffffffffffb60, 4) , (const, 0x8ea, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x8ef, 4), (stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x8ea, 4)]
[(stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x8ef, 4), (stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x8ea, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x8ef, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x8ea, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x8ef, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x8ea, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x8ef, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x8ea, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x8ef, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x8ea, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x8ef, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x8ea, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x8ef, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x8ea, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x8ef, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x8ea, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x8ef, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x8ea, 4)]
[(stack, 0xfffffffffffffb98, 4) INDIRECT (stack, 0xfffffffffffffb98, 4) , (const, 0x8ef, 4), (stack, 0xfffffffffffffb98, 4) INDIRECT (stack, 0xfffffffffffffb98, 4) , (const, 0x8ea, 4)]
[(stack, 0xfffffffffffffb9c, 4) INDIRECT (stack, 0xfffffffffffffb9c, 4) , (const, 0x8ef, 4), (stack, 0xfffffffffffffb9c, 4) INDIRECT (stack, 0xfffffffffffffb9c, 4) , (const, 0x8ea, 4)]
[(stack, 0xfffffffffffffba0, 4) INDIRECT (stack, 0xfffffffffffffba0, 4) , (const, 0x8ef, 4), (stack, 0xfffffffffffffba0, 4) INDIRECT (stack, 0xfffffffffffffba0, 4) , (const, 0x8ea, 4)]
[(stack, 0xfffffffffffffba4, 4) INDIRECT (stack, 0xfffffffffffffba4, 4) , (const, 0x8ef, 4), (stack, 0xfffffffffffffba4, 4) INDIRECT (stack, 0xfffffffffffffba4, 4) , (const, 0x8ea, 4)]
[(stack, 0xfffffffffffffba8, 16) INDIRECT (stack, 0xfffffffffffffba8, 16) , (const, 0x8ef, 4), (stack, 0xfffffffffffffba8, 16) INDIRECT (stack, 0xfffffffffffffba8, 16) , (const, 0x8ea, 4)]
[(stack, 0xfffffffffffffbb8, 4) INDIRECT (stack, 0xfffffffffffffbb8, 4) , (const, 0x8ef, 4), (stack, 0xfffffffffffffbb8, 4) INDIRECT (stack, 0xfffffffffffffbb8, 4) , (const, 0x8ea, 4)]
[(stack, 0xfffffffffffffbbc, 4) INDIRECT (stack, 0xfffffffffffffbbc, 4) , (const, 0x8ef, 4), (stack, 0xfffffffffffffbbc, 4) INDIRECT (stack, 0xfffffffffffffbbc, 4) , (const, 0x8ea, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x8ef, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x8ea, 4)]
[ ---  CALL (ram, 0x1212c8, 8) , (register, 0xa0, 8)]
[(unique, 0x10000fe5, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRSUB (register, 0xa0, 8) , (const, 0x28, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x8d0, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x8d0, 4)]
[(ram, 0x4ee040, 4) INDIRECT (ram, 0x4ee040, 4) , (const, 0x8d0, 4)]
[(ram, 0x4ee044, 4) INDIRECT (ram, 0x4ee044, 4) , (const, 0x8d0, 4)]
[(ram, 0x4ee050, 8) INDIRECT (ram, 0x4ee050, 8) , (const, 0x8d0, 4)]
[(ram, 0x4ee058, 8) INDIRECT (ram, 0x4ee058, 8) , (const, 0x8d0, 4)]
[(ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x8d0, 4)]
[(ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x8d0, 4)]
[(ram, 0x4f0870, 8) INDIRECT (ram, 0x4f0870, 8) , (const, 0x8d0, 4)]
[(ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x8d0, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x8d0, 4)]
[(stack, 0xfffffffffffffac4, 4) INDIRECT (stack, 0xfffffffffffffac4, 4) , (const, 0x8d0, 4)]
[(stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x8d0, 4)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x8d0, 4)]
[(stack, 0xfffffffffffffad8, 8) INDIRECT (stack, 0xfffffffffffffad8, 8) , (const, 0x8d0, 4)]
[(stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x8d0, 4)]
[(stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x8d0, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x8d0, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x8d0, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x8d0, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x8d0, 4)]
[(stack, 0xfffffffffffffb08, 4) INDIRECT (stack, 0xfffffffffffffb08, 4) , (const, 0x8d0, 4)]
[(stack, 0xfffffffffffffb0f, 1) INDIRECT (stack, 0xfffffffffffffb0f, 1) , (const, 0x8d0, 4)]
[(stack, 0xfffffffffffffb10, 4) INDIRECT (stack, 0xfffffffffffffb10, 4) , (const, 0x8d0, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x8d0, 4)]
[(stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x8d0, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x8d0, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x8d0, 4)]
[(stack, 0xfffffffffffffb3a, 1) INDIRECT (stack, 0xfffffffffffffb3a, 1) , (const, 0x8d0, 4)]
[(stack, 0xfffffffffffffb3b, 1) INDIRECT (stack, 0xfffffffffffffb3b, 1) , (const, 0x8d0, 4)]
[(stack, 0xfffffffffffffb3c, 4) INDIRECT (stack, 0xfffffffffffffb3c, 4) , (const, 0x8d0, 4)]
[(stack, 0xfffffffffffffb40, 8) INDIRECT (stack, 0xfffffffffffffb40, 8) , (const, 0x8d0, 4)]
[(stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x8d0, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x8d0, 4)]
[(stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x8d0, 4)]
[(stack, 0xfffffffffffffb60, 4) INDIRECT (stack, 0xfffffffffffffb60, 4) , (const, 0x8d0, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x8d0, 4)]
[(stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x8d0, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x8d0, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x8d0, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x8d0, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x8d0, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x8d0, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x8d0, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x8d0, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x8d0, 4)]
[(stack, 0xfffffffffffffb98, 4) INDIRECT (stack, 0xfffffffffffffb98, 4) , (const, 0x8d0, 4)]
[(stack, 0xfffffffffffffb9c, 4) INDIRECT (stack, 0xfffffffffffffb9c, 4) , (const, 0x8d0, 4)]
[(stack, 0xfffffffffffffba0, 4) INDIRECT (stack, 0xfffffffffffffba0, 4) , (const, 0x8d0, 4)]
[(stack, 0xfffffffffffffba4, 4) INDIRECT (stack, 0xfffffffffffffba4, 4) , (const, 0x8d0, 4)]
[(stack, 0xfffffffffffffba8, 16) INDIRECT (stack, 0xfffffffffffffba8, 16) , (const, 0x8d0, 4)]
[(stack, 0xfffffffffffffbb8, 4) INDIRECT (stack, 0xfffffffffffffbb8, 4) , (const, 0x8d0, 4)]
[(stack, 0xfffffffffffffbbc, 4) INDIRECT (stack, 0xfffffffffffffbbc, 4) , (const, 0x8d0, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x8d0, 4)]
[ ---  CALL (ram, 0x241ec0, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb14, 4) COPY (unique, 0xbc80, 4), (unique, 0xbc80, 4) INT_2COMP (stack, 0xfffffffffffffb14, 4), (stack, 0xfffffffffffffb14, 4) INDIRECT (stack, 0xfffffffffffffb14, 4) , (const, 0x8d0, 4)]
[(unique, 0x10000f6d, 8) COPY (register, 0x20, 8)]
[(register, 0x0, 4) COPY (const, 0x0, 4)]
[(unique, 0x10000fd5, 8) COPY (stack, 0xfffffffffffffb40, 8)]
[ ---  CBRANCH (ram, 0x2085a0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xfffffffffffffb40, 8) , (const, 0x0, 8)]
[(stack, 0xfffffffffffffb10, 4) COPY (stack, 0xfffffffffffffb14, 4)]
[ ---  BRANCH (ram, 0x207d43, 1)]
[(register, 0x0, 4) INT_ADD (register, 0x0, 4) , (const, 0x1, 4), (register, 0x0, 4) MULTIEQUAL (register, 0x0, 4) , (register, 0x0, 4)]
[(unique, 0x10000fcd, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRSUB (register, 0xa0, 8) , (const, 0x28, 8), (register, 0xa0, 8) MULTIEQUAL (unique, 0x10000fcd, 8) , (unique, 0x10000fd5, 8)]
[ ---  CBRANCH (ram, 0x207d30, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRSUB (register, 0xa0, 8) , (const, 0x28, 8), (register, 0xa0, 8) MULTIEQUAL (unique, 0x10000fcd, 8) , (unique, 0x10000fd5, 8)]
[(stack, 0xfffffffffffffb10, 4) COPY (register, 0x0, 4)]
[(stack, 0xfffffffffffffb10, 4) MULTIEQUAL (stack, 0xfffffffffffffb10, 4) , (stack, 0xfffffffffffffb10, 4)]
[ ---  CBRANCH (ram, 0x2082d1, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (const, 0x1, 4) , (stack, 0xfffffffffffffb3c, 4)]
[(stack, 0xfffffffffffffac4, 4) COPY (ram, 0x4ee044, 4)]
[ ---  CBRANCH (ram, 0x20853c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4f08e8, 4) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x207d90, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4ee044, 4) , (const, 0x0, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x8ad, 4)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x8ad, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x8ad, 4)]
[(ram, 0x4ee040, 4) INDIRECT (ram, 0x4ee040, 4) , (const, 0x8ad, 4)]
[(ram, 0x4ee050, 8) INDIRECT (ram, 0x4ee050, 8) , (const, 0x8ad, 4)]
[(ram, 0x4ee058, 8) INDIRECT (ram, 0x4ee058, 8) , (const, 0x8ad, 4)]
[(ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x8ad, 4)]
[(ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x8ad, 4)]
[(ram, 0x4f0870, 8) INDIRECT (ram, 0x4f0870, 8) , (const, 0x8ad, 4)]
[(ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x8ad, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x8ad, 4)]
[(stack, 0xfffffffffffffac4, 4) INDIRECT (stack, 0xfffffffffffffac4, 4) , (const, 0x8ad, 4)]
[(stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x8ad, 4)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x8ad, 4)]
[(stack, 0xfffffffffffffad8, 8) INDIRECT (stack, 0xfffffffffffffad8, 8) , (const, 0x8ad, 4)]
[(stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x8ad, 4)]
[(stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x8ad, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x8ad, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x8ad, 4)]
[(stack, 0xfffffffffffffb08, 4) INDIRECT (stack, 0xfffffffffffffb08, 4) , (const, 0x8ad, 4)]
[(stack, 0xfffffffffffffb0f, 1) INDIRECT (stack, 0xfffffffffffffb0f, 1) , (const, 0x8ad, 4)]
[(stack, 0xfffffffffffffb10, 4) INDIRECT (stack, 0xfffffffffffffb10, 4) , (const, 0x8ad, 4)]
[(stack, 0xfffffffffffffb14, 4) INDIRECT (stack, 0xfffffffffffffb14, 4) , (const, 0x8ad, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x8ad, 4)]
[(stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x8ad, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x8ad, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x8ad, 4)]
[(stack, 0xfffffffffffffb3a, 1) INDIRECT (stack, 0xfffffffffffffb3a, 1) , (const, 0x8ad, 4)]
[(stack, 0xfffffffffffffb3b, 1) INDIRECT (stack, 0xfffffffffffffb3b, 1) , (const, 0x8ad, 4)]
[(stack, 0xfffffffffffffb3c, 4) INDIRECT (stack, 0xfffffffffffffb3c, 4) , (const, 0x8ad, 4)]
[(stack, 0xfffffffffffffb40, 8) INDIRECT (stack, 0xfffffffffffffb40, 8) , (const, 0x8ad, 4)]
[(stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x8ad, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x8ad, 4)]
[(stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x8ad, 4)]
[(stack, 0xfffffffffffffb60, 4) INDIRECT (stack, 0xfffffffffffffb60, 4) , (const, 0x8ad, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x8ad, 4)]
[(stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x8ad, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x8ad, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x8ad, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x8ad, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x8ad, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x8ad, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x8ad, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x8ad, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x8ad, 4)]
[(stack, 0xfffffffffffffb98, 4) INDIRECT (stack, 0xfffffffffffffb98, 4) , (const, 0x8ad, 4)]
[(stack, 0xfffffffffffffb9c, 4) INDIRECT (stack, 0xfffffffffffffb9c, 4) , (const, 0x8ad, 4)]
[(stack, 0xfffffffffffffba0, 4) INDIRECT (stack, 0xfffffffffffffba0, 4) , (const, 0x8ad, 4)]
[(stack, 0xfffffffffffffba4, 4) INDIRECT (stack, 0xfffffffffffffba4, 4) , (const, 0x8ad, 4)]
[(stack, 0xfffffffffffffba8, 16) INDIRECT (stack, 0xfffffffffffffba8, 16) , (const, 0x8ad, 4)]
[(stack, 0xfffffffffffffbb8, 4) INDIRECT (stack, 0xfffffffffffffbb8, 4) , (const, 0x8ad, 4)]
[(stack, 0xfffffffffffffbbc, 4) INDIRECT (stack, 0xfffffffffffffbbc, 4) , (const, 0x8ad, 4)]
[(stack, 0xfffffffffffffc00, 8) INDIRECT (stack, 0xfffffffffffffc00, 8) , (const, 0x8ad, 4)]
[(stack, 0xfffffffffffffc08, 8) INDIRECT (stack, 0xfffffffffffffc08, 8) , (const, 0x8ad, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x8ad, 4)]
[ ---  CALL (ram, 0x2042b0, 8)]
[(ram, 0x4ee044, 4) INT_OR (ram, 0x4ee044, 4) , (const, 0x2, 4), (ram, 0x4ee044, 4) INDIRECT (ram, 0x4ee044, 4) , (const, 0x8ad, 4)]
[ ---  BRANCH (ram, 0x207d90, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1a6, 4)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x1a6, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x1a6, 4)]
[(ram, 0x4ee040, 4) INDIRECT (ram, 0x4ee040, 4) , (const, 0x1a6, 4)]
[(ram, 0x4ee044, 4) INDIRECT (ram, 0x4ee044, 4) , (const, 0x1a6, 4)]
[(ram, 0x4ee050, 8) INDIRECT (ram, 0x4ee050, 8) , (const, 0x1a6, 4)]
[(ram, 0x4ee058, 8) INDIRECT (ram, 0x4ee058, 8) , (const, 0x1a6, 4)]
[(ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x1a6, 4)]
[(ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x1a6, 4)]
[(ram, 0x4f0870, 8) INDIRECT (ram, 0x4f0870, 8) , (const, 0x1a6, 4)]
[(ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x1a6, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x1a6, 4)]
[(stack, 0xfffffffffffffac4, 4) INDIRECT (stack, 0xfffffffffffffac4, 4) , (const, 0x1a6, 4)]
[(stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x1a6, 4)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x1a6, 4)]
[(stack, 0xfffffffffffffad8, 8) INDIRECT (stack, 0xfffffffffffffad8, 8) , (const, 0x1a6, 4)]
[(stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x1a6, 4)]
[(stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x1a6, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x1a6, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x1a6, 4)]
[(stack, 0xfffffffffffffb08, 4) INDIRECT (stack, 0xfffffffffffffb08, 4) , (const, 0x1a6, 4)]
[(stack, 0xfffffffffffffb0f, 1) INDIRECT (stack, 0xfffffffffffffb0f, 1) , (const, 0x1a6, 4)]
[(stack, 0xfffffffffffffb10, 4) INDIRECT (stack, 0xfffffffffffffb10, 4) , (const, 0x1a6, 4)]
[(stack, 0xfffffffffffffb14, 4) INDIRECT (stack, 0xfffffffffffffb14, 4) , (const, 0x1a6, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x1a6, 4)]
[(stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x1a6, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x1a6, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x1a6, 4)]
[(stack, 0xfffffffffffffb3a, 1) INDIRECT (stack, 0xfffffffffffffb3a, 1) , (const, 0x1a6, 4)]
[(stack, 0xfffffffffffffb3b, 1) INDIRECT (stack, 0xfffffffffffffb3b, 1) , (const, 0x1a6, 4)]
[(stack, 0xfffffffffffffb3c, 4) INDIRECT (stack, 0xfffffffffffffb3c, 4) , (const, 0x1a6, 4)]
[(stack, 0xfffffffffffffb40, 8) INDIRECT (stack, 0xfffffffffffffb40, 8) , (const, 0x1a6, 4)]
[(stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x1a6, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x1a6, 4)]
[(stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x1a6, 4)]
[(stack, 0xfffffffffffffb60, 4) INDIRECT (stack, 0xfffffffffffffb60, 4) , (const, 0x1a6, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x1a6, 4)]
[(stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x1a6, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x1a6, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x1a6, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x1a6, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x1a6, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x1a6, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x1a6, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x1a6, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x1a6, 4)]
[(stack, 0xfffffffffffffb98, 4) INDIRECT (stack, 0xfffffffffffffb98, 4) , (const, 0x1a6, 4)]
[(stack, 0xfffffffffffffb9c, 4) INDIRECT (stack, 0xfffffffffffffb9c, 4) , (const, 0x1a6, 4)]
[(stack, 0xfffffffffffffba0, 4) INDIRECT (stack, 0xfffffffffffffba0, 4) , (const, 0x1a6, 4)]
[(stack, 0xfffffffffffffba4, 4) INDIRECT (stack, 0xfffffffffffffba4, 4) , (const, 0x1a6, 4)]
[(stack, 0xfffffffffffffba8, 16) INDIRECT (stack, 0xfffffffffffffba8, 16) , (const, 0x1a6, 4)]
[(stack, 0xfffffffffffffbb8, 4) INDIRECT (stack, 0xfffffffffffffbb8, 4) , (const, 0x1a6, 4)]
[(stack, 0xfffffffffffffbbc, 4) INDIRECT (stack, 0xfffffffffffffbbc, 4) , (const, 0x1a6, 4)]
[(stack, 0xfffffffffffffc00, 8) INDIRECT (stack, 0xfffffffffffffc00, 8) , (const, 0x1a6, 4)]
[(stack, 0xfffffffffffffc08, 8) INDIRECT (stack, 0xfffffffffffffc08, 8) , (const, 0x1a6, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1a6, 4)]
[ ---  CALLIND (register, 0x0, 8) , (unique, 0x10000678, 8), (unique, 0x10000678, 8) PTRSUB (const, 0x0, 8) , (const, 0x4ee044, 8), (register, 0x0, 8) CAST (unique, 0x1000119b, 8), (unique, 0x1000119b, 8) INT_XOR (register, 0x0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10001193, 8), (unique, 0x10001193, 8) INT_ADD (register, 0x110, 8) , (const, 0x30, 8), (register, 0x0, 8) INT_OR (unique, 0x4ff00, 8) , (unique, 0x50000, 8), (unique, 0x50000, 8) INT_LEFT (ram, 0x4f0870, 8) , (const, 0x2f, 4), (unique, 0x4ff00, 8) INT_RIGHT (ram, 0x4f0870, 8) , (const, 0x11, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1e0, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x1e0, 4), (register, 0x20a, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1) , (register, 0x20a, 1)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x1e0, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4ee040, 4) INDIRECT (ram, 0x4ee040, 4) , (const, 0x1e0, 4), (ram, 0x4ee040, 4) MULTIEQUAL (ram, 0x4ee040, 4) , (ram, 0x4ee040, 4) , (ram, 0x4ee040, 4)]
[(ram, 0x4ee044, 4) INDIRECT (ram, 0x4ee044, 4) , (const, 0x1e0, 4), (ram, 0x4ee044, 4) MULTIEQUAL (ram, 0x4ee044, 4) , (ram, 0x4ee044, 4) , (ram, 0x4ee044, 4)]
[(ram, 0x4ee050, 8) INDIRECT (ram, 0x4ee050, 8) , (const, 0x1e0, 4), (ram, 0x4ee050, 8) MULTIEQUAL (ram, 0x4ee050, 8) , (ram, 0x4ee050, 8) , (ram, 0x4ee050, 8)]
[(ram, 0x4ee058, 8) INDIRECT (ram, 0x4ee058, 8) , (const, 0x1e0, 4), (ram, 0x4ee058, 8) MULTIEQUAL (ram, 0x4ee058, 8) , (ram, 0x4ee058, 8) , (ram, 0x4ee058, 8)]
[(ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x1e0, 4), (ram, 0x4ee060, 4) MULTIEQUAL (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4)]
[(ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x1e0, 4), (ram, 0x4ee064, 4) MULTIEQUAL (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4)]
[(ram, 0x4f0870, 8) INDIRECT (ram, 0x4f0870, 8) , (const, 0x1e0, 4), (ram, 0x4f0870, 8) MULTIEQUAL (ram, 0x4f0870, 8) , (ram, 0x4f0870, 8) , (ram, 0x4f0870, 8)]
[(ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x1e0, 4), (ram, 0x4f08e8, 4) MULTIEQUAL (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x1e0, 4), (ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(stack, 0xfffffffffffffac4, 4) INDIRECT (stack, 0xfffffffffffffac4, 4) , (const, 0x1e0, 4), (stack, 0xfffffffffffffac4, 4) MULTIEQUAL (stack, 0xfffffffffffffac4, 4) , (stack, 0xfffffffffffffac4, 4) , (stack, 0xfffffffffffffac4, 4)]
[(stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x1e0, 4), (stack, 0xfffffffffffffac8, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x1e0, 4), (stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffad8, 8) INDIRECT (stack, 0xfffffffffffffad8, 8) , (const, 0x1e0, 4), (stack, 0xfffffffffffffad8, 8) MULTIEQUAL (stack, 0xfffffffffffffad8, 8) , (stack, 0xfffffffffffffad8, 8) , (stack, 0xfffffffffffffad8, 8)]
[(stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x1e0, 4), (stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x1e0, 4), (stack, 0xfffffffffffffae4, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (register, 0x0, 8) , (const, 0x1e0, 4), (register, 0x0, 8) INT_SEXT (stack, 0xfffffffffffffb10, 4), (stack, 0xfffffffffffffb10, 4) MULTIEQUAL (stack, 0xfffffffffffffb10, 4) , (stack, 0xfffffffffffffb10, 4) , (stack, 0xfffffffffffffb10, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x1e0, 4), (stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x1e0, 4), (stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffb08, 4) INDIRECT (stack, 0xfffffffffffffb08, 4) , (const, 0x1e0, 4), (stack, 0xfffffffffffffb08, 4) MULTIEQUAL (stack, 0xfffffffffffffb08, 4) , (stack, 0xfffffffffffffb08, 4) , (stack, 0xfffffffffffffb08, 4)]
[(stack, 0xfffffffffffffb0f, 1) INDIRECT (stack, 0xfffffffffffffb0f, 1) , (const, 0x1e0, 4), (stack, 0xfffffffffffffb0f, 1) MULTIEQUAL (stack, 0xfffffffffffffb0f, 1) , (stack, 0xfffffffffffffb0f, 1) , (stack, 0xfffffffffffffb0f, 1)]
[(stack, 0xfffffffffffffb10, 4) INDIRECT (stack, 0xfffffffffffffb10, 4) , (const, 0x1e0, 4), (stack, 0xfffffffffffffb10, 4) MULTIEQUAL (stack, 0xfffffffffffffb10, 4) , (stack, 0xfffffffffffffb10, 4) , (stack, 0xfffffffffffffb10, 4)]
[(stack, 0xfffffffffffffb14, 4) INDIRECT (stack, 0xfffffffffffffb14, 4) , (const, 0x1e0, 4), (stack, 0xfffffffffffffb14, 4) MULTIEQUAL (stack, 0xfffffffffffffb14, 4) , (stack, 0xfffffffffffffb14, 4) , (stack, 0xfffffffffffffb14, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x1e0, 4), (stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x1e0, 4), (stack, 0xfffffffffffffb20, 8) MULTIEQUAL (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x1e0, 4), (stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x1e0, 4), (stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb3a, 1) INDIRECT (stack, 0xfffffffffffffb3a, 1) , (const, 0x1e0, 4), (stack, 0xfffffffffffffb3a, 1) MULTIEQUAL (stack, 0xfffffffffffffb3a, 1) , (stack, 0xfffffffffffffb3a, 1) , (stack, 0xfffffffffffffb3a, 1)]
[(stack, 0xfffffffffffffb3b, 1) INDIRECT (stack, 0xfffffffffffffb3b, 1) , (const, 0x1e0, 4), (stack, 0xfffffffffffffb3b, 1) MULTIEQUAL (stack, 0xfffffffffffffb3b, 1) , (stack, 0xfffffffffffffb3b, 1) , (stack, 0xfffffffffffffb3b, 1)]
[(stack, 0xfffffffffffffb3c, 4) INDIRECT (stack, 0xfffffffffffffb3c, 4) , (const, 0x1e0, 4), (stack, 0xfffffffffffffb3c, 4) MULTIEQUAL (stack, 0xfffffffffffffb3c, 4) , (stack, 0xfffffffffffffb3c, 4) , (stack, 0xfffffffffffffb3c, 4)]
[(stack, 0xfffffffffffffb40, 8) INDIRECT (stack, 0xfffffffffffffb40, 8) , (const, 0x1e0, 4), (stack, 0xfffffffffffffb40, 8) MULTIEQUAL (stack, 0xfffffffffffffb40, 8) , (stack, 0xfffffffffffffb40, 8) , (stack, 0xfffffffffffffb40, 8)]
[(stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x1e0, 4), (stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x1e0, 4), (stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x1e0, 4), (stack, 0xfffffffffffffb58, 8) MULTIEQUAL (stack, 0xfffffffffffffb58, 8) , (stack, 0xfffffffffffffb58, 8) , (stack, 0xfffffffffffffb58, 8)]
[(stack, 0xfffffffffffffb60, 4) INDIRECT (stack, 0xfffffffffffffb60, 4) , (const, 0x1e0, 4), (stack, 0xfffffffffffffb60, 4) MULTIEQUAL (stack, 0xfffffffffffffb60, 4) , (stack, 0xfffffffffffffb60, 4) , (stack, 0xfffffffffffffb60, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x1e0, 4), (stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x1e0, 4), (stack, 0xfffffffffffffb70, 4) MULTIEQUAL (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x1e0, 4), (stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x1e0, 4), (stack, 0xfffffffffffffb7c, 4) MULTIEQUAL (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x1e0, 4), (stack, 0xfffffffffffffb80, 4) MULTIEQUAL (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x1e0, 4), (stack, 0xfffffffffffffb84, 4) MULTIEQUAL (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x1e0, 4), (stack, 0xfffffffffffffb88, 4) MULTIEQUAL (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x1e0, 4), (stack, 0xfffffffffffffb8c, 4) MULTIEQUAL (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x1e0, 4), (stack, 0xfffffffffffffb90, 4) MULTIEQUAL (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x1e0, 4), (stack, 0xfffffffffffffb94, 4) MULTIEQUAL (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4)]
[(stack, 0xfffffffffffffb98, 4) INDIRECT (stack, 0xfffffffffffffb98, 4) , (const, 0x1e0, 4), (stack, 0xfffffffffffffb98, 4) MULTIEQUAL (stack, 0xfffffffffffffb98, 4) , (stack, 0xfffffffffffffb98, 4) , (stack, 0xfffffffffffffb98, 4)]
[(stack, 0xfffffffffffffb9c, 4) INDIRECT (stack, 0xfffffffffffffb9c, 4) , (const, 0x1e0, 4), (stack, 0xfffffffffffffb9c, 4) MULTIEQUAL (stack, 0xfffffffffffffb9c, 4) , (stack, 0xfffffffffffffb9c, 4) , (stack, 0xfffffffffffffb9c, 4)]
[(stack, 0xfffffffffffffba0, 4) INDIRECT (stack, 0xfffffffffffffba0, 4) , (const, 0x1e0, 4), (stack, 0xfffffffffffffba0, 4) MULTIEQUAL (stack, 0xfffffffffffffba0, 4) , (stack, 0xfffffffffffffba0, 4) , (stack, 0xfffffffffffffba0, 4)]
[(stack, 0xfffffffffffffba4, 4) INDIRECT (stack, 0xfffffffffffffba4, 4) , (const, 0x1e0, 4), (stack, 0xfffffffffffffba4, 4) MULTIEQUAL (stack, 0xfffffffffffffba4, 4) , (stack, 0xfffffffffffffba4, 4) , (stack, 0xfffffffffffffba4, 4)]
[(stack, 0xfffffffffffffba8, 16) INDIRECT (stack, 0xfffffffffffffba8, 16) , (const, 0x1e0, 4), (stack, 0xfffffffffffffba8, 16) MULTIEQUAL (stack, 0xfffffffffffffba8, 16) , (stack, 0xfffffffffffffba8, 16) , (stack, 0xfffffffffffffba8, 16)]
[(stack, 0xfffffffffffffbb8, 4) INDIRECT (stack, 0xfffffffffffffbb8, 4) , (const, 0x1e0, 4), (stack, 0xfffffffffffffbb8, 4) MULTIEQUAL (stack, 0xfffffffffffffbb8, 4) , (stack, 0xfffffffffffffbb8, 4) , (stack, 0xfffffffffffffbb8, 4)]
[(stack, 0xfffffffffffffbbc, 4) INDIRECT (stack, 0xfffffffffffffbbc, 4) , (const, 0x1e0, 4), (stack, 0xfffffffffffffbbc, 4) MULTIEQUAL (stack, 0xfffffffffffffbbc, 4) , (stack, 0xfffffffffffffbbc, 4) , (stack, 0xfffffffffffffbbc, 4)]
[(stack, 0xfffffffffffffc00, 8) INDIRECT (stack, 0xfffffffffffffc00, 8) , (const, 0x1e0, 4), (stack, 0xfffffffffffffc00, 8) MULTIEQUAL (stack, 0xfffffffffffffc00, 8) , (stack, 0xfffffffffffffc00, 8) , (stack, 0xfffffffffffffc00, 8)]
[(stack, 0xfffffffffffffc08, 8) INDIRECT (stack, 0xfffffffffffffc08, 8) , (const, 0x1e0, 4), (stack, 0xfffffffffffffc08, 8) MULTIEQUAL (stack, 0xfffffffffffffc08, 8) , (stack, 0xfffffffffffffc08, 8) , (stack, 0xfffffffffffffc08, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1e0, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(register, 0x0, 4) CALL (ram, 0x2300b0, 8) , (register, 0xa0, 8), (register, 0xa0, 8) INT_MULT (register, 0x0, 8) , (const, 0x38, 8), (register, 0x0, 8) INT_SEXT (stack, 0xfffffffffffffb10, 4), (stack, 0xfffffffffffffb10, 4) MULTIEQUAL (stack, 0xfffffffffffffb10, 4) , (stack, 0xfffffffffffffb10, 4) , (stack, 0xfffffffffffffb10, 4)]
[ ---  CBRANCH (ram, 0x207dc6, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (register, 0xa0, 8) , (const, 0x1001, 8), (register, 0xa0, 8) INT_MULT (register, 0x0, 8) , (const, 0x38, 8), (register, 0x0, 8) INT_SEXT (stack, 0xfffffffffffffb10, 4), (stack, 0xfffffffffffffb10, 4) MULTIEQUAL (stack, 0xfffffffffffffb10, 4) , (stack, 0xfffffffffffffb10, 4) , (stack, 0xfffffffffffffb10, 4)]
[ ---  CBRANCH (ram, 0x2087ad, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4)]
[(stack, 0xfffffffffffffb08, 4) COPY (const, 0x1, 4)]
[(stack, 0xfffffffffffffb00, 8) COPY (unique, 0x3800, 8), (unique, 0x3800, 8) PTRADD (unique, 0x10000420, 8) , (unique, 0x100001f7, 8) , (const, 0x1, 8), (unique, 0x10000420, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffac0, 8), (unique, 0x100001f7, 8) INT_2COMP (register, 0xa0, 8), (register, 0xa0, 8) INT_AND (register, 0xa0, 8) , (const, 0xfffffffffffffff0, 8), (register, 0xa0, 8) INT_ADD (register, 0xa0, 8) , (const, 0x1e, 8)]
[(unique, 0x10000f7d, 8) COPY (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x10000718, 8) , (unique, 0x100001f7, 8) , (const, 0x1, 8), (unique, 0x10000718, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffab8, 8), (unique, 0x100001f7, 8) INT_2COMP (register, 0xa0, 8), (register, 0xa0, 8) INT_AND (register, 0xa0, 8) , (const, 0xfffffffffffffff0, 8), (register, 0xa0, 8) INT_ADD (register, 0xa0, 8) , (const, 0x1e, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x880, 4)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x880, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x880, 4)]
[(ram, 0x4ee040, 4) INDIRECT (ram, 0x4ee040, 4) , (const, 0x880, 4)]
[(ram, 0x4ee044, 4) INDIRECT (ram, 0x4ee044, 4) , (const, 0x880, 4)]
[(ram, 0x4ee050, 8) INDIRECT (ram, 0x4ee050, 8) , (const, 0x880, 4)]
[(ram, 0x4ee058, 8) INDIRECT (ram, 0x4ee058, 8) , (const, 0x880, 4)]
[(ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x880, 4)]
[(ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x880, 4)]
[(ram, 0x4f0870, 8) INDIRECT (ram, 0x4f0870, 8) , (const, 0x880, 4)]
[(ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x880, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x880, 4)]
[(stack, 0xfffffffffffffac4, 4) INDIRECT (stack, 0xfffffffffffffac4, 4) , (const, 0x880, 4)]
[(stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x880, 4)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x880, 4)]
[(stack, 0xfffffffffffffad8, 8) INDIRECT (stack, 0xfffffffffffffad8, 8) , (const, 0x880, 4)]
[(stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x880, 4)]
[(stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x880, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x880, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x880, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x880, 4)]
[(stack, 0xfffffffffffffb08, 4) INDIRECT (stack, 0xfffffffffffffb08, 4) , (const, 0x880, 4)]
[(stack, 0xfffffffffffffb0f, 1) INDIRECT (stack, 0xfffffffffffffb0f, 1) , (const, 0x880, 4)]
[(stack, 0xfffffffffffffb10, 4) INDIRECT (stack, 0xfffffffffffffb10, 4) , (const, 0x880, 4)]
[(stack, 0xfffffffffffffb14, 4) INDIRECT (stack, 0xfffffffffffffb14, 4) , (const, 0x880, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x880, 4)]
[(stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x880, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x880, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x880, 4)]
[(stack, 0xfffffffffffffb3a, 1) INDIRECT (stack, 0xfffffffffffffb3a, 1) , (const, 0x880, 4)]
[(stack, 0xfffffffffffffb3b, 1) INDIRECT (stack, 0xfffffffffffffb3b, 1) , (const, 0x880, 4)]
[(stack, 0xfffffffffffffb3c, 4) INDIRECT (stack, 0xfffffffffffffb3c, 4) , (const, 0x880, 4)]
[(stack, 0xfffffffffffffb40, 8) INDIRECT (stack, 0xfffffffffffffb40, 8) , (const, 0x880, 4)]
[(stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x880, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x880, 4)]
[(stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x880, 4)]
[(stack, 0xfffffffffffffb60, 4) INDIRECT (stack, 0xfffffffffffffb60, 4) , (const, 0x880, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x880, 4)]
[(stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x880, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x880, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x880, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x880, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x880, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x880, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x880, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x880, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x880, 4)]
[(stack, 0xfffffffffffffb98, 4) INDIRECT (stack, 0xfffffffffffffb98, 4) , (const, 0x880, 4)]
[(stack, 0xfffffffffffffb9c, 4) INDIRECT (stack, 0xfffffffffffffb9c, 4) , (const, 0x880, 4)]
[(stack, 0xfffffffffffffba0, 4) INDIRECT (stack, 0xfffffffffffffba0, 4) , (const, 0x880, 4)]
[(stack, 0xfffffffffffffba4, 4) INDIRECT (stack, 0xfffffffffffffba4, 4) , (const, 0x880, 4)]
[(stack, 0xfffffffffffffba8, 16) INDIRECT (stack, 0xfffffffffffffba8, 16) , (const, 0x880, 4)]
[(stack, 0xfffffffffffffbb8, 4) INDIRECT (stack, 0xfffffffffffffbb8, 4) , (const, 0x880, 4)]
[(stack, 0xfffffffffffffbbc, 4) INDIRECT (stack, 0xfffffffffffffbbc, 4) , (const, 0x880, 4)]
[(stack, 0xfffffffffffffc00, 8) INDIRECT (stack, 0xfffffffffffffc00, 8) , (const, 0x880, 4)]
[(stack, 0xfffffffffffffc08, 8) INDIRECT (stack, 0xfffffffffffffc08, 8) , (const, 0x880, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x880, 4)]
[(stack, 0xfffffffffffffb00, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x100011a3, 8), (unique, 0x100011a3, 8) CALL (ram, 0x1212c0, 8) , (register, 0xa0, 8)]
[ ---  CBRANCH (ram, 0x208862, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x100011a3, 8), (unique, 0x100011a3, 8) CALL (ram, 0x1212c0, 8) , (register, 0xa0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x897, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x897, 4)]
[(ram, 0x4ee040, 4) INDIRECT (ram, 0x4ee040, 4) , (const, 0x897, 4)]
[(ram, 0x4ee044, 4) INDIRECT (ram, 0x4ee044, 4) , (const, 0x897, 4)]
[(ram, 0x4ee050, 8) INDIRECT (ram, 0x4ee050, 8) , (const, 0x897, 4)]
[(ram, 0x4ee058, 8) INDIRECT (ram, 0x4ee058, 8) , (const, 0x897, 4)]
[(ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x897, 4)]
[(ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x897, 4)]
[(ram, 0x4f0870, 8) INDIRECT (ram, 0x4f0870, 8) , (const, 0x897, 4)]
[(ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x897, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x897, 4)]
[(stack, 0xfffffffffffffac4, 4) INDIRECT (stack, 0xfffffffffffffac4, 4) , (const, 0x897, 4)]
[(stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x897, 4)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x897, 4)]
[(stack, 0xfffffffffffffad8, 8) INDIRECT (stack, 0xfffffffffffffad8, 8) , (const, 0x897, 4)]
[(stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x897, 4)]
[(stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x897, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x897, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x897, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x897, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x897, 4)]
[(stack, 0xfffffffffffffb08, 4) INDIRECT (stack, 0xfffffffffffffb08, 4) , (const, 0x897, 4)]
[(stack, 0xfffffffffffffb0f, 1) INDIRECT (stack, 0xfffffffffffffb0f, 1) , (const, 0x897, 4)]
[(stack, 0xfffffffffffffb10, 4) INDIRECT (stack, 0xfffffffffffffb10, 4) , (const, 0x897, 4)]
[(stack, 0xfffffffffffffb14, 4) INDIRECT (stack, 0xfffffffffffffb14, 4) , (const, 0x897, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x897, 4)]
[(stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x897, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x897, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x897, 4)]
[(stack, 0xfffffffffffffb3a, 1) INDIRECT (stack, 0xfffffffffffffb3a, 1) , (const, 0x897, 4)]
[(stack, 0xfffffffffffffb3b, 1) INDIRECT (stack, 0xfffffffffffffb3b, 1) , (const, 0x897, 4)]
[(stack, 0xfffffffffffffb3c, 4) INDIRECT (stack, 0xfffffffffffffb3c, 4) , (const, 0x897, 4)]
[(stack, 0xfffffffffffffb40, 8) INDIRECT (stack, 0xfffffffffffffb40, 8) , (const, 0x897, 4)]
[(stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x897, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x897, 4)]
[(stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x897, 4)]
[(stack, 0xfffffffffffffb60, 4) INDIRECT (stack, 0xfffffffffffffb60, 4) , (const, 0x897, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x897, 4)]
[(stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x897, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x897, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x897, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x897, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x897, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x897, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x897, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x897, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x897, 4)]
[(stack, 0xfffffffffffffb98, 4) INDIRECT (stack, 0xfffffffffffffb98, 4) , (const, 0x897, 4)]
[(stack, 0xfffffffffffffb9c, 4) INDIRECT (stack, 0xfffffffffffffb9c, 4) , (const, 0x897, 4)]
[(stack, 0xfffffffffffffba0, 4) INDIRECT (stack, 0xfffffffffffffba0, 4) , (const, 0x897, 4)]
[(stack, 0xfffffffffffffba4, 4) INDIRECT (stack, 0xfffffffffffffba4, 4) , (const, 0x897, 4)]
[(stack, 0xfffffffffffffba8, 16) INDIRECT (stack, 0xfffffffffffffba8, 16) , (const, 0x897, 4)]
[(stack, 0xfffffffffffffbb8, 4) INDIRECT (stack, 0xfffffffffffffbb8, 4) , (const, 0x897, 4)]
[(stack, 0xfffffffffffffbbc, 4) INDIRECT (stack, 0xfffffffffffffbbc, 4) , (const, 0x897, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x897, 4)]
[ ---  CALL (ram, 0x241ec0, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb14, 4) COPY (const, 0xfffffff6, 4)]
[(unique, 0x10000f65, 8) COPY (register, 0x20, 8)]
[ ---  BRANCH (ram, 0x207ff1, 1)]
[(stack, 0xfffffffffffffb08, 4) COPY (const, 0x0, 4)]
[(unique, 0x10000f85, 8) COPY (register, 0x20, 8)]
[ ---  BRANCH (ram, 0x207deb, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffc08, 8) MULTIEQUAL (stack, 0xfffffffffffffc08, 8) , (stack, 0xfffffffffffffc08, 8)]
[(stack, 0xfffffffffffffc00, 8) MULTIEQUAL (stack, 0xfffffffffffffc00, 8) , (stack, 0xfffffffffffffc00, 8)]
[(stack, 0xfffffffffffffbbc, 4) MULTIEQUAL (stack, 0xfffffffffffffbbc, 4) , (stack, 0xfffffffffffffbbc, 4)]
[(stack, 0xfffffffffffffbb8, 4) MULTIEQUAL (stack, 0xfffffffffffffbb8, 4) , (stack, 0xfffffffffffffbb8, 4)]
[(stack, 0xfffffffffffffba8, 16) MULTIEQUAL (stack, 0xfffffffffffffba8, 16) , (stack, 0xfffffffffffffba8, 16)]
[(stack, 0xfffffffffffffba4, 4) MULTIEQUAL (stack, 0xfffffffffffffba4, 4) , (stack, 0xfffffffffffffba4, 4)]
[(stack, 0xfffffffffffffba0, 4) MULTIEQUAL (stack, 0xfffffffffffffba0, 4) , (stack, 0xfffffffffffffba0, 4)]
[(stack, 0xfffffffffffffb9c, 4) MULTIEQUAL (stack, 0xfffffffffffffb9c, 4) , (stack, 0xfffffffffffffb9c, 4)]
[(stack, 0xfffffffffffffb98, 4) MULTIEQUAL (stack, 0xfffffffffffffb98, 4) , (stack, 0xfffffffffffffb98, 4)]
[(stack, 0xfffffffffffffb94, 4) MULTIEQUAL (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4)]
[(stack, 0xfffffffffffffb90, 4) MULTIEQUAL (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4)]
[(stack, 0xfffffffffffffb8c, 4) MULTIEQUAL (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4)]
[(stack, 0xfffffffffffffb88, 4) MULTIEQUAL (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4)]
[(stack, 0xfffffffffffffb84, 4) MULTIEQUAL (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4)]
[(stack, 0xfffffffffffffb80, 4) MULTIEQUAL (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4)]
[(stack, 0xfffffffffffffb7c, 4) MULTIEQUAL (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb60, 4) MULTIEQUAL (stack, 0xfffffffffffffb60, 4) , (stack, 0xfffffffffffffb60, 4)]
[(stack, 0xfffffffffffffb58, 8) MULTIEQUAL (stack, 0xfffffffffffffb58, 8) , (stack, 0xfffffffffffffb58, 8)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb40, 8) MULTIEQUAL (stack, 0xfffffffffffffb40, 8) , (stack, 0xfffffffffffffb40, 8)]
[(stack, 0xfffffffffffffb3c, 4) MULTIEQUAL (stack, 0xfffffffffffffb3c, 4) , (stack, 0xfffffffffffffb3c, 4)]
[(stack, 0xfffffffffffffb3b, 1) MULTIEQUAL (stack, 0xfffffffffffffb3b, 1) , (stack, 0xfffffffffffffb3b, 1)]
[(stack, 0xfffffffffffffb3a, 1) MULTIEQUAL (stack, 0xfffffffffffffb3a, 1) , (stack, 0xfffffffffffffb3a, 1)]
[(stack, 0xfffffffffffffb20, 8) MULTIEQUAL (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb14, 4) MULTIEQUAL (stack, 0xfffffffffffffb14, 4) , (stack, 0xfffffffffffffb14, 4)]
[(stack, 0xfffffffffffffb10, 4) MULTIEQUAL (stack, 0xfffffffffffffb10, 4) , (stack, 0xfffffffffffffb10, 4)]
[(stack, 0xfffffffffffffb0f, 1) MULTIEQUAL (stack, 0xfffffffffffffb0f, 1) , (stack, 0xfffffffffffffb0f, 1)]
[(stack, 0xfffffffffffffb08, 4) MULTIEQUAL (stack, 0xfffffffffffffb08, 4) , (stack, 0xfffffffffffffb08, 4)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae4, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[(stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffad8, 8) MULTIEQUAL (stack, 0xfffffffffffffad8, 8) , (stack, 0xfffffffffffffad8, 8)]
[(stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffac8, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffac4, 4) MULTIEQUAL (stack, 0xfffffffffffffac4, 4) , (stack, 0xfffffffffffffac4, 4)]
[(ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(ram, 0x4f08e8, 4) MULTIEQUAL (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4)]
[(ram, 0x4f0870, 8) MULTIEQUAL (ram, 0x4f0870, 8) , (ram, 0x4f0870, 8)]
[(ram, 0x4ee064, 4) MULTIEQUAL (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4)]
[(ram, 0x4ee060, 4) MULTIEQUAL (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4)]
[(ram, 0x4ee058, 8) MULTIEQUAL (ram, 0x4ee058, 8) , (ram, 0x4ee058, 8)]
[(ram, 0x4ee050, 8) MULTIEQUAL (ram, 0x4ee050, 8) , (ram, 0x4ee050, 8)]
[(ram, 0x4ee044, 4) MULTIEQUAL (ram, 0x4ee044, 4) , (ram, 0x4ee044, 4)]
[(ram, 0x4ee040, 4) MULTIEQUAL (ram, 0x4ee040, 4) , (ram, 0x4ee040, 4)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x20a, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x20, 8) MULTIEQUAL (unique, 0x10000f7d, 8) , (unique, 0x10000f85, 8)]
[(stack, 0xfffffffffffffb28, 8) COPY (unique, 0x100011ab, 8), (unique, 0x100011ab, 8) CAST (register, 0x0, 8), (register, 0x0, 8) PTRADD (stack, 0xfffffffffffffb00, 8) , (register, 0x0, 8) , (const, 0x1, 8), (register, 0x0, 8) INT_MULT (stack, 0xfffffffffffffae8, 8) , (const, 0x30, 8), (stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8), (stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[ ---  CBRANCH (ram, 0x208570, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x18, 1) , (const, 0x0, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100011b3, 8) , (const, 0x208591, 8), (unique, 0x100011b3, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x87b, 4)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x87b, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x87b, 4)]
[(ram, 0x4ee040, 4) INDIRECT (ram, 0x4ee040, 4) , (const, 0x87b, 4)]
[(ram, 0x4ee044, 4) INDIRECT (ram, 0x4ee044, 4) , (const, 0x87b, 4)]
[(ram, 0x4ee050, 8) INDIRECT (ram, 0x4ee050, 8) , (const, 0x87b, 4)]
[(ram, 0x4ee058, 8) INDIRECT (ram, 0x4ee058, 8) , (const, 0x87b, 4)]
[(ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x87b, 4)]
[(ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x87b, 4)]
[(ram, 0x4f0870, 8) INDIRECT (ram, 0x4f0870, 8) , (const, 0x87b, 4)]
[(ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x87b, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x87b, 4)]
[(stack, 0xfffffffffffffac4, 4) INDIRECT (stack, 0xfffffffffffffac4, 4) , (const, 0x87b, 4), (stack, 0xfffffffffffffac4, 4) INDIRECT (stack, 0xfffffffffffffac4, 4) , (const, 0x87a, 4)]
[(stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x87b, 4), (stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x87a, 4)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x87b, 4), (stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x87a, 4)]
[(stack, 0xfffffffffffffad8, 8) INDIRECT (stack, 0xfffffffffffffad8, 8) , (const, 0x87b, 4), (stack, 0xfffffffffffffad8, 8) INDIRECT (stack, 0xfffffffffffffad8, 8) , (const, 0x87a, 4)]
[(stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x87b, 4), (stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x87a, 4)]
[(stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x87b, 4), (stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x87a, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x87b, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x87a, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x87b, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x87a, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x87b, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x87a, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x87b, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x87a, 4)]
[(stack, 0xfffffffffffffb08, 4) INDIRECT (stack, 0xfffffffffffffb08, 4) , (const, 0x87b, 4), (stack, 0xfffffffffffffb08, 4) INDIRECT (stack, 0xfffffffffffffb08, 4) , (const, 0x87a, 4)]
[(stack, 0xfffffffffffffb0f, 1) INDIRECT (stack, 0xfffffffffffffb0f, 1) , (const, 0x87b, 4), (stack, 0xfffffffffffffb0f, 1) INDIRECT (stack, 0xfffffffffffffb0f, 1) , (const, 0x87a, 4)]
[(stack, 0xfffffffffffffb10, 4) INDIRECT (stack, 0xfffffffffffffb10, 4) , (const, 0x87b, 4), (stack, 0xfffffffffffffb10, 4) INDIRECT (stack, 0xfffffffffffffb10, 4) , (const, 0x87a, 4)]
[(stack, 0xfffffffffffffb14, 4) INDIRECT (stack, 0xfffffffffffffb14, 4) , (const, 0x87b, 4), (stack, 0xfffffffffffffb14, 4) INDIRECT (stack, 0xfffffffffffffb14, 4) , (const, 0x87a, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x87b, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x87a, 4)]
[(stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x87b, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x87a, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x87b, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x87a, 4)]
[(stack, 0xfffffffffffffb3a, 1) INDIRECT (stack, 0xfffffffffffffb3a, 1) , (const, 0x87b, 4), (stack, 0xfffffffffffffb3a, 1) INDIRECT (stack, 0xfffffffffffffb3a, 1) , (const, 0x87a, 4)]
[(stack, 0xfffffffffffffb3b, 1) INDIRECT (stack, 0xfffffffffffffb3b, 1) , (const, 0x87b, 4), (stack, 0xfffffffffffffb3b, 1) INDIRECT (stack, 0xfffffffffffffb3b, 1) , (const, 0x87a, 4)]
[(stack, 0xfffffffffffffb3c, 4) INDIRECT (stack, 0xfffffffffffffb3c, 4) , (const, 0x87b, 4), (stack, 0xfffffffffffffb3c, 4) INDIRECT (stack, 0xfffffffffffffb3c, 4) , (const, 0x87a, 4)]
[(stack, 0xfffffffffffffb40, 8) INDIRECT (stack, 0xfffffffffffffb40, 8) , (const, 0x87b, 4), (stack, 0xfffffffffffffb40, 8) INDIRECT (stack, 0xfffffffffffffb40, 8) , (const, 0x87a, 4)]
[(stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x87b, 4), (stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x87a, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x87b, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x87a, 4)]
[(stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x87b, 4), (stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x87a, 4)]
[(stack, 0xfffffffffffffb60, 4) INDIRECT (stack, 0xfffffffffffffb60, 4) , (const, 0x87b, 4), (stack, 0xfffffffffffffb60, 4) INDIRECT (stack, 0xfffffffffffffb60, 4) , (const, 0x87a, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x87b, 4), (stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x87a, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x87b, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x87a, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x87b, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x87a, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x87b, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x87a, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x87b, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x87a, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x87b, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x87a, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x87b, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x87a, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x87b, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x87a, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x87b, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x87a, 4)]
[(stack, 0xfffffffffffffb98, 4) INDIRECT (stack, 0xfffffffffffffb98, 4) , (const, 0x87b, 4), (stack, 0xfffffffffffffb98, 4) INDIRECT (stack, 0xfffffffffffffb98, 4) , (const, 0x87a, 4)]
[(stack, 0xfffffffffffffb9c, 4) INDIRECT (stack, 0xfffffffffffffb9c, 4) , (const, 0x87b, 4), (stack, 0xfffffffffffffb9c, 4) INDIRECT (stack, 0xfffffffffffffb9c, 4) , (const, 0x87a, 4)]
[(stack, 0xfffffffffffffba0, 4) INDIRECT (stack, 0xfffffffffffffba0, 4) , (const, 0x87b, 4), (stack, 0xfffffffffffffba0, 4) INDIRECT (stack, 0xfffffffffffffba0, 4) , (const, 0x87a, 4)]
[(stack, 0xfffffffffffffba4, 4) INDIRECT (stack, 0xfffffffffffffba4, 4) , (const, 0x87b, 4), (stack, 0xfffffffffffffba4, 4) INDIRECT (stack, 0xfffffffffffffba4, 4) , (const, 0x87a, 4)]
[(stack, 0xfffffffffffffba8, 16) INDIRECT (stack, 0xfffffffffffffba8, 16) , (const, 0x87b, 4), (stack, 0xfffffffffffffba8, 16) INDIRECT (stack, 0xfffffffffffffba8, 16) , (const, 0x87a, 4)]
[(stack, 0xfffffffffffffbb8, 4) INDIRECT (stack, 0xfffffffffffffbb8, 4) , (const, 0x87b, 4), (stack, 0xfffffffffffffbb8, 4) INDIRECT (stack, 0xfffffffffffffbb8, 4) , (const, 0x87a, 4)]
[(stack, 0xfffffffffffffbbc, 4) INDIRECT (stack, 0xfffffffffffffbbc, 4) , (const, 0x87b, 4), (stack, 0xfffffffffffffbbc, 4) INDIRECT (stack, 0xfffffffffffffbbc, 4) , (const, 0x87a, 4)]
[(stack, 0xfffffffffffffc00, 8) INDIRECT (stack, 0xfffffffffffffc00, 8) , (const, 0x87b, 4), (stack, 0xfffffffffffffc00, 8) INDIRECT (stack, 0xfffffffffffffc00, 8) , (const, 0x87a, 4)]
[(stack, 0xfffffffffffffc08, 8) INDIRECT (stack, 0xfffffffffffffc08, 8) , (const, 0x87b, 4), (stack, 0xfffffffffffffc08, 8) INDIRECT (stack, 0xfffffffffffffc08, 8) , (const, 0x87a, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x87b, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x87a, 4)]
[ ---  CALL (ram, 0x2416d0, 8) , (unique, 0x3200, 8) , (unique, 0x3200, 8) , (unique, 0x3200, 8), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffb3a, 8), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffb3b, 8), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffb48, 8)]
[ ---  BRANCH (ram, 0x207e10, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffc08, 8) MULTIEQUAL (stack, 0xfffffffffffffc08, 8) , (stack, 0xfffffffffffffc08, 8)]
[(stack, 0xfffffffffffffc00, 8) MULTIEQUAL (stack, 0xfffffffffffffc00, 8) , (stack, 0xfffffffffffffc00, 8)]
[(stack, 0xfffffffffffffbbc, 4) MULTIEQUAL (stack, 0xfffffffffffffbbc, 4) , (stack, 0xfffffffffffffbbc, 4)]
[(stack, 0xfffffffffffffbb8, 4) MULTIEQUAL (stack, 0xfffffffffffffbb8, 4) , (stack, 0xfffffffffffffbb8, 4)]
[(stack, 0xfffffffffffffba8, 16) MULTIEQUAL (stack, 0xfffffffffffffba8, 16) , (stack, 0xfffffffffffffba8, 16)]
[(stack, 0xfffffffffffffba4, 4) MULTIEQUAL (stack, 0xfffffffffffffba4, 4) , (stack, 0xfffffffffffffba4, 4)]
[(stack, 0xfffffffffffffba0, 4) MULTIEQUAL (stack, 0xfffffffffffffba0, 4) , (stack, 0xfffffffffffffba0, 4)]
[(stack, 0xfffffffffffffb9c, 4) MULTIEQUAL (stack, 0xfffffffffffffb9c, 4) , (stack, 0xfffffffffffffb9c, 4)]
[(stack, 0xfffffffffffffb98, 4) MULTIEQUAL (stack, 0xfffffffffffffb98, 4) , (stack, 0xfffffffffffffb98, 4)]
[(stack, 0xfffffffffffffb94, 4) MULTIEQUAL (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4)]
[(stack, 0xfffffffffffffb90, 4) MULTIEQUAL (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4)]
[(stack, 0xfffffffffffffb8c, 4) MULTIEQUAL (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4)]
[(stack, 0xfffffffffffffb88, 4) MULTIEQUAL (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4)]
[(stack, 0xfffffffffffffb84, 4) MULTIEQUAL (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4)]
[(stack, 0xfffffffffffffb80, 4) MULTIEQUAL (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4)]
[(stack, 0xfffffffffffffb7c, 4) MULTIEQUAL (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb60, 4) MULTIEQUAL (stack, 0xfffffffffffffb60, 4) , (stack, 0xfffffffffffffb60, 4)]
[(stack, 0xfffffffffffffb58, 8) MULTIEQUAL (stack, 0xfffffffffffffb58, 8) , (stack, 0xfffffffffffffb58, 8)]
[(stack, 0xfffffffffffffb40, 8) MULTIEQUAL (stack, 0xfffffffffffffb40, 8) , (stack, 0xfffffffffffffb40, 8)]
[(stack, 0xfffffffffffffb3c, 4) MULTIEQUAL (stack, 0xfffffffffffffb3c, 4) , (stack, 0xfffffffffffffb3c, 4)]
[(stack, 0xfffffffffffffb3b, 1) MULTIEQUAL (stack, 0xfffffffffffffb3b, 1) , (stack, 0xfffffffffffffb3b, 1)]
[(stack, 0xfffffffffffffb3a, 1) MULTIEQUAL (stack, 0xfffffffffffffb3a, 1) , (stack, 0xfffffffffffffb3a, 1)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb20, 8) MULTIEQUAL (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb14, 4) MULTIEQUAL (stack, 0xfffffffffffffb14, 4) , (stack, 0xfffffffffffffb14, 4)]
[(stack, 0xfffffffffffffb10, 4) MULTIEQUAL (stack, 0xfffffffffffffb10, 4) , (stack, 0xfffffffffffffb10, 4)]
[(stack, 0xfffffffffffffb0f, 1) MULTIEQUAL (stack, 0xfffffffffffffb0f, 1) , (stack, 0xfffffffffffffb0f, 1)]
[(stack, 0xfffffffffffffb08, 4) MULTIEQUAL (stack, 0xfffffffffffffb08, 4) , (stack, 0xfffffffffffffb08, 4)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae4, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[(stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffad8, 8) MULTIEQUAL (stack, 0xfffffffffffffad8, 8) , (stack, 0xfffffffffffffad8, 8)]
[(stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffac8, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffac4, 4) MULTIEQUAL (stack, 0xfffffffffffffac4, 4) , (stack, 0xfffffffffffffac4, 4)]
[(ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(ram, 0x4f08e8, 4) MULTIEQUAL (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4)]
[(ram, 0x4f0870, 8) MULTIEQUAL (ram, 0x4f0870, 8) , (ram, 0x4f0870, 8)]
[(ram, 0x4ee064, 4) MULTIEQUAL (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4)]
[(ram, 0x4ee060, 4) MULTIEQUAL (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4)]
[(ram, 0x4ee058, 8) MULTIEQUAL (ram, 0x4ee058, 8) , (ram, 0x4ee058, 8)]
[(ram, 0x4ee050, 8) MULTIEQUAL (ram, 0x4ee050, 8) , (ram, 0x4ee050, 8)]
[(ram, 0x4ee044, 4) MULTIEQUAL (ram, 0x4ee044, 4) , (ram, 0x4ee044, 4)]
[(ram, 0x4ee040, 4) MULTIEQUAL (ram, 0x4ee040, 4) , (ram, 0x4ee040, 4)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x20a, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x10000ef5, 8) COPY (stack, 0xfffffffffffffb50, 8), (stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(unique, 0x10000edd, 8) COPY (stack, 0xfffffffffffffb48, 8), (stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[ ---  CBRANCH (ram, 0x207e34, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xfffffffffffffb48, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100011bb, 8) , (const, 0x207e34, 8), (unique, 0x100011bb, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x27b, 4)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x27b, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x27b, 4)]
[(ram, 0x4ee040, 4) INDIRECT (ram, 0x4ee040, 4) , (const, 0x27b, 4)]
[(ram, 0x4ee044, 4) INDIRECT (ram, 0x4ee044, 4) , (const, 0x27b, 4)]
[(ram, 0x4ee050, 8) INDIRECT (ram, 0x4ee050, 8) , (const, 0x27b, 4)]
[(ram, 0x4ee058, 8) INDIRECT (ram, 0x4ee058, 8) , (const, 0x27b, 4)]
[(ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x27b, 4)]
[(ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x27b, 4)]
[(ram, 0x4f0870, 8) INDIRECT (ram, 0x4f0870, 8) , (const, 0x27b, 4)]
[(ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x27b, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x27b, 4)]
[(stack, 0xfffffffffffffac4, 4) INDIRECT (stack, 0xfffffffffffffac4, 4) , (const, 0x27b, 4), (stack, 0xfffffffffffffac4, 4) INDIRECT (stack, 0xfffffffffffffac4, 4) , (const, 0x27a, 4)]
[(stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x27b, 4), (stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x27a, 4)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x27b, 4), (stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x27a, 4)]
[(stack, 0xfffffffffffffad8, 8) INDIRECT (stack, 0xfffffffffffffad8, 8) , (const, 0x27b, 4), (stack, 0xfffffffffffffad8, 8) INDIRECT (stack, 0xfffffffffffffad8, 8) , (const, 0x27a, 4)]
[(stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x27b, 4), (stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x27a, 4)]
[(stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x27b, 4), (stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x27a, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x27b, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x27a, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x27b, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x27a, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x27b, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x27a, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x27b, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x27a, 4)]
[(stack, 0xfffffffffffffb08, 4) INDIRECT (stack, 0xfffffffffffffb08, 4) , (const, 0x27b, 4), (stack, 0xfffffffffffffb08, 4) INDIRECT (stack, 0xfffffffffffffb08, 4) , (const, 0x27a, 4)]
[(stack, 0xfffffffffffffb0f, 1) INDIRECT (stack, 0xfffffffffffffb0f, 1) , (const, 0x27b, 4), (stack, 0xfffffffffffffb0f, 1) INDIRECT (stack, 0xfffffffffffffb0f, 1) , (const, 0x27a, 4)]
[(stack, 0xfffffffffffffb10, 4) INDIRECT (stack, 0xfffffffffffffb10, 4) , (const, 0x27b, 4), (stack, 0xfffffffffffffb10, 4) INDIRECT (stack, 0xfffffffffffffb10, 4) , (const, 0x27a, 4)]
[(stack, 0xfffffffffffffb14, 4) INDIRECT (stack, 0xfffffffffffffb14, 4) , (const, 0x27b, 4), (stack, 0xfffffffffffffb14, 4) INDIRECT (stack, 0xfffffffffffffb14, 4) , (const, 0x27a, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x27b, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x27a, 4)]
[(stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x27b, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x27a, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x27b, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x27a, 4)]
[(stack, 0xfffffffffffffb3a, 1) INDIRECT (stack, 0xfffffffffffffb3a, 1) , (const, 0x27b, 4), (stack, 0xfffffffffffffb3a, 1) INDIRECT (stack, 0xfffffffffffffb3a, 1) , (const, 0x27a, 4)]
[(stack, 0xfffffffffffffb3b, 1) INDIRECT (stack, 0xfffffffffffffb3b, 1) , (const, 0x27b, 4), (stack, 0xfffffffffffffb3b, 1) INDIRECT (stack, 0xfffffffffffffb3b, 1) , (const, 0x27a, 4)]
[(stack, 0xfffffffffffffb3c, 4) INDIRECT (stack, 0xfffffffffffffb3c, 4) , (const, 0x27b, 4), (stack, 0xfffffffffffffb3c, 4) INDIRECT (stack, 0xfffffffffffffb3c, 4) , (const, 0x27a, 4)]
[(stack, 0xfffffffffffffb40, 8) INDIRECT (stack, 0xfffffffffffffb40, 8) , (const, 0x27b, 4), (stack, 0xfffffffffffffb40, 8) INDIRECT (stack, 0xfffffffffffffb40, 8) , (const, 0x27a, 4)]
[(stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x27b, 4), (stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x27a, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x27b, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x27a, 4)]
[(stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x27b, 4), (stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x27a, 4)]
[(stack, 0xfffffffffffffb60, 4) INDIRECT (stack, 0xfffffffffffffb60, 4) , (const, 0x27b, 4), (stack, 0xfffffffffffffb60, 4) INDIRECT (stack, 0xfffffffffffffb60, 4) , (const, 0x27a, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x27b, 4), (stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x27a, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x27b, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x27a, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x27b, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x27a, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x27b, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x27a, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x27b, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x27a, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x27b, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x27a, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x27b, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x27a, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x27b, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x27a, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x27b, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x27a, 4)]
[(stack, 0xfffffffffffffb98, 4) INDIRECT (stack, 0xfffffffffffffb98, 4) , (const, 0x27b, 4), (stack, 0xfffffffffffffb98, 4) INDIRECT (stack, 0xfffffffffffffb98, 4) , (const, 0x27a, 4)]
[(stack, 0xfffffffffffffb9c, 4) INDIRECT (stack, 0xfffffffffffffb9c, 4) , (const, 0x27b, 4), (stack, 0xfffffffffffffb9c, 4) INDIRECT (stack, 0xfffffffffffffb9c, 4) , (const, 0x27a, 4)]
[(stack, 0xfffffffffffffba0, 4) INDIRECT (stack, 0xfffffffffffffba0, 4) , (const, 0x27b, 4), (stack, 0xfffffffffffffba0, 4) INDIRECT (stack, 0xfffffffffffffba0, 4) , (const, 0x27a, 4)]
[(stack, 0xfffffffffffffba4, 4) INDIRECT (stack, 0xfffffffffffffba4, 4) , (const, 0x27b, 4), (stack, 0xfffffffffffffba4, 4) INDIRECT (stack, 0xfffffffffffffba4, 4) , (const, 0x27a, 4)]
[(stack, 0xfffffffffffffba8, 16) INDIRECT (stack, 0xfffffffffffffba8, 16) , (const, 0x27b, 4), (stack, 0xfffffffffffffba8, 16) INDIRECT (stack, 0xfffffffffffffba8, 16) , (const, 0x27a, 4)]
[(stack, 0xfffffffffffffbb8, 4) INDIRECT (stack, 0xfffffffffffffbb8, 4) , (const, 0x27b, 4), (stack, 0xfffffffffffffbb8, 4) INDIRECT (stack, 0xfffffffffffffbb8, 4) , (const, 0x27a, 4)]
[(stack, 0xfffffffffffffbbc, 4) INDIRECT (stack, 0xfffffffffffffbbc, 4) , (const, 0x27b, 4), (stack, 0xfffffffffffffbbc, 4) INDIRECT (stack, 0xfffffffffffffbbc, 4) , (const, 0x27a, 4)]
[(stack, 0xfffffffffffffc00, 8) INDIRECT (stack, 0xfffffffffffffc00, 8) , (const, 0x27b, 4), (stack, 0xfffffffffffffc00, 8) INDIRECT (stack, 0xfffffffffffffc00, 8) , (const, 0x27a, 4)]
[(stack, 0xfffffffffffffc08, 8) INDIRECT (stack, 0xfffffffffffffc08, 8) , (const, 0x27b, 4), (stack, 0xfffffffffffffc08, 8) INDIRECT (stack, 0xfffffffffffffc08, 8) , (const, 0x27a, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x27b, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x27a, 4)]
[ ---  CALL (ram, 0x1426d0, 8) , (unique, 0x10000edd, 8) , (unique, 0x10000ef5, 8) , (const, 0x18, 8) , (unique, 0x10000618, 8), (unique, 0x10000618, 8) PTRSUB (const, 0x0, 8) , (const, 0x204010, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffc08, 8) MULTIEQUAL (stack, 0xfffffffffffffc08, 8) , (stack, 0xfffffffffffffc08, 8)]
[(stack, 0xfffffffffffffc00, 8) MULTIEQUAL (stack, 0xfffffffffffffc00, 8) , (stack, 0xfffffffffffffc00, 8)]
[(stack, 0xfffffffffffffbbc, 4) MULTIEQUAL (stack, 0xfffffffffffffbbc, 4) , (stack, 0xfffffffffffffbbc, 4)]
[(stack, 0xfffffffffffffbb8, 4) MULTIEQUAL (stack, 0xfffffffffffffbb8, 4) , (stack, 0xfffffffffffffbb8, 4)]
[(stack, 0xfffffffffffffba8, 16) MULTIEQUAL (stack, 0xfffffffffffffba8, 16) , (stack, 0xfffffffffffffba8, 16)]
[(stack, 0xfffffffffffffba4, 4) MULTIEQUAL (stack, 0xfffffffffffffba4, 4) , (stack, 0xfffffffffffffba4, 4)]
[(stack, 0xfffffffffffffba0, 4) MULTIEQUAL (stack, 0xfffffffffffffba0, 4) , (stack, 0xfffffffffffffba0, 4)]
[(stack, 0xfffffffffffffb9c, 4) MULTIEQUAL (stack, 0xfffffffffffffb9c, 4) , (stack, 0xfffffffffffffb9c, 4)]
[(stack, 0xfffffffffffffb98, 4) MULTIEQUAL (stack, 0xfffffffffffffb98, 4) , (stack, 0xfffffffffffffb98, 4)]
[(stack, 0xfffffffffffffb94, 4) MULTIEQUAL (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4)]
[(stack, 0xfffffffffffffb90, 4) MULTIEQUAL (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4)]
[(stack, 0xfffffffffffffb8c, 4) MULTIEQUAL (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4)]
[(stack, 0xfffffffffffffb88, 4) MULTIEQUAL (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4)]
[(stack, 0xfffffffffffffb84, 4) MULTIEQUAL (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4)]
[(stack, 0xfffffffffffffb80, 4) MULTIEQUAL (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4)]
[(stack, 0xfffffffffffffb7c, 4) MULTIEQUAL (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb60, 4) MULTIEQUAL (stack, 0xfffffffffffffb60, 4) , (stack, 0xfffffffffffffb60, 4)]
[(stack, 0xfffffffffffffb58, 8) MULTIEQUAL (stack, 0xfffffffffffffb58, 8) , (stack, 0xfffffffffffffb58, 8)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb3c, 4) MULTIEQUAL (stack, 0xfffffffffffffb3c, 4) , (stack, 0xfffffffffffffb3c, 4)]
[(stack, 0xfffffffffffffb3b, 1) MULTIEQUAL (stack, 0xfffffffffffffb3b, 1) , (stack, 0xfffffffffffffb3b, 1)]
[(stack, 0xfffffffffffffb3a, 1) MULTIEQUAL (stack, 0xfffffffffffffb3a, 1) , (stack, 0xfffffffffffffb3a, 1)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb20, 8) MULTIEQUAL (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb14, 4) MULTIEQUAL (stack, 0xfffffffffffffb14, 4) , (stack, 0xfffffffffffffb14, 4)]
[(stack, 0xfffffffffffffb10, 4) MULTIEQUAL (stack, 0xfffffffffffffb10, 4) , (stack, 0xfffffffffffffb10, 4)]
[(stack, 0xfffffffffffffb0f, 1) MULTIEQUAL (stack, 0xfffffffffffffb0f, 1) , (stack, 0xfffffffffffffb0f, 1)]
[(stack, 0xfffffffffffffb08, 4) MULTIEQUAL (stack, 0xfffffffffffffb08, 4) , (stack, 0xfffffffffffffb08, 4)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae4, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[(stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffad8, 8) MULTIEQUAL (stack, 0xfffffffffffffad8, 8) , (stack, 0xfffffffffffffad8, 8)]
[(stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffac8, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffac4, 4) MULTIEQUAL (stack, 0xfffffffffffffac4, 4) , (stack, 0xfffffffffffffac4, 4)]
[(ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(ram, 0x4f08e8, 4) MULTIEQUAL (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4)]
[(ram, 0x4f0870, 8) MULTIEQUAL (ram, 0x4f0870, 8) , (ram, 0x4f0870, 8)]
[(ram, 0x4ee064, 4) MULTIEQUAL (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4)]
[(ram, 0x4ee060, 4) MULTIEQUAL (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4)]
[(ram, 0x4ee058, 8) MULTIEQUAL (ram, 0x4ee058, 8) , (ram, 0x4ee058, 8)]
[(ram, 0x4ee050, 8) MULTIEQUAL (ram, 0x4ee050, 8) , (ram, 0x4ee050, 8)]
[(ram, 0x4ee044, 4) MULTIEQUAL (ram, 0x4ee044, 4) , (ram, 0x4ee044, 4)]
[(ram, 0x4ee040, 4) MULTIEQUAL (ram, 0x4ee040, 4) , (ram, 0x4ee040, 4)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x20a, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x20879d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xfffffffffffffb40, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffb40, 8) MULTIEQUAL (stack, 0xfffffffffffffb40, 8) , (stack, 0xfffffffffffffb40, 8)]
[(register, 0xa8, 4) COPY (const, 0x0, 4)]
[(register, 0x18, 8) COPY (const, 0x0, 8)]
[(register, 0xa0, 4) COPY (const, 0xffffffff, 4)]
[(stack, 0xfffffffffffffb30, 8) COPY (const, 0x0, 8)]
[(stack, 0xfffffffffffffaf8, 8) COPY (unique, 0x3200, 8), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffb68, 8)]
[(unique, 0x3100, 8) CAST (unique, 0x100011c3, 8), (unique, 0x100011c3, 8) PTRADD (stack, 0xfffffffffffffb00, 8) , (const, 0x8, 8) , (const, 0x1, 8)]
[(register, 0x0, 8) COPY (const, 0x0, 8)]
[(stack, 0xfffffffffffffb18, 8) COPY (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (stack, 0xfffffffffffffb20, 8) , (const, 0x8, 8)]
[(unique, 0x10001035, 8) COPY (stack, 0xfffffffffffffb40, 8)]
[ ---  BRANCH (ram, 0x207f47, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffc08, 8) MULTIEQUAL (stack, 0xfffffffffffffc08, 8) , (stack, 0xfffffffffffffc08, 8)]
[(stack, 0xfffffffffffffc00, 8) MULTIEQUAL (stack, 0xfffffffffffffc00, 8) , (stack, 0xfffffffffffffc00, 8)]
[(stack, 0xfffffffffffffbbc, 4) MULTIEQUAL (stack, 0xfffffffffffffbbc, 4) , (stack, 0xfffffffffffffbbc, 4)]
[(stack, 0xfffffffffffffbb8, 4) MULTIEQUAL (stack, 0xfffffffffffffbb8, 4) , (stack, 0xfffffffffffffbb8, 4)]
[(stack, 0xfffffffffffffba8, 16) MULTIEQUAL (stack, 0xfffffffffffffba8, 16) , (stack, 0xfffffffffffffba8, 16)]
[(stack, 0xfffffffffffffba4, 4) MULTIEQUAL (stack, 0xfffffffffffffba4, 4) , (stack, 0xfffffffffffffba4, 4)]
[(stack, 0xfffffffffffffba0, 4) MULTIEQUAL (stack, 0xfffffffffffffba0, 4) , (stack, 0xfffffffffffffba0, 4)]
[(stack, 0xfffffffffffffb9c, 4) MULTIEQUAL (stack, 0xfffffffffffffb9c, 4) , (stack, 0xfffffffffffffb9c, 4)]
[(stack, 0xfffffffffffffb98, 4) MULTIEQUAL (stack, 0xfffffffffffffb98, 4) , (stack, 0xfffffffffffffb98, 4)]
[(stack, 0xfffffffffffffb94, 4) MULTIEQUAL (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4)]
[(stack, 0xfffffffffffffb90, 4) MULTIEQUAL (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4)]
[(stack, 0xfffffffffffffb8c, 4) MULTIEQUAL (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4)]
[(stack, 0xfffffffffffffb88, 4) MULTIEQUAL (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4)]
[(stack, 0xfffffffffffffb84, 4) MULTIEQUAL (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4)]
[(stack, 0xfffffffffffffb80, 4) MULTIEQUAL (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4)]
[(stack, 0xfffffffffffffb7c, 4) MULTIEQUAL (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb60, 4) MULTIEQUAL (stack, 0xfffffffffffffb60, 4) , (stack, 0xfffffffffffffb60, 4)]
[(stack, 0xfffffffffffffb58, 8) MULTIEQUAL (stack, 0xfffffffffffffb58, 8) , (stack, 0xfffffffffffffb58, 8)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb40, 8) MULTIEQUAL (stack, 0xfffffffffffffb40, 8) , (stack, 0xfffffffffffffb40, 8)]
[(stack, 0xfffffffffffffb3c, 4) MULTIEQUAL (stack, 0xfffffffffffffb3c, 4) , (stack, 0xfffffffffffffb3c, 4)]
[(stack, 0xfffffffffffffb3b, 1) MULTIEQUAL (stack, 0xfffffffffffffb3b, 1) , (stack, 0xfffffffffffffb3b, 1)]
[(stack, 0xfffffffffffffb3a, 1) MULTIEQUAL (stack, 0xfffffffffffffb3a, 1) , (stack, 0xfffffffffffffb3a, 1)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb20, 8) MULTIEQUAL (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb14, 4) MULTIEQUAL (stack, 0xfffffffffffffb14, 4) , (stack, 0xfffffffffffffb14, 4)]
[(stack, 0xfffffffffffffb10, 4) MULTIEQUAL (stack, 0xfffffffffffffb10, 4) , (stack, 0xfffffffffffffb10, 4)]
[(stack, 0xfffffffffffffb0f, 1) MULTIEQUAL (stack, 0xfffffffffffffb0f, 1) , (stack, 0xfffffffffffffb0f, 1)]
[(stack, 0xfffffffffffffb08, 4) MULTIEQUAL (stack, 0xfffffffffffffb08, 4) , (stack, 0xfffffffffffffb08, 4)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae4, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[(stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffad8, 8) MULTIEQUAL (stack, 0xfffffffffffffad8, 8) , (stack, 0xfffffffffffffad8, 8)]
[(stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffac8, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffac4, 4) MULTIEQUAL (stack, 0xfffffffffffffac4, 4) , (stack, 0xfffffffffffffac4, 4)]
[(register, 0x20a, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xa8, 4) MULTIEQUAL (register, 0xa8, 4) , (register, 0xa8, 4)]
[(register, 0xa0, 4) MULTIEQUAL (register, 0xa0, 4) , (register, 0xa0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100011cb, 8) , (register, 0xb0, 8), (unique, 0x100011cb, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0x100007a8, 8) , (const, 0x6, 8) , (const, 0x1, 8), (unique, 0x100007a8, 8) PTRSUB (unique, 0x100007a0, 8) , (const, 0x2, 8), (unique, 0x100007a0, 8) PTRADD (register, 0xb8, 8) , (const, 0xffffffffffffffff, 8) , (const, 0x10, 8), (register, 0xb0, 8) MULTIEQUAL (unique, 0x10001035, 8) , (unique, 0xbd80, 8), (register, 0xb8, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0xb8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100011d3, 8) , (const, 0xffffffff, 4), (unique, 0x100011d3, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0x100007c8, 8) , (const, 0x2, 8) , (const, 0x1, 8), (unique, 0x100007c8, 8) PTRSUB (unique, 0x100007c0, 8) , (const, 0x2, 8), (unique, 0x100007c0, 8) PTRADD (register, 0xb8, 8) , (const, 0x2, 8) , (const, 0x10, 8), (register, 0xb8, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0xb8, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x2d6, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x2d2, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x2cf, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4ee040, 4) INDIRECT (ram, 0x4ee040, 4) , (const, 0x2d6, 4), (ram, 0x4ee040, 4) INDIRECT (ram, 0x4ee040, 4) , (const, 0x2d2, 4), (ram, 0x4ee040, 4) INDIRECT (ram, 0x4ee040, 4) , (const, 0x2cf, 4), (ram, 0x4ee040, 4) MULTIEQUAL (ram, 0x4ee040, 4) , (ram, 0x4ee040, 4)]
[(ram, 0x4ee044, 4) INDIRECT (ram, 0x4ee044, 4) , (const, 0x2d6, 4), (ram, 0x4ee044, 4) INDIRECT (ram, 0x4ee044, 4) , (const, 0x2d2, 4), (ram, 0x4ee044, 4) INDIRECT (ram, 0x4ee044, 4) , (const, 0x2cf, 4), (ram, 0x4ee044, 4) MULTIEQUAL (ram, 0x4ee044, 4) , (ram, 0x4ee044, 4)]
[(ram, 0x4ee050, 8) INDIRECT (ram, 0x4ee050, 8) , (const, 0x2d6, 4), (ram, 0x4ee050, 8) INDIRECT (ram, 0x4ee050, 8) , (const, 0x2d2, 4), (ram, 0x4ee050, 8) INDIRECT (ram, 0x4ee050, 8) , (const, 0x2cf, 4), (ram, 0x4ee050, 8) MULTIEQUAL (ram, 0x4ee050, 8) , (ram, 0x4ee050, 8)]
[(ram, 0x4ee058, 8) INDIRECT (ram, 0x4ee058, 8) , (const, 0x2d6, 4), (ram, 0x4ee058, 8) INDIRECT (ram, 0x4ee058, 8) , (const, 0x2d2, 4), (ram, 0x4ee058, 8) INDIRECT (ram, 0x4ee058, 8) , (const, 0x2cf, 4), (ram, 0x4ee058, 8) MULTIEQUAL (ram, 0x4ee058, 8) , (ram, 0x4ee058, 8)]
[(ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x2d6, 4), (ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x2d2, 4), (ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x2cf, 4), (ram, 0x4ee060, 4) MULTIEQUAL (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4)]
[(ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x2d6, 4), (ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x2d2, 4), (ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x2cf, 4), (ram, 0x4ee064, 4) MULTIEQUAL (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4)]
[(ram, 0x4f0870, 8) INDIRECT (ram, 0x4f0870, 8) , (const, 0x2d6, 4), (ram, 0x4f0870, 8) INDIRECT (ram, 0x4f0870, 8) , (const, 0x2d2, 4), (ram, 0x4f0870, 8) INDIRECT (ram, 0x4f0870, 8) , (const, 0x2cf, 4), (ram, 0x4f0870, 8) MULTIEQUAL (ram, 0x4f0870, 8) , (ram, 0x4f0870, 8)]
[(ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x2d6, 4), (ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x2d2, 4), (ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x2cf, 4), (ram, 0x4f08e8, 4) MULTIEQUAL (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x2d6, 4), (ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x2d2, 4), (ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x2cf, 4), (ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3400, 8) , (register, 0x18, 8), (unique, 0x3400, 8) PTRADD (stack, 0xfffffffffffffb28, 8) , (register, 0x18, 8) , (const, 0x8, 8), (register, 0x18, 8) MULTIEQUAL (register, 0x18, 8) , (register, 0x18, 8), (stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[ ---  CBRANCH (ram, 0x207f70, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0xb0, 8)]
[(register, 0x10, 8) INT_ZEXT (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0x0, 8) , (const, 0x10, 8)]
[ ---  CBRANCH (ram, 0x2080d0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbc80, 4) , (unique, 0x5200, 4), (unique, 0x5200, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0xb0, 8) , (const, 0x10, 8), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0x0, 8) , (const, 0x10, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100011db, 8) , (const, 0x2080dd, 8), (unique, 0x100011db, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x774, 4)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x774, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x774, 4)]
[(ram, 0x4ee040, 4) INDIRECT (ram, 0x4ee040, 4) , (const, 0x774, 4)]
[(ram, 0x4ee044, 4) INDIRECT (ram, 0x4ee044, 4) , (const, 0x774, 4)]
[(ram, 0x4ee050, 8) INDIRECT (ram, 0x4ee050, 8) , (const, 0x774, 4)]
[(ram, 0x4ee058, 8) INDIRECT (ram, 0x4ee058, 8) , (const, 0x774, 4)]
[(ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x774, 4)]
[(ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x774, 4)]
[(ram, 0x4f0870, 8) INDIRECT (ram, 0x4f0870, 8) , (const, 0x774, 4)]
[(ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x774, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x774, 4)]
[(stack, 0xfffffffffffffac4, 4) INDIRECT (stack, 0xfffffffffffffac4, 4) , (const, 0x774, 4), (stack, 0xfffffffffffffac4, 4) INDIRECT (stack, 0xfffffffffffffac4, 4) , (const, 0x773, 4)]
[(stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x774, 4), (stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x773, 4)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x774, 4), (stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x773, 4)]
[(stack, 0xfffffffffffffad8, 8) INDIRECT (stack, 0xfffffffffffffad8, 8) , (const, 0x774, 4), (stack, 0xfffffffffffffad8, 8) INDIRECT (stack, 0xfffffffffffffad8, 8) , (const, 0x773, 4)]
[(stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x774, 4), (stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x773, 4)]
[(stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x774, 4), (stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x773, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x774, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x773, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x774, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x773, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x774, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x773, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x774, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x773, 4)]
[(stack, 0xfffffffffffffb08, 4) INDIRECT (stack, 0xfffffffffffffb08, 4) , (const, 0x774, 4), (stack, 0xfffffffffffffb08, 4) INDIRECT (stack, 0xfffffffffffffb08, 4) , (const, 0x773, 4)]
[(stack, 0xfffffffffffffb0f, 1) INDIRECT (stack, 0xfffffffffffffb0f, 1) , (const, 0x774, 4), (stack, 0xfffffffffffffb0f, 1) INDIRECT (stack, 0xfffffffffffffb0f, 1) , (const, 0x773, 4)]
[(stack, 0xfffffffffffffb10, 4) INDIRECT (stack, 0xfffffffffffffb10, 4) , (const, 0x774, 4), (stack, 0xfffffffffffffb10, 4) INDIRECT (stack, 0xfffffffffffffb10, 4) , (const, 0x773, 4)]
[(stack, 0xfffffffffffffb14, 4) INDIRECT (stack, 0xfffffffffffffb14, 4) , (const, 0x774, 4), (stack, 0xfffffffffffffb14, 4) INDIRECT (stack, 0xfffffffffffffb14, 4) , (const, 0x773, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x774, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x773, 4)]
[(stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x774, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x773, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x774, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x773, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x774, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x773, 4)]
[(stack, 0xfffffffffffffb3a, 1) INDIRECT (stack, 0xfffffffffffffb3a, 1) , (const, 0x774, 4), (stack, 0xfffffffffffffb3a, 1) INDIRECT (stack, 0xfffffffffffffb3a, 1) , (const, 0x773, 4)]
[(stack, 0xfffffffffffffb3b, 1) INDIRECT (stack, 0xfffffffffffffb3b, 1) , (const, 0x774, 4), (stack, 0xfffffffffffffb3b, 1) INDIRECT (stack, 0xfffffffffffffb3b, 1) , (const, 0x773, 4)]
[(stack, 0xfffffffffffffb3c, 4) INDIRECT (stack, 0xfffffffffffffb3c, 4) , (const, 0x774, 4), (stack, 0xfffffffffffffb3c, 4) INDIRECT (stack, 0xfffffffffffffb3c, 4) , (const, 0x773, 4)]
[(stack, 0xfffffffffffffb40, 8) INDIRECT (stack, 0xfffffffffffffb40, 8) , (const, 0x774, 4), (stack, 0xfffffffffffffb40, 8) INDIRECT (stack, 0xfffffffffffffb40, 8) , (const, 0x773, 4)]
[(stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x774, 4), (stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x773, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x774, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x773, 4)]
[(stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x774, 4), (stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x773, 4)]
[(stack, 0xfffffffffffffb60, 4) INDIRECT (stack, 0xfffffffffffffb60, 4) , (const, 0x774, 4), (stack, 0xfffffffffffffb60, 4) INDIRECT (stack, 0xfffffffffffffb60, 4) , (const, 0x773, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x774, 4), (stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x773, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x774, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x773, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x774, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x773, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x774, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x773, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x774, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x773, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x774, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x773, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x774, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x773, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x774, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x773, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x774, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x773, 4)]
[(stack, 0xfffffffffffffb98, 4) INDIRECT (stack, 0xfffffffffffffb98, 4) , (const, 0x774, 4), (stack, 0xfffffffffffffb98, 4) INDIRECT (stack, 0xfffffffffffffb98, 4) , (const, 0x773, 4)]
[(stack, 0xfffffffffffffb9c, 4) INDIRECT (stack, 0xfffffffffffffb9c, 4) , (const, 0x774, 4), (stack, 0xfffffffffffffb9c, 4) INDIRECT (stack, 0xfffffffffffffb9c, 4) , (const, 0x773, 4)]
[(stack, 0xfffffffffffffba0, 4) INDIRECT (stack, 0xfffffffffffffba0, 4) , (const, 0x774, 4), (stack, 0xfffffffffffffba0, 4) INDIRECT (stack, 0xfffffffffffffba0, 4) , (const, 0x773, 4)]
[(stack, 0xfffffffffffffba4, 4) INDIRECT (stack, 0xfffffffffffffba4, 4) , (const, 0x774, 4), (stack, 0xfffffffffffffba4, 4) INDIRECT (stack, 0xfffffffffffffba4, 4) , (const, 0x773, 4)]
[(stack, 0xfffffffffffffba8, 16) INDIRECT (stack, 0xfffffffffffffba8, 16) , (const, 0x774, 4), (stack, 0xfffffffffffffba8, 16) INDIRECT (stack, 0xfffffffffffffba8, 16) , (const, 0x773, 4)]
[(stack, 0xfffffffffffffbb8, 4) INDIRECT (stack, 0xfffffffffffffbb8, 4) , (const, 0x774, 4), (stack, 0xfffffffffffffbb8, 4) INDIRECT (stack, 0xfffffffffffffbb8, 4) , (const, 0x773, 4)]
[(stack, 0xfffffffffffffbbc, 4) INDIRECT (stack, 0xfffffffffffffbbc, 4) , (const, 0x774, 4), (stack, 0xfffffffffffffbbc, 4) INDIRECT (stack, 0xfffffffffffffbbc, 4) , (const, 0x773, 4)]
[(stack, 0xfffffffffffffc00, 8) INDIRECT (stack, 0xfffffffffffffc00, 8) , (const, 0x774, 4), (stack, 0xfffffffffffffc00, 8) INDIRECT (stack, 0xfffffffffffffc00, 8) , (const, 0x773, 4)]
[(stack, 0xfffffffffffffc08, 8) INDIRECT (stack, 0xfffffffffffffc08, 8) , (const, 0x774, 4), (stack, 0xfffffffffffffc08, 8) INDIRECT (stack, 0xfffffffffffffc08, 8) , (const, 0x773, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x774, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x773, 4)]
[ ---  CBRANCH (ram, 0x207f70, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x121220, 8) , (unique, 0xbd80, 8) , (unique, 0xbd80, 8) , (register, 0x10, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0x0, 8) , (const, 0x18, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0xb0, 8) , (const, 0x18, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffc08, 8) MULTIEQUAL (stack, 0xfffffffffffffc08, 8) , (stack, 0xfffffffffffffc08, 8) , (stack, 0xfffffffffffffc08, 8)]
[(stack, 0xfffffffffffffc00, 8) MULTIEQUAL (stack, 0xfffffffffffffc00, 8) , (stack, 0xfffffffffffffc00, 8) , (stack, 0xfffffffffffffc00, 8)]
[(stack, 0xfffffffffffffbbc, 4) MULTIEQUAL (stack, 0xfffffffffffffbbc, 4) , (stack, 0xfffffffffffffbbc, 4) , (stack, 0xfffffffffffffbbc, 4)]
[(stack, 0xfffffffffffffbb8, 4) MULTIEQUAL (stack, 0xfffffffffffffbb8, 4) , (stack, 0xfffffffffffffbb8, 4) , (stack, 0xfffffffffffffbb8, 4)]
[(stack, 0xfffffffffffffba8, 16) MULTIEQUAL (stack, 0xfffffffffffffba8, 16) , (stack, 0xfffffffffffffba8, 16) , (stack, 0xfffffffffffffba8, 16)]
[(stack, 0xfffffffffffffba4, 4) MULTIEQUAL (stack, 0xfffffffffffffba4, 4) , (stack, 0xfffffffffffffba4, 4) , (stack, 0xfffffffffffffba4, 4)]
[(stack, 0xfffffffffffffba0, 4) MULTIEQUAL (stack, 0xfffffffffffffba0, 4) , (stack, 0xfffffffffffffba0, 4) , (stack, 0xfffffffffffffba0, 4)]
[(stack, 0xfffffffffffffb9c, 4) MULTIEQUAL (stack, 0xfffffffffffffb9c, 4) , (stack, 0xfffffffffffffb9c, 4) , (stack, 0xfffffffffffffb9c, 4)]
[(stack, 0xfffffffffffffb98, 4) MULTIEQUAL (stack, 0xfffffffffffffb98, 4) , (stack, 0xfffffffffffffb98, 4) , (stack, 0xfffffffffffffb98, 4)]
[(stack, 0xfffffffffffffb94, 4) MULTIEQUAL (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4)]
[(stack, 0xfffffffffffffb90, 4) MULTIEQUAL (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4)]
[(stack, 0xfffffffffffffb8c, 4) MULTIEQUAL (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4)]
[(stack, 0xfffffffffffffb88, 4) MULTIEQUAL (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4)]
[(stack, 0xfffffffffffffb84, 4) MULTIEQUAL (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4)]
[(stack, 0xfffffffffffffb80, 4) MULTIEQUAL (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4)]
[(stack, 0xfffffffffffffb7c, 4) MULTIEQUAL (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb60, 4) MULTIEQUAL (stack, 0xfffffffffffffb60, 4) , (stack, 0xfffffffffffffb60, 4) , (stack, 0xfffffffffffffb60, 4)]
[(stack, 0xfffffffffffffb58, 8) MULTIEQUAL (stack, 0xfffffffffffffb58, 8) , (stack, 0xfffffffffffffb58, 8) , (stack, 0xfffffffffffffb58, 8)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb40, 8) MULTIEQUAL (stack, 0xfffffffffffffb40, 8) , (stack, 0xfffffffffffffb40, 8) , (stack, 0xfffffffffffffb40, 8)]
[(stack, 0xfffffffffffffb3c, 4) MULTIEQUAL (stack, 0xfffffffffffffb3c, 4) , (stack, 0xfffffffffffffb3c, 4) , (stack, 0xfffffffffffffb3c, 4)]
[(stack, 0xfffffffffffffb3b, 1) MULTIEQUAL (stack, 0xfffffffffffffb3b, 1) , (stack, 0xfffffffffffffb3b, 1) , (stack, 0xfffffffffffffb3b, 1)]
[(stack, 0xfffffffffffffb3a, 1) MULTIEQUAL (stack, 0xfffffffffffffb3a, 1) , (stack, 0xfffffffffffffb3a, 1) , (stack, 0xfffffffffffffb3a, 1)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb14, 4) MULTIEQUAL (stack, 0xfffffffffffffb14, 4) , (stack, 0xfffffffffffffb14, 4) , (stack, 0xfffffffffffffb14, 4)]
[(stack, 0xfffffffffffffb10, 4) MULTIEQUAL (stack, 0xfffffffffffffb10, 4) , (stack, 0xfffffffffffffb10, 4) , (stack, 0xfffffffffffffb10, 4)]
[(stack, 0xfffffffffffffb0f, 1) MULTIEQUAL (stack, 0xfffffffffffffb0f, 1) , (stack, 0xfffffffffffffb0f, 1) , (stack, 0xfffffffffffffb0f, 1)]
[(stack, 0xfffffffffffffb08, 4) MULTIEQUAL (stack, 0xfffffffffffffb08, 4) , (stack, 0xfffffffffffffb08, 4) , (stack, 0xfffffffffffffb08, 4)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae4, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[(stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffad8, 8) MULTIEQUAL (stack, 0xfffffffffffffad8, 8) , (stack, 0xfffffffffffffad8, 8) , (stack, 0xfffffffffffffad8, 8)]
[(stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffac8, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffac4, 4) MULTIEQUAL (stack, 0xfffffffffffffac4, 4) , (stack, 0xfffffffffffffac4, 4) , (stack, 0xfffffffffffffac4, 4)]
[(register, 0x20a, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1) , (register, 0x20a, 1)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x10000ebd, 8) COPY (stack, 0xfffffffffffffb20, 8), (stack, 0xfffffffffffffb20, 8) MULTIEQUAL (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (const, 0x0, 1), (unique, 0x3100, 8) PTRADD (unique, 0x10000800, 8) , (const, 0xb, 8) , (const, 0x1, 8), (unique, 0x10000800, 8) PTRSUB (unique, 0x100007f8, 8) , (const, 0x2, 8), (unique, 0x100007f8, 8) PTRADD (register, 0xb8, 8) , (const, 0x1, 8) , (const, 0x10, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (const, 0x0, 1), (unique, 0x3100, 8) PTRADD (unique, 0x10000820, 8) , (const, 0xc, 8) , (const, 0x1, 8), (unique, 0x10000820, 8) PTRSUB (unique, 0x10000818, 8) , (const, 0x2, 8), (unique, 0x10000818, 8) PTRADD (register, 0xb8, 8) , (const, 0x1, 8) , (const, 0x10, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (const, 0x0, 1), (unique, 0x3100, 8) PTRADD (unique, 0x10000840, 8) , (const, 0xd, 8) , (const, 0x1, 8), (unique, 0x10000840, 8) PTRSUB (unique, 0x10000838, 8) , (const, 0x2, 8), (unique, 0x10000838, 8) PTRADD (register, 0xb8, 8) , (const, 0x1, 8) , (const, 0x10, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x2fe, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x2fb, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x2f8, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x2f5, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4ee040, 4) INDIRECT (ram, 0x4ee040, 4) , (const, 0x2fe, 4), (ram, 0x4ee040, 4) INDIRECT (ram, 0x4ee040, 4) , (const, 0x2fb, 4), (ram, 0x4ee040, 4) INDIRECT (ram, 0x4ee040, 4) , (const, 0x2f8, 4), (ram, 0x4ee040, 4) INDIRECT (ram, 0x4ee040, 4) , (const, 0x2f5, 4), (ram, 0x4ee040, 4) MULTIEQUAL (ram, 0x4ee040, 4) , (ram, 0x4ee040, 4) , (ram, 0x4ee040, 4)]
[(ram, 0x4ee044, 4) INDIRECT (ram, 0x4ee044, 4) , (const, 0x2fe, 4), (ram, 0x4ee044, 4) INDIRECT (ram, 0x4ee044, 4) , (const, 0x2fb, 4), (ram, 0x4ee044, 4) INDIRECT (ram, 0x4ee044, 4) , (const, 0x2f8, 4), (ram, 0x4ee044, 4) INDIRECT (ram, 0x4ee044, 4) , (const, 0x2f5, 4), (ram, 0x4ee044, 4) MULTIEQUAL (ram, 0x4ee044, 4) , (ram, 0x4ee044, 4) , (ram, 0x4ee044, 4)]
[(ram, 0x4ee050, 8) INDIRECT (ram, 0x4ee050, 8) , (const, 0x2fe, 4), (ram, 0x4ee050, 8) INDIRECT (ram, 0x4ee050, 8) , (const, 0x2fb, 4), (ram, 0x4ee050, 8) INDIRECT (ram, 0x4ee050, 8) , (const, 0x2f8, 4), (ram, 0x4ee050, 8) INDIRECT (ram, 0x4ee050, 8) , (const, 0x2f5, 4), (ram, 0x4ee050, 8) MULTIEQUAL (ram, 0x4ee050, 8) , (ram, 0x4ee050, 8) , (ram, 0x4ee050, 8)]
[(ram, 0x4ee058, 8) INDIRECT (ram, 0x4ee058, 8) , (const, 0x2fe, 4), (ram, 0x4ee058, 8) INDIRECT (ram, 0x4ee058, 8) , (const, 0x2fb, 4), (ram, 0x4ee058, 8) INDIRECT (ram, 0x4ee058, 8) , (const, 0x2f8, 4), (ram, 0x4ee058, 8) INDIRECT (ram, 0x4ee058, 8) , (const, 0x2f5, 4), (ram, 0x4ee058, 8) MULTIEQUAL (ram, 0x4ee058, 8) , (ram, 0x4ee058, 8) , (ram, 0x4ee058, 8)]
[(ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x2fe, 4), (ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x2fb, 4), (ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x2f8, 4), (ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x2f5, 4), (ram, 0x4ee060, 4) MULTIEQUAL (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4)]
[(ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x2fe, 4), (ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x2fb, 4), (ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x2f8, 4), (ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x2f5, 4), (ram, 0x4ee064, 4) MULTIEQUAL (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4)]
[(ram, 0x4f0870, 8) INDIRECT (ram, 0x4f0870, 8) , (const, 0x2fe, 4), (ram, 0x4f0870, 8) INDIRECT (ram, 0x4f0870, 8) , (const, 0x2fb, 4), (ram, 0x4f0870, 8) INDIRECT (ram, 0x4f0870, 8) , (const, 0x2f8, 4), (ram, 0x4f0870, 8) INDIRECT (ram, 0x4f0870, 8) , (const, 0x2f5, 4), (ram, 0x4f0870, 8) MULTIEQUAL (ram, 0x4f0870, 8) , (ram, 0x4f0870, 8) , (ram, 0x4f0870, 8)]
[(ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x2fe, 4), (ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x2fb, 4), (ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x2f8, 4), (ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x2f5, 4), (ram, 0x4f08e8, 4) MULTIEQUAL (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x2fe, 4), (ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x2fb, 4), (ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x2f8, 4), (ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x2f5, 4), (ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100011e3, 8) , (const, 0xffffffff, 4), (unique, 0x100011e3, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb8, 8) , (const, 0x2, 8) , (const, 0x10, 8)]
[ ---  CBRANCH (ram, 0x207e98, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xa0, 4) , (const, 0xffffffff, 4)]
[ ---  CBRANCH (ram, 0x207ea9, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xa8, 4) , (const, 0x2, 4)]
[ ---  CBRANCH (ram, 0x2080bb, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd00, 4) , (const, 0xa, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0xb0, 8) , (const, 0x4, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100011eb, 8) , (const, 0x207ec8, 8), (unique, 0x100011eb, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x768, 4)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x768, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x768, 4)]
[(ram, 0x4ee040, 4) INDIRECT (ram, 0x4ee040, 4) , (const, 0x768, 4)]
[(ram, 0x4ee044, 4) INDIRECT (ram, 0x4ee044, 4) , (const, 0x768, 4)]
[(ram, 0x4ee050, 8) INDIRECT (ram, 0x4ee050, 8) , (const, 0x768, 4)]
[(ram, 0x4ee058, 8) INDIRECT (ram, 0x4ee058, 8) , (const, 0x768, 4)]
[(ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x768, 4)]
[(ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x768, 4)]
[(ram, 0x4f0870, 8) INDIRECT (ram, 0x4f0870, 8) , (const, 0x768, 4)]
[(ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x768, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x768, 4)]
[(stack, 0xfffffffffffffac4, 4) INDIRECT (stack, 0xfffffffffffffac4, 4) , (const, 0x768, 4), (stack, 0xfffffffffffffac4, 4) INDIRECT (stack, 0xfffffffffffffac4, 4) , (const, 0x767, 4)]
[(stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x768, 4), (stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x767, 4)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x768, 4), (stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x767, 4)]
[(stack, 0xfffffffffffffad8, 8) INDIRECT (stack, 0xfffffffffffffad8, 8) , (const, 0x768, 4), (stack, 0xfffffffffffffad8, 8) INDIRECT (stack, 0xfffffffffffffad8, 8) , (const, 0x767, 4)]
[(stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x768, 4), (stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x767, 4)]
[(stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x768, 4), (stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x767, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x768, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x767, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x768, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x767, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x768, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x767, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x768, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x767, 4)]
[(stack, 0xfffffffffffffb08, 4) INDIRECT (stack, 0xfffffffffffffb08, 4) , (const, 0x768, 4), (stack, 0xfffffffffffffb08, 4) INDIRECT (stack, 0xfffffffffffffb08, 4) , (const, 0x767, 4)]
[(stack, 0xfffffffffffffb0f, 1) INDIRECT (stack, 0xfffffffffffffb0f, 1) , (const, 0x768, 4), (stack, 0xfffffffffffffb0f, 1) INDIRECT (stack, 0xfffffffffffffb0f, 1) , (const, 0x767, 4)]
[(stack, 0xfffffffffffffb10, 4) INDIRECT (stack, 0xfffffffffffffb10, 4) , (const, 0x768, 4), (stack, 0xfffffffffffffb10, 4) INDIRECT (stack, 0xfffffffffffffb10, 4) , (const, 0x767, 4)]
[(stack, 0xfffffffffffffb14, 4) INDIRECT (stack, 0xfffffffffffffb14, 4) , (const, 0x768, 4), (stack, 0xfffffffffffffb14, 4) INDIRECT (stack, 0xfffffffffffffb14, 4) , (const, 0x767, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x768, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x767, 4)]
[(stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x768, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x767, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x768, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x767, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x768, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x767, 4)]
[(stack, 0xfffffffffffffb3a, 1) INDIRECT (stack, 0xfffffffffffffb3a, 1) , (const, 0x768, 4), (stack, 0xfffffffffffffb3a, 1) INDIRECT (stack, 0xfffffffffffffb3a, 1) , (const, 0x767, 4)]
[(stack, 0xfffffffffffffb3b, 1) INDIRECT (stack, 0xfffffffffffffb3b, 1) , (const, 0x768, 4), (stack, 0xfffffffffffffb3b, 1) INDIRECT (stack, 0xfffffffffffffb3b, 1) , (const, 0x767, 4)]
[(stack, 0xfffffffffffffb3c, 4) INDIRECT (stack, 0xfffffffffffffb3c, 4) , (const, 0x768, 4), (stack, 0xfffffffffffffb3c, 4) INDIRECT (stack, 0xfffffffffffffb3c, 4) , (const, 0x767, 4)]
[(stack, 0xfffffffffffffb40, 8) INDIRECT (stack, 0xfffffffffffffb40, 8) , (const, 0x768, 4), (stack, 0xfffffffffffffb40, 8) INDIRECT (stack, 0xfffffffffffffb40, 8) , (const, 0x767, 4)]
[(stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x768, 4), (stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x767, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x768, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x767, 4)]
[(stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x768, 4), (stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x767, 4)]
[(stack, 0xfffffffffffffb60, 4) INDIRECT (stack, 0xfffffffffffffb60, 4) , (const, 0x768, 4), (stack, 0xfffffffffffffb60, 4) INDIRECT (stack, 0xfffffffffffffb60, 4) , (const, 0x767, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x768, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x767, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x768, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x767, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x768, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x767, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x768, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x767, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x768, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x767, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x768, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x767, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x768, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x767, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x768, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x767, 4)]
[(stack, 0xfffffffffffffb98, 4) INDIRECT (stack, 0xfffffffffffffb98, 4) , (const, 0x768, 4), (stack, 0xfffffffffffffb98, 4) INDIRECT (stack, 0xfffffffffffffb98, 4) , (const, 0x767, 4)]
[(stack, 0xfffffffffffffb9c, 4) INDIRECT (stack, 0xfffffffffffffb9c, 4) , (const, 0x768, 4), (stack, 0xfffffffffffffb9c, 4) INDIRECT (stack, 0xfffffffffffffb9c, 4) , (const, 0x767, 4)]
[(stack, 0xfffffffffffffba0, 4) INDIRECT (stack, 0xfffffffffffffba0, 4) , (const, 0x768, 4), (stack, 0xfffffffffffffba0, 4) INDIRECT (stack, 0xfffffffffffffba0, 4) , (const, 0x767, 4)]
[(stack, 0xfffffffffffffba4, 4) INDIRECT (stack, 0xfffffffffffffba4, 4) , (const, 0x768, 4), (stack, 0xfffffffffffffba4, 4) INDIRECT (stack, 0xfffffffffffffba4, 4) , (const, 0x767, 4)]
[(stack, 0xfffffffffffffba8, 16) INDIRECT (stack, 0xfffffffffffffba8, 16) , (const, 0x768, 4), (stack, 0xfffffffffffffba8, 16) INDIRECT (stack, 0xfffffffffffffba8, 16) , (const, 0x767, 4), (stack, 0xfffffffffffffba8, 16) COPY (const, 0x0, 16)]
[(stack, 0xfffffffffffffbb8, 4) INDIRECT (stack, 0xfffffffffffffbb8, 4) , (const, 0x768, 4), (stack, 0xfffffffffffffbb8, 4) INDIRECT (stack, 0xfffffffffffffbb8, 4) , (const, 0x767, 4)]
[(stack, 0xfffffffffffffbbc, 4) INDIRECT (stack, 0xfffffffffffffbbc, 4) , (const, 0x768, 4), (stack, 0xfffffffffffffbbc, 4) INDIRECT (stack, 0xfffffffffffffbbc, 4) , (const, 0x767, 4)]
[(stack, 0xfffffffffffffc00, 8) INDIRECT (stack, 0xfffffffffffffc00, 8) , (const, 0x768, 4), (stack, 0xfffffffffffffc00, 8) INDIRECT (stack, 0xfffffffffffffc00, 8) , (const, 0x767, 4)]
[(stack, 0xfffffffffffffc08, 8) INDIRECT (stack, 0xfffffffffffffc08, 8) , (const, 0x768, 4), (stack, 0xfffffffffffffc08, 8) INDIRECT (stack, 0xfffffffffffffc08, 8) , (const, 0x767, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x768, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x767, 4)]
[ ---  CALL (ram, 0x2228a0, 8) , (register, 0xa0, 4) , (unique, 0x100011f3, 8) , (const, 0x10, 4), (unique, 0x100011f3, 8) CAST (unique, 0x10000ebd, 8)]
[(stack, 0xfffffffffffffb68, 8) CAST (unique, 0x100011ff, 8), (unique, 0x100011ff, 8) INT_ADD (unique, 0x10000e45, 8) , (const, 0x1c, 4), (unique, 0x10000e45, 8) INT_LEFT (unique, 0x10000e3d, 8) , (const, 0x20, 8), (unique, 0x10000e3d, 8) INT_SEXT (unique, 0x100011fb, 4), (unique, 0x100011fb, 4) CAST (stack, 0xfffffffffffffb6c, 4), (stack, 0xfffffffffffffb6c, 4) SUBPIECE (stack, 0xfffffffffffffb68, 8) , (const, 0x4, 8), (stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x768, 4), (stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x767, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001207, 8) , (const, 0x207fa4, 8), (unique, 0x10001207, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x314, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x314, 4), (register, 0x20a, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x314, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4ee040, 4) INDIRECT (ram, 0x4ee040, 4) , (const, 0x314, 4), (ram, 0x4ee040, 4) MULTIEQUAL (ram, 0x4ee040, 4) , (ram, 0x4ee040, 4)]
[(ram, 0x4ee044, 4) INDIRECT (ram, 0x4ee044, 4) , (const, 0x314, 4), (ram, 0x4ee044, 4) MULTIEQUAL (ram, 0x4ee044, 4) , (ram, 0x4ee044, 4)]
[(ram, 0x4ee050, 8) INDIRECT (ram, 0x4ee050, 8) , (const, 0x314, 4), (ram, 0x4ee050, 8) MULTIEQUAL (ram, 0x4ee050, 8) , (ram, 0x4ee050, 8)]
[(ram, 0x4ee058, 8) INDIRECT (ram, 0x4ee058, 8) , (const, 0x314, 4), (ram, 0x4ee058, 8) MULTIEQUAL (ram, 0x4ee058, 8) , (ram, 0x4ee058, 8)]
[(ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x314, 4), (ram, 0x4ee060, 4) MULTIEQUAL (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4)]
[(ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x314, 4), (ram, 0x4ee064, 4) MULTIEQUAL (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4)]
[(ram, 0x4f0870, 8) INDIRECT (ram, 0x4f0870, 8) , (const, 0x314, 4), (ram, 0x4f0870, 8) MULTIEQUAL (ram, 0x4f0870, 8) , (ram, 0x4f0870, 8)]
[(ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x314, 4), (ram, 0x4f08e8, 4) MULTIEQUAL (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x314, 4), (ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(stack, 0xfffffffffffffac4, 4) INDIRECT (stack, 0xfffffffffffffac4, 4) , (const, 0x314, 4), (stack, 0xfffffffffffffac4, 4) INDIRECT (stack, 0xfffffffffffffac4, 4) , (const, 0x313, 4), (stack, 0xfffffffffffffac4, 4) MULTIEQUAL (stack, 0xfffffffffffffac4, 4) , (stack, 0xfffffffffffffac4, 4)]
[(stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x314, 4), (stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x313, 4), (stack, 0xfffffffffffffac8, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x314, 4), (stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x313, 4), (stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffad8, 8) INDIRECT (stack, 0xfffffffffffffad8, 8) , (const, 0x314, 4), (stack, 0xfffffffffffffad8, 8) INDIRECT (stack, 0xfffffffffffffad8, 8) , (const, 0x313, 4), (stack, 0xfffffffffffffad8, 8) MULTIEQUAL (stack, 0xfffffffffffffad8, 8) , (stack, 0xfffffffffffffad8, 8)]
[(stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x314, 4), (stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x313, 4), (stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x314, 4), (stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x313, 4), (stack, 0xfffffffffffffae4, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x314, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x313, 4), (stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x314, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x313, 4), (stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x314, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x313, 4), (stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x314, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x313, 4), (stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffb08, 4) INDIRECT (stack, 0xfffffffffffffb08, 4) , (const, 0x314, 4), (stack, 0xfffffffffffffb08, 4) INDIRECT (stack, 0xfffffffffffffb08, 4) , (const, 0x313, 4), (stack, 0xfffffffffffffb08, 4) MULTIEQUAL (stack, 0xfffffffffffffb08, 4) , (stack, 0xfffffffffffffb08, 4)]
[(stack, 0xfffffffffffffb0f, 1) INDIRECT (stack, 0xfffffffffffffb0f, 1) , (const, 0x314, 4), (stack, 0xfffffffffffffb0f, 1) INDIRECT (stack, 0xfffffffffffffb0f, 1) , (const, 0x313, 4), (stack, 0xfffffffffffffb0f, 1) MULTIEQUAL (stack, 0xfffffffffffffb0f, 1) , (stack, 0xfffffffffffffb0f, 1)]
[(stack, 0xfffffffffffffb10, 4) INDIRECT (stack, 0xfffffffffffffb10, 4) , (const, 0x314, 4), (stack, 0xfffffffffffffb10, 4) INDIRECT (stack, 0xfffffffffffffb10, 4) , (const, 0x313, 4), (stack, 0xfffffffffffffb10, 4) MULTIEQUAL (stack, 0xfffffffffffffb10, 4) , (stack, 0xfffffffffffffb10, 4)]
[(stack, 0xfffffffffffffb14, 4) INDIRECT (stack, 0xfffffffffffffb14, 4) , (const, 0x314, 4), (stack, 0xfffffffffffffb14, 4) INDIRECT (stack, 0xfffffffffffffb14, 4) , (const, 0x313, 4), (stack, 0xfffffffffffffb14, 4) MULTIEQUAL (stack, 0xfffffffffffffb14, 4) , (stack, 0xfffffffffffffb14, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x314, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x313, 4), (stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x314, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x313, 4), (stack, 0xfffffffffffffb20, 8) MULTIEQUAL (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x314, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x313, 4), (stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x314, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x313, 4), (stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb3a, 1) INDIRECT (stack, 0xfffffffffffffb3a, 1) , (const, 0x314, 4), (stack, 0xfffffffffffffb3a, 1) INDIRECT (stack, 0xfffffffffffffb3a, 1) , (const, 0x313, 4), (stack, 0xfffffffffffffb3a, 1) MULTIEQUAL (stack, 0xfffffffffffffb3a, 1) , (stack, 0xfffffffffffffb3a, 1)]
[(stack, 0xfffffffffffffb3b, 1) INDIRECT (stack, 0xfffffffffffffb3b, 1) , (const, 0x314, 4), (stack, 0xfffffffffffffb3b, 1) INDIRECT (stack, 0xfffffffffffffb3b, 1) , (const, 0x313, 4), (stack, 0xfffffffffffffb3b, 1) MULTIEQUAL (stack, 0xfffffffffffffb3b, 1) , (stack, 0xfffffffffffffb3b, 1)]
[(stack, 0xfffffffffffffb3c, 4) INDIRECT (stack, 0xfffffffffffffb3c, 4) , (const, 0x314, 4), (stack, 0xfffffffffffffb3c, 4) INDIRECT (stack, 0xfffffffffffffb3c, 4) , (const, 0x313, 4), (stack, 0xfffffffffffffb3c, 4) MULTIEQUAL (stack, 0xfffffffffffffb3c, 4) , (stack, 0xfffffffffffffb3c, 4)]
[(stack, 0xfffffffffffffb40, 8) INDIRECT (stack, 0xfffffffffffffb40, 8) , (const, 0x314, 4), (stack, 0xfffffffffffffb40, 8) INDIRECT (stack, 0xfffffffffffffb40, 8) , (const, 0x313, 4), (stack, 0xfffffffffffffb40, 8) MULTIEQUAL (stack, 0xfffffffffffffb40, 8) , (stack, 0xfffffffffffffb40, 8)]
[(stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x314, 4), (stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x313, 4), (stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x314, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x313, 4), (stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x314, 4), (stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x313, 4), (stack, 0xfffffffffffffb58, 8) MULTIEQUAL (stack, 0xfffffffffffffb58, 8) , (stack, 0xfffffffffffffb58, 8)]
[(stack, 0xfffffffffffffb60, 4) INDIRECT (stack, 0xfffffffffffffb60, 4) , (const, 0x314, 4), (stack, 0xfffffffffffffb60, 4) INDIRECT (stack, 0xfffffffffffffb60, 4) , (const, 0x313, 4), (stack, 0xfffffffffffffb60, 4) MULTIEQUAL (stack, 0xfffffffffffffb60, 4) , (stack, 0xfffffffffffffb60, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x314, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x313, 4), (stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x314, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x313, 4), (stack, 0xfffffffffffffb7c, 4) MULTIEQUAL (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x314, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x313, 4), (stack, 0xfffffffffffffb80, 4) MULTIEQUAL (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x314, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x313, 4), (stack, 0xfffffffffffffb84, 4) MULTIEQUAL (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x314, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x313, 4), (stack, 0xfffffffffffffb88, 4) MULTIEQUAL (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x314, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x313, 4), (stack, 0xfffffffffffffb8c, 4) MULTIEQUAL (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x314, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x313, 4), (stack, 0xfffffffffffffb90, 4) MULTIEQUAL (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x314, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x313, 4), (stack, 0xfffffffffffffb94, 4) MULTIEQUAL (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4)]
[(stack, 0xfffffffffffffb98, 4) INDIRECT (stack, 0xfffffffffffffb98, 4) , (const, 0x314, 4), (stack, 0xfffffffffffffb98, 4) INDIRECT (stack, 0xfffffffffffffb98, 4) , (const, 0x313, 4), (stack, 0xfffffffffffffb98, 4) MULTIEQUAL (stack, 0xfffffffffffffb98, 4) , (stack, 0xfffffffffffffb98, 4)]
[(stack, 0xfffffffffffffb9c, 4) INDIRECT (stack, 0xfffffffffffffb9c, 4) , (const, 0x314, 4), (stack, 0xfffffffffffffb9c, 4) INDIRECT (stack, 0xfffffffffffffb9c, 4) , (const, 0x313, 4), (stack, 0xfffffffffffffb9c, 4) MULTIEQUAL (stack, 0xfffffffffffffb9c, 4) , (stack, 0xfffffffffffffb9c, 4)]
[(stack, 0xfffffffffffffba0, 4) INDIRECT (stack, 0xfffffffffffffba0, 4) , (const, 0x314, 4), (stack, 0xfffffffffffffba0, 4) INDIRECT (stack, 0xfffffffffffffba0, 4) , (const, 0x313, 4), (stack, 0xfffffffffffffba0, 4) MULTIEQUAL (stack, 0xfffffffffffffba0, 4) , (stack, 0xfffffffffffffba0, 4)]
[(stack, 0xfffffffffffffba4, 4) INDIRECT (stack, 0xfffffffffffffba4, 4) , (const, 0x314, 4), (stack, 0xfffffffffffffba4, 4) INDIRECT (stack, 0xfffffffffffffba4, 4) , (const, 0x313, 4), (stack, 0xfffffffffffffba4, 4) MULTIEQUAL (stack, 0xfffffffffffffba4, 4) , (stack, 0xfffffffffffffba4, 4)]
[(stack, 0xfffffffffffffba8, 16) INDIRECT (stack, 0xfffffffffffffba8, 16) , (const, 0x314, 4), (stack, 0xfffffffffffffba8, 16) INDIRECT (stack, 0xfffffffffffffba8, 16) , (const, 0x313, 4), (stack, 0xfffffffffffffba8, 16) MULTIEQUAL (stack, 0xfffffffffffffba8, 16) , (stack, 0xfffffffffffffba8, 16)]
[(stack, 0xfffffffffffffbb8, 4) INDIRECT (stack, 0xfffffffffffffbb8, 4) , (const, 0x314, 4), (stack, 0xfffffffffffffbb8, 4) INDIRECT (stack, 0xfffffffffffffbb8, 4) , (const, 0x313, 4), (stack, 0xfffffffffffffbb8, 4) MULTIEQUAL (stack, 0xfffffffffffffbb8, 4) , (stack, 0xfffffffffffffbb8, 4)]
[(stack, 0xfffffffffffffbbc, 4) INDIRECT (stack, 0xfffffffffffffbbc, 4) , (const, 0x314, 4), (stack, 0xfffffffffffffbbc, 4) INDIRECT (stack, 0xfffffffffffffbbc, 4) , (const, 0x313, 4), (stack, 0xfffffffffffffbbc, 4) MULTIEQUAL (stack, 0xfffffffffffffbbc, 4) , (stack, 0xfffffffffffffbbc, 4)]
[(stack, 0xfffffffffffffc00, 8) INDIRECT (stack, 0xfffffffffffffc00, 8) , (const, 0x314, 4), (stack, 0xfffffffffffffc00, 8) INDIRECT (stack, 0xfffffffffffffc00, 8) , (const, 0x313, 4), (stack, 0xfffffffffffffc00, 8) MULTIEQUAL (stack, 0xfffffffffffffc00, 8) , (stack, 0xfffffffffffffc00, 8)]
[(stack, 0xfffffffffffffc08, 8) INDIRECT (stack, 0xfffffffffffffc08, 8) , (const, 0x314, 4), (stack, 0xfffffffffffffc08, 8) INDIRECT (stack, 0xfffffffffffffc08, 8) , (const, 0x313, 4), (stack, 0xfffffffffffffc08, 8) MULTIEQUAL (stack, 0xfffffffffffffc08, 8) , (stack, 0xfffffffffffffc08, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x314, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x313, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffb68, 8) CAST (unique, 0x10001213, 8), (unique, 0x10001213, 8) INT_ADD (unique, 0x10000e55, 8) , (const, 0x1c, 4), (unique, 0x10000e55, 8) INT_LEFT (unique, 0x10000e4d, 8) , (const, 0x20, 8), (unique, 0x10000e4d, 8) INT_SEXT (unique, 0x1000120f, 4), (unique, 0x1000120f, 4) CAST (stack, 0xfffffffffffffb6c, 4), (stack, 0xfffffffffffffb6c, 4) SUBPIECE (stack, 0xfffffffffffffb68, 8) , (const, 0x4, 8), (stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x314, 4), (stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x313, 4), (stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[ ---  CBRANCH (ram, 0x207eea, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0xffffffff, 4), (register, 0x0, 4) CALL (ram, 0x222ec0, 8) , (unique, 0xbc80, 4) , (const, 0x80002, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0xb0, 8) , (const, 0x4, 8)]
[(register, 0xa8, 4) MULTIEQUAL (register, 0xa8, 4) , (unique, 0xbc80, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000121b, 8) , (const, 0x207ee2, 8), (unique, 0x1000121b, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x330, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x330, 4), (register, 0x20a, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x330, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4ee040, 4) INDIRECT (ram, 0x4ee040, 4) , (const, 0x330, 4), (ram, 0x4ee040, 4) MULTIEQUAL (ram, 0x4ee040, 4) , (ram, 0x4ee040, 4)]
[(ram, 0x4ee044, 4) INDIRECT (ram, 0x4ee044, 4) , (const, 0x330, 4), (ram, 0x4ee044, 4) MULTIEQUAL (ram, 0x4ee044, 4) , (ram, 0x4ee044, 4)]
[(ram, 0x4ee050, 8) INDIRECT (ram, 0x4ee050, 8) , (const, 0x330, 4), (ram, 0x4ee050, 8) MULTIEQUAL (ram, 0x4ee050, 8) , (ram, 0x4ee050, 8)]
[(ram, 0x4ee058, 8) INDIRECT (ram, 0x4ee058, 8) , (const, 0x330, 4), (ram, 0x4ee058, 8) MULTIEQUAL (ram, 0x4ee058, 8) , (ram, 0x4ee058, 8)]
[(ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x330, 4), (ram, 0x4ee060, 4) MULTIEQUAL (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4)]
[(ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x330, 4), (ram, 0x4ee064, 4) MULTIEQUAL (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4)]
[(ram, 0x4f0870, 8) INDIRECT (ram, 0x4f0870, 8) , (const, 0x330, 4), (ram, 0x4f0870, 8) MULTIEQUAL (ram, 0x4f0870, 8) , (ram, 0x4f0870, 8)]
[(ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x330, 4), (ram, 0x4f08e8, 4) MULTIEQUAL (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x330, 4), (ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(stack, 0xfffffffffffffac4, 4) INDIRECT (stack, 0xfffffffffffffac4, 4) , (const, 0x330, 4), (stack, 0xfffffffffffffac4, 4) INDIRECT (stack, 0xfffffffffffffac4, 4) , (const, 0x32f, 4), (stack, 0xfffffffffffffac4, 4) MULTIEQUAL (stack, 0xfffffffffffffac4, 4) , (stack, 0xfffffffffffffac4, 4)]
[(stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x330, 4), (stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x32f, 4), (stack, 0xfffffffffffffac8, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x330, 4), (stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x32f, 4), (stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffad8, 8) INDIRECT (stack, 0xfffffffffffffad8, 8) , (const, 0x330, 4), (stack, 0xfffffffffffffad8, 8) INDIRECT (stack, 0xfffffffffffffad8, 8) , (const, 0x32f, 4), (stack, 0xfffffffffffffad8, 8) MULTIEQUAL (stack, 0xfffffffffffffad8, 8) , (stack, 0xfffffffffffffad8, 8)]
[(stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x330, 4), (stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x32f, 4), (stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x330, 4), (stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x32f, 4), (stack, 0xfffffffffffffae4, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x330, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x32f, 4), (stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x330, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x32f, 4), (stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x330, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x32f, 4), (stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffb08, 4) INDIRECT (stack, 0xfffffffffffffb08, 4) , (const, 0x330, 4), (stack, 0xfffffffffffffb08, 4) INDIRECT (stack, 0xfffffffffffffb08, 4) , (const, 0x32f, 4), (stack, 0xfffffffffffffb08, 4) MULTIEQUAL (stack, 0xfffffffffffffb08, 4) , (stack, 0xfffffffffffffb08, 4)]
[(stack, 0xfffffffffffffb0f, 1) INDIRECT (stack, 0xfffffffffffffb0f, 1) , (const, 0x330, 4), (stack, 0xfffffffffffffb0f, 1) INDIRECT (stack, 0xfffffffffffffb0f, 1) , (const, 0x32f, 4), (stack, 0xfffffffffffffb0f, 1) MULTIEQUAL (stack, 0xfffffffffffffb0f, 1) , (stack, 0xfffffffffffffb0f, 1)]
[(stack, 0xfffffffffffffb10, 4) INDIRECT (stack, 0xfffffffffffffb10, 4) , (const, 0x330, 4), (stack, 0xfffffffffffffb10, 4) INDIRECT (stack, 0xfffffffffffffb10, 4) , (const, 0x32f, 4), (stack, 0xfffffffffffffb10, 4) MULTIEQUAL (stack, 0xfffffffffffffb10, 4) , (stack, 0xfffffffffffffb10, 4)]
[(stack, 0xfffffffffffffb14, 4) INDIRECT (stack, 0xfffffffffffffb14, 4) , (const, 0x330, 4), (stack, 0xfffffffffffffb14, 4) INDIRECT (stack, 0xfffffffffffffb14, 4) , (const, 0x32f, 4), (stack, 0xfffffffffffffb14, 4) MULTIEQUAL (stack, 0xfffffffffffffb14, 4) , (stack, 0xfffffffffffffb14, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x330, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x32f, 4), (stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x330, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x32f, 4), (stack, 0xfffffffffffffb20, 8) MULTIEQUAL (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x330, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x32f, 4), (stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x330, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x32f, 4), (stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb3a, 1) INDIRECT (stack, 0xfffffffffffffb3a, 1) , (const, 0x330, 4), (stack, 0xfffffffffffffb3a, 1) INDIRECT (stack, 0xfffffffffffffb3a, 1) , (const, 0x32f, 4), (stack, 0xfffffffffffffb3a, 1) MULTIEQUAL (stack, 0xfffffffffffffb3a, 1) , (stack, 0xfffffffffffffb3a, 1)]
[(stack, 0xfffffffffffffb3b, 1) INDIRECT (stack, 0xfffffffffffffb3b, 1) , (const, 0x330, 4), (stack, 0xfffffffffffffb3b, 1) INDIRECT (stack, 0xfffffffffffffb3b, 1) , (const, 0x32f, 4), (stack, 0xfffffffffffffb3b, 1) MULTIEQUAL (stack, 0xfffffffffffffb3b, 1) , (stack, 0xfffffffffffffb3b, 1)]
[(stack, 0xfffffffffffffb3c, 4) INDIRECT (stack, 0xfffffffffffffb3c, 4) , (const, 0x330, 4), (stack, 0xfffffffffffffb3c, 4) INDIRECT (stack, 0xfffffffffffffb3c, 4) , (const, 0x32f, 4), (stack, 0xfffffffffffffb3c, 4) MULTIEQUAL (stack, 0xfffffffffffffb3c, 4) , (stack, 0xfffffffffffffb3c, 4)]
[(stack, 0xfffffffffffffb40, 8) INDIRECT (stack, 0xfffffffffffffb40, 8) , (const, 0x330, 4), (stack, 0xfffffffffffffb40, 8) INDIRECT (stack, 0xfffffffffffffb40, 8) , (const, 0x32f, 4), (stack, 0xfffffffffffffb40, 8) MULTIEQUAL (stack, 0xfffffffffffffb40, 8) , (stack, 0xfffffffffffffb40, 8)]
[(stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x330, 4), (stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x32f, 4), (stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x330, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x32f, 4), (stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x330, 4), (stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x32f, 4), (stack, 0xfffffffffffffb58, 8) MULTIEQUAL (stack, 0xfffffffffffffb58, 8) , (stack, 0xfffffffffffffb58, 8)]
[(stack, 0xfffffffffffffb60, 4) INDIRECT (stack, 0xfffffffffffffb60, 4) , (const, 0x330, 4), (stack, 0xfffffffffffffb60, 4) INDIRECT (stack, 0xfffffffffffffb60, 4) , (const, 0x32f, 4), (stack, 0xfffffffffffffb60, 4) MULTIEQUAL (stack, 0xfffffffffffffb60, 4) , (stack, 0xfffffffffffffb60, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x330, 4), (stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x32f, 4), (stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x330, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x32f, 4), (stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x330, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x32f, 4), (stack, 0xfffffffffffffb7c, 4) MULTIEQUAL (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x330, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x32f, 4), (stack, 0xfffffffffffffb80, 4) MULTIEQUAL (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x330, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x32f, 4), (stack, 0xfffffffffffffb84, 4) MULTIEQUAL (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x330, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x32f, 4), (stack, 0xfffffffffffffb88, 4) MULTIEQUAL (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x330, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x32f, 4), (stack, 0xfffffffffffffb8c, 4) MULTIEQUAL (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x330, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x32f, 4), (stack, 0xfffffffffffffb90, 4) MULTIEQUAL (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x330, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x32f, 4), (stack, 0xfffffffffffffb94, 4) MULTIEQUAL (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4)]
[(stack, 0xfffffffffffffb98, 4) INDIRECT (stack, 0xfffffffffffffb98, 4) , (const, 0x330, 4), (stack, 0xfffffffffffffb98, 4) INDIRECT (stack, 0xfffffffffffffb98, 4) , (const, 0x32f, 4), (stack, 0xfffffffffffffb98, 4) MULTIEQUAL (stack, 0xfffffffffffffb98, 4) , (stack, 0xfffffffffffffb98, 4)]
[(stack, 0xfffffffffffffb9c, 4) INDIRECT (stack, 0xfffffffffffffb9c, 4) , (const, 0x330, 4), (stack, 0xfffffffffffffb9c, 4) INDIRECT (stack, 0xfffffffffffffb9c, 4) , (const, 0x32f, 4), (stack, 0xfffffffffffffb9c, 4) MULTIEQUAL (stack, 0xfffffffffffffb9c, 4) , (stack, 0xfffffffffffffb9c, 4)]
[(stack, 0xfffffffffffffba0, 4) INDIRECT (stack, 0xfffffffffffffba0, 4) , (const, 0x330, 4), (stack, 0xfffffffffffffba0, 4) INDIRECT (stack, 0xfffffffffffffba0, 4) , (const, 0x32f, 4), (stack, 0xfffffffffffffba0, 4) MULTIEQUAL (stack, 0xfffffffffffffba0, 4) , (stack, 0xfffffffffffffba0, 4)]
[(stack, 0xfffffffffffffba4, 4) INDIRECT (stack, 0xfffffffffffffba4, 4) , (const, 0x330, 4), (stack, 0xfffffffffffffba4, 4) INDIRECT (stack, 0xfffffffffffffba4, 4) , (const, 0x32f, 4), (stack, 0xfffffffffffffba4, 4) MULTIEQUAL (stack, 0xfffffffffffffba4, 4) , (stack, 0xfffffffffffffba4, 4)]
[(stack, 0xfffffffffffffba8, 16) INDIRECT (stack, 0xfffffffffffffba8, 16) , (const, 0x330, 4), (stack, 0xfffffffffffffba8, 16) INDIRECT (stack, 0xfffffffffffffba8, 16) , (const, 0x32f, 4), (stack, 0xfffffffffffffba8, 16) MULTIEQUAL (stack, 0xfffffffffffffba8, 16) , (stack, 0xfffffffffffffba8, 16)]
[(stack, 0xfffffffffffffbb8, 4) INDIRECT (stack, 0xfffffffffffffbb8, 4) , (const, 0x330, 4), (stack, 0xfffffffffffffbb8, 4) INDIRECT (stack, 0xfffffffffffffbb8, 4) , (const, 0x32f, 4), (stack, 0xfffffffffffffbb8, 4) MULTIEQUAL (stack, 0xfffffffffffffbb8, 4) , (stack, 0xfffffffffffffbb8, 4)]
[(stack, 0xfffffffffffffbbc, 4) INDIRECT (stack, 0xfffffffffffffbbc, 4) , (const, 0x330, 4), (stack, 0xfffffffffffffbbc, 4) INDIRECT (stack, 0xfffffffffffffbbc, 4) , (const, 0x32f, 4), (stack, 0xfffffffffffffbbc, 4) MULTIEQUAL (stack, 0xfffffffffffffbbc, 4) , (stack, 0xfffffffffffffbbc, 4)]
[(stack, 0xfffffffffffffc00, 8) INDIRECT (stack, 0xfffffffffffffc00, 8) , (const, 0x330, 4), (stack, 0xfffffffffffffc00, 8) INDIRECT (stack, 0xfffffffffffffc00, 8) , (const, 0x32f, 4), (stack, 0xfffffffffffffc00, 8) MULTIEQUAL (stack, 0xfffffffffffffc00, 8) , (stack, 0xfffffffffffffc00, 8)]
[(stack, 0xfffffffffffffc08, 8) INDIRECT (stack, 0xfffffffffffffc08, 8) , (const, 0x330, 4), (stack, 0xfffffffffffffc08, 8) INDIRECT (stack, 0xfffffffffffffc08, 8) , (const, 0x32f, 4), (stack, 0xfffffffffffffc08, 8) MULTIEQUAL (stack, 0xfffffffffffffc08, 8) , (stack, 0xfffffffffffffc08, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x330, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x32f, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(unique, 0x10000ea5, 8) COPY (stack, 0xfffffffffffffaf8, 8), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x330, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x32f, 4), (stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[ ---  CBRANCH (ram, 0x208140, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x2228a0, 8) , (register, 0xa0, 4) , (unique, 0xbd80, 8) , (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0xb0, 8) , (const, 0x10, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0xb0, 8) , (const, 0x18, 8), (register, 0xa0, 4) MULTIEQUAL (register, 0xa0, 4) , (register, 0x0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001223, 8) , (const, 0x208152, 8), (unique, 0x10001223, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x5da, 4)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x5da, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x5da, 4)]
[(ram, 0x4ee040, 4) INDIRECT (ram, 0x4ee040, 4) , (const, 0x5da, 4)]
[(ram, 0x4ee044, 4) INDIRECT (ram, 0x4ee044, 4) , (const, 0x5da, 4)]
[(ram, 0x4ee050, 8) INDIRECT (ram, 0x4ee050, 8) , (const, 0x5da, 4)]
[(ram, 0x4ee058, 8) INDIRECT (ram, 0x4ee058, 8) , (const, 0x5da, 4)]
[(ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x5da, 4)]
[(ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x5da, 4)]
[(ram, 0x4f0870, 8) INDIRECT (ram, 0x4f0870, 8) , (const, 0x5da, 4)]
[(ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x5da, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x5da, 4)]
[(stack, 0xfffffffffffffac4, 4) INDIRECT (stack, 0xfffffffffffffac4, 4) , (const, 0x5da, 4), (stack, 0xfffffffffffffac4, 4) INDIRECT (stack, 0xfffffffffffffac4, 4) , (const, 0x5d9, 4)]
[(stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x5da, 4), (stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x5d9, 4)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x5da, 4), (stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x5d9, 4)]
[(stack, 0xfffffffffffffad8, 8) INDIRECT (stack, 0xfffffffffffffad8, 8) , (const, 0x5da, 4), (stack, 0xfffffffffffffad8, 8) INDIRECT (stack, 0xfffffffffffffad8, 8) , (const, 0x5d9, 4)]
[(stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x5da, 4), (stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x5d9, 4)]
[(stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x5da, 4), (stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x5d9, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x5da, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x5d9, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x5da, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x5d9, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x5da, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x5d9, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x5da, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x5d9, 4)]
[(stack, 0xfffffffffffffb08, 4) INDIRECT (stack, 0xfffffffffffffb08, 4) , (const, 0x5da, 4), (stack, 0xfffffffffffffb08, 4) INDIRECT (stack, 0xfffffffffffffb08, 4) , (const, 0x5d9, 4)]
[(stack, 0xfffffffffffffb0f, 1) INDIRECT (stack, 0xfffffffffffffb0f, 1) , (const, 0x5da, 4), (stack, 0xfffffffffffffb0f, 1) INDIRECT (stack, 0xfffffffffffffb0f, 1) , (const, 0x5d9, 4)]
[(stack, 0xfffffffffffffb10, 4) INDIRECT (stack, 0xfffffffffffffb10, 4) , (const, 0x5da, 4), (stack, 0xfffffffffffffb10, 4) INDIRECT (stack, 0xfffffffffffffb10, 4) , (const, 0x5d9, 4)]
[(stack, 0xfffffffffffffb14, 4) INDIRECT (stack, 0xfffffffffffffb14, 4) , (const, 0x5da, 4), (stack, 0xfffffffffffffb14, 4) INDIRECT (stack, 0xfffffffffffffb14, 4) , (const, 0x5d9, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x5da, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x5d9, 4)]
[(stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x5da, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x5d9, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x5da, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x5d9, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x5da, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x5d9, 4)]
[(stack, 0xfffffffffffffb3a, 1) INDIRECT (stack, 0xfffffffffffffb3a, 1) , (const, 0x5da, 4), (stack, 0xfffffffffffffb3a, 1) INDIRECT (stack, 0xfffffffffffffb3a, 1) , (const, 0x5d9, 4)]
[(stack, 0xfffffffffffffb3b, 1) INDIRECT (stack, 0xfffffffffffffb3b, 1) , (const, 0x5da, 4), (stack, 0xfffffffffffffb3b, 1) INDIRECT (stack, 0xfffffffffffffb3b, 1) , (const, 0x5d9, 4)]
[(stack, 0xfffffffffffffb3c, 4) INDIRECT (stack, 0xfffffffffffffb3c, 4) , (const, 0x5da, 4), (stack, 0xfffffffffffffb3c, 4) INDIRECT (stack, 0xfffffffffffffb3c, 4) , (const, 0x5d9, 4)]
[(stack, 0xfffffffffffffb40, 8) INDIRECT (stack, 0xfffffffffffffb40, 8) , (const, 0x5da, 4), (stack, 0xfffffffffffffb40, 8) INDIRECT (stack, 0xfffffffffffffb40, 8) , (const, 0x5d9, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x5da, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x5d9, 4)]
[(stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x5da, 4), (stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x5d9, 4)]
[(stack, 0xfffffffffffffb60, 4) INDIRECT (stack, 0xfffffffffffffb60, 4) , (const, 0x5da, 4), (stack, 0xfffffffffffffb60, 4) INDIRECT (stack, 0xfffffffffffffb60, 4) , (const, 0x5d9, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x5da, 4), (stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x5d9, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x5da, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x5d9, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x5da, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x5d9, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x5da, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x5d9, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x5da, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x5d9, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x5da, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x5d9, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x5da, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x5d9, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x5da, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x5d9, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x5da, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x5d9, 4)]
[(stack, 0xfffffffffffffb98, 4) INDIRECT (stack, 0xfffffffffffffb98, 4) , (const, 0x5da, 4), (stack, 0xfffffffffffffb98, 4) INDIRECT (stack, 0xfffffffffffffb98, 4) , (const, 0x5d9, 4)]
[(stack, 0xfffffffffffffb9c, 4) INDIRECT (stack, 0xfffffffffffffb9c, 4) , (const, 0x5da, 4), (stack, 0xfffffffffffffb9c, 4) INDIRECT (stack, 0xfffffffffffffb9c, 4) , (const, 0x5d9, 4)]
[(stack, 0xfffffffffffffba0, 4) INDIRECT (stack, 0xfffffffffffffba0, 4) , (const, 0x5da, 4), (stack, 0xfffffffffffffba0, 4) INDIRECT (stack, 0xfffffffffffffba0, 4) , (const, 0x5d9, 4)]
[(stack, 0xfffffffffffffba4, 4) INDIRECT (stack, 0xfffffffffffffba4, 4) , (const, 0x5da, 4), (stack, 0xfffffffffffffba4, 4) INDIRECT (stack, 0xfffffffffffffba4, 4) , (const, 0x5d9, 4)]
[(stack, 0xfffffffffffffba8, 16) INDIRECT (stack, 0xfffffffffffffba8, 16) , (const, 0x5da, 4), (stack, 0xfffffffffffffba8, 16) INDIRECT (stack, 0xfffffffffffffba8, 16) , (const, 0x5d9, 4)]
[(stack, 0xfffffffffffffbb8, 4) INDIRECT (stack, 0xfffffffffffffbb8, 4) , (const, 0x5da, 4), (stack, 0xfffffffffffffbb8, 4) INDIRECT (stack, 0xfffffffffffffbb8, 4) , (const, 0x5d9, 4)]
[(stack, 0xfffffffffffffbbc, 4) INDIRECT (stack, 0xfffffffffffffbbc, 4) , (const, 0x5da, 4), (stack, 0xfffffffffffffbbc, 4) INDIRECT (stack, 0xfffffffffffffbbc, 4) , (const, 0x5d9, 4)]
[(stack, 0xfffffffffffffc00, 8) INDIRECT (stack, 0xfffffffffffffc00, 8) , (const, 0x5da, 4), (stack, 0xfffffffffffffc00, 8) INDIRECT (stack, 0xfffffffffffffc00, 8) , (const, 0x5d9, 4)]
[(stack, 0xfffffffffffffc08, 8) INDIRECT (stack, 0xfffffffffffffc08, 8) , (const, 0x5da, 4), (stack, 0xfffffffffffffc08, 8) INDIRECT (stack, 0xfffffffffffffc08, 8) , (const, 0x5d9, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x5da, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x5d9, 4)]
[(unique, 0x10000ee5, 8) COPY (stack, 0xfffffffffffffb48, 8), (stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x5da, 4), (stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x5d9, 4)]
[ ---  CBRANCH (ram, 0x207eea, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x222970, 8) , (register, 0xa0, 4) , (register, 0xb8, 8) , (unique, 0x1000122b, 8), (unique, 0x1000122b, 8) CAST (unique, 0x10000ea5, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (const, 0x1, 1), (unique, 0x3100, 8) PTRADD (unique, 0x100009c8, 8) , (const, 0xb, 8) , (const, 0x1, 8), (unique, 0x100009c8, 8) PTRSUB (unique, 0x100009c0, 8) , (const, 0x2, 8), (unique, 0x100009c0, 8) PTRADD (register, 0xb8, 8) , (const, 0x1, 8) , (const, 0x10, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x5ef, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x5ec, 4)]
[(ram, 0x4ee040, 4) INDIRECT (ram, 0x4ee040, 4) , (const, 0x5ef, 4), (ram, 0x4ee040, 4) INDIRECT (ram, 0x4ee040, 4) , (const, 0x5ec, 4)]
[(ram, 0x4ee044, 4) INDIRECT (ram, 0x4ee044, 4) , (const, 0x5ef, 4), (ram, 0x4ee044, 4) INDIRECT (ram, 0x4ee044, 4) , (const, 0x5ec, 4)]
[(ram, 0x4ee050, 8) INDIRECT (ram, 0x4ee050, 8) , (const, 0x5ef, 4), (ram, 0x4ee050, 8) INDIRECT (ram, 0x4ee050, 8) , (const, 0x5ec, 4)]
[(ram, 0x4ee058, 8) INDIRECT (ram, 0x4ee058, 8) , (const, 0x5ef, 4), (ram, 0x4ee058, 8) INDIRECT (ram, 0x4ee058, 8) , (const, 0x5ec, 4)]
[(ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x5ef, 4), (ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x5ec, 4)]
[(ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x5ef, 4), (ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x5ec, 4)]
[(ram, 0x4f0870, 8) INDIRECT (ram, 0x4f0870, 8) , (const, 0x5ef, 4), (ram, 0x4f0870, 8) INDIRECT (ram, 0x4f0870, 8) , (const, 0x5ec, 4)]
[(ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x5ef, 4), (ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x5ec, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x5ef, 4), (ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x5ec, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (register, 0x0, 1), (register, 0x0, 1) SUBPIECE (stack, 0xfffffffffffffb68, 8) , (const, 0x0, 4), (unique, 0x3100, 8) PTRADD (unique, 0x100009e8, 8) , (const, 0xa, 8) , (const, 0x1, 8), (unique, 0x100009e8, 8) PTRSUB (unique, 0x100009e0, 8) , (const, 0x2, 8), (unique, 0x100009e0, 8) PTRADD (register, 0xb8, 8) , (const, 0x1, 8) , (const, 0x10, 8)]
[(stack, 0xfffffffffffffb0f, 1) COPY (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd00, 4) , (const, 0x2, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0xb0, 8) , (const, 0x4, 8)]
[(unique, 0x10000f15, 8) COPY (register, 0x18, 8)]
[(unique, 0x10000fed, 8) COPY (register, 0xb0, 8)]
[(unique, 0x1000105d, 8) COPY (register, 0xb8, 8)]
[(unique, 0x1000107d, 4) COPY (register, 0xa8, 4)]
[(unique, 0x1000108d, 4) COPY (register, 0xa0, 4)]
[ ---  CBRANCH (ram, 0x208240, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xfffffffffffffb48, 8) , (const, 0x0, 8)]
[(stack, 0xfffffffffffffba8, 8) SUBPIECE (stack, 0xfffffffffffffba8, 16) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x20819d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xa8, 4) , (const, 0x2, 4)]
[ ---  CBRANCH (ram, 0x2085b1, 1) , (unique, 0x10001233, 1), (unique, 0x10001233, 1) CAST (register, 0x206, 1)]
[(stack, 0xfffffffffffffba8, 16) INT_ADD (unique, 0x10000e85, 16) , (stack, 0xfffffffffffffba8, 12), (unique, 0x10000e85, 16) INT_LEFT (unique, 0x10000e75, 16) , (const, 0x60, 16), (unique, 0x10000e75, 16) INT_SEXT (unique, 0x10001260, 4), (unique, 0x10001260, 4) CAST (unique, 0x1000042c, 4), (stack, 0xfffffffffffffba8, 12) INT_ADD (unique, 0x10000e69, 12) , (unique, 0x10001258, 8), (unique, 0x10001258, 8) CAST (stack, 0xfffffffffffffba8, 8), (unique, 0x10000e69, 12) INT_LEFT (unique, 0x10000e5d, 12) , (const, 0x40, 12), (unique, 0x10000e5d, 12) INT_SEXT (unique, 0x10001254, 4), (unique, 0x10001254, 4) CAST (unique, 0x10000428, 4), (unique, 0x1000042c, 4) LOAD (const, 0x1b1, 4) , (unique, 0x1000123c, 8), (unique, 0x1000123c, 8) CAST (unique, 0x10000430, 8), (unique, 0x10000430, 8) PTRADD (unique, 0x10000a20, 8) , (const, 0xa, 8) , (const, 0x1, 8), (unique, 0x10000a20, 8) PTRSUB (register, 0xb8, 8) , (const, 0x2, 8), (unique, 0x10000428, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10001234, 8), (unique, 0x10001234, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0x10000a08, 8) , (const, 0x6, 8) , (const, 0x1, 8), (unique, 0x10000a08, 8) PTRSUB (register, 0xb8, 8) , (const, 0x2, 8)]
[(stack, 0xfffffffffffffbb8, 4) COPY (unique, 0x10000438, 4), (unique, 0x10000438, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10001244, 8), (unique, 0x10001244, 8) CAST (unique, 0x1000043c, 8), (unique, 0x1000043c, 8) PTRADD (register, 0xb8, 8) , (const, 0x1, 8) , (const, 0x10, 8)]
[(stack, 0xfffffffffffffbbc, 4) COPY (unique, 0x10000444, 4), (unique, 0x10000444, 4) LOAD (const, 0x1b1, 4) , (unique, 0x1000124c, 8), (unique, 0x1000124c, 8) CAST (unique, 0x10000448, 8), (unique, 0x10000448, 8) PTRADD (unique, 0x10000a48, 8) , (const, 0x2, 8) , (const, 0x1, 8), (unique, 0x10000a48, 8) PTRSUB (unique, 0x10000a40, 8) , (const, 0x2, 8), (unique, 0x10000a40, 8) PTRADD (register, 0xb8, 8) , (const, 0x1, 8) , (const, 0x10, 8)]
[(stack, 0xfffffffffffffba8, 16) INT_AND (stack, 0xfffffffffffffba8, 16) , (const, 0xffffffffffffffff, 16)]
[(stack, 0xfffffffffffffbb8, 4) COPY (const, 0xffff0000, 4)]
[ ---  CBRANCH (ram, 0x2085d4, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 1) , (const, 0x7f, 1), (register, 0x0, 1) SUBPIECE (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10001264, 8), (unique, 0x10001264, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0x10000d50, 8) , (const, 0x2, 8) , (const, 0x1, 8), (unique, 0x10000d50, 8) PTRSUB (register, 0xb8, 8) , (const, 0x2, 8)]
[(register, 0x0, 4) COPY (const, 0x100007f, 4)]
[(stack, 0xfffffffffffffbbc, 4) COPY (register, 0x0, 4), (register, 0x0, 4) MULTIEQUAL (unique, 0xbc80, 4) , (register, 0x0, 4)]
[ ---  BRANCH (ram, 0x2081aa, 1)]
[(stack, 0xfffffffffffffbbc, 4) MULTIEQUAL (stack, 0xfffffffffffffbbc, 4) , (stack, 0xfffffffffffffbbc, 4)]
[(stack, 0xfffffffffffffbb8, 4) MULTIEQUAL (stack, 0xfffffffffffffbb8, 4) , (stack, 0xfffffffffffffbb8, 4)]
[(stack, 0xfffffffffffffba8, 16) MULTIEQUAL (stack, 0xfffffffffffffba8, 16) , (stack, 0xfffffffffffffba8, 16)]
[(register, 0x0, 8) COPY (const, 0x0, 8)]
[(stack, 0xfffffffffffffae4, 4) COPY (register, 0xa0, 4)]
[(stack, 0xfffffffffffffae0, 4) COPY (register, 0xa8, 4)]
[(stack, 0xfffffffffffffac8, 8) COPY (register, 0x18, 8)]
[(stack, 0xfffffffffffffad8, 8) COPY (register, 0xb0, 8)]
[(stack, 0xfffffffffffffad0, 8) COPY (register, 0xb8, 8)]
[(unique, 0x10000f35, 8) COPY (stack, 0xfffffffffffffb50, 8)]
[ ---  BRANCH (ram, 0x208218, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffc08, 8) MULTIEQUAL (stack, 0xfffffffffffffc08, 8) , (stack, 0xfffffffffffffc08, 8) , (stack, 0xfffffffffffffc08, 8)]
[(stack, 0xfffffffffffffc00, 8) MULTIEQUAL (stack, 0xfffffffffffffc00, 8) , (stack, 0xfffffffffffffc00, 8) , (stack, 0xfffffffffffffc00, 8)]
[(stack, 0xfffffffffffffbbc, 4) MULTIEQUAL (stack, 0xfffffffffffffbbc, 4) , (stack, 0xfffffffffffffbbc, 4) , (stack, 0xfffffffffffffbbc, 4)]
[(stack, 0xfffffffffffffbb8, 4) MULTIEQUAL (stack, 0xfffffffffffffbb8, 4) , (stack, 0xfffffffffffffbb8, 4) , (stack, 0xfffffffffffffbb8, 4)]
[(stack, 0xfffffffffffffba8, 16) MULTIEQUAL (stack, 0xfffffffffffffba8, 16) , (stack, 0xfffffffffffffba8, 16) , (stack, 0xfffffffffffffba8, 16)]
[(stack, 0xfffffffffffffba4, 4) MULTIEQUAL (stack, 0xfffffffffffffba4, 4) , (stack, 0xfffffffffffffba4, 4) , (stack, 0xfffffffffffffba4, 4)]
[(stack, 0xfffffffffffffba0, 4) MULTIEQUAL (stack, 0xfffffffffffffba0, 4) , (stack, 0xfffffffffffffba0, 4) , (stack, 0xfffffffffffffba0, 4)]
[(stack, 0xfffffffffffffb9c, 4) MULTIEQUAL (stack, 0xfffffffffffffb9c, 4) , (stack, 0xfffffffffffffb9c, 4) , (stack, 0xfffffffffffffb9c, 4)]
[(stack, 0xfffffffffffffb98, 4) MULTIEQUAL (stack, 0xfffffffffffffb98, 4) , (stack, 0xfffffffffffffb98, 4) , (stack, 0xfffffffffffffb98, 4)]
[(stack, 0xfffffffffffffb94, 4) MULTIEQUAL (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4)]
[(stack, 0xfffffffffffffb90, 4) MULTIEQUAL (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4)]
[(stack, 0xfffffffffffffb8c, 4) MULTIEQUAL (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4)]
[(stack, 0xfffffffffffffb88, 4) MULTIEQUAL (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4)]
[(stack, 0xfffffffffffffb84, 4) MULTIEQUAL (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4)]
[(stack, 0xfffffffffffffb80, 4) MULTIEQUAL (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4)]
[(stack, 0xfffffffffffffb7c, 4) MULTIEQUAL (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb60, 4) MULTIEQUAL (stack, 0xfffffffffffffb60, 4) , (stack, 0xfffffffffffffb60, 4) , (stack, 0xfffffffffffffb60, 4)]
[(stack, 0xfffffffffffffb58, 8) MULTIEQUAL (stack, 0xfffffffffffffb58, 8) , (stack, 0xfffffffffffffb58, 8) , (stack, 0xfffffffffffffb58, 8)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb40, 8) MULTIEQUAL (stack, 0xfffffffffffffb40, 8) , (stack, 0xfffffffffffffb40, 8) , (stack, 0xfffffffffffffb40, 8)]
[(stack, 0xfffffffffffffb3c, 4) MULTIEQUAL (stack, 0xfffffffffffffb3c, 4) , (stack, 0xfffffffffffffb3c, 4) , (stack, 0xfffffffffffffb3c, 4)]
[(stack, 0xfffffffffffffb3b, 1) MULTIEQUAL (stack, 0xfffffffffffffb3b, 1) , (stack, 0xfffffffffffffb3b, 1) , (stack, 0xfffffffffffffb3b, 1)]
[(stack, 0xfffffffffffffb3a, 1) MULTIEQUAL (stack, 0xfffffffffffffb3a, 1) , (stack, 0xfffffffffffffb3a, 1) , (stack, 0xfffffffffffffb3a, 1)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb20, 8) MULTIEQUAL (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8)]
[(stack, 0xfffffffffffffb14, 4) MULTIEQUAL (stack, 0xfffffffffffffb14, 4) , (stack, 0xfffffffffffffb14, 4) , (stack, 0xfffffffffffffb14, 4)]
[(stack, 0xfffffffffffffb10, 4) MULTIEQUAL (stack, 0xfffffffffffffb10, 4) , (stack, 0xfffffffffffffb10, 4) , (stack, 0xfffffffffffffb10, 4)]
[(stack, 0xfffffffffffffb0f, 1) MULTIEQUAL (stack, 0xfffffffffffffb0f, 1) , (stack, 0xfffffffffffffb0f, 1) , (stack, 0xfffffffffffffb0f, 1)]
[(stack, 0xfffffffffffffb08, 4) MULTIEQUAL (stack, 0xfffffffffffffb08, 4) , (stack, 0xfffffffffffffb08, 4) , (stack, 0xfffffffffffffb08, 4)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffac4, 4) MULTIEQUAL (stack, 0xfffffffffffffac4, 4) , (stack, 0xfffffffffffffac4, 4) , (stack, 0xfffffffffffffac4, 4)]
[(ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(ram, 0x4f08e8, 4) MULTIEQUAL (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4)]
[(ram, 0x4f0870, 8) MULTIEQUAL (ram, 0x4f0870, 8) , (ram, 0x4f0870, 8) , (ram, 0x4f0870, 8)]
[(ram, 0x4ee064, 4) MULTIEQUAL (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4)]
[(ram, 0x4ee060, 4) MULTIEQUAL (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4)]
[(ram, 0x4ee058, 8) MULTIEQUAL (ram, 0x4ee058, 8) , (ram, 0x4ee058, 8) , (ram, 0x4ee058, 8)]
[(ram, 0x4ee050, 8) MULTIEQUAL (ram, 0x4ee050, 8) , (ram, 0x4ee050, 8) , (ram, 0x4ee050, 8)]
[(ram, 0x4ee044, 4) MULTIEQUAL (ram, 0x4ee044, 4) , (ram, 0x4ee044, 4) , (ram, 0x4ee044, 4)]
[(ram, 0x4ee040, 4) MULTIEQUAL (ram, 0x4ee040, 4) , (ram, 0x4ee040, 4) , (ram, 0x4ee040, 4)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x20a, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1) , (register, 0x20a, 1)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x10000eb5, 8) COPY (stack, 0xfffffffffffffb18, 8), (stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(unique, 0x10000f2d, 8) COPY (stack, 0xfffffffffffffac8, 8), (stack, 0xfffffffffffffac8, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(unique, 0x10001005, 8) COPY (stack, 0xfffffffffffffad8, 8), (stack, 0xfffffffffffffad8, 8) MULTIEQUAL (stack, 0xfffffffffffffad8, 8) , (stack, 0xfffffffffffffad8, 8) , (stack, 0xfffffffffffffad8, 8)]
[(unique, 0x10001075, 8) COPY (stack, 0xfffffffffffffad0, 8), (stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(unique, 0x10001089, 4) COPY (stack, 0xfffffffffffffae0, 4), (stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(unique, 0x10001099, 4) COPY (stack, 0xfffffffffffffae4, 4), (stack, 0xfffffffffffffae4, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[ ---  CBRANCH (ram, 0x2081e8, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (register, 0xa0, 8) , (register, 0x18, 8), (register, 0x18, 8) COPY (unique, 0x10000f4d, 8), (unique, 0x10000f4d, 8) MULTIEQUAL (unique, 0x10000f35, 8) , (unique, 0x10000f3d, 8) , (unique, 0x10000f45, 8), (register, 0xa0, 8) MULTIEQUAL (register, 0x0, 8) , (unique, 0x3100, 8) , (register, 0xa0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000127c, 8) , (const, 0x20820d, 8), (unique, 0x1000127c, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x6e5, 4)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x6e5, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x6e5, 4)]
[(ram, 0x4ee040, 4) INDIRECT (ram, 0x4ee040, 4) , (const, 0x6e5, 4)]
[(ram, 0x4ee044, 4) INDIRECT (ram, 0x4ee044, 4) , (const, 0x6e5, 4)]
[(ram, 0x4ee050, 8) INDIRECT (ram, 0x4ee050, 8) , (const, 0x6e5, 4)]
[(ram, 0x4ee058, 8) INDIRECT (ram, 0x4ee058, 8) , (const, 0x6e5, 4)]
[(ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x6e5, 4)]
[(ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x6e5, 4)]
[(ram, 0x4f0870, 8) INDIRECT (ram, 0x4f0870, 8) , (const, 0x6e5, 4)]
[(ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x6e5, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x6e5, 4)]
[(stack, 0xfffffffffffffac4, 4) INDIRECT (stack, 0xfffffffffffffac4, 4) , (const, 0x6e5, 4), (stack, 0xfffffffffffffac4, 4) INDIRECT (stack, 0xfffffffffffffac4, 4) , (const, 0x6e4, 4)]
[(stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x6e5, 4), (stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x6e4, 4)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x6e5, 4), (stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x6e4, 4)]
[(stack, 0xfffffffffffffad8, 8) INDIRECT (stack, 0xfffffffffffffad8, 8) , (const, 0x6e5, 4), (stack, 0xfffffffffffffad8, 8) INDIRECT (stack, 0xfffffffffffffad8, 8) , (const, 0x6e4, 4)]
[(stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x6e5, 4), (stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x6e4, 4)]
[(stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x6e5, 4), (stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x6e4, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x6e5, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x6e4, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x6e5, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x6e4, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x6e5, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x6e4, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x6e5, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x6e4, 4)]
[(stack, 0xfffffffffffffb08, 4) INDIRECT (stack, 0xfffffffffffffb08, 4) , (const, 0x6e5, 4), (stack, 0xfffffffffffffb08, 4) INDIRECT (stack, 0xfffffffffffffb08, 4) , (const, 0x6e4, 4)]
[(stack, 0xfffffffffffffb0f, 1) INDIRECT (stack, 0xfffffffffffffb0f, 1) , (const, 0x6e5, 4), (stack, 0xfffffffffffffb0f, 1) INDIRECT (stack, 0xfffffffffffffb0f, 1) , (const, 0x6e4, 4)]
[(stack, 0xfffffffffffffb10, 4) INDIRECT (stack, 0xfffffffffffffb10, 4) , (const, 0x6e5, 4), (stack, 0xfffffffffffffb10, 4) INDIRECT (stack, 0xfffffffffffffb10, 4) , (const, 0x6e4, 4)]
[(stack, 0xfffffffffffffb14, 4) INDIRECT (stack, 0xfffffffffffffb14, 4) , (const, 0x6e5, 4), (stack, 0xfffffffffffffb14, 4) INDIRECT (stack, 0xfffffffffffffb14, 4) , (const, 0x6e4, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x6e5, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x6e4, 4)]
[(stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x6e5, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x6e4, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x6e5, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x6e4, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x6e5, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x6e4, 4)]
[(stack, 0xfffffffffffffb3a, 1) INDIRECT (stack, 0xfffffffffffffb3a, 1) , (const, 0x6e5, 4), (stack, 0xfffffffffffffb3a, 1) INDIRECT (stack, 0xfffffffffffffb3a, 1) , (const, 0x6e4, 4)]
[(stack, 0xfffffffffffffb3b, 1) INDIRECT (stack, 0xfffffffffffffb3b, 1) , (const, 0x6e5, 4), (stack, 0xfffffffffffffb3b, 1) INDIRECT (stack, 0xfffffffffffffb3b, 1) , (const, 0x6e4, 4)]
[(stack, 0xfffffffffffffb3c, 4) INDIRECT (stack, 0xfffffffffffffb3c, 4) , (const, 0x6e5, 4), (stack, 0xfffffffffffffb3c, 4) INDIRECT (stack, 0xfffffffffffffb3c, 4) , (const, 0x6e4, 4)]
[(stack, 0xfffffffffffffb40, 8) INDIRECT (stack, 0xfffffffffffffb40, 8) , (const, 0x6e5, 4), (stack, 0xfffffffffffffb40, 8) INDIRECT (stack, 0xfffffffffffffb40, 8) , (const, 0x6e4, 4)]
[(stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x6e5, 4), (stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x6e4, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x6e5, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x6e4, 4)]
[(stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x6e5, 4), (stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x6e4, 4)]
[(stack, 0xfffffffffffffb60, 4) INDIRECT (stack, 0xfffffffffffffb60, 4) , (const, 0x6e5, 4), (stack, 0xfffffffffffffb60, 4) INDIRECT (stack, 0xfffffffffffffb60, 4) , (const, 0x6e4, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x6e5, 4), (stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x6e4, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x6e5, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x6e4, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x6e5, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x6e4, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x6e5, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x6e4, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x6e5, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x6e4, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x6e5, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x6e4, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x6e5, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x6e4, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x6e5, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x6e4, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x6e5, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x6e4, 4)]
[(stack, 0xfffffffffffffb98, 4) INDIRECT (stack, 0xfffffffffffffb98, 4) , (const, 0x6e5, 4), (stack, 0xfffffffffffffb98, 4) INDIRECT (stack, 0xfffffffffffffb98, 4) , (const, 0x6e4, 4)]
[(stack, 0xfffffffffffffb9c, 4) INDIRECT (stack, 0xfffffffffffffb9c, 4) , (const, 0x6e5, 4), (stack, 0xfffffffffffffb9c, 4) INDIRECT (stack, 0xfffffffffffffb9c, 4) , (const, 0x6e4, 4)]
[(stack, 0xfffffffffffffba0, 4) INDIRECT (stack, 0xfffffffffffffba0, 4) , (const, 0x6e5, 4), (stack, 0xfffffffffffffba0, 4) INDIRECT (stack, 0xfffffffffffffba0, 4) , (const, 0x6e4, 4)]
[(stack, 0xfffffffffffffba4, 4) INDIRECT (stack, 0xfffffffffffffba4, 4) , (const, 0x6e5, 4), (stack, 0xfffffffffffffba4, 4) INDIRECT (stack, 0xfffffffffffffba4, 4) , (const, 0x6e4, 4)]
[(stack, 0xfffffffffffffba8, 16) INDIRECT (stack, 0xfffffffffffffba8, 16) , (const, 0x6e5, 4), (stack, 0xfffffffffffffba8, 16) INDIRECT (stack, 0xfffffffffffffba8, 16) , (const, 0x6e4, 4)]
[(stack, 0xfffffffffffffbb8, 4) INDIRECT (stack, 0xfffffffffffffbb8, 4) , (const, 0x6e5, 4), (stack, 0xfffffffffffffbb8, 4) INDIRECT (stack, 0xfffffffffffffbb8, 4) , (const, 0x6e4, 4)]
[(stack, 0xfffffffffffffbbc, 4) INDIRECT (stack, 0xfffffffffffffbbc, 4) , (const, 0x6e5, 4), (stack, 0xfffffffffffffbbc, 4) INDIRECT (stack, 0xfffffffffffffbbc, 4) , (const, 0x6e4, 4)]
[(stack, 0xfffffffffffffc00, 8) INDIRECT (stack, 0xfffffffffffffc00, 8) , (const, 0x6e5, 4), (stack, 0xfffffffffffffc00, 8) INDIRECT (stack, 0xfffffffffffffc00, 8) , (const, 0x6e4, 4)]
[(stack, 0xfffffffffffffc08, 8) INDIRECT (stack, 0xfffffffffffffc08, 8) , (const, 0x6e5, 4), (stack, 0xfffffffffffffc08, 8) INDIRECT (stack, 0xfffffffffffffc08, 8) , (const, 0x6e4, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x6e5, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x6e4, 4)]
[(register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x121220, 8) , (unique, 0x10000eb5, 8) , (unique, 0x3100, 8) , (const, 0x10, 8), (unique, 0x3100, 8) PTRADD (unique, 0x3b80, 8) , (const, 0x8, 8) , (const, 0x1, 8), (unique, 0x3b80, 8) CAST (unique, 0x10001274, 8), (unique, 0x10001274, 8) INT_ADD (unique, 0x1000126c, 8) , (unique, 0x3a80, 8), (unique, 0x1000126c, 8) CAST (unique, 0x10000ee5, 8), (unique, 0x3a80, 8) INT_MULT (unique, 0x3400, 8) , (const, 0x8, 8), (unique, 0x3400, 8) INT_ADD (register, 0xb0, 8) , (unique, 0x3300, 8), (unique, 0x3300, 8) INT_AND (unique, 0x3400, 8) , (const, 0xfffffffffffffffe, 8), (register, 0xb0, 8) INT_RIGHT (unique, 0x3400, 8) , (const, 0x1, 4), (unique, 0x3400, 8) INT_ADD (register, 0xa0, 8) , (register, 0x18, 8)]
[(unique, 0x10000f45, 8) COPY (register, 0xb0, 8), (register, 0xb0, 8) INT_RIGHT (unique, 0x3400, 8) , (const, 0x1, 4), (unique, 0x3400, 8) INT_ADD (register, 0xa0, 8) , (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x2083d8, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (const, 0xffffffff, 4) , (register, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x121220, 8) , (unique, 0x10000eb5, 8) , (unique, 0x3100, 8) , (const, 0x10, 8), (unique, 0x3100, 8) PTRADD (unique, 0x3b80, 8) , (const, 0x8, 8) , (const, 0x1, 8), (unique, 0x3b80, 8) CAST (unique, 0x10001274, 8), (unique, 0x10001274, 8) INT_ADD (unique, 0x1000126c, 8) , (unique, 0x3a80, 8), (unique, 0x1000126c, 8) CAST (unique, 0x10000ee5, 8), (unique, 0x3a80, 8) INT_MULT (unique, 0x3400, 8) , (const, 0x8, 8), (unique, 0x3400, 8) INT_ADD (register, 0xb0, 8) , (unique, 0x3300, 8), (unique, 0x3300, 8) INT_AND (unique, 0x3400, 8) , (const, 0xfffffffffffffffe, 8), (register, 0xb0, 8) INT_RIGHT (unique, 0x3400, 8) , (const, 0x1, 4), (unique, 0x3400, 8) INT_ADD (register, 0xa0, 8) , (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x208750, 1) , (register, 0x206, 1)]
[(unique, 0x10000f1d, 8) COPY (stack, 0xfffffffffffffac8, 8)]
[(unique, 0x10000ff5, 8) COPY (stack, 0xfffffffffffffad8, 8)]
[(unique, 0x10001065, 8) COPY (stack, 0xfffffffffffffad0, 8)]
[(unique, 0x10001081, 4) COPY (stack, 0xfffffffffffffae0, 4)]
[(unique, 0x10001091, 4) COPY (stack, 0xfffffffffffffae4, 4)]
[ ---  CBRANCH (ram, 0x208240, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x3b80, 8) , (const, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0xbb00, 1), (unique, 0x3100, 8) PTRADD (unique, 0x10000dc0, 8) , (const, 0xc, 8) , (const, 0x1, 8), (unique, 0x10000dc0, 8) PTRSUB (unique, 0x10000db8, 8) , (const, 0x2, 8), (unique, 0x10000db8, 8) PTRADD (stack, 0xfffffffffffffad0, 8) , (const, 0x1, 8) , (const, 0x10, 8), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3b80, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0xbb00, 1), (unique, 0x3100, 8) PTRADD (unique, 0x10000de0, 8) , (const, 0xd, 8) , (const, 0x1, 8), (unique, 0x10000de0, 8) PTRSUB (unique, 0x10000dd8, 8) , (const, 0x2, 8), (unique, 0x10000dd8, 8) PTRADD (stack, 0xfffffffffffffad0, 8) , (const, 0x1, 8) , (const, 0x10, 8), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0x3b80, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x725, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x71e, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x717, 4)]
[(ram, 0x4ee040, 4) INDIRECT (ram, 0x4ee040, 4) , (const, 0x725, 4), (ram, 0x4ee040, 4) INDIRECT (ram, 0x4ee040, 4) , (const, 0x71e, 4), (ram, 0x4ee040, 4) INDIRECT (ram, 0x4ee040, 4) , (const, 0x717, 4)]
[(ram, 0x4ee044, 4) INDIRECT (ram, 0x4ee044, 4) , (const, 0x725, 4), (ram, 0x4ee044, 4) INDIRECT (ram, 0x4ee044, 4) , (const, 0x71e, 4), (ram, 0x4ee044, 4) INDIRECT (ram, 0x4ee044, 4) , (const, 0x717, 4)]
[(ram, 0x4ee050, 8) INDIRECT (ram, 0x4ee050, 8) , (const, 0x725, 4), (ram, 0x4ee050, 8) INDIRECT (ram, 0x4ee050, 8) , (const, 0x71e, 4), (ram, 0x4ee050, 8) INDIRECT (ram, 0x4ee050, 8) , (const, 0x717, 4)]
[(ram, 0x4ee058, 8) INDIRECT (ram, 0x4ee058, 8) , (const, 0x725, 4), (ram, 0x4ee058, 8) INDIRECT (ram, 0x4ee058, 8) , (const, 0x71e, 4), (ram, 0x4ee058, 8) INDIRECT (ram, 0x4ee058, 8) , (const, 0x717, 4)]
[(ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x725, 4), (ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x71e, 4), (ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x717, 4)]
[(ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x725, 4), (ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x71e, 4), (ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x717, 4)]
[(ram, 0x4f0870, 8) INDIRECT (ram, 0x4f0870, 8) , (const, 0x725, 4), (ram, 0x4f0870, 8) INDIRECT (ram, 0x4f0870, 8) , (const, 0x71e, 4), (ram, 0x4f0870, 8) INDIRECT (ram, 0x4f0870, 8) , (const, 0x717, 4)]
[(ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x725, 4), (ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x71e, 4), (ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x717, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x725, 4), (ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x71e, 4), (ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x717, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000128c, 8) , (unique, 0xbc80, 4), (unique, 0x1000128c, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (stack, 0xfffffffffffffad0, 8) , (const, 0x2, 8) , (const, 0x10, 8), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10001284, 8), (unique, 0x10001284, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0x3b80, 8) , (const, 0x4, 8) , (const, 0x1, 8)]
[ ---  BRANCH (ram, 0x208240, 1)]
[(unique, 0x3100, 8) INT_ADD (register, 0xb0, 8) , (const, 0x1, 8)]
[(unique, 0x10000f3d, 8) COPY (register, 0x18, 8)]
[ ---  BRANCH (ram, 0x208218, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffc08, 8) MULTIEQUAL (stack, 0xfffffffffffffc08, 8) , (stack, 0xfffffffffffffc08, 8) , (stack, 0xfffffffffffffc08, 8) , (stack, 0xfffffffffffffc08, 8)]
[(stack, 0xfffffffffffffc00, 8) MULTIEQUAL (stack, 0xfffffffffffffc00, 8) , (stack, 0xfffffffffffffc00, 8) , (stack, 0xfffffffffffffc00, 8) , (stack, 0xfffffffffffffc00, 8)]
[(stack, 0xfffffffffffffbbc, 4) MULTIEQUAL (stack, 0xfffffffffffffbbc, 4) , (stack, 0xfffffffffffffbbc, 4) , (stack, 0xfffffffffffffbbc, 4) , (stack, 0xfffffffffffffbbc, 4)]
[(stack, 0xfffffffffffffbb8, 4) MULTIEQUAL (stack, 0xfffffffffffffbb8, 4) , (stack, 0xfffffffffffffbb8, 4) , (stack, 0xfffffffffffffbb8, 4) , (stack, 0xfffffffffffffbb8, 4)]
[(stack, 0xfffffffffffffba8, 16) MULTIEQUAL (stack, 0xfffffffffffffba8, 16) , (stack, 0xfffffffffffffba8, 16) , (stack, 0xfffffffffffffba8, 16) , (stack, 0xfffffffffffffba8, 16)]
[(stack, 0xfffffffffffffba4, 4) MULTIEQUAL (stack, 0xfffffffffffffba4, 4) , (stack, 0xfffffffffffffba4, 4) , (stack, 0xfffffffffffffba4, 4) , (stack, 0xfffffffffffffba4, 4)]
[(stack, 0xfffffffffffffba0, 4) MULTIEQUAL (stack, 0xfffffffffffffba0, 4) , (stack, 0xfffffffffffffba0, 4) , (stack, 0xfffffffffffffba0, 4) , (stack, 0xfffffffffffffba0, 4)]
[(stack, 0xfffffffffffffb9c, 4) MULTIEQUAL (stack, 0xfffffffffffffb9c, 4) , (stack, 0xfffffffffffffb9c, 4) , (stack, 0xfffffffffffffb9c, 4) , (stack, 0xfffffffffffffb9c, 4)]
[(stack, 0xfffffffffffffb98, 4) MULTIEQUAL (stack, 0xfffffffffffffb98, 4) , (stack, 0xfffffffffffffb98, 4) , (stack, 0xfffffffffffffb98, 4) , (stack, 0xfffffffffffffb98, 4)]
[(stack, 0xfffffffffffffb94, 4) MULTIEQUAL (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4)]
[(stack, 0xfffffffffffffb90, 4) MULTIEQUAL (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4)]
[(stack, 0xfffffffffffffb8c, 4) MULTIEQUAL (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4)]
[(stack, 0xfffffffffffffb88, 4) MULTIEQUAL (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4)]
[(stack, 0xfffffffffffffb84, 4) MULTIEQUAL (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4)]
[(stack, 0xfffffffffffffb80, 4) MULTIEQUAL (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4)]
[(stack, 0xfffffffffffffb7c, 4) MULTIEQUAL (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb60, 4) MULTIEQUAL (stack, 0xfffffffffffffb60, 4) , (stack, 0xfffffffffffffb60, 4) , (stack, 0xfffffffffffffb60, 4) , (stack, 0xfffffffffffffb60, 4)]
[(stack, 0xfffffffffffffb58, 8) MULTIEQUAL (stack, 0xfffffffffffffb58, 8) , (stack, 0xfffffffffffffb58, 8) , (stack, 0xfffffffffffffb58, 8) , (stack, 0xfffffffffffffb58, 8)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb40, 8) MULTIEQUAL (stack, 0xfffffffffffffb40, 8) , (stack, 0xfffffffffffffb40, 8) , (stack, 0xfffffffffffffb40, 8) , (stack, 0xfffffffffffffb40, 8)]
[(stack, 0xfffffffffffffb3c, 4) MULTIEQUAL (stack, 0xfffffffffffffb3c, 4) , (stack, 0xfffffffffffffb3c, 4) , (stack, 0xfffffffffffffb3c, 4) , (stack, 0xfffffffffffffb3c, 4)]
[(stack, 0xfffffffffffffb3b, 1) MULTIEQUAL (stack, 0xfffffffffffffb3b, 1) , (stack, 0xfffffffffffffb3b, 1) , (stack, 0xfffffffffffffb3b, 1) , (stack, 0xfffffffffffffb3b, 1)]
[(stack, 0xfffffffffffffb3a, 1) MULTIEQUAL (stack, 0xfffffffffffffb3a, 1) , (stack, 0xfffffffffffffb3a, 1) , (stack, 0xfffffffffffffb3a, 1) , (stack, 0xfffffffffffffb3a, 1)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb20, 8) MULTIEQUAL (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb14, 4) MULTIEQUAL (stack, 0xfffffffffffffb14, 4) , (stack, 0xfffffffffffffb14, 4) , (stack, 0xfffffffffffffb14, 4) , (stack, 0xfffffffffffffb14, 4)]
[(stack, 0xfffffffffffffb10, 4) MULTIEQUAL (stack, 0xfffffffffffffb10, 4) , (stack, 0xfffffffffffffb10, 4) , (stack, 0xfffffffffffffb10, 4) , (stack, 0xfffffffffffffb10, 4)]
[(stack, 0xfffffffffffffb0f, 1) MULTIEQUAL (stack, 0xfffffffffffffb0f, 1) , (stack, 0xfffffffffffffb0f, 1) , (stack, 0xfffffffffffffb0f, 1) , (stack, 0xfffffffffffffb0f, 1)]
[(stack, 0xfffffffffffffb08, 4) MULTIEQUAL (stack, 0xfffffffffffffb08, 4) , (stack, 0xfffffffffffffb08, 4) , (stack, 0xfffffffffffffb08, 4) , (stack, 0xfffffffffffffb08, 4)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae4, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[(stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffad8, 8) MULTIEQUAL (stack, 0xfffffffffffffad8, 8) , (stack, 0xfffffffffffffad8, 8) , (stack, 0xfffffffffffffad8, 8) , (stack, 0xfffffffffffffad8, 8)]
[(stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffac8, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffac4, 4) MULTIEQUAL (stack, 0xfffffffffffffac4, 4) , (stack, 0xfffffffffffffac4, 4) , (stack, 0xfffffffffffffac4, 4) , (stack, 0xfffffffffffffac4, 4)]
[(ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(ram, 0x4f08e8, 4) MULTIEQUAL (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4)]
[(ram, 0x4f0870, 8) MULTIEQUAL (ram, 0x4f0870, 8) , (ram, 0x4f0870, 8) , (ram, 0x4f0870, 8) , (ram, 0x4f0870, 8)]
[(ram, 0x4ee064, 4) MULTIEQUAL (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4)]
[(ram, 0x4ee060, 4) MULTIEQUAL (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4)]
[(ram, 0x4ee058, 8) MULTIEQUAL (ram, 0x4ee058, 8) , (ram, 0x4ee058, 8) , (ram, 0x4ee058, 8) , (ram, 0x4ee058, 8)]
[(ram, 0x4ee050, 8) MULTIEQUAL (ram, 0x4ee050, 8) , (ram, 0x4ee050, 8) , (ram, 0x4ee050, 8) , (ram, 0x4ee050, 8)]
[(ram, 0x4ee044, 4) MULTIEQUAL (ram, 0x4ee044, 4) , (ram, 0x4ee044, 4) , (ram, 0x4ee044, 4) , (ram, 0x4ee044, 4)]
[(ram, 0x4ee040, 4) MULTIEQUAL (ram, 0x4ee040, 4) , (ram, 0x4ee040, 4) , (ram, 0x4ee040, 4) , (ram, 0x4ee040, 4)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x20a, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1) , (register, 0x20a, 1) , (register, 0x20a, 1)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb8, 8) MULTIEQUAL (unique, 0x1000105d, 8) , (unique, 0x10001065, 8) , (unique, 0x10001065, 8) , (unique, 0x10001075, 8)]
[(register, 0xa0, 4) MULTIEQUAL (unique, 0x1000108d, 4) , (unique, 0x10001091, 4) , (unique, 0x10001091, 4) , (unique, 0x10001099, 4)]
[(register, 0x18, 8) MULTIEQUAL (unique, 0x10000f15, 8) , (unique, 0x10000f1d, 8) , (unique, 0x10000f1d, 8) , (unique, 0x10000f2d, 8)]
[(unique, 0x10001015, 8) COPY (register, 0xb0, 8), (register, 0xb0, 8) MULTIEQUAL (unique, 0x10000fed, 8) , (unique, 0x10000ff5, 8) , (unique, 0x10000ff5, 8) , (unique, 0x10001005, 8)]
[ ---  CBRANCH (ram, 0x207f06, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xa8, 4) , (const, 0xa, 4), (register, 0xa8, 4) MULTIEQUAL (unique, 0x1000107d, 4) , (unique, 0x10001081, 4) , (unique, 0x10001081, 4) , (unique, 0x10001089, 4)]
[ ---  CBRANCH (ram, 0x207f06, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xfffffffffffffb0f, 1) , (const, 0x0, 1)]
[ ---  CBRANCH (ram, 0x208843, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10001294, 8), (unique, 0x10001294, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0x10000a60, 8) , (const, 0x6, 8) , (const, 0x1, 8), (unique, 0x10000a60, 8) PTRSUB (register, 0xb8, 8) , (const, 0x2, 8)]
[ ---  CBRANCH (ram, 0x208843, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x1000129c, 8), (unique, 0x1000129c, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0x10000a78, 8) , (const, 0xa, 8) , (const, 0x1, 8), (unique, 0x10000a78, 8) PTRSUB (register, 0xb8, 8) , (const, 0x2, 8)]
[ ---  CBRANCH (ram, 0x208843, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd00, 4) , (const, 0xffff0000, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100012a4, 8), (unique, 0x100012a4, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb8, 8) , (const, 0x1, 8) , (const, 0x10, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100012ac, 8) , (const, 0x208862, 8), (unique, 0x100012ac, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(stack, 0xfffffffffffffac4, 4) INDIRECT (stack, 0xfffffffffffffac4, 4) , (const, 0x6c6, 4), (stack, 0xfffffffffffffac4, 4) INDIRECT (stack, 0xfffffffffffffac4, 4) , (const, 0x6c5, 4)]
[(stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x6c6, 4), (stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x6c5, 4)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x6c6, 4), (stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x6c5, 4)]
[(stack, 0xfffffffffffffad8, 8) INDIRECT (stack, 0xfffffffffffffad8, 8) , (const, 0x6c6, 4), (stack, 0xfffffffffffffad8, 8) INDIRECT (stack, 0xfffffffffffffad8, 8) , (const, 0x6c5, 4)]
[(stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x6c6, 4), (stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x6c5, 4)]
[(stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x6c6, 4), (stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x6c5, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x6c6, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x6c5, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x6c6, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x6c5, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x6c6, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x6c5, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x6c6, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x6c5, 4)]
[(stack, 0xfffffffffffffb08, 4) INDIRECT (stack, 0xfffffffffffffb08, 4) , (const, 0x6c6, 4), (stack, 0xfffffffffffffb08, 4) INDIRECT (stack, 0xfffffffffffffb08, 4) , (const, 0x6c5, 4)]
[(stack, 0xfffffffffffffb0f, 1) INDIRECT (stack, 0xfffffffffffffb0f, 1) , (const, 0x6c6, 4), (stack, 0xfffffffffffffb0f, 1) INDIRECT (stack, 0xfffffffffffffb0f, 1) , (const, 0x6c5, 4)]
[(stack, 0xfffffffffffffb10, 4) INDIRECT (stack, 0xfffffffffffffb10, 4) , (const, 0x6c6, 4), (stack, 0xfffffffffffffb10, 4) INDIRECT (stack, 0xfffffffffffffb10, 4) , (const, 0x6c5, 4)]
[(stack, 0xfffffffffffffb14, 4) INDIRECT (stack, 0xfffffffffffffb14, 4) , (const, 0x6c6, 4), (stack, 0xfffffffffffffb14, 4) INDIRECT (stack, 0xfffffffffffffb14, 4) , (const, 0x6c5, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x6c6, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x6c5, 4)]
[(stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x6c6, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x6c5, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x6c6, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x6c5, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x6c6, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x6c5, 4)]
[(stack, 0xfffffffffffffb3a, 1) INDIRECT (stack, 0xfffffffffffffb3a, 1) , (const, 0x6c6, 4), (stack, 0xfffffffffffffb3a, 1) INDIRECT (stack, 0xfffffffffffffb3a, 1) , (const, 0x6c5, 4)]
[(stack, 0xfffffffffffffb3b, 1) INDIRECT (stack, 0xfffffffffffffb3b, 1) , (const, 0x6c6, 4), (stack, 0xfffffffffffffb3b, 1) INDIRECT (stack, 0xfffffffffffffb3b, 1) , (const, 0x6c5, 4)]
[(stack, 0xfffffffffffffb3c, 4) INDIRECT (stack, 0xfffffffffffffb3c, 4) , (const, 0x6c6, 4), (stack, 0xfffffffffffffb3c, 4) INDIRECT (stack, 0xfffffffffffffb3c, 4) , (const, 0x6c5, 4)]
[(stack, 0xfffffffffffffb40, 8) INDIRECT (stack, 0xfffffffffffffb40, 8) , (const, 0x6c6, 4), (stack, 0xfffffffffffffb40, 8) INDIRECT (stack, 0xfffffffffffffb40, 8) , (const, 0x6c5, 4)]
[(stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x6c6, 4), (stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x6c5, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x6c6, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x6c5, 4)]
[(stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x6c6, 4), (stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x6c5, 4)]
[(stack, 0xfffffffffffffb60, 4) INDIRECT (stack, 0xfffffffffffffb60, 4) , (const, 0x6c6, 4), (stack, 0xfffffffffffffb60, 4) INDIRECT (stack, 0xfffffffffffffb60, 4) , (const, 0x6c5, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x6c6, 4), (stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x6c5, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x6c6, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x6c5, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x6c6, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x6c5, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x6c6, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x6c5, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x6c6, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x6c5, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x6c6, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x6c5, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x6c6, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x6c5, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x6c6, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x6c5, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x6c6, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x6c5, 4)]
[(stack, 0xfffffffffffffb98, 4) INDIRECT (stack, 0xfffffffffffffb98, 4) , (const, 0x6c6, 4), (stack, 0xfffffffffffffb98, 4) INDIRECT (stack, 0xfffffffffffffb98, 4) , (const, 0x6c5, 4)]
[(stack, 0xfffffffffffffb9c, 4) INDIRECT (stack, 0xfffffffffffffb9c, 4) , (const, 0x6c6, 4), (stack, 0xfffffffffffffb9c, 4) INDIRECT (stack, 0xfffffffffffffb9c, 4) , (const, 0x6c5, 4)]
[(stack, 0xfffffffffffffba0, 4) INDIRECT (stack, 0xfffffffffffffba0, 4) , (const, 0x6c6, 4), (stack, 0xfffffffffffffba0, 4) INDIRECT (stack, 0xfffffffffffffba0, 4) , (const, 0x6c5, 4)]
[(stack, 0xfffffffffffffba4, 4) INDIRECT (stack, 0xfffffffffffffba4, 4) , (const, 0x6c6, 4), (stack, 0xfffffffffffffba4, 4) INDIRECT (stack, 0xfffffffffffffba4, 4) , (const, 0x6c5, 4)]
[(stack, 0xfffffffffffffba8, 16) INDIRECT (stack, 0xfffffffffffffba8, 16) , (const, 0x6c6, 4), (stack, 0xfffffffffffffba8, 16) INDIRECT (stack, 0xfffffffffffffba8, 16) , (const, 0x6c5, 4)]
[(stack, 0xfffffffffffffbb8, 4) INDIRECT (stack, 0xfffffffffffffbb8, 4) , (const, 0x6c6, 4), (stack, 0xfffffffffffffbb8, 4) INDIRECT (stack, 0xfffffffffffffbb8, 4) , (const, 0x6c5, 4)]
[(stack, 0xfffffffffffffbbc, 4) INDIRECT (stack, 0xfffffffffffffbbc, 4) , (const, 0x6c6, 4), (stack, 0xfffffffffffffbbc, 4) INDIRECT (stack, 0xfffffffffffffbbc, 4) , (const, 0x6c5, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x6c6, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x6c5, 4)]
[ ---  CALL (ram, 0x1303d0, 8) , (unique, 0x10000650, 8) , (unique, 0x10000648, 8) , (const, 0x9b0, 4) , (unique, 0x10000660, 8), (unique, 0x10000660, 8) COPY (const, 0x2b9ba0, 8), (unique, 0x10000650, 8) COPY (const, 0x2b9b58, 8), (unique, 0x10000648, 8) COPY (const, 0x2b9a08, 8)]
[(ram, 0x4eae68, 8) COPY (ram, 0x4eae68, 8), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x6c6, 4)]
[(ram, 0x4ee040, 4) COPY (ram, 0x4ee040, 4), (ram, 0x4ee040, 4) INDIRECT (ram, 0x4ee040, 4) , (const, 0x6c6, 4)]
[(ram, 0x4ee044, 4) COPY (ram, 0x4ee044, 4), (ram, 0x4ee044, 4) INDIRECT (ram, 0x4ee044, 4) , (const, 0x6c6, 4)]
[(ram, 0x4ee050, 8) COPY (ram, 0x4ee050, 8), (ram, 0x4ee050, 8) INDIRECT (ram, 0x4ee050, 8) , (const, 0x6c6, 4)]
[(ram, 0x4ee058, 8) COPY (ram, 0x4ee058, 8), (ram, 0x4ee058, 8) INDIRECT (ram, 0x4ee058, 8) , (const, 0x6c6, 4)]
[(ram, 0x4ee060, 4) COPY (ram, 0x4ee060, 4), (ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x6c6, 4)]
[(ram, 0x4ee064, 4) COPY (ram, 0x4ee064, 4), (ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x6c6, 4)]
[(ram, 0x4f0870, 8) COPY (ram, 0x4f0870, 8), (ram, 0x4f0870, 8) INDIRECT (ram, 0x4f0870, 8) , (const, 0x6c6, 4)]
[(ram, 0x4f08e8, 4) COPY (ram, 0x4f08e8, 4), (ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x6c6, 4)]
[(ram, 0x4f08f8, 4) COPY (ram, 0x4f08f8, 4), (ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x6c6, 4)]
[ ---  RETURN (const, 0x1, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (const, 0x10, 1), (unique, 0x3100, 8) PTRADD (unique, 0x10000ac0, 8) , (const, 0xa, 8) , (const, 0x1, 8), (unique, 0x10000ac0, 8) PTRSUB (unique, 0x10000ab8, 8) , (const, 0x2, 8), (unique, 0x10000ab8, 8) PTRADD (register, 0xb8, 8) , (const, 0x1, 8) , (const, 0x10, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000ad0, 8) , (const, 0x2, 2), (unique, 0x10000ad0, 8) PTRSUB (register, 0xb8, 8) , (const, 0x0, 8)]
[(register, 0xa8, 4) COPY (const, 0xa, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x6be, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x6ba, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x6b8, 4)]
[(ram, 0x4ee040, 4) INDIRECT (ram, 0x4ee040, 4) , (const, 0x6be, 4), (ram, 0x4ee040, 4) INDIRECT (ram, 0x4ee040, 4) , (const, 0x6ba, 4), (ram, 0x4ee040, 4) INDIRECT (ram, 0x4ee040, 4) , (const, 0x6b8, 4)]
[(ram, 0x4ee044, 4) INDIRECT (ram, 0x4ee044, 4) , (const, 0x6be, 4), (ram, 0x4ee044, 4) INDIRECT (ram, 0x4ee044, 4) , (const, 0x6ba, 4), (ram, 0x4ee044, 4) INDIRECT (ram, 0x4ee044, 4) , (const, 0x6b8, 4)]
[(ram, 0x4ee050, 8) INDIRECT (ram, 0x4ee050, 8) , (const, 0x6be, 4), (ram, 0x4ee050, 8) INDIRECT (ram, 0x4ee050, 8) , (const, 0x6ba, 4), (ram, 0x4ee050, 8) INDIRECT (ram, 0x4ee050, 8) , (const, 0x6b8, 4)]
[(ram, 0x4ee058, 8) INDIRECT (ram, 0x4ee058, 8) , (const, 0x6be, 4), (ram, 0x4ee058, 8) INDIRECT (ram, 0x4ee058, 8) , (const, 0x6ba, 4), (ram, 0x4ee058, 8) INDIRECT (ram, 0x4ee058, 8) , (const, 0x6b8, 4)]
[(ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x6be, 4), (ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x6ba, 4), (ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x6b8, 4)]
[(ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x6be, 4), (ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x6ba, 4), (ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x6b8, 4)]
[(ram, 0x4f0870, 8) INDIRECT (ram, 0x4f0870, 8) , (const, 0x6be, 4), (ram, 0x4f0870, 8) INDIRECT (ram, 0x4f0870, 8) , (const, 0x6ba, 4), (ram, 0x4f0870, 8) INDIRECT (ram, 0x4f0870, 8) , (const, 0x6b8, 4)]
[(ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x6be, 4), (ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x6ba, 4), (ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x6b8, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x6be, 4), (ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x6ba, 4), (ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x6b8, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100012bc, 8) , (unique, 0xbc80, 4), (unique, 0x100012bc, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0x10000ae0, 8) , (const, 0x2, 8) , (const, 0x1, 8), (unique, 0x10000ae0, 8) PTRSUB (register, 0xb8, 8) , (const, 0x2, 8), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100012b4, 8), (unique, 0x100012b4, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0x10000aa0, 8) , (const, 0x2, 8) , (const, 0x1, 8), (unique, 0x10000aa0, 8) PTRSUB (unique, 0x10000a98, 8) , (const, 0x2, 8), (unique, 0x10000a98, 8) PTRADD (register, 0xb8, 8) , (const, 0x1, 8) , (const, 0x10, 8)]
[ ---  BRANCH (ram, 0x207f06, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffc08, 8) MULTIEQUAL (stack, 0xfffffffffffffc08, 8) , (stack, 0xfffffffffffffc08, 8) , (stack, 0xfffffffffffffc08, 8)]
[(stack, 0xfffffffffffffc00, 8) MULTIEQUAL (stack, 0xfffffffffffffc00, 8) , (stack, 0xfffffffffffffc00, 8) , (stack, 0xfffffffffffffc00, 8)]
[(stack, 0xfffffffffffffbbc, 4) MULTIEQUAL (stack, 0xfffffffffffffbbc, 4) , (stack, 0xfffffffffffffbbc, 4) , (stack, 0xfffffffffffffbbc, 4)]
[(stack, 0xfffffffffffffbb8, 4) MULTIEQUAL (stack, 0xfffffffffffffbb8, 4) , (stack, 0xfffffffffffffbb8, 4) , (stack, 0xfffffffffffffbb8, 4)]
[(stack, 0xfffffffffffffba8, 16) MULTIEQUAL (stack, 0xfffffffffffffba8, 16) , (stack, 0xfffffffffffffba8, 16) , (stack, 0xfffffffffffffba8, 16)]
[(stack, 0xfffffffffffffba4, 4) MULTIEQUAL (stack, 0xfffffffffffffba4, 4) , (stack, 0xfffffffffffffba4, 4) , (stack, 0xfffffffffffffba4, 4)]
[(stack, 0xfffffffffffffba0, 4) MULTIEQUAL (stack, 0xfffffffffffffba0, 4) , (stack, 0xfffffffffffffba0, 4) , (stack, 0xfffffffffffffba0, 4)]
[(stack, 0xfffffffffffffb9c, 4) MULTIEQUAL (stack, 0xfffffffffffffb9c, 4) , (stack, 0xfffffffffffffb9c, 4) , (stack, 0xfffffffffffffb9c, 4)]
[(stack, 0xfffffffffffffb98, 4) MULTIEQUAL (stack, 0xfffffffffffffb98, 4) , (stack, 0xfffffffffffffb98, 4) , (stack, 0xfffffffffffffb98, 4)]
[(stack, 0xfffffffffffffb94, 4) MULTIEQUAL (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4)]
[(stack, 0xfffffffffffffb90, 4) MULTIEQUAL (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4)]
[(stack, 0xfffffffffffffb8c, 4) MULTIEQUAL (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4)]
[(stack, 0xfffffffffffffb88, 4) MULTIEQUAL (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4)]
[(stack, 0xfffffffffffffb84, 4) MULTIEQUAL (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4)]
[(stack, 0xfffffffffffffb80, 4) MULTIEQUAL (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4)]
[(stack, 0xfffffffffffffb7c, 4) MULTIEQUAL (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb60, 4) MULTIEQUAL (stack, 0xfffffffffffffb60, 4) , (stack, 0xfffffffffffffb60, 4) , (stack, 0xfffffffffffffb60, 4)]
[(stack, 0xfffffffffffffb58, 8) MULTIEQUAL (stack, 0xfffffffffffffb58, 8) , (stack, 0xfffffffffffffb58, 8) , (stack, 0xfffffffffffffb58, 8)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb40, 8) MULTIEQUAL (stack, 0xfffffffffffffb40, 8) , (stack, 0xfffffffffffffb40, 8) , (stack, 0xfffffffffffffb40, 8)]
[(stack, 0xfffffffffffffb3c, 4) MULTIEQUAL (stack, 0xfffffffffffffb3c, 4) , (stack, 0xfffffffffffffb3c, 4) , (stack, 0xfffffffffffffb3c, 4)]
[(stack, 0xfffffffffffffb3b, 1) MULTIEQUAL (stack, 0xfffffffffffffb3b, 1) , (stack, 0xfffffffffffffb3b, 1) , (stack, 0xfffffffffffffb3b, 1)]
[(stack, 0xfffffffffffffb3a, 1) MULTIEQUAL (stack, 0xfffffffffffffb3a, 1) , (stack, 0xfffffffffffffb3a, 1) , (stack, 0xfffffffffffffb3a, 1)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb20, 8) MULTIEQUAL (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb14, 4) MULTIEQUAL (stack, 0xfffffffffffffb14, 4) , (stack, 0xfffffffffffffb14, 4) , (stack, 0xfffffffffffffb14, 4)]
[(stack, 0xfffffffffffffb10, 4) MULTIEQUAL (stack, 0xfffffffffffffb10, 4) , (stack, 0xfffffffffffffb10, 4) , (stack, 0xfffffffffffffb10, 4)]
[(stack, 0xfffffffffffffb0f, 1) MULTIEQUAL (stack, 0xfffffffffffffb0f, 1) , (stack, 0xfffffffffffffb0f, 1) , (stack, 0xfffffffffffffb0f, 1)]
[(stack, 0xfffffffffffffb08, 4) MULTIEQUAL (stack, 0xfffffffffffffb08, 4) , (stack, 0xfffffffffffffb08, 4) , (stack, 0xfffffffffffffb08, 4)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae4, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[(stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffad8, 8) MULTIEQUAL (stack, 0xfffffffffffffad8, 8) , (stack, 0xfffffffffffffad8, 8) , (stack, 0xfffffffffffffad8, 8)]
[(stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffac8, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffac4, 4) MULTIEQUAL (stack, 0xfffffffffffffac4, 4) , (stack, 0xfffffffffffffac4, 4) , (stack, 0xfffffffffffffac4, 4)]
[(ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(ram, 0x4f08e8, 4) MULTIEQUAL (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4)]
[(ram, 0x4f0870, 8) MULTIEQUAL (ram, 0x4f0870, 8) , (ram, 0x4f0870, 8) , (ram, 0x4f0870, 8)]
[(ram, 0x4ee064, 4) MULTIEQUAL (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4)]
[(ram, 0x4ee060, 4) MULTIEQUAL (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4)]
[(ram, 0x4ee058, 8) MULTIEQUAL (ram, 0x4ee058, 8) , (ram, 0x4ee058, 8) , (ram, 0x4ee058, 8)]
[(ram, 0x4ee050, 8) MULTIEQUAL (ram, 0x4ee050, 8) , (ram, 0x4ee050, 8) , (ram, 0x4ee050, 8)]
[(ram, 0x4ee044, 4) MULTIEQUAL (ram, 0x4ee044, 4) , (ram, 0x4ee044, 4) , (ram, 0x4ee044, 4)]
[(ram, 0x4ee040, 4) MULTIEQUAL (ram, 0x4ee040, 4) , (ram, 0x4ee040, 4) , (ram, 0x4ee040, 4)]
[(register, 0x20a, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1) , (register, 0x20a, 1)]
[(register, 0xa8, 4) MULTIEQUAL (unique, 0xbc80, 4) , (register, 0xa8, 4) , (register, 0xa8, 4)]
[(register, 0xa0, 4) MULTIEQUAL (register, 0x0, 4) , (register, 0xa0, 4) , (register, 0xa0, 4)]
[ ---  CBRANCH (ram, 0x207f01, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd00, 4) , (const, 0x61, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100012c4, 8), (unique, 0x100012c4, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (ram, 0x4eae68, 8) , (register, 0x110, 8) , (const, 0x1, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[ ---  CBRANCH (ram, 0x2080b0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xa8, 4) , (const, 0xa, 4)]
[ ---  CBRANCH (ram, 0x207f01, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd00, 4) , (const, 0x2, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0xb0, 8) , (const, 0x4, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x357, 4)]
[(ram, 0x4ee040, 4) INDIRECT (ram, 0x4ee040, 4) , (const, 0x357, 4)]
[(ram, 0x4ee044, 4) INDIRECT (ram, 0x4ee044, 4) , (const, 0x357, 4)]
[(ram, 0x4ee050, 8) INDIRECT (ram, 0x4ee050, 8) , (const, 0x357, 4)]
[(ram, 0x4ee058, 8) INDIRECT (ram, 0x4ee058, 8) , (const, 0x357, 4)]
[(ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x357, 4)]
[(ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x357, 4)]
[(ram, 0x4f0870, 8) INDIRECT (ram, 0x4f0870, 8) , (const, 0x357, 4)]
[(ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x357, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x357, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (const, 0x0, 1), (unique, 0x3100, 8) PTRADD (unique, 0x10000768, 8) , (const, 0xa, 8) , (const, 0x1, 8), (unique, 0x10000768, 8) PTRSUB (unique, 0x10000760, 8) , (const, 0x2, 8), (unique, 0x10000760, 8) PTRADD (register, 0xb8, 8) , (const, 0x1, 8) , (const, 0x10, 8)]
[(unique, 0x1000100d, 8) COPY (register, 0xb0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100012cc, 8) , (const, 0x2080c3, 8), (unique, 0x100012cc, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x5d0, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x5d0, 4), (register, 0x20a, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x5d0, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4ee040, 4) INDIRECT (ram, 0x4ee040, 4) , (const, 0x5d0, 4), (ram, 0x4ee040, 4) MULTIEQUAL (ram, 0x4ee040, 4) , (ram, 0x4ee040, 4)]
[(ram, 0x4ee044, 4) INDIRECT (ram, 0x4ee044, 4) , (const, 0x5d0, 4), (ram, 0x4ee044, 4) MULTIEQUAL (ram, 0x4ee044, 4) , (ram, 0x4ee044, 4)]
[(ram, 0x4ee050, 8) INDIRECT (ram, 0x4ee050, 8) , (const, 0x5d0, 4), (ram, 0x4ee050, 8) MULTIEQUAL (ram, 0x4ee050, 8) , (ram, 0x4ee050, 8)]
[(ram, 0x4ee058, 8) INDIRECT (ram, 0x4ee058, 8) , (const, 0x5d0, 4), (ram, 0x4ee058, 8) MULTIEQUAL (ram, 0x4ee058, 8) , (ram, 0x4ee058, 8)]
[(ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x5d0, 4), (ram, 0x4ee060, 4) MULTIEQUAL (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4)]
[(ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x5d0, 4), (ram, 0x4ee064, 4) MULTIEQUAL (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4)]
[(ram, 0x4f0870, 8) INDIRECT (ram, 0x4f0870, 8) , (const, 0x5d0, 4), (ram, 0x4f0870, 8) MULTIEQUAL (ram, 0x4f0870, 8) , (ram, 0x4f0870, 8)]
[(ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x5d0, 4), (ram, 0x4f08e8, 4) MULTIEQUAL (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x5d0, 4), (ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(stack, 0xfffffffffffffac4, 4) INDIRECT (stack, 0xfffffffffffffac4, 4) , (const, 0x5d0, 4), (stack, 0xfffffffffffffac4, 4) INDIRECT (stack, 0xfffffffffffffac4, 4) , (const, 0x5cf, 4), (stack, 0xfffffffffffffac4, 4) MULTIEQUAL (stack, 0xfffffffffffffac4, 4) , (stack, 0xfffffffffffffac4, 4)]
[(stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x5d0, 4), (stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x5cf, 4), (stack, 0xfffffffffffffac8, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x5d0, 4), (stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x5cf, 4), (stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffad8, 8) INDIRECT (stack, 0xfffffffffffffad8, 8) , (const, 0x5d0, 4), (stack, 0xfffffffffffffad8, 8) INDIRECT (stack, 0xfffffffffffffad8, 8) , (const, 0x5cf, 4), (stack, 0xfffffffffffffad8, 8) MULTIEQUAL (stack, 0xfffffffffffffad8, 8) , (stack, 0xfffffffffffffad8, 8)]
[(stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x5d0, 4), (stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x5cf, 4), (stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x5d0, 4), (stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x5cf, 4), (stack, 0xfffffffffffffae4, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x5d0, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x5cf, 4), (stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x5d0, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x5cf, 4), (stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x5d0, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x5cf, 4), (stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x5d0, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x5cf, 4), (stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffb08, 4) INDIRECT (stack, 0xfffffffffffffb08, 4) , (const, 0x5d0, 4), (stack, 0xfffffffffffffb08, 4) INDIRECT (stack, 0xfffffffffffffb08, 4) , (const, 0x5cf, 4), (stack, 0xfffffffffffffb08, 4) MULTIEQUAL (stack, 0xfffffffffffffb08, 4) , (stack, 0xfffffffffffffb08, 4)]
[(stack, 0xfffffffffffffb0f, 1) INDIRECT (stack, 0xfffffffffffffb0f, 1) , (const, 0x5d0, 4), (stack, 0xfffffffffffffb0f, 1) INDIRECT (stack, 0xfffffffffffffb0f, 1) , (const, 0x5cf, 4), (stack, 0xfffffffffffffb0f, 1) MULTIEQUAL (stack, 0xfffffffffffffb0f, 1) , (stack, 0xfffffffffffffb0f, 1)]
[(stack, 0xfffffffffffffb10, 4) INDIRECT (stack, 0xfffffffffffffb10, 4) , (const, 0x5d0, 4), (stack, 0xfffffffffffffb10, 4) INDIRECT (stack, 0xfffffffffffffb10, 4) , (const, 0x5cf, 4), (stack, 0xfffffffffffffb10, 4) MULTIEQUAL (stack, 0xfffffffffffffb10, 4) , (stack, 0xfffffffffffffb10, 4)]
[(stack, 0xfffffffffffffb14, 4) INDIRECT (stack, 0xfffffffffffffb14, 4) , (const, 0x5d0, 4), (stack, 0xfffffffffffffb14, 4) INDIRECT (stack, 0xfffffffffffffb14, 4) , (const, 0x5cf, 4), (stack, 0xfffffffffffffb14, 4) MULTIEQUAL (stack, 0xfffffffffffffb14, 4) , (stack, 0xfffffffffffffb14, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x5d0, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x5cf, 4), (stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x5d0, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x5cf, 4), (stack, 0xfffffffffffffb20, 8) MULTIEQUAL (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x5d0, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x5cf, 4), (stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x5d0, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x5cf, 4), (stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb3a, 1) INDIRECT (stack, 0xfffffffffffffb3a, 1) , (const, 0x5d0, 4), (stack, 0xfffffffffffffb3a, 1) INDIRECT (stack, 0xfffffffffffffb3a, 1) , (const, 0x5cf, 4), (stack, 0xfffffffffffffb3a, 1) MULTIEQUAL (stack, 0xfffffffffffffb3a, 1) , (stack, 0xfffffffffffffb3a, 1)]
[(stack, 0xfffffffffffffb3b, 1) INDIRECT (stack, 0xfffffffffffffb3b, 1) , (const, 0x5d0, 4), (stack, 0xfffffffffffffb3b, 1) INDIRECT (stack, 0xfffffffffffffb3b, 1) , (const, 0x5cf, 4), (stack, 0xfffffffffffffb3b, 1) MULTIEQUAL (stack, 0xfffffffffffffb3b, 1) , (stack, 0xfffffffffffffb3b, 1)]
[(stack, 0xfffffffffffffb3c, 4) INDIRECT (stack, 0xfffffffffffffb3c, 4) , (const, 0x5d0, 4), (stack, 0xfffffffffffffb3c, 4) INDIRECT (stack, 0xfffffffffffffb3c, 4) , (const, 0x5cf, 4), (stack, 0xfffffffffffffb3c, 4) MULTIEQUAL (stack, 0xfffffffffffffb3c, 4) , (stack, 0xfffffffffffffb3c, 4)]
[(stack, 0xfffffffffffffb40, 8) INDIRECT (stack, 0xfffffffffffffb40, 8) , (const, 0x5d0, 4), (stack, 0xfffffffffffffb40, 8) INDIRECT (stack, 0xfffffffffffffb40, 8) , (const, 0x5cf, 4), (stack, 0xfffffffffffffb40, 8) MULTIEQUAL (stack, 0xfffffffffffffb40, 8) , (stack, 0xfffffffffffffb40, 8)]
[(stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x5d0, 4), (stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x5cf, 4), (stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x5d0, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x5cf, 4), (stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x5d0, 4), (stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x5cf, 4), (stack, 0xfffffffffffffb58, 8) MULTIEQUAL (stack, 0xfffffffffffffb58, 8) , (stack, 0xfffffffffffffb58, 8)]
[(stack, 0xfffffffffffffb60, 4) INDIRECT (stack, 0xfffffffffffffb60, 4) , (const, 0x5d0, 4), (stack, 0xfffffffffffffb60, 4) INDIRECT (stack, 0xfffffffffffffb60, 4) , (const, 0x5cf, 4), (stack, 0xfffffffffffffb60, 4) MULTIEQUAL (stack, 0xfffffffffffffb60, 4) , (stack, 0xfffffffffffffb60, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x5d0, 4), (stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x5cf, 4), (stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x5d0, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x5cf, 4), (stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x5d0, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x5cf, 4), (stack, 0xfffffffffffffb7c, 4) MULTIEQUAL (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x5d0, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x5cf, 4), (stack, 0xfffffffffffffb80, 4) MULTIEQUAL (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x5d0, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x5cf, 4), (stack, 0xfffffffffffffb84, 4) MULTIEQUAL (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x5d0, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x5cf, 4), (stack, 0xfffffffffffffb88, 4) MULTIEQUAL (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x5d0, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x5cf, 4), (stack, 0xfffffffffffffb8c, 4) MULTIEQUAL (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x5d0, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x5cf, 4), (stack, 0xfffffffffffffb90, 4) MULTIEQUAL (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x5d0, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x5cf, 4), (stack, 0xfffffffffffffb94, 4) MULTIEQUAL (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4)]
[(stack, 0xfffffffffffffb98, 4) INDIRECT (stack, 0xfffffffffffffb98, 4) , (const, 0x5d0, 4), (stack, 0xfffffffffffffb98, 4) INDIRECT (stack, 0xfffffffffffffb98, 4) , (const, 0x5cf, 4), (stack, 0xfffffffffffffb98, 4) MULTIEQUAL (stack, 0xfffffffffffffb98, 4) , (stack, 0xfffffffffffffb98, 4)]
[(stack, 0xfffffffffffffb9c, 4) INDIRECT (stack, 0xfffffffffffffb9c, 4) , (const, 0x5d0, 4), (stack, 0xfffffffffffffb9c, 4) INDIRECT (stack, 0xfffffffffffffb9c, 4) , (const, 0x5cf, 4), (stack, 0xfffffffffffffb9c, 4) MULTIEQUAL (stack, 0xfffffffffffffb9c, 4) , (stack, 0xfffffffffffffb9c, 4)]
[(stack, 0xfffffffffffffba0, 4) INDIRECT (stack, 0xfffffffffffffba0, 4) , (const, 0x5d0, 4), (stack, 0xfffffffffffffba0, 4) INDIRECT (stack, 0xfffffffffffffba0, 4) , (const, 0x5cf, 4), (stack, 0xfffffffffffffba0, 4) MULTIEQUAL (stack, 0xfffffffffffffba0, 4) , (stack, 0xfffffffffffffba0, 4)]
[(stack, 0xfffffffffffffba4, 4) INDIRECT (stack, 0xfffffffffffffba4, 4) , (const, 0x5d0, 4), (stack, 0xfffffffffffffba4, 4) INDIRECT (stack, 0xfffffffffffffba4, 4) , (const, 0x5cf, 4), (stack, 0xfffffffffffffba4, 4) MULTIEQUAL (stack, 0xfffffffffffffba4, 4) , (stack, 0xfffffffffffffba4, 4)]
[(stack, 0xfffffffffffffba8, 16) INDIRECT (stack, 0xfffffffffffffba8, 16) , (const, 0x5d0, 4), (stack, 0xfffffffffffffba8, 16) INDIRECT (stack, 0xfffffffffffffba8, 16) , (const, 0x5cf, 4), (stack, 0xfffffffffffffba8, 16) MULTIEQUAL (stack, 0xfffffffffffffba8, 16) , (stack, 0xfffffffffffffba8, 16)]
[(stack, 0xfffffffffffffbb8, 4) INDIRECT (stack, 0xfffffffffffffbb8, 4) , (const, 0x5d0, 4), (stack, 0xfffffffffffffbb8, 4) INDIRECT (stack, 0xfffffffffffffbb8, 4) , (const, 0x5cf, 4), (stack, 0xfffffffffffffbb8, 4) MULTIEQUAL (stack, 0xfffffffffffffbb8, 4) , (stack, 0xfffffffffffffbb8, 4)]
[(stack, 0xfffffffffffffbbc, 4) INDIRECT (stack, 0xfffffffffffffbbc, 4) , (const, 0x5d0, 4), (stack, 0xfffffffffffffbbc, 4) INDIRECT (stack, 0xfffffffffffffbbc, 4) , (const, 0x5cf, 4), (stack, 0xfffffffffffffbbc, 4) MULTIEQUAL (stack, 0xfffffffffffffbbc, 4) , (stack, 0xfffffffffffffbbc, 4)]
[(stack, 0xfffffffffffffc00, 8) INDIRECT (stack, 0xfffffffffffffc00, 8) , (const, 0x5d0, 4), (stack, 0xfffffffffffffc00, 8) INDIRECT (stack, 0xfffffffffffffc00, 8) , (const, 0x5cf, 4), (stack, 0xfffffffffffffc00, 8) MULTIEQUAL (stack, 0xfffffffffffffc00, 8) , (stack, 0xfffffffffffffc00, 8)]
[(stack, 0xfffffffffffffc08, 8) INDIRECT (stack, 0xfffffffffffffc08, 8) , (const, 0x5d0, 4), (stack, 0xfffffffffffffc08, 8) INDIRECT (stack, 0xfffffffffffffc08, 8) , (const, 0x5cf, 4), (stack, 0xfffffffffffffc08, 8) MULTIEQUAL (stack, 0xfffffffffffffc08, 8) , (stack, 0xfffffffffffffc08, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x5d0, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x5cf, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CALL (ram, 0x210940, 8)]
[ ---  BRANCH (ram, 0x207f91, 1)]
[(unique, 0x3100, 8) PTRADD (register, 0xb8, 8) , (const, 0xfffffffffffffffd, 8) , (const, 0x10, 8)]
[(register, 0x0, 4) INT_ZEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0x100008b0, 8) , (const, 0xa, 8) , (const, 0x1, 8), (unique, 0x100008b0, 8) PTRSUB (unique, 0x100008a8, 8) , (const, 0x2, 8), (unique, 0x100008a8, 8) PTRADD (register, 0xb8, 8) , (const, 0xfffffffffffffffe, 8) , (const, 0x10, 8)]
[ ---  CBRANCH (ram, 0x208300, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (register, 0x0, 4) , (const, 0x8, 4), (register, 0x0, 4) INT_ZEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0x100008b0, 8) , (const, 0xa, 8) , (const, 0x1, 8), (unique, 0x100008b0, 8) PTRSUB (unique, 0x100008a8, 8) , (const, 0x2, 8), (unique, 0x100008a8, 8) PTRADD (register, 0xb8, 8) , (const, 0xfffffffffffffffe, 8) , (const, 0x10, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100012dc, 8) , (unique, 0xbd80, 8), (unique, 0x100012dc, 8) CAST (register, 0xb8, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x100012d4, 8), (unique, 0x100012d4, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb8, 8) , (const, 0xfffffffffffffffd, 8) , (const, 0x10, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x808, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x7fc, 4)]
[(ram, 0x4ee040, 4) INDIRECT (ram, 0x4ee040, 4) , (const, 0x808, 4), (ram, 0x4ee040, 4) INDIRECT (ram, 0x4ee040, 4) , (const, 0x7fc, 4)]
[(ram, 0x4ee044, 4) INDIRECT (ram, 0x4ee044, 4) , (const, 0x808, 4), (ram, 0x4ee044, 4) INDIRECT (ram, 0x4ee044, 4) , (const, 0x7fc, 4)]
[(ram, 0x4ee050, 8) INDIRECT (ram, 0x4ee050, 8) , (const, 0x808, 4), (ram, 0x4ee050, 8) INDIRECT (ram, 0x4ee050, 8) , (const, 0x7fc, 4)]
[(ram, 0x4ee058, 8) INDIRECT (ram, 0x4ee058, 8) , (const, 0x808, 4), (ram, 0x4ee058, 8) INDIRECT (ram, 0x4ee058, 8) , (const, 0x7fc, 4)]
[(ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x808, 4), (ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x7fc, 4)]
[(ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x808, 4), (ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x7fc, 4)]
[(ram, 0x4f0870, 8) INDIRECT (ram, 0x4f0870, 8) , (const, 0x808, 4), (ram, 0x4f0870, 8) INDIRECT (ram, 0x4f0870, 8) , (const, 0x7fc, 4)]
[(ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x808, 4), (ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x7fc, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x808, 4), (ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x7fc, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001304, 8) , (unique, 0xbd80, 8), (unique, 0x10001304, 8) CAST (unique, 0x3a00, 8), (unique, 0x3a00, 8) PTRADD (unique, 0x10000b18, 8) , (unique, 0x100012fc, 8) , (const, 0x1, 8), (unique, 0x100012fc, 8) CAST (unique, 0x10000b10, 8), (unique, 0x10000b18, 8) PTRSUB (register, 0xb8, 8) , (const, 0x2, 8), (unique, 0x10000b10, 8) PTRADD (unique, 0x10000e01, 8) , (register, 0x8, 8) , (const, 0x1, 8), (unique, 0x10000e01, 8) PTRSUB (const, 0x0, 8) , (const, 0xfffffffffffffff6, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) CAST (unique, 0x100012f4, 8), (unique, 0x100012f4, 8) INT_ADD (unique, 0x3880, 8) , (register, 0x8, 8), (unique, 0x3880, 8) INT_ADD (unique, 0x100012e4, 8) , (unique, 0x100012ec, 8), (unique, 0x100012ec, 8) CAST (register, 0xb8, 8), (unique, 0x100012e4, 8) CAST (unique, 0x10000680, 8), (unique, 0x10000680, 8) PTRSUB (const, 0x0, 8) , (const, 0xffffffffffffffc8, 8), (register, 0x8, 8) INT_ZEXT (register, 0x0, 4)]
[(unique, 0x10000fad, 8) COPY (register, 0x30, 8), (register, 0x30, 8) CAST (unique, 0x10001344, 8), (unique, 0x10001344, 8) INT_SUB (unique, 0x10001334, 8) , (unique, 0x1000133c, 8), (unique, 0x1000133c, 8) CAST (register, 0x8, 8), (unique, 0x10001334, 8) CAST (unique, 0x3100, 8), (register, 0x8, 8) CAST (unique, 0x1000132c, 8), (unique, 0x1000132c, 8) INT_SUB (unique, 0x1000131c, 8) , (unique, 0x10001324, 8), (unique, 0x10001324, 8) CAST (register, 0x38, 8), (unique, 0x1000131c, 8) CAST (register, 0xb8, 8), (register, 0x38, 8) CAST (unique, 0x10001314, 8), (unique, 0x10001314, 8) INT_AND (unique, 0x1000130c, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x1000130c, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0x10000b30, 8) , (const, 0x6, 8) , (const, 0x1, 8), (unique, 0x10000b30, 8) PTRSUB (register, 0xb8, 8) , (const, 0x2, 8)]
[(unique, 0x10000fbd, 8) COPY (register, 0x38, 8), (register, 0x38, 8) CAST (unique, 0x10001314, 8), (unique, 0x10001314, 8) INT_AND (unique, 0x1000130c, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x1000130c, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0x10000b30, 8) , (const, 0x6, 8) , (const, 0x1, 8), (unique, 0x10000b30, 8) PTRSUB (register, 0xb8, 8) , (const, 0x2, 8)]
[(register, 0x8, 8) INT_ZEXT (register, 0x0, 4), (register, 0x0, 4) INT_RIGHT (register, 0x8, 4) , (const, 0x3, 4), (register, 0x8, 4) INT_ADD (register, 0x8, 4) , (register, 0x0, 4), (register, 0x8, 4) SUBPIECE (register, 0x8, 8) , (const, 0x0, 4), (register, 0x8, 8) CAST (unique, 0x1000132c, 8), (unique, 0x1000132c, 8) INT_SUB (unique, 0x1000131c, 8) , (unique, 0x10001324, 8), (unique, 0x10001324, 8) CAST (register, 0x38, 8), (unique, 0x1000131c, 8) CAST (register, 0xb8, 8), (register, 0x38, 8) CAST (unique, 0x10001314, 8), (unique, 0x10001314, 8) INT_AND (unique, 0x1000130c, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x1000130c, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0x10000b30, 8) , (const, 0x6, 8) , (const, 0x1, 8), (unique, 0x10000b30, 8) PTRSUB (register, 0xb8, 8) , (const, 0x2, 8)]
[(ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(ram, 0x4f08e8, 4) MULTIEQUAL (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4)]
[(ram, 0x4f0870, 8) MULTIEQUAL (ram, 0x4f0870, 8) , (ram, 0x4f0870, 8)]
[(ram, 0x4ee064, 4) MULTIEQUAL (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4)]
[(ram, 0x4ee060, 4) MULTIEQUAL (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4)]
[(ram, 0x4ee058, 8) MULTIEQUAL (ram, 0x4ee058, 8) , (ram, 0x4ee058, 8)]
[(ram, 0x4ee050, 8) MULTIEQUAL (ram, 0x4ee050, 8) , (ram, 0x4ee050, 8)]
[(ram, 0x4ee044, 4) MULTIEQUAL (ram, 0x4ee044, 4) , (ram, 0x4ee044, 4)]
[(ram, 0x4ee040, 4) MULTIEQUAL (ram, 0x4ee040, 4) , (ram, 0x4ee040, 4)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x38, 8) MULTIEQUAL (unique, 0x10000fbd, 8) , (unique, 0x10000fc5, 8)]
[(register, 0x30, 8) MULTIEQUAL (unique, 0x10000fad, 8) , (unique, 0x10000fb5, 8)]
[ ---  CBRANCH (ram, 0x208330, 1) , (unique, 0xd300, 1), (unique, 0xd300, 1) INT_NOTEQUAL (register, 0x8, 8) , (const, 0x0, 8), (register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x86a, 4)]
[(ram, 0x4ee040, 4) INDIRECT (ram, 0x4ee040, 4) , (const, 0x86a, 4)]
[(ram, 0x4ee044, 4) INDIRECT (ram, 0x4ee044, 4) , (const, 0x86a, 4)]
[(ram, 0x4ee050, 8) INDIRECT (ram, 0x4ee050, 8) , (const, 0x86a, 4)]
[(ram, 0x4ee058, 8) INDIRECT (ram, 0x4ee058, 8) , (const, 0x86a, 4)]
[(ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x86a, 4)]
[(ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x86a, 4)]
[(ram, 0x4f0870, 8) INDIRECT (ram, 0x4f0870, 8) , (const, 0x86a, 4)]
[(ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x86a, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x86a, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x38, 8) , (unique, 0xae00, 8), (unique, 0xae00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10001354, 8), (unique, 0x10001354, 8) CAST (register, 0x30, 8)]
[(unique, 0x10000fb5, 8) COPY (register, 0x30, 8), (register, 0x30, 8) CAST (unique, 0x1000134c, 8), (unique, 0x1000134c, 8) PTRADD (unique, 0x10000b80, 8) , (const, 0x6, 8) , (const, 0x1, 8), (unique, 0x10000b80, 8) PTRSUB (unique, 0x10000b78, 8) , (const, 0x2, 8), (unique, 0x10000b78, 8) PTRADD (register, 0x30, 8) , (unique, 0x10000b68, 8) , (const, 0x10, 8), (unique, 0x10000b68, 8) INT_2COMP (unique, 0xac80, 8), (unique, 0xac80, 8) INT_ZEXT (register, 0x20a, 1)]
[(unique, 0x10000fc5, 8) COPY (register, 0x38, 8), (register, 0x38, 8) PTRADD (register, 0x38, 8) , (unique, 0x10000b50, 8) , (const, 0x8, 8), (unique, 0x10000b50, 8) INT_ADD (unique, 0x10000b48, 8) , (const, 0x1, 8), (unique, 0x10000b48, 8) INT_MULT (unique, 0xb880, 8) , (const, 0xfffffffffffffffe, 8), (unique, 0xb880, 8) INT_ZEXT (register, 0x20a, 1)]
[(register, 0x8, 8) INT_SUB (register, 0x8, 8) , (const, 0x1, 8)]
[ ---  BRANCH (ram, 0x20832d, 1)]
[ ---  CBRANCH (ram, 0x2085fa, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x100003ff, 1) , (const, 0x0, 1), (unique, 0x100003ff, 1) INT_AND (unique, 0xbb00, 1) , (const, 0x4, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001364, 8) , (unique, 0xbc80, 4), (unique, 0x10001364, 8) CAST (register, 0xb8, 8), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x1000135c, 8), (unique, 0x1000135c, 8) CAST (unique, 0x3100, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x7f6, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x7eb, 4)]
[(ram, 0x4ee040, 4) INDIRECT (ram, 0x4ee040, 4) , (const, 0x7f6, 4), (ram, 0x4ee040, 4) INDIRECT (ram, 0x4ee040, 4) , (const, 0x7eb, 4)]
[(ram, 0x4ee044, 4) INDIRECT (ram, 0x4ee044, 4) , (const, 0x7f6, 4), (ram, 0x4ee044, 4) INDIRECT (ram, 0x4ee044, 4) , (const, 0x7eb, 4)]
[(ram, 0x4ee050, 8) INDIRECT (ram, 0x4ee050, 8) , (const, 0x7f6, 4), (ram, 0x4ee050, 8) INDIRECT (ram, 0x4ee050, 8) , (const, 0x7eb, 4)]
[(ram, 0x4ee058, 8) INDIRECT (ram, 0x4ee058, 8) , (const, 0x7f6, 4), (ram, 0x4ee058, 8) INDIRECT (ram, 0x4ee058, 8) , (const, 0x7eb, 4)]
[(ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x7f6, 4), (ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x7eb, 4)]
[(ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x7f6, 4), (ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x7eb, 4)]
[(ram, 0x4f0870, 8) INDIRECT (ram, 0x4f0870, 8) , (const, 0x7f6, 4), (ram, 0x4f0870, 8) INDIRECT (ram, 0x4f0870, 8) , (const, 0x7eb, 4)]
[(ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x7f6, 4), (ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x7eb, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x7f6, 4), (ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x7eb, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000138c, 8) , (unique, 0xbc80, 4), (unique, 0x1000138c, 8) CAST (unique, 0x3a00, 8), (unique, 0x3a00, 8) PTRADD (unique, 0x10000d70, 8) , (unique, 0x10001384, 8) , (const, 0x1, 8), (unique, 0x10001384, 8) CAST (unique, 0x10000d68, 8), (unique, 0x10000d70, 8) PTRSUB (register, 0xb8, 8) , (const, 0x2, 8), (unique, 0x10000d68, 8) PTRADD (unique, 0x10000e09, 8) , (register, 0x0, 8) , (const, 0x1, 8), (unique, 0x10000e09, 8) PTRSUB (const, 0x0, 8) , (const, 0xfffffffffffffffa, 8), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) CAST (unique, 0x1000137c, 8), (unique, 0x1000137c, 8) INT_ADD (unique, 0x3880, 8) , (register, 0x0, 8), (unique, 0x3880, 8) INT_ADD (unique, 0x1000136c, 8) , (unique, 0x10001374, 8), (unique, 0x10001374, 8) CAST (register, 0xb8, 8), (unique, 0x1000136c, 8) CAST (unique, 0x10000688, 8), (unique, 0x10000688, 8) PTRSUB (const, 0x0, 8) , (const, 0xffffffffffffffcc, 8), (register, 0x0, 8) INT_ZEXT (register, 0x0, 4)]
[ ---  BRANCH (ram, 0x20810a, 1)]
[ ---  CBRANCH (ram, 0x2084b8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) INT_ZEXT (unique, 0xbb00, 1)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x7d5, 4)]
[(ram, 0x4ee040, 4) INDIRECT (ram, 0x4ee040, 4) , (const, 0x7d5, 4)]
[(ram, 0x4ee044, 4) INDIRECT (ram, 0x4ee044, 4) , (const, 0x7d5, 4)]
[(ram, 0x4ee050, 8) INDIRECT (ram, 0x4ee050, 8) , (const, 0x7d5, 4)]
[(ram, 0x4ee058, 8) INDIRECT (ram, 0x4ee058, 8) , (const, 0x7d5, 4)]
[(ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x7d5, 4)]
[(ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x7d5, 4)]
[(ram, 0x4f0870, 8) INDIRECT (ram, 0x4f0870, 8) , (const, 0x7d5, 4)]
[(ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x7d5, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x7d5, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000139c, 8) , (unique, 0xbb00, 1), (unique, 0x1000139c, 8) CAST (unique, 0x10000c78, 8), (unique, 0x10000c78, 8) PTRSUB (register, 0xb8, 8) , (const, 0x0, 8), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x10001394, 8), (unique, 0x10001394, 8) CAST (unique, 0x10000c70, 8), (unique, 0x10000c70, 8) PTRSUB (unique, 0x3100, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x20810a, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x58800, 1) , (const, 0x0, 1), (unique, 0x58800, 1) INT_AND (unique, 0xbb00, 1) , (const, 0x2, 1)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x7e3, 4)]
[(ram, 0x4ee040, 4) INDIRECT (ram, 0x4ee040, 4) , (const, 0x7e3, 4)]
[(ram, 0x4ee044, 4) INDIRECT (ram, 0x4ee044, 4) , (const, 0x7e3, 4)]
[(ram, 0x4ee050, 8) INDIRECT (ram, 0x4ee050, 8) , (const, 0x7e3, 4)]
[(ram, 0x4ee058, 8) INDIRECT (ram, 0x4ee058, 8) , (const, 0x7e3, 4)]
[(ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x7e3, 4)]
[(ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x7e3, 4)]
[(ram, 0x4f0870, 8) INDIRECT (ram, 0x4f0870, 8) , (const, 0x7e3, 4)]
[(ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x7e3, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x7e3, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100013bc, 8) , (unique, 0xbc00, 2), (unique, 0x100013bc, 8) CAST (unique, 0x3a00, 8), (unique, 0x3a00, 8) PTRADD (unique, 0x10000c90, 8) , (unique, 0x10000c88, 8) , (const, 0x1, 8), (unique, 0x10000c90, 8) PTRSUB (register, 0xb8, 8) , (const, 0x2, 8), (unique, 0x10000c88, 8) INT_SUB (register, 0x0, 8) , (const, 0x4, 8), (unique, 0xbc00, 2) LOAD (const, 0x1b1, 4) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) CAST (unique, 0x100013b4, 8), (unique, 0x100013b4, 8) INT_ADD (unique, 0x3880, 8) , (register, 0x0, 8), (unique, 0x3880, 8) INT_ADD (unique, 0x100013a4, 8) , (unique, 0x100013ac, 8), (unique, 0x100013ac, 8) CAST (register, 0xb8, 8), (unique, 0x100013a4, 8) CAST (unique, 0x10000690, 8), (unique, 0x10000690, 8) PTRSUB (const, 0x0, 8) , (const, 0xffffffffffffffce, 8), (register, 0x0, 8) INT_ZEXT (register, 0x0, 4)]
[ ---  BRANCH (ram, 0x20810a, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0xbb00, 1), (unique, 0x3100, 8) PTRADD (unique, 0x100008f8, 8) , (const, 0xa, 8) , (const, 0x1, 8), (unique, 0x100008f8, 8) PTRSUB (unique, 0x100008f0, 8) , (const, 0x2, 8), (unique, 0x100008f0, 8) PTRADD (register, 0xb8, 8) , (const, 0x1, 8) , (const, 0x10, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0xbb00, 1), (unique, 0x3100, 8) PTRADD (unique, 0x10000918, 8) , (const, 0xb, 8) , (const, 0x1, 8), (unique, 0x10000918, 8) PTRSUB (unique, 0x10000910, 8) , (const, 0x2, 8), (unique, 0x10000910, 8) PTRADD (register, 0xb8, 8) , (const, 0x1, 8) , (const, 0x10, 8), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0x100008d8, 8) , (const, 0xb, 8) , (const, 0x1, 8), (unique, 0x100008d8, 8) PTRSUB (unique, 0x100008d0, 8) , (const, 0x2, 8), (unique, 0x100008d0, 8) PTRADD (register, 0xb8, 8) , (const, 0xfffffffffffffffe, 8) , (const, 0x10, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0xbb00, 1), (unique, 0x3100, 8) PTRADD (unique, 0x10000958, 8) , (const, 0xc, 8) , (const, 0x1, 8), (unique, 0x10000958, 8) PTRSUB (unique, 0x10000950, 8) , (const, 0x2, 8), (unique, 0x10000950, 8) PTRADD (register, 0xb8, 8) , (const, 0x1, 8) , (const, 0x10, 8), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0x10000938, 8) , (const, 0xc, 8) , (const, 0x1, 8), (unique, 0x10000938, 8) PTRSUB (unique, 0x10000930, 8) , (const, 0x2, 8), (unique, 0x10000930, 8) PTRADD (register, 0xb8, 8) , (const, 0xfffffffffffffffe, 8) , (const, 0x10, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0xbb00, 1), (unique, 0x3100, 8) PTRADD (unique, 0x10000998, 8) , (const, 0xd, 8) , (const, 0x1, 8), (unique, 0x10000998, 8) PTRSUB (unique, 0x10000990, 8) , (const, 0x2, 8), (unique, 0x10000990, 8) PTRADD (register, 0xb8, 8) , (const, 0x1, 8) , (const, 0x10, 8), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0x10000978, 8) , (const, 0xd, 8) , (const, 0x1, 8), (unique, 0x10000978, 8) PTRSUB (unique, 0x10000970, 8) , (const, 0x2, 8), (unique, 0x10000970, 8) PTRADD (register, 0xb8, 8) , (const, 0xfffffffffffffffe, 8) , (const, 0x10, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x7c6, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x7bf, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x7b8, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x7b1, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x7ae, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4ee040, 4) INDIRECT (ram, 0x4ee040, 4) , (const, 0x7c6, 4), (ram, 0x4ee040, 4) INDIRECT (ram, 0x4ee040, 4) , (const, 0x7bf, 4), (ram, 0x4ee040, 4) INDIRECT (ram, 0x4ee040, 4) , (const, 0x7b8, 4), (ram, 0x4ee040, 4) INDIRECT (ram, 0x4ee040, 4) , (const, 0x7b1, 4), (ram, 0x4ee040, 4) INDIRECT (ram, 0x4ee040, 4) , (const, 0x7ae, 4), (ram, 0x4ee040, 4) MULTIEQUAL (ram, 0x4ee040, 4) , (ram, 0x4ee040, 4) , (ram, 0x4ee040, 4) , (ram, 0x4ee040, 4) , (ram, 0x4ee040, 4)]
[(ram, 0x4ee044, 4) INDIRECT (ram, 0x4ee044, 4) , (const, 0x7c6, 4), (ram, 0x4ee044, 4) INDIRECT (ram, 0x4ee044, 4) , (const, 0x7bf, 4), (ram, 0x4ee044, 4) INDIRECT (ram, 0x4ee044, 4) , (const, 0x7b8, 4), (ram, 0x4ee044, 4) INDIRECT (ram, 0x4ee044, 4) , (const, 0x7b1, 4), (ram, 0x4ee044, 4) INDIRECT (ram, 0x4ee044, 4) , (const, 0x7ae, 4), (ram, 0x4ee044, 4) MULTIEQUAL (ram, 0x4ee044, 4) , (ram, 0x4ee044, 4) , (ram, 0x4ee044, 4) , (ram, 0x4ee044, 4) , (ram, 0x4ee044, 4)]
[(ram, 0x4ee050, 8) INDIRECT (ram, 0x4ee050, 8) , (const, 0x7c6, 4), (ram, 0x4ee050, 8) INDIRECT (ram, 0x4ee050, 8) , (const, 0x7bf, 4), (ram, 0x4ee050, 8) INDIRECT (ram, 0x4ee050, 8) , (const, 0x7b8, 4), (ram, 0x4ee050, 8) INDIRECT (ram, 0x4ee050, 8) , (const, 0x7b1, 4), (ram, 0x4ee050, 8) INDIRECT (ram, 0x4ee050, 8) , (const, 0x7ae, 4), (ram, 0x4ee050, 8) MULTIEQUAL (ram, 0x4ee050, 8) , (ram, 0x4ee050, 8) , (ram, 0x4ee050, 8) , (ram, 0x4ee050, 8) , (ram, 0x4ee050, 8)]
[(ram, 0x4ee058, 8) INDIRECT (ram, 0x4ee058, 8) , (const, 0x7c6, 4), (ram, 0x4ee058, 8) INDIRECT (ram, 0x4ee058, 8) , (const, 0x7bf, 4), (ram, 0x4ee058, 8) INDIRECT (ram, 0x4ee058, 8) , (const, 0x7b8, 4), (ram, 0x4ee058, 8) INDIRECT (ram, 0x4ee058, 8) , (const, 0x7b1, 4), (ram, 0x4ee058, 8) INDIRECT (ram, 0x4ee058, 8) , (const, 0x7ae, 4), (ram, 0x4ee058, 8) MULTIEQUAL (ram, 0x4ee058, 8) , (ram, 0x4ee058, 8) , (ram, 0x4ee058, 8) , (ram, 0x4ee058, 8) , (ram, 0x4ee058, 8)]
[(ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x7c6, 4), (ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x7bf, 4), (ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x7b8, 4), (ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x7b1, 4), (ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x7ae, 4), (ram, 0x4ee060, 4) MULTIEQUAL (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4)]
[(ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x7c6, 4), (ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x7bf, 4), (ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x7b8, 4), (ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x7b1, 4), (ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x7ae, 4), (ram, 0x4ee064, 4) MULTIEQUAL (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4)]
[(ram, 0x4f0870, 8) INDIRECT (ram, 0x4f0870, 8) , (const, 0x7c6, 4), (ram, 0x4f0870, 8) INDIRECT (ram, 0x4f0870, 8) , (const, 0x7bf, 4), (ram, 0x4f0870, 8) INDIRECT (ram, 0x4f0870, 8) , (const, 0x7b8, 4), (ram, 0x4f0870, 8) INDIRECT (ram, 0x4f0870, 8) , (const, 0x7b1, 4), (ram, 0x4f0870, 8) INDIRECT (ram, 0x4f0870, 8) , (const, 0x7ae, 4), (ram, 0x4f0870, 8) MULTIEQUAL (ram, 0x4f0870, 8) , (ram, 0x4f0870, 8) , (ram, 0x4f0870, 8) , (ram, 0x4f0870, 8) , (ram, 0x4f0870, 8)]
[(ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x7c6, 4), (ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x7bf, 4), (ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x7b8, 4), (ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x7b1, 4), (ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x7ae, 4), (ram, 0x4f08e8, 4) MULTIEQUAL (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x7c6, 4), (ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x7bf, 4), (ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x7b8, 4), (ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x7b1, 4), (ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x7ae, 4), (ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100013cc, 8) , (unique, 0xbc80, 4), (unique, 0x100013cc, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb8, 8) , (const, 0x2, 8) , (const, 0x10, 8), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100013c4, 8), (unique, 0x100013c4, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb8, 8) , (const, 0xffffffffffffffff, 8) , (const, 0x10, 8)]
[(unique, 0x1000102d, 8) COPY (register, 0xb0, 8)]
[ ---  BRANCH (ram, 0x207f06, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffc08, 8) MULTIEQUAL (stack, 0xfffffffffffffc08, 8) , (stack, 0xfffffffffffffc08, 8) , (stack, 0xfffffffffffffc08, 8) , (stack, 0xfffffffffffffc08, 8) , (stack, 0xfffffffffffffc08, 8)]
[(stack, 0xfffffffffffffc00, 8) MULTIEQUAL (stack, 0xfffffffffffffc00, 8) , (stack, 0xfffffffffffffc00, 8) , (stack, 0xfffffffffffffc00, 8) , (stack, 0xfffffffffffffc00, 8) , (stack, 0xfffffffffffffc00, 8)]
[(stack, 0xfffffffffffffbbc, 4) MULTIEQUAL (stack, 0xfffffffffffffbbc, 4) , (stack, 0xfffffffffffffbbc, 4) , (stack, 0xfffffffffffffbbc, 4) , (stack, 0xfffffffffffffbbc, 4) , (stack, 0xfffffffffffffbbc, 4)]
[(stack, 0xfffffffffffffbb8, 4) MULTIEQUAL (stack, 0xfffffffffffffbb8, 4) , (stack, 0xfffffffffffffbb8, 4) , (stack, 0xfffffffffffffbb8, 4) , (stack, 0xfffffffffffffbb8, 4) , (stack, 0xfffffffffffffbb8, 4)]
[(stack, 0xfffffffffffffba8, 16) MULTIEQUAL (stack, 0xfffffffffffffba8, 16) , (stack, 0xfffffffffffffba8, 16) , (stack, 0xfffffffffffffba8, 16) , (stack, 0xfffffffffffffba8, 16) , (stack, 0xfffffffffffffba8, 16)]
[(stack, 0xfffffffffffffba4, 4) MULTIEQUAL (stack, 0xfffffffffffffba4, 4) , (stack, 0xfffffffffffffba4, 4) , (stack, 0xfffffffffffffba4, 4) , (stack, 0xfffffffffffffba4, 4) , (stack, 0xfffffffffffffba4, 4)]
[(stack, 0xfffffffffffffba0, 4) MULTIEQUAL (stack, 0xfffffffffffffba0, 4) , (stack, 0xfffffffffffffba0, 4) , (stack, 0xfffffffffffffba0, 4) , (stack, 0xfffffffffffffba0, 4) , (stack, 0xfffffffffffffba0, 4)]
[(stack, 0xfffffffffffffb9c, 4) MULTIEQUAL (stack, 0xfffffffffffffb9c, 4) , (stack, 0xfffffffffffffb9c, 4) , (stack, 0xfffffffffffffb9c, 4) , (stack, 0xfffffffffffffb9c, 4) , (stack, 0xfffffffffffffb9c, 4)]
[(stack, 0xfffffffffffffb98, 4) MULTIEQUAL (stack, 0xfffffffffffffb98, 4) , (stack, 0xfffffffffffffb98, 4) , (stack, 0xfffffffffffffb98, 4) , (stack, 0xfffffffffffffb98, 4) , (stack, 0xfffffffffffffb98, 4)]
[(stack, 0xfffffffffffffb94, 4) MULTIEQUAL (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4)]
[(stack, 0xfffffffffffffb90, 4) MULTIEQUAL (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4)]
[(stack, 0xfffffffffffffb8c, 4) MULTIEQUAL (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4)]
[(stack, 0xfffffffffffffb88, 4) MULTIEQUAL (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4)]
[(stack, 0xfffffffffffffb84, 4) MULTIEQUAL (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4)]
[(stack, 0xfffffffffffffb80, 4) MULTIEQUAL (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4)]
[(stack, 0xfffffffffffffb7c, 4) MULTIEQUAL (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb60, 4) MULTIEQUAL (stack, 0xfffffffffffffb60, 4) , (stack, 0xfffffffffffffb60, 4) , (stack, 0xfffffffffffffb60, 4) , (stack, 0xfffffffffffffb60, 4) , (stack, 0xfffffffffffffb60, 4)]
[(stack, 0xfffffffffffffb58, 8) MULTIEQUAL (stack, 0xfffffffffffffb58, 8) , (stack, 0xfffffffffffffb58, 8) , (stack, 0xfffffffffffffb58, 8) , (stack, 0xfffffffffffffb58, 8) , (stack, 0xfffffffffffffb58, 8)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb40, 8) MULTIEQUAL (stack, 0xfffffffffffffb40, 8) , (stack, 0xfffffffffffffb40, 8) , (stack, 0xfffffffffffffb40, 8) , (stack, 0xfffffffffffffb40, 8) , (stack, 0xfffffffffffffb40, 8)]
[(stack, 0xfffffffffffffb3c, 4) MULTIEQUAL (stack, 0xfffffffffffffb3c, 4) , (stack, 0xfffffffffffffb3c, 4) , (stack, 0xfffffffffffffb3c, 4) , (stack, 0xfffffffffffffb3c, 4) , (stack, 0xfffffffffffffb3c, 4)]
[(stack, 0xfffffffffffffb3b, 1) MULTIEQUAL (stack, 0xfffffffffffffb3b, 1) , (stack, 0xfffffffffffffb3b, 1) , (stack, 0xfffffffffffffb3b, 1) , (stack, 0xfffffffffffffb3b, 1) , (stack, 0xfffffffffffffb3b, 1)]
[(stack, 0xfffffffffffffb3a, 1) MULTIEQUAL (stack, 0xfffffffffffffb3a, 1) , (stack, 0xfffffffffffffb3a, 1) , (stack, 0xfffffffffffffb3a, 1) , (stack, 0xfffffffffffffb3a, 1) , (stack, 0xfffffffffffffb3a, 1)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb20, 8) MULTIEQUAL (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb14, 4) MULTIEQUAL (stack, 0xfffffffffffffb14, 4) , (stack, 0xfffffffffffffb14, 4) , (stack, 0xfffffffffffffb14, 4) , (stack, 0xfffffffffffffb14, 4) , (stack, 0xfffffffffffffb14, 4)]
[(stack, 0xfffffffffffffb10, 4) MULTIEQUAL (stack, 0xfffffffffffffb10, 4) , (stack, 0xfffffffffffffb10, 4) , (stack, 0xfffffffffffffb10, 4) , (stack, 0xfffffffffffffb10, 4) , (stack, 0xfffffffffffffb10, 4)]
[(stack, 0xfffffffffffffb0f, 1) MULTIEQUAL (stack, 0xfffffffffffffb0f, 1) , (stack, 0xfffffffffffffb0f, 1) , (stack, 0xfffffffffffffb0f, 1) , (stack, 0xfffffffffffffb0f, 1) , (stack, 0xfffffffffffffb0f, 1)]
[(stack, 0xfffffffffffffb08, 4) MULTIEQUAL (stack, 0xfffffffffffffb08, 4) , (stack, 0xfffffffffffffb08, 4) , (stack, 0xfffffffffffffb08, 4) , (stack, 0xfffffffffffffb08, 4) , (stack, 0xfffffffffffffb08, 4)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae4, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[(stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffad8, 8) MULTIEQUAL (stack, 0xfffffffffffffad8, 8) , (stack, 0xfffffffffffffad8, 8) , (stack, 0xfffffffffffffad8, 8) , (stack, 0xfffffffffffffad8, 8) , (stack, 0xfffffffffffffad8, 8)]
[(stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffac8, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffac4, 4) MULTIEQUAL (stack, 0xfffffffffffffac4, 4) , (stack, 0xfffffffffffffac4, 4) , (stack, 0xfffffffffffffac4, 4) , (stack, 0xfffffffffffffac4, 4) , (stack, 0xfffffffffffffac4, 4)]
[(ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(ram, 0x4f08e8, 4) MULTIEQUAL (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4)]
[(ram, 0x4f0870, 8) MULTIEQUAL (ram, 0x4f0870, 8) , (ram, 0x4f0870, 8) , (ram, 0x4f0870, 8) , (ram, 0x4f0870, 8) , (ram, 0x4f0870, 8)]
[(ram, 0x4ee064, 4) MULTIEQUAL (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4)]
[(ram, 0x4ee060, 4) MULTIEQUAL (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4)]
[(ram, 0x4ee058, 8) MULTIEQUAL (ram, 0x4ee058, 8) , (ram, 0x4ee058, 8) , (ram, 0x4ee058, 8) , (ram, 0x4ee058, 8) , (ram, 0x4ee058, 8)]
[(ram, 0x4ee050, 8) MULTIEQUAL (ram, 0x4ee050, 8) , (ram, 0x4ee050, 8) , (ram, 0x4ee050, 8) , (ram, 0x4ee050, 8) , (ram, 0x4ee050, 8)]
[(ram, 0x4ee044, 4) MULTIEQUAL (ram, 0x4ee044, 4) , (ram, 0x4ee044, 4) , (ram, 0x4ee044, 4) , (ram, 0x4ee044, 4) , (ram, 0x4ee044, 4)]
[(ram, 0x4ee040, 4) MULTIEQUAL (ram, 0x4ee040, 4) , (ram, 0x4ee040, 4) , (ram, 0x4ee040, 4) , (ram, 0x4ee040, 4) , (ram, 0x4ee040, 4)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x20a, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1) , (register, 0x20a, 1) , (register, 0x20a, 1) , (register, 0x20a, 1)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb8, 8) MULTIEQUAL (register, 0xb8, 8) , (register, 0xb8, 8) , (register, 0xb8, 8) , (register, 0xb8, 8) , (register, 0xb8, 8)]
[(register, 0xa8, 4) MULTIEQUAL (register, 0xa8, 4) , (register, 0xa8, 4) , (register, 0xa8, 4) , (register, 0xa8, 4) , (register, 0xa8, 4)]
[(register, 0xa0, 4) MULTIEQUAL (register, 0xa0, 4) , (register, 0xa0, 4) , (register, 0xa0, 4) , (register, 0xa0, 4) , (register, 0xa0, 4)]
[(register, 0x18, 8) MULTIEQUAL (register, 0x18, 8) , (register, 0x18, 8) , (register, 0x18, 8) , (register, 0x18, 8) , (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x207f2c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0xb0, 8) , (const, 0x20, 8), (register, 0xb0, 8) MULTIEQUAL (unique, 0x1000100d, 8) , (unique, 0x10001015, 8) , (unique, 0x10001015, 8) , (unique, 0x10001015, 8) , (unique, 0x1000102d, 8)]
[ ---  CBRANCH (ram, 0x20880a, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xfffffffffffffb30, 8) , (const, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100013d4, 8) , (const, 0x208829, 8), (unique, 0x100013d4, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(stack, 0xfffffffffffffac4, 4) INDIRECT (stack, 0xfffffffffffffac4, 4) , (const, 0x5ba, 4), (stack, 0xfffffffffffffac4, 4) INDIRECT (stack, 0xfffffffffffffac4, 4) , (const, 0x5b9, 4)]
[(stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x5ba, 4), (stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x5b9, 4)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x5ba, 4), (stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x5b9, 4)]
[(stack, 0xfffffffffffffad8, 8) INDIRECT (stack, 0xfffffffffffffad8, 8) , (const, 0x5ba, 4), (stack, 0xfffffffffffffad8, 8) INDIRECT (stack, 0xfffffffffffffad8, 8) , (const, 0x5b9, 4)]
[(stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x5ba, 4), (stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x5b9, 4)]
[(stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x5ba, 4), (stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x5b9, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x5ba, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x5b9, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x5ba, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x5b9, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x5ba, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x5b9, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x5ba, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x5b9, 4)]
[(stack, 0xfffffffffffffb08, 4) INDIRECT (stack, 0xfffffffffffffb08, 4) , (const, 0x5ba, 4), (stack, 0xfffffffffffffb08, 4) INDIRECT (stack, 0xfffffffffffffb08, 4) , (const, 0x5b9, 4)]
[(stack, 0xfffffffffffffb0f, 1) INDIRECT (stack, 0xfffffffffffffb0f, 1) , (const, 0x5ba, 4), (stack, 0xfffffffffffffb0f, 1) INDIRECT (stack, 0xfffffffffffffb0f, 1) , (const, 0x5b9, 4)]
[(stack, 0xfffffffffffffb10, 4) INDIRECT (stack, 0xfffffffffffffb10, 4) , (const, 0x5ba, 4), (stack, 0xfffffffffffffb10, 4) INDIRECT (stack, 0xfffffffffffffb10, 4) , (const, 0x5b9, 4)]
[(stack, 0xfffffffffffffb14, 4) INDIRECT (stack, 0xfffffffffffffb14, 4) , (const, 0x5ba, 4), (stack, 0xfffffffffffffb14, 4) INDIRECT (stack, 0xfffffffffffffb14, 4) , (const, 0x5b9, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x5ba, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x5b9, 4)]
[(stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x5ba, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x5b9, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x5ba, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x5b9, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x5ba, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x5b9, 4)]
[(stack, 0xfffffffffffffb3a, 1) INDIRECT (stack, 0xfffffffffffffb3a, 1) , (const, 0x5ba, 4), (stack, 0xfffffffffffffb3a, 1) INDIRECT (stack, 0xfffffffffffffb3a, 1) , (const, 0x5b9, 4)]
[(stack, 0xfffffffffffffb3b, 1) INDIRECT (stack, 0xfffffffffffffb3b, 1) , (const, 0x5ba, 4), (stack, 0xfffffffffffffb3b, 1) INDIRECT (stack, 0xfffffffffffffb3b, 1) , (const, 0x5b9, 4)]
[(stack, 0xfffffffffffffb3c, 4) INDIRECT (stack, 0xfffffffffffffb3c, 4) , (const, 0x5ba, 4), (stack, 0xfffffffffffffb3c, 4) INDIRECT (stack, 0xfffffffffffffb3c, 4) , (const, 0x5b9, 4)]
[(stack, 0xfffffffffffffb40, 8) INDIRECT (stack, 0xfffffffffffffb40, 8) , (const, 0x5ba, 4), (stack, 0xfffffffffffffb40, 8) INDIRECT (stack, 0xfffffffffffffb40, 8) , (const, 0x5b9, 4)]
[(stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x5ba, 4), (stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x5b9, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x5ba, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x5b9, 4)]
[(stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x5ba, 4), (stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x5b9, 4)]
[(stack, 0xfffffffffffffb60, 4) INDIRECT (stack, 0xfffffffffffffb60, 4) , (const, 0x5ba, 4), (stack, 0xfffffffffffffb60, 4) INDIRECT (stack, 0xfffffffffffffb60, 4) , (const, 0x5b9, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x5ba, 4), (stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x5b9, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x5ba, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x5b9, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x5ba, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x5b9, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x5ba, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x5b9, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x5ba, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x5b9, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x5ba, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x5b9, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x5ba, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x5b9, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x5ba, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x5b9, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x5ba, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x5b9, 4)]
[(stack, 0xfffffffffffffb98, 4) INDIRECT (stack, 0xfffffffffffffb98, 4) , (const, 0x5ba, 4), (stack, 0xfffffffffffffb98, 4) INDIRECT (stack, 0xfffffffffffffb98, 4) , (const, 0x5b9, 4)]
[(stack, 0xfffffffffffffb9c, 4) INDIRECT (stack, 0xfffffffffffffb9c, 4) , (const, 0x5ba, 4), (stack, 0xfffffffffffffb9c, 4) INDIRECT (stack, 0xfffffffffffffb9c, 4) , (const, 0x5b9, 4)]
[(stack, 0xfffffffffffffba0, 4) INDIRECT (stack, 0xfffffffffffffba0, 4) , (const, 0x5ba, 4), (stack, 0xfffffffffffffba0, 4) INDIRECT (stack, 0xfffffffffffffba0, 4) , (const, 0x5b9, 4)]
[(stack, 0xfffffffffffffba4, 4) INDIRECT (stack, 0xfffffffffffffba4, 4) , (const, 0x5ba, 4), (stack, 0xfffffffffffffba4, 4) INDIRECT (stack, 0xfffffffffffffba4, 4) , (const, 0x5b9, 4)]
[(stack, 0xfffffffffffffba8, 16) INDIRECT (stack, 0xfffffffffffffba8, 16) , (const, 0x5ba, 4), (stack, 0xfffffffffffffba8, 16) INDIRECT (stack, 0xfffffffffffffba8, 16) , (const, 0x5b9, 4)]
[(stack, 0xfffffffffffffbb8, 4) INDIRECT (stack, 0xfffffffffffffbb8, 4) , (const, 0x5ba, 4), (stack, 0xfffffffffffffbb8, 4) INDIRECT (stack, 0xfffffffffffffbb8, 4) , (const, 0x5b9, 4)]
[(stack, 0xfffffffffffffbbc, 4) INDIRECT (stack, 0xfffffffffffffbbc, 4) , (const, 0x5ba, 4), (stack, 0xfffffffffffffbbc, 4) INDIRECT (stack, 0xfffffffffffffbbc, 4) , (const, 0x5b9, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x5ba, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x5b9, 4)]
[ ---  CALL (ram, 0x1303d0, 8) , (unique, 0x10000638, 8) , (unique, 0x10000640, 8) , (const, 0x9cb, 4) , (unique, 0x10000658, 8), (unique, 0x10000658, 8) COPY (const, 0x2b9ba0, 8), (unique, 0x10000640, 8) COPY (const, 0x2b9a08, 8), (unique, 0x10000638, 8) COPY (const, 0x2b56fc, 8)]
[(ram, 0x4eae68, 8) COPY (ram, 0x4eae68, 8), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x5ba, 4)]
[(ram, 0x4ee040, 4) COPY (ram, 0x4ee040, 4), (ram, 0x4ee040, 4) INDIRECT (ram, 0x4ee040, 4) , (const, 0x5ba, 4)]
[(ram, 0x4ee044, 4) COPY (ram, 0x4ee044, 4), (ram, 0x4ee044, 4) INDIRECT (ram, 0x4ee044, 4) , (const, 0x5ba, 4)]
[(ram, 0x4ee050, 8) COPY (ram, 0x4ee050, 8), (ram, 0x4ee050, 8) INDIRECT (ram, 0x4ee050, 8) , (const, 0x5ba, 4)]
[(ram, 0x4ee058, 8) COPY (ram, 0x4ee058, 8), (ram, 0x4ee058, 8) INDIRECT (ram, 0x4ee058, 8) , (const, 0x5ba, 4)]
[(ram, 0x4ee060, 4) COPY (ram, 0x4ee060, 4), (ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x5ba, 4)]
[(ram, 0x4ee064, 4) COPY (ram, 0x4ee064, 4), (ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x5ba, 4)]
[(ram, 0x4f0870, 8) COPY (ram, 0x4f0870, 8), (ram, 0x4f0870, 8) INDIRECT (ram, 0x4f0870, 8) , (const, 0x5ba, 4)]
[(ram, 0x4f08e8, 4) COPY (ram, 0x4f08e8, 4), (ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x5ba, 4)]
[(ram, 0x4f08f8, 4) COPY (ram, 0x4f08f8, 4), (ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x5ba, 4)]
[ ---  RETURN (const, 0x1, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x376, 4)]
[(ram, 0x4ee040, 4) INDIRECT (ram, 0x4ee040, 4) , (const, 0x376, 4)]
[(ram, 0x4ee044, 4) INDIRECT (ram, 0x4ee044, 4) , (const, 0x376, 4)]
[(ram, 0x4ee050, 8) INDIRECT (ram, 0x4ee050, 8) , (const, 0x376, 4)]
[(ram, 0x4ee058, 8) INDIRECT (ram, 0x4ee058, 8) , (const, 0x376, 4)]
[(ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x376, 4)]
[(ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x376, 4)]
[(ram, 0x4f0870, 8) INDIRECT (ram, 0x4f0870, 8) , (const, 0x376, 4)]
[(ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x376, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x376, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (const, 0x0, 8), (unique, 0x3100, 8) PTRSUB (register, 0xb0, 8) , (const, 0x20, 8)]
[(stack, 0xfffffffffffffb30, 8) COPY (unique, 0xbd80, 8)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(ram, 0x4f08e8, 4) MULTIEQUAL (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4)]
[(ram, 0x4f0870, 8) MULTIEQUAL (ram, 0x4f0870, 8) , (ram, 0x4f0870, 8)]
[(ram, 0x4ee064, 4) MULTIEQUAL (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4)]
[(ram, 0x4ee060, 4) MULTIEQUAL (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4)]
[(ram, 0x4ee058, 8) MULTIEQUAL (ram, 0x4ee058, 8) , (ram, 0x4ee058, 8)]
[(ram, 0x4ee050, 8) MULTIEQUAL (ram, 0x4ee050, 8) , (ram, 0x4ee050, 8)]
[(ram, 0x4ee044, 4) MULTIEQUAL (ram, 0x4ee044, 4) , (ram, 0x4ee044, 4)]
[(ram, 0x4ee040, 4) MULTIEQUAL (ram, 0x4ee040, 4) , (ram, 0x4ee040, 4)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x18, 8) INT_ADD (register, 0x18, 8) , (const, 0x1, 8)]
[(register, 0xb8, 8) PTRADD (register, 0xb8, 8) , (const, 0x3, 8) , (const, 0x10, 8)]
[ ---  CBRANCH (ram, 0x2083f0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0xb0, 8) , (const, 0x28, 8)]
[ ---  CBRANCH (ram, 0x2083fe, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xa0, 4) , (const, 0xffffffff, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100013dc, 8) , (const, 0x2083fe, 8), (unique, 0x100013dc, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x3a9, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x3a9, 4)]
[(ram, 0x4ee040, 4) INDIRECT (ram, 0x4ee040, 4) , (const, 0x3a9, 4)]
[(ram, 0x4ee044, 4) INDIRECT (ram, 0x4ee044, 4) , (const, 0x3a9, 4)]
[(ram, 0x4ee050, 8) INDIRECT (ram, 0x4ee050, 8) , (const, 0x3a9, 4)]
[(ram, 0x4ee058, 8) INDIRECT (ram, 0x4ee058, 8) , (const, 0x3a9, 4)]
[(ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x3a9, 4)]
[(ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x3a9, 4)]
[(ram, 0x4f0870, 8) INDIRECT (ram, 0x4f0870, 8) , (const, 0x3a9, 4)]
[(ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x3a9, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x3a9, 4)]
[(stack, 0xfffffffffffffac4, 4) INDIRECT (stack, 0xfffffffffffffac4, 4) , (const, 0x3a9, 4), (stack, 0xfffffffffffffac4, 4) INDIRECT (stack, 0xfffffffffffffac4, 4) , (const, 0x3a8, 4)]
[(stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x3a9, 4), (stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x3a8, 4)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x3a9, 4), (stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x3a8, 4)]
[(stack, 0xfffffffffffffad8, 8) INDIRECT (stack, 0xfffffffffffffad8, 8) , (const, 0x3a9, 4), (stack, 0xfffffffffffffad8, 8) INDIRECT (stack, 0xfffffffffffffad8, 8) , (const, 0x3a8, 4)]
[(stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x3a9, 4), (stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x3a8, 4)]
[(stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x3a9, 4), (stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x3a8, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x3a9, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x3a8, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x3a9, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x3a8, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x3a9, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x3a8, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x3a9, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x3a8, 4)]
[(stack, 0xfffffffffffffb08, 4) INDIRECT (stack, 0xfffffffffffffb08, 4) , (const, 0x3a9, 4), (stack, 0xfffffffffffffb08, 4) INDIRECT (stack, 0xfffffffffffffb08, 4) , (const, 0x3a8, 4)]
[(stack, 0xfffffffffffffb0f, 1) INDIRECT (stack, 0xfffffffffffffb0f, 1) , (const, 0x3a9, 4), (stack, 0xfffffffffffffb0f, 1) INDIRECT (stack, 0xfffffffffffffb0f, 1) , (const, 0x3a8, 4)]
[(stack, 0xfffffffffffffb10, 4) INDIRECT (stack, 0xfffffffffffffb10, 4) , (const, 0x3a9, 4), (stack, 0xfffffffffffffb10, 4) INDIRECT (stack, 0xfffffffffffffb10, 4) , (const, 0x3a8, 4)]
[(stack, 0xfffffffffffffb14, 4) INDIRECT (stack, 0xfffffffffffffb14, 4) , (const, 0x3a9, 4), (stack, 0xfffffffffffffb14, 4) INDIRECT (stack, 0xfffffffffffffb14, 4) , (const, 0x3a8, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x3a9, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x3a8, 4)]
[(stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x3a9, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x3a8, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x3a9, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x3a8, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x3a9, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x3a8, 4)]
[(stack, 0xfffffffffffffb3a, 1) INDIRECT (stack, 0xfffffffffffffb3a, 1) , (const, 0x3a9, 4), (stack, 0xfffffffffffffb3a, 1) INDIRECT (stack, 0xfffffffffffffb3a, 1) , (const, 0x3a8, 4)]
[(stack, 0xfffffffffffffb3b, 1) INDIRECT (stack, 0xfffffffffffffb3b, 1) , (const, 0x3a9, 4), (stack, 0xfffffffffffffb3b, 1) INDIRECT (stack, 0xfffffffffffffb3b, 1) , (const, 0x3a8, 4)]
[(stack, 0xfffffffffffffb3c, 4) INDIRECT (stack, 0xfffffffffffffb3c, 4) , (const, 0x3a9, 4), (stack, 0xfffffffffffffb3c, 4) INDIRECT (stack, 0xfffffffffffffb3c, 4) , (const, 0x3a8, 4)]
[(stack, 0xfffffffffffffb40, 8) INDIRECT (stack, 0xfffffffffffffb40, 8) , (const, 0x3a9, 4), (stack, 0xfffffffffffffb40, 8) INDIRECT (stack, 0xfffffffffffffb40, 8) , (const, 0x3a8, 4)]
[(stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x3a9, 4), (stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x3a8, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x3a9, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x3a8, 4)]
[(stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x3a9, 4), (stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x3a8, 4)]
[(stack, 0xfffffffffffffb60, 4) INDIRECT (stack, 0xfffffffffffffb60, 4) , (const, 0x3a9, 4), (stack, 0xfffffffffffffb60, 4) INDIRECT (stack, 0xfffffffffffffb60, 4) , (const, 0x3a8, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x3a9, 4), (stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x3a8, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x3a9, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x3a8, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x3a9, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x3a8, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x3a9, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x3a8, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x3a9, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x3a8, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x3a9, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x3a8, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x3a9, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x3a8, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x3a9, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x3a8, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x3a9, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x3a8, 4)]
[(stack, 0xfffffffffffffb98, 4) INDIRECT (stack, 0xfffffffffffffb98, 4) , (const, 0x3a9, 4), (stack, 0xfffffffffffffb98, 4) INDIRECT (stack, 0xfffffffffffffb98, 4) , (const, 0x3a8, 4)]
[(stack, 0xfffffffffffffb9c, 4) INDIRECT (stack, 0xfffffffffffffb9c, 4) , (const, 0x3a9, 4), (stack, 0xfffffffffffffb9c, 4) INDIRECT (stack, 0xfffffffffffffb9c, 4) , (const, 0x3a8, 4)]
[(stack, 0xfffffffffffffba0, 4) INDIRECT (stack, 0xfffffffffffffba0, 4) , (const, 0x3a9, 4), (stack, 0xfffffffffffffba0, 4) INDIRECT (stack, 0xfffffffffffffba0, 4) , (const, 0x3a8, 4)]
[(stack, 0xfffffffffffffba4, 4) INDIRECT (stack, 0xfffffffffffffba4, 4) , (const, 0x3a9, 4), (stack, 0xfffffffffffffba4, 4) INDIRECT (stack, 0xfffffffffffffba4, 4) , (const, 0x3a8, 4)]
[(stack, 0xfffffffffffffba8, 16) INDIRECT (stack, 0xfffffffffffffba8, 16) , (const, 0x3a9, 4), (stack, 0xfffffffffffffba8, 16) INDIRECT (stack, 0xfffffffffffffba8, 16) , (const, 0x3a8, 4)]
[(stack, 0xfffffffffffffbb8, 4) INDIRECT (stack, 0xfffffffffffffbb8, 4) , (const, 0x3a9, 4), (stack, 0xfffffffffffffbb8, 4) INDIRECT (stack, 0xfffffffffffffbb8, 4) , (const, 0x3a8, 4)]
[(stack, 0xfffffffffffffbbc, 4) INDIRECT (stack, 0xfffffffffffffbbc, 4) , (const, 0x3a9, 4), (stack, 0xfffffffffffffbbc, 4) INDIRECT (stack, 0xfffffffffffffbbc, 4) , (const, 0x3a8, 4)]
[(stack, 0xfffffffffffffc00, 8) INDIRECT (stack, 0xfffffffffffffc00, 8) , (const, 0x3a9, 4), (stack, 0xfffffffffffffc00, 8) INDIRECT (stack, 0xfffffffffffffc00, 8) , (const, 0x3a8, 4)]
[(stack, 0xfffffffffffffc08, 8) INDIRECT (stack, 0xfffffffffffffc08, 8) , (const, 0x3a9, 4), (stack, 0xfffffffffffffc08, 8) INDIRECT (stack, 0xfffffffffffffc08, 8) , (const, 0x3a8, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x3a9, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x3a8, 4)]
[ ---  CALL (ram, 0x210940, 8) , (register, 0xa0, 4)]
[(stack, 0xfffffffffffffb30, 8) COPY (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x2083fe, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffc08, 8) MULTIEQUAL (stack, 0xfffffffffffffc08, 8) , (stack, 0xfffffffffffffc08, 8) , (stack, 0xfffffffffffffc08, 8)]
[(stack, 0xfffffffffffffc00, 8) MULTIEQUAL (stack, 0xfffffffffffffc00, 8) , (stack, 0xfffffffffffffc00, 8) , (stack, 0xfffffffffffffc00, 8)]
[(stack, 0xfffffffffffffbbc, 4) MULTIEQUAL (stack, 0xfffffffffffffbbc, 4) , (stack, 0xfffffffffffffbbc, 4) , (stack, 0xfffffffffffffbbc, 4)]
[(stack, 0xfffffffffffffbb8, 4) MULTIEQUAL (stack, 0xfffffffffffffbb8, 4) , (stack, 0xfffffffffffffbb8, 4) , (stack, 0xfffffffffffffbb8, 4)]
[(stack, 0xfffffffffffffba8, 16) MULTIEQUAL (stack, 0xfffffffffffffba8, 16) , (stack, 0xfffffffffffffba8, 16) , (stack, 0xfffffffffffffba8, 16)]
[(stack, 0xfffffffffffffba4, 4) MULTIEQUAL (stack, 0xfffffffffffffba4, 4) , (stack, 0xfffffffffffffba4, 4) , (stack, 0xfffffffffffffba4, 4)]
[(stack, 0xfffffffffffffba0, 4) MULTIEQUAL (stack, 0xfffffffffffffba0, 4) , (stack, 0xfffffffffffffba0, 4) , (stack, 0xfffffffffffffba0, 4)]
[(stack, 0xfffffffffffffb9c, 4) MULTIEQUAL (stack, 0xfffffffffffffb9c, 4) , (stack, 0xfffffffffffffb9c, 4) , (stack, 0xfffffffffffffb9c, 4)]
[(stack, 0xfffffffffffffb98, 4) MULTIEQUAL (stack, 0xfffffffffffffb98, 4) , (stack, 0xfffffffffffffb98, 4) , (stack, 0xfffffffffffffb98, 4)]
[(stack, 0xfffffffffffffb94, 4) MULTIEQUAL (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4)]
[(stack, 0xfffffffffffffb90, 4) MULTIEQUAL (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4)]
[(stack, 0xfffffffffffffb8c, 4) MULTIEQUAL (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4)]
[(stack, 0xfffffffffffffb88, 4) MULTIEQUAL (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4)]
[(stack, 0xfffffffffffffb84, 4) MULTIEQUAL (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4)]
[(stack, 0xfffffffffffffb80, 4) MULTIEQUAL (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4)]
[(stack, 0xfffffffffffffb7c, 4) MULTIEQUAL (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb60, 4) MULTIEQUAL (stack, 0xfffffffffffffb60, 4) , (stack, 0xfffffffffffffb60, 4) , (stack, 0xfffffffffffffb60, 4)]
[(stack, 0xfffffffffffffb58, 8) MULTIEQUAL (stack, 0xfffffffffffffb58, 8) , (stack, 0xfffffffffffffb58, 8) , (stack, 0xfffffffffffffb58, 8)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb40, 8) MULTIEQUAL (stack, 0xfffffffffffffb40, 8) , (stack, 0xfffffffffffffb40, 8) , (stack, 0xfffffffffffffb40, 8)]
[(stack, 0xfffffffffffffb3c, 4) MULTIEQUAL (stack, 0xfffffffffffffb3c, 4) , (stack, 0xfffffffffffffb3c, 4) , (stack, 0xfffffffffffffb3c, 4)]
[(stack, 0xfffffffffffffb3b, 1) MULTIEQUAL (stack, 0xfffffffffffffb3b, 1) , (stack, 0xfffffffffffffb3b, 1) , (stack, 0xfffffffffffffb3b, 1)]
[(stack, 0xfffffffffffffb3a, 1) MULTIEQUAL (stack, 0xfffffffffffffb3a, 1) , (stack, 0xfffffffffffffb3a, 1) , (stack, 0xfffffffffffffb3a, 1)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb20, 8) MULTIEQUAL (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb14, 4) MULTIEQUAL (stack, 0xfffffffffffffb14, 4) , (stack, 0xfffffffffffffb14, 4) , (stack, 0xfffffffffffffb14, 4)]
[(stack, 0xfffffffffffffb0f, 1) MULTIEQUAL (stack, 0xfffffffffffffb0f, 1) , (stack, 0xfffffffffffffb0f, 1) , (stack, 0xfffffffffffffb0f, 1)]
[(stack, 0xfffffffffffffb08, 4) MULTIEQUAL (stack, 0xfffffffffffffb08, 4) , (stack, 0xfffffffffffffb08, 4) , (stack, 0xfffffffffffffb08, 4)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae4, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[(stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffad8, 8) MULTIEQUAL (stack, 0xfffffffffffffad8, 8) , (stack, 0xfffffffffffffad8, 8) , (stack, 0xfffffffffffffad8, 8)]
[(stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffac8, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffac4, 4) MULTIEQUAL (stack, 0xfffffffffffffac4, 4) , (stack, 0xfffffffffffffac4, 4) , (stack, 0xfffffffffffffac4, 4)]
[(ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(ram, 0x4f08e8, 4) MULTIEQUAL (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4)]
[(ram, 0x4f0870, 8) MULTIEQUAL (ram, 0x4f0870, 8) , (ram, 0x4f0870, 8) , (ram, 0x4f0870, 8)]
[(ram, 0x4ee064, 4) MULTIEQUAL (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4)]
[(ram, 0x4ee058, 8) MULTIEQUAL (ram, 0x4ee058, 8) , (ram, 0x4ee058, 8) , (ram, 0x4ee058, 8)]
[(ram, 0x4ee050, 8) MULTIEQUAL (ram, 0x4ee050, 8) , (ram, 0x4ee050, 8) , (ram, 0x4ee050, 8)]
[(ram, 0x4ee044, 4) MULTIEQUAL (ram, 0x4ee044, 4) , (ram, 0x4ee044, 4) , (ram, 0x4ee044, 4)]
[(ram, 0x4ee040, 4) MULTIEQUAL (ram, 0x4ee040, 4) , (ram, 0x4ee040, 4) , (ram, 0x4ee040, 4)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x10000ecd, 8) COPY (stack, 0xfffffffffffffb28, 8), (stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(unique, 0x10000e95, 8) COPY (stack, 0xfffffffffffffae8, 8), (stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffb68, 8) COPY (stack, 0xfffffffffffffb00, 8), (stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffb70, 4) COPY (stack, 0xfffffffffffffb10, 4), (stack, 0xfffffffffffffb10, 4) MULTIEQUAL (stack, 0xfffffffffffffb10, 4) , (stack, 0xfffffffffffffb10, 4) , (stack, 0xfffffffffffffb10, 4)]
[ ---  CBRANCH (ram, 0x20860f, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4ee060, 4) , (const, 0x0, 4), (ram, 0x4ee060, 4) MULTIEQUAL (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4)]
[ ---  CBRANCH (ram, 0x20862b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4f08f8, 4) , (const, 0x0, 4)]
[ ---  CBRANCH (const, 0x4, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4ee040, 4) , (const, 0x0, 4)]
[(ram, 0x4ee040, 4) COPY (const, 0x1, 4)]
[ ---  CALLOTHER (const, 0x11, 4)]
[ ---  CBRANCH (const, 0x4, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4ee040, 4) , (const, 0x0, 4)]
[(ram, 0x4ee040, 4) COPY (const, 0x1, 4)]
[ ---  BRANCH (ram, 0x20864e, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100013e4, 8) , (const, 0x208647, 8), (unique, 0x100013e4, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xffffffffffffff78, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x59a, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x59a, 4)]
[(ram, 0x4ee040, 4) INDIRECT (ram, 0x4ee040, 4) , (const, 0x59a, 4)]
[(ram, 0x4ee044, 4) INDIRECT (ram, 0x4ee044, 4) , (const, 0x59a, 4)]
[(ram, 0x4ee050, 8) INDIRECT (ram, 0x4ee050, 8) , (const, 0x59a, 4)]
[(ram, 0x4ee058, 8) INDIRECT (ram, 0x4ee058, 8) , (const, 0x59a, 4)]
[(ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x59a, 4)]
[(ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x59a, 4)]
[(ram, 0x4f0870, 8) INDIRECT (ram, 0x4f0870, 8) , (const, 0x59a, 4)]
[(ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x59a, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x59a, 4)]
[(stack, 0xfffffffffffffac4, 4) INDIRECT (stack, 0xfffffffffffffac4, 4) , (const, 0x59a, 4), (stack, 0xfffffffffffffac4, 4) INDIRECT (stack, 0xfffffffffffffac4, 4) , (const, 0x599, 4)]
[(stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x59a, 4), (stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x599, 4)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x59a, 4), (stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x599, 4)]
[(stack, 0xfffffffffffffad8, 8) INDIRECT (stack, 0xfffffffffffffad8, 8) , (const, 0x59a, 4), (stack, 0xfffffffffffffad8, 8) INDIRECT (stack, 0xfffffffffffffad8, 8) , (const, 0x599, 4)]
[(stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x59a, 4), (stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x599, 4)]
[(stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x59a, 4), (stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x599, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x59a, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x599, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x59a, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x599, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x59a, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x599, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x59a, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x599, 4)]
[(stack, 0xfffffffffffffb08, 4) INDIRECT (stack, 0xfffffffffffffb08, 4) , (const, 0x59a, 4), (stack, 0xfffffffffffffb08, 4) INDIRECT (stack, 0xfffffffffffffb08, 4) , (const, 0x599, 4)]
[(stack, 0xfffffffffffffb0f, 1) INDIRECT (stack, 0xfffffffffffffb0f, 1) , (const, 0x59a, 4), (stack, 0xfffffffffffffb0f, 1) INDIRECT (stack, 0xfffffffffffffb0f, 1) , (const, 0x599, 4)]
[(stack, 0xfffffffffffffb10, 4) INDIRECT (stack, 0xfffffffffffffb10, 4) , (const, 0x59a, 4), (stack, 0xfffffffffffffb10, 4) INDIRECT (stack, 0xfffffffffffffb10, 4) , (const, 0x599, 4)]
[(stack, 0xfffffffffffffb14, 4) INDIRECT (stack, 0xfffffffffffffb14, 4) , (const, 0x59a, 4), (stack, 0xfffffffffffffb14, 4) INDIRECT (stack, 0xfffffffffffffb14, 4) , (const, 0x599, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x59a, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x599, 4)]
[(stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x59a, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x599, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x59a, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x599, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x59a, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x599, 4)]
[(stack, 0xfffffffffffffb3a, 1) INDIRECT (stack, 0xfffffffffffffb3a, 1) , (const, 0x59a, 4), (stack, 0xfffffffffffffb3a, 1) INDIRECT (stack, 0xfffffffffffffb3a, 1) , (const, 0x599, 4)]
[(stack, 0xfffffffffffffb3b, 1) INDIRECT (stack, 0xfffffffffffffb3b, 1) , (const, 0x59a, 4), (stack, 0xfffffffffffffb3b, 1) INDIRECT (stack, 0xfffffffffffffb3b, 1) , (const, 0x599, 4)]
[(stack, 0xfffffffffffffb3c, 4) INDIRECT (stack, 0xfffffffffffffb3c, 4) , (const, 0x59a, 4), (stack, 0xfffffffffffffb3c, 4) INDIRECT (stack, 0xfffffffffffffb3c, 4) , (const, 0x599, 4)]
[(stack, 0xfffffffffffffb40, 8) INDIRECT (stack, 0xfffffffffffffb40, 8) , (const, 0x59a, 4), (stack, 0xfffffffffffffb40, 8) INDIRECT (stack, 0xfffffffffffffb40, 8) , (const, 0x599, 4)]
[(stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x59a, 4), (stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x599, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x59a, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x599, 4)]
[(stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x59a, 4), (stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x599, 4)]
[(stack, 0xfffffffffffffb60, 4) INDIRECT (stack, 0xfffffffffffffb60, 4) , (const, 0x59a, 4), (stack, 0xfffffffffffffb60, 4) INDIRECT (stack, 0xfffffffffffffb60, 4) , (const, 0x599, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x59a, 4), (stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x599, 4)]
[(stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x59a, 4), (stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x599, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x59a, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x599, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x59a, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x599, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x59a, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x599, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x59a, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x599, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x59a, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x599, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x59a, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x599, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x59a, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x599, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x59a, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x599, 4)]
[(stack, 0xfffffffffffffb98, 4) INDIRECT (stack, 0xfffffffffffffb98, 4) , (const, 0x59a, 4), (stack, 0xfffffffffffffb98, 4) INDIRECT (stack, 0xfffffffffffffb98, 4) , (const, 0x599, 4)]
[(stack, 0xfffffffffffffb9c, 4) INDIRECT (stack, 0xfffffffffffffb9c, 4) , (const, 0x59a, 4), (stack, 0xfffffffffffffb9c, 4) INDIRECT (stack, 0xfffffffffffffb9c, 4) , (const, 0x599, 4)]
[(stack, 0xfffffffffffffba0, 4) INDIRECT (stack, 0xfffffffffffffba0, 4) , (const, 0x59a, 4), (stack, 0xfffffffffffffba0, 4) INDIRECT (stack, 0xfffffffffffffba0, 4) , (const, 0x599, 4)]
[(stack, 0xfffffffffffffba4, 4) INDIRECT (stack, 0xfffffffffffffba4, 4) , (const, 0x59a, 4), (stack, 0xfffffffffffffba4, 4) INDIRECT (stack, 0xfffffffffffffba4, 4) , (const, 0x599, 4)]
[(stack, 0xfffffffffffffba8, 16) INDIRECT (stack, 0xfffffffffffffba8, 16) , (const, 0x59a, 4), (stack, 0xfffffffffffffba8, 16) INDIRECT (stack, 0xfffffffffffffba8, 16) , (const, 0x599, 4)]
[(stack, 0xfffffffffffffbb8, 4) INDIRECT (stack, 0xfffffffffffffbb8, 4) , (const, 0x59a, 4), (stack, 0xfffffffffffffbb8, 4) INDIRECT (stack, 0xfffffffffffffbb8, 4) , (const, 0x599, 4)]
[(stack, 0xfffffffffffffbbc, 4) INDIRECT (stack, 0xfffffffffffffbbc, 4) , (const, 0x59a, 4), (stack, 0xfffffffffffffbbc, 4) INDIRECT (stack, 0xfffffffffffffbbc, 4) , (const, 0x599, 4)]
[(stack, 0xfffffffffffffc00, 8) INDIRECT (stack, 0xfffffffffffffc00, 8) , (const, 0x59a, 4), (stack, 0xfffffffffffffc00, 8) INDIRECT (stack, 0xfffffffffffffc00, 8) , (const, 0x599, 4)]
[(stack, 0xfffffffffffffc08, 8) INDIRECT (stack, 0xfffffffffffffc08, 8) , (const, 0x59a, 4), (stack, 0xfffffffffffffc08, 8) INDIRECT (stack, 0xfffffffffffffc08, 8) , (const, 0x599, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x59a, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x599, 4)]
[ ---  CALL (ram, 0x230690, 8) , (unique, 0x10000670, 8), (unique, 0x10000670, 8) PTRSUB (const, 0x0, 8) , (const, 0x4ee040, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffc08, 8) MULTIEQUAL (stack, 0xfffffffffffffc08, 8) , (stack, 0xfffffffffffffc08, 8) , (stack, 0xfffffffffffffc08, 8)]
[(stack, 0xfffffffffffffc00, 8) MULTIEQUAL (stack, 0xfffffffffffffc00, 8) , (stack, 0xfffffffffffffc00, 8) , (stack, 0xfffffffffffffc00, 8)]
[(stack, 0xfffffffffffffbbc, 4) MULTIEQUAL (stack, 0xfffffffffffffbbc, 4) , (stack, 0xfffffffffffffbbc, 4) , (stack, 0xfffffffffffffbbc, 4)]
[(stack, 0xfffffffffffffbb8, 4) MULTIEQUAL (stack, 0xfffffffffffffbb8, 4) , (stack, 0xfffffffffffffbb8, 4) , (stack, 0xfffffffffffffbb8, 4)]
[(stack, 0xfffffffffffffba8, 16) MULTIEQUAL (stack, 0xfffffffffffffba8, 16) , (stack, 0xfffffffffffffba8, 16) , (stack, 0xfffffffffffffba8, 16)]
[(stack, 0xfffffffffffffba4, 4) MULTIEQUAL (stack, 0xfffffffffffffba4, 4) , (stack, 0xfffffffffffffba4, 4) , (stack, 0xfffffffffffffba4, 4)]
[(stack, 0xfffffffffffffba0, 4) MULTIEQUAL (stack, 0xfffffffffffffba0, 4) , (stack, 0xfffffffffffffba0, 4) , (stack, 0xfffffffffffffba0, 4)]
[(stack, 0xfffffffffffffb9c, 4) MULTIEQUAL (stack, 0xfffffffffffffb9c, 4) , (stack, 0xfffffffffffffb9c, 4) , (stack, 0xfffffffffffffb9c, 4)]
[(stack, 0xfffffffffffffb98, 4) MULTIEQUAL (stack, 0xfffffffffffffb98, 4) , (stack, 0xfffffffffffffb98, 4) , (stack, 0xfffffffffffffb98, 4)]
[(stack, 0xfffffffffffffb94, 4) MULTIEQUAL (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4)]
[(stack, 0xfffffffffffffb90, 4) MULTIEQUAL (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4)]
[(stack, 0xfffffffffffffb8c, 4) MULTIEQUAL (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4)]
[(stack, 0xfffffffffffffb88, 4) MULTIEQUAL (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4)]
[(stack, 0xfffffffffffffb84, 4) MULTIEQUAL (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4)]
[(stack, 0xfffffffffffffb80, 4) MULTIEQUAL (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4)]
[(stack, 0xfffffffffffffb7c, 4) MULTIEQUAL (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb70, 4) MULTIEQUAL (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4)]
[(stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb60, 4) MULTIEQUAL (stack, 0xfffffffffffffb60, 4) , (stack, 0xfffffffffffffb60, 4) , (stack, 0xfffffffffffffb60, 4)]
[(stack, 0xfffffffffffffb58, 8) MULTIEQUAL (stack, 0xfffffffffffffb58, 8) , (stack, 0xfffffffffffffb58, 8) , (stack, 0xfffffffffffffb58, 8)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb40, 8) MULTIEQUAL (stack, 0xfffffffffffffb40, 8) , (stack, 0xfffffffffffffb40, 8) , (stack, 0xfffffffffffffb40, 8)]
[(stack, 0xfffffffffffffb3c, 4) MULTIEQUAL (stack, 0xfffffffffffffb3c, 4) , (stack, 0xfffffffffffffb3c, 4) , (stack, 0xfffffffffffffb3c, 4)]
[(stack, 0xfffffffffffffb3b, 1) MULTIEQUAL (stack, 0xfffffffffffffb3b, 1) , (stack, 0xfffffffffffffb3b, 1) , (stack, 0xfffffffffffffb3b, 1)]
[(stack, 0xfffffffffffffb3a, 1) MULTIEQUAL (stack, 0xfffffffffffffb3a, 1) , (stack, 0xfffffffffffffb3a, 1) , (stack, 0xfffffffffffffb3a, 1)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb14, 4) MULTIEQUAL (stack, 0xfffffffffffffb14, 4) , (stack, 0xfffffffffffffb14, 4) , (stack, 0xfffffffffffffb14, 4)]
[(stack, 0xfffffffffffffb10, 4) MULTIEQUAL (stack, 0xfffffffffffffb10, 4) , (stack, 0xfffffffffffffb10, 4) , (stack, 0xfffffffffffffb10, 4)]
[(stack, 0xfffffffffffffb0f, 1) MULTIEQUAL (stack, 0xfffffffffffffb0f, 1) , (stack, 0xfffffffffffffb0f, 1) , (stack, 0xfffffffffffffb0f, 1)]
[(stack, 0xfffffffffffffb08, 4) MULTIEQUAL (stack, 0xfffffffffffffb08, 4) , (stack, 0xfffffffffffffb08, 4) , (stack, 0xfffffffffffffb08, 4)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae4, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[(stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffad8, 8) MULTIEQUAL (stack, 0xfffffffffffffad8, 8) , (stack, 0xfffffffffffffad8, 8) , (stack, 0xfffffffffffffad8, 8)]
[(stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffac8, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(ram, 0x4f08e8, 4) MULTIEQUAL (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4)]
[(ram, 0x4f0870, 8) MULTIEQUAL (ram, 0x4f0870, 8) , (ram, 0x4f0870, 8) , (ram, 0x4f0870, 8)]
[(ram, 0x4ee064, 4) MULTIEQUAL (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4)]
[(ram, 0x4ee060, 4) MULTIEQUAL (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4)]
[(ram, 0x4ee058, 8) MULTIEQUAL (ram, 0x4ee058, 8) , (ram, 0x4ee058, 8) , (ram, 0x4ee058, 8)]
[(ram, 0x4ee050, 8) MULTIEQUAL (ram, 0x4ee050, 8) , (ram, 0x4ee050, 8) , (ram, 0x4ee050, 8)]
[(ram, 0x4ee044, 4) MULTIEQUAL (ram, 0x4ee044, 4) , (ram, 0x4ee044, 4) , (ram, 0x4ee044, 4)]
[(ram, 0x4ee040, 4) MULTIEQUAL (ram, 0x4ee040, 4) , (ram, 0x4ee040, 4) , (ram, 0x4ee040, 4)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x10000ec5, 8) COPY (stack, 0xfffffffffffffb20, 8), (stack, 0xfffffffffffffb20, 8) MULTIEQUAL (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8)]
[ ---  CBRANCH (ram, 0x208666, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xfffffffffffffac4, 4) , (const, 0x0, 4), (stack, 0xfffffffffffffac4, 4) MULTIEQUAL (stack, 0xfffffffffffffac4, 4) , (stack, 0xfffffffffffffac4, 4) , (stack, 0xfffffffffffffac4, 4)]
[ ---  CBRANCH (ram, 0x2087d4, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4ee064, 4) , (const, 0x0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100013ec, 8) , (const, 0x2087ec, 8), (unique, 0x100013ec, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x55e, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x55e, 4)]
[(ram, 0x4ee040, 4) INDIRECT (ram, 0x4ee040, 4) , (const, 0x55e, 4)]
[(ram, 0x4ee044, 4) INDIRECT (ram, 0x4ee044, 4) , (const, 0x55e, 4)]
[(ram, 0x4ee050, 8) INDIRECT (ram, 0x4ee050, 8) , (const, 0x55e, 4)]
[(ram, 0x4ee058, 8) INDIRECT (ram, 0x4ee058, 8) , (const, 0x55e, 4)]
[(ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x55e, 4)]
[(ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x55e, 4)]
[(ram, 0x4f0870, 8) INDIRECT (ram, 0x4f0870, 8) , (const, 0x55e, 4)]
[(ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x55e, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x55e, 4)]
[(stack, 0xfffffffffffffac4, 4) INDIRECT (stack, 0xfffffffffffffac4, 4) , (const, 0x55e, 4), (stack, 0xfffffffffffffac4, 4) INDIRECT (stack, 0xfffffffffffffac4, 4) , (const, 0x55d, 4)]
[(stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x55e, 4), (stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x55d, 4)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x55e, 4), (stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x55d, 4)]
[(stack, 0xfffffffffffffad8, 8) INDIRECT (stack, 0xfffffffffffffad8, 8) , (const, 0x55e, 4), (stack, 0xfffffffffffffad8, 8) INDIRECT (stack, 0xfffffffffffffad8, 8) , (const, 0x55d, 4)]
[(stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x55e, 4), (stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x55d, 4)]
[(stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x55e, 4), (stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x55d, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x55e, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x55d, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x55e, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x55d, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x55e, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x55d, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x55e, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x55d, 4)]
[(stack, 0xfffffffffffffb08, 4) INDIRECT (stack, 0xfffffffffffffb08, 4) , (const, 0x55e, 4), (stack, 0xfffffffffffffb08, 4) INDIRECT (stack, 0xfffffffffffffb08, 4) , (const, 0x55d, 4)]
[(stack, 0xfffffffffffffb0f, 1) INDIRECT (stack, 0xfffffffffffffb0f, 1) , (const, 0x55e, 4), (stack, 0xfffffffffffffb0f, 1) INDIRECT (stack, 0xfffffffffffffb0f, 1) , (const, 0x55d, 4)]
[(stack, 0xfffffffffffffb10, 4) INDIRECT (stack, 0xfffffffffffffb10, 4) , (const, 0x55e, 4), (stack, 0xfffffffffffffb10, 4) INDIRECT (stack, 0xfffffffffffffb10, 4) , (const, 0x55d, 4)]
[(stack, 0xfffffffffffffb14, 4) INDIRECT (stack, 0xfffffffffffffb14, 4) , (const, 0x55e, 4), (stack, 0xfffffffffffffb14, 4) INDIRECT (stack, 0xfffffffffffffb14, 4) , (const, 0x55d, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x55e, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x55d, 4)]
[(stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x55e, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x55d, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x55e, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x55d, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x55e, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x55d, 4)]
[(stack, 0xfffffffffffffb3a, 1) INDIRECT (stack, 0xfffffffffffffb3a, 1) , (const, 0x55e, 4), (stack, 0xfffffffffffffb3a, 1) INDIRECT (stack, 0xfffffffffffffb3a, 1) , (const, 0x55d, 4)]
[(stack, 0xfffffffffffffb3b, 1) INDIRECT (stack, 0xfffffffffffffb3b, 1) , (const, 0x55e, 4), (stack, 0xfffffffffffffb3b, 1) INDIRECT (stack, 0xfffffffffffffb3b, 1) , (const, 0x55d, 4)]
[(stack, 0xfffffffffffffb3c, 4) INDIRECT (stack, 0xfffffffffffffb3c, 4) , (const, 0x55e, 4), (stack, 0xfffffffffffffb3c, 4) INDIRECT (stack, 0xfffffffffffffb3c, 4) , (const, 0x55d, 4)]
[(stack, 0xfffffffffffffb40, 8) INDIRECT (stack, 0xfffffffffffffb40, 8) , (const, 0x55e, 4), (stack, 0xfffffffffffffb40, 8) INDIRECT (stack, 0xfffffffffffffb40, 8) , (const, 0x55d, 4)]
[(stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x55e, 4), (stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x55d, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x55e, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x55d, 4)]
[(stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x55e, 4), (stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x55d, 4)]
[(stack, 0xfffffffffffffb60, 4) INDIRECT (stack, 0xfffffffffffffb60, 4) , (const, 0x55e, 4), (stack, 0xfffffffffffffb60, 4) INDIRECT (stack, 0xfffffffffffffb60, 4) , (const, 0x55d, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x55e, 4), (stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x55d, 4)]
[(stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x55e, 4), (stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x55d, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x55e, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x55d, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x55e, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x55d, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x55e, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x55d, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x55e, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x55d, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x55e, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x55d, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x55e, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x55d, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x55e, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x55d, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x55e, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x55d, 4)]
[(stack, 0xfffffffffffffb98, 4) INDIRECT (stack, 0xfffffffffffffb98, 4) , (const, 0x55e, 4), (stack, 0xfffffffffffffb98, 4) INDIRECT (stack, 0xfffffffffffffb98, 4) , (const, 0x55d, 4)]
[(stack, 0xfffffffffffffb9c, 4) INDIRECT (stack, 0xfffffffffffffb9c, 4) , (const, 0x55e, 4), (stack, 0xfffffffffffffb9c, 4) INDIRECT (stack, 0xfffffffffffffb9c, 4) , (const, 0x55d, 4)]
[(stack, 0xfffffffffffffba0, 4) INDIRECT (stack, 0xfffffffffffffba0, 4) , (const, 0x55e, 4), (stack, 0xfffffffffffffba0, 4) INDIRECT (stack, 0xfffffffffffffba0, 4) , (const, 0x55d, 4)]
[(stack, 0xfffffffffffffba4, 4) INDIRECT (stack, 0xfffffffffffffba4, 4) , (const, 0x55e, 4), (stack, 0xfffffffffffffba4, 4) INDIRECT (stack, 0xfffffffffffffba4, 4) , (const, 0x55d, 4)]
[(stack, 0xfffffffffffffba8, 16) INDIRECT (stack, 0xfffffffffffffba8, 16) , (const, 0x55e, 4), (stack, 0xfffffffffffffba8, 16) INDIRECT (stack, 0xfffffffffffffba8, 16) , (const, 0x55d, 4)]
[(stack, 0xfffffffffffffbb8, 4) INDIRECT (stack, 0xfffffffffffffbb8, 4) , (const, 0x55e, 4), (stack, 0xfffffffffffffbb8, 4) INDIRECT (stack, 0xfffffffffffffbb8, 4) , (const, 0x55d, 4)]
[(stack, 0xfffffffffffffbbc, 4) INDIRECT (stack, 0xfffffffffffffbbc, 4) , (const, 0x55e, 4), (stack, 0xfffffffffffffbbc, 4) INDIRECT (stack, 0xfffffffffffffbbc, 4) , (const, 0x55d, 4)]
[(stack, 0xfffffffffffffc00, 8) INDIRECT (stack, 0xfffffffffffffc00, 8) , (const, 0x55e, 4), (stack, 0xfffffffffffffc00, 8) INDIRECT (stack, 0xfffffffffffffc00, 8) , (const, 0x55d, 4)]
[(stack, 0xfffffffffffffc08, 8) INDIRECT (stack, 0xfffffffffffffc08, 8) , (const, 0x55e, 4), (stack, 0xfffffffffffffc08, 8) INDIRECT (stack, 0xfffffffffffffc08, 8) , (const, 0x55d, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x55e, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x55d, 4)]
[ ---  CBRANCH (ram, 0x208800, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x20f760, 8) , (const, 0x1, 4) , (unique, 0x10000630, 8) , (unique, 0x10000ec5, 8), (unique, 0x10000630, 8) COPY (const, 0x2b5666, 8)]
[ ---  CBRANCH (ram, 0x208829, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xfffffffffffffc00, 8) , (ram, 0x4ee050, 8)]
[ ---  CBRANCH (ram, 0x208800, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xfffffffffffffc08, 8) , (ram, 0x4ee058, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100013f4, 8) , (const, 0x208805, 8), (unique, 0x100013f4, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x57b, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x57b, 4)]
[(ram, 0x4ee040, 4) INDIRECT (ram, 0x4ee040, 4) , (const, 0x57b, 4)]
[(ram, 0x4ee044, 4) INDIRECT (ram, 0x4ee044, 4) , (const, 0x57b, 4)]
[(ram, 0x4ee050, 8) INDIRECT (ram, 0x4ee050, 8) , (const, 0x57b, 4)]
[(ram, 0x4ee058, 8) INDIRECT (ram, 0x4ee058, 8) , (const, 0x57b, 4)]
[(ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x57b, 4)]
[(ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x57b, 4)]
[(ram, 0x4f0870, 8) INDIRECT (ram, 0x4f0870, 8) , (const, 0x57b, 4)]
[(ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x57b, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x57b, 4)]
[(stack, 0xfffffffffffffac4, 4) INDIRECT (stack, 0xfffffffffffffac4, 4) , (const, 0x57b, 4), (stack, 0xfffffffffffffac4, 4) INDIRECT (stack, 0xfffffffffffffac4, 4) , (const, 0x57a, 4)]
[(stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x57b, 4), (stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x57a, 4)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x57b, 4), (stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x57a, 4)]
[(stack, 0xfffffffffffffad8, 8) INDIRECT (stack, 0xfffffffffffffad8, 8) , (const, 0x57b, 4), (stack, 0xfffffffffffffad8, 8) INDIRECT (stack, 0xfffffffffffffad8, 8) , (const, 0x57a, 4)]
[(stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x57b, 4), (stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x57a, 4)]
[(stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x57b, 4), (stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x57a, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x57b, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x57a, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x57b, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x57a, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x57b, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x57a, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x57b, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x57a, 4)]
[(stack, 0xfffffffffffffb08, 4) INDIRECT (stack, 0xfffffffffffffb08, 4) , (const, 0x57b, 4), (stack, 0xfffffffffffffb08, 4) INDIRECT (stack, 0xfffffffffffffb08, 4) , (const, 0x57a, 4)]
[(stack, 0xfffffffffffffb0f, 1) INDIRECT (stack, 0xfffffffffffffb0f, 1) , (const, 0x57b, 4), (stack, 0xfffffffffffffb0f, 1) INDIRECT (stack, 0xfffffffffffffb0f, 1) , (const, 0x57a, 4)]
[(stack, 0xfffffffffffffb10, 4) INDIRECT (stack, 0xfffffffffffffb10, 4) , (const, 0x57b, 4), (stack, 0xfffffffffffffb10, 4) INDIRECT (stack, 0xfffffffffffffb10, 4) , (const, 0x57a, 4)]
[(stack, 0xfffffffffffffb14, 4) INDIRECT (stack, 0xfffffffffffffb14, 4) , (const, 0x57b, 4), (stack, 0xfffffffffffffb14, 4) INDIRECT (stack, 0xfffffffffffffb14, 4) , (const, 0x57a, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x57b, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x57a, 4)]
[(stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x57b, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x57a, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x57b, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x57a, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x57b, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x57a, 4)]
[(stack, 0xfffffffffffffb3a, 1) INDIRECT (stack, 0xfffffffffffffb3a, 1) , (const, 0x57b, 4), (stack, 0xfffffffffffffb3a, 1) INDIRECT (stack, 0xfffffffffffffb3a, 1) , (const, 0x57a, 4)]
[(stack, 0xfffffffffffffb3b, 1) INDIRECT (stack, 0xfffffffffffffb3b, 1) , (const, 0x57b, 4), (stack, 0xfffffffffffffb3b, 1) INDIRECT (stack, 0xfffffffffffffb3b, 1) , (const, 0x57a, 4)]
[(stack, 0xfffffffffffffb3c, 4) INDIRECT (stack, 0xfffffffffffffb3c, 4) , (const, 0x57b, 4), (stack, 0xfffffffffffffb3c, 4) INDIRECT (stack, 0xfffffffffffffb3c, 4) , (const, 0x57a, 4)]
[(stack, 0xfffffffffffffb40, 8) INDIRECT (stack, 0xfffffffffffffb40, 8) , (const, 0x57b, 4), (stack, 0xfffffffffffffb40, 8) INDIRECT (stack, 0xfffffffffffffb40, 8) , (const, 0x57a, 4)]
[(stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x57b, 4), (stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x57a, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x57b, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x57a, 4)]
[(stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x57b, 4), (stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x57a, 4)]
[(stack, 0xfffffffffffffb60, 4) INDIRECT (stack, 0xfffffffffffffb60, 4) , (const, 0x57b, 4), (stack, 0xfffffffffffffb60, 4) INDIRECT (stack, 0xfffffffffffffb60, 4) , (const, 0x57a, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x57b, 4), (stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x57a, 4)]
[(stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x57b, 4), (stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x57a, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x57b, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x57a, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x57b, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x57a, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x57b, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x57a, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x57b, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x57a, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x57b, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x57a, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x57b, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x57a, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x57b, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x57a, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x57b, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x57a, 4)]
[(stack, 0xfffffffffffffb98, 4) INDIRECT (stack, 0xfffffffffffffb98, 4) , (const, 0x57b, 4), (stack, 0xfffffffffffffb98, 4) INDIRECT (stack, 0xfffffffffffffb98, 4) , (const, 0x57a, 4)]
[(stack, 0xfffffffffffffb9c, 4) INDIRECT (stack, 0xfffffffffffffb9c, 4) , (const, 0x57b, 4), (stack, 0xfffffffffffffb9c, 4) INDIRECT (stack, 0xfffffffffffffb9c, 4) , (const, 0x57a, 4)]
[(stack, 0xfffffffffffffba0, 4) INDIRECT (stack, 0xfffffffffffffba0, 4) , (const, 0x57b, 4), (stack, 0xfffffffffffffba0, 4) INDIRECT (stack, 0xfffffffffffffba0, 4) , (const, 0x57a, 4)]
[(stack, 0xfffffffffffffba4, 4) INDIRECT (stack, 0xfffffffffffffba4, 4) , (const, 0x57b, 4), (stack, 0xfffffffffffffba4, 4) INDIRECT (stack, 0xfffffffffffffba4, 4) , (const, 0x57a, 4)]
[(stack, 0xfffffffffffffba8, 16) INDIRECT (stack, 0xfffffffffffffba8, 16) , (const, 0x57b, 4), (stack, 0xfffffffffffffba8, 16) INDIRECT (stack, 0xfffffffffffffba8, 16) , (const, 0x57a, 4)]
[(stack, 0xfffffffffffffbb8, 4) INDIRECT (stack, 0xfffffffffffffbb8, 4) , (const, 0x57b, 4), (stack, 0xfffffffffffffbb8, 4) INDIRECT (stack, 0xfffffffffffffbb8, 4) , (const, 0x57a, 4)]
[(stack, 0xfffffffffffffbbc, 4) INDIRECT (stack, 0xfffffffffffffbbc, 4) , (const, 0x57b, 4), (stack, 0xfffffffffffffbbc, 4) INDIRECT (stack, 0xfffffffffffffbbc, 4) , (const, 0x57a, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x57b, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x57a, 4)]
[ ---  CALL (ram, 0x2042b0, 8)]
[ ---  BRANCH (ram, 0x208666, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100013fc, 8) , (const, 0x20868c, 8), (unique, 0x100013fc, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x520, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x520, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4ee040, 4) INDIRECT (ram, 0x4ee040, 4) , (const, 0x520, 4), (ram, 0x4ee040, 4) MULTIEQUAL (ram, 0x4ee040, 4) , (ram, 0x4ee040, 4) , (ram, 0x4ee040, 4) , (ram, 0x4ee040, 4)]
[(ram, 0x4ee044, 4) INDIRECT (ram, 0x4ee044, 4) , (const, 0x520, 4), (ram, 0x4ee044, 4) MULTIEQUAL (ram, 0x4ee044, 4) , (ram, 0x4ee044, 4) , (ram, 0x4ee044, 4) , (ram, 0x4ee044, 4)]
[(ram, 0x4ee050, 8) INDIRECT (ram, 0x4ee050, 8) , (const, 0x520, 4), (ram, 0x4ee050, 8) MULTIEQUAL (ram, 0x4ee050, 8) , (ram, 0x4ee050, 8) , (ram, 0x4ee050, 8) , (ram, 0x4ee050, 8)]
[(ram, 0x4ee058, 8) INDIRECT (ram, 0x4ee058, 8) , (const, 0x520, 4), (ram, 0x4ee058, 8) MULTIEQUAL (ram, 0x4ee058, 8) , (ram, 0x4ee058, 8) , (ram, 0x4ee058, 8) , (ram, 0x4ee058, 8)]
[(ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x520, 4), (ram, 0x4ee060, 4) MULTIEQUAL (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4)]
[(ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x520, 4), (ram, 0x4ee064, 4) MULTIEQUAL (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4)]
[(ram, 0x4f0870, 8) INDIRECT (ram, 0x4f0870, 8) , (const, 0x520, 4), (ram, 0x4f0870, 8) MULTIEQUAL (ram, 0x4f0870, 8) , (ram, 0x4f0870, 8) , (ram, 0x4f0870, 8) , (ram, 0x4f0870, 8)]
[(ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x520, 4), (ram, 0x4f08e8, 4) MULTIEQUAL (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4)]
[(stack, 0xfffffffffffffac4, 4) INDIRECT (stack, 0xfffffffffffffac4, 4) , (const, 0x520, 4), (stack, 0xfffffffffffffac4, 4) INDIRECT (stack, 0xfffffffffffffac4, 4) , (const, 0x51f, 4), (stack, 0xfffffffffffffac4, 4) MULTIEQUAL (stack, 0xfffffffffffffac4, 4) , (stack, 0xfffffffffffffac4, 4) , (stack, 0xfffffffffffffac4, 4) , (stack, 0xfffffffffffffac4, 4)]
[(stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x520, 4), (stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x51f, 4), (stack, 0xfffffffffffffac8, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x520, 4), (stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x51f, 4), (stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffad8, 8) INDIRECT (stack, 0xfffffffffffffad8, 8) , (const, 0x520, 4), (stack, 0xfffffffffffffad8, 8) INDIRECT (stack, 0xfffffffffffffad8, 8) , (const, 0x51f, 4), (stack, 0xfffffffffffffad8, 8) MULTIEQUAL (stack, 0xfffffffffffffad8, 8) , (stack, 0xfffffffffffffad8, 8) , (stack, 0xfffffffffffffad8, 8) , (stack, 0xfffffffffffffad8, 8)]
[(stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x520, 4), (stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x51f, 4), (stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x520, 4), (stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x51f, 4), (stack, 0xfffffffffffffae4, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x520, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x51f, 4), (stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x520, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x51f, 4), (stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x520, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x51f, 4), (stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x520, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x51f, 4), (stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffb08, 4) INDIRECT (stack, 0xfffffffffffffb08, 4) , (const, 0x520, 4), (stack, 0xfffffffffffffb08, 4) INDIRECT (stack, 0xfffffffffffffb08, 4) , (const, 0x51f, 4), (stack, 0xfffffffffffffb08, 4) MULTIEQUAL (stack, 0xfffffffffffffb08, 4) , (stack, 0xfffffffffffffb08, 4) , (stack, 0xfffffffffffffb08, 4) , (stack, 0xfffffffffffffb08, 4)]
[(stack, 0xfffffffffffffb0f, 1) INDIRECT (stack, 0xfffffffffffffb0f, 1) , (const, 0x520, 4), (stack, 0xfffffffffffffb0f, 1) INDIRECT (stack, 0xfffffffffffffb0f, 1) , (const, 0x51f, 4), (stack, 0xfffffffffffffb0f, 1) MULTIEQUAL (stack, 0xfffffffffffffb0f, 1) , (stack, 0xfffffffffffffb0f, 1) , (stack, 0xfffffffffffffb0f, 1) , (stack, 0xfffffffffffffb0f, 1)]
[(stack, 0xfffffffffffffb10, 4) INDIRECT (stack, 0xfffffffffffffb10, 4) , (const, 0x520, 4), (stack, 0xfffffffffffffb10, 4) INDIRECT (stack, 0xfffffffffffffb10, 4) , (const, 0x51f, 4), (stack, 0xfffffffffffffb10, 4) MULTIEQUAL (stack, 0xfffffffffffffb10, 4) , (stack, 0xfffffffffffffb10, 4) , (stack, 0xfffffffffffffb10, 4) , (stack, 0xfffffffffffffb10, 4)]
[(stack, 0xfffffffffffffb14, 4) INDIRECT (stack, 0xfffffffffffffb14, 4) , (const, 0x520, 4), (stack, 0xfffffffffffffb14, 4) INDIRECT (stack, 0xfffffffffffffb14, 4) , (const, 0x51f, 4), (stack, 0xfffffffffffffb14, 4) MULTIEQUAL (stack, 0xfffffffffffffb14, 4) , (stack, 0xfffffffffffffb14, 4) , (stack, 0xfffffffffffffb14, 4) , (stack, 0xfffffffffffffb14, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x520, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x51f, 4), (stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x520, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x51f, 4), (stack, 0xfffffffffffffb20, 8) MULTIEQUAL (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x520, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x51f, 4), (stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x520, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x51f, 4), (stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb3a, 1) INDIRECT (stack, 0xfffffffffffffb3a, 1) , (const, 0x520, 4), (stack, 0xfffffffffffffb3a, 1) INDIRECT (stack, 0xfffffffffffffb3a, 1) , (const, 0x51f, 4), (stack, 0xfffffffffffffb3a, 1) MULTIEQUAL (stack, 0xfffffffffffffb3a, 1) , (stack, 0xfffffffffffffb3a, 1) , (stack, 0xfffffffffffffb3a, 1) , (stack, 0xfffffffffffffb3a, 1)]
[(stack, 0xfffffffffffffb3b, 1) INDIRECT (stack, 0xfffffffffffffb3b, 1) , (const, 0x520, 4), (stack, 0xfffffffffffffb3b, 1) INDIRECT (stack, 0xfffffffffffffb3b, 1) , (const, 0x51f, 4), (stack, 0xfffffffffffffb3b, 1) MULTIEQUAL (stack, 0xfffffffffffffb3b, 1) , (stack, 0xfffffffffffffb3b, 1) , (stack, 0xfffffffffffffb3b, 1) , (stack, 0xfffffffffffffb3b, 1)]
[(stack, 0xfffffffffffffb3c, 4) INDIRECT (stack, 0xfffffffffffffb3c, 4) , (const, 0x520, 4), (stack, 0xfffffffffffffb3c, 4) INDIRECT (stack, 0xfffffffffffffb3c, 4) , (const, 0x51f, 4), (stack, 0xfffffffffffffb3c, 4) MULTIEQUAL (stack, 0xfffffffffffffb3c, 4) , (stack, 0xfffffffffffffb3c, 4) , (stack, 0xfffffffffffffb3c, 4) , (stack, 0xfffffffffffffb3c, 4)]
[(stack, 0xfffffffffffffb40, 8) INDIRECT (stack, 0xfffffffffffffb40, 8) , (const, 0x520, 4), (stack, 0xfffffffffffffb40, 8) INDIRECT (stack, 0xfffffffffffffb40, 8) , (const, 0x51f, 4), (stack, 0xfffffffffffffb40, 8) MULTIEQUAL (stack, 0xfffffffffffffb40, 8) , (stack, 0xfffffffffffffb40, 8) , (stack, 0xfffffffffffffb40, 8) , (stack, 0xfffffffffffffb40, 8)]
[(stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x520, 4), (stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x51f, 4), (stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x520, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x51f, 4), (stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x520, 4), (stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x51f, 4), (stack, 0xfffffffffffffb58, 8) MULTIEQUAL (stack, 0xfffffffffffffb58, 8) , (stack, 0xfffffffffffffb58, 8) , (stack, 0xfffffffffffffb58, 8) , (stack, 0xfffffffffffffb58, 8)]
[(stack, 0xfffffffffffffb60, 4) INDIRECT (stack, 0xfffffffffffffb60, 4) , (const, 0x520, 4), (stack, 0xfffffffffffffb60, 4) INDIRECT (stack, 0xfffffffffffffb60, 4) , (const, 0x51f, 4), (stack, 0xfffffffffffffb60, 4) MULTIEQUAL (stack, 0xfffffffffffffb60, 4) , (stack, 0xfffffffffffffb60, 4) , (stack, 0xfffffffffffffb60, 4) , (stack, 0xfffffffffffffb60, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x520, 4), (stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x51f, 4), (stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x520, 4), (stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x51f, 4), (stack, 0xfffffffffffffb70, 4) MULTIEQUAL (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x520, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x51f, 4), (stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x520, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x51f, 4), (stack, 0xfffffffffffffb7c, 4) MULTIEQUAL (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x520, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x51f, 4), (stack, 0xfffffffffffffb80, 4) MULTIEQUAL (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x520, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x51f, 4), (stack, 0xfffffffffffffb84, 4) MULTIEQUAL (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x520, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x51f, 4), (stack, 0xfffffffffffffb88, 4) MULTIEQUAL (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x520, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x51f, 4), (stack, 0xfffffffffffffb8c, 4) MULTIEQUAL (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x520, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x51f, 4), (stack, 0xfffffffffffffb90, 4) MULTIEQUAL (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x520, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x51f, 4), (stack, 0xfffffffffffffb94, 4) MULTIEQUAL (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4)]
[(stack, 0xfffffffffffffb98, 4) INDIRECT (stack, 0xfffffffffffffb98, 4) , (const, 0x520, 4), (stack, 0xfffffffffffffb98, 4) INDIRECT (stack, 0xfffffffffffffb98, 4) , (const, 0x51f, 4), (stack, 0xfffffffffffffb98, 4) MULTIEQUAL (stack, 0xfffffffffffffb98, 4) , (stack, 0xfffffffffffffb98, 4) , (stack, 0xfffffffffffffb98, 4) , (stack, 0xfffffffffffffb98, 4)]
[(stack, 0xfffffffffffffb9c, 4) INDIRECT (stack, 0xfffffffffffffb9c, 4) , (const, 0x520, 4), (stack, 0xfffffffffffffb9c, 4) INDIRECT (stack, 0xfffffffffffffb9c, 4) , (const, 0x51f, 4), (stack, 0xfffffffffffffb9c, 4) MULTIEQUAL (stack, 0xfffffffffffffb9c, 4) , (stack, 0xfffffffffffffb9c, 4) , (stack, 0xfffffffffffffb9c, 4) , (stack, 0xfffffffffffffb9c, 4)]
[(stack, 0xfffffffffffffba0, 4) INDIRECT (stack, 0xfffffffffffffba0, 4) , (const, 0x520, 4), (stack, 0xfffffffffffffba0, 4) INDIRECT (stack, 0xfffffffffffffba0, 4) , (const, 0x51f, 4), (stack, 0xfffffffffffffba0, 4) MULTIEQUAL (stack, 0xfffffffffffffba0, 4) , (stack, 0xfffffffffffffba0, 4) , (stack, 0xfffffffffffffba0, 4) , (stack, 0xfffffffffffffba0, 4)]
[(stack, 0xfffffffffffffba4, 4) INDIRECT (stack, 0xfffffffffffffba4, 4) , (const, 0x520, 4), (stack, 0xfffffffffffffba4, 4) INDIRECT (stack, 0xfffffffffffffba4, 4) , (const, 0x51f, 4), (stack, 0xfffffffffffffba4, 4) MULTIEQUAL (stack, 0xfffffffffffffba4, 4) , (stack, 0xfffffffffffffba4, 4) , (stack, 0xfffffffffffffba4, 4) , (stack, 0xfffffffffffffba4, 4)]
[(stack, 0xfffffffffffffba8, 16) INDIRECT (stack, 0xfffffffffffffba8, 16) , (const, 0x520, 4), (stack, 0xfffffffffffffba8, 16) INDIRECT (stack, 0xfffffffffffffba8, 16) , (const, 0x51f, 4), (stack, 0xfffffffffffffba8, 16) MULTIEQUAL (stack, 0xfffffffffffffba8, 16) , (stack, 0xfffffffffffffba8, 16) , (stack, 0xfffffffffffffba8, 16) , (stack, 0xfffffffffffffba8, 16)]
[(stack, 0xfffffffffffffbb8, 4) INDIRECT (stack, 0xfffffffffffffbb8, 4) , (const, 0x520, 4), (stack, 0xfffffffffffffbb8, 4) INDIRECT (stack, 0xfffffffffffffbb8, 4) , (const, 0x51f, 4), (stack, 0xfffffffffffffbb8, 4) MULTIEQUAL (stack, 0xfffffffffffffbb8, 4) , (stack, 0xfffffffffffffbb8, 4) , (stack, 0xfffffffffffffbb8, 4) , (stack, 0xfffffffffffffbb8, 4)]
[(stack, 0xfffffffffffffbbc, 4) INDIRECT (stack, 0xfffffffffffffbbc, 4) , (const, 0x520, 4), (stack, 0xfffffffffffffbbc, 4) INDIRECT (stack, 0xfffffffffffffbbc, 4) , (const, 0x51f, 4), (stack, 0xfffffffffffffbbc, 4) MULTIEQUAL (stack, 0xfffffffffffffbbc, 4) , (stack, 0xfffffffffffffbbc, 4) , (stack, 0xfffffffffffffbbc, 4) , (stack, 0xfffffffffffffbbc, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x520, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x51f, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CALL (ram, 0x142250, 8) , (unique, 0x10000ed5, 8) , (unique, 0x10000e9d, 8) , (const, 0x8, 8) , (unique, 0x10000628, 8) , (unique, 0x3200, 8), (unique, 0x10000628, 8) PTRSUB (const, 0x0, 8) , (const, 0x206b80, 8), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffb68, 8), (unique, 0x10000e9d, 8) COPY (stack, 0xfffffffffffffae8, 8), (unique, 0x10000ed5, 8) COPY (stack, 0xfffffffffffffb28, 8), (stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8), (stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[ ---  CBRANCH (ram, 0x2086a0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4f08f8, 4) , (const, 0x0, 4), (ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x520, 4), (ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[ ---  CALLOTHER (const, 0x11, 4)]
[(unique, 0x100010a5, 4) COPY (unique, 0x10000dfa, 4), (unique, 0x10000dfa, 4) INT_ADD (ram, 0x4ee040, 4) , (const, 0xffffffff, 4)]
[ ---  CBRANCH (ram, 0x2086c2, 1) , (unique, 0x10000dfe, 1), (unique, 0x10000dfe, 1) INT_NOTEQUAL (unique, 0x10000dfa, 4) , (const, 0x0, 4), (unique, 0x10000dfa, 4) INT_ADD (ram, 0x4ee040, 4) , (const, 0xffffffff, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001404, 8) , (const, 0x2086bb, 8), (unique, 0x10001404, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xffffffffffffff78, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x544, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x544, 4)]
[(ram, 0x4ee044, 4) INDIRECT (ram, 0x4ee044, 4) , (const, 0x544, 4)]
[(ram, 0x4ee050, 8) INDIRECT (ram, 0x4ee050, 8) , (const, 0x544, 4)]
[(ram, 0x4ee058, 8) INDIRECT (ram, 0x4ee058, 8) , (const, 0x544, 4)]
[(ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x544, 4)]
[(ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x544, 4)]
[(ram, 0x4f0870, 8) INDIRECT (ram, 0x4f0870, 8) , (const, 0x544, 4)]
[(ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x544, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x544, 4)]
[(stack, 0xfffffffffffffac4, 4) INDIRECT (stack, 0xfffffffffffffac4, 4) , (const, 0x544, 4), (stack, 0xfffffffffffffac4, 4) INDIRECT (stack, 0xfffffffffffffac4, 4) , (const, 0x543, 4)]
[(stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x544, 4), (stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x543, 4)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x544, 4), (stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x543, 4)]
[(stack, 0xfffffffffffffad8, 8) INDIRECT (stack, 0xfffffffffffffad8, 8) , (const, 0x544, 4), (stack, 0xfffffffffffffad8, 8) INDIRECT (stack, 0xfffffffffffffad8, 8) , (const, 0x543, 4)]
[(stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x544, 4), (stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x543, 4)]
[(stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x544, 4), (stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x543, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x544, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x543, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x544, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x543, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x544, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x543, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x544, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x543, 4)]
[(stack, 0xfffffffffffffb08, 4) INDIRECT (stack, 0xfffffffffffffb08, 4) , (const, 0x544, 4), (stack, 0xfffffffffffffb08, 4) INDIRECT (stack, 0xfffffffffffffb08, 4) , (const, 0x543, 4)]
[(stack, 0xfffffffffffffb0f, 1) INDIRECT (stack, 0xfffffffffffffb0f, 1) , (const, 0x544, 4), (stack, 0xfffffffffffffb0f, 1) INDIRECT (stack, 0xfffffffffffffb0f, 1) , (const, 0x543, 4)]
[(stack, 0xfffffffffffffb10, 4) INDIRECT (stack, 0xfffffffffffffb10, 4) , (const, 0x544, 4), (stack, 0xfffffffffffffb10, 4) INDIRECT (stack, 0xfffffffffffffb10, 4) , (const, 0x543, 4)]
[(stack, 0xfffffffffffffb14, 4) INDIRECT (stack, 0xfffffffffffffb14, 4) , (const, 0x544, 4), (stack, 0xfffffffffffffb14, 4) INDIRECT (stack, 0xfffffffffffffb14, 4) , (const, 0x543, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x544, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x543, 4)]
[(stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x544, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x543, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x544, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x543, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x544, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x543, 4)]
[(stack, 0xfffffffffffffb3a, 1) INDIRECT (stack, 0xfffffffffffffb3a, 1) , (const, 0x544, 4), (stack, 0xfffffffffffffb3a, 1) INDIRECT (stack, 0xfffffffffffffb3a, 1) , (const, 0x543, 4)]
[(stack, 0xfffffffffffffb3b, 1) INDIRECT (stack, 0xfffffffffffffb3b, 1) , (const, 0x544, 4), (stack, 0xfffffffffffffb3b, 1) INDIRECT (stack, 0xfffffffffffffb3b, 1) , (const, 0x543, 4)]
[(stack, 0xfffffffffffffb3c, 4) INDIRECT (stack, 0xfffffffffffffb3c, 4) , (const, 0x544, 4), (stack, 0xfffffffffffffb3c, 4) INDIRECT (stack, 0xfffffffffffffb3c, 4) , (const, 0x543, 4)]
[(stack, 0xfffffffffffffb40, 8) INDIRECT (stack, 0xfffffffffffffb40, 8) , (const, 0x544, 4), (stack, 0xfffffffffffffb40, 8) INDIRECT (stack, 0xfffffffffffffb40, 8) , (const, 0x543, 4)]
[(stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x544, 4), (stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x543, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x544, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x543, 4)]
[(stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x544, 4), (stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x543, 4)]
[(stack, 0xfffffffffffffb60, 4) INDIRECT (stack, 0xfffffffffffffb60, 4) , (const, 0x544, 4), (stack, 0xfffffffffffffb60, 4) INDIRECT (stack, 0xfffffffffffffb60, 4) , (const, 0x543, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x544, 4), (stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x543, 4)]
[(stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x544, 4), (stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x543, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x544, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x543, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x544, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x543, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x544, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x543, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x544, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x543, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x544, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x543, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x544, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x543, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x544, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x543, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x544, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x543, 4)]
[(stack, 0xfffffffffffffb98, 4) INDIRECT (stack, 0xfffffffffffffb98, 4) , (const, 0x544, 4), (stack, 0xfffffffffffffb98, 4) INDIRECT (stack, 0xfffffffffffffb98, 4) , (const, 0x543, 4)]
[(stack, 0xfffffffffffffb9c, 4) INDIRECT (stack, 0xfffffffffffffb9c, 4) , (const, 0x544, 4), (stack, 0xfffffffffffffb9c, 4) INDIRECT (stack, 0xfffffffffffffb9c, 4) , (const, 0x543, 4)]
[(stack, 0xfffffffffffffba0, 4) INDIRECT (stack, 0xfffffffffffffba0, 4) , (const, 0x544, 4), (stack, 0xfffffffffffffba0, 4) INDIRECT (stack, 0xfffffffffffffba0, 4) , (const, 0x543, 4)]
[(stack, 0xfffffffffffffba4, 4) INDIRECT (stack, 0xfffffffffffffba4, 4) , (const, 0x544, 4), (stack, 0xfffffffffffffba4, 4) INDIRECT (stack, 0xfffffffffffffba4, 4) , (const, 0x543, 4)]
[(stack, 0xfffffffffffffba8, 16) INDIRECT (stack, 0xfffffffffffffba8, 16) , (const, 0x544, 4), (stack, 0xfffffffffffffba8, 16) INDIRECT (stack, 0xfffffffffffffba8, 16) , (const, 0x543, 4)]
[(stack, 0xfffffffffffffbb8, 4) INDIRECT (stack, 0xfffffffffffffbb8, 4) , (const, 0x544, 4), (stack, 0xfffffffffffffbb8, 4) INDIRECT (stack, 0xfffffffffffffbb8, 4) , (const, 0x543, 4)]
[(stack, 0xfffffffffffffbbc, 4) INDIRECT (stack, 0xfffffffffffffbbc, 4) , (const, 0x544, 4), (stack, 0xfffffffffffffbbc, 4) INDIRECT (stack, 0xfffffffffffffbbc, 4) , (const, 0x543, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x544, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x543, 4)]
[ ---  CALL (ram, 0x2306c0, 8) , (unique, 0x10000668, 8), (unique, 0x10000668, 8) PTRSUB (const, 0x0, 8) , (const, 0x4ee040, 8)]
[(unique, 0x100010a1, 4) COPY (ram, 0x4ee040, 4), (ram, 0x4ee040, 4) INDIRECT (ram, 0x4ee040, 4) , (const, 0x544, 4), (ram, 0x4ee040, 4) INT_ADD (ram, 0x4ee040, 4) , (const, 0xffffffff, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000140c, 8) , (const, 0x20844c, 8), (unique, 0x1000140c, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x3d0, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x3d0, 4)]
[(ram, 0x4ee044, 4) INDIRECT (ram, 0x4ee044, 4) , (const, 0x3d0, 4)]
[(ram, 0x4ee050, 8) INDIRECT (ram, 0x4ee050, 8) , (const, 0x3d0, 4)]
[(ram, 0x4ee058, 8) INDIRECT (ram, 0x4ee058, 8) , (const, 0x3d0, 4)]
[(ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x3d0, 4)]
[(ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x3d0, 4)]
[(ram, 0x4f0870, 8) INDIRECT (ram, 0x4f0870, 8) , (const, 0x3d0, 4)]
[(ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x3d0, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x3d0, 4)]
[(stack, 0xfffffffffffffac4, 4) INDIRECT (stack, 0xfffffffffffffac4, 4) , (const, 0x3d0, 4), (stack, 0xfffffffffffffac4, 4) INDIRECT (stack, 0xfffffffffffffac4, 4) , (const, 0x3cf, 4)]
[(stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x3d0, 4), (stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x3cf, 4)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x3d0, 4), (stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x3cf, 4)]
[(stack, 0xfffffffffffffad8, 8) INDIRECT (stack, 0xfffffffffffffad8, 8) , (const, 0x3d0, 4), (stack, 0xfffffffffffffad8, 8) INDIRECT (stack, 0xfffffffffffffad8, 8) , (const, 0x3cf, 4)]
[(stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x3d0, 4), (stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x3cf, 4)]
[(stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x3d0, 4), (stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x3cf, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x3d0, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x3cf, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x3d0, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x3cf, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x3d0, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x3cf, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x3d0, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x3cf, 4)]
[(stack, 0xfffffffffffffb08, 4) INDIRECT (stack, 0xfffffffffffffb08, 4) , (const, 0x3d0, 4), (stack, 0xfffffffffffffb08, 4) INDIRECT (stack, 0xfffffffffffffb08, 4) , (const, 0x3cf, 4)]
[(stack, 0xfffffffffffffb0f, 1) INDIRECT (stack, 0xfffffffffffffb0f, 1) , (const, 0x3d0, 4), (stack, 0xfffffffffffffb0f, 1) INDIRECT (stack, 0xfffffffffffffb0f, 1) , (const, 0x3cf, 4)]
[(stack, 0xfffffffffffffb10, 4) INDIRECT (stack, 0xfffffffffffffb10, 4) , (const, 0x3d0, 4), (stack, 0xfffffffffffffb10, 4) INDIRECT (stack, 0xfffffffffffffb10, 4) , (const, 0x3cf, 4)]
[(stack, 0xfffffffffffffb14, 4) INDIRECT (stack, 0xfffffffffffffb14, 4) , (const, 0x3d0, 4), (stack, 0xfffffffffffffb14, 4) INDIRECT (stack, 0xfffffffffffffb14, 4) , (const, 0x3cf, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x3d0, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x3cf, 4)]
[(stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x3d0, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x3cf, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x3d0, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x3cf, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x3d0, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x3cf, 4)]
[(stack, 0xfffffffffffffb3a, 1) INDIRECT (stack, 0xfffffffffffffb3a, 1) , (const, 0x3d0, 4), (stack, 0xfffffffffffffb3a, 1) INDIRECT (stack, 0xfffffffffffffb3a, 1) , (const, 0x3cf, 4)]
[(stack, 0xfffffffffffffb3b, 1) INDIRECT (stack, 0xfffffffffffffb3b, 1) , (const, 0x3d0, 4), (stack, 0xfffffffffffffb3b, 1) INDIRECT (stack, 0xfffffffffffffb3b, 1) , (const, 0x3cf, 4)]
[(stack, 0xfffffffffffffb3c, 4) INDIRECT (stack, 0xfffffffffffffb3c, 4) , (const, 0x3d0, 4), (stack, 0xfffffffffffffb3c, 4) INDIRECT (stack, 0xfffffffffffffb3c, 4) , (const, 0x3cf, 4)]
[(stack, 0xfffffffffffffb40, 8) INDIRECT (stack, 0xfffffffffffffb40, 8) , (const, 0x3d0, 4), (stack, 0xfffffffffffffb40, 8) INDIRECT (stack, 0xfffffffffffffb40, 8) , (const, 0x3cf, 4)]
[(stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x3d0, 4), (stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x3cf, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x3d0, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x3cf, 4)]
[(stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x3d0, 4), (stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x3cf, 4)]
[(stack, 0xfffffffffffffb60, 4) INDIRECT (stack, 0xfffffffffffffb60, 4) , (const, 0x3d0, 4), (stack, 0xfffffffffffffb60, 4) INDIRECT (stack, 0xfffffffffffffb60, 4) , (const, 0x3cf, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x3d0, 4), (stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x3cf, 4)]
[(stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x3d0, 4), (stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x3cf, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x3d0, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x3cf, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x3d0, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x3cf, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x3d0, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x3cf, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x3d0, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x3cf, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x3d0, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x3cf, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x3d0, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x3cf, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x3d0, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x3cf, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x3d0, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x3cf, 4)]
[(stack, 0xfffffffffffffb98, 4) INDIRECT (stack, 0xfffffffffffffb98, 4) , (const, 0x3d0, 4), (stack, 0xfffffffffffffb98, 4) INDIRECT (stack, 0xfffffffffffffb98, 4) , (const, 0x3cf, 4)]
[(stack, 0xfffffffffffffb9c, 4) INDIRECT (stack, 0xfffffffffffffb9c, 4) , (const, 0x3d0, 4), (stack, 0xfffffffffffffb9c, 4) INDIRECT (stack, 0xfffffffffffffb9c, 4) , (const, 0x3cf, 4)]
[(stack, 0xfffffffffffffba0, 4) INDIRECT (stack, 0xfffffffffffffba0, 4) , (const, 0x3d0, 4), (stack, 0xfffffffffffffba0, 4) INDIRECT (stack, 0xfffffffffffffba0, 4) , (const, 0x3cf, 4)]
[(stack, 0xfffffffffffffba4, 4) INDIRECT (stack, 0xfffffffffffffba4, 4) , (const, 0x3d0, 4), (stack, 0xfffffffffffffba4, 4) INDIRECT (stack, 0xfffffffffffffba4, 4) , (const, 0x3cf, 4)]
[(stack, 0xfffffffffffffba8, 16) INDIRECT (stack, 0xfffffffffffffba8, 16) , (const, 0x3d0, 4), (stack, 0xfffffffffffffba8, 16) INDIRECT (stack, 0xfffffffffffffba8, 16) , (const, 0x3cf, 4)]
[(stack, 0xfffffffffffffbb8, 4) INDIRECT (stack, 0xfffffffffffffbb8, 4) , (const, 0x3d0, 4), (stack, 0xfffffffffffffbb8, 4) INDIRECT (stack, 0xfffffffffffffbb8, 4) , (const, 0x3cf, 4)]
[(stack, 0xfffffffffffffbbc, 4) INDIRECT (stack, 0xfffffffffffffbbc, 4) , (const, 0x3d0, 4), (stack, 0xfffffffffffffbbc, 4) INDIRECT (stack, 0xfffffffffffffbbc, 4) , (const, 0x3cf, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x3d0, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x3cf, 4)]
[ ---  CALL (ram, 0x142250, 8) , (unique, 0x10000ecd, 8) , (unique, 0x10000e95, 8) , (const, 0x8, 8) , (unique, 0x10000620, 8) , (unique, 0x3200, 8), (unique, 0x10000620, 8) PTRSUB (const, 0x0, 8) , (const, 0x206b80, 8), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffb68, 8)]
[(unique, 0x1000109d, 4) COPY (ram, 0x4ee040, 4), (ram, 0x4ee040, 4) INDIRECT (ram, 0x4ee040, 4) , (const, 0x3d0, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbbc, 4) MULTIEQUAL (stack, 0xfffffffffffffbbc, 4) , (stack, 0xfffffffffffffbbc, 4) , (stack, 0xfffffffffffffbbc, 4)]
[(stack, 0xfffffffffffffbb8, 4) MULTIEQUAL (stack, 0xfffffffffffffbb8, 4) , (stack, 0xfffffffffffffbb8, 4) , (stack, 0xfffffffffffffbb8, 4)]
[(stack, 0xfffffffffffffba8, 16) MULTIEQUAL (stack, 0xfffffffffffffba8, 16) , (stack, 0xfffffffffffffba8, 16) , (stack, 0xfffffffffffffba8, 16)]
[(stack, 0xfffffffffffffba4, 4) MULTIEQUAL (stack, 0xfffffffffffffba4, 4) , (stack, 0xfffffffffffffba4, 4) , (stack, 0xfffffffffffffba4, 4)]
[(stack, 0xfffffffffffffba0, 4) MULTIEQUAL (stack, 0xfffffffffffffba0, 4) , (stack, 0xfffffffffffffba0, 4) , (stack, 0xfffffffffffffba0, 4)]
[(stack, 0xfffffffffffffb9c, 4) MULTIEQUAL (stack, 0xfffffffffffffb9c, 4) , (stack, 0xfffffffffffffb9c, 4) , (stack, 0xfffffffffffffb9c, 4)]
[(stack, 0xfffffffffffffb98, 4) MULTIEQUAL (stack, 0xfffffffffffffb98, 4) , (stack, 0xfffffffffffffb98, 4) , (stack, 0xfffffffffffffb98, 4)]
[(stack, 0xfffffffffffffb94, 4) MULTIEQUAL (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4)]
[(stack, 0xfffffffffffffb90, 4) MULTIEQUAL (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4)]
[(stack, 0xfffffffffffffb8c, 4) MULTIEQUAL (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4)]
[(stack, 0xfffffffffffffb88, 4) MULTIEQUAL (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4)]
[(stack, 0xfffffffffffffb84, 4) MULTIEQUAL (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4)]
[(stack, 0xfffffffffffffb80, 4) MULTIEQUAL (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4)]
[(stack, 0xfffffffffffffb7c, 4) MULTIEQUAL (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb70, 4) MULTIEQUAL (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4)]
[(stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb60, 4) MULTIEQUAL (stack, 0xfffffffffffffb60, 4) , (stack, 0xfffffffffffffb60, 4) , (stack, 0xfffffffffffffb60, 4)]
[(stack, 0xfffffffffffffb58, 8) MULTIEQUAL (stack, 0xfffffffffffffb58, 8) , (stack, 0xfffffffffffffb58, 8) , (stack, 0xfffffffffffffb58, 8)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb3c, 4) MULTIEQUAL (stack, 0xfffffffffffffb3c, 4) , (stack, 0xfffffffffffffb3c, 4) , (stack, 0xfffffffffffffb3c, 4)]
[(stack, 0xfffffffffffffb3b, 1) MULTIEQUAL (stack, 0xfffffffffffffb3b, 1) , (stack, 0xfffffffffffffb3b, 1) , (stack, 0xfffffffffffffb3b, 1)]
[(stack, 0xfffffffffffffb3a, 1) MULTIEQUAL (stack, 0xfffffffffffffb3a, 1) , (stack, 0xfffffffffffffb3a, 1) , (stack, 0xfffffffffffffb3a, 1)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb20, 8) MULTIEQUAL (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb14, 4) MULTIEQUAL (stack, 0xfffffffffffffb14, 4) , (stack, 0xfffffffffffffb14, 4) , (stack, 0xfffffffffffffb14, 4)]
[(stack, 0xfffffffffffffb0f, 1) MULTIEQUAL (stack, 0xfffffffffffffb0f, 1) , (stack, 0xfffffffffffffb0f, 1) , (stack, 0xfffffffffffffb0f, 1)]
[(stack, 0xfffffffffffffb08, 4) MULTIEQUAL (stack, 0xfffffffffffffb08, 4) , (stack, 0xfffffffffffffb08, 4) , (stack, 0xfffffffffffffb08, 4)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae4, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[(stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffad8, 8) MULTIEQUAL (stack, 0xfffffffffffffad8, 8) , (stack, 0xfffffffffffffad8, 8) , (stack, 0xfffffffffffffad8, 8)]
[(stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffac8, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffac4, 4) MULTIEQUAL (stack, 0xfffffffffffffac4, 4) , (stack, 0xfffffffffffffac4, 4) , (stack, 0xfffffffffffffac4, 4)]
[(ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(ram, 0x4f08e8, 4) MULTIEQUAL (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4)]
[(ram, 0x4f0870, 8) MULTIEQUAL (ram, 0x4f0870, 8) , (ram, 0x4f0870, 8) , (ram, 0x4f0870, 8)]
[(ram, 0x4ee064, 4) MULTIEQUAL (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4)]
[(ram, 0x4ee060, 4) MULTIEQUAL (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4)]
[(ram, 0x4ee058, 8) MULTIEQUAL (ram, 0x4ee058, 8) , (ram, 0x4ee058, 8) , (ram, 0x4ee058, 8)]
[(ram, 0x4ee050, 8) MULTIEQUAL (ram, 0x4ee050, 8) , (ram, 0x4ee050, 8) , (ram, 0x4ee050, 8)]
[(ram, 0x4ee044, 4) MULTIEQUAL (ram, 0x4ee044, 4) , (ram, 0x4ee044, 4) , (ram, 0x4ee044, 4)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4ee040, 4) COPY (unique, 0x100010a9, 4), (unique, 0x100010a9, 4) MULTIEQUAL (unique, 0x1000109d, 4) , (unique, 0x100010a1, 4) , (unique, 0x100010a5, 4)]
[(unique, 0x10000ead, 8) COPY (stack, 0xfffffffffffffb00, 8), (stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffb40, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10001414, 8), (unique, 0x10001414, 8) CAST (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (stack, 0xfffffffffffffb00, 8) , (register, 0x0, 8) , (const, 0x1, 8), (register, 0x0, 8) INT_MULT (unique, 0xbd80, 8) , (const, 0x30, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (stack, 0xfffffffffffffb28, 8), (stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8), (stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(unique, 0x10000f0d, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10001414, 8), (unique, 0x10001414, 8) CAST (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (stack, 0xfffffffffffffb00, 8) , (register, 0x0, 8) , (const, 0x1, 8), (register, 0x0, 8) INT_MULT (unique, 0xbd80, 8) , (const, 0x30, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (stack, 0xfffffffffffffb28, 8), (stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8), (stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[ ---  CBRANCH (ram, 0x2082a0, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (const, 0x1, 4) , (stack, 0xfffffffffffffb10, 4), (stack, 0xfffffffffffffb10, 4) MULTIEQUAL (stack, 0xfffffffffffffb10, 4) , (stack, 0xfffffffffffffb10, 4) , (stack, 0xfffffffffffffb10, 4)]
[(unique, 0x3100, 8) PTRADD (stack, 0xfffffffffffffb28, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[(unique, 0x3a00, 8) PTRADD (stack, 0xfffffffffffffb28, 8) , (unique, 0x10000c50, 8) , (const, 0x8, 8), (unique, 0x10000c50, 8) INT_ADD (register, 0x10, 8) , (const, 0x2, 8), (register, 0x10, 8) INT_ZEXT (unique, 0x3100, 4), (unique, 0x3100, 4) INT_SUB (stack, 0xfffffffffffffb10, 4) , (const, 0x2, 4)]
[(unique, 0x10000efd, 8) COPY (unique, 0xbd80, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x464, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4ee040, 4) INDIRECT (ram, 0x4ee040, 4) , (const, 0x464, 4), (ram, 0x4ee040, 4) MULTIEQUAL (ram, 0x4ee040, 4) , (ram, 0x4ee040, 4)]
[(ram, 0x4ee044, 4) INDIRECT (ram, 0x4ee044, 4) , (const, 0x464, 4), (ram, 0x4ee044, 4) MULTIEQUAL (ram, 0x4ee044, 4) , (ram, 0x4ee044, 4)]
[(ram, 0x4ee050, 8) INDIRECT (ram, 0x4ee050, 8) , (const, 0x464, 4), (ram, 0x4ee050, 8) MULTIEQUAL (ram, 0x4ee050, 8) , (ram, 0x4ee050, 8)]
[(ram, 0x4ee058, 8) INDIRECT (ram, 0x4ee058, 8) , (const, 0x464, 4), (ram, 0x4ee058, 8) MULTIEQUAL (ram, 0x4ee058, 8) , (ram, 0x4ee058, 8)]
[(ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x464, 4), (ram, 0x4ee060, 4) MULTIEQUAL (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4)]
[(ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x464, 4), (ram, 0x4ee064, 4) MULTIEQUAL (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4)]
[(ram, 0x4f0870, 8) INDIRECT (ram, 0x4f0870, 8) , (const, 0x464, 4), (ram, 0x4f0870, 8) MULTIEQUAL (ram, 0x4f0870, 8) , (ram, 0x4f0870, 8)]
[(ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x464, 4), (ram, 0x4f08e8, 4) MULTIEQUAL (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x464, 4), (ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0xbd80, 8), (unique, 0x3100, 8) PTRSUB (register, 0x8, 8) , (const, 0x28, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x1000141c, 8), (unique, 0x1000141c, 8) CAST (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (stack, 0xfffffffffffffb00, 8) , (register, 0x10, 8) , (const, 0x1, 8), (register, 0x10, 8) INT_MULT (unique, 0xbd80, 8) , (const, 0x30, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0x0, 8), (register, 0x8, 8) MULTIEQUAL (unique, 0x10000efd, 8) , (unique, 0x10000f05, 8)]
[(unique, 0x10000f05, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x1000141c, 8), (unique, 0x1000141c, 8) CAST (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (stack, 0xfffffffffffffb00, 8) , (register, 0x10, 8) , (const, 0x1, 8), (register, 0x10, 8) INT_MULT (unique, 0xbd80, 8) , (const, 0x30, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x208490, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x3a00, 8) , (register, 0x0, 8), (register, 0x0, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x8, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (const, 0x0, 8), (unique, 0x3100, 8) PTRSUB (register, 0x10, 8) , (const, 0x28, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0x10000f0d, 8) , (unique, 0xbd80, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x471, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x46e, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4ee040, 4) INDIRECT (ram, 0x4ee040, 4) , (const, 0x471, 4), (ram, 0x4ee040, 4) INDIRECT (ram, 0x4ee040, 4) , (const, 0x46e, 4), (ram, 0x4ee040, 4) MULTIEQUAL (ram, 0x4ee040, 4) , (ram, 0x4ee040, 4)]
[(ram, 0x4ee044, 4) INDIRECT (ram, 0x4ee044, 4) , (const, 0x471, 4), (ram, 0x4ee044, 4) INDIRECT (ram, 0x4ee044, 4) , (const, 0x46e, 4), (ram, 0x4ee044, 4) MULTIEQUAL (ram, 0x4ee044, 4) , (ram, 0x4ee044, 4)]
[(ram, 0x4ee050, 8) INDIRECT (ram, 0x4ee050, 8) , (const, 0x471, 4), (ram, 0x4ee050, 8) INDIRECT (ram, 0x4ee050, 8) , (const, 0x46e, 4), (ram, 0x4ee050, 8) MULTIEQUAL (ram, 0x4ee050, 8) , (ram, 0x4ee050, 8)]
[(ram, 0x4ee058, 8) INDIRECT (ram, 0x4ee058, 8) , (const, 0x471, 4), (ram, 0x4ee058, 8) INDIRECT (ram, 0x4ee058, 8) , (const, 0x46e, 4), (ram, 0x4ee058, 8) MULTIEQUAL (ram, 0x4ee058, 8) , (ram, 0x4ee058, 8)]
[(ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x471, 4), (ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x46e, 4), (ram, 0x4ee060, 4) MULTIEQUAL (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4)]
[(ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x471, 4), (ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x46e, 4), (ram, 0x4ee064, 4) MULTIEQUAL (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4)]
[(ram, 0x4f0870, 8) INDIRECT (ram, 0x4f0870, 8) , (const, 0x471, 4), (ram, 0x4f0870, 8) INDIRECT (ram, 0x4f0870, 8) , (const, 0x46e, 4), (ram, 0x4f0870, 8) MULTIEQUAL (ram, 0x4f0870, 8) , (ram, 0x4f0870, 8)]
[(ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x471, 4), (ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x46e, 4), (ram, 0x4f08e8, 4) MULTIEQUAL (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x471, 4), (ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x46e, 4), (ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (stack, 0xfffffffffffffb30, 8), (unique, 0x3100, 8) PTRSUB (unique, 0xbd80, 8) , (const, 0x20, 8)]
[ ---  CBRANCH (ram, 0x2082d1, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xfffffffffffffb08, 4) , (const, 0x0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001424, 8) , (const, 0x2082d1, 8), (unique, 0x10001424, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x486, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x486, 4)]
[(ram, 0x4ee040, 4) INDIRECT (ram, 0x4ee040, 4) , (const, 0x486, 4)]
[(ram, 0x4ee044, 4) INDIRECT (ram, 0x4ee044, 4) , (const, 0x486, 4)]
[(ram, 0x4ee050, 8) INDIRECT (ram, 0x4ee050, 8) , (const, 0x486, 4)]
[(ram, 0x4ee058, 8) INDIRECT (ram, 0x4ee058, 8) , (const, 0x486, 4)]
[(ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x486, 4)]
[(ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x486, 4)]
[(ram, 0x4f0870, 8) INDIRECT (ram, 0x4f0870, 8) , (const, 0x486, 4)]
[(ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x486, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x486, 4)]
[(stack, 0xfffffffffffffac4, 4) INDIRECT (stack, 0xfffffffffffffac4, 4) , (const, 0x486, 4), (stack, 0xfffffffffffffac4, 4) INDIRECT (stack, 0xfffffffffffffac4, 4) , (const, 0x485, 4)]
[(stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x486, 4), (stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x485, 4)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x486, 4), (stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x485, 4)]
[(stack, 0xfffffffffffffad8, 8) INDIRECT (stack, 0xfffffffffffffad8, 8) , (const, 0x486, 4), (stack, 0xfffffffffffffad8, 8) INDIRECT (stack, 0xfffffffffffffad8, 8) , (const, 0x485, 4)]
[(stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x486, 4), (stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x485, 4)]
[(stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x486, 4), (stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x485, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x486, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x485, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x486, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x485, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x486, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x485, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x486, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x485, 4)]
[(stack, 0xfffffffffffffb08, 4) INDIRECT (stack, 0xfffffffffffffb08, 4) , (const, 0x486, 4), (stack, 0xfffffffffffffb08, 4) INDIRECT (stack, 0xfffffffffffffb08, 4) , (const, 0x485, 4)]
[(stack, 0xfffffffffffffb0f, 1) INDIRECT (stack, 0xfffffffffffffb0f, 1) , (const, 0x486, 4), (stack, 0xfffffffffffffb0f, 1) INDIRECT (stack, 0xfffffffffffffb0f, 1) , (const, 0x485, 4)]
[(stack, 0xfffffffffffffb10, 4) INDIRECT (stack, 0xfffffffffffffb10, 4) , (const, 0x486, 4), (stack, 0xfffffffffffffb10, 4) INDIRECT (stack, 0xfffffffffffffb10, 4) , (const, 0x485, 4)]
[(stack, 0xfffffffffffffb14, 4) INDIRECT (stack, 0xfffffffffffffb14, 4) , (const, 0x486, 4), (stack, 0xfffffffffffffb14, 4) INDIRECT (stack, 0xfffffffffffffb14, 4) , (const, 0x485, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x486, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x485, 4)]
[(stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x486, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x485, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x486, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x485, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x486, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x485, 4)]
[(stack, 0xfffffffffffffb3a, 1) INDIRECT (stack, 0xfffffffffffffb3a, 1) , (const, 0x486, 4), (stack, 0xfffffffffffffb3a, 1) INDIRECT (stack, 0xfffffffffffffb3a, 1) , (const, 0x485, 4)]
[(stack, 0xfffffffffffffb3b, 1) INDIRECT (stack, 0xfffffffffffffb3b, 1) , (const, 0x486, 4), (stack, 0xfffffffffffffb3b, 1) INDIRECT (stack, 0xfffffffffffffb3b, 1) , (const, 0x485, 4)]
[(stack, 0xfffffffffffffb3c, 4) INDIRECT (stack, 0xfffffffffffffb3c, 4) , (const, 0x486, 4), (stack, 0xfffffffffffffb3c, 4) INDIRECT (stack, 0xfffffffffffffb3c, 4) , (const, 0x485, 4)]
[(stack, 0xfffffffffffffb40, 8) INDIRECT (stack, 0xfffffffffffffb40, 8) , (const, 0x486, 4), (stack, 0xfffffffffffffb40, 8) INDIRECT (stack, 0xfffffffffffffb40, 8) , (const, 0x485, 4)]
[(stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x486, 4), (stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x485, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x486, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x485, 4)]
[(stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x486, 4), (stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x485, 4)]
[(stack, 0xfffffffffffffb60, 4) INDIRECT (stack, 0xfffffffffffffb60, 4) , (const, 0x486, 4), (stack, 0xfffffffffffffb60, 4) INDIRECT (stack, 0xfffffffffffffb60, 4) , (const, 0x485, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x486, 4), (stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x485, 4)]
[(stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x486, 4), (stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x485, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x486, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x485, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x486, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x485, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x486, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x485, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x486, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x485, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x486, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x485, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x486, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x485, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x486, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x485, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x486, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x485, 4)]
[(stack, 0xfffffffffffffb98, 4) INDIRECT (stack, 0xfffffffffffffb98, 4) , (const, 0x486, 4), (stack, 0xfffffffffffffb98, 4) INDIRECT (stack, 0xfffffffffffffb98, 4) , (const, 0x485, 4)]
[(stack, 0xfffffffffffffb9c, 4) INDIRECT (stack, 0xfffffffffffffb9c, 4) , (const, 0x486, 4), (stack, 0xfffffffffffffb9c, 4) INDIRECT (stack, 0xfffffffffffffb9c, 4) , (const, 0x485, 4)]
[(stack, 0xfffffffffffffba0, 4) INDIRECT (stack, 0xfffffffffffffba0, 4) , (const, 0x486, 4), (stack, 0xfffffffffffffba0, 4) INDIRECT (stack, 0xfffffffffffffba0, 4) , (const, 0x485, 4)]
[(stack, 0xfffffffffffffba4, 4) INDIRECT (stack, 0xfffffffffffffba4, 4) , (const, 0x486, 4), (stack, 0xfffffffffffffba4, 4) INDIRECT (stack, 0xfffffffffffffba4, 4) , (const, 0x485, 4)]
[(stack, 0xfffffffffffffba8, 16) INDIRECT (stack, 0xfffffffffffffba8, 16) , (const, 0x486, 4), (stack, 0xfffffffffffffba8, 16) INDIRECT (stack, 0xfffffffffffffba8, 16) , (const, 0x485, 4)]
[(stack, 0xfffffffffffffbb8, 4) INDIRECT (stack, 0xfffffffffffffbb8, 4) , (const, 0x486, 4), (stack, 0xfffffffffffffbb8, 4) INDIRECT (stack, 0xfffffffffffffbb8, 4) , (const, 0x485, 4)]
[(stack, 0xfffffffffffffbbc, 4) INDIRECT (stack, 0xfffffffffffffbbc, 4) , (const, 0x486, 4), (stack, 0xfffffffffffffbbc, 4) INDIRECT (stack, 0xfffffffffffffbbc, 4) , (const, 0x485, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x486, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x485, 4)]
[ ---  CALL (ram, 0x1212c8, 8) , (unique, 0x10000ead, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000142c, 8) , (const, 0x2082dd, 8), (unique, 0x1000142c, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8), (register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x48c, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x48c, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4ee040, 4) INDIRECT (ram, 0x4ee040, 4) , (const, 0x48c, 4), (ram, 0x4ee040, 4) MULTIEQUAL (ram, 0x4ee040, 4) , (ram, 0x4ee040, 4) , (ram, 0x4ee040, 4)]
[(ram, 0x4ee044, 4) INDIRECT (ram, 0x4ee044, 4) , (const, 0x48c, 4), (ram, 0x4ee044, 4) MULTIEQUAL (ram, 0x4ee044, 4) , (ram, 0x4ee044, 4) , (ram, 0x4ee044, 4)]
[(ram, 0x4ee050, 8) INDIRECT (ram, 0x4ee050, 8) , (const, 0x48c, 4), (ram, 0x4ee050, 8) MULTIEQUAL (ram, 0x4ee050, 8) , (ram, 0x4ee050, 8) , (ram, 0x4ee050, 8)]
[(ram, 0x4ee058, 8) INDIRECT (ram, 0x4ee058, 8) , (const, 0x48c, 4), (ram, 0x4ee058, 8) MULTIEQUAL (ram, 0x4ee058, 8) , (ram, 0x4ee058, 8) , (ram, 0x4ee058, 8)]
[(ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x48c, 4), (ram, 0x4ee060, 4) MULTIEQUAL (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4)]
[(ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x48c, 4), (ram, 0x4ee064, 4) MULTIEQUAL (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4)]
[(ram, 0x4f0870, 8) INDIRECT (ram, 0x4f0870, 8) , (const, 0x48c, 4), (ram, 0x4f0870, 8) MULTIEQUAL (ram, 0x4f0870, 8) , (ram, 0x4f0870, 8) , (ram, 0x4f0870, 8)]
[(ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x48c, 4), (ram, 0x4f08e8, 4) MULTIEQUAL (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x48c, 4), (ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(stack, 0xfffffffffffffac4, 4) INDIRECT (stack, 0xfffffffffffffac4, 4) , (const, 0x48c, 4), (stack, 0xfffffffffffffac4, 4) INDIRECT (stack, 0xfffffffffffffac4, 4) , (const, 0x48b, 4), (stack, 0xfffffffffffffac4, 4) MULTIEQUAL (stack, 0xfffffffffffffac4, 4) , (stack, 0xfffffffffffffac4, 4) , (stack, 0xfffffffffffffac4, 4)]
[(stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x48c, 4), (stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x48b, 4), (stack, 0xfffffffffffffac8, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x48c, 4), (stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x48b, 4), (stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffad8, 8) INDIRECT (stack, 0xfffffffffffffad8, 8) , (const, 0x48c, 4), (stack, 0xfffffffffffffad8, 8) INDIRECT (stack, 0xfffffffffffffad8, 8) , (const, 0x48b, 4), (stack, 0xfffffffffffffad8, 8) MULTIEQUAL (stack, 0xfffffffffffffad8, 8) , (stack, 0xfffffffffffffad8, 8) , (stack, 0xfffffffffffffad8, 8)]
[(stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x48c, 4), (stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x48b, 4), (stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x48c, 4), (stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x48b, 4), (stack, 0xfffffffffffffae4, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x48c, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x48b, 4), (stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x48c, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x48b, 4), (stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x48c, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x48b, 4), (stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x48c, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x48b, 4), (stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffb08, 4) INDIRECT (stack, 0xfffffffffffffb08, 4) , (const, 0x48c, 4), (stack, 0xfffffffffffffb08, 4) INDIRECT (stack, 0xfffffffffffffb08, 4) , (const, 0x48b, 4), (stack, 0xfffffffffffffb08, 4) MULTIEQUAL (stack, 0xfffffffffffffb08, 4) , (stack, 0xfffffffffffffb08, 4) , (stack, 0xfffffffffffffb08, 4)]
[(stack, 0xfffffffffffffb0f, 1) INDIRECT (stack, 0xfffffffffffffb0f, 1) , (const, 0x48c, 4), (stack, 0xfffffffffffffb0f, 1) INDIRECT (stack, 0xfffffffffffffb0f, 1) , (const, 0x48b, 4), (stack, 0xfffffffffffffb0f, 1) MULTIEQUAL (stack, 0xfffffffffffffb0f, 1) , (stack, 0xfffffffffffffb0f, 1) , (stack, 0xfffffffffffffb0f, 1)]
[(stack, 0xfffffffffffffb10, 4) INDIRECT (stack, 0xfffffffffffffb10, 4) , (const, 0x48c, 4), (stack, 0xfffffffffffffb10, 4) INDIRECT (stack, 0xfffffffffffffb10, 4) , (const, 0x48b, 4), (stack, 0xfffffffffffffb10, 4) MULTIEQUAL (stack, 0xfffffffffffffb10, 4) , (stack, 0xfffffffffffffb10, 4) , (stack, 0xfffffffffffffb10, 4)]
[(stack, 0xfffffffffffffb14, 4) INDIRECT (stack, 0xfffffffffffffb14, 4) , (const, 0x48c, 4), (stack, 0xfffffffffffffb14, 4) INDIRECT (stack, 0xfffffffffffffb14, 4) , (const, 0x48b, 4), (stack, 0xfffffffffffffb14, 4) MULTIEQUAL (stack, 0xfffffffffffffb14, 4) , (stack, 0xfffffffffffffb14, 4) , (stack, 0xfffffffffffffb14, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x48c, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x48b, 4), (stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x48c, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x48b, 4), (stack, 0xfffffffffffffb20, 8) MULTIEQUAL (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x48c, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x48b, 4), (stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x48c, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x48b, 4), (stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb3a, 1) INDIRECT (stack, 0xfffffffffffffb3a, 1) , (const, 0x48c, 4), (stack, 0xfffffffffffffb3a, 1) INDIRECT (stack, 0xfffffffffffffb3a, 1) , (const, 0x48b, 4), (stack, 0xfffffffffffffb3a, 1) MULTIEQUAL (stack, 0xfffffffffffffb3a, 1) , (stack, 0xfffffffffffffb3a, 1) , (stack, 0xfffffffffffffb3a, 1)]
[(stack, 0xfffffffffffffb3b, 1) INDIRECT (stack, 0xfffffffffffffb3b, 1) , (const, 0x48c, 4), (stack, 0xfffffffffffffb3b, 1) INDIRECT (stack, 0xfffffffffffffb3b, 1) , (const, 0x48b, 4), (stack, 0xfffffffffffffb3b, 1) MULTIEQUAL (stack, 0xfffffffffffffb3b, 1) , (stack, 0xfffffffffffffb3b, 1) , (stack, 0xfffffffffffffb3b, 1)]
[(stack, 0xfffffffffffffb3c, 4) INDIRECT (stack, 0xfffffffffffffb3c, 4) , (const, 0x48c, 4), (stack, 0xfffffffffffffb3c, 4) INDIRECT (stack, 0xfffffffffffffb3c, 4) , (const, 0x48b, 4), (stack, 0xfffffffffffffb3c, 4) MULTIEQUAL (stack, 0xfffffffffffffb3c, 4) , (stack, 0xfffffffffffffb3c, 4) , (stack, 0xfffffffffffffb3c, 4)]
[(stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x48c, 4), (stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x48b, 4), (stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x48c, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x48b, 4), (stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x48c, 4), (stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x48b, 4), (stack, 0xfffffffffffffb58, 8) MULTIEQUAL (stack, 0xfffffffffffffb58, 8) , (stack, 0xfffffffffffffb58, 8) , (stack, 0xfffffffffffffb58, 8)]
[(stack, 0xfffffffffffffb60, 4) INDIRECT (stack, 0xfffffffffffffb60, 4) , (const, 0x48c, 4), (stack, 0xfffffffffffffb60, 4) INDIRECT (stack, 0xfffffffffffffb60, 4) , (const, 0x48b, 4), (stack, 0xfffffffffffffb60, 4) MULTIEQUAL (stack, 0xfffffffffffffb60, 4) , (stack, 0xfffffffffffffb60, 4) , (stack, 0xfffffffffffffb60, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x48c, 4), (stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x48b, 4), (stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x48c, 4), (stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x48b, 4), (stack, 0xfffffffffffffb70, 4) MULTIEQUAL (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x48c, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x48b, 4), (stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x48c, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x48b, 4), (stack, 0xfffffffffffffb7c, 4) MULTIEQUAL (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x48c, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x48b, 4), (stack, 0xfffffffffffffb80, 4) MULTIEQUAL (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x48c, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x48b, 4), (stack, 0xfffffffffffffb84, 4) MULTIEQUAL (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x48c, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x48b, 4), (stack, 0xfffffffffffffb88, 4) MULTIEQUAL (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x48c, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x48b, 4), (stack, 0xfffffffffffffb8c, 4) MULTIEQUAL (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x48c, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x48b, 4), (stack, 0xfffffffffffffb90, 4) MULTIEQUAL (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x48c, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x48b, 4), (stack, 0xfffffffffffffb94, 4) MULTIEQUAL (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4)]
[(stack, 0xfffffffffffffb98, 4) INDIRECT (stack, 0xfffffffffffffb98, 4) , (const, 0x48c, 4), (stack, 0xfffffffffffffb98, 4) INDIRECT (stack, 0xfffffffffffffb98, 4) , (const, 0x48b, 4), (stack, 0xfffffffffffffb98, 4) MULTIEQUAL (stack, 0xfffffffffffffb98, 4) , (stack, 0xfffffffffffffb98, 4) , (stack, 0xfffffffffffffb98, 4)]
[(stack, 0xfffffffffffffb9c, 4) INDIRECT (stack, 0xfffffffffffffb9c, 4) , (const, 0x48c, 4), (stack, 0xfffffffffffffb9c, 4) INDIRECT (stack, 0xfffffffffffffb9c, 4) , (const, 0x48b, 4), (stack, 0xfffffffffffffb9c, 4) MULTIEQUAL (stack, 0xfffffffffffffb9c, 4) , (stack, 0xfffffffffffffb9c, 4) , (stack, 0xfffffffffffffb9c, 4)]
[(stack, 0xfffffffffffffba0, 4) INDIRECT (stack, 0xfffffffffffffba0, 4) , (const, 0x48c, 4), (stack, 0xfffffffffffffba0, 4) INDIRECT (stack, 0xfffffffffffffba0, 4) , (const, 0x48b, 4), (stack, 0xfffffffffffffba0, 4) MULTIEQUAL (stack, 0xfffffffffffffba0, 4) , (stack, 0xfffffffffffffba0, 4) , (stack, 0xfffffffffffffba0, 4)]
[(stack, 0xfffffffffffffba4, 4) INDIRECT (stack, 0xfffffffffffffba4, 4) , (const, 0x48c, 4), (stack, 0xfffffffffffffba4, 4) INDIRECT (stack, 0xfffffffffffffba4, 4) , (const, 0x48b, 4), (stack, 0xfffffffffffffba4, 4) MULTIEQUAL (stack, 0xfffffffffffffba4, 4) , (stack, 0xfffffffffffffba4, 4) , (stack, 0xfffffffffffffba4, 4)]
[(stack, 0xfffffffffffffba8, 16) INDIRECT (stack, 0xfffffffffffffba8, 16) , (const, 0x48c, 4), (stack, 0xfffffffffffffba8, 16) INDIRECT (stack, 0xfffffffffffffba8, 16) , (const, 0x48b, 4), (stack, 0xfffffffffffffba8, 16) MULTIEQUAL (stack, 0xfffffffffffffba8, 16) , (stack, 0xfffffffffffffba8, 16) , (stack, 0xfffffffffffffba8, 16)]
[(stack, 0xfffffffffffffbb8, 4) INDIRECT (stack, 0xfffffffffffffbb8, 4) , (const, 0x48c, 4), (stack, 0xfffffffffffffbb8, 4) INDIRECT (stack, 0xfffffffffffffbb8, 4) , (const, 0x48b, 4), (stack, 0xfffffffffffffbb8, 4) MULTIEQUAL (stack, 0xfffffffffffffbb8, 4) , (stack, 0xfffffffffffffbb8, 4) , (stack, 0xfffffffffffffbb8, 4)]
[(stack, 0xfffffffffffffbbc, 4) INDIRECT (stack, 0xfffffffffffffbbc, 4) , (const, 0x48c, 4), (stack, 0xfffffffffffffbbc, 4) INDIRECT (stack, 0xfffffffffffffbbc, 4) , (const, 0x48b, 4), (stack, 0xfffffffffffffbbc, 4) MULTIEQUAL (stack, 0xfffffffffffffbbc, 4) , (stack, 0xfffffffffffffbbc, 4) , (stack, 0xfffffffffffffbbc, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x48c, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x48b, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CALL (ram, 0x241ec0, 8) , (unique, 0x10000eed, 8), (unique, 0x10000eed, 8) COPY (stack, 0xfffffffffffffb48, 8), (stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(unique, 0x10000f8d, 8) COPY (register, 0x20, 8), (register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x208048, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xfffffffffffffb40, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffb40, 8) INDIRECT (stack, 0xfffffffffffffb40, 8) , (const, 0x48c, 4), (stack, 0xfffffffffffffb40, 8) INDIRECT (stack, 0xfffffffffffffb40, 8) , (const, 0x48b, 4), (stack, 0xfffffffffffffb40, 8) MULTIEQUAL (stack, 0xfffffffffffffb40, 8) , (stack, 0xfffffffffffffb40, 8) , (stack, 0xfffffffffffffb40, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x49e, 4)]
[(ram, 0x4ee040, 4) INDIRECT (ram, 0x4ee040, 4) , (const, 0x49e, 4)]
[(ram, 0x4ee044, 4) INDIRECT (ram, 0x4ee044, 4) , (const, 0x49e, 4)]
[(ram, 0x4ee050, 8) INDIRECT (ram, 0x4ee050, 8) , (const, 0x49e, 4)]
[(ram, 0x4ee058, 8) INDIRECT (ram, 0x4ee058, 8) , (const, 0x49e, 4)]
[(ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x49e, 4)]
[(ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x49e, 4)]
[(ram, 0x4f0870, 8) INDIRECT (ram, 0x4f0870, 8) , (const, 0x49e, 4)]
[(ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x49e, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x49e, 4)]
[ ---  STORE (const, 0x1b1, 4) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffb40, 8)]
[(unique, 0x10000f55, 8) COPY (register, 0x20, 8)]
[ ---  BRANCH (ram, 0x207ff1, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbbc, 4) MULTIEQUAL (stack, 0xfffffffffffffbbc, 4) , (stack, 0xfffffffffffffbbc, 4) , (stack, 0xfffffffffffffbbc, 4) , (stack, 0xfffffffffffffbbc, 4)]
[(stack, 0xfffffffffffffbb8, 4) MULTIEQUAL (stack, 0xfffffffffffffbb8, 4) , (stack, 0xfffffffffffffbb8, 4) , (stack, 0xfffffffffffffbb8, 4) , (stack, 0xfffffffffffffbb8, 4)]
[(stack, 0xfffffffffffffba8, 16) MULTIEQUAL (stack, 0xfffffffffffffba8, 16) , (stack, 0xfffffffffffffba8, 16) , (stack, 0xfffffffffffffba8, 16) , (stack, 0xfffffffffffffba8, 16)]
[(stack, 0xfffffffffffffba4, 4) MULTIEQUAL (stack, 0xfffffffffffffba4, 4) , (stack, 0xfffffffffffffba4, 4) , (stack, 0xfffffffffffffba4, 4) , (stack, 0xfffffffffffffba4, 4)]
[(stack, 0xfffffffffffffba0, 4) MULTIEQUAL (stack, 0xfffffffffffffba0, 4) , (stack, 0xfffffffffffffba0, 4) , (stack, 0xfffffffffffffba0, 4) , (stack, 0xfffffffffffffba0, 4)]
[(stack, 0xfffffffffffffb9c, 4) MULTIEQUAL (stack, 0xfffffffffffffb9c, 4) , (stack, 0xfffffffffffffb9c, 4) , (stack, 0xfffffffffffffb9c, 4) , (stack, 0xfffffffffffffb9c, 4)]
[(stack, 0xfffffffffffffb98, 4) MULTIEQUAL (stack, 0xfffffffffffffb98, 4) , (stack, 0xfffffffffffffb98, 4) , (stack, 0xfffffffffffffb98, 4) , (stack, 0xfffffffffffffb98, 4)]
[(stack, 0xfffffffffffffb94, 4) MULTIEQUAL (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4)]
[(stack, 0xfffffffffffffb90, 4) MULTIEQUAL (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4)]
[(stack, 0xfffffffffffffb8c, 4) MULTIEQUAL (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4)]
[(stack, 0xfffffffffffffb88, 4) MULTIEQUAL (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4)]
[(stack, 0xfffffffffffffb84, 4) MULTIEQUAL (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4)]
[(stack, 0xfffffffffffffb80, 4) MULTIEQUAL (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4)]
[(stack, 0xfffffffffffffb7c, 4) MULTIEQUAL (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb70, 4) MULTIEQUAL (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4)]
[(stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb60, 4) MULTIEQUAL (stack, 0xfffffffffffffb60, 4) , (stack, 0xfffffffffffffb60, 4) , (stack, 0xfffffffffffffb60, 4) , (stack, 0xfffffffffffffb60, 4)]
[(stack, 0xfffffffffffffb58, 8) MULTIEQUAL (stack, 0xfffffffffffffb58, 8) , (stack, 0xfffffffffffffb58, 8) , (stack, 0xfffffffffffffb58, 8) , (stack, 0xfffffffffffffb58, 8)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb40, 8) MULTIEQUAL (stack, 0xfffffffffffffb40, 8) , (stack, 0xfffffffffffffb40, 8) , (stack, 0xfffffffffffffb40, 8) , (stack, 0xfffffffffffffb40, 8)]
[(stack, 0xfffffffffffffb3c, 4) MULTIEQUAL (stack, 0xfffffffffffffb3c, 4) , (stack, 0xfffffffffffffb3c, 4) , (stack, 0xfffffffffffffb3c, 4) , (stack, 0xfffffffffffffb3c, 4)]
[(stack, 0xfffffffffffffb3b, 1) MULTIEQUAL (stack, 0xfffffffffffffb3b, 1) , (stack, 0xfffffffffffffb3b, 1) , (stack, 0xfffffffffffffb3b, 1) , (stack, 0xfffffffffffffb3b, 1)]
[(stack, 0xfffffffffffffb3a, 1) MULTIEQUAL (stack, 0xfffffffffffffb3a, 1) , (stack, 0xfffffffffffffb3a, 1) , (stack, 0xfffffffffffffb3a, 1) , (stack, 0xfffffffffffffb3a, 1)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb20, 8) MULTIEQUAL (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb10, 4) MULTIEQUAL (stack, 0xfffffffffffffb10, 4) , (stack, 0xfffffffffffffb10, 4) , (stack, 0xfffffffffffffb10, 4) , (stack, 0xfffffffffffffb10, 4)]
[(stack, 0xfffffffffffffb0f, 1) MULTIEQUAL (stack, 0xfffffffffffffb0f, 1) , (stack, 0xfffffffffffffb0f, 1) , (stack, 0xfffffffffffffb0f, 1) , (stack, 0xfffffffffffffb0f, 1)]
[(stack, 0xfffffffffffffb08, 4) MULTIEQUAL (stack, 0xfffffffffffffb08, 4) , (stack, 0xfffffffffffffb08, 4) , (stack, 0xfffffffffffffb08, 4) , (stack, 0xfffffffffffffb08, 4)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae4, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[(stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffad8, 8) MULTIEQUAL (stack, 0xfffffffffffffad8, 8) , (stack, 0xfffffffffffffad8, 8) , (stack, 0xfffffffffffffad8, 8) , (stack, 0xfffffffffffffad8, 8)]
[(stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffac8, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffac4, 4) MULTIEQUAL (stack, 0xfffffffffffffac4, 4) , (stack, 0xfffffffffffffac4, 4) , (stack, 0xfffffffffffffac4, 4) , (stack, 0xfffffffffffffac4, 4)]
[(ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(ram, 0x4f08e8, 4) MULTIEQUAL (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4)]
[(ram, 0x4f0870, 8) MULTIEQUAL (ram, 0x4f0870, 8) , (ram, 0x4f0870, 8) , (ram, 0x4f0870, 8) , (ram, 0x4f0870, 8)]
[(ram, 0x4ee064, 4) MULTIEQUAL (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4)]
[(ram, 0x4ee060, 4) MULTIEQUAL (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4)]
[(ram, 0x4ee058, 8) MULTIEQUAL (ram, 0x4ee058, 8) , (ram, 0x4ee058, 8) , (ram, 0x4ee058, 8) , (ram, 0x4ee058, 8)]
[(ram, 0x4ee050, 8) MULTIEQUAL (ram, 0x4ee050, 8) , (ram, 0x4ee050, 8) , (ram, 0x4ee050, 8) , (ram, 0x4ee050, 8)]
[(ram, 0x4ee044, 4) MULTIEQUAL (ram, 0x4ee044, 4) , (ram, 0x4ee044, 4) , (ram, 0x4ee044, 4) , (ram, 0x4ee044, 4)]
[(ram, 0x4ee040, 4) MULTIEQUAL (ram, 0x4ee040, 4) , (ram, 0x4ee040, 4) , (ram, 0x4ee040, 4) , (ram, 0x4ee040, 4)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(stack, 0xfffffffffffffb14, 4) COPY (const, 0xfffffffe, 4)]
[(unique, 0x10000f5d, 8) COPY (register, 0x20, 8), (register, 0x20, 8) MULTIEQUAL (unique, 0x10000f8d, 8) , (unique, 0x10000f95, 8) , (unique, 0x10000f9d, 8) , (unique, 0x10000fa5, 8)]
[ ---  BRANCH (ram, 0x207ff1, 1)]
[(stack, 0xfffffffffffffbbc, 4) MULTIEQUAL (stack, 0xfffffffffffffbbc, 4) , (stack, 0xfffffffffffffbbc, 4) , (stack, 0xfffffffffffffbbc, 4) , (stack, 0xfffffffffffffbbc, 4) , (stack, 0xfffffffffffffbbc, 4) , (stack, 0xfffffffffffffbbc, 4)]
[(stack, 0xfffffffffffffbb8, 4) MULTIEQUAL (stack, 0xfffffffffffffbb8, 4) , (stack, 0xfffffffffffffbb8, 4) , (stack, 0xfffffffffffffbb8, 4) , (stack, 0xfffffffffffffbb8, 4) , (stack, 0xfffffffffffffbb8, 4) , (stack, 0xfffffffffffffbb8, 4)]
[(stack, 0xfffffffffffffba8, 16) MULTIEQUAL (stack, 0xfffffffffffffba8, 16) , (stack, 0xfffffffffffffba8, 16) , (stack, 0xfffffffffffffba8, 16) , (stack, 0xfffffffffffffba8, 16) , (stack, 0xfffffffffffffba8, 16) , (stack, 0xfffffffffffffba8, 16)]
[(stack, 0xfffffffffffffba4, 4) MULTIEQUAL (stack, 0xfffffffffffffba4, 4) , (stack, 0xfffffffffffffba4, 4) , (stack, 0xfffffffffffffba4, 4) , (stack, 0xfffffffffffffba4, 4) , (stack, 0xfffffffffffffba4, 4) , (stack, 0xfffffffffffffba4, 4)]
[(stack, 0xfffffffffffffba0, 4) MULTIEQUAL (stack, 0xfffffffffffffba0, 4) , (stack, 0xfffffffffffffba0, 4) , (stack, 0xfffffffffffffba0, 4) , (stack, 0xfffffffffffffba0, 4) , (stack, 0xfffffffffffffba0, 4) , (stack, 0xfffffffffffffba0, 4)]
[(stack, 0xfffffffffffffb9c, 4) MULTIEQUAL (stack, 0xfffffffffffffb9c, 4) , (stack, 0xfffffffffffffb9c, 4) , (stack, 0xfffffffffffffb9c, 4) , (stack, 0xfffffffffffffb9c, 4) , (stack, 0xfffffffffffffb9c, 4) , (stack, 0xfffffffffffffb9c, 4)]
[(stack, 0xfffffffffffffb98, 4) MULTIEQUAL (stack, 0xfffffffffffffb98, 4) , (stack, 0xfffffffffffffb98, 4) , (stack, 0xfffffffffffffb98, 4) , (stack, 0xfffffffffffffb98, 4) , (stack, 0xfffffffffffffb98, 4) , (stack, 0xfffffffffffffb98, 4)]
[(stack, 0xfffffffffffffb94, 4) MULTIEQUAL (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4)]
[(stack, 0xfffffffffffffb90, 4) MULTIEQUAL (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4)]
[(stack, 0xfffffffffffffb8c, 4) MULTIEQUAL (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4)]
[(stack, 0xfffffffffffffb88, 4) MULTIEQUAL (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4)]
[(stack, 0xfffffffffffffb84, 4) MULTIEQUAL (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4)]
[(stack, 0xfffffffffffffb80, 4) MULTIEQUAL (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4)]
[(stack, 0xfffffffffffffb7c, 4) MULTIEQUAL (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb70, 4) MULTIEQUAL (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4)]
[(stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb60, 4) MULTIEQUAL (stack, 0xfffffffffffffb60, 4) , (stack, 0xfffffffffffffb60, 4) , (stack, 0xfffffffffffffb60, 4) , (stack, 0xfffffffffffffb60, 4) , (stack, 0xfffffffffffffb60, 4) , (stack, 0xfffffffffffffb60, 4)]
[(stack, 0xfffffffffffffb58, 8) MULTIEQUAL (stack, 0xfffffffffffffb58, 8) , (stack, 0xfffffffffffffb58, 8) , (stack, 0xfffffffffffffb58, 8) , (stack, 0xfffffffffffffb58, 8) , (stack, 0xfffffffffffffb58, 8) , (stack, 0xfffffffffffffb58, 8)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb40, 8) MULTIEQUAL (stack, 0xfffffffffffffb40, 8) , (stack, 0xfffffffffffffb40, 8) , (stack, 0xfffffffffffffb40, 8) , (stack, 0xfffffffffffffb40, 8) , (stack, 0xfffffffffffffb40, 8) , (stack, 0xfffffffffffffb40, 8)]
[(stack, 0xfffffffffffffb3c, 4) MULTIEQUAL (stack, 0xfffffffffffffb3c, 4) , (stack, 0xfffffffffffffb3c, 4) , (stack, 0xfffffffffffffb3c, 4) , (stack, 0xfffffffffffffb3c, 4) , (stack, 0xfffffffffffffb3c, 4) , (stack, 0xfffffffffffffb3c, 4)]
[(stack, 0xfffffffffffffb3b, 1) MULTIEQUAL (stack, 0xfffffffffffffb3b, 1) , (stack, 0xfffffffffffffb3b, 1) , (stack, 0xfffffffffffffb3b, 1) , (stack, 0xfffffffffffffb3b, 1) , (stack, 0xfffffffffffffb3b, 1) , (stack, 0xfffffffffffffb3b, 1)]
[(stack, 0xfffffffffffffb3a, 1) MULTIEQUAL (stack, 0xfffffffffffffb3a, 1) , (stack, 0xfffffffffffffb3a, 1) , (stack, 0xfffffffffffffb3a, 1) , (stack, 0xfffffffffffffb3a, 1) , (stack, 0xfffffffffffffb3a, 1) , (stack, 0xfffffffffffffb3a, 1)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb20, 8) MULTIEQUAL (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb14, 4) MULTIEQUAL (stack, 0xfffffffffffffb14, 4) , (stack, 0xfffffffffffffb14, 4) , (stack, 0xfffffffffffffb14, 4) , (stack, 0xfffffffffffffb14, 4) , (stack, 0xfffffffffffffb14, 4) , (stack, 0xfffffffffffffb14, 4)]
[(stack, 0xfffffffffffffb10, 4) MULTIEQUAL (stack, 0xfffffffffffffb10, 4) , (stack, 0xfffffffffffffb10, 4) , (stack, 0xfffffffffffffb10, 4) , (stack, 0xfffffffffffffb10, 4) , (stack, 0xfffffffffffffb10, 4) , (stack, 0xfffffffffffffb10, 4)]
[(stack, 0xfffffffffffffb0f, 1) MULTIEQUAL (stack, 0xfffffffffffffb0f, 1) , (stack, 0xfffffffffffffb0f, 1) , (stack, 0xfffffffffffffb0f, 1) , (stack, 0xfffffffffffffb0f, 1) , (stack, 0xfffffffffffffb0f, 1) , (stack, 0xfffffffffffffb0f, 1)]
[(stack, 0xfffffffffffffb08, 4) MULTIEQUAL (stack, 0xfffffffffffffb08, 4) , (stack, 0xfffffffffffffb08, 4) , (stack, 0xfffffffffffffb08, 4) , (stack, 0xfffffffffffffb08, 4) , (stack, 0xfffffffffffffb08, 4) , (stack, 0xfffffffffffffb08, 4)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae4, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[(stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffad8, 8) MULTIEQUAL (stack, 0xfffffffffffffad8, 8) , (stack, 0xfffffffffffffad8, 8) , (stack, 0xfffffffffffffad8, 8) , (stack, 0xfffffffffffffad8, 8) , (stack, 0xfffffffffffffad8, 8) , (stack, 0xfffffffffffffad8, 8)]
[(stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffac8, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffac4, 4) MULTIEQUAL (stack, 0xfffffffffffffac4, 4) , (stack, 0xfffffffffffffac4, 4) , (stack, 0xfffffffffffffac4, 4) , (stack, 0xfffffffffffffac4, 4) , (stack, 0xfffffffffffffac4, 4) , (stack, 0xfffffffffffffac4, 4)]
[(ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(ram, 0x4f08e8, 4) MULTIEQUAL (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4)]
[(ram, 0x4f0870, 8) MULTIEQUAL (ram, 0x4f0870, 8) , (ram, 0x4f0870, 8) , (ram, 0x4f0870, 8) , (ram, 0x4f0870, 8) , (ram, 0x4f0870, 8) , (ram, 0x4f0870, 8)]
[(ram, 0x4ee064, 4) MULTIEQUAL (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4) , (ram, 0x4ee064, 4)]
[(ram, 0x4ee060, 4) MULTIEQUAL (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4) , (ram, 0x4ee060, 4)]
[(ram, 0x4ee058, 8) MULTIEQUAL (ram, 0x4ee058, 8) , (ram, 0x4ee058, 8) , (ram, 0x4ee058, 8) , (ram, 0x4ee058, 8) , (ram, 0x4ee058, 8) , (ram, 0x4ee058, 8)]
[(ram, 0x4ee050, 8) MULTIEQUAL (ram, 0x4ee050, 8) , (ram, 0x4ee050, 8) , (ram, 0x4ee050, 8) , (ram, 0x4ee050, 8) , (ram, 0x4ee050, 8) , (ram, 0x4ee050, 8)]
[(ram, 0x4ee044, 4) MULTIEQUAL (ram, 0x4ee044, 4) , (ram, 0x4ee044, 4) , (ram, 0x4ee044, 4) , (ram, 0x4ee044, 4) , (ram, 0x4ee044, 4) , (ram, 0x4ee044, 4)]
[(ram, 0x4ee040, 4) MULTIEQUAL (ram, 0x4ee040, 4) , (ram, 0x4ee040, 4) , (ram, 0x4ee040, 4) , (ram, 0x4ee040, 4) , (ram, 0x4ee040, 4) , (ram, 0x4ee040, 4)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x20, 8) MULTIEQUAL (unique, 0x10000f55, 8) , (unique, 0x10000f5d, 8) , (unique, 0x10000f65, 8) , (unique, 0x10000f6d, 8) , (unique, 0x10000f75, 8) , (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x20883e, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffffc0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10001434, 8), (unique, 0x10001434, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000143c, 8) , (const, 0x208843, 8), (unique, 0x1000143c, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(stack, 0xfffffffffffffac4, 4) INDIRECT (stack, 0xfffffffffffffac4, 4) , (const, 0x4c7, 4), (stack, 0xfffffffffffffac4, 4) INDIRECT (stack, 0xfffffffffffffac4, 4) , (const, 0x4c6, 4)]
[(stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x4c7, 4), (stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x4c6, 4)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x4c7, 4), (stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x4c6, 4)]
[(stack, 0xfffffffffffffad8, 8) INDIRECT (stack, 0xfffffffffffffad8, 8) , (const, 0x4c7, 4), (stack, 0xfffffffffffffad8, 8) INDIRECT (stack, 0xfffffffffffffad8, 8) , (const, 0x4c6, 4)]
[(stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x4c7, 4), (stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x4c6, 4)]
[(stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x4c7, 4), (stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x4c6, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x4c7, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x4c6, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x4c7, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x4c6, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x4c7, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x4c6, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x4c7, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x4c6, 4)]
[(stack, 0xfffffffffffffb08, 4) INDIRECT (stack, 0xfffffffffffffb08, 4) , (const, 0x4c7, 4), (stack, 0xfffffffffffffb08, 4) INDIRECT (stack, 0xfffffffffffffb08, 4) , (const, 0x4c6, 4)]
[(stack, 0xfffffffffffffb0f, 1) INDIRECT (stack, 0xfffffffffffffb0f, 1) , (const, 0x4c7, 4), (stack, 0xfffffffffffffb0f, 1) INDIRECT (stack, 0xfffffffffffffb0f, 1) , (const, 0x4c6, 4)]
[(stack, 0xfffffffffffffb10, 4) INDIRECT (stack, 0xfffffffffffffb10, 4) , (const, 0x4c7, 4), (stack, 0xfffffffffffffb10, 4) INDIRECT (stack, 0xfffffffffffffb10, 4) , (const, 0x4c6, 4)]
[(stack, 0xfffffffffffffb14, 4) INDIRECT (stack, 0xfffffffffffffb14, 4) , (const, 0x4c7, 4), (stack, 0xfffffffffffffb14, 4) INDIRECT (stack, 0xfffffffffffffb14, 4) , (const, 0x4c6, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x4c7, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x4c6, 4)]
[(stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x4c7, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x4c6, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x4c7, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x4c6, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x4c7, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x4c6, 4)]
[(stack, 0xfffffffffffffb3a, 1) INDIRECT (stack, 0xfffffffffffffb3a, 1) , (const, 0x4c7, 4), (stack, 0xfffffffffffffb3a, 1) INDIRECT (stack, 0xfffffffffffffb3a, 1) , (const, 0x4c6, 4)]
[(stack, 0xfffffffffffffb3b, 1) INDIRECT (stack, 0xfffffffffffffb3b, 1) , (const, 0x4c7, 4), (stack, 0xfffffffffffffb3b, 1) INDIRECT (stack, 0xfffffffffffffb3b, 1) , (const, 0x4c6, 4)]
[(stack, 0xfffffffffffffb3c, 4) INDIRECT (stack, 0xfffffffffffffb3c, 4) , (const, 0x4c7, 4), (stack, 0xfffffffffffffb3c, 4) INDIRECT (stack, 0xfffffffffffffb3c, 4) , (const, 0x4c6, 4)]
[(stack, 0xfffffffffffffb40, 8) INDIRECT (stack, 0xfffffffffffffb40, 8) , (const, 0x4c7, 4), (stack, 0xfffffffffffffb40, 8) INDIRECT (stack, 0xfffffffffffffb40, 8) , (const, 0x4c6, 4)]
[(stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x4c7, 4), (stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x4c6, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x4c7, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x4c6, 4)]
[(stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x4c7, 4), (stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x4c6, 4)]
[(stack, 0xfffffffffffffb60, 4) INDIRECT (stack, 0xfffffffffffffb60, 4) , (const, 0x4c7, 4), (stack, 0xfffffffffffffb60, 4) INDIRECT (stack, 0xfffffffffffffb60, 4) , (const, 0x4c6, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x4c7, 4), (stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x4c6, 4)]
[(stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x4c7, 4), (stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x4c6, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x4c7, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x4c6, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x4c7, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x4c6, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x4c7, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x4c6, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x4c7, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x4c6, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x4c7, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x4c6, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x4c7, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x4c6, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x4c7, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x4c6, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x4c7, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x4c6, 4)]
[(stack, 0xfffffffffffffb98, 4) INDIRECT (stack, 0xfffffffffffffb98, 4) , (const, 0x4c7, 4), (stack, 0xfffffffffffffb98, 4) INDIRECT (stack, 0xfffffffffffffb98, 4) , (const, 0x4c6, 4)]
[(stack, 0xfffffffffffffb9c, 4) INDIRECT (stack, 0xfffffffffffffb9c, 4) , (const, 0x4c7, 4), (stack, 0xfffffffffffffb9c, 4) INDIRECT (stack, 0xfffffffffffffb9c, 4) , (const, 0x4c6, 4)]
[(stack, 0xfffffffffffffba0, 4) INDIRECT (stack, 0xfffffffffffffba0, 4) , (const, 0x4c7, 4), (stack, 0xfffffffffffffba0, 4) INDIRECT (stack, 0xfffffffffffffba0, 4) , (const, 0x4c6, 4)]
[(stack, 0xfffffffffffffba4, 4) INDIRECT (stack, 0xfffffffffffffba4, 4) , (const, 0x4c7, 4), (stack, 0xfffffffffffffba4, 4) INDIRECT (stack, 0xfffffffffffffba4, 4) , (const, 0x4c6, 4)]
[(stack, 0xfffffffffffffba8, 16) INDIRECT (stack, 0xfffffffffffffba8, 16) , (const, 0x4c7, 4), (stack, 0xfffffffffffffba8, 16) INDIRECT (stack, 0xfffffffffffffba8, 16) , (const, 0x4c6, 4)]
[(stack, 0xfffffffffffffbb8, 4) INDIRECT (stack, 0xfffffffffffffbb8, 4) , (const, 0x4c7, 4), (stack, 0xfffffffffffffbb8, 4) INDIRECT (stack, 0xfffffffffffffbb8, 4) , (const, 0x4c6, 4)]
[(stack, 0xfffffffffffffbbc, 4) INDIRECT (stack, 0xfffffffffffffbbc, 4) , (const, 0x4c7, 4), (stack, 0xfffffffffffffbbc, 4) INDIRECT (stack, 0xfffffffffffffbbc, 4) , (const, 0x4c6, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x4c7, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x4c6, 4)]
[ ---  CALL (ram, 0x234c80, 8)]
[(ram, 0x4eae68, 8) COPY (ram, 0x4eae68, 8), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x4c7, 4)]
[(ram, 0x4ee040, 4) COPY (ram, 0x4ee040, 4), (ram, 0x4ee040, 4) INDIRECT (ram, 0x4ee040, 4) , (const, 0x4c7, 4)]
[(ram, 0x4ee044, 4) COPY (ram, 0x4ee044, 4), (ram, 0x4ee044, 4) INDIRECT (ram, 0x4ee044, 4) , (const, 0x4c7, 4)]
[(ram, 0x4ee050, 8) COPY (ram, 0x4ee050, 8), (ram, 0x4ee050, 8) INDIRECT (ram, 0x4ee050, 8) , (const, 0x4c7, 4)]
[(ram, 0x4ee058, 8) COPY (ram, 0x4ee058, 8), (ram, 0x4ee058, 8) INDIRECT (ram, 0x4ee058, 8) , (const, 0x4c7, 4)]
[(ram, 0x4ee060, 4) COPY (ram, 0x4ee060, 4), (ram, 0x4ee060, 4) INDIRECT (ram, 0x4ee060, 4) , (const, 0x4c7, 4)]
[(ram, 0x4ee064, 4) COPY (ram, 0x4ee064, 4), (ram, 0x4ee064, 4) INDIRECT (ram, 0x4ee064, 4) , (const, 0x4c7, 4)]
[(ram, 0x4f0870, 8) COPY (ram, 0x4f0870, 8), (ram, 0x4f0870, 8) INDIRECT (ram, 0x4f0870, 8) , (const, 0x4c7, 4)]
[(ram, 0x4f08e8, 4) COPY (ram, 0x4f08e8, 4), (ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x4c7, 4)]
[(ram, 0x4f08f8, 4) COPY (ram, 0x4f08f8, 4), (ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x4c7, 4)]
[ ---  RETURN (const, 0x1, 4)]
[(ram, 0x4eae68, 8) COPY (ram, 0x4eae68, 8)]
[(ram, 0x4ee040, 4) COPY (ram, 0x4ee040, 4)]
[(ram, 0x4ee044, 4) COPY (ram, 0x4ee044, 4)]
[(ram, 0x4ee050, 8) COPY (ram, 0x4ee050, 8)]
[(ram, 0x4ee058, 8) COPY (ram, 0x4ee058, 8)]
[(ram, 0x4ee060, 4) COPY (ram, 0x4ee060, 4)]
[(ram, 0x4ee064, 4) COPY (ram, 0x4ee064, 4)]
[(ram, 0x4f0870, 8) COPY (ram, 0x4f0870, 8)]
[(ram, 0x4f08e8, 4) COPY (ram, 0x4f08e8, 4)]
[(ram, 0x4f08f8, 4) COPY (ram, 0x4f08f8, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 4), (register, 0x0, 4) COPY (stack, 0xfffffffffffffb14, 4)]
