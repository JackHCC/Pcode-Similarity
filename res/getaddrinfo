[(register, 0x20a, 1) COPY (const, 0x0, 1)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffe58, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffe58, 8)]
[(stack, 0xfffffffffffffe60, 8) COPY (register, 0x8, 8)]
[(stack, 0xfffffffffffffed0, 8) COPY (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x1eebb2, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x38, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x1eeba8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x2a, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0x38, 8)]
[ ---  CBRANCH (ram, 0x1ee401, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x38, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x1eebdc, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x30, 8) , (const, 0x0, 8)]
[(ram, 0x4c2e78, 8) COPY (ram, 0x4c2e78, 8)]
[(ram, 0x4c5f40, 4) COPY (ram, 0x4c5f40, 4)]
[(ram, 0x4c5f44, 4) COPY (ram, 0x4c5f44, 4)]
[(ram, 0x4c5f50, 8) COPY (ram, 0x4c5f50, 8)]
[(ram, 0x4c5f58, 8) COPY (ram, 0x4c5f58, 8)]
[(ram, 0x4c5f60, 4) COPY (ram, 0x4c5f60, 4)]
[(ram, 0x4c5f64, 4) COPY (ram, 0x4c5f64, 4)]
[(ram, 0x4c8718, 8) COPY (ram, 0x4c8718, 8)]
[(ram, 0x4c8790, 4) COPY (ram, 0x4c8790, 4)]
[(ram, 0x4c87a0, 4) COPY (ram, 0x4c87a0, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 4), (register, 0x0, 4) COPY (const, 0xfffffffe, 4)]
[(register, 0xb0, 8) COPY (const, 0x0, 8)]
[(unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0x30, 8)]
[ ---  CBRANCH (ram, 0x1ee411, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x30, 8) , (const, 0x0, 8)]
[(unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0x30, 8)]
[(unique, 0x100003fa, 8) MULTIEQUAL (register, 0x38, 8) , (register, 0xb0, 8)]
[ ---  CBRANCH (ram, 0x1eebc5, 1) , (unique, 0x100003f9, 1), (unique, 0x100003f9, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x2a, 1), (unique, 0xbb00, 1) MULTIEQUAL (unique, 0xbb00, 1) , (unique, 0xbb00, 1)]
[ ---  CBRANCH (ram, 0x1ee411, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x30, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[(register, 0xa8, 8) COPY (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x1ee411, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x100003fa, 8) , (const, 0x0, 8)]
[(ram, 0x4c2e78, 8) COPY (ram, 0x4c2e78, 8)]
[(ram, 0x4c5f40, 4) COPY (ram, 0x4c5f40, 4)]
[(ram, 0x4c5f44, 4) COPY (ram, 0x4c5f44, 4)]
[(ram, 0x4c5f50, 8) COPY (ram, 0x4c5f50, 8)]
[(ram, 0x4c5f58, 8) COPY (ram, 0x4c5f58, 8)]
[(ram, 0x4c5f60, 4) COPY (ram, 0x4c5f60, 4)]
[(ram, 0x4c5f64, 4) COPY (ram, 0x4c5f64, 4)]
[(ram, 0x4c8718, 8) COPY (ram, 0x4c8718, 8)]
[(ram, 0x4c8790, 4) COPY (ram, 0x4c8790, 4)]
[(ram, 0x4c87a0, 4) COPY (ram, 0x4c87a0, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 4), (register, 0x0, 4) COPY (const, 0xfffffffe, 4)]
[(register, 0xb0, 8) MULTIEQUAL (register, 0x38, 8) , (unique, 0x100003fa, 8) , (unique, 0x100003fa, 8) , (unique, 0x100003fa, 8)]
[(register, 0xa8, 8) MULTIEQUAL (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0xa8, 8)]
[ ---  CBRANCH (ram, 0x1eee56, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x10, 8) , (const, 0x0, 8)]
[(register, 0xa0, 8) CAST (unique, 0x10000e33, 8), (unique, 0x10000e33, 8) PTRSUB (const, 0x0, 8) , (const, 0x289c20, 8)]
[(register, 0x0, 4) COPY (const, 0x28, 4)]
[ ---  BRANCH (ram, 0x1ee436, 1)]
[ ---  CBRANCH (ram, 0x1eef6d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x58a00, 4) , (const, 0x0, 4), (unique, 0x58a00, 4) INT_AND (unique, 0xbc80, 4) , (const, 0xfffff800, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x1000055d, 8), (unique, 0x1000055d, 8) PTRSUB (register, 0x10, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x1ee436, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x10000151, 4) , (const, 0x0, 4), (unique, 0x10000151, 4) INT_AND (unique, 0xbc80, 4) , (const, 0x2, 4)]
[ ---  CBRANCH (ram, 0x1eef6d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xb0, 8) , (const, 0x0, 8)]
[(ram, 0x4c2e78, 8) COPY (ram, 0x4c2e78, 8)]
[(ram, 0x4c5f40, 4) COPY (ram, 0x4c5f40, 4)]
[(ram, 0x4c5f44, 4) COPY (ram, 0x4c5f44, 4)]
[(ram, 0x4c5f50, 8) COPY (ram, 0x4c5f50, 8)]
[(ram, 0x4c5f58, 8) COPY (ram, 0x4c5f58, 8)]
[(ram, 0x4c5f60, 4) COPY (ram, 0x4c5f60, 4)]
[(ram, 0x4c5f64, 4) COPY (ram, 0x4c5f64, 4)]
[(ram, 0x4c8718, 8) COPY (ram, 0x4c8718, 8)]
[(ram, 0x4c8790, 4) COPY (ram, 0x4c8790, 4)]
[(ram, 0x4c87a0, 4) COPY (ram, 0x4c87a0, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 4), (register, 0x0, 4) COPY (const, 0xffffffff, 4)]
[(register, 0xa0, 8) MULTIEQUAL (register, 0x10, 8) , (register, 0x10, 8) , (register, 0xa0, 8)]
[(unique, 0x100003ce, 1) COPY (const, 0x0, 1)]
[(stack, 0xfffffffffffffed8, 8) COPY (const, 0x0, 8)]
[(stack, 0xfffffffffffffee0, 8) COPY (const, 0x0, 8)]
[(stack, 0xfffffffffffffeca, 1) COPY (const, 0x0, 1)]
[(stack, 0xfffffffffffffecb, 1) COPY (const, 0x0, 1)]
[ ---  CBRANCH (ram, 0x1eebf0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x1000015d, 4) , (const, 0x0, 4), (unique, 0x1000015d, 4) INT_AND (register, 0x0, 4) , (const, 0x20, 4), (register, 0x0, 4) MULTIEQUAL (unique, 0xbc80, 4) , (unique, 0xbc80, 4) , (register, 0x0, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x929, 4)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x929, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x929, 4)]
[(ram, 0x4c5f40, 4) INDIRECT (ram, 0x4c5f40, 4) , (const, 0x929, 4)]
[(ram, 0x4c5f44, 4) INDIRECT (ram, 0x4c5f44, 4) , (const, 0x929, 4)]
[(ram, 0x4c5f50, 8) INDIRECT (ram, 0x4c5f50, 8) , (const, 0x929, 4)]
[(ram, 0x4c5f58, 8) INDIRECT (ram, 0x4c5f58, 8) , (const, 0x929, 4)]
[(ram, 0x4c5f60, 4) INDIRECT (ram, 0x4c5f60, 4) , (const, 0x929, 4)]
[(ram, 0x4c5f64, 4) INDIRECT (ram, 0x4c5f64, 4) , (const, 0x929, 4)]
[(ram, 0x4c8718, 8) INDIRECT (ram, 0x4c8718, 8) , (const, 0x929, 4)]
[(ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x929, 4)]
[(ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x929, 4)]
[(stack, 0xfffffffffffffe5c, 4) INDIRECT (stack, 0xfffffffffffffe5c, 4) , (const, 0x929, 4)]
[(stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x929, 4)]
[(stack, 0xfffffffffffffe68, 8) INDIRECT (stack, 0xfffffffffffffe68, 8) , (const, 0x929, 4)]
[(stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0x929, 4)]
[(stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0x929, 4)]
[(stack, 0xfffffffffffffe80, 4) INDIRECT (stack, 0xfffffffffffffe80, 4) , (const, 0x929, 4)]
[(stack, 0xfffffffffffffe84, 4) INDIRECT (stack, 0xfffffffffffffe84, 4) , (const, 0x929, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x929, 4)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x929, 4)]
[(stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x929, 4)]
[(stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x929, 4)]
[(stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x929, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x929, 4)]
[(stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x929, 4)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x929, 4)]
[(stack, 0xfffffffffffffeca, 1) INDIRECT (stack, 0xfffffffffffffeca, 1) , (const, 0x929, 4)]
[(stack, 0xfffffffffffffecb, 1) INDIRECT (stack, 0xfffffffffffffecb, 1) , (const, 0x929, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x929, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x929, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x929, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x929, 4)]
[(stack, 0xfffffffffffffef0, 4) INDIRECT (stack, 0xfffffffffffffef0, 4) , (const, 0x929, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x929, 4)]
[(stack, 0xffffffffffffff00, 4) INDIRECT (stack, 0xffffffffffffff00, 4) , (const, 0x929, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x929, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x929, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x929, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x929, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x929, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x929, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x929, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x929, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x929, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x929, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x929, 4)]
[ ---  CALL (ram, 0x2239b0, 8) , (unique, 0x3200, 8) , (unique, 0x3200, 8) , (unique, 0x3200, 8) , (unique, 0x3200, 8), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffeca, 8), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffecb, 8), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffed8, 8), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffee0, 8)]
[ ---  CBRANCH (ram, 0x1eed7e, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRSUB (register, 0xa0, 8) , (const, 0x4, 8)]
[ ---  CBRANCH (ram, 0x1eeea3, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xfffffffffffffeca, 1) , (const, 0x0, 1)]
[(unique, 0x100003cb, 1) COPY (const, 0x1, 1)]
[ ---  CBRANCH (ram, 0x1ee464, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xfffffffffffffecb, 1) , (const, 0x0, 1)]
[(stack, 0xffffffffffffff08, 4) SUBPIECE (unique, 0xbd80, 8) , (const, 0x0, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000e3b, 8), (unique, 0x10000e3b, 8) CAST (register, 0xa0, 8)]
[(stack, 0xffffffffffffff10, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000e43, 8), (unique, 0x10000e43, 8) CAST (unique, 0x3800, 8), (unique, 0x3800, 8) PTRSUB (register, 0xa0, 8) , (const, 0x8, 8)]
[(stack, 0xffffffffffffff18, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000e4b, 8), (unique, 0x10000e4b, 8) CAST (unique, 0x3800, 8), (unique, 0x3800, 8) PTRSUB (register, 0xa0, 8) , (const, 0x10, 8)]
[(stack, 0xffffffffffffff20, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRSUB (register, 0xa0, 8) , (const, 0x18, 8)]
[(stack, 0xffffffffffffff28, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRSUB (register, 0xa0, 8) , (const, 0x20, 8)]
[(stack, 0xffffffffffffff30, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRSUB (register, 0xa0, 8) , (const, 0x28, 8)]
[(register, 0x0, 4) COPY (const, 0xa, 4)]
[(unique, 0x100003cd, 1) COPY (const, 0x1, 1)]
[ ---  CBRANCH (ram, 0x1ee464, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xfffffffffffffecb, 1) , (const, 0x0, 1)]
[(stack, 0xffffffffffffff08, 4) SUBPIECE (unique, 0xbd80, 8) , (const, 0x0, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000e53, 8), (unique, 0x10000e53, 8) CAST (register, 0xa0, 8)]
[(stack, 0xffffffffffffff10, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000e5b, 8), (unique, 0x10000e5b, 8) CAST (unique, 0x3800, 8), (unique, 0x3800, 8) PTRSUB (register, 0xa0, 8) , (const, 0x8, 8)]
[(stack, 0xffffffffffffff18, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000e63, 8), (unique, 0x10000e63, 8) CAST (unique, 0x3800, 8), (unique, 0x3800, 8) PTRSUB (register, 0xa0, 8) , (const, 0x10, 8)]
[(stack, 0xffffffffffffff20, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRSUB (register, 0xa0, 8) , (const, 0x18, 8)]
[(stack, 0xffffffffffffff28, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRSUB (register, 0xa0, 8) , (const, 0x20, 8)]
[(stack, 0xffffffffffffff30, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRSUB (register, 0xa0, 8) , (const, 0x28, 8)]
[(register, 0x0, 4) COPY (const, 0x2, 4)]
[ ---  BRANCH (ram, 0x1eef01, 1)]
[(stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) INT_ADD (unique, 0x10000c79, 8) , (stack, 0xffffffffffffff08, 4), (unique, 0x10000c79, 8) INT_LEFT (unique, 0x10000c71, 8) , (const, 0x20, 8), (unique, 0x10000c71, 8) INT_SEXT (unique, 0x10000e6b, 4), (unique, 0x10000e6b, 4) CAST (register, 0x0, 4), (register, 0x0, 4) MULTIEQUAL (register, 0x0, 4) , (register, 0x0, 4), (stack, 0xffffffffffffff08, 4) MULTIEQUAL (stack, 0xffffffffffffff08, 4) , (stack, 0xffffffffffffff08, 4)]
[(unique, 0x100003cc, 1) COPY (const, 0x1, 1)]
[(unique, 0x3200, 8) CAST (unique, 0x10000e6f, 8), (unique, 0x10000e6f, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff08, 8)]
[ ---  BRANCH (ram, 0x1ee464, 1)]
[(unique, 0x100003ca, 1) COPY (const, 0x1, 1)]
[(unique, 0x10000e2a, 1) COPY (stack, 0xfffffffffffffeca, 1)]
[ ---  CBRANCH (ram, 0x1eef77, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0x2, 4)]
[(unique, 0x10000e29, 1) COPY (stack, 0xfffffffffffffecb, 1)]
[ ---  CBRANCH (ram, 0x1ee464, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0xa, 4)]
[ ---  CBRANCH (ram, 0x1ee464, 1) , (unique, 0x10000bad, 1), (unique, 0x10000bad, 1) INT_EQUAL (unique, 0x10000bcf, 1) , (const, 0x0, 1), (unique, 0x10000bcf, 1) MULTIEQUAL (unique, 0x10000e2a, 1) , (unique, 0x10000e29, 1)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 4) MULTIEQUAL (stack, 0xffffffffffffff00, 4) , (stack, 0xffffffffffffff00, 4) , (stack, 0xffffffffffffff00, 4) , (stack, 0xffffffffffffff00, 4) , (stack, 0xffffffffffffff00, 4) , (stack, 0xffffffffffffff00, 4)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 4) MULTIEQUAL (stack, 0xfffffffffffffef0, 4) , (stack, 0xfffffffffffffef0, 4) , (stack, 0xfffffffffffffef0, 4) , (stack, 0xfffffffffffffef0, 4) , (stack, 0xfffffffffffffef0, 4) , (stack, 0xfffffffffffffef0, 4)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffecb, 1) MULTIEQUAL (stack, 0xfffffffffffffecb, 1) , (stack, 0xfffffffffffffecb, 1) , (stack, 0xfffffffffffffecb, 1) , (stack, 0xfffffffffffffecb, 1) , (stack, 0xfffffffffffffecb, 1) , (stack, 0xfffffffffffffecb, 1)]
[(stack, 0xfffffffffffffeca, 1) MULTIEQUAL (stack, 0xfffffffffffffeca, 1) , (stack, 0xfffffffffffffeca, 1) , (stack, 0xfffffffffffffeca, 1) , (stack, 0xfffffffffffffeca, 1) , (stack, 0xfffffffffffffeca, 1) , (stack, 0xfffffffffffffeca, 1)]
[(stack, 0xfffffffffffffec0, 8) MULTIEQUAL (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8)]
[(stack, 0xfffffffffffffebc, 4) MULTIEQUAL (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(stack, 0xfffffffffffffea8, 8) MULTIEQUAL (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8)]
[(stack, 0xfffffffffffffea0, 8) MULTIEQUAL (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8)]
[(stack, 0xfffffffffffffe98, 8) MULTIEQUAL (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8)]
[(stack, 0xfffffffffffffe90, 8) MULTIEQUAL (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8)]
[(stack, 0xfffffffffffffe88, 8) MULTIEQUAL (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8)]
[(stack, 0xfffffffffffffe84, 4) MULTIEQUAL (stack, 0xfffffffffffffe84, 4) , (stack, 0xfffffffffffffe84, 4) , (stack, 0xfffffffffffffe84, 4) , (stack, 0xfffffffffffffe84, 4) , (stack, 0xfffffffffffffe84, 4) , (stack, 0xfffffffffffffe84, 4)]
[(stack, 0xfffffffffffffe80, 4) MULTIEQUAL (stack, 0xfffffffffffffe80, 4) , (stack, 0xfffffffffffffe80, 4) , (stack, 0xfffffffffffffe80, 4) , (stack, 0xfffffffffffffe80, 4) , (stack, 0xfffffffffffffe80, 4) , (stack, 0xfffffffffffffe80, 4)]
[(stack, 0xfffffffffffffe78, 8) MULTIEQUAL (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8)]
[(stack, 0xfffffffffffffe70, 8) MULTIEQUAL (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8)]
[(stack, 0xfffffffffffffe68, 8) MULTIEQUAL (stack, 0xfffffffffffffe68, 8) , (stack, 0xfffffffffffffe68, 8) , (stack, 0xfffffffffffffe68, 8) , (stack, 0xfffffffffffffe68, 8) , (stack, 0xfffffffffffffe68, 8) , (stack, 0xfffffffffffffe68, 8)]
[(stack, 0xfffffffffffffe60, 8) MULTIEQUAL (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8)]
[(stack, 0xfffffffffffffe5c, 4) MULTIEQUAL (stack, 0xfffffffffffffe5c, 4) , (stack, 0xfffffffffffffe5c, 4) , (stack, 0xfffffffffffffe5c, 4) , (stack, 0xfffffffffffffe5c, 4) , (stack, 0xfffffffffffffe5c, 4) , (stack, 0xfffffffffffffe5c, 4)]
[(ram, 0x4c87a0, 4) MULTIEQUAL (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4)]
[(ram, 0x4c8790, 4) MULTIEQUAL (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4)]
[(ram, 0x4c8718, 8) MULTIEQUAL (ram, 0x4c8718, 8) , (ram, 0x4c8718, 8) , (ram, 0x4c8718, 8) , (ram, 0x4c8718, 8) , (ram, 0x4c8718, 8) , (ram, 0x4c8718, 8)]
[(ram, 0x4c5f64, 4) MULTIEQUAL (ram, 0x4c5f64, 4) , (ram, 0x4c5f64, 4) , (ram, 0x4c5f64, 4) , (ram, 0x4c5f64, 4) , (ram, 0x4c5f64, 4) , (ram, 0x4c5f64, 4)]
[(ram, 0x4c5f60, 4) MULTIEQUAL (ram, 0x4c5f60, 4) , (ram, 0x4c5f60, 4) , (ram, 0x4c5f60, 4) , (ram, 0x4c5f60, 4) , (ram, 0x4c5f60, 4) , (ram, 0x4c5f60, 4)]
[(ram, 0x4c5f58, 8) MULTIEQUAL (ram, 0x4c5f58, 8) , (ram, 0x4c5f58, 8) , (ram, 0x4c5f58, 8) , (ram, 0x4c5f58, 8) , (ram, 0x4c5f58, 8) , (ram, 0x4c5f58, 8)]
[(ram, 0x4c5f50, 8) MULTIEQUAL (ram, 0x4c5f50, 8) , (ram, 0x4c5f50, 8) , (ram, 0x4c5f50, 8) , (ram, 0x4c5f50, 8) , (ram, 0x4c5f50, 8) , (ram, 0x4c5f50, 8)]
[(ram, 0x4c5f44, 4) MULTIEQUAL (ram, 0x4c5f44, 4) , (ram, 0x4c5f44, 4) , (ram, 0x4c5f44, 4) , (ram, 0x4c5f44, 4) , (ram, 0x4c5f44, 4) , (ram, 0x4c5f44, 4)]
[(ram, 0x4c5f40, 4) MULTIEQUAL (ram, 0x4c5f40, 4) , (ram, 0x4c5f40, 4) , (ram, 0x4c5f40, 4) , (ram, 0x4c5f40, 4) , (ram, 0x4c5f40, 4) , (ram, 0x4c5f40, 4)]
[(ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(unique, 0x100003c9, 1) MULTIEQUAL (unique, 0x100003ce, 1) , (unique, 0x100003cd, 1) , (unique, 0x100003cc, 1) , (unique, 0x100003cb, 1) , (unique, 0x100003ca, 1) , (unique, 0x100003ca, 1)]
[(register, 0x20a, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1) , (register, 0x20a, 1) , (register, 0x20a, 1) , (register, 0x20a, 1) , (register, 0x20a, 1)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xa0, 8) MULTIEQUAL (register, 0xa0, 8) , (register, 0xa0, 8) , (unique, 0x3200, 8) , (register, 0xa0, 8) , (register, 0xa0, 8) , (register, 0xa0, 8)]
[(register, 0x30, 8) COPY (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x1ee476, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xa8, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x1eec90, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0xa8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x8f2, 4)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x8f2, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x8f2, 4)]
[(ram, 0x4c5f40, 4) INDIRECT (ram, 0x4c5f40, 4) , (const, 0x8f2, 4)]
[(ram, 0x4c5f44, 4) INDIRECT (ram, 0x4c5f44, 4) , (const, 0x8f2, 4)]
[(ram, 0x4c5f50, 8) INDIRECT (ram, 0x4c5f50, 8) , (const, 0x8f2, 4)]
[(ram, 0x4c5f58, 8) INDIRECT (ram, 0x4c5f58, 8) , (const, 0x8f2, 4)]
[(ram, 0x4c5f60, 4) INDIRECT (ram, 0x4c5f60, 4) , (const, 0x8f2, 4)]
[(ram, 0x4c5f64, 4) INDIRECT (ram, 0x4c5f64, 4) , (const, 0x8f2, 4)]
[(ram, 0x4c8718, 8) INDIRECT (ram, 0x4c8718, 8) , (const, 0x8f2, 4)]
[(ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x8f2, 4)]
[(ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x8f2, 4)]
[(stack, 0xfffffffffffffe5c, 4) INDIRECT (stack, 0xfffffffffffffe5c, 4) , (const, 0x8f2, 4)]
[(stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x8f2, 4)]
[(stack, 0xfffffffffffffe68, 8) INDIRECT (stack, 0xfffffffffffffe68, 8) , (const, 0x8f2, 4)]
[(stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0x8f2, 4)]
[(stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0x8f2, 4)]
[(stack, 0xfffffffffffffe80, 4) INDIRECT (stack, 0xfffffffffffffe80, 4) , (const, 0x8f2, 4)]
[(stack, 0xfffffffffffffe84, 4) INDIRECT (stack, 0xfffffffffffffe84, 4) , (const, 0x8f2, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x8f2, 4)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x8f2, 4)]
[(stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x8f2, 4)]
[(stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x8f2, 4)]
[(stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x8f2, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x8f2, 4)]
[(stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x8f2, 4)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x8f2, 4)]
[(stack, 0xfffffffffffffeca, 1) INDIRECT (stack, 0xfffffffffffffeca, 1) , (const, 0x8f2, 4)]
[(stack, 0xfffffffffffffecb, 1) INDIRECT (stack, 0xfffffffffffffecb, 1) , (const, 0x8f2, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x8f2, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x8f2, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x8f2, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (unique, 0x10000e11, 8) , (const, 0x8f2, 4), (unique, 0x10000e11, 8) COPY (register, 0xa8, 8)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x8f2, 4)]
[(stack, 0xffffffffffffff00, 4) INDIRECT (stack, 0xffffffffffffff00, 4) , (const, 0x8f2, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x8f2, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x8f2, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x8f2, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x8f2, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x8f2, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x8f2, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x8f2, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x8f2, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x8f2, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x8f2, 4)]
[(stack, 0xfffffffffffffef0, 4) COPY (register, 0x0, 4), (register, 0x0, 4) SUBPIECE (register, 0x0, 8) , (const, 0x0, 4), (register, 0x0, 8) CALL (ram, 0x13b3e0, 8) , (register, 0xa8, 8) , (unique, 0x10000e77, 8) , (const, 0xa, 4), (unique, 0x10000e77, 8) CAST (unique, 0x3200, 8), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff38, 8)]
[ ---  CBRANCH (ram, 0x1eecd5, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (stack, 0xffffffffffffff38, 8), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x8f2, 4)]
[ ---  CBRANCH (ram, 0x1eeda2, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x58e00, 4) , (const, 0x0, 4), (unique, 0x58e00, 4) INT_AND (unique, 0xbd00, 4) , (const, 0x400, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000a6d, 8), (unique, 0x10000a6d, 8) PTRSUB (register, 0xa0, 8) , (const, 0x0, 8)]
[(stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x91d, 4), (stack, 0xfffffffffffffe60, 8) MULTIEQUAL (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8)]
[(stack, 0xfffffffffffffeca, 1) INDIRECT (stack, 0xfffffffffffffeca, 1) , (const, 0x91d, 4), (stack, 0xfffffffffffffeca, 1) MULTIEQUAL (stack, 0xfffffffffffffeca, 1) , (stack, 0xfffffffffffffeca, 1)]
[(stack, 0xfffffffffffffecb, 1) INDIRECT (stack, 0xfffffffffffffecb, 1) , (const, 0x91d, 4), (stack, 0xfffffffffffffecb, 1) MULTIEQUAL (stack, 0xfffffffffffffecb, 1) , (stack, 0xfffffffffffffecb, 1)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x91d, 4), (stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x91d, 4), (stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x91d, 4), (stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x91d, 4), (stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffef0, 4) INDIRECT (stack, 0xfffffffffffffef0, 4) , (const, 0x91d, 4), (stack, 0xfffffffffffffef0, 4) MULTIEQUAL (stack, 0xfffffffffffffef0, 4) , (stack, 0xfffffffffffffef0, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x91d, 4), (stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x91d, 4), (stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x91d, 4), (stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x91d, 4), (stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x91d, 4), (stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x91d, 4), (stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[ ---  CALL (ram, 0x224170, 8) , (stack, 0xfffffffffffffed8, 8), (stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(ram, 0x4c2e78, 8) COPY (ram, 0x4c2e78, 8), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x91d, 4), (ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(ram, 0x4c5f40, 4) COPY (ram, 0x4c5f40, 4), (ram, 0x4c5f40, 4) INDIRECT (ram, 0x4c5f40, 4) , (const, 0x91d, 4), (ram, 0x4c5f40, 4) MULTIEQUAL (ram, 0x4c5f40, 4) , (ram, 0x4c5f40, 4)]
[(ram, 0x4c5f44, 4) COPY (ram, 0x4c5f44, 4), (ram, 0x4c5f44, 4) INDIRECT (ram, 0x4c5f44, 4) , (const, 0x91d, 4), (ram, 0x4c5f44, 4) MULTIEQUAL (ram, 0x4c5f44, 4) , (ram, 0x4c5f44, 4)]
[(ram, 0x4c5f50, 8) COPY (ram, 0x4c5f50, 8), (ram, 0x4c5f50, 8) INDIRECT (ram, 0x4c5f50, 8) , (const, 0x91d, 4), (ram, 0x4c5f50, 8) MULTIEQUAL (ram, 0x4c5f50, 8) , (ram, 0x4c5f50, 8)]
[(ram, 0x4c5f58, 8) COPY (ram, 0x4c5f58, 8), (ram, 0x4c5f58, 8) INDIRECT (ram, 0x4c5f58, 8) , (const, 0x91d, 4), (ram, 0x4c5f58, 8) MULTIEQUAL (ram, 0x4c5f58, 8) , (ram, 0x4c5f58, 8)]
[(ram, 0x4c5f60, 4) COPY (ram, 0x4c5f60, 4), (ram, 0x4c5f60, 4) INDIRECT (ram, 0x4c5f60, 4) , (const, 0x91d, 4), (ram, 0x4c5f60, 4) MULTIEQUAL (ram, 0x4c5f60, 4) , (ram, 0x4c5f60, 4)]
[(ram, 0x4c5f64, 4) COPY (ram, 0x4c5f64, 4), (ram, 0x4c5f64, 4) INDIRECT (ram, 0x4c5f64, 4) , (const, 0x91d, 4), (ram, 0x4c5f64, 4) MULTIEQUAL (ram, 0x4c5f64, 4) , (ram, 0x4c5f64, 4)]
[(ram, 0x4c8718, 8) COPY (ram, 0x4c8718, 8), (ram, 0x4c8718, 8) INDIRECT (ram, 0x4c8718, 8) , (const, 0x91d, 4), (ram, 0x4c8718, 8) MULTIEQUAL (ram, 0x4c8718, 8) , (ram, 0x4c8718, 8)]
[(ram, 0x4c8790, 4) COPY (ram, 0x4c8790, 4), (ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x91d, 4), (ram, 0x4c8790, 4) MULTIEQUAL (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4)]
[(ram, 0x4c87a0, 4) COPY (ram, 0x4c87a0, 4), (ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x91d, 4), (ram, 0x4c87a0, 4) MULTIEQUAL (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 4), (register, 0x0, 4) COPY (const, 0xfffffffe, 4)]
[(stack, 0xfffffffffffffef0, 4) COPY (const, 0xffffffff, 4)]
[(stack, 0xfffffffffffffef0, 4) MULTIEQUAL (stack, 0xfffffffffffffef0, 4) , (stack, 0xfffffffffffffef0, 4)]
[(unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffee8, 8)]
[ ---  BRANCH (ram, 0x1ee476, 1)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 4) MULTIEQUAL (stack, 0xffffffffffffff00, 4) , (stack, 0xffffffffffffff00, 4) , (stack, 0xffffffffffffff00, 4)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 4) MULTIEQUAL (stack, 0xfffffffffffffef0, 4) , (stack, 0xfffffffffffffef0, 4) , (stack, 0xfffffffffffffef0, 4)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffecb, 1) MULTIEQUAL (stack, 0xfffffffffffffecb, 1) , (stack, 0xfffffffffffffecb, 1) , (stack, 0xfffffffffffffecb, 1)]
[(stack, 0xfffffffffffffeca, 1) MULTIEQUAL (stack, 0xfffffffffffffeca, 1) , (stack, 0xfffffffffffffeca, 1) , (stack, 0xfffffffffffffeca, 1)]
[(stack, 0xfffffffffffffec0, 8) MULTIEQUAL (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8)]
[(stack, 0xfffffffffffffebc, 4) MULTIEQUAL (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(stack, 0xfffffffffffffea8, 8) MULTIEQUAL (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8)]
[(stack, 0xfffffffffffffea0, 8) MULTIEQUAL (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8)]
[(stack, 0xfffffffffffffe98, 8) MULTIEQUAL (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8)]
[(stack, 0xfffffffffffffe90, 8) MULTIEQUAL (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8)]
[(stack, 0xfffffffffffffe88, 8) MULTIEQUAL (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8)]
[(stack, 0xfffffffffffffe84, 4) MULTIEQUAL (stack, 0xfffffffffffffe84, 4) , (stack, 0xfffffffffffffe84, 4) , (stack, 0xfffffffffffffe84, 4)]
[(stack, 0xfffffffffffffe80, 4) MULTIEQUAL (stack, 0xfffffffffffffe80, 4) , (stack, 0xfffffffffffffe80, 4) , (stack, 0xfffffffffffffe80, 4)]
[(stack, 0xfffffffffffffe78, 8) MULTIEQUAL (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8)]
[(stack, 0xfffffffffffffe70, 8) MULTIEQUAL (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8)]
[(stack, 0xfffffffffffffe68, 8) MULTIEQUAL (stack, 0xfffffffffffffe68, 8) , (stack, 0xfffffffffffffe68, 8) , (stack, 0xfffffffffffffe68, 8)]
[(stack, 0xfffffffffffffe60, 8) MULTIEQUAL (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8)]
[(stack, 0xfffffffffffffe5c, 4) MULTIEQUAL (stack, 0xfffffffffffffe5c, 4) , (stack, 0xfffffffffffffe5c, 4) , (stack, 0xfffffffffffffe5c, 4)]
[(ram, 0x4c87a0, 4) MULTIEQUAL (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4)]
[(ram, 0x4c8790, 4) MULTIEQUAL (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4)]
[(ram, 0x4c8718, 8) MULTIEQUAL (ram, 0x4c8718, 8) , (ram, 0x4c8718, 8) , (ram, 0x4c8718, 8)]
[(ram, 0x4c5f64, 4) MULTIEQUAL (ram, 0x4c5f64, 4) , (ram, 0x4c5f64, 4) , (ram, 0x4c5f64, 4)]
[(ram, 0x4c5f60, 4) MULTIEQUAL (ram, 0x4c5f60, 4) , (ram, 0x4c5f60, 4) , (ram, 0x4c5f60, 4)]
[(ram, 0x4c5f58, 8) MULTIEQUAL (ram, 0x4c5f58, 8) , (ram, 0x4c5f58, 8) , (ram, 0x4c5f58, 8)]
[(ram, 0x4c5f50, 8) MULTIEQUAL (ram, 0x4c5f50, 8) , (ram, 0x4c5f50, 8) , (ram, 0x4c5f50, 8)]
[(ram, 0x4c5f44, 4) MULTIEQUAL (ram, 0x4c5f44, 4) , (ram, 0x4c5f44, 4) , (ram, 0x4c5f44, 4)]
[(ram, 0x4c5f40, 4) MULTIEQUAL (ram, 0x4c5f40, 4) , (ram, 0x4c5f40, 4) , (ram, 0x4c5f40, 4)]
[(ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(register, 0x20a, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1) , (register, 0x20a, 1)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x30, 8) MULTIEQUAL (register, 0x30, 8) , (register, 0x30, 8) , (unique, 0x3200, 8)]
[(stack, 0xfffffffffffffecc, 4) COPY (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x1ee495, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x58a00, 4) , (const, 0x0, 4), (unique, 0x58a00, 4) INT_AND (unique, 0xbc80, 4) , (const, 0xfffffffd, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRSUB (register, 0xa0, 8) , (const, 0x4, 8)]
[ ---  CBRANCH (ram, 0x1eef57, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbc80, 4) , (const, 0xa, 4)]
[(stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x8e6, 4)]
[(stack, 0xfffffffffffffeca, 1) INDIRECT (stack, 0xfffffffffffffeca, 1) , (const, 0x8e6, 4)]
[(stack, 0xfffffffffffffecb, 1) INDIRECT (stack, 0xfffffffffffffecb, 1) , (const, 0x8e6, 4)]
[(stack, 0xfffffffffffffecc, 4) INDIRECT (stack, 0xfffffffffffffecc, 4) , (const, 0x8e6, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x8e6, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x8e6, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x8e6, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x8e6, 4)]
[(stack, 0xfffffffffffffef0, 4) INDIRECT (stack, 0xfffffffffffffef0, 4) , (const, 0x8e6, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x8e6, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x8e6, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x8e6, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x8e6, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x8e6, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x8e6, 4)]
[ ---  CALL (ram, 0x224170, 8) , (stack, 0xfffffffffffffed8, 8) , (register, 0x30, 8)]
[(ram, 0x4c2e78, 8) COPY (ram, 0x4c2e78, 8), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x8e6, 4)]
[(ram, 0x4c5f40, 4) COPY (ram, 0x4c5f40, 4), (ram, 0x4c5f40, 4) INDIRECT (ram, 0x4c5f40, 4) , (const, 0x8e6, 4)]
[(ram, 0x4c5f44, 4) COPY (ram, 0x4c5f44, 4), (ram, 0x4c5f44, 4) INDIRECT (ram, 0x4c5f44, 4) , (const, 0x8e6, 4)]
[(ram, 0x4c5f50, 8) COPY (ram, 0x4c5f50, 8), (ram, 0x4c5f50, 8) INDIRECT (ram, 0x4c5f50, 8) , (const, 0x8e6, 4)]
[(ram, 0x4c5f58, 8) COPY (ram, 0x4c5f58, 8), (ram, 0x4c5f58, 8) INDIRECT (ram, 0x4c5f58, 8) , (const, 0x8e6, 4)]
[(ram, 0x4c5f60, 4) COPY (ram, 0x4c5f60, 4), (ram, 0x4c5f60, 4) INDIRECT (ram, 0x4c5f60, 4) , (const, 0x8e6, 4)]
[(ram, 0x4c5f64, 4) COPY (ram, 0x4c5f64, 4), (ram, 0x4c5f64, 4) INDIRECT (ram, 0x4c5f64, 4) , (const, 0x8e6, 4)]
[(ram, 0x4c8718, 8) COPY (ram, 0x4c8718, 8), (ram, 0x4c8718, 8) INDIRECT (ram, 0x4c8718, 8) , (const, 0x8e6, 4)]
[(ram, 0x4c8790, 4) COPY (ram, 0x4c8790, 4), (ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x8e6, 4)]
[(ram, 0x4c87a0, 4) COPY (ram, 0x4c87a0, 4), (ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x8e6, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 4), (register, 0x0, 4) COPY (const, 0xfffffffa, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xe6, 4)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0xe6, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0xe6, 4)]
[(ram, 0x4c5f40, 4) INDIRECT (ram, 0x4c5f40, 4) , (const, 0xe6, 4)]
[(ram, 0x4c5f44, 4) INDIRECT (ram, 0x4c5f44, 4) , (const, 0xe6, 4)]
[(ram, 0x4c5f50, 8) INDIRECT (ram, 0x4c5f50, 8) , (const, 0xe6, 4)]
[(ram, 0x4c5f58, 8) INDIRECT (ram, 0x4c5f58, 8) , (const, 0xe6, 4)]
[(ram, 0x4c5f60, 4) INDIRECT (ram, 0x4c5f60, 4) , (const, 0xe6, 4)]
[(ram, 0x4c5f64, 4) INDIRECT (ram, 0x4c5f64, 4) , (const, 0xe6, 4)]
[(ram, 0x4c8718, 8) INDIRECT (ram, 0x4c8718, 8) , (const, 0xe6, 4)]
[(ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0xe6, 4)]
[(ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0xe6, 4)]
[(stack, 0xfffffffffffffe5c, 4) INDIRECT (stack, 0xfffffffffffffe5c, 4) , (const, 0xe6, 4)]
[(stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0xe6, 4)]
[(stack, 0xfffffffffffffe68, 8) INDIRECT (stack, 0xfffffffffffffe68, 8) , (const, 0xe6, 4)]
[(stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0xe6, 4)]
[(stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0xe6, 4)]
[(stack, 0xfffffffffffffe80, 4) INDIRECT (stack, 0xfffffffffffffe80, 4) , (const, 0xe6, 4)]
[(stack, 0xfffffffffffffe84, 4) INDIRECT (stack, 0xfffffffffffffe84, 4) , (const, 0xe6, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0xe6, 4)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0xe6, 4)]
[(stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0xe6, 4)]
[(stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0xe6, 4)]
[(stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0xe6, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0xe6, 4)]
[(stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0xe6, 4)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0xe6, 4)]
[(stack, 0xfffffffffffffeca, 1) INDIRECT (stack, 0xfffffffffffffeca, 1) , (const, 0xe6, 4)]
[(stack, 0xfffffffffffffecb, 1) INDIRECT (stack, 0xfffffffffffffecb, 1) , (const, 0xe6, 4)]
[(stack, 0xfffffffffffffecc, 4) INDIRECT (stack, 0xfffffffffffffecc, 4) , (const, 0xe6, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0xe6, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0xe6, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0xe6, 4)]
[(stack, 0xfffffffffffffef0, 4) INDIRECT (stack, 0xfffffffffffffef0, 4) , (const, 0xe6, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0xe6, 4)]
[(stack, 0xffffffffffffff00, 4) INDIRECT (stack, 0xffffffffffffff00, 4) , (const, 0xe6, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0xe6, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0xe6, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0xe6, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0xe6, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0xe6, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0xe6, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0xe6, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0xe6, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0xe6, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0xe6, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0xe6, 4)]
[(unique, 0x10000e21, 8) COPY (stack, 0xfffffffffffffed0, 8), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0xe6, 4)]
[ ---  CBRANCH (ram, 0x1eede0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x1ea030, 8) , (register, 0xb0, 8) , (register, 0x30, 8) , (register, 0xa0, 8)]
[(unique, 0x10000403, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(unique, 0x1000040b, 4) MULTIEQUAL (ram, 0x4c5f40, 4) , (ram, 0x4c5f40, 4)]
[(unique, 0x1000040f, 4) MULTIEQUAL (ram, 0x4c5f44, 4) , (ram, 0x4c5f44, 4)]
[(unique, 0x10000413, 8) MULTIEQUAL (ram, 0x4c5f50, 8) , (ram, 0x4c5f50, 8)]
[(unique, 0x1000041b, 8) MULTIEQUAL (ram, 0x4c5f58, 8) , (ram, 0x4c5f58, 8)]
[(unique, 0x10000423, 4) MULTIEQUAL (ram, 0x4c5f60, 4) , (ram, 0x4c5f60, 4)]
[(unique, 0x10000427, 4) MULTIEQUAL (ram, 0x4c5f64, 4) , (ram, 0x4c5f64, 4)]
[(unique, 0x1000042b, 8) MULTIEQUAL (ram, 0x4c8718, 8) , (ram, 0x4c8718, 8)]
[(unique, 0x10000433, 4) MULTIEQUAL (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4)]
[(unique, 0x10000437, 4) MULTIEQUAL (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4)]
[(unique, 0x1000043b, 8) MULTIEQUAL (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8)]
[(unique, 0x10000443, 1) MULTIEQUAL (stack, 0xfffffffffffffeca, 1) , (stack, 0xfffffffffffffeca, 1)]
[(unique, 0x10000444, 1) MULTIEQUAL (stack, 0xfffffffffffffecb, 1) , (stack, 0xfffffffffffffecb, 1)]
[(unique, 0x10000445, 4) MULTIEQUAL (stack, 0xfffffffffffffecc, 4) , (stack, 0xfffffffffffffecc, 4)]
[(unique, 0x10000451, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(unique, 0x10000459, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(unique, 0x10000461, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(unique, 0x10000469, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(unique, 0x10000471, 4) MULTIEQUAL (stack, 0xfffffffffffffef0, 4) , (stack, 0xfffffffffffffef0, 4)]
[(unique, 0x10000475, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(unique, 0x1000047d, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(unique, 0x10000485, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(unique, 0x1000048d, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(unique, 0x10000495, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(unique, 0x1000049d, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[ ---  CBRANCH (ram, 0x1eee0d, 1) , (unique, 0x10000402, 1), (unique, 0x10000402, 1) INT_NOTEQUAL (unique, 0x10000449, 8) , (const, 0x0, 8), (unique, 0x10000449, 8) MULTIEQUAL (unique, 0x10000e19, 8) , (unique, 0x10000e21, 8)]
[ ---  CALL (ram, 0x11f8a8, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (unique, 0x10000449, 8) , (const, 0x20, 8)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x8b2, 4), (ram, 0x4c2e78, 8) INDIRECT (unique, 0x10000403, 8) , (const, 0x8ad, 4)]
[(ram, 0x4c5f40, 4) INDIRECT (ram, 0x4c5f40, 4) , (const, 0x8b2, 4), (ram, 0x4c5f40, 4) INDIRECT (unique, 0x1000040b, 4) , (const, 0x8ad, 4)]
[(ram, 0x4c5f44, 4) INDIRECT (ram, 0x4c5f44, 4) , (const, 0x8b2, 4), (ram, 0x4c5f44, 4) INDIRECT (unique, 0x1000040f, 4) , (const, 0x8ad, 4)]
[(ram, 0x4c5f50, 8) INDIRECT (ram, 0x4c5f50, 8) , (const, 0x8b2, 4), (ram, 0x4c5f50, 8) INDIRECT (unique, 0x10000413, 8) , (const, 0x8ad, 4)]
[(ram, 0x4c5f58, 8) INDIRECT (ram, 0x4c5f58, 8) , (const, 0x8b2, 4), (ram, 0x4c5f58, 8) INDIRECT (unique, 0x1000041b, 8) , (const, 0x8ad, 4)]
[(ram, 0x4c5f60, 4) INDIRECT (ram, 0x4c5f60, 4) , (const, 0x8b2, 4), (ram, 0x4c5f60, 4) INDIRECT (unique, 0x10000423, 4) , (const, 0x8ad, 4)]
[(ram, 0x4c5f64, 4) INDIRECT (ram, 0x4c5f64, 4) , (const, 0x8b2, 4), (ram, 0x4c5f64, 4) INDIRECT (unique, 0x10000427, 4) , (const, 0x8ad, 4)]
[(ram, 0x4c8718, 8) INDIRECT (ram, 0x4c8718, 8) , (const, 0x8b2, 4), (ram, 0x4c8718, 8) INDIRECT (unique, 0x1000042b, 8) , (const, 0x8ad, 4)]
[(ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x8b2, 4), (ram, 0x4c8790, 4) INDIRECT (unique, 0x10000433, 4) , (const, 0x8ad, 4)]
[(ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x8b2, 4), (ram, 0x4c87a0, 4) INDIRECT (unique, 0x10000437, 4) , (const, 0x8ad, 4)]
[(stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x8b2, 4), (stack, 0xfffffffffffffe60, 8) INDIRECT (unique, 0x1000043b, 8) , (const, 0x8ad, 4)]
[(stack, 0xfffffffffffffeca, 1) INDIRECT (stack, 0xfffffffffffffeca, 1) , (const, 0x8b2, 4), (stack, 0xfffffffffffffeca, 1) INDIRECT (unique, 0x10000443, 1) , (const, 0x8ad, 4)]
[(stack, 0xfffffffffffffecb, 1) INDIRECT (stack, 0xfffffffffffffecb, 1) , (const, 0x8b2, 4), (stack, 0xfffffffffffffecb, 1) INDIRECT (unique, 0x10000444, 1) , (const, 0x8ad, 4)]
[(stack, 0xfffffffffffffecc, 4) INDIRECT (stack, 0xfffffffffffffecc, 4) , (const, 0x8b2, 4), (stack, 0xfffffffffffffecc, 4) INDIRECT (unique, 0x10000445, 4) , (const, 0x8ad, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x8b2, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (unique, 0x10000451, 8) , (const, 0x8ad, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x8b2, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (unique, 0x10000459, 8) , (const, 0x8ad, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x8b2, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (unique, 0x10000461, 8) , (const, 0x8ad, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x8b2, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (unique, 0x10000469, 8) , (const, 0x8ad, 4)]
[(stack, 0xfffffffffffffef0, 4) INDIRECT (stack, 0xfffffffffffffef0, 4) , (const, 0x8b2, 4), (stack, 0xfffffffffffffef0, 4) INDIRECT (unique, 0x10000471, 4) , (const, 0x8ad, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x8b2, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (unique, 0x10000475, 8) , (const, 0x8ad, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x8b2, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (unique, 0x1000047d, 8) , (const, 0x8ad, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x8b2, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (unique, 0x10000485, 8) , (const, 0x8ad, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x8b2, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (unique, 0x1000048d, 8) , (const, 0x8ad, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x8b2, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (unique, 0x10000495, 8) , (const, 0x8ad, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x8b2, 4), (stack, 0xffffffffffffff30, 8) INDIRECT (unique, 0x1000049d, 8) , (const, 0x8ad, 4)]
[ ---  CALL (ram, 0x11f8a8, 8) , (unique, 0x10000449, 8)]
[(unique, 0x10000e19, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (unique, 0x10000449, 8) , (const, 0x28, 8)]
[(stack, 0xfffffffffffffe60, 8) INDIRECT (unique, 0x1000043b, 8) , (const, 0x8c3, 4)]
[(stack, 0xfffffffffffffeca, 1) INDIRECT (unique, 0x10000443, 1) , (const, 0x8c3, 4)]
[(stack, 0xfffffffffffffecb, 1) INDIRECT (unique, 0x10000444, 1) , (const, 0x8c3, 4)]
[(stack, 0xfffffffffffffecc, 4) INDIRECT (unique, 0x10000445, 4) , (const, 0x8c3, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (unique, 0x10000451, 8) , (const, 0x8c3, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (unique, 0x10000459, 8) , (const, 0x8c3, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (unique, 0x10000461, 8) , (const, 0x8c3, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (unique, 0x10000469, 8) , (const, 0x8c3, 4)]
[(stack, 0xfffffffffffffef0, 4) INDIRECT (unique, 0x10000471, 4) , (const, 0x8c3, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (unique, 0x10000475, 8) , (const, 0x8c3, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (unique, 0x1000047d, 8) , (const, 0x8c3, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (unique, 0x10000485, 8) , (const, 0x8c3, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (unique, 0x1000048d, 8) , (const, 0x8c3, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (unique, 0x10000495, 8) , (const, 0x8c3, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (unique, 0x1000049d, 8) , (const, 0x8c3, 4)]
[ ---  CALL (ram, 0x224170, 8) , (unique, 0x10000459, 8)]
[(ram, 0x4c2e78, 8) COPY (ram, 0x4c2e78, 8), (ram, 0x4c2e78, 8) INDIRECT (unique, 0x10000403, 8) , (const, 0x8c3, 4)]
[(ram, 0x4c5f40, 4) COPY (ram, 0x4c5f40, 4), (ram, 0x4c5f40, 4) INDIRECT (unique, 0x1000040b, 4) , (const, 0x8c3, 4)]
[(ram, 0x4c5f44, 4) COPY (ram, 0x4c5f44, 4), (ram, 0x4c5f44, 4) INDIRECT (unique, 0x1000040f, 4) , (const, 0x8c3, 4)]
[(ram, 0x4c5f50, 8) COPY (ram, 0x4c5f50, 8), (ram, 0x4c5f50, 8) INDIRECT (unique, 0x10000413, 8) , (const, 0x8c3, 4)]
[(ram, 0x4c5f58, 8) COPY (ram, 0x4c5f58, 8), (ram, 0x4c5f58, 8) INDIRECT (unique, 0x1000041b, 8) , (const, 0x8c3, 4)]
[(ram, 0x4c5f60, 4) COPY (ram, 0x4c5f60, 4), (ram, 0x4c5f60, 4) INDIRECT (unique, 0x10000423, 4) , (const, 0x8c3, 4)]
[(ram, 0x4c5f64, 4) COPY (ram, 0x4c5f64, 4), (ram, 0x4c5f64, 4) INDIRECT (unique, 0x10000427, 4) , (const, 0x8c3, 4)]
[(ram, 0x4c8718, 8) COPY (ram, 0x4c8718, 8), (ram, 0x4c8718, 8) INDIRECT (unique, 0x1000042b, 8) , (const, 0x8c3, 4)]
[(ram, 0x4c8790, 4) COPY (ram, 0x4c8790, 4), (ram, 0x4c8790, 4) INDIRECT (unique, 0x10000433, 4) , (const, 0x8c3, 4)]
[(ram, 0x4c87a0, 4) COPY (ram, 0x4c87a0, 4), (ram, 0x4c87a0, 4) INDIRECT (unique, 0x10000437, 4) , (const, 0x8c3, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 4), (register, 0x0, 4) COPY (register, 0x0, 4), (register, 0x0, 4) INT_2COMP (register, 0x0, 4)]
[(register, 0x10, 4) COPY (const, 0x0, 4)]
[(stack, 0xfffffffffffffeb8, 4) COPY (const, 0x0, 4)]
[(unique, 0x10000cf1, 8) COPY (stack, 0xfffffffffffffed0, 8)]
[ ---  CBRANCH (ram, 0x1ee4ea, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xfffffffffffffed0, 8) , (const, 0x0, 8)]
[(register, 0x10, 4) INT_ADD (register, 0x10, 4) , (const, 0x1, 4), (register, 0x10, 4) MULTIEQUAL (register, 0x10, 4) , (register, 0x10, 4)]
[ ---  CBRANCH (ram, 0x1ee4d8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0x0, 8) , (const, 0x28, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x10000cf1, 8) , (unique, 0xbd80, 8)]
[(stack, 0xfffffffffffffeb8, 4) COPY (register, 0x10, 4)]
[(stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4)]
[ ---  CBRANCH (ram, 0x1ee9e1, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (stack, 0xfffffffffffffecc, 4) , (const, 0x2, 4)]
[(stack, 0xfffffffffffffe80, 4) COPY (ram, 0x4c5f44, 4)]
[ ---  CBRANCH (ram, 0x1eed10, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4c8790, 4) , (const, 0x0, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x896, 4)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x896, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x896, 4)]
[(ram, 0x4c5f40, 4) INDIRECT (ram, 0x4c5f40, 4) , (const, 0x896, 4)]
[(ram, 0x4c5f44, 4) INDIRECT (ram, 0x4c5f44, 4) , (const, 0x896, 4)]
[(ram, 0x4c5f50, 8) INDIRECT (ram, 0x4c5f50, 8) , (const, 0x896, 4)]
[(ram, 0x4c5f58, 8) INDIRECT (ram, 0x4c5f58, 8) , (const, 0x896, 4)]
[(ram, 0x4c5f60, 4) INDIRECT (ram, 0x4c5f60, 4) , (const, 0x896, 4)]
[(ram, 0x4c5f64, 4) INDIRECT (ram, 0x4c5f64, 4) , (const, 0x896, 4)]
[(ram, 0x4c8718, 8) INDIRECT (ram, 0x4c8718, 8) , (const, 0x896, 4)]
[(ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x896, 4)]
[(ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x896, 4)]
[(stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x896, 4)]
[(stack, 0xfffffffffffffe68, 8) INDIRECT (stack, 0xfffffffffffffe68, 8) , (const, 0x896, 4)]
[(stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0x896, 4)]
[(stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0x896, 4)]
[(stack, 0xfffffffffffffe80, 4) INDIRECT (stack, 0xfffffffffffffe80, 4) , (const, 0x896, 4)]
[(stack, 0xfffffffffffffe84, 4) INDIRECT (stack, 0xfffffffffffffe84, 4) , (const, 0x896, 4)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x896, 4)]
[(stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x896, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x896, 4)]
[(stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x896, 4)]
[(stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x896, 4)]
[(stack, 0xfffffffffffffeca, 1) INDIRECT (stack, 0xfffffffffffffeca, 1) , (const, 0x896, 4)]
[(stack, 0xfffffffffffffecb, 1) INDIRECT (stack, 0xfffffffffffffecb, 1) , (const, 0x896, 4)]
[(stack, 0xfffffffffffffecc, 4) INDIRECT (stack, 0xfffffffffffffecc, 4) , (const, 0x896, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x896, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x896, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x896, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x896, 4)]
[(stack, 0xfffffffffffffef0, 4) INDIRECT (stack, 0xfffffffffffffef0, 4) , (const, 0x896, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x896, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x896, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x896, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x896, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x896, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x896, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x896, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x896, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x896, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x896, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x896, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x896, 4)]
[ ---  CALLIND (register, 0x0, 8) , (unique, 0x10000525, 8) , (unique, 0x100004b5, 8), (unique, 0x10000525, 8) PTRSUB (const, 0x0, 8) , (const, 0x4c5f44, 8), (unique, 0x100004b5, 8) PTRSUB (const, 0x0, 8) , (const, 0x1ec7c0, 8), (register, 0x0, 8) CAST (unique, 0x10000e87, 8), (unique, 0x10000e87, 8) INT_XOR (register, 0x0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10000e7f, 8), (unique, 0x10000e7f, 8) INT_ADD (register, 0x110, 8) , (const, 0x30, 8), (register, 0x0, 8) INT_OR (unique, 0x4ff00, 8) , (unique, 0x50000, 8), (unique, 0x50000, 8) INT_LEFT (ram, 0x4c8718, 8) , (const, 0x2f, 4), (unique, 0x4ff00, 8) INT_RIGHT (ram, 0x4c8718, 8) , (const, 0x11, 4)]
[ ---  BRANCH (ram, 0x1ee523, 1)]
[ ---  CBRANCH (ram, 0x1eee67, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4c5f44, 4) , (const, 0x0, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x867, 4)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x867, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x867, 4)]
[(ram, 0x4c5f40, 4) INDIRECT (ram, 0x4c5f40, 4) , (const, 0x867, 4)]
[(ram, 0x4c5f50, 8) INDIRECT (ram, 0x4c5f50, 8) , (const, 0x867, 4)]
[(ram, 0x4c5f58, 8) INDIRECT (ram, 0x4c5f58, 8) , (const, 0x867, 4)]
[(ram, 0x4c5f60, 4) INDIRECT (ram, 0x4c5f60, 4) , (const, 0x867, 4)]
[(ram, 0x4c5f64, 4) INDIRECT (ram, 0x4c5f64, 4) , (const, 0x867, 4)]
[(ram, 0x4c8718, 8) INDIRECT (ram, 0x4c8718, 8) , (const, 0x867, 4)]
[(ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x867, 4)]
[(ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x867, 4)]
[(stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x867, 4)]
[(stack, 0xfffffffffffffe68, 8) INDIRECT (stack, 0xfffffffffffffe68, 8) , (const, 0x867, 4)]
[(stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0x867, 4)]
[(stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0x867, 4)]
[(stack, 0xfffffffffffffe80, 4) INDIRECT (stack, 0xfffffffffffffe80, 4) , (const, 0x867, 4)]
[(stack, 0xfffffffffffffe84, 4) INDIRECT (stack, 0xfffffffffffffe84, 4) , (const, 0x867, 4)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x867, 4)]
[(stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x867, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x867, 4)]
[(stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x867, 4)]
[(stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x867, 4)]
[(stack, 0xfffffffffffffeca, 1) INDIRECT (stack, 0xfffffffffffffeca, 1) , (const, 0x867, 4)]
[(stack, 0xfffffffffffffecb, 1) INDIRECT (stack, 0xfffffffffffffecb, 1) , (const, 0x867, 4)]
[(stack, 0xfffffffffffffecc, 4) INDIRECT (stack, 0xfffffffffffffecc, 4) , (const, 0x867, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x867, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x867, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x867, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x867, 4)]
[(stack, 0xfffffffffffffef0, 4) INDIRECT (stack, 0xfffffffffffffef0, 4) , (const, 0x867, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x867, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x867, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x867, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x867, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x867, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x867, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x867, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x867, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x867, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x867, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x867, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x867, 4)]
[ ---  CALL (ram, 0x1ec7c0, 8)]
[(ram, 0x4c5f44, 4) INT_OR (ram, 0x4c5f44, 4) , (const, 0x2, 4), (ram, 0x4c5f44, 4) INDIRECT (ram, 0x4c5f44, 4) , (const, 0x867, 4)]
[ ---  BRANCH (ram, 0x1ee523, 1)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 4) MULTIEQUAL (stack, 0xfffffffffffffef0, 4) , (stack, 0xfffffffffffffef0, 4) , (stack, 0xfffffffffffffef0, 4)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffecc, 4) MULTIEQUAL (stack, 0xfffffffffffffecc, 4) , (stack, 0xfffffffffffffecc, 4) , (stack, 0xfffffffffffffecc, 4)]
[(stack, 0xfffffffffffffecb, 1) MULTIEQUAL (stack, 0xfffffffffffffecb, 1) , (stack, 0xfffffffffffffecb, 1) , (stack, 0xfffffffffffffecb, 1)]
[(stack, 0xfffffffffffffeca, 1) MULTIEQUAL (stack, 0xfffffffffffffeca, 1) , (stack, 0xfffffffffffffeca, 1) , (stack, 0xfffffffffffffeca, 1)]
[(stack, 0xfffffffffffffebc, 4) MULTIEQUAL (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(stack, 0xfffffffffffffea0, 8) MULTIEQUAL (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8)]
[(stack, 0xfffffffffffffe90, 8) MULTIEQUAL (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8)]
[(stack, 0xfffffffffffffe84, 4) MULTIEQUAL (stack, 0xfffffffffffffe84, 4) , (stack, 0xfffffffffffffe84, 4) , (stack, 0xfffffffffffffe84, 4)]
[(stack, 0xfffffffffffffe80, 4) MULTIEQUAL (stack, 0xfffffffffffffe80, 4) , (stack, 0xfffffffffffffe80, 4) , (stack, 0xfffffffffffffe80, 4)]
[(stack, 0xfffffffffffffe78, 8) MULTIEQUAL (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8)]
[(stack, 0xfffffffffffffe70, 8) MULTIEQUAL (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8)]
[(stack, 0xfffffffffffffe68, 8) MULTIEQUAL (stack, 0xfffffffffffffe68, 8) , (stack, 0xfffffffffffffe68, 8) , (stack, 0xfffffffffffffe68, 8)]
[(stack, 0xfffffffffffffe60, 8) MULTIEQUAL (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8)]
[(ram, 0x4c87a0, 4) MULTIEQUAL (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4)]
[(ram, 0x4c8790, 4) MULTIEQUAL (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4)]
[(ram, 0x4c8718, 8) MULTIEQUAL (ram, 0x4c8718, 8) , (ram, 0x4c8718, 8) , (ram, 0x4c8718, 8)]
[(ram, 0x4c5f64, 4) MULTIEQUAL (ram, 0x4c5f64, 4) , (ram, 0x4c5f64, 4) , (ram, 0x4c5f64, 4)]
[(ram, 0x4c5f60, 4) MULTIEQUAL (ram, 0x4c5f60, 4) , (ram, 0x4c5f60, 4) , (ram, 0x4c5f60, 4)]
[(ram, 0x4c5f58, 8) MULTIEQUAL (ram, 0x4c5f58, 8) , (ram, 0x4c5f58, 8) , (ram, 0x4c5f58, 8)]
[(ram, 0x4c5f50, 8) MULTIEQUAL (ram, 0x4c5f50, 8) , (ram, 0x4c5f50, 8) , (ram, 0x4c5f50, 8)]
[(ram, 0x4c5f44, 4) MULTIEQUAL (ram, 0x4c5f44, 4) , (ram, 0x4c5f44, 4) , (ram, 0x4c5f44, 4)]
[(ram, 0x4c5f40, 4) MULTIEQUAL (ram, 0x4c5f40, 4) , (ram, 0x4c5f40, 4) , (ram, 0x4c5f40, 4)]
[(ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(register, 0x20a, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1) , (register, 0x20a, 1)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(stack, 0xfffffffffffffe88, 8) COPY (register, 0x0, 8), (register, 0x0, 8) INT_SEXT (stack, 0xfffffffffffffeb8, 4), (stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4)]
[ ---  CBRANCH (ram, 0x1ee55e, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (unique, 0x100003ad, 8) , (const, 0x1001, 8), (unique, 0x100003ad, 8) INT_MULT (register, 0x0, 8) , (const, 0x38, 8), (register, 0x0, 8) INT_SEXT (stack, 0xfffffffffffffeb8, 4), (stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1c0, 4)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x1c0, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x1c0, 4)]
[(ram, 0x4c5f40, 4) INDIRECT (ram, 0x4c5f40, 4) , (const, 0x1c0, 4)]
[(ram, 0x4c5f44, 4) INDIRECT (ram, 0x4c5f44, 4) , (const, 0x1c0, 4)]
[(ram, 0x4c5f50, 8) INDIRECT (ram, 0x4c5f50, 8) , (const, 0x1c0, 4)]
[(ram, 0x4c5f58, 8) INDIRECT (ram, 0x4c5f58, 8) , (const, 0x1c0, 4)]
[(ram, 0x4c5f60, 4) INDIRECT (ram, 0x4c5f60, 4) , (const, 0x1c0, 4)]
[(ram, 0x4c5f64, 4) INDIRECT (ram, 0x4c5f64, 4) , (const, 0x1c0, 4)]
[(ram, 0x4c8718, 8) INDIRECT (ram, 0x4c8718, 8) , (const, 0x1c0, 4)]
[(ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x1c0, 4)]
[(ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x1c0, 4)]
[(stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x1c0, 4)]
[(stack, 0xfffffffffffffe68, 8) INDIRECT (stack, 0xfffffffffffffe68, 8) , (const, 0x1c0, 4)]
[(stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0x1c0, 4)]
[(stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0x1c0, 4)]
[(stack, 0xfffffffffffffe80, 4) INDIRECT (stack, 0xfffffffffffffe80, 4) , (const, 0x1c0, 4)]
[(stack, 0xfffffffffffffe84, 4) INDIRECT (stack, 0xfffffffffffffe84, 4) , (const, 0x1c0, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x1c0, 4)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x1c0, 4)]
[(stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x1c0, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x1c0, 4)]
[(stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x1c0, 4)]
[(stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x1c0, 4)]
[(stack, 0xfffffffffffffeca, 1) INDIRECT (stack, 0xfffffffffffffeca, 1) , (const, 0x1c0, 4)]
[(stack, 0xfffffffffffffecb, 1) INDIRECT (stack, 0xfffffffffffffecb, 1) , (const, 0x1c0, 4)]
[(stack, 0xfffffffffffffecc, 4) INDIRECT (stack, 0xfffffffffffffecc, 4) , (const, 0x1c0, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x1c0, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x1c0, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x1c0, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x1c0, 4)]
[(stack, 0xfffffffffffffef0, 4) INDIRECT (stack, 0xfffffffffffffef0, 4) , (const, 0x1c0, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x1c0, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x1c0, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x1c0, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x1c0, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x1c0, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x1c0, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x1c0, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x1c0, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x1c0, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x1c0, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x1c0, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x1c0, 4)]
[ ---  CBRANCH (ram, 0x1ee778, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x2141b0, 8) , (unique, 0x100003ad, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 4) MULTIEQUAL (stack, 0xfffffffffffffef0, 4) , (stack, 0xfffffffffffffef0, 4)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffecc, 4) MULTIEQUAL (stack, 0xfffffffffffffecc, 4) , (stack, 0xfffffffffffffecc, 4)]
[(stack, 0xfffffffffffffecb, 1) MULTIEQUAL (stack, 0xfffffffffffffecb, 1) , (stack, 0xfffffffffffffecb, 1)]
[(stack, 0xfffffffffffffeca, 1) MULTIEQUAL (stack, 0xfffffffffffffeca, 1) , (stack, 0xfffffffffffffeca, 1)]
[(stack, 0xfffffffffffffebc, 4) MULTIEQUAL (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4)]
[(stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(stack, 0xfffffffffffffea0, 8) MULTIEQUAL (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8)]
[(stack, 0xfffffffffffffe90, 8) MULTIEQUAL (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8)]
[(stack, 0xfffffffffffffe88, 8) MULTIEQUAL (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8)]
[(stack, 0xfffffffffffffe84, 4) MULTIEQUAL (stack, 0xfffffffffffffe84, 4) , (stack, 0xfffffffffffffe84, 4)]
[(stack, 0xfffffffffffffe80, 4) MULTIEQUAL (stack, 0xfffffffffffffe80, 4) , (stack, 0xfffffffffffffe80, 4)]
[(stack, 0xfffffffffffffe78, 8) MULTIEQUAL (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8)]
[(stack, 0xfffffffffffffe70, 8) MULTIEQUAL (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8)]
[(stack, 0xfffffffffffffe68, 8) MULTIEQUAL (stack, 0xfffffffffffffe68, 8) , (stack, 0xfffffffffffffe68, 8)]
[(stack, 0xfffffffffffffe60, 8) MULTIEQUAL (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8)]
[(ram, 0x4c87a0, 4) MULTIEQUAL (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4)]
[(ram, 0x4c8790, 4) MULTIEQUAL (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4)]
[(ram, 0x4c8718, 8) MULTIEQUAL (ram, 0x4c8718, 8) , (ram, 0x4c8718, 8)]
[(ram, 0x4c5f64, 4) MULTIEQUAL (ram, 0x4c5f64, 4) , (ram, 0x4c5f64, 4)]
[(ram, 0x4c5f60, 4) MULTIEQUAL (ram, 0x4c5f60, 4) , (ram, 0x4c5f60, 4)]
[(ram, 0x4c5f58, 8) MULTIEQUAL (ram, 0x4c5f58, 8) , (ram, 0x4c5f58, 8)]
[(ram, 0x4c5f50, 8) MULTIEQUAL (ram, 0x4c5f50, 8) , (ram, 0x4c5f50, 8)]
[(ram, 0x4c5f44, 4) MULTIEQUAL (ram, 0x4c5f44, 4) , (ram, 0x4c5f44, 4)]
[(ram, 0x4c5f40, 4) MULTIEQUAL (ram, 0x4c5f40, 4) , (ram, 0x4c5f40, 4)]
[(ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(register, 0x20a, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(stack, 0xfffffffffffffe5c, 4) COPY (const, 0x1, 4)]
[(stack, 0xfffffffffffffe98, 8) COPY (unique, 0x3800, 8), (unique, 0x3800, 8) CAST (unique, 0x10000e97, 8), (unique, 0x10000e97, 8) INT_ADD (unique, 0x10000e8f, 8) , (unique, 0x1000019a, 8), (unique, 0x10000e8f, 8) CAST (unique, 0x10000b9d, 8), (unique, 0x10000b9d, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffe60, 8), (unique, 0x1000019a, 8) INT_2COMP (register, 0xa0, 8), (register, 0xa0, 8) INT_AND (register, 0xa0, 8) , (const, 0xfffffffffffffff0, 8), (register, 0xa0, 8) INT_ADD (unique, 0x100003ad, 8) , (const, 0x1e, 8)]
[(unique, 0x10000d51, 8) COPY (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x1000057d, 8) , (unique, 0x1000019a, 8) , (const, 0x1, 8), (unique, 0x1000057d, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffe58, 8), (unique, 0x1000019a, 8) INT_2COMP (register, 0xa0, 8), (register, 0xa0, 8) INT_AND (register, 0xa0, 8) , (const, 0xfffffffffffffff0, 8), (register, 0xa0, 8) INT_ADD (unique, 0x100003ad, 8) , (const, 0x1e, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x84e, 4)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x84e, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x84e, 4)]
[(ram, 0x4c5f40, 4) INDIRECT (ram, 0x4c5f40, 4) , (const, 0x84e, 4)]
[(ram, 0x4c5f44, 4) INDIRECT (ram, 0x4c5f44, 4) , (const, 0x84e, 4)]
[(ram, 0x4c5f50, 8) INDIRECT (ram, 0x4c5f50, 8) , (const, 0x84e, 4)]
[(ram, 0x4c5f58, 8) INDIRECT (ram, 0x4c5f58, 8) , (const, 0x84e, 4)]
[(ram, 0x4c5f60, 4) INDIRECT (ram, 0x4c5f60, 4) , (const, 0x84e, 4)]
[(ram, 0x4c5f64, 4) INDIRECT (ram, 0x4c5f64, 4) , (const, 0x84e, 4)]
[(ram, 0x4c8718, 8) INDIRECT (ram, 0x4c8718, 8) , (const, 0x84e, 4)]
[(ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x84e, 4)]
[(ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x84e, 4)]
[(stack, 0xfffffffffffffe5c, 4) INDIRECT (register, 0x0, 4) , (const, 0x84e, 4)]
[(stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x84e, 4)]
[(stack, 0xfffffffffffffe68, 8) INDIRECT (stack, 0xfffffffffffffe68, 8) , (const, 0x84e, 4)]
[(stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0x84e, 4)]
[(stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0x84e, 4)]
[(stack, 0xfffffffffffffe80, 4) INDIRECT (stack, 0xfffffffffffffe80, 4) , (const, 0x84e, 4)]
[(stack, 0xfffffffffffffe84, 4) INDIRECT (stack, 0xfffffffffffffe84, 4) , (const, 0x84e, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x84e, 4)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x84e, 4)]
[(stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x84e, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x84e, 4)]
[(stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x84e, 4)]
[(stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x84e, 4)]
[(stack, 0xfffffffffffffeca, 1) INDIRECT (stack, 0xfffffffffffffeca, 1) , (const, 0x84e, 4)]
[(stack, 0xfffffffffffffecb, 1) INDIRECT (stack, 0xfffffffffffffecb, 1) , (const, 0x84e, 4)]
[(stack, 0xfffffffffffffecc, 4) INDIRECT (stack, 0xfffffffffffffecc, 4) , (const, 0x84e, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x84e, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x84e, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x84e, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x84e, 4)]
[(stack, 0xfffffffffffffef0, 4) INDIRECT (stack, 0xfffffffffffffef0, 4) , (const, 0x84e, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x84e, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x84e, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x84e, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x84e, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x84e, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x84e, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x84e, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x84e, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x84e, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x84e, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x84e, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x84e, 4)]
[(stack, 0xfffffffffffffe98, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10000e9f, 8), (unique, 0x10000e9f, 8) CALL (ram, 0x11f8a0, 8) , (unique, 0x100003ad, 8)]
[(unique, 0x10000d59, 8) COPY (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x1ee583, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10000e9f, 8), (unique, 0x10000e9f, 8) CALL (ram, 0x11f8a0, 8) , (unique, 0x100003ad, 8)]
[(stack, 0xfffffffffffffe5c, 4) INDIRECT (stack, 0xfffffffffffffe5c, 4) , (const, 0x862, 4)]
[(stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x862, 4)]
[(stack, 0xfffffffffffffe80, 4) INDIRECT (stack, 0xfffffffffffffe80, 4) , (const, 0x862, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x862, 4)]
[(stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x862, 4)]
[(stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x862, 4)]
[(stack, 0xfffffffffffffeca, 1) INDIRECT (stack, 0xfffffffffffffeca, 1) , (const, 0x862, 4)]
[(stack, 0xfffffffffffffecb, 1) INDIRECT (stack, 0xfffffffffffffecb, 1) , (const, 0x862, 4)]
[(stack, 0xfffffffffffffecc, 4) INDIRECT (stack, 0xfffffffffffffecc, 4) , (const, 0x862, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x862, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x862, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x862, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x862, 4)]
[(stack, 0xfffffffffffffef0, 4) INDIRECT (stack, 0xfffffffffffffef0, 4) , (const, 0x862, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x862, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x862, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x862, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x862, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x862, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x862, 4)]
[ ---  CALL (ram, 0x224170, 8) , (stack, 0xfffffffffffffed8, 8)]
[(ram, 0x4c2e78, 8) COPY (ram, 0x4c2e78, 8), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x862, 4)]
[(ram, 0x4c5f40, 4) COPY (ram, 0x4c5f40, 4), (ram, 0x4c5f40, 4) INDIRECT (ram, 0x4c5f40, 4) , (const, 0x862, 4)]
[(ram, 0x4c5f44, 4) COPY (ram, 0x4c5f44, 4), (ram, 0x4c5f44, 4) INDIRECT (ram, 0x4c5f44, 4) , (const, 0x862, 4)]
[(ram, 0x4c5f50, 8) COPY (ram, 0x4c5f50, 8), (ram, 0x4c5f50, 8) INDIRECT (ram, 0x4c5f50, 8) , (const, 0x862, 4)]
[(ram, 0x4c5f58, 8) COPY (ram, 0x4c5f58, 8), (ram, 0x4c5f58, 8) INDIRECT (ram, 0x4c5f58, 8) , (const, 0x862, 4)]
[(ram, 0x4c5f60, 4) COPY (ram, 0x4c5f60, 4), (ram, 0x4c5f60, 4) INDIRECT (ram, 0x4c5f60, 4) , (const, 0x862, 4)]
[(ram, 0x4c5f64, 4) COPY (ram, 0x4c5f64, 4), (ram, 0x4c5f64, 4) INDIRECT (ram, 0x4c5f64, 4) , (const, 0x862, 4)]
[(ram, 0x4c8718, 8) COPY (ram, 0x4c8718, 8), (ram, 0x4c8718, 8) INDIRECT (ram, 0x4c8718, 8) , (const, 0x862, 4)]
[(ram, 0x4c8790, 4) COPY (ram, 0x4c8790, 4), (ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x862, 4)]
[(ram, 0x4c87a0, 4) COPY (ram, 0x4c87a0, 4), (ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x862, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 4), (register, 0x0, 4) COPY (const, 0xfffffff6, 4)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 4) MULTIEQUAL (stack, 0xfffffffffffffef0, 4) , (stack, 0xfffffffffffffef0, 4)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffecc, 4) MULTIEQUAL (stack, 0xfffffffffffffecc, 4) , (stack, 0xfffffffffffffecc, 4)]
[(stack, 0xfffffffffffffecb, 1) MULTIEQUAL (stack, 0xfffffffffffffecb, 1) , (stack, 0xfffffffffffffecb, 1)]
[(stack, 0xfffffffffffffeca, 1) MULTIEQUAL (stack, 0xfffffffffffffeca, 1) , (stack, 0xfffffffffffffeca, 1)]
[(stack, 0xfffffffffffffebc, 4) MULTIEQUAL (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4)]
[(stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(stack, 0xfffffffffffffea0, 8) MULTIEQUAL (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8)]
[(stack, 0xfffffffffffffe90, 8) MULTIEQUAL (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8)]
[(stack, 0xfffffffffffffe84, 4) MULTIEQUAL (stack, 0xfffffffffffffe84, 4) , (stack, 0xfffffffffffffe84, 4)]
[(stack, 0xfffffffffffffe80, 4) MULTIEQUAL (stack, 0xfffffffffffffe80, 4) , (stack, 0xfffffffffffffe80, 4)]
[(stack, 0xfffffffffffffe78, 8) MULTIEQUAL (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8)]
[(stack, 0xfffffffffffffe70, 8) MULTIEQUAL (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8)]
[(stack, 0xfffffffffffffe68, 8) MULTIEQUAL (stack, 0xfffffffffffffe68, 8) , (stack, 0xfffffffffffffe68, 8)]
[(stack, 0xfffffffffffffe60, 8) MULTIEQUAL (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8)]
[(stack, 0xfffffffffffffe5c, 4) MULTIEQUAL (stack, 0xfffffffffffffe5c, 4) , (stack, 0xfffffffffffffe5c, 4)]
[(ram, 0x4c87a0, 4) MULTIEQUAL (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4)]
[(ram, 0x4c8790, 4) MULTIEQUAL (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4)]
[(ram, 0x4c8718, 8) MULTIEQUAL (ram, 0x4c8718, 8) , (ram, 0x4c8718, 8)]
[(ram, 0x4c5f64, 4) MULTIEQUAL (ram, 0x4c5f64, 4) , (ram, 0x4c5f64, 4)]
[(ram, 0x4c5f60, 4) MULTIEQUAL (ram, 0x4c5f60, 4) , (ram, 0x4c5f60, 4)]
[(ram, 0x4c5f58, 8) MULTIEQUAL (ram, 0x4c5f58, 8) , (ram, 0x4c5f58, 8)]
[(ram, 0x4c5f50, 8) MULTIEQUAL (ram, 0x4c5f50, 8) , (ram, 0x4c5f50, 8)]
[(ram, 0x4c5f44, 4) MULTIEQUAL (ram, 0x4c5f44, 4) , (ram, 0x4c5f44, 4)]
[(ram, 0x4c5f40, 4) MULTIEQUAL (ram, 0x4c5f40, 4) , (ram, 0x4c5f40, 4)]
[(ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(register, 0x20a, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x20, 8) MULTIEQUAL (unique, 0x10000d51, 8) , (unique, 0x10000d59, 8)]
[(stack, 0xfffffffffffffea8, 8) COPY (unique, 0x10000ea7, 8), (unique, 0x10000ea7, 8) CAST (register, 0x0, 8), (register, 0x0, 8) PTRADD (stack, 0xfffffffffffffe98, 8) , (unique, 0x10000bf8, 8) , (const, 0x8, 8), (unique, 0x10000bf8, 8) INT_MULT (stack, 0xfffffffffffffe88, 8) , (const, 0x6, 8), (stack, 0xfffffffffffffe88, 8) MULTIEQUAL (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8), (stack, 0xfffffffffffffe98, 8) MULTIEQUAL (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8)]
[ ---  CBRANCH (ram, 0x1eee30, 1) , (unique, 0x100003c8, 1), (unique, 0x100003c8, 1) BOOL_NEGATE (unique, 0x100003c9, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000eaf, 8) , (const, 0x1eee51, 8), (unique, 0x10000eaf, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x849, 4)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x849, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x849, 4)]
[(ram, 0x4c5f40, 4) INDIRECT (ram, 0x4c5f40, 4) , (const, 0x849, 4)]
[(ram, 0x4c5f44, 4) INDIRECT (ram, 0x4c5f44, 4) , (const, 0x849, 4)]
[(ram, 0x4c5f50, 8) INDIRECT (ram, 0x4c5f50, 8) , (const, 0x849, 4)]
[(ram, 0x4c5f58, 8) INDIRECT (ram, 0x4c5f58, 8) , (const, 0x849, 4)]
[(ram, 0x4c5f60, 4) INDIRECT (ram, 0x4c5f60, 4) , (const, 0x849, 4)]
[(ram, 0x4c5f64, 4) INDIRECT (ram, 0x4c5f64, 4) , (const, 0x849, 4)]
[(ram, 0x4c8718, 8) INDIRECT (ram, 0x4c8718, 8) , (const, 0x849, 4)]
[(ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x849, 4)]
[(ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x849, 4)]
[(stack, 0xfffffffffffffe5c, 4) INDIRECT (stack, 0xfffffffffffffe5c, 4) , (const, 0x849, 4), (stack, 0xfffffffffffffe5c, 4) INDIRECT (stack, 0xfffffffffffffe5c, 4) , (const, 0x848, 4)]
[(stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x849, 4), (stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x848, 4)]
[(stack, 0xfffffffffffffe68, 8) INDIRECT (stack, 0xfffffffffffffe68, 8) , (const, 0x849, 4), (stack, 0xfffffffffffffe68, 8) INDIRECT (stack, 0xfffffffffffffe68, 8) , (const, 0x848, 4)]
[(stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0x849, 4), (stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0x848, 4)]
[(stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0x849, 4), (stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0x848, 4)]
[(stack, 0xfffffffffffffe80, 4) INDIRECT (stack, 0xfffffffffffffe80, 4) , (const, 0x849, 4), (stack, 0xfffffffffffffe80, 4) INDIRECT (stack, 0xfffffffffffffe80, 4) , (const, 0x848, 4)]
[(stack, 0xfffffffffffffe84, 4) INDIRECT (stack, 0xfffffffffffffe84, 4) , (const, 0x849, 4), (stack, 0xfffffffffffffe84, 4) INDIRECT (stack, 0xfffffffffffffe84, 4) , (const, 0x848, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x849, 4), (stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x848, 4)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x849, 4), (stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x848, 4)]
[(stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x849, 4), (stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x848, 4)]
[(stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x849, 4), (stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x848, 4)]
[(stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x849, 4), (stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x848, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x849, 4), (stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x848, 4)]
[(stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x849, 4), (stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x848, 4)]
[(stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x849, 4), (stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x848, 4)]
[(stack, 0xfffffffffffffeca, 1) INDIRECT (stack, 0xfffffffffffffeca, 1) , (const, 0x849, 4), (stack, 0xfffffffffffffeca, 1) INDIRECT (stack, 0xfffffffffffffeca, 1) , (const, 0x848, 4)]
[(stack, 0xfffffffffffffecb, 1) INDIRECT (stack, 0xfffffffffffffecb, 1) , (const, 0x849, 4), (stack, 0xfffffffffffffecb, 1) INDIRECT (stack, 0xfffffffffffffecb, 1) , (const, 0x848, 4)]
[(stack, 0xfffffffffffffecc, 4) INDIRECT (stack, 0xfffffffffffffecc, 4) , (const, 0x849, 4), (stack, 0xfffffffffffffecc, 4) INDIRECT (stack, 0xfffffffffffffecc, 4) , (const, 0x848, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x849, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x848, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x849, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x848, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x849, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x848, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x849, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x848, 4)]
[(stack, 0xfffffffffffffef0, 4) INDIRECT (stack, 0xfffffffffffffef0, 4) , (const, 0x849, 4), (stack, 0xfffffffffffffef0, 4) INDIRECT (stack, 0xfffffffffffffef0, 4) , (const, 0x848, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x849, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x848, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x849, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x848, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x849, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x848, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x849, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x848, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x849, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x848, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x849, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x848, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x849, 4), (stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x848, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x849, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x848, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x849, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x848, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x849, 4), (stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x848, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x849, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x848, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x849, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x848, 4)]
[ ---  CALL (ram, 0x2239b0, 8) , (unique, 0x3200, 8) , (unique, 0x3200, 8) , (unique, 0x3200, 8), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffeca, 8), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffecb, 8), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffed8, 8)]
[ ---  BRANCH (ram, 0x1ee5a8, 1)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 4) MULTIEQUAL (stack, 0xfffffffffffffef0, 4) , (stack, 0xfffffffffffffef0, 4)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffecc, 4) MULTIEQUAL (stack, 0xfffffffffffffecc, 4) , (stack, 0xfffffffffffffecc, 4)]
[(stack, 0xfffffffffffffecb, 1) MULTIEQUAL (stack, 0xfffffffffffffecb, 1) , (stack, 0xfffffffffffffecb, 1)]
[(stack, 0xfffffffffffffeca, 1) MULTIEQUAL (stack, 0xfffffffffffffeca, 1) , (stack, 0xfffffffffffffeca, 1)]
[(stack, 0xfffffffffffffebc, 4) MULTIEQUAL (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4)]
[(stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(stack, 0xfffffffffffffea8, 8) MULTIEQUAL (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8)]
[(stack, 0xfffffffffffffea0, 8) MULTIEQUAL (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8)]
[(stack, 0xfffffffffffffe98, 8) MULTIEQUAL (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8)]
[(stack, 0xfffffffffffffe90, 8) MULTIEQUAL (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8)]
[(stack, 0xfffffffffffffe88, 8) MULTIEQUAL (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8)]
[(stack, 0xfffffffffffffe84, 4) MULTIEQUAL (stack, 0xfffffffffffffe84, 4) , (stack, 0xfffffffffffffe84, 4)]
[(stack, 0xfffffffffffffe80, 4) MULTIEQUAL (stack, 0xfffffffffffffe80, 4) , (stack, 0xfffffffffffffe80, 4)]
[(stack, 0xfffffffffffffe78, 8) MULTIEQUAL (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8)]
[(stack, 0xfffffffffffffe70, 8) MULTIEQUAL (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8)]
[(stack, 0xfffffffffffffe68, 8) MULTIEQUAL (stack, 0xfffffffffffffe68, 8) , (stack, 0xfffffffffffffe68, 8)]
[(stack, 0xfffffffffffffe60, 8) MULTIEQUAL (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8)]
[(stack, 0xfffffffffffffe5c, 4) MULTIEQUAL (stack, 0xfffffffffffffe5c, 4) , (stack, 0xfffffffffffffe5c, 4)]
[(ram, 0x4c87a0, 4) MULTIEQUAL (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4)]
[(ram, 0x4c8790, 4) MULTIEQUAL (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4)]
[(ram, 0x4c8718, 8) MULTIEQUAL (ram, 0x4c8718, 8) , (ram, 0x4c8718, 8)]
[(ram, 0x4c5f64, 4) MULTIEQUAL (ram, 0x4c5f64, 4) , (ram, 0x4c5f64, 4)]
[(ram, 0x4c5f60, 4) MULTIEQUAL (ram, 0x4c5f60, 4) , (ram, 0x4c5f60, 4)]
[(ram, 0x4c5f58, 8) MULTIEQUAL (ram, 0x4c5f58, 8) , (ram, 0x4c5f58, 8)]
[(ram, 0x4c5f50, 8) MULTIEQUAL (ram, 0x4c5f50, 8) , (ram, 0x4c5f50, 8)]
[(ram, 0x4c5f44, 4) MULTIEQUAL (ram, 0x4c5f44, 4) , (ram, 0x4c5f44, 4)]
[(ram, 0x4c5f40, 4) MULTIEQUAL (ram, 0x4c5f40, 4) , (ram, 0x4c5f40, 4)]
[(ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(register, 0x20a, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x10000ce9, 8) COPY (stack, 0xfffffffffffffee0, 8), (stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(unique, 0x10000cd1, 8) COPY (stack, 0xfffffffffffffed8, 8), (stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[ ---  CBRANCH (ram, 0x1ee5cc, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xfffffffffffffed8, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000eb7, 8) , (const, 0x1ee5cc, 8), (unique, 0x10000eb7, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x253, 4)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x253, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x253, 4)]
[(ram, 0x4c5f40, 4) INDIRECT (ram, 0x4c5f40, 4) , (const, 0x253, 4)]
[(ram, 0x4c5f44, 4) INDIRECT (ram, 0x4c5f44, 4) , (const, 0x253, 4)]
[(ram, 0x4c5f50, 8) INDIRECT (ram, 0x4c5f50, 8) , (const, 0x253, 4)]
[(ram, 0x4c5f58, 8) INDIRECT (ram, 0x4c5f58, 8) , (const, 0x253, 4)]
[(ram, 0x4c5f60, 4) INDIRECT (ram, 0x4c5f60, 4) , (const, 0x253, 4)]
[(ram, 0x4c5f64, 4) INDIRECT (ram, 0x4c5f64, 4) , (const, 0x253, 4)]
[(ram, 0x4c8718, 8) INDIRECT (ram, 0x4c8718, 8) , (const, 0x253, 4)]
[(ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x253, 4)]
[(ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x253, 4)]
[(stack, 0xfffffffffffffe5c, 4) INDIRECT (stack, 0xfffffffffffffe5c, 4) , (const, 0x253, 4), (stack, 0xfffffffffffffe5c, 4) INDIRECT (stack, 0xfffffffffffffe5c, 4) , (const, 0x252, 4)]
[(stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x253, 4), (stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x252, 4)]
[(stack, 0xfffffffffffffe68, 8) INDIRECT (stack, 0xfffffffffffffe68, 8) , (const, 0x253, 4), (stack, 0xfffffffffffffe68, 8) INDIRECT (stack, 0xfffffffffffffe68, 8) , (const, 0x252, 4)]
[(stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0x253, 4), (stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0x252, 4)]
[(stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0x253, 4), (stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0x252, 4)]
[(stack, 0xfffffffffffffe80, 4) INDIRECT (stack, 0xfffffffffffffe80, 4) , (const, 0x253, 4), (stack, 0xfffffffffffffe80, 4) INDIRECT (stack, 0xfffffffffffffe80, 4) , (const, 0x252, 4)]
[(stack, 0xfffffffffffffe84, 4) INDIRECT (stack, 0xfffffffffffffe84, 4) , (const, 0x253, 4), (stack, 0xfffffffffffffe84, 4) INDIRECT (stack, 0xfffffffffffffe84, 4) , (const, 0x252, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x253, 4), (stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x252, 4)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x253, 4), (stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x252, 4)]
[(stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x253, 4), (stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x252, 4)]
[(stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x253, 4), (stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x252, 4)]
[(stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x253, 4), (stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x252, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x253, 4), (stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x252, 4)]
[(stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x253, 4), (stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x252, 4)]
[(stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x253, 4), (stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x252, 4)]
[(stack, 0xfffffffffffffeca, 1) INDIRECT (stack, 0xfffffffffffffeca, 1) , (const, 0x253, 4), (stack, 0xfffffffffffffeca, 1) INDIRECT (stack, 0xfffffffffffffeca, 1) , (const, 0x252, 4)]
[(stack, 0xfffffffffffffecb, 1) INDIRECT (stack, 0xfffffffffffffecb, 1) , (const, 0x253, 4), (stack, 0xfffffffffffffecb, 1) INDIRECT (stack, 0xfffffffffffffecb, 1) , (const, 0x252, 4)]
[(stack, 0xfffffffffffffecc, 4) INDIRECT (stack, 0xfffffffffffffecc, 4) , (const, 0x253, 4), (stack, 0xfffffffffffffecc, 4) INDIRECT (stack, 0xfffffffffffffecc, 4) , (const, 0x252, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x253, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x252, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x253, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x252, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x253, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x252, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x253, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x252, 4)]
[(stack, 0xfffffffffffffef0, 4) INDIRECT (stack, 0xfffffffffffffef0, 4) , (const, 0x253, 4), (stack, 0xfffffffffffffef0, 4) INDIRECT (stack, 0xfffffffffffffef0, 4) , (const, 0x252, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x253, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x252, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x253, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x252, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x253, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x252, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x253, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x252, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x253, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x252, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x253, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x252, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x253, 4), (stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x252, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x253, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x252, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x253, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x252, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x253, 4), (stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x252, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x253, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x252, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x253, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x252, 4)]
[ ---  CALL (ram, 0x139750, 8) , (unique, 0x10000cd1, 8) , (unique, 0x10000ce9, 8) , (const, 0x18, 8) , (unique, 0x100004ad, 8), (unique, 0x100004ad, 8) PTRSUB (const, 0x0, 8) , (const, 0x1e9f30, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 4) MULTIEQUAL (stack, 0xfffffffffffffef0, 4) , (stack, 0xfffffffffffffef0, 4)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffecc, 4) MULTIEQUAL (stack, 0xfffffffffffffecc, 4) , (stack, 0xfffffffffffffecc, 4)]
[(stack, 0xfffffffffffffecb, 1) MULTIEQUAL (stack, 0xfffffffffffffecb, 1) , (stack, 0xfffffffffffffecb, 1)]
[(stack, 0xfffffffffffffeca, 1) MULTIEQUAL (stack, 0xfffffffffffffeca, 1) , (stack, 0xfffffffffffffeca, 1)]
[(stack, 0xfffffffffffffebc, 4) MULTIEQUAL (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4)]
[(stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(stack, 0xfffffffffffffea8, 8) MULTIEQUAL (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8)]
[(stack, 0xfffffffffffffea0, 8) MULTIEQUAL (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8)]
[(stack, 0xfffffffffffffe98, 8) MULTIEQUAL (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8)]
[(stack, 0xfffffffffffffe90, 8) MULTIEQUAL (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8)]
[(stack, 0xfffffffffffffe88, 8) MULTIEQUAL (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8)]
[(stack, 0xfffffffffffffe84, 4) MULTIEQUAL (stack, 0xfffffffffffffe84, 4) , (stack, 0xfffffffffffffe84, 4)]
[(stack, 0xfffffffffffffe80, 4) MULTIEQUAL (stack, 0xfffffffffffffe80, 4) , (stack, 0xfffffffffffffe80, 4)]
[(stack, 0xfffffffffffffe78, 8) MULTIEQUAL (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8)]
[(stack, 0xfffffffffffffe70, 8) MULTIEQUAL (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8)]
[(stack, 0xfffffffffffffe68, 8) MULTIEQUAL (stack, 0xfffffffffffffe68, 8) , (stack, 0xfffffffffffffe68, 8)]
[(stack, 0xfffffffffffffe60, 8) MULTIEQUAL (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8)]
[(stack, 0xfffffffffffffe5c, 4) MULTIEQUAL (stack, 0xfffffffffffffe5c, 4) , (stack, 0xfffffffffffffe5c, 4)]
[(ram, 0x4c87a0, 4) MULTIEQUAL (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4)]
[(ram, 0x4c8790, 4) MULTIEQUAL (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4)]
[(ram, 0x4c8718, 8) MULTIEQUAL (ram, 0x4c8718, 8) , (ram, 0x4c8718, 8)]
[(ram, 0x4c5f64, 4) MULTIEQUAL (ram, 0x4c5f64, 4) , (ram, 0x4c5f64, 4)]
[(ram, 0x4c5f60, 4) MULTIEQUAL (ram, 0x4c5f60, 4) , (ram, 0x4c5f60, 4)]
[(ram, 0x4c5f58, 8) MULTIEQUAL (ram, 0x4c5f58, 8) , (ram, 0x4c5f58, 8)]
[(ram, 0x4c5f50, 8) MULTIEQUAL (ram, 0x4c5f50, 8) , (ram, 0x4c5f50, 8)]
[(ram, 0x4c5f44, 4) MULTIEQUAL (ram, 0x4c5f44, 4) , (ram, 0x4c5f44, 4)]
[(ram, 0x4c5f40, 4) MULTIEQUAL (ram, 0x4c5f40, 4) , (ram, 0x4c5f40, 4)]
[(ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(register, 0x20a, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x1eefec, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xfffffffffffffed0, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(register, 0x18, 8) COPY (const, 0x0, 8)]
[(stack, 0xfffffffffffffebc, 4) COPY (const, 0x0, 4)]
[(register, 0xa0, 4) COPY (const, 0xffffffff, 4)]
[(stack, 0xfffffffffffffea0, 8) COPY (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x10000ebf, 8), (unique, 0x10000ebf, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff38, 8)]
[(stack, 0xfffffffffffffec0, 8) COPY (const, 0x0, 8)]
[(unique, 0x3100, 8) CAST (unique, 0x10000ec7, 8), (unique, 0x10000ec7, 8) PTRADD (stack, 0xfffffffffffffe98, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[(stack, 0xfffffffffffffe90, 8) COPY (unique, 0x3200, 8), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffef8, 8)]
[(register, 0x0, 8) COPY (const, 0x0, 8)]
[(stack, 0xfffffffffffffeb0, 8) COPY (register, 0x8, 8), (register, 0x8, 8) PTRADD (unique, 0x10000be8, 8) , (const, 0x8, 8) , (const, 0x1, 8), (unique, 0x10000be8, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff38, 8)]
[(unique, 0x10000dc9, 8) COPY (stack, 0xfffffffffffffed0, 8)]
[ ---  BRANCH (ram, 0x1ee6f8, 1)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 4) MULTIEQUAL (stack, 0xfffffffffffffef0, 4) , (stack, 0xfffffffffffffef0, 4)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffecc, 4) MULTIEQUAL (stack, 0xfffffffffffffecc, 4) , (stack, 0xfffffffffffffecc, 4)]
[(stack, 0xfffffffffffffecb, 1) MULTIEQUAL (stack, 0xfffffffffffffecb, 1) , (stack, 0xfffffffffffffecb, 1)]
[(stack, 0xfffffffffffffeca, 1) MULTIEQUAL (stack, 0xfffffffffffffeca, 1) , (stack, 0xfffffffffffffeca, 1)]
[(stack, 0xfffffffffffffec0, 8) MULTIEQUAL (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8)]
[(stack, 0xfffffffffffffebc, 4) MULTIEQUAL (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4)]
[(stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(stack, 0xfffffffffffffea0, 8) MULTIEQUAL (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8)]
[(stack, 0xfffffffffffffe98, 8) MULTIEQUAL (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8)]
[(stack, 0xfffffffffffffe90, 8) MULTIEQUAL (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8)]
[(stack, 0xfffffffffffffe88, 8) MULTIEQUAL (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8)]
[(stack, 0xfffffffffffffe84, 4) MULTIEQUAL (stack, 0xfffffffffffffe84, 4) , (stack, 0xfffffffffffffe84, 4)]
[(stack, 0xfffffffffffffe80, 4) MULTIEQUAL (stack, 0xfffffffffffffe80, 4) , (stack, 0xfffffffffffffe80, 4)]
[(stack, 0xfffffffffffffe78, 8) MULTIEQUAL (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8)]
[(stack, 0xfffffffffffffe70, 8) MULTIEQUAL (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8)]
[(stack, 0xfffffffffffffe68, 8) MULTIEQUAL (stack, 0xfffffffffffffe68, 8) , (stack, 0xfffffffffffffe68, 8)]
[(stack, 0xfffffffffffffe60, 8) MULTIEQUAL (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8)]
[(stack, 0xfffffffffffffe5c, 4) MULTIEQUAL (stack, 0xfffffffffffffe5c, 4) , (stack, 0xfffffffffffffe5c, 4)]
[(register, 0x20a, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xa0, 4) MULTIEQUAL (register, 0xa0, 4) , (register, 0xa0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000ecf, 8) , (register, 0xb0, 8), (unique, 0x10000ecf, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0x1000062d, 8) , (const, 0x6, 8) , (const, 0x1, 8), (unique, 0x1000062d, 8) PTRSUB (unique, 0x10000625, 8) , (const, 0x2, 8), (unique, 0x10000625, 8) PTRADD (register, 0xb8, 8) , (const, 0xffffffffffffffff, 8) , (const, 0x10, 8), (register, 0xb0, 8) MULTIEQUAL (unique, 0x10000dc9, 8) , (unique, 0xbd80, 8), (register, 0xb8, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0xb8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000ed7, 8) , (const, 0xffffffff, 4), (unique, 0x10000ed7, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0x1000064d, 8) , (const, 0x2, 8) , (const, 0x1, 8), (unique, 0x1000064d, 8) PTRSUB (unique, 0x10000645, 8) , (const, 0x2, 8), (unique, 0x10000645, 8) PTRADD (register, 0xb8, 8) , (const, 0x2, 8) , (const, 0x10, 8), (register, 0xb8, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0xb8, 8)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x2ad, 4), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x2a9, 4), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x2a6, 4), (ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(ram, 0x4c5f40, 4) INDIRECT (ram, 0x4c5f40, 4) , (const, 0x2ad, 4), (ram, 0x4c5f40, 4) INDIRECT (ram, 0x4c5f40, 4) , (const, 0x2a9, 4), (ram, 0x4c5f40, 4) INDIRECT (ram, 0x4c5f40, 4) , (const, 0x2a6, 4), (ram, 0x4c5f40, 4) MULTIEQUAL (ram, 0x4c5f40, 4) , (ram, 0x4c5f40, 4)]
[(ram, 0x4c5f44, 4) INDIRECT (ram, 0x4c5f44, 4) , (const, 0x2ad, 4), (ram, 0x4c5f44, 4) INDIRECT (ram, 0x4c5f44, 4) , (const, 0x2a9, 4), (ram, 0x4c5f44, 4) INDIRECT (ram, 0x4c5f44, 4) , (const, 0x2a6, 4), (ram, 0x4c5f44, 4) MULTIEQUAL (ram, 0x4c5f44, 4) , (ram, 0x4c5f44, 4)]
[(ram, 0x4c5f50, 8) INDIRECT (ram, 0x4c5f50, 8) , (const, 0x2ad, 4), (ram, 0x4c5f50, 8) INDIRECT (ram, 0x4c5f50, 8) , (const, 0x2a9, 4), (ram, 0x4c5f50, 8) INDIRECT (ram, 0x4c5f50, 8) , (const, 0x2a6, 4), (ram, 0x4c5f50, 8) MULTIEQUAL (ram, 0x4c5f50, 8) , (ram, 0x4c5f50, 8)]
[(ram, 0x4c5f58, 8) INDIRECT (ram, 0x4c5f58, 8) , (const, 0x2ad, 4), (ram, 0x4c5f58, 8) INDIRECT (ram, 0x4c5f58, 8) , (const, 0x2a9, 4), (ram, 0x4c5f58, 8) INDIRECT (ram, 0x4c5f58, 8) , (const, 0x2a6, 4), (ram, 0x4c5f58, 8) MULTIEQUAL (ram, 0x4c5f58, 8) , (ram, 0x4c5f58, 8)]
[(ram, 0x4c5f60, 4) INDIRECT (ram, 0x4c5f60, 4) , (const, 0x2ad, 4), (ram, 0x4c5f60, 4) INDIRECT (ram, 0x4c5f60, 4) , (const, 0x2a9, 4), (ram, 0x4c5f60, 4) INDIRECT (ram, 0x4c5f60, 4) , (const, 0x2a6, 4), (ram, 0x4c5f60, 4) MULTIEQUAL (ram, 0x4c5f60, 4) , (ram, 0x4c5f60, 4)]
[(ram, 0x4c5f64, 4) INDIRECT (ram, 0x4c5f64, 4) , (const, 0x2ad, 4), (ram, 0x4c5f64, 4) INDIRECT (ram, 0x4c5f64, 4) , (const, 0x2a9, 4), (ram, 0x4c5f64, 4) INDIRECT (ram, 0x4c5f64, 4) , (const, 0x2a6, 4), (ram, 0x4c5f64, 4) MULTIEQUAL (ram, 0x4c5f64, 4) , (ram, 0x4c5f64, 4)]
[(ram, 0x4c8718, 8) INDIRECT (ram, 0x4c8718, 8) , (const, 0x2ad, 4), (ram, 0x4c8718, 8) INDIRECT (ram, 0x4c8718, 8) , (const, 0x2a9, 4), (ram, 0x4c8718, 8) INDIRECT (ram, 0x4c8718, 8) , (const, 0x2a6, 4), (ram, 0x4c8718, 8) MULTIEQUAL (ram, 0x4c8718, 8) , (ram, 0x4c8718, 8)]
[(ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x2ad, 4), (ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x2a9, 4), (ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x2a6, 4), (ram, 0x4c8790, 4) MULTIEQUAL (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4)]
[(ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x2ad, 4), (ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x2a9, 4), (ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x2a6, 4), (ram, 0x4c87a0, 4) MULTIEQUAL (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3400, 8) , (register, 0x18, 8), (unique, 0x3400, 8) PTRADD (stack, 0xfffffffffffffea8, 8) , (unique, 0x10000edf, 8) , (const, 0x8, 8), (unique, 0x10000edf, 8) CAST (register, 0x18, 8), (register, 0x18, 8) MULTIEQUAL (register, 0x18, 8) , (register, 0x18, 8), (stack, 0xfffffffffffffea8, 8) MULTIEQUAL (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8)]
[ ---  CBRANCH (ram, 0x1ee721, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0xb0, 8)]
[ ---  CBRANCH (ram, 0x1ee7d0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbc80, 4) , (unique, 0x5200, 4), (unique, 0x5200, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0xb0, 8) , (const, 0x10, 8), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0x0, 8) , (const, 0x10, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000ee7, 8) , (const, 0x1ee7dd, 8), (unique, 0x10000ee7, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x742, 4)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x742, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x742, 4)]
[(ram, 0x4c5f40, 4) INDIRECT (ram, 0x4c5f40, 4) , (const, 0x742, 4)]
[(ram, 0x4c5f44, 4) INDIRECT (ram, 0x4c5f44, 4) , (const, 0x742, 4)]
[(ram, 0x4c5f50, 8) INDIRECT (ram, 0x4c5f50, 8) , (const, 0x742, 4)]
[(ram, 0x4c5f58, 8) INDIRECT (ram, 0x4c5f58, 8) , (const, 0x742, 4)]
[(ram, 0x4c5f60, 4) INDIRECT (ram, 0x4c5f60, 4) , (const, 0x742, 4)]
[(ram, 0x4c5f64, 4) INDIRECT (ram, 0x4c5f64, 4) , (const, 0x742, 4)]
[(ram, 0x4c8718, 8) INDIRECT (ram, 0x4c8718, 8) , (const, 0x742, 4)]
[(ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x742, 4)]
[(ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x742, 4)]
[(stack, 0xfffffffffffffe5c, 4) INDIRECT (stack, 0xfffffffffffffe5c, 4) , (const, 0x742, 4), (stack, 0xfffffffffffffe5c, 4) INDIRECT (stack, 0xfffffffffffffe5c, 4) , (const, 0x741, 4)]
[(stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x742, 4), (stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x741, 4)]
[(stack, 0xfffffffffffffe68, 8) INDIRECT (stack, 0xfffffffffffffe68, 8) , (const, 0x742, 4), (stack, 0xfffffffffffffe68, 8) INDIRECT (stack, 0xfffffffffffffe68, 8) , (const, 0x741, 4)]
[(stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0x742, 4), (stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0x741, 4)]
[(stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0x742, 4), (stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0x741, 4)]
[(stack, 0xfffffffffffffe80, 4) INDIRECT (stack, 0xfffffffffffffe80, 4) , (const, 0x742, 4), (stack, 0xfffffffffffffe80, 4) INDIRECT (stack, 0xfffffffffffffe80, 4) , (const, 0x741, 4)]
[(stack, 0xfffffffffffffe84, 4) INDIRECT (stack, 0xfffffffffffffe84, 4) , (const, 0x742, 4), (stack, 0xfffffffffffffe84, 4) INDIRECT (stack, 0xfffffffffffffe84, 4) , (const, 0x741, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x742, 4), (stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x741, 4)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x742, 4), (stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x741, 4)]
[(stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x742, 4), (stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x741, 4)]
[(stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x742, 4), (stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x741, 4)]
[(stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x742, 4), (stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x741, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x742, 4), (stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x741, 4)]
[(stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x742, 4), (stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x741, 4)]
[(stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x742, 4), (stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x741, 4)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x742, 4), (stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x741, 4)]
[(stack, 0xfffffffffffffeca, 1) INDIRECT (stack, 0xfffffffffffffeca, 1) , (const, 0x742, 4), (stack, 0xfffffffffffffeca, 1) INDIRECT (stack, 0xfffffffffffffeca, 1) , (const, 0x741, 4)]
[(stack, 0xfffffffffffffecb, 1) INDIRECT (stack, 0xfffffffffffffecb, 1) , (const, 0x742, 4), (stack, 0xfffffffffffffecb, 1) INDIRECT (stack, 0xfffffffffffffecb, 1) , (const, 0x741, 4)]
[(stack, 0xfffffffffffffecc, 4) INDIRECT (stack, 0xfffffffffffffecc, 4) , (const, 0x742, 4), (stack, 0xfffffffffffffecc, 4) INDIRECT (stack, 0xfffffffffffffecc, 4) , (const, 0x741, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x742, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x741, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x742, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x741, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x742, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x741, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x742, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x741, 4)]
[(stack, 0xfffffffffffffef0, 4) INDIRECT (stack, 0xfffffffffffffef0, 4) , (const, 0x742, 4), (stack, 0xfffffffffffffef0, 4) INDIRECT (stack, 0xfffffffffffffef0, 4) , (const, 0x741, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x742, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x741, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x742, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x741, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x742, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x741, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x742, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x741, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x742, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x741, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x742, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x741, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x742, 4), (stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x741, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x742, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x741, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x742, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x741, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x742, 4), (stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x741, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x742, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x741, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x742, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x741, 4)]
[ ---  CBRANCH (ram, 0x1ee721, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x18e1c0, 8) , (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0x0, 8) , (const, 0x18, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0xb0, 8) , (const, 0x18, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 4) MULTIEQUAL (stack, 0xfffffffffffffef0, 4) , (stack, 0xfffffffffffffef0, 4) , (stack, 0xfffffffffffffef0, 4)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffecc, 4) MULTIEQUAL (stack, 0xfffffffffffffecc, 4) , (stack, 0xfffffffffffffecc, 4) , (stack, 0xfffffffffffffecc, 4)]
[(stack, 0xfffffffffffffecb, 1) MULTIEQUAL (stack, 0xfffffffffffffecb, 1) , (stack, 0xfffffffffffffecb, 1) , (stack, 0xfffffffffffffecb, 1)]
[(stack, 0xfffffffffffffeca, 1) MULTIEQUAL (stack, 0xfffffffffffffeca, 1) , (stack, 0xfffffffffffffeca, 1) , (stack, 0xfffffffffffffeca, 1)]
[(stack, 0xfffffffffffffec0, 8) MULTIEQUAL (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8)]
[(stack, 0xfffffffffffffebc, 4) MULTIEQUAL (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4)]
[(stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(stack, 0xfffffffffffffea8, 8) MULTIEQUAL (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8)]
[(stack, 0xfffffffffffffe98, 8) MULTIEQUAL (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8)]
[(stack, 0xfffffffffffffe90, 8) MULTIEQUAL (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8)]
[(stack, 0xfffffffffffffe88, 8) MULTIEQUAL (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8)]
[(stack, 0xfffffffffffffe84, 4) MULTIEQUAL (stack, 0xfffffffffffffe84, 4) , (stack, 0xfffffffffffffe84, 4) , (stack, 0xfffffffffffffe84, 4)]
[(stack, 0xfffffffffffffe80, 4) MULTIEQUAL (stack, 0xfffffffffffffe80, 4) , (stack, 0xfffffffffffffe80, 4) , (stack, 0xfffffffffffffe80, 4)]
[(stack, 0xfffffffffffffe78, 8) MULTIEQUAL (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8)]
[(stack, 0xfffffffffffffe70, 8) MULTIEQUAL (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8)]
[(stack, 0xfffffffffffffe68, 8) MULTIEQUAL (stack, 0xfffffffffffffe68, 8) , (stack, 0xfffffffffffffe68, 8) , (stack, 0xfffffffffffffe68, 8)]
[(stack, 0xfffffffffffffe60, 8) MULTIEQUAL (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8)]
[(stack, 0xfffffffffffffe5c, 4) MULTIEQUAL (stack, 0xfffffffffffffe5c, 4) , (stack, 0xfffffffffffffe5c, 4) , (stack, 0xfffffffffffffe5c, 4)]
[(register, 0x20a, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1) , (register, 0x20a, 1)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x10000cb1, 8) COPY (stack, 0xfffffffffffffea0, 8), (stack, 0xfffffffffffffea0, 8) MULTIEQUAL (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (const, 0x0, 1), (unique, 0x3100, 8) PTRADD (unique, 0x10000685, 8) , (const, 0xb, 8) , (const, 0x1, 8), (unique, 0x10000685, 8) PTRSUB (unique, 0x1000067d, 8) , (const, 0x2, 8), (unique, 0x1000067d, 8) PTRADD (register, 0xb8, 8) , (const, 0x1, 8) , (const, 0x10, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (const, 0x0, 1), (unique, 0x3100, 8) PTRADD (unique, 0x100006a5, 8) , (const, 0xc, 8) , (const, 0x1, 8), (unique, 0x100006a5, 8) PTRSUB (unique, 0x1000069d, 8) , (const, 0x2, 8), (unique, 0x1000069d, 8) PTRADD (register, 0xb8, 8) , (const, 0x1, 8) , (const, 0x10, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (const, 0x0, 1), (unique, 0x3100, 8) PTRADD (unique, 0x100006c5, 8) , (const, 0xd, 8) , (const, 0x1, 8), (unique, 0x100006c5, 8) PTRSUB (unique, 0x100006bd, 8) , (const, 0x2, 8), (unique, 0x100006bd, 8) PTRADD (register, 0xb8, 8) , (const, 0x1, 8) , (const, 0x10, 8)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x2d5, 4), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x2d2, 4), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x2cf, 4), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x2cc, 4), (ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(ram, 0x4c5f40, 4) INDIRECT (ram, 0x4c5f40, 4) , (const, 0x2d5, 4), (ram, 0x4c5f40, 4) INDIRECT (ram, 0x4c5f40, 4) , (const, 0x2d2, 4), (ram, 0x4c5f40, 4) INDIRECT (ram, 0x4c5f40, 4) , (const, 0x2cf, 4), (ram, 0x4c5f40, 4) INDIRECT (ram, 0x4c5f40, 4) , (const, 0x2cc, 4), (ram, 0x4c5f40, 4) MULTIEQUAL (ram, 0x4c5f40, 4) , (ram, 0x4c5f40, 4) , (ram, 0x4c5f40, 4)]
[(ram, 0x4c5f44, 4) INDIRECT (ram, 0x4c5f44, 4) , (const, 0x2d5, 4), (ram, 0x4c5f44, 4) INDIRECT (ram, 0x4c5f44, 4) , (const, 0x2d2, 4), (ram, 0x4c5f44, 4) INDIRECT (ram, 0x4c5f44, 4) , (const, 0x2cf, 4), (ram, 0x4c5f44, 4) INDIRECT (ram, 0x4c5f44, 4) , (const, 0x2cc, 4), (ram, 0x4c5f44, 4) MULTIEQUAL (ram, 0x4c5f44, 4) , (ram, 0x4c5f44, 4) , (ram, 0x4c5f44, 4)]
[(ram, 0x4c5f50, 8) INDIRECT (ram, 0x4c5f50, 8) , (const, 0x2d5, 4), (ram, 0x4c5f50, 8) INDIRECT (ram, 0x4c5f50, 8) , (const, 0x2d2, 4), (ram, 0x4c5f50, 8) INDIRECT (ram, 0x4c5f50, 8) , (const, 0x2cf, 4), (ram, 0x4c5f50, 8) INDIRECT (ram, 0x4c5f50, 8) , (const, 0x2cc, 4), (ram, 0x4c5f50, 8) MULTIEQUAL (ram, 0x4c5f50, 8) , (ram, 0x4c5f50, 8) , (ram, 0x4c5f50, 8)]
[(ram, 0x4c5f58, 8) INDIRECT (ram, 0x4c5f58, 8) , (const, 0x2d5, 4), (ram, 0x4c5f58, 8) INDIRECT (ram, 0x4c5f58, 8) , (const, 0x2d2, 4), (ram, 0x4c5f58, 8) INDIRECT (ram, 0x4c5f58, 8) , (const, 0x2cf, 4), (ram, 0x4c5f58, 8) INDIRECT (ram, 0x4c5f58, 8) , (const, 0x2cc, 4), (ram, 0x4c5f58, 8) MULTIEQUAL (ram, 0x4c5f58, 8) , (ram, 0x4c5f58, 8) , (ram, 0x4c5f58, 8)]
[(ram, 0x4c5f60, 4) INDIRECT (ram, 0x4c5f60, 4) , (const, 0x2d5, 4), (ram, 0x4c5f60, 4) INDIRECT (ram, 0x4c5f60, 4) , (const, 0x2d2, 4), (ram, 0x4c5f60, 4) INDIRECT (ram, 0x4c5f60, 4) , (const, 0x2cf, 4), (ram, 0x4c5f60, 4) INDIRECT (ram, 0x4c5f60, 4) , (const, 0x2cc, 4), (ram, 0x4c5f60, 4) MULTIEQUAL (ram, 0x4c5f60, 4) , (ram, 0x4c5f60, 4) , (ram, 0x4c5f60, 4)]
[(ram, 0x4c5f64, 4) INDIRECT (ram, 0x4c5f64, 4) , (const, 0x2d5, 4), (ram, 0x4c5f64, 4) INDIRECT (ram, 0x4c5f64, 4) , (const, 0x2d2, 4), (ram, 0x4c5f64, 4) INDIRECT (ram, 0x4c5f64, 4) , (const, 0x2cf, 4), (ram, 0x4c5f64, 4) INDIRECT (ram, 0x4c5f64, 4) , (const, 0x2cc, 4), (ram, 0x4c5f64, 4) MULTIEQUAL (ram, 0x4c5f64, 4) , (ram, 0x4c5f64, 4) , (ram, 0x4c5f64, 4)]
[(ram, 0x4c8718, 8) INDIRECT (ram, 0x4c8718, 8) , (const, 0x2d5, 4), (ram, 0x4c8718, 8) INDIRECT (ram, 0x4c8718, 8) , (const, 0x2d2, 4), (ram, 0x4c8718, 8) INDIRECT (ram, 0x4c8718, 8) , (const, 0x2cf, 4), (ram, 0x4c8718, 8) INDIRECT (ram, 0x4c8718, 8) , (const, 0x2cc, 4), (ram, 0x4c8718, 8) MULTIEQUAL (ram, 0x4c8718, 8) , (ram, 0x4c8718, 8) , (ram, 0x4c8718, 8)]
[(ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x2d5, 4), (ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x2d2, 4), (ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x2cf, 4), (ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x2cc, 4), (ram, 0x4c8790, 4) MULTIEQUAL (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4)]
[(ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x2d5, 4), (ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x2d2, 4), (ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x2cf, 4), (ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x2cc, 4), (ram, 0x4c87a0, 4) MULTIEQUAL (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000eef, 8) , (const, 0xffffffff, 4), (unique, 0x10000eef, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb8, 8) , (const, 0x2, 8) , (const, 0x10, 8)]
[ ---  CBRANCH (ram, 0x1ee638, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xa0, 4) , (const, 0xffffffff, 4)]
[ ---  CBRANCH (ram, 0x1ee64c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xfffffffffffffebc, 4) , (const, 0x2, 4)]
[ ---  CBRANCH (ram, 0x1ee7c0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd00, 4) , (const, 0xa, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0xb0, 8) , (const, 0x4, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000ef7, 8) , (const, 0x1ee676, 8), (unique, 0x10000ef7, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x736, 4)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x736, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x736, 4)]
[(ram, 0x4c5f40, 4) INDIRECT (ram, 0x4c5f40, 4) , (const, 0x736, 4)]
[(ram, 0x4c5f44, 4) INDIRECT (ram, 0x4c5f44, 4) , (const, 0x736, 4)]
[(ram, 0x4c5f50, 8) INDIRECT (ram, 0x4c5f50, 8) , (const, 0x736, 4)]
[(ram, 0x4c5f58, 8) INDIRECT (ram, 0x4c5f58, 8) , (const, 0x736, 4)]
[(ram, 0x4c5f60, 4) INDIRECT (ram, 0x4c5f60, 4) , (const, 0x736, 4)]
[(ram, 0x4c5f64, 4) INDIRECT (ram, 0x4c5f64, 4) , (const, 0x736, 4)]
[(ram, 0x4c8718, 8) INDIRECT (ram, 0x4c8718, 8) , (const, 0x736, 4)]
[(ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x736, 4)]
[(ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x736, 4)]
[(stack, 0xfffffffffffffe5c, 4) INDIRECT (stack, 0xfffffffffffffe5c, 4) , (const, 0x736, 4), (stack, 0xfffffffffffffe5c, 4) INDIRECT (stack, 0xfffffffffffffe5c, 4) , (const, 0x735, 4)]
[(stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x736, 4), (stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x735, 4)]
[(stack, 0xfffffffffffffe68, 8) INDIRECT (stack, 0xfffffffffffffe68, 8) , (const, 0x736, 4), (stack, 0xfffffffffffffe68, 8) INDIRECT (stack, 0xfffffffffffffe68, 8) , (const, 0x735, 4)]
[(stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0x736, 4), (stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0x735, 4)]
[(stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0x736, 4), (stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0x735, 4)]
[(stack, 0xfffffffffffffe80, 4) INDIRECT (stack, 0xfffffffffffffe80, 4) , (const, 0x736, 4), (stack, 0xfffffffffffffe80, 4) INDIRECT (stack, 0xfffffffffffffe80, 4) , (const, 0x735, 4)]
[(stack, 0xfffffffffffffe84, 4) INDIRECT (stack, 0xfffffffffffffe84, 4) , (const, 0x736, 4), (stack, 0xfffffffffffffe84, 4) INDIRECT (stack, 0xfffffffffffffe84, 4) , (const, 0x735, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x736, 4), (stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x735, 4)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x736, 4), (stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x735, 4)]
[(stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x736, 4), (stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x735, 4)]
[(stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x736, 4), (stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x735, 4)]
[(stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x736, 4), (stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x735, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x736, 4), (stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x735, 4)]
[(stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x736, 4), (stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x735, 4)]
[(stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x736, 4), (stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x735, 4)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x736, 4), (stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x735, 4)]
[(stack, 0xfffffffffffffeca, 1) INDIRECT (stack, 0xfffffffffffffeca, 1) , (const, 0x736, 4), (stack, 0xfffffffffffffeca, 1) INDIRECT (stack, 0xfffffffffffffeca, 1) , (const, 0x735, 4)]
[(stack, 0xfffffffffffffecb, 1) INDIRECT (stack, 0xfffffffffffffecb, 1) , (const, 0x736, 4), (stack, 0xfffffffffffffecb, 1) INDIRECT (stack, 0xfffffffffffffecb, 1) , (const, 0x735, 4)]
[(stack, 0xfffffffffffffecc, 4) INDIRECT (stack, 0xfffffffffffffecc, 4) , (const, 0x736, 4), (stack, 0xfffffffffffffecc, 4) INDIRECT (stack, 0xfffffffffffffecc, 4) , (const, 0x735, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x736, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x735, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x736, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x735, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x736, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x735, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x736, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x735, 4)]
[(stack, 0xfffffffffffffef0, 4) INDIRECT (stack, 0xfffffffffffffef0, 4) , (const, 0x736, 4), (stack, 0xfffffffffffffef0, 4) INDIRECT (stack, 0xfffffffffffffef0, 4) , (const, 0x735, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x736, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x735, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x736, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x735, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x736, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x735, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x736, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x735, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x736, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x735, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x736, 4), (stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x735, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x736, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x735, 4), (stack, 0xffffffffffffff38, 8) COPY (const, 0x0, 8)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x736, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x735, 4), (stack, 0xffffffffffffff40, 8) COPY (const, 0x0, 8)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x736, 4), (stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x735, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x736, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x735, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x736, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x735, 4)]
[ ---  CALL (ram, 0x207860, 8) , (register, 0xa0, 4) , (unique, 0x10000cb1, 8) , (const, 0x10, 4)]
[(stack, 0xfffffffffffffef8, 8) CAST (unique, 0x10000f03, 8), (unique, 0x10000f03, 8) INT_ADD (unique, 0x10000c59, 8) , (const, 0x1c, 4), (unique, 0x10000c59, 8) INT_LEFT (unique, 0x10000c51, 8) , (const, 0x20, 8), (unique, 0x10000c51, 8) INT_SEXT (unique, 0x10000eff, 4), (unique, 0x10000eff, 4) CAST (stack, 0xfffffffffffffefc, 4), (stack, 0xfffffffffffffefc, 4) SUBPIECE (stack, 0xfffffffffffffef8, 8) , (const, 0x4, 8), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x736, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x735, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000f0b, 8) , (const, 0x1ee75a, 8), (unique, 0x10000f0b, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x2ee, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x2ee, 4), (register, 0x20a, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x2ee, 4), (ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(ram, 0x4c5f40, 4) INDIRECT (ram, 0x4c5f40, 4) , (const, 0x2ee, 4), (ram, 0x4c5f40, 4) MULTIEQUAL (ram, 0x4c5f40, 4) , (ram, 0x4c5f40, 4)]
[(ram, 0x4c5f44, 4) INDIRECT (ram, 0x4c5f44, 4) , (const, 0x2ee, 4), (ram, 0x4c5f44, 4) MULTIEQUAL (ram, 0x4c5f44, 4) , (ram, 0x4c5f44, 4)]
[(ram, 0x4c5f50, 8) INDIRECT (ram, 0x4c5f50, 8) , (const, 0x2ee, 4), (ram, 0x4c5f50, 8) MULTIEQUAL (ram, 0x4c5f50, 8) , (ram, 0x4c5f50, 8)]
[(ram, 0x4c5f58, 8) INDIRECT (ram, 0x4c5f58, 8) , (const, 0x2ee, 4), (ram, 0x4c5f58, 8) MULTIEQUAL (ram, 0x4c5f58, 8) , (ram, 0x4c5f58, 8)]
[(ram, 0x4c5f60, 4) INDIRECT (ram, 0x4c5f60, 4) , (const, 0x2ee, 4), (ram, 0x4c5f60, 4) MULTIEQUAL (ram, 0x4c5f60, 4) , (ram, 0x4c5f60, 4)]
[(ram, 0x4c5f64, 4) INDIRECT (ram, 0x4c5f64, 4) , (const, 0x2ee, 4), (ram, 0x4c5f64, 4) MULTIEQUAL (ram, 0x4c5f64, 4) , (ram, 0x4c5f64, 4)]
[(ram, 0x4c8718, 8) INDIRECT (ram, 0x4c8718, 8) , (const, 0x2ee, 4), (ram, 0x4c8718, 8) MULTIEQUAL (ram, 0x4c8718, 8) , (ram, 0x4c8718, 8)]
[(ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x2ee, 4), (ram, 0x4c8790, 4) MULTIEQUAL (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4)]
[(ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x2ee, 4), (ram, 0x4c87a0, 4) MULTIEQUAL (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4)]
[(stack, 0xfffffffffffffe5c, 4) INDIRECT (stack, 0xfffffffffffffe5c, 4) , (const, 0x2ee, 4), (stack, 0xfffffffffffffe5c, 4) INDIRECT (stack, 0xfffffffffffffe5c, 4) , (const, 0x2ed, 4), (stack, 0xfffffffffffffe5c, 4) MULTIEQUAL (stack, 0xfffffffffffffe5c, 4) , (stack, 0xfffffffffffffe5c, 4)]
[(stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x2ee, 4), (stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x2ed, 4), (stack, 0xfffffffffffffe60, 8) MULTIEQUAL (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8)]
[(stack, 0xfffffffffffffe68, 8) INDIRECT (stack, 0xfffffffffffffe68, 8) , (const, 0x2ee, 4), (stack, 0xfffffffffffffe68, 8) INDIRECT (stack, 0xfffffffffffffe68, 8) , (const, 0x2ed, 4), (stack, 0xfffffffffffffe68, 8) MULTIEQUAL (stack, 0xfffffffffffffe68, 8) , (stack, 0xfffffffffffffe68, 8)]
[(stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0x2ee, 4), (stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0x2ed, 4), (stack, 0xfffffffffffffe70, 8) MULTIEQUAL (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8)]
[(stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0x2ee, 4), (stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0x2ed, 4), (stack, 0xfffffffffffffe78, 8) MULTIEQUAL (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8)]
[(stack, 0xfffffffffffffe80, 4) INDIRECT (stack, 0xfffffffffffffe80, 4) , (const, 0x2ee, 4), (stack, 0xfffffffffffffe80, 4) INDIRECT (stack, 0xfffffffffffffe80, 4) , (const, 0x2ed, 4), (stack, 0xfffffffffffffe80, 4) MULTIEQUAL (stack, 0xfffffffffffffe80, 4) , (stack, 0xfffffffffffffe80, 4)]
[(stack, 0xfffffffffffffe84, 4) INDIRECT (stack, 0xfffffffffffffe84, 4) , (const, 0x2ee, 4), (stack, 0xfffffffffffffe84, 4) INDIRECT (stack, 0xfffffffffffffe84, 4) , (const, 0x2ed, 4), (stack, 0xfffffffffffffe84, 4) MULTIEQUAL (stack, 0xfffffffffffffe84, 4) , (stack, 0xfffffffffffffe84, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x2ee, 4), (stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x2ed, 4), (stack, 0xfffffffffffffe88, 8) MULTIEQUAL (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x2ee, 4), (stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x2ed, 4), (stack, 0xfffffffffffffe90, 8) MULTIEQUAL (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8)]
[(stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x2ee, 4), (stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x2ed, 4), (stack, 0xfffffffffffffe98, 8) MULTIEQUAL (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8)]
[(stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x2ee, 4), (stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x2ed, 4), (stack, 0xfffffffffffffea0, 8) MULTIEQUAL (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8)]
[(stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x2ee, 4), (stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x2ed, 4), (stack, 0xfffffffffffffea8, 8) MULTIEQUAL (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x2ee, 4), (stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x2ed, 4), (stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x2ee, 4), (stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x2ed, 4), (stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4)]
[(stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x2ee, 4), (stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x2ed, 4), (stack, 0xfffffffffffffebc, 4) COPY (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0xb0, 8) , (const, 0x4, 8)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x2ee, 4), (stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x2ed, 4), (stack, 0xfffffffffffffec0, 8) MULTIEQUAL (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8)]
[(stack, 0xfffffffffffffeca, 1) INDIRECT (stack, 0xfffffffffffffeca, 1) , (const, 0x2ee, 4), (stack, 0xfffffffffffffeca, 1) INDIRECT (stack, 0xfffffffffffffeca, 1) , (const, 0x2ed, 4), (stack, 0xfffffffffffffeca, 1) MULTIEQUAL (stack, 0xfffffffffffffeca, 1) , (stack, 0xfffffffffffffeca, 1)]
[(stack, 0xfffffffffffffecb, 1) INDIRECT (stack, 0xfffffffffffffecb, 1) , (const, 0x2ee, 4), (stack, 0xfffffffffffffecb, 1) INDIRECT (stack, 0xfffffffffffffecb, 1) , (const, 0x2ed, 4), (stack, 0xfffffffffffffecb, 1) MULTIEQUAL (stack, 0xfffffffffffffecb, 1) , (stack, 0xfffffffffffffecb, 1)]
[(stack, 0xfffffffffffffecc, 4) INDIRECT (stack, 0xfffffffffffffecc, 4) , (const, 0x2ee, 4), (stack, 0xfffffffffffffecc, 4) INDIRECT (stack, 0xfffffffffffffecc, 4) , (const, 0x2ed, 4), (stack, 0xfffffffffffffecc, 4) MULTIEQUAL (stack, 0xfffffffffffffecc, 4) , (stack, 0xfffffffffffffecc, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x2ee, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x2ed, 4), (stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x2ee, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x2ed, 4), (stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x2ee, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x2ed, 4), (stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x2ee, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x2ed, 4), (stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffef0, 4) INDIRECT (stack, 0xfffffffffffffef0, 4) , (const, 0x2ee, 4), (stack, 0xfffffffffffffef0, 4) INDIRECT (stack, 0xfffffffffffffef0, 4) , (const, 0x2ed, 4), (stack, 0xfffffffffffffef0, 4) MULTIEQUAL (stack, 0xfffffffffffffef0, 4) , (stack, 0xfffffffffffffef0, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x2ee, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x2ed, 4), (stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x2ee, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x2ed, 4), (stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x2ee, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x2ed, 4), (stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x2ee, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x2ed, 4), (stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x2ee, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x2ed, 4), (stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x2ee, 4), (stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x2ed, 4), (stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x2ee, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x2ed, 4), (stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x2ee, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x2ed, 4), (stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x2ee, 4), (stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x2ed, 4), (stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x2ee, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x2ed, 4), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x2ee, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x2ed, 4), (stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xfffffffffffffef8, 8) CAST (unique, 0x10000f17, 8), (unique, 0x10000f17, 8) INT_ADD (unique, 0x10000c69, 8) , (const, 0x1c, 4), (unique, 0x10000c69, 8) INT_LEFT (unique, 0x10000c61, 8) , (const, 0x20, 8), (unique, 0x10000c61, 8) INT_SEXT (unique, 0x10000f13, 4), (unique, 0x10000f13, 4) CAST (stack, 0xfffffffffffffefc, 4), (stack, 0xfffffffffffffefc, 4) SUBPIECE (stack, 0xfffffffffffffef8, 8) , (const, 0x4, 8), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x2ee, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x2ed, 4), (stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[ ---  CBRANCH (ram, 0x1ee698, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0xffffffff, 4), (register, 0x0, 4) CALL (ram, 0x207ce0, 8) , (unique, 0xbc80, 4) , (const, 0x2, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0xb0, 8) , (const, 0x4, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000f1f, 8) , (const, 0x1ee690, 8), (unique, 0x10000f1f, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x30a, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x30a, 4), (register, 0x20a, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x30a, 4), (ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(ram, 0x4c5f40, 4) INDIRECT (ram, 0x4c5f40, 4) , (const, 0x30a, 4), (ram, 0x4c5f40, 4) MULTIEQUAL (ram, 0x4c5f40, 4) , (ram, 0x4c5f40, 4)]
[(ram, 0x4c5f44, 4) INDIRECT (ram, 0x4c5f44, 4) , (const, 0x30a, 4), (ram, 0x4c5f44, 4) MULTIEQUAL (ram, 0x4c5f44, 4) , (ram, 0x4c5f44, 4)]
[(ram, 0x4c5f50, 8) INDIRECT (ram, 0x4c5f50, 8) , (const, 0x30a, 4), (ram, 0x4c5f50, 8) MULTIEQUAL (ram, 0x4c5f50, 8) , (ram, 0x4c5f50, 8)]
[(ram, 0x4c5f58, 8) INDIRECT (ram, 0x4c5f58, 8) , (const, 0x30a, 4), (ram, 0x4c5f58, 8) MULTIEQUAL (ram, 0x4c5f58, 8) , (ram, 0x4c5f58, 8)]
[(ram, 0x4c5f60, 4) INDIRECT (ram, 0x4c5f60, 4) , (const, 0x30a, 4), (ram, 0x4c5f60, 4) MULTIEQUAL (ram, 0x4c5f60, 4) , (ram, 0x4c5f60, 4)]
[(ram, 0x4c5f64, 4) INDIRECT (ram, 0x4c5f64, 4) , (const, 0x30a, 4), (ram, 0x4c5f64, 4) MULTIEQUAL (ram, 0x4c5f64, 4) , (ram, 0x4c5f64, 4)]
[(ram, 0x4c8718, 8) INDIRECT (ram, 0x4c8718, 8) , (const, 0x30a, 4), (ram, 0x4c8718, 8) MULTIEQUAL (ram, 0x4c8718, 8) , (ram, 0x4c8718, 8)]
[(ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x30a, 4), (ram, 0x4c8790, 4) MULTIEQUAL (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4)]
[(ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x30a, 4), (ram, 0x4c87a0, 4) MULTIEQUAL (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4)]
[(stack, 0xfffffffffffffe5c, 4) INDIRECT (stack, 0xfffffffffffffe5c, 4) , (const, 0x30a, 4), (stack, 0xfffffffffffffe5c, 4) INDIRECT (stack, 0xfffffffffffffe5c, 4) , (const, 0x309, 4), (stack, 0xfffffffffffffe5c, 4) MULTIEQUAL (stack, 0xfffffffffffffe5c, 4) , (stack, 0xfffffffffffffe5c, 4)]
[(stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x30a, 4), (stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x309, 4), (stack, 0xfffffffffffffe60, 8) MULTIEQUAL (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8)]
[(stack, 0xfffffffffffffe68, 8) INDIRECT (stack, 0xfffffffffffffe68, 8) , (const, 0x30a, 4), (stack, 0xfffffffffffffe68, 8) INDIRECT (stack, 0xfffffffffffffe68, 8) , (const, 0x309, 4), (stack, 0xfffffffffffffe68, 8) MULTIEQUAL (stack, 0xfffffffffffffe68, 8) , (stack, 0xfffffffffffffe68, 8)]
[(stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0x30a, 4), (stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0x309, 4), (stack, 0xfffffffffffffe70, 8) MULTIEQUAL (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8)]
[(stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0x30a, 4), (stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0x309, 4), (stack, 0xfffffffffffffe78, 8) MULTIEQUAL (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8)]
[(stack, 0xfffffffffffffe80, 4) INDIRECT (stack, 0xfffffffffffffe80, 4) , (const, 0x30a, 4), (stack, 0xfffffffffffffe80, 4) INDIRECT (stack, 0xfffffffffffffe80, 4) , (const, 0x309, 4), (stack, 0xfffffffffffffe80, 4) MULTIEQUAL (stack, 0xfffffffffffffe80, 4) , (stack, 0xfffffffffffffe80, 4)]
[(stack, 0xfffffffffffffe84, 4) INDIRECT (stack, 0xfffffffffffffe84, 4) , (const, 0x30a, 4), (stack, 0xfffffffffffffe84, 4) INDIRECT (stack, 0xfffffffffffffe84, 4) , (const, 0x309, 4), (stack, 0xfffffffffffffe84, 4) MULTIEQUAL (stack, 0xfffffffffffffe84, 4) , (stack, 0xfffffffffffffe84, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x30a, 4), (stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x309, 4), (stack, 0xfffffffffffffe88, 8) MULTIEQUAL (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8)]
[(stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x30a, 4), (stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x309, 4), (stack, 0xfffffffffffffe98, 8) MULTIEQUAL (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8)]
[(stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x30a, 4), (stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x309, 4), (stack, 0xfffffffffffffea0, 8) MULTIEQUAL (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8)]
[(stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x30a, 4), (stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x309, 4), (stack, 0xfffffffffffffea8, 8) MULTIEQUAL (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x30a, 4), (stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x309, 4), (stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x30a, 4), (stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x309, 4), (stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4)]
[(stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x30a, 4), (stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x309, 4), (stack, 0xfffffffffffffebc, 4) MULTIEQUAL (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x30a, 4), (stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x309, 4), (stack, 0xfffffffffffffec0, 8) MULTIEQUAL (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8)]
[(stack, 0xfffffffffffffeca, 1) INDIRECT (stack, 0xfffffffffffffeca, 1) , (const, 0x30a, 4), (stack, 0xfffffffffffffeca, 1) INDIRECT (stack, 0xfffffffffffffeca, 1) , (const, 0x309, 4), (stack, 0xfffffffffffffeca, 1) MULTIEQUAL (stack, 0xfffffffffffffeca, 1) , (stack, 0xfffffffffffffeca, 1)]
[(stack, 0xfffffffffffffecb, 1) INDIRECT (stack, 0xfffffffffffffecb, 1) , (const, 0x30a, 4), (stack, 0xfffffffffffffecb, 1) INDIRECT (stack, 0xfffffffffffffecb, 1) , (const, 0x309, 4), (stack, 0xfffffffffffffecb, 1) MULTIEQUAL (stack, 0xfffffffffffffecb, 1) , (stack, 0xfffffffffffffecb, 1)]
[(stack, 0xfffffffffffffecc, 4) INDIRECT (stack, 0xfffffffffffffecc, 4) , (const, 0x30a, 4), (stack, 0xfffffffffffffecc, 4) INDIRECT (stack, 0xfffffffffffffecc, 4) , (const, 0x309, 4), (stack, 0xfffffffffffffecc, 4) MULTIEQUAL (stack, 0xfffffffffffffecc, 4) , (stack, 0xfffffffffffffecc, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x30a, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x309, 4), (stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x30a, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x309, 4), (stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x30a, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x309, 4), (stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x30a, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x309, 4), (stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffef0, 4) INDIRECT (stack, 0xfffffffffffffef0, 4) , (const, 0x30a, 4), (stack, 0xfffffffffffffef0, 4) INDIRECT (stack, 0xfffffffffffffef0, 4) , (const, 0x309, 4), (stack, 0xfffffffffffffef0, 4) MULTIEQUAL (stack, 0xfffffffffffffef0, 4) , (stack, 0xfffffffffffffef0, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x30a, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x309, 4), (stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x30a, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x309, 4), (stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x30a, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x309, 4), (stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x30a, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x309, 4), (stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x30a, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x309, 4), (stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x30a, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x309, 4), (stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x30a, 4), (stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x309, 4), (stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x30a, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x309, 4), (stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x30a, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x309, 4), (stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x30a, 4), (stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x309, 4), (stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x30a, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x309, 4), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x30a, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x309, 4), (stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(unique, 0x10000ca1, 8) COPY (stack, 0xfffffffffffffe90, 8), (stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x30a, 4), (stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x309, 4), (stack, 0xfffffffffffffe90, 8) MULTIEQUAL (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8)]
[ ---  CBRANCH (ram, 0x1ee840, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x207860, 8) , (register, 0xa0, 4) , (unique, 0xbd80, 8) , (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0xb0, 8) , (const, 0x10, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0xb0, 8) , (const, 0x18, 8), (register, 0xa0, 4) MULTIEQUAL (register, 0xa0, 4) , (register, 0x0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000f27, 8) , (const, 0x1ee852, 8), (unique, 0x10000f27, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x5aa, 4)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x5aa, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x5aa, 4)]
[(ram, 0x4c5f40, 4) INDIRECT (ram, 0x4c5f40, 4) , (const, 0x5aa, 4)]
[(ram, 0x4c5f44, 4) INDIRECT (ram, 0x4c5f44, 4) , (const, 0x5aa, 4)]
[(ram, 0x4c5f50, 8) INDIRECT (ram, 0x4c5f50, 8) , (const, 0x5aa, 4)]
[(ram, 0x4c5f58, 8) INDIRECT (ram, 0x4c5f58, 8) , (const, 0x5aa, 4)]
[(ram, 0x4c5f60, 4) INDIRECT (ram, 0x4c5f60, 4) , (const, 0x5aa, 4)]
[(ram, 0x4c5f64, 4) INDIRECT (ram, 0x4c5f64, 4) , (const, 0x5aa, 4)]
[(ram, 0x4c8718, 8) INDIRECT (ram, 0x4c8718, 8) , (const, 0x5aa, 4)]
[(ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x5aa, 4)]
[(ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x5aa, 4)]
[(stack, 0xfffffffffffffe5c, 4) INDIRECT (stack, 0xfffffffffffffe5c, 4) , (const, 0x5aa, 4), (stack, 0xfffffffffffffe5c, 4) INDIRECT (stack, 0xfffffffffffffe5c, 4) , (const, 0x5a9, 4)]
[(stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x5aa, 4), (stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x5a9, 4)]
[(stack, 0xfffffffffffffe68, 8) INDIRECT (stack, 0xfffffffffffffe68, 8) , (const, 0x5aa, 4), (stack, 0xfffffffffffffe68, 8) INDIRECT (stack, 0xfffffffffffffe68, 8) , (const, 0x5a9, 4)]
[(stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0x5aa, 4), (stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0x5a9, 4)]
[(stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0x5aa, 4), (stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0x5a9, 4)]
[(stack, 0xfffffffffffffe80, 4) INDIRECT (stack, 0xfffffffffffffe80, 4) , (const, 0x5aa, 4), (stack, 0xfffffffffffffe80, 4) INDIRECT (stack, 0xfffffffffffffe80, 4) , (const, 0x5a9, 4)]
[(stack, 0xfffffffffffffe84, 4) INDIRECT (stack, 0xfffffffffffffe84, 4) , (const, 0x5aa, 4), (stack, 0xfffffffffffffe84, 4) INDIRECT (stack, 0xfffffffffffffe84, 4) , (const, 0x5a9, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x5aa, 4), (stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x5a9, 4)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x5aa, 4), (stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x5a9, 4)]
[(stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x5aa, 4), (stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x5a9, 4)]
[(stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x5aa, 4), (stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x5a9, 4)]
[(stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x5aa, 4), (stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x5a9, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x5aa, 4), (stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x5a9, 4)]
[(stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x5aa, 4), (stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x5a9, 4)]
[(stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x5aa, 4), (stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x5a9, 4)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x5aa, 4), (stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x5a9, 4)]
[(stack, 0xfffffffffffffeca, 1) INDIRECT (stack, 0xfffffffffffffeca, 1) , (const, 0x5aa, 4), (stack, 0xfffffffffffffeca, 1) INDIRECT (stack, 0xfffffffffffffeca, 1) , (const, 0x5a9, 4)]
[(stack, 0xfffffffffffffecb, 1) INDIRECT (stack, 0xfffffffffffffecb, 1) , (const, 0x5aa, 4), (stack, 0xfffffffffffffecb, 1) INDIRECT (stack, 0xfffffffffffffecb, 1) , (const, 0x5a9, 4)]
[(stack, 0xfffffffffffffecc, 4) INDIRECT (stack, 0xfffffffffffffecc, 4) , (const, 0x5aa, 4), (stack, 0xfffffffffffffecc, 4) INDIRECT (stack, 0xfffffffffffffecc, 4) , (const, 0x5a9, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x5aa, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x5a9, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x5aa, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x5a9, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x5aa, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x5a9, 4)]
[(stack, 0xfffffffffffffef0, 4) INDIRECT (stack, 0xfffffffffffffef0, 4) , (const, 0x5aa, 4), (stack, 0xfffffffffffffef0, 4) INDIRECT (stack, 0xfffffffffffffef0, 4) , (const, 0x5a9, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x5aa, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x5a9, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x5aa, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x5a9, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x5aa, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x5a9, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x5aa, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x5a9, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x5aa, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x5a9, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x5aa, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x5a9, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x5aa, 4), (stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x5a9, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x5aa, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x5a9, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x5aa, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x5a9, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x5aa, 4), (stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x5a9, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x5aa, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x5a9, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x5aa, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x5a9, 4)]
[(unique, 0x10000cd9, 8) COPY (stack, 0xfffffffffffffed8, 8), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x5aa, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x5a9, 4)]
[ ---  CBRANCH (ram, 0x1ee698, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x2078f0, 8) , (register, 0xa0, 4) , (register, 0xb8, 8) , (unique, 0x10000f2f, 8), (unique, 0x10000f2f, 8) CAST (unique, 0x10000ca1, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (const, 0x1, 1), (unique, 0x3100, 8) PTRADD (unique, 0x10000825, 8) , (const, 0xb, 8) , (const, 0x1, 8), (unique, 0x10000825, 8) PTRSUB (unique, 0x1000081d, 8) , (const, 0x2, 8), (unique, 0x1000081d, 8) PTRADD (register, 0xb8, 8) , (const, 0x1, 8) , (const, 0x10, 8)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x5bf, 4), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x5bc, 4)]
[(ram, 0x4c5f40, 4) INDIRECT (ram, 0x4c5f40, 4) , (const, 0x5bf, 4), (ram, 0x4c5f40, 4) INDIRECT (ram, 0x4c5f40, 4) , (const, 0x5bc, 4)]
[(ram, 0x4c5f44, 4) INDIRECT (ram, 0x4c5f44, 4) , (const, 0x5bf, 4), (ram, 0x4c5f44, 4) INDIRECT (ram, 0x4c5f44, 4) , (const, 0x5bc, 4)]
[(ram, 0x4c5f50, 8) INDIRECT (ram, 0x4c5f50, 8) , (const, 0x5bf, 4), (ram, 0x4c5f50, 8) INDIRECT (ram, 0x4c5f50, 8) , (const, 0x5bc, 4)]
[(ram, 0x4c5f58, 8) INDIRECT (ram, 0x4c5f58, 8) , (const, 0x5bf, 4), (ram, 0x4c5f58, 8) INDIRECT (ram, 0x4c5f58, 8) , (const, 0x5bc, 4)]
[(ram, 0x4c5f60, 4) INDIRECT (ram, 0x4c5f60, 4) , (const, 0x5bf, 4), (ram, 0x4c5f60, 4) INDIRECT (ram, 0x4c5f60, 4) , (const, 0x5bc, 4)]
[(ram, 0x4c5f64, 4) INDIRECT (ram, 0x4c5f64, 4) , (const, 0x5bf, 4), (ram, 0x4c5f64, 4) INDIRECT (ram, 0x4c5f64, 4) , (const, 0x5bc, 4)]
[(ram, 0x4c8718, 8) INDIRECT (ram, 0x4c8718, 8) , (const, 0x5bf, 4), (ram, 0x4c8718, 8) INDIRECT (ram, 0x4c8718, 8) , (const, 0x5bc, 4)]
[(ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x5bf, 4), (ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x5bc, 4)]
[(ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x5bf, 4), (ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x5bc, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (register, 0x0, 1), (register, 0x0, 1) SUBPIECE (stack, 0xfffffffffffffef8, 8) , (const, 0x0, 4), (unique, 0x3100, 8) PTRADD (unique, 0x10000845, 8) , (const, 0xa, 8) , (const, 0x1, 8), (unique, 0x10000845, 8) PTRSUB (unique, 0x1000083d, 8) , (const, 0x2, 8), (unique, 0x1000083d, 8) PTRADD (register, 0xb8, 8) , (const, 0x1, 8) , (const, 0x10, 8)]
[(unique, 0x10000d11, 8) COPY (register, 0x18, 8)]
[(unique, 0x10000d81, 8) COPY (register, 0xb0, 8)]
[(unique, 0x10000dd1, 8) COPY (register, 0xb8, 8)]
[(unique, 0x10000df1, 4) COPY (register, 0xa0, 4)]
[ ---  CBRANCH (ram, 0x1ee931, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xfffffffffffffed8, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x1ee890, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd00, 4) , (const, 0x2, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0xb0, 8) , (const, 0x4, 8)]
[ ---  CBRANCH (ram, 0x1eef20, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xfffffffffffffebc, 4) , (const, 0x2, 4)]
[(stack, 0xffffffffffffff40, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000f37, 8), (unique, 0x10000f37, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0x10000865, 8) , (const, 0x6, 8) , (const, 0x1, 8), (unique, 0x10000865, 8) PTRSUB (register, 0xb8, 8) , (const, 0x2, 8)]
[(stack, 0xffffffffffffff48, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000f3f, 8), (unique, 0x10000f3f, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb8, 8) , (const, 0x1, 8) , (const, 0x10, 8)]
[(stack, 0xffffffffffffff40, 8) COPY (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x1eef4c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 1) , (const, 0x7f, 1), (register, 0x0, 1) SUBPIECE (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000f47, 8), (unique, 0x10000f47, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0x10000b1d, 8) , (const, 0x2, 8) , (const, 0x1, 8), (unique, 0x10000b1d, 8) PTRSUB (register, 0xb8, 8) , (const, 0x2, 8)]
[(register, 0x0, 4) COPY (const, 0x100007f, 4)]
[(stack, 0xffffffffffffff48, 8) INT_ADD (unique, 0x10000c89, 8) , (const, 0xffff0000, 4), (unique, 0x10000c89, 8) INT_LEFT (unique, 0x10000c81, 8) , (const, 0x20, 8), (unique, 0x10000c81, 8) INT_SEXT (unique, 0x10000f4f, 4), (unique, 0x10000f4f, 4) CAST (register, 0x0, 4), (register, 0x0, 4) MULTIEQUAL (unique, 0xbc80, 4) , (register, 0x0, 4)]
[ ---  BRANCH (ram, 0x1ee8a6, 1)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(register, 0x0, 8) COPY (const, 0x0, 8)]
[(stack, 0xfffffffffffffe84, 4) COPY (register, 0xa0, 4)]
[(stack, 0xfffffffffffffe78, 8) COPY (register, 0xb0, 8)]
[(stack, 0xfffffffffffffe70, 8) COPY (register, 0x18, 8)]
[(stack, 0xfffffffffffffe68, 8) COPY (register, 0xb8, 8)]
[(unique, 0x10000d31, 8) COPY (stack, 0xfffffffffffffee0, 8)]
[ ---  BRANCH (ram, 0x1ee910, 1)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 4) MULTIEQUAL (stack, 0xfffffffffffffef0, 4) , (stack, 0xfffffffffffffef0, 4) , (stack, 0xfffffffffffffef0, 4)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffecc, 4) MULTIEQUAL (stack, 0xfffffffffffffecc, 4) , (stack, 0xfffffffffffffecc, 4) , (stack, 0xfffffffffffffecc, 4)]
[(stack, 0xfffffffffffffecb, 1) MULTIEQUAL (stack, 0xfffffffffffffecb, 1) , (stack, 0xfffffffffffffecb, 1) , (stack, 0xfffffffffffffecb, 1)]
[(stack, 0xfffffffffffffeca, 1) MULTIEQUAL (stack, 0xfffffffffffffeca, 1) , (stack, 0xfffffffffffffeca, 1) , (stack, 0xfffffffffffffeca, 1)]
[(stack, 0xfffffffffffffec0, 8) MULTIEQUAL (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8)]
[(stack, 0xfffffffffffffebc, 4) MULTIEQUAL (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4)]
[(stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4)]
[(stack, 0xfffffffffffffea8, 8) MULTIEQUAL (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8)]
[(stack, 0xfffffffffffffea0, 8) MULTIEQUAL (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8)]
[(stack, 0xfffffffffffffe98, 8) MULTIEQUAL (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8)]
[(stack, 0xfffffffffffffe90, 8) MULTIEQUAL (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8)]
[(stack, 0xfffffffffffffe88, 8) MULTIEQUAL (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8)]
[(stack, 0xfffffffffffffe80, 4) MULTIEQUAL (stack, 0xfffffffffffffe80, 4) , (stack, 0xfffffffffffffe80, 4) , (stack, 0xfffffffffffffe80, 4)]
[(stack, 0xfffffffffffffe60, 8) MULTIEQUAL (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8)]
[(stack, 0xfffffffffffffe5c, 4) MULTIEQUAL (stack, 0xfffffffffffffe5c, 4) , (stack, 0xfffffffffffffe5c, 4) , (stack, 0xfffffffffffffe5c, 4)]
[(ram, 0x4c87a0, 4) MULTIEQUAL (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4)]
[(ram, 0x4c8790, 4) MULTIEQUAL (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4)]
[(ram, 0x4c8718, 8) MULTIEQUAL (ram, 0x4c8718, 8) , (ram, 0x4c8718, 8) , (ram, 0x4c8718, 8)]
[(ram, 0x4c5f64, 4) MULTIEQUAL (ram, 0x4c5f64, 4) , (ram, 0x4c5f64, 4) , (ram, 0x4c5f64, 4)]
[(ram, 0x4c5f60, 4) MULTIEQUAL (ram, 0x4c5f60, 4) , (ram, 0x4c5f60, 4) , (ram, 0x4c5f60, 4)]
[(ram, 0x4c5f58, 8) MULTIEQUAL (ram, 0x4c5f58, 8) , (ram, 0x4c5f58, 8) , (ram, 0x4c5f58, 8)]
[(ram, 0x4c5f50, 8) MULTIEQUAL (ram, 0x4c5f50, 8) , (ram, 0x4c5f50, 8) , (ram, 0x4c5f50, 8)]
[(ram, 0x4c5f44, 4) MULTIEQUAL (ram, 0x4c5f44, 4) , (ram, 0x4c5f44, 4) , (ram, 0x4c5f44, 4)]
[(ram, 0x4c5f40, 4) MULTIEQUAL (ram, 0x4c5f40, 4) , (ram, 0x4c5f40, 4) , (ram, 0x4c5f40, 4)]
[(ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(register, 0x20a, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1) , (register, 0x20a, 1)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x10000cc9, 8) COPY (stack, 0xfffffffffffffeb0, 8), (stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(unique, 0x10000d29, 8) COPY (stack, 0xfffffffffffffe70, 8), (stack, 0xfffffffffffffe70, 8) MULTIEQUAL (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8)]
[(unique, 0x10000d99, 8) COPY (stack, 0xfffffffffffffe78, 8), (stack, 0xfffffffffffffe78, 8) MULTIEQUAL (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8)]
[(unique, 0x10000de9, 8) COPY (stack, 0xfffffffffffffe68, 8), (stack, 0xfffffffffffffe68, 8) MULTIEQUAL (stack, 0xfffffffffffffe68, 8) , (stack, 0xfffffffffffffe68, 8) , (stack, 0xfffffffffffffe68, 8)]
[(unique, 0x10000dfd, 4) COPY (stack, 0xfffffffffffffe84, 4), (stack, 0xfffffffffffffe84, 4) MULTIEQUAL (stack, 0xfffffffffffffe84, 4) , (stack, 0xfffffffffffffe84, 4) , (stack, 0xfffffffffffffe84, 4)]
[ ---  CBRANCH (ram, 0x1ee8e0, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (register, 0xa0, 8) , (register, 0x18, 8), (register, 0x18, 8) COPY (unique, 0x10000d49, 8), (unique, 0x10000d49, 8) MULTIEQUAL (unique, 0x10000d31, 8) , (unique, 0x10000d39, 8) , (unique, 0x10000d41, 8), (register, 0xa0, 8) MULTIEQUAL (register, 0x0, 8) , (unique, 0x3100, 8) , (register, 0xa0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000f63, 8) , (const, 0x1ee905, 8), (unique, 0x10000f63, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x6ae, 4)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x6ae, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x6ae, 4)]
[(ram, 0x4c5f40, 4) INDIRECT (ram, 0x4c5f40, 4) , (const, 0x6ae, 4)]
[(ram, 0x4c5f44, 4) INDIRECT (ram, 0x4c5f44, 4) , (const, 0x6ae, 4)]
[(ram, 0x4c5f50, 8) INDIRECT (ram, 0x4c5f50, 8) , (const, 0x6ae, 4)]
[(ram, 0x4c5f58, 8) INDIRECT (ram, 0x4c5f58, 8) , (const, 0x6ae, 4)]
[(ram, 0x4c5f60, 4) INDIRECT (ram, 0x4c5f60, 4) , (const, 0x6ae, 4)]
[(ram, 0x4c5f64, 4) INDIRECT (ram, 0x4c5f64, 4) , (const, 0x6ae, 4)]
[(ram, 0x4c8718, 8) INDIRECT (ram, 0x4c8718, 8) , (const, 0x6ae, 4)]
[(ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x6ae, 4)]
[(ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x6ae, 4)]
[(stack, 0xfffffffffffffe5c, 4) INDIRECT (stack, 0xfffffffffffffe5c, 4) , (const, 0x6ae, 4), (stack, 0xfffffffffffffe5c, 4) INDIRECT (stack, 0xfffffffffffffe5c, 4) , (const, 0x6ad, 4)]
[(stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x6ae, 4), (stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x6ad, 4)]
[(stack, 0xfffffffffffffe68, 8) INDIRECT (stack, 0xfffffffffffffe68, 8) , (const, 0x6ae, 4), (stack, 0xfffffffffffffe68, 8) INDIRECT (stack, 0xfffffffffffffe68, 8) , (const, 0x6ad, 4)]
[(stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0x6ae, 4), (stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0x6ad, 4)]
[(stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0x6ae, 4), (stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0x6ad, 4)]
[(stack, 0xfffffffffffffe80, 4) INDIRECT (stack, 0xfffffffffffffe80, 4) , (const, 0x6ae, 4), (stack, 0xfffffffffffffe80, 4) INDIRECT (stack, 0xfffffffffffffe80, 4) , (const, 0x6ad, 4)]
[(stack, 0xfffffffffffffe84, 4) INDIRECT (stack, 0xfffffffffffffe84, 4) , (const, 0x6ae, 4), (stack, 0xfffffffffffffe84, 4) INDIRECT (stack, 0xfffffffffffffe84, 4) , (const, 0x6ad, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x6ae, 4), (stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x6ad, 4)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x6ae, 4), (stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x6ad, 4)]
[(stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x6ae, 4), (stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x6ad, 4)]
[(stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x6ae, 4), (stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x6ad, 4)]
[(stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x6ae, 4), (stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x6ad, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x6ae, 4), (stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x6ad, 4)]
[(stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x6ae, 4), (stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x6ad, 4)]
[(stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x6ae, 4), (stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x6ad, 4)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x6ae, 4), (stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x6ad, 4)]
[(stack, 0xfffffffffffffeca, 1) INDIRECT (stack, 0xfffffffffffffeca, 1) , (const, 0x6ae, 4), (stack, 0xfffffffffffffeca, 1) INDIRECT (stack, 0xfffffffffffffeca, 1) , (const, 0x6ad, 4)]
[(stack, 0xfffffffffffffecb, 1) INDIRECT (stack, 0xfffffffffffffecb, 1) , (const, 0x6ae, 4), (stack, 0xfffffffffffffecb, 1) INDIRECT (stack, 0xfffffffffffffecb, 1) , (const, 0x6ad, 4)]
[(stack, 0xfffffffffffffecc, 4) INDIRECT (stack, 0xfffffffffffffecc, 4) , (const, 0x6ae, 4), (stack, 0xfffffffffffffecc, 4) INDIRECT (stack, 0xfffffffffffffecc, 4) , (const, 0x6ad, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x6ae, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x6ad, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x6ae, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x6ad, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x6ae, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x6ad, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x6ae, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x6ad, 4)]
[(stack, 0xfffffffffffffef0, 4) INDIRECT (stack, 0xfffffffffffffef0, 4) , (const, 0x6ae, 4), (stack, 0xfffffffffffffef0, 4) INDIRECT (stack, 0xfffffffffffffef0, 4) , (const, 0x6ad, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x6ae, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x6ad, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x6ae, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x6ad, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x6ae, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x6ad, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x6ae, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x6ad, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x6ae, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x6ad, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x6ae, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x6ad, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x6ae, 4), (stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x6ad, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x6ae, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x6ad, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x6ae, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x6ad, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x6ae, 4), (stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x6ad, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x6ae, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x6ad, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x6ae, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x6ad, 4)]
[(register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x18e1c0, 8) , (unique, 0x10000cc9, 8) , (unique, 0x3100, 8) , (const, 0x10, 8), (unique, 0x3100, 8) PTRADD (unique, 0x3400, 8) , (const, 0x8, 8) , (const, 0x1, 8), (unique, 0x3400, 8) CAST (unique, 0x10000f5b, 8), (unique, 0x10000f5b, 8) INT_ADD (unique, 0x10000f53, 8) , (unique, 0x3300, 8), (unique, 0x10000f53, 8) CAST (unique, 0x10000cd9, 8), (unique, 0x3300, 8) INT_MULT (unique, 0x3b80, 8) , (const, 0x8, 8), (unique, 0x3b80, 8) INT_ADD (register, 0xa8, 8) , (unique, 0x3a80, 8), (unique, 0x3a80, 8) INT_AND (unique, 0x3400, 8) , (const, 0xfffffffffffffffe, 8), (register, 0xa8, 8) INT_RIGHT (unique, 0x3400, 8) , (const, 0x1, 4), (unique, 0x3400, 8) INT_ADD (register, 0xa0, 8) , (register, 0x18, 8)]
[(unique, 0x10000d41, 8) COPY (register, 0xa8, 8), (register, 0xa8, 8) INT_RIGHT (unique, 0x3400, 8) , (const, 0x1, 4), (unique, 0x3400, 8) INT_ADD (register, 0xa0, 8) , (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x1ee9a0, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (const, 0xffffffff, 4) , (register, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x18e1c0, 8) , (unique, 0x10000cc9, 8) , (unique, 0x3100, 8) , (const, 0x10, 8), (unique, 0x3100, 8) PTRADD (unique, 0x3400, 8) , (const, 0x8, 8) , (const, 0x1, 8), (unique, 0x3400, 8) CAST (unique, 0x10000f5b, 8), (unique, 0x10000f5b, 8) INT_ADD (unique, 0x10000f53, 8) , (unique, 0x3300, 8), (unique, 0x10000f53, 8) CAST (unique, 0x10000cd9, 8), (unique, 0x3300, 8) INT_MULT (unique, 0x3b80, 8) , (const, 0x8, 8), (unique, 0x3b80, 8) INT_ADD (register, 0xa8, 8) , (unique, 0x3a80, 8), (unique, 0x3a80, 8) INT_AND (unique, 0x3400, 8) , (const, 0xfffffffffffffffe, 8), (register, 0xa8, 8) INT_RIGHT (unique, 0x3400, 8) , (const, 0x1, 4), (unique, 0x3400, 8) INT_ADD (register, 0xa0, 8) , (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x1eefa5, 1) , (register, 0x206, 1)]
[(unique, 0x10000d19, 8) COPY (stack, 0xfffffffffffffe70, 8)]
[(unique, 0x10000d89, 8) COPY (stack, 0xfffffffffffffe78, 8)]
[(unique, 0x10000dd9, 8) COPY (stack, 0xfffffffffffffe68, 8)]
[(unique, 0x10000df5, 4) COPY (stack, 0xfffffffffffffe84, 4)]
[ ---  CBRANCH (ram, 0x1ee931, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x3400, 8) , (const, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0xbb00, 1), (unique, 0x3100, 8) PTRADD (unique, 0x10000b5d, 8) , (const, 0xc, 8) , (const, 0x1, 8), (unique, 0x10000b5d, 8) PTRSUB (unique, 0x10000b55, 8) , (const, 0x2, 8), (unique, 0x10000b55, 8) PTRADD (stack, 0xfffffffffffffe68, 8) , (const, 0x1, 8) , (const, 0x10, 8), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0xbb00, 1), (unique, 0x3100, 8) PTRADD (unique, 0x10000b7d, 8) , (const, 0xd, 8) , (const, 0x1, 8), (unique, 0x10000b7d, 8) PTRSUB (unique, 0x10000b75, 8) , (const, 0x2, 8), (unique, 0x10000b75, 8) PTRADD (stack, 0xfffffffffffffe68, 8) , (const, 0x1, 8) , (const, 0x10, 8), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0x3400, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x6ea, 4), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x6e3, 4), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x6dc, 4)]
[(ram, 0x4c5f40, 4) INDIRECT (ram, 0x4c5f40, 4) , (const, 0x6ea, 4), (ram, 0x4c5f40, 4) INDIRECT (ram, 0x4c5f40, 4) , (const, 0x6e3, 4), (ram, 0x4c5f40, 4) INDIRECT (ram, 0x4c5f40, 4) , (const, 0x6dc, 4)]
[(ram, 0x4c5f44, 4) INDIRECT (ram, 0x4c5f44, 4) , (const, 0x6ea, 4), (ram, 0x4c5f44, 4) INDIRECT (ram, 0x4c5f44, 4) , (const, 0x6e3, 4), (ram, 0x4c5f44, 4) INDIRECT (ram, 0x4c5f44, 4) , (const, 0x6dc, 4)]
[(ram, 0x4c5f50, 8) INDIRECT (ram, 0x4c5f50, 8) , (const, 0x6ea, 4), (ram, 0x4c5f50, 8) INDIRECT (ram, 0x4c5f50, 8) , (const, 0x6e3, 4), (ram, 0x4c5f50, 8) INDIRECT (ram, 0x4c5f50, 8) , (const, 0x6dc, 4)]
[(ram, 0x4c5f58, 8) INDIRECT (ram, 0x4c5f58, 8) , (const, 0x6ea, 4), (ram, 0x4c5f58, 8) INDIRECT (ram, 0x4c5f58, 8) , (const, 0x6e3, 4), (ram, 0x4c5f58, 8) INDIRECT (ram, 0x4c5f58, 8) , (const, 0x6dc, 4)]
[(ram, 0x4c5f60, 4) INDIRECT (ram, 0x4c5f60, 4) , (const, 0x6ea, 4), (ram, 0x4c5f60, 4) INDIRECT (ram, 0x4c5f60, 4) , (const, 0x6e3, 4), (ram, 0x4c5f60, 4) INDIRECT (ram, 0x4c5f60, 4) , (const, 0x6dc, 4)]
[(ram, 0x4c5f64, 4) INDIRECT (ram, 0x4c5f64, 4) , (const, 0x6ea, 4), (ram, 0x4c5f64, 4) INDIRECT (ram, 0x4c5f64, 4) , (const, 0x6e3, 4), (ram, 0x4c5f64, 4) INDIRECT (ram, 0x4c5f64, 4) , (const, 0x6dc, 4)]
[(ram, 0x4c8718, 8) INDIRECT (ram, 0x4c8718, 8) , (const, 0x6ea, 4), (ram, 0x4c8718, 8) INDIRECT (ram, 0x4c8718, 8) , (const, 0x6e3, 4), (ram, 0x4c8718, 8) INDIRECT (ram, 0x4c8718, 8) , (const, 0x6dc, 4)]
[(ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x6ea, 4), (ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x6e3, 4), (ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x6dc, 4)]
[(ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x6ea, 4), (ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x6e3, 4), (ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x6dc, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000f73, 8) , (unique, 0xbc80, 4), (unique, 0x10000f73, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (stack, 0xfffffffffffffe68, 8) , (const, 0x2, 8) , (const, 0x10, 8), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000f6b, 8), (unique, 0x10000f6b, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0x3400, 8) , (const, 0x4, 8) , (const, 0x1, 8)]
[ ---  BRANCH (ram, 0x1ee931, 1)]
[(unique, 0x3100, 8) INT_ADD (register, 0xa8, 8) , (const, 0x1, 8)]
[(unique, 0x10000d39, 8) COPY (register, 0x18, 8)]
[ ---  BRANCH (ram, 0x1ee910, 1)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 4) MULTIEQUAL (stack, 0xfffffffffffffef0, 4) , (stack, 0xfffffffffffffef0, 4) , (stack, 0xfffffffffffffef0, 4) , (stack, 0xfffffffffffffef0, 4)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffecc, 4) MULTIEQUAL (stack, 0xfffffffffffffecc, 4) , (stack, 0xfffffffffffffecc, 4) , (stack, 0xfffffffffffffecc, 4) , (stack, 0xfffffffffffffecc, 4)]
[(stack, 0xfffffffffffffecb, 1) MULTIEQUAL (stack, 0xfffffffffffffecb, 1) , (stack, 0xfffffffffffffecb, 1) , (stack, 0xfffffffffffffecb, 1) , (stack, 0xfffffffffffffecb, 1)]
[(stack, 0xfffffffffffffeca, 1) MULTIEQUAL (stack, 0xfffffffffffffeca, 1) , (stack, 0xfffffffffffffeca, 1) , (stack, 0xfffffffffffffeca, 1) , (stack, 0xfffffffffffffeca, 1)]
[(stack, 0xfffffffffffffec0, 8) MULTIEQUAL (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8)]
[(stack, 0xfffffffffffffebc, 4) MULTIEQUAL (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4)]
[(stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(stack, 0xfffffffffffffea8, 8) MULTIEQUAL (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8)]
[(stack, 0xfffffffffffffea0, 8) MULTIEQUAL (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8)]
[(stack, 0xfffffffffffffe98, 8) MULTIEQUAL (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8)]
[(stack, 0xfffffffffffffe90, 8) MULTIEQUAL (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8)]
[(stack, 0xfffffffffffffe88, 8) MULTIEQUAL (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8)]
[(stack, 0xfffffffffffffe84, 4) MULTIEQUAL (stack, 0xfffffffffffffe84, 4) , (stack, 0xfffffffffffffe84, 4) , (stack, 0xfffffffffffffe84, 4) , (stack, 0xfffffffffffffe84, 4)]
[(stack, 0xfffffffffffffe80, 4) MULTIEQUAL (stack, 0xfffffffffffffe80, 4) , (stack, 0xfffffffffffffe80, 4) , (stack, 0xfffffffffffffe80, 4) , (stack, 0xfffffffffffffe80, 4)]
[(stack, 0xfffffffffffffe78, 8) MULTIEQUAL (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8)]
[(stack, 0xfffffffffffffe70, 8) MULTIEQUAL (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8)]
[(stack, 0xfffffffffffffe68, 8) MULTIEQUAL (stack, 0xfffffffffffffe68, 8) , (stack, 0xfffffffffffffe68, 8) , (stack, 0xfffffffffffffe68, 8) , (stack, 0xfffffffffffffe68, 8)]
[(stack, 0xfffffffffffffe60, 8) MULTIEQUAL (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8)]
[(stack, 0xfffffffffffffe5c, 4) MULTIEQUAL (stack, 0xfffffffffffffe5c, 4) , (stack, 0xfffffffffffffe5c, 4) , (stack, 0xfffffffffffffe5c, 4) , (stack, 0xfffffffffffffe5c, 4)]
[(ram, 0x4c87a0, 4) MULTIEQUAL (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4)]
[(ram, 0x4c8790, 4) MULTIEQUAL (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4)]
[(ram, 0x4c8718, 8) MULTIEQUAL (ram, 0x4c8718, 8) , (ram, 0x4c8718, 8) , (ram, 0x4c8718, 8) , (ram, 0x4c8718, 8)]
[(ram, 0x4c5f64, 4) MULTIEQUAL (ram, 0x4c5f64, 4) , (ram, 0x4c5f64, 4) , (ram, 0x4c5f64, 4) , (ram, 0x4c5f64, 4)]
[(ram, 0x4c5f60, 4) MULTIEQUAL (ram, 0x4c5f60, 4) , (ram, 0x4c5f60, 4) , (ram, 0x4c5f60, 4) , (ram, 0x4c5f60, 4)]
[(ram, 0x4c5f58, 8) MULTIEQUAL (ram, 0x4c5f58, 8) , (ram, 0x4c5f58, 8) , (ram, 0x4c5f58, 8) , (ram, 0x4c5f58, 8)]
[(ram, 0x4c5f50, 8) MULTIEQUAL (ram, 0x4c5f50, 8) , (ram, 0x4c5f50, 8) , (ram, 0x4c5f50, 8) , (ram, 0x4c5f50, 8)]
[(ram, 0x4c5f44, 4) MULTIEQUAL (ram, 0x4c5f44, 4) , (ram, 0x4c5f44, 4) , (ram, 0x4c5f44, 4) , (ram, 0x4c5f44, 4)]
[(ram, 0x4c5f40, 4) MULTIEQUAL (ram, 0x4c5f40, 4) , (ram, 0x4c5f40, 4) , (ram, 0x4c5f40, 4) , (ram, 0x4c5f40, 4)]
[(ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(register, 0x20a, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1) , (register, 0x20a, 1) , (register, 0x20a, 1)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb8, 8) MULTIEQUAL (unique, 0x10000dd1, 8) , (unique, 0x10000dd9, 8) , (unique, 0x10000dd9, 8) , (unique, 0x10000de9, 8)]
[(register, 0xa0, 4) MULTIEQUAL (unique, 0x10000df1, 4) , (unique, 0x10000df5, 4) , (unique, 0x10000df5, 4) , (unique, 0x10000dfd, 4)]
[(register, 0x18, 8) MULTIEQUAL (unique, 0x10000d11, 8) , (unique, 0x10000d19, 8) , (unique, 0x10000d19, 8) , (unique, 0x10000d29, 8)]
[(unique, 0x10000da9, 8) COPY (register, 0xb0, 8), (register, 0xb0, 8) MULTIEQUAL (unique, 0x10000d81, 8) , (unique, 0x10000d89, 8) , (unique, 0x10000d89, 8) , (unique, 0x10000d99, 8)]
[ ---  CBRANCH (ram, 0x1ee6b7, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd00, 4) , (const, 0x2, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0xb0, 8) , (const, 0x4, 8), (register, 0xb0, 8) MULTIEQUAL (unique, 0x10000d81, 8) , (unique, 0x10000d89, 8) , (unique, 0x10000d89, 8) , (unique, 0x10000d99, 8)]
[ ---  CBRANCH (ram, 0x1ee6b7, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xfffffffffffffebc, 4) , (const, 0xa, 4)]
[ ---  CBRANCH (ram, 0x1eedb8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000f7b, 8), (unique, 0x10000f7b, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0x1000088d, 8) , (const, 0x6, 8) , (const, 0x1, 8), (unique, 0x1000088d, 8) PTRSUB (register, 0xb8, 8) , (const, 0x2, 8)]
[ ---  CBRANCH (ram, 0x1eedb8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000f83, 8), (unique, 0x10000f83, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0x100008a5, 8) , (const, 0xa, 8) , (const, 0x1, 8), (unique, 0x100008a5, 8) PTRSUB (register, 0xb8, 8) , (const, 0x2, 8)]
[ ---  CBRANCH (ram, 0x1eedb8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd00, 4) , (const, 0xffff0000, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000f8b, 8), (unique, 0x10000f8b, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb8, 8) , (const, 0x1, 8) , (const, 0x10, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000f93, 8) , (unique, 0x100004cd, 8), (unique, 0x10000f93, 8) CAST (register, 0x20, 8), (unique, 0x100004cd, 8) PTRSUB (const, 0x0, 8) , (const, 0x1eedd7, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(stack, 0xfffffffffffffe5c, 4) INDIRECT (stack, 0xfffffffffffffe5c, 4) , (const, 0x68f, 4), (stack, 0xfffffffffffffe5c, 4) INDIRECT (stack, 0xfffffffffffffe5c, 4) , (const, 0x68e, 4)]
[(stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x68f, 4), (stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x68e, 4)]
[(stack, 0xfffffffffffffe68, 8) INDIRECT (stack, 0xfffffffffffffe68, 8) , (const, 0x68f, 4), (stack, 0xfffffffffffffe68, 8) INDIRECT (stack, 0xfffffffffffffe68, 8) , (const, 0x68e, 4)]
[(stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0x68f, 4), (stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0x68e, 4)]
[(stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0x68f, 4), (stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0x68e, 4)]
[(stack, 0xfffffffffffffe80, 4) INDIRECT (stack, 0xfffffffffffffe80, 4) , (const, 0x68f, 4), (stack, 0xfffffffffffffe80, 4) INDIRECT (stack, 0xfffffffffffffe80, 4) , (const, 0x68e, 4)]
[(stack, 0xfffffffffffffe84, 4) INDIRECT (stack, 0xfffffffffffffe84, 4) , (const, 0x68f, 4), (stack, 0xfffffffffffffe84, 4) INDIRECT (stack, 0xfffffffffffffe84, 4) , (const, 0x68e, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x68f, 4), (stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x68e, 4)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x68f, 4), (stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x68e, 4)]
[(stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x68f, 4), (stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x68e, 4)]
[(stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x68f, 4), (stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x68e, 4)]
[(stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x68f, 4), (stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x68e, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x68f, 4), (stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x68e, 4)]
[(stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x68f, 4), (stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x68e, 4)]
[(stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x68f, 4), (stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x68e, 4)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x68f, 4), (stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x68e, 4)]
[(stack, 0xfffffffffffffeca, 1) INDIRECT (stack, 0xfffffffffffffeca, 1) , (const, 0x68f, 4), (stack, 0xfffffffffffffeca, 1) INDIRECT (stack, 0xfffffffffffffeca, 1) , (const, 0x68e, 4)]
[(stack, 0xfffffffffffffecb, 1) INDIRECT (stack, 0xfffffffffffffecb, 1) , (const, 0x68f, 4), (stack, 0xfffffffffffffecb, 1) INDIRECT (stack, 0xfffffffffffffecb, 1) , (const, 0x68e, 4)]
[(stack, 0xfffffffffffffecc, 4) INDIRECT (stack, 0xfffffffffffffecc, 4) , (const, 0x68f, 4), (stack, 0xfffffffffffffecc, 4) INDIRECT (stack, 0xfffffffffffffecc, 4) , (const, 0x68e, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x68f, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x68e, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x68f, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x68e, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x68f, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x68e, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x68f, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x68e, 4)]
[(stack, 0xfffffffffffffef0, 4) INDIRECT (stack, 0xfffffffffffffef0, 4) , (const, 0x68f, 4), (stack, 0xfffffffffffffef0, 4) INDIRECT (stack, 0xfffffffffffffef0, 4) , (const, 0x68e, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x68f, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x68e, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x68f, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x68e, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x68f, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x68e, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x68f, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x68e, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x68f, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x68e, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x68f, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x68e, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x68f, 4), (stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x68e, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x68f, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x68e, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x68f, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x68e, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x68f, 4), (stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x68e, 4)]
[ ---  CALL (ram, 0x12dc40, 8) , (unique, 0x100004fd, 8) , (unique, 0x100004ed, 8) , (const, 0xa23, 4) , (unique, 0x10000505, 8), (unique, 0x10000505, 8) COPY (const, 0x291d10, 8), (unique, 0x100004fd, 8) COPY (const, 0x291cc8, 8), (unique, 0x100004ed, 8) COPY (const, 0x291b78, 8)]
[(ram, 0x4c2e78, 8) COPY (ram, 0x4c2e78, 8), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x68f, 4)]
[(ram, 0x4c5f40, 4) COPY (ram, 0x4c5f40, 4), (ram, 0x4c5f40, 4) INDIRECT (ram, 0x4c5f40, 4) , (const, 0x68f, 4)]
[(ram, 0x4c5f44, 4) COPY (ram, 0x4c5f44, 4), (ram, 0x4c5f44, 4) INDIRECT (ram, 0x4c5f44, 4) , (const, 0x68f, 4)]
[(ram, 0x4c5f50, 8) COPY (ram, 0x4c5f50, 8), (ram, 0x4c5f50, 8) INDIRECT (ram, 0x4c5f50, 8) , (const, 0x68f, 4)]
[(ram, 0x4c5f58, 8) COPY (ram, 0x4c5f58, 8), (ram, 0x4c5f58, 8) INDIRECT (ram, 0x4c5f58, 8) , (const, 0x68f, 4)]
[(ram, 0x4c5f60, 4) COPY (ram, 0x4c5f60, 4), (ram, 0x4c5f60, 4) INDIRECT (ram, 0x4c5f60, 4) , (const, 0x68f, 4)]
[(ram, 0x4c5f64, 4) COPY (ram, 0x4c5f64, 4), (ram, 0x4c5f64, 4) INDIRECT (ram, 0x4c5f64, 4) , (const, 0x68f, 4)]
[(ram, 0x4c8718, 8) COPY (ram, 0x4c8718, 8), (ram, 0x4c8718, 8) INDIRECT (ram, 0x4c8718, 8) , (const, 0x68f, 4)]
[(ram, 0x4c8790, 4) COPY (ram, 0x4c8790, 4), (ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x68f, 4)]
[(ram, 0x4c87a0, 4) COPY (ram, 0x4c87a0, 4), (ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x68f, 4)]
[ ---  RETURN (const, 0x1, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (const, 0x10, 1), (unique, 0x3100, 8) PTRADD (unique, 0x100008cd, 8) , (const, 0xa, 8) , (const, 0x1, 8), (unique, 0x100008cd, 8) PTRSUB (unique, 0x100008c5, 8) , (const, 0x2, 8), (unique, 0x100008c5, 8) PTRADD (register, 0xb8, 8) , (const, 0x1, 8) , (const, 0x10, 8)]
[(stack, 0xfffffffffffffebc, 4) COPY (const, 0xa, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100008dd, 8) , (const, 0x2, 2), (unique, 0x100008dd, 8) PTRSUB (register, 0xb8, 8) , (const, 0x0, 8)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x687, 4), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x680, 4), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x67b, 4)]
[(ram, 0x4c5f40, 4) INDIRECT (ram, 0x4c5f40, 4) , (const, 0x687, 4), (ram, 0x4c5f40, 4) INDIRECT (ram, 0x4c5f40, 4) , (const, 0x680, 4), (ram, 0x4c5f40, 4) INDIRECT (ram, 0x4c5f40, 4) , (const, 0x67b, 4)]
[(ram, 0x4c5f44, 4) INDIRECT (ram, 0x4c5f44, 4) , (const, 0x687, 4), (ram, 0x4c5f44, 4) INDIRECT (ram, 0x4c5f44, 4) , (const, 0x680, 4), (ram, 0x4c5f44, 4) INDIRECT (ram, 0x4c5f44, 4) , (const, 0x67b, 4)]
[(ram, 0x4c5f50, 8) INDIRECT (ram, 0x4c5f50, 8) , (const, 0x687, 4), (ram, 0x4c5f50, 8) INDIRECT (ram, 0x4c5f50, 8) , (const, 0x680, 4), (ram, 0x4c5f50, 8) INDIRECT (ram, 0x4c5f50, 8) , (const, 0x67b, 4)]
[(ram, 0x4c5f58, 8) INDIRECT (ram, 0x4c5f58, 8) , (const, 0x687, 4), (ram, 0x4c5f58, 8) INDIRECT (ram, 0x4c5f58, 8) , (const, 0x680, 4), (ram, 0x4c5f58, 8) INDIRECT (ram, 0x4c5f58, 8) , (const, 0x67b, 4)]
[(ram, 0x4c5f60, 4) INDIRECT (ram, 0x4c5f60, 4) , (const, 0x687, 4), (ram, 0x4c5f60, 4) INDIRECT (ram, 0x4c5f60, 4) , (const, 0x680, 4), (ram, 0x4c5f60, 4) INDIRECT (ram, 0x4c5f60, 4) , (const, 0x67b, 4)]
[(ram, 0x4c5f64, 4) INDIRECT (ram, 0x4c5f64, 4) , (const, 0x687, 4), (ram, 0x4c5f64, 4) INDIRECT (ram, 0x4c5f64, 4) , (const, 0x680, 4), (ram, 0x4c5f64, 4) INDIRECT (ram, 0x4c5f64, 4) , (const, 0x67b, 4)]
[(ram, 0x4c8718, 8) INDIRECT (ram, 0x4c8718, 8) , (const, 0x687, 4), (ram, 0x4c8718, 8) INDIRECT (ram, 0x4c8718, 8) , (const, 0x680, 4), (ram, 0x4c8718, 8) INDIRECT (ram, 0x4c8718, 8) , (const, 0x67b, 4)]
[(ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x687, 4), (ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x680, 4), (ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x67b, 4)]
[(ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x687, 4), (ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x680, 4), (ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x67b, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000fa3, 8) , (unique, 0xbc80, 4), (unique, 0x10000fa3, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0x1000090d, 8) , (const, 0x2, 8) , (const, 0x1, 8), (unique, 0x1000090d, 8) PTRSUB (register, 0xb8, 8) , (const, 0x2, 8), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000f9b, 8), (unique, 0x10000f9b, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0x100008f5, 8) , (const, 0x2, 8) , (const, 0x1, 8), (unique, 0x100008f5, 8) PTRSUB (unique, 0x100008ed, 8) , (const, 0x2, 8), (unique, 0x100008ed, 8) PTRADD (register, 0xb8, 8) , (const, 0x1, 8) , (const, 0x10, 8)]
[ ---  BRANCH (ram, 0x1ee6b7, 1)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 4) MULTIEQUAL (stack, 0xfffffffffffffef0, 4) , (stack, 0xfffffffffffffef0, 4) , (stack, 0xfffffffffffffef0, 4)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffecc, 4) MULTIEQUAL (stack, 0xfffffffffffffecc, 4) , (stack, 0xfffffffffffffecc, 4) , (stack, 0xfffffffffffffecc, 4)]
[(stack, 0xfffffffffffffecb, 1) MULTIEQUAL (stack, 0xfffffffffffffecb, 1) , (stack, 0xfffffffffffffecb, 1) , (stack, 0xfffffffffffffecb, 1)]
[(stack, 0xfffffffffffffeca, 1) MULTIEQUAL (stack, 0xfffffffffffffeca, 1) , (stack, 0xfffffffffffffeca, 1) , (stack, 0xfffffffffffffeca, 1)]
[(stack, 0xfffffffffffffec0, 8) MULTIEQUAL (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8)]
[(stack, 0xfffffffffffffebc, 4) MULTIEQUAL (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4)]
[(stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(stack, 0xfffffffffffffea8, 8) MULTIEQUAL (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8)]
[(stack, 0xfffffffffffffea0, 8) MULTIEQUAL (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8)]
[(stack, 0xfffffffffffffe98, 8) MULTIEQUAL (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8)]
[(stack, 0xfffffffffffffe90, 8) MULTIEQUAL (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8)]
[(stack, 0xfffffffffffffe88, 8) MULTIEQUAL (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8)]
[(stack, 0xfffffffffffffe84, 4) MULTIEQUAL (stack, 0xfffffffffffffe84, 4) , (stack, 0xfffffffffffffe84, 4) , (stack, 0xfffffffffffffe84, 4)]
[(stack, 0xfffffffffffffe80, 4) MULTIEQUAL (stack, 0xfffffffffffffe80, 4) , (stack, 0xfffffffffffffe80, 4) , (stack, 0xfffffffffffffe80, 4)]
[(stack, 0xfffffffffffffe78, 8) MULTIEQUAL (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8)]
[(stack, 0xfffffffffffffe70, 8) MULTIEQUAL (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8)]
[(stack, 0xfffffffffffffe68, 8) MULTIEQUAL (stack, 0xfffffffffffffe68, 8) , (stack, 0xfffffffffffffe68, 8) , (stack, 0xfffffffffffffe68, 8)]
[(stack, 0xfffffffffffffe60, 8) MULTIEQUAL (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8)]
[(stack, 0xfffffffffffffe5c, 4) MULTIEQUAL (stack, 0xfffffffffffffe5c, 4) , (stack, 0xfffffffffffffe5c, 4) , (stack, 0xfffffffffffffe5c, 4)]
[(ram, 0x4c87a0, 4) MULTIEQUAL (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4)]
[(ram, 0x4c8790, 4) MULTIEQUAL (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4)]
[(ram, 0x4c8718, 8) MULTIEQUAL (ram, 0x4c8718, 8) , (ram, 0x4c8718, 8) , (ram, 0x4c8718, 8)]
[(ram, 0x4c5f64, 4) MULTIEQUAL (ram, 0x4c5f64, 4) , (ram, 0x4c5f64, 4) , (ram, 0x4c5f64, 4)]
[(ram, 0x4c5f60, 4) MULTIEQUAL (ram, 0x4c5f60, 4) , (ram, 0x4c5f60, 4) , (ram, 0x4c5f60, 4)]
[(ram, 0x4c5f58, 8) MULTIEQUAL (ram, 0x4c5f58, 8) , (ram, 0x4c5f58, 8) , (ram, 0x4c5f58, 8)]
[(ram, 0x4c5f50, 8) MULTIEQUAL (ram, 0x4c5f50, 8) , (ram, 0x4c5f50, 8) , (ram, 0x4c5f50, 8)]
[(ram, 0x4c5f44, 4) MULTIEQUAL (ram, 0x4c5f44, 4) , (ram, 0x4c5f44, 4) , (ram, 0x4c5f44, 4)]
[(ram, 0x4c5f40, 4) MULTIEQUAL (ram, 0x4c5f40, 4) , (ram, 0x4c5f40, 4) , (ram, 0x4c5f40, 4)]
[(register, 0x20a, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1) , (register, 0x20a, 1)]
[(register, 0xa0, 4) MULTIEQUAL (register, 0x0, 4) , (register, 0xa0, 4) , (register, 0xa0, 4)]
[ ---  CBRANCH (ram, 0x1ee6b2, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd00, 4) , (const, 0x61, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000fab, 8), (unique, 0x10000fab, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (ram, 0x4c2e78, 8) , (register, 0x110, 8) , (const, 0x1, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8), (ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[ ---  CBRANCH (ram, 0x1ee7b0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xfffffffffffffebc, 4) , (const, 0xa, 4)]
[ ---  CBRANCH (ram, 0x1ee6b2, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd00, 4) , (const, 0x2, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0xb0, 8) , (const, 0x4, 8)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x335, 4)]
[(ram, 0x4c5f40, 4) INDIRECT (ram, 0x4c5f40, 4) , (const, 0x335, 4)]
[(ram, 0x4c5f44, 4) INDIRECT (ram, 0x4c5f44, 4) , (const, 0x335, 4)]
[(ram, 0x4c5f50, 8) INDIRECT (ram, 0x4c5f50, 8) , (const, 0x335, 4)]
[(ram, 0x4c5f58, 8) INDIRECT (ram, 0x4c5f58, 8) , (const, 0x335, 4)]
[(ram, 0x4c5f60, 4) INDIRECT (ram, 0x4c5f60, 4) , (const, 0x335, 4)]
[(ram, 0x4c5f64, 4) INDIRECT (ram, 0x4c5f64, 4) , (const, 0x335, 4)]
[(ram, 0x4c8718, 8) INDIRECT (ram, 0x4c8718, 8) , (const, 0x335, 4)]
[(ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x335, 4)]
[(ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x335, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (const, 0x0, 1), (unique, 0x3100, 8) PTRADD (unique, 0x100005ed, 8) , (const, 0xa, 8) , (const, 0x1, 8), (unique, 0x100005ed, 8) PTRSUB (unique, 0x100005e5, 8) , (const, 0x2, 8), (unique, 0x100005e5, 8) PTRADD (register, 0xb8, 8) , (const, 0x1, 8) , (const, 0x10, 8)]
[(unique, 0x10000da1, 8) COPY (register, 0xb0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 4) MULTIEQUAL (stack, 0xfffffffffffffef0, 4) , (stack, 0xfffffffffffffef0, 4)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffecc, 4) MULTIEQUAL (stack, 0xfffffffffffffecc, 4) , (stack, 0xfffffffffffffecc, 4)]
[(stack, 0xfffffffffffffecb, 1) MULTIEQUAL (stack, 0xfffffffffffffecb, 1) , (stack, 0xfffffffffffffecb, 1)]
[(stack, 0xfffffffffffffeca, 1) MULTIEQUAL (stack, 0xfffffffffffffeca, 1) , (stack, 0xfffffffffffffeca, 1)]
[(stack, 0xfffffffffffffec0, 8) MULTIEQUAL (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8)]
[(stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(stack, 0xfffffffffffffea8, 8) MULTIEQUAL (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8)]
[(stack, 0xfffffffffffffea0, 8) MULTIEQUAL (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8)]
[(stack, 0xfffffffffffffe98, 8) MULTIEQUAL (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8)]
[(stack, 0xfffffffffffffe90, 8) MULTIEQUAL (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8)]
[(stack, 0xfffffffffffffe88, 8) MULTIEQUAL (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8)]
[(stack, 0xfffffffffffffe84, 4) MULTIEQUAL (stack, 0xfffffffffffffe84, 4) , (stack, 0xfffffffffffffe84, 4)]
[(stack, 0xfffffffffffffe80, 4) MULTIEQUAL (stack, 0xfffffffffffffe80, 4) , (stack, 0xfffffffffffffe80, 4)]
[(stack, 0xfffffffffffffe78, 8) MULTIEQUAL (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8)]
[(stack, 0xfffffffffffffe70, 8) MULTIEQUAL (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8)]
[(stack, 0xfffffffffffffe68, 8) MULTIEQUAL (stack, 0xfffffffffffffe68, 8) , (stack, 0xfffffffffffffe68, 8)]
[(stack, 0xfffffffffffffe60, 8) MULTIEQUAL (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8)]
[(stack, 0xfffffffffffffe5c, 4) MULTIEQUAL (stack, 0xfffffffffffffe5c, 4) , (stack, 0xfffffffffffffe5c, 4)]
[(ram, 0x4c87a0, 4) MULTIEQUAL (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4)]
[(ram, 0x4c8790, 4) MULTIEQUAL (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4)]
[(ram, 0x4c8718, 8) MULTIEQUAL (ram, 0x4c8718, 8) , (ram, 0x4c8718, 8)]
[(ram, 0x4c5f64, 4) MULTIEQUAL (ram, 0x4c5f64, 4) , (ram, 0x4c5f64, 4)]
[(ram, 0x4c5f60, 4) MULTIEQUAL (ram, 0x4c5f60, 4) , (ram, 0x4c5f60, 4)]
[(ram, 0x4c5f58, 8) MULTIEQUAL (ram, 0x4c5f58, 8) , (ram, 0x4c5f58, 8)]
[(ram, 0x4c5f50, 8) MULTIEQUAL (ram, 0x4c5f50, 8) , (ram, 0x4c5f50, 8)]
[(ram, 0x4c5f44, 4) MULTIEQUAL (ram, 0x4c5f44, 4) , (ram, 0x4c5f44, 4)]
[(ram, 0x4c5f40, 4) MULTIEQUAL (ram, 0x4c5f40, 4) , (ram, 0x4c5f40, 4)]
[(ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(register, 0x20a, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CALLOTHER (const, 0x5, 4)]
[ ---  BRANCH (ram, 0x1ee742, 1)]
[(unique, 0x3100, 8) PTRADD (register, 0xb8, 8) , (const, 0xfffffffffffffffd, 8) , (const, 0x10, 8)]
[(register, 0x8, 4) INT_ZEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0x1000070d, 8) , (const, 0xa, 8) , (const, 0x1, 8), (unique, 0x1000070d, 8) PTRSUB (unique, 0x10000705, 8) , (const, 0x2, 8), (unique, 0x10000705, 8) PTRADD (register, 0xb8, 8) , (const, 0xfffffffffffffffe, 8) , (const, 0x10, 8)]
[ ---  CBRANCH (ram, 0x1eea20, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (register, 0x8, 4) , (const, 0x8, 4), (register, 0x8, 4) INT_ZEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0x1000070d, 8) , (const, 0xa, 8) , (const, 0x1, 8), (unique, 0x1000070d, 8) PTRSUB (unique, 0x10000705, 8) , (const, 0x2, 8), (unique, 0x10000705, 8) PTRADD (register, 0xb8, 8) , (const, 0xfffffffffffffffe, 8) , (const, 0x10, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000fbb, 8) , (unique, 0xbd80, 8), (unique, 0x10000fbb, 8) CAST (register, 0xb8, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000fb3, 8), (unique, 0x10000fb3, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb8, 8) , (const, 0xfffffffffffffffd, 8) , (const, 0x10, 8)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x7d6, 4), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x7ca, 4)]
[(ram, 0x4c5f40, 4) INDIRECT (ram, 0x4c5f40, 4) , (const, 0x7d6, 4), (ram, 0x4c5f40, 4) INDIRECT (ram, 0x4c5f40, 4) , (const, 0x7ca, 4)]
[(ram, 0x4c5f44, 4) INDIRECT (ram, 0x4c5f44, 4) , (const, 0x7d6, 4), (ram, 0x4c5f44, 4) INDIRECT (ram, 0x4c5f44, 4) , (const, 0x7ca, 4)]
[(ram, 0x4c5f50, 8) INDIRECT (ram, 0x4c5f50, 8) , (const, 0x7d6, 4), (ram, 0x4c5f50, 8) INDIRECT (ram, 0x4c5f50, 8) , (const, 0x7ca, 4)]
[(ram, 0x4c5f58, 8) INDIRECT (ram, 0x4c5f58, 8) , (const, 0x7d6, 4), (ram, 0x4c5f58, 8) INDIRECT (ram, 0x4c5f58, 8) , (const, 0x7ca, 4)]
[(ram, 0x4c5f60, 4) INDIRECT (ram, 0x4c5f60, 4) , (const, 0x7d6, 4), (ram, 0x4c5f60, 4) INDIRECT (ram, 0x4c5f60, 4) , (const, 0x7ca, 4)]
[(ram, 0x4c5f64, 4) INDIRECT (ram, 0x4c5f64, 4) , (const, 0x7d6, 4), (ram, 0x4c5f64, 4) INDIRECT (ram, 0x4c5f64, 4) , (const, 0x7ca, 4)]
[(ram, 0x4c8718, 8) INDIRECT (ram, 0x4c8718, 8) , (const, 0x7d6, 4), (ram, 0x4c8718, 8) INDIRECT (ram, 0x4c8718, 8) , (const, 0x7ca, 4)]
[(ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x7d6, 4), (ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x7ca, 4)]
[(ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x7d6, 4), (ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x7ca, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000fe3, 8) , (unique, 0xbd80, 8), (unique, 0x10000fe3, 8) CAST (unique, 0x3a00, 8), (unique, 0x3a00, 8) PTRADD (unique, 0x10000945, 8) , (unique, 0x10000fdb, 8) , (const, 0x1, 8), (unique, 0x10000fdb, 8) CAST (unique, 0x1000093d, 8), (unique, 0x10000945, 8) PTRSUB (register, 0xb8, 8) , (const, 0x2, 8), (unique, 0x1000093d, 8) PTRADD (unique, 0x10000bd0, 8) , (register, 0x0, 8) , (const, 0x1, 8), (unique, 0x10000bd0, 8) PTRSUB (const, 0x0, 8) , (const, 0xfffffffffffffff6, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) CAST (unique, 0x10000fd3, 8), (unique, 0x10000fd3, 8) INT_ADD (unique, 0x3880, 8) , (register, 0x0, 8), (unique, 0x3880, 8) INT_ADD (unique, 0x10000fc3, 8) , (unique, 0x10000fcb, 8), (unique, 0x10000fcb, 8) CAST (register, 0xb8, 8), (unique, 0x10000fc3, 8) CAST (unique, 0x1000052d, 8), (unique, 0x1000052d, 8) PTRSUB (const, 0x0, 8) , (const, 0xffffffffffffffc8, 8), (register, 0x0, 8) INT_ZEXT (register, 0x8, 4)]
[(unique, 0x10000d61, 8) COPY (register, 0x30, 8), (register, 0x30, 8) CAST (unique, 0x10001023, 8), (unique, 0x10001023, 8) INT_SUB (unique, 0x10001013, 8) , (unique, 0x1000101b, 8), (unique, 0x1000101b, 8) CAST (register, 0x0, 8), (unique, 0x10001013, 8) CAST (unique, 0x3100, 8), (register, 0x0, 8) CAST (unique, 0x1000100b, 8), (unique, 0x1000100b, 8) INT_SUB (unique, 0x10000ffb, 8) , (unique, 0x10001003, 8), (unique, 0x10001003, 8) CAST (register, 0x38, 8), (unique, 0x10000ffb, 8) CAST (register, 0xb8, 8), (register, 0x38, 8) CAST (unique, 0x10000ff3, 8), (unique, 0x10000ff3, 8) INT_AND (unique, 0x10000feb, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x10000feb, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0x1000095d, 8) , (const, 0x6, 8) , (const, 0x1, 8), (unique, 0x1000095d, 8) PTRSUB (register, 0xb8, 8) , (const, 0x2, 8)]
[(unique, 0x10000d71, 8) COPY (register, 0x38, 8), (register, 0x38, 8) CAST (unique, 0x10000ff3, 8), (unique, 0x10000ff3, 8) INT_AND (unique, 0x10000feb, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x10000feb, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0x1000095d, 8) , (const, 0x6, 8) , (const, 0x1, 8), (unique, 0x1000095d, 8) PTRSUB (register, 0xb8, 8) , (const, 0x2, 8)]
[(register, 0x8, 8) INT_ZEXT (register, 0x0, 4), (register, 0x0, 4) INT_RIGHT (register, 0x8, 4) , (const, 0x3, 4), (register, 0x8, 4) INT_ADD (register, 0x8, 4) , (register, 0x0, 4), (register, 0x0, 4) SUBPIECE (register, 0x0, 8) , (const, 0x0, 4), (register, 0x0, 8) CAST (unique, 0x1000100b, 8), (unique, 0x1000100b, 8) INT_SUB (unique, 0x10000ffb, 8) , (unique, 0x10001003, 8), (unique, 0x10001003, 8) CAST (register, 0x38, 8), (unique, 0x10000ffb, 8) CAST (register, 0xb8, 8), (register, 0x38, 8) CAST (unique, 0x10000ff3, 8), (unique, 0x10000ff3, 8) INT_AND (unique, 0x10000feb, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x10000feb, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0x1000095d, 8) , (const, 0x6, 8) , (const, 0x1, 8), (unique, 0x1000095d, 8) PTRSUB (register, 0xb8, 8) , (const, 0x2, 8)]
[(ram, 0x4c87a0, 4) MULTIEQUAL (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4)]
[(ram, 0x4c8790, 4) MULTIEQUAL (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4)]
[(ram, 0x4c8718, 8) MULTIEQUAL (ram, 0x4c8718, 8) , (ram, 0x4c8718, 8)]
[(ram, 0x4c5f64, 4) MULTIEQUAL (ram, 0x4c5f64, 4) , (ram, 0x4c5f64, 4)]
[(ram, 0x4c5f60, 4) MULTIEQUAL (ram, 0x4c5f60, 4) , (ram, 0x4c5f60, 4)]
[(ram, 0x4c5f58, 8) MULTIEQUAL (ram, 0x4c5f58, 8) , (ram, 0x4c5f58, 8)]
[(ram, 0x4c5f50, 8) MULTIEQUAL (ram, 0x4c5f50, 8) , (ram, 0x4c5f50, 8)]
[(ram, 0x4c5f44, 4) MULTIEQUAL (ram, 0x4c5f44, 4) , (ram, 0x4c5f44, 4)]
[(ram, 0x4c5f40, 4) MULTIEQUAL (ram, 0x4c5f40, 4) , (ram, 0x4c5f40, 4)]
[(ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(register, 0x38, 8) MULTIEQUAL (unique, 0x10000d71, 8) , (unique, 0x10000d79, 8)]
[(register, 0x30, 8) MULTIEQUAL (unique, 0x10000d61, 8) , (unique, 0x10000d69, 8)]
[ ---  CBRANCH (ram, 0x1eea50, 1) , (unique, 0xd300, 1), (unique, 0xd300, 1) INT_NOTEQUAL (register, 0x8, 8) , (const, 0x0, 8), (register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x838, 4)]
[(ram, 0x4c5f40, 4) INDIRECT (ram, 0x4c5f40, 4) , (const, 0x838, 4)]
[(ram, 0x4c5f44, 4) INDIRECT (ram, 0x4c5f44, 4) , (const, 0x838, 4)]
[(ram, 0x4c5f50, 8) INDIRECT (ram, 0x4c5f50, 8) , (const, 0x838, 4)]
[(ram, 0x4c5f58, 8) INDIRECT (ram, 0x4c5f58, 8) , (const, 0x838, 4)]
[(ram, 0x4c5f60, 4) INDIRECT (ram, 0x4c5f60, 4) , (const, 0x838, 4)]
[(ram, 0x4c5f64, 4) INDIRECT (ram, 0x4c5f64, 4) , (const, 0x838, 4)]
[(ram, 0x4c8718, 8) INDIRECT (ram, 0x4c8718, 8) , (const, 0x838, 4)]
[(ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x838, 4)]
[(ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x838, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x38, 8) , (unique, 0xae00, 8), (unique, 0xae00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10001033, 8), (unique, 0x10001033, 8) CAST (register, 0x30, 8)]
[(unique, 0x10000d69, 8) COPY (register, 0x30, 8), (register, 0x30, 8) CAST (unique, 0x1000102b, 8), (unique, 0x1000102b, 8) PTRADD (unique, 0x100009ad, 8) , (const, 0x6, 8) , (const, 0x1, 8), (unique, 0x100009ad, 8) PTRSUB (unique, 0x100009a5, 8) , (const, 0x2, 8), (unique, 0x100009a5, 8) PTRADD (register, 0x30, 8) , (unique, 0x10000995, 8) , (const, 0x10, 8), (unique, 0x10000995, 8) INT_2COMP (unique, 0xac80, 8), (unique, 0xac80, 8) INT_ZEXT (register, 0x20a, 1)]
[(unique, 0x10000d79, 8) COPY (register, 0x38, 8), (register, 0x38, 8) PTRADD (register, 0x38, 8) , (unique, 0x1000097d, 8) , (const, 0x8, 8), (unique, 0x1000097d, 8) INT_ADD (unique, 0x10000975, 8) , (const, 0x1, 8), (unique, 0x10000975, 8) INT_MULT (unique, 0xb880, 8) , (const, 0xfffffffffffffffe, 8), (unique, 0xb880, 8) INT_ZEXT (register, 0x20a, 1)]
[(register, 0x8, 8) INT_SUB (register, 0x8, 8) , (const, 0x1, 8)]
[ ---  BRANCH (ram, 0x1eea4d, 1)]
[ ---  CBRANCH (ram, 0x1eef90, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x1000039c, 1) , (const, 0x0, 1), (unique, 0x1000039c, 1) INT_AND (unique, 0xbb00, 1) , (const, 0x4, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001043, 8) , (unique, 0xbc80, 4), (unique, 0x10001043, 8) CAST (register, 0xb8, 8), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x1000103b, 8), (unique, 0x1000103b, 8) CAST (unique, 0x3100, 8)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x7c4, 4), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x7b9, 4)]
[(ram, 0x4c5f40, 4) INDIRECT (ram, 0x4c5f40, 4) , (const, 0x7c4, 4), (ram, 0x4c5f40, 4) INDIRECT (ram, 0x4c5f40, 4) , (const, 0x7b9, 4)]
[(ram, 0x4c5f44, 4) INDIRECT (ram, 0x4c5f44, 4) , (const, 0x7c4, 4), (ram, 0x4c5f44, 4) INDIRECT (ram, 0x4c5f44, 4) , (const, 0x7b9, 4)]
[(ram, 0x4c5f50, 8) INDIRECT (ram, 0x4c5f50, 8) , (const, 0x7c4, 4), (ram, 0x4c5f50, 8) INDIRECT (ram, 0x4c5f50, 8) , (const, 0x7b9, 4)]
[(ram, 0x4c5f58, 8) INDIRECT (ram, 0x4c5f58, 8) , (const, 0x7c4, 4), (ram, 0x4c5f58, 8) INDIRECT (ram, 0x4c5f58, 8) , (const, 0x7b9, 4)]
[(ram, 0x4c5f60, 4) INDIRECT (ram, 0x4c5f60, 4) , (const, 0x7c4, 4), (ram, 0x4c5f60, 4) INDIRECT (ram, 0x4c5f60, 4) , (const, 0x7b9, 4)]
[(ram, 0x4c5f64, 4) INDIRECT (ram, 0x4c5f64, 4) , (const, 0x7c4, 4), (ram, 0x4c5f64, 4) INDIRECT (ram, 0x4c5f64, 4) , (const, 0x7b9, 4)]
[(ram, 0x4c8718, 8) INDIRECT (ram, 0x4c8718, 8) , (const, 0x7c4, 4), (ram, 0x4c8718, 8) INDIRECT (ram, 0x4c8718, 8) , (const, 0x7b9, 4)]
[(ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x7c4, 4), (ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x7b9, 4)]
[(ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x7c4, 4), (ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x7b9, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000106b, 8) , (unique, 0xbc80, 4), (unique, 0x1000106b, 8) CAST (unique, 0x3a00, 8), (unique, 0x3a00, 8) PTRADD (unique, 0x10000b3d, 8) , (unique, 0x10001063, 8) , (const, 0x1, 8), (unique, 0x10001063, 8) CAST (unique, 0x10000b35, 8), (unique, 0x10000b3d, 8) PTRSUB (register, 0xb8, 8) , (const, 0x2, 8), (unique, 0x10000b35, 8) PTRADD (unique, 0x10000bd8, 8) , (register, 0x8, 8) , (const, 0x1, 8), (unique, 0x10000bd8, 8) PTRSUB (const, 0x0, 8) , (const, 0xfffffffffffffffa, 8), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) CAST (unique, 0x1000105b, 8), (unique, 0x1000105b, 8) INT_ADD (unique, 0x3880, 8) , (register, 0x8, 8), (unique, 0x3880, 8) INT_ADD (unique, 0x1000104b, 8) , (unique, 0x10001053, 8), (unique, 0x10001053, 8) CAST (register, 0xb8, 8), (unique, 0x1000104b, 8) CAST (unique, 0x10000535, 8), (unique, 0x10000535, 8) PTRSUB (const, 0x0, 8) , (const, 0xffffffffffffffcc, 8), (register, 0x8, 8) INT_ZEXT (register, 0x8, 4)]
[ ---  BRANCH (ram, 0x1ee80b, 1)]
[ ---  CBRANCH (ram, 0x1eece8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x8, 4) , (const, 0x0, 4), (register, 0x8, 4) INT_ZEXT (unique, 0xbb00, 1)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x7a3, 4)]
[(ram, 0x4c5f40, 4) INDIRECT (ram, 0x4c5f40, 4) , (const, 0x7a3, 4)]
[(ram, 0x4c5f44, 4) INDIRECT (ram, 0x4c5f44, 4) , (const, 0x7a3, 4)]
[(ram, 0x4c5f50, 8) INDIRECT (ram, 0x4c5f50, 8) , (const, 0x7a3, 4)]
[(ram, 0x4c5f58, 8) INDIRECT (ram, 0x4c5f58, 8) , (const, 0x7a3, 4)]
[(ram, 0x4c5f60, 4) INDIRECT (ram, 0x4c5f60, 4) , (const, 0x7a3, 4)]
[(ram, 0x4c5f64, 4) INDIRECT (ram, 0x4c5f64, 4) , (const, 0x7a3, 4)]
[(ram, 0x4c8718, 8) INDIRECT (ram, 0x4c8718, 8) , (const, 0x7a3, 4)]
[(ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x7a3, 4)]
[(ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x7a3, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000107b, 8) , (unique, 0xbb00, 1), (unique, 0x1000107b, 8) CAST (unique, 0x10000a85, 8), (unique, 0x10000a85, 8) PTRSUB (register, 0xb8, 8) , (const, 0x0, 8), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x10001073, 8), (unique, 0x10001073, 8) CAST (unique, 0x10000a7d, 8), (unique, 0x10000a7d, 8) PTRSUB (unique, 0x3100, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x1ee80b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x58c00, 1) , (const, 0x0, 1), (unique, 0x58c00, 1) INT_AND (unique, 0xbb00, 1) , (const, 0x2, 1)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x7b1, 4)]
[(ram, 0x4c5f40, 4) INDIRECT (ram, 0x4c5f40, 4) , (const, 0x7b1, 4)]
[(ram, 0x4c5f44, 4) INDIRECT (ram, 0x4c5f44, 4) , (const, 0x7b1, 4)]
[(ram, 0x4c5f50, 8) INDIRECT (ram, 0x4c5f50, 8) , (const, 0x7b1, 4)]
[(ram, 0x4c5f58, 8) INDIRECT (ram, 0x4c5f58, 8) , (const, 0x7b1, 4)]
[(ram, 0x4c5f60, 4) INDIRECT (ram, 0x4c5f60, 4) , (const, 0x7b1, 4)]
[(ram, 0x4c5f64, 4) INDIRECT (ram, 0x4c5f64, 4) , (const, 0x7b1, 4)]
[(ram, 0x4c8718, 8) INDIRECT (ram, 0x4c8718, 8) , (const, 0x7b1, 4)]
[(ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x7b1, 4)]
[(ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x7b1, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000109b, 8) , (unique, 0xbc00, 2), (unique, 0x1000109b, 8) CAST (unique, 0x3a00, 8), (unique, 0x3a00, 8) PTRADD (unique, 0x10000a9d, 8) , (unique, 0x10000a95, 8) , (const, 0x1, 8), (unique, 0x10000a9d, 8) PTRSUB (register, 0xb8, 8) , (const, 0x2, 8), (unique, 0x10000a95, 8) INT_SUB (register, 0x8, 8) , (const, 0x4, 8), (unique, 0xbc00, 2) LOAD (const, 0x1b1, 4) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) CAST (unique, 0x10001093, 8), (unique, 0x10001093, 8) INT_ADD (unique, 0x3880, 8) , (register, 0x8, 8), (unique, 0x3880, 8) INT_ADD (unique, 0x10001083, 8) , (unique, 0x1000108b, 8), (unique, 0x1000108b, 8) CAST (register, 0xb8, 8), (unique, 0x10001083, 8) CAST (unique, 0x1000053d, 8), (unique, 0x1000053d, 8) PTRSUB (const, 0x0, 8) , (const, 0xffffffffffffffce, 8), (register, 0x8, 8) INT_ZEXT (register, 0x8, 4)]
[ ---  BRANCH (ram, 0x1ee80b, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0xbb00, 1), (unique, 0x3100, 8) PTRADD (unique, 0x10000755, 8) , (const, 0xa, 8) , (const, 0x1, 8), (unique, 0x10000755, 8) PTRSUB (unique, 0x1000074d, 8) , (const, 0x2, 8), (unique, 0x1000074d, 8) PTRADD (register, 0xb8, 8) , (const, 0x1, 8) , (const, 0x10, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0xbb00, 1), (unique, 0x3100, 8) PTRADD (unique, 0x10000775, 8) , (const, 0xb, 8) , (const, 0x1, 8), (unique, 0x10000775, 8) PTRSUB (unique, 0x1000076d, 8) , (const, 0x2, 8), (unique, 0x1000076d, 8) PTRADD (register, 0xb8, 8) , (const, 0x1, 8) , (const, 0x10, 8), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0x10000735, 8) , (const, 0xb, 8) , (const, 0x1, 8), (unique, 0x10000735, 8) PTRSUB (unique, 0x1000072d, 8) , (const, 0x2, 8), (unique, 0x1000072d, 8) PTRADD (register, 0xb8, 8) , (const, 0xfffffffffffffffe, 8) , (const, 0x10, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0xbb00, 1), (unique, 0x3100, 8) PTRADD (unique, 0x100007b5, 8) , (const, 0xc, 8) , (const, 0x1, 8), (unique, 0x100007b5, 8) PTRSUB (unique, 0x100007ad, 8) , (const, 0x2, 8), (unique, 0x100007ad, 8) PTRADD (register, 0xb8, 8) , (const, 0x1, 8) , (const, 0x10, 8), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0x10000795, 8) , (const, 0xc, 8) , (const, 0x1, 8), (unique, 0x10000795, 8) PTRSUB (unique, 0x1000078d, 8) , (const, 0x2, 8), (unique, 0x1000078d, 8) PTRADD (register, 0xb8, 8) , (const, 0xfffffffffffffffe, 8) , (const, 0x10, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0xbb00, 1), (unique, 0x3100, 8) PTRADD (unique, 0x100007f5, 8) , (const, 0xd, 8) , (const, 0x1, 8), (unique, 0x100007f5, 8) PTRSUB (unique, 0x100007ed, 8) , (const, 0x2, 8), (unique, 0x100007ed, 8) PTRADD (register, 0xb8, 8) , (const, 0x1, 8) , (const, 0x10, 8), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0x100007d5, 8) , (const, 0xd, 8) , (const, 0x1, 8), (unique, 0x100007d5, 8) PTRSUB (unique, 0x100007cd, 8) , (const, 0x2, 8), (unique, 0x100007cd, 8) PTRADD (register, 0xb8, 8) , (const, 0xfffffffffffffffe, 8) , (const, 0x10, 8)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x794, 4), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x78d, 4), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x786, 4), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x77f, 4), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x77c, 4), (ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(ram, 0x4c5f40, 4) INDIRECT (ram, 0x4c5f40, 4) , (const, 0x794, 4), (ram, 0x4c5f40, 4) INDIRECT (ram, 0x4c5f40, 4) , (const, 0x78d, 4), (ram, 0x4c5f40, 4) INDIRECT (ram, 0x4c5f40, 4) , (const, 0x786, 4), (ram, 0x4c5f40, 4) INDIRECT (ram, 0x4c5f40, 4) , (const, 0x77f, 4), (ram, 0x4c5f40, 4) INDIRECT (ram, 0x4c5f40, 4) , (const, 0x77c, 4), (ram, 0x4c5f40, 4) MULTIEQUAL (ram, 0x4c5f40, 4) , (ram, 0x4c5f40, 4) , (ram, 0x4c5f40, 4) , (ram, 0x4c5f40, 4) , (ram, 0x4c5f40, 4)]
[(ram, 0x4c5f44, 4) INDIRECT (ram, 0x4c5f44, 4) , (const, 0x794, 4), (ram, 0x4c5f44, 4) INDIRECT (ram, 0x4c5f44, 4) , (const, 0x78d, 4), (ram, 0x4c5f44, 4) INDIRECT (ram, 0x4c5f44, 4) , (const, 0x786, 4), (ram, 0x4c5f44, 4) INDIRECT (ram, 0x4c5f44, 4) , (const, 0x77f, 4), (ram, 0x4c5f44, 4) INDIRECT (ram, 0x4c5f44, 4) , (const, 0x77c, 4), (ram, 0x4c5f44, 4) MULTIEQUAL (ram, 0x4c5f44, 4) , (ram, 0x4c5f44, 4) , (ram, 0x4c5f44, 4) , (ram, 0x4c5f44, 4) , (ram, 0x4c5f44, 4)]
[(ram, 0x4c5f50, 8) INDIRECT (ram, 0x4c5f50, 8) , (const, 0x794, 4), (ram, 0x4c5f50, 8) INDIRECT (ram, 0x4c5f50, 8) , (const, 0x78d, 4), (ram, 0x4c5f50, 8) INDIRECT (ram, 0x4c5f50, 8) , (const, 0x786, 4), (ram, 0x4c5f50, 8) INDIRECT (ram, 0x4c5f50, 8) , (const, 0x77f, 4), (ram, 0x4c5f50, 8) INDIRECT (ram, 0x4c5f50, 8) , (const, 0x77c, 4), (ram, 0x4c5f50, 8) MULTIEQUAL (ram, 0x4c5f50, 8) , (ram, 0x4c5f50, 8) , (ram, 0x4c5f50, 8) , (ram, 0x4c5f50, 8) , (ram, 0x4c5f50, 8)]
[(ram, 0x4c5f58, 8) INDIRECT (ram, 0x4c5f58, 8) , (const, 0x794, 4), (ram, 0x4c5f58, 8) INDIRECT (ram, 0x4c5f58, 8) , (const, 0x78d, 4), (ram, 0x4c5f58, 8) INDIRECT (ram, 0x4c5f58, 8) , (const, 0x786, 4), (ram, 0x4c5f58, 8) INDIRECT (ram, 0x4c5f58, 8) , (const, 0x77f, 4), (ram, 0x4c5f58, 8) INDIRECT (ram, 0x4c5f58, 8) , (const, 0x77c, 4), (ram, 0x4c5f58, 8) MULTIEQUAL (ram, 0x4c5f58, 8) , (ram, 0x4c5f58, 8) , (ram, 0x4c5f58, 8) , (ram, 0x4c5f58, 8) , (ram, 0x4c5f58, 8)]
[(ram, 0x4c5f60, 4) INDIRECT (ram, 0x4c5f60, 4) , (const, 0x794, 4), (ram, 0x4c5f60, 4) INDIRECT (ram, 0x4c5f60, 4) , (const, 0x78d, 4), (ram, 0x4c5f60, 4) INDIRECT (ram, 0x4c5f60, 4) , (const, 0x786, 4), (ram, 0x4c5f60, 4) INDIRECT (ram, 0x4c5f60, 4) , (const, 0x77f, 4), (ram, 0x4c5f60, 4) INDIRECT (ram, 0x4c5f60, 4) , (const, 0x77c, 4), (ram, 0x4c5f60, 4) MULTIEQUAL (ram, 0x4c5f60, 4) , (ram, 0x4c5f60, 4) , (ram, 0x4c5f60, 4) , (ram, 0x4c5f60, 4) , (ram, 0x4c5f60, 4)]
[(ram, 0x4c5f64, 4) INDIRECT (ram, 0x4c5f64, 4) , (const, 0x794, 4), (ram, 0x4c5f64, 4) INDIRECT (ram, 0x4c5f64, 4) , (const, 0x78d, 4), (ram, 0x4c5f64, 4) INDIRECT (ram, 0x4c5f64, 4) , (const, 0x786, 4), (ram, 0x4c5f64, 4) INDIRECT (ram, 0x4c5f64, 4) , (const, 0x77f, 4), (ram, 0x4c5f64, 4) INDIRECT (ram, 0x4c5f64, 4) , (const, 0x77c, 4), (ram, 0x4c5f64, 4) MULTIEQUAL (ram, 0x4c5f64, 4) , (ram, 0x4c5f64, 4) , (ram, 0x4c5f64, 4) , (ram, 0x4c5f64, 4) , (ram, 0x4c5f64, 4)]
[(ram, 0x4c8718, 8) INDIRECT (ram, 0x4c8718, 8) , (const, 0x794, 4), (ram, 0x4c8718, 8) INDIRECT (ram, 0x4c8718, 8) , (const, 0x78d, 4), (ram, 0x4c8718, 8) INDIRECT (ram, 0x4c8718, 8) , (const, 0x786, 4), (ram, 0x4c8718, 8) INDIRECT (ram, 0x4c8718, 8) , (const, 0x77f, 4), (ram, 0x4c8718, 8) INDIRECT (ram, 0x4c8718, 8) , (const, 0x77c, 4), (ram, 0x4c8718, 8) MULTIEQUAL (ram, 0x4c8718, 8) , (ram, 0x4c8718, 8) , (ram, 0x4c8718, 8) , (ram, 0x4c8718, 8) , (ram, 0x4c8718, 8)]
[(ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x794, 4), (ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x78d, 4), (ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x786, 4), (ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x77f, 4), (ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x77c, 4), (ram, 0x4c8790, 4) MULTIEQUAL (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4)]
[(ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x794, 4), (ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x78d, 4), (ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x786, 4), (ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x77f, 4), (ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x77c, 4), (ram, 0x4c87a0, 4) MULTIEQUAL (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100010ab, 8) , (unique, 0xbc80, 4), (unique, 0x100010ab, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb8, 8) , (const, 0x2, 8) , (const, 0x10, 8), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100010a3, 8), (unique, 0x100010a3, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb8, 8) , (const, 0xffffffffffffffff, 8) , (const, 0x10, 8)]
[(unique, 0x10000dc1, 8) COPY (register, 0xb0, 8)]
[ ---  BRANCH (ram, 0x1ee6b7, 1)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 4) MULTIEQUAL (stack, 0xfffffffffffffef0, 4) , (stack, 0xfffffffffffffef0, 4) , (stack, 0xfffffffffffffef0, 4) , (stack, 0xfffffffffffffef0, 4) , (stack, 0xfffffffffffffef0, 4)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffecc, 4) MULTIEQUAL (stack, 0xfffffffffffffecc, 4) , (stack, 0xfffffffffffffecc, 4) , (stack, 0xfffffffffffffecc, 4) , (stack, 0xfffffffffffffecc, 4) , (stack, 0xfffffffffffffecc, 4)]
[(stack, 0xfffffffffffffecb, 1) MULTIEQUAL (stack, 0xfffffffffffffecb, 1) , (stack, 0xfffffffffffffecb, 1) , (stack, 0xfffffffffffffecb, 1) , (stack, 0xfffffffffffffecb, 1) , (stack, 0xfffffffffffffecb, 1)]
[(stack, 0xfffffffffffffeca, 1) MULTIEQUAL (stack, 0xfffffffffffffeca, 1) , (stack, 0xfffffffffffffeca, 1) , (stack, 0xfffffffffffffeca, 1) , (stack, 0xfffffffffffffeca, 1) , (stack, 0xfffffffffffffeca, 1)]
[(stack, 0xfffffffffffffec0, 8) MULTIEQUAL (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8)]
[(stack, 0xfffffffffffffebc, 4) MULTIEQUAL (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4)]
[(stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(stack, 0xfffffffffffffea8, 8) MULTIEQUAL (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8)]
[(stack, 0xfffffffffffffea0, 8) MULTIEQUAL (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8)]
[(stack, 0xfffffffffffffe98, 8) MULTIEQUAL (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8)]
[(stack, 0xfffffffffffffe90, 8) MULTIEQUAL (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8)]
[(stack, 0xfffffffffffffe88, 8) MULTIEQUAL (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8)]
[(stack, 0xfffffffffffffe84, 4) MULTIEQUAL (stack, 0xfffffffffffffe84, 4) , (stack, 0xfffffffffffffe84, 4) , (stack, 0xfffffffffffffe84, 4) , (stack, 0xfffffffffffffe84, 4) , (stack, 0xfffffffffffffe84, 4)]
[(stack, 0xfffffffffffffe80, 4) MULTIEQUAL (stack, 0xfffffffffffffe80, 4) , (stack, 0xfffffffffffffe80, 4) , (stack, 0xfffffffffffffe80, 4) , (stack, 0xfffffffffffffe80, 4) , (stack, 0xfffffffffffffe80, 4)]
[(stack, 0xfffffffffffffe78, 8) MULTIEQUAL (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8)]
[(stack, 0xfffffffffffffe70, 8) MULTIEQUAL (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8)]
[(stack, 0xfffffffffffffe68, 8) MULTIEQUAL (stack, 0xfffffffffffffe68, 8) , (stack, 0xfffffffffffffe68, 8) , (stack, 0xfffffffffffffe68, 8) , (stack, 0xfffffffffffffe68, 8) , (stack, 0xfffffffffffffe68, 8)]
[(stack, 0xfffffffffffffe60, 8) MULTIEQUAL (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8)]
[(stack, 0xfffffffffffffe5c, 4) MULTIEQUAL (stack, 0xfffffffffffffe5c, 4) , (stack, 0xfffffffffffffe5c, 4) , (stack, 0xfffffffffffffe5c, 4) , (stack, 0xfffffffffffffe5c, 4) , (stack, 0xfffffffffffffe5c, 4)]
[(ram, 0x4c87a0, 4) MULTIEQUAL (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4)]
[(ram, 0x4c8790, 4) MULTIEQUAL (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4)]
[(ram, 0x4c8718, 8) MULTIEQUAL (ram, 0x4c8718, 8) , (ram, 0x4c8718, 8) , (ram, 0x4c8718, 8) , (ram, 0x4c8718, 8) , (ram, 0x4c8718, 8)]
[(ram, 0x4c5f64, 4) MULTIEQUAL (ram, 0x4c5f64, 4) , (ram, 0x4c5f64, 4) , (ram, 0x4c5f64, 4) , (ram, 0x4c5f64, 4) , (ram, 0x4c5f64, 4)]
[(ram, 0x4c5f60, 4) MULTIEQUAL (ram, 0x4c5f60, 4) , (ram, 0x4c5f60, 4) , (ram, 0x4c5f60, 4) , (ram, 0x4c5f60, 4) , (ram, 0x4c5f60, 4)]
[(ram, 0x4c5f58, 8) MULTIEQUAL (ram, 0x4c5f58, 8) , (ram, 0x4c5f58, 8) , (ram, 0x4c5f58, 8) , (ram, 0x4c5f58, 8) , (ram, 0x4c5f58, 8)]
[(ram, 0x4c5f50, 8) MULTIEQUAL (ram, 0x4c5f50, 8) , (ram, 0x4c5f50, 8) , (ram, 0x4c5f50, 8) , (ram, 0x4c5f50, 8) , (ram, 0x4c5f50, 8)]
[(ram, 0x4c5f44, 4) MULTIEQUAL (ram, 0x4c5f44, 4) , (ram, 0x4c5f44, 4) , (ram, 0x4c5f44, 4) , (ram, 0x4c5f44, 4) , (ram, 0x4c5f44, 4)]
[(ram, 0x4c5f40, 4) MULTIEQUAL (ram, 0x4c5f40, 4) , (ram, 0x4c5f40, 4) , (ram, 0x4c5f40, 4) , (ram, 0x4c5f40, 4) , (ram, 0x4c5f40, 4)]
[(ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(register, 0x20a, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1) , (register, 0x20a, 1) , (register, 0x20a, 1) , (register, 0x20a, 1)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb8, 8) MULTIEQUAL (register, 0xb8, 8) , (register, 0xb8, 8) , (register, 0xb8, 8) , (register, 0xb8, 8) , (register, 0xb8, 8)]
[(register, 0xa0, 4) MULTIEQUAL (register, 0xa0, 4) , (register, 0xa0, 4) , (register, 0xa0, 4) , (register, 0xa0, 4) , (register, 0xa0, 4)]
[(register, 0x18, 8) MULTIEQUAL (register, 0x18, 8) , (register, 0x18, 8) , (register, 0x18, 8) , (register, 0x18, 8) , (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x1ee6dd, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0xb0, 8) , (const, 0x20, 8), (register, 0xb0, 8) MULTIEQUAL (unique, 0x10000da1, 8) , (unique, 0x10000da9, 8) , (unique, 0x10000da9, 8) , (unique, 0x10000da9, 8) , (unique, 0x10000dc1, 8)]
[ ---  CBRANCH (ram, 0x1ef012, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xfffffffffffffec0, 8) , (const, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100010b3, 8) , (unique, 0x100004d5, 8), (unique, 0x100010b3, 8) CAST (register, 0x20, 8), (unique, 0x100004d5, 8) PTRSUB (const, 0x0, 8) , (const, 0x1ef031, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(stack, 0xfffffffffffffe5c, 4) INDIRECT (stack, 0xfffffffffffffe5c, 4) , (const, 0x58a, 4), (stack, 0xfffffffffffffe5c, 4) INDIRECT (stack, 0xfffffffffffffe5c, 4) , (const, 0x589, 4)]
[(stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x58a, 4), (stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x589, 4)]
[(stack, 0xfffffffffffffe68, 8) INDIRECT (stack, 0xfffffffffffffe68, 8) , (const, 0x58a, 4), (stack, 0xfffffffffffffe68, 8) INDIRECT (stack, 0xfffffffffffffe68, 8) , (const, 0x589, 4)]
[(stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0x58a, 4), (stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0x589, 4)]
[(stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0x58a, 4), (stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0x589, 4)]
[(stack, 0xfffffffffffffe80, 4) INDIRECT (stack, 0xfffffffffffffe80, 4) , (const, 0x58a, 4), (stack, 0xfffffffffffffe80, 4) INDIRECT (stack, 0xfffffffffffffe80, 4) , (const, 0x589, 4)]
[(stack, 0xfffffffffffffe84, 4) INDIRECT (stack, 0xfffffffffffffe84, 4) , (const, 0x58a, 4), (stack, 0xfffffffffffffe84, 4) INDIRECT (stack, 0xfffffffffffffe84, 4) , (const, 0x589, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x58a, 4), (stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x589, 4)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x58a, 4), (stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x589, 4)]
[(stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x58a, 4), (stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x589, 4)]
[(stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x58a, 4), (stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x589, 4)]
[(stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x58a, 4), (stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x589, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x58a, 4), (stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x589, 4)]
[(stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x58a, 4), (stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x589, 4)]
[(stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x58a, 4), (stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x589, 4)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x58a, 4), (stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x589, 4)]
[(stack, 0xfffffffffffffeca, 1) INDIRECT (stack, 0xfffffffffffffeca, 1) , (const, 0x58a, 4), (stack, 0xfffffffffffffeca, 1) INDIRECT (stack, 0xfffffffffffffeca, 1) , (const, 0x589, 4)]
[(stack, 0xfffffffffffffecb, 1) INDIRECT (stack, 0xfffffffffffffecb, 1) , (const, 0x58a, 4), (stack, 0xfffffffffffffecb, 1) INDIRECT (stack, 0xfffffffffffffecb, 1) , (const, 0x589, 4)]
[(stack, 0xfffffffffffffecc, 4) INDIRECT (stack, 0xfffffffffffffecc, 4) , (const, 0x58a, 4), (stack, 0xfffffffffffffecc, 4) INDIRECT (stack, 0xfffffffffffffecc, 4) , (const, 0x589, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x58a, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x589, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x58a, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x589, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x58a, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x589, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x58a, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x589, 4)]
[(stack, 0xfffffffffffffef0, 4) INDIRECT (stack, 0xfffffffffffffef0, 4) , (const, 0x58a, 4), (stack, 0xfffffffffffffef0, 4) INDIRECT (stack, 0xfffffffffffffef0, 4) , (const, 0x589, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x58a, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x589, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x58a, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x589, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x58a, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x589, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x58a, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x589, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x58a, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x589, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x58a, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x589, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x58a, 4), (stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x589, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x58a, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x589, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x58a, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x589, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x58a, 4), (stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x589, 4)]
[ ---  CALL (ram, 0x12dc40, 8) , (unique, 0x100004e5, 8) , (unique, 0x100004f5, 8) , (const, 0xa3e, 4) , (unique, 0x1000050d, 8), (unique, 0x1000050d, 8) COPY (const, 0x291d10, 8), (unique, 0x100004f5, 8) COPY (const, 0x291b78, 8), (unique, 0x100004e5, 8) COPY (const, 0x28de3f, 8)]
[(ram, 0x4c2e78, 8) COPY (ram, 0x4c2e78, 8), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x58a, 4)]
[(ram, 0x4c5f40, 4) COPY (ram, 0x4c5f40, 4), (ram, 0x4c5f40, 4) INDIRECT (ram, 0x4c5f40, 4) , (const, 0x58a, 4)]
[(ram, 0x4c5f44, 4) COPY (ram, 0x4c5f44, 4), (ram, 0x4c5f44, 4) INDIRECT (ram, 0x4c5f44, 4) , (const, 0x58a, 4)]
[(ram, 0x4c5f50, 8) COPY (ram, 0x4c5f50, 8), (ram, 0x4c5f50, 8) INDIRECT (ram, 0x4c5f50, 8) , (const, 0x58a, 4)]
[(ram, 0x4c5f58, 8) COPY (ram, 0x4c5f58, 8), (ram, 0x4c5f58, 8) INDIRECT (ram, 0x4c5f58, 8) , (const, 0x58a, 4)]
[(ram, 0x4c5f60, 4) COPY (ram, 0x4c5f60, 4), (ram, 0x4c5f60, 4) INDIRECT (ram, 0x4c5f60, 4) , (const, 0x58a, 4)]
[(ram, 0x4c5f64, 4) COPY (ram, 0x4c5f64, 4), (ram, 0x4c5f64, 4) INDIRECT (ram, 0x4c5f64, 4) , (const, 0x58a, 4)]
[(ram, 0x4c8718, 8) COPY (ram, 0x4c8718, 8), (ram, 0x4c8718, 8) INDIRECT (ram, 0x4c8718, 8) , (const, 0x58a, 4)]
[(ram, 0x4c8790, 4) COPY (ram, 0x4c8790, 4), (ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x58a, 4)]
[(ram, 0x4c87a0, 4) COPY (ram, 0x4c87a0, 4), (ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x58a, 4)]
[ ---  RETURN (const, 0x1, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x354, 4)]
[(ram, 0x4c5f40, 4) INDIRECT (ram, 0x4c5f40, 4) , (const, 0x354, 4)]
[(ram, 0x4c5f44, 4) INDIRECT (ram, 0x4c5f44, 4) , (const, 0x354, 4)]
[(ram, 0x4c5f50, 8) INDIRECT (ram, 0x4c5f50, 8) , (const, 0x354, 4)]
[(ram, 0x4c5f58, 8) INDIRECT (ram, 0x4c5f58, 8) , (const, 0x354, 4)]
[(ram, 0x4c5f60, 4) INDIRECT (ram, 0x4c5f60, 4) , (const, 0x354, 4)]
[(ram, 0x4c5f64, 4) INDIRECT (ram, 0x4c5f64, 4) , (const, 0x354, 4)]
[(ram, 0x4c8718, 8) INDIRECT (ram, 0x4c8718, 8) , (const, 0x354, 4)]
[(ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x354, 4)]
[(ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x354, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (const, 0x0, 8), (unique, 0x3100, 8) PTRSUB (register, 0xb0, 8) , (const, 0x20, 8)]
[(stack, 0xfffffffffffffec0, 8) COPY (unique, 0xbd80, 8)]
[(stack, 0xfffffffffffffec0, 8) MULTIEQUAL (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8)]
[(ram, 0x4c87a0, 4) MULTIEQUAL (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4)]
[(ram, 0x4c8790, 4) MULTIEQUAL (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4)]
[(ram, 0x4c8718, 8) MULTIEQUAL (ram, 0x4c8718, 8) , (ram, 0x4c8718, 8)]
[(ram, 0x4c5f64, 4) MULTIEQUAL (ram, 0x4c5f64, 4) , (ram, 0x4c5f64, 4)]
[(ram, 0x4c5f60, 4) MULTIEQUAL (ram, 0x4c5f60, 4) , (ram, 0x4c5f60, 4)]
[(ram, 0x4c5f58, 8) MULTIEQUAL (ram, 0x4c5f58, 8) , (ram, 0x4c5f58, 8)]
[(ram, 0x4c5f50, 8) MULTIEQUAL (ram, 0x4c5f50, 8) , (ram, 0x4c5f50, 8)]
[(ram, 0x4c5f44, 4) MULTIEQUAL (ram, 0x4c5f44, 4) , (ram, 0x4c5f44, 4)]
[(ram, 0x4c5f40, 4) MULTIEQUAL (ram, 0x4c5f40, 4) , (ram, 0x4c5f40, 4)]
[(ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(register, 0x18, 8) CAST (unique, 0x100010c3, 8), (unique, 0x100010c3, 8) INT_ADD (unique, 0x100010bb, 8) , (const, 0x1, 8), (unique, 0x100010bb, 8) CAST (unique, 0x10000c18, 8), (unique, 0x10000c18, 8) PTRSUB (register, 0x18, 8) , (const, 0x0, 8)]
[(register, 0xb8, 8) PTRADD (register, 0xb8, 8) , (const, 0x3, 8) , (const, 0x10, 8)]
[ ---  CBRANCH (ram, 0x1eea58, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0xb0, 8) , (const, 0x28, 8)]
[ ---  CBRANCH (ram, 0x1eea68, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xa0, 4) , (const, 0xffffffff, 4)]
[ ---  CALLOTHER (const, 0x5, 4)]
[(stack, 0xfffffffffffffec0, 8) COPY (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x1eea68, 1)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xfffffffffffffef0, 4) MULTIEQUAL (stack, 0xfffffffffffffef0, 4) , (stack, 0xfffffffffffffef0, 4) , (stack, 0xfffffffffffffef0, 4)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffecc, 4) MULTIEQUAL (stack, 0xfffffffffffffecc, 4) , (stack, 0xfffffffffffffecc, 4) , (stack, 0xfffffffffffffecc, 4)]
[(stack, 0xfffffffffffffecb, 1) MULTIEQUAL (stack, 0xfffffffffffffecb, 1) , (stack, 0xfffffffffffffecb, 1) , (stack, 0xfffffffffffffecb, 1)]
[(stack, 0xfffffffffffffeca, 1) MULTIEQUAL (stack, 0xfffffffffffffeca, 1) , (stack, 0xfffffffffffffeca, 1) , (stack, 0xfffffffffffffeca, 1)]
[(stack, 0xfffffffffffffec0, 8) MULTIEQUAL (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8)]
[(stack, 0xfffffffffffffebc, 4) MULTIEQUAL (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(stack, 0xfffffffffffffea0, 8) MULTIEQUAL (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8)]
[(stack, 0xfffffffffffffe90, 8) MULTIEQUAL (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8)]
[(stack, 0xfffffffffffffe84, 4) MULTIEQUAL (stack, 0xfffffffffffffe84, 4) , (stack, 0xfffffffffffffe84, 4) , (stack, 0xfffffffffffffe84, 4)]
[(stack, 0xfffffffffffffe80, 4) MULTIEQUAL (stack, 0xfffffffffffffe80, 4) , (stack, 0xfffffffffffffe80, 4) , (stack, 0xfffffffffffffe80, 4)]
[(stack, 0xfffffffffffffe78, 8) MULTIEQUAL (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8)]
[(stack, 0xfffffffffffffe70, 8) MULTIEQUAL (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8)]
[(stack, 0xfffffffffffffe68, 8) MULTIEQUAL (stack, 0xfffffffffffffe68, 8) , (stack, 0xfffffffffffffe68, 8) , (stack, 0xfffffffffffffe68, 8)]
[(stack, 0xfffffffffffffe60, 8) MULTIEQUAL (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8)]
[(stack, 0xfffffffffffffe5c, 4) MULTIEQUAL (stack, 0xfffffffffffffe5c, 4) , (stack, 0xfffffffffffffe5c, 4) , (stack, 0xfffffffffffffe5c, 4)]
[(ram, 0x4c87a0, 4) MULTIEQUAL (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4)]
[(ram, 0x4c8790, 4) MULTIEQUAL (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4)]
[(ram, 0x4c8718, 8) MULTIEQUAL (ram, 0x4c8718, 8) , (ram, 0x4c8718, 8) , (ram, 0x4c8718, 8)]
[(ram, 0x4c5f64, 4) MULTIEQUAL (ram, 0x4c5f64, 4) , (ram, 0x4c5f64, 4) , (ram, 0x4c5f64, 4)]
[(ram, 0x4c5f58, 8) MULTIEQUAL (ram, 0x4c5f58, 8) , (ram, 0x4c5f58, 8) , (ram, 0x4c5f58, 8)]
[(ram, 0x4c5f50, 8) MULTIEQUAL (ram, 0x4c5f50, 8) , (ram, 0x4c5f50, 8) , (ram, 0x4c5f50, 8)]
[(ram, 0x4c5f44, 4) MULTIEQUAL (ram, 0x4c5f44, 4) , (ram, 0x4c5f44, 4) , (ram, 0x4c5f44, 4)]
[(ram, 0x4c5f40, 4) MULTIEQUAL (ram, 0x4c5f40, 4) , (ram, 0x4c5f40, 4) , (ram, 0x4c5f40, 4)]
[(ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(unique, 0x10000cb9, 8) COPY (stack, 0xfffffffffffffea8, 8), (stack, 0xfffffffffffffea8, 8) MULTIEQUAL (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8)]
[(unique, 0x10000c91, 8) COPY (stack, 0xfffffffffffffe88, 8), (stack, 0xfffffffffffffe88, 8) MULTIEQUAL (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8)]
[(stack, 0xfffffffffffffef8, 8) COPY (stack, 0xfffffffffffffe98, 8), (stack, 0xfffffffffffffe98, 8) MULTIEQUAL (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8)]
[(stack, 0xffffffffffffff00, 4) COPY (stack, 0xfffffffffffffeb8, 4), (stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4)]
[ ---  CBRANCH (ram, 0x1eee78, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4c5f60, 4) , (const, 0x0, 4), (ram, 0x4c5f60, 4) MULTIEQUAL (ram, 0x4c5f60, 4) , (ram, 0x4c5f60, 4) , (ram, 0x4c5f60, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100010cb, 8) , (const, 0x1eee9e, 8), (unique, 0x100010cb, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x582, 4)]
[(ram, 0x4c5f44, 4) INDIRECT (ram, 0x4c5f44, 4) , (const, 0x582, 4)]
[(ram, 0x4c5f50, 8) INDIRECT (ram, 0x4c5f50, 8) , (const, 0x582, 4)]
[(ram, 0x4c5f58, 8) INDIRECT (ram, 0x4c5f58, 8) , (const, 0x582, 4)]
[(ram, 0x4c5f60, 4) INDIRECT (ram, 0x4c5f60, 4) , (const, 0x582, 4)]
[(ram, 0x4c5f64, 4) INDIRECT (ram, 0x4c5f64, 4) , (const, 0x582, 4)]
[(ram, 0x4c8718, 8) INDIRECT (ram, 0x4c8718, 8) , (const, 0x582, 4)]
[(ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x582, 4)]
[(ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x582, 4)]
[(stack, 0xfffffffffffffe5c, 4) INDIRECT (stack, 0xfffffffffffffe5c, 4) , (const, 0x582, 4), (stack, 0xfffffffffffffe5c, 4) INDIRECT (stack, 0xfffffffffffffe5c, 4) , (const, 0x581, 4)]
[(stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x582, 4), (stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x581, 4)]
[(stack, 0xfffffffffffffe68, 8) INDIRECT (stack, 0xfffffffffffffe68, 8) , (const, 0x582, 4), (stack, 0xfffffffffffffe68, 8) INDIRECT (stack, 0xfffffffffffffe68, 8) , (const, 0x581, 4)]
[(stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0x582, 4), (stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0x581, 4)]
[(stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0x582, 4), (stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0x581, 4)]
[(stack, 0xfffffffffffffe80, 4) INDIRECT (stack, 0xfffffffffffffe80, 4) , (const, 0x582, 4), (stack, 0xfffffffffffffe80, 4) INDIRECT (stack, 0xfffffffffffffe80, 4) , (const, 0x581, 4)]
[(stack, 0xfffffffffffffe84, 4) INDIRECT (stack, 0xfffffffffffffe84, 4) , (const, 0x582, 4), (stack, 0xfffffffffffffe84, 4) INDIRECT (stack, 0xfffffffffffffe84, 4) , (const, 0x581, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x582, 4), (stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x581, 4)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x582, 4), (stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x581, 4)]
[(stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x582, 4), (stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x581, 4)]
[(stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x582, 4), (stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x581, 4)]
[(stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x582, 4), (stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x581, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x582, 4), (stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x581, 4)]
[(stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x582, 4), (stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x581, 4)]
[(stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x582, 4), (stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x581, 4)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x582, 4), (stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x581, 4)]
[(stack, 0xfffffffffffffeca, 1) INDIRECT (stack, 0xfffffffffffffeca, 1) , (const, 0x582, 4), (stack, 0xfffffffffffffeca, 1) INDIRECT (stack, 0xfffffffffffffeca, 1) , (const, 0x581, 4)]
[(stack, 0xfffffffffffffecb, 1) INDIRECT (stack, 0xfffffffffffffecb, 1) , (const, 0x582, 4), (stack, 0xfffffffffffffecb, 1) INDIRECT (stack, 0xfffffffffffffecb, 1) , (const, 0x581, 4)]
[(stack, 0xfffffffffffffecc, 4) INDIRECT (stack, 0xfffffffffffffecc, 4) , (const, 0x582, 4), (stack, 0xfffffffffffffecc, 4) INDIRECT (stack, 0xfffffffffffffecc, 4) , (const, 0x581, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x582, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x581, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x582, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x581, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x582, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x581, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x582, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x581, 4)]
[(stack, 0xfffffffffffffef0, 4) INDIRECT (stack, 0xfffffffffffffef0, 4) , (const, 0x582, 4), (stack, 0xfffffffffffffef0, 4) INDIRECT (stack, 0xfffffffffffffef0, 4) , (const, 0x581, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x582, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x581, 4)]
[(stack, 0xffffffffffffff00, 4) INDIRECT (stack, 0xffffffffffffff00, 4) , (const, 0x582, 4), (stack, 0xffffffffffffff00, 4) INDIRECT (stack, 0xffffffffffffff00, 4) , (const, 0x581, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x582, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x581, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x582, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x581, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x582, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x581, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x582, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x581, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x582, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x581, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x582, 4), (stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x581, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x582, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x581, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x582, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x581, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x582, 4), (stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x581, 4)]
[ ---  CALL (ram, 0x1392c0, 8) , (unique, 0x10000cb9, 8) , (unique, 0x10000c91, 8) , (const, 0x8, 8) , (unique, 0x100004c5, 8) , (unique, 0x3200, 8), (unique, 0x100004c5, 8) PTRSUB (const, 0x0, 8) , (const, 0x1ed4d0, 8), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffef8, 8)]
[(unique, 0x10000e09, 4) COPY (ram, 0x4c5f40, 4), (ram, 0x4c5f40, 4) INDIRECT (ram, 0x4c5f40, 4) , (const, 0x582, 4)]
[ ---  BRANCH (ram, 0x1eeb39, 1)]
[ ---  CBRANCH (ram, 0x1eeaac, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4c87a0, 4) , (const, 0x0, 4)]
[ ---  CBRANCH (const, 0x4, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4c5f40, 4) , (const, 0x0, 4)]
[(ram, 0x4c5f40, 4) COPY (const, 0x1, 4)]
[ ---  CALLOTHER (const, 0x11, 4)]
[ ---  CBRANCH (const, 0x4, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4c5f40, 4) , (const, 0x0, 4)]
[(ram, 0x4c5f40, 4) COPY (const, 0x1, 4)]
[ ---  BRANCH (ram, 0x1eeacf, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100010d3, 8) , (const, 0x1eeac8, 8), (unique, 0x100010d3, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xffffffffffffff78, 8) , (const, 0x1, 8)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x55c, 4)]
[(ram, 0x4c5f40, 4) INDIRECT (ram, 0x4c5f40, 4) , (const, 0x55c, 4)]
[(ram, 0x4c5f44, 4) INDIRECT (ram, 0x4c5f44, 4) , (const, 0x55c, 4)]
[(ram, 0x4c5f50, 8) INDIRECT (ram, 0x4c5f50, 8) , (const, 0x55c, 4)]
[(ram, 0x4c5f58, 8) INDIRECT (ram, 0x4c5f58, 8) , (const, 0x55c, 4)]
[(ram, 0x4c5f60, 4) INDIRECT (ram, 0x4c5f60, 4) , (const, 0x55c, 4)]
[(ram, 0x4c5f64, 4) INDIRECT (ram, 0x4c5f64, 4) , (const, 0x55c, 4)]
[(ram, 0x4c8718, 8) INDIRECT (ram, 0x4c8718, 8) , (const, 0x55c, 4)]
[(ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x55c, 4)]
[(ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x55c, 4)]
[(stack, 0xfffffffffffffe5c, 4) INDIRECT (stack, 0xfffffffffffffe5c, 4) , (const, 0x55c, 4), (stack, 0xfffffffffffffe5c, 4) INDIRECT (stack, 0xfffffffffffffe5c, 4) , (const, 0x55b, 4)]
[(stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x55c, 4), (stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x55b, 4)]
[(stack, 0xfffffffffffffe68, 8) INDIRECT (stack, 0xfffffffffffffe68, 8) , (const, 0x55c, 4), (stack, 0xfffffffffffffe68, 8) INDIRECT (stack, 0xfffffffffffffe68, 8) , (const, 0x55b, 4)]
[(stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0x55c, 4), (stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0x55b, 4)]
[(stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0x55c, 4), (stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0x55b, 4)]
[(stack, 0xfffffffffffffe80, 4) INDIRECT (stack, 0xfffffffffffffe80, 4) , (const, 0x55c, 4), (stack, 0xfffffffffffffe80, 4) INDIRECT (stack, 0xfffffffffffffe80, 4) , (const, 0x55b, 4)]
[(stack, 0xfffffffffffffe84, 4) INDIRECT (stack, 0xfffffffffffffe84, 4) , (const, 0x55c, 4), (stack, 0xfffffffffffffe84, 4) INDIRECT (stack, 0xfffffffffffffe84, 4) , (const, 0x55b, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x55c, 4), (stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x55b, 4)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x55c, 4), (stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x55b, 4)]
[(stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x55c, 4), (stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x55b, 4)]
[(stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x55c, 4), (stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x55b, 4)]
[(stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x55c, 4), (stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x55b, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x55c, 4), (stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x55b, 4)]
[(stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x55c, 4), (stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x55b, 4)]
[(stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x55c, 4), (stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x55b, 4)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x55c, 4), (stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x55b, 4)]
[(stack, 0xfffffffffffffeca, 1) INDIRECT (stack, 0xfffffffffffffeca, 1) , (const, 0x55c, 4), (stack, 0xfffffffffffffeca, 1) INDIRECT (stack, 0xfffffffffffffeca, 1) , (const, 0x55b, 4)]
[(stack, 0xfffffffffffffecb, 1) INDIRECT (stack, 0xfffffffffffffecb, 1) , (const, 0x55c, 4), (stack, 0xfffffffffffffecb, 1) INDIRECT (stack, 0xfffffffffffffecb, 1) , (const, 0x55b, 4)]
[(stack, 0xfffffffffffffecc, 4) INDIRECT (stack, 0xfffffffffffffecc, 4) , (const, 0x55c, 4), (stack, 0xfffffffffffffecc, 4) INDIRECT (stack, 0xfffffffffffffecc, 4) , (const, 0x55b, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x55c, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x55b, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x55c, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x55b, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x55c, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x55b, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x55c, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x55b, 4)]
[(stack, 0xfffffffffffffef0, 4) INDIRECT (stack, 0xfffffffffffffef0, 4) , (const, 0x55c, 4), (stack, 0xfffffffffffffef0, 4) INDIRECT (stack, 0xfffffffffffffef0, 4) , (const, 0x55b, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x55c, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x55b, 4)]
[(stack, 0xffffffffffffff00, 4) INDIRECT (stack, 0xffffffffffffff00, 4) , (const, 0x55c, 4), (stack, 0xffffffffffffff00, 4) INDIRECT (stack, 0xffffffffffffff00, 4) , (const, 0x55b, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x55c, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x55b, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x55c, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x55b, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x55c, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x55b, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x55c, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x55b, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x55c, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x55b, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x55c, 4), (stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x55b, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x55c, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x55b, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x55c, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x55b, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x55c, 4), (stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x55b, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x55c, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x55b, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x55c, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x55b, 4)]
[ ---  CALL (ram, 0x2147c0, 8) , (unique, 0x1000051d, 8), (unique, 0x1000051d, 8) PTRSUB (const, 0x0, 8) , (const, 0x4c5f40, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 4) MULTIEQUAL (stack, 0xffffffffffffff00, 4) , (stack, 0xffffffffffffff00, 4) , (stack, 0xffffffffffffff00, 4)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 4) MULTIEQUAL (stack, 0xfffffffffffffef0, 4) , (stack, 0xfffffffffffffef0, 4) , (stack, 0xfffffffffffffef0, 4)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffecc, 4) MULTIEQUAL (stack, 0xfffffffffffffecc, 4) , (stack, 0xfffffffffffffecc, 4) , (stack, 0xfffffffffffffecc, 4)]
[(stack, 0xfffffffffffffecb, 1) MULTIEQUAL (stack, 0xfffffffffffffecb, 1) , (stack, 0xfffffffffffffecb, 1) , (stack, 0xfffffffffffffecb, 1)]
[(stack, 0xfffffffffffffeca, 1) MULTIEQUAL (stack, 0xfffffffffffffeca, 1) , (stack, 0xfffffffffffffeca, 1) , (stack, 0xfffffffffffffeca, 1)]
[(stack, 0xfffffffffffffec0, 8) MULTIEQUAL (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8)]
[(stack, 0xfffffffffffffebc, 4) MULTIEQUAL (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4)]
[(stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(stack, 0xfffffffffffffea8, 8) MULTIEQUAL (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8)]
[(stack, 0xfffffffffffffea0, 8) MULTIEQUAL (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8)]
[(stack, 0xfffffffffffffe98, 8) MULTIEQUAL (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8)]
[(stack, 0xfffffffffffffe90, 8) MULTIEQUAL (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8)]
[(stack, 0xfffffffffffffe88, 8) MULTIEQUAL (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8)]
[(stack, 0xfffffffffffffe84, 4) MULTIEQUAL (stack, 0xfffffffffffffe84, 4) , (stack, 0xfffffffffffffe84, 4) , (stack, 0xfffffffffffffe84, 4)]
[(stack, 0xfffffffffffffe78, 8) MULTIEQUAL (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8)]
[(stack, 0xfffffffffffffe70, 8) MULTIEQUAL (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8)]
[(stack, 0xfffffffffffffe68, 8) MULTIEQUAL (stack, 0xfffffffffffffe68, 8) , (stack, 0xfffffffffffffe68, 8) , (stack, 0xfffffffffffffe68, 8)]
[(stack, 0xfffffffffffffe60, 8) MULTIEQUAL (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8)]
[(stack, 0xfffffffffffffe5c, 4) MULTIEQUAL (stack, 0xfffffffffffffe5c, 4) , (stack, 0xfffffffffffffe5c, 4) , (stack, 0xfffffffffffffe5c, 4)]
[(ram, 0x4c87a0, 4) MULTIEQUAL (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4)]
[(ram, 0x4c8790, 4) MULTIEQUAL (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4)]
[(ram, 0x4c8718, 8) MULTIEQUAL (ram, 0x4c8718, 8) , (ram, 0x4c8718, 8) , (ram, 0x4c8718, 8)]
[(ram, 0x4c5f64, 4) MULTIEQUAL (ram, 0x4c5f64, 4) , (ram, 0x4c5f64, 4) , (ram, 0x4c5f64, 4)]
[(ram, 0x4c5f60, 4) MULTIEQUAL (ram, 0x4c5f60, 4) , (ram, 0x4c5f60, 4) , (ram, 0x4c5f60, 4)]
[(ram, 0x4c5f58, 8) MULTIEQUAL (ram, 0x4c5f58, 8) , (ram, 0x4c5f58, 8) , (ram, 0x4c5f58, 8)]
[(ram, 0x4c5f50, 8) MULTIEQUAL (ram, 0x4c5f50, 8) , (ram, 0x4c5f50, 8) , (ram, 0x4c5f50, 8)]
[(ram, 0x4c5f44, 4) MULTIEQUAL (ram, 0x4c5f44, 4) , (ram, 0x4c5f44, 4) , (ram, 0x4c5f44, 4)]
[(ram, 0x4c5f40, 4) MULTIEQUAL (ram, 0x4c5f40, 4) , (ram, 0x4c5f40, 4) , (ram, 0x4c5f40, 4)]
[(ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[ ---  CBRANCH (ram, 0x1eed39, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xfffffffffffffe80, 4) , (const, 0x0, 4), (stack, 0xfffffffffffffe80, 4) MULTIEQUAL (stack, 0xfffffffffffffe80, 4) , (stack, 0xfffffffffffffe80, 4) , (stack, 0xfffffffffffffe80, 4)]
[ ---  CBRANCH (ram, 0x1eeadd, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4c5f64, 4) , (const, 0x0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100010e3, 8) , (const, 0x1eed5f, 8), (unique, 0x100010e3, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x520, 4)]
[(ram, 0x4c5f40, 4) INDIRECT (ram, 0x4c5f40, 4) , (const, 0x520, 4)]
[(ram, 0x4c5f44, 4) INDIRECT (ram, 0x4c5f44, 4) , (const, 0x520, 4)]
[(ram, 0x4c5f50, 8) INDIRECT (ram, 0x4c5f50, 8) , (const, 0x520, 4)]
[(ram, 0x4c5f58, 8) INDIRECT (ram, 0x4c5f58, 8) , (const, 0x520, 4)]
[(ram, 0x4c5f60, 4) INDIRECT (ram, 0x4c5f60, 4) , (const, 0x520, 4)]
[(ram, 0x4c5f64, 4) INDIRECT (ram, 0x4c5f64, 4) , (const, 0x520, 4)]
[(ram, 0x4c8718, 8) INDIRECT (ram, 0x4c8718, 8) , (const, 0x520, 4)]
[(ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x520, 4)]
[(ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x520, 4)]
[(stack, 0xfffffffffffffe5c, 4) INDIRECT (stack, 0xfffffffffffffe5c, 4) , (const, 0x520, 4), (stack, 0xfffffffffffffe5c, 4) INDIRECT (stack, 0xfffffffffffffe5c, 4) , (const, 0x51f, 4)]
[(stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x520, 4), (stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x51f, 4)]
[(stack, 0xfffffffffffffe68, 8) INDIRECT (stack, 0xfffffffffffffe68, 8) , (const, 0x520, 4), (stack, 0xfffffffffffffe68, 8) INDIRECT (stack, 0xfffffffffffffe68, 8) , (const, 0x51f, 4)]
[(stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0x520, 4), (stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0x51f, 4)]
[(stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0x520, 4), (stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0x51f, 4)]
[(stack, 0xfffffffffffffe80, 4) INDIRECT (stack, 0xfffffffffffffe80, 4) , (const, 0x520, 4), (stack, 0xfffffffffffffe80, 4) INDIRECT (stack, 0xfffffffffffffe80, 4) , (const, 0x51f, 4)]
[(stack, 0xfffffffffffffe84, 4) INDIRECT (stack, 0xfffffffffffffe84, 4) , (const, 0x520, 4), (stack, 0xfffffffffffffe84, 4) INDIRECT (stack, 0xfffffffffffffe84, 4) , (const, 0x51f, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x520, 4), (stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x51f, 4)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x520, 4), (stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x51f, 4)]
[(stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x520, 4), (stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x51f, 4)]
[(stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x520, 4), (stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x51f, 4)]
[(stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x520, 4), (stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x51f, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x520, 4), (stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x51f, 4)]
[(stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x520, 4), (stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x51f, 4)]
[(stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x520, 4), (stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x51f, 4)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x520, 4), (stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x51f, 4)]
[(stack, 0xfffffffffffffeca, 1) INDIRECT (stack, 0xfffffffffffffeca, 1) , (const, 0x520, 4), (stack, 0xfffffffffffffeca, 1) INDIRECT (stack, 0xfffffffffffffeca, 1) , (const, 0x51f, 4)]
[(stack, 0xfffffffffffffecb, 1) INDIRECT (stack, 0xfffffffffffffecb, 1) , (const, 0x520, 4), (stack, 0xfffffffffffffecb, 1) INDIRECT (stack, 0xfffffffffffffecb, 1) , (const, 0x51f, 4)]
[(stack, 0xfffffffffffffecc, 4) INDIRECT (stack, 0xfffffffffffffecc, 4) , (const, 0x520, 4), (stack, 0xfffffffffffffecc, 4) INDIRECT (stack, 0xfffffffffffffecc, 4) , (const, 0x51f, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x520, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x51f, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x520, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x51f, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x520, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x51f, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x520, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x51f, 4)]
[(stack, 0xfffffffffffffef0, 4) INDIRECT (stack, 0xfffffffffffffef0, 4) , (const, 0x520, 4), (stack, 0xfffffffffffffef0, 4) INDIRECT (stack, 0xfffffffffffffef0, 4) , (const, 0x51f, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x520, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x51f, 4)]
[(stack, 0xffffffffffffff00, 4) INDIRECT (stack, 0xffffffffffffff00, 4) , (const, 0x520, 4), (stack, 0xffffffffffffff00, 4) INDIRECT (stack, 0xffffffffffffff00, 4) , (const, 0x51f, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x520, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x51f, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x520, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x51f, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x520, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x51f, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x520, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x51f, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x520, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x51f, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x520, 4), (stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x51f, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x520, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x51f, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x520, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x51f, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x520, 4), (stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x51f, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x520, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x51f, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x520, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x51f, 4)]
[ ---  CBRANCH (ram, 0x1eed74, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x1f6320, 8) , (const, 0x1, 4) , (unique, 0x100004dd, 8) , (unique, 0x3200, 8), (unique, 0x100004dd, 8) COPY (const, 0x28de11, 8), (unique, 0x3200, 8) CAST (unique, 0x100010db, 8), (unique, 0x100010db, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff38, 8)]
[ ---  CBRANCH (ram, 0x1eeffc, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffff90, 8) , (ram, 0x4c5f50, 8)]
[ ---  CBRANCH (ram, 0x1eed74, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffff98, 8) , (ram, 0x4c5f58, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100010eb, 8) , (const, 0x1eed79, 8), (unique, 0x100010eb, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x53d, 4)]
[(ram, 0x4c5f40, 4) INDIRECT (ram, 0x4c5f40, 4) , (const, 0x53d, 4)]
[(ram, 0x4c5f44, 4) INDIRECT (ram, 0x4c5f44, 4) , (const, 0x53d, 4)]
[(ram, 0x4c5f50, 8) INDIRECT (ram, 0x4c5f50, 8) , (const, 0x53d, 4)]
[(ram, 0x4c5f58, 8) INDIRECT (ram, 0x4c5f58, 8) , (const, 0x53d, 4)]
[(ram, 0x4c5f60, 4) INDIRECT (ram, 0x4c5f60, 4) , (const, 0x53d, 4)]
[(ram, 0x4c5f64, 4) INDIRECT (ram, 0x4c5f64, 4) , (const, 0x53d, 4)]
[(ram, 0x4c8718, 8) INDIRECT (ram, 0x4c8718, 8) , (const, 0x53d, 4)]
[(ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x53d, 4)]
[(ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x53d, 4)]
[(stack, 0xfffffffffffffe5c, 4) INDIRECT (stack, 0xfffffffffffffe5c, 4) , (const, 0x53d, 4), (stack, 0xfffffffffffffe5c, 4) INDIRECT (stack, 0xfffffffffffffe5c, 4) , (const, 0x53c, 4)]
[(stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x53d, 4), (stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x53c, 4)]
[(stack, 0xfffffffffffffe68, 8) INDIRECT (stack, 0xfffffffffffffe68, 8) , (const, 0x53d, 4), (stack, 0xfffffffffffffe68, 8) INDIRECT (stack, 0xfffffffffffffe68, 8) , (const, 0x53c, 4)]
[(stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0x53d, 4), (stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0x53c, 4)]
[(stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0x53d, 4), (stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0x53c, 4)]
[(stack, 0xfffffffffffffe80, 4) INDIRECT (stack, 0xfffffffffffffe80, 4) , (const, 0x53d, 4), (stack, 0xfffffffffffffe80, 4) INDIRECT (stack, 0xfffffffffffffe80, 4) , (const, 0x53c, 4)]
[(stack, 0xfffffffffffffe84, 4) INDIRECT (stack, 0xfffffffffffffe84, 4) , (const, 0x53d, 4), (stack, 0xfffffffffffffe84, 4) INDIRECT (stack, 0xfffffffffffffe84, 4) , (const, 0x53c, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x53d, 4), (stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x53c, 4)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x53d, 4), (stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x53c, 4)]
[(stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x53d, 4), (stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x53c, 4)]
[(stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x53d, 4), (stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x53c, 4)]
[(stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x53d, 4), (stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x53c, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x53d, 4), (stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x53c, 4)]
[(stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x53d, 4), (stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x53c, 4)]
[(stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x53d, 4), (stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x53c, 4)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x53d, 4), (stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x53c, 4)]
[(stack, 0xfffffffffffffeca, 1) INDIRECT (stack, 0xfffffffffffffeca, 1) , (const, 0x53d, 4), (stack, 0xfffffffffffffeca, 1) INDIRECT (stack, 0xfffffffffffffeca, 1) , (const, 0x53c, 4)]
[(stack, 0xfffffffffffffecb, 1) INDIRECT (stack, 0xfffffffffffffecb, 1) , (const, 0x53d, 4), (stack, 0xfffffffffffffecb, 1) INDIRECT (stack, 0xfffffffffffffecb, 1) , (const, 0x53c, 4)]
[(stack, 0xfffffffffffffecc, 4) INDIRECT (stack, 0xfffffffffffffecc, 4) , (const, 0x53d, 4), (stack, 0xfffffffffffffecc, 4) INDIRECT (stack, 0xfffffffffffffecc, 4) , (const, 0x53c, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x53d, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x53c, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x53d, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x53c, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x53d, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x53c, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x53d, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x53c, 4)]
[(stack, 0xfffffffffffffef0, 4) INDIRECT (stack, 0xfffffffffffffef0, 4) , (const, 0x53d, 4), (stack, 0xfffffffffffffef0, 4) INDIRECT (stack, 0xfffffffffffffef0, 4) , (const, 0x53c, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x53d, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x53c, 4)]
[(stack, 0xffffffffffffff00, 4) INDIRECT (stack, 0xffffffffffffff00, 4) , (const, 0x53d, 4), (stack, 0xffffffffffffff00, 4) INDIRECT (stack, 0xffffffffffffff00, 4) , (const, 0x53c, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x53d, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x53c, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x53d, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x53c, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x53d, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x53c, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x53d, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x53c, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x53d, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x53c, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x53d, 4), (stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x53c, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x53d, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x53c, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x53d, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x53c, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x53d, 4), (stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x53c, 4)]
[ ---  CALL (ram, 0x1ec7c0, 8)]
[ ---  BRANCH (ram, 0x1eeadd, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100010f3, 8) , (const, 0x1eeb03, 8), (unique, 0x100010f3, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x3e2, 4), (ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(ram, 0x4c5f40, 4) INDIRECT (ram, 0x4c5f40, 4) , (const, 0x3e2, 4), (ram, 0x4c5f40, 4) MULTIEQUAL (ram, 0x4c5f40, 4) , (ram, 0x4c5f40, 4) , (ram, 0x4c5f40, 4) , (ram, 0x4c5f40, 4)]
[(ram, 0x4c5f44, 4) INDIRECT (ram, 0x4c5f44, 4) , (const, 0x3e2, 4), (ram, 0x4c5f44, 4) MULTIEQUAL (ram, 0x4c5f44, 4) , (ram, 0x4c5f44, 4) , (ram, 0x4c5f44, 4) , (ram, 0x4c5f44, 4)]
[(ram, 0x4c5f50, 8) INDIRECT (ram, 0x4c5f50, 8) , (const, 0x3e2, 4), (ram, 0x4c5f50, 8) MULTIEQUAL (ram, 0x4c5f50, 8) , (ram, 0x4c5f50, 8) , (ram, 0x4c5f50, 8) , (ram, 0x4c5f50, 8)]
[(ram, 0x4c5f58, 8) INDIRECT (ram, 0x4c5f58, 8) , (const, 0x3e2, 4), (ram, 0x4c5f58, 8) MULTIEQUAL (ram, 0x4c5f58, 8) , (ram, 0x4c5f58, 8) , (ram, 0x4c5f58, 8) , (ram, 0x4c5f58, 8)]
[(ram, 0x4c5f60, 4) INDIRECT (ram, 0x4c5f60, 4) , (const, 0x3e2, 4), (ram, 0x4c5f60, 4) MULTIEQUAL (ram, 0x4c5f60, 4) , (ram, 0x4c5f60, 4) , (ram, 0x4c5f60, 4) , (ram, 0x4c5f60, 4)]
[(ram, 0x4c5f64, 4) INDIRECT (ram, 0x4c5f64, 4) , (const, 0x3e2, 4), (ram, 0x4c5f64, 4) MULTIEQUAL (ram, 0x4c5f64, 4) , (ram, 0x4c5f64, 4) , (ram, 0x4c5f64, 4) , (ram, 0x4c5f64, 4)]
[(ram, 0x4c8718, 8) INDIRECT (ram, 0x4c8718, 8) , (const, 0x3e2, 4), (ram, 0x4c8718, 8) MULTIEQUAL (ram, 0x4c8718, 8) , (ram, 0x4c8718, 8) , (ram, 0x4c8718, 8) , (ram, 0x4c8718, 8)]
[(ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x3e2, 4), (ram, 0x4c8790, 4) MULTIEQUAL (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4)]
[(stack, 0xfffffffffffffe5c, 4) INDIRECT (stack, 0xfffffffffffffe5c, 4) , (const, 0x3e2, 4), (stack, 0xfffffffffffffe5c, 4) INDIRECT (stack, 0xfffffffffffffe5c, 4) , (const, 0x3e1, 4), (stack, 0xfffffffffffffe5c, 4) MULTIEQUAL (stack, 0xfffffffffffffe5c, 4) , (stack, 0xfffffffffffffe5c, 4) , (stack, 0xfffffffffffffe5c, 4) , (stack, 0xfffffffffffffe5c, 4)]
[(stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x3e2, 4), (stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x3e1, 4), (stack, 0xfffffffffffffe60, 8) MULTIEQUAL (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8)]
[(stack, 0xfffffffffffffe68, 8) INDIRECT (stack, 0xfffffffffffffe68, 8) , (const, 0x3e2, 4), (stack, 0xfffffffffffffe68, 8) INDIRECT (stack, 0xfffffffffffffe68, 8) , (const, 0x3e1, 4), (stack, 0xfffffffffffffe68, 8) MULTIEQUAL (stack, 0xfffffffffffffe68, 8) , (stack, 0xfffffffffffffe68, 8) , (stack, 0xfffffffffffffe68, 8) , (stack, 0xfffffffffffffe68, 8)]
[(stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0x3e2, 4), (stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0x3e1, 4), (stack, 0xfffffffffffffe70, 8) MULTIEQUAL (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8)]
[(stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0x3e2, 4), (stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0x3e1, 4), (stack, 0xfffffffffffffe78, 8) MULTIEQUAL (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8)]
[(stack, 0xfffffffffffffe80, 4) INDIRECT (stack, 0xfffffffffffffe80, 4) , (const, 0x3e2, 4), (stack, 0xfffffffffffffe80, 4) INDIRECT (stack, 0xfffffffffffffe80, 4) , (const, 0x3e1, 4), (stack, 0xfffffffffffffe80, 4) MULTIEQUAL (stack, 0xfffffffffffffe80, 4) , (stack, 0xfffffffffffffe80, 4) , (stack, 0xfffffffffffffe80, 4) , (stack, 0xfffffffffffffe80, 4)]
[(stack, 0xfffffffffffffe84, 4) INDIRECT (stack, 0xfffffffffffffe84, 4) , (const, 0x3e2, 4), (stack, 0xfffffffffffffe84, 4) INDIRECT (stack, 0xfffffffffffffe84, 4) , (const, 0x3e1, 4), (stack, 0xfffffffffffffe84, 4) MULTIEQUAL (stack, 0xfffffffffffffe84, 4) , (stack, 0xfffffffffffffe84, 4) , (stack, 0xfffffffffffffe84, 4) , (stack, 0xfffffffffffffe84, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x3e2, 4), (stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x3e1, 4), (stack, 0xfffffffffffffe88, 8) MULTIEQUAL (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x3e2, 4), (stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x3e1, 4), (stack, 0xfffffffffffffe90, 8) MULTIEQUAL (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8)]
[(stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x3e2, 4), (stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x3e1, 4), (stack, 0xfffffffffffffe98, 8) MULTIEQUAL (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8)]
[(stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x3e2, 4), (stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x3e1, 4), (stack, 0xfffffffffffffea0, 8) MULTIEQUAL (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8)]
[(stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x3e2, 4), (stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x3e1, 4), (stack, 0xfffffffffffffea8, 8) MULTIEQUAL (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x3e2, 4), (stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x3e1, 4), (stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x3e2, 4), (stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x3e1, 4), (stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4)]
[(stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x3e2, 4), (stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x3e1, 4), (stack, 0xfffffffffffffebc, 4) MULTIEQUAL (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x3e2, 4), (stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x3e1, 4), (stack, 0xfffffffffffffec0, 8) MULTIEQUAL (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8)]
[(stack, 0xfffffffffffffeca, 1) INDIRECT (stack, 0xfffffffffffffeca, 1) , (const, 0x3e2, 4), (stack, 0xfffffffffffffeca, 1) INDIRECT (stack, 0xfffffffffffffeca, 1) , (const, 0x3e1, 4), (stack, 0xfffffffffffffeca, 1) MULTIEQUAL (stack, 0xfffffffffffffeca, 1) , (stack, 0xfffffffffffffeca, 1) , (stack, 0xfffffffffffffeca, 1) , (stack, 0xfffffffffffffeca, 1)]
[(stack, 0xfffffffffffffecb, 1) INDIRECT (stack, 0xfffffffffffffecb, 1) , (const, 0x3e2, 4), (stack, 0xfffffffffffffecb, 1) INDIRECT (stack, 0xfffffffffffffecb, 1) , (const, 0x3e1, 4), (stack, 0xfffffffffffffecb, 1) MULTIEQUAL (stack, 0xfffffffffffffecb, 1) , (stack, 0xfffffffffffffecb, 1) , (stack, 0xfffffffffffffecb, 1) , (stack, 0xfffffffffffffecb, 1)]
[(stack, 0xfffffffffffffecc, 4) INDIRECT (stack, 0xfffffffffffffecc, 4) , (const, 0x3e2, 4), (stack, 0xfffffffffffffecc, 4) INDIRECT (stack, 0xfffffffffffffecc, 4) , (const, 0x3e1, 4), (stack, 0xfffffffffffffecc, 4) MULTIEQUAL (stack, 0xfffffffffffffecc, 4) , (stack, 0xfffffffffffffecc, 4) , (stack, 0xfffffffffffffecc, 4) , (stack, 0xfffffffffffffecc, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x3e2, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x3e1, 4), (stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x3e2, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x3e1, 4), (stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x3e2, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x3e1, 4), (stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x3e2, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x3e1, 4), (stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffef0, 4) INDIRECT (stack, 0xfffffffffffffef0, 4) , (const, 0x3e2, 4), (stack, 0xfffffffffffffef0, 4) INDIRECT (stack, 0xfffffffffffffef0, 4) , (const, 0x3e1, 4), (stack, 0xfffffffffffffef0, 4) MULTIEQUAL (stack, 0xfffffffffffffef0, 4) , (stack, 0xfffffffffffffef0, 4) , (stack, 0xfffffffffffffef0, 4) , (stack, 0xfffffffffffffef0, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x3e2, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x3e1, 4), (stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xffffffffffffff00, 4) INDIRECT (stack, 0xffffffffffffff00, 4) , (const, 0x3e2, 4), (stack, 0xffffffffffffff00, 4) INDIRECT (stack, 0xffffffffffffff00, 4) , (const, 0x3e1, 4), (stack, 0xffffffffffffff00, 4) MULTIEQUAL (stack, 0xffffffffffffff00, 4) , (stack, 0xffffffffffffff00, 4) , (stack, 0xffffffffffffff00, 4) , (stack, 0xffffffffffffff00, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x3e2, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x3e1, 4), (stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x3e2, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x3e1, 4), (stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x3e2, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x3e1, 4), (stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x3e2, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x3e1, 4), (stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x3e2, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x3e1, 4), (stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x3e2, 4), (stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x3e1, 4), (stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x3e2, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x3e1, 4), (stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x3e2, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x3e1, 4), (stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x3e2, 4), (stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x3e1, 4), (stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[ ---  CALL (ram, 0x1392c0, 8) , (unique, 0x10000cc1, 8) , (unique, 0x10000c99, 8) , (const, 0x8, 8) , (unique, 0x100004bd, 8) , (unique, 0x3200, 8), (unique, 0x100004bd, 8) PTRSUB (const, 0x0, 8) , (const, 0x1ed4d0, 8), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffef8, 8), (unique, 0x10000c99, 8) COPY (stack, 0xfffffffffffffe88, 8), (unique, 0x10000cc1, 8) COPY (stack, 0xfffffffffffffea8, 8), (stack, 0xfffffffffffffe88, 8) MULTIEQUAL (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8), (stack, 0xfffffffffffffea8, 8) MULTIEQUAL (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8)]
[ ---  CBRANCH (ram, 0x1eeb17, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4c87a0, 4) , (const, 0x0, 4), (ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x3e2, 4), (ram, 0x4c87a0, 4) MULTIEQUAL (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4)]
[ ---  CALLOTHER (const, 0x11, 4)]
[(unique, 0x10000e05, 4) COPY (unique, 0x10000bae, 4), (unique, 0x10000bae, 4) INT_ADD (ram, 0x4c5f40, 4) , (const, 0xffffffff, 4)]
[ ---  CBRANCH (ram, 0x1eeb39, 1) , (unique, 0x10000bb2, 1), (unique, 0x10000bb2, 1) INT_NOTEQUAL (unique, 0x10000bae, 4) , (const, 0x0, 4), (unique, 0x10000bae, 4) INT_ADD (ram, 0x4c5f40, 4) , (const, 0xffffffff, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100010fb, 8) , (const, 0x1eeb32, 8), (unique, 0x100010fb, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xffffffffffffff78, 8) , (const, 0x1, 8)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x4fb, 4)]
[(ram, 0x4c5f44, 4) INDIRECT (ram, 0x4c5f44, 4) , (const, 0x4fb, 4)]
[(ram, 0x4c5f50, 8) INDIRECT (ram, 0x4c5f50, 8) , (const, 0x4fb, 4)]
[(ram, 0x4c5f58, 8) INDIRECT (ram, 0x4c5f58, 8) , (const, 0x4fb, 4)]
[(ram, 0x4c5f60, 4) INDIRECT (ram, 0x4c5f60, 4) , (const, 0x4fb, 4)]
[(ram, 0x4c5f64, 4) INDIRECT (ram, 0x4c5f64, 4) , (const, 0x4fb, 4)]
[(ram, 0x4c8718, 8) INDIRECT (ram, 0x4c8718, 8) , (const, 0x4fb, 4)]
[(ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x4fb, 4)]
[(ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x4fb, 4)]
[(stack, 0xfffffffffffffe5c, 4) INDIRECT (stack, 0xfffffffffffffe5c, 4) , (const, 0x4fb, 4), (stack, 0xfffffffffffffe5c, 4) INDIRECT (stack, 0xfffffffffffffe5c, 4) , (const, 0x4fa, 4)]
[(stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x4fb, 4), (stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x4fa, 4)]
[(stack, 0xfffffffffffffe68, 8) INDIRECT (stack, 0xfffffffffffffe68, 8) , (const, 0x4fb, 4), (stack, 0xfffffffffffffe68, 8) INDIRECT (stack, 0xfffffffffffffe68, 8) , (const, 0x4fa, 4)]
[(stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0x4fb, 4), (stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0x4fa, 4)]
[(stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0x4fb, 4), (stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0x4fa, 4)]
[(stack, 0xfffffffffffffe80, 4) INDIRECT (stack, 0xfffffffffffffe80, 4) , (const, 0x4fb, 4), (stack, 0xfffffffffffffe80, 4) INDIRECT (stack, 0xfffffffffffffe80, 4) , (const, 0x4fa, 4)]
[(stack, 0xfffffffffffffe84, 4) INDIRECT (stack, 0xfffffffffffffe84, 4) , (const, 0x4fb, 4), (stack, 0xfffffffffffffe84, 4) INDIRECT (stack, 0xfffffffffffffe84, 4) , (const, 0x4fa, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x4fb, 4), (stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x4fa, 4)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x4fb, 4), (stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x4fa, 4)]
[(stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x4fb, 4), (stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x4fa, 4)]
[(stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x4fb, 4), (stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x4fa, 4)]
[(stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x4fb, 4), (stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x4fa, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x4fb, 4), (stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x4fa, 4)]
[(stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x4fb, 4), (stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x4fa, 4)]
[(stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x4fb, 4), (stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x4fa, 4)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x4fb, 4), (stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x4fa, 4)]
[(stack, 0xfffffffffffffeca, 1) INDIRECT (stack, 0xfffffffffffffeca, 1) , (const, 0x4fb, 4), (stack, 0xfffffffffffffeca, 1) INDIRECT (stack, 0xfffffffffffffeca, 1) , (const, 0x4fa, 4)]
[(stack, 0xfffffffffffffecb, 1) INDIRECT (stack, 0xfffffffffffffecb, 1) , (const, 0x4fb, 4), (stack, 0xfffffffffffffecb, 1) INDIRECT (stack, 0xfffffffffffffecb, 1) , (const, 0x4fa, 4)]
[(stack, 0xfffffffffffffecc, 4) INDIRECT (stack, 0xfffffffffffffecc, 4) , (const, 0x4fb, 4), (stack, 0xfffffffffffffecc, 4) INDIRECT (stack, 0xfffffffffffffecc, 4) , (const, 0x4fa, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x4fb, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x4fa, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x4fb, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x4fa, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x4fb, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x4fa, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x4fb, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x4fa, 4)]
[(stack, 0xfffffffffffffef0, 4) INDIRECT (stack, 0xfffffffffffffef0, 4) , (const, 0x4fb, 4), (stack, 0xfffffffffffffef0, 4) INDIRECT (stack, 0xfffffffffffffef0, 4) , (const, 0x4fa, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x4fb, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x4fa, 4)]
[(stack, 0xffffffffffffff00, 4) INDIRECT (stack, 0xffffffffffffff00, 4) , (const, 0x4fb, 4), (stack, 0xffffffffffffff00, 4) INDIRECT (stack, 0xffffffffffffff00, 4) , (const, 0x4fa, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x4fb, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x4fa, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x4fb, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x4fa, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x4fb, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x4fa, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x4fb, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x4fa, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x4fb, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x4fa, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x4fb, 4), (stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x4fa, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x4fb, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x4fa, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x4fb, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x4fa, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x4fb, 4), (stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x4fa, 4)]
[ ---  CALL (ram, 0x2147f0, 8) , (unique, 0x10000515, 8), (unique, 0x10000515, 8) PTRSUB (const, 0x0, 8) , (const, 0x4c5f40, 8)]
[(unique, 0x10000e01, 4) COPY (ram, 0x4c5f40, 4), (ram, 0x4c5f40, 4) INDIRECT (ram, 0x4c5f40, 4) , (const, 0x4fb, 4), (ram, 0x4c5f40, 4) INT_ADD (ram, 0x4c5f40, 4) , (const, 0xffffffff, 4)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 4) MULTIEQUAL (stack, 0xffffffffffffff00, 4) , (stack, 0xffffffffffffff00, 4) , (stack, 0xffffffffffffff00, 4)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 4) MULTIEQUAL (stack, 0xfffffffffffffef0, 4) , (stack, 0xfffffffffffffef0, 4) , (stack, 0xfffffffffffffef0, 4)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffecc, 4) MULTIEQUAL (stack, 0xfffffffffffffecc, 4) , (stack, 0xfffffffffffffecc, 4) , (stack, 0xfffffffffffffecc, 4)]
[(stack, 0xfffffffffffffecb, 1) MULTIEQUAL (stack, 0xfffffffffffffecb, 1) , (stack, 0xfffffffffffffecb, 1) , (stack, 0xfffffffffffffecb, 1)]
[(stack, 0xfffffffffffffeca, 1) MULTIEQUAL (stack, 0xfffffffffffffeca, 1) , (stack, 0xfffffffffffffeca, 1) , (stack, 0xfffffffffffffeca, 1)]
[(stack, 0xfffffffffffffec0, 8) MULTIEQUAL (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8)]
[(stack, 0xfffffffffffffebc, 4) MULTIEQUAL (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(stack, 0xfffffffffffffea0, 8) MULTIEQUAL (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8)]
[(stack, 0xfffffffffffffe90, 8) MULTIEQUAL (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8)]
[(stack, 0xfffffffffffffe88, 8) MULTIEQUAL (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8)]
[(stack, 0xfffffffffffffe84, 4) MULTIEQUAL (stack, 0xfffffffffffffe84, 4) , (stack, 0xfffffffffffffe84, 4) , (stack, 0xfffffffffffffe84, 4)]
[(stack, 0xfffffffffffffe80, 4) MULTIEQUAL (stack, 0xfffffffffffffe80, 4) , (stack, 0xfffffffffffffe80, 4) , (stack, 0xfffffffffffffe80, 4)]
[(stack, 0xfffffffffffffe78, 8) MULTIEQUAL (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8)]
[(stack, 0xfffffffffffffe70, 8) MULTIEQUAL (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8)]
[(stack, 0xfffffffffffffe68, 8) MULTIEQUAL (stack, 0xfffffffffffffe68, 8) , (stack, 0xfffffffffffffe68, 8) , (stack, 0xfffffffffffffe68, 8)]
[(stack, 0xfffffffffffffe60, 8) MULTIEQUAL (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8)]
[(stack, 0xfffffffffffffe5c, 4) MULTIEQUAL (stack, 0xfffffffffffffe5c, 4) , (stack, 0xfffffffffffffe5c, 4) , (stack, 0xfffffffffffffe5c, 4)]
[(ram, 0x4c87a0, 4) MULTIEQUAL (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4)]
[(ram, 0x4c8790, 4) MULTIEQUAL (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4)]
[(ram, 0x4c8718, 8) MULTIEQUAL (ram, 0x4c8718, 8) , (ram, 0x4c8718, 8) , (ram, 0x4c8718, 8)]
[(ram, 0x4c5f64, 4) MULTIEQUAL (ram, 0x4c5f64, 4) , (ram, 0x4c5f64, 4) , (ram, 0x4c5f64, 4)]
[(ram, 0x4c5f60, 4) MULTIEQUAL (ram, 0x4c5f60, 4) , (ram, 0x4c5f60, 4) , (ram, 0x4c5f60, 4)]
[(ram, 0x4c5f58, 8) MULTIEQUAL (ram, 0x4c5f58, 8) , (ram, 0x4c5f58, 8) , (ram, 0x4c5f58, 8)]
[(ram, 0x4c5f50, 8) MULTIEQUAL (ram, 0x4c5f50, 8) , (ram, 0x4c5f50, 8) , (ram, 0x4c5f50, 8)]
[(ram, 0x4c5f44, 4) MULTIEQUAL (ram, 0x4c5f44, 4) , (ram, 0x4c5f44, 4) , (ram, 0x4c5f44, 4)]
[(ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(ram, 0x4c5f40, 4) COPY (unique, 0x10000e0d, 4), (unique, 0x10000e0d, 4) MULTIEQUAL (unique, 0x10000e01, 4) , (unique, 0x10000e05, 4) , (unique, 0x10000e09, 4)]
[(unique, 0x10000ca9, 8) COPY (stack, 0xfffffffffffffe98, 8), (stack, 0xfffffffffffffe98, 8) MULTIEQUAL (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8)]
[(stack, 0xfffffffffffffed0, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) CAST (unique, 0x1000110b, 8), (unique, 0x1000110b, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (stack, 0xfffffffffffffe98, 8) , (unique, 0x10000c28, 8) , (const, 0x8, 8), (unique, 0x10000c28, 8) INT_MULT (unique, 0x10001103, 8) , (const, 0x6, 8), (unique, 0x10001103, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (stack, 0xfffffffffffffea8, 8), (stack, 0xfffffffffffffe98, 8) MULTIEQUAL (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8), (stack, 0xfffffffffffffea8, 8) MULTIEQUAL (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8)]
[(unique, 0x10000d09, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) CAST (unique, 0x1000110b, 8), (unique, 0x1000110b, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (stack, 0xfffffffffffffe98, 8) , (unique, 0x10000c28, 8) , (const, 0x8, 8), (unique, 0x10000c28, 8) INT_MULT (unique, 0x10001103, 8) , (const, 0x6, 8), (unique, 0x10001103, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (stack, 0xfffffffffffffea8, 8), (stack, 0xfffffffffffffe98, 8) MULTIEQUAL (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8), (stack, 0xfffffffffffffea8, 8) MULTIEQUAL (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8)]
[ ---  CBRANCH (ram, 0x1ee9af, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (const, 0x1, 4) , (stack, 0xfffffffffffffeb8, 4), (stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4)]
[(register, 0x0, 8) PTRADD (stack, 0xfffffffffffffea8, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[(unique, 0x3a00, 8) PTRADD (stack, 0xfffffffffffffea8, 8) , (unique, 0x100009e5, 8) , (const, 0x8, 8), (unique, 0x100009e5, 8) INT_ADD (register, 0x10, 8) , (const, 0x2, 8), (register, 0x10, 8) INT_ZEXT (unique, 0x3100, 4), (unique, 0x3100, 4) INT_SUB (stack, 0xfffffffffffffeb8, 4) , (const, 0x2, 4)]
[(unique, 0x10000cf9, 8) COPY (unique, 0xbd80, 8)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x494, 4), (ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(ram, 0x4c5f40, 4) INDIRECT (ram, 0x4c5f40, 4) , (const, 0x494, 4), (ram, 0x4c5f40, 4) MULTIEQUAL (ram, 0x4c5f40, 4) , (ram, 0x4c5f40, 4)]
[(ram, 0x4c5f44, 4) INDIRECT (ram, 0x4c5f44, 4) , (const, 0x494, 4), (ram, 0x4c5f44, 4) MULTIEQUAL (ram, 0x4c5f44, 4) , (ram, 0x4c5f44, 4)]
[(ram, 0x4c5f50, 8) INDIRECT (ram, 0x4c5f50, 8) , (const, 0x494, 4), (ram, 0x4c5f50, 8) MULTIEQUAL (ram, 0x4c5f50, 8) , (ram, 0x4c5f50, 8)]
[(ram, 0x4c5f58, 8) INDIRECT (ram, 0x4c5f58, 8) , (const, 0x494, 4), (ram, 0x4c5f58, 8) MULTIEQUAL (ram, 0x4c5f58, 8) , (ram, 0x4c5f58, 8)]
[(ram, 0x4c5f60, 4) INDIRECT (ram, 0x4c5f60, 4) , (const, 0x494, 4), (ram, 0x4c5f60, 4) MULTIEQUAL (ram, 0x4c5f60, 4) , (ram, 0x4c5f60, 4)]
[(ram, 0x4c5f64, 4) INDIRECT (ram, 0x4c5f64, 4) , (const, 0x494, 4), (ram, 0x4c5f64, 4) MULTIEQUAL (ram, 0x4c5f64, 4) , (ram, 0x4c5f64, 4)]
[(ram, 0x4c8718, 8) INDIRECT (ram, 0x4c8718, 8) , (const, 0x494, 4), (ram, 0x4c8718, 8) MULTIEQUAL (ram, 0x4c8718, 8) , (ram, 0x4c8718, 8)]
[(ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x494, 4), (ram, 0x4c8790, 4) MULTIEQUAL (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4)]
[(ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x494, 4), (ram, 0x4c87a0, 4) MULTIEQUAL (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0xbd80, 8), (unique, 0x3100, 8) PTRSUB (register, 0x8, 8) , (const, 0x28, 8), (unique, 0xbd80, 8) CAST (unique, 0x1000111b, 8), (unique, 0x1000111b, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (stack, 0xfffffffffffffe98, 8) , (unique, 0x10000c38, 8) , (const, 0x8, 8), (unique, 0x10000c38, 8) INT_MULT (unique, 0x10001113, 8) , (const, 0x6, 8), (unique, 0x10001113, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8), (register, 0x8, 8) MULTIEQUAL (unique, 0x10000cf9, 8) , (unique, 0x10000d01, 8)]
[(unique, 0x10000d01, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) CAST (unique, 0x1000111b, 8), (unique, 0x1000111b, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (stack, 0xfffffffffffffe98, 8) , (unique, 0x10000c38, 8) , (const, 0x8, 8), (unique, 0x10000c38, 8) INT_MULT (unique, 0x10001113, 8) , (const, 0x6, 8), (unique, 0x10001113, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x1eeb80, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (unique, 0x3a00, 8), (register, 0x0, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x8, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (const, 0x0, 8), (unique, 0x3100, 8) PTRSUB (register, 0x10, 8) , (const, 0x28, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0x10000d09, 8) , (unique, 0xbd80, 8)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x4ae, 4), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x49b, 4), (ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(ram, 0x4c5f40, 4) INDIRECT (ram, 0x4c5f40, 4) , (const, 0x4ae, 4), (ram, 0x4c5f40, 4) INDIRECT (ram, 0x4c5f40, 4) , (const, 0x49b, 4), (ram, 0x4c5f40, 4) MULTIEQUAL (ram, 0x4c5f40, 4) , (ram, 0x4c5f40, 4)]
[(ram, 0x4c5f44, 4) INDIRECT (ram, 0x4c5f44, 4) , (const, 0x4ae, 4), (ram, 0x4c5f44, 4) INDIRECT (ram, 0x4c5f44, 4) , (const, 0x49b, 4), (ram, 0x4c5f44, 4) MULTIEQUAL (ram, 0x4c5f44, 4) , (ram, 0x4c5f44, 4)]
[(ram, 0x4c5f50, 8) INDIRECT (ram, 0x4c5f50, 8) , (const, 0x4ae, 4), (ram, 0x4c5f50, 8) INDIRECT (ram, 0x4c5f50, 8) , (const, 0x49b, 4), (ram, 0x4c5f50, 8) MULTIEQUAL (ram, 0x4c5f50, 8) , (ram, 0x4c5f50, 8)]
[(ram, 0x4c5f58, 8) INDIRECT (ram, 0x4c5f58, 8) , (const, 0x4ae, 4), (ram, 0x4c5f58, 8) INDIRECT (ram, 0x4c5f58, 8) , (const, 0x49b, 4), (ram, 0x4c5f58, 8) MULTIEQUAL (ram, 0x4c5f58, 8) , (ram, 0x4c5f58, 8)]
[(ram, 0x4c5f60, 4) INDIRECT (ram, 0x4c5f60, 4) , (const, 0x4ae, 4), (ram, 0x4c5f60, 4) INDIRECT (ram, 0x4c5f60, 4) , (const, 0x49b, 4), (ram, 0x4c5f60, 4) MULTIEQUAL (ram, 0x4c5f60, 4) , (ram, 0x4c5f60, 4)]
[(ram, 0x4c5f64, 4) INDIRECT (ram, 0x4c5f64, 4) , (const, 0x4ae, 4), (ram, 0x4c5f64, 4) INDIRECT (ram, 0x4c5f64, 4) , (const, 0x49b, 4), (ram, 0x4c5f64, 4) MULTIEQUAL (ram, 0x4c5f64, 4) , (ram, 0x4c5f64, 4)]
[(ram, 0x4c8718, 8) INDIRECT (ram, 0x4c8718, 8) , (const, 0x4ae, 4), (ram, 0x4c8718, 8) INDIRECT (ram, 0x4c8718, 8) , (const, 0x49b, 4), (ram, 0x4c8718, 8) MULTIEQUAL (ram, 0x4c8718, 8) , (ram, 0x4c8718, 8)]
[(ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x4ae, 4), (ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x49b, 4), (ram, 0x4c8790, 4) MULTIEQUAL (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4)]
[(ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x4ae, 4), (ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x49b, 4), (ram, 0x4c87a0, 4) MULTIEQUAL (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (stack, 0xfffffffffffffec0, 8), (unique, 0x3100, 8) PTRSUB (unique, 0xbd80, 8) , (const, 0x20, 8)]
[ ---  CBRANCH (ram, 0x1ee9e1, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xfffffffffffffe5c, 4) , (const, 0x0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001123, 8) , (const, 0x1ee9e1, 8), (unique, 0x10001123, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x4b6, 4)]
[(ram, 0x4c5f40, 4) INDIRECT (ram, 0x4c5f40, 4) , (const, 0x4b6, 4)]
[(ram, 0x4c5f44, 4) INDIRECT (ram, 0x4c5f44, 4) , (const, 0x4b6, 4)]
[(ram, 0x4c5f50, 8) INDIRECT (ram, 0x4c5f50, 8) , (const, 0x4b6, 4)]
[(ram, 0x4c5f58, 8) INDIRECT (ram, 0x4c5f58, 8) , (const, 0x4b6, 4)]
[(ram, 0x4c5f60, 4) INDIRECT (ram, 0x4c5f60, 4) , (const, 0x4b6, 4)]
[(ram, 0x4c5f64, 4) INDIRECT (ram, 0x4c5f64, 4) , (const, 0x4b6, 4)]
[(ram, 0x4c8718, 8) INDIRECT (ram, 0x4c8718, 8) , (const, 0x4b6, 4)]
[(ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x4b6, 4)]
[(ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x4b6, 4)]
[(stack, 0xfffffffffffffe5c, 4) INDIRECT (stack, 0xfffffffffffffe5c, 4) , (const, 0x4b6, 4), (stack, 0xfffffffffffffe5c, 4) INDIRECT (stack, 0xfffffffffffffe5c, 4) , (const, 0x4b5, 4)]
[(stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x4b6, 4), (stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x4b5, 4)]
[(stack, 0xfffffffffffffe68, 8) INDIRECT (stack, 0xfffffffffffffe68, 8) , (const, 0x4b6, 4), (stack, 0xfffffffffffffe68, 8) INDIRECT (stack, 0xfffffffffffffe68, 8) , (const, 0x4b5, 4)]
[(stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0x4b6, 4), (stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0x4b5, 4)]
[(stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0x4b6, 4), (stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0x4b5, 4)]
[(stack, 0xfffffffffffffe80, 4) INDIRECT (stack, 0xfffffffffffffe80, 4) , (const, 0x4b6, 4), (stack, 0xfffffffffffffe80, 4) INDIRECT (stack, 0xfffffffffffffe80, 4) , (const, 0x4b5, 4)]
[(stack, 0xfffffffffffffe84, 4) INDIRECT (stack, 0xfffffffffffffe84, 4) , (const, 0x4b6, 4), (stack, 0xfffffffffffffe84, 4) INDIRECT (stack, 0xfffffffffffffe84, 4) , (const, 0x4b5, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x4b6, 4), (stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x4b5, 4)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x4b6, 4), (stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x4b5, 4)]
[(stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x4b6, 4), (stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x4b5, 4)]
[(stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x4b6, 4), (stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x4b5, 4)]
[(stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x4b6, 4), (stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x4b5, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x4b6, 4), (stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x4b5, 4)]
[(stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x4b6, 4), (stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x4b5, 4)]
[(stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x4b6, 4), (stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x4b5, 4)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x4b6, 4), (stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x4b5, 4)]
[(stack, 0xfffffffffffffeca, 1) INDIRECT (stack, 0xfffffffffffffeca, 1) , (const, 0x4b6, 4), (stack, 0xfffffffffffffeca, 1) INDIRECT (stack, 0xfffffffffffffeca, 1) , (const, 0x4b5, 4)]
[(stack, 0xfffffffffffffecb, 1) INDIRECT (stack, 0xfffffffffffffecb, 1) , (const, 0x4b6, 4), (stack, 0xfffffffffffffecb, 1) INDIRECT (stack, 0xfffffffffffffecb, 1) , (const, 0x4b5, 4)]
[(stack, 0xfffffffffffffecc, 4) INDIRECT (stack, 0xfffffffffffffecc, 4) , (const, 0x4b6, 4), (stack, 0xfffffffffffffecc, 4) INDIRECT (stack, 0xfffffffffffffecc, 4) , (const, 0x4b5, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x4b6, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x4b5, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x4b6, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x4b5, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x4b6, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x4b5, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x4b6, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x4b5, 4)]
[(stack, 0xfffffffffffffef0, 4) INDIRECT (stack, 0xfffffffffffffef0, 4) , (const, 0x4b6, 4), (stack, 0xfffffffffffffef0, 4) INDIRECT (stack, 0xfffffffffffffef0, 4) , (const, 0x4b5, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x4b6, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x4b5, 4)]
[(stack, 0xffffffffffffff00, 4) INDIRECT (stack, 0xffffffffffffff00, 4) , (const, 0x4b6, 4), (stack, 0xffffffffffffff00, 4) INDIRECT (stack, 0xffffffffffffff00, 4) , (const, 0x4b5, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x4b6, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x4b5, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x4b6, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x4b5, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x4b6, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x4b5, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x4b6, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x4b5, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x4b6, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x4b5, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x4b6, 4), (stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x4b5, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x4b6, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x4b5, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x4b6, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x4b5, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x4b6, 4), (stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x4b5, 4)]
[ ---  CALL (ram, 0x11f8a8, 8) , (unique, 0x10000ca9, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000112b, 8) , (const, 0x1ee9ed, 8), (unique, 0x1000112b, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8), (register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x4bc, 4), (ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(ram, 0x4c5f40, 4) INDIRECT (ram, 0x4c5f40, 4) , (const, 0x4bc, 4), (ram, 0x4c5f40, 4) MULTIEQUAL (ram, 0x4c5f40, 4) , (ram, 0x4c5f40, 4) , (ram, 0x4c5f40, 4)]
[(ram, 0x4c5f44, 4) INDIRECT (ram, 0x4c5f44, 4) , (const, 0x4bc, 4), (ram, 0x4c5f44, 4) MULTIEQUAL (ram, 0x4c5f44, 4) , (ram, 0x4c5f44, 4) , (ram, 0x4c5f44, 4)]
[(ram, 0x4c5f50, 8) INDIRECT (ram, 0x4c5f50, 8) , (const, 0x4bc, 4), (ram, 0x4c5f50, 8) MULTIEQUAL (ram, 0x4c5f50, 8) , (ram, 0x4c5f50, 8) , (ram, 0x4c5f50, 8)]
[(ram, 0x4c5f58, 8) INDIRECT (ram, 0x4c5f58, 8) , (const, 0x4bc, 4), (ram, 0x4c5f58, 8) MULTIEQUAL (ram, 0x4c5f58, 8) , (ram, 0x4c5f58, 8) , (ram, 0x4c5f58, 8)]
[(ram, 0x4c5f60, 4) INDIRECT (ram, 0x4c5f60, 4) , (const, 0x4bc, 4), (ram, 0x4c5f60, 4) MULTIEQUAL (ram, 0x4c5f60, 4) , (ram, 0x4c5f60, 4) , (ram, 0x4c5f60, 4)]
[(ram, 0x4c5f64, 4) INDIRECT (ram, 0x4c5f64, 4) , (const, 0x4bc, 4), (ram, 0x4c5f64, 4) MULTIEQUAL (ram, 0x4c5f64, 4) , (ram, 0x4c5f64, 4) , (ram, 0x4c5f64, 4)]
[(ram, 0x4c8718, 8) INDIRECT (ram, 0x4c8718, 8) , (const, 0x4bc, 4), (ram, 0x4c8718, 8) MULTIEQUAL (ram, 0x4c8718, 8) , (ram, 0x4c8718, 8) , (ram, 0x4c8718, 8)]
[(ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x4bc, 4), (ram, 0x4c8790, 4) MULTIEQUAL (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4)]
[(ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x4bc, 4), (ram, 0x4c87a0, 4) MULTIEQUAL (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4)]
[(stack, 0xfffffffffffffe5c, 4) INDIRECT (stack, 0xfffffffffffffe5c, 4) , (const, 0x4bc, 4), (stack, 0xfffffffffffffe5c, 4) INDIRECT (stack, 0xfffffffffffffe5c, 4) , (const, 0x4bb, 4), (stack, 0xfffffffffffffe5c, 4) MULTIEQUAL (stack, 0xfffffffffffffe5c, 4) , (stack, 0xfffffffffffffe5c, 4) , (stack, 0xfffffffffffffe5c, 4)]
[(stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x4bc, 4), (stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x4bb, 4), (stack, 0xfffffffffffffe60, 8) MULTIEQUAL (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8)]
[(stack, 0xfffffffffffffe68, 8) INDIRECT (stack, 0xfffffffffffffe68, 8) , (const, 0x4bc, 4), (stack, 0xfffffffffffffe68, 8) INDIRECT (stack, 0xfffffffffffffe68, 8) , (const, 0x4bb, 4), (stack, 0xfffffffffffffe68, 8) MULTIEQUAL (stack, 0xfffffffffffffe68, 8) , (stack, 0xfffffffffffffe68, 8) , (stack, 0xfffffffffffffe68, 8)]
[(stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0x4bc, 4), (stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0x4bb, 4), (stack, 0xfffffffffffffe70, 8) MULTIEQUAL (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8)]
[(stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0x4bc, 4), (stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0x4bb, 4), (stack, 0xfffffffffffffe78, 8) MULTIEQUAL (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8)]
[(stack, 0xfffffffffffffe80, 4) INDIRECT (stack, 0xfffffffffffffe80, 4) , (const, 0x4bc, 4), (stack, 0xfffffffffffffe80, 4) INDIRECT (stack, 0xfffffffffffffe80, 4) , (const, 0x4bb, 4), (stack, 0xfffffffffffffe80, 4) MULTIEQUAL (stack, 0xfffffffffffffe80, 4) , (stack, 0xfffffffffffffe80, 4) , (stack, 0xfffffffffffffe80, 4)]
[(stack, 0xfffffffffffffe84, 4) INDIRECT (stack, 0xfffffffffffffe84, 4) , (const, 0x4bc, 4), (stack, 0xfffffffffffffe84, 4) INDIRECT (stack, 0xfffffffffffffe84, 4) , (const, 0x4bb, 4), (stack, 0xfffffffffffffe84, 4) MULTIEQUAL (stack, 0xfffffffffffffe84, 4) , (stack, 0xfffffffffffffe84, 4) , (stack, 0xfffffffffffffe84, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x4bc, 4), (stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x4bb, 4), (stack, 0xfffffffffffffe88, 8) MULTIEQUAL (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x4bc, 4), (stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x4bb, 4), (stack, 0xfffffffffffffe90, 8) MULTIEQUAL (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8)]
[(stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x4bc, 4), (stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x4bb, 4), (stack, 0xfffffffffffffe98, 8) MULTIEQUAL (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8)]
[(stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x4bc, 4), (stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x4bb, 4), (stack, 0xfffffffffffffea0, 8) MULTIEQUAL (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8)]
[(stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x4bc, 4), (stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x4bb, 4), (stack, 0xfffffffffffffea8, 8) MULTIEQUAL (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x4bc, 4), (stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x4bb, 4), (stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x4bc, 4), (stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x4bb, 4), (stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4)]
[(stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x4bc, 4), (stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x4bb, 4), (stack, 0xfffffffffffffebc, 4) MULTIEQUAL (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x4bc, 4), (stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x4bb, 4), (stack, 0xfffffffffffffec0, 8) MULTIEQUAL (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8)]
[(stack, 0xfffffffffffffeca, 1) INDIRECT (stack, 0xfffffffffffffeca, 1) , (const, 0x4bc, 4), (stack, 0xfffffffffffffeca, 1) INDIRECT (stack, 0xfffffffffffffeca, 1) , (const, 0x4bb, 4), (stack, 0xfffffffffffffeca, 1) MULTIEQUAL (stack, 0xfffffffffffffeca, 1) , (stack, 0xfffffffffffffeca, 1) , (stack, 0xfffffffffffffeca, 1)]
[(stack, 0xfffffffffffffecb, 1) INDIRECT (stack, 0xfffffffffffffecb, 1) , (const, 0x4bc, 4), (stack, 0xfffffffffffffecb, 1) INDIRECT (stack, 0xfffffffffffffecb, 1) , (const, 0x4bb, 4), (stack, 0xfffffffffffffecb, 1) MULTIEQUAL (stack, 0xfffffffffffffecb, 1) , (stack, 0xfffffffffffffecb, 1) , (stack, 0xfffffffffffffecb, 1)]
[(stack, 0xfffffffffffffecc, 4) INDIRECT (stack, 0xfffffffffffffecc, 4) , (const, 0x4bc, 4), (stack, 0xfffffffffffffecc, 4) INDIRECT (stack, 0xfffffffffffffecc, 4) , (const, 0x4bb, 4), (stack, 0xfffffffffffffecc, 4) MULTIEQUAL (stack, 0xfffffffffffffecc, 4) , (stack, 0xfffffffffffffecc, 4) , (stack, 0xfffffffffffffecc, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x4bc, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x4bb, 4), (stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x4bc, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x4bb, 4), (stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x4bc, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x4bb, 4), (stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffef0, 4) INDIRECT (stack, 0xfffffffffffffef0, 4) , (const, 0x4bc, 4), (stack, 0xfffffffffffffef0, 4) INDIRECT (stack, 0xfffffffffffffef0, 4) , (const, 0x4bb, 4), (stack, 0xfffffffffffffef0, 4) MULTIEQUAL (stack, 0xfffffffffffffef0, 4) , (stack, 0xfffffffffffffef0, 4) , (stack, 0xfffffffffffffef0, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x4bc, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x4bb, 4), (stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xffffffffffffff00, 4) INDIRECT (stack, 0xffffffffffffff00, 4) , (const, 0x4bc, 4), (stack, 0xffffffffffffff00, 4) INDIRECT (stack, 0xffffffffffffff00, 4) , (const, 0x4bb, 4), (stack, 0xffffffffffffff00, 4) MULTIEQUAL (stack, 0xffffffffffffff00, 4) , (stack, 0xffffffffffffff00, 4) , (stack, 0xffffffffffffff00, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x4bc, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x4bb, 4), (stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x4bc, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x4bb, 4), (stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x4bc, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x4bb, 4), (stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x4bc, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x4bb, 4), (stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x4bc, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x4bb, 4), (stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x4bc, 4), (stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x4bb, 4), (stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x4bc, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x4bb, 4), (stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x4bc, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x4bb, 4), (stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x4bc, 4), (stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x4bb, 4), (stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[ ---  CALL (ram, 0x224170, 8) , (unique, 0x10000ce1, 8), (unique, 0x10000ce1, 8) COPY (stack, 0xfffffffffffffed8, 8), (stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[ ---  CBRANCH (ram, 0x1eebdc, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xfffffffffffffed0, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x4bc, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x4bb, 4), (stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffed0, 8)]
[(ram, 0x4c2e78, 8) COPY (ram, 0x4c2e78, 8), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x4ce, 4)]
[(ram, 0x4c5f40, 4) COPY (ram, 0x4c5f40, 4), (ram, 0x4c5f40, 4) INDIRECT (ram, 0x4c5f40, 4) , (const, 0x4ce, 4)]
[(ram, 0x4c5f44, 4) COPY (ram, 0x4c5f44, 4), (ram, 0x4c5f44, 4) INDIRECT (ram, 0x4c5f44, 4) , (const, 0x4ce, 4)]
[(ram, 0x4c5f50, 8) COPY (ram, 0x4c5f50, 8), (ram, 0x4c5f50, 8) INDIRECT (ram, 0x4c5f50, 8) , (const, 0x4ce, 4)]
[(ram, 0x4c5f58, 8) COPY (ram, 0x4c5f58, 8), (ram, 0x4c5f58, 8) INDIRECT (ram, 0x4c5f58, 8) , (const, 0x4ce, 4)]
[(ram, 0x4c5f60, 4) COPY (ram, 0x4c5f60, 4), (ram, 0x4c5f60, 4) INDIRECT (ram, 0x4c5f60, 4) , (const, 0x4ce, 4)]
[(ram, 0x4c5f64, 4) COPY (ram, 0x4c5f64, 4), (ram, 0x4c5f64, 4) INDIRECT (ram, 0x4c5f64, 4) , (const, 0x4ce, 4)]
[(ram, 0x4c8718, 8) COPY (ram, 0x4c8718, 8), (ram, 0x4c8718, 8) INDIRECT (ram, 0x4c8718, 8) , (const, 0x4ce, 4)]
[(ram, 0x4c8790, 4) COPY (ram, 0x4c8790, 4), (ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x4ce, 4)]
[(ram, 0x4c87a0, 4) COPY (ram, 0x4c87a0, 4), (ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x4ce, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 4), (register, 0x0, 4) COPY (const, 0x0, 4)]
[(ram, 0x4c2e78, 8) COPY (ram, 0x4c2e78, 8)]
[(ram, 0x4c5f40, 4) COPY (ram, 0x4c5f40, 4)]
[(ram, 0x4c5f44, 4) COPY (ram, 0x4c5f44, 4)]
[(ram, 0x4c5f50, 8) COPY (ram, 0x4c5f50, 8)]
[(ram, 0x4c5f58, 8) COPY (ram, 0x4c5f58, 8)]
[(ram, 0x4c5f60, 4) COPY (ram, 0x4c5f60, 4)]
[(ram, 0x4c5f64, 4) COPY (ram, 0x4c5f64, 4)]
[(ram, 0x4c8718, 8) COPY (ram, 0x4c8718, 8)]
[(ram, 0x4c8790, 4) COPY (ram, 0x4c8790, 4)]
[(ram, 0x4c87a0, 4) COPY (ram, 0x4c87a0, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 4), (register, 0x0, 4) COPY (const, 0xfffffffe, 4)]
