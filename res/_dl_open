[ ---  CBRANCH (ram, 0x48ce47, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x100000b7, 4) , (const, 0x0, 4), (unique, 0x100000b7, 4) INT_AND (register, 0x30, 4) , (const, 0x3, 4)]
[ ---  CALL (ram, 0x489410, 8) , (const, 0x16, 8) , (register, 0x38, 8) , (const, 0x0, 8) , (unique, 0x100001de, 8), (unique, 0x100001de, 8) COPY (const, 0x4b51c5, 8)]
[(ram, 0x4c4f08, 8) COPY (ram, 0x4c4f08, 8), (ram, 0x4c4f08, 8) INDIRECT (ram, 0x4c4f08, 8) , (const, 0x1bb, 4)]
[(ram, 0x4c4f70, 8) COPY (ram, 0x4c4f70, 8), (ram, 0x4c4f70, 8) INDIRECT (ram, 0x4c4f70, 8) , (const, 0x1bb, 4)]
[(ram, 0x4c8728, 1) COPY (ram, 0x4c8728, 1), (ram, 0x4c8728, 1) INDIRECT (ram, 0x4c8728, 1) , (const, 0x1bb, 4)]
[ ---  RETURN (const, 0x1, 4)]
[ ---  CBRANCH (ram, 0x48cc93, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4c4f08, 8) , (const, 0x0, 8)]
[(ram, 0x4c4f08, 8) INDIRECT (ram, 0x4c4f08, 8) , (const, 0x39, 4)]
[(ram, 0x4c4f70, 8) INDIRECT (ram, 0x4c4f70, 8) , (const, 0x39, 4)]
[(ram, 0x4c8728, 1) INDIRECT (ram, 0x4c8728, 1) , (const, 0x39, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x39, 4)]
[(stack, 0xffffffffffffffc0, 4) INDIRECT (stack, 0xffffffffffffffc0, 4) , (const, 0x39, 4)]
[ ---  CALL (ram, 0x0, 8) , (unique, 0x10000216, 8), (unique, 0x10000216, 8) PTRSUB (const, 0x0, 8) , (const, 0x4c60e0, 8)]
[(stack, 0xffffffffffffffc0, 4) MULTIEQUAL (stack, 0xffffffffffffffc0, 4) , (stack, 0xffffffffffffffc0, 4)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(ram, 0x4c8728, 1) MULTIEQUAL (ram, 0x4c8728, 1) , (ram, 0x4c8728, 1)]
[(ram, 0x4c4f70, 8) MULTIEQUAL (ram, 0x4c4f70, 8) , (ram, 0x4c4f70, 8)]
[(ram, 0x4c4f08, 8) MULTIEQUAL (ram, 0x4c4f08, 8) , (ram, 0x4c4f08, 8)]
[ ---  CBRANCH (ram, 0x48cd70, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x8, 8) , (const, 0xffffffffffffffff, 8)]
[ ---  CBRANCH (ram, 0x48cd86, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4c4f70, 8) , (const, 0x0, 8)]
[(ram, 0x4c4f08, 8) INDIRECT (ram, 0x4c4f08, 8) , (const, 0x199, 4)]
[(ram, 0x4c4f70, 8) INDIRECT (ram, 0x4c4f70, 8) , (const, 0x199, 4)]
[(ram, 0x4c8728, 1) INDIRECT (ram, 0x4c8728, 1) , (const, 0x199, 4)]
[ ---  CALL (ram, 0x0, 8) , (unique, 0x10000226, 8), (unique, 0x10000226, 8) PTRSUB (const, 0x0, 8) , (const, 0x4c60e0, 8)]
[ ---  CALL (ram, 0x489410, 8) , (const, 0x16, 8) , (register, 0x38, 8) , (const, 0x0, 8) , (unique, 0x100001e6, 8), (unique, 0x100001e6, 8) COPY (const, 0x4b5300, 8)]
[(ram, 0x4c4f08, 8) COPY (ram, 0x4c4f08, 8), (ram, 0x4c4f08, 8) INDIRECT (ram, 0x4c4f08, 8) , (const, 0x1a9, 4), (ram, 0x4c4f08, 8) MULTIEQUAL (ram, 0x4c4f08, 8) , (ram, 0x4c4f08, 8)]
[(ram, 0x4c4f70, 8) COPY (ram, 0x4c4f70, 8), (ram, 0x4c4f70, 8) INDIRECT (ram, 0x4c4f70, 8) , (const, 0x1a9, 4), (ram, 0x4c4f70, 8) MULTIEQUAL (ram, 0x4c4f70, 8) , (ram, 0x4c4f70, 8)]
[(ram, 0x4c8728, 1) COPY (ram, 0x4c8728, 1), (ram, 0x4c8728, 1) INDIRECT (ram, 0x4c8728, 1) , (const, 0x1a9, 4), (ram, 0x4c8728, 1) MULTIEQUAL (ram, 0x4c8728, 1) , (ram, 0x4c8728, 1)]
[ ---  RETURN (const, 0x1, 4)]
[ ---  CBRANCH (ram, 0x48cda0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x58b00, 8) , (const, 0x0, 8), (unique, 0x58b00, 8) INT_AND (unique, 0x3100, 8) , (const, 0xfffffffffffffffd, 8), (unique, 0x3100, 8) INT_ADD (register, 0x8, 8) , (const, 0x2, 8)]
[ ---  CALL (ram, 0x489410, 8) , (const, 0x16, 8) , (register, 0x38, 8) , (const, 0x0, 8) , (unique, 0x100001ee, 8), (unique, 0x100001ee, 8) COPY (const, 0x4b5330, 8)]
[(ram, 0x4c4f08, 8) COPY (ram, 0x4c4f08, 8), (ram, 0x4c4f08, 8) INDIRECT (ram, 0x4c4f08, 8) , (const, 0x189, 4)]
[(ram, 0x4c4f70, 8) COPY (ram, 0x4c4f70, 8), (ram, 0x4c4f70, 8) INDIRECT (ram, 0x4c4f70, 8) , (const, 0x189, 4)]
[(ram, 0x4c8728, 1) COPY (ram, 0x4c8728, 1), (ram, 0x4c8728, 1) INDIRECT (ram, 0x4c8728, 1) , (const, 0x189, 4)]
[ ---  RETURN (const, 0x1, 4)]
[(register, 0x0, 4) CALL (ram, 0x489470, 8) , (unique, 0x3800, 8) , (unique, 0x100001c6, 8) , (unique, 0x3800, 8), (unique, 0x100001c6, 8) PTRSUB (const, 0x0, 8) , (const, 0x48cfc0, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff98, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff78, 8)]
[(ram, 0x4c4f08, 8) INDIRECT (ram, 0x4c4f08, 8) , (const, 0x79, 4), (ram, 0x4c4f08, 8) INDIRECT (ram, 0x4c4f08, 8) , (const, 0x74, 4)]
[(ram, 0x4c4f70, 8) INDIRECT (ram, 0x4c4f70, 8) , (const, 0x79, 4), (ram, 0x4c4f70, 8) INDIRECT (ram, 0x4c4f70, 8) , (const, 0x74, 4)]
[(ram, 0x4c8728, 1) INDIRECT (ram, 0x4c8728, 1) , (const, 0x79, 4), (ram, 0x4c8728, 1) INDIRECT (ram, 0x4c8728, 1) , (const, 0x74, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x79, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x74, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x79, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (unique, 0x10000256, 8) , (const, 0x74, 4), (unique, 0x10000256, 8) COPY (register, 0x38, 8)]
[(stack, 0xffffffffffffffa0, 4) INDIRECT (stack, 0xffffffffffffffa0, 4) , (const, 0x79, 4), (stack, 0xffffffffffffffa0, 4) INDIRECT (unique, 0x1000025e, 4) , (const, 0x74, 4), (unique, 0x1000025e, 4) COPY (register, 0x30, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x79, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (unique, 0x10000262, 8) , (const, 0x74, 4), (unique, 0x10000262, 8) COPY (register, 0x10, 8)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x79, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x74, 4), (stack, 0xffffffffffffffb0, 8) COPY (const, 0x0, 8)]
[(stack, 0xffffffffffffffc0, 4) INDIRECT (stack, 0xffffffffffffffc0, 4) , (const, 0x79, 4), (stack, 0xffffffffffffffc0, 4) INDIRECT (stack, 0xffffffffffffffc0, 4) , (const, 0x74, 4)]
[(stack, 0xffffffffffffffc4, 4) INDIRECT (stack, 0xffffffffffffffc4, 4) , (const, 0x79, 4), (stack, 0xffffffffffffffc4, 4) INDIRECT (unique, 0x10000272, 4) , (const, 0x74, 4), (unique, 0x10000272, 4) COPY (register, 0x80, 4)]
[(stack, 0xffffffffffffffc8, 8) INDIRECT (stack, 0xffffffffffffffc8, 8) , (const, 0x79, 4), (stack, 0xffffffffffffffc8, 8) INDIRECT (unique, 0x10000276, 8) , (const, 0x74, 4), (unique, 0x10000276, 8) COPY (register, 0x88, 8)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0x79, 4), (stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0x74, 4), (stack, 0xffffffffffffffd0, 8) COPY (stack, 0x8, 8)]
[ ---  CALL (ram, 0x4888b0, 8)]
[ ---  CBRANCH (ram, 0x48cd23, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (const, 0xffffffffffffffff, 8) , (stack, 0xffffffffffffffb8, 8), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x79, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (unique, 0x1000026a, 8) , (const, 0x74, 4), (unique, 0x1000026a, 8) COPY (register, 0x8, 8)]
[(ram, 0x4c4f08, 8) INDIRECT (ram, 0x4c4f08, 8) , (const, 0xb8, 4)]
[(ram, 0x4c4f70, 8) INDIRECT (ram, 0x4c4f70, 8) , (const, 0xb8, 4)]
[(ram, 0x4c8728, 1) INDIRECT (ram, 0x4c8728, 1) , (const, 0xb8, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000027e, 8) , (stack, 0xffffffffffffffc0, 4), (unique, 0x1000027e, 8) CAST (unique, 0x3a00, 8), (unique, 0x3a00, 8) PTRADD (unique, 0x1000022e, 8) , (unique, 0x1000024e, 8) , (const, 0x1, 8), (unique, 0x1000024e, 8) INT_ADD (register, 0x0, 8) , (const, 0x1c, 8), (unique, 0x1000022e, 8) PTRSUB (const, 0x0, 8) , (const, 0x4c6180, 8), (register, 0x0, 8) INT_MULT (stack, 0xffffffffffffffb8, 8) , (const, 0x90, 8)]
[(ram, 0x4c8728, 1) MULTIEQUAL (ram, 0x4c8728, 1) , (ram, 0x4c8728, 1)]
[(ram, 0x4c4f70, 8) MULTIEQUAL (ram, 0x4c4f70, 8) , (ram, 0x4c4f70, 8)]
[(ram, 0x4c4f08, 8) MULTIEQUAL (ram, 0x4c4f08, 8) , (ram, 0x4c4f08, 8)]
[ ---  CBRANCH (ram, 0x48cdc0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffff80, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x48cde1, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffffb0, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x48ce18, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x100001a7, 4) , (const, 0x0, 4), (unique, 0x100001a7, 4) INT_AND (register, 0x30, 4) , (const, 0x8000000, 4)]
[(ram, 0x4c4f08, 8) INDIRECT (ram, 0x4c4f08, 8) , (const, 0x12f, 4), (ram, 0x4c4f08, 8) MULTIEQUAL (ram, 0x4c4f08, 8) , (ram, 0x4c4f08, 8)]
[(ram, 0x4c4f70, 8) INDIRECT (ram, 0x4c4f70, 8) , (const, 0x12f, 4), (ram, 0x4c4f70, 8) MULTIEQUAL (ram, 0x4c4f70, 8) , (ram, 0x4c4f70, 8)]
[(ram, 0x4c8728, 1) INDIRECT (ram, 0x4c8728, 1) , (const, 0x12f, 4), (ram, 0x4c8728, 1) MULTIEQUAL (ram, 0x4c8728, 1) , (ram, 0x4c8728, 1)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x12f, 4), (stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffffa0, 4) INDIRECT (stack, 0xffffffffffffffa0, 4) , (const, 0x12f, 4), (stack, 0xffffffffffffffa0, 4) MULTIEQUAL (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x12f, 4), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x12f, 4), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x12f, 4), (stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffc4, 4) INDIRECT (stack, 0xffffffffffffffc4, 4) , (const, 0x12f, 4), (stack, 0xffffffffffffffc4, 4) MULTIEQUAL (stack, 0xffffffffffffffc4, 4) , (stack, 0xffffffffffffffc4, 4)]
[(stack, 0xffffffffffffffc8, 8) INDIRECT (stack, 0xffffffffffffffc8, 8) , (const, 0x12f, 4), (stack, 0xffffffffffffffc8, 8) MULTIEQUAL (stack, 0xffffffffffffffc8, 8) , (stack, 0xffffffffffffffc8, 8)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0x12f, 4), (stack, 0xffffffffffffffd0, 8) MULTIEQUAL (stack, 0xffffffffffffffd0, 8) , (stack, 0xffffffffffffffd0, 8)]
[ ---  CALL (ram, 0x48ec20, 8)]
[(ram, 0x4c4f08, 8) INDIRECT (ram, 0x4c4f08, 8) , (const, 0x13f, 4), (ram, 0x4c4f08, 8) MULTIEQUAL (ram, 0x4c4f08, 8) , (ram, 0x4c4f08, 8)]
[(ram, 0x4c4f70, 8) INDIRECT (ram, 0x4c4f70, 8) , (const, 0x13f, 4), (ram, 0x4c4f70, 8) MULTIEQUAL (ram, 0x4c4f70, 8) , (ram, 0x4c4f70, 8)]
[(ram, 0x4c8728, 1) INDIRECT (ram, 0x4c8728, 1) , (const, 0x13f, 4), (ram, 0x4c8728, 1) MULTIEQUAL (ram, 0x4c8728, 1) , (ram, 0x4c8728, 1)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x13f, 4), (stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffffa0, 4) INDIRECT (stack, 0xffffffffffffffa0, 4) , (const, 0x13f, 4), (stack, 0xffffffffffffffa0, 4) MULTIEQUAL (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x13f, 4), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x13f, 4), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x13f, 4), (stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffc4, 4) INDIRECT (stack, 0xffffffffffffffc4, 4) , (const, 0x13f, 4), (stack, 0xffffffffffffffc4, 4) MULTIEQUAL (stack, 0xffffffffffffffc4, 4) , (stack, 0xffffffffffffffc4, 4)]
[(stack, 0xffffffffffffffc8, 8) INDIRECT (stack, 0xffffffffffffffc8, 8) , (const, 0x13f, 4), (stack, 0xffffffffffffffc8, 8) MULTIEQUAL (stack, 0xffffffffffffffc8, 8) , (stack, 0xffffffffffffffc8, 8)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0x13f, 4), (stack, 0xffffffffffffffd0, 8) MULTIEQUAL (stack, 0xffffffffffffffd0, 8) , (stack, 0xffffffffffffffd0, 8)]
[ ---  CBRANCH (ram, 0x48ce28, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000286, 8), (unique, 0x10000286, 8) INT_ADD (register, 0x0, 8) , (const, 0x18, 8), (register, 0x0, 8) CALL (ram, 0x458e30, 8) , (const, 0x0, 8) , (stack, 0xffffffffffffffb8, 8), (stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x177, 4)]
[(stack, 0xffffffffffffffa0, 4) INDIRECT (stack, 0xffffffffffffffa0, 4) , (const, 0x177, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x177, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x177, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x177, 4)]
[(stack, 0xffffffffffffffc4, 4) INDIRECT (stack, 0xffffffffffffffc4, 4) , (const, 0x177, 4)]
[(stack, 0xffffffffffffffc8, 8) INDIRECT (stack, 0xffffffffffffffc8, 8) , (const, 0x177, 4)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0x177, 4)]
[ ---  CALL (ram, 0x403170, 8) , (unique, 0x100001f6, 8) , (unique, 0x100001ce, 8) , (const, 0x371, 4) , (unique, 0x10000206, 8), (unique, 0x10000206, 8) COPY (const, 0x4b5488, 8), (unique, 0x100001f6, 8) COPY (const, 0x4b5358, 8), (unique, 0x100001ce, 8) COPY (const, 0x4b5192, 8)]
[(ram, 0x4c4f08, 8) COPY (ram, 0x4c4f08, 8), (ram, 0x4c4f08, 8) INDIRECT (ram, 0x4c4f08, 8) , (const, 0x177, 4)]
[(ram, 0x4c4f70, 8) COPY (ram, 0x4c4f70, 8), (ram, 0x4c4f70, 8) INDIRECT (ram, 0x4c4f70, 8) , (const, 0x177, 4)]
[(ram, 0x4c8728, 1) COPY (ram, 0x4c8728, 1), (ram, 0x4c8728, 1) INDIRECT (ram, 0x4c8728, 1) , (const, 0x177, 4)]
[ ---  RETURN (const, 0x1, 4)]
[ ---  CBRANCH (ram, 0x48ce05, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4c4f70, 8) , (const, 0x0, 8)]
[(ram, 0x4c4f08, 8) INDIRECT (ram, 0x4c4f08, 8) , (const, 0x15c, 4)]
[(ram, 0x4c4f70, 8) INDIRECT (ram, 0x4c4f70, 8) , (const, 0x15c, 4)]
[(ram, 0x4c8728, 1) INDIRECT (ram, 0x4c8728, 1) , (const, 0x15c, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x15c, 4)]
[(stack, 0xffffffffffffffa0, 4) INDIRECT (stack, 0xffffffffffffffa0, 4) , (const, 0x15c, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x15c, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x15c, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x15c, 4)]
[(stack, 0xffffffffffffffc4, 4) INDIRECT (stack, 0xffffffffffffffc4, 4) , (const, 0x15c, 4)]
[(stack, 0xffffffffffffffc8, 8) INDIRECT (stack, 0xffffffffffffffc8, 8) , (const, 0x15c, 4)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0x15c, 4)]
[ ---  CALL (ram, 0x0, 8)]
[(ram, 0x4c4f08, 8) INDIRECT (ram, 0x4c4f08, 8) , (const, 0x16c, 4), (ram, 0x4c4f08, 8) MULTIEQUAL (ram, 0x4c4f08, 8) , (ram, 0x4c4f08, 8)]
[(ram, 0x4c4f70, 8) INDIRECT (ram, 0x4c4f70, 8) , (const, 0x16c, 4), (ram, 0x4c4f70, 8) MULTIEQUAL (ram, 0x4c4f70, 8) , (ram, 0x4c4f70, 8)]
[(ram, 0x4c8728, 1) INDIRECT (ram, 0x4c8728, 1) , (const, 0x16c, 4), (ram, 0x4c8728, 1) MULTIEQUAL (ram, 0x4c8728, 1) , (ram, 0x4c8728, 1)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x16c, 4), (stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffffa0, 4) INDIRECT (stack, 0xffffffffffffffa0, 4) , (const, 0x16c, 4), (stack, 0xffffffffffffffa0, 4) MULTIEQUAL (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x16c, 4), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x16c, 4), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x16c, 4), (stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffc4, 4) INDIRECT (stack, 0xffffffffffffffc4, 4) , (const, 0x16c, 4), (stack, 0xffffffffffffffc4, 4) MULTIEQUAL (stack, 0xffffffffffffffc4, 4) , (stack, 0xffffffffffffffc4, 4)]
[(stack, 0xffffffffffffffc8, 8) INDIRECT (stack, 0xffffffffffffffc8, 8) , (const, 0x16c, 4), (stack, 0xffffffffffffffc8, 8) MULTIEQUAL (stack, 0xffffffffffffffc8, 8) , (stack, 0xffffffffffffffc8, 8)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0x16c, 4), (stack, 0xffffffffffffffd0, 8) MULTIEQUAL (stack, 0xffffffffffffffd0, 8) , (stack, 0xffffffffffffffd0, 8)]
[ ---  CALL (ram, 0x4893c0, 8) , (register, 0x0, 4) , (unique, 0x3800, 8) , (const, 0x0, 8)]
[(stack, 0xffffffffffffffd0, 8) MULTIEQUAL (stack, 0xffffffffffffffd0, 8) , (stack, 0xffffffffffffffd0, 8)]
[(stack, 0xffffffffffffffc8, 8) MULTIEQUAL (stack, 0xffffffffffffffc8, 8) , (stack, 0xffffffffffffffc8, 8)]
[(stack, 0xffffffffffffffc4, 4) MULTIEQUAL (stack, 0xffffffffffffffc4, 4) , (stack, 0xffffffffffffffc4, 4)]
[(stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 4) MULTIEQUAL (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(ram, 0x4c4f70, 8) MULTIEQUAL (ram, 0x4c4f70, 8) , (ram, 0x4c4f70, 8)]
[(ram, 0x4c4f08, 8) MULTIEQUAL (ram, 0x4c4f08, 8) , (ram, 0x4c4f08, 8)]
[(ram, 0x4c8728, 1) COPY (const, 0x1, 1)]
[ ---  BRANCH (ram, 0x48cdd2, 1)]
[(ram, 0x4c4f08, 8) INDIRECT (ram, 0x4c4f08, 8) , (const, 0xd4, 4)]
[(ram, 0x4c4f70, 8) INDIRECT (ram, 0x4c4f70, 8) , (const, 0xd4, 4)]
[(ram, 0x4c8728, 1) INDIRECT (ram, 0x4c8728, 1) , (const, 0xd4, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0xd4, 4)]
[(stack, 0xffffffffffffffa0, 4) INDIRECT (stack, 0xffffffffffffffa0, 4) , (const, 0xd4, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0xd4, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0xd4, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0xd4, 4)]
[(stack, 0xffffffffffffffc4, 4) INDIRECT (stack, 0xffffffffffffffc4, 4) , (const, 0xd4, 4)]
[(stack, 0xffffffffffffffc8, 8) INDIRECT (stack, 0xffffffffffffffc8, 8) , (const, 0xd4, 4)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0xd4, 4)]
[ ---  CBRANCH (ram, 0x48ce5d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000028e, 8), (unique, 0x1000028e, 8) INT_ADD (register, 0x0, 8) , (const, 0x18, 8), (register, 0x0, 8) CALL (ram, 0x458e30, 8) , (const, 0x0, 8)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x111, 4)]
[(stack, 0xffffffffffffffa0, 4) INDIRECT (stack, 0xffffffffffffffa0, 4) , (const, 0x111, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x111, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x111, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x111, 4)]
[(stack, 0xffffffffffffffc4, 4) INDIRECT (stack, 0xffffffffffffffc4, 4) , (const, 0x111, 4)]
[(stack, 0xffffffffffffffc8, 8) INDIRECT (stack, 0xffffffffffffffc8, 8) , (const, 0x111, 4)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0x111, 4)]
[ ---  CALL (ram, 0x403170, 8) , (unique, 0x100001fe, 8) , (unique, 0x100001d6, 8) , (const, 0x37a, 4) , (unique, 0x1000020e, 8), (unique, 0x1000020e, 8) COPY (const, 0x4b5488, 8), (unique, 0x100001fe, 8) COPY (const, 0x4b5358, 8), (unique, 0x100001d6, 8) COPY (const, 0x4b5192, 8)]
[(ram, 0x4c4f08, 8) COPY (ram, 0x4c4f08, 8), (ram, 0x4c4f08, 8) INDIRECT (ram, 0x4c4f08, 8) , (const, 0x111, 4)]
[(ram, 0x4c4f70, 8) COPY (ram, 0x4c4f70, 8), (ram, 0x4c4f70, 8) INDIRECT (ram, 0x4c4f70, 8) , (const, 0x111, 4)]
[(ram, 0x4c8728, 1) COPY (ram, 0x4c8728, 1), (ram, 0x4c8728, 1) INDIRECT (ram, 0x4c8728, 1) , (const, 0x111, 4)]
[ ---  RETURN (const, 0x1, 4)]
[ ---  CBRANCH (ram, 0x48cd57, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4c4f70, 8) , (const, 0x0, 8)]
[(ram, 0x4c4f08, 8) INDIRECT (ram, 0x4c4f08, 8) , (const, 0xf1, 4)]
[(ram, 0x4c4f70, 8) INDIRECT (ram, 0x4c4f70, 8) , (const, 0xf1, 4)]
[(ram, 0x4c8728, 1) INDIRECT (ram, 0x4c8728, 1) , (const, 0xf1, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0xf1, 4)]
[(stack, 0xffffffffffffffa0, 4) INDIRECT (stack, 0xffffffffffffffa0, 4) , (const, 0xf1, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0xf1, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0xf1, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0xf1, 4)]
[(stack, 0xffffffffffffffc4, 4) INDIRECT (stack, 0xffffffffffffffc4, 4) , (const, 0xf1, 4)]
[(stack, 0xffffffffffffffc8, 8) INDIRECT (stack, 0xffffffffffffffc8, 8) , (const, 0xf1, 4)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0xf1, 4)]
[ ---  CALL (ram, 0x0, 8) , (unique, 0x1000021e, 8), (unique, 0x1000021e, 8) PTRSUB (const, 0x0, 8) , (const, 0x4c60e0, 8)]
[(ram, 0x4c4f08, 8) COPY (ram, 0x4c4f08, 8), (ram, 0x4c4f08, 8) MULTIEQUAL (ram, 0x4c4f08, 8) , (ram, 0x4c4f08, 8)]
[(ram, 0x4c4f70, 8) COPY (ram, 0x4c4f70, 8), (ram, 0x4c4f70, 8) MULTIEQUAL (ram, 0x4c4f70, 8) , (ram, 0x4c4f70, 8)]
[(ram, 0x4c8728, 1) COPY (ram, 0x4c8728, 1), (ram, 0x4c8728, 1) MULTIEQUAL (ram, 0x4c8728, 1) , (ram, 0x4c8728, 1)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) COPY (stack, 0xffffffffffffffb0, 8), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
