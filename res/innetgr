[(register, 0x20a, 1) COPY (const, 0x0, 1)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (register, 0x110, 8) , (const, 0x5, 8) , (const, 0x8, 8)]
[(register, 0x206, 1) INT_NOTEQUAL (ram, 0x4f0ad4, 4) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x23d398, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (ram, 0x4f0ad4, 4) , (const, 0x1, 4)]
[ ---  CBRANCH (ram, 0x23d1c2, 1) , (register, 0x206, 1)]
[ ---  CBRANCH (ram, 0x23d1b8, 1) , (unique, 0xd080, 1), (unique, 0xd080, 1) INT_SLESS (register, 0x0, 4) , (const, 0x65, 4), (register, 0x0, 4) INT_ADD (ram, 0x4f0ad4, 4) , (const, 0x1, 4)]
[(ram, 0x4f0ad4, 4) COPY (const, 0x0, 4)]
[(ram, 0x4f0ad4, 4) MULTIEQUAL (ram, 0x4f0ad4, 4) , (ram, 0x4f0ad4, 4)]
[ ---  CBRANCH (ram, 0x23cf27, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4f096e, 1) , (const, 0x0, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x40b, 4)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x40b, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x40b, 4)]
[(ram, 0x4ef7c0, 8) INDIRECT (ram, 0x4ef7c0, 8) , (const, 0x40b, 4)]
[(ram, 0x4ef7c8, 1) INDIRECT (ram, 0x4ef7c8, 1) , (const, 0x40b, 4)]
[(ram, 0x4f096e, 1) INDIRECT (ram, 0x4f096e, 1) , (const, 0x40b, 4)]
[(ram, 0x4f0ad4, 4) INDIRECT (ram, 0x4f0ad4, 4) , (const, 0x40b, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x40b, 4)]
[(stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x40b, 4)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x40b, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x40b, 4)]
[(stack, 0xfffffffffffffb70, 8) INDIRECT (stack, 0xfffffffffffffb70, 8) , (const, 0x40b, 4)]
[(stack, 0xfffffffffffffb78, 8) INDIRECT (stack, 0xfffffffffffffb78, 8) , (const, 0x40b, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x40b, 4)]
[(stack, 0xfffffffffffffba0, 8) INDIRECT (stack, 0xfffffffffffffba0, 8) , (const, 0x40b, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x40b, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x40b, 4)]
[ ---  CBRANCH (ram, 0x23d18d, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x2615f0, 8) , (register, 0x38, 8) , (register, 0x30, 8) , (register, 0x10, 8) , (register, 0x8, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8) , (unique, 0xbd80, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffba0, 8) MULTIEQUAL (stack, 0xfffffffffffffba0, 8) , (stack, 0xfffffffffffffba0, 8) , (stack, 0xfffffffffffffba0, 8) , (stack, 0xfffffffffffffba0, 8)]
[(stack, 0xfffffffffffffb98, 8) MULTIEQUAL (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8)]
[(stack, 0xfffffffffffffb78, 8) MULTIEQUAL (stack, 0xfffffffffffffb78, 8) , (stack, 0xfffffffffffffb78, 8) , (stack, 0xfffffffffffffb78, 8) , (stack, 0xfffffffffffffb78, 8)]
[(stack, 0xfffffffffffffb70, 8) MULTIEQUAL (stack, 0xfffffffffffffb70, 8) , (stack, 0xfffffffffffffb70, 8) , (stack, 0xfffffffffffffb70, 8) , (stack, 0xfffffffffffffb70, 8)]
[(stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb60, 8) MULTIEQUAL (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8)]
[(stack, 0xfffffffffffffb58, 4) MULTIEQUAL (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(ram, 0x4f0ad4, 4) MULTIEQUAL (ram, 0x4f0ad4, 4) , (ram, 0x4f0ad4, 4) , (register, 0x0, 4) , (ram, 0x4f0ad4, 4)]
[(ram, 0x4f096e, 1) MULTIEQUAL (ram, 0x4f096e, 1) , (ram, 0x4f096e, 1) , (ram, 0x4f096e, 1) , (ram, 0x4f096e, 1)]
[(ram, 0x4ef7c8, 1) MULTIEQUAL (ram, 0x4ef7c8, 1) , (ram, 0x4ef7c8, 1) , (ram, 0x4ef7c8, 1) , (ram, 0x4ef7c8, 1)]
[(ram, 0x4ef7c0, 8) MULTIEQUAL (ram, 0x4ef7c0, 8) , (ram, 0x4ef7c0, 8) , (ram, 0x4ef7c0, 8) , (ram, 0x4ef7c0, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x20a, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1) , (register, 0x20a, 1) , (register, 0x20a, 1)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x100005db, 8) COPY (unique, 0x10000700, 8), (unique, 0x10000700, 8) CAST (unique, 0x3800, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffb58, 8)]
[(register, 0x8, 8) COPY (const, 0xb, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffba0, 8) MULTIEQUAL (stack, 0xfffffffffffffba0, 8) , (stack, 0xfffffffffffffba0, 8)]
[(stack, 0xfffffffffffffb98, 8) MULTIEQUAL (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8)]
[(stack, 0xfffffffffffffb78, 8) MULTIEQUAL (stack, 0xfffffffffffffb78, 8) , (stack, 0xfffffffffffffb78, 8)]
[(stack, 0xfffffffffffffb70, 8) MULTIEQUAL (stack, 0xfffffffffffffb70, 8) , (stack, 0xfffffffffffffb70, 8)]
[(stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb60, 8) MULTIEQUAL (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8)]
[(stack, 0xfffffffffffffb58, 4) MULTIEQUAL (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4)]
[(register, 0x38, 8) MULTIEQUAL (unique, 0x100005db, 8) , (unique, 0x100005e3, 8)]
[ ---  CBRANCH (ram, 0x23cf39, 1) , (unique, 0xd300, 1), (unique, 0xd300, 1) INT_NOTEQUAL (register, 0x8, 8) , (const, 0x0, 8), (register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8)]
[(stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x72, 4)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x72, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x72, 4)]
[(stack, 0xfffffffffffffb70, 8) INDIRECT (stack, 0xfffffffffffffb70, 8) , (const, 0x72, 4)]
[(stack, 0xfffffffffffffb78, 8) INDIRECT (stack, 0xfffffffffffffb78, 8) , (const, 0x72, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x72, 4)]
[(stack, 0xfffffffffffffba0, 8) INDIRECT (stack, 0xfffffffffffffba0, 8) , (const, 0x72, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x72, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x72, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x38, 8) , (const, 0x0, 8)]
[(unique, 0x100005e3, 8) COPY (register, 0x38, 8), (register, 0x38, 8) PTRADD (register, 0x38, 8) , (unique, 0x100004e6, 8) , (const, 0x8, 8), (unique, 0x100004e6, 8) INT_ADD (unique, 0x100004de, 8) , (const, 0x1, 8), (unique, 0x100004de, 8) INT_MULT (unique, 0xb880, 8) , (const, 0xfffffffffffffffe, 8), (unique, 0xb880, 8) INT_ZEXT (register, 0x20a, 1)]
[(register, 0x8, 8) INT_ADD (register, 0x8, 8) , (const, 0xffffffffffffffff, 8)]
[ ---  BRANCH (ram, 0x23cf36, 1)]
[(unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffb50, 8)]
[(unique, 0x3c80, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffbb8, 8)]
[(register, 0x0, 8) COPY (const, 0x0, 8)]
[(unique, 0x10000667, 8) COPY (unique, 0x10000708, 8), (unique, 0x10000708, 8) CAST (register, 0x38, 8)]
[(unique, 0x1000066f, 8) COPY (register, 0x38, 8), (register, 0x38, 8) COPY (const, 0x0, 8)]
[(unique, 0x1000067f, 8) COPY (stack, 0xfffffffffffffb98, 8)]
[(unique, 0x1000068f, 8) COPY (stack, 0xfffffffffffffba0, 8)]
[(unique, 0x1000069f, 8) COPY (stack, 0xfffffffffffffba8, 8)]
[(unique, 0x100006df, 1) COPY (ram, 0x4ef7c8, 1)]
[(unique, 0x100002ed, 8) MULTIEQUAL (unique, 0x10000667, 8) , (unique, 0x3100, 8)]
[(unique, 0x100002f5, 8) MULTIEQUAL (register, 0x0, 8) , (unique, 0xbd80, 8)]
[(unique, 0x100002fd, 8) MULTIEQUAL (unique, 0x1000066f, 8) , (unique, 0x10000677, 8)]
[(unique, 0x10000305, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x1000030d, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(unique, 0x10000315, 8) MULTIEQUAL (ram, 0x4ef7c0, 8) , (ram, 0x4ef7c0, 8)]
[(unique, 0x1000031d, 1) MULTIEQUAL (ram, 0x4ef7c8, 1) , (ram, 0x4ef7c8, 1)]
[(unique, 0x1000031e, 1) MULTIEQUAL (ram, 0x4f096e, 1) , (ram, 0x4f096e, 1)]
[(unique, 0x1000031f, 4) MULTIEQUAL (ram, 0x4f0ad4, 4) , (ram, 0x4f0ad4, 4)]
[(unique, 0x10000323, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(unique, 0x1000032b, 4) MULTIEQUAL (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4)]
[(unique, 0x1000032f, 8) MULTIEQUAL (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8)]
[(unique, 0x10000337, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(unique, 0x1000033f, 8) MULTIEQUAL (stack, 0xfffffffffffffb70, 8) , (stack, 0xfffffffffffffb70, 8)]
[(unique, 0x10000347, 8) MULTIEQUAL (stack, 0xfffffffffffffb78, 8) , (stack, 0xfffffffffffffb78, 8)]
[(unique, 0x1000034f, 8) MULTIEQUAL (unique, 0x1000067f, 8) , (unique, 0x10000687, 8)]
[(unique, 0x10000357, 8) MULTIEQUAL (unique, 0x1000068f, 8) , (unique, 0x10000697, 8)]
[(unique, 0x1000035f, 8) MULTIEQUAL (unique, 0x1000069f, 8) , (unique, 0x100006a7, 8)]
[(unique, 0x10000367, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CBRANCH (ram, 0x23d30b, 1) , (unique, 0x100002ec, 1), (unique, 0x100002ec, 1) INT_EQUAL (unique, 0x10000465, 1) , (const, 0x0, 1), (unique, 0x10000465, 1) MULTIEQUAL (unique, 0x100006df, 1) , (unique, 0x1000059a, 1)]
[(register, 0x110, 8) INDIRECT (unique, 0x10000305, 8) , (const, 0x3ae, 4)]
[(ram, 0x4eae68, 8) INDIRECT (unique, 0x1000030d, 8) , (const, 0x3ae, 4)]
[(ram, 0x4ef7c0, 8) INDIRECT (unique, 0x10000315, 8) , (const, 0x3ae, 4)]
[(ram, 0x4ef7c8, 1) INDIRECT (unique, 0x1000031d, 1) , (const, 0x3ae, 4)]
[(ram, 0x4f096e, 1) INDIRECT (unique, 0x1000031e, 1) , (const, 0x3ae, 4)]
[(ram, 0x4f0ad4, 4) INDIRECT (unique, 0x1000031f, 4) , (const, 0x3ae, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (unique, 0x10000323, 8) , (const, 0x3ae, 4)]
[(stack, 0xfffffffffffffb58, 4) INDIRECT (unique, 0x1000032b, 4) , (const, 0x3ae, 4)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (unique, 0x1000032f, 8) , (const, 0x3ae, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (unique, 0x10000337, 8) , (const, 0x3ae, 4)]
[(stack, 0xfffffffffffffb70, 8) INDIRECT (unique, 0x1000033f, 8) , (const, 0x3ae, 4)]
[(stack, 0xfffffffffffffb78, 8) INDIRECT (unique, 0x10000347, 8) , (const, 0x3ae, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (unique, 0x1000034f, 8) , (const, 0x3ae, 4)]
[(stack, 0xfffffffffffffba0, 8) INDIRECT (unique, 0x10000357, 8) , (const, 0x3ae, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (unique, 0x10000647, 8) , (const, 0x3ae, 4), (unique, 0x10000647, 8) COPY (unique, 0x1000035f, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (unique, 0x10000367, 8) , (const, 0x3ae, 4)]
[(unique, 0x100005b3, 8) COPY (register, 0x10, 8), (register, 0x10, 8) COPY (const, 0xffffffffffffffff, 8)]
[ ---  CBRANCH (ram, 0x23d335, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x24b620, 8) , (unique, 0x3100, 8) , (unique, 0x1000049e, 8) , (const, 0x0, 8) , (unique, 0x3800, 8), (unique, 0x1000049e, 8) COPY (const, 0x2b6c88, 8), (unique, 0x3100, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffba8, 8)]
[(unique, 0x100005bb, 8) COPY (stack, 0xfffffffffffffba8, 8)]
[(register, 0x10, 8) INT_OR (unique, 0x4d100, 8) , (unique, 0x4d200, 8), (unique, 0x4d200, 8) INT_RIGHT (register, 0x10, 8) , (const, 0x2f, 4), (unique, 0x4d100, 8) INT_LEFT (register, 0x10, 8) , (const, 0x11, 4), (register, 0x10, 8) INT_XOR (register, 0x10, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (register, 0x110, 8) , (const, 0x6, 8) , (const, 0x8, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0x100005b3, 8) , (unique, 0x100005bb, 8)]
[(ram, 0x4ef7c8, 1) COPY (const, 0x1, 1)]
[ ---  BRANCH (ram, 0x23cff7, 1)]
[(unique, 0x100005a3, 8) COPY (unique, 0x100002f5, 8)]
[(unique, 0x100005c3, 8) COPY (unique, 0x100002fd, 8)]
[(unique, 0x1000064f, 8) COPY (unique, 0x1000035f, 8)]
[ ---  CBRANCH (ram, 0x23d2d0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x10, 8) , (const, 0xffffffffffffffff, 8), (register, 0x10, 8) INT_XOR (register, 0x10, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (unique, 0x10000305, 8) , (const, 0x6, 8) , (const, 0x8, 8), (register, 0x10, 8) INT_OR (unique, 0x4ff00, 8) , (unique, 0x50000, 8), (unique, 0x50000, 8) INT_LEFT (unique, 0x10000315, 8) , (const, 0x2f, 4), (unique, 0x4ff00, 8) INT_RIGHT (unique, 0x10000315, 8) , (const, 0x11, 4)]
[(register, 0x110, 8) INDIRECT (unique, 0x10000305, 8) , (const, 0xe0, 4)]
[(ram, 0x4eae68, 8) INDIRECT (unique, 0x1000030d, 8) , (const, 0xe0, 4)]
[(ram, 0x4ef7c0, 8) INDIRECT (unique, 0x10000315, 8) , (const, 0xe0, 4)]
[(ram, 0x4ef7c8, 1) INDIRECT (unique, 0x1000031d, 1) , (const, 0xe0, 4)]
[(ram, 0x4f096e, 1) INDIRECT (unique, 0x1000031e, 1) , (const, 0xe0, 4)]
[(ram, 0x4f0ad4, 4) INDIRECT (unique, 0x1000031f, 4) , (const, 0xe0, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (unique, 0x10000323, 8) , (const, 0xe0, 4)]
[(stack, 0xfffffffffffffb58, 4) INDIRECT (unique, 0x1000032b, 4) , (const, 0xe0, 4)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (unique, 0x1000032f, 8) , (const, 0xe0, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (unique, 0x10000337, 8) , (const, 0xe0, 4)]
[(stack, 0xfffffffffffffb70, 8) INDIRECT (unique, 0x1000033f, 8) , (const, 0xe0, 4)]
[(stack, 0xfffffffffffffb78, 8) INDIRECT (unique, 0x10000347, 8) , (const, 0xe0, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (unique, 0x1000034f, 8) , (const, 0xe0, 4)]
[(stack, 0xfffffffffffffba0, 8) INDIRECT (unique, 0x10000357, 8) , (const, 0xe0, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (register, 0x10, 8) , (const, 0xe0, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (unique, 0x10000367, 8) , (const, 0xe0, 4)]
[(register, 0x0, 4) CALL (ram, 0x249160, 8) , (unique, 0x3100, 8) , (unique, 0x1000048e, 8) , (const, 0x0, 8) , (unique, 0x3800, 8), (unique, 0x1000048e, 8) COPY (const, 0x2b6c88, 8), (unique, 0x3100, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffba8, 8)]
[ ---  BRANCH (ram, 0x23cff7, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffb78, 8) MULTIEQUAL (stack, 0xfffffffffffffb78, 8) , (stack, 0xfffffffffffffb78, 8) , (stack, 0xfffffffffffffb78, 8)]
[(stack, 0xfffffffffffffb70, 8) MULTIEQUAL (stack, 0xfffffffffffffb70, 8) , (stack, 0xfffffffffffffb70, 8) , (stack, 0xfffffffffffffb70, 8)]
[(stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb60, 8) MULTIEQUAL (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8)]
[(stack, 0xfffffffffffffb58, 4) MULTIEQUAL (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(ram, 0x4f0ad4, 4) MULTIEQUAL (ram, 0x4f0ad4, 4) , (ram, 0x4f0ad4, 4) , (ram, 0x4f0ad4, 4)]
[(ram, 0x4f096e, 1) MULTIEQUAL (ram, 0x4f096e, 1) , (ram, 0x4f096e, 1) , (ram, 0x4f096e, 1)]
[(ram, 0x4ef7c8, 1) MULTIEQUAL (ram, 0x4ef7c8, 1) , (ram, 0x4ef7c8, 1) , (ram, 0x4ef7c8, 1)]
[(ram, 0x4ef7c0, 8) MULTIEQUAL (ram, 0x4ef7c0, 8) , (ram, 0x4ef7c0, 8) , (register, 0x10, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x100005ab, 8) COPY (stack, 0xfffffffffffffba0, 8), (stack, 0xfffffffffffffba0, 8) MULTIEQUAL (stack, 0xfffffffffffffba0, 8) , (stack, 0xfffffffffffffba0, 8) , (stack, 0xfffffffffffffba0, 8)]
[(unique, 0x100005cb, 8) COPY (stack, 0xfffffffffffffb98, 8), (stack, 0xfffffffffffffb98, 8) MULTIEQUAL (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8)]
[(unique, 0x10000657, 8) COPY (stack, 0xfffffffffffffba8, 8), (stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[ ---  CBRANCH (ram, 0x23d2c0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) MULTIEQUAL (register, 0x0, 4) , (register, 0x0, 4) , (register, 0x0, 4)]
[ ---  CBRANCH (ram, 0x23d3b0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xfffffffffffffb78, 8) , (const, 0x0, 8)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x36d, 4)]
[(stack, 0xfffffffffffffba0, 8) INDIRECT (stack, 0xfffffffffffffba0, 8) , (const, 0x36d, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x36d, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x36d, 4)]
[ ---  CALL (ram, 0x1303d0, 8) , (unique, 0x100004b6, 8) , (unique, 0x100004a6, 8) , (const, 0x1a9, 4) , (unique, 0x100004be, 8), (unique, 0x100004be, 8) COPY (const, 0x2ba5f8, 8), (unique, 0x100004b6, 8) COPY (const, 0x2b6cc6, 8), (unique, 0x100004a6, 8) COPY (const, 0x2b6c94, 8)]
[(ram, 0x4eae68, 8) COPY (ram, 0x4eae68, 8), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x36d, 4)]
[(ram, 0x4ef7c0, 8) COPY (ram, 0x4ef7c0, 8), (ram, 0x4ef7c0, 8) INDIRECT (ram, 0x4ef7c0, 8) , (const, 0x36d, 4)]
[(ram, 0x4ef7c8, 1) COPY (ram, 0x4ef7c8, 1), (ram, 0x4ef7c8, 1) INDIRECT (ram, 0x4ef7c8, 1) , (const, 0x36d, 4)]
[(ram, 0x4f096e, 1) COPY (ram, 0x4f096e, 1), (ram, 0x4f096e, 1) INDIRECT (ram, 0x4f096e, 1) , (const, 0x36d, 4)]
[(ram, 0x4f0ad4, 4) COPY (ram, 0x4f0ad4, 4), (ram, 0x4f0ad4, 4) INDIRECT (ram, 0x4f0ad4, 4) , (const, 0x36d, 4)]
[ ---  RETURN (const, 0x1, 4)]
[ ---  CALL (ram, 0x266330, 8) , (stack, 0xfffffffffffffb50, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x10a, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x101, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x10a, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x101, 4)]
[(ram, 0x4ef7c0, 8) INDIRECT (ram, 0x4ef7c0, 8) , (const, 0x10a, 4), (ram, 0x4ef7c0, 8) INDIRECT (ram, 0x4ef7c0, 8) , (const, 0x101, 4)]
[(ram, 0x4ef7c8, 1) INDIRECT (ram, 0x4ef7c8, 1) , (const, 0x10a, 4), (ram, 0x4ef7c8, 1) INDIRECT (ram, 0x4ef7c8, 1) , (const, 0x101, 4)]
[(ram, 0x4f096e, 1) INDIRECT (ram, 0x4f096e, 1) , (const, 0x10a, 4), (ram, 0x4f096e, 1) INDIRECT (ram, 0x4f096e, 1) , (const, 0x101, 4)]
[(ram, 0x4f0ad4, 4) INDIRECT (ram, 0x4f0ad4, 4) , (const, 0x10a, 4), (ram, 0x4f0ad4, 4) INDIRECT (ram, 0x4f0ad4, 4) , (const, 0x101, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x10a, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x101, 4)]
[(stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x10a, 4), (stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x101, 4)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x10a, 4), (stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x101, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x10a, 4), (stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x101, 4)]
[(stack, 0xfffffffffffffb70, 8) INDIRECT (stack, 0xfffffffffffffb70, 8) , (const, 0x10a, 4), (stack, 0xfffffffffffffb70, 8) INDIRECT (stack, 0xfffffffffffffb70, 8) , (const, 0x101, 4)]
[(stack, 0xfffffffffffffb78, 8) INDIRECT (stack, 0xfffffffffffffb78, 8) , (const, 0x10a, 4), (stack, 0xfffffffffffffb78, 8) INDIRECT (stack, 0xfffffffffffffb78, 8) , (const, 0x101, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x10a, 4), (stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x101, 4)]
[(stack, 0xfffffffffffffba0, 8) INDIRECT (stack, 0xfffffffffffffba0, 8) , (const, 0x10a, 4), (stack, 0xfffffffffffffba0, 8) INDIRECT (stack, 0xfffffffffffffba0, 8) , (const, 0x101, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x10a, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x101, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x10a, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x101, 4)]
[ ---  CBRANCH (ram, 0x23cfb0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x1, 4), (register, 0x0, 4) CALLIND (stack, 0xfffffffffffffb50, 8) , (unique, 0x100002ed, 8) , (unique, 0x3800, 8), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x101, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x11e, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x11e, 4)]
[(ram, 0x4ef7c0, 8) INDIRECT (ram, 0x4ef7c0, 8) , (const, 0x11e, 4)]
[(ram, 0x4ef7c8, 1) INDIRECT (ram, 0x4ef7c8, 1) , (const, 0x11e, 4)]
[(ram, 0x4f096e, 1) INDIRECT (ram, 0x4f096e, 1) , (const, 0x11e, 4)]
[(ram, 0x4f0ad4, 4) INDIRECT (ram, 0x4f0ad4, 4) , (const, 0x11e, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x11e, 4)]
[(stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x11e, 4)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x11e, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x11e, 4)]
[(stack, 0xfffffffffffffb70, 8) INDIRECT (stack, 0xfffffffffffffb70, 8) , (const, 0x11e, 4)]
[(stack, 0xfffffffffffffb78, 8) INDIRECT (stack, 0xfffffffffffffb78, 8) , (const, 0x11e, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x11e, 4)]
[(stack, 0xfffffffffffffba0, 8) INDIRECT (stack, 0xfffffffffffffba0, 8) , (const, 0x11e, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x11e, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x11e, 4)]
[ ---  CBRANCH (ram, 0x23cfb0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10000710, 8), (unique, 0x10000710, 8) CALL (ram, 0x248f60, 8) , (stack, 0xfffffffffffffba8, 8) , (unique, 0x100004ae, 8), (unique, 0x100004ae, 8) COPY (const, 0x2b6cb8, 8)]
[(register, 0xb0, 8) PTRADD (ram, 0x4eae68, 8) , (unique, 0xbd80, 8) , (const, 0x1, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x110, 8)]
[(unique, 0x100005ff, 8) COPY (stack, 0xfffffffffffffba0, 8)]
[ ---  CALL (ram, 0x266330, 8) , (register, 0x0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x145, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x13d, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x145, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x13d, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4ef7c0, 8) INDIRECT (ram, 0x4ef7c0, 8) , (const, 0x145, 4), (ram, 0x4ef7c0, 8) INDIRECT (ram, 0x4ef7c0, 8) , (const, 0x13d, 4), (ram, 0x4ef7c0, 8) MULTIEQUAL (ram, 0x4ef7c0, 8) , (ram, 0x4ef7c0, 8) , (ram, 0x4ef7c0, 8) , (ram, 0x4ef7c0, 8) , (ram, 0x4ef7c0, 8) , (ram, 0x4ef7c0, 8) , (ram, 0x4ef7c0, 8) , (ram, 0x4ef7c0, 8)]
[(ram, 0x4ef7c8, 1) INDIRECT (ram, 0x4ef7c8, 1) , (const, 0x145, 4), (ram, 0x4ef7c8, 1) INDIRECT (ram, 0x4ef7c8, 1) , (const, 0x13d, 4), (ram, 0x4ef7c8, 1) MULTIEQUAL (ram, 0x4ef7c8, 1) , (ram, 0x4ef7c8, 1) , (ram, 0x4ef7c8, 1) , (ram, 0x4ef7c8, 1) , (ram, 0x4ef7c8, 1) , (ram, 0x4ef7c8, 1) , (ram, 0x4ef7c8, 1) , (ram, 0x4ef7c8, 1)]
[(ram, 0x4f096e, 1) INDIRECT (ram, 0x4f096e, 1) , (const, 0x145, 4), (ram, 0x4f096e, 1) INDIRECT (ram, 0x4f096e, 1) , (const, 0x13d, 4), (ram, 0x4f096e, 1) MULTIEQUAL (ram, 0x4f096e, 1) , (ram, 0x4f096e, 1) , (ram, 0x4f096e, 1) , (ram, 0x4f096e, 1) , (ram, 0x4f096e, 1) , (ram, 0x4f096e, 1) , (ram, 0x4f096e, 1) , (ram, 0x4f096e, 1)]
[(ram, 0x4f0ad4, 4) INDIRECT (ram, 0x4f0ad4, 4) , (const, 0x145, 4), (ram, 0x4f0ad4, 4) INDIRECT (ram, 0x4f0ad4, 4) , (const, 0x13d, 4), (ram, 0x4f0ad4, 4) MULTIEQUAL (ram, 0x4f0ad4, 4) , (ram, 0x4f0ad4, 4) , (ram, 0x4f0ad4, 4) , (ram, 0x4f0ad4, 4) , (ram, 0x4f0ad4, 4) , (ram, 0x4f0ad4, 4) , (ram, 0x4f0ad4, 4) , (ram, 0x4f0ad4, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x145, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x13d, 4), (stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x145, 4), (stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x13d, 4), (stack, 0xfffffffffffffb58, 4) MULTIEQUAL (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x145, 4), (stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x13d, 4), (stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb70, 8) INDIRECT (stack, 0xfffffffffffffb70, 8) , (const, 0x145, 4), (stack, 0xfffffffffffffb70, 8) INDIRECT (stack, 0xfffffffffffffb70, 8) , (const, 0x13d, 4), (stack, 0xfffffffffffffb70, 8) MULTIEQUAL (stack, 0xfffffffffffffb70, 8) , (stack, 0xfffffffffffffb70, 8) , (stack, 0xfffffffffffffb70, 8) , (stack, 0xfffffffffffffb70, 8) , (stack, 0xfffffffffffffb70, 8) , (stack, 0xfffffffffffffb70, 8) , (stack, 0xfffffffffffffb70, 8) , (stack, 0xfffffffffffffb70, 8)]
[(stack, 0xfffffffffffffb78, 8) INDIRECT (stack, 0xfffffffffffffb78, 8) , (const, 0x145, 4), (stack, 0xfffffffffffffb78, 8) INDIRECT (stack, 0xfffffffffffffb78, 8) , (const, 0x13d, 4), (stack, 0xfffffffffffffb78, 8) MULTIEQUAL (stack, 0xfffffffffffffb78, 8) , (stack, 0xfffffffffffffb78, 8) , (stack, 0xfffffffffffffb78, 8) , (stack, 0xfffffffffffffb78, 8) , (stack, 0xfffffffffffffb78, 8) , (stack, 0xfffffffffffffb78, 8) , (stack, 0xfffffffffffffb78, 8) , (stack, 0xfffffffffffffb78, 8)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x145, 4), (stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x13d, 4), (stack, 0xfffffffffffffb98, 8) MULTIEQUAL (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8)]
[(stack, 0xfffffffffffffba0, 8) INDIRECT (stack, 0xfffffffffffffba0, 8) , (const, 0x145, 4), (stack, 0xfffffffffffffba0, 8) INDIRECT (stack, 0xfffffffffffffba0, 8) , (const, 0x13d, 4), (stack, 0xfffffffffffffba0, 8) MULTIEQUAL (unique, 0x100005ff, 8) , (unique, 0x10000607, 8) , (unique, 0x1000060f, 8) , (unique, 0x10000617, 8) , (unique, 0x1000061f, 8) , (unique, 0x10000627, 8) , (unique, 0x1000062f, 8) , (unique, 0x10000637, 8)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x145, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x13d, 4), (stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x145, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x13d, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(unique, 0x1000059b, 8) COPY (stack, 0xfffffffffffffb60, 8), (stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x145, 4), (stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x13d, 4), (stack, 0xfffffffffffffb60, 8) MULTIEQUAL (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8)]
[ ---  CBRANCH (ram, 0x23d358, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x1, 4), (register, 0x0, 4) CALLIND (register, 0x0, 8) , (unique, 0x3800, 8) , (unique, 0x3c80, 8) , (const, 0x400, 8) , (register, 0xb0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x333, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x333, 4)]
[(ram, 0x4ef7c0, 8) INDIRECT (ram, 0x4ef7c0, 8) , (const, 0x333, 4)]
[(ram, 0x4ef7c8, 1) INDIRECT (ram, 0x4ef7c8, 1) , (const, 0x333, 4)]
[(ram, 0x4f096e, 1) INDIRECT (ram, 0x4f096e, 1) , (const, 0x333, 4)]
[(ram, 0x4f0ad4, 4) INDIRECT (ram, 0x4f0ad4, 4) , (const, 0x333, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x333, 4)]
[(stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x333, 4)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x333, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x333, 4)]
[(stack, 0xfffffffffffffb70, 8) INDIRECT (stack, 0xfffffffffffffb70, 8) , (const, 0x333, 4)]
[(stack, 0xfffffffffffffb78, 8) INDIRECT (stack, 0xfffffffffffffb78, 8) , (const, 0x333, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x333, 4)]
[(stack, 0xfffffffffffffba0, 8) INDIRECT (stack, 0xfffffffffffffba0, 8) , (const, 0x333, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x333, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x333, 4)]
[ ---  CBRANCH (ram, 0x23d129, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10000718, 8), (unique, 0x10000718, 8) CALL (ram, 0x248f60, 8) , (stack, 0xfffffffffffffba8, 8) , (unique, 0x10000486, 8), (unique, 0x10000486, 8) COPY (const, 0x2b6c7c, 8)]
[ ---  CALL (ram, 0x266330, 8) , (register, 0x0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x34b, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x344, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x34b, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x344, 4)]
[(ram, 0x4ef7c0, 8) INDIRECT (ram, 0x4ef7c0, 8) , (const, 0x34b, 4), (ram, 0x4ef7c0, 8) INDIRECT (ram, 0x4ef7c0, 8) , (const, 0x344, 4)]
[(ram, 0x4ef7c8, 1) INDIRECT (ram, 0x4ef7c8, 1) , (const, 0x34b, 4), (ram, 0x4ef7c8, 1) INDIRECT (ram, 0x4ef7c8, 1) , (const, 0x344, 4)]
[(ram, 0x4f096e, 1) INDIRECT (ram, 0x4f096e, 1) , (const, 0x34b, 4), (ram, 0x4f096e, 1) INDIRECT (ram, 0x4f096e, 1) , (const, 0x344, 4)]
[(ram, 0x4f0ad4, 4) INDIRECT (ram, 0x4f0ad4, 4) , (const, 0x34b, 4), (ram, 0x4f0ad4, 4) INDIRECT (ram, 0x4f0ad4, 4) , (const, 0x344, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x34b, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x344, 4)]
[(stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x34b, 4), (stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x344, 4)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x34b, 4), (stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x344, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x34b, 4), (stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x344, 4)]
[(stack, 0xfffffffffffffb70, 8) INDIRECT (stack, 0xfffffffffffffb70, 8) , (const, 0x34b, 4), (stack, 0xfffffffffffffb70, 8) INDIRECT (stack, 0xfffffffffffffb70, 8) , (const, 0x344, 4)]
[(stack, 0xfffffffffffffb78, 8) INDIRECT (stack, 0xfffffffffffffb78, 8) , (const, 0x34b, 4), (stack, 0xfffffffffffffb78, 8) INDIRECT (stack, 0xfffffffffffffb78, 8) , (const, 0x344, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x34b, 4), (stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x344, 4)]
[(stack, 0xfffffffffffffba0, 8) INDIRECT (stack, 0xfffffffffffffba0, 8) , (const, 0x34b, 4), (stack, 0xfffffffffffffba0, 8) INDIRECT (stack, 0xfffffffffffffba0, 8) , (const, 0x344, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x34b, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x344, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x34b, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x344, 4)]
[ ---  CALLIND (register, 0x0, 8) , (unique, 0x3800, 8)]
[ ---  BRANCH (ram, 0x23d129, 1)]
[(unique, 0x100006b7, 8) COPY (stack, 0xfffffffffffffb98, 8)]
[(unique, 0x100006c7, 8) COPY (stack, 0xfffffffffffffba0, 8)]
[ ---  CBRANCH (ram, 0x23d1f8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xfffffffffffffb58, 4) , (const, 0x1, 4)]
[(unique, 0x10000380, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x10000388, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(unique, 0x10000390, 8) MULTIEQUAL (ram, 0x4ef7c0, 8) , (ram, 0x4ef7c0, 8)]
[(unique, 0x10000398, 1) MULTIEQUAL (ram, 0x4ef7c8, 1) , (ram, 0x4ef7c8, 1)]
[(unique, 0x10000399, 1) MULTIEQUAL (ram, 0x4f096e, 1) , (ram, 0x4f096e, 1)]
[(unique, 0x1000039a, 4) MULTIEQUAL (ram, 0x4f0ad4, 4) , (ram, 0x4f0ad4, 4)]
[(unique, 0x1000039e, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(unique, 0x100003a6, 4) MULTIEQUAL (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4)]
[(unique, 0x100003aa, 8) MULTIEQUAL (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8)]
[(unique, 0x100003b2, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(unique, 0x100003ba, 8) MULTIEQUAL (stack, 0xfffffffffffffb70, 8) , (stack, 0xfffffffffffffb70, 8)]
[(unique, 0x100003c2, 8) MULTIEQUAL (stack, 0xfffffffffffffb78, 8) , (stack, 0xfffffffffffffb78, 8)]
[(unique, 0x100003d2, 8) MULTIEQUAL (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8)]
[(unique, 0x100003e2, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(unique, 0x100003ea, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(unique, 0x100006d7, 8) COPY (unique, 0x100003da, 8), (unique, 0x100003da, 8) MULTIEQUAL (unique, 0x100006bf, 8) , (unique, 0x100006c7, 8)]
[(unique, 0x100006e8, 8) COPY (unique, 0x100003da, 8), (unique, 0x100003da, 8) MULTIEQUAL (unique, 0x100006bf, 8) , (unique, 0x100006c7, 8)]
[ ---  CBRANCH (ram, 0x23d224, 1) , (unique, 0x1000037f, 1), (unique, 0x1000037f, 1) INT_NOTEQUAL (unique, 0x100003ca, 8) , (const, 0x0, 8), (unique, 0x100003ca, 8) MULTIEQUAL (unique, 0x100006af, 8) , (unique, 0x100006b7, 8)]
[(register, 0x110, 8) INDIRECT (unique, 0x10000380, 8) , (const, 0x29f, 4)]
[(ram, 0x4eae68, 8) INDIRECT (unique, 0x10000388, 8) , (const, 0x29f, 4)]
[(ram, 0x4ef7c0, 8) INDIRECT (unique, 0x10000390, 8) , (const, 0x29f, 4)]
[(ram, 0x4ef7c8, 1) INDIRECT (unique, 0x10000398, 1) , (const, 0x29f, 4)]
[(ram, 0x4f096e, 1) INDIRECT (unique, 0x10000399, 1) , (const, 0x29f, 4)]
[(ram, 0x4f0ad4, 4) INDIRECT (unique, 0x1000039a, 4) , (const, 0x29f, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (unique, 0x1000039e, 8) , (const, 0x29f, 4)]
[(stack, 0xfffffffffffffb58, 4) INDIRECT (unique, 0x100003a6, 4) , (const, 0x29f, 4)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (unique, 0x100003aa, 8) , (const, 0x29f, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (unique, 0x100003b2, 8) , (const, 0x29f, 4)]
[(stack, 0xfffffffffffffb70, 8) INDIRECT (unique, 0x100003ba, 8) , (const, 0x29f, 4)]
[(stack, 0xfffffffffffffb78, 8) INDIRECT (unique, 0x100003c2, 8) , (const, 0x29f, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (unique, 0x100003d2, 8) , (const, 0x29f, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (unique, 0x100003e2, 8) , (const, 0x29f, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (unique, 0x100003ea, 8) , (const, 0x29f, 4)]
[(unique, 0x1000061f, 8) COPY (stack, 0xfffffffffffffba0, 8), (stack, 0xfffffffffffffba0, 8) INDIRECT (unique, 0x100006d7, 8) , (const, 0x29f, 4)]
[ ---  CBRANCH (ram, 0x23d060, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x121200, 8) , (unique, 0x1000059b, 8) , (unique, 0x10000720, 8), (unique, 0x10000720, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0x100003ca, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[(unique, 0x100006bf, 8) COPY (stack, 0xfffffffffffffba0, 8)]
[(unique, 0x100006af, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) CAST (unique, 0x10000728, 8), (unique, 0x10000728, 8) LOAD (const, 0x1b1, 4) , (unique, 0x100003ca, 8)]
[(unique, 0x100003f3, 8) MULTIEQUAL (register, 0x110, 8) , (unique, 0x10000380, 8)]
[(unique, 0x100003fb, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (unique, 0x10000388, 8)]
[(unique, 0x10000403, 8) MULTIEQUAL (ram, 0x4ef7c0, 8) , (unique, 0x10000390, 8)]
[(unique, 0x1000040b, 1) MULTIEQUAL (ram, 0x4ef7c8, 1) , (unique, 0x10000398, 1)]
[(unique, 0x1000040c, 1) MULTIEQUAL (ram, 0x4f096e, 1) , (unique, 0x10000399, 1)]
[(unique, 0x1000040d, 4) MULTIEQUAL (ram, 0x4f0ad4, 4) , (unique, 0x1000039a, 4)]
[(unique, 0x10000411, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (unique, 0x1000039e, 8)]
[(unique, 0x10000419, 4) MULTIEQUAL (stack, 0xfffffffffffffb58, 4) , (unique, 0x100003a6, 4)]
[(unique, 0x1000041d, 8) MULTIEQUAL (stack, 0xfffffffffffffb60, 8) , (unique, 0x100003aa, 8)]
[(unique, 0x10000425, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (unique, 0x100003b2, 8)]
[(unique, 0x1000042d, 8) MULTIEQUAL (stack, 0xfffffffffffffb70, 8) , (unique, 0x100003ba, 8)]
[(unique, 0x10000435, 8) MULTIEQUAL (stack, 0xfffffffffffffb78, 8) , (unique, 0x100003c2, 8)]
[(unique, 0x1000043d, 8) MULTIEQUAL (stack, 0xfffffffffffffb98, 8) , (unique, 0x100003d2, 8)]
[(unique, 0x1000044d, 8) MULTIEQUAL (unique, 0x100006cf, 8) , (unique, 0x100006d7, 8)]
[(unique, 0x10000455, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (unique, 0x100003e2, 8)]
[(unique, 0x1000045d, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (unique, 0x100003ea, 8)]
[ ---  CBRANCH (ram, 0x23d255, 1) , (unique, 0x100003f2, 1), (unique, 0x100003f2, 1) INT_NOTEQUAL (unique, 0x10000466, 8) , (const, 0x0, 8), (unique, 0x10000466, 8) MULTIEQUAL (unique, 0x100006e0, 8) , (unique, 0x100006e8, 8)]
[(register, 0x110, 8) INDIRECT (unique, 0x100003f3, 8) , (const, 0x2cd, 4)]
[(ram, 0x4eae68, 8) INDIRECT (unique, 0x100003fb, 8) , (const, 0x2cd, 4)]
[(ram, 0x4ef7c0, 8) INDIRECT (unique, 0x10000403, 8) , (const, 0x2cd, 4)]
[(ram, 0x4ef7c8, 1) INDIRECT (unique, 0x1000040b, 1) , (const, 0x2cd, 4)]
[(ram, 0x4f096e, 1) INDIRECT (unique, 0x1000040c, 1) , (const, 0x2cd, 4)]
[(ram, 0x4f0ad4, 4) INDIRECT (unique, 0x1000040d, 4) , (const, 0x2cd, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (unique, 0x10000411, 8) , (const, 0x2cd, 4)]
[(stack, 0xfffffffffffffb58, 4) INDIRECT (unique, 0x10000419, 4) , (const, 0x2cd, 4)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (unique, 0x1000041d, 8) , (const, 0x2cd, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (unique, 0x10000425, 8) , (const, 0x2cd, 4)]
[(stack, 0xfffffffffffffb70, 8) INDIRECT (unique, 0x1000042d, 8) , (const, 0x2cd, 4)]
[(stack, 0xfffffffffffffb78, 8) INDIRECT (unique, 0x10000435, 8) , (const, 0x2cd, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (unique, 0x1000043d, 8) , (const, 0x2cd, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (unique, 0x10000455, 8) , (const, 0x2cd, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (unique, 0x1000045d, 8) , (const, 0x2cd, 4)]
[(unique, 0x10000627, 8) COPY (stack, 0xfffffffffffffba0, 8), (stack, 0xfffffffffffffba0, 8) INDIRECT (unique, 0x1000044d, 8) , (const, 0x2cd, 4)]
[ ---  CBRANCH (ram, 0x23d060, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x121200, 8) , (unique, 0x1000059b, 8) , (unique, 0x10000730, 8), (unique, 0x10000730, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0x10000466, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[(unique, 0x100006cf, 8) COPY (stack, 0xfffffffffffffba0, 8)]
[(unique, 0x100006e0, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) CAST (unique, 0x10000738, 8), (unique, 0x10000738, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000466, 8)]
[(register, 0x110, 8) INDIRECT (unique, 0x100003f3, 8) , (const, 0x2eb, 4)]
[(ram, 0x4eae68, 8) INDIRECT (unique, 0x100003fb, 8) , (const, 0x2eb, 4)]
[(ram, 0x4ef7c0, 8) INDIRECT (unique, 0x10000403, 8) , (const, 0x2eb, 4)]
[(ram, 0x4ef7c8, 1) INDIRECT (unique, 0x1000040b, 1) , (const, 0x2eb, 4)]
[(ram, 0x4f096e, 1) INDIRECT (unique, 0x1000040c, 1) , (const, 0x2eb, 4)]
[(ram, 0x4f0ad4, 4) INDIRECT (unique, 0x1000040d, 4) , (const, 0x2eb, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (unique, 0x10000411, 8) , (const, 0x2eb, 4)]
[(stack, 0xfffffffffffffb58, 4) INDIRECT (unique, 0x10000419, 4) , (const, 0x2eb, 4)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (unique, 0x1000041d, 8) , (const, 0x2eb, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (unique, 0x10000425, 8) , (const, 0x2eb, 4)]
[(stack, 0xfffffffffffffb70, 8) INDIRECT (unique, 0x1000042d, 8) , (const, 0x2eb, 4)]
[(stack, 0xfffffffffffffb78, 8) INDIRECT (unique, 0x10000435, 8) , (const, 0x2eb, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (unique, 0x1000043d, 8) , (const, 0x2eb, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (unique, 0x10000455, 8) , (const, 0x2eb, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (unique, 0x1000045d, 8) , (const, 0x2eb, 4)]
[(unique, 0x1000062f, 8) COPY (stack, 0xfffffffffffffba0, 8), (stack, 0xfffffffffffffba0, 8) INDIRECT (unique, 0x1000044d, 8) , (const, 0x2eb, 4)]
[ ---  CBRANCH (ram, 0x23d060, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x121200, 8) , (register, 0x38, 8) , (unique, 0x1000059b, 8)]
[(unique, 0x3100, 8) INT_ADD (register, 0x0, 8) , (const, 0x1, 8), (register, 0x0, 8) CALL (ram, 0x121100, 8) , (unique, 0x1000059b, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x303, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x2f9, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x303, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x2f9, 4)]
[(ram, 0x4ef7c0, 8) INDIRECT (ram, 0x4ef7c0, 8) , (const, 0x303, 4), (ram, 0x4ef7c0, 8) INDIRECT (ram, 0x4ef7c0, 8) , (const, 0x2f9, 4)]
[(ram, 0x4ef7c8, 1) INDIRECT (ram, 0x4ef7c8, 1) , (const, 0x303, 4), (ram, 0x4ef7c8, 1) INDIRECT (ram, 0x4ef7c8, 1) , (const, 0x2f9, 4)]
[(ram, 0x4f096e, 1) INDIRECT (ram, 0x4f096e, 1) , (const, 0x303, 4), (ram, 0x4f096e, 1) INDIRECT (ram, 0x4f096e, 1) , (const, 0x2f9, 4)]
[(ram, 0x4f0ad4, 4) INDIRECT (ram, 0x4f0ad4, 4) , (const, 0x303, 4), (ram, 0x4f0ad4, 4) INDIRECT (ram, 0x4f0ad4, 4) , (const, 0x2f9, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x303, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x2f9, 4)]
[(stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x303, 4), (stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x2f9, 4)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x303, 4), (stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x2f9, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x303, 4), (stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x2f9, 4)]
[(stack, 0xfffffffffffffb70, 8) INDIRECT (stack, 0xfffffffffffffb70, 8) , (const, 0x303, 4), (stack, 0xfffffffffffffb70, 8) INDIRECT (stack, 0xfffffffffffffb70, 8) , (const, 0x2f9, 4)]
[(stack, 0xfffffffffffffb78, 8) INDIRECT (stack, 0xfffffffffffffb78, 8) , (const, 0x303, 4), (stack, 0xfffffffffffffb78, 8) INDIRECT (stack, 0xfffffffffffffb78, 8) , (const, 0x2f9, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x303, 4), (stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x2f9, 4)]
[(stack, 0xfffffffffffffba0, 8) INDIRECT (stack, 0xfffffffffffffba0, 8) , (const, 0x303, 4), (stack, 0xfffffffffffffba0, 8) INDIRECT (stack, 0xfffffffffffffba0, 8) , (const, 0x2f9, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x303, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x2f9, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x303, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2f9, 4)]
[ ---  CBRANCH (ram, 0x23d3a3, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10000740, 8), (unique, 0x10000740, 8) CALL (ram, 0x1212c0, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) INT_ADD (register, 0x0, 8) , (const, 0x9, 8), (register, 0x0, 8) CALL (ram, 0x121100, 8) , (unique, 0x1000059b, 8)]
[(register, 0x18, 4) COPY (const, 0x0, 4)]
[(register, 0xa8, 4) COPY (const, 0xffffffff, 4)]
[ ---  BRANCH (ram, 0x23d0fa, 1)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x0, 8) , (unique, 0x100003da, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x31c, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x31c, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x319, 4)]
[(ram, 0x4ef7c0, 8) INDIRECT (ram, 0x4ef7c0, 8) , (const, 0x31c, 4), (ram, 0x4ef7c0, 8) INDIRECT (ram, 0x4ef7c0, 8) , (const, 0x319, 4)]
[(ram, 0x4ef7c8, 1) INDIRECT (ram, 0x4ef7c8, 1) , (const, 0x31c, 4), (ram, 0x4ef7c8, 1) INDIRECT (ram, 0x4ef7c8, 1) , (const, 0x319, 4)]
[(ram, 0x4f096e, 1) INDIRECT (ram, 0x4f096e, 1) , (const, 0x31c, 4), (ram, 0x4f096e, 1) INDIRECT (ram, 0x4f096e, 1) , (const, 0x319, 4)]
[(ram, 0x4f0ad4, 4) INDIRECT (ram, 0x4f0ad4, 4) , (const, 0x31c, 4), (ram, 0x4f0ad4, 4) INDIRECT (ram, 0x4f0ad4, 4) , (const, 0x319, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x31c, 4)]
[(stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x31c, 4)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x31c, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x31c, 4)]
[(stack, 0xfffffffffffffb70, 8) INDIRECT (stack, 0xfffffffffffffb70, 8) , (const, 0x31c, 4)]
[(stack, 0xfffffffffffffb78, 8) INDIRECT (stack, 0xfffffffffffffb78, 8) , (const, 0x31c, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x31c, 4)]
[(stack, 0xfffffffffffffba0, 8) INDIRECT (stack, 0xfffffffffffffba0, 8) , (const, 0x31c, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x31c, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x31c, 4)]
[ ---  CALL (ram, 0x121160, 8) , (unique, 0x3100, 8) , (unique, 0x1000059b, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[(unique, 0x10000637, 8) COPY (register, 0x0, 8)]
[ ---  BRANCH (ram, 0x23d060, 1)]
[ ---  CBRANCH (ram, 0x23d0ae, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x30, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x23d0ae, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xfffffffffffffb60, 8) , (const, 0x0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x17c, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x17c, 4)]
[(ram, 0x4ef7c0, 8) INDIRECT (ram, 0x4ef7c0, 8) , (const, 0x17c, 4)]
[(ram, 0x4ef7c8, 1) INDIRECT (ram, 0x4ef7c8, 1) , (const, 0x17c, 4)]
[(ram, 0x4f096e, 1) INDIRECT (ram, 0x4f096e, 1) , (const, 0x17c, 4)]
[(ram, 0x4f0ad4, 4) INDIRECT (ram, 0x4f0ad4, 4) , (const, 0x17c, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x17c, 4)]
[(stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x17c, 4)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x17c, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x17c, 4)]
[(stack, 0xfffffffffffffb70, 8) INDIRECT (stack, 0xfffffffffffffb70, 8) , (const, 0x17c, 4)]
[(stack, 0xfffffffffffffb78, 8) INDIRECT (stack, 0xfffffffffffffb78, 8) , (const, 0x17c, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x17c, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x17c, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x17c, 4)]
[(unique, 0x10000607, 8) COPY (stack, 0xfffffffffffffba0, 8), (stack, 0xfffffffffffffba0, 8) INDIRECT (stack, 0xfffffffffffffba0, 8) , (const, 0x17c, 4)]
[ ---  CBRANCH (ram, 0x23d060, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x121290, 8) , (stack, 0xfffffffffffffb60, 8) , (register, 0x30, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffba0, 8) MULTIEQUAL (stack, 0xfffffffffffffba0, 8) , (stack, 0xfffffffffffffba0, 8) , (stack, 0xfffffffffffffba0, 8)]
[(stack, 0xfffffffffffffb98, 8) MULTIEQUAL (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8)]
[(stack, 0xfffffffffffffb78, 8) MULTIEQUAL (stack, 0xfffffffffffffb78, 8) , (stack, 0xfffffffffffffb78, 8) , (stack, 0xfffffffffffffb78, 8)]
[(stack, 0xfffffffffffffb70, 8) MULTIEQUAL (stack, 0xfffffffffffffb70, 8) , (stack, 0xfffffffffffffb70, 8) , (stack, 0xfffffffffffffb70, 8)]
[(stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb60, 8) MULTIEQUAL (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8)]
[(stack, 0xfffffffffffffb58, 4) MULTIEQUAL (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(ram, 0x4f0ad4, 4) MULTIEQUAL (ram, 0x4f0ad4, 4) , (ram, 0x4f0ad4, 4) , (ram, 0x4f0ad4, 4)]
[(ram, 0x4f096e, 1) MULTIEQUAL (ram, 0x4f096e, 1) , (ram, 0x4f096e, 1) , (ram, 0x4f096e, 1)]
[(ram, 0x4ef7c8, 1) MULTIEQUAL (ram, 0x4ef7c8, 1) , (ram, 0x4ef7c8, 1) , (ram, 0x4ef7c8, 1)]
[(ram, 0x4ef7c0, 8) MULTIEQUAL (ram, 0x4ef7c0, 8) , (ram, 0x4ef7c0, 8) , (ram, 0x4ef7c0, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x23d0ce, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x10, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x23d0ce, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xfffffffffffffb68, 8) , (const, 0x0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1a5, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x1a5, 4)]
[(ram, 0x4ef7c0, 8) INDIRECT (ram, 0x4ef7c0, 8) , (const, 0x1a5, 4)]
[(ram, 0x4ef7c8, 1) INDIRECT (ram, 0x4ef7c8, 1) , (const, 0x1a5, 4)]
[(ram, 0x4f096e, 1) INDIRECT (ram, 0x4f096e, 1) , (const, 0x1a5, 4)]
[(ram, 0x4f0ad4, 4) INDIRECT (ram, 0x4f0ad4, 4) , (const, 0x1a5, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x1a5, 4)]
[(stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x1a5, 4)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x1a5, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x1a5, 4)]
[(stack, 0xfffffffffffffb70, 8) INDIRECT (stack, 0xfffffffffffffb70, 8) , (const, 0x1a5, 4)]
[(stack, 0xfffffffffffffb78, 8) INDIRECT (stack, 0xfffffffffffffb78, 8) , (const, 0x1a5, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x1a5, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x1a5, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1a5, 4)]
[(unique, 0x1000060f, 8) COPY (stack, 0xfffffffffffffba0, 8), (stack, 0xfffffffffffffba0, 8) INDIRECT (stack, 0xfffffffffffffba0, 8) , (const, 0x1a5, 4)]
[ ---  CBRANCH (ram, 0x23d060, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x121200, 8) , (stack, 0xfffffffffffffb68, 8) , (register, 0x10, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffba0, 8) MULTIEQUAL (stack, 0xfffffffffffffba0, 8) , (stack, 0xfffffffffffffba0, 8) , (stack, 0xfffffffffffffba0, 8)]
[(stack, 0xfffffffffffffb98, 8) MULTIEQUAL (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8)]
[(stack, 0xfffffffffffffb78, 8) MULTIEQUAL (stack, 0xfffffffffffffb78, 8) , (stack, 0xfffffffffffffb78, 8) , (stack, 0xfffffffffffffb78, 8)]
[(stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb60, 8) MULTIEQUAL (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8)]
[(stack, 0xfffffffffffffb58, 4) MULTIEQUAL (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(ram, 0x4f0ad4, 4) MULTIEQUAL (ram, 0x4f0ad4, 4) , (ram, 0x4f0ad4, 4) , (ram, 0x4f0ad4, 4)]
[(ram, 0x4f096e, 1) MULTIEQUAL (ram, 0x4f096e, 1) , (ram, 0x4f096e, 1) , (ram, 0x4f096e, 1)]
[(ram, 0x4ef7c8, 1) MULTIEQUAL (ram, 0x4ef7c8, 1) , (ram, 0x4ef7c8, 1) , (ram, 0x4ef7c8, 1)]
[(ram, 0x4ef7c0, 8) MULTIEQUAL (ram, 0x4ef7c0, 8) , (ram, 0x4ef7c0, 8) , (ram, 0x4ef7c0, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x23d0f2, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xfffffffffffffb70, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffb70, 8) MULTIEQUAL (stack, 0xfffffffffffffb70, 8) , (stack, 0xfffffffffffffb70, 8) , (stack, 0xfffffffffffffb70, 8)]
[ ---  CBRANCH (ram, 0x23d0f2, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x8, 8) , (const, 0x0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1ce, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x1ce, 4)]
[(ram, 0x4ef7c0, 8) INDIRECT (ram, 0x4ef7c0, 8) , (const, 0x1ce, 4)]
[(ram, 0x4ef7c8, 1) INDIRECT (ram, 0x4ef7c8, 1) , (const, 0x1ce, 4)]
[(ram, 0x4f096e, 1) INDIRECT (ram, 0x4f096e, 1) , (const, 0x1ce, 4)]
[(ram, 0x4f0ad4, 4) INDIRECT (ram, 0x4f0ad4, 4) , (const, 0x1ce, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x1ce, 4)]
[(stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x1ce, 4)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x1ce, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x1ce, 4)]
[(stack, 0xfffffffffffffb70, 8) INDIRECT (stack, 0xfffffffffffffb70, 8) , (const, 0x1ce, 4)]
[(stack, 0xfffffffffffffb78, 8) INDIRECT (stack, 0xfffffffffffffb78, 8) , (const, 0x1ce, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x1ce, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x1ce, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1ce, 4)]
[(unique, 0x10000617, 8) COPY (stack, 0xfffffffffffffba0, 8), (stack, 0xfffffffffffffba0, 8) INDIRECT (stack, 0xfffffffffffffba0, 8) , (const, 0x1ce, 4)]
[ ---  CBRANCH (ram, 0x23d060, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x121290, 8) , (stack, 0xfffffffffffffb70, 8) , (register, 0x8, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffba0, 8) MULTIEQUAL (stack, 0xfffffffffffffba0, 8) , (stack, 0xfffffffffffffba0, 8) , (stack, 0xfffffffffffffba0, 8)]
[(stack, 0xfffffffffffffb98, 8) MULTIEQUAL (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8)]
[(stack, 0xfffffffffffffb78, 8) MULTIEQUAL (stack, 0xfffffffffffffb78, 8) , (stack, 0xfffffffffffffb78, 8) , (stack, 0xfffffffffffffb78, 8)]
[(stack, 0xfffffffffffffb70, 8) MULTIEQUAL (stack, 0xfffffffffffffb70, 8) , (stack, 0xfffffffffffffb70, 8) , (stack, 0xfffffffffffffb70, 8)]
[(stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb60, 8) MULTIEQUAL (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8)]
[(stack, 0xfffffffffffffb58, 4) MULTIEQUAL (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(ram, 0x4f0ad4, 4) MULTIEQUAL (ram, 0x4f0ad4, 4) , (ram, 0x4f0ad4, 4) , (ram, 0x4f0ad4, 4)]
[(ram, 0x4f096e, 1) MULTIEQUAL (ram, 0x4f096e, 1) , (ram, 0x4f096e, 1) , (ram, 0x4f096e, 1)]
[(ram, 0x4ef7c8, 1) MULTIEQUAL (ram, 0x4ef7c8, 1) , (ram, 0x4ef7c8, 1) , (ram, 0x4ef7c8, 1)]
[(ram, 0x4ef7c0, 8) MULTIEQUAL (ram, 0x4ef7c0, 8) , (ram, 0x4ef7c0, 8) , (ram, 0x4ef7c0, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x18, 4) COPY (const, 0x1, 4)]
[(register, 0xa8, 4) MULTIEQUAL (register, 0x0, 4) , (register, 0xa8, 4)]
[(register, 0x18, 4) MULTIEQUAL (register, 0x18, 4) , (register, 0x18, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1e3, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x1e3, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4ef7c0, 8) INDIRECT (ram, 0x4ef7c0, 8) , (const, 0x1e3, 4), (ram, 0x4ef7c0, 8) MULTIEQUAL (ram, 0x4ef7c0, 8) , (ram, 0x4ef7c0, 8)]
[(ram, 0x4ef7c8, 1) INDIRECT (ram, 0x4ef7c8, 1) , (const, 0x1e3, 4), (ram, 0x4ef7c8, 1) MULTIEQUAL (ram, 0x4ef7c8, 1) , (ram, 0x4ef7c8, 1)]
[(ram, 0x4f096e, 1) INDIRECT (ram, 0x4f096e, 1) , (const, 0x1e3, 4), (ram, 0x4f096e, 1) MULTIEQUAL (ram, 0x4f096e, 1) , (ram, 0x4f096e, 1)]
[(ram, 0x4f0ad4, 4) INDIRECT (ram, 0x4f0ad4, 4) , (const, 0x1e3, 4), (ram, 0x4f0ad4, 4) MULTIEQUAL (ram, 0x4f0ad4, 4) , (ram, 0x4f0ad4, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x1e3, 4), (stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x1e3, 4), (stack, 0xfffffffffffffb58, 4) MULTIEQUAL (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x1e3, 4), (stack, 0xfffffffffffffb60, 8) MULTIEQUAL (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x1e3, 4), (stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb70, 8) INDIRECT (stack, 0xfffffffffffffb70, 8) , (const, 0x1e3, 4), (stack, 0xfffffffffffffb70, 8) MULTIEQUAL (stack, 0xfffffffffffffb70, 8) , (stack, 0xfffffffffffffb70, 8)]
[(stack, 0xfffffffffffffb78, 8) INDIRECT (stack, 0xfffffffffffffb78, 8) , (const, 0x1e3, 4), (stack, 0xfffffffffffffb78, 8) MULTIEQUAL (stack, 0xfffffffffffffb78, 8) , (stack, 0xfffffffffffffb78, 8)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x1e3, 4), (stack, 0xfffffffffffffb98, 8) MULTIEQUAL (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8)]
[(stack, 0xfffffffffffffba0, 8) INDIRECT (stack, 0xfffffffffffffba0, 8) , (const, 0x1e3, 4), (stack, 0xfffffffffffffba0, 8) MULTIEQUAL (stack, 0xfffffffffffffba0, 8) , (stack, 0xfffffffffffffba0, 8)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x1e3, 4), (stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1e3, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CBRANCH (ram, 0x23d150, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10000748, 8), (unique, 0x10000748, 8) CALL (ram, 0x248f60, 8) , (stack, 0xfffffffffffffba8, 8) , (unique, 0x1000047e, 8), (unique, 0x1000047e, 8) COPY (const, 0x2b6c7c, 8), (stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[ ---  CALL (ram, 0x266330, 8) , (register, 0x0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1f6, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1f2, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x1f6, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x1f2, 4)]
[(ram, 0x4ef7c0, 8) INDIRECT (ram, 0x4ef7c0, 8) , (const, 0x1f6, 4), (ram, 0x4ef7c0, 8) INDIRECT (ram, 0x4ef7c0, 8) , (const, 0x1f2, 4)]
[(ram, 0x4ef7c8, 1) INDIRECT (ram, 0x4ef7c8, 1) , (const, 0x1f6, 4), (ram, 0x4ef7c8, 1) INDIRECT (ram, 0x4ef7c8, 1) , (const, 0x1f2, 4)]
[(ram, 0x4f096e, 1) INDIRECT (ram, 0x4f096e, 1) , (const, 0x1f6, 4), (ram, 0x4f096e, 1) INDIRECT (ram, 0x4f096e, 1) , (const, 0x1f2, 4)]
[(ram, 0x4f0ad4, 4) INDIRECT (ram, 0x4f0ad4, 4) , (const, 0x1f6, 4), (ram, 0x4f0ad4, 4) INDIRECT (ram, 0x4f0ad4, 4) , (const, 0x1f2, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x1f6, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x1f2, 4)]
[(stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x1f6, 4), (stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x1f2, 4)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x1f6, 4), (stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x1f2, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x1f6, 4), (stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x1f2, 4)]
[(stack, 0xfffffffffffffb70, 8) INDIRECT (stack, 0xfffffffffffffb70, 8) , (const, 0x1f6, 4), (stack, 0xfffffffffffffb70, 8) INDIRECT (stack, 0xfffffffffffffb70, 8) , (const, 0x1f2, 4)]
[(stack, 0xfffffffffffffb78, 8) INDIRECT (stack, 0xfffffffffffffb78, 8) , (const, 0x1f6, 4), (stack, 0xfffffffffffffb78, 8) INDIRECT (stack, 0xfffffffffffffb78, 8) , (const, 0x1f2, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x1f6, 4), (stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x1f2, 4)]
[(stack, 0xfffffffffffffba0, 8) INDIRECT (stack, 0xfffffffffffffba0, 8) , (const, 0x1f6, 4), (stack, 0xfffffffffffffba0, 8) INDIRECT (stack, 0xfffffffffffffba0, 8) , (const, 0x1f2, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x1f6, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x1f2, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1f6, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1f2, 4)]
[ ---  CALLIND (register, 0x0, 8) , (unique, 0x3800, 8)]
[ ---  CBRANCH (ram, 0x23d150, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xa8, 4) , (const, 0x0, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffba0, 8) MULTIEQUAL (stack, 0xfffffffffffffba0, 8) , (stack, 0xfffffffffffffba0, 8) , (stack, 0xfffffffffffffba0, 8)]
[(stack, 0xfffffffffffffb98, 8) MULTIEQUAL (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8)]
[(stack, 0xfffffffffffffb78, 8) MULTIEQUAL (stack, 0xfffffffffffffb78, 8) , (stack, 0xfffffffffffffb78, 8) , (stack, 0xfffffffffffffb78, 8)]
[(stack, 0xfffffffffffffb70, 8) MULTIEQUAL (stack, 0xfffffffffffffb70, 8) , (stack, 0xfffffffffffffb70, 8) , (stack, 0xfffffffffffffb70, 8)]
[(stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb60, 8) MULTIEQUAL (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8)]
[(stack, 0xfffffffffffffb58, 4) MULTIEQUAL (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(ram, 0x4f0ad4, 4) MULTIEQUAL (ram, 0x4f0ad4, 4) , (ram, 0x4f0ad4, 4) , (ram, 0x4f0ad4, 4)]
[(ram, 0x4f096e, 1) MULTIEQUAL (ram, 0x4f096e, 1) , (ram, 0x4f096e, 1) , (ram, 0x4f096e, 1)]
[(ram, 0x4ef7c8, 1) MULTIEQUAL (ram, 0x4ef7c8, 1) , (ram, 0x4ef7c8, 1) , (ram, 0x4ef7c8, 1)]
[(ram, 0x4ef7c0, 8) MULTIEQUAL (ram, 0x4ef7c0, 8) , (ram, 0x4ef7c0, 8) , (ram, 0x4ef7c0, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x18, 4) COPY (const, 0x2, 4)]
[ ---  BRANCH (ram, 0x23cfda, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x353, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x353, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4ef7c0, 8) INDIRECT (ram, 0x4ef7c0, 8) , (const, 0x353, 4), (ram, 0x4ef7c0, 8) MULTIEQUAL (ram, 0x4ef7c0, 8) , (ram, 0x4ef7c0, 8)]
[(ram, 0x4ef7c8, 1) INDIRECT (ram, 0x4ef7c8, 1) , (const, 0x353, 4), (ram, 0x4ef7c8, 1) MULTIEQUAL (ram, 0x4ef7c8, 1) , (ram, 0x4ef7c8, 1)]
[(ram, 0x4f096e, 1) INDIRECT (ram, 0x4f096e, 1) , (const, 0x353, 4), (ram, 0x4f096e, 1) MULTIEQUAL (ram, 0x4f096e, 1) , (ram, 0x4f096e, 1)]
[(ram, 0x4f0ad4, 4) INDIRECT (ram, 0x4f0ad4, 4) , (const, 0x353, 4), (ram, 0x4f0ad4, 4) MULTIEQUAL (ram, 0x4f0ad4, 4) , (ram, 0x4f0ad4, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x353, 4), (stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x353, 4), (stack, 0xfffffffffffffb58, 4) MULTIEQUAL (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x353, 4), (stack, 0xfffffffffffffb60, 8) MULTIEQUAL (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x353, 4), (stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb70, 8) INDIRECT (stack, 0xfffffffffffffb70, 8) , (const, 0x353, 4), (stack, 0xfffffffffffffb70, 8) MULTIEQUAL (stack, 0xfffffffffffffb70, 8) , (stack, 0xfffffffffffffb70, 8)]
[(stack, 0xfffffffffffffb78, 8) INDIRECT (stack, 0xfffffffffffffb78, 8) , (const, 0x353, 4), (stack, 0xfffffffffffffb78, 8) MULTIEQUAL (stack, 0xfffffffffffffb78, 8) , (stack, 0xfffffffffffffb78, 8)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x353, 4), (stack, 0xfffffffffffffb98, 8) MULTIEQUAL (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8)]
[(stack, 0xfffffffffffffba0, 8) INDIRECT (stack, 0xfffffffffffffba0, 8) , (const, 0x353, 4), (stack, 0xfffffffffffffba0, 8) MULTIEQUAL (stack, 0xfffffffffffffba0, 8) , (stack, 0xfffffffffffffba0, 8)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x353, 4), (stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x353, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CBRANCH (ram, 0x23cfda, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10000750, 8), (unique, 0x10000750, 8) CALL (ram, 0x248f60, 8) , (stack, 0xfffffffffffffba8, 8) , (unique, 0x10000476, 8), (unique, 0x10000476, 8) COPY (const, 0x2b6c7c, 8), (stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[ ---  CALL (ram, 0x266330, 8) , (register, 0x0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x366, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x362, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x366, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x362, 4)]
[(ram, 0x4ef7c0, 8) INDIRECT (ram, 0x4ef7c0, 8) , (const, 0x366, 4), (ram, 0x4ef7c0, 8) INDIRECT (ram, 0x4ef7c0, 8) , (const, 0x362, 4)]
[(ram, 0x4ef7c8, 1) INDIRECT (ram, 0x4ef7c8, 1) , (const, 0x366, 4), (ram, 0x4ef7c8, 1) INDIRECT (ram, 0x4ef7c8, 1) , (const, 0x362, 4)]
[(ram, 0x4f096e, 1) INDIRECT (ram, 0x4f096e, 1) , (const, 0x366, 4), (ram, 0x4f096e, 1) INDIRECT (ram, 0x4f096e, 1) , (const, 0x362, 4)]
[(ram, 0x4f0ad4, 4) INDIRECT (ram, 0x4f0ad4, 4) , (const, 0x366, 4), (ram, 0x4f0ad4, 4) INDIRECT (ram, 0x4f0ad4, 4) , (const, 0x362, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x366, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x362, 4)]
[(stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x366, 4), (stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x362, 4)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x366, 4), (stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x362, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x366, 4), (stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x362, 4)]
[(stack, 0xfffffffffffffb70, 8) INDIRECT (stack, 0xfffffffffffffb70, 8) , (const, 0x366, 4), (stack, 0xfffffffffffffb70, 8) INDIRECT (stack, 0xfffffffffffffb70, 8) , (const, 0x362, 4)]
[(stack, 0xfffffffffffffb78, 8) INDIRECT (stack, 0xfffffffffffffb78, 8) , (const, 0x366, 4), (stack, 0xfffffffffffffb78, 8) INDIRECT (stack, 0xfffffffffffffb78, 8) , (const, 0x362, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x366, 4), (stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x362, 4)]
[(stack, 0xfffffffffffffba0, 8) INDIRECT (stack, 0xfffffffffffffba0, 8) , (const, 0x366, 4), (stack, 0xfffffffffffffba0, 8) INDIRECT (stack, 0xfffffffffffffba0, 8) , (const, 0x362, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x366, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x362, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x366, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x362, 4)]
[ ---  CALLIND (register, 0x0, 8) , (unique, 0x3800, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x222, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x222, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4ef7c0, 8) INDIRECT (ram, 0x4ef7c0, 8) , (const, 0x222, 4), (ram, 0x4ef7c0, 8) MULTIEQUAL (ram, 0x4ef7c0, 8) , (ram, 0x4ef7c0, 8) , (ram, 0x4ef7c0, 8)]
[(ram, 0x4ef7c8, 1) INDIRECT (ram, 0x4ef7c8, 1) , (const, 0x222, 4), (ram, 0x4ef7c8, 1) MULTIEQUAL (ram, 0x4ef7c8, 1) , (ram, 0x4ef7c8, 1) , (ram, 0x4ef7c8, 1)]
[(ram, 0x4f096e, 1) INDIRECT (ram, 0x4f096e, 1) , (const, 0x222, 4), (ram, 0x4f096e, 1) MULTIEQUAL (ram, 0x4f096e, 1) , (ram, 0x4f096e, 1) , (ram, 0x4f096e, 1)]
[(ram, 0x4f0ad4, 4) INDIRECT (ram, 0x4f0ad4, 4) , (const, 0x222, 4), (ram, 0x4f0ad4, 4) MULTIEQUAL (ram, 0x4f0ad4, 4) , (ram, 0x4f0ad4, 4) , (ram, 0x4f0ad4, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x222, 4), (stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x222, 4), (stack, 0xfffffffffffffb58, 4) MULTIEQUAL (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x222, 4), (stack, 0xfffffffffffffb60, 8) MULTIEQUAL (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x222, 4), (stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb70, 8) INDIRECT (stack, 0xfffffffffffffb70, 8) , (const, 0x222, 4), (stack, 0xfffffffffffffb70, 8) MULTIEQUAL (stack, 0xfffffffffffffb70, 8) , (stack, 0xfffffffffffffb70, 8) , (stack, 0xfffffffffffffb70, 8)]
[(stack, 0xfffffffffffffb78, 8) INDIRECT (stack, 0xfffffffffffffb78, 8) , (const, 0x222, 4), (stack, 0xfffffffffffffb78, 8) MULTIEQUAL (stack, 0xfffffffffffffb78, 8) , (stack, 0xfffffffffffffb78, 8) , (stack, 0xfffffffffffffb78, 8)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x222, 4), (stack, 0xfffffffffffffb98, 8) MULTIEQUAL (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8)]
[(stack, 0xfffffffffffffba0, 8) INDIRECT (stack, 0xfffffffffffffba0, 8) , (const, 0x222, 4), (stack, 0xfffffffffffffba0, 8) MULTIEQUAL (stack, 0xfffffffffffffba0, 8) , (stack, 0xfffffffffffffba0, 8) , (stack, 0xfffffffffffffba0, 8)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x222, 4), (stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x222, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(register, 0x0, 4) CALL (ram, 0x249490, 8) , (unique, 0x3100, 8) , (unique, 0x10000496, 8) , (const, 0x0, 8) , (unique, 0x3800, 8) , (register, 0x18, 4) , (const, 0x0, 8), (unique, 0x10000496, 8) COPY (const, 0x2b6c88, 8), (unique, 0x3100, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffba8, 8), (register, 0x18, 4) MULTIEQUAL (register, 0x18, 4) , (register, 0x0, 4) , (register, 0x0, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (unique, 0x10000367, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffba0, 8) MULTIEQUAL (unique, 0x10000357, 8) , (stack, 0xfffffffffffffba0, 8)]
[(stack, 0xfffffffffffffb98, 8) MULTIEQUAL (unique, 0x1000034f, 8) , (stack, 0xfffffffffffffb98, 8)]
[(stack, 0xfffffffffffffb78, 8) MULTIEQUAL (unique, 0x10000347, 8) , (stack, 0xfffffffffffffb78, 8)]
[(stack, 0xfffffffffffffb70, 8) MULTIEQUAL (unique, 0x1000033f, 8) , (stack, 0xfffffffffffffb70, 8)]
[(stack, 0xfffffffffffffb68, 8) MULTIEQUAL (unique, 0x10000337, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb60, 8) MULTIEQUAL (unique, 0x1000032f, 8) , (stack, 0xfffffffffffffb60, 8)]
[(stack, 0xfffffffffffffb58, 4) MULTIEQUAL (unique, 0x1000032b, 4) , (stack, 0xfffffffffffffb58, 4)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (unique, 0x10000323, 8) , (stack, 0xfffffffffffffb50, 8)]
[(ram, 0x4f0ad4, 4) MULTIEQUAL (unique, 0x1000031f, 4) , (ram, 0x4f0ad4, 4)]
[(ram, 0x4f096e, 1) MULTIEQUAL (unique, 0x1000031e, 1) , (ram, 0x4f096e, 1)]
[(ram, 0x4ef7c0, 8) MULTIEQUAL (unique, 0x10000315, 8) , (ram, 0x4ef7c0, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (unique, 0x1000030d, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (unique, 0x10000305, 8) , (register, 0x110, 8)]
[(register, 0x38, 8) MULTIEQUAL (unique, 0x100005c3, 8) , (unique, 0x100005cb, 8)]
[(stack, 0xfffffffffffffba8, 8) COPY (unique, 0x1000065f, 8), (unique, 0x1000065f, 8) MULTIEQUAL (unique, 0x1000064f, 8) , (unique, 0x10000657, 8)]
[(unique, 0x1000059a, 1) COPY (ram, 0x4ef7c8, 1), (ram, 0x4ef7c8, 1) MULTIEQUAL (unique, 0x1000031d, 1) , (ram, 0x4ef7c8, 1)]
[ ---  CBRANCH (ram, 0x23d138, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x100005a3, 8) , (unique, 0x100005ab, 8)]
[(register, 0x18, 4) COPY (const, 0x0, 4)]
[(unique, 0x100005ef, 4) COPY (register, 0x18, 4), (register, 0x18, 4) COPY (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x23d18d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x38, 8) , (const, 0x0, 8)]
[(register, 0x18, 4) COPY (unique, 0x100005f3, 4), (unique, 0x100005f3, 4) MULTIEQUAL (unique, 0x100005eb, 4) , (unique, 0x100005ef, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x28c, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x28c, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4ef7c0, 8) INDIRECT (ram, 0x4ef7c0, 8) , (const, 0x28c, 4), (ram, 0x4ef7c0, 8) MULTIEQUAL (ram, 0x4ef7c0, 8) , (ram, 0x4ef7c0, 8)]
[(ram, 0x4ef7c8, 1) INDIRECT (ram, 0x4ef7c8, 1) , (const, 0x28c, 4), (ram, 0x4ef7c8, 1) MULTIEQUAL (ram, 0x4ef7c8, 1) , (ram, 0x4ef7c8, 1)]
[(ram, 0x4f096e, 1) INDIRECT (ram, 0x4f096e, 1) , (const, 0x28c, 4), (ram, 0x4f096e, 1) MULTIEQUAL (ram, 0x4f096e, 1) , (ram, 0x4f096e, 1)]
[(ram, 0x4f0ad4, 4) INDIRECT (ram, 0x4f0ad4, 4) , (const, 0x28c, 4), (ram, 0x4f0ad4, 4) MULTIEQUAL (ram, 0x4f0ad4, 4) , (ram, 0x4f0ad4, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x28c, 4), (unique, 0xbd80, 8) CAST (unique, 0x10000758, 8), (unique, 0x10000758, 8) LOAD (const, 0x1b1, 4) , (register, 0x38, 8), (register, 0x38, 8) MULTIEQUAL (unique, 0x100005d3, 8) , (register, 0x38, 8)]
[(stack, 0xfffffffffffffba0, 8) INDIRECT (stack, 0xfffffffffffffba0, 8) , (const, 0x28c, 4), (stack, 0xfffffffffffffba0, 8) MULTIEQUAL (stack, 0xfffffffffffffba0, 8) , (stack, 0xfffffffffffffba0, 8)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x28c, 4), (stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x28c, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CALL (ram, 0x1212c8, 8) , (register, 0x38, 8), (register, 0x38, 8) MULTIEQUAL (unique, 0x100005d3, 8) , (register, 0x38, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(ram, 0x4f0ad4, 4) MULTIEQUAL (ram, 0x4f0ad4, 4) , (ram, 0x4f0ad4, 4) , (ram, 0x4f0ad4, 4)]
[(ram, 0x4f096e, 1) MULTIEQUAL (ram, 0x4f096e, 1) , (ram, 0x4f096e, 1) , (ram, 0x4f096e, 1)]
[(ram, 0x4ef7c8, 1) MULTIEQUAL (ram, 0x4ef7c8, 1) , (ram, 0x4ef7c8, 1) , (ram, 0x4ef7c8, 1)]
[(ram, 0x4ef7c0, 8) MULTIEQUAL (ram, 0x4ef7c0, 8) , (ram, 0x4ef7c0, 8) , (ram, 0x4ef7c0, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x100005d3, 8) COPY (stack, 0xfffffffffffffb98, 8), (stack, 0xfffffffffffffb98, 8) MULTIEQUAL (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8)]
[(unique, 0x100005eb, 4) COPY (register, 0x18, 4), (register, 0x18, 4) MULTIEQUAL (register, 0x18, 4) , (register, 0x18, 4) , (register, 0x18, 4)]
[(unique, 0x100006f8, 8) COPY (stack, 0xfffffffffffffba0, 8), (stack, 0xfffffffffffffba0, 8) MULTIEQUAL (stack, 0xfffffffffffffba0, 8) , (stack, 0xfffffffffffffba0, 8) , (stack, 0xfffffffffffffba0, 8)]
[ ---  CBRANCH (ram, 0x23d140, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xfffffffffffffb98, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffb98, 8) MULTIEQUAL (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8)]
[(unique, 0x10000557, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x1000055f, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(unique, 0x10000567, 8) MULTIEQUAL (ram, 0x4ef7c0, 8) , (ram, 0x4ef7c0, 8)]
[(unique, 0x1000056f, 1) MULTIEQUAL (ram, 0x4ef7c8, 1) , (ram, 0x4ef7c8, 1)]
[(unique, 0x10000570, 1) MULTIEQUAL (ram, 0x4f096e, 1) , (ram, 0x4f096e, 1)]
[(unique, 0x10000571, 4) MULTIEQUAL (ram, 0x4f0ad4, 4) , (ram, 0x4f0ad4, 4)]
[(unique, 0x10000575, 8) MULTIEQUAL (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8)]
[(unique, 0x10000585, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(unique, 0x1000058d, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(unique, 0x1000063f, 8) COPY (unique, 0x1000057d, 8), (unique, 0x1000057d, 8) MULTIEQUAL (unique, 0x100006f0, 8) , (unique, 0x100006f8, 8)]
[ ---  CBRANCH (ram, 0x23d18d, 1) , (unique, 0x10000556, 1), (unique, 0x10000556, 1) INT_NOTEQUAL (unique, 0x1000057d, 8) , (const, 0x0, 8), (unique, 0x1000057d, 8) MULTIEQUAL (unique, 0x100006f0, 8) , (unique, 0x100006f8, 8)]
[(register, 0x110, 8) INDIRECT (unique, 0x10000557, 8) , (const, 0x247, 4)]
[(ram, 0x4eae68, 8) INDIRECT (unique, 0x1000055f, 8) , (const, 0x247, 4)]
[(ram, 0x4ef7c0, 8) INDIRECT (unique, 0x10000567, 8) , (const, 0x247, 4)]
[(ram, 0x4ef7c8, 1) INDIRECT (unique, 0x1000056f, 1) , (const, 0x247, 4)]
[(ram, 0x4f096e, 1) INDIRECT (unique, 0x10000570, 1) , (const, 0x247, 4)]
[(ram, 0x4f0ad4, 4) INDIRECT (unique, 0x10000571, 4) , (const, 0x247, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (unique, 0x10000575, 8) , (const, 0x247, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (unique, 0x10000585, 8) , (const, 0x247, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (unique, 0x1000058d, 8) , (const, 0x247, 4)]
[ ---  CALL (ram, 0x1212c8, 8) , (unique, 0x1000057d, 8)]
[(unique, 0x100006f0, 8) COPY (stack, 0xfffffffffffffba0, 8), (stack, 0xfffffffffffffba0, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x247, 4), (unique, 0xbd80, 8) CAST (unique, 0x10000760, 8), (unique, 0x10000760, 8) LOAD (const, 0x1b1, 4) , (unique, 0x1000057d, 8)]
[(unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x394, 4)]
[(ram, 0x4ef7c0, 8) INDIRECT (ram, 0x4ef7c0, 8) , (const, 0x394, 4)]
[(ram, 0x4ef7c8, 1) INDIRECT (ram, 0x4ef7c8, 1) , (const, 0x394, 4)]
[(ram, 0x4f096e, 1) INDIRECT (ram, 0x4f096e, 1) , (const, 0x394, 4)]
[(ram, 0x4f0ad4, 4) INDIRECT (ram, 0x4f0ad4, 4) , (const, 0x394, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x0, 8) , (register, 0x38, 8)]
[(unique, 0x10000677, 8) COPY (register, 0x0, 8)]
[(unique, 0x10000687, 8) COPY (register, 0x0, 8)]
[(unique, 0x10000697, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) CAST (unique, 0x10000768, 8), (unique, 0x10000768, 8) LOAD (const, 0x1b1, 4) , (register, 0x0, 8)]
[(unique, 0x100006a7, 8) COPY (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (unique, 0x10000585, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffba0, 8) MULTIEQUAL (unique, 0x1000063f, 8) , (stack, 0xfffffffffffffba0, 8) , (stack, 0xfffffffffffffba0, 8)]
[(stack, 0xfffffffffffffb98, 8) MULTIEQUAL (unique, 0x10000575, 8) , (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8)]
[(ram, 0x4f0ad4, 4) MULTIEQUAL (unique, 0x10000571, 4) , (ram, 0x4f0ad4, 4) , (ram, 0x4f0ad4, 4)]
[(ram, 0x4f096e, 1) MULTIEQUAL (unique, 0x10000570, 1) , (ram, 0x4f096e, 1) , (ram, 0x4f096e, 1)]
[(ram, 0x4ef7c8, 1) MULTIEQUAL (unique, 0x1000056f, 1) , (ram, 0x4ef7c8, 1) , (ram, 0x4ef7c8, 1)]
[(ram, 0x4ef7c0, 8) MULTIEQUAL (unique, 0x10000567, 8) , (ram, 0x4ef7c0, 8) , (ram, 0x4ef7c0, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (unique, 0x1000055f, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x18, 4) MULTIEQUAL (register, 0x18, 4) , (register, 0x18, 4) , (register, 0x0, 4)]
[ ---  CBRANCH (ram, 0x23d3cf, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffffc0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (register, 0x110, 8) , (const, 0x5, 8) , (const, 0x8, 8), (register, 0x110, 8) MULTIEQUAL (unique, 0x10000557, 8) , (register, 0x110, 8) , (register, 0x110, 8), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (unique, 0x1000058d, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x282, 4)]
[(stack, 0xfffffffffffffba0, 8) INDIRECT (stack, 0xfffffffffffffba0, 8) , (const, 0x282, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x282, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x282, 4)]
[ ---  CALL (ram, 0x234c80, 8)]
[(ram, 0x4eae68, 8) COPY (ram, 0x4eae68, 8), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x282, 4)]
[(ram, 0x4ef7c0, 8) COPY (ram, 0x4ef7c0, 8), (ram, 0x4ef7c0, 8) INDIRECT (ram, 0x4ef7c0, 8) , (const, 0x282, 4)]
[(ram, 0x4ef7c8, 1) COPY (ram, 0x4ef7c8, 1), (ram, 0x4ef7c8, 1) INDIRECT (ram, 0x4ef7c8, 1) , (const, 0x282, 4)]
[(ram, 0x4f096e, 1) COPY (ram, 0x4f096e, 1), (ram, 0x4f096e, 1) INDIRECT (ram, 0x4f096e, 1) , (const, 0x282, 4)]
[(ram, 0x4f0ad4, 4) COPY (ram, 0x4f0ad4, 4), (ram, 0x4f0ad4, 4) INDIRECT (ram, 0x4f0ad4, 4) , (const, 0x282, 4)]
[ ---  RETURN (const, 0x1, 4)]
[(ram, 0x4eae68, 8) COPY (ram, 0x4eae68, 8)]
[(ram, 0x4ef7c0, 8) COPY (ram, 0x4ef7c0, 8)]
[(ram, 0x4ef7c8, 1) COPY (ram, 0x4ef7c8, 1)]
[(ram, 0x4f096e, 1) COPY (ram, 0x4f096e, 1)]
[(ram, 0x4f0ad4, 4) COPY (ram, 0x4f0ad4, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 4), (register, 0x0, 4) COPY (register, 0x18, 4)]
