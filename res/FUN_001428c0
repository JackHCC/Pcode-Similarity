[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff88, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff88, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff88, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff88, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff88, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff88, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff88, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x3b, 4)]
[(ram, 0x4eaea8, 8) INDIRECT (ram, 0x4eaea8, 8) , (const, 0x3b, 4)]
[(ram, 0x4ecd58, 8) INDIRECT (ram, 0x4ecd58, 8) , (const, 0x3b, 4)]
[(ram, 0x4ecd68, 4) INDIRECT (ram, 0x4ecd68, 4) , (const, 0x3b, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x3b, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x3b, 4), (stack, 0xffffffffffffff80, 8) COPY (const, 0x1428f7, 8)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x3b, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (unique, 0x100004dd, 8) , (const, 0x3b, 4), (unique, 0x100004dd, 8) COPY (register, 0x30, 8)]
[(stack, 0xffffffffffffffa4, 4) INDIRECT (unique, 0x100004e5, 4) , (const, 0x3b, 4), (unique, 0x100004e5, 4) COPY (register, 0x8, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (unique, 0x100004e9, 8) , (const, 0x3b, 4), (unique, 0x100004e9, 8) COPY (register, 0x10, 8)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (unique, 0x100004f1, 8) , (const, 0x3b, 4), (unique, 0x100004f1, 8) COPY (register, 0x38, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x3b, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x100004f9, 8), (unique, 0x100004f9, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8)]
[(register, 0x0, 8) CALL (ram, 0x121100, 8) , (register, 0x38, 8)]
[ ---  CBRANCH (ram, 0x142aa0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x10, 8) , (const, 0x0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x312, 4)]
[(ram, 0x4eaea8, 8) INDIRECT (ram, 0x4eaea8, 8) , (const, 0x312, 4)]
[(ram, 0x4ecd58, 8) INDIRECT (ram, 0x4ecd58, 8) , (const, 0x312, 4)]
[(ram, 0x4ecd68, 4) INDIRECT (ram, 0x4ecd68, 4) , (const, 0x312, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x312, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x312, 4), (stack, 0xffffffffffffff80, 8) COPY (const, 0x142aa9, 8)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x312, 4)]
[(stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0x312, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x312, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x312, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x312, 4)]
[(register, 0x0, 8) INT_ADD (register, 0x0, 8) , (const, 0x1, 8), (register, 0x0, 8) CALL (ram, 0x121100, 8) , (stack, 0xffffffffffffff98, 8)]
[ ---  BRANCH (ram, 0x142903, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa4, 4) MULTIEQUAL (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (register, 0x0, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(ram, 0x4ecd68, 4) MULTIEQUAL (ram, 0x4ecd68, 4) , (ram, 0x4ecd68, 4)]
[(ram, 0x4ecd58, 8) MULTIEQUAL (ram, 0x4ecd58, 8) , (ram, 0x4ecd58, 8)]
[(ram, 0x4eaea8, 8) MULTIEQUAL (ram, 0x4eaea8, 8) , (ram, 0x4eaea8, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x14291f, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4f08f8, 4) , (const, 0x0, 4), (ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[ ---  CBRANCH (const, 0x4, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4ecd68, 4) , (const, 0x0, 4)]
[(ram, 0x4ecd68, 4) COPY (const, 0x1, 4)]
[ ---  CALLOTHER (const, 0x11, 4)]
[ ---  CBRANCH (const, 0x4, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4ecd68, 4) , (const, 0x0, 4)]
[(ram, 0x4ecd68, 4) COPY (const, 0x1, 4)]
[ ---  BRANCH (ram, 0x142942, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x2f3, 4)]
[(ram, 0x4eaea8, 8) INDIRECT (ram, 0x4eaea8, 8) , (const, 0x2f3, 4)]
[(ram, 0x4ecd58, 8) INDIRECT (ram, 0x4ecd58, 8) , (const, 0x2f3, 4)]
[(ram, 0x4ecd68, 4) INDIRECT (ram, 0x4ecd68, 4) , (const, 0x2f3, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x2f3, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x2f3, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x2f3, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x2f3, 4)]
[(stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0x2f3, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x2f3, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x2f3, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2f3, 4)]
[ ---  CALL (ram, 0x230690, 8) , (unique, 0x100002a5, 8), (unique, 0x100002a5, 8) PTRSUB (const, 0x0, 8) , (const, 0x4ecd68, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa4, 4) MULTIEQUAL (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(ram, 0x4ecd68, 4) MULTIEQUAL (ram, 0x4ecd68, 4) , (ram, 0x4ecd68, 4) , (ram, 0x4ecd68, 4)]
[(ram, 0x4ecd58, 8) MULTIEQUAL (ram, 0x4ecd58, 8) , (ram, 0x4ecd58, 8) , (ram, 0x4ecd58, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x142a90, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000501, 8), (unique, 0x10000501, 8) CAST (ram, 0x4eaea8, 8), (ram, 0x4eaea8, 8) MULTIEQUAL (ram, 0x4eaea8, 8) , (ram, 0x4eaea8, 8) , (ram, 0x4eaea8, 8)]
[ ---  CBRANCH (ram, 0x142a90, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0xbd80, 8)]
[(register, 0x30, 8) COPY (const, 0x10, 8)]
[(register, 0xb0, 8) COPY (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x1429a7, 1)]
[(unique, 0x100004a5, 8) COPY (register, 0xa0, 8), (register, 0xa0, 8) COPY (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x142973, 1)]
[(register, 0xb8, 8) MULTIEQUAL (unique, 0xbd80, 8) , (register, 0xb8, 8)]
[(register, 0xa0, 8) COPY (unique, 0x100004b5, 8), (unique, 0x100004b5, 8) MULTIEQUAL (unique, 0x100004a5, 8) , (unique, 0x100004ad, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x9a, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eaea8, 8) INDIRECT (ram, 0x4eaea8, 8) , (const, 0x9a, 4), (ram, 0x4eaea8, 8) MULTIEQUAL (ram, 0x4eaea8, 8) , (ram, 0x4eaea8, 8)]
[(ram, 0x4ecd58, 8) INDIRECT (ram, 0x4ecd58, 8) , (const, 0x9a, 4), (ram, 0x4ecd58, 8) MULTIEQUAL (ram, 0x4ecd58, 8) , (ram, 0x4ecd58, 8)]
[(ram, 0x4ecd68, 4) INDIRECT (ram, 0x4ecd68, 4) , (const, 0x9a, 4), (ram, 0x4ecd68, 4) MULTIEQUAL (ram, 0x4ecd68, 4) , (ram, 0x4ecd68, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x9a, 4), (ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x9a, 4), (stack, 0xffffffffffffff80, 8) COPY (const, 0x142982, 8)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x9a, 4), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x9a, 4), (stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0x9a, 4), (stack, 0xffffffffffffffa4, 4) MULTIEQUAL (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x9a, 4), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x9a, 4), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x9a, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CBRANCH (ram, 0x14298e, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x121210, 8) , (register, 0xa8, 8) , (stack, 0xffffffffffffffb0, 8) , (register, 0x0, 8), (register, 0xa8, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[ ---  CBRANCH (ram, 0x142a0b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x3d, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3b80, 8), (unique, 0x3b80, 8) PTRADD (register, 0xa8, 8) , (register, 0x0, 8) , (const, 0x1, 8)]
[(unique, 0x100004ad, 8) COPY (unique, 0x3800, 8), (unique, 0x3800, 8) INT_ADD (register, 0xa0, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x142970, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0xb8, 8), (register, 0xb8, 8) PTRADD (register, 0xb8, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[(unique, 0x3580, 8) INT_ADD (unique, 0x3480, 8) , (const, 0x18, 8), (unique, 0x3480, 8) INT_MULT (register, 0xa0, 8) , (const, 0x8, 8)]
[(register, 0xb0, 8) MULTIEQUAL (unique, 0x3800, 8) , (register, 0xb0, 8)]
[(unique, 0x1000042d, 8) COPY (ram, 0x4ecd58, 8), (ram, 0x4ecd58, 8) MULTIEQUAL (ram, 0x4ecd58, 8) , (ram, 0x4ecd58, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xd4, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eaea8, 8) INDIRECT (ram, 0x4eaea8, 8) , (const, 0xd4, 4), (ram, 0x4eaea8, 8) MULTIEQUAL (ram, 0x4eaea8, 8) , (ram, 0x4eaea8, 8)]
[(ram, 0x4ecd58, 8) INDIRECT (ram, 0x4ecd58, 8) , (const, 0xd4, 4), (ram, 0x4ecd58, 8) MULTIEQUAL (ram, 0x4ecd58, 8) , (ram, 0x4ecd58, 8)]
[(ram, 0x4ecd68, 4) INDIRECT (ram, 0x4ecd68, 4) , (const, 0xd4, 4), (ram, 0x4ecd68, 4) MULTIEQUAL (ram, 0x4ecd68, 4) , (ram, 0x4ecd68, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0xd4, 4), (ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0xd4, 4), (stack, 0xffffffffffffff80, 8) COPY (const, 0x1429b6, 8)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0xd4, 4), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0xd4, 4), (stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0xd4, 4), (stack, 0xffffffffffffffa4, 4) MULTIEQUAL (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0xd4, 4), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0xd4, 4), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xd4, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(unique, 0x10000485, 8) COPY (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x142b89, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x121020, 8) , (ram, 0x4ecd58, 8) , (register, 0x30, 8), (register, 0x30, 8) MULTIEQUAL (unique, 0x3580, 8) , (register, 0x30, 8), (ram, 0x4ecd58, 8) MULTIEQUAL (ram, 0x4ecd58, 8) , (ram, 0x4ecd58, 8)]
[(register, 0xb0, 8) INT_MULT (register, 0xb0, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x1429ea, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x1000042d, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000509, 8), (unique, 0x10000509, 8) CAST (ram, 0x4eaea8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x116, 4)]
[(ram, 0x4eaea8, 8) INDIRECT (ram, 0x4eaea8, 8) , (const, 0x116, 4)]
[(ram, 0x4ecd58, 8) INDIRECT (ram, 0x4ecd58, 8) , (const, 0x116, 4)]
[(ram, 0x4ecd68, 4) INDIRECT (ram, 0x4ecd68, 4) , (const, 0x116, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x116, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x116, 4), (stack, 0xffffffffffffff80, 8) COPY (const, 0x1429e0, 8)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x116, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x116, 4)]
[(stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0x116, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x116, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x116, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x116, 4)]
[(register, 0x0, 8) CALL (ram, 0x121160, 8) , (register, 0x0, 8) , (unique, 0xbd80, 8) , (register, 0xb0, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa4, 4) MULTIEQUAL (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3400, 8) , (const, 0x0, 8), (unique, 0x3400, 8) CAST (unique, 0x10000519, 8), (unique, 0x10000519, 8) INT_ADD (unique, 0x10000511, 8) , (register, 0xb0, 8), (unique, 0x10000511, 8) CAST (register, 0x8, 8), (register, 0x8, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3a00, 8) , (const, 0x0, 8), (unique, 0x3a00, 8) CAST (unique, 0x10000529, 8), (unique, 0x10000529, 8) INT_ADD (unique, 0x10000521, 8) , (unique, 0x10000305, 8), (unique, 0x10000521, 8) CAST (register, 0x8, 8), (unique, 0x10000305, 8) INT_ADD (register, 0xb0, 8) , (const, 0x8, 8), (register, 0x8, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) CAST (unique, 0x10000519, 8), (unique, 0x10000519, 8) INT_ADD (unique, 0x10000511, 8) , (register, 0xb0, 8), (unique, 0x10000511, 8) CAST (register, 0x8, 8), (register, 0x8, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[(ram, 0x4eaea8, 8) INDIRECT (ram, 0x4eaea8, 8) , (const, 0x127, 4), (ram, 0x4eaea8, 8) INDIRECT (ram, 0x4eaea8, 8) , (const, 0x123, 4), (ram, 0x4eaea8, 8) INDIRECT (ram, 0x4eaea8, 8) , (const, 0x11e, 4), (ram, 0x4eaea8, 8) MULTIEQUAL (ram, 0x4eaea8, 8) , (ram, 0x4eaea8, 8)]
[(ram, 0x4ecd58, 8) INDIRECT (ram, 0x4ecd58, 8) , (const, 0x127, 4), (ram, 0x4ecd58, 8) INDIRECT (ram, 0x4ecd58, 8) , (const, 0x123, 4), (ram, 0x4ecd58, 8) INDIRECT (unique, 0x100004bd, 8) , (const, 0x11e, 4), (unique, 0x100004bd, 8) COPY (register, 0x8, 8), (register, 0x8, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[(ram, 0x4ecd68, 4) INDIRECT (ram, 0x4ecd68, 4) , (const, 0x127, 4), (ram, 0x4ecd68, 4) INDIRECT (ram, 0x4ecd68, 4) , (const, 0x123, 4), (ram, 0x4ecd68, 4) INDIRECT (ram, 0x4ecd68, 4) , (const, 0x11e, 4), (ram, 0x4ecd68, 4) MULTIEQUAL (ram, 0x4ecd68, 4) , (ram, 0x4ecd68, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x127, 4), (ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x123, 4), (ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x11e, 4), (ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000531, 8) , (register, 0x8, 8), (unique, 0x10000531, 8) CAST (unique, 0x10000425, 8), (unique, 0x10000425, 8) COPY (ram, 0x4eaea8, 8), (register, 0x8, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8), (ram, 0x4eaea8, 8) MULTIEQUAL (ram, 0x4eaea8, 8) , (ram, 0x4eaea8, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(ram, 0x4ecd68, 4) MULTIEQUAL (ram, 0x4ecd68, 4) , (ram, 0x4ecd68, 4)]
[(ram, 0x4ecd58, 8) MULTIEQUAL (ram, 0x4ecd58, 8) , (ram, 0x4ecd58, 8)]
[(ram, 0x4eaea8, 8) MULTIEQUAL (ram, 0x4eaea8, 8) , (ram, 0x4eaea8, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb8, 8) MULTIEQUAL (register, 0xb8, 8) , (unique, 0x3400, 8)]
[(register, 0xa8, 8) MULTIEQUAL (register, 0xa8, 8) , (unique, 0xbd80, 8)]
[ ---  CBRANCH (ram, 0x142a78, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffffa4, 4) , (const, 0x0, 4), (stack, 0xffffffffffffffa4, 4) MULTIEQUAL (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4)]
[ ---  CBRANCH (ram, 0x142a78, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xa8, 8) , (const, 0x0, 8)]
[(unique, 0x10000455, 8) COPY (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x142ac0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffffa8, 8) , (const, 0x0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1c4, 4)]
[(ram, 0x4eaea8, 8) INDIRECT (ram, 0x4eaea8, 8) , (const, 0x1c4, 4)]
[(ram, 0x4ecd58, 8) INDIRECT (ram, 0x4ecd58, 8) , (const, 0x1c4, 4)]
[(ram, 0x4ecd68, 4) INDIRECT (ram, 0x4ecd68, 4) , (const, 0x1c4, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x1c4, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x1c4, 4), (stack, 0xffffffffffffff80, 8) COPY (const, 0x142ad1, 8)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x1c4, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x1c4, 4)]
[(stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0x1c4, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x1c4, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1c4, 4)]
[(register, 0x0, 4) CALL (ram, 0x2300b0, 8) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) INT_ADD (unique, 0x3880, 8) , (register, 0x0, 8), (unique, 0x3880, 8) INT_ADD (stack, 0xffffffffffffff90, 8) , (const, 0x1, 8)]
[(unique, 0x1000044d, 8) COPY (stack, 0xffffffffffffffb0, 8), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x1c4, 4)]
[ ---  CBRANCH (ram, 0x142ae2, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (unique, 0x3a00, 8) , (const, 0x1001, 8), (unique, 0x3a00, 8) INT_ADD (unique, 0x3880, 8) , (register, 0x0, 8), (unique, 0x3880, 8) INT_ADD (stack, 0xffffffffffffff90, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x142bc9, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4)]
[(register, 0x20, 8) PTRADD (unique, 0x10000315, 8) , (unique, 0x1000019e, 8) , (const, 0x1, 8), (unique, 0x10000315, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff88, 8), (unique, 0x1000019e, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (unique, 0x3100, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3100, 8) INT_ADD (unique, 0x3a00, 8) , (const, 0x1e, 8)]
[(register, 0x20, 8) PTRADD (unique, 0x1000032d, 8) , (unique, 0x1000019e, 8) , (const, 0x1, 8), (unique, 0x1000032d, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff88, 8), (unique, 0x1000019e, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (unique, 0x3100, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3100, 8) INT_ADD (unique, 0x3a00, 8) , (const, 0x1e, 8)]
[(register, 0x20, 8) PTRADD (unique, 0x10000345, 8) , (unique, 0x1000019e, 8) , (const, 0x1, 8), (unique, 0x10000345, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff88, 8), (unique, 0x1000019e, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (unique, 0x3100, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3100, 8) INT_ADD (unique, 0x3a00, 8) , (const, 0x1e, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000549, 8) , (const, 0x142b08, 8), (unique, 0x10000549, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x100003a5, 8) , (unique, 0x1000039d, 8) , (const, 0x1, 8), (unique, 0x100003a5, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff88, 8), (unique, 0x1000039d, 8) INT_ADD (unique, 0x1000019e, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x1000019e, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (unique, 0x3100, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3100, 8) INT_ADD (unique, 0x3a00, 8) , (const, 0x1e, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x0, 8) , (const, 0x3d, 1), (register, 0x0, 8) CAST (unique, 0x10000551, 8), (unique, 0x10000551, 8) CALL (ram, 0x121230, 8) , (unique, 0x3800, 8) , (unique, 0x1000044d, 8) , (register, 0x0, 8), (unique, 0x3800, 8) CAST (unique, 0x10000541, 8), (unique, 0x10000541, 8) INT_ADD (unique, 0x10000539, 8) , (unique, 0x1000019e, 8), (unique, 0x10000539, 8) CAST (unique, 0x1000038d, 8), (unique, 0x1000038d, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff90, 8), (unique, 0x1000019e, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (unique, 0x3100, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3100, 8) INT_ADD (unique, 0x3a00, 8) , (const, 0x1e, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000559, 8) , (const, 0x142b1c, 8), (unique, 0x10000559, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x100003bd, 8) , (unique, 0x100003b5, 8) , (const, 0x1, 8), (unique, 0x100003bd, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff88, 8), (unique, 0x100003b5, 8) INT_ADD (unique, 0x1000019e, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x1000019e, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (unique, 0x3100, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3100, 8) INT_ADD (unique, 0x3a00, 8) , (const, 0x1e, 8)]
[ ---  CALL (ram, 0x121160, 8) , (unique, 0x3100, 8) , (unique, 0x1000043d, 8) , (unique, 0x10000435, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x1, 8), (unique, 0x10000435, 8) COPY (stack, 0xffffffffffffff90, 8), (unique, 0x1000043d, 8) COPY (stack, 0xffffffffffffff98, 8), (register, 0x0, 8) CAST (unique, 0x10000551, 8), (unique, 0x10000551, 8) CALL (ram, 0x121230, 8) , (unique, 0x3800, 8) , (unique, 0x1000044d, 8) , (register, 0x0, 8), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x201, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x201, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x200, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x200, 4), (unique, 0x3800, 8) CAST (unique, 0x10000541, 8), (unique, 0x10000541, 8) INT_ADD (unique, 0x10000539, 8) , (unique, 0x1000019e, 8), (unique, 0x10000539, 8) CAST (unique, 0x1000038d, 8), (unique, 0x1000038d, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff90, 8), (unique, 0x1000019e, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (unique, 0x3100, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3100, 8) INT_ADD (unique, 0x3a00, 8) , (const, 0x1e, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000561, 8) , (const, 0x142b32, 8), (unique, 0x10000561, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x100003d5, 8) , (unique, 0x100003cd, 8) , (const, 0x1, 8), (unique, 0x100003d5, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff88, 8), (unique, 0x100003cd, 8) INT_ADD (unique, 0x1000019e, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x1000019e, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (unique, 0x3100, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3100, 8) INT_ADD (unique, 0x3a00, 8) , (const, 0x1e, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x214, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x20e, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x201, 4)]
[(ram, 0x4eaea8, 8) INDIRECT (ram, 0x4eaea8, 8) , (const, 0x214, 4), (ram, 0x4eaea8, 8) INDIRECT (ram, 0x4eaea8, 8) , (const, 0x20e, 4), (ram, 0x4eaea8, 8) INDIRECT (ram, 0x4eaea8, 8) , (const, 0x20b, 4), (ram, 0x4eaea8, 8) INDIRECT (ram, 0x4eaea8, 8) , (const, 0x201, 4)]
[(ram, 0x4ecd58, 8) INDIRECT (ram, 0x4ecd58, 8) , (const, 0x214, 4), (ram, 0x4ecd58, 8) INDIRECT (ram, 0x4ecd58, 8) , (const, 0x20e, 4), (ram, 0x4ecd58, 8) INDIRECT (ram, 0x4ecd58, 8) , (const, 0x20b, 4), (ram, 0x4ecd58, 8) INDIRECT (ram, 0x4ecd58, 8) , (const, 0x201, 4)]
[(ram, 0x4ecd68, 4) INDIRECT (ram, 0x4ecd68, 4) , (const, 0x214, 4), (ram, 0x4ecd68, 4) INDIRECT (ram, 0x4ecd68, 4) , (const, 0x20e, 4), (ram, 0x4ecd68, 4) INDIRECT (ram, 0x4ecd68, 4) , (const, 0x20b, 4), (ram, 0x4ecd68, 4) INDIRECT (ram, 0x4ecd68, 4) , (const, 0x201, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x214, 4), (ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x20e, 4), (ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x20b, 4), (ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x201, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x214, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x213, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x20e, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x20d, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x201, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x200, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x214, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x213, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x20e, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x20d, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x201, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x200, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x214, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x213, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x20e, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x20d, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x201, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x200, 4)]
[(stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0x214, 4), (stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0x213, 4), (stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0x20e, 4), (stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0x20d, 4), (stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0x201, 4), (stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0x200, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x214, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x213, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x20e, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x20d, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x201, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x200, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x214, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x213, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x20e, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x20d, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x201, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x200, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x214, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x213, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x20e, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x20d, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x201, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x200, 4)]
[ ---  CBRANCH (ram, 0x142b47, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10000571, 8), (unique, 0x10000571, 8) CALL (ram, 0x21d6c0, 8) , (unique, 0x3800, 8) , (unique, 0x10000569, 8) , (unique, 0x1000025d, 8), (unique, 0x10000569, 8) CAST (unique, 0x1000027d, 8), (unique, 0x1000027d, 8) PTRSUB (const, 0x0, 8) , (const, 0x4ecd60, 8), (unique, 0x1000025d, 8) PTRSUB (const, 0x0, 8) , (const, 0x121200, 8), (unique, 0x3800, 8) CAST (unique, 0x10000541, 8), (unique, 0x10000541, 8) INT_ADD (unique, 0x10000539, 8) , (unique, 0x1000019e, 8), (unique, 0x10000539, 8) CAST (unique, 0x1000038d, 8), (unique, 0x1000038d, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff90, 8), (unique, 0x1000019e, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (unique, 0x3100, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3100, 8) INT_ADD (unique, 0x3a00, 8) , (const, 0x1e, 8)]
[(stack, 0xffffffffffffffa8, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x0, 8)]
[(unique, 0x1000045d, 8) COPY (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x142a7f, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000579, 8) , (const, 0x142b4f, 8), (unique, 0x10000579, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x100003ed, 8) , (unique, 0x100003e5, 8) , (const, 0x1, 8), (unique, 0x100003ed, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff88, 8), (unique, 0x100003e5, 8) INT_ADD (unique, 0x1000019e, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x232, 4)]
[(ram, 0x4eaea8, 8) INDIRECT (ram, 0x4eaea8, 8) , (const, 0x232, 4)]
[(ram, 0x4ecd58, 8) INDIRECT (ram, 0x4ecd58, 8) , (const, 0x232, 4)]
[(ram, 0x4ecd68, 4) INDIRECT (ram, 0x4ecd68, 4) , (const, 0x232, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x232, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x232, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x231, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x232, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x231, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x232, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x231, 4)]
[(stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0x232, 4), (stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0x231, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x232, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x231, 4), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x232, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x231, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x232, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x231, 4)]
[(stack, 0xffffffffffffffa8, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10000581, 8), (unique, 0x10000581, 8) CALL (ram, 0x1212c0, 8) , (unique, 0x3a00, 8)]
[(unique, 0x1000048d, 8) COPY (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x142b89, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10000581, 8), (unique, 0x10000581, 8) CALL (ram, 0x1212c0, 8) , (unique, 0x3a00, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000589, 8) , (const, 0x142b66, 8), (unique, 0x10000589, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x10000405, 8) , (unique, 0x100003fd, 8) , (const, 0x1, 8), (unique, 0x10000405, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff88, 8), (unique, 0x100003fd, 8) INT_ADD (unique, 0x1000019e, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x245, 4)]
[(ram, 0x4eaea8, 8) INDIRECT (ram, 0x4eaea8, 8) , (const, 0x245, 4)]
[(ram, 0x4ecd58, 8) INDIRECT (ram, 0x4ecd58, 8) , (const, 0x245, 4)]
[(ram, 0x4ecd68, 4) INDIRECT (ram, 0x4ecd68, 4) , (const, 0x245, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x245, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x245, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x244, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x245, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x244, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x245, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x244, 4)]
[(stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0x245, 4), (stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0x244, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x245, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x244, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x245, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x244, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x245, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x244, 4)]
[ ---  CALL (ram, 0x121160, 8) , (register, 0x0, 8) , (unique, 0x3800, 8) , (unique, 0x3a00, 8)]
[(unique, 0x1000046d, 8) COPY (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x28e, 4)]
[(ram, 0x4eaea8, 8) INDIRECT (ram, 0x4eaea8, 8) , (const, 0x28e, 4)]
[(ram, 0x4ecd58, 8) INDIRECT (ram, 0x4ecd58, 8) , (const, 0x28e, 4)]
[(ram, 0x4ecd68, 4) INDIRECT (ram, 0x4ecd68, 4) , (const, 0x28e, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x28e, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x28e, 4), (stack, 0xffffffffffffff80, 8) COPY (const, 0x142bd1, 8)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x28e, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x28e, 4)]
[(stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0x28e, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x28e, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x28e, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x28e, 4)]
[(stack, 0xffffffffffffffa8, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10000591, 8), (unique, 0x10000591, 8) CALL (ram, 0x1212c0, 8) , (unique, 0x3a00, 8)]
[(unique, 0x10000495, 8) COPY (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x142b89, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10000591, 8), (unique, 0x10000591, 8) CALL (ram, 0x1212c0, 8) , (unique, 0x3a00, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa4, 4) MULTIEQUAL (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(ram, 0x4ecd68, 4) MULTIEQUAL (ram, 0x4ecd68, 4) , (ram, 0x4ecd68, 4) , (ram, 0x4ecd68, 4)]
[(ram, 0x4ecd58, 8) MULTIEQUAL (ram, 0x4ecd58, 8) , (ram, 0x4ecd58, 8) , (ram, 0x4ecd58, 8)]
[(ram, 0x4eaea8, 8) MULTIEQUAL (ram, 0x4eaea8, 8) , (ram, 0x4eaea8, 8) , (ram, 0x4eaea8, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x20, 8) MULTIEQUAL (unique, 0x10000485, 8) , (unique, 0x1000048d, 8) , (unique, 0x10000495, 8)]
[ ---  CBRANCH (ram, 0x142b9d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4f08f8, 4) , (const, 0x0, 4), (ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[ ---  CALLOTHER (const, 0x11, 4)]
[(unique, 0x100004d5, 4) COPY (unique, 0x10000415, 4), (unique, 0x10000415, 4) INT_ADD (ram, 0x4ecd68, 4) , (const, 0xffffffff, 4)]
[ ---  CBRANCH (ram, 0x142bbf, 1) , (unique, 0x10000419, 1), (unique, 0x10000419, 1) INT_NOTEQUAL (unique, 0x10000415, 4) , (const, 0x0, 4), (unique, 0x10000415, 4) INT_ADD (ram, 0x4ecd68, 4) , (const, 0xffffffff, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000599, 8) , (const, 0x142bb8, 8), (unique, 0x10000599, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xffffffffffffff78, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x278, 4)]
[(ram, 0x4eaea8, 8) INDIRECT (ram, 0x4eaea8, 8) , (const, 0x278, 4)]
[(ram, 0x4ecd58, 8) INDIRECT (ram, 0x4ecd58, 8) , (const, 0x278, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x278, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x278, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x277, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x278, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x277, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x278, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x277, 4)]
[(stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0x278, 4), (stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0x277, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x278, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x277, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x278, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x277, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x278, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x277, 4)]
[ ---  CALL (ram, 0x2306c0, 8) , (unique, 0x1000029d, 8), (unique, 0x1000029d, 8) PTRSUB (const, 0x0, 8) , (const, 0x4ecd68, 8)]
[(unique, 0x100004d1, 4) COPY (ram, 0x4ecd68, 4), (ram, 0x4ecd68, 4) INDIRECT (ram, 0x4ecd68, 4) , (const, 0x278, 4), (ram, 0x4ecd68, 4) INT_ADD (ram, 0x4ecd68, 4) , (const, 0xffffffff, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa4, 4) MULTIEQUAL (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(ram, 0x4ecd58, 8) MULTIEQUAL (ram, 0x4ecd58, 8) , (ram, 0x4ecd58, 8)]
[(ram, 0x4eaea8, 8) MULTIEQUAL (ram, 0x4eaea8, 8) , (ram, 0x4eaea8, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4ecd68, 4) COPY (unique, 0x100004d9, 4), (unique, 0x100004d9, 4) MULTIEQUAL (unique, 0x100004d1, 4) , (unique, 0x100004d5, 4)]
[(register, 0x0, 8) COPY (const, 0xffffffff, 8)]
[ ---  BRANCH (ram, 0x142a4f, 1)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x2a6, 4), (stack, 0xffffffffffffff80, 8) COPY (const, 0x142bed, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x0, 8) , (const, 0x3d, 1), (register, 0x0, 8) CAST (unique, 0x100005a1, 8), (unique, 0x100005a1, 8) CALL (ram, 0x121230, 8) , (register, 0x0, 8) , (stack, 0xffffffffffffffb0, 8) , (register, 0x0, 8)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x2b3, 4), (stack, 0xffffffffffffff80, 8) COPY (const, 0x142c01, 8)]
[ ---  CALL (ram, 0x121160, 8) , (unique, 0x3100, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff90, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x1, 8), (register, 0x0, 8) CAST (unique, 0x100005a1, 8), (unique, 0x100005a1, 8) CALL (ram, 0x121230, 8) , (register, 0x0, 8) , (stack, 0xffffffffffffffb0, 8) , (register, 0x0, 8), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x2a6, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x2a6, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x2b9, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x2b3, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x2a6, 4)]
[(ram, 0x4eaea8, 8) INDIRECT (ram, 0x4eaea8, 8) , (const, 0x2b9, 4), (ram, 0x4eaea8, 8) INDIRECT (ram, 0x4eaea8, 8) , (const, 0x2b3, 4), (ram, 0x4eaea8, 8) INDIRECT (ram, 0x4eaea8, 8) , (const, 0x2b0, 4), (ram, 0x4eaea8, 8) INDIRECT (ram, 0x4eaea8, 8) , (const, 0x2a6, 4)]
[(ram, 0x4ecd58, 8) INDIRECT (ram, 0x4ecd58, 8) , (const, 0x2b9, 4), (ram, 0x4ecd58, 8) INDIRECT (ram, 0x4ecd58, 8) , (const, 0x2b3, 4), (ram, 0x4ecd58, 8) INDIRECT (ram, 0x4ecd58, 8) , (const, 0x2b0, 4), (ram, 0x4ecd58, 8) INDIRECT (ram, 0x4ecd58, 8) , (const, 0x2a6, 4)]
[(ram, 0x4ecd68, 4) INDIRECT (ram, 0x4ecd68, 4) , (const, 0x2b9, 4), (ram, 0x4ecd68, 4) INDIRECT (ram, 0x4ecd68, 4) , (const, 0x2b3, 4), (ram, 0x4ecd68, 4) INDIRECT (ram, 0x4ecd68, 4) , (const, 0x2b0, 4), (ram, 0x4ecd68, 4) INDIRECT (ram, 0x4ecd68, 4) , (const, 0x2a6, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x2b9, 4), (ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x2b3, 4), (ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x2b0, 4), (ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x2a6, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x2b9, 4), (stack, 0xffffffffffffff80, 8) COPY (const, 0x142c17, 8)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x2b9, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x2b3, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x2a6, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x2b9, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x2b3, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x2a6, 4)]
[(stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0x2b9, 4), (stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0x2b3, 4), (stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0x2a6, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x2b9, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x2b3, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x2a6, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x2b9, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x2b3, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x2a6, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2b9, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2b3, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2a6, 4)]
[(unique, 0x10000475, 8) COPY (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x142b66, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x100005b1, 8), (unique, 0x100005b1, 8) CALL (ram, 0x21d6c0, 8) , (register, 0x0, 8) , (unique, 0x100005a9, 8) , (unique, 0x1000026d, 8), (unique, 0x100005a9, 8) CAST (unique, 0x1000028d, 8), (unique, 0x1000028d, 8) PTRSUB (const, 0x0, 8) , (const, 0x4ecd60, 8), (unique, 0x1000026d, 8) PTRSUB (const, 0x0, 8) , (const, 0x121200, 8)]
[(unique, 0x1000047d, 8) COPY (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x142b66, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100005b9, 8) , (const, 0x142b7d, 8), (unique, 0x100005b9, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8), (register, 0x20, 8) MULTIEQUAL (unique, 0x1000046d, 8) , (unique, 0x10000475, 8) , (unique, 0x1000047d, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x24d, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x24d, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x24c, 4), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x24d, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x24c, 4), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x24d, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x24c, 4), (stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0x24d, 4), (stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0x24c, 4), (stack, 0xffffffffffffffa4, 4) MULTIEQUAL (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x24d, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x24c, 4), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x24d, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x24c, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CALL (ram, 0x21d2e0, 8) , (unique, 0x10000445, 8) , (unique, 0x100005c1, 8) , (unique, 0x10000265, 8), (unique, 0x100005c1, 8) CAST (unique, 0x10000285, 8), (unique, 0x10000285, 8) PTRSUB (const, 0x0, 8) , (const, 0x4ecd60, 8), (unique, 0x10000265, 8) PTRSUB (const, 0x0, 8) , (const, 0x121200, 8), (unique, 0x10000445, 8) COPY (stack, 0xffffffffffffffa8, 8), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(ram, 0x4eaea8, 8) INDIRECT (ram, 0x4eaea8, 8) , (const, 0x252, 4), (ram, 0x4eaea8, 8) INDIRECT (ram, 0x4eaea8, 8) , (const, 0x24d, 4), (ram, 0x4eaea8, 8) MULTIEQUAL (ram, 0x4eaea8, 8) , (ram, 0x4eaea8, 8) , (ram, 0x4eaea8, 8)]
[(ram, 0x4ecd58, 8) INDIRECT (ram, 0x4ecd58, 8) , (const, 0x252, 4), (ram, 0x4ecd58, 8) INDIRECT (ram, 0x4ecd58, 8) , (const, 0x24d, 4), (ram, 0x4ecd58, 8) MULTIEQUAL (ram, 0x4ecd58, 8) , (ram, 0x4ecd58, 8) , (ram, 0x4ecd58, 8)]
[(ram, 0x4ecd68, 4) INDIRECT (ram, 0x4ecd68, 4) , (const, 0x252, 4), (ram, 0x4ecd68, 4) INDIRECT (ram, 0x4ecd68, 4) , (const, 0x24d, 4), (ram, 0x4ecd68, 4) MULTIEQUAL (ram, 0x4ecd68, 4) , (ram, 0x4ecd68, 4) , (ram, 0x4ecd68, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x252, 4), (ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x24d, 4), (ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0xb8, 8) , (stack, 0xffffffffffffffa8, 8), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x24d, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x24c, 4), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[ ---  BRANCH (ram, 0x142a17, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x2d5, 4)]
[(ram, 0x4eaea8, 8) INDIRECT (ram, 0x4eaea8, 8) , (const, 0x2d5, 4)]
[(ram, 0x4ecd58, 8) INDIRECT (ram, 0x4ecd58, 8) , (const, 0x2d5, 4)]
[(ram, 0x4ecd68, 4) INDIRECT (ram, 0x4ecd68, 4) , (const, 0x2d5, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x2d5, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x2d5, 4), (stack, 0xffffffffffffff80, 8) COPY (const, 0x142c35, 8)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x2d5, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x2d5, 4)]
[(stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0x2d5, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x2d5, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x2d5, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2d5, 4)]
[ ---  CALL (ram, 0x1212c8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa8, 8) COPY (unique, 0xbd80, 8)]
[(unique, 0x10000465, 8) COPY (register, 0x20, 8)]
[ ---  BRANCH (ram, 0x142a7f, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa4, 4) MULTIEQUAL (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x20, 8) MULTIEQUAL (unique, 0x10000455, 8) , (unique, 0x1000045d, 8) , (unique, 0x10000465, 8)]
[(ram, 0x4eaea8, 8) INDIRECT (ram, 0x4eaea8, 8) , (const, 0x1b8, 4), (ram, 0x4eaea8, 8) MULTIEQUAL (ram, 0x4eaea8, 8) , (ram, 0x4eaea8, 8) , (ram, 0x4eaea8, 8)]
[(ram, 0x4ecd58, 8) INDIRECT (ram, 0x4ecd58, 8) , (const, 0x1b8, 4), (ram, 0x4ecd58, 8) MULTIEQUAL (ram, 0x4ecd58, 8) , (ram, 0x4ecd58, 8) , (ram, 0x4ecd58, 8)]
[(ram, 0x4ecd68, 4) INDIRECT (ram, 0x4ecd68, 4) , (const, 0x1b8, 4), (ram, 0x4ecd68, 4) MULTIEQUAL (ram, 0x4ecd68, 4) , (ram, 0x4ecd68, 4) , (ram, 0x4ecd68, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x1b8, 4), (ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0xb8, 8) , (stack, 0xffffffffffffffa8, 8), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[ ---  BRANCH (ram, 0x142a17, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa4, 4) MULTIEQUAL (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(ram, 0x4ecd68, 4) MULTIEQUAL (ram, 0x4ecd68, 4) , (ram, 0x4ecd68, 4) , (ram, 0x4ecd68, 4)]
[(ram, 0x4ecd58, 8) MULTIEQUAL (ram, 0x4ecd58, 8) , (ram, 0x4ecd58, 8) , (ram, 0x4ecd58, 8)]
[(ram, 0x4eaea8, 8) MULTIEQUAL (ram, 0x4eaea8, 8) , (ram, 0x4eaea8, 8) , (ram, 0x4eaea8, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x142a2b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4f08f8, 4) , (const, 0x0, 4), (ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[ ---  CALLOTHER (const, 0x11, 4)]
[(unique, 0x100004c9, 4) COPY (unique, 0x1000041a, 4), (unique, 0x1000041a, 4) INT_ADD (ram, 0x4ecd68, 4) , (const, 0xffffffff, 4)]
[ ---  CBRANCH (ram, 0x142a4d, 1) , (unique, 0x1000041e, 1), (unique, 0x1000041e, 1) INT_NOTEQUAL (unique, 0x1000041a, 4) , (const, 0x0, 4), (unique, 0x1000041a, 4) INT_ADD (ram, 0x4ecd68, 4) , (const, 0xffffffff, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100005c9, 8) , (const, 0x142a46, 8), (unique, 0x100005c9, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xffffffffffffff78, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x193, 4)]
[(ram, 0x4eaea8, 8) INDIRECT (ram, 0x4eaea8, 8) , (const, 0x193, 4)]
[(ram, 0x4ecd58, 8) INDIRECT (ram, 0x4ecd58, 8) , (const, 0x193, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x193, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x193, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x192, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x193, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x192, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x193, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x192, 4)]
[(stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0x193, 4), (stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0x192, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x193, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x192, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x193, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x192, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x193, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x192, 4)]
[ ---  CALL (ram, 0x2306c0, 8) , (unique, 0x10000295, 8), (unique, 0x10000295, 8) PTRSUB (const, 0x0, 8) , (const, 0x4ecd68, 8)]
[(unique, 0x100004c5, 4) COPY (ram, 0x4ecd68, 4), (ram, 0x4ecd68, 4) INDIRECT (ram, 0x4ecd68, 4) , (const, 0x193, 4), (ram, 0x4ecd68, 4) INT_ADD (ram, 0x4ecd68, 4) , (const, 0xffffffff, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa4, 4) MULTIEQUAL (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(ram, 0x4ecd58, 8) MULTIEQUAL (ram, 0x4ecd58, 8) , (ram, 0x4ecd58, 8)]
[(ram, 0x4eaea8, 8) MULTIEQUAL (ram, 0x4eaea8, 8) , (ram, 0x4eaea8, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4ecd68, 4) COPY (unique, 0x100004cd, 4), (unique, 0x100004cd, 4) MULTIEQUAL (unique, 0x100004c5, 4) , (unique, 0x100004c9, 4)]
[(register, 0x0, 8) COPY (const, 0x0, 8)]
[(unique, 0x1000049d, 8) COPY (register, 0x20, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa4, 4) MULTIEQUAL (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(ram, 0x4ecd68, 4) MULTIEQUAL (ram, 0x4ecd68, 4) , (ram, 0x4ecd68, 4)]
[(ram, 0x4ecd58, 8) MULTIEQUAL (ram, 0x4ecd58, 8) , (ram, 0x4ecd58, 8)]
[(ram, 0x4eaea8, 8) MULTIEQUAL (ram, 0x4eaea8, 8) , (ram, 0x4eaea8, 8)]
[(register, 0x20, 8) MULTIEQUAL (unique, 0x1000049d, 8) , (register, 0x20, 8)]
[(register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x142c3e, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffffc0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x100005d1, 8), (unique, 0x100005d1, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100005d9, 8) , (unique, 0x10000275, 8), (unique, 0x100005d9, 8) CAST (register, 0x20, 8), (unique, 0x10000275, 8) PTRSUB (const, 0x0, 8) , (const, 0x142c43, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x184, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x183, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x184, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x183, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x184, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x183, 4)]
[(stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0x184, 4), (stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0x183, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x184, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x183, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x184, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x183, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x184, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x183, 4)]
[ ---  CALL (ram, 0x234c80, 8)]
[(ram, 0x4eaea8, 8) COPY (ram, 0x4eaea8, 8), (ram, 0x4eaea8, 8) INDIRECT (ram, 0x4eaea8, 8) , (const, 0x184, 4)]
[(ram, 0x4ecd58, 8) COPY (ram, 0x4ecd58, 8), (ram, 0x4ecd58, 8) INDIRECT (ram, 0x4ecd58, 8) , (const, 0x184, 4)]
[(ram, 0x4ecd68, 4) COPY (ram, 0x4ecd68, 4), (ram, 0x4ecd68, 4) INDIRECT (ram, 0x4ecd68, 4) , (const, 0x184, 4)]
[(ram, 0x4f08f8, 4) COPY (ram, 0x4f08f8, 4), (ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x184, 4)]
[ ---  RETURN (const, 0x1, 4)]
[(ram, 0x4eaea8, 8) COPY (ram, 0x4eaea8, 8)]
[(ram, 0x4ecd58, 8) COPY (ram, 0x4ecd58, 8)]
[(ram, 0x4ecd68, 4) COPY (ram, 0x4ecd68, 4)]
[(ram, 0x4f08f8, 4) COPY (ram, 0x4f08f8, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8)]
