[(unique, 0x100003c0, 16) INT_ADD (unique, 0x100005f0, 16) , (stack, 0xfffffffffffffe48, 8), (unique, 0x100005f0, 16) INT_LEFT (unique, 0x100005e0, 16) , (const, 0x40, 16), (unique, 0x100005e0, 16) INT_SEXT (stack, 0xfffffffffffffe50, 8)]
[(unique, 0xbd80, 8) CAST (unique, 0x100006d8, 8), (unique, 0x100006d8, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x38, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x46, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x46, 4)]
[(ram, 0x4eff60, 16) INDIRECT (ram, 0x4eff60, 16) , (const, 0x46, 4)]
[(ram, 0x4eff70, 8) INDIRECT (ram, 0x4eff70, 8) , (const, 0x46, 4)]
[(stack, 0xfffffffffffffea0, 8) INDIRECT (unique, 0x100006b0, 8) , (const, 0x46, 4), (unique, 0x100006b0, 8) COPY (register, 0x30, 8)]
[(stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0x46, 4)]
[(stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0x46, 4)]
[(stack, 0xfffffffffffffeb4, 2) INDIRECT (stack, 0xfffffffffffffeb4, 2) , (const, 0x46, 4)]
[(stack, 0xfffffffffffffeb6, 1) INDIRECT (stack, 0xfffffffffffffeb6, 1) , (const, 0x46, 4)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x46, 4)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x46, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x46, 4)]
[(stack, 0xffffffffffffff00, 4) INDIRECT (stack, 0xffffffffffffff00, 4) , (const, 0x46, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x46, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x46, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x46, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x46, 4)]
[(stack, 0xffffffffffffff28, 4) INDIRECT (stack, 0xffffffffffffff28, 4) , (const, 0x46, 4)]
[(stack, 0xffffffffffffff50, 16) INDIRECT (stack, 0xffffffffffffff50, 16) , (const, 0x46, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x46, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x46, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x46, 4)]
[(stack, 0xffffffffffffffa8, 2) INDIRECT (stack, 0xffffffffffffffa8, 2) , (const, 0x46, 4)]
[(stack, 0xffffffffffffffaa, 2) INDIRECT (stack, 0xffffffffffffffaa, 2) , (const, 0x46, 4)]
[(stack, 0xffffffffffffffac, 4) INDIRECT (stack, 0xffffffffffffffac, 4) , (const, 0x46, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x46, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x100006e0, 8), (unique, 0x100006e0, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8)]
[(register, 0x10, 8) SUBPIECE (unique, 0x10000600, 16) , (const, 0x0, 4), (unique, 0x10000600, 16) INT_RIGHT (VARIABLE, 0x0, 4) , (const, 0x40, 4), (VARIABLE, 0x0, 4) CALL (ram, 0x2414c0, 8)]
[(register, 0x0, 8) SUBPIECE (VARIABLE, 0x0, 4) , (const, 0x0, 4), (VARIABLE, 0x0, 4) CALL (ram, 0x2414c0, 8)]
[ ---  CBRANCH (ram, 0x256a6b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x10, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x256cf0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (const, 0xffffffffffffffff, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x100006e8, 8), (unique, 0x100006e8, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0xe, 8) , (const, 0x4, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x100006f0, 8), (unique, 0x100006f0, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0xc, 8) , (const, 0x4, 8)]
[(unique, 0x10000670, 8) COPY (unique, 0xbd80, 8)]
[(register, 0x0, 8) MULTIEQUAL (unique, 0x10000670, 8) , (stack, 0x10, 8)]
[ ---  CBRANCH (ram, 0x2569fc, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (const, 0xffffffffffffffff, 8) , (register, 0x28, 8), (register, 0x28, 8) MULTIEQUAL (unique, 0xbd80, 8) , (stack, 0x8, 8)]
[ ---  CBRANCH (ram, 0x256a38, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (register, 0x0, 8) , (const, 0xf4240, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xbc, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xbc, 4)]
[(ram, 0x4eff60, 16) INDIRECT (ram, 0x4eff60, 16) , (const, 0xbc, 4)]
[(ram, 0x4eff70, 8) INDIRECT (ram, 0x4eff70, 8) , (const, 0xbc, 4)]
[(stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0xbc, 4)]
[(stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0xbc, 4)]
[(stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0xbc, 4)]
[(stack, 0xfffffffffffffeb4, 2) INDIRECT (stack, 0xfffffffffffffeb4, 2) , (const, 0xbc, 4)]
[(stack, 0xfffffffffffffeb6, 1) INDIRECT (stack, 0xfffffffffffffeb6, 1) , (const, 0xbc, 4)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0xbc, 4)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0xbc, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0xbc, 4)]
[(stack, 0xffffffffffffff00, 4) INDIRECT (stack, 0xffffffffffffff00, 4) , (const, 0xbc, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0xbc, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0xbc, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0xbc, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0xbc, 4)]
[(stack, 0xffffffffffffff28, 4) INDIRECT (stack, 0xffffffffffffff28, 4) , (const, 0xbc, 4)]
[(stack, 0xffffffffffffff50, 16) INDIRECT (stack, 0xffffffffffffff50, 16) , (const, 0xbc, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0xbc, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0xbc, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0xbc, 4)]
[(stack, 0xffffffffffffffa8, 2) INDIRECT (stack, 0xffffffffffffffa8, 2) , (const, 0xbc, 4)]
[(stack, 0xffffffffffffffaa, 2) INDIRECT (stack, 0xffffffffffffffaa, 2) , (const, 0xbc, 4)]
[(stack, 0xffffffffffffffac, 4) INDIRECT (stack, 0xffffffffffffffac, 4) , (const, 0xbc, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xbc, 4)]
[(VARIABLE, 0x0, 4) CALL (ram, 0x241570, 8) , (register, 0x0, 8) , (register, 0x10, 8) , (register, 0x28, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffac, 4) MULTIEQUAL (stack, 0xffffffffffffffac, 4) , (stack, 0xffffffffffffffac, 4)]
[(stack, 0xffffffffffffffaa, 2) MULTIEQUAL (stack, 0xffffffffffffffaa, 2) , (stack, 0xffffffffffffffaa, 2)]
[(stack, 0xffffffffffffffa8, 2) MULTIEQUAL (stack, 0xffffffffffffffa8, 2) , (stack, 0xffffffffffffffa8, 2)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff50, 16) MULTIEQUAL (stack, 0xffffffffffffff50, 16) , (stack, 0xffffffffffffff50, 16)]
[(stack, 0xffffffffffffff28, 4) MULTIEQUAL (stack, 0xffffffffffffff28, 4) , (stack, 0xffffffffffffff28, 4)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 4) MULTIEQUAL (stack, 0xffffffffffffff00, 4) , (stack, 0xffffffffffffff00, 4)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffec0, 8) MULTIEQUAL (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8)]
[(stack, 0xfffffffffffffeb8, 8) MULTIEQUAL (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8)]
[(stack, 0xfffffffffffffeb6, 1) MULTIEQUAL (stack, 0xfffffffffffffeb6, 1) , (stack, 0xfffffffffffffeb6, 1)]
[(stack, 0xfffffffffffffeb4, 2) MULTIEQUAL (stack, 0xfffffffffffffeb4, 2) , (stack, 0xfffffffffffffeb4, 2)]
[(stack, 0xfffffffffffffeb0, 4) MULTIEQUAL (stack, 0xfffffffffffffeb0, 4) , (stack, 0xfffffffffffffeb0, 4)]
[(stack, 0xfffffffffffffeac, 4) MULTIEQUAL (stack, 0xfffffffffffffeac, 4) , (stack, 0xfffffffffffffeac, 4)]
[(stack, 0xfffffffffffffea0, 8) MULTIEQUAL (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8)]
[(ram, 0x4eff70, 8) MULTIEQUAL (ram, 0x4eff70, 8) , (ram, 0x4eff70, 8)]
[(ram, 0x4eff60, 16) MULTIEQUAL (ram, 0x4eff60, 16) , (ram, 0x4eff60, 16)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(stack, 0xfffffffffffffe50, 8) SUBPIECE (unique, 0x10000610, 16) , (const, 0x0, 4), (unique, 0x10000610, 16) INT_RIGHT (unique, 0x100003b0, 16) , (const, 0x40, 4), (unique, 0x100003b0, 16) MULTIEQUAL (unique, 0x100003c0, 16) , (VARIABLE, 0x0, 4)]
[(stack, 0xfffffffffffffe48, 8) SUBPIECE (unique, 0x100003b0, 16) , (const, 0x0, 4), (unique, 0x100003b0, 16) MULTIEQUAL (unique, 0x100003c0, 16) , (VARIABLE, 0x0, 4)]
[ ---  CBRANCH (ram, 0x2569fc, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (const, 0xffffffffffffffff, 8) , (unique, 0xbe00, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x100006f8, 8), (unique, 0x100006f8, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x8, 8) , (const, 0x4, 8)]
[ ---  CBRANCH (ram, 0x2569fc, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (unique, 0xbe00, 8) , (const, 0xf4240, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000700, 8), (unique, 0x10000700, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0xa, 8) , (const, 0x4, 8)]
[(unique, 0x3200, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x27, 8) , (const, 0x4, 8)]
[(unique, 0x3100, 8) CAST (unique, 0x10000708, 8), (unique, 0x10000708, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x16, 8) , (const, 0x4, 8)]
[(stack, 0xfffffffffffffe7c, 4) COPY (const, 0x3, 4)]
[(unique, 0x10000388, 4) COPY (const, 0x0, 4)]
[(unique, 0x3c80, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffea0, 8)]
[(unique, 0x3c80, 8) CAST (unique, 0x10000710, 8), (unique, 0x10000710, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffeb0, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffac, 4) MULTIEQUAL (stack, 0xffffffffffffffac, 4) , (stack, 0xffffffffffffffac, 4)]
[(stack, 0xffffffffffffffaa, 2) MULTIEQUAL (stack, 0xffffffffffffffaa, 2) , (stack, 0xffffffffffffffaa, 2)]
[(stack, 0xffffffffffffffa8, 2) MULTIEQUAL (stack, 0xffffffffffffffa8, 2) , (stack, 0xffffffffffffffa8, 2)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff50, 16) MULTIEQUAL (stack, 0xffffffffffffff50, 16) , (stack, 0xffffffffffffff50, 16)]
[(stack, 0xffffffffffffff28, 4) MULTIEQUAL (stack, 0xffffffffffffff28, 4) , (stack, 0xffffffffffffff28, 4)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 4) MULTIEQUAL (stack, 0xffffffffffffff00, 4) , (stack, 0xffffffffffffff00, 4)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffec0, 8) MULTIEQUAL (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8)]
[(stack, 0xfffffffffffffeb8, 8) MULTIEQUAL (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8)]
[(stack, 0xfffffffffffffeb6, 1) MULTIEQUAL (stack, 0xfffffffffffffeb6, 1) , (stack, 0xfffffffffffffeb6, 1)]
[(stack, 0xfffffffffffffeb4, 2) MULTIEQUAL (stack, 0xfffffffffffffeb4, 2) , (stack, 0xfffffffffffffeb4, 2)]
[(stack, 0xfffffffffffffeb0, 4) MULTIEQUAL (stack, 0xfffffffffffffeb0, 4) , (stack, 0xfffffffffffffeb0, 4)]
[(stack, 0xfffffffffffffeac, 4) MULTIEQUAL (stack, 0xfffffffffffffeac, 4) , (stack, 0xfffffffffffffeac, 4)]
[(stack, 0xfffffffffffffea0, 8) MULTIEQUAL (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8)]
[(stack, 0xfffffffffffffe7c, 4) MULTIEQUAL (stack, 0xfffffffffffffe7c, 4) , (unique, 0xbd00, 4)]
[(unique, 0x10000384, 4) MULTIEQUAL (unique, 0x10000388, 4) , (unique, 0x10000380, 4)]
[(ram, 0x4eff70, 8) MULTIEQUAL (ram, 0x4eff70, 8) , (ram, 0x4eff70, 8)]
[(ram, 0x4eff60, 16) MULTIEQUAL (ram, 0x4eff60, 16) , (ram, 0x4eff60, 16)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x10000390, 16) MULTIEQUAL (VARIABLE, 0x0, 4) , (unique, 0x100003e0, 16)]
[ ---  CBRANCH (ram, 0x256b6e, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x10, 8) , (const, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (const, 0x0, 4), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x16, 8) , (const, 0x4, 8)]
[ ---  CALLIND (unique, 0xbd80, 8) , (unique, 0x3100, 8) , (unique, 0xbc80, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000720, 8), (unique, 0x10000720, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x28, 8), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x22, 8) , (const, 0x4, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000718, 8), (unique, 0x10000718, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x18, 8) , (const, 0x4, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0xbd80, 8) , (unique, 0xbd00, 4), (unique, 0xbd00, 4) INT_ADD (unique, 0xbd00, 4) , (const, 0x1, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000728, 8), (unique, 0x10000728, 8) CAST (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x24, 8) , (const, 0x4, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x132, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x113, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x132, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x121, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x113, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x10e, 4)]
[(ram, 0x4eff60, 16) INDIRECT (ram, 0x4eff60, 16) , (const, 0x132, 4), (ram, 0x4eff60, 16) INDIRECT (ram, 0x4eff60, 16) , (const, 0x121, 4), (ram, 0x4eff60, 16) INDIRECT (ram, 0x4eff60, 16) , (const, 0x113, 4), (ram, 0x4eff60, 16) INDIRECT (ram, 0x4eff60, 16) , (const, 0x10e, 4)]
[(ram, 0x4eff70, 8) INDIRECT (ram, 0x4eff70, 8) , (const, 0x132, 4), (ram, 0x4eff70, 8) INDIRECT (ram, 0x4eff70, 8) , (const, 0x121, 4), (ram, 0x4eff70, 8) INDIRECT (ram, 0x4eff70, 8) , (const, 0x113, 4), (ram, 0x4eff70, 8) INDIRECT (ram, 0x4eff70, 8) , (const, 0x10e, 4)]
[(stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x132, 4), (stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x113, 4)]
[(stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0x132, 4), (stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0x113, 4)]
[(stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0x132, 4), (stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0x113, 4)]
[(stack, 0xfffffffffffffeb4, 2) INDIRECT (stack, 0xfffffffffffffeb4, 2) , (const, 0x132, 4), (stack, 0xfffffffffffffeb4, 2) INDIRECT (stack, 0xfffffffffffffeb4, 2) , (const, 0x113, 4)]
[(stack, 0xfffffffffffffeb6, 1) INDIRECT (stack, 0xfffffffffffffeb6, 1) , (const, 0x132, 4), (stack, 0xfffffffffffffeb6, 1) INDIRECT (stack, 0xfffffffffffffeb6, 1) , (const, 0x113, 4)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x132, 4), (stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x113, 4)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x132, 4), (stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x113, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x132, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x113, 4)]
[(stack, 0xffffffffffffff00, 4) INDIRECT (stack, 0xffffffffffffff00, 4) , (const, 0x132, 4), (stack, 0xffffffffffffff00, 4) INDIRECT (stack, 0xffffffffffffff00, 4) , (const, 0x113, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x132, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x113, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x132, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x113, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x132, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x113, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x132, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x113, 4)]
[(stack, 0xffffffffffffff28, 4) INDIRECT (stack, 0xffffffffffffff28, 4) , (const, 0x132, 4), (stack, 0xffffffffffffff28, 4) INDIRECT (stack, 0xffffffffffffff28, 4) , (const, 0x113, 4)]
[(stack, 0xffffffffffffff50, 16) INDIRECT (stack, 0xffffffffffffff50, 16) , (const, 0x132, 4), (stack, 0xffffffffffffff50, 16) INDIRECT (stack, 0xffffffffffffff50, 16) , (const, 0x113, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x132, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x113, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x132, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x113, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x132, 4), (stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x113, 4)]
[(stack, 0xffffffffffffffa8, 2) INDIRECT (stack, 0xffffffffffffffa8, 2) , (const, 0x132, 4), (stack, 0xffffffffffffffa8, 2) INDIRECT (stack, 0xffffffffffffffa8, 2) , (const, 0x113, 4)]
[(stack, 0xffffffffffffffaa, 2) INDIRECT (stack, 0xffffffffffffffaa, 2) , (const, 0x132, 4), (stack, 0xffffffffffffffaa, 2) INDIRECT (stack, 0xffffffffffffffaa, 2) , (const, 0x113, 4)]
[(stack, 0xffffffffffffffac, 4) INDIRECT (stack, 0xffffffffffffffac, 4) , (const, 0x132, 4), (stack, 0xffffffffffffffac, 4) INDIRECT (stack, 0xffffffffffffffac, 4) , (const, 0x113, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x132, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x113, 4)]
[ ---  CBRANCH (ram, 0x257048, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALLIND (unique, 0xbd80, 8) , (unique, 0x3100, 8) , (unique, 0x3c80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000738, 8), (unique, 0x10000738, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x8, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000730, 8), (unique, 0x10000730, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x18, 8) , (const, 0x4, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x147, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x147, 4)]
[(ram, 0x4eff60, 16) INDIRECT (ram, 0x4eff60, 16) , (const, 0x147, 4)]
[(ram, 0x4eff70, 8) INDIRECT (ram, 0x4eff70, 8) , (const, 0x147, 4)]
[(stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x147, 4)]
[(stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0x147, 4)]
[(stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0x147, 4)]
[(stack, 0xfffffffffffffeb4, 2) INDIRECT (stack, 0xfffffffffffffeb4, 2) , (const, 0x147, 4)]
[(stack, 0xfffffffffffffeb6, 1) INDIRECT (stack, 0xfffffffffffffeb6, 1) , (const, 0x147, 4)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x147, 4)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x147, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x147, 4)]
[(stack, 0xffffffffffffff00, 4) INDIRECT (stack, 0xffffffffffffff00, 4) , (const, 0x147, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x147, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x147, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x147, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x147, 4)]
[(stack, 0xffffffffffffff28, 4) INDIRECT (stack, 0xffffffffffffff28, 4) , (const, 0x147, 4)]
[(stack, 0xffffffffffffff50, 16) INDIRECT (stack, 0xffffffffffffff50, 16) , (const, 0x147, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x147, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x147, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x147, 4)]
[(stack, 0xffffffffffffffa8, 2) INDIRECT (stack, 0xffffffffffffffa8, 2) , (const, 0x147, 4)]
[(stack, 0xffffffffffffffaa, 2) INDIRECT (stack, 0xffffffffffffffaa, 2) , (const, 0x147, 4)]
[(stack, 0xffffffffffffffac, 4) INDIRECT (stack, 0xffffffffffffffac, 4) , (const, 0x147, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x147, 4)]
[ ---  CBRANCH (ram, 0x257048, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALLIND (unique, 0xbd80, 8) , (unique, 0xbd80, 8) , (unique, 0x3100, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000748, 8), (unique, 0x10000748, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x8, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000740, 8), (unique, 0x10000740, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x38, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x38, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x162, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x162, 4)]
[(ram, 0x4eff60, 16) INDIRECT (ram, 0x4eff60, 16) , (const, 0x162, 4)]
[(ram, 0x4eff70, 8) INDIRECT (ram, 0x4eff70, 8) , (const, 0x162, 4)]
[(stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x162, 4)]
[(stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0x162, 4)]
[(stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0x162, 4)]
[(stack, 0xfffffffffffffeb4, 2) INDIRECT (stack, 0xfffffffffffffeb4, 2) , (const, 0x162, 4)]
[(stack, 0xfffffffffffffeb6, 1) INDIRECT (stack, 0xfffffffffffffeb6, 1) , (const, 0x162, 4)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x162, 4)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x162, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x162, 4)]
[(stack, 0xffffffffffffff00, 4) INDIRECT (stack, 0xffffffffffffff00, 4) , (const, 0x162, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x162, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x162, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x162, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x162, 4)]
[(stack, 0xffffffffffffff28, 4) INDIRECT (stack, 0xffffffffffffff28, 4) , (const, 0x162, 4)]
[(stack, 0xffffffffffffff50, 16) INDIRECT (stack, 0xffffffffffffff50, 16) , (const, 0x162, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x162, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x162, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x162, 4)]
[(stack, 0xffffffffffffffa8, 2) INDIRECT (stack, 0xffffffffffffffa8, 2) , (const, 0x162, 4)]
[(stack, 0xffffffffffffffaa, 2) INDIRECT (stack, 0xffffffffffffffaa, 2) , (const, 0x162, 4)]
[(stack, 0xffffffffffffffac, 4) INDIRECT (stack, 0xffffffffffffffac, 4) , (const, 0x162, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x162, 4)]
[ ---  CBRANCH (ram, 0x257048, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALLIND (register, 0x10, 8) , (unique, 0x3100, 8) , (register, 0x8, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff50, 16) MULTIEQUAL (stack, 0xffffffffffffff50, 16) , (stack, 0xffffffffffffff50, 16) , (stack, 0xffffffffffffff50, 16)]
[(stack, 0xffffffffffffff28, 4) MULTIEQUAL (stack, 0xffffffffffffff28, 4) , (stack, 0xffffffffffffff28, 4) , (stack, 0xffffffffffffff28, 4)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 4) MULTIEQUAL (stack, 0xffffffffffffff00, 4) , (stack, 0xffffffffffffff00, 4) , (stack, 0xffffffffffffff00, 4)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffec0, 8) MULTIEQUAL (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8)]
[(stack, 0xfffffffffffffeb8, 8) MULTIEQUAL (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8)]
[(stack, 0xfffffffffffffeb4, 2) MULTIEQUAL (stack, 0xfffffffffffffeb4, 2) , (stack, 0xfffffffffffffeb4, 2) , (stack, 0xfffffffffffffeb4, 2)]
[(stack, 0xfffffffffffffeb0, 4) MULTIEQUAL (stack, 0xfffffffffffffeb0, 4) , (stack, 0xfffffffffffffeb0, 4) , (stack, 0xfffffffffffffeb0, 4)]
[(stack, 0xfffffffffffffeac, 4) MULTIEQUAL (stack, 0xfffffffffffffeac, 4) , (stack, 0xfffffffffffffeac, 4) , (stack, 0xfffffffffffffeac, 4)]
[(stack, 0xfffffffffffffea0, 8) MULTIEQUAL (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x664, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4eff60, 16) INDIRECT (ram, 0x4eff60, 16) , (const, 0x664, 4), (ram, 0x4eff60, 16) MULTIEQUAL (ram, 0x4eff60, 16) , (ram, 0x4eff60, 16) , (ram, 0x4eff60, 16)]
[(ram, 0x4eff70, 8) INDIRECT (ram, 0x4eff70, 8) , (const, 0x664, 4), (ram, 0x4eff70, 8) MULTIEQUAL (ram, 0x4eff70, 8) , (ram, 0x4eff70, 8) , (ram, 0x4eff70, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (const, 0x1, 4), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x10, 8) , (const, 0x4, 8)]
[(register, 0x0, 4) COPY (const, 0x1, 4)]
[ ---  BRANCH (ram, 0x256a09, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x175, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x175, 4)]
[(ram, 0x4eff60, 16) INDIRECT (ram, 0x4eff60, 16) , (const, 0x175, 4)]
[(ram, 0x4eff70, 8) INDIRECT (ram, 0x4eff70, 8) , (const, 0x175, 4)]
[(stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x175, 4)]
[(stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0x175, 4)]
[(stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0x175, 4)]
[(stack, 0xfffffffffffffeb4, 2) INDIRECT (stack, 0xfffffffffffffeb4, 2) , (const, 0x175, 4)]
[(stack, 0xfffffffffffffeb6, 1) INDIRECT (stack, 0xfffffffffffffeb6, 1) , (const, 0x175, 4)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x175, 4)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x175, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x175, 4)]
[(stack, 0xffffffffffffff00, 4) INDIRECT (stack, 0xffffffffffffff00, 4) , (const, 0x175, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x175, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x175, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x175, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x175, 4)]
[(stack, 0xffffffffffffff28, 4) INDIRECT (stack, 0xffffffffffffff28, 4) , (const, 0x175, 4)]
[(stack, 0xffffffffffffff50, 16) INDIRECT (stack, 0xffffffffffffff50, 16) , (const, 0x175, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x175, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x175, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x175, 4)]
[(stack, 0xffffffffffffffa8, 2) INDIRECT (stack, 0xffffffffffffffa8, 2) , (const, 0x175, 4)]
[(stack, 0xffffffffffffffaa, 2) INDIRECT (stack, 0xffffffffffffffaa, 2) , (const, 0x175, 4)]
[(stack, 0xffffffffffffffac, 4) INDIRECT (stack, 0xffffffffffffffac, 4) , (const, 0x175, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x175, 4)]
[(register, 0x0, 4) CALLIND (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000758, 8), (unique, 0x10000758, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x20, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000750, 8), (unique, 0x10000750, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x18, 8) , (const, 0x4, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x193, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eff60, 16) INDIRECT (ram, 0x4eff60, 16) , (const, 0x193, 4), (ram, 0x4eff60, 16) MULTIEQUAL (ram, 0x4eff60, 16) , (ram, 0x4eff60, 16)]
[(ram, 0x4eff70, 8) INDIRECT (ram, 0x4eff70, 8) , (const, 0x193, 4), (ram, 0x4eff70, 8) MULTIEQUAL (ram, 0x4eff70, 8) , (ram, 0x4eff70, 8)]
[(stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x193, 4), (stack, 0xfffffffffffffea0, 8) MULTIEQUAL (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8)]
[(stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0x193, 4), (stack, 0xfffffffffffffeac, 4) MULTIEQUAL (stack, 0xfffffffffffffeac, 4) , (stack, 0xfffffffffffffeac, 4)]
[(stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0x193, 4), (stack, 0xfffffffffffffeb0, 4) MULTIEQUAL (stack, 0xfffffffffffffeb0, 4) , (stack, 0xfffffffffffffeb0, 4)]
[(stack, 0xfffffffffffffeb4, 2) INDIRECT (stack, 0xfffffffffffffeb4, 2) , (const, 0x193, 4), (stack, 0xfffffffffffffeb4, 2) MULTIEQUAL (stack, 0xfffffffffffffeb4, 2) , (stack, 0xfffffffffffffeb4, 2)]
[(stack, 0xfffffffffffffeb6, 1) INDIRECT (stack, 0xfffffffffffffeb6, 1) , (const, 0x193, 4), (stack, 0xfffffffffffffeb6, 1) MULTIEQUAL (stack, 0xfffffffffffffeb6, 1) , (stack, 0xfffffffffffffeb6, 1)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x193, 4), (stack, 0xfffffffffffffeb8, 8) MULTIEQUAL (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x193, 4), (stack, 0xfffffffffffffec0, 8) MULTIEQUAL (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x193, 4), (stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xffffffffffffff00, 4) INDIRECT (stack, 0xffffffffffffff00, 4) , (const, 0x193, 4), (stack, 0xffffffffffffff00, 4) MULTIEQUAL (stack, 0xffffffffffffff00, 4) , (stack, 0xffffffffffffff00, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x193, 4), (stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x193, 4), (stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x193, 4), (stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x193, 4), (stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff28, 4) INDIRECT (stack, 0xffffffffffffff28, 4) , (const, 0x193, 4), (stack, 0xffffffffffffff28, 4) MULTIEQUAL (stack, 0xffffffffffffff28, 4) , (stack, 0xffffffffffffff28, 4)]
[(stack, 0xffffffffffffff50, 16) INDIRECT (stack, 0xffffffffffffff50, 16) , (const, 0x193, 4), (stack, 0xffffffffffffff50, 16) MULTIEQUAL (stack, 0xffffffffffffff50, 16) , (stack, 0xffffffffffffff50, 16)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x193, 4), (stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x193, 4), (stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x193, 4), (stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffffa8, 2) INDIRECT (stack, 0xffffffffffffffa8, 2) , (const, 0x193, 4), (stack, 0xffffffffffffffa8, 2) MULTIEQUAL (stack, 0xffffffffffffffa8, 2) , (stack, 0xffffffffffffffa8, 2)]
[(stack, 0xffffffffffffffaa, 2) INDIRECT (stack, 0xffffffffffffffaa, 2) , (const, 0x193, 4), (stack, 0xffffffffffffffaa, 2) MULTIEQUAL (stack, 0xffffffffffffffaa, 2) , (stack, 0xffffffffffffffaa, 2)]
[(stack, 0xffffffffffffffac, 4) INDIRECT (stack, 0xffffffffffffffac, 4) , (const, 0x193, 4), (stack, 0xffffffffffffffac, 4) MULTIEQUAL (stack, 0xffffffffffffffac, 4) , (stack, 0xffffffffffffffac, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x193, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(unique, 0x10000650, 8) COPY (ram, 0x4eae68, 8), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x193, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[ ---  CBRANCH (ram, 0x257079, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (register, 0xa8, 8), (register, 0x0, 8) CALL (ram, 0x222d90, 8) , (unique, 0xbc80, 4) , (unique, 0xbd80, 8) , (register, 0xa8, 8) , (const, 0x0, 4) , (unique, 0x3100, 8) , (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0xbd80, 8), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x6, 8) , (const, 0x4, 8), (unique, 0x3100, 8) CAST (unique, 0x10000768, 8), (unique, 0x10000768, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x2, 8) , (const, 0x4, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000760, 8), (unique, 0x10000760, 8) CAST (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x24, 8) , (const, 0x4, 8), (register, 0xa8, 8) INT_SEXT (unique, 0x1000037c, 4), (unique, 0x1000037c, 4) MULTIEQUAL (register, 0x0, 4) , (unique, 0x10000380, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1a1, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x1a1, 4)]
[(ram, 0x4eff60, 16) INDIRECT (ram, 0x4eff60, 16) , (const, 0x1a1, 4)]
[(ram, 0x4eff70, 8) INDIRECT (ram, 0x4eff70, 8) , (const, 0x1a1, 4)]
[(stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x1a1, 4)]
[(stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0x1a1, 4)]
[(stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0x1a1, 4)]
[(stack, 0xfffffffffffffeb4, 2) INDIRECT (stack, 0xfffffffffffffeb4, 2) , (const, 0x1a1, 4)]
[(stack, 0xfffffffffffffeb6, 1) INDIRECT (stack, 0xfffffffffffffeb6, 1) , (const, 0x1a1, 4)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x1a1, 4)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x1a1, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x1a1, 4)]
[(stack, 0xffffffffffffff00, 4) INDIRECT (stack, 0xffffffffffffff00, 4) , (const, 0x1a1, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x1a1, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x1a1, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x1a1, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x1a1, 4)]
[(stack, 0xffffffffffffff28, 4) INDIRECT (stack, 0xffffffffffffff28, 4) , (const, 0x1a1, 4)]
[(stack, 0xffffffffffffff50, 16) INDIRECT (stack, 0xffffffffffffff50, 16) , (const, 0x1a1, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x1a1, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x1a1, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x1a1, 4)]
[(stack, 0xffffffffffffffa8, 2) INDIRECT (stack, 0xffffffffffffffa8, 2) , (const, 0x1a1, 4)]
[(stack, 0xffffffffffffffaa, 2) INDIRECT (stack, 0xffffffffffffffaa, 2) , (const, 0x1a1, 4)]
[(stack, 0xffffffffffffffac, 4) INDIRECT (stack, 0xffffffffffffffac, 4) , (const, 0x1a1, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1a1, 4)]
[(VARIABLE, 0x0, 4) CALL (ram, 0x2414c0, 8)]
[(unique, 0x10000380, 4) MULTIEQUAL (unique, 0x10000384, 4) , (unique, 0x1000037c, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1ae, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x1ae, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x1ae, 4), (stack, 0xfffffffffffffea0, 8) MULTIEQUAL (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8)]
[(stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0x1ae, 4), (stack, 0xfffffffffffffeac, 4) MULTIEQUAL (stack, 0xfffffffffffffeac, 4) , (stack, 0xfffffffffffffeac, 4)]
[(stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0x1ae, 4), (stack, 0xfffffffffffffeb0, 4) MULTIEQUAL (stack, 0xfffffffffffffeb0, 4) , (stack, 0xfffffffffffffeb0, 4)]
[(stack, 0xfffffffffffffeb4, 2) INDIRECT (stack, 0xfffffffffffffeb4, 2) , (const, 0x1ae, 4), (stack, 0xfffffffffffffeb4, 2) MULTIEQUAL (stack, 0xfffffffffffffeb4, 2) , (stack, 0xfffffffffffffeb4, 2)]
[(stack, 0xfffffffffffffeb6, 1) INDIRECT (stack, 0xfffffffffffffeb6, 1) , (const, 0x1ae, 4), (stack, 0xfffffffffffffeb6, 1) MULTIEQUAL (stack, 0xfffffffffffffeb6, 1) , (stack, 0xfffffffffffffeb6, 1)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x1ae, 4), (stack, 0xfffffffffffffeb8, 8) MULTIEQUAL (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x1ae, 4), (stack, 0xfffffffffffffec0, 8) MULTIEQUAL (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x1ae, 4), (stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xffffffffffffff00, 4) INDIRECT (stack, 0xffffffffffffff00, 4) , (const, 0x1ae, 4), (stack, 0xffffffffffffff00, 4) MULTIEQUAL (stack, 0xffffffffffffff00, 4) , (stack, 0xffffffffffffff00, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x1ae, 4), (stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x1ae, 4), (stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x1ae, 4), (stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x1ae, 4), (stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff28, 4) INDIRECT (stack, 0xffffffffffffff28, 4) , (const, 0x1ae, 4), (stack, 0xffffffffffffff28, 4) MULTIEQUAL (stack, 0xffffffffffffff28, 4) , (stack, 0xffffffffffffff28, 4)]
[(stack, 0xffffffffffffff50, 16) INDIRECT (stack, 0xffffffffffffff50, 16) , (const, 0x1ae, 4), (stack, 0xffffffffffffff50, 16) MULTIEQUAL (stack, 0xffffffffffffff50, 16) , (stack, 0xffffffffffffff50, 16)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x1ae, 4), (stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x1ae, 4), (stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x1ae, 4), (stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffffa8, 2) INDIRECT (stack, 0xffffffffffffffa8, 2) , (const, 0x1ae, 4), (stack, 0xffffffffffffffa8, 2) MULTIEQUAL (stack, 0xffffffffffffffa8, 2) , (stack, 0xffffffffffffffa8, 2)]
[(stack, 0xffffffffffffffaa, 2) INDIRECT (stack, 0xffffffffffffffaa, 2) , (const, 0x1ae, 4), (stack, 0xffffffffffffffaa, 2) MULTIEQUAL (stack, 0xffffffffffffffaa, 2) , (stack, 0xffffffffffffffaa, 2)]
[(stack, 0xffffffffffffffac, 4) INDIRECT (stack, 0xffffffffffffffac, 4) , (const, 0x1ae, 4), (stack, 0xffffffffffffffac, 4) MULTIEQUAL (stack, 0xffffffffffffffac, 4) , (stack, 0xffffffffffffffac, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1ae, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(register, 0x10, 8) SUBPIECE (unique, 0x10000630, 16) , (const, 0x0, 4), (unique, 0x10000630, 16) INT_RIGHT (VARIABLE, 0x0, 4) , (const, 0x40, 4), (VARIABLE, 0x0, 4) CALL (ram, 0x241570, 8) , (register, 0xb0, 8) , (register, 0xa8, 8) , (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000778, 8), (unique, 0x10000778, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x8, 8) , (const, 0x4, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000770, 8), (unique, 0x10000770, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0xa, 8) , (const, 0x4, 8), (register, 0xb0, 8) SUBPIECE (unique, 0x100003d0, 16) , (const, 0x0, 4), (register, 0xa8, 8) SUBPIECE (unique, 0x10000620, 16) , (const, 0x0, 4), (unique, 0x10000620, 16) INT_RIGHT (unique, 0x100003d0, 16) , (const, 0x40, 4), (unique, 0x100003d0, 16) MULTIEQUAL (unique, 0x10000390, 16) , (VARIABLE, 0x0, 4)]
[(register, 0x0, 8) SUBPIECE (VARIABLE, 0x0, 4) , (const, 0x0, 4), (VARIABLE, 0x0, 4) CALL (ram, 0x241570, 8) , (register, 0xb0, 8) , (register, 0xa8, 8) , (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000778, 8), (unique, 0x10000778, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x8, 8) , (const, 0x4, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000770, 8), (unique, 0x10000770, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0xa, 8) , (const, 0x4, 8), (register, 0xb0, 8) SUBPIECE (unique, 0x100003d0, 16) , (const, 0x0, 4), (register, 0xa8, 8) SUBPIECE (unique, 0x10000620, 16) , (const, 0x0, 4), (unique, 0x10000620, 16) INT_RIGHT (unique, 0x100003d0, 16) , (const, 0x40, 4), (unique, 0x100003d0, 16) MULTIEQUAL (unique, 0x10000390, 16) , (VARIABLE, 0x0, 4)]
[(stack, 0xffffffffffffff60, 8) COPY (ram, 0x4eff70, 8), (ram, 0x4eff70, 8) INDIRECT (ram, 0x4eff70, 8) , (const, 0x1ae, 4), (ram, 0x4eff70, 8) MULTIEQUAL (ram, 0x4eff70, 8) , (ram, 0x4eff70, 8)]
[(stack, 0xffffffffffffff50, 16) COPY (ram, 0x4eff60, 16), (ram, 0x4eff60, 16) INDIRECT (ram, 0x4eff60, 16) , (const, 0x1ae, 4), (ram, 0x4eff60, 16) MULTIEQUAL (ram, 0x4eff60, 16) , (ram, 0x4eff60, 16)]
[(unique, 0x1000038f, 1) COPY (const, 0x0, 1)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0xbd80, 8)]
[(stack, 0xfffffffffffffeb4, 2) COPY (const, 0x1, 2)]
[(unique, 0x3c80, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff98, 8)]
[(unique, 0x3c80, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffeac, 8)]
[(unique, 0x100006c8, 8) COPY (register, 0x88, 8)]
[(unique, 0x100006d0, 8) COPY (register, 0x80, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffac, 4) MULTIEQUAL (stack, 0xffffffffffffffac, 4) , (stack, 0xffffffffffffffac, 4)]
[(stack, 0xffffffffffffffaa, 2) MULTIEQUAL (stack, 0xffffffffffffffaa, 2) , (stack, 0xffffffffffffffaa, 2)]
[(stack, 0xffffffffffffffa8, 2) MULTIEQUAL (stack, 0xffffffffffffffa8, 2) , (stack, 0xffffffffffffffa8, 2)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (unique, 0x100006d0, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (unique, 0x100006c8, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff50, 16) MULTIEQUAL (stack, 0xffffffffffffff50, 16) , (stack, 0xffffffffffffff50, 16)]
[(stack, 0xffffffffffffff28, 4) MULTIEQUAL (stack, 0xffffffffffffff28, 4) , (stack, 0xffffffffffffff28, 4)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 4) MULTIEQUAL (stack, 0xffffffffffffff00, 4) , (stack, 0xffffffffffffff00, 4)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffec0, 8) MULTIEQUAL (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8)]
[(stack, 0xfffffffffffffeb8, 8) MULTIEQUAL (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8)]
[(stack, 0xfffffffffffffeb6, 1) MULTIEQUAL (stack, 0xfffffffffffffeb6, 1) , (stack, 0xfffffffffffffeb6, 1)]
[(stack, 0xfffffffffffffeb4, 2) MULTIEQUAL (stack, 0xfffffffffffffeb4, 2) , (stack, 0xfffffffffffffeb4, 2)]
[(stack, 0xfffffffffffffeb0, 4) MULTIEQUAL (unique, 0xbc80, 4) , (stack, 0xfffffffffffffeb0, 4)]
[(stack, 0xfffffffffffffeac, 4) MULTIEQUAL (stack, 0xfffffffffffffeac, 4) , (stack, 0xfffffffffffffeac, 4)]
[(stack, 0xfffffffffffffea0, 8) MULTIEQUAL (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8)]
[(unique, 0x1000038c, 1) MULTIEQUAL (unique, 0x1000038f, 1) , (unique, 0x1000038d, 1)]
[(ram, 0x4eff70, 8) MULTIEQUAL (ram, 0x4eff70, 8) , (ram, 0x4eff70, 8)]
[(ram, 0x4eff60, 16) MULTIEQUAL (ram, 0x4eff60, 16) , (ram, 0x4eff60, 16)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xa8, 8) SUBPIECE (unique, 0x10000640, 16) , (const, 0x0, 4), (unique, 0x10000640, 16) INT_RIGHT (unique, 0x100003e0, 16) , (const, 0x40, 4), (unique, 0x100003e0, 16) MULTIEQUAL (unique, 0x100003d0, 16) , (VARIABLE, 0x0, 4)]
[(register, 0xb0, 8) SUBPIECE (unique, 0x100003e0, 16) , (const, 0x0, 4), (unique, 0x100003e0, 16) MULTIEQUAL (unique, 0x100003d0, 16) , (VARIABLE, 0x0, 4)]
[ ---  CBRANCH (ram, 0x256fa0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x10, 8) , (const, 0x0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x644, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x644, 4)]
[(ram, 0x4eff60, 16) INDIRECT (ram, 0x4eff60, 16) , (const, 0x644, 4)]
[(ram, 0x4eff70, 8) INDIRECT (ram, 0x4eff70, 8) , (const, 0x644, 4)]
[(stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x644, 4)]
[(stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0x644, 4)]
[(stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0x644, 4)]
[(stack, 0xfffffffffffffeb4, 2) INDIRECT (stack, 0xfffffffffffffeb4, 2) , (const, 0x644, 4)]
[(stack, 0xfffffffffffffeb6, 1) INDIRECT (stack, 0xfffffffffffffeb6, 1) , (const, 0x644, 4)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x644, 4)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x644, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x644, 4)]
[(stack, 0xffffffffffffff00, 4) INDIRECT (stack, 0xffffffffffffff00, 4) , (const, 0x644, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x644, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x644, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x644, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x644, 4)]
[(stack, 0xffffffffffffff28, 4) INDIRECT (stack, 0xffffffffffffff28, 4) , (const, 0x644, 4)]
[(stack, 0xffffffffffffff50, 16) INDIRECT (stack, 0xffffffffffffff50, 16) , (const, 0x644, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x644, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x644, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x644, 4)]
[(stack, 0xffffffffffffffa8, 2) INDIRECT (stack, 0xffffffffffffffa8, 2) , (const, 0x644, 4)]
[(stack, 0xffffffffffffffaa, 2) INDIRECT (stack, 0xffffffffffffffaa, 2) , (const, 0x644, 4)]
[(stack, 0xffffffffffffffac, 4) INDIRECT (stack, 0xffffffffffffffac, 4) , (const, 0x644, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x644, 4)]
[ ---  CBRANCH (ram, 0x256cac, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x241600, 8) , (register, 0xb0, 8) , (register, 0xa8, 8) , (register, 0x0, 8) , (register, 0x10, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x652, 4)]
[(ram, 0x4eff60, 16) INDIRECT (ram, 0x4eff60, 16) , (const, 0x652, 4)]
[(ram, 0x4eff70, 8) INDIRECT (ram, 0x4eff70, 8) , (const, 0x652, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (const, 0x3, 4), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x10, 8) , (const, 0x4, 8)]
[(register, 0x0, 4) COPY (const, 0x3, 4)]
[ ---  BRANCH (ram, 0x256a09, 1)]
[(stack, 0xfffffffffffffe28, 8) COPY (stack, 0xfffffffffffffe48, 8)]
[ ---  CBRANCH (ram, 0x256c52, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (const, 0xffffffffffffffff, 16) , (unique, 0x100003b0, 16)]
[ ---  CBRANCH (ram, 0x2569fc, 1) , (unique, 0xd080, 1), (unique, 0xd080, 1) INT_SLESS (stack, 0xfffffffffffffe48, 8) , (register, 0xb0, 8)]
[ ---  CBRANCH (ram, 0x256c52, 1) , (unique, 0xcc00, 1), (unique, 0xcc00, 1) INT_SLESSEQUAL (stack, 0xfffffffffffffe50, 8) , (register, 0xa8, 8)]
[ ---  CBRANCH (ram, 0x2569fc, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xb0, 8) , (stack, 0xfffffffffffffe48, 8)]
[(unique, 0x10000698, 8) COPY (stack, 0xfffffffffffffe28, 8)]
[ ---  CBRANCH (ram, 0x256c7f, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (const, 0xffffffffffffffff, 16) , (VARIABLE, 0x0, 4)]
[(unique, 0x100006a0, 8) COPY (stack, 0xfffffffffffffe28, 8)]
[ ---  CBRANCH (ram, 0x256c7f, 1) , (unique, 0xcc00, 1), (unique, 0xcc00, 1) INT_SLESSEQUAL (register, 0x0, 8) , (stack, 0xfffffffffffffe48, 8)]
[(unique, 0x100006a8, 8) COPY (register, 0x0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x27d, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x27d, 4)]
[(ram, 0x4eff60, 16) INDIRECT (ram, 0x4eff60, 16) , (const, 0x27d, 4)]
[(ram, 0x4eff70, 8) INDIRECT (ram, 0x4eff70, 8) , (const, 0x27d, 4)]
[(stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x27d, 4)]
[(stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0x27d, 4)]
[(stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0x27d, 4)]
[(stack, 0xfffffffffffffeb4, 2) INDIRECT (stack, 0xfffffffffffffeb4, 2) , (const, 0x27d, 4)]
[(stack, 0xfffffffffffffeb6, 1) INDIRECT (stack, 0xfffffffffffffeb6, 1) , (const, 0x27d, 4)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x27d, 4)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x27d, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x27d, 4)]
[(stack, 0xffffffffffffff00, 4) INDIRECT (stack, 0xffffffffffffff00, 4) , (const, 0x27d, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x27d, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x27d, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x27d, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x27d, 4)]
[(stack, 0xffffffffffffff28, 4) INDIRECT (stack, 0xffffffffffffff28, 4) , (const, 0x27d, 4)]
[(stack, 0xffffffffffffff50, 16) INDIRECT (stack, 0xffffffffffffff50, 16) , (const, 0x27d, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x27d, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x27d, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x27d, 4)]
[(stack, 0xffffffffffffffa8, 2) INDIRECT (stack, 0xffffffffffffffa8, 2) , (const, 0x27d, 4)]
[(stack, 0xffffffffffffffaa, 2) INDIRECT (stack, 0xffffffffffffffaa, 2) , (const, 0x27d, 4)]
[(stack, 0xffffffffffffffac, 4) INDIRECT (stack, 0xffffffffffffffac, 4) , (const, 0x27d, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x27d, 4)]
[ ---  CBRANCH (ram, 0x257195, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x241600, 8) , (register, 0xb0, 8) , (register, 0xa8, 8) , (stack, 0xfffffffffffffe28, 8), (stack, 0xfffffffffffffe28, 8) MULTIEQUAL (unique, 0x10000698, 8) , (unique, 0x100006a0, 8) , (unique, 0x100006a8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x290, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x290, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4eff60, 16) INDIRECT (ram, 0x4eff60, 16) , (const, 0x290, 4), (ram, 0x4eff60, 16) MULTIEQUAL (ram, 0x4eff60, 16) , (ram, 0x4eff60, 16)]
[(ram, 0x4eff70, 8) INDIRECT (ram, 0x4eff70, 8) , (const, 0x290, 4), (ram, 0x4eff70, 8) MULTIEQUAL (ram, 0x4eff70, 8) , (ram, 0x4eff70, 8)]
[(stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x290, 4), (stack, 0xfffffffffffffea0, 8) MULTIEQUAL (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8)]
[(stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0x290, 4), (stack, 0xfffffffffffffeac, 4) MULTIEQUAL (stack, 0xfffffffffffffeac, 4) , (stack, 0xfffffffffffffeac, 4)]
[(stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0x290, 4), (stack, 0xfffffffffffffeb0, 4) MULTIEQUAL (stack, 0xfffffffffffffeb0, 4) , (stack, 0xfffffffffffffeb0, 4)]
[(stack, 0xfffffffffffffeb4, 2) INDIRECT (stack, 0xfffffffffffffeb4, 2) , (const, 0x290, 4), (stack, 0xfffffffffffffeb4, 2) MULTIEQUAL (stack, 0xfffffffffffffeb4, 2) , (stack, 0xfffffffffffffeb4, 2)]
[(stack, 0xfffffffffffffeb6, 1) INDIRECT (stack, 0xfffffffffffffeb6, 1) , (const, 0x290, 4), (stack, 0xfffffffffffffeb6, 1) MULTIEQUAL (stack, 0xfffffffffffffeb6, 1) , (stack, 0xfffffffffffffeb6, 1)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x290, 4), (stack, 0xfffffffffffffeb8, 8) MULTIEQUAL (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x290, 4), (stack, 0xfffffffffffffec0, 8) MULTIEQUAL (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x290, 4), (stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xffffffffffffff00, 4) INDIRECT (stack, 0xffffffffffffff00, 4) , (const, 0x290, 4), (stack, 0xffffffffffffff00, 4) MULTIEQUAL (stack, 0xffffffffffffff00, 4) , (stack, 0xffffffffffffff00, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x290, 4), (stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x290, 4), (stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x290, 4), (stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x290, 4), (stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff28, 4) INDIRECT (stack, 0xffffffffffffff28, 4) , (const, 0x290, 4), (stack, 0xffffffffffffff28, 4) MULTIEQUAL (stack, 0xffffffffffffff28, 4) , (stack, 0xffffffffffffff28, 4)]
[(stack, 0xffffffffffffff50, 16) INDIRECT (stack, 0xffffffffffffff50, 16) , (const, 0x290, 4), (stack, 0xffffffffffffff50, 16) MULTIEQUAL (stack, 0xffffffffffffff50, 16) , (stack, 0xffffffffffffff50, 16)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x290, 4), (stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x290, 4), (stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x290, 4), (stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffffa8, 2) INDIRECT (stack, 0xffffffffffffffa8, 2) , (const, 0x290, 4), (stack, 0xffffffffffffffa8, 2) MULTIEQUAL (stack, 0xffffffffffffffa8, 2) , (stack, 0xffffffffffffffa8, 2)]
[(stack, 0xffffffffffffffaa, 2) INDIRECT (stack, 0xffffffffffffffaa, 2) , (const, 0x290, 4), (stack, 0xffffffffffffffaa, 2) MULTIEQUAL (stack, 0xffffffffffffffaa, 2) , (stack, 0xffffffffffffffaa, 2)]
[(stack, 0xffffffffffffffac, 4) INDIRECT (stack, 0xffffffffffffffac, 4) , (const, 0x290, 4), (stack, 0xffffffffffffffac, 4) MULTIEQUAL (stack, 0xffffffffffffffac, 4) , (stack, 0xffffffffffffffac, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x290, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CBRANCH (ram, 0x256d00, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0xffffffff, 4), (register, 0x0, 4) CALL (ram, 0x214bb0, 8) , (unique, 0x3c80, 8) , (const, 0x1, 8) , (register, 0x0, 4), (register, 0x0, 4) MULTIEQUAL (register, 0x0, 4) , (register, 0x0, 4)]
[ ---  CBRANCH (ram, 0x256d30, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x256ff0, 1) , (unique, 0x1000038c, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x2c1, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x2c1, 4)]
[(ram, 0x4eff60, 16) INDIRECT (ram, 0x4eff60, 16) , (const, 0x2c1, 4)]
[(ram, 0x4eff70, 8) INDIRECT (ram, 0x4eff70, 8) , (const, 0x2c1, 4)]
[(stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x2c1, 4)]
[(stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0x2c1, 4)]
[(stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0x2c1, 4)]
[(stack, 0xfffffffffffffeb4, 2) INDIRECT (stack, 0xfffffffffffffeb4, 2) , (const, 0x2c1, 4)]
[(stack, 0xfffffffffffffeb6, 1) INDIRECT (stack, 0xfffffffffffffeb6, 1) , (const, 0x2c1, 4)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x2c1, 4)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x2c1, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x2c1, 4)]
[(stack, 0xffffffffffffff00, 4) INDIRECT (stack, 0xffffffffffffff00, 4) , (const, 0x2c1, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x2c1, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x2c1, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x2c1, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x2c1, 4)]
[(stack, 0xffffffffffffff28, 4) INDIRECT (stack, 0xffffffffffffff28, 4) , (const, 0x2c1, 4)]
[(stack, 0xffffffffffffff50, 16) INDIRECT (stack, 0xffffffffffffff50, 16) , (const, 0x2c1, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x2c1, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x2c1, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x2c1, 4)]
[(stack, 0xffffffffffffffa8, 2) INDIRECT (stack, 0xffffffffffffffa8, 2) , (const, 0x2c1, 4)]
[(stack, 0xffffffffffffffaa, 2) INDIRECT (stack, 0xffffffffffffffaa, 2) , (const, 0x2c1, 4)]
[(stack, 0xffffffffffffffac, 4) INDIRECT (stack, 0xffffffffffffffac, 4) , (const, 0x2c1, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2c1, 4)]
[ ---  CBRANCH (ram, 0x256d18, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x2401a0, 8) , (unique, 0x3c80, 8), (unique, 0x3c80, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffef8, 8)]
[(unique, 0x10000668, 8) COPY (unique, 0x10000788, 8), (unique, 0x10000788, 8) CAST (stack, 0xfffffffffffffef8, 8)]
[ ---  CBRANCH (ram, 0x257039, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x10000780, 8) , (const, 0x0, 8), (unique, 0x10000780, 8) CAST (stack, 0xfffffffffffffef8, 8)]
[ ---  CBRANCH (ram, 0x257031, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x58c00, 1) , (const, 0x0, 1), (unique, 0x58c00, 1) INT_AND (unique, 0xbb00, 1) , (const, 0x1, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x10000790, 8), (unique, 0x10000790, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x2, 8) , (const, 0x8, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x10000660, 8) , (unique, 0x10000668, 8)]
[ ---  CBRANCH (ram, 0x257031, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) CAST (unique, 0x10000798, 8), (unique, 0x10000798, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x3, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x2571af, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbc00, 2) , (const, 0x2, 2), (unique, 0xbc00, 2) LOAD (const, 0x1b1, 4) , (unique, 0xbd80, 8)]
[(unique, 0x10000660, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) CAST (unique, 0x100007a0, 8), (unique, 0x100007a0, 8) LOAD (const, 0x1b1, 4) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x257018, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) CAST (unique, 0x100007a0, 8), (unique, 0x100007a0, 8) LOAD (const, 0x1b1, 4) , (register, 0x0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x319, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x319, 4)]
[(ram, 0x4eff60, 16) INDIRECT (ram, 0x4eff60, 16) , (const, 0x319, 4)]
[(ram, 0x4eff70, 8) INDIRECT (ram, 0x4eff70, 8) , (const, 0x319, 4)]
[(stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x319, 4)]
[(stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0x319, 4)]
[(stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0x319, 4)]
[(stack, 0xfffffffffffffeb4, 2) INDIRECT (stack, 0xfffffffffffffeb4, 2) , (const, 0x319, 4)]
[(stack, 0xfffffffffffffeb6, 1) INDIRECT (stack, 0xfffffffffffffeb6, 1) , (const, 0x319, 4)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x319, 4)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x319, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x319, 4)]
[(stack, 0xffffffffffffff00, 4) INDIRECT (stack, 0xffffffffffffff00, 4) , (const, 0x319, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x319, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x319, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x319, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x319, 4)]
[(stack, 0xffffffffffffff28, 4) INDIRECT (stack, 0xffffffffffffff28, 4) , (const, 0x319, 4)]
[(stack, 0xffffffffffffff50, 16) INDIRECT (stack, 0xffffffffffffff50, 16) , (const, 0x319, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x319, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x319, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x319, 4)]
[(stack, 0xffffffffffffffa8, 2) INDIRECT (stack, 0xffffffffffffffa8, 2) , (const, 0x319, 4)]
[(stack, 0xffffffffffffffaa, 2) INDIRECT (stack, 0xffffffffffffffaa, 2) , (const, 0x319, 4)]
[(stack, 0xffffffffffffffac, 4) INDIRECT (stack, 0xffffffffffffffac, 4) , (const, 0x319, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x319, 4)]
[ ---  CALL (ram, 0x2401c0, 8)]
[ ---  BRANCH (ram, 0x256cd5, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffac, 4) MULTIEQUAL (stack, 0xffffffffffffffac, 4) , (stack, 0xffffffffffffffac, 4)]
[(stack, 0xffffffffffffffaa, 2) MULTIEQUAL (stack, 0xffffffffffffffaa, 2) , (stack, 0xffffffffffffffaa, 2)]
[(stack, 0xffffffffffffffa8, 2) MULTIEQUAL (stack, 0xffffffffffffffa8, 2) , (stack, 0xffffffffffffffa8, 2)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff50, 16) MULTIEQUAL (stack, 0xffffffffffffff50, 16) , (stack, 0xffffffffffffff50, 16)]
[(stack, 0xffffffffffffff28, 4) MULTIEQUAL (stack, 0xffffffffffffff28, 4) , (stack, 0xffffffffffffff28, 4)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 4) MULTIEQUAL (stack, 0xffffffffffffff00, 4) , (stack, 0xffffffffffffff00, 4)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffec0, 8) MULTIEQUAL (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8)]
[(stack, 0xfffffffffffffeb8, 8) MULTIEQUAL (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8)]
[(stack, 0xfffffffffffffeb6, 1) MULTIEQUAL (stack, 0xfffffffffffffeb6, 1) , (stack, 0xfffffffffffffeb6, 1)]
[(stack, 0xfffffffffffffeb4, 2) MULTIEQUAL (stack, 0xfffffffffffffeb4, 2) , (stack, 0xfffffffffffffeb4, 2)]
[(stack, 0xfffffffffffffeb0, 4) MULTIEQUAL (stack, 0xfffffffffffffeb0, 4) , (stack, 0xfffffffffffffeb0, 4)]
[(stack, 0xfffffffffffffeac, 4) MULTIEQUAL (stack, 0xfffffffffffffeac, 4) , (stack, 0xfffffffffffffeac, 4)]
[(stack, 0xfffffffffffffea0, 8) MULTIEQUAL (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8)]
[(ram, 0x4eff70, 8) MULTIEQUAL (ram, 0x4eff70, 8) , (ram, 0x4eff70, 8)]
[(ram, 0x4eff60, 16) MULTIEQUAL (ram, 0x4eff60, 16) , (ram, 0x4eff60, 16)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x1000038e, 1) COPY (const, 0x1, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x310, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x310, 4)]
[(ram, 0x4eff60, 16) INDIRECT (ram, 0x4eff60, 16) , (const, 0x310, 4)]
[(ram, 0x4eff70, 8) INDIRECT (ram, 0x4eff70, 8) , (const, 0x310, 4)]
[(stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x310, 4)]
[(stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0x310, 4)]
[(stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0x310, 4)]
[(stack, 0xfffffffffffffeb4, 2) INDIRECT (stack, 0xfffffffffffffeb4, 2) , (const, 0x310, 4)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x310, 4)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x310, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x310, 4)]
[(stack, 0xffffffffffffff00, 4) INDIRECT (stack, 0xffffffffffffff00, 4) , (const, 0x310, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x310, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x310, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x310, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x310, 4)]
[(stack, 0xffffffffffffff28, 4) INDIRECT (stack, 0xffffffffffffff28, 4) , (const, 0x310, 4)]
[(stack, 0xffffffffffffff50, 16) INDIRECT (stack, 0xffffffffffffff50, 16) , (const, 0x310, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x310, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x310, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x310, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x310, 4)]
[ ---  CALL (ram, 0x2401c0, 8)]
[ ---  BRANCH (ram, 0x256d18, 1)]
[ ---  CBRANCH (ram, 0x256e80, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x58c00, 1) , (const, 0x0, 1), (unique, 0x58c00, 1) INT_AND (stack, 0xfffffffffffffeb6, 1) , (const, 0x8, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x468, 4)]
[(ram, 0x4eff60, 16) INDIRECT (ram, 0x4eff60, 16) , (const, 0x468, 4)]
[(ram, 0x4eff70, 8) INDIRECT (ram, 0x4eff70, 8) , (const, 0x468, 4)]
[(stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x468, 4)]
[(stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0x468, 4)]
[(stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0x468, 4)]
[(stack, 0xfffffffffffffeb4, 2) INDIRECT (stack, 0xfffffffffffffeb4, 2) , (const, 0x468, 4)]
[(stack, 0xfffffffffffffeb6, 1) INDIRECT (stack, 0xfffffffffffffeb6, 1) , (const, 0x468, 4)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x468, 4)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x468, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x468, 4)]
[(stack, 0xffffffffffffff00, 4) INDIRECT (stack, 0xffffffffffffff00, 4) , (const, 0x468, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x468, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x468, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x468, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x468, 4)]
[(stack, 0xffffffffffffff28, 4) INDIRECT (stack, 0xffffffffffffff28, 4) , (const, 0x468, 4)]
[(stack, 0xffffffffffffff50, 16) INDIRECT (stack, 0xffffffffffffff50, 16) , (const, 0x468, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x468, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x468, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x468, 4)]
[(stack, 0xffffffffffffffa8, 2) INDIRECT (stack, 0xffffffffffffffa8, 2) , (const, 0x468, 4)]
[(stack, 0xffffffffffffffaa, 2) INDIRECT (stack, 0xffffffffffffffaa, 2) , (const, 0x468, 4)]
[(stack, 0xffffffffffffffac, 4) INDIRECT (stack, 0xffffffffffffffac, 4) , (const, 0x468, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x468, 4)]
[(unique, 0x10000658, 8) COPY (ram, 0x4eae68, 8), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x468, 4)]
[ ---  CBRANCH (ram, 0x2571b9, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x100007a8, 8), (unique, 0x100007a8, 8) CALL (ram, 0x1212c0, 8) , (register, 0x38, 8), (register, 0x38, 8) INT_SEXT (unique, 0x3200, 4), (unique, 0x3200, 4) INT_ADD (unique, 0x10000380, 4) , (const, 0x100, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x4a5, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x4a5, 4)]
[(ram, 0x4eff60, 16) INDIRECT (ram, 0x4eff60, 16) , (const, 0x4a5, 4)]
[(ram, 0x4eff70, 8) INDIRECT (ram, 0x4eff70, 8) , (const, 0x4a5, 4)]
[(stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x4a5, 4)]
[(stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0x4a5, 4)]
[(stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0x4a5, 4)]
[(stack, 0xfffffffffffffeb4, 2) INDIRECT (stack, 0xfffffffffffffeb4, 2) , (const, 0x4a5, 4)]
[(stack, 0xfffffffffffffeb6, 1) INDIRECT (stack, 0xfffffffffffffeb6, 1) , (const, 0x4a5, 4)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (unique, 0x100006b8, 8) , (const, 0x4a5, 4), (unique, 0x100006b8, 8) COPY (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (register, 0x0, 8) , (const, 0x20, 8) , (const, 0x8, 8)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (register, 0x0, 8) , (const, 0x4a5, 4), (register, 0x0, 8) INT_SEXT (unique, 0x10000380, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (unique, 0x3c80, 8) , (const, 0x4a5, 4), (unique, 0x3c80, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffff00, 4) INDIRECT (stack, 0xffffffffffffff00, 4) , (const, 0x4a5, 4), (stack, 0xffffffffffffff00, 4) COPY (const, 0x10, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (unique, 0x3c80, 8) , (const, 0x4a5, 4), (unique, 0x3c80, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffeb8, 8)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x4a5, 4), (stack, 0xffffffffffffff10, 8) COPY (const, 0x1, 8)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (unique, 0x100006c0, 8) , (const, 0x4a5, 4), (unique, 0x100006c0, 8) COPY (register, 0x0, 8)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x4a5, 4), (stack, 0xffffffffffffff20, 8) COPY (const, 0x100, 8)]
[(stack, 0xffffffffffffff28, 4) INDIRECT (stack, 0xffffffffffffff28, 4) , (const, 0x4a5, 4), (stack, 0xffffffffffffff28, 4) COPY (const, 0x0, 4)]
[(stack, 0xffffffffffffff50, 16) INDIRECT (stack, 0xffffffffffffff50, 16) , (const, 0x4a5, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x4a5, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x4a5, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x4a5, 4)]
[(stack, 0xffffffffffffffa8, 2) INDIRECT (stack, 0xffffffffffffffa8, 2) , (const, 0x4a5, 4)]
[(stack, 0xffffffffffffffaa, 2) INDIRECT (stack, 0xffffffffffffffaa, 2) , (const, 0x4a5, 4)]
[(stack, 0xffffffffffffffac, 4) INDIRECT (stack, 0xffffffffffffffac, 4) , (const, 0x4a5, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x4a5, 4)]
[ ---  CBRANCH (ram, 0x256f90, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (const, 0xffffffff, 4) , (register, 0x0, 4), (register, 0x0, 4) SUBPIECE (register, 0x0, 8) , (const, 0x0, 4), (register, 0x0, 8) CALL (ram, 0x222b90, 8) , (unique, 0xbc80, 4) , (unique, 0x3c80, 8) , (const, 0x2000, 4), (unique, 0x3c80, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffef8, 8), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0xbd80, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x4c3, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x4c3, 4)]
[(ram, 0x4eff60, 16) INDIRECT (ram, 0x4eff60, 16) , (const, 0x4c3, 4)]
[(ram, 0x4eff70, 8) INDIRECT (ram, 0x4eff70, 8) , (const, 0x4c3, 4)]
[(stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x4c3, 4)]
[(stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0x4c3, 4)]
[(stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0x4c3, 4)]
[(stack, 0xfffffffffffffeb4, 2) INDIRECT (stack, 0xfffffffffffffeb4, 2) , (const, 0x4c3, 4)]
[(stack, 0xfffffffffffffeb6, 1) INDIRECT (stack, 0xfffffffffffffeb6, 1) , (const, 0x4c3, 4)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x4c3, 4)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x4c3, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x4c3, 4)]
[(stack, 0xffffffffffffff00, 4) INDIRECT (stack, 0xffffffffffffff00, 4) , (const, 0x4c3, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x4c3, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x4c3, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x4c3, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x4c3, 4)]
[(stack, 0xffffffffffffff28, 4) INDIRECT (stack, 0xffffffffffffff28, 4) , (const, 0x4c3, 4)]
[(stack, 0xffffffffffffff50, 16) INDIRECT (stack, 0xffffffffffffff50, 16) , (const, 0x4c3, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x4c3, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x4c3, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x4c3, 4)]
[(stack, 0xffffffffffffffa8, 2) INDIRECT (stack, 0xffffffffffffffa8, 2) , (const, 0x4c3, 4)]
[(stack, 0xffffffffffffffaa, 2) INDIRECT (stack, 0xffffffffffffffaa, 2) , (const, 0x4c3, 4)]
[(stack, 0xffffffffffffffac, 4) INDIRECT (stack, 0xffffffffffffffac, 4) , (const, 0x4c3, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x4c3, 4)]
[ ---  CBRANCH (ram, 0x256f90, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x121220, 8) , (unique, 0x3200, 8) , (unique, 0xbd80, 8) , (register, 0x10, 8), (register, 0x10, 8) INT_SEXT (register, 0x0, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x100007b0, 8), (unique, 0x100007b0, 8) CAST (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x24, 8) , (const, 0x4, 8)]
[ ---  CBRANCH (ram, 0x256f90, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x10000363, 4) , (const, 0x0, 4), (unique, 0x10000363, 4) INT_AND (stack, 0xffffffffffffff28, 4) , (const, 0x2000, 4)]
[ ---  CBRANCH (ram, 0x257099, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffff00, 4) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x256f90, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffff00, 4) , (const, 0x10, 4)]
[ ---  CBRANCH (ram, 0x256f90, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffffa8, 2) , (const, 0x2, 2)]
[ ---  CBRANCH (ram, 0x256f90, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (stack, 0xffffffffffffffac, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x3, 8) , (const, 0x4, 8)]
[ ---  CBRANCH (ram, 0x256f90, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffffaa, 2) , (unique, 0xbc00, 2), (unique, 0xbc00, 2) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100007c0, 8), (unique, 0x100007c0, 8) INT_ADD (unique, 0x100007b8, 8) , (const, 0xa, 8), (unique, 0x100007b8, 8) CAST (unique, 0xbd80, 8)]
[ ---  CBRANCH (ram, 0x2570d5, 1) , (unique, 0xd080, 1), (unique, 0xd080, 1) INT_SLESS (const, 0xb, 4) , (register, 0x0, 4)]
[ ---  CBRANCH (ram, 0x256f90, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (const, 0xf, 8) , (stack, 0xffffffffffffff20, 8)]
[ ---  CBRANCH (ram, 0x256f90, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x100007c8, 8) , (const, 0x0, 8), (unique, 0x100007c8, 8) CAST (stack, 0xffffffffffffff18, 8)]
[(unique, 0x10000690, 8) COPY (unique, 0x100007e0, 8), (unique, 0x100007e0, 8) CAST (stack, 0xffffffffffffff18, 8)]
[ ---  CBRANCH (ram, 0x2571d9, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (const, 0xb00000000, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100007d8, 8), (unique, 0x100007d8, 8) INT_ADD (unique, 0x100007d0, 8) , (const, 0x8, 8), (unique, 0x100007d0, 8) CAST (stack, 0xffffffffffffff18, 8)]
[ ---  CBRANCH (ram, 0x256f90, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (const, 0xf, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (stack, 0xffffffffffffff18, 8)]
[(unique, 0x10000678, 8) COPY (register, 0x10, 8), (register, 0x10, 8) CAST (unique, 0x10000800, 8), (unique, 0x10000800, 8) INT_ADD (register, 0x10, 8) , (unique, 0x100007f8, 8), (unique, 0x100007f8, 8) CAST (stack, 0xffffffffffffff18, 8), (register, 0x10, 8) INT_AND (register, 0x10, 8) , (const, 0xfffffffffffffff8, 8), (register, 0x10, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x7, 8)]
[ ---  CBRANCH (ram, 0x257152, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESSEQUAL (unique, 0x3100, 8) , (register, 0x38, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x2, 8) , (const, 0x8, 8), (register, 0x10, 8) CAST (unique, 0x10000800, 8), (unique, 0x10000800, 8) INT_ADD (register, 0x10, 8) , (unique, 0x100007f8, 8), (unique, 0x100007f8, 8) CAST (stack, 0xffffffffffffff18, 8), (register, 0x10, 8) INT_AND (register, 0x10, 8) , (const, 0xfffffffffffffff8, 8), (register, 0x38, 8) CAST (unique, 0x100007f0, 8), (unique, 0x100007f0, 8) INT_ADD (stack, 0xffffffffffffff20, 8) , (unique, 0x100007e8, 8), (unique, 0x100007e8, 8) CAST (stack, 0xffffffffffffff18, 8), (register, 0x10, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x7, 8)]
[ ---  CBRANCH (ram, 0x256f90, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (register, 0x38, 8) , (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10000810, 8), (unique, 0x10000810, 8) INT_ADD (register, 0x0, 8) , (unique, 0x10000808, 8), (unique, 0x10000808, 8) CAST (register, 0x10, 8), (register, 0x0, 8) INT_AND (unique, 0x3100, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x3100, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x7, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x10, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0x10000678, 8) , (unique, 0x10000680, 8)]
[(unique, 0x10000688, 8) COPY (register, 0x10, 8)]
[ ---  CBRANCH (ram, 0x257138, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (const, 0xb00000000, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0xbc80, 4), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x12, 8) , (const, 0x4, 8), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000818, 8), (unique, 0x10000818, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x2, 8) , (const, 0x8, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0x10000688, 8) , (unique, 0x10000690, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x5a9, 4)]
[(stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x5a9, 4)]
[(stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0x5a9, 4)]
[(stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0x5a9, 4)]
[(stack, 0xfffffffffffffeb4, 2) INDIRECT (stack, 0xfffffffffffffeb4, 2) , (const, 0x5a9, 4)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x5a9, 4)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x5a9, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x5a9, 4)]
[(stack, 0xffffffffffffff00, 4) INDIRECT (stack, 0xffffffffffffff00, 4) , (const, 0x5a9, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x5a9, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x5a9, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x5a9, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x5a9, 4)]
[(stack, 0xffffffffffffff28, 4) INDIRECT (stack, 0xffffffffffffff28, 4) , (const, 0x5a9, 4)]
[(stack, 0xffffffffffffff50, 16) INDIRECT (stack, 0xffffffffffffff50, 16) , (const, 0x5a9, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x5a9, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x5a9, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x5a9, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x5a9, 4)]
[ ---  CALL (ram, 0x1212c8, 8) , (register, 0x0, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x5ac, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x5a9, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x5a6, 4)]
[(ram, 0x4eff60, 16) INDIRECT (ram, 0x4eff60, 16) , (const, 0x5ac, 4), (ram, 0x4eff60, 16) INDIRECT (ram, 0x4eff60, 16) , (const, 0x5a9, 4), (ram, 0x4eff60, 16) INDIRECT (ram, 0x4eff60, 16) , (const, 0x5a6, 4)]
[(ram, 0x4eff70, 8) INDIRECT (ram, 0x4eff70, 8) , (const, 0x5ac, 4), (ram, 0x4eff70, 8) INDIRECT (ram, 0x4eff70, 8) , (const, 0x5a9, 4), (ram, 0x4eff70, 8) INDIRECT (ram, 0x4eff70, 8) , (const, 0x5a6, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (const, 0x4, 4), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x10, 8) , (const, 0x4, 8)]
[ ---  BRANCH (ram, 0x256d20, 1)]
[ ---  CBRANCH (ram, 0x256f90, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (unique, 0xbd80, 8) , (const, 0x10, 8)]
[(unique, 0x10000680, 8) COPY (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x256f90, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (register, 0x38, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x502, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x502, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4eff60, 16) INDIRECT (ram, 0x4eff60, 16) , (const, 0x502, 4), (ram, 0x4eff60, 16) MULTIEQUAL (ram, 0x4eff60, 16) , (ram, 0x4eff60, 16) , (ram, 0x4eff60, 16) , (ram, 0x4eff60, 16) , (ram, 0x4eff60, 16) , (ram, 0x4eff60, 16) , (ram, 0x4eff60, 16) , (ram, 0x4eff60, 16) , (ram, 0x4eff60, 16) , (ram, 0x4eff60, 16) , (ram, 0x4eff60, 16) , (ram, 0x4eff60, 16) , (ram, 0x4eff60, 16) , (ram, 0x4eff60, 16) , (ram, 0x4eff60, 16)]
[(ram, 0x4eff70, 8) INDIRECT (ram, 0x4eff70, 8) , (const, 0x502, 4), (ram, 0x4eff70, 8) MULTIEQUAL (ram, 0x4eff70, 8) , (ram, 0x4eff70, 8) , (ram, 0x4eff70, 8) , (ram, 0x4eff70, 8) , (ram, 0x4eff70, 8) , (ram, 0x4eff70, 8) , (ram, 0x4eff70, 8) , (ram, 0x4eff70, 8) , (ram, 0x4eff70, 8) , (ram, 0x4eff70, 8) , (ram, 0x4eff70, 8) , (ram, 0x4eff70, 8) , (ram, 0x4eff70, 8) , (ram, 0x4eff70, 8) , (ram, 0x4eff70, 8)]
[(stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x502, 4), (stack, 0xfffffffffffffea0, 8) MULTIEQUAL (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8)]
[(stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0x502, 4), (stack, 0xfffffffffffffeac, 4) MULTIEQUAL (stack, 0xfffffffffffffeac, 4) , (stack, 0xfffffffffffffeac, 4) , (stack, 0xfffffffffffffeac, 4) , (stack, 0xfffffffffffffeac, 4) , (stack, 0xfffffffffffffeac, 4) , (stack, 0xfffffffffffffeac, 4) , (stack, 0xfffffffffffffeac, 4) , (stack, 0xfffffffffffffeac, 4) , (stack, 0xfffffffffffffeac, 4) , (stack, 0xfffffffffffffeac, 4) , (stack, 0xfffffffffffffeac, 4) , (stack, 0xfffffffffffffeac, 4) , (stack, 0xfffffffffffffeac, 4) , (stack, 0xfffffffffffffeac, 4) , (stack, 0xfffffffffffffeac, 4)]
[(stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0x502, 4), (stack, 0xfffffffffffffeb0, 4) MULTIEQUAL (stack, 0xfffffffffffffeb0, 4) , (stack, 0xfffffffffffffeb0, 4) , (stack, 0xfffffffffffffeb0, 4) , (stack, 0xfffffffffffffeb0, 4) , (stack, 0xfffffffffffffeb0, 4) , (stack, 0xfffffffffffffeb0, 4) , (stack, 0xfffffffffffffeb0, 4) , (stack, 0xfffffffffffffeb0, 4) , (stack, 0xfffffffffffffeb0, 4) , (stack, 0xfffffffffffffeb0, 4) , (stack, 0xfffffffffffffeb0, 4) , (stack, 0xfffffffffffffeb0, 4) , (stack, 0xfffffffffffffeb0, 4) , (stack, 0xfffffffffffffeb0, 4) , (stack, 0xfffffffffffffeb0, 4)]
[(stack, 0xfffffffffffffeb4, 2) INDIRECT (stack, 0xfffffffffffffeb4, 2) , (const, 0x502, 4), (stack, 0xfffffffffffffeb4, 2) MULTIEQUAL (stack, 0xfffffffffffffeb4, 2) , (stack, 0xfffffffffffffeb4, 2) , (stack, 0xfffffffffffffeb4, 2) , (stack, 0xfffffffffffffeb4, 2) , (stack, 0xfffffffffffffeb4, 2) , (stack, 0xfffffffffffffeb4, 2) , (stack, 0xfffffffffffffeb4, 2) , (stack, 0xfffffffffffffeb4, 2) , (stack, 0xfffffffffffffeb4, 2) , (stack, 0xfffffffffffffeb4, 2) , (stack, 0xfffffffffffffeb4, 2) , (stack, 0xfffffffffffffeb4, 2) , (stack, 0xfffffffffffffeb4, 2) , (stack, 0xfffffffffffffeb4, 2) , (stack, 0xfffffffffffffeb4, 2)]
[(stack, 0xfffffffffffffeb6, 1) INDIRECT (stack, 0xfffffffffffffeb6, 1) , (const, 0x502, 4), (stack, 0xfffffffffffffeb6, 1) MULTIEQUAL (stack, 0xfffffffffffffeb6, 1) , (stack, 0xfffffffffffffeb6, 1) , (stack, 0xfffffffffffffeb6, 1) , (stack, 0xfffffffffffffeb6, 1) , (stack, 0xfffffffffffffeb6, 1) , (stack, 0xfffffffffffffeb6, 1) , (stack, 0xfffffffffffffeb6, 1) , (stack, 0xfffffffffffffeb6, 1) , (stack, 0xfffffffffffffeb6, 1) , (stack, 0xfffffffffffffeb6, 1) , (stack, 0xfffffffffffffeb6, 1) , (stack, 0xfffffffffffffeb6, 1) , (stack, 0xfffffffffffffeb6, 1) , (stack, 0xfffffffffffffeb6, 1) , (stack, 0xfffffffffffffeb6, 1)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x502, 4), (stack, 0xfffffffffffffeb8, 8) MULTIEQUAL (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x502, 4), (stack, 0xfffffffffffffec0, 8) MULTIEQUAL (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x502, 4), (stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xffffffffffffff00, 4) INDIRECT (stack, 0xffffffffffffff00, 4) , (const, 0x502, 4), (stack, 0xffffffffffffff00, 4) MULTIEQUAL (stack, 0xffffffffffffff00, 4) , (stack, 0xffffffffffffff00, 4) , (stack, 0xffffffffffffff00, 4) , (stack, 0xffffffffffffff00, 4) , (stack, 0xffffffffffffff00, 4) , (stack, 0xffffffffffffff00, 4) , (stack, 0xffffffffffffff00, 4) , (stack, 0xffffffffffffff00, 4) , (stack, 0xffffffffffffff00, 4) , (stack, 0xffffffffffffff00, 4) , (stack, 0xffffffffffffff00, 4) , (stack, 0xffffffffffffff00, 4) , (stack, 0xffffffffffffff00, 4) , (stack, 0xffffffffffffff00, 4) , (stack, 0xffffffffffffff00, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x502, 4), (stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x502, 4), (stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x502, 4), (stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x502, 4), (stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff28, 4) INDIRECT (stack, 0xffffffffffffff28, 4) , (const, 0x502, 4), (stack, 0xffffffffffffff28, 4) MULTIEQUAL (stack, 0xffffffffffffff28, 4) , (stack, 0xffffffffffffff28, 4) , (stack, 0xffffffffffffff28, 4) , (stack, 0xffffffffffffff28, 4) , (stack, 0xffffffffffffff28, 4) , (stack, 0xffffffffffffff28, 4) , (stack, 0xffffffffffffff28, 4) , (stack, 0xffffffffffffff28, 4) , (stack, 0xffffffffffffff28, 4) , (stack, 0xffffffffffffff28, 4) , (stack, 0xffffffffffffff28, 4) , (stack, 0xffffffffffffff28, 4) , (stack, 0xffffffffffffff28, 4) , (stack, 0xffffffffffffff28, 4) , (stack, 0xffffffffffffff28, 4)]
[(stack, 0xffffffffffffff50, 16) INDIRECT (stack, 0xffffffffffffff50, 16) , (const, 0x502, 4), (stack, 0xffffffffffffff50, 16) MULTIEQUAL (stack, 0xffffffffffffff50, 16) , (stack, 0xffffffffffffff50, 16) , (stack, 0xffffffffffffff50, 16) , (stack, 0xffffffffffffff50, 16) , (stack, 0xffffffffffffff50, 16) , (stack, 0xffffffffffffff50, 16) , (stack, 0xffffffffffffff50, 16) , (stack, 0xffffffffffffff50, 16) , (stack, 0xffffffffffffff50, 16) , (stack, 0xffffffffffffff50, 16) , (stack, 0xffffffffffffff50, 16) , (stack, 0xffffffffffffff50, 16) , (stack, 0xffffffffffffff50, 16) , (stack, 0xffffffffffffff50, 16) , (stack, 0xffffffffffffff50, 16)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x502, 4), (stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x502, 4), (stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x502, 4), (stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffffa8, 2) INDIRECT (stack, 0xffffffffffffffa8, 2) , (const, 0x502, 4), (stack, 0xffffffffffffffa8, 2) MULTIEQUAL (stack, 0xffffffffffffffa8, 2) , (stack, 0xffffffffffffffa8, 2) , (stack, 0xffffffffffffffa8, 2) , (stack, 0xffffffffffffffa8, 2) , (stack, 0xffffffffffffffa8, 2) , (stack, 0xffffffffffffffa8, 2) , (stack, 0xffffffffffffffa8, 2) , (stack, 0xffffffffffffffa8, 2) , (stack, 0xffffffffffffffa8, 2) , (stack, 0xffffffffffffffa8, 2) , (stack, 0xffffffffffffffa8, 2) , (stack, 0xffffffffffffffa8, 2) , (stack, 0xffffffffffffffa8, 2) , (stack, 0xffffffffffffffa8, 2) , (stack, 0xffffffffffffffa8, 2)]
[(stack, 0xffffffffffffffaa, 2) INDIRECT (stack, 0xffffffffffffffaa, 2) , (const, 0x502, 4), (stack, 0xffffffffffffffaa, 2) MULTIEQUAL (stack, 0xffffffffffffffaa, 2) , (stack, 0xffffffffffffffaa, 2) , (stack, 0xffffffffffffffaa, 2) , (stack, 0xffffffffffffffaa, 2) , (stack, 0xffffffffffffffaa, 2) , (stack, 0xffffffffffffffaa, 2) , (stack, 0xffffffffffffffaa, 2) , (stack, 0xffffffffffffffaa, 2) , (stack, 0xffffffffffffffaa, 2) , (stack, 0xffffffffffffffaa, 2) , (stack, 0xffffffffffffffaa, 2) , (stack, 0xffffffffffffffaa, 2) , (stack, 0xffffffffffffffaa, 2) , (stack, 0xffffffffffffffaa, 2) , (stack, 0xffffffffffffffaa, 2)]
[(stack, 0xffffffffffffffac, 4) INDIRECT (stack, 0xffffffffffffffac, 4) , (const, 0x502, 4), (stack, 0xffffffffffffffac, 4) MULTIEQUAL (stack, 0xffffffffffffffac, 4) , (stack, 0xffffffffffffffac, 4) , (stack, 0xffffffffffffffac, 4) , (stack, 0xffffffffffffffac, 4) , (stack, 0xffffffffffffffac, 4) , (stack, 0xffffffffffffffac, 4) , (stack, 0xffffffffffffffac, 4) , (stack, 0xffffffffffffffac, 4) , (stack, 0xffffffffffffffac, 4) , (stack, 0xffffffffffffffac, 4) , (stack, 0xffffffffffffffac, 4) , (stack, 0xffffffffffffffac, 4) , (stack, 0xffffffffffffffac, 4) , (stack, 0xffffffffffffffac, 4) , (stack, 0xffffffffffffffac, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x502, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CALL (ram, 0x1212c8, 8) , (register, 0x0, 8)]
[ ---  BRANCH (ram, 0x256d3e, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x348, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x348, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4eff60, 16) INDIRECT (ram, 0x4eff60, 16) , (const, 0x348, 4), (ram, 0x4eff60, 16) MULTIEQUAL (ram, 0x4eff60, 16) , (ram, 0x4eff60, 16) , (ram, 0x4eff60, 16)]
[(ram, 0x4eff70, 8) INDIRECT (ram, 0x4eff70, 8) , (const, 0x348, 4), (ram, 0x4eff70, 8) MULTIEQUAL (ram, 0x4eff70, 8) , (ram, 0x4eff70, 8) , (ram, 0x4eff70, 8)]
[(stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x348, 4), (stack, 0xfffffffffffffea0, 8) MULTIEQUAL (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8)]
[(stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0x348, 4), (stack, 0xfffffffffffffeac, 4) COPY (const, 0x10, 4)]
[(stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0x348, 4), (stack, 0xfffffffffffffeb0, 4) MULTIEQUAL (stack, 0xfffffffffffffeb0, 4) , (stack, 0xfffffffffffffeb0, 4) , (stack, 0xfffffffffffffeb0, 4)]
[(stack, 0xfffffffffffffeb4, 2) INDIRECT (stack, 0xfffffffffffffeb4, 2) , (const, 0x348, 4), (stack, 0xfffffffffffffeb4, 2) MULTIEQUAL (stack, 0xfffffffffffffeb4, 2) , (stack, 0xfffffffffffffeb4, 2) , (stack, 0xfffffffffffffeb4, 2)]
[(stack, 0xfffffffffffffeb6, 1) INDIRECT (stack, 0xfffffffffffffeb6, 1) , (const, 0x348, 4), (stack, 0xfffffffffffffeb6, 1) MULTIEQUAL (stack, 0xfffffffffffffeb6, 1) , (stack, 0xfffffffffffffeb6, 1) , (stack, 0xfffffffffffffeb6, 1)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x348, 4), (stack, 0xfffffffffffffeb8, 8) MULTIEQUAL (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x348, 4), (stack, 0xfffffffffffffec0, 8) MULTIEQUAL (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x348, 4), (stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xffffffffffffff00, 4) INDIRECT (stack, 0xffffffffffffff00, 4) , (const, 0x348, 4), (stack, 0xffffffffffffff00, 4) MULTIEQUAL (stack, 0xffffffffffffff00, 4) , (stack, 0xffffffffffffff00, 4) , (stack, 0xffffffffffffff00, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x348, 4), (stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x348, 4), (stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x348, 4), (stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x348, 4), (stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff28, 4) INDIRECT (stack, 0xffffffffffffff28, 4) , (const, 0x348, 4), (stack, 0xffffffffffffff28, 4) MULTIEQUAL (stack, 0xffffffffffffff28, 4) , (stack, 0xffffffffffffff28, 4) , (stack, 0xffffffffffffff28, 4)]
[(stack, 0xffffffffffffff50, 16) INDIRECT (stack, 0xffffffffffffff50, 16) , (const, 0x348, 4), (stack, 0xffffffffffffff50, 16) MULTIEQUAL (stack, 0xffffffffffffff50, 16) , (stack, 0xffffffffffffff50, 16) , (stack, 0xffffffffffffff50, 16)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x348, 4), (stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x348, 4), (stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x348, 4), (stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffffa8, 2) INDIRECT (stack, 0xffffffffffffffa8, 2) , (const, 0x348, 4), (stack, 0xffffffffffffffa8, 2) MULTIEQUAL (stack, 0xffffffffffffffa8, 2) , (stack, 0xffffffffffffffa8, 2) , (stack, 0xffffffffffffffa8, 2)]
[(stack, 0xffffffffffffffaa, 2) INDIRECT (stack, 0xffffffffffffffaa, 2) , (const, 0x348, 4), (stack, 0xffffffffffffffaa, 2) MULTIEQUAL (stack, 0xffffffffffffffaa, 2) , (stack, 0xffffffffffffffaa, 2) , (stack, 0xffffffffffffffaa, 2)]
[(stack, 0xffffffffffffffac, 4) INDIRECT (stack, 0xffffffffffffffac, 4) , (const, 0x348, 4), (stack, 0xffffffffffffffac, 4) MULTIEQUAL (stack, 0xffffffffffffffac, 4) , (stack, 0xffffffffffffffac, 4) , (stack, 0xffffffffffffffac, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x348, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CBRANCH (ram, 0x256d68, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (const, 0xffffffff, 4) , (unique, 0x10000820, 4), (unique, 0x10000820, 4) CAST (register, 0x0, 4), (register, 0x0, 4) SUBPIECE (register, 0x0, 8) , (const, 0x0, 4), (register, 0x0, 8) CALL (ram, 0x222ac0, 8) , (unique, 0xbc80, 4) , (unique, 0x3200, 8) , (register, 0x10, 8) , (const, 0x40, 4) , (unique, 0x3c80, 8) , (unique, 0x3c80, 8), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0xbd80, 8), (register, 0x10, 8) INT_SEXT (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x26, 8) , (const, 0x4, 8)]
[ ---  CBRANCH (ram, 0x256ce0, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (unique, 0x10000824, 4) , (const, 0x4, 4), (unique, 0x10000824, 4) CAST (register, 0x0, 4)]
[ ---  CBRANCH (ram, 0x256de3, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x10, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x256ce0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbc80, 4) , (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x27, 8) , (const, 0x4, 8), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000828, 8), (unique, 0x10000828, 8) CAST (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x24, 8) , (const, 0x4, 8)]
[ ---  CALL (ram, 0x25dcf0, 8) , (unique, 0x3c80, 8) , (unique, 0x10000830, 8) , (register, 0x0, 4) , (const, 0x1, 4), (unique, 0x10000830, 8) CAST (unique, 0x3200, 8), (unique, 0x3c80, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffec8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x3b0, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x3a3, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x3b0, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x3a3, 4)]
[(ram, 0x4eff60, 16) INDIRECT (ram, 0x4eff60, 16) , (const, 0x3b0, 4), (ram, 0x4eff60, 16) INDIRECT (ram, 0x4eff60, 16) , (const, 0x3a3, 4)]
[(ram, 0x4eff70, 8) INDIRECT (ram, 0x4eff70, 8) , (const, 0x3b0, 4), (ram, 0x4eff70, 8) INDIRECT (ram, 0x4eff70, 8) , (const, 0x3a3, 4)]
[(stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x3b0, 4), (stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x3a3, 4)]
[(stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0x3b0, 4), (stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0x3a3, 4)]
[(stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0x3b0, 4), (stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0x3a3, 4)]
[(stack, 0xfffffffffffffeb4, 2) INDIRECT (stack, 0xfffffffffffffeb4, 2) , (const, 0x3b0, 4), (stack, 0xfffffffffffffeb4, 2) INDIRECT (stack, 0xfffffffffffffeb4, 2) , (const, 0x3a3, 4)]
[(stack, 0xfffffffffffffeb6, 1) INDIRECT (stack, 0xfffffffffffffeb6, 1) , (const, 0x3b0, 4), (stack, 0xfffffffffffffeb6, 1) INDIRECT (stack, 0xfffffffffffffeb6, 1) , (const, 0x3a3, 4)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x3b0, 4), (stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x3a3, 4)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x3b0, 4), (stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x3a3, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x3b0, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x3a3, 4)]
[(stack, 0xffffffffffffff00, 4) INDIRECT (stack, 0xffffffffffffff00, 4) , (const, 0x3b0, 4), (stack, 0xffffffffffffff00, 4) INDIRECT (stack, 0xffffffffffffff00, 4) , (const, 0x3a3, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x3b0, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x3a3, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x3b0, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x3a3, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x3b0, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x3a3, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x3b0, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x3a3, 4)]
[(stack, 0xffffffffffffff28, 4) INDIRECT (stack, 0xffffffffffffff28, 4) , (const, 0x3b0, 4), (stack, 0xffffffffffffff28, 4) INDIRECT (stack, 0xffffffffffffff28, 4) , (const, 0x3a3, 4)]
[(stack, 0xffffffffffffff50, 16) INDIRECT (stack, 0xffffffffffffff50, 16) , (const, 0x3b0, 4), (stack, 0xffffffffffffff50, 16) INDIRECT (stack, 0xffffffffffffff50, 16) , (const, 0x3a3, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x3b0, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x3a3, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x3b0, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x3a3, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x3b0, 4), (stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x3a3, 4)]
[(stack, 0xffffffffffffffa8, 2) INDIRECT (stack, 0xffffffffffffffa8, 2) , (const, 0x3b0, 4), (stack, 0xffffffffffffffa8, 2) INDIRECT (stack, 0xffffffffffffffa8, 2) , (const, 0x3a3, 4)]
[(stack, 0xffffffffffffffaa, 2) INDIRECT (stack, 0xffffffffffffffaa, 2) , (const, 0x3b0, 4), (stack, 0xffffffffffffffaa, 2) INDIRECT (stack, 0xffffffffffffffaa, 2) , (const, 0x3a3, 4)]
[(stack, 0xffffffffffffffac, 4) INDIRECT (stack, 0xffffffffffffffac, 4) , (const, 0x3b0, 4), (stack, 0xffffffffffffffac, 4) INDIRECT (stack, 0xffffffffffffffac, 4) , (const, 0x3a3, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x3b0, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x3a3, 4)]
[ ---  CBRANCH (ram, 0x257233, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x24dab0, 8) , (unique, 0x3c80, 8) , (unique, 0x3c80, 8), (unique, 0x3c80, 8) CAST (unique, 0x10000838, 8), (unique, 0x10000838, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff38, 8), (unique, 0x3c80, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffec8, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x439, 4)]
[(ram, 0x4eff60, 16) INDIRECT (ram, 0x4eff60, 16) , (const, 0x439, 4)]
[(ram, 0x4eff70, 8) INDIRECT (ram, 0x4eff70, 8) , (const, 0x439, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (const, 0x2, 4), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x10, 8) , (const, 0x4, 8)]
[ ---  BRANCH (ram, 0x256e75, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x3c2, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x3c2, 4)]
[(ram, 0x4eff60, 16) INDIRECT (ram, 0x4eff60, 16) , (const, 0x3c2, 4)]
[(ram, 0x4eff70, 8) INDIRECT (ram, 0x4eff70, 8) , (const, 0x3c2, 4)]
[(stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x3c2, 4)]
[(stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0x3c2, 4)]
[(stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0x3c2, 4)]
[(stack, 0xfffffffffffffeb4, 2) INDIRECT (stack, 0xfffffffffffffeb4, 2) , (const, 0x3c2, 4)]
[(stack, 0xfffffffffffffeb6, 1) INDIRECT (stack, 0xfffffffffffffeb6, 1) , (const, 0x3c2, 4)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x3c2, 4)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x3c2, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x3c2, 4)]
[(stack, 0xffffffffffffff00, 4) INDIRECT (stack, 0xffffffffffffff00, 4) , (const, 0x3c2, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x3c2, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x3c2, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x3c2, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x3c2, 4)]
[(stack, 0xffffffffffffff28, 4) INDIRECT (stack, 0xffffffffffffff28, 4) , (const, 0x3c2, 4)]
[(stack, 0xffffffffffffff50, 16) INDIRECT (stack, 0xffffffffffffff50, 16) , (const, 0x3c2, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x3c2, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x3c2, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x3c2, 4)]
[(stack, 0xffffffffffffffa8, 2) INDIRECT (stack, 0xffffffffffffffa8, 2) , (const, 0x3c2, 4)]
[(stack, 0xffffffffffffffaa, 2) INDIRECT (stack, 0xffffffffffffffaa, 2) , (const, 0x3c2, 4)]
[(stack, 0xffffffffffffffac, 4) INDIRECT (stack, 0xffffffffffffffac, 4) , (const, 0x3c2, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x3c2, 4)]
[ ---  CALL (ram, 0x24dba0, 8) , (unique, 0x3c80, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000840, 8), (unique, 0x10000840, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x10, 8) , (const, 0x4, 8)]
[ ---  CBRANCH (ram, 0x2571de, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x10, 8) , (const, 0x4, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x40b, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x40b, 4)]
[(ram, 0x4eff60, 16) INDIRECT (ram, 0x4eff60, 16) , (const, 0x40b, 4)]
[(ram, 0x4eff70, 8) INDIRECT (ram, 0x4eff70, 8) , (const, 0x40b, 4)]
[(stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x40b, 4)]
[(stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0x40b, 4)]
[(stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0x40b, 4)]
[(stack, 0xfffffffffffffeb4, 2) INDIRECT (stack, 0xfffffffffffffeb4, 2) , (const, 0x40b, 4)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x40b, 4)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x40b, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x40b, 4)]
[(stack, 0xffffffffffffff00, 4) INDIRECT (stack, 0xffffffffffffff00, 4) , (const, 0x40b, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x40b, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x40b, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x40b, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x40b, 4)]
[(stack, 0xffffffffffffff28, 4) INDIRECT (stack, 0xffffffffffffff28, 4) , (const, 0x40b, 4)]
[(stack, 0xffffffffffffff50, 16) INDIRECT (stack, 0xffffffffffffff50, 16) , (const, 0x40b, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x40b, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x40b, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x40b, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x40b, 4)]
[ ---  CBRANCH (ram, 0x257206, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALLIND (unique, 0xbd80, 8) , (unique, 0xbd80, 8) , (unique, 0x3100, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000850, 8), (unique, 0x10000850, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x10, 8), (unique, 0x3100, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff50, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000848, 8), (unique, 0x10000848, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x38, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x38, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (const, 0x7, 4), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x10, 8) , (const, 0x4, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x41c, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x419, 4)]
[(ram, 0x4eff60, 16) INDIRECT (ram, 0x4eff60, 16) , (const, 0x41c, 4), (ram, 0x4eff60, 16) INDIRECT (ram, 0x4eff60, 16) , (const, 0x419, 4)]
[(ram, 0x4eff70, 8) INDIRECT (ram, 0x4eff70, 8) , (const, 0x41c, 4), (ram, 0x4eff70, 8) INDIRECT (ram, 0x4eff70, 8) , (const, 0x419, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (const, 0x6, 4), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x12, 8) , (const, 0x4, 8)]
[(ram, 0x4eff70, 8) MULTIEQUAL (ram, 0x4eff70, 8) , (ram, 0x4eff70, 8)]
[(ram, 0x4eff60, 16) MULTIEQUAL (ram, 0x4eff60, 16) , (ram, 0x4eff60, 16)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[ ---  CBRANCH (ram, 0x256e75, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffff58, 8) , (const, 0x0, 8), (stack, 0xffffffffffffff58, 8) SUBPIECE (stack, 0xffffffffffffff50, 16) , (const, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (const, 0x2, 4), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x16, 8) , (const, 0x4, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x435, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x435, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x432, 4)]
[(ram, 0x4eff60, 16) INDIRECT (ram, 0x4eff60, 16) , (const, 0x435, 4), (ram, 0x4eff60, 16) INDIRECT (ram, 0x4eff60, 16) , (const, 0x432, 4)]
[(ram, 0x4eff70, 8) INDIRECT (ram, 0x4eff70, 8) , (const, 0x435, 4), (ram, 0x4eff70, 8) INDIRECT (ram, 0x4eff70, 8) , (const, 0x432, 4)]
[(stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x435, 4)]
[(stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0x435, 4)]
[(stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0x435, 4)]
[(stack, 0xfffffffffffffeb4, 2) INDIRECT (stack, 0xfffffffffffffeb4, 2) , (const, 0x435, 4)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x435, 4)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x435, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x435, 4)]
[(stack, 0xffffffffffffff00, 4) INDIRECT (stack, 0xffffffffffffff00, 4) , (const, 0x435, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x435, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x435, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x435, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x435, 4)]
[(stack, 0xffffffffffffff28, 4) INDIRECT (stack, 0xffffffffffffff28, 4) , (const, 0x435, 4)]
[(stack, 0xffffffffffffff50, 16) INDIRECT (stack, 0xffffffffffffff50, 16) , (const, 0x435, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x435, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x435, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x435, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x435, 4)]
[ ---  CALL (ram, 0x24da60, 8) , (unique, 0x3100, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000858, 8), (unique, 0x10000858, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff50, 8)]
[ ---  BRANCH (ram, 0x256e75, 1)]
[ ---  CBRANCH (ram, 0x256e75, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd00, 4) , (const, 0x0, 4), (unique, 0xbd00, 4) INT_ADD (stack, 0xfffffffffffffe7c, 4) , (const, 0xffffffff, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x3ec, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x3ec, 4)]
[(ram, 0x4eff60, 16) INDIRECT (ram, 0x4eff60, 16) , (const, 0x3ec, 4)]
[(ram, 0x4eff70, 8) INDIRECT (ram, 0x4eff70, 8) , (const, 0x3ec, 4)]
[(stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x3ec, 4)]
[(stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0x3ec, 4)]
[(stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0x3ec, 4)]
[(stack, 0xfffffffffffffeb4, 2) INDIRECT (stack, 0xfffffffffffffeb4, 2) , (const, 0x3ec, 4)]
[(stack, 0xfffffffffffffeb6, 1) INDIRECT (stack, 0xfffffffffffffeb6, 1) , (const, 0x3ec, 4)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x3ec, 4)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x3ec, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x3ec, 4)]
[(stack, 0xffffffffffffff00, 4) INDIRECT (stack, 0xffffffffffffff00, 4) , (const, 0x3ec, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x3ec, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x3ec, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x3ec, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x3ec, 4)]
[(stack, 0xffffffffffffff28, 4) INDIRECT (stack, 0xffffffffffffff28, 4) , (const, 0x3ec, 4)]
[(stack, 0xffffffffffffff50, 16) INDIRECT (stack, 0xffffffffffffff50, 16) , (const, 0x3ec, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x3ec, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x3ec, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x3ec, 4)]
[(stack, 0xffffffffffffffa8, 2) INDIRECT (stack, 0xffffffffffffffa8, 2) , (const, 0x3ec, 4)]
[(stack, 0xffffffffffffffaa, 2) INDIRECT (stack, 0xffffffffffffffaa, 2) , (const, 0x3ec, 4)]
[(stack, 0xffffffffffffffac, 4) INDIRECT (stack, 0xffffffffffffffac, 4) , (const, 0x3ec, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x3ec, 4)]
[ ---  CBRANCH (ram, 0x256ac0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALLIND (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000868, 8), (unique, 0x10000868, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x18, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000860, 8), (unique, 0x10000860, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x38, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x38, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff50, 16) MULTIEQUAL (stack, 0xffffffffffffff50, 16) , (stack, 0xffffffffffffff50, 16) , (stack, 0xffffffffffffff50, 16) , (stack, 0xffffffffffffff50, 16) , (stack, 0xffffffffffffff50, 16)]
[(stack, 0xffffffffffffff28, 4) MULTIEQUAL (stack, 0xffffffffffffff28, 4) , (stack, 0xffffffffffffff28, 4) , (stack, 0xffffffffffffff28, 4) , (stack, 0xffffffffffffff28, 4) , (stack, 0xffffffffffffff28, 4)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 4) MULTIEQUAL (stack, 0xffffffffffffff00, 4) , (stack, 0xffffffffffffff00, 4) , (stack, 0xffffffffffffff00, 4) , (stack, 0xffffffffffffff00, 4) , (stack, 0xffffffffffffff00, 4)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffec0, 8) MULTIEQUAL (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8)]
[(stack, 0xfffffffffffffeb8, 8) MULTIEQUAL (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8)]
[(stack, 0xfffffffffffffeb4, 2) MULTIEQUAL (stack, 0xfffffffffffffeb4, 2) , (stack, 0xfffffffffffffeb4, 2) , (stack, 0xfffffffffffffeb4, 2) , (stack, 0xfffffffffffffeb4, 2) , (stack, 0xfffffffffffffeb4, 2)]
[(stack, 0xfffffffffffffeb0, 4) MULTIEQUAL (stack, 0xfffffffffffffeb0, 4) , (stack, 0xfffffffffffffeb0, 4) , (stack, 0xfffffffffffffeb0, 4) , (stack, 0xfffffffffffffeb0, 4) , (stack, 0xfffffffffffffeb0, 4)]
[(stack, 0xfffffffffffffeac, 4) MULTIEQUAL (stack, 0xfffffffffffffeac, 4) , (stack, 0xfffffffffffffeac, 4) , (stack, 0xfffffffffffffeac, 4) , (stack, 0xfffffffffffffeac, 4) , (stack, 0xfffffffffffffeac, 4)]
[(stack, 0xfffffffffffffea0, 8) MULTIEQUAL (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8)]
[(ram, 0x4eff70, 8) MULTIEQUAL (ram, 0x4eff70, 8) , (ram, 0x4eff70, 8) , (ram, 0x4eff70, 8) , (ram, 0x4eff70, 8) , (ram, 0x4eff70, 8)]
[(ram, 0x4eff60, 16) MULTIEQUAL (ram, 0x4eff60, 16) , (ram, 0x4eff60, 16) , (ram, 0x4eff60, 16) , (ram, 0x4eff60, 16) , (ram, 0x4eff60, 16)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x10, 8) , (const, 0x4, 8)]
[ ---  BRANCH (ram, 0x256a09, 1)]
[ ---  CBRANCH (ram, 0x256fd0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0x4, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000870, 8), (unique, 0x10000870, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (ram, 0x4eae68, 8) , (register, 0x110, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x256ce0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbc80, 4) , (const, 0xb, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (const, 0x4, 4), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x10, 8) , (const, 0x4, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x612, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x60b, 4)]
[(ram, 0x4eff60, 16) INDIRECT (ram, 0x4eff60, 16) , (const, 0x612, 4), (ram, 0x4eff60, 16) INDIRECT (ram, 0x4eff60, 16) , (const, 0x60b, 4)]
[(ram, 0x4eff70, 8) INDIRECT (ram, 0x4eff70, 8) , (const, 0x612, 4), (ram, 0x4eff70, 8) INDIRECT (ram, 0x4eff70, 8) , (const, 0x60b, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0xbc80, 4), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x12, 8) , (const, 0x4, 8), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000878, 8), (unique, 0x10000878, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (unique, 0x10000658, 8) , (register, 0x110, 8) , (const, 0x1, 8)]
[ ---  BRANCH (ram, 0x256d20, 1)]
[ ---  CBRANCH (ram, 0x256ce0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbc80, 4) , (const, 0x4, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000880, 8), (unique, 0x10000880, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (ram, 0x4eae68, 8) , (register, 0x110, 8) , (const, 0x1, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff50, 16) MULTIEQUAL (stack, 0xffffffffffffff50, 16) , (stack, 0xffffffffffffff50, 16)]
[(stack, 0xffffffffffffff28, 4) MULTIEQUAL (stack, 0xffffffffffffff28, 4) , (stack, 0xffffffffffffff28, 4)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 4) MULTIEQUAL (stack, 0xffffffffffffff00, 4) , (stack, 0xffffffffffffff00, 4)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffec0, 8) MULTIEQUAL (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8)]
[(stack, 0xfffffffffffffeb8, 8) MULTIEQUAL (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8)]
[(stack, 0xfffffffffffffeb4, 2) MULTIEQUAL (stack, 0xfffffffffffffeb4, 2) , (stack, 0xfffffffffffffeb4, 2)]
[(stack, 0xfffffffffffffeb0, 4) MULTIEQUAL (stack, 0xfffffffffffffeb0, 4) , (stack, 0xfffffffffffffeb0, 4)]
[(stack, 0xfffffffffffffeac, 4) MULTIEQUAL (stack, 0xfffffffffffffeac, 4) , (stack, 0xfffffffffffffeac, 4)]
[(stack, 0xfffffffffffffea0, 8) MULTIEQUAL (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x45c, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4eff60, 16) INDIRECT (ram, 0x4eff60, 16) , (const, 0x45c, 4), (ram, 0x4eff60, 16) MULTIEQUAL (ram, 0x4eff60, 16) , (ram, 0x4eff60, 16)]
[(ram, 0x4eff70, 8) INDIRECT (ram, 0x4eff70, 8) , (const, 0x45c, 4), (ram, 0x4eff70, 8) MULTIEQUAL (ram, 0x4eff70, 8) , (ram, 0x4eff70, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (register, 0x0, 4), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x12, 8) , (const, 0x4, 8), (register, 0x0, 4) MULTIEQUAL (unique, 0xbc80, 4) , (unique, 0xbc80, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff50, 16) MULTIEQUAL (stack, 0xffffffffffffff50, 16) , (stack, 0xffffffffffffff50, 16) , (stack, 0xffffffffffffff50, 16)]
[(stack, 0xffffffffffffff28, 4) MULTIEQUAL (stack, 0xffffffffffffff28, 4) , (stack, 0xffffffffffffff28, 4) , (stack, 0xffffffffffffff28, 4)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 4) MULTIEQUAL (stack, 0xffffffffffffff00, 4) , (stack, 0xffffffffffffff00, 4) , (stack, 0xffffffffffffff00, 4)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffec0, 8) MULTIEQUAL (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8)]
[(stack, 0xfffffffffffffeb8, 8) MULTIEQUAL (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8)]
[(stack, 0xfffffffffffffeb4, 2) MULTIEQUAL (stack, 0xfffffffffffffeb4, 2) , (stack, 0xfffffffffffffeb4, 2) , (stack, 0xfffffffffffffeb4, 2)]
[(stack, 0xfffffffffffffeb0, 4) MULTIEQUAL (stack, 0xfffffffffffffeb0, 4) , (stack, 0xfffffffffffffeb0, 4) , (stack, 0xfffffffffffffeb0, 4)]
[(stack, 0xfffffffffffffeac, 4) MULTIEQUAL (stack, 0xfffffffffffffeac, 4) , (stack, 0xfffffffffffffeac, 4) , (stack, 0xfffffffffffffeac, 4)]
[(stack, 0xfffffffffffffea0, 8) MULTIEQUAL (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x314, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4eff60, 16) INDIRECT (ram, 0x4eff60, 16) , (const, 0x314, 4), (ram, 0x4eff60, 16) MULTIEQUAL (ram, 0x4eff60, 16) , (ram, 0x4eff60, 16) , (ram, 0x4eff60, 16)]
[(ram, 0x4eff70, 8) INDIRECT (ram, 0x4eff70, 8) , (const, 0x314, 4), (ram, 0x4eff70, 8) MULTIEQUAL (ram, 0x4eff70, 8) , (ram, 0x4eff70, 8) , (ram, 0x4eff70, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (const, 0x4, 4), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x10, 8) , (const, 0x4, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff50, 16) MULTIEQUAL (stack, 0xffffffffffffff50, 16) , (stack, 0xffffffffffffff50, 16) , (stack, 0xffffffffffffff50, 16)]
[(stack, 0xffffffffffffff28, 4) MULTIEQUAL (stack, 0xffffffffffffff28, 4) , (stack, 0xffffffffffffff28, 4) , (stack, 0xffffffffffffff28, 4)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 4) MULTIEQUAL (stack, 0xffffffffffffff00, 4) , (stack, 0xffffffffffffff00, 4) , (stack, 0xffffffffffffff00, 4)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffec0, 8) MULTIEQUAL (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8)]
[(stack, 0xfffffffffffffeb8, 8) MULTIEQUAL (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8)]
[(stack, 0xfffffffffffffeb4, 2) MULTIEQUAL (stack, 0xfffffffffffffeb4, 2) , (stack, 0xfffffffffffffeb4, 2) , (stack, 0xfffffffffffffeb4, 2)]
[(stack, 0xfffffffffffffeb0, 4) MULTIEQUAL (stack, 0xfffffffffffffeb0, 4) , (stack, 0xfffffffffffffeb0, 4) , (stack, 0xfffffffffffffeb0, 4)]
[(stack, 0xfffffffffffffeac, 4) MULTIEQUAL (stack, 0xfffffffffffffeac, 4) , (stack, 0xfffffffffffffeac, 4) , (stack, 0xfffffffffffffeac, 4)]
[(stack, 0xfffffffffffffea0, 8) MULTIEQUAL (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8)]
[(ram, 0x4eff70, 8) MULTIEQUAL (ram, 0x4eff70, 8) , (ram, 0x4eff70, 8) , (ram, 0x4eff70, 8)]
[(ram, 0x4eff60, 16) MULTIEQUAL (ram, 0x4eff60, 16) , (ram, 0x4eff60, 16) , (ram, 0x4eff60, 16)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x0, 4) COPY (const, 0x4, 4)]
[ ---  BRANCH (ram, 0x256a09, 1)]
[(unique, 0x1000038d, 1) MULTIEQUAL (unique, 0x1000038e, 1) , (unique, 0x1000038c, 1) , (unique, 0x1000038c, 1) , (unique, 0x1000038c, 1) , (unique, 0x1000038c, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x2b9, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x2b9, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4eff60, 16) INDIRECT (ram, 0x4eff60, 16) , (const, 0x2b9, 4), (ram, 0x4eff60, 16) MULTIEQUAL (ram, 0x4eff60, 16) , (ram, 0x4eff60, 16) , (ram, 0x4eff60, 16) , (ram, 0x4eff60, 16) , (ram, 0x4eff60, 16)]
[(ram, 0x4eff70, 8) INDIRECT (ram, 0x4eff70, 8) , (const, 0x2b9, 4), (ram, 0x4eff70, 8) MULTIEQUAL (ram, 0x4eff70, 8) , (ram, 0x4eff70, 8) , (ram, 0x4eff70, 8) , (ram, 0x4eff70, 8) , (ram, 0x4eff70, 8)]
[(stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x2b9, 4), (stack, 0xfffffffffffffea0, 8) MULTIEQUAL (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8)]
[(stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0x2b9, 4), (stack, 0xfffffffffffffeac, 4) MULTIEQUAL (stack, 0xfffffffffffffeac, 4) , (stack, 0xfffffffffffffeac, 4) , (stack, 0xfffffffffffffeac, 4) , (stack, 0xfffffffffffffeac, 4) , (stack, 0xfffffffffffffeac, 4)]
[(stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0x2b9, 4), (stack, 0xfffffffffffffeb0, 4) MULTIEQUAL (stack, 0xfffffffffffffeb0, 4) , (stack, 0xfffffffffffffeb0, 4) , (stack, 0xfffffffffffffeb0, 4) , (stack, 0xfffffffffffffeb0, 4) , (stack, 0xfffffffffffffeb0, 4)]
[(stack, 0xfffffffffffffeb4, 2) INDIRECT (stack, 0xfffffffffffffeb4, 2) , (const, 0x2b9, 4), (stack, 0xfffffffffffffeb4, 2) MULTIEQUAL (stack, 0xfffffffffffffeb4, 2) , (stack, 0xfffffffffffffeb4, 2) , (stack, 0xfffffffffffffeb4, 2) , (stack, 0xfffffffffffffeb4, 2) , (stack, 0xfffffffffffffeb4, 2)]
[(stack, 0xfffffffffffffeb6, 1) INDIRECT (stack, 0xfffffffffffffeb6, 1) , (const, 0x2b9, 4), (stack, 0xfffffffffffffeb6, 1) MULTIEQUAL (stack, 0xfffffffffffffeb6, 1) , (stack, 0xfffffffffffffeb6, 1) , (stack, 0xfffffffffffffeb6, 1) , (stack, 0xfffffffffffffeb6, 1) , (stack, 0xfffffffffffffeb6, 1)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x2b9, 4), (stack, 0xfffffffffffffeb8, 8) MULTIEQUAL (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x2b9, 4), (stack, 0xfffffffffffffec0, 8) MULTIEQUAL (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x2b9, 4), (stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xffffffffffffff00, 4) INDIRECT (stack, 0xffffffffffffff00, 4) , (const, 0x2b9, 4), (stack, 0xffffffffffffff00, 4) MULTIEQUAL (stack, 0xffffffffffffff00, 4) , (stack, 0xffffffffffffff00, 4) , (stack, 0xffffffffffffff00, 4) , (stack, 0xffffffffffffff00, 4) , (stack, 0xffffffffffffff00, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x2b9, 4), (stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x2b9, 4), (stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x2b9, 4), (stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x2b9, 4), (stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff28, 4) INDIRECT (stack, 0xffffffffffffff28, 4) , (const, 0x2b9, 4), (stack, 0xffffffffffffff28, 4) MULTIEQUAL (stack, 0xffffffffffffff28, 4) , (stack, 0xffffffffffffff28, 4) , (stack, 0xffffffffffffff28, 4) , (stack, 0xffffffffffffff28, 4) , (stack, 0xffffffffffffff28, 4)]
[(stack, 0xffffffffffffff50, 16) INDIRECT (stack, 0xffffffffffffff50, 16) , (const, 0x2b9, 4), (stack, 0xffffffffffffff50, 16) MULTIEQUAL (stack, 0xffffffffffffff50, 16) , (stack, 0xffffffffffffff50, 16) , (stack, 0xffffffffffffff50, 16) , (stack, 0xffffffffffffff50, 16) , (stack, 0xffffffffffffff50, 16)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x2b9, 4), (stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x2b9, 4), (stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x2b9, 4), (stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffffa8, 2) INDIRECT (stack, 0xffffffffffffffa8, 2) , (const, 0x2b9, 4), (stack, 0xffffffffffffffa8, 2) MULTIEQUAL (stack, 0xffffffffffffffa8, 2) , (stack, 0xffffffffffffffa8, 2) , (stack, 0xffffffffffffffa8, 2) , (stack, 0xffffffffffffffa8, 2) , (stack, 0xffffffffffffffa8, 2)]
[(stack, 0xffffffffffffffaa, 2) INDIRECT (stack, 0xffffffffffffffaa, 2) , (const, 0x2b9, 4), (stack, 0xffffffffffffffaa, 2) MULTIEQUAL (stack, 0xffffffffffffffaa, 2) , (stack, 0xffffffffffffffaa, 2) , (stack, 0xffffffffffffffaa, 2) , (stack, 0xffffffffffffffaa, 2) , (stack, 0xffffffffffffffaa, 2)]
[(stack, 0xffffffffffffffac, 4) INDIRECT (stack, 0xffffffffffffffac, 4) , (const, 0x2b9, 4), (stack, 0xffffffffffffffac, 4) MULTIEQUAL (stack, 0xffffffffffffffac, 4) , (stack, 0xffffffffffffffac, 4) , (stack, 0xffffffffffffffac, 4) , (stack, 0xffffffffffffffac, 4) , (stack, 0xffffffffffffffac, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2b9, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(VARIABLE, 0x0, 4) CALL (ram, 0x2414c0, 8)]
[ ---  BRANCH (ram, 0x256c20, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (const, 0x3, 4), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x10, 8) , (const, 0x4, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x65f, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x658, 4)]
[(ram, 0x4eff60, 16) INDIRECT (ram, 0x4eff60, 16) , (const, 0x65f, 4), (ram, 0x4eff60, 16) INDIRECT (ram, 0x4eff60, 16) , (const, 0x658, 4)]
[(ram, 0x4eff70, 8) INDIRECT (ram, 0x4eff70, 8) , (const, 0x65f, 4), (ram, 0x4eff70, 8) INDIRECT (ram, 0x4eff70, 8) , (const, 0x658, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0xbc80, 4), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x12, 8) , (const, 0x4, 8), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000888, 8), (unique, 0x10000888, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (unique, 0x10000650, 8) , (register, 0x110, 8) , (const, 0x1, 8)]
[(register, 0x0, 4) COPY (const, 0x3, 4)]
[ ---  BRANCH (ram, 0x256a09, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff50, 16) MULTIEQUAL (stack, 0xffffffffffffff50, 16) , (stack, 0xffffffffffffff50, 16) , (stack, 0xffffffffffffff50, 16) , (stack, 0xffffffffffffff50, 16) , (stack, 0xffffffffffffff50, 16) , (stack, 0xffffffffffffff50, 16)]
[(stack, 0xffffffffffffff28, 4) MULTIEQUAL (stack, 0xffffffffffffff28, 4) , (stack, 0xffffffffffffff28, 4) , (stack, 0xffffffffffffff28, 4) , (stack, 0xffffffffffffff28, 4) , (stack, 0xffffffffffffff28, 4) , (stack, 0xffffffffffffff28, 4)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 4) MULTIEQUAL (stack, 0xffffffffffffff00, 4) , (stack, 0xffffffffffffff00, 4) , (stack, 0xffffffffffffff00, 4) , (stack, 0xffffffffffffff00, 4) , (stack, 0xffffffffffffff00, 4) , (stack, 0xffffffffffffff00, 4)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffec0, 8) MULTIEQUAL (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8)]
[(stack, 0xfffffffffffffeb8, 8) MULTIEQUAL (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8)]
[(stack, 0xfffffffffffffeb4, 2) MULTIEQUAL (stack, 0xfffffffffffffeb4, 2) , (stack, 0xfffffffffffffeb4, 2) , (stack, 0xfffffffffffffeb4, 2) , (stack, 0xfffffffffffffeb4, 2) , (stack, 0xfffffffffffffeb4, 2) , (stack, 0xfffffffffffffeb4, 2)]
[(stack, 0xfffffffffffffeb0, 4) MULTIEQUAL (stack, 0xfffffffffffffeb0, 4) , (stack, 0xfffffffffffffeb0, 4) , (stack, 0xfffffffffffffeb0, 4) , (stack, 0xfffffffffffffeb0, 4) , (stack, 0xfffffffffffffeb0, 4) , (stack, 0xfffffffffffffeb0, 4)]
[(stack, 0xfffffffffffffeac, 4) MULTIEQUAL (stack, 0xfffffffffffffeac, 4) , (stack, 0xfffffffffffffeac, 4) , (stack, 0xfffffffffffffeac, 4) , (stack, 0xfffffffffffffeac, 4) , (stack, 0xfffffffffffffeac, 4) , (stack, 0xfffffffffffffeac, 4)]
[(stack, 0xfffffffffffffea0, 8) MULTIEQUAL (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x7a, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4eff60, 16) INDIRECT (ram, 0x4eff60, 16) , (const, 0x7a, 4), (ram, 0x4eff60, 16) MULTIEQUAL (ram, 0x4eff60, 16) , (ram, 0x4eff60, 16) , (ram, 0x4eff60, 16) , (ram, 0x4eff60, 16) , (ram, 0x4eff60, 16) , (ram, 0x4eff60, 16)]
[(ram, 0x4eff70, 8) INDIRECT (ram, 0x4eff70, 8) , (const, 0x7a, 4), (ram, 0x4eff70, 8) MULTIEQUAL (ram, 0x4eff70, 8) , (ram, 0x4eff70, 8) , (ram, 0x4eff70, 8) , (ram, 0x4eff70, 8) , (ram, 0x4eff70, 8) , (ram, 0x4eff70, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (const, 0x5, 4), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x10, 8) , (const, 0x4, 8)]
[(register, 0x0, 4) COPY (const, 0x5, 4)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff50, 16) MULTIEQUAL (stack, 0xffffffffffffff50, 16) , (stack, 0xffffffffffffff50, 16) , (stack, 0xffffffffffffff50, 16) , (stack, 0xffffffffffffff50, 16) , (stack, 0xffffffffffffff50, 16) , (stack, 0xffffffffffffff50, 16)]
[(stack, 0xffffffffffffff28, 4) MULTIEQUAL (stack, 0xffffffffffffff28, 4) , (stack, 0xffffffffffffff28, 4) , (stack, 0xffffffffffffff28, 4) , (stack, 0xffffffffffffff28, 4) , (stack, 0xffffffffffffff28, 4) , (stack, 0xffffffffffffff28, 4)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 4) MULTIEQUAL (stack, 0xffffffffffffff00, 4) , (stack, 0xffffffffffffff00, 4) , (stack, 0xffffffffffffff00, 4) , (stack, 0xffffffffffffff00, 4) , (stack, 0xffffffffffffff00, 4) , (stack, 0xffffffffffffff00, 4)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffec0, 8) MULTIEQUAL (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8)]
[(stack, 0xfffffffffffffeb8, 8) MULTIEQUAL (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8)]
[(stack, 0xfffffffffffffeb4, 2) MULTIEQUAL (stack, 0xfffffffffffffeb4, 2) , (stack, 0xfffffffffffffeb4, 2) , (stack, 0xfffffffffffffeb4, 2) , (stack, 0xfffffffffffffeb4, 2) , (stack, 0xfffffffffffffeb4, 2) , (stack, 0xfffffffffffffeb4, 2)]
[(stack, 0xfffffffffffffeb0, 4) MULTIEQUAL (stack, 0xfffffffffffffeb0, 4) , (stack, 0xfffffffffffffeb0, 4) , (stack, 0xfffffffffffffeb0, 4) , (stack, 0xfffffffffffffeb0, 4) , (stack, 0xfffffffffffffeb0, 4) , (stack, 0xfffffffffffffeb0, 4)]
[(stack, 0xfffffffffffffeac, 4) MULTIEQUAL (stack, 0xfffffffffffffeac, 4) , (stack, 0xfffffffffffffeac, 4) , (stack, 0xfffffffffffffeac, 4) , (stack, 0xfffffffffffffeac, 4) , (stack, 0xfffffffffffffeac, 4) , (stack, 0xfffffffffffffeac, 4)]
[(stack, 0xfffffffffffffea0, 8) MULTIEQUAL (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8)]
[(ram, 0x4eff70, 8) MULTIEQUAL (ram, 0x4eff70, 8) , (ram, 0x4eff70, 8) , (ram, 0x4eff70, 8) , (ram, 0x4eff70, 8) , (ram, 0x4eff70, 8) , (ram, 0x4eff70, 8)]
[(ram, 0x4eff60, 16) MULTIEQUAL (ram, 0x4eff60, 16) , (ram, 0x4eff60, 16) , (ram, 0x4eff60, 16) , (ram, 0x4eff60, 16) , (ram, 0x4eff60, 16) , (ram, 0x4eff60, 16)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x0, 4) MULTIEQUAL (register, 0x0, 4) , (register, 0x0, 4) , (unique, 0xbc80, 4) , (register, 0x0, 4) , (register, 0x0, 4) , (register, 0x0, 4)]
[ ---  CBRANCH (ram, 0x2571d4, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffffc0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10000890, 8), (unique, 0x10000890, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0xa6, 4)]
[(stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0xa6, 4)]
[(stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0xa6, 4)]
[(stack, 0xfffffffffffffeb4, 2) INDIRECT (stack, 0xfffffffffffffeb4, 2) , (const, 0xa6, 4)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0xa6, 4)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0xa6, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0xa6, 4)]
[(stack, 0xffffffffffffff00, 4) INDIRECT (stack, 0xffffffffffffff00, 4) , (const, 0xa6, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0xa6, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0xa6, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0xa6, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0xa6, 4)]
[(stack, 0xffffffffffffff28, 4) INDIRECT (stack, 0xffffffffffffff28, 4) , (const, 0xa6, 4)]
[(stack, 0xffffffffffffff50, 16) INDIRECT (stack, 0xffffffffffffff50, 16) , (const, 0xa6, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0xa6, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0xa6, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0xa6, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xa6, 4)]
[ ---  CALL (ram, 0x234c80, 8)]
[(ram, 0x4eae68, 8) COPY (ram, 0x4eae68, 8), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xa6, 4)]
[(ram, 0x4eff60, 16) COPY (ram, 0x4eff60, 16), (ram, 0x4eff60, 16) INDIRECT (ram, 0x4eff60, 16) , (const, 0xa6, 4)]
[(ram, 0x4eff70, 8) COPY (ram, 0x4eff70, 8), (ram, 0x4eff70, 8) INDIRECT (ram, 0x4eff70, 8) , (const, 0xa6, 4)]
[ ---  RETURN (const, 0x1, 4)]
[(ram, 0x4eae68, 8) COPY (ram, 0x4eae68, 8)]
[(ram, 0x4eff60, 16) COPY (ram, 0x4eff60, 16)]
[(ram, 0x4eff70, 8) COPY (ram, 0x4eff70, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 4)]
