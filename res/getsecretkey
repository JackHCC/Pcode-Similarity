[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (register, 0x110, 8) , (const, 0x5, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x24fdf0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4eff80, 8) , (const, 0x0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xea, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xea, 4)]
[(ram, 0x4eff78, 8) INDIRECT (ram, 0x4eff78, 8) , (const, 0xea, 4)]
[(ram, 0x4eff80, 8) INDIRECT (ram, 0x4eff80, 8) , (const, 0xea, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0xea, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0xea, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0xea, 4)]
[ ---  CBRANCH (ram, 0x24fe28, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x24b7a0, 8) , (unique, 0x3800, 8) , (unique, 0x100000d3, 8) , (const, 0x0, 8) , (unique, 0x3800, 8), (unique, 0x100000d3, 8) COPY (const, 0x2b71a6, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffb0, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffb8, 8)]
[(ram, 0x4eff80, 8) COPY (const, 0xffffffffffffffff, 8)]
[(register, 0x0, 4) COPY (const, 0x0, 4)]
[ ---  BRANCH (ram, 0x24fdcd, 1)]
[(stack, 0xffffffffffffffb0, 8) COPY (ram, 0x4eff80, 8)]
[(stack, 0xffffffffffffffb8, 8) COPY (ram, 0x4eff78, 8)]
[ ---  CBRANCH (ram, 0x24fe20, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4eff80, 8) , (const, 0xffffffffffffffff, 8)]
[(register, 0x0, 4) COPY (const, 0x0, 4)]
[ ---  BRANCH (ram, 0x24fdcd, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (unique, 0xbd80, 8)]
[(register, 0xa0, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffb8, 8)]
[(register, 0x28, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffb0, 8)]
[(register, 0x10, 8) PTRADD (ram, 0x4eae68, 8) , (unique, 0xbd80, 8) , (const, 0x1, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x110, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(unique, 0x10000115, 8) COPY (stack, 0xffffffffffffffb8, 8), (stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(unique, 0x1000011d, 8) COPY (stack, 0xffffffffffffffb0, 8), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[ ---  BRANCH (ram, 0x24fd9a, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x84, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x66, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x84, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x66, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4eff78, 8) INDIRECT (ram, 0x4eff78, 8) , (const, 0x84, 4), (ram, 0x4eff78, 8) INDIRECT (ram, 0x4eff78, 8) , (const, 0x66, 4), (ram, 0x4eff78, 8) MULTIEQUAL (unique, 0x10000115, 8) , (ram, 0x4eff78, 8)]
[(ram, 0x4eff80, 8) INDIRECT (ram, 0x4eff80, 8) , (const, 0x84, 4), (ram, 0x4eff80, 8) INDIRECT (ram, 0x4eff80, 8) , (const, 0x66, 4), (ram, 0x4eff80, 8) MULTIEQUAL (unique, 0x1000011d, 8) , (ram, 0x4eff80, 8)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x84, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x66, 4), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x84, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x66, 4), (stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x84, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x66, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CBRANCH (ram, 0x24fd90, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x249490, 8) , (register, 0x28, 8) , (unique, 0x100000db, 8) , (const, 0x0, 8) , (register, 0xa0, 8) , (register, 0x0, 4) , (const, 0x0, 8), (unique, 0x100000db, 8) COPY (const, 0x2b71a6, 8), (register, 0x0, 4) CALLIND (stack, 0xffffffffffffffb8, 8) , (register, 0x38, 8) , (register, 0x30, 8) , (register, 0x10, 8) , (register, 0x10, 8), (stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(register, 0x0, 4) INT_ZEXT (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x1, 4)]
[(stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(ram, 0x4eff80, 8) MULTIEQUAL (ram, 0x4eff80, 8) , (ram, 0x4eff80, 8) , (ram, 0x4eff80, 8)]
[(ram, 0x4eff78, 8) MULTIEQUAL (ram, 0x4eff78, 8) , (ram, 0x4eff78, 8) , (ram, 0x4eff78, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x0, 4) MULTIEQUAL (register, 0x0, 4) , (register, 0x0, 4) , (register, 0x0, 4)]
[ ---  CBRANCH (ram, 0x24fe45, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffffc0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (register, 0x110, 8) , (const, 0x5, 8) , (const, 0x8, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (unique, 0xbd80, 8) , (stack, 0xffffffffffffffc0, 8)]
[(ram, 0x4eae68, 8) COPY (ram, 0x4eae68, 8)]
[(ram, 0x4eff78, 8) COPY (ram, 0x4eff78, 8)]
[(ram, 0x4eff80, 8) COPY (ram, 0x4eff80, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 4), (register, 0x0, 4) CAST (unique, 0x10000125, 4), (unique, 0x10000125, 4) COPY (register, 0x0, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0xcd, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0xcd, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xcd, 4)]
[ ---  CALL (ram, 0x234c80, 8)]
[(ram, 0x4eae68, 8) COPY (ram, 0x4eae68, 8), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xcd, 4)]
[(ram, 0x4eff78, 8) COPY (ram, 0x4eff78, 8), (ram, 0x4eff78, 8) INDIRECT (ram, 0x4eff78, 8) , (const, 0xcd, 4)]
[(ram, 0x4eff80, 8) COPY (ram, 0x4eff80, 8), (ram, 0x4eff80, 8) INDIRECT (ram, 0x4eff80, 8) , (const, 0xcd, 4)]
[ ---  RETURN (const, 0x1, 4)]
