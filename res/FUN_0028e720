[ ---  CBRANCH (ram, 0x28e9a0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x30, 8) , (const, 0x0, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) COPY (const, 0x0, 8)]
[(register, 0x1200, 32) INT_ZEXT (unique, 0xc8a80, 16), (unique, 0xc8a80, 16) CALLOTHER (const, 0x1da, 4) , (register, 0x1200, 16) , (register, 0x1200, 16), (register, 0x1200, 16) SUBPIECE (register, 0x1200, 32) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x28e780, 1) , (unique, 0xc900, 1), (unique, 0xc900, 1) INT_LESS (register, 0x8, 4) , (const, 0x21, 4), (register, 0x8, 4) INT_AND (unique, 0x100000b8, 4) , (const, 0x3f, 4), (unique, 0x100000b8, 4) SUBPIECE (register, 0x38, 8) , (const, 0x0, 4)]
[(register, 0x8, 8) INT_ZEXT (register, 0x8, 4), (register, 0x8, 4) INT_AND (unique, 0x100000b8, 4) , (const, 0x1f, 4)]
[ ---  CBRANCH (ram, 0x28e7b0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) INT_SRIGHT (register, 0x0, 4) , (register, 0x8, 1), (register, 0x8, 1) SUBPIECE (register, 0x8, 4) , (const, 0x0, 4), (register, 0x0, 4) CALLOTHER (const, 0x23a, 4) , (register, 0x1220, 32), (register, 0x1220, 32) CALLOTHER (const, 0x21e, 4) , (register, 0x1200, 32) , (unique, 0x5380, 32), (unique, 0x5380, 32) LOAD (const, 0x1b1, 4) , (register, 0x38, 8), (register, 0x38, 8) CAST (unique, 0x100001c1, 8), (unique, 0x100001c1, 8) INT_AND (unique, 0x100001b9, 8) , (const, 0xffffffffffffffe0, 8), (unique, 0x100001b9, 8) CAST (register, 0x38, 8), (register, 0x8, 4) INT_AND (unique, 0x100000b8, 4) , (const, 0x1f, 4)]
[(unique, 0xdc900, 4) COPY (const, 0x0, 4)]
[(unique, 0xdc900, 4) MULTIEQUAL (unique, 0xdc900, 4) , (unique, 0xdc900, 4)]
[ ---  CBRANCH (const, 0x5, 1) , (unique, 0xdca80, 1), (unique, 0xdca80, 1) INT_EQUAL (unique, 0xdca00, 4) , (const, 0x0, 4), (unique, 0xdca00, 4) INT_AND (unique, 0xdc980, 4) , (const, 0x1, 4), (unique, 0xdc980, 4) MULTIEQUAL (register, 0x0, 4) , (unique, 0xdc980, 4)]
[(unique, 0xdc900, 4) INT_ADD (unique, 0xdc900, 4) , (const, 0x1, 4)]
[(unique, 0xdc980, 4) INT_OR (unique, 0xdcb80, 4) , (const, 0x80000000, 4), (unique, 0xdcb80, 4) INT_RIGHT (unique, 0xdc980, 4) , (const, 0x1, 4)]
[ ---  BRANCH (const, 0xfffffffa, 1)]
[ ---  CBRANCH (ram, 0x28e990, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (register, 0x0, 8) , (register, 0x30, 8), (register, 0x0, 8) INT_ZEXT (unique, 0xdc900, 4)]
[ ---  CALLOTHER (const, 0x203, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) INT_ADD (unique, 0x100001d1, 8) , (unique, 0x100000f9, 8), (unique, 0x100001d1, 8) CAST (register, 0x38, 8), (unique, 0x100000f9, 8) INT_SUB (unique, 0x100000f1, 8) , (unique, 0x100001c9, 8), (unique, 0x100001c9, 8) CAST (register, 0x38, 8), (unique, 0x100000f1, 8) INT_ADD (register, 0x8, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x28e990, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) BOOL_OR (register, 0x200, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x30, 8) , (const, 0x0, 8), (register, 0x30, 8) INT_SUB (register, 0x30, 8) , (register, 0x8, 8), (register, 0x200, 1) INT_LESS (register, 0x30, 8) , (register, 0x8, 8), (register, 0x8, 8) INT_SUB (const, 0x20, 8) , (register, 0x8, 8)]
[(register, 0x38, 8) PTRADD (register, 0x38, 8) , (const, 0x1, 8) , (const, 0x20, 8)]
[ ---  CBRANCH (ram, 0x28e87f, 1) , (unique, 0x100000cb, 1), (unique, 0x100000cb, 1) BOOL_AND (register, 0x200, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x30, 8) , (const, 0x0, 8), (register, 0x30, 8) INT_SUB (register, 0x30, 8) , (const, 0x80, 8), (register, 0x200, 1) INT_LESS (const, 0x7f, 8) , (register, 0x30, 8)]
[(unique, 0x100001a9, 8) COPY (register, 0x30, 8)]
[(unique, 0x100001b1, 8) COPY (register, 0x38, 8)]
[ ---  CBRANCH (ram, 0x28e910, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALLOTHER (const, 0x23a, 4) , (register, 0x1220, 32), (register, 0x1220, 32) CALLOTHER (const, 0x21e, 4) , (register, 0x1200, 32) , (unique, 0x5380, 32), (unique, 0x5380, 32) LOAD (const, 0x1b1, 4) , (register, 0x38, 8)]
[ ---  CBRANCH (ram, 0x28e990, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) BOOL_OR (register, 0x200, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x30, 8) , (const, 0x0, 8), (register, 0x30, 8) INT_SUB (register, 0x30, 8) , (const, 0x20, 8), (register, 0x200, 1) INT_LESS (register, 0x30, 8) , (const, 0x20, 8)]
[(register, 0x38, 8) CAST (unique, 0x100001e1, 8), (unique, 0x100001e1, 8) INT_AND (unique, 0x100001d9, 8) , (const, 0xffffffffffffffe0, 8), (unique, 0x100001d9, 8) CAST (register, 0x38, 8), (register, 0x38, 8) PTRADD (register, 0x38, 8) , (const, 0x1, 8) , (const, 0x20, 8)]
[ ---  CBRANCH (ram, 0x28e87f, 1) , (unique, 0x100000c5, 1), (unique, 0x100000c5, 1) BOOL_AND (register, 0x200, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x30, 8) , (const, 0x0, 8), (register, 0x30, 8) INT_SUB (register, 0x30, 8) , (const, 0x80, 8), (register, 0x200, 1) INT_LESS (const, 0x7f, 8) , (register, 0x30, 8), (register, 0x30, 8) INT_ADD (register, 0x30, 8) , (register, 0x8, 8), (register, 0x8, 8) INT_ZEXT (register, 0x8, 4), (register, 0x8, 4) INT_AND (unique, 0x100000b8, 4) , (const, 0x1f, 4)]
[(register, 0x30, 8) MULTIEQUAL (register, 0x30, 8) , (register, 0x30, 8)]
[ ---  CBRANCH (ram, 0x28e9b0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALLOTHER (const, 0x23a, 4) , (register, 0x1220, 32), (register, 0x1220, 32) CALLOTHER (const, 0x21e, 4) , (register, 0x1200, 32) , (unique, 0x5380, 32), (unique, 0x5380, 32) LOAD (const, 0x1b1, 4) , (register, 0x38, 8), (register, 0x38, 8) MULTIEQUAL (register, 0x38, 8) , (register, 0x38, 8)]
[ ---  CBRANCH (ram, 0x28e9c0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALLOTHER (const, 0x23a, 4) , (register, 0x1220, 32), (register, 0x1220, 32) CALLOTHER (const, 0x21e, 4) , (register, 0x1200, 32) , (unique, 0x5380, 32), (unique, 0x5380, 32) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x38, 8) , (const, 0x1, 8) , (const, 0x20, 8)]
[ ---  CBRANCH (ram, 0x28e9e0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALLOTHER (const, 0x23a, 4) , (register, 0x1220, 32), (register, 0x1220, 32) CALLOTHER (const, 0x21e, 4) , (register, 0x1200, 32) , (unique, 0x5380, 32), (unique, 0x5380, 32) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x38, 8) , (const, 0x2, 8) , (const, 0x20, 8)]
[ ---  CBRANCH (ram, 0x28ea2e, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALLOTHER (const, 0x23a, 4) , (register, 0x1220, 32), (register, 0x1220, 32) CALLOTHER (const, 0x21e, 4) , (register, 0x1200, 32) , (unique, 0x5380, 32), (unique, 0x5380, 32) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x38, 8) , (const, 0x3, 8) , (const, 0x20, 8)]
[(register, 0x38, 8) PTRADD (register, 0x38, 8) , (const, 0x4, 8) , (const, 0x20, 8)]
[ ---  CBRANCH (ram, 0x28e87f, 1) , (unique, 0x100000ce, 1), (unique, 0x100000ce, 1) BOOL_AND (register, 0x200, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x30, 8) , (const, 0x0, 8), (register, 0x30, 8) INT_SUB (register, 0x30, 8) , (const, 0x80, 8), (register, 0x200, 1) INT_LESS (const, 0x7f, 8) , (register, 0x30, 8)]
[(register, 0x38, 8) CAST (unique, 0x100001f1, 8), (unique, 0x100001f1, 8) INT_AND (unique, 0x100001e9, 8) , (const, 0xffffffffffffff80, 8), (unique, 0x100001e9, 8) CAST (register, 0x38, 8)]
[(register, 0x30, 8) INT_ADD (register, 0x30, 8) , (register, 0x8, 8), (register, 0x8, 8) INT_ZEXT (register, 0x8, 4), (register, 0x8, 4) INT_AND (register, 0x8, 4) , (const, 0x7f, 4), (register, 0x8, 4) SUBPIECE (register, 0x38, 8) , (const, 0x0, 4)]
[(register, 0x30, 8) MULTIEQUAL (register, 0x30, 8) , (register, 0x30, 8)]
[ ---  CBRANCH (ram, 0x28ea00, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALLOTHER (const, 0x23a, 4) , (register, 0x12a0, 32), (register, 0x12a0, 32) CALLOTHER (const, 0x21e, 4) , (register, 0x1200, 32) , (register, 0x12a0, 32), (register, 0x12a0, 32) CALLOTHER (const, 0x237, 4) , (register, 0x12c0, 32) , (register, 0x12a0, 32), (register, 0x12c0, 32) CALLOTHER (const, 0x237, 4) , (register, 0x1280, 32) , (register, 0x1260, 32), (register, 0x12a0, 32) CALLOTHER (const, 0x237, 4) , (register, 0x1240, 32) , (register, 0x1220, 32), (register, 0x1280, 32) CALLOTHER (const, 0x14a, 4) , (unique, 0x5380, 32), (unique, 0x5380, 32) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x38, 8) , (const, 0x3, 8) , (const, 0x20, 8), (register, 0x1260, 32) CALLOTHER (const, 0x14a, 4) , (unique, 0x5380, 32), (unique, 0x5380, 32) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x38, 8) , (const, 0x2, 8) , (const, 0x20, 8), (register, 0x1240, 32) CALLOTHER (const, 0x14a, 4) , (unique, 0x5380, 32), (unique, 0x5380, 32) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x38, 8) , (const, 0x1, 8) , (const, 0x20, 8), (register, 0x1220, 32) CALLOTHER (const, 0x14a, 4) , (unique, 0x5380, 32), (unique, 0x5380, 32) LOAD (const, 0x1b1, 4) , (register, 0x38, 8), (register, 0x38, 8) MULTIEQUAL (register, 0x38, 8) , (register, 0x38, 8)]
[ ---  CBRANCH (ram, 0x28e9b0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALLOTHER (const, 0x23a, 4) , (register, 0x1220, 32), (register, 0x1220, 32) CALLOTHER (const, 0x21e, 4) , (register, 0x1200, 32) , (register, 0x1220, 32)]
[ ---  CBRANCH (ram, 0x28e9c0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALLOTHER (const, 0x23a, 4) , (register, 0x1240, 32), (register, 0x1240, 32) CALLOTHER (const, 0x21e, 4) , (register, 0x1200, 32) , (register, 0x1240, 32)]
[ ---  CBRANCH (ram, 0x28e9e0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALLOTHER (const, 0x23a, 4) , (register, 0x1260, 32), (register, 0x1260, 32) CALLOTHER (const, 0x21e, 4) , (register, 0x1200, 32) , (register, 0x1260, 32)]
[(register, 0x38, 8) MULTIEQUAL (register, 0x38, 8) , (register, 0x38, 8)]
[(register, 0x0, 4) MULTIEQUAL (register, 0x0, 4) , (register, 0x0, 4)]
[(unique, 0xdc900, 4) COPY (const, 0x0, 4)]
[(unique, 0xdc900, 4) MULTIEQUAL (unique, 0xdc900, 4) , (unique, 0xdc900, 4)]
[ ---  CBRANCH (const, 0x5, 1) , (unique, 0xdca80, 1), (unique, 0xdca80, 1) INT_EQUAL (unique, 0xdca00, 4) , (const, 0x0, 4), (unique, 0xdca00, 4) INT_AND (unique, 0xdc980, 4) , (const, 0x1, 4), (unique, 0xdc980, 4) MULTIEQUAL (register, 0x0, 4) , (unique, 0xdc980, 4)]
[(unique, 0xdc900, 4) INT_ADD (unique, 0xdc900, 4) , (const, 0x1, 4)]
[(unique, 0xdc980, 4) INT_OR (unique, 0xdcb80, 4) , (const, 0x80000000, 4), (unique, 0xdcb80, 4) INT_RIGHT (unique, 0xdc980, 4) , (const, 0x1, 4)]
[ ---  BRANCH (const, 0xfffffffa, 1)]
[ ---  CALLOTHER (const, 0x203, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) INT_ADD (unique, 0x10000201, 8) , (unique, 0x10000199, 8), (unique, 0x10000201, 8) CAST (register, 0x38, 8), (unique, 0x10000199, 8) INT_SUB (register, 0x0, 8) , (unique, 0x100001f9, 8), (unique, 0x100001f9, 8) CAST (register, 0x38, 8), (register, 0x0, 8) INT_ADD (register, 0x0, 8) , (const, 0x40, 8), (register, 0x0, 8) INT_ZEXT (unique, 0xdc900, 4)]
[(register, 0x0, 4) CALLOTHER (const, 0x23a, 4) , (register, 0x1280, 32), (register, 0x1280, 32) CALLOTHER (const, 0x21e, 4) , (register, 0x1200, 32) , (register, 0x1280, 32)]
[(register, 0x38, 8) MULTIEQUAL (register, 0x38, 8) , (register, 0x38, 8)]
[(register, 0x0, 4) MULTIEQUAL (register, 0x0, 4) , (register, 0x0, 4)]
[(unique, 0xdc900, 4) COPY (const, 0x0, 4)]
[(unique, 0xdc900, 4) MULTIEQUAL (unique, 0xdc900, 4) , (unique, 0xdc900, 4)]
[ ---  CBRANCH (const, 0x5, 1) , (unique, 0xdca80, 1), (unique, 0xdca80, 1) INT_EQUAL (unique, 0xdca00, 4) , (const, 0x0, 4), (unique, 0xdca00, 4) INT_AND (unique, 0xdc980, 4) , (const, 0x1, 4), (unique, 0xdc980, 4) MULTIEQUAL (register, 0x0, 4) , (unique, 0xdc980, 4)]
[(unique, 0xdc900, 4) INT_ADD (unique, 0xdc900, 4) , (const, 0x1, 4)]
[(unique, 0xdc980, 4) INT_OR (unique, 0xdcb80, 4) , (const, 0x80000000, 4), (unique, 0xdcb80, 4) INT_RIGHT (unique, 0xdc980, 4) , (const, 0x1, 4)]
[ ---  BRANCH (const, 0xfffffffa, 1)]
[ ---  CALLOTHER (const, 0x203, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) INT_ADD (unique, 0x10000211, 8) , (unique, 0x100001a1, 8), (unique, 0x10000211, 8) CAST (register, 0x38, 8), (unique, 0x100001a1, 8) INT_SUB (register, 0x0, 8) , (unique, 0x10000209, 8), (unique, 0x10000209, 8) CAST (register, 0x38, 8), (register, 0x0, 8) INT_ADD (register, 0x0, 8) , (const, 0x60, 8), (register, 0x0, 8) INT_ZEXT (unique, 0xdc900, 4)]
[(register, 0x38, 8) PTRADD (register, 0x38, 8) , (const, 0x4, 8) , (const, 0x20, 8)]
[ ---  CBRANCH (ram, 0x28e840, 1) , (unique, 0xc900, 1), (unique, 0xc900, 1) BOOL_AND (register, 0x200, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x30, 8) , (const, 0x0, 8), (register, 0x30, 8) INT_SUB (register, 0x30, 8) , (const, 0x80, 8), (register, 0x200, 1) INT_LESS (const, 0x7f, 8) , (register, 0x30, 8)]
[(register, 0x38, 8) MULTIEQUAL (register, 0x38, 8) , (register, 0x38, 8) , (register, 0x38, 8) , (register, 0x38, 8)]
[(register, 0x30, 8) INT_ZEXT (register, 0x30, 4), (register, 0x30, 4) INT_ADD (register, 0x30, 4) , (const, 0x40, 4), (register, 0x30, 4) SUBPIECE (register, 0x30, 8) , (const, 0x0, 4), (register, 0x30, 8) MULTIEQUAL (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8)]
[ ---  CBRANCH (ram, 0x28e8e0, 1) , (unique, 0x100000d1, 1), (unique, 0x100000d1, 1) BOOL_AND (register, 0x206, 1) , (unique, 0xcd80, 1), (unique, 0xcd80, 1) INT_EQUAL (register, 0x20b, 1) , (register, 0x207, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x30, 4) , (const, 0x0, 4), (register, 0x207, 1) INT_SLESS (unique, 0x10000219, 4) , (const, 0x0, 4), (unique, 0x10000219, 4) CAST (register, 0x30, 4), (register, 0x30, 4) INT_ADD (register, 0x30, 4) , (const, 0x40, 4), (register, 0x20b, 1) INT_SCARRY (register, 0x30, 4) , (const, 0x40, 4), (register, 0x30, 4) SUBPIECE (register, 0x30, 8) , (const, 0x0, 4), (register, 0x30, 8) MULTIEQUAL (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8)]
[ ---  CBRANCH (ram, 0x28e9b0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALLOTHER (const, 0x23a, 4) , (register, 0x1220, 32), (register, 0x1220, 32) CALLOTHER (const, 0x21e, 4) , (register, 0x1200, 32) , (unique, 0x5380, 32), (unique, 0x5380, 32) LOAD (const, 0x1b1, 4) , (register, 0x38, 8)]
[(register, 0x38, 8) MULTIEQUAL (register, 0x38, 8) , (register, 0x38, 8) , (register, 0x38, 8)]
[(register, 0x0, 4) MULTIEQUAL (register, 0x0, 4) , (register, 0x0, 4) , (register, 0x0, 4)]
[(unique, 0xdc900, 4) COPY (const, 0x0, 4)]
[(unique, 0xdc900, 4) MULTIEQUAL (unique, 0xdc900, 4) , (unique, 0xdc900, 4)]
[ ---  CBRANCH (const, 0x5, 1) , (unique, 0xdca80, 1), (unique, 0xdca80, 1) INT_EQUAL (unique, 0xdca00, 4) , (const, 0x0, 4), (unique, 0xdca00, 4) INT_AND (unique, 0xdc980, 4) , (const, 0x1, 4), (unique, 0xdc980, 4) MULTIEQUAL (register, 0x0, 4) , (unique, 0xdc980, 4)]
[(unique, 0xdc900, 4) INT_ADD (unique, 0xdc900, 4) , (const, 0x1, 4)]
[(unique, 0xdc980, 4) INT_OR (unique, 0xdcb80, 4) , (const, 0x80000000, 4), (unique, 0xdcb80, 4) INT_RIGHT (unique, 0xdc980, 4) , (const, 0x1, 4)]
[ ---  BRANCH (const, 0xfffffffa, 1)]
[ ---  CALLOTHER (const, 0x203, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) INT_ADD (unique, 0x10000225, 8) , (unique, 0x10000189, 8), (unique, 0x10000225, 8) CAST (register, 0x38, 8), (unique, 0x10000189, 8) INT_SUB (register, 0x0, 8) , (unique, 0x1000021d, 8), (unique, 0x1000021d, 8) CAST (register, 0x38, 8), (register, 0x0, 8) INT_ZEXT (unique, 0xdc900, 4)]
[ ---  CBRANCH (ram, 0x28e9c0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALLOTHER (const, 0x23a, 4) , (register, 0x1220, 32), (register, 0x1220, 32) CALLOTHER (const, 0x21e, 4) , (register, 0x1200, 32) , (unique, 0x5380, 32), (unique, 0x5380, 32) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x38, 8) , (const, 0x1, 8) , (const, 0x20, 8)]
[(register, 0x38, 8) MULTIEQUAL (register, 0x38, 8) , (register, 0x38, 8) , (register, 0x38, 8)]
[(register, 0x0, 4) MULTIEQUAL (register, 0x0, 4) , (register, 0x0, 4) , (register, 0x0, 4)]
[(unique, 0xdc900, 4) COPY (const, 0x0, 4)]
[(unique, 0xdc900, 4) MULTIEQUAL (unique, 0xdc900, 4) , (unique, 0xdc900, 4)]
[ ---  CBRANCH (const, 0x5, 1) , (unique, 0xdca80, 1), (unique, 0xdca80, 1) INT_EQUAL (unique, 0xdca00, 4) , (const, 0x0, 4), (unique, 0xdca00, 4) INT_AND (unique, 0xdc980, 4) , (const, 0x1, 4), (unique, 0xdc980, 4) MULTIEQUAL (register, 0x0, 4) , (unique, 0xdc980, 4)]
[(unique, 0xdc900, 4) INT_ADD (unique, 0xdc900, 4) , (const, 0x1, 4)]
[(unique, 0xdc980, 4) INT_OR (unique, 0xdcb80, 4) , (const, 0x80000000, 4), (unique, 0xdcb80, 4) INT_RIGHT (unique, 0xdc980, 4) , (const, 0x1, 4)]
[ ---  BRANCH (const, 0xfffffffa, 1)]
[ ---  CALLOTHER (const, 0x203, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) INT_ADD (unique, 0x10000235, 8) , (unique, 0x10000191, 8), (unique, 0x10000235, 8) CAST (register, 0x38, 8), (unique, 0x10000191, 8) INT_SUB (register, 0x0, 8) , (unique, 0x1000022d, 8), (unique, 0x1000022d, 8) CAST (register, 0x38, 8), (register, 0x0, 8) INT_ADD (register, 0x0, 8) , (const, 0x20, 8), (register, 0x0, 8) INT_ZEXT (unique, 0xdc900, 4)]
[ ---  CBRANCH (ram, 0x28e950, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALLOTHER (const, 0x23a, 4) , (register, 0x1220, 32), (register, 0x1220, 32) CALLOTHER (const, 0x21e, 4) , (register, 0x1200, 32) , (unique, 0x5380, 32), (unique, 0x5380, 32) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x38, 8) , (const, 0x2, 8) , (const, 0x20, 8)]
[(unique, 0xdc900, 4) COPY (const, 0x0, 4)]
[(unique, 0xdc900, 4) MULTIEQUAL (unique, 0xdc900, 4) , (unique, 0xdc900, 4)]
[ ---  CBRANCH (const, 0x5, 1) , (unique, 0xdca80, 1), (unique, 0xdca80, 1) INT_EQUAL (unique, 0xdca00, 4) , (const, 0x0, 4), (unique, 0xdca00, 4) INT_AND (unique, 0xdc980, 4) , (const, 0x1, 4), (unique, 0xdc980, 4) MULTIEQUAL (register, 0x0, 4) , (unique, 0xdc980, 4)]
[(unique, 0xdc900, 4) INT_ADD (unique, 0xdc900, 4) , (const, 0x1, 4)]
[(unique, 0xdc980, 4) INT_OR (unique, 0xdcb80, 4) , (const, 0x80000000, 4), (unique, 0xdcb80, 4) INT_RIGHT (unique, 0xdc980, 4) , (const, 0x1, 4)]
[ ---  BRANCH (const, 0xfffffffa, 1)]
[ ---  CBRANCH (ram, 0x28e990, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (register, 0x0, 8) , (register, 0x30, 8), (register, 0x0, 8) INT_ZEXT (unique, 0xdc900, 4)]
[ ---  CALLOTHER (const, 0x203, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) INT_ADD (unique, 0x10000245, 8) , (unique, 0x10000179, 8), (unique, 0x10000245, 8) CAST (register, 0x38, 8), (unique, 0x10000179, 8) INT_SUB (register, 0x0, 8) , (unique, 0x1000023d, 8), (unique, 0x1000023d, 8) CAST (register, 0x38, 8), (register, 0x0, 8) INT_ADD (register, 0x0, 8) , (const, 0x40, 8)]
[(register, 0x30, 8) INT_ZEXT (register, 0x30, 4), (register, 0x30, 4) INT_ADD (register, 0x30, 4) , (const, 0x20, 4)]
[ ---  CBRANCH (ram, 0x28e990, 1) , (unique, 0x100000d4, 1), (unique, 0x100000d4, 1) BOOL_AND (register, 0x206, 1) , (unique, 0xcd80, 1), (unique, 0xcd80, 1) INT_SLESS (const, 0x1f, 4) , (unique, 0x1000024d, 4), (unique, 0x1000024d, 4) CAST (register, 0x30, 4), (register, 0x206, 1) INT_NOTEQUAL (register, 0x30, 4) , (const, 0x0, 4), (register, 0x30, 4) INT_ADD (register, 0x30, 4) , (const, 0x20, 4)]
[ ---  CBRANCH (ram, 0x28e970, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALLOTHER (const, 0x23a, 4) , (register, 0x1220, 32), (register, 0x1220, 32) CALLOTHER (const, 0x21e, 4) , (register, 0x1200, 32) , (unique, 0x5380, 32), (unique, 0x5380, 32) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x38, 8) , (const, 0x3, 8) , (const, 0x20, 8)]
[ ---  CALLOTHER (const, 0x203, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) COPY (register, 0x30, 8)]
[(unique, 0xdc900, 4) COPY (const, 0x0, 4)]
[(unique, 0xdc900, 4) MULTIEQUAL (unique, 0xdc900, 4) , (unique, 0xdc900, 4)]
[ ---  CBRANCH (const, 0x5, 1) , (unique, 0xdca80, 1), (unique, 0xdca80, 1) INT_EQUAL (unique, 0xdca00, 4) , (const, 0x0, 4), (unique, 0xdca00, 4) INT_AND (unique, 0xdc980, 4) , (const, 0x1, 4), (unique, 0xdc980, 4) MULTIEQUAL (register, 0x0, 4) , (unique, 0xdc980, 4)]
[(unique, 0xdc900, 4) INT_ADD (unique, 0xdc900, 4) , (const, 0x1, 4)]
[(unique, 0xdc980, 4) INT_OR (unique, 0xdcb80, 4) , (const, 0x80000000, 4), (unique, 0xdcb80, 4) INT_RIGHT (unique, 0xdc980, 4) , (const, 0x1, 4)]
[ ---  BRANCH (const, 0xfffffffa, 1)]
[ ---  CBRANCH (ram, 0x28e990, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (register, 0x0, 8) , (register, 0x30, 8), (register, 0x0, 8) INT_ZEXT (unique, 0xdc900, 4)]
[ ---  CALLOTHER (const, 0x203, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) INT_ADD (unique, 0x10000259, 8) , (unique, 0x10000181, 8), (unique, 0x10000259, 8) CAST (register, 0x38, 8), (unique, 0x10000181, 8) INT_SUB (register, 0x0, 8) , (unique, 0x10000251, 8), (unique, 0x10000251, 8) CAST (register, 0x38, 8), (register, 0x0, 8) INT_ADD (register, 0x0, 8) , (const, 0x60, 8)]
[(register, 0x30, 8) INT_ZEXT (register, 0x30, 4), (register, 0x30, 4) INT_ADD (register, 0x30, 4) , (const, 0x80, 4)]
[ ---  CBRANCH (ram, 0x28e910, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALLOTHER (const, 0x23a, 4) , (register, 0x1220, 32), (register, 0x1220, 32) CALLOTHER (const, 0x21e, 4) , (register, 0x1200, 32) , (unique, 0x5380, 32), (unique, 0x5380, 32) LOAD (const, 0x1b1, 4) , (register, 0x38, 8)]
[(register, 0x30, 8) INT_ZEXT (register, 0x30, 4), (register, 0x30, 4) INT_ADD (register, 0x30, 4) , (const, 0x60, 4)]
[ ---  CBRANCH (ram, 0x28e990, 1) , (unique, 0x100000d9, 1), (unique, 0x100000d9, 1) BOOL_AND (register, 0x206, 1) , (unique, 0xcd80, 1), (unique, 0xcd80, 1) INT_SLESS (const, 0x1f, 4) , (unique, 0x10000261, 4), (unique, 0x10000261, 4) CAST (register, 0x30, 4), (register, 0x206, 1) INT_NOTEQUAL (register, 0x30, 4) , (const, 0x0, 4), (register, 0x30, 4) INT_ADD (register, 0x30, 4) , (const, 0x60, 4)]
[ ---  CBRANCH (ram, 0x28e930, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALLOTHER (const, 0x23a, 4) , (register, 0x1220, 32), (register, 0x1220, 32) CALLOTHER (const, 0x21e, 4) , (register, 0x1200, 32) , (unique, 0x5380, 32), (unique, 0x5380, 32) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x38, 8) , (const, 0x1, 8) , (const, 0x20, 8)]
[ ---  CALLOTHER (const, 0x203, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) COPY (register, 0x30, 8)]
[(unique, 0xdc900, 4) COPY (const, 0x0, 4)]
[(unique, 0xdc900, 4) MULTIEQUAL (unique, 0xdc900, 4) , (unique, 0xdc900, 4)]
[ ---  CBRANCH (const, 0x5, 1) , (unique, 0xdca80, 1), (unique, 0xdca80, 1) INT_EQUAL (unique, 0xdca00, 4) , (const, 0x0, 4), (unique, 0xdca00, 4) INT_AND (unique, 0xdc980, 4) , (const, 0x1, 4), (unique, 0xdc980, 4) MULTIEQUAL (register, 0x0, 4) , (unique, 0xdc980, 4)]
[(unique, 0xdc900, 4) INT_ADD (unique, 0xdc900, 4) , (const, 0x1, 4)]
[(unique, 0xdc980, 4) INT_OR (unique, 0xdcb80, 4) , (const, 0x80000000, 4), (unique, 0xdcb80, 4) INT_RIGHT (unique, 0xdc980, 4) , (const, 0x1, 4)]
[ ---  BRANCH (const, 0xfffffffa, 1)]
[ ---  CBRANCH (ram, 0x28e990, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (register, 0x0, 8) , (register, 0x30, 8), (register, 0x0, 8) INT_ZEXT (unique, 0xdc900, 4)]
[ ---  CALLOTHER (const, 0x203, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) INT_ADD (unique, 0x1000026d, 8) , (unique, 0x10000171, 8), (unique, 0x1000026d, 8) CAST (register, 0x38, 8), (unique, 0x10000171, 8) INT_SUB (register, 0x0, 8) , (unique, 0x10000265, 8), (unique, 0x10000265, 8) CAST (register, 0x38, 8), (register, 0x0, 8) INT_ADD (register, 0x0, 8) , (const, 0x20, 8)]
[(register, 0x38, 8) MULTIEQUAL (unique, 0x100001b1, 8) , (register, 0x38, 8)]
[(register, 0x30, 8) MULTIEQUAL (unique, 0x100001a9, 8) , (register, 0x30, 8)]
[(register, 0x0, 4) MULTIEQUAL (register, 0x0, 4) , (register, 0x0, 4)]
[(unique, 0xdc900, 4) COPY (const, 0x0, 4)]
[(unique, 0xdc900, 4) MULTIEQUAL (unique, 0xdc900, 4) , (unique, 0xdc900, 4)]
[ ---  CBRANCH (const, 0x5, 1) , (unique, 0xdca80, 1), (unique, 0xdca80, 1) INT_EQUAL (unique, 0xdca00, 4) , (const, 0x0, 4), (unique, 0xdca00, 4) INT_AND (unique, 0xdc980, 4) , (const, 0x1, 4), (unique, 0xdc980, 4) MULTIEQUAL (register, 0x0, 4) , (unique, 0xdc980, 4)]
[(unique, 0xdc900, 4) INT_ADD (unique, 0xdc900, 4) , (const, 0x1, 4)]
[(unique, 0xdc980, 4) INT_OR (unique, 0xdcb80, 4) , (const, 0x80000000, 4), (unique, 0xdcb80, 4) INT_RIGHT (unique, 0xdc980, 4) , (const, 0x1, 4)]
[ ---  BRANCH (const, 0xfffffffa, 1)]
[ ---  CBRANCH (ram, 0x28e990, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (register, 0x0, 8) , (register, 0x30, 8), (register, 0x0, 8) INT_ZEXT (unique, 0xdc900, 4)]
[ ---  CALLOTHER (const, 0x203, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) INT_ADD (unique, 0x1000027d, 8) , (unique, 0x10000169, 8), (unique, 0x1000027d, 8) CAST (register, 0x38, 8), (unique, 0x10000169, 8) INT_SUB (register, 0x0, 8) , (unique, 0x10000275, 8), (unique, 0x10000275, 8) CAST (register, 0x38, 8)]
[ ---  CALLOTHER (const, 0x203, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) COPY (register, 0x30, 8)]
