[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffa98, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffa98, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffa98, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffa98, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffa98, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffa98, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffa98, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffa98, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffa98, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffa98, 8)]
[(stack, 0xfffffffffffffb40, 4) COPY (register, 0x8, 4)]
[(stack, 0xffffffffffffffc0, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10002ea3, 8), (unique, 0x10002ea3, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8)]
[(stack, 0xfffffffffffffb24, 4) COPY (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10002eab, 8), (unique, 0x10002eab, 8) INT_ADD (register, 0x110, 8) , (const, 0xffffffffffffffc0, 8)]
[ ---  CBRANCH (ram, 0x4140c0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) PTRSUB (register, 0x38, 8) , (const, 0xc0, 8)]
[ ---  CBRANCH (ram, 0x413fde, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbc80, 4) , (const, 0xffffffff, 4)]
[(register, 0x88, 8) COPY (const, 0xffffffff, 8)]
[ ---  BRANCH (ram, 0x414327, 1)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x4b, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x4b, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x4b, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x4b, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3200, 8) , (const, 0xffffffff, 4), (unique, 0x3200, 8) PTRSUB (register, 0x38, 8) , (const, 0xc0, 8)]
[(ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[(ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[ ---  CBRANCH (ram, 0x416481, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x100002ed, 4) , (const, 0x0, 4), (unique, 0x100002ed, 4) INT_AND (unique, 0xbc80, 4) , (const, 0x8, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10001bf0, 8), (unique, 0x10001bf0, 8) PTRSUB (register, 0x38, 8) , (const, 0x0, 8)]
[(register, 0x88, 8) COPY (const, 0xffffffff, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10002038, 8) , (register, 0xb8, 4), (unique, 0x10002038, 8) PTRSUB (register, 0x38, 8) , (const, 0x0, 8), (register, 0xb8, 4) INT_OR (unique, 0xbc80, 4) , (const, 0x20, 4)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x3e3, 4), (ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x3e0, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x3e3, 4), (ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x3e0, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x3e3, 4), (ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x3e0, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x3e3, 4), (ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x3e0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x4f00, 8) , (const, 0x9, 4), (unique, 0x4f00, 8) CAST (unique, 0x10002eb3, 8), (unique, 0x10002eb3, 8) INT_ADD (register, 0x110, 8) , (const, 0xffffffffffffffc0, 8)]
[(unique, 0x100027cb, 8) COPY (register, 0x20, 8)]
[ ---  BRANCH (ram, 0x414327, 1)]
[ ---  CBRANCH (ram, 0x416a88, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x30, 8) , (const, 0x0, 8)]
[(register, 0x88, 8) COPY (const, 0xffffffff, 8)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x3d1, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x3d1, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x3d1, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x3d1, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x4f00, 8) , (const, 0x16, 4), (unique, 0x4f00, 8) CAST (unique, 0x10002ebb, 8), (unique, 0x10002ebb, 8) INT_ADD (register, 0x110, 8) , (const, 0xffffffffffffffc0, 8)]
[(unique, 0x100027c3, 8) COPY (register, 0x20, 8)]
[ ---  BRANCH (ram, 0x414327, 1)]
[(register, 0x18, 8) INT_ZEXT (register, 0x18, 4), (register, 0x18, 4) INT_AND (unique, 0xbc80, 4) , (const, 0x2, 4)]
[ ---  CBRANCH (ram, 0x414420, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x18, 4) , (const, 0x0, 4), (register, 0x18, 4) INT_AND (unique, 0xbc80, 4) , (const, 0x2, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x3c9, 4)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x3c9, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x3c9, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x3c9, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x3c9, 4)]
[(stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x3c9, 4)]
[(stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x3c9, 4)]
[(stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x3c9, 4)]
[(stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x3c9, 4)]
[(stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x3c9, 4)]
[(stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x3c9, 4)]
[(stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x3c9, 4)]
[(stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x3c9, 4)]
[(stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x3c9, 4)]
[(stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x3c9, 4)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x3c9, 4)]
[(stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x3c9, 4)]
[(stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x3c9, 4)]
[(stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x3c9, 4)]
[(stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x3c9, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x3c9, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x3c9, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x3c9, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x3c9, 4)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x3c9, 4)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x3c9, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x3c9, 4)]
[(stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x3c9, 4)]
[(stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x3c9, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x3c9, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x3c9, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x3c9, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x3c9, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x3c9, 4)]
[(stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x3c9, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x3c9, 4)]
[(stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x3c9, 4)]
[(stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x3c9, 4)]
[(stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x3c9, 4)]
[(stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x3c9, 4)]
[(stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x3c9, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x3c9, 4)]
[(stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x3c9, 4)]
[(stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x3c9, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x3c9, 4)]
[(stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x3c9, 4)]
[(stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x3c9, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x3c9, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x3c9, 4)]
[(stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x3c9, 4)]
[(stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x3c9, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x3c9, 4)]
[(register, 0x88, 8) INT_ZEXT (register, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x4172d0, 8) , (register, 0x38, 8) , (register, 0x30, 8) , (register, 0x10, 8) , (register, 0x8, 4)]
[(unique, 0x100027bb, 8) COPY (register, 0x20, 8)]
[ ---  BRANCH (ram, 0x414327, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x81, 4)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x81, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x81, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x81, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x81, 4)]
[(stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x81, 4)]
[(stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x81, 4)]
[(stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x81, 4)]
[(stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x81, 4)]
[(stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x81, 4)]
[(stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x81, 4)]
[(stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x81, 4)]
[(stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x81, 4)]
[(stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x81, 4)]
[(stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x81, 4)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x81, 4)]
[(stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x81, 4)]
[(stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x81, 4)]
[(stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x81, 4)]
[(stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x81, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x81, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x81, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x81, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x81, 4)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x81, 4)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x81, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x81, 4)]
[(stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x81, 4)]
[(stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x81, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x81, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x81, 4)]
[(stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x81, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x81, 4)]
[(stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x81, 4)]
[(stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x81, 4)]
[(stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x81, 4)]
[(stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x81, 4)]
[(stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x81, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x81, 4)]
[(stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x81, 4)]
[(stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x81, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x81, 4)]
[(stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x81, 4)]
[(stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x81, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x81, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (unique, 0x10000dab, 8) , (const, 0x81, 4), (unique, 0x10000dab, 8) LOAD (const, 0x1b1, 4) , (register, 0x10, 8)]
[(stack, 0xfffffffffffffbb8, 8) INDIRECT (unique, 0x10000db3, 8) , (const, 0x81, 4), (unique, 0x10000db3, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000dbb, 8), (unique, 0x10000dbb, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[(stack, 0xfffffffffffffbc0, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x81, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x81, 4)]
[(register, 0x0, 8) CAST (unique, 0x10002ec3, 8), (unique, 0x10002ec3, 8) CALL (ram, 0x4010a0, 8) , (register, 0x1200, 8) , (unique, 0x10000dab, 8) , (register, 0x30, 8) , (const, 0x25, 8), (unique, 0x10000dab, 8) LOAD (const, 0x1b1, 4) , (register, 0x10, 8)]
[ ---  CBRANCH (ram, 0x4140d8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xb8, 4) , (const, 0x0, 4), (register, 0xb8, 4) INT_AND (unique, 0xbc80, 4) , (const, 0x8000, 4)]
[(stack, 0xfffffffffffffb44, 4) COPY (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x414440, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4c4fb0, 8) , (const, 0x0, 8)]
[(stack, 0xfffffffffffffb88, 8) PTRSUB (const, 0x0, 8) , (const, 0x470cf0, 8)]
[(unique, 0x10002d8b, 8) COPY (register, 0x38, 8)]
[ ---  BRANCH (ram, 0x414078, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xa4, 4)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0xa4, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0xa4, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0xa4, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0xa4, 4)]
[(stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0xa4, 4)]
[(stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0xa4, 4)]
[(stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0xa4, 4)]
[(stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0xa4, 4)]
[(stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0xa4, 4)]
[(stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0xa4, 4)]
[(stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0xa4, 4)]
[(stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0xa4, 4)]
[(stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0xa4, 4)]
[(stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0xa4, 4)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0xa4, 4)]
[(stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0xa4, 4)]
[(stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0xa4, 4)]
[(stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0xa4, 4)]
[(stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0xa4, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0xa4, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0xa4, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0xa4, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0xa4, 4)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0xa4, 4)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0xa4, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0xa4, 4)]
[(stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0xa4, 4)]
[(stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0xa4, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0xa4, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (register, 0x0, 8) , (const, 0xa4, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0xa4, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (register, 0xb8, 4) , (const, 0xa4, 4)]
[(stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0xa4, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0xa4, 4)]
[(stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0xa4, 4)]
[(stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0xa4, 4)]
[(stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0xa4, 4)]
[(stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0xa4, 4)]
[(stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0xa4, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0xa4, 4)]
[(stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0xa4, 4)]
[(stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0xa4, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0xa4, 4)]
[(stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0xa4, 4)]
[(stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0xa4, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0xa4, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0xa4, 4)]
[(stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0xa4, 4)]
[(stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0xa4, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xa4, 4)]
[ ---  CALL (ram, 0x0, 8) , (unique, 0x3200, 8) , (unique, 0x10001ad0, 8) , (register, 0x38, 8), (unique, 0x10001ad0, 8) PTRSUB (const, 0x0, 8) , (const, 0x470cf0, 8), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffb88, 8)]
[(stack, 0xfffffffffffffb44, 4) COPY (const, 0x1, 4)]
[ ---  CBRANCH (ram, 0x4140e2, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x58e00, 4) , (const, 0x0, 4), (unique, 0x58e00, 4) INT_AND (unique, 0xbd00, 4) , (const, 0x8000, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10001c10, 8), (unique, 0x10001c10, 8) PTRSUB (register, 0x38, 8) , (const, 0x0, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbc0, 8) MULTIEQUAL (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8)]
[(stack, 0xfffffffffffffbb8, 8) MULTIEQUAL (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb90, 8) MULTIEQUAL (stack, 0xfffffffffffffb90, 8) , (unique, 0x10002d8b, 8)]
[(stack, 0xfffffffffffffb88, 8) MULTIEQUAL (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb74, 4) MULTIEQUAL (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4)]
[(stack, 0xfffffffffffffb70, 4) MULTIEQUAL (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4)]
[(stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb64, 4) MULTIEQUAL (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4)]
[(stack, 0xfffffffffffffb62, 2) MULTIEQUAL (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2)]
[(stack, 0xfffffffffffffb60, 2) MULTIEQUAL (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2)]
[(stack, 0xfffffffffffffb5c, 4) MULTIEQUAL (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4)]
[(stack, 0xfffffffffffffb58, 4) MULTIEQUAL (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (register, 0xb8, 4)]
[(stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (register, 0x0, 8)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb24, 4) MULTIEQUAL (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4)]
[(stack, 0xfffffffffffffb20, 4) MULTIEQUAL (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae4, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[(stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffadc, 4) MULTIEQUAL (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4)]
[(stack, 0xfffffffffffffad8, 4) MULTIEQUAL (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4)]
[(stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffac8, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffac0, 8) MULTIEQUAL (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8)]
[(stack, 0xfffffffffffffabc, 4) MULTIEQUAL (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4)]
[(stack, 0xfffffffffffffab8, 4) MULTIEQUAL (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4)]
[(stack, 0xfffffffffffffab4, 4) MULTIEQUAL (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4)]
[(stack, 0xfffffffffffffab3, 1) MULTIEQUAL (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1)]
[(stack, 0xfffffffffffffaac, 4) MULTIEQUAL (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4)]
[(stack, 0xfffffffffffffaa8, 4) MULTIEQUAL (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4)]
[(stack, 0xfffffffffffffaa4, 4) MULTIEQUAL (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4)]
[(stack, 0xfffffffffffffaa0, 4) MULTIEQUAL (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4)]
[(ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[(ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[ ---  CBRANCH (ram, 0x4140b3, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10002edb, 8), (unique, 0x10002edb, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x2, 8) , (const, 0x4, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10002ed3, 8), (unique, 0x10002ed3, 8) INT_ADD (register, 0x110, 8) , (const, 0x10, 8), (unique, 0xbd80, 8) CAST (unique, 0x10002ecb, 8), (unique, 0x10002ecb, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3c80, 8), (unique, 0x3c80, 8) PTRSUB (register, 0x38, 8) , (const, 0x88, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x415dd8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10002ee3, 8), (unique, 0x10002ee3, 8) INT_ADD (register, 0x110, 8) , (const, 0x18, 8)]
[ ---  CALLOTHER (const, 0x11, 4)]
[ ---  CBRANCH (const, 0x5, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0xbd80, 8)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x3af, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x3af, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x3af, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x3af, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0xbd80, 8) , (const, 0x1, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x3b3, 4)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x3b3, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x3b3, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x3b3, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x3b3, 4)]
[(stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x3b3, 4)]
[(stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x3b3, 4)]
[(stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x3b3, 4)]
[(stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x3b3, 4)]
[(stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x3b3, 4)]
[(stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x3b3, 4)]
[(stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x3b3, 4)]
[(stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x3b3, 4)]
[(stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x3b3, 4)]
[(stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x3b3, 4)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x3b3, 4)]
[(stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x3b3, 4)]
[(stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x3b3, 4)]
[(stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x3b3, 4)]
[(stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x3b3, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x3b3, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x3b3, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x3b3, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x3b3, 4)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x3b3, 4)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x3b3, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x3b3, 4)]
[(stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x3b3, 4)]
[(stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x3b3, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x3b3, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x3b3, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x3b3, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x3b3, 4)]
[(stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x3b3, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x3b3, 4)]
[(stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x3b3, 4)]
[(stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x3b3, 4)]
[(stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x3b3, 4)]
[(stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x3b3, 4)]
[(stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x3b3, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x3b3, 4)]
[(stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x3b3, 4)]
[(stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x3b3, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x3b3, 4)]
[(stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x3b3, 4)]
[(stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x3b3, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x3b3, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x3b3, 4)]
[(stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x3b3, 4)]
[(stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x3b3, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x3b3, 4)]
[ ---  CALL (ram, 0x421390, 8)]
[ ---  BRANCH (ram, 0x4140a7, 1)]
[ ---  CBRANCH (const, 0x5, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0xbd80, 8)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0xeb, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0xeb, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0xeb, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0xeb, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0xbd80, 8) , (const, 0x1, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbc0, 8) MULTIEQUAL (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8)]
[(stack, 0xfffffffffffffbb8, 8) MULTIEQUAL (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb90, 8) MULTIEQUAL (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8)]
[(stack, 0xfffffffffffffb88, 8) MULTIEQUAL (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb74, 4) MULTIEQUAL (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4)]
[(stack, 0xfffffffffffffb70, 4) MULTIEQUAL (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4)]
[(stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb64, 4) MULTIEQUAL (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4)]
[(stack, 0xfffffffffffffb62, 2) MULTIEQUAL (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2)]
[(stack, 0xfffffffffffffb60, 2) MULTIEQUAL (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2)]
[(stack, 0xfffffffffffffb5c, 4) MULTIEQUAL (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4)]
[(stack, 0xfffffffffffffb58, 4) MULTIEQUAL (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb24, 4) MULTIEQUAL (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4)]
[(stack, 0xfffffffffffffb20, 4) MULTIEQUAL (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae4, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[(stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffadc, 4) MULTIEQUAL (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4)]
[(stack, 0xfffffffffffffad8, 4) MULTIEQUAL (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4)]
[(stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffac8, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffac0, 8) MULTIEQUAL (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8)]
[(stack, 0xfffffffffffffabc, 4) MULTIEQUAL (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4)]
[(stack, 0xfffffffffffffab8, 4) MULTIEQUAL (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4)]
[(stack, 0xfffffffffffffab4, 4) MULTIEQUAL (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4)]
[(stack, 0xfffffffffffffab3, 1) MULTIEQUAL (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1)]
[(stack, 0xfffffffffffffaac, 4) MULTIEQUAL (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4)]
[(stack, 0xfffffffffffffaa8, 4) MULTIEQUAL (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4)]
[(stack, 0xfffffffffffffaa4, 4) MULTIEQUAL (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4)]
[(stack, 0xfffffffffffffaa0, 4) MULTIEQUAL (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0xf1, 4), (ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0xf1, 4), (ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0xf1, 4), (ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0xf1, 4), (ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10002ef3, 8) , (unique, 0xbd80, 8), (unique, 0x10002ef3, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x2, 8) , (const, 0x4, 8), (unique, 0xbd80, 8) CAST (unique, 0x10002eeb, 8), (unique, 0x10002eeb, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3c80, 8), (unique, 0x3c80, 8) PTRSUB (register, 0x38, 8) , (const, 0x88, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbc0, 8) MULTIEQUAL (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8)]
[(stack, 0xfffffffffffffbb8, 8) MULTIEQUAL (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb90, 8) MULTIEQUAL (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8)]
[(stack, 0xfffffffffffffb88, 8) MULTIEQUAL (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb74, 4) MULTIEQUAL (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4)]
[(stack, 0xfffffffffffffb70, 4) MULTIEQUAL (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4)]
[(stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb64, 4) MULTIEQUAL (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4)]
[(stack, 0xfffffffffffffb62, 2) MULTIEQUAL (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2)]
[(stack, 0xfffffffffffffb60, 2) MULTIEQUAL (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2)]
[(stack, 0xfffffffffffffb5c, 4) MULTIEQUAL (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4)]
[(stack, 0xfffffffffffffb58, 4) MULTIEQUAL (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb24, 4) MULTIEQUAL (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4)]
[(stack, 0xfffffffffffffb20, 4) MULTIEQUAL (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae4, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[(stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffadc, 4) MULTIEQUAL (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4)]
[(stack, 0xfffffffffffffad8, 4) MULTIEQUAL (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4)]
[(stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffac8, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffac0, 8) MULTIEQUAL (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8)]
[(stack, 0xfffffffffffffabc, 4) MULTIEQUAL (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4)]
[(stack, 0xfffffffffffffab8, 4) MULTIEQUAL (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4)]
[(stack, 0xfffffffffffffab4, 4) MULTIEQUAL (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4)]
[(stack, 0xfffffffffffffab3, 1) MULTIEQUAL (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1)]
[(stack, 0xfffffffffffffaac, 4) MULTIEQUAL (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4)]
[(stack, 0xfffffffffffffaa8, 4) MULTIEQUAL (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4)]
[(stack, 0xfffffffffffffaa4, 4) MULTIEQUAL (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4)]
[(stack, 0xfffffffffffffaa0, 4) MULTIEQUAL (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0xf9, 4), (ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0xf9, 4), (ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0xf9, 4), (ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0xf9, 4), (ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0xbd00, 4), (unique, 0xbd00, 4) INT_ADD (unique, 0xbd00, 4) , (const, 0x1, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x38, 8) , (const, 0x1, 8) , (const, 0x4, 8), (register, 0x38, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8)]
[ ---  BRANCH (ram, 0x4140e2, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbc0, 8) MULTIEQUAL (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8)]
[(stack, 0xfffffffffffffbb8, 8) MULTIEQUAL (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb90, 8) MULTIEQUAL (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8)]
[(stack, 0xfffffffffffffb88, 8) MULTIEQUAL (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb74, 4) MULTIEQUAL (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4)]
[(stack, 0xfffffffffffffb70, 4) MULTIEQUAL (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4)]
[(stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb64, 4) MULTIEQUAL (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4)]
[(stack, 0xfffffffffffffb62, 2) MULTIEQUAL (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2)]
[(stack, 0xfffffffffffffb60, 2) MULTIEQUAL (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2)]
[(stack, 0xfffffffffffffb5c, 4) MULTIEQUAL (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4)]
[(stack, 0xfffffffffffffb58, 4) MULTIEQUAL (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (register, 0x0, 8)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb24, 4) MULTIEQUAL (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4)]
[(stack, 0xfffffffffffffb20, 4) MULTIEQUAL (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae4, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[(stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffadc, 4) MULTIEQUAL (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4)]
[(stack, 0xfffffffffffffad8, 4) MULTIEQUAL (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4)]
[(stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffac8, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffac0, 8) MULTIEQUAL (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8)]
[(stack, 0xfffffffffffffabc, 4) MULTIEQUAL (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4)]
[(stack, 0xfffffffffffffab8, 4) MULTIEQUAL (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4)]
[(stack, 0xfffffffffffffab4, 4) MULTIEQUAL (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4)]
[(stack, 0xfffffffffffffab3, 1) MULTIEQUAL (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1)]
[(stack, 0xfffffffffffffaac, 4) MULTIEQUAL (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4)]
[(stack, 0xfffffffffffffaa8, 4) MULTIEQUAL (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4)]
[(stack, 0xfffffffffffffaa4, 4) MULTIEQUAL (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4)]
[(stack, 0xfffffffffffffaa0, 4) MULTIEQUAL (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4)]
[(ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[(ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(stack, 0xfffffffffffffb28, 8) COPY (const, 0x6a8, 8)]
[(unique, 0x10002643, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10002efb, 8), (unique, 0x10002efb, 8) CAST (unique, 0x3c80, 8), (unique, 0x3c80, 8) PTRADD (register, 0x38, 8) , (const, 0x1, 8) , (const, 0xd8, 8)]
[ ---  CBRANCH (ram, 0x414460, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (const, 0x6a7, 8) , (register, 0x10, 8), (register, 0x10, 8) PTRADD (unique, 0xbd80, 8) , (const, 0xfffffffffff67294, 8) , (const, 0x8, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10002efb, 8), (unique, 0x10002efb, 8) CAST (unique, 0x3c80, 8), (unique, 0x3c80, 8) PTRADD (register, 0x38, 8) , (const, 0x1, 8) , (const, 0xd8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x38b, 4)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x38b, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x38b, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x38b, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x38b, 4)]
[(stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x38b, 4)]
[(stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x38b, 4)]
[(stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x38b, 4)]
[(stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x38b, 4)]
[(stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x38b, 4)]
[(stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x38b, 4)]
[(stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x38b, 4)]
[(stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x38b, 4)]
[(stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x38b, 4)]
[(stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x38b, 4)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x38b, 4)]
[(stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x38b, 4)]
[(stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x38b, 4)]
[(stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x38b, 4)]
[(stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x38b, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x38b, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x38b, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x38b, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x38b, 4)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x38b, 4)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x38b, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x38b, 4)]
[(stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x38b, 4)]
[(stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x38b, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x38b, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x38b, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x38b, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x38b, 4)]
[(stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x38b, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x38b, 4)]
[(stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x38b, 4)]
[(stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x38b, 4)]
[(stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x38b, 4)]
[(stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x38b, 4)]
[(stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x38b, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x38b, 4)]
[(stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x38b, 4)]
[(stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x38b, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x38b, 4)]
[(stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x38b, 4)]
[(stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x38b, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x38b, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x38b, 4)]
[(stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x38b, 4)]
[(stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x38b, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x38b, 4)]
[ ---  CALL (ram, 0x41b380, 8)]
[(unique, 0x1000264b, 8) COPY (stack, 0xfffffffffffffb30, 8), (stack, 0xfffffffffffffb30, 8) INDIRECT (unique, 0x10002d83, 8) , (const, 0x38b, 4), (unique, 0x10002d83, 8) COPY (unique, 0xbd80, 8)]
[ ---  BRANCH (ram, 0x414112, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x13c, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x13c, 4), (ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x13c, 4), (ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x13c, 4), (ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x13c, 4), (ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[(stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x13c, 4), (stack, 0xfffffffffffffaa0, 4) MULTIEQUAL (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4)]
[(stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x13c, 4), (stack, 0xfffffffffffffaa4, 4) MULTIEQUAL (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4)]
[(stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x13c, 4), (stack, 0xfffffffffffffaa8, 4) MULTIEQUAL (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4)]
[(stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x13c, 4), (stack, 0xfffffffffffffaac, 4) MULTIEQUAL (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4)]
[(stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x13c, 4), (stack, 0xfffffffffffffab3, 1) MULTIEQUAL (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1)]
[(stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x13c, 4), (stack, 0xfffffffffffffab4, 4) MULTIEQUAL (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4)]
[(stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x13c, 4), (stack, 0xfffffffffffffab8, 4) MULTIEQUAL (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4)]
[(stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x13c, 4), (stack, 0xfffffffffffffabc, 4) MULTIEQUAL (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4)]
[(stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x13c, 4), (stack, 0xfffffffffffffac0, 8) MULTIEQUAL (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8)]
[(stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x13c, 4), (stack, 0xfffffffffffffac8, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x13c, 4), (stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x13c, 4), (stack, 0xfffffffffffffad8, 4) MULTIEQUAL (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4)]
[(stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x13c, 4), (stack, 0xfffffffffffffadc, 4) MULTIEQUAL (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4)]
[(stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x13c, 4), (stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x13c, 4), (stack, 0xfffffffffffffae4, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x13c, 4), (stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x13c, 4), (stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x13c, 4), (stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x13c, 4), (stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x13c, 4), (stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x13c, 4), (stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x13c, 4), (stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x13c, 4), (stack, 0xfffffffffffffb20, 4) MULTIEQUAL (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4)]
[(stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x13c, 4), (stack, 0xfffffffffffffb24, 4) MULTIEQUAL (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x13c, 4), (stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x13c, 4), (stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x13c, 4), (stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x13c, 4), (stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x13c, 4), (stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x13c, 4), (stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x13c, 4), (stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x13c, 4), (stack, 0xfffffffffffffb58, 4) MULTIEQUAL (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4)]
[(stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x13c, 4), (stack, 0xfffffffffffffb5c, 4) MULTIEQUAL (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4)]
[(stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x13c, 4), (stack, 0xfffffffffffffb60, 2) MULTIEQUAL (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2)]
[(stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x13c, 4), (stack, 0xfffffffffffffb62, 2) MULTIEQUAL (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2)]
[(stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x13c, 4), (stack, 0xfffffffffffffb64, 4) MULTIEQUAL (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x13c, 4), (stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x13c, 4), (stack, 0xfffffffffffffb70, 4) MULTIEQUAL (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4)]
[(stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x13c, 4), (stack, 0xfffffffffffffb74, 4) MULTIEQUAL (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x13c, 4), (stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x13c, 4), (stack, 0xfffffffffffffb88, 8) MULTIEQUAL (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8)]
[(stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x13c, 4), (stack, 0xfffffffffffffb90, 8) MULTIEQUAL (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x13c, 4), (stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x13c, 4), (stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x13c, 4), (stack, 0xfffffffffffffbb8, 8) MULTIEQUAL (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8)]
[(stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x13c, 4), (stack, 0xfffffffffffffbc0, 8) MULTIEQUAL (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x13c, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CBRANCH (ram, 0x4143b0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xb8, 8) , (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10002f0b, 8), (unique, 0x10002f0b, 8) CALLIND (unique, 0x10002f03, 8) , (register, 0x38, 8) , (register, 0x30, 8) , (register, 0xb8, 8), (unique, 0x10002f03, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x7, 8) , (const, 0x8, 8), (register, 0xb8, 8) PTRADD (stack, 0xfffffffffffffb38, 8) , (unique, 0x10000331, 8) , (const, 0x1, 8), (unique, 0x10000331, 8) INT_2COMP (register, 0x30, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x10002643, 8) , (unique, 0x1000264b, 8), (stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(unique, 0x10002773, 8) COPY (register, 0x20, 8)]
[(unique, 0x10002d4b, 4) COPY (stack, 0xfffffffffffffabc, 4)]
[ ---  CBRANCH (ram, 0x414480, 1) , (unique, 0xd080, 1), (unique, 0xd080, 1) INT_SLESS (unique, 0x10002f13, 8) , (const, 0x80000000, 8), (unique, 0x10002f13, 8) CAST (register, 0xb8, 8)]
[(register, 0x88, 8) INT_AND (unique, 0x10002f1b, 8) , (const, 0xffffffff, 8), (unique, 0x10002f1b, 8) CAST (register, 0xb8, 8)]
[(unique, 0x10002783, 8) COPY (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x4142f8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffac0, 8) COPY (ram, 0x4c8948, 8)]
[ ---  CBRANCH (ram, 0x415e78, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4c8948, 8) , (const, 0x0, 8)]
[(stack, 0xfffffffffffffab8, 4) COPY (const, 0x0, 4)]
[(stack, 0xfffffffffffffac0, 8) COPY (const, 0x0, 8)]
[(stack, 0xfffffffffffffad0, 8) COPY (const, 0xffffffffffffffff, 8)]
[(unique, 0x100027a3, 8) COPY (register, 0x20, 8)]
[ ---  BRANCH (ram, 0x4142a5, 1)]
[ ---  CBRANCH (ram, 0x414290, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4c8950, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x414290, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4c8970, 8) , (const, 0x0, 8)]
[(stack, 0xfffffffffffffab8, 4) COPY (const, 0x0, 4)]
[(stack, 0xfffffffffffffae4, 4) COPY (const, 0x0, 4)]
[(stack, 0xfffffffffffffad0, 8) COPY (const, 0xffffffffffffffff, 8)]
[(stack, 0xfffffffffffffaa8, 4) COPY (register, 0x30, 4), (register, 0x30, 4) INT_AND (stack, 0xfffffffffffffb40, 4) , (const, 0x2, 4)]
[(stack, 0xfffffffffffffaac, 4) COPY (register, 0x0, 4), (register, 0x0, 4) INT_AND (stack, 0xfffffffffffffb40, 4) , (const, 0x8, 4)]
[(stack, 0xfffffffffffffab3, 1) COPY (register, 0x30, 1), (register, 0x30, 1) INT_AND (unique, 0x10000da5, 1) , (const, 0x1, 1), (unique, 0x10000da5, 1) SUBPIECE (stack, 0xfffffffffffffb40, 4) , (const, 0x0, 4)]
[(unique, 0x1000276b, 8) COPY (stack, 0xfffffffffffffb38, 8)]
[(unique, 0x1000277b, 8) COPY (register, 0x20, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbc0, 8) MULTIEQUAL (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8)]
[(stack, 0xfffffffffffffbb8, 8) MULTIEQUAL (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb90, 8) MULTIEQUAL (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8)]
[(stack, 0xfffffffffffffb88, 8) MULTIEQUAL (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb74, 4) MULTIEQUAL (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4)]
[(stack, 0xfffffffffffffb70, 4) MULTIEQUAL (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4)]
[(stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb64, 4) MULTIEQUAL (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4)]
[(stack, 0xfffffffffffffb62, 2) MULTIEQUAL (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2)]
[(stack, 0xfffffffffffffb60, 2) MULTIEQUAL (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2)]
[(stack, 0xfffffffffffffb5c, 4) MULTIEQUAL (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4)]
[(stack, 0xfffffffffffffb58, 4) MULTIEQUAL (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb24, 4) MULTIEQUAL (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4)]
[(stack, 0xfffffffffffffb20, 4) MULTIEQUAL (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4)]
[(stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae4, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[(stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffadc, 4) MULTIEQUAL (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4)]
[(stack, 0xfffffffffffffad8, 4) MULTIEQUAL (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4)]
[(stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffac8, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffac0, 8) MULTIEQUAL (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8)]
[(stack, 0xfffffffffffffabc, 4) MULTIEQUAL (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4)]
[(stack, 0xfffffffffffffab8, 4) MULTIEQUAL (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4)]
[(stack, 0xfffffffffffffab4, 4) MULTIEQUAL (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4)]
[(stack, 0xfffffffffffffab3, 1) MULTIEQUAL (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1)]
[(stack, 0xfffffffffffffaac, 4) MULTIEQUAL (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4)]
[(stack, 0xfffffffffffffaa8, 4) MULTIEQUAL (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4)]
[(stack, 0xfffffffffffffaa4, 4) MULTIEQUAL (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4)]
[(stack, 0xfffffffffffffaa0, 4) MULTIEQUAL (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4)]
[(ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[(ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x20, 8) MULTIEQUAL (unique, 0x1000277b, 8) , (register, 0x20, 8)]
[(register, 0x88, 4) SUBPIECE (register, 0x88, 8) , (const, 0x0, 4), (register, 0x88, 8) MULTIEQUAL (register, 0x88, 8) , (register, 0x88, 8)]
[ ---  CBRANCH (ram, 0x414410, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (const, 0x5a, 1) , (unique, 0x10002f23, 1), (unique, 0x10002f23, 1) CAST (register, 0x0, 1), (register, 0x0, 1) INT_SUB (unique, 0xbb00, 1) , (const, 0x20, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x1, 8) , (const, 0x1, 8), (register, 0x18, 8) MULTIEQUAL (unique, 0x1000276b, 8) , (register, 0x0, 8)]
[(stack, 0xfffffffffffffb18, 8) COPY (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x414378, 1)]
[(register, 0x90, 4) COPY (const, 0x0, 4)]
[(register, 0x90, 4) COPY (const, 0x0, 4)]
[(register, 0x90, 4) COPY (const, 0x0, 4)]
[(register, 0x90, 4) COPY (const, 0x0, 4)]
[(register, 0x90, 4) COPY (const, 0x0, 4)]
[(register, 0x98, 4) COPY (const, 0x0, 4)]
[(register, 0x98, 4) COPY (const, 0x0, 4)]
[(register, 0x98, 4) COPY (const, 0x0, 4)]
[(register, 0x80, 8) COPY (const, 0xffffffff, 8)]
[(register, 0x80, 4) COPY (const, 0xffffffff, 4)]
[(stack, 0xfffffffffffffb30, 8) COPY (unique, 0x10002f24, 8), (unique, 0x10002f24, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[(register, 0x18, 8) PTRSUB (const, 0x0, 8) , (const, 0x49aae0, 8)]
[(stack, 0xfffffffffffffad8, 4) COPY (const, 0x0, 4)]
[(unique, 0x1000252f, 4) COPY (stack, 0xfffffffffffffabc, 4), (stack, 0xfffffffffffffabc, 4) COPY (const, 0x0, 4)]
[(stack, 0xfffffffffffffb10, 8) CAST (unique, 0x10002f34, 8), (unique, 0x10002f34, 8) INT_AND (unique, 0x10002f2c, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10002f2c, 8) CAST (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffaf8, 8) CAST (unique, 0x10002f44, 8), (unique, 0x10002f44, 8) INT_AND (unique, 0x10002f3c, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10002f3c, 8) CAST (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffac8, 8) CAST (unique, 0x10002f54, 8), (unique, 0x10002f54, 8) INT_AND (unique, 0x10002f4c, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10002f4c, 8) CAST (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffb20, 4) COPY (const, 0x0, 4)]
[(stack, 0xfffffffffffffb08, 8) CAST (unique, 0x10002f64, 8), (unique, 0x10002f64, 8) INT_AND (unique, 0x10002f5c, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10002f5c, 8) CAST (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffae0, 4) COPY (const, 0x0, 4)]
[(stack, 0xfffffffffffffadc, 4) COPY (const, 0x0, 4)]
[(stack, 0xfffffffffffffb18, 8) COPY (const, 0x0, 8)]
[(stack, 0xfffffffffffffaf0, 8) CAST (unique, 0x10002f73, 8), (unique, 0x10002f73, 8) INT_ADD (unique, 0x1000234f, 8) , (const, 0x20, 1), (unique, 0x1000234f, 8) INT_LEFT (unique, 0x10002347, 8) , (const, 0x8, 8), (unique, 0x10002347, 8) INT_SEXT (unique, 0x10002f6c, 7), (unique, 0x10002f6c, 7) CAST (stack, 0xfffffffffffffaf1, 7), (stack, 0xfffffffffffffaf1, 7) SUBPIECE (stack, 0xfffffffffffffaf0, 8) , (const, 0x1, 8)]
[(stack, 0xfffffffffffffb00, 8) COPY (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffc0, 8)]
[(unique, 0x100029cb, 4) COPY (register, 0x90, 4), (register, 0x90, 4) COPY (const, 0x0, 4)]
[(unique, 0x100029fb, 4) COPY (register, 0x90, 4), (register, 0x90, 4) COPY (const, 0x0, 4)]
[(unique, 0x10002a2f, 4) COPY (register, 0x90, 4), (register, 0x90, 4) COPY (const, 0x0, 4)]
[(unique, 0x10002a5f, 4) COPY (register, 0x98, 4), (register, 0x98, 4) COPY (const, 0x0, 4)]
[(unique, 0x10002a8b, 4) COPY (register, 0x98, 4), (register, 0x98, 4) COPY (const, 0x0, 4)]
[(unique, 0x10002af7, 4) COPY (register, 0x90, 4), (register, 0x90, 4) COPY (const, 0x0, 4)]
[(unique, 0x10002b2b, 4) COPY (unique, 0x10002acf, 4), (unique, 0x10002acf, 4) COPY (register, 0x90, 4), (register, 0x90, 4) COPY (const, 0x0, 4)]
[(unique, 0x10002ba7, 4) COPY (unique, 0x10002acf, 4), (unique, 0x10002acf, 4) COPY (register, 0x90, 4), (register, 0x90, 4) COPY (const, 0x0, 4)]
[(unique, 0x10002bcb, 4) COPY (unique, 0x10002acf, 4), (unique, 0x10002acf, 4) COPY (register, 0x90, 4), (register, 0x90, 4) COPY (const, 0x0, 4)]
[(unique, 0x10002c0f, 4) COPY (unique, 0x10002acf, 4), (unique, 0x10002acf, 4) COPY (register, 0x90, 4), (register, 0x90, 4) COPY (const, 0x0, 4)]
[(unique, 0x10002c7b, 4) COPY (unique, 0x10002acf, 4), (unique, 0x10002acf, 4) COPY (register, 0x90, 4), (register, 0x90, 4) COPY (const, 0x0, 4)]
[(unique, 0x10002d07, 4) COPY (unique, 0x10002ce3, 4), (unique, 0x10002ce3, 4) COPY (register, 0x98, 4), (register, 0x98, 4) COPY (const, 0x0, 4)]
[(unique, 0x10002d9b, 4) COPY (register, 0x88, 4)]
[(unique, 0x10002deb, 4) COPY (register, 0x80, 4), (register, 0x80, 4) COPY (const, 0xffffffff, 4)]
[ ---  BRANCHIND (unique, 0xbb00, 1)]
[(stack, 0xfffffffffffffb20, 4) MULTIEQUAL (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffadc, 4) MULTIEQUAL (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4)]
[(stack, 0xfffffffffffffad8, 4) MULTIEQUAL (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4)]
[(stack, 0xfffffffffffffb30, 8) COPY (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10002f93, 8), (unique, 0x10002f93, 8) INT_ADD (unique, 0x10002f8b, 8) , (const, 0x1, 8), (unique, 0x10002f8b, 8) CAST (stack, 0xfffffffffffffb30, 8), (stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffae0, 4) COPY (const, 0x1, 4)]
[(unique, 0x100029f3, 4) COPY (register, 0x90, 4)]
[(unique, 0x10002a23, 4) COPY (register, 0x90, 4)]
[(unique, 0x10002a57, 4) COPY (register, 0x90, 4)]
[(unique, 0x10002a87, 4) COPY (register, 0x98, 4)]
[(unique, 0x10002ab3, 4) COPY (register, 0x98, 4)]
[(unique, 0x10002b53, 4) COPY (unique, 0x10002aef, 4), (unique, 0x10002aef, 4) COPY (register, 0x90, 4)]
[(unique, 0x10002ba3, 4) COPY (unique, 0x10002b23, 4), (unique, 0x10002b23, 4) COPY (register, 0x90, 4)]
[(unique, 0x10002bc3, 4) COPY (unique, 0x10002aef, 4), (unique, 0x10002aef, 4) COPY (register, 0x90, 4)]
[(unique, 0x10002be7, 4) COPY (unique, 0x10002aef, 4), (unique, 0x10002aef, 4) COPY (register, 0x90, 4)]
[(unique, 0x10002c07, 4) COPY (unique, 0x10002aef, 4), (unique, 0x10002aef, 4) COPY (register, 0x90, 4)]
[(unique, 0x10002c2b, 4) COPY (unique, 0x10002aef, 4), (unique, 0x10002aef, 4) COPY (register, 0x90, 4)]
[(unique, 0x10002c5f, 4) COPY (unique, 0x10002b23, 4), (unique, 0x10002b23, 4) COPY (register, 0x90, 4)]
[(unique, 0x10002ca3, 4) COPY (unique, 0x10002aef, 4), (unique, 0x10002aef, 4) COPY (register, 0x90, 4)]
[(unique, 0x10002cdb, 4) COPY (unique, 0x10002b23, 4), (unique, 0x10002b23, 4) COPY (register, 0x90, 4)]
[(unique, 0x10002d23, 4) COPY (unique, 0x10002cff, 4), (unique, 0x10002cff, 4) COPY (register, 0x98, 4)]
[(unique, 0x10002e13, 4) COPY (register, 0x80, 4)]
[ ---  BRANCHIND (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10002f83, 8), (unique, 0x10002f83, 8) INT_ADD (unique, 0x10002f7b, 8) , (const, 0x1, 8), (unique, 0x10002f7b, 8) CAST (stack, 0xfffffffffffffb30, 8), (stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb20, 4) MULTIEQUAL (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffad8, 4) MULTIEQUAL (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4)]
[(stack, 0xfffffffffffffb30, 8) COPY (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10002fb3, 8), (unique, 0x10002fb3, 8) INT_ADD (unique, 0x10002fab, 8) , (const, 0x1, 8), (unique, 0x10002fab, 8) CAST (stack, 0xfffffffffffffb30, 8), (stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffadc, 4) COPY (const, 0x1, 4)]
[(unique, 0x100029ef, 4) COPY (register, 0x90, 4)]
[(unique, 0x10002a1f, 4) COPY (register, 0x90, 4)]
[(unique, 0x10002a53, 4) COPY (register, 0x90, 4)]
[(unique, 0x10002a83, 4) COPY (register, 0x98, 4)]
[(unique, 0x10002aaf, 4) COPY (register, 0x98, 4)]
[(unique, 0x10002b4f, 4) COPY (unique, 0x10002aeb, 4), (unique, 0x10002aeb, 4) COPY (register, 0x90, 4)]
[(unique, 0x10002b9f, 4) COPY (unique, 0x10002b1f, 4), (unique, 0x10002b1f, 4) COPY (register, 0x90, 4)]
[(unique, 0x10002bbf, 4) COPY (unique, 0x10002aeb, 4), (unique, 0x10002aeb, 4) COPY (register, 0x90, 4)]
[(unique, 0x10002be3, 4) COPY (unique, 0x10002aeb, 4), (unique, 0x10002aeb, 4) COPY (register, 0x90, 4)]
[(unique, 0x10002c03, 4) COPY (unique, 0x10002aeb, 4), (unique, 0x10002aeb, 4) COPY (register, 0x90, 4)]
[(unique, 0x10002c27, 4) COPY (unique, 0x10002aeb, 4), (unique, 0x10002aeb, 4) COPY (register, 0x90, 4)]
[(unique, 0x10002c5b, 4) COPY (unique, 0x10002b1f, 4), (unique, 0x10002b1f, 4) COPY (register, 0x90, 4)]
[(unique, 0x10002c9f, 4) COPY (unique, 0x10002aeb, 4), (unique, 0x10002aeb, 4) COPY (register, 0x90, 4)]
[(unique, 0x10002cd7, 4) COPY (unique, 0x10002b1f, 4), (unique, 0x10002b1f, 4) COPY (register, 0x90, 4)]
[(unique, 0x10002d1f, 4) COPY (unique, 0x10002cfb, 4), (unique, 0x10002cfb, 4) COPY (register, 0x98, 4)]
[(unique, 0x10002e0f, 4) COPY (register, 0x80, 4)]
[ ---  BRANCHIND (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10002fa3, 8), (unique, 0x10002fa3, 8) INT_ADD (unique, 0x10002f9b, 8) , (const, 0x1, 8), (unique, 0x10002f9b, 8) CAST (stack, 0xfffffffffffffb30, 8), (stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffadc, 4) MULTIEQUAL (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4)]
[(stack, 0xfffffffffffffad8, 4) MULTIEQUAL (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4)]
[(stack, 0xfffffffffffffb30, 8) COPY (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10002fd3, 8), (unique, 0x10002fd3, 8) INT_ADD (unique, 0x10002fcb, 8) , (const, 0x1, 8), (unique, 0x10002fcb, 8) CAST (stack, 0xfffffffffffffb30, 8), (stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb20, 4) COPY (const, 0x1, 4)]
[(unique, 0x100029eb, 4) COPY (register, 0x90, 4)]
[(unique, 0x10002a1b, 4) COPY (register, 0x90, 4)]
[(unique, 0x10002a4f, 4) COPY (register, 0x90, 4)]
[(unique, 0x10002a7f, 4) COPY (register, 0x98, 4)]
[(unique, 0x10002aab, 4) COPY (register, 0x98, 4)]
[(unique, 0x10002b4b, 4) COPY (unique, 0x10002ae7, 4), (unique, 0x10002ae7, 4) COPY (register, 0x90, 4)]
[(unique, 0x10002b9b, 4) COPY (unique, 0x10002b1b, 4), (unique, 0x10002b1b, 4) COPY (register, 0x90, 4)]
[(unique, 0x10002bbb, 4) COPY (unique, 0x10002ae7, 4), (unique, 0x10002ae7, 4) COPY (register, 0x90, 4)]
[(unique, 0x10002bdf, 4) COPY (unique, 0x10002ae7, 4), (unique, 0x10002ae7, 4) COPY (register, 0x90, 4)]
[(unique, 0x10002bff, 4) COPY (unique, 0x10002ae7, 4), (unique, 0x10002ae7, 4) COPY (register, 0x90, 4)]
[(unique, 0x10002c23, 4) COPY (unique, 0x10002ae7, 4), (unique, 0x10002ae7, 4) COPY (register, 0x90, 4)]
[(unique, 0x10002c57, 4) COPY (unique, 0x10002b1b, 4), (unique, 0x10002b1b, 4) COPY (register, 0x90, 4)]
[(unique, 0x10002c9b, 4) COPY (unique, 0x10002ae7, 4), (unique, 0x10002ae7, 4) COPY (register, 0x90, 4)]
[(unique, 0x10002cd3, 4) COPY (unique, 0x10002b1b, 4), (unique, 0x10002b1b, 4) COPY (register, 0x90, 4)]
[(unique, 0x10002d1b, 4) COPY (unique, 0x10002cf7, 4), (unique, 0x10002cf7, 4) COPY (register, 0x98, 4)]
[(unique, 0x10002e0b, 4) COPY (register, 0x80, 4)]
[ ---  BRANCHIND (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10002fc3, 8), (unique, 0x10002fc3, 8) INT_ADD (unique, 0x10002fbb, 8) , (const, 0x1, 8), (unique, 0x10002fbb, 8) CAST (stack, 0xfffffffffffffb30, 8), (stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb20, 4) MULTIEQUAL (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4)]
[(stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffadc, 4) MULTIEQUAL (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4)]
[(stack, 0xfffffffffffffad8, 4) MULTIEQUAL (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4)]
[(stack, 0xfffffffffffffb30, 8) COPY (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10002ff3, 8), (unique, 0x10002ff3, 8) INT_ADD (unique, 0x10002feb, 8) , (const, 0x1, 8), (unique, 0x10002feb, 8) CAST (stack, 0xfffffffffffffb30, 8), (stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffaf0, 8) CAST (unique, 0x10003002, 8), (unique, 0x10003002, 8) INT_ADD (unique, 0x10002417, 8) , (const, 0x20, 1), (unique, 0x10002417, 8) INT_LEFT (unique, 0x1000240f, 8) , (const, 0x8, 8), (unique, 0x1000240f, 8) INT_SEXT (unique, 0x10002ffb, 7), (unique, 0x10002ffb, 7) CAST (stack, 0xfffffffffffffaf1, 7), (stack, 0xfffffffffffffaf1, 7) SUBPIECE (stack, 0xfffffffffffffaf0, 8) , (const, 0x1, 8), (stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffb08, 8) CAST (unique, 0x1000300e, 8), (unique, 0x1000300e, 8) INT_ADD (unique, 0x10002427, 8) , (const, 0x1, 4), (unique, 0x10002427, 8) INT_LEFT (unique, 0x1000241f, 8) , (const, 0x20, 8), (unique, 0x1000241f, 8) INT_SEXT (unique, 0x1000300a, 4), (unique, 0x1000300a, 4) CAST (stack, 0xfffffffffffffb0c, 4), (stack, 0xfffffffffffffb0c, 4) SUBPIECE (stack, 0xfffffffffffffb08, 8) , (const, 0x4, 8), (stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(unique, 0x100029e7, 4) COPY (register, 0x90, 4)]
[(unique, 0x10002a17, 4) COPY (register, 0x90, 4)]
[(unique, 0x10002a4b, 4) COPY (register, 0x90, 4)]
[(unique, 0x10002a7b, 4) COPY (register, 0x98, 4)]
[(unique, 0x10002aa7, 4) COPY (register, 0x98, 4)]
[(unique, 0x10002b47, 4) COPY (unique, 0x10002ae3, 4), (unique, 0x10002ae3, 4) COPY (register, 0x90, 4)]
[(unique, 0x10002b97, 4) COPY (unique, 0x10002b17, 4), (unique, 0x10002b17, 4) COPY (register, 0x90, 4)]
[(unique, 0x10002bb7, 4) COPY (unique, 0x10002ae3, 4), (unique, 0x10002ae3, 4) COPY (register, 0x90, 4)]
[(unique, 0x10002bdb, 4) COPY (unique, 0x10002ae3, 4), (unique, 0x10002ae3, 4) COPY (register, 0x90, 4)]
[(unique, 0x10002bfb, 4) COPY (unique, 0x10002ae3, 4), (unique, 0x10002ae3, 4) COPY (register, 0x90, 4)]
[(unique, 0x10002c1f, 4) COPY (unique, 0x10002ae3, 4), (unique, 0x10002ae3, 4) COPY (register, 0x90, 4)]
[(unique, 0x10002c53, 4) COPY (unique, 0x10002b17, 4), (unique, 0x10002b17, 4) COPY (register, 0x90, 4)]
[(unique, 0x10002c97, 4) COPY (unique, 0x10002ae3, 4), (unique, 0x10002ae3, 4) COPY (register, 0x90, 4)]
[(unique, 0x10002ccf, 4) COPY (unique, 0x10002b17, 4), (unique, 0x10002b17, 4) COPY (register, 0x90, 4)]
[(unique, 0x10002d17, 4) COPY (unique, 0x10002cf3, 4), (unique, 0x10002cf3, 4) COPY (register, 0x98, 4)]
[(unique, 0x10002e07, 4) COPY (register, 0x80, 4)]
[ ---  BRANCHIND (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10002fe3, 8), (unique, 0x10002fe3, 8) INT_ADD (unique, 0x10002fdb, 8) , (const, 0x1, 8), (unique, 0x10002fdb, 8) CAST (stack, 0xfffffffffffffb30, 8), (stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb20, 4) MULTIEQUAL (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4)]
[(stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffadc, 4) MULTIEQUAL (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4)]
[(stack, 0xfffffffffffffad8, 4) MULTIEQUAL (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4)]
[(stack, 0xfffffffffffffaf0, 1) SUBPIECE (stack, 0xfffffffffffffaf0, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[ ---  CBRANCH (ram, 0x414d2b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xfffffffffffffb08, 4) , (const, 0x0, 4), (stack, 0xfffffffffffffb08, 4) SUBPIECE (stack, 0xfffffffffffffb08, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(register, 0x30, 1) COPY (const, 0x30, 1)]
[(stack, 0xfffffffffffffaf0, 8) CAST (unique, 0x1000301e, 8), (unique, 0x1000301e, 8) INT_OR (unique, 0x10000fb0, 8) , (unique, 0x10000fb8, 8), (unique, 0x10000fb8, 8) INT_ZEXT (register, 0x30, 1), (unique, 0x10000fb0, 8) INT_AND (unique, 0x10003016, 8) , (const, 0xffffffffffffff00, 8), (unique, 0x10003016, 8) CAST (stack, 0xfffffffffffffaf0, 8), (register, 0x30, 1) MULTIEQUAL (stack, 0xfffffffffffffaf0, 1) , (register, 0x30, 1)]
[(stack, 0xfffffffffffffb30, 8) COPY (register, 0x30, 8), (register, 0x30, 8) CAST (unique, 0x1000303e, 8), (unique, 0x1000303e, 8) INT_ADD (unique, 0x10003036, 8) , (const, 0x1, 8), (unique, 0x10003036, 8) CAST (stack, 0xfffffffffffffb30, 8)]
[(unique, 0x100029df, 4) COPY (register, 0x90, 4)]
[(unique, 0x10002a0f, 4) COPY (register, 0x90, 4)]
[(unique, 0x10002a43, 4) COPY (register, 0x90, 4)]
[(unique, 0x10002a73, 4) COPY (register, 0x98, 4)]
[(unique, 0x10002a9f, 4) COPY (register, 0x98, 4)]
[(unique, 0x10002b3f, 4) COPY (unique, 0x10002adb, 4), (unique, 0x10002adb, 4) COPY (register, 0x90, 4)]
[(unique, 0x10002b8f, 4) COPY (unique, 0x10002b0f, 4), (unique, 0x10002b0f, 4) COPY (register, 0x90, 4)]
[(unique, 0x10002baf, 4) COPY (unique, 0x10002adb, 4), (unique, 0x10002adb, 4) COPY (register, 0x90, 4)]
[(unique, 0x10002bd3, 4) COPY (unique, 0x10002adb, 4), (unique, 0x10002adb, 4) COPY (register, 0x90, 4)]
[(unique, 0x10002bf3, 4) COPY (unique, 0x10002adb, 4), (unique, 0x10002adb, 4) COPY (register, 0x90, 4)]
[(unique, 0x10002c17, 4) COPY (unique, 0x10002adb, 4), (unique, 0x10002adb, 4) COPY (register, 0x90, 4)]
[(unique, 0x10002c4b, 4) COPY (unique, 0x10002b0f, 4), (unique, 0x10002b0f, 4) COPY (register, 0x90, 4)]
[(unique, 0x10002c8f, 4) COPY (unique, 0x10002adb, 4), (unique, 0x10002adb, 4) COPY (register, 0x90, 4)]
[(unique, 0x10002cc7, 4) COPY (unique, 0x10002b0f, 4), (unique, 0x10002b0f, 4) COPY (register, 0x90, 4)]
[(unique, 0x10002d0f, 4) COPY (unique, 0x10002ceb, 4), (unique, 0x10002ceb, 4) COPY (register, 0x98, 4)]
[(unique, 0x10002dff, 4) COPY (register, 0x80, 4)]
[ ---  BRANCHIND (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000302e, 8), (unique, 0x1000302e, 8) INT_ADD (unique, 0x10003026, 8) , (const, 0x1, 8), (unique, 0x10003026, 8) CAST (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb20, 4) MULTIEQUAL (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffadc, 4) MULTIEQUAL (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4)]
[(stack, 0xfffffffffffffb30, 8) COPY (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000305e, 8), (unique, 0x1000305e, 8) INT_ADD (unique, 0x10003056, 8) , (const, 0x1, 8), (unique, 0x10003056, 8) CAST (stack, 0xfffffffffffffb30, 8), (stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffad8, 4) COPY (const, 0x1, 4)]
[(unique, 0x100029db, 4) COPY (register, 0x90, 4)]
[(unique, 0x10002a0b, 4) COPY (register, 0x90, 4)]
[(unique, 0x10002a3f, 4) COPY (register, 0x90, 4)]
[(unique, 0x10002a6f, 4) COPY (register, 0x98, 4)]
[(unique, 0x10002a9b, 4) COPY (register, 0x98, 4)]
[(unique, 0x10002b3b, 4) COPY (unique, 0x10002ad7, 4), (unique, 0x10002ad7, 4) COPY (register, 0x90, 4)]
[(unique, 0x10002b8b, 4) COPY (unique, 0x10002b0b, 4), (unique, 0x10002b0b, 4) COPY (register, 0x90, 4)]
[(unique, 0x10002bab, 4) COPY (unique, 0x10002ad7, 4), (unique, 0x10002ad7, 4) COPY (register, 0x90, 4)]
[(unique, 0x10002bcf, 4) COPY (unique, 0x10002ad7, 4), (unique, 0x10002ad7, 4) COPY (register, 0x90, 4)]
[(unique, 0x10002bef, 4) COPY (unique, 0x10002ad7, 4), (unique, 0x10002ad7, 4) COPY (register, 0x90, 4)]
[(unique, 0x10002c13, 4) COPY (unique, 0x10002ad7, 4), (unique, 0x10002ad7, 4) COPY (register, 0x90, 4)]
[(unique, 0x10002c47, 4) COPY (unique, 0x10002b0b, 4), (unique, 0x10002b0b, 4) COPY (register, 0x90, 4)]
[(unique, 0x10002c8b, 4) COPY (unique, 0x10002ad7, 4), (unique, 0x10002ad7, 4) COPY (register, 0x90, 4)]
[(unique, 0x10002cc3, 4) COPY (unique, 0x10002b0b, 4), (unique, 0x10002b0b, 4) COPY (register, 0x90, 4)]
[(unique, 0x10002d0b, 4) COPY (unique, 0x10002ce7, 4), (unique, 0x10002ce7, 4) COPY (register, 0x98, 4)]
[(unique, 0x10002dfb, 4) COPY (register, 0x80, 4)]
[ ---  BRANCHIND (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000304e, 8), (unique, 0x1000304e, 8) INT_ADD (unique, 0x10003046, 8) , (const, 0x1, 8), (unique, 0x10003046, 8) CAST (stack, 0xfffffffffffffb30, 8), (stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb20, 4) MULTIEQUAL (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffadc, 4) MULTIEQUAL (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4)]
[(stack, 0xfffffffffffffad8, 4) MULTIEQUAL (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4)]
[(register, 0x90, 4) INT_SUB (unique, 0x10000528, 4) , (const, 0x30, 4), (unique, 0x10000528, 4) INT_ZEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x10003076, 8), (unique, 0x10003076, 8) CAST (stack, 0xfffffffffffffb30, 8), (stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(unique, 0x1000262b, 8) COPY (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10003086, 8), (unique, 0x10003086, 8) INT_ADD (unique, 0x1000307e, 8) , (const, 0x1, 8), (unique, 0x1000307e, 8) CAST (stack, 0xfffffffffffffb30, 8), (stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(unique, 0x1000297b, 4) COPY (register, 0x10, 4), (register, 0x10, 4) INT_SUB (register, 0x10, 4) , (const, 0x30, 4), (register, 0x10, 4) INT_ZEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000306e, 8), (unique, 0x1000306e, 8) INT_ADD (unique, 0x10003066, 8) , (const, 0x1, 8), (unique, 0x10003066, 8) CAST (stack, 0xfffffffffffffb30, 8), (stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[ ---  CBRANCH (ram, 0x41497c, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (register, 0x10, 4) , (const, 0xa, 4), (register, 0x10, 4) INT_SUB (register, 0x10, 4) , (const, 0x30, 4), (register, 0x10, 4) INT_ZEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000306e, 8), (unique, 0x1000306e, 8) INT_ADD (unique, 0x10003066, 8) , (const, 0x1, 8), (unique, 0x10003066, 8) CAST (stack, 0xfffffffffffffb30, 8), (stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(register, 0x10, 4) MULTIEQUAL (unique, 0x1000297b, 4) , (unique, 0x1000297f, 4) , (unique, 0x10002983, 4)]
[(unique, 0x3100, 8) CAST (unique, 0x100030a6, 8), (unique, 0x100030a6, 8) INT_ADD (unique, 0x1000309e, 8) , (const, 0x1, 8), (unique, 0x1000309e, 8) CAST (register, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x1000262b, 8) , (unique, 0x10002633, 8) , (unique, 0x1000263b, 8)]
[(register, 0x8, 4) INT_SUB (register, 0x8, 4) , (const, 0x30, 4), (register, 0x8, 4) INT_ZEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10003096, 8), (unique, 0x10003096, 8) INT_ADD (unique, 0x1000308e, 8) , (const, 0x1, 8), (unique, 0x1000308e, 8) CAST (register, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x1000262b, 8) , (unique, 0x10002633, 8) , (unique, 0x1000263b, 8)]
[ ---  CBRANCH (ram, 0x41496e, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (const, 0xffffffff, 4) , (unique, 0x100030ae, 4), (unique, 0x100030ae, 4) CAST (register, 0x90, 4), (register, 0x90, 4) MULTIEQUAL (register, 0x90, 4) , (register, 0x90, 4) , (register, 0x90, 4)]
[ ---  CBRANCH (ram, 0x414958, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (const, 0xccccccc, 4) , (unique, 0x100030b2, 4), (unique, 0x100030b2, 4) CAST (register, 0x90, 4)]
[ ---  CBRANCH (ram, 0x414998, 1) , (unique, 0xd080, 1), (unique, 0xd080, 1) INT_SLESS (unique, 0x100030b6, 4) , (unique, 0x100030ba, 4), (unique, 0x100030ba, 4) CAST (unique, 0x10000cda, 4), (unique, 0x100030b6, 4) CAST (register, 0x38, 4), (register, 0x38, 4) INT_SUB (const, 0x7fffffff, 4) , (register, 0x10, 4), (unique, 0x10000cda, 4) INT_MULT (register, 0x90, 4) , (const, 0xa, 4)]
[ ---  CBRANCH (ram, 0x414e98, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (const, 0x9, 4) , (register, 0x8, 4)]
[(unique, 0x3100, 8) CAST (unique, 0x100030d6, 8), (unique, 0x100030d6, 8) INT_ADD (unique, 0x100030ce, 8) , (const, 0x2, 8), (unique, 0x100030ce, 8) CAST (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x414e98, 1) , (unique, 0xc900, 1), (unique, 0xc900, 1) INT_LESS (const, 0x9, 4) , (register, 0x10, 4), (register, 0x10, 4) INT_SUB (register, 0x10, 4) , (const, 0x30, 4), (register, 0x10, 4) INT_ZEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100030c6, 8), (unique, 0x100030c6, 8) INT_ADD (unique, 0x100030be, 8) , (const, 0x2, 8), (unique, 0x100030be, 8) CAST (register, 0x0, 8)]
[(register, 0x90, 4) COPY (const, 0xffffffff, 4)]
[(unique, 0x10002633, 8) COPY (unique, 0x3100, 8)]
[(unique, 0x1000297f, 4) COPY (register, 0x10, 4)]
[ ---  BRANCH (ram, 0x414979, 1)]
[(register, 0x90, 4) INT_ADD (unique, 0x10000cda, 4) , (register, 0x10, 4)]
[(register, 0x90, 4) MULTIEQUAL (register, 0x90, 4) , (register, 0x90, 4)]
[(unique, 0x1000263b, 8) COPY (unique, 0x3100, 8)]
[(unique, 0x10002983, 4) COPY (register, 0x8, 4)]
[ ---  CBRANCH (ram, 0x415cd8, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (register, 0x8, 4) , (const, 0xa, 4)]
[(stack, 0xfffffffffffffb30, 8) COPY (unique, 0x3100, 8)]
[ ---  CBRANCH (ram, 0x414e98, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (const, 0x7fffffde, 4) , (register, 0x90, 4)]
[(unique, 0x10002e2b, 4) COPY (register, 0x88, 4)]
[ ---  CBRANCH (ram, 0x415dba, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (const, 0x3c7, 4) , (unique, 0x100030de, 4), (unique, 0x100030de, 4) CAST (register, 0x90, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100030fe, 8) , (const, 0x415d2b, 8), (unique, 0x100030fe, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x2261, 4)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x2261, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x2261, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x2261, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x2261, 4)]
[(stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x2261, 4), (stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x2260, 4), (stack, 0xfffffffffffffaa4, 4) COPY (const, 0xffffffff, 4)]
[(stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x2261, 4), (stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x2260, 4)]
[(stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x2261, 4), (stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x2260, 4)]
[(stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x2261, 4), (stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x2260, 4)]
[(stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x2261, 4), (stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x2260, 4)]
[(stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x2261, 4), (stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x2260, 4)]
[(stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x2261, 4), (stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x2260, 4)]
[(stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x2261, 4), (stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x2260, 4)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x2261, 4), (stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x2260, 4)]
[(stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x2261, 4), (stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x2260, 4)]
[(stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x2261, 4), (stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x2260, 4)]
[(stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x2261, 4), (stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x2260, 4)]
[(stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x2261, 4), (stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x2260, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x2261, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x2260, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x2261, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x2260, 4)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x2261, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x2260, 4)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x2261, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x2260, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x2261, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x2260, 4)]
[(stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x2261, 4), (stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x2260, 4)]
[(stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x2261, 4), (stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x2260, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x2261, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x2260, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x2261, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x2260, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x2261, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x2260, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x2261, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x2260, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x2261, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x2260, 4)]
[(stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x2261, 4), (stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x2260, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x2261, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x2260, 4)]
[(stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x2261, 4), (stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x2260, 4)]
[(stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x2261, 4), (stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x2260, 4)]
[(stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x2261, 4), (stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x2260, 4)]
[(stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x2261, 4), (stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x2260, 4)]
[(stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x2261, 4), (stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x2260, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x2261, 4), (stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x2260, 4)]
[(stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x2261, 4), (stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x2260, 4)]
[(stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x2261, 4), (stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x2260, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x2261, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x2260, 4)]
[(stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x2261, 4), (stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x2260, 4)]
[(stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x2261, 4), (stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x2260, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x2261, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x2260, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x2261, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x2260, 4)]
[(stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x2261, 4), (stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x2260, 4)]
[(stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x2261, 4), (stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x2260, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2261, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2260, 4)]
[(unique, 0x10002587, 8) COPY (stack, 0xfffffffffffffb00, 8), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x2261, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x2260, 4), (stack, 0xfffffffffffffb00, 8) COPY (register, 0x10, 8), (register, 0x10, 8) CAST (unique, 0x100030e6, 8), (unique, 0x100030e6, 8) INT_ADD (register, 0x10, 8) , (const, 0x20, 8), (register, 0x10, 8) INT_SEXT (unique, 0x100030e2, 4), (unique, 0x100030e2, 4) CAST (register, 0x90, 4)]
[(unique, 0x10002527, 4) COPY (stack, 0xfffffffffffffab4, 4), (stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x2261, 4), (stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x2260, 4), (stack, 0xfffffffffffffab4, 4) COPY (const, 0x0, 4)]
[(unique, 0x1000251f, 4) COPY (stack, 0xfffffffffffffaa0, 4), (stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x2261, 4), (stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x2260, 4), (stack, 0xfffffffffffffaa0, 4) COPY (register, 0x88, 4)]
[(stack, 0xfffffffffffffae8, 4) SUBPIECE (stack, 0xfffffffffffffae8, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x2261, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x2260, 4), (stack, 0xfffffffffffffae8, 8) CAST (unique, 0x100030f6, 8), (unique, 0x100030f6, 8) INT_OR (unique, 0x100011bd, 8) , (unique, 0x100011c5, 8), (unique, 0x100011c5, 8) INT_ZEXT (register, 0x90, 4), (unique, 0x100011bd, 8) INT_AND (unique, 0x100030ee, 8) , (const, 0xffffffff00000000, 8), (unique, 0x100030ee, 8) CAST (stack, 0xfffffffffffffae8, 8)]
[ ---  CBRANCH (ram, 0x415d5f, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x421340, 8) , (register, 0x10, 8), (register, 0x10, 8) CAST (unique, 0x100030e6, 8), (unique, 0x100030e6, 8) INT_ADD (register, 0x10, 8) , (const, 0x20, 8), (register, 0x10, 8) INT_SEXT (unique, 0x100030e2, 4), (unique, 0x100030e2, 4) CAST (register, 0x90, 4)]
[ ---  CBRANCH (ram, 0x4171b5, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (const, 0x1000, 8) , (stack, 0xfffffffffffffb00, 8)]
[(register, 0x30, 8) PTRADD (register, 0x20, 8) , (unique, 0x100008e4, 8) , (const, 0x1, 8), (unique, 0x100008e4, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (unique, 0x10003116, 8) , (const, 0xfffffffffffff000, 8), (unique, 0x10003116, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000310e, 8), (unique, 0x1000310e, 8) INT_ADD (unique, 0x10003106, 8) , (const, 0x17, 8), (unique, 0x10003106, 8) CAST (stack, 0xfffffffffffffb00, 8)]
[(unique, 0x10000904, 4) SUBPIECE (unique, 0x3100, 8) , (const, 0x0, 4), (unique, 0x3100, 8) CAST (unique, 0x1000310e, 8), (unique, 0x1000310e, 8) INT_ADD (unique, 0x10003106, 8) , (const, 0x17, 8), (unique, 0x10003106, 8) CAST (stack, 0xfffffffffffffb00, 8)]
[(unique, 0x10002e3f, 8) COPY (register, 0x20, 8)]
[(unique, 0x1000163e, 4) MULTIEQUAL (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4)]
[(unique, 0x10001642, 4) MULTIEQUAL (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4)]
[(unique, 0x10001646, 4) MULTIEQUAL (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4)]
[(unique, 0x1000164a, 4) MULTIEQUAL (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4)]
[(unique, 0x1000164e, 1) MULTIEQUAL (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1)]
[(unique, 0x1000164f, 4) MULTIEQUAL (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4)]
[(unique, 0x10001653, 4) MULTIEQUAL (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4)]
[(unique, 0x10001657, 4) MULTIEQUAL (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4)]
[(unique, 0x1000165b, 8) MULTIEQUAL (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8)]
[(unique, 0x10001663, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(unique, 0x1000166b, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(unique, 0x10001673, 4) MULTIEQUAL (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4)]
[(unique, 0x10001677, 4) MULTIEQUAL (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4)]
[(unique, 0x1000167b, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(unique, 0x1000167f, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[(unique, 0x10001683, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(unique, 0x1000168b, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(unique, 0x10001693, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(unique, 0x1000169b, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(unique, 0x100016a3, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(unique, 0x100016ab, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(unique, 0x100016b3, 4) MULTIEQUAL (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4)]
[(unique, 0x100016b7, 4) MULTIEQUAL (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4)]
[(unique, 0x100016bb, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(unique, 0x100016c3, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(unique, 0x100016cb, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(unique, 0x100016d3, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(unique, 0x100016d7, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(unique, 0x100016db, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(unique, 0x100016e3, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(unique, 0x100016eb, 4) MULTIEQUAL (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4)]
[(unique, 0x100016ef, 4) MULTIEQUAL (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4)]
[(unique, 0x100016f3, 2) MULTIEQUAL (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2)]
[(unique, 0x100016f5, 2) MULTIEQUAL (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2)]
[(unique, 0x100016f7, 4) MULTIEQUAL (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4)]
[(unique, 0x100016fb, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(unique, 0x10001703, 4) MULTIEQUAL (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4)]
[(unique, 0x10001707, 4) MULTIEQUAL (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4)]
[(unique, 0x1000170b, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(unique, 0x1000170f, 8) MULTIEQUAL (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8)]
[(unique, 0x10001717, 8) MULTIEQUAL (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8)]
[(unique, 0x1000171f, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(unique, 0x10001727, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(unique, 0x1000172f, 8) MULTIEQUAL (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8)]
[(unique, 0x10001737, 8) MULTIEQUAL (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8)]
[(unique, 0x1000173f, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CBRANCH (ram, 0x415d93, 1) , (unique, 0x10001625, 1), (unique, 0x10001625, 1) INT_NOTEQUAL (register, 0x20, 8) , (register, 0x30, 8), (register, 0x20, 8) MULTIEQUAL (unique, 0x10002e3f, 8) , (register, 0x20, 8)]
[(stack, 0xfffffffffffffaa0, 4) INDIRECT (unique, 0x1000163e, 4) , (const, 0x22c4, 4)]
[(stack, 0xfffffffffffffaa4, 4) INDIRECT (unique, 0x10001642, 4) , (const, 0x22c4, 4)]
[(stack, 0xfffffffffffffaa8, 4) INDIRECT (unique, 0x10001646, 4) , (const, 0x22c4, 4)]
[(stack, 0xfffffffffffffaac, 4) INDIRECT (unique, 0x1000164a, 4) , (const, 0x22c4, 4)]
[(stack, 0xfffffffffffffab3, 1) INDIRECT (unique, 0x1000164e, 1) , (const, 0x22c4, 4)]
[(stack, 0xfffffffffffffab4, 4) INDIRECT (unique, 0x1000164f, 4) , (const, 0x22c4, 4)]
[(stack, 0xfffffffffffffab8, 4) INDIRECT (unique, 0x10001653, 4) , (const, 0x22c4, 4)]
[(stack, 0xfffffffffffffabc, 4) INDIRECT (unique, 0x10001657, 4) , (const, 0x22c4, 4)]
[(stack, 0xfffffffffffffac0, 8) INDIRECT (unique, 0x1000165b, 8) , (const, 0x22c4, 4)]
[(stack, 0xfffffffffffffac8, 8) INDIRECT (unique, 0x10001663, 8) , (const, 0x22c4, 4)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (unique, 0x1000166b, 8) , (const, 0x22c4, 4)]
[(stack, 0xfffffffffffffad8, 4) INDIRECT (unique, 0x10001673, 4) , (const, 0x22c4, 4)]
[(stack, 0xfffffffffffffadc, 4) INDIRECT (unique, 0x10001677, 4) , (const, 0x22c4, 4)]
[(stack, 0xfffffffffffffae0, 4) INDIRECT (unique, 0x1000167b, 4) , (const, 0x22c4, 4)]
[(stack, 0xfffffffffffffae4, 4) INDIRECT (unique, 0x1000167f, 4) , (const, 0x22c4, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (unique, 0x10001683, 8) , (const, 0x22c4, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (unique, 0x1000168b, 8) , (const, 0x22c4, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (unique, 0x10001693, 8) , (const, 0x22c4, 4)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (unique, 0x1000169b, 8) , (const, 0x22c4, 4)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (unique, 0x100016a3, 8) , (const, 0x22c4, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (unique, 0x100016ab, 8) , (const, 0x22c4, 4)]
[(stack, 0xfffffffffffffb20, 4) INDIRECT (unique, 0x100016b3, 4) , (const, 0x22c4, 4)]
[(stack, 0xfffffffffffffb24, 4) INDIRECT (unique, 0x100016b7, 4) , (const, 0x22c4, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (unique, 0x100016bb, 8) , (const, 0x22c4, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (unique, 0x100016c3, 8) , (const, 0x22c4, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (unique, 0x100016cb, 8) , (const, 0x22c4, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (unique, 0x100016d3, 4) , (const, 0x22c4, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (unique, 0x100016d7, 4) , (const, 0x22c4, 4)]
[(stack, 0xfffffffffffffb48, 8) INDIRECT (unique, 0x100016db, 8) , (const, 0x22c4, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (unique, 0x100016e3, 8) , (const, 0x22c4, 4)]
[(stack, 0xfffffffffffffb58, 4) INDIRECT (unique, 0x100016eb, 4) , (const, 0x22c4, 4)]
[(stack, 0xfffffffffffffb5c, 4) INDIRECT (unique, 0x100016ef, 4) , (const, 0x22c4, 4)]
[(stack, 0xfffffffffffffb60, 2) INDIRECT (unique, 0x100016f3, 2) , (const, 0x22c4, 4)]
[(stack, 0xfffffffffffffb62, 2) INDIRECT (unique, 0x100016f5, 2) , (const, 0x22c4, 4)]
[(stack, 0xfffffffffffffb64, 4) INDIRECT (unique, 0x100016f7, 4) , (const, 0x22c4, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (unique, 0x100016fb, 8) , (const, 0x22c4, 4)]
[(stack, 0xfffffffffffffb70, 4) INDIRECT (unique, 0x10001703, 4) , (const, 0x22c4, 4)]
[(stack, 0xfffffffffffffb74, 4) INDIRECT (unique, 0x10001707, 4) , (const, 0x22c4, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (unique, 0x1000170b, 4) , (const, 0x22c4, 4)]
[(stack, 0xfffffffffffffb88, 8) INDIRECT (unique, 0x1000170f, 8) , (const, 0x22c4, 4)]
[(stack, 0xfffffffffffffb90, 8) INDIRECT (unique, 0x10001717, 8) , (const, 0x22c4, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (unique, 0x1000171f, 8) , (const, 0x22c4, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (unique, 0x10001727, 8) , (const, 0x22c4, 4)]
[(stack, 0xfffffffffffffbb8, 8) INDIRECT (unique, 0x1000172f, 8) , (const, 0x22c4, 4)]
[(stack, 0xfffffffffffffbc0, 8) INDIRECT (unique, 0x10001737, 8) , (const, 0x22c4, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (unique, 0x1000173f, 8) , (const, 0x22c4, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10003126, 8) , (unique, 0xbe00, 8), (unique, 0x10003126, 8) CAST (unique, 0x3c80, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x1000311e, 8), (unique, 0x1000311e, 8) CAST (unique, 0x3c80, 8), (unique, 0x3c80, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffff000, 8) , (const, 0x1, 8)]
[(register, 0x20, 8) PTRADD (register, 0x20, 8) , (unique, 0x1000090c, 8) , (const, 0x1, 8), (unique, 0x1000090c, 8) INT_2COMP (register, 0x8, 8), (register, 0x8, 8) INT_ZEXT (register, 0x8, 4), (register, 0x8, 4) INT_AND (unique, 0x10000904, 4) , (const, 0xff0, 4)]
[ ---  CBRANCH (ram, 0x415da7, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x8, 8) , (const, 0x0, 8), (register, 0x8, 8) INT_ZEXT (register, 0x8, 4), (register, 0x8, 4) INT_AND (unique, 0x10000904, 4) , (const, 0xff0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10003136, 8) , (unique, 0xbe00, 8), (unique, 0x10003136, 8) CAST (unique, 0x3880, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x1000312e, 8), (unique, 0x1000312e, 8) CAST (unique, 0x3880, 8), (unique, 0x3880, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(stack, 0xfffffffffffffb00, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x1000314e, 8), (unique, 0x1000314e, 8) INT_ADD (register, 0x0, 8) , (unique, 0x10003146, 8), (unique, 0x10003146, 8) CAST (stack, 0xfffffffffffffb00, 8), (register, 0x0, 8) INT_AND (unique, 0x1000313e, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x1000313e, 8) CAST (unique, 0x3800, 8), (unique, 0x3800, 8) PTRADD (register, 0x20, 8) , (unique, 0x10001ec8, 8) , (const, 0x1, 8), (unique, 0x10001ec8, 8) INT_ADD (unique, 0x1000090c, 8) , (const, 0xf, 8)]
[(unique, 0x10002e2f, 4) COPY (unique, 0x1000251f, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10003166, 8) , (const, 0x4171cb, 8), (unique, 0x10003166, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x2327, 4)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x2327, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x2327, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x2327, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x2327, 4)]
[(stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x2327, 4), (stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x2326, 4)]
[(stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x2327, 4), (stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x2326, 4)]
[(stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x2327, 4), (stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x2326, 4)]
[(stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x2327, 4), (stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x2326, 4)]
[(stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x2327, 4), (stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x2326, 4)]
[(stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x2327, 4), (stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x2326, 4), (stack, 0xfffffffffffffab4, 4) COPY (stack, 0xfffffffffffffae8, 4)]
[(stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x2327, 4), (stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x2326, 4)]
[(stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x2327, 4), (stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x2326, 4)]
[(stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x2327, 4), (stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x2326, 4)]
[(stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x2327, 4), (stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x2326, 4)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x2327, 4), (stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x2326, 4)]
[(stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x2327, 4), (stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x2326, 4)]
[(stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x2327, 4), (stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x2326, 4)]
[(stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x2327, 4), (stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x2326, 4)]
[(stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x2327, 4), (stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x2326, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x2327, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x2326, 4), (stack, 0xfffffffffffffae8, 8) CAST (unique, 0x1000315e, 8), (unique, 0x1000315e, 8) INT_OR (unique, 0x100015a1, 8) , (unique, 0x100015a9, 8), (unique, 0x100015a9, 8) INT_ZEXT (unique, 0x10002527, 4), (unique, 0x100015a1, 8) INT_AND (unique, 0x10003156, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10003156, 8) CAST (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x2327, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x2326, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x2327, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x2326, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x2327, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x2326, 4)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x2327, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x2326, 4)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x2327, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x2326, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x2327, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x2326, 4)]
[(stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x2327, 4), (stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x2326, 4)]
[(stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x2327, 4), (stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x2326, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x2327, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x2326, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x2327, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x2326, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x2327, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x2326, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x2327, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x2326, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x2327, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x2326, 4)]
[(stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x2327, 4), (stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x2326, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x2327, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x2326, 4)]
[(stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x2327, 4), (stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x2326, 4)]
[(stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x2327, 4), (stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x2326, 4)]
[(stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x2327, 4), (stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x2326, 4)]
[(stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x2327, 4), (stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x2326, 4)]
[(stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x2327, 4), (stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x2326, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x2327, 4), (stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x2326, 4)]
[(stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x2327, 4), (stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x2326, 4)]
[(stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x2327, 4), (stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x2326, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x2327, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x2326, 4)]
[(stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x2327, 4), (stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x2326, 4)]
[(stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x2327, 4), (stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x2326, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x2327, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x2326, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x2327, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x2326, 4)]
[(stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x2327, 4), (stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x2326, 4)]
[(stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x2327, 4), (stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x2326, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2327, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2326, 4)]
[(stack, 0xfffffffffffffb18, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x426550, 8) , (unique, 0x1000316e, 8), (unique, 0x1000316e, 8) CAST (unique, 0x10002587, 8)]
[ ---  CBRANCH (ram, 0x4143b0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x426550, 8) , (unique, 0x1000316e, 8), (unique, 0x1000316e, 8) CAST (unique, 0x10002587, 8)]
[(stack, 0xfffffffffffffb00, 8) COPY (register, 0x10, 8), (register, 0x10, 8) CAST (unique, 0x10003186, 8), (unique, 0x10003186, 8) INT_ADD (unique, 0x10003176, 8) , (unique, 0x1000317e, 8), (unique, 0x1000317e, 8) CAST (register, 0x0, 8), (unique, 0x10003176, 8) CAST (stack, 0xfffffffffffffb00, 8)]
[(unique, 0x10002e33, 4) COPY (stack, 0xfffffffffffffaa0, 4)]
[ ---  BRANCH (ram, 0x415dba, 1)]
[ ---  CBRANCH (ram, 0x414e98, 1) , (unique, 0xc900, 1), (unique, 0xc900, 1) INT_LESS (const, 0x7fffffde, 4) , (register, 0x90, 4)]
[(stack, 0xfffffffffffffb30, 8) COPY (unique, 0x3100, 8)]
[(unique, 0x10002e27, 4) COPY (register, 0x88, 4)]
[ ---  BRANCH (ram, 0x415dba, 1)]
[(register, 0x88, 4) MULTIEQUAL (unique, 0x10002e27, 4) , (unique, 0x10002e2b, 4) , (unique, 0x10002e2f, 4) , (unique, 0x10002e33, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (unique, 0x1000173f, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbc0, 8) MULTIEQUAL (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (unique, 0x10001737, 8) , (stack, 0xfffffffffffffbc0, 8)]
[(stack, 0xfffffffffffffbb8, 8) MULTIEQUAL (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (unique, 0x1000172f, 8) , (stack, 0xfffffffffffffbb8, 8)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (unique, 0x10001727, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (unique, 0x1000171f, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb90, 8) MULTIEQUAL (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (unique, 0x10001717, 8) , (stack, 0xfffffffffffffb90, 8)]
[(stack, 0xfffffffffffffb88, 8) MULTIEQUAL (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (unique, 0x1000170f, 8) , (stack, 0xfffffffffffffb88, 8)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (unique, 0x1000170b, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb74, 4) MULTIEQUAL (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (unique, 0x10001707, 4) , (stack, 0xfffffffffffffb74, 4)]
[(stack, 0xfffffffffffffb70, 4) MULTIEQUAL (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (unique, 0x10001703, 4) , (stack, 0xfffffffffffffb70, 4)]
[(stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (unique, 0x100016fb, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb64, 4) MULTIEQUAL (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (unique, 0x100016f7, 4) , (stack, 0xfffffffffffffb64, 4)]
[(stack, 0xfffffffffffffb62, 2) MULTIEQUAL (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (unique, 0x100016f5, 2) , (stack, 0xfffffffffffffb62, 2)]
[(stack, 0xfffffffffffffb60, 2) MULTIEQUAL (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (unique, 0x100016f3, 2) , (stack, 0xfffffffffffffb60, 2)]
[(stack, 0xfffffffffffffb5c, 4) MULTIEQUAL (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (unique, 0x100016ef, 4) , (stack, 0xfffffffffffffb5c, 4)]
[(stack, 0xfffffffffffffb58, 4) MULTIEQUAL (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (unique, 0x100016eb, 4) , (stack, 0xfffffffffffffb58, 4)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (unique, 0x100016e3, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (unique, 0x100016db, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (unique, 0x100016d7, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (unique, 0x100016d3, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (unique, 0x100016cb, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (unique, 0x100016c3, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (unique, 0x100016bb, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb24, 4) MULTIEQUAL (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (unique, 0x100016b7, 4) , (stack, 0xfffffffffffffb24, 4)]
[(stack, 0xfffffffffffffb20, 4) MULTIEQUAL (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (unique, 0x100016b3, 4) , (stack, 0xfffffffffffffb20, 4)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (unique, 0x100016ab, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (unique, 0x100016a3, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (unique, 0x1000169b, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (unique, 0x10001693, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (unique, 0x1000168b, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (unique, 0x10001683, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae4, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (unique, 0x1000167f, 4) , (stack, 0xfffffffffffffae4, 4)]
[(stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (unique, 0x1000167b, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffadc, 4) MULTIEQUAL (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (unique, 0x10001677, 4) , (stack, 0xfffffffffffffadc, 4)]
[(stack, 0xfffffffffffffad8, 4) MULTIEQUAL (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (unique, 0x10001673, 4) , (stack, 0xfffffffffffffad8, 4)]
[(stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (unique, 0x1000166b, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffac8, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (unique, 0x10001663, 8) , (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffac0, 8) MULTIEQUAL (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (unique, 0x1000165b, 8) , (stack, 0xfffffffffffffac0, 8)]
[(stack, 0xfffffffffffffabc, 4) MULTIEQUAL (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (unique, 0x10001657, 4) , (stack, 0xfffffffffffffabc, 4)]
[(stack, 0xfffffffffffffab8, 4) MULTIEQUAL (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (unique, 0x10001653, 4) , (stack, 0xfffffffffffffab8, 4)]
[(stack, 0xfffffffffffffab4, 4) MULTIEQUAL (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (unique, 0x1000164f, 4) , (stack, 0xfffffffffffffab4, 4)]
[(stack, 0xfffffffffffffab3, 1) MULTIEQUAL (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (unique, 0x1000164e, 1) , (stack, 0xfffffffffffffab3, 1)]
[(stack, 0xfffffffffffffaac, 4) MULTIEQUAL (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (unique, 0x1000164a, 4) , (stack, 0xfffffffffffffaac, 4)]
[(stack, 0xfffffffffffffaa8, 4) MULTIEQUAL (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (unique, 0x10001646, 4) , (stack, 0xfffffffffffffaa8, 4)]
[(stack, 0xfffffffffffffaa4, 4) MULTIEQUAL (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (unique, 0x10001642, 4) , (stack, 0xfffffffffffffaa4, 4)]
[(stack, 0xfffffffffffffaa0, 4) MULTIEQUAL (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (unique, 0x1000163e, 4) , (stack, 0xfffffffffffffaa0, 4)]
[(ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[(ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x4144f0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xb8, 1) , (const, 0x24, 1), (register, 0xb8, 1) MULTIEQUAL (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1)]
[(stack, 0xfffffffffffffb20, 4) MULTIEQUAL (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffadc, 4) MULTIEQUAL (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4)]
[(stack, 0xfffffffffffffad8, 4) MULTIEQUAL (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4)]
[(unique, 0x3100, 8) CAST (unique, 0x10003196, 8), (unique, 0x10003196, 8) INT_ADD (unique, 0x1000318e, 8) , (const, 0x1, 8), (unique, 0x1000318e, 8) CAST (stack, 0xfffffffffffffb30, 8), (stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(unique, 0x10002e7f, 4) COPY (register, 0x90, 4)]
[ ---  CBRANCH (ram, 0x4162a0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x2a, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100031a6, 8), (unique, 0x100031a6, 8) INT_ADD (unique, 0x1000319e, 8) , (const, 0x1, 8), (unique, 0x1000319e, 8) CAST (stack, 0xfffffffffffffb30, 8), (stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(unique, 0x3100, 8) CAST (unique, 0x100031b6, 8), (unique, 0x100031b6, 8) INT_ADD (unique, 0x100031ae, 8) , (const, 0x2, 8), (unique, 0x100031ae, 8) CAST (stack, 0xfffffffffffffb30, 8)]
[ ---  CBRANCH (ram, 0x416c81, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (register, 0x0, 4) , (const, 0xa, 4), (register, 0x0, 4) INT_SUB (register, 0x0, 4) , (const, 0x30, 4), (register, 0x0, 4) INT_ZEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100031c6, 8), (unique, 0x100031c6, 8) INT_ADD (unique, 0x100031be, 8) , (const, 0x2, 8), (unique, 0x100031be, 8) CAST (stack, 0xfffffffffffffb30, 8)]
[(register, 0x10, 8) CAST (unique, 0x100031e6, 8), (unique, 0x100031e6, 8) INT_ADD (unique, 0x100031de, 8) , (const, 0x3, 8), (unique, 0x100031de, 8) CAST (stack, 0xfffffffffffffb30, 8)]
[ ---  CBRANCH (ram, 0x416d11, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (register, 0x8, 4) , (const, 0xa, 4), (register, 0x8, 4) INT_SUB (register, 0x8, 4) , (const, 0x30, 4), (register, 0x8, 4) INT_ZEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100031d6, 8), (unique, 0x100031d6, 8) INT_ADD (unique, 0x100031ce, 8) , (const, 0x3, 8), (unique, 0x100031ce, 8) CAST (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb30, 8) COPY (unique, 0x3100, 8)]
[(unique, 0x1000272b, 8) COPY (register, 0x10, 8)]
[(unique, 0x10002ddf, 4) COPY (register, 0x8, 4)]
[ ---  BRANCH (ram, 0x416cc4, 1)]
[(register, 0x8, 4) MULTIEQUAL (unique, 0x10002ddf, 4) , (unique, 0x10002de3, 4) , (unique, 0x10002de7, 4)]
[(unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x1, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0x1000272b, 8) , (unique, 0x10002733, 8) , (unique, 0x1000273b, 8)]
[(register, 0x30, 4) INT_SUB (register, 0x30, 4) , (const, 0x30, 4), (register, 0x30, 4) INT_ZEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x1, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0x1000272b, 8) , (unique, 0x10002733, 8) , (unique, 0x1000273b, 8)]
[ ---  CBRANCH (ram, 0x416cba, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (const, 0xffffffff, 4) , (unique, 0x100031ee, 4), (unique, 0x100031ee, 4) CAST (register, 0x0, 4), (register, 0x0, 4) MULTIEQUAL (register, 0x0, 4) , (register, 0x0, 4) , (register, 0x0, 4)]
[ ---  CBRANCH (ram, 0x416ca5, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (const, 0xccccccc, 4) , (unique, 0x100031f2, 4), (unique, 0x100031f2, 4) CAST (register, 0x0, 4)]
[ ---  CBRANCH (ram, 0x416cdd, 1) , (unique, 0xd080, 1), (unique, 0xd080, 1) INT_SLESS (unique, 0x100031f6, 4) , (unique, 0x100031fa, 4), (unique, 0x100031fa, 4) CAST (unique, 0x10000d5a, 4), (unique, 0x100031f6, 4) CAST (register, 0xb8, 4), (register, 0xb8, 4) INT_SUB (const, 0x7fffffff, 4) , (register, 0x8, 4), (unique, 0x10000d5a, 4) INT_MULT (register, 0x0, 4) , (const, 0xa, 4)]
[ ---  CBRANCH (ram, 0x414e98, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (const, 0x9, 4) , (register, 0x30, 4)]
[(unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x2, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x414e98, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (const, 0x9, 4) , (register, 0x8, 4), (register, 0x8, 4) INT_SUB (register, 0x8, 4) , (const, 0x30, 4), (register, 0x8, 4) INT_ZEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100031fe, 8), (unique, 0x100031fe, 8) PTRADD (register, 0x10, 8) , (const, 0x2, 8) , (const, 0x1, 8)]
[(register, 0x0, 4) COPY (const, 0xffffffff, 4)]
[(unique, 0x10002733, 8) COPY (unique, 0x3100, 8)]
[(unique, 0x10002de3, 4) COPY (register, 0x8, 4)]
[ ---  BRANCH (ram, 0x416cc1, 1)]
[(register, 0x0, 4) INT_ADD (unique, 0x10000d5a, 4) , (register, 0x8, 4)]
[(register, 0x0, 4) MULTIEQUAL (register, 0x0, 4) , (register, 0x0, 4)]
[(unique, 0x1000273b, 8) COPY (unique, 0x3100, 8)]
[(unique, 0x10002de7, 4) COPY (register, 0x30, 4)]
[ ---  CBRANCH (ram, 0x416d01, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (register, 0x30, 4) , (const, 0xa, 4)]
[ ---  CBRANCH (ram, 0x414e98, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0xffffffff, 4)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(register, 0x80, 1) MULTIEQUAL (unique, 0xbb00, 1) , (unique, 0xbb00, 1)]
[ ---  CBRANCH (ram, 0x4162bb, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) MULTIEQUAL (register, 0x0, 4) , (register, 0x0, 4)]
[ ---  CBRANCH (ram, 0x4162bb, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x80, 1) , (const, 0x24, 1)]
[ ---  CBRANCH (ram, 0x416874, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (unique, 0xbc80, 4) , (const, 0x30, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10003206, 8), (unique, 0x10003206, 8) CAST (register, 0x10, 8)]
[(register, 0x10, 8) CAST (unique, 0x1000320e, 8), (unique, 0x1000320e, 8) INT_ADD (register, 0x10, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x2, 8) , (const, 0x8, 8), (register, 0x10, 8) INT_ZEXT (unique, 0xbc80, 4)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x269a, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x269a, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x269a, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x269a, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10003216, 8) , (register, 0x0, 4), (unique, 0x10003216, 8) CAST (register, 0x10, 8), (register, 0x0, 4) INT_ADD (unique, 0xbc80, 4) , (const, 0x8, 4)]
[ ---  BRANCH (ram, 0x4162d3, 1)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x2668, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x2668, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x2668, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x2668, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x8, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x2, 8) , (const, 0x4, 8), (unique, 0xbd80, 8) CAST (unique, 0x1000321e, 8), (unique, 0x1000321e, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[(ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[(ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(stack, 0xfffffffffffffb30, 8) COPY (unique, 0x3100, 8)]
[(unique, 0x1000299b, 4) COPY (register, 0x10, 4), (register, 0x10, 4) COPY (const, 0xffffffff, 4)]
[ ---  CBRANCH (ram, 0x4162e6, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (const, 0xffffffff, 4) , (unique, 0x10003226, 4), (unique, 0x10003226, 4) CAST (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (register, 0x10, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0xbd80, 8) , (register, 0x10, 8)]
[(unique, 0x1000299f, 4) COPY (unique, 0xbc80, 4)]
[(register, 0x80, 8) INT_ZEXT (register, 0x10, 4), (register, 0x10, 4) MULTIEQUAL (unique, 0x1000299b, 4) , (unique, 0x1000299f, 4)]
[(register, 0x80, 8) INT_ZEXT (register, 0x80, 4), (register, 0x80, 4) INT_SUB (unique, 0x10000503, 4) , (const, 0x30, 4), (unique, 0x10000503, 4) INT_ZEXT (unique, 0xbb00, 1)]
[ ---  CBRANCH (ram, 0x4166b3, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (register, 0x80, 4) , (const, 0xa, 4), (register, 0x80, 4) INT_SUB (unique, 0x10000503, 4) , (const, 0x30, 4), (unique, 0x10000503, 4) INT_ZEXT (unique, 0xbb00, 1)]
[(unique, 0x100025e3, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10003242, 8), (unique, 0x10003242, 8) INT_ADD (unique, 0x1000323a, 8) , (const, 0x2, 8), (unique, 0x1000323a, 8) CAST (stack, 0xfffffffffffffb30, 8)]
[(unique, 0x100029af, 4) COPY (register, 0x10, 4), (register, 0x10, 4) INT_SUB (register, 0x10, 4) , (const, 0x30, 4), (register, 0x10, 4) INT_ZEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10003232, 8), (unique, 0x10003232, 8) INT_ADD (unique, 0x1000322a, 8) , (const, 0x2, 8), (unique, 0x1000322a, 8) CAST (stack, 0xfffffffffffffb30, 8)]
[ ---  CBRANCH (ram, 0x4166f4, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (register, 0x10, 4) , (const, 0xa, 4), (register, 0x10, 4) INT_SUB (register, 0x10, 4) , (const, 0x30, 4), (register, 0x10, 4) INT_ZEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10003232, 8), (unique, 0x10003232, 8) INT_ADD (unique, 0x1000322a, 8) , (const, 0x2, 8), (unique, 0x1000322a, 8) CAST (stack, 0xfffffffffffffb30, 8)]
[(register, 0x10, 4) MULTIEQUAL (unique, 0x100029af, 4) , (unique, 0x100029b3, 4) , (unique, 0x100029b7, 4)]
[(unique, 0x3100, 8) CAST (unique, 0x10003262, 8), (unique, 0x10003262, 8) INT_ADD (unique, 0x1000325a, 8) , (const, 0x1, 8), (unique, 0x1000325a, 8) CAST (register, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x100025e3, 8) , (unique, 0x100025eb, 8) , (unique, 0x100025f3, 8)]
[(register, 0x8, 4) INT_SUB (register, 0x8, 4) , (const, 0x30, 4), (register, 0x8, 4) INT_ZEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10003252, 8), (unique, 0x10003252, 8) INT_ADD (unique, 0x1000324a, 8) , (const, 0x1, 8), (unique, 0x1000324a, 8) CAST (register, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x100025e3, 8) , (unique, 0x100025eb, 8) , (unique, 0x100025f3, 8)]
[ ---  CBRANCH (ram, 0x4166e6, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (const, 0xffffffff, 4) , (register, 0x80, 4), (register, 0x80, 4) SUBPIECE (register, 0x80, 8) , (const, 0x0, 4), (register, 0x80, 8) MULTIEQUAL (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8)]
[ ---  CBRANCH (ram, 0x4166d0, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (const, 0xccccccc, 4) , (register, 0x80, 4)]
[ ---  CBRANCH (ram, 0x41670d, 1) , (unique, 0xd080, 1), (unique, 0xd080, 1) INT_SLESS (unique, 0x1000326a, 4) , (unique, 0x10000da1, 4), (unique, 0x1000326a, 4) CAST (register, 0x38, 4), (register, 0x38, 4) INT_SUB (const, 0x7fffffff, 4) , (register, 0x10, 4), (unique, 0x10000da1, 4) INT_MULT (register, 0x80, 4) , (const, 0xa, 4)]
[ ---  CBRANCH (ram, 0x414e98, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (const, 0x9, 4) , (register, 0x8, 4)]
[(unique, 0x3100, 8) CAST (unique, 0x10003286, 8), (unique, 0x10003286, 8) INT_ADD (unique, 0x1000327e, 8) , (const, 0x2, 8), (unique, 0x1000327e, 8) CAST (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x414e98, 1) , (unique, 0xc900, 1), (unique, 0xc900, 1) INT_LESS (const, 0x9, 4) , (register, 0x10, 4), (register, 0x10, 4) INT_SUB (register, 0x10, 4) , (const, 0x30, 4), (register, 0x10, 4) INT_ZEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10003276, 8), (unique, 0x10003276, 8) INT_ADD (unique, 0x1000326e, 8) , (const, 0x2, 8), (unique, 0x1000326e, 8) CAST (register, 0x0, 8)]
[(register, 0x80, 8) COPY (const, 0xffffffff, 8)]
[(unique, 0x100025eb, 8) COPY (unique, 0x3100, 8)]
[(unique, 0x100029b3, 4) COPY (register, 0x10, 4)]
[ ---  BRANCH (ram, 0x4166f1, 1)]
[(register, 0x80, 8) INT_ZEXT (register, 0x80, 4), (register, 0x80, 4) INT_ADD (unique, 0x10000da1, 4) , (register, 0x10, 4)]
[(register, 0x80, 8) MULTIEQUAL (register, 0x80, 8) , (register, 0x80, 8)]
[(unique, 0x100025f3, 8) COPY (unique, 0x3100, 8)]
[(unique, 0x100029b7, 4) COPY (register, 0x8, 4)]
[ ---  CBRANCH (ram, 0x4167ec, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (register, 0x8, 4) , (const, 0xa, 4)]
[(stack, 0xfffffffffffffb30, 8) COPY (unique, 0x3100, 8)]
[ ---  CBRANCH (ram, 0x4162e9, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x80, 4) , (const, 0xffffffff, 4), (register, 0x80, 4) SUBPIECE (register, 0x80, 8) , (const, 0x0, 4)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[(ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(unique, 0x10002d2f, 4) COPY (register, 0x98, 4)]
[ ---  CBRANCH (ram, 0x4148f3, 1) , (unique, 0xcd00, 1), (unique, 0xcd00, 1) INT_SLESS (const, 0x3c8, 4) , (register, 0x80, 4), (register, 0x80, 4) SUBPIECE (register, 0x80, 8) , (const, 0x0, 4), (register, 0x80, 8) MULTIEQUAL (register, 0x80, 8) , (register, 0x80, 8)]
[(stack, 0xfffffffffffffabc, 4) COPY (const, 0x0, 4)]
[(unique, 0x10002d53, 4) COPY (unique, 0x1000252f, 4)]
[ ---  CBRANCH (ram, 0x414480, 1) , (unique, 0xd080, 1), (unique, 0xd080, 1) INT_SLESS (const, 0x7fffffde, 4) , (register, 0x80, 4)]
[(register, 0xb8, 8) INT_ADD (register, 0xb8, 8) , (const, 0x20, 8), (register, 0xb8, 8) INT_SEXT (register, 0x80, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100032b6, 8) , (const, 0x416348, 8), (unique, 0x100032b6, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x251c, 4)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x251c, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x251c, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x251c, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x251c, 4)]
[(stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x251c, 4), (stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x251b, 4)]
[(stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x251c, 4), (stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x251b, 4)]
[(stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x251c, 4), (stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x251b, 4)]
[(stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x251c, 4), (stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x251b, 4)]
[(stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x251c, 4), (stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x251b, 4)]
[(stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x251c, 4), (stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x251b, 4)]
[(stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x251c, 4), (stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x251b, 4)]
[(stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x251c, 4), (stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x251b, 4)]
[(stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x251c, 4), (stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x251b, 4)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x251c, 4), (stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x251b, 4)]
[(stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x251c, 4), (stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x251b, 4)]
[(stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x251c, 4), (stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x251b, 4)]
[(stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x251c, 4), (stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x251b, 4)]
[(stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x251c, 4), (stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x251b, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x251c, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x251b, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x251c, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x251b, 4)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x251c, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x251b, 4)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x251c, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x251b, 4)]
[(stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x251c, 4), (stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x251b, 4)]
[(stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x251c, 4), (stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x251b, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x251c, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x251b, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x251c, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x251b, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x251c, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x251b, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x251c, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x251b, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x251c, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x251b, 4)]
[(stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x251c, 4), (stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x251b, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x251c, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x251b, 4)]
[(stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x251c, 4), (stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x251b, 4)]
[(stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x251c, 4), (stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x251b, 4)]
[(stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x251c, 4), (stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x251b, 4)]
[(stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x251c, 4), (stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x251b, 4)]
[(stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x251c, 4), (stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x251b, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x251c, 4), (stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x251b, 4)]
[(stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x251c, 4), (stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x251b, 4)]
[(stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x251c, 4), (stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x251b, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x251c, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x251b, 4)]
[(stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x251c, 4), (stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x251b, 4)]
[(stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x251c, 4), (stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x251b, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x251c, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x251b, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x251c, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x251b, 4)]
[(stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x251c, 4), (stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x251b, 4)]
[(stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x251c, 4), (stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x251b, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x251c, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x251b, 4)]
[(stack, 0xfffffffffffffb18, 4) SUBPIECE (stack, 0xfffffffffffffb18, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x251c, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x251b, 4), (stack, 0xfffffffffffffb18, 8) COPY (unique, 0x100032ae, 8), (unique, 0x100032ae, 8) CAST (register, 0x80, 8)]
[(register, 0x80, 8) INT_AND (unique, 0x100032be, 8) , (const, 0xffffffff, 8), (unique, 0x100032be, 8) CAST (stack, 0xfffffffffffffb18, 8), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x251c, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x251b, 4), (stack, 0xfffffffffffffb18, 8) COPY (unique, 0x100032ae, 8), (unique, 0x100032ae, 8) CAST (register, 0x80, 8)]
[(stack, 0xfffffffffffffb00, 4) SUBPIECE (stack, 0xfffffffffffffb00, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x251c, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x251b, 4), (stack, 0xfffffffffffffb00, 8) COPY (unique, 0x100012a6, 8), (unique, 0x100012a6, 8) CAST (unique, 0x100032a6, 8), (unique, 0x100032a6, 8) INT_AND (unique, 0x1000329e, 8) , (const, 0xffffffff00000000, 8), (unique, 0x1000329e, 8) CAST (unique, 0x3100, 8)]
[(stack, 0xfffffffffffffae8, 4) SUBPIECE (stack, 0xfffffffffffffae8, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x251c, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x251b, 4), (stack, 0xfffffffffffffae8, 8) COPY (unique, 0x10001296, 8), (unique, 0x10001296, 8) CAST (unique, 0x10003296, 8), (unique, 0x10003296, 8) INT_AND (unique, 0x1000328e, 8) , (const, 0xffffffff00000000, 8), (unique, 0x1000328e, 8) CAST (stack, 0xfffffffffffffae8, 8)]
[(register, 0x88, 8) INT_ZEXT (stack, 0xfffffffffffffab4, 4), (stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x251c, 4), (stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x251b, 4), (stack, 0xfffffffffffffab4, 4) COPY (register, 0x88, 4)]
[ ---  CBRANCH (ram, 0x416375, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x421340, 8)]
[ ---  CBRANCH (ram, 0x417095, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (const, 0x1000, 8) , (register, 0xb8, 8)]
[(register, 0x30, 8) PTRADD (register, 0x20, 8) , (unique, 0x100009e6, 8) , (const, 0x1, 8), (unique, 0x100009e6, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (unique, 0x3100, 8) , (const, 0xfffffffffffff000, 8), (unique, 0x3100, 8) INT_ADD (register, 0xb8, 8) , (const, 0x37, 8)]
[(unique, 0x10000a06, 4) SUBPIECE (unique, 0x3100, 8) , (const, 0x0, 4), (unique, 0x3100, 8) INT_ADD (register, 0xb8, 8) , (const, 0x37, 8)]
[(unique, 0x10002e4f, 8) COPY (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x4163a9, 1) , (unique, 0x10001747, 1), (unique, 0x10001747, 1) INT_NOTEQUAL (register, 0x20, 8) , (register, 0x30, 8), (register, 0x20, 8) MULTIEQUAL (unique, 0x10002e4f, 8) , (register, 0x20, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100032ce, 8) , (unique, 0xbe00, 8), (unique, 0x100032ce, 8) CAST (unique, 0x3c80, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x100032c6, 8), (unique, 0x100032c6, 8) CAST (unique, 0x3c80, 8), (unique, 0x3c80, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffff000, 8) , (const, 0x1, 8)]
[(register, 0x20, 8) PTRADD (register, 0x20, 8) , (unique, 0x10000a0e, 8) , (const, 0x1, 8), (unique, 0x10000a0e, 8) INT_2COMP (register, 0x10, 8), (register, 0x10, 8) INT_ZEXT (register, 0x10, 4), (register, 0x10, 4) INT_AND (unique, 0x10000a06, 4) , (const, 0xff0, 4)]
[ ---  CBRANCH (ram, 0x4163bd, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x10, 8) , (const, 0x0, 8), (register, 0x10, 8) INT_ZEXT (register, 0x10, 4), (register, 0x10, 4) INT_AND (unique, 0x10000a06, 4) , (const, 0xff0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100032de, 8) , (unique, 0xbe00, 8), (unique, 0x100032de, 8) CAST (unique, 0x3880, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x100032d6, 8), (unique, 0x100032d6, 8) CAST (unique, 0x3880, 8), (unique, 0x3880, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(stack, 0xfffffffffffffb18, 8) COPY (const, 0x0, 8)]
[(stack, 0xfffffffffffffb00, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x100032ee, 8), (unique, 0x100032ee, 8) INT_ADD (register, 0x0, 8) , (register, 0xb8, 8), (register, 0x0, 8) INT_AND (unique, 0x100032e6, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x100032e6, 8) CAST (unique, 0x3800, 8), (unique, 0x3800, 8) PTRADD (register, 0x20, 8) , (unique, 0x10002018, 8) , (const, 0x1, 8), (unique, 0x10002018, 8) INT_ADD (unique, 0x10000a0e, 8) , (const, 0xf, 8)]
[(unique, 0x10002d33, 4) COPY (stack, 0xfffffffffffffb00, 4)]
[ ---  BRANCH (ram, 0x4148f3, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100032f6, 8) , (const, 0x4170ab, 8), (unique, 0x100032f6, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x25e3, 4)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x25e3, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x25e3, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x25e3, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x25e3, 4)]
[(stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x25e3, 4), (stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x25e2, 4)]
[(stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x25e3, 4), (stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x25e2, 4)]
[(stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x25e3, 4), (stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x25e2, 4)]
[(stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x25e3, 4), (stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x25e2, 4)]
[(stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x25e3, 4), (stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x25e2, 4)]
[(stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x25e3, 4), (stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x25e2, 4)]
[(stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x25e3, 4), (stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x25e2, 4)]
[(stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x25e3, 4), (stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x25e2, 4)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x25e3, 4), (stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x25e2, 4)]
[(stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x25e3, 4), (stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x25e2, 4)]
[(stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x25e3, 4), (stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x25e2, 4)]
[(stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x25e3, 4), (stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x25e2, 4)]
[(stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x25e3, 4), (stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x25e2, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x25e3, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x25e2, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x25e3, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x25e2, 4)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x25e3, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x25e2, 4)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x25e3, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x25e2, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x25e3, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x25e2, 4)]
[(stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x25e3, 4), (stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x25e2, 4)]
[(stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x25e3, 4), (stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x25e2, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x25e3, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x25e2, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x25e3, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x25e2, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x25e3, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x25e2, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x25e3, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x25e2, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x25e3, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x25e2, 4)]
[(stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x25e3, 4), (stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x25e2, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x25e3, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x25e2, 4)]
[(stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x25e3, 4), (stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x25e2, 4)]
[(stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x25e3, 4), (stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x25e2, 4)]
[(stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x25e3, 4), (stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x25e2, 4)]
[(stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x25e3, 4), (stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x25e2, 4)]
[(stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x25e3, 4), (stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x25e2, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x25e3, 4), (stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x25e2, 4)]
[(stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x25e3, 4), (stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x25e2, 4)]
[(stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x25e3, 4), (stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x25e2, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x25e3, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x25e2, 4)]
[(stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x25e3, 4), (stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x25e2, 4)]
[(stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x25e3, 4), (stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x25e2, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x25e3, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x25e2, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x25e3, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x25e2, 4)]
[(stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x25e3, 4), (stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x25e2, 4)]
[(stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x25e3, 4), (stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x25e2, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x25e3, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x25e2, 4)]
[(stack, 0xfffffffffffffb00, 4) SUBPIECE (stack, 0xfffffffffffffb00, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x25e3, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x25e2, 4)]
[(stack, 0xfffffffffffffae8, 4) SUBPIECE (stack, 0xfffffffffffffae8, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x25e3, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x25e2, 4)]
[(stack, 0xfffffffffffffb18, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x426550, 8) , (register, 0xb8, 8)]
[(register, 0x80, 8) INT_ZEXT (stack, 0xfffffffffffffab4, 4), (stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x25e3, 4), (stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x25e2, 4), (stack, 0xfffffffffffffab4, 4) COPY (stack, 0xfffffffffffffb18, 4)]
[(register, 0x88, 8) INT_ZEXT (stack, 0xfffffffffffffaa4, 4), (stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x25e3, 4), (stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x25e2, 4), (stack, 0xfffffffffffffaa4, 4) COPY (stack, 0xfffffffffffffab4, 4)]
[ ---  CBRANCH (ram, 0x4143b0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x426550, 8) , (register, 0xb8, 8)]
[(stack, 0xfffffffffffffb00, 8) COPY (register, 0xb8, 8), (register, 0xb8, 8) CAST (unique, 0x10003306, 8), (unique, 0x10003306, 8) INT_ADD (register, 0xb8, 8) , (unique, 0x100032fe, 8), (unique, 0x100032fe, 8) CAST (register, 0x0, 8)]
[(unique, 0x10002d37, 4) COPY (stack, 0xfffffffffffffb00, 4)]
[ ---  BRANCH (ram, 0x4148f3, 1)]
[(stack, 0xfffffffffffffb30, 8) COPY (register, 0x0, 8)]
[(unique, 0x10002d2b, 4) COPY (register, 0x98, 4)]
[ ---  BRANCH (ram, 0x4148f3, 1)]
[(stack, 0xfffffffffffffb30, 8) COPY (unique, 0x3100, 8)]
[(register, 0x80, 8) COPY (const, 0x0, 8)]
[(unique, 0x10002d27, 4) COPY (register, 0x98, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbc0, 8) MULTIEQUAL (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8)]
[(stack, 0xfffffffffffffbb8, 8) MULTIEQUAL (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb90, 8) MULTIEQUAL (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8)]
[(stack, 0xfffffffffffffb88, 8) MULTIEQUAL (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb74, 4) MULTIEQUAL (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4)]
[(stack, 0xfffffffffffffb70, 4) MULTIEQUAL (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4)]
[(stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb64, 4) MULTIEQUAL (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4)]
[(stack, 0xfffffffffffffb62, 2) MULTIEQUAL (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2)]
[(stack, 0xfffffffffffffb60, 2) MULTIEQUAL (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2)]
[(stack, 0xfffffffffffffb5c, 4) MULTIEQUAL (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4)]
[(stack, 0xfffffffffffffb58, 4) MULTIEQUAL (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb24, 4) MULTIEQUAL (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4)]
[(stack, 0xfffffffffffffb20, 4) MULTIEQUAL (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae4, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[(stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffadc, 4) MULTIEQUAL (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4)]
[(stack, 0xfffffffffffffad8, 4) MULTIEQUAL (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4)]
[(stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffac8, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffac0, 8) MULTIEQUAL (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8)]
[(stack, 0xfffffffffffffabc, 4) MULTIEQUAL (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4)]
[(stack, 0xfffffffffffffab8, 4) MULTIEQUAL (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4)]
[(stack, 0xfffffffffffffab4, 4) MULTIEQUAL (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4)]
[(stack, 0xfffffffffffffab3, 1) MULTIEQUAL (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1)]
[(stack, 0xfffffffffffffaac, 4) MULTIEQUAL (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4)]
[(stack, 0xfffffffffffffaa8, 4) MULTIEQUAL (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4)]
[(stack, 0xfffffffffffffaa4, 4) MULTIEQUAL (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4)]
[(stack, 0xfffffffffffffaa0, 4) MULTIEQUAL (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4)]
[(ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[(ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8)]
[(unique, 0x100029e3, 4) COPY (register, 0x90, 4), (register, 0x90, 4) MULTIEQUAL (unique, 0x10002e7f, 4) , (unique, 0x10002e7f, 4) , (unique, 0x10002e7f, 4) , (stack, 0xfffffffffffffae8, 4) , (stack, 0xfffffffffffffae8, 4)]
[(unique, 0x10002a13, 4) COPY (register, 0x90, 4), (register, 0x90, 4) MULTIEQUAL (unique, 0x10002e7f, 4) , (unique, 0x10002e7f, 4) , (unique, 0x10002e7f, 4) , (stack, 0xfffffffffffffae8, 4) , (stack, 0xfffffffffffffae8, 4)]
[(unique, 0x10002a47, 4) COPY (register, 0x90, 4), (register, 0x90, 4) MULTIEQUAL (unique, 0x10002e7f, 4) , (unique, 0x10002e7f, 4) , (unique, 0x10002e7f, 4) , (stack, 0xfffffffffffffae8, 4) , (stack, 0xfffffffffffffae8, 4)]
[(unique, 0x10002a77, 4) COPY (register, 0x98, 4), (register, 0x98, 4) MULTIEQUAL (unique, 0x10002d27, 4) , (unique, 0x10002d2b, 4) , (unique, 0x10002d2f, 4) , (unique, 0x10002d33, 4) , (unique, 0x10002d37, 4)]
[(unique, 0x10002aa3, 4) COPY (register, 0x98, 4), (register, 0x98, 4) MULTIEQUAL (unique, 0x10002d27, 4) , (unique, 0x10002d2b, 4) , (unique, 0x10002d2f, 4) , (unique, 0x10002d33, 4) , (unique, 0x10002d37, 4)]
[(unique, 0x10002b43, 4) COPY (unique, 0x10002adf, 4), (unique, 0x10002adf, 4) COPY (register, 0x90, 4), (register, 0x90, 4) MULTIEQUAL (unique, 0x10002e7f, 4) , (unique, 0x10002e7f, 4) , (unique, 0x10002e7f, 4) , (stack, 0xfffffffffffffae8, 4) , (stack, 0xfffffffffffffae8, 4)]
[(unique, 0x10002b6f, 4) COPY (register, 0x90, 4), (register, 0x90, 4) MULTIEQUAL (unique, 0x10002e7f, 4) , (unique, 0x10002e7f, 4) , (unique, 0x10002e7f, 4) , (stack, 0xfffffffffffffae8, 4) , (stack, 0xfffffffffffffae8, 4)]
[(unique, 0x10002b93, 4) COPY (unique, 0x10002b13, 4), (unique, 0x10002b13, 4) COPY (register, 0x90, 4), (register, 0x90, 4) MULTIEQUAL (unique, 0x10002e7f, 4) , (unique, 0x10002e7f, 4) , (unique, 0x10002e7f, 4) , (stack, 0xfffffffffffffae8, 4) , (stack, 0xfffffffffffffae8, 4)]
[(unique, 0x10002bb3, 4) COPY (unique, 0x10002adf, 4), (unique, 0x10002adf, 4) COPY (register, 0x90, 4), (register, 0x90, 4) MULTIEQUAL (unique, 0x10002e7f, 4) , (unique, 0x10002e7f, 4) , (unique, 0x10002e7f, 4) , (stack, 0xfffffffffffffae8, 4) , (stack, 0xfffffffffffffae8, 4)]
[(unique, 0x10002bd7, 4) COPY (unique, 0x10002adf, 4), (unique, 0x10002adf, 4) COPY (register, 0x90, 4), (register, 0x90, 4) MULTIEQUAL (unique, 0x10002e7f, 4) , (unique, 0x10002e7f, 4) , (unique, 0x10002e7f, 4) , (stack, 0xfffffffffffffae8, 4) , (stack, 0xfffffffffffffae8, 4)]
[(unique, 0x10002c1b, 4) COPY (unique, 0x10002adf, 4), (unique, 0x10002adf, 4) COPY (register, 0x90, 4), (register, 0x90, 4) MULTIEQUAL (unique, 0x10002e7f, 4) , (unique, 0x10002e7f, 4) , (unique, 0x10002e7f, 4) , (stack, 0xfffffffffffffae8, 4) , (stack, 0xfffffffffffffae8, 4)]
[(unique, 0x10002c73, 4) COPY (register, 0x90, 4), (register, 0x90, 4) MULTIEQUAL (unique, 0x10002e7f, 4) , (unique, 0x10002e7f, 4) , (unique, 0x10002e7f, 4) , (stack, 0xfffffffffffffae8, 4) , (stack, 0xfffffffffffffae8, 4)]
[(unique, 0x10002c93, 4) COPY (unique, 0x10002adf, 4), (unique, 0x10002adf, 4) COPY (register, 0x90, 4), (register, 0x90, 4) MULTIEQUAL (unique, 0x10002e7f, 4) , (unique, 0x10002e7f, 4) , (unique, 0x10002e7f, 4) , (stack, 0xfffffffffffffae8, 4) , (stack, 0xfffffffffffffae8, 4)]
[(unique, 0x10002d13, 4) COPY (unique, 0x10002cef, 4), (unique, 0x10002cef, 4) COPY (register, 0x98, 4), (register, 0x98, 4) MULTIEQUAL (unique, 0x10002d27, 4) , (unique, 0x10002d2b, 4) , (unique, 0x10002d2f, 4) , (unique, 0x10002d33, 4) , (unique, 0x10002d37, 4)]
[(unique, 0x10002db7, 4) COPY (register, 0x88, 4), (register, 0x88, 4) SUBPIECE (register, 0x88, 8) , (const, 0x0, 4), (register, 0x88, 8) MULTIEQUAL (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8)]
[(unique, 0x10002e03, 4) COPY (register, 0x80, 4), (register, 0x80, 4) SUBPIECE (register, 0x80, 8) , (const, 0x0, 4), (register, 0x80, 8) MULTIEQUAL (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8)]
[ ---  BRANCHIND (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x1000330e, 8), (unique, 0x1000330e, 8) CAST (stack, 0xfffffffffffffb30, 8), (stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbc0, 8) MULTIEQUAL (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8)]
[(stack, 0xfffffffffffffbb8, 8) MULTIEQUAL (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb90, 8) MULTIEQUAL (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8)]
[(stack, 0xfffffffffffffb88, 8) MULTIEQUAL (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb74, 4) MULTIEQUAL (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4)]
[(stack, 0xfffffffffffffb70, 4) MULTIEQUAL (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4)]
[(stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb64, 4) MULTIEQUAL (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4)]
[(stack, 0xfffffffffffffb62, 2) MULTIEQUAL (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2)]
[(stack, 0xfffffffffffffb60, 2) MULTIEQUAL (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2)]
[(stack, 0xfffffffffffffb5c, 4) MULTIEQUAL (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4)]
[(stack, 0xfffffffffffffb58, 4) MULTIEQUAL (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb24, 4) MULTIEQUAL (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4)]
[(stack, 0xfffffffffffffb20, 4) MULTIEQUAL (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae4, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[(stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffadc, 4) MULTIEQUAL (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4)]
[(stack, 0xfffffffffffffad8, 4) MULTIEQUAL (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4)]
[(stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffac8, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffac0, 8) MULTIEQUAL (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8)]
[(stack, 0xfffffffffffffabc, 4) MULTIEQUAL (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4)]
[(stack, 0xfffffffffffffab8, 4) MULTIEQUAL (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4)]
[(stack, 0xfffffffffffffab4, 4) MULTIEQUAL (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4)]
[(stack, 0xfffffffffffffab3, 1) MULTIEQUAL (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1)]
[(stack, 0xfffffffffffffaac, 4) MULTIEQUAL (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4)]
[(stack, 0xfffffffffffffaa8, 4) MULTIEQUAL (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4)]
[(stack, 0xfffffffffffffaa4, 4) MULTIEQUAL (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4)]
[(stack, 0xfffffffffffffaa0, 4) MULTIEQUAL (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4)]
[(ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[(ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8)]
[(stack, 0xfffffffffffffb30, 8) COPY (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000332e, 8), (unique, 0x1000332e, 8) INT_ADD (unique, 0x10003326, 8) , (const, 0x1, 8), (unique, 0x10003326, 8) CAST (stack, 0xfffffffffffffb30, 8), (stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb10, 8) CAST (unique, 0x1000333a, 8), (unique, 0x1000333a, 8) INT_ADD (unique, 0x10002407, 8) , (const, 0x1, 4), (unique, 0x10002407, 8) INT_LEFT (unique, 0x100023ff, 8) , (const, 0x20, 8), (unique, 0x100023ff, 8) INT_SEXT (unique, 0x10003336, 4), (unique, 0x10003336, 4) CAST (stack, 0xfffffffffffffb14, 4), (stack, 0xfffffffffffffb14, 4) SUBPIECE (stack, 0xfffffffffffffb10, 8) , (const, 0x4, 8), (stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(unique, 0x100029d7, 4) COPY (register, 0x90, 4), (register, 0x90, 4) COPY (unique, 0x10002c2f, 4), (unique, 0x10002c2f, 4) MULTIEQUAL (unique, 0x10002c0f, 4) , (unique, 0x10002c13, 4) , (unique, 0x10002c17, 4) , (unique, 0x10002c1b, 4) , (unique, 0x10002c1f, 4) , (unique, 0x10002c23, 4) , (unique, 0x10002c27, 4) , (unique, 0x10002c2b, 4)]
[(unique, 0x10002a07, 4) COPY (register, 0x90, 4), (register, 0x90, 4) COPY (unique, 0x10002c2f, 4), (unique, 0x10002c2f, 4) MULTIEQUAL (unique, 0x10002c0f, 4) , (unique, 0x10002c13, 4) , (unique, 0x10002c17, 4) , (unique, 0x10002c1b, 4) , (unique, 0x10002c1f, 4) , (unique, 0x10002c23, 4) , (unique, 0x10002c27, 4) , (unique, 0x10002c2b, 4)]
[(unique, 0x10002a3b, 4) COPY (register, 0x90, 4), (register, 0x90, 4) COPY (unique, 0x10002c2f, 4), (unique, 0x10002c2f, 4) MULTIEQUAL (unique, 0x10002c0f, 4) , (unique, 0x10002c13, 4) , (unique, 0x10002c17, 4) , (unique, 0x10002c1b, 4) , (unique, 0x10002c1f, 4) , (unique, 0x10002c23, 4) , (unique, 0x10002c27, 4) , (unique, 0x10002c2b, 4)]
[(unique, 0x10002a6b, 4) COPY (register, 0x98, 4), (register, 0x98, 4) MULTIEQUAL (unique, 0x10002d07, 4) , (unique, 0x10002d0b, 4) , (unique, 0x10002d0f, 4) , (unique, 0x10002d13, 4) , (unique, 0x10002d17, 4) , (unique, 0x10002d1b, 4) , (unique, 0x10002d1f, 4) , (unique, 0x10002d23, 4)]
[(unique, 0x10002a97, 4) COPY (register, 0x98, 4), (register, 0x98, 4) MULTIEQUAL (unique, 0x10002d07, 4) , (unique, 0x10002d0b, 4) , (unique, 0x10002d0f, 4) , (unique, 0x10002d13, 4) , (unique, 0x10002d17, 4) , (unique, 0x10002d1b, 4) , (unique, 0x10002d1f, 4) , (unique, 0x10002d23, 4)]
[(unique, 0x10002b37, 4) COPY (unique, 0x10002ad3, 4), (unique, 0x10002ad3, 4) COPY (register, 0x90, 4), (register, 0x90, 4) COPY (unique, 0x10002c2f, 4), (unique, 0x10002c2f, 4) MULTIEQUAL (unique, 0x10002c0f, 4) , (unique, 0x10002c13, 4) , (unique, 0x10002c17, 4) , (unique, 0x10002c1b, 4) , (unique, 0x10002c1f, 4) , (unique, 0x10002c23, 4) , (unique, 0x10002c27, 4) , (unique, 0x10002c2b, 4)]
[(unique, 0x10002b67, 4) COPY (register, 0x90, 4), (register, 0x90, 4) COPY (unique, 0x10002c2f, 4), (unique, 0x10002c2f, 4) MULTIEQUAL (unique, 0x10002c0f, 4) , (unique, 0x10002c13, 4) , (unique, 0x10002c17, 4) , (unique, 0x10002c1b, 4) , (unique, 0x10002c1f, 4) , (unique, 0x10002c23, 4) , (unique, 0x10002c27, 4) , (unique, 0x10002c2b, 4)]
[(unique, 0x10002b83, 4) COPY (unique, 0x10002b03, 4), (unique, 0x10002b03, 4) COPY (register, 0x90, 4), (register, 0x90, 4) COPY (unique, 0x10002c2f, 4), (unique, 0x10002c2f, 4) MULTIEQUAL (unique, 0x10002c0f, 4) , (unique, 0x10002c13, 4) , (unique, 0x10002c17, 4) , (unique, 0x10002c1b, 4) , (unique, 0x10002c1f, 4) , (unique, 0x10002c23, 4) , (unique, 0x10002c27, 4) , (unique, 0x10002c2b, 4)]
[(unique, 0x10002c6f, 4) COPY (register, 0x90, 4), (register, 0x90, 4) COPY (unique, 0x10002c2f, 4), (unique, 0x10002c2f, 4) MULTIEQUAL (unique, 0x10002c0f, 4) , (unique, 0x10002c13, 4) , (unique, 0x10002c17, 4) , (unique, 0x10002c1b, 4) , (unique, 0x10002c1f, 4) , (unique, 0x10002c23, 4) , (unique, 0x10002c27, 4) , (unique, 0x10002c2b, 4)]
[(unique, 0x10002c87, 4) COPY (unique, 0x10002ad3, 4), (unique, 0x10002ad3, 4) COPY (register, 0x90, 4), (register, 0x90, 4) COPY (unique, 0x10002c2f, 4), (unique, 0x10002c2f, 4) MULTIEQUAL (unique, 0x10002c0f, 4) , (unique, 0x10002c13, 4) , (unique, 0x10002c17, 4) , (unique, 0x10002c1b, 4) , (unique, 0x10002c1f, 4) , (unique, 0x10002c23, 4) , (unique, 0x10002c27, 4) , (unique, 0x10002c2b, 4)]
[(unique, 0x10002da7, 4) COPY (register, 0x88, 4), (register, 0x88, 4) SUBPIECE (register, 0x88, 8) , (const, 0x0, 4), (register, 0x88, 8) MULTIEQUAL (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8)]
[(unique, 0x10002df7, 4) COPY (register, 0x80, 4), (register, 0x80, 4) SUBPIECE (register, 0x80, 8) , (const, 0x0, 4), (register, 0x80, 8) MULTIEQUAL (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8)]
[ ---  BRANCHIND (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000331e, 8), (unique, 0x1000331e, 8) INT_ADD (unique, 0x10003316, 8) , (const, 0x1, 8), (unique, 0x10003316, 8) CAST (stack, 0xfffffffffffffb30, 8), (stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbc0, 8) MULTIEQUAL (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8)]
[(stack, 0xfffffffffffffbb8, 8) MULTIEQUAL (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb90, 8) MULTIEQUAL (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8)]
[(stack, 0xfffffffffffffb88, 8) MULTIEQUAL (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb74, 4) MULTIEQUAL (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4)]
[(stack, 0xfffffffffffffb70, 4) MULTIEQUAL (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4)]
[(stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb64, 4) MULTIEQUAL (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4)]
[(stack, 0xfffffffffffffb62, 2) MULTIEQUAL (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2)]
[(stack, 0xfffffffffffffb60, 2) MULTIEQUAL (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2)]
[(stack, 0xfffffffffffffb5c, 4) MULTIEQUAL (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4)]
[(stack, 0xfffffffffffffb58, 4) MULTIEQUAL (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb24, 4) MULTIEQUAL (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4)]
[(stack, 0xfffffffffffffb20, 4) MULTIEQUAL (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae4, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[(stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffadc, 4) MULTIEQUAL (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4)]
[(stack, 0xfffffffffffffad8, 4) MULTIEQUAL (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4)]
[(stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffac8, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffac0, 8) MULTIEQUAL (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8)]
[(stack, 0xfffffffffffffabc, 4) MULTIEQUAL (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4)]
[(stack, 0xfffffffffffffab8, 4) MULTIEQUAL (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4)]
[(stack, 0xfffffffffffffab4, 4) MULTIEQUAL (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4)]
[(stack, 0xfffffffffffffab3, 1) MULTIEQUAL (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1)]
[(stack, 0xfffffffffffffaac, 4) MULTIEQUAL (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4)]
[(stack, 0xfffffffffffffaa8, 4) MULTIEQUAL (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4)]
[(stack, 0xfffffffffffffaa4, 4) MULTIEQUAL (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4)]
[(stack, 0xfffffffffffffaa0, 4) MULTIEQUAL (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4)]
[(ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[(ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8)]
[(register, 0x98, 4) COPY (unique, 0x10002d03, 4), (unique, 0x10002d03, 4) MULTIEQUAL (unique, 0x10002ce3, 4) , (unique, 0x10002ce7, 4) , (unique, 0x10002ceb, 4) , (unique, 0x10002cef, 4) , (unique, 0x10002cf3, 4) , (unique, 0x10002cf7, 4) , (unique, 0x10002cfb, 4) , (unique, 0x10002cff, 4)]
[(unique, 0x100025bb, 8) COPY (stack, 0xfffffffffffffb30, 8), (stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(unique, 0x1000254f, 8) COPY (stack, 0xfffffffffffffaf8, 8), (stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(register, 0x80, 4) SUBPIECE (register, 0x80, 8) , (const, 0x0, 4), (register, 0x80, 8) MULTIEQUAL (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8)]
[(stack, 0xfffffffffffffb30, 8) COPY (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000335a, 8), (unique, 0x1000335a, 8) INT_ADD (unique, 0x10003352, 8) , (const, 0x1, 8), (unique, 0x10003352, 8) CAST (stack, 0xfffffffffffffb30, 8), (stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffaf8, 8) CAST (unique, 0x10003366, 8), (unique, 0x10003366, 8) INT_ADD (unique, 0x1000237f, 8) , (const, 0x1, 4), (unique, 0x1000237f, 8) INT_LEFT (unique, 0x10002377, 8) , (const, 0x20, 8), (unique, 0x10002377, 8) INT_SEXT (unique, 0x10003362, 4), (unique, 0x10003362, 4) CAST (stack, 0xfffffffffffffafc, 4), (stack, 0xfffffffffffffafc, 4) SUBPIECE (stack, 0xfffffffffffffaf8, 8) , (const, 0x4, 8), (stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(unique, 0x10002b6b, 4) COPY (register, 0x90, 4), (register, 0x90, 4) COPY (unique, 0x10002bc7, 4), (unique, 0x10002bc7, 4) MULTIEQUAL (unique, 0x10002ba7, 4) , (unique, 0x10002bab, 4) , (unique, 0x10002baf, 4) , (unique, 0x10002bb3, 4) , (unique, 0x10002bb7, 4) , (unique, 0x10002bbb, 4) , (unique, 0x10002bbf, 4) , (unique, 0x10002bc3, 4)]
[(unique, 0x10002b87, 4) COPY (unique, 0x10002b07, 4), (unique, 0x10002b07, 4) COPY (register, 0x90, 4), (register, 0x90, 4) COPY (unique, 0x10002bc7, 4), (unique, 0x10002bc7, 4) MULTIEQUAL (unique, 0x10002ba7, 4) , (unique, 0x10002bab, 4) , (unique, 0x10002baf, 4) , (unique, 0x10002bb3, 4) , (unique, 0x10002bb7, 4) , (unique, 0x10002bbb, 4) , (unique, 0x10002bbf, 4) , (unique, 0x10002bc3, 4)]
[(unique, 0x10002dab, 4) COPY (register, 0x88, 4), (register, 0x88, 4) SUBPIECE (register, 0x88, 8) , (const, 0x0, 4), (register, 0x88, 8) MULTIEQUAL (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8)]
[ ---  BRANCHIND (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000334a, 8), (unique, 0x1000334a, 8) INT_ADD (unique, 0x10003342, 8) , (const, 0x1, 8), (unique, 0x10003342, 8) CAST (stack, 0xfffffffffffffb30, 8), (stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb30, 8) COPY (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10003386, 8), (unique, 0x10003386, 8) INT_ADD (unique, 0x1000337e, 8) , (const, 0x2, 8), (unique, 0x1000337e, 8) CAST (unique, 0x100025bb, 8)]
[(stack, 0xfffffffffffffaf8, 8) COPY (unique, 0x10001089, 8), (unique, 0x10001089, 8) CAST (unique, 0x10003396, 8), (unique, 0x10003396, 8) INT_AND (unique, 0x1000338e, 8) , (const, 0xffffffff00000000, 8), (unique, 0x1000338e, 8) CAST (unique, 0x1000254f, 8)]
[(stack, 0xfffffffffffffabc, 4) COPY (const, 0x1, 4)]
[(unique, 0x100029f7, 4) COPY (register, 0x90, 4)]
[(unique, 0x10002a27, 4) COPY (register, 0x90, 4)]
[(unique, 0x10002a5b, 4) COPY (register, 0x90, 4)]
[(unique, 0x10002ab7, 4) COPY (register, 0x98, 4)]
[(unique, 0x10002c77, 4) COPY (register, 0x90, 4)]
[(unique, 0x10002ca7, 4) COPY (unique, 0x10002b57, 4), (unique, 0x10002b57, 4) COPY (register, 0x90, 4)]
[(unique, 0x10002e17, 4) COPY (register, 0x80, 4)]
[ ---  BRANCHIND (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10003376, 8), (unique, 0x10003376, 8) INT_ADD (unique, 0x1000336e, 8) , (const, 0x2, 8), (unique, 0x1000336e, 8) CAST (unique, 0x100025bb, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbc0, 8) MULTIEQUAL (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8)]
[(stack, 0xfffffffffffffbb8, 8) MULTIEQUAL (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb90, 8) MULTIEQUAL (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8)]
[(stack, 0xfffffffffffffb88, 8) MULTIEQUAL (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb74, 4) MULTIEQUAL (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4)]
[(stack, 0xfffffffffffffb70, 4) MULTIEQUAL (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4)]
[(stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb64, 4) MULTIEQUAL (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4)]
[(stack, 0xfffffffffffffb62, 2) MULTIEQUAL (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2)]
[(stack, 0xfffffffffffffb60, 2) MULTIEQUAL (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2)]
[(stack, 0xfffffffffffffb5c, 4) MULTIEQUAL (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4)]
[(stack, 0xfffffffffffffb58, 4) MULTIEQUAL (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb24, 4) MULTIEQUAL (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4)]
[(stack, 0xfffffffffffffb20, 4) MULTIEQUAL (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae4, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[(stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffadc, 4) MULTIEQUAL (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4)]
[(stack, 0xfffffffffffffad8, 4) MULTIEQUAL (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4)]
[(stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffac8, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffac0, 8) MULTIEQUAL (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8)]
[(stack, 0xfffffffffffffabc, 4) MULTIEQUAL (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4)]
[(stack, 0xfffffffffffffab8, 4) MULTIEQUAL (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4)]
[(stack, 0xfffffffffffffab4, 4) MULTIEQUAL (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4)]
[(stack, 0xfffffffffffffab3, 1) MULTIEQUAL (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1)]
[(stack, 0xfffffffffffffaac, 4) MULTIEQUAL (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4)]
[(stack, 0xfffffffffffffaa8, 4) MULTIEQUAL (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4)]
[(stack, 0xfffffffffffffaa4, 4) MULTIEQUAL (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4)]
[(stack, 0xfffffffffffffaa0, 4) MULTIEQUAL (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4)]
[(ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[(ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8)]
[(stack, 0xfffffffffffffb30, 8) COPY (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100033b6, 8), (unique, 0x100033b6, 8) INT_ADD (unique, 0x100033ae, 8) , (const, 0x1, 8), (unique, 0x100033ae, 8) CAST (stack, 0xfffffffffffffb30, 8), (stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb10, 8) CAST (unique, 0x100033c2, 8), (unique, 0x100033c2, 8) INT_ADD (unique, 0x1000235f, 8) , (const, 0x1, 4), (unique, 0x1000235f, 8) INT_LEFT (unique, 0x10002357, 8) , (const, 0x20, 8), (unique, 0x10002357, 8) INT_SEXT (unique, 0x100033be, 4), (unique, 0x100033be, 4) CAST (stack, 0xfffffffffffffb14, 4), (stack, 0xfffffffffffffb14, 4) SUBPIECE (stack, 0xfffffffffffffb10, 8) , (const, 0x4, 8), (stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(unique, 0x100029cf, 4) COPY (register, 0x90, 4), (register, 0x90, 4) COPY (unique, 0x10002c0b, 4), (unique, 0x10002c0b, 4) MULTIEQUAL (unique, 0x10002bcb, 4) , (unique, 0x10002bcf, 4) , (unique, 0x10002bd3, 4) , (unique, 0x10002bd7, 4) , (unique, 0x10002bdb, 4) , (unique, 0x10002bdf, 4) , (unique, 0x10002be3, 4) , (unique, 0x10002be7, 4) , (unique, 0x10002bcb, 4) , (unique, 0x10002bef, 4) , (unique, 0x10002bf3, 4) , (unique, 0x10002bd7, 4) , (unique, 0x10002bfb, 4) , (unique, 0x10002bff, 4) , (unique, 0x10002c03, 4) , (unique, 0x10002c07, 4)]
[(unique, 0x100029ff, 4) COPY (register, 0x90, 4), (register, 0x90, 4) COPY (unique, 0x10002c0b, 4), (unique, 0x10002c0b, 4) MULTIEQUAL (unique, 0x10002bcb, 4) , (unique, 0x10002bcf, 4) , (unique, 0x10002bd3, 4) , (unique, 0x10002bd7, 4) , (unique, 0x10002bdb, 4) , (unique, 0x10002bdf, 4) , (unique, 0x10002be3, 4) , (unique, 0x10002be7, 4) , (unique, 0x10002bcb, 4) , (unique, 0x10002bef, 4) , (unique, 0x10002bf3, 4) , (unique, 0x10002bd7, 4) , (unique, 0x10002bfb, 4) , (unique, 0x10002bff, 4) , (unique, 0x10002c03, 4) , (unique, 0x10002c07, 4)]
[(unique, 0x10002a33, 4) COPY (register, 0x90, 4), (register, 0x90, 4) COPY (unique, 0x10002c0b, 4), (unique, 0x10002c0b, 4) MULTIEQUAL (unique, 0x10002bcb, 4) , (unique, 0x10002bcf, 4) , (unique, 0x10002bd3, 4) , (unique, 0x10002bd7, 4) , (unique, 0x10002bdb, 4) , (unique, 0x10002bdf, 4) , (unique, 0x10002be3, 4) , (unique, 0x10002be7, 4) , (unique, 0x10002bcb, 4) , (unique, 0x10002bef, 4) , (unique, 0x10002bf3, 4) , (unique, 0x10002bd7, 4) , (unique, 0x10002bfb, 4) , (unique, 0x10002bff, 4) , (unique, 0x10002c03, 4) , (unique, 0x10002c07, 4)]
[(unique, 0x10002a63, 4) COPY (register, 0x98, 4), (register, 0x98, 4) COPY (const, 0x0, 4)]
[(unique, 0x10002a8f, 4) COPY (register, 0x98, 4), (register, 0x98, 4) COPY (const, 0x0, 4)]
[(unique, 0x10002b5f, 4) COPY (register, 0x90, 4), (register, 0x90, 4) COPY (unique, 0x10002c0b, 4), (unique, 0x10002c0b, 4) MULTIEQUAL (unique, 0x10002bcb, 4) , (unique, 0x10002bcf, 4) , (unique, 0x10002bd3, 4) , (unique, 0x10002bd7, 4) , (unique, 0x10002bdb, 4) , (unique, 0x10002bdf, 4) , (unique, 0x10002be3, 4) , (unique, 0x10002be7, 4) , (unique, 0x10002bcb, 4) , (unique, 0x10002bef, 4) , (unique, 0x10002bf3, 4) , (unique, 0x10002bd7, 4) , (unique, 0x10002bfb, 4) , (unique, 0x10002bff, 4) , (unique, 0x10002c03, 4) , (unique, 0x10002c07, 4)]
[(unique, 0x10002b7b, 4) COPY (unique, 0x10002afb, 4), (unique, 0x10002afb, 4) COPY (register, 0x90, 4), (register, 0x90, 4) COPY (unique, 0x10002c0b, 4), (unique, 0x10002c0b, 4) MULTIEQUAL (unique, 0x10002bcb, 4) , (unique, 0x10002bcf, 4) , (unique, 0x10002bd3, 4) , (unique, 0x10002bd7, 4) , (unique, 0x10002bdb, 4) , (unique, 0x10002bdf, 4) , (unique, 0x10002be3, 4) , (unique, 0x10002be7, 4) , (unique, 0x10002bcb, 4) , (unique, 0x10002bef, 4) , (unique, 0x10002bf3, 4) , (unique, 0x10002bd7, 4) , (unique, 0x10002bfb, 4) , (unique, 0x10002bff, 4) , (unique, 0x10002c03, 4) , (unique, 0x10002c07, 4)]
[(unique, 0x10002c67, 4) COPY (register, 0x90, 4), (register, 0x90, 4) COPY (unique, 0x10002c0b, 4), (unique, 0x10002c0b, 4) MULTIEQUAL (unique, 0x10002bcb, 4) , (unique, 0x10002bcf, 4) , (unique, 0x10002bd3, 4) , (unique, 0x10002bd7, 4) , (unique, 0x10002bdb, 4) , (unique, 0x10002bdf, 4) , (unique, 0x10002be3, 4) , (unique, 0x10002be7, 4) , (unique, 0x10002bcb, 4) , (unique, 0x10002bef, 4) , (unique, 0x10002bf3, 4) , (unique, 0x10002bd7, 4) , (unique, 0x10002bfb, 4) , (unique, 0x10002bff, 4) , (unique, 0x10002c03, 4) , (unique, 0x10002c07, 4)]
[(unique, 0x10002c7f, 4) COPY (unique, 0x10002b2f, 4), (unique, 0x10002b2f, 4) COPY (register, 0x90, 4), (register, 0x90, 4) COPY (unique, 0x10002c0b, 4), (unique, 0x10002c0b, 4) MULTIEQUAL (unique, 0x10002bcb, 4) , (unique, 0x10002bcf, 4) , (unique, 0x10002bd3, 4) , (unique, 0x10002bd7, 4) , (unique, 0x10002bdb, 4) , (unique, 0x10002bdf, 4) , (unique, 0x10002be3, 4) , (unique, 0x10002be7, 4) , (unique, 0x10002bcb, 4) , (unique, 0x10002bef, 4) , (unique, 0x10002bf3, 4) , (unique, 0x10002bd7, 4) , (unique, 0x10002bfb, 4) , (unique, 0x10002bff, 4) , (unique, 0x10002c03, 4) , (unique, 0x10002c07, 4)]
[(unique, 0x10002d9f, 4) COPY (register, 0x88, 4), (register, 0x88, 4) SUBPIECE (register, 0x88, 8) , (const, 0x0, 4), (register, 0x88, 8) MULTIEQUAL (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8)]
[(unique, 0x10002def, 4) COPY (register, 0x80, 4), (register, 0x80, 4) SUBPIECE (register, 0x80, 8) , (const, 0x0, 4), (register, 0x80, 8) MULTIEQUAL (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8)]
[ ---  BRANCHIND (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100033a6, 8), (unique, 0x100033a6, 8) INT_ADD (unique, 0x1000339e, 8) , (const, 0x1, 8), (unique, 0x1000339e, 8) CAST (stack, 0xfffffffffffffb30, 8), (stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbc0, 8) MULTIEQUAL (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8)]
[(stack, 0xfffffffffffffbb8, 8) MULTIEQUAL (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb90, 8) MULTIEQUAL (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8)]
[(stack, 0xfffffffffffffb88, 8) MULTIEQUAL (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb74, 4) MULTIEQUAL (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4)]
[(stack, 0xfffffffffffffb70, 4) MULTIEQUAL (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4)]
[(stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb64, 4) MULTIEQUAL (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4)]
[(stack, 0xfffffffffffffb62, 2) MULTIEQUAL (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2)]
[(stack, 0xfffffffffffffb60, 2) MULTIEQUAL (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2)]
[(stack, 0xfffffffffffffb5c, 4) MULTIEQUAL (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4)]
[(stack, 0xfffffffffffffb58, 4) MULTIEQUAL (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb24, 4) MULTIEQUAL (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4)]
[(stack, 0xfffffffffffffb20, 4) MULTIEQUAL (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae4, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[(stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffadc, 4) MULTIEQUAL (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4)]
[(stack, 0xfffffffffffffad8, 4) MULTIEQUAL (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4)]
[(stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffac8, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffac0, 8) MULTIEQUAL (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8)]
[(stack, 0xfffffffffffffabc, 4) MULTIEQUAL (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4)]
[(stack, 0xfffffffffffffab8, 4) MULTIEQUAL (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4)]
[(stack, 0xfffffffffffffab4, 4) MULTIEQUAL (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4)]
[(stack, 0xfffffffffffffab3, 1) MULTIEQUAL (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1)]
[(stack, 0xfffffffffffffaac, 4) MULTIEQUAL (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4)]
[(stack, 0xfffffffffffffaa8, 4) MULTIEQUAL (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4)]
[(stack, 0xfffffffffffffaa4, 4) MULTIEQUAL (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4)]
[(stack, 0xfffffffffffffaa0, 4) MULTIEQUAL (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4)]
[(ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[(ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8)]
[(stack, 0xfffffffffffffb30, 8) COPY (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100033e2, 8), (unique, 0x100033e2, 8) INT_ADD (unique, 0x100033da, 8) , (const, 0x1, 8), (unique, 0x100033da, 8) CAST (stack, 0xfffffffffffffb30, 8), (stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb10, 8) CAST (unique, 0x100033ee, 8), (unique, 0x100033ee, 8) INT_ADD (unique, 0x1000236f, 8) , (const, 0x1, 4), (unique, 0x1000236f, 8) INT_LEFT (unique, 0x10002367, 8) , (const, 0x20, 8), (unique, 0x10002367, 8) INT_SEXT (unique, 0x100033ea, 4), (unique, 0x100033ea, 4) CAST (stack, 0xfffffffffffffb14, 4), (stack, 0xfffffffffffffb14, 4) SUBPIECE (stack, 0xfffffffffffffb10, 8) , (const, 0x4, 8), (stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(unique, 0x100029d3, 4) COPY (register, 0x90, 4), (register, 0x90, 4) COPY (unique, 0x10002af3, 4), (unique, 0x10002af3, 4) MULTIEQUAL (unique, 0x10002acf, 4) , (unique, 0x10002ad3, 4) , (unique, 0x10002ad7, 4) , (unique, 0x10002adb, 4) , (unique, 0x10002adf, 4) , (unique, 0x10002ae3, 4) , (unique, 0x10002ae7, 4) , (unique, 0x10002aeb, 4) , (unique, 0x10002aef, 4)]
[(unique, 0x10002a03, 4) COPY (register, 0x90, 4), (register, 0x90, 4) COPY (unique, 0x10002af3, 4), (unique, 0x10002af3, 4) MULTIEQUAL (unique, 0x10002acf, 4) , (unique, 0x10002ad3, 4) , (unique, 0x10002ad7, 4) , (unique, 0x10002adb, 4) , (unique, 0x10002adf, 4) , (unique, 0x10002ae3, 4) , (unique, 0x10002ae7, 4) , (unique, 0x10002aeb, 4) , (unique, 0x10002aef, 4)]
[(unique, 0x10002a37, 4) COPY (register, 0x90, 4), (register, 0x90, 4) COPY (unique, 0x10002af3, 4), (unique, 0x10002af3, 4) MULTIEQUAL (unique, 0x10002acf, 4) , (unique, 0x10002ad3, 4) , (unique, 0x10002ad7, 4) , (unique, 0x10002adb, 4) , (unique, 0x10002adf, 4) , (unique, 0x10002ae3, 4) , (unique, 0x10002ae7, 4) , (unique, 0x10002aeb, 4) , (unique, 0x10002aef, 4)]
[(unique, 0x10002a67, 4) COPY (register, 0x98, 4), (register, 0x98, 4) COPY (const, 0x1, 4)]
[(unique, 0x10002a93, 4) COPY (register, 0x98, 4), (register, 0x98, 4) COPY (const, 0x1, 4)]
[(unique, 0x10002b63, 4) COPY (register, 0x90, 4), (register, 0x90, 4) COPY (unique, 0x10002af3, 4), (unique, 0x10002af3, 4) MULTIEQUAL (unique, 0x10002acf, 4) , (unique, 0x10002ad3, 4) , (unique, 0x10002ad7, 4) , (unique, 0x10002adb, 4) , (unique, 0x10002adf, 4) , (unique, 0x10002ae3, 4) , (unique, 0x10002ae7, 4) , (unique, 0x10002aeb, 4) , (unique, 0x10002aef, 4)]
[(unique, 0x10002b7f, 4) COPY (unique, 0x10002aff, 4), (unique, 0x10002aff, 4) COPY (register, 0x90, 4), (register, 0x90, 4) COPY (unique, 0x10002af3, 4), (unique, 0x10002af3, 4) MULTIEQUAL (unique, 0x10002acf, 4) , (unique, 0x10002ad3, 4) , (unique, 0x10002ad7, 4) , (unique, 0x10002adb, 4) , (unique, 0x10002adf, 4) , (unique, 0x10002ae3, 4) , (unique, 0x10002ae7, 4) , (unique, 0x10002aeb, 4) , (unique, 0x10002aef, 4)]
[(unique, 0x10002c6b, 4) COPY (register, 0x90, 4), (register, 0x90, 4) COPY (unique, 0x10002af3, 4), (unique, 0x10002af3, 4) MULTIEQUAL (unique, 0x10002acf, 4) , (unique, 0x10002ad3, 4) , (unique, 0x10002ad7, 4) , (unique, 0x10002adb, 4) , (unique, 0x10002adf, 4) , (unique, 0x10002ae3, 4) , (unique, 0x10002ae7, 4) , (unique, 0x10002aeb, 4) , (unique, 0x10002aef, 4)]
[(unique, 0x10002c83, 4) COPY (unique, 0x10002b33, 4), (unique, 0x10002b33, 4) COPY (register, 0x90, 4), (register, 0x90, 4) COPY (unique, 0x10002af3, 4), (unique, 0x10002af3, 4) MULTIEQUAL (unique, 0x10002acf, 4) , (unique, 0x10002ad3, 4) , (unique, 0x10002ad7, 4) , (unique, 0x10002adb, 4) , (unique, 0x10002adf, 4) , (unique, 0x10002ae3, 4) , (unique, 0x10002ae7, 4) , (unique, 0x10002aeb, 4) , (unique, 0x10002aef, 4)]
[(unique, 0x10002da3, 4) COPY (register, 0x88, 4), (register, 0x88, 4) SUBPIECE (register, 0x88, 8) , (const, 0x0, 4), (register, 0x88, 8) MULTIEQUAL (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8)]
[(unique, 0x10002df3, 4) COPY (register, 0x80, 4), (register, 0x80, 4) SUBPIECE (register, 0x80, 8) , (const, 0x0, 4), (register, 0x80, 8) MULTIEQUAL (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8)]
[ ---  BRANCHIND (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100033d2, 8), (unique, 0x100033d2, 8) INT_ADD (unique, 0x100033ca, 8) , (const, 0x1, 8), (unique, 0x100033ca, 8) CAST (stack, 0xfffffffffffffb30, 8), (stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbc0, 8) MULTIEQUAL (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8)]
[(stack, 0xfffffffffffffbb8, 8) MULTIEQUAL (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb90, 8) MULTIEQUAL (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8)]
[(stack, 0xfffffffffffffb88, 8) MULTIEQUAL (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb74, 4) MULTIEQUAL (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4)]
[(stack, 0xfffffffffffffb70, 4) MULTIEQUAL (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4)]
[(stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb64, 4) MULTIEQUAL (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4)]
[(stack, 0xfffffffffffffb62, 2) MULTIEQUAL (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2)]
[(stack, 0xfffffffffffffb60, 2) MULTIEQUAL (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2)]
[(stack, 0xfffffffffffffb5c, 4) MULTIEQUAL (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4)]
[(stack, 0xfffffffffffffb58, 4) MULTIEQUAL (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb24, 4) MULTIEQUAL (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae4, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[(stack, 0xfffffffffffffadc, 4) MULTIEQUAL (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4)]
[(stack, 0xfffffffffffffad8, 4) MULTIEQUAL (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4)]
[(stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffac8, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffac0, 8) MULTIEQUAL (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8)]
[(stack, 0xfffffffffffffabc, 4) MULTIEQUAL (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4)]
[(stack, 0xfffffffffffffab8, 4) MULTIEQUAL (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4)]
[(stack, 0xfffffffffffffab4, 4) MULTIEQUAL (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4)]
[(stack, 0xfffffffffffffab3, 1) MULTIEQUAL (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1)]
[(stack, 0xfffffffffffffaac, 4) MULTIEQUAL (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4)]
[(stack, 0xfffffffffffffaa8, 4) MULTIEQUAL (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4)]
[(stack, 0xfffffffffffffaa4, 4) MULTIEQUAL (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4)]
[(stack, 0xfffffffffffffaa0, 4) MULTIEQUAL (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4)]
[(ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[(ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb8, 1) MULTIEQUAL (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1)]
[(register, 0x90, 4) MULTIEQUAL (unique, 0x10002af7, 4) , (unique, 0x10002afb, 4) , (unique, 0x10002aff, 4) , (unique, 0x10002b03, 4) , (unique, 0x10002b07, 4) , (unique, 0x10002cc3, 4) , (unique, 0x10002cc7, 4) , (unique, 0x10002b13, 4) , (unique, 0x10002ccf, 4) , (unique, 0x10002cd3, 4) , (unique, 0x10002cd7, 4) , (unique, 0x10002cdb, 4) , (unique, 0x10002b07, 4)]
[(register, 0x88, 8) MULTIEQUAL (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8)]
[(register, 0x80, 8) MULTIEQUAL (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8)]
[(register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8)]
[(stack, 0xfffffffffffffaf8, 4) SUBPIECE (stack, 0xfffffffffffffaf8, 8) , (const, 0x0, 4), (stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffae8, 8) CAST (unique, 0x100033fa, 8), (unique, 0x100033fa, 8) INT_ADD (unique, 0x100023f7, 8) , (const, 0xa, 4), (unique, 0x100023f7, 8) INT_LEFT (unique, 0x100023ef, 8) , (const, 0x20, 8), (unique, 0x100023ef, 8) INT_SEXT (unique, 0x100033f6, 4), (unique, 0x100033f6, 4) CAST (stack, 0xfffffffffffffaec, 4), (stack, 0xfffffffffffffaec, 4) SUBPIECE (stack, 0xfffffffffffffae8, 8) , (const, 0x4, 8), (stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbc0, 8) MULTIEQUAL (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8)]
[(stack, 0xfffffffffffffbb8, 8) MULTIEQUAL (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb90, 8) MULTIEQUAL (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8)]
[(stack, 0xfffffffffffffb88, 8) MULTIEQUAL (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb74, 4) MULTIEQUAL (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4)]
[(stack, 0xfffffffffffffb70, 4) MULTIEQUAL (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4)]
[(stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb64, 4) MULTIEQUAL (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4)]
[(stack, 0xfffffffffffffb62, 2) MULTIEQUAL (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2)]
[(stack, 0xfffffffffffffb60, 2) MULTIEQUAL (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2)]
[(stack, 0xfffffffffffffb5c, 4) MULTIEQUAL (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4)]
[(stack, 0xfffffffffffffb58, 4) MULTIEQUAL (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb24, 4) MULTIEQUAL (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4)]
[(stack, 0xfffffffffffffb20, 4) MULTIEQUAL (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae4, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[(stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffadc, 4) MULTIEQUAL (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4)]
[(stack, 0xfffffffffffffad8, 4) MULTIEQUAL (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4)]
[(stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffac8, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffac0, 8) MULTIEQUAL (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8)]
[(stack, 0xfffffffffffffabc, 4) MULTIEQUAL (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4)]
[(stack, 0xfffffffffffffab8, 4) MULTIEQUAL (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4)]
[(stack, 0xfffffffffffffab4, 4) MULTIEQUAL (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4)]
[(stack, 0xfffffffffffffab3, 1) MULTIEQUAL (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1)]
[(stack, 0xfffffffffffffaac, 4) MULTIEQUAL (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4)]
[(stack, 0xfffffffffffffaa8, 4) MULTIEQUAL (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4)]
[(stack, 0xfffffffffffffaa4, 4) MULTIEQUAL (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4)]
[(stack, 0xfffffffffffffaa0, 4) MULTIEQUAL (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4)]
[(ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[(ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(register, 0xb8, 1) MULTIEQUAL (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8)]
[(register, 0x90, 4) COPY (unique, 0x10002cab, 4), (unique, 0x10002cab, 4) MULTIEQUAL (unique, 0x10002c7b, 4) , (unique, 0x10002c7f, 4) , (unique, 0x10002c83, 4) , (unique, 0x10002c87, 4) , (unique, 0x10002c8b, 4) , (unique, 0x10002c8f, 4) , (unique, 0x10002c93, 4) , (unique, 0x10002c97, 4) , (unique, 0x10002c9b, 4) , (unique, 0x10002c9f, 4) , (unique, 0x10002ca3, 4) , (unique, 0x10002ca7, 4)]
[(register, 0x80, 4) SUBPIECE (register, 0x80, 8) , (const, 0x0, 4), (register, 0x80, 8) MULTIEQUAL (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8)]
[(register, 0x88, 4) SUBPIECE (register, 0x88, 8) , (const, 0x0, 4), (register, 0x88, 8) MULTIEQUAL (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8)]
[ ---  CBRANCH (ram, 0x415fb8, 1) , (unique, 0xc900, 1), (unique, 0xc900, 1) INT_LESS (unique, 0xbc80, 4) , (const, 0x30, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10003402, 8), (unique, 0x10003402, 8) CAST (register, 0x10, 8)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x154c, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x154c, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x154c, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x154c, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x8, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x1, 8) , (const, 0x8, 8), (unique, 0xbd80, 8) CAST (unique, 0x1000340a, 8), (unique, 0x1000340a, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[ ---  BRANCH (ram, 0x414f84, 1)]
[(register, 0x10, 8) CAST (unique, 0x10003412, 8), (unique, 0x10003412, 8) INT_ADD (register, 0x10, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x2, 8) , (const, 0x8, 8), (register, 0x10, 8) INT_ZEXT (unique, 0xbc80, 4)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x1503, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x1503, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x1503, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x1503, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000341a, 8) , (register, 0x0, 4), (unique, 0x1000341a, 8) CAST (register, 0x10, 8), (register, 0x0, 4) INT_ADD (unique, 0xbc80, 4) , (const, 0x8, 4)]
[(ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[(ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[ ---  CBRANCH (ram, 0x4164a2, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x10003422, 8) , (const, 0x0, 8), (unique, 0x10003422, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x10, 8), (register, 0x10, 8) MULTIEQUAL (register, 0x10, 8) , (unique, 0xbd80, 8)]
[(stack, 0xfffffffffffffaf8, 8) COPY (unique, 0x1000342a, 8), (unique, 0x1000342a, 8) CAST (unique, 0xbd80, 8)]
[(register, 0xb8, 1) COPY (const, 0x78, 1)]
[(stack, 0xfffffffffffffac8, 8) CAST (unique, 0x1000343a, 8), (unique, 0x1000343a, 8) INT_AND (unique, 0x10003432, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10003432, 8) CAST (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffb10, 8) CAST (unique, 0x1000344a, 8), (unique, 0x1000344a, 8) INT_AND (unique, 0x10003442, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10003442, 8) CAST (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffadc, 4) COPY (const, 0x1, 4)]
[(stack, 0xfffffffffffffae8, 8) CAST (unique, 0x10003456, 8), (unique, 0x10003456, 8) INT_ADD (unique, 0x100023d7, 8) , (const, 0x10, 4), (unique, 0x100023d7, 8) INT_LEFT (unique, 0x100023cf, 8) , (const, 0x20, 8), (unique, 0x100023cf, 8) INT_SEXT (unique, 0x10003452, 4), (unique, 0x10003452, 4) CAST (stack, 0xfffffffffffffaec, 4), (stack, 0xfffffffffffffaec, 4) SUBPIECE (stack, 0xfffffffffffffae8, 8) , (const, 0x4, 8)]
[(unique, 0x10002abb, 4) COPY (register, 0x90, 4)]
[(register, 0x98, 8) COPY (const, 0x49a99e, 8)]
[ ---  CBRANCH (ram, 0x4164b6, 1) , (unique, 0xcc00, 1), (unique, 0xcc00, 1) INT_SLESS (unique, 0x1000345e, 4) , (const, 0x5, 4), (unique, 0x1000345e, 4) CAST (register, 0x80, 4)]
[(unique, 0x10000a50, 4) COPY (const, 0x5, 4)]
[(register, 0x80, 4) MULTIEQUAL (register, 0x80, 4) , (unique, 0x10000a50, 4)]
[ ---  CBRANCH (ram, 0x414752, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xb8, 1) , (const, 0x53, 1)]
[(stack, 0xfffffffffffffba8, 8) COPY (const, 0x0, 8)]
[(stack, 0xfffffffffffffb68, 8) COPY (const, 0x49a99e, 8)]
[ ---  BRANCH (ram, 0x416082, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbc0, 8) MULTIEQUAL (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8)]
[(stack, 0xfffffffffffffbb8, 8) MULTIEQUAL (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb90, 8) MULTIEQUAL (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8)]
[(stack, 0xfffffffffffffb88, 8) MULTIEQUAL (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb74, 4) MULTIEQUAL (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4)]
[(stack, 0xfffffffffffffb70, 4) MULTIEQUAL (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4)]
[(stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb64, 4) MULTIEQUAL (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4)]
[(stack, 0xfffffffffffffb62, 2) MULTIEQUAL (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2)]
[(stack, 0xfffffffffffffb60, 2) MULTIEQUAL (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2)]
[(stack, 0xfffffffffffffb5c, 4) MULTIEQUAL (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4)]
[(stack, 0xfffffffffffffb58, 4) MULTIEQUAL (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb24, 4) MULTIEQUAL (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae4, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[(stack, 0xfffffffffffffadc, 4) MULTIEQUAL (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4)]
[(stack, 0xfffffffffffffad8, 4) MULTIEQUAL (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4)]
[(stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffac8, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffac0, 8) MULTIEQUAL (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8)]
[(stack, 0xfffffffffffffabc, 4) MULTIEQUAL (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4)]
[(stack, 0xfffffffffffffab8, 4) MULTIEQUAL (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4)]
[(stack, 0xfffffffffffffab4, 4) MULTIEQUAL (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4)]
[(stack, 0xfffffffffffffab3, 1) MULTIEQUAL (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1)]
[(stack, 0xfffffffffffffaac, 4) MULTIEQUAL (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4)]
[(stack, 0xfffffffffffffaa8, 4) MULTIEQUAL (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4)]
[(stack, 0xfffffffffffffaa4, 4) MULTIEQUAL (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4)]
[(stack, 0xfffffffffffffaa0, 4) MULTIEQUAL (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4)]
[(ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[(ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb8, 1) MULTIEQUAL (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1)]
[(register, 0x90, 4) MULTIEQUAL (unique, 0x10002af7, 4) , (unique, 0x10002afb, 4) , (unique, 0x10002aff, 4) , (unique, 0x10002b03, 4) , (unique, 0x10002b07, 4) , (unique, 0x10002c47, 4) , (unique, 0x10002c4b, 4) , (unique, 0x10002b13, 4) , (unique, 0x10002c53, 4) , (unique, 0x10002c57, 4) , (unique, 0x10002c5b, 4) , (unique, 0x10002c5f, 4) , (unique, 0x10002b07, 4)]
[(register, 0x88, 8) MULTIEQUAL (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8)]
[(register, 0x80, 8) MULTIEQUAL (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8)]
[(register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8)]
[(stack, 0xfffffffffffffaf8, 4) SUBPIECE (stack, 0xfffffffffffffaf8, 8) , (const, 0x0, 4), (stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffae8, 8) CAST (unique, 0x10003466, 8), (unique, 0x10003466, 8) INT_ADD (unique, 0x10002447, 8) , (const, 0x8, 4), (unique, 0x10002447, 8) INT_LEFT (unique, 0x1000243f, 8) , (const, 0x20, 8), (unique, 0x1000243f, 8) INT_SEXT (unique, 0x10003462, 4), (unique, 0x10003462, 4) CAST (stack, 0xfffffffffffffaec, 4), (stack, 0xfffffffffffffaec, 4) SUBPIECE (stack, 0xfffffffffffffae8, 8) , (const, 0x4, 8), (stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[ ---  BRANCH (ram, 0x415286, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbc0, 8) MULTIEQUAL (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8)]
[(stack, 0xfffffffffffffbb8, 8) MULTIEQUAL (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb90, 8) MULTIEQUAL (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8)]
[(stack, 0xfffffffffffffb88, 8) MULTIEQUAL (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb74, 4) MULTIEQUAL (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4)]
[(stack, 0xfffffffffffffb70, 4) MULTIEQUAL (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4)]
[(stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb64, 4) MULTIEQUAL (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4)]
[(stack, 0xfffffffffffffb62, 2) MULTIEQUAL (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2)]
[(stack, 0xfffffffffffffb60, 2) MULTIEQUAL (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2)]
[(stack, 0xfffffffffffffb5c, 4) MULTIEQUAL (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4)]
[(stack, 0xfffffffffffffb58, 4) MULTIEQUAL (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb24, 4) MULTIEQUAL (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4)]
[(stack, 0xfffffffffffffb20, 4) MULTIEQUAL (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae4, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[(stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffadc, 4) MULTIEQUAL (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4)]
[(stack, 0xfffffffffffffad8, 4) MULTIEQUAL (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4)]
[(stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffac8, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffac0, 8) MULTIEQUAL (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8)]
[(stack, 0xfffffffffffffabc, 4) MULTIEQUAL (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4)]
[(stack, 0xfffffffffffffab8, 4) MULTIEQUAL (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4)]
[(stack, 0xfffffffffffffab4, 4) MULTIEQUAL (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4)]
[(stack, 0xfffffffffffffab3, 1) MULTIEQUAL (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1)]
[(stack, 0xfffffffffffffaac, 4) MULTIEQUAL (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4)]
[(stack, 0xfffffffffffffaa4, 4) MULTIEQUAL (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4)]
[(stack, 0xfffffffffffffaa0, 4) MULTIEQUAL (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4)]
[(ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[(ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x88, 8) MULTIEQUAL (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8)]
[(register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x414f2e, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xfffffffffffffaa8, 4) , (const, 0x0, 4), (stack, 0xfffffffffffffaa8, 4) MULTIEQUAL (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4)]
[(register, 0x18, 8) CAST (unique, 0x1000346e, 8), (unique, 0x1000346e, 8) INT_ZEXT (stack, 0xfffffffffffffab8, 4)]
[ ---  CBRANCH (ram, 0x416885, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xfffffffffffffab8, 4) , (const, 0x0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10003486, 8) , (const, 0x416894, 8), (unique, 0x10003486, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000348e, 8) , (const, 0x4168a0, 8), (unique, 0x1000348e, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x167d, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1677, 4)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x167d, 4), (ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x1677, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x167d, 4), (ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x1677, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x167d, 4), (ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x1677, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x167d, 4), (ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x1677, 4)]
[(stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x167d, 4), (stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x167c, 4), (stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x1677, 4), (stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x1676, 4)]
[(stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x167d, 4), (stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x167c, 4), (stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x1677, 4), (stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x1676, 4)]
[(stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x167d, 4), (stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x167c, 4), (stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x1677, 4), (stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x1676, 4)]
[(stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x167d, 4), (stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x167c, 4), (stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x1677, 4), (stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x1676, 4)]
[(stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x167d, 4), (stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x167c, 4), (stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x1677, 4), (stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x1676, 4)]
[(stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x167d, 4), (stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x167c, 4), (stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x1677, 4), (stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x1676, 4)]
[(stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x167d, 4), (stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x167c, 4), (stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x1677, 4), (stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x1676, 4)]
[(stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x167d, 4), (stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x167c, 4), (stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x1677, 4), (stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x1676, 4)]
[(stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x167d, 4), (stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x167c, 4), (stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x1677, 4), (stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x1676, 4)]
[(stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x167d, 4), (stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x167c, 4), (stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x1677, 4), (stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x1676, 4)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x167d, 4), (stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x167c, 4), (stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x1677, 4), (stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x1676, 4)]
[(stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x167d, 4), (stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x167c, 4), (stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x1677, 4), (stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x1676, 4)]
[(stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x167d, 4), (stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x167c, 4), (stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x1677, 4), (stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x1676, 4)]
[(stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x167d, 4), (stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x167c, 4), (stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x1677, 4), (stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x1676, 4)]
[(stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x167d, 4), (stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x167c, 4), (stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x1677, 4), (stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x1676, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x167d, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x167c, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x1677, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x1676, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x167d, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x167c, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x1677, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x1676, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x167d, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x167c, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x1677, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x1676, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x167d, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x167c, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x1677, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x1676, 4)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x167d, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x167c, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x1677, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x1676, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x167d, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x167c, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x1677, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x1676, 4)]
[(stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x167d, 4), (stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x167c, 4), (stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x1677, 4), (stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x1676, 4)]
[(stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x167d, 4), (stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x167c, 4), (stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x1677, 4), (stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x1676, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x167d, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x167c, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x1677, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x1676, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x167d, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x167c, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x1677, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x1676, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x167d, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x167c, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x1677, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x1676, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x167d, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x167c, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x1677, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x1676, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x167d, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x167c, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x1677, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x1676, 4)]
[(stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x167d, 4), (stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x167c, 4), (stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x1677, 4), (stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x1676, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x167d, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x167c, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x1677, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x1676, 4)]
[(stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x167d, 4), (stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x167c, 4), (stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x1677, 4), (stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x1676, 4)]
[(stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x167d, 4), (stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x167c, 4), (stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x1677, 4), (stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x1676, 4)]
[(stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x167d, 4), (stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x167c, 4), (stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x1677, 4), (stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x1676, 4)]
[(stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x167d, 4), (stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x167c, 4), (stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x1677, 4), (stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x1676, 4)]
[(stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x167d, 4), (stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x167c, 4), (stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x1677, 4), (stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x1676, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x167d, 4), (stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x167c, 4), (stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x1677, 4), (stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x1676, 4)]
[(stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x167d, 4), (stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x167c, 4), (stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x1677, 4), (stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x1676, 4)]
[(stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x167d, 4), (stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x167c, 4), (stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x1677, 4), (stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x1676, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x167d, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x167c, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x1677, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x1676, 4)]
[(stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x167d, 4), (stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x167c, 4), (stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x1677, 4), (stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x1676, 4)]
[(stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x167d, 4), (stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x167c, 4), (stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x1677, 4), (stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x1676, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x167d, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x167c, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x1677, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x1676, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x167d, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x167c, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x1677, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x1676, 4)]
[(stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x167d, 4), (stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x167c, 4), (stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x1677, 4), (stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x1676, 4)]
[(stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x167d, 4), (stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x167c, 4), (stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x1677, 4), (stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x1676, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x167d, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x167c, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1677, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1676, 4)]
[(register, 0x88, 4) SUBPIECE (register, 0x88, 8) , (const, 0x0, 4), (register, 0x88, 8) INT_AND (unique, 0x10003496, 8) , (const, 0xffffffff, 8), (unique, 0x10003496, 8) CAST (stack, 0xfffffffffffffb08, 8), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x167d, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x167c, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x1677, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x1676, 4), (stack, 0xfffffffffffffb08, 8) CAST (unique, 0x1000347e, 8), (unique, 0x1000347e, 8) INT_OR (unique, 0x10001321, 8) , (register, 0x88, 8), (unique, 0x10001321, 8) INT_AND (unique, 0x10003476, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10003476, 8) CAST (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffab8, 4) COPY (register, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x458bc0, 8) , (register, 0x30, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) INT_ADD (register, 0x0, 8) , (const, 0x1, 8), (register, 0x0, 8) CALL (ram, 0x401190, 8) , (register, 0x30, 8)]
[ ---  CBRANCH (ram, 0x414f2e, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (unique, 0x1000349e, 4) , (const, 0x0, 4), (unique, 0x1000349e, 4) CAST (register, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x458bc0, 8) , (register, 0x30, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) INT_ADD (register, 0x0, 8) , (const, 0x1, 8), (register, 0x0, 8) CALL (ram, 0x401190, 8) , (register, 0x30, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100034a2, 8) , (const, 0x4168c1, 8), (unique, 0x100034a2, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x88, 4) INDIRECT (register, 0x88, 4) , (const, 0x1693, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1693, 4)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x1693, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x1693, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x1693, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x1693, 4)]
[(stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x1693, 4), (stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x1692, 4)]
[(stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x1693, 4), (stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x1692, 4)]
[(stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x1693, 4), (stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x1692, 4)]
[(stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x1693, 4), (stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x1692, 4)]
[(stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x1693, 4), (stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x1692, 4)]
[(stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x1693, 4), (stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x1692, 4)]
[(stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x1693, 4), (stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x1692, 4)]
[(stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x1693, 4), (stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x1692, 4)]
[(stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x1693, 4), (stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x1692, 4)]
[(stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x1693, 4), (stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x1692, 4)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x1693, 4), (stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x1692, 4)]
[(stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x1693, 4), (stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x1692, 4)]
[(stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x1693, 4), (stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x1692, 4)]
[(stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x1693, 4), (stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x1692, 4)]
[(stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x1693, 4), (stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x1692, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x1693, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x1692, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x1693, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x1692, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x1693, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x1692, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x1693, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x1692, 4)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x1693, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x1692, 4)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x1693, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x1692, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x1693, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x1692, 4)]
[(stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x1693, 4), (stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x1692, 4)]
[(stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x1693, 4), (stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x1692, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x1693, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x1692, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x1693, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x1692, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x1693, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x1692, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x1693, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x1692, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x1693, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x1692, 4)]
[(stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x1693, 4), (stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x1692, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x1693, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x1692, 4)]
[(stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x1693, 4), (stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x1692, 4)]
[(stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x1693, 4), (stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x1692, 4)]
[(stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x1693, 4), (stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x1692, 4)]
[(stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x1693, 4), (stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x1692, 4)]
[(stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x1693, 4), (stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x1692, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x1693, 4), (stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x1692, 4)]
[(stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x1693, 4), (stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x1692, 4)]
[(stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x1693, 4), (stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x1692, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x1693, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x1692, 4)]
[(stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x1693, 4), (stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x1692, 4)]
[(stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x1693, 4), (stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x1692, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x1693, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x1692, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x1693, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x1692, 4)]
[(stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x1693, 4), (stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x1692, 4)]
[(stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x1693, 4), (stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x1692, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1693, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1692, 4)]
[ ---  CALL (ram, 0x41b360, 8) , (unique, 0x10001b38, 8), (unique, 0x10001b38, 8) COPY (const, 0x49aa80, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbc0, 8) MULTIEQUAL (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8)]
[(stack, 0xfffffffffffffbb8, 8) MULTIEQUAL (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb90, 8) MULTIEQUAL (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8)]
[(stack, 0xfffffffffffffb88, 8) MULTIEQUAL (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb74, 4) MULTIEQUAL (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4)]
[(stack, 0xfffffffffffffb70, 4) MULTIEQUAL (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4)]
[(stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb64, 4) MULTIEQUAL (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4)]
[(stack, 0xfffffffffffffb62, 2) MULTIEQUAL (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2)]
[(stack, 0xfffffffffffffb60, 2) MULTIEQUAL (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2)]
[(stack, 0xfffffffffffffb5c, 4) MULTIEQUAL (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4)]
[(stack, 0xfffffffffffffb58, 4) MULTIEQUAL (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb24, 4) MULTIEQUAL (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4)]
[(stack, 0xfffffffffffffb20, 4) MULTIEQUAL (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae4, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[(stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffadc, 4) MULTIEQUAL (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4)]
[(stack, 0xfffffffffffffad8, 4) MULTIEQUAL (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4)]
[(stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffac8, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffac0, 8) MULTIEQUAL (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8)]
[(stack, 0xfffffffffffffabc, 4) MULTIEQUAL (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4)]
[(stack, 0xfffffffffffffab8, 4) MULTIEQUAL (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4)]
[(stack, 0xfffffffffffffab4, 4) MULTIEQUAL (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4)]
[(stack, 0xfffffffffffffab3, 1) MULTIEQUAL (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1)]
[(stack, 0xfffffffffffffaac, 4) MULTIEQUAL (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4)]
[(stack, 0xfffffffffffffaa8, 4) MULTIEQUAL (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4)]
[(stack, 0xfffffffffffffaa4, 4) MULTIEQUAL (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4)]
[(stack, 0xfffffffffffffaa0, 4) MULTIEQUAL (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4)]
[(ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[(ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100034aa, 8), (unique, 0x100034aa, 8) CAST (register, 0x10, 8)]
[(register, 0x88, 4) SUBPIECE (register, 0x88, 8) , (const, 0x0, 4), (register, 0x88, 8) MULTIEQUAL (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8)]
[ ---  CBRANCH (ram, 0x415fd0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xfffffffffffffb10, 4) , (const, 0x0, 4), (stack, 0xfffffffffffffb10, 4) SUBPIECE (stack, 0xfffffffffffffb10, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[ ---  CBRANCH (ram, 0x41660c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xfffffffffffffabc, 4) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x416b35, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xfffffffffffffaf8, 4) , (const, 0x0, 4), (stack, 0xfffffffffffffaf8, 4) SUBPIECE (stack, 0xfffffffffffffaf8, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x416db7, 1) , (unique, 0xc900, 1), (unique, 0xc900, 1) INT_LESS (unique, 0xbc80, 4) , (const, 0x30, 4)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x166f, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x166f, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x166f, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x166f, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x8, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x1, 8) , (const, 0x8, 8), (unique, 0xbd80, 8) CAST (unique, 0x100034b2, 8), (unique, 0x100034b2, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[ ---  BRANCH (ram, 0x416b4a, 1)]
[(register, 0x10, 8) CAST (unique, 0x100034ba, 8), (unique, 0x100034ba, 8) INT_ADD (register, 0x10, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x2, 8) , (const, 0x8, 8), (register, 0x10, 8) INT_ZEXT (unique, 0xbc80, 4)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x1662, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x1662, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x1662, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x1662, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100034c2, 8) , (register, 0x0, 4), (unique, 0x100034c2, 8) CAST (register, 0x10, 8), (register, 0x0, 4) INT_ADD (unique, 0xbc80, 4) , (const, 0x8, 4)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x1666, 4), (ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x1666, 4), (ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x1666, 4), (ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x1666, 4), (ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0xbd80, 8) , (register, 0x88, 2), (register, 0x88, 2) SUBPIECE (register, 0x88, 8) , (const, 0x0, 4), (unique, 0xbd80, 8) CAST (unique, 0x100034ca, 8), (unique, 0x100034ca, 8) LOAD (const, 0x1b1, 4) , (register, 0x10, 8), (register, 0x10, 8) MULTIEQUAL (register, 0x10, 8) , (unique, 0xbd80, 8)]
[ ---  BRANCH (ram, 0x414640, 1)]
[ ---  CBRANCH (ram, 0x416dc8, 1) , (unique, 0xc900, 1), (unique, 0xc900, 1) INT_LESS (unique, 0xbc80, 4) , (const, 0x30, 4)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x163a, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x163a, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x163a, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x163a, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x8, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x1, 8) , (const, 0x8, 8), (unique, 0xbd80, 8) CAST (unique, 0x100034d2, 8), (unique, 0x100034d2, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[ ---  BRANCH (ram, 0x416631, 1)]
[(register, 0x10, 8) CAST (unique, 0x100034da, 8), (unique, 0x100034da, 8) INT_ADD (register, 0x10, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x2, 8) , (const, 0x8, 8), (register, 0x10, 8) INT_ZEXT (unique, 0xbc80, 4)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x162d, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x162d, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x162d, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x162d, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100034e2, 8) , (register, 0x0, 4), (unique, 0x100034e2, 8) CAST (register, 0x10, 8), (register, 0x0, 4) INT_ADD (unique, 0xbc80, 4) , (const, 0x8, 4)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x1631, 4), (ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x1631, 4), (ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x1631, 4), (ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x1631, 4), (ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0xbd80, 8) , (register, 0x88, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x10, 8), (register, 0x10, 8) MULTIEQUAL (register, 0x10, 8) , (unique, 0xbd80, 8)]
[ ---  BRANCH (ram, 0x414640, 1)]
[ ---  CBRANCH (ram, 0x416b99, 1) , (unique, 0xc900, 1), (unique, 0xc900, 1) INT_LESS (unique, 0xbc80, 4) , (const, 0x30, 4)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x15f6, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x15f6, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x15f6, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x15f6, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x8, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x1, 8) , (const, 0x8, 8), (unique, 0xbd80, 8) CAST (unique, 0x100034ea, 8), (unique, 0x100034ea, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[ ---  BRANCH (ram, 0x415ff5, 1)]
[(register, 0x10, 8) CAST (unique, 0x100034f2, 8), (unique, 0x100034f2, 8) INT_ADD (register, 0x10, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x2, 8) , (const, 0x8, 8), (register, 0x10, 8) INT_ZEXT (unique, 0xbc80, 4)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x15e9, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x15e9, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x15e9, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x15e9, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100034fa, 8) , (register, 0x0, 4), (unique, 0x100034fa, 8) CAST (register, 0x10, 8), (register, 0x0, 4) INT_ADD (unique, 0xbc80, 4) , (const, 0x8, 4)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x15ed, 4), (ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x15ed, 4), (ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x15ed, 4), (ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x15ed, 4), (ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0xbd80, 8) , (register, 0x88, 1), (register, 0x88, 1) SUBPIECE (register, 0x88, 8) , (const, 0x0, 4), (unique, 0xbd80, 8) CAST (unique, 0x10003502, 8), (unique, 0x10003502, 8) LOAD (const, 0x1b1, 4) , (register, 0x10, 8), (register, 0x10, 8) MULTIEQUAL (register, 0x10, 8) , (unique, 0xbd80, 8)]
[ ---  BRANCH (ram, 0x414640, 1)]
[ ---  CBRANCH (ram, 0x4165bd, 1) , (unique, 0xc900, 1), (unique, 0xc900, 1) INT_LESS (unique, 0xbc80, 4) , (const, 0x30, 4)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x15b3, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x15b3, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x15b3, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x15b3, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x8, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x1, 8) , (const, 0x8, 8), (unique, 0xbd80, 8) CAST (unique, 0x1000350a, 8), (unique, 0x1000350a, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[ ---  BRANCH (ram, 0x414f56, 1)]
[(register, 0x10, 8) CAST (unique, 0x10003512, 8), (unique, 0x10003512, 8) INT_ADD (register, 0x10, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x2, 8) , (const, 0x8, 8), (register, 0x10, 8) INT_ZEXT (unique, 0xbc80, 4)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x15a5, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x15a5, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x15a5, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x15a5, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000351a, 8) , (register, 0x0, 4), (unique, 0x1000351a, 8) CAST (register, 0x10, 8), (register, 0x0, 4) INT_ADD (unique, 0xbc80, 4) , (const, 0x8, 4)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x15aa, 4), (ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x15aa, 4), (ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x15aa, 4), (ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x15aa, 4), (ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0xbd80, 8) , (register, 0x10, 8), (register, 0x10, 8) INT_SEXT (register, 0x88, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x10, 8), (register, 0x10, 8) MULTIEQUAL (register, 0x10, 8) , (unique, 0xbd80, 8)]
[ ---  BRANCH (ram, 0x414640, 1)]
[(register, 0xb8, 1) MULTIEQUAL (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10003552, 8) , (const, 0x414ee0, 8), (unique, 0x10003552, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8), (register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x16e0, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x16e0, 4), (ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x16e0, 4), (ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x16e0, 4), (ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x16e0, 4), (ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[(stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x16e0, 4), (stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x16df, 4), (stack, 0xfffffffffffffaa0, 4) MULTIEQUAL (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4)]
[(stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x16e0, 4), (stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x16df, 4), (stack, 0xfffffffffffffaa4, 4) MULTIEQUAL (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4)]
[(stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x16e0, 4), (stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x16df, 4), (stack, 0xfffffffffffffaa8, 4) MULTIEQUAL (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4)]
[(stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x16e0, 4), (stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x16df, 4), (stack, 0xfffffffffffffaac, 4) MULTIEQUAL (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4)]
[(stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x16e0, 4), (stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x16df, 4), (stack, 0xfffffffffffffab3, 1) MULTIEQUAL (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1)]
[(stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x16e0, 4), (stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x16df, 4), (stack, 0xfffffffffffffab4, 4) MULTIEQUAL (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4)]
[(stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x16e0, 4), (stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x16df, 4), (stack, 0xfffffffffffffab8, 4) MULTIEQUAL (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4)]
[(stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x16e0, 4), (stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x16df, 4), (stack, 0xfffffffffffffabc, 4) MULTIEQUAL (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4)]
[(stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x16e0, 4), (stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x16df, 4), (stack, 0xfffffffffffffac0, 8) MULTIEQUAL (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8)]
[(stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x16e0, 4), (stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x16df, 4), (stack, 0xfffffffffffffac8, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x16e0, 4), (stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x16df, 4), (stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x16e0, 4), (stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x16df, 4), (stack, 0xfffffffffffffad8, 4) MULTIEQUAL (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4)]
[(stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x16e0, 4), (stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x16df, 4), (stack, 0xfffffffffffffadc, 4) MULTIEQUAL (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4)]
[(stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x16e0, 4), (stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x16df, 4), (stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x16e0, 4), (stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x16df, 4), (stack, 0xfffffffffffffae4, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x16e0, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x16df, 4), (stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x16e0, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x16df, 4), (stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x16e0, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x16df, 4), (stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x16e0, 4), (stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x16df, 4), (stack, 0xfffffffffffffb20, 4) MULTIEQUAL (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4)]
[(stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x16e0, 4), (stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x16df, 4), (stack, 0xfffffffffffffb24, 4) MULTIEQUAL (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x16e0, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x16df, 4), (stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x16e0, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x16df, 4), (stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x16e0, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x16df, 4), (stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x16e0, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x16df, 4), (stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x16e0, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x16df, 4), (stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x16e0, 4), (stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x16df, 4), (stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x16e0, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x16df, 4), (stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x16e0, 4), (stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x16df, 4), (stack, 0xfffffffffffffb58, 4) MULTIEQUAL (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4)]
[(stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x16e0, 4), (stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x16df, 4), (stack, 0xfffffffffffffb5c, 4) MULTIEQUAL (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4)]
[(stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x16e0, 4), (stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x16df, 4), (stack, 0xfffffffffffffb60, 2) MULTIEQUAL (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2)]
[(stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x16e0, 4), (stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x16df, 4), (stack, 0xfffffffffffffb62, 2) MULTIEQUAL (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2)]
[(stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x16e0, 4), (stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x16df, 4), (stack, 0xfffffffffffffb64, 4) MULTIEQUAL (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x16e0, 4), (stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x16df, 4), (stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x16e0, 4), (stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x16df, 4), (stack, 0xfffffffffffffb70, 4) MULTIEQUAL (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4)]
[(stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x16e0, 4), (stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x16df, 4), (stack, 0xfffffffffffffb74, 4) MULTIEQUAL (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x16e0, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x16df, 4), (stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x16e0, 4), (stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x16df, 4), (stack, 0xfffffffffffffb88, 8) MULTIEQUAL (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8)]
[(stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x16e0, 4), (stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x16df, 4), (stack, 0xfffffffffffffb90, 8) MULTIEQUAL (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x16e0, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x16df, 4), (stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x16e0, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x16df, 4), (stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x16e0, 4), (stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x16df, 4), (stack, 0xfffffffffffffbb8, 8) MULTIEQUAL (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8)]
[(stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x16e0, 4), (stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x16df, 4), (stack, 0xfffffffffffffbc0, 8) MULTIEQUAL (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x16e0, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x16df, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(register, 0x0, 8) CALL (ram, 0x4291a0, 8) , (unique, 0x100025af, 4) , (unique, 0x3200, 8) , (const, 0x3e8, 8), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffbd8, 8), (unique, 0x100025af, 4) COPY (stack, 0xfffffffffffffb24, 4), (stack, 0xfffffffffffffb24, 4) MULTIEQUAL (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4)]
[(stack, 0xfffffffffffffb10, 8) CAST (unique, 0x10003562, 8), (unique, 0x10003562, 8) INT_AND (unique, 0x1000355a, 8) , (const, 0xffffffff00000000, 8), (unique, 0x1000355a, 8) CAST (stack, 0xfffffffffffffb10, 8), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x16e0, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x16df, 4), (stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(unique, 0x100015fb, 4) SUBPIECE (stack, 0xfffffffffffffaf8, 8) , (const, 0x0, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x16e0, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x16df, 4), (stack, 0xfffffffffffffaf8, 8) CAST (unique, 0x1000353a, 8), (unique, 0x1000353a, 8) INT_OR (unique, 0x10000fe2, 8) , (unique, 0x10000fea, 8), (unique, 0x10000fea, 8) INT_ZEXT (register, 0x80, 4), (unique, 0x10000fe2, 8) INT_AND (unique, 0x10003532, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10003532, 8) CAST (stack, 0xfffffffffffffaf8, 8), (stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8), (register, 0x80, 4) MULTIEQUAL (register, 0x80, 4) , (register, 0x80, 4) , (register, 0x80, 4) , (register, 0x80, 4) , (register, 0x80, 4) , (register, 0x80, 4) , (register, 0x80, 4) , (register, 0x80, 4) , (register, 0x80, 4) , (register, 0x80, 4) , (register, 0x80, 4) , (register, 0x80, 4)]
[(register, 0x88, 8) INT_AND (unique, 0x1000356a, 8) , (const, 0xffffffff, 8), (unique, 0x1000356a, 8) CAST (stack, 0xfffffffffffffaf0, 8), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x16e0, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x16df, 4), (stack, 0xfffffffffffffaf0, 8) CAST (unique, 0x1000352a, 8), (unique, 0x1000352a, 8) INT_OR (unique, 0x10000fd2, 8) , (unique, 0x10000fda, 8), (unique, 0x10000fda, 8) INT_ZEXT (register, 0x88, 4), (unique, 0x10000fd2, 8) INT_AND (unique, 0x10003522, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10003522, 8) CAST (stack, 0xfffffffffffffaf0, 8), (stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8), (register, 0x88, 4) MULTIEQUAL (register, 0x88, 4) , (register, 0x88, 4) , (register, 0x88, 4) , (register, 0x88, 4) , (register, 0x88, 4) , (register, 0x88, 4) , (register, 0x88, 4) , (register, 0x88, 4) , (register, 0x88, 4) , (register, 0x88, 4) , (register, 0x88, 4) , (register, 0x88, 4)]
[(unique, 0x100029c7, 4) COPY (stack, 0xfffffffffffffb00, 4), (stack, 0xfffffffffffffb00, 4) SUBPIECE (stack, 0xfffffffffffffb00, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x16e0, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x16df, 4), (stack, 0xfffffffffffffb00, 8) CAST (unique, 0x1000354a, 8), (unique, 0x1000354a, 8) INT_OR (unique, 0x10000ff2, 8) , (unique, 0x10000ffa, 8), (unique, 0x10000ffa, 8) INT_ZEXT (register, 0x90, 4), (unique, 0x10000ff2, 8) INT_AND (unique, 0x10003542, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10003542, 8) CAST (stack, 0xfffffffffffffb00, 8), (register, 0x90, 4) MULTIEQUAL (register, 0x90, 4) , (register, 0x90, 4) , (register, 0x90, 4) , (register, 0x90, 4) , (register, 0x90, 4) , (register, 0x90, 4) , (register, 0x90, 4) , (register, 0x90, 4) , (register, 0x90, 4) , (register, 0x90, 4) , (register, 0x90, 4) , (register, 0x90, 4), (stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[ ---  BRANCH (ram, 0x414727, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbc0, 8) MULTIEQUAL (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8)]
[(stack, 0xfffffffffffffbb8, 8) MULTIEQUAL (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb90, 8) MULTIEQUAL (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8)]
[(stack, 0xfffffffffffffb88, 8) MULTIEQUAL (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb74, 4) MULTIEQUAL (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4)]
[(stack, 0xfffffffffffffb70, 4) MULTIEQUAL (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4)]
[(stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb64, 4) MULTIEQUAL (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4)]
[(stack, 0xfffffffffffffb62, 2) MULTIEQUAL (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2)]
[(stack, 0xfffffffffffffb60, 2) MULTIEQUAL (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2)]
[(stack, 0xfffffffffffffb5c, 4) MULTIEQUAL (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4)]
[(stack, 0xfffffffffffffb58, 4) MULTIEQUAL (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb24, 4) MULTIEQUAL (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4)]
[(stack, 0xfffffffffffffb20, 4) MULTIEQUAL (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae4, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[(stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffadc, 4) MULTIEQUAL (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4)]
[(stack, 0xfffffffffffffad8, 4) MULTIEQUAL (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4)]
[(stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffac8, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffac0, 8) MULTIEQUAL (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8)]
[(stack, 0xfffffffffffffabc, 4) MULTIEQUAL (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4)]
[(stack, 0xfffffffffffffab8, 4) MULTIEQUAL (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4)]
[(stack, 0xfffffffffffffab4, 4) MULTIEQUAL (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4)]
[(stack, 0xfffffffffffffab3, 1) MULTIEQUAL (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1)]
[(stack, 0xfffffffffffffaac, 4) MULTIEQUAL (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4)]
[(stack, 0xfffffffffffffaa8, 4) MULTIEQUAL (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4)]
[(stack, 0xfffffffffffffaa4, 4) MULTIEQUAL (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4)]
[(stack, 0xfffffffffffffaa0, 4) MULTIEQUAL (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4)]
[(ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[(ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb8, 1) MULTIEQUAL (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1)]
[(register, 0x90, 4) MULTIEQUAL (unique, 0x10002af7, 4) , (unique, 0x10002b7b, 4) , (unique, 0x10002b7f, 4) , (unique, 0x10002b83, 4) , (unique, 0x10002b87, 4) , (unique, 0x10002b8b, 4) , (unique, 0x10002b8f, 4) , (unique, 0x10002b93, 4) , (unique, 0x10002b97, 4) , (unique, 0x10002b9b, 4) , (unique, 0x10002b9f, 4) , (unique, 0x10002ba3, 4) , (unique, 0x10002b07, 4)]
[(register, 0x88, 8) MULTIEQUAL (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8)]
[(register, 0x80, 8) MULTIEQUAL (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8)]
[(register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10003572, 8), (unique, 0x10003572, 8) CAST (register, 0x10, 8)]
[ ---  CBRANCH (ram, 0x416000, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xfffffffffffffb10, 4) , (const, 0x0, 4), (stack, 0xfffffffffffffb10, 4) SUBPIECE (stack, 0xfffffffffffffb10, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[ ---  CBRANCH (ram, 0x4165df, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xfffffffffffffabc, 4) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x416b17, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xfffffffffffffaf8, 4) , (const, 0x0, 4), (stack, 0xfffffffffffffaf8, 4) SUBPIECE (stack, 0xfffffffffffffaf8, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x416dd9, 1) , (unique, 0xc900, 1), (unique, 0xc900, 1) INT_LESS (unique, 0xbc80, 4) , (const, 0x30, 4)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x1846, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x1846, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x1846, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x1846, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x8, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x4, 8) , (const, 0x2, 8), (unique, 0xbd80, 8) CAST (unique, 0x1000357a, 8), (unique, 0x1000357a, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[ ---  BRANCH (ram, 0x416b2c, 1)]
[(register, 0x10, 8) CAST (unique, 0x10003582, 8), (unique, 0x10003582, 8) INT_ADD (register, 0x10, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x2, 8) , (const, 0x8, 8), (register, 0x10, 8) INT_ZEXT (unique, 0xbc80, 4)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x183b, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x183b, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x183b, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x183b, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000358a, 8) , (register, 0x0, 4), (unique, 0x1000358a, 8) CAST (register, 0x10, 8), (register, 0x0, 4) INT_ADD (unique, 0xbc80, 4) , (const, 0x8, 4)]
[(ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[(ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(register, 0x98, 8) CAST (unique, 0x10003592, 8), (unique, 0x10003592, 8) INT_SEXT (unique, 0xbc00, 2), (unique, 0xbc00, 2) LOAD (const, 0x1b1, 4) , (register, 0x10, 8), (register, 0x10, 8) MULTIEQUAL (register, 0x10, 8) , (unique, 0xbd80, 8)]
[ ---  BRANCH (ram, 0x41563d, 1)]
[ ---  CBRANCH (ram, 0x416da6, 1) , (unique, 0xc900, 1), (unique, 0xc900, 1) INT_LESS (unique, 0xbc80, 4) , (const, 0x30, 4)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x1813, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x1813, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x1813, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x1813, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x8, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x2, 8) , (const, 0x4, 8), (unique, 0xbd80, 8) CAST (unique, 0x1000359a, 8), (unique, 0x1000359a, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[ ---  BRANCH (ram, 0x416604, 1)]
[(register, 0x10, 8) CAST (unique, 0x100035a2, 8), (unique, 0x100035a2, 8) INT_ADD (register, 0x10, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x2, 8) , (const, 0x8, 8), (register, 0x10, 8) INT_ZEXT (unique, 0xbc80, 4)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x1808, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x1808, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x1808, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x1808, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100035aa, 8) , (register, 0x0, 4), (unique, 0x100035aa, 8) CAST (register, 0x10, 8), (register, 0x0, 4) INT_ADD (unique, 0xbc80, 4) , (const, 0x8, 4)]
[(ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[(ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(register, 0x98, 8) CAST (unique, 0x100035b2, 8), (unique, 0x100035b2, 8) INT_SEXT (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (register, 0x10, 8), (register, 0x10, 8) MULTIEQUAL (register, 0x10, 8) , (unique, 0xbd80, 8)]
[ ---  BRANCH (ram, 0x41563d, 1)]
[ ---  CBRANCH (ram, 0x416b56, 1) , (unique, 0xc900, 1), (unique, 0xc900, 1) INT_LESS (unique, 0xbc80, 4) , (const, 0x30, 4)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x17d1, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x17d1, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x17d1, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x17d1, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x8, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x8, 8) , (const, 0x1, 8), (unique, 0xbd80, 8) CAST (unique, 0x100035ba, 8), (unique, 0x100035ba, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[ ---  BRANCH (ram, 0x416023, 1)]
[(register, 0x10, 8) CAST (unique, 0x100035c2, 8), (unique, 0x100035c2, 8) INT_ADD (register, 0x10, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x2, 8) , (const, 0x8, 8), (register, 0x10, 8) INT_ZEXT (unique, 0xbc80, 4)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x17c6, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x17c6, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x17c6, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x17c6, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100035ca, 8) , (register, 0x0, 4), (unique, 0x100035ca, 8) CAST (register, 0x10, 8), (register, 0x0, 4) INT_ADD (unique, 0xbc80, 4) , (const, 0x8, 4)]
[(ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[(ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(register, 0x98, 8) CAST (unique, 0x100035d2, 8), (unique, 0x100035d2, 8) INT_SEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0x10, 8), (register, 0x10, 8) MULTIEQUAL (register, 0x10, 8) , (unique, 0xbd80, 8)]
[ ---  BRANCH (ram, 0x41563d, 1)]
[ ---  CBRANCH (ram, 0x4165ce, 1) , (unique, 0xc900, 1), (unique, 0xc900, 1) INT_LESS (unique, 0xbc80, 4) , (const, 0x30, 4)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x1790, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x1790, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x1790, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x1790, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x8, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x1, 8) , (const, 0x8, 8), (unique, 0xbd80, 8) CAST (unique, 0x100035da, 8), (unique, 0x100035da, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[ ---  BRANCH (ram, 0x41563a, 1)]
[(register, 0x10, 8) CAST (unique, 0x100035e2, 8), (unique, 0x100035e2, 8) INT_ADD (register, 0x10, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x2, 8) , (const, 0x8, 8), (register, 0x10, 8) INT_ZEXT (unique, 0xbc80, 4)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x175f, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x175f, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x175f, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x175f, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100035ea, 8) , (register, 0x0, 4), (unique, 0x100035ea, 8) CAST (register, 0x10, 8), (register, 0x0, 4) INT_ADD (unique, 0xbc80, 4) , (const, 0x8, 4)]
[(ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[(ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(unique, 0xbd80, 8) CAST (unique, 0x100035f2, 8), (unique, 0x100035f2, 8) LOAD (const, 0x1b1, 4) , (register, 0x10, 8), (register, 0x10, 8) MULTIEQUAL (register, 0x10, 8) , (unique, 0xbd80, 8)]
[(ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[(ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(stack, 0xfffffffffffffb14, 4) SUBPIECE (stack, 0xfffffffffffffb10, 8) , (const, 0x4, 8)]
[(stack, 0xfffffffffffffaec, 4) SUBPIECE (stack, 0xfffffffffffffae8, 8) , (const, 0x4, 8)]
[ ---  CBRANCH (ram, 0x416180, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (unique, 0x100035fa, 8) , (const, 0x0, 8), (unique, 0x100035fa, 8) CAST (register, 0x98, 8), (register, 0x98, 8) MULTIEQUAL (unique, 0xbd80, 8) , (register, 0x98, 8) , (register, 0x98, 8) , (register, 0x98, 8)]
[(stack, 0xfffffffffffffae8, 8) CAST (unique, 0x10003606, 8), (unique, 0x10003606, 8) INT_ADD (unique, 0x100024bb, 8) , (const, 0xa, 4), (unique, 0x100024bb, 8) INT_LEFT (unique, 0x100024b3, 8) , (const, 0x20, 8), (unique, 0x100024b3, 8) INT_SEXT (unique, 0x10003602, 4), (unique, 0x10003602, 4) CAST (stack, 0xfffffffffffffaec, 4)]
[(stack, 0xfffffffffffffaf8, 8) COPY (register, 0x98, 8), (register, 0x98, 8) CAST (unique, 0x10003616, 8), (unique, 0x10003616, 8) INT_2COMP (unique, 0x1000360e, 8), (unique, 0x1000360e, 8) CAST (register, 0x98, 8)]
[(stack, 0xfffffffffffffb10, 8) CAST (unique, 0x10003622, 8), (unique, 0x10003622, 8) INT_ADD (unique, 0x100024cb, 8) , (const, 0x1, 4), (unique, 0x100024cb, 8) INT_LEFT (unique, 0x100024c3, 8) , (const, 0x20, 8), (unique, 0x100024c3, 8) INT_SEXT (unique, 0x1000361e, 4), (unique, 0x1000361e, 4) CAST (stack, 0xfffffffffffffb14, 4)]
[ ---  BRANCH (ram, 0x414fc8, 1)]
[(stack, 0xfffffffffffffaf8, 8) COPY (register, 0x98, 8)]
[(stack, 0xfffffffffffffb10, 8) CAST (unique, 0x1000362a, 8), (unique, 0x1000362a, 8) INT_LEFT (unique, 0x100010c0, 8) , (const, 0x20, 4), (unique, 0x100010c0, 8) INT_ZEXT (stack, 0xfffffffffffffb14, 4)]
[(stack, 0xfffffffffffffae8, 8) CAST (unique, 0x10003636, 8), (unique, 0x10003636, 8) INT_ADD (unique, 0x1000246f, 8) , (const, 0xa, 4), (unique, 0x1000246f, 8) INT_LEFT (unique, 0x10002467, 8) , (const, 0x20, 8), (unique, 0x10002467, 8) INT_SEXT (unique, 0x10003632, 4), (unique, 0x10003632, 4) CAST (stack, 0xfffffffffffffaec, 4)]
[ ---  BRANCH (ram, 0x414fc8, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbc0, 8) MULTIEQUAL (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8)]
[(stack, 0xfffffffffffffbb8, 8) MULTIEQUAL (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb90, 8) MULTIEQUAL (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8)]
[(stack, 0xfffffffffffffb88, 8) MULTIEQUAL (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb74, 4) MULTIEQUAL (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4)]
[(stack, 0xfffffffffffffb70, 4) MULTIEQUAL (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4)]
[(stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb64, 4) MULTIEQUAL (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4)]
[(stack, 0xfffffffffffffb62, 2) MULTIEQUAL (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2)]
[(stack, 0xfffffffffffffb60, 2) MULTIEQUAL (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2)]
[(stack, 0xfffffffffffffb5c, 4) MULTIEQUAL (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4)]
[(stack, 0xfffffffffffffb58, 4) MULTIEQUAL (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb24, 4) MULTIEQUAL (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4)]
[(stack, 0xfffffffffffffb20, 4) MULTIEQUAL (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae4, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[(stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffadc, 4) MULTIEQUAL (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4)]
[(stack, 0xfffffffffffffad8, 4) MULTIEQUAL (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4)]
[(stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffac8, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffac0, 8) MULTIEQUAL (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8)]
[(stack, 0xfffffffffffffabc, 4) MULTIEQUAL (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4)]
[(stack, 0xfffffffffffffab8, 4) MULTIEQUAL (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4)]
[(stack, 0xfffffffffffffab4, 4) MULTIEQUAL (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4)]
[(stack, 0xfffffffffffffab3, 1) MULTIEQUAL (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1)]
[(stack, 0xfffffffffffffaac, 4) MULTIEQUAL (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4)]
[(stack, 0xfffffffffffffaa8, 4) MULTIEQUAL (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4)]
[(stack, 0xfffffffffffffaa4, 4) MULTIEQUAL (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4)]
[(stack, 0xfffffffffffffaa0, 4) MULTIEQUAL (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4)]
[(ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[(ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8)]
[(register, 0x90, 4) COPY (unique, 0x10002b5b, 4), (unique, 0x10002b5b, 4) MULTIEQUAL (unique, 0x10002b2b, 4) , (unique, 0x10002b2f, 4) , (unique, 0x10002b33, 4) , (unique, 0x10002b37, 4) , (unique, 0x10002b3b, 4) , (unique, 0x10002b3f, 4) , (unique, 0x10002b43, 4) , (unique, 0x10002b47, 4) , (unique, 0x10002b4b, 4) , (unique, 0x10002b4f, 4) , (unique, 0x10002b53, 4) , (unique, 0x10002b57, 4)]
[(register, 0x88, 4) SUBPIECE (register, 0x88, 8) , (const, 0x0, 4), (register, 0x88, 8) MULTIEQUAL (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8)]
[ ---  CBRANCH (ram, 0x414520, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xfffffffffffffb10, 4) , (const, 0x0, 4), (stack, 0xfffffffffffffb10, 4) SUBPIECE (stack, 0xfffffffffffffb10, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(unique, 0xd080, 1) INT_SLESS (const, 0x0, 4) , (unique, 0x1000363e, 4), (unique, 0x1000363e, 4) CAST (register, 0x18, 4), (register, 0x18, 4) INT_SUB (register, 0x90, 4) , (const, 0x1, 4)]
[(unique, 0x100029bb, 4) COPY (register, 0x88, 4)]
[ ---  CBRANCH (ram, 0x414def, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xfffffffffffffb08, 4) , (const, 0x0, 4), (stack, 0xfffffffffffffb08, 4) SUBPIECE (stack, 0xfffffffffffffb08, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x416a2e, 1) , (unique, 0xd080, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000365e, 8) , (const, 0x416a4c, 8), (unique, 0x1000365e, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1c91, 4)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x1c91, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x1c91, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x1c91, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x1c91, 4)]
[(stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x1c91, 4), (stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x1c90, 4)]
[(stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x1c91, 4), (stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x1c90, 4)]
[(stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x1c91, 4), (stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x1c90, 4)]
[(stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x1c91, 4), (stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x1c90, 4)]
[(stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x1c91, 4), (stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x1c90, 4)]
[(stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x1c91, 4), (stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x1c90, 4)]
[(stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x1c91, 4), (stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x1c90, 4)]
[(stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x1c91, 4), (stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x1c90, 4)]
[(stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x1c91, 4), (stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x1c90, 4)]
[(stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x1c91, 4), (stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x1c90, 4)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x1c91, 4), (stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x1c90, 4)]
[(stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x1c91, 4), (stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x1c90, 4)]
[(stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x1c91, 4), (stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x1c90, 4)]
[(stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x1c91, 4), (stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x1c90, 4)]
[(stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x1c91, 4), (stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x1c90, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x1c91, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x1c90, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x1c91, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x1c90, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x1c91, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x1c90, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x1c91, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x1c90, 4), (stack, 0xfffffffffffffb00, 8) CAST (unique, 0x10003656, 8), (unique, 0x10003656, 8) INT_OR (unique, 0x100013a5, 8) , (register, 0x88, 8), (unique, 0x100013a5, 8) INT_AND (unique, 0x1000364e, 8) , (const, 0xffffffff00000000, 8), (unique, 0x1000364e, 8) CAST (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x1c91, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x1c90, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x1c91, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x1c90, 4)]
[(stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x1c91, 4), (stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x1c90, 4)]
[(stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x1c91, 4), (stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x1c90, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x1c91, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x1c90, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x1c91, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x1c90, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x1c91, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x1c90, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x1c91, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x1c90, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x1c91, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x1c90, 4)]
[(stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x1c91, 4), (stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x1c90, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x1c91, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x1c90, 4)]
[(stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x1c91, 4), (stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x1c90, 4)]
[(stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x1c91, 4), (stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x1c90, 4)]
[(stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x1c91, 4), (stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x1c90, 4)]
[(stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x1c91, 4), (stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x1c90, 4)]
[(stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x1c91, 4), (stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x1c90, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x1c91, 4), (stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x1c90, 4)]
[(stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x1c91, 4), (stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x1c90, 4)]
[(stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x1c91, 4), (stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x1c90, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x1c91, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x1c90, 4)]
[(stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x1c91, 4), (stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x1c90, 4)]
[(stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x1c91, 4), (stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x1c90, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x1c91, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x1c90, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x1c91, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x1c90, 4)]
[(stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x1c91, 4), (stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x1c90, 4)]
[(stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x1c91, 4), (stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x1c90, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1c91, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1c90, 4)]
[ ---  CBRANCH (ram, 0x414398, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xfffffffffffffb10, 8) , (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x1000366e, 8), (unique, 0x1000366e, 8) CALL (ram, 0x418b00, 8) , (register, 0x38, 8) , (const, 0x20, 4) , (unique, 0x10003666, 8), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x1c91, 4), (unique, 0x10003666, 8) CAST (register, 0x10, 8), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x1c90, 4), (stack, 0xfffffffffffffb10, 8) COPY (register, 0x10, 8), (register, 0x10, 8) CAST (unique, 0x10003646, 8), (unique, 0x10003646, 8) INT_SEXT (unique, 0x10003642, 4), (unique, 0x10003642, 4) CAST (register, 0x18, 4)]
[ ---  CBRANCH (ram, 0x417230, 1) , (unique, 0xc900, 1), (unique, 0xc900, 1) INT_LESS (const, 0x7ffffffe, 4) , (stack, 0xfffffffffffffb00, 4), (stack, 0xfffffffffffffb00, 4) SUBPIECE (stack, 0xfffffffffffffb00, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x414e98, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (register, 0x0, 4) , (register, 0x18, 4), (register, 0x0, 4) INT_SUB (const, 0x7fffffff, 4) , (stack, 0xfffffffffffffb00, 4)]
[(register, 0x88, 4) INT_ADD (stack, 0xfffffffffffffb00, 4) , (register, 0x18, 4)]
[ ---  BRANCH (ram, 0x414def, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbc0, 8) MULTIEQUAL (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8)]
[(stack, 0xfffffffffffffbb8, 8) MULTIEQUAL (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb90, 8) MULTIEQUAL (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8)]
[(stack, 0xfffffffffffffb88, 8) MULTIEQUAL (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb74, 4) MULTIEQUAL (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4)]
[(stack, 0xfffffffffffffb70, 4) MULTIEQUAL (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4)]
[(stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb64, 4) MULTIEQUAL (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4)]
[(stack, 0xfffffffffffffb62, 2) MULTIEQUAL (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2)]
[(stack, 0xfffffffffffffb60, 2) MULTIEQUAL (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2)]
[(stack, 0xfffffffffffffb5c, 4) MULTIEQUAL (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4)]
[(stack, 0xfffffffffffffb58, 4) MULTIEQUAL (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb24, 4) MULTIEQUAL (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4)]
[(stack, 0xfffffffffffffb20, 4) MULTIEQUAL (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae4, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[(stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffadc, 4) MULTIEQUAL (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4)]
[(stack, 0xfffffffffffffad8, 4) MULTIEQUAL (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4)]
[(stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffac8, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffac0, 8) MULTIEQUAL (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8)]
[(stack, 0xfffffffffffffabc, 4) MULTIEQUAL (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4)]
[(stack, 0xfffffffffffffab8, 4) MULTIEQUAL (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4)]
[(stack, 0xfffffffffffffab4, 4) MULTIEQUAL (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4)]
[(stack, 0xfffffffffffffab3, 1) MULTIEQUAL (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1)]
[(stack, 0xfffffffffffffaac, 4) MULTIEQUAL (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4)]
[(stack, 0xfffffffffffffaa8, 4) MULTIEQUAL (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4)]
[(stack, 0xfffffffffffffaa4, 4) MULTIEQUAL (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4)]
[(stack, 0xfffffffffffffaa0, 4) MULTIEQUAL (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4)]
[(ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[(ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(register, 0x88, 4) MULTIEQUAL (unique, 0x100029bb, 4) , (unique, 0x100029bb, 4) , (register, 0x88, 4)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x416470, 1) , (unique, 0xc900, 1), (unique, 0xc900, 1) INT_LESS (unique, 0xbc80, 4) , (const, 0x30, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10003676, 8), (unique, 0x10003676, 8) CAST (register, 0x10, 8)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x1c84, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x1c84, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x1c84, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x1c84, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x8, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x2, 8) , (const, 0x4, 8), (unique, 0xbd80, 8) CAST (unique, 0x1000367e, 8), (unique, 0x1000367e, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[ ---  BRANCH (ram, 0x414e07, 1)]
[(register, 0x10, 8) CAST (unique, 0x10003686, 8), (unique, 0x10003686, 8) INT_ADD (register, 0x10, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x2, 8) , (const, 0x8, 8), (register, 0x10, 8) INT_ZEXT (unique, 0xbc80, 4)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x1bf6, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x1bf6, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x1bf6, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x1bf6, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000368e, 8) , (register, 0x0, 4), (unique, 0x1000368e, 8) CAST (register, 0x10, 8), (register, 0x0, 4) INT_ADD (unique, 0xbc80, 4) , (const, 0x8, 4)]
[(ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[(ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(register, 0x10, 1) SUBPIECE (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (register, 0x10, 8), (register, 0x10, 8) MULTIEQUAL (register, 0x10, 8) , (unique, 0xbd80, 8)]
[ ---  CBRANCH (ram, 0x416dea, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRSUB (register, 0x38, 8) , (const, 0x30, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRSUB (register, 0x38, 8) , (const, 0x28, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100036a6, 8) , (const, 0x416dfc, 8), (unique, 0x100036a6, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1c6c, 4)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x1c6c, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x1c6c, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x1c6c, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x1c6c, 4)]
[(stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x1c6c, 4), (stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x1c6b, 4)]
[(stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x1c6c, 4), (stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x1c6b, 4)]
[(stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x1c6c, 4), (stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x1c6b, 4)]
[(stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x1c6c, 4), (stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x1c6b, 4)]
[(stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x1c6c, 4), (stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x1c6b, 4)]
[(stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x1c6c, 4), (stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x1c6b, 4)]
[(stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x1c6c, 4), (stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x1c6b, 4)]
[(stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x1c6c, 4), (stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x1c6b, 4)]
[(stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x1c6c, 4), (stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x1c6b, 4)]
[(stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x1c6c, 4), (stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x1c6b, 4)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x1c6c, 4), (stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x1c6b, 4)]
[(stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x1c6c, 4), (stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x1c6b, 4)]
[(stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x1c6c, 4), (stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x1c6b, 4)]
[(stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x1c6c, 4), (stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x1c6b, 4)]
[(stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x1c6c, 4), (stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x1c6b, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x1c6c, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x1c6b, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x1c6c, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x1c6b, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x1c6c, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x1c6b, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x1c6c, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x1c6b, 4)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x1c6c, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x1c6b, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x1c6c, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x1c6b, 4)]
[(stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x1c6c, 4), (stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x1c6b, 4)]
[(stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x1c6c, 4), (stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x1c6b, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x1c6c, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x1c6b, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x1c6c, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x1c6b, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x1c6c, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x1c6b, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x1c6c, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x1c6b, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x1c6c, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x1c6b, 4)]
[(stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x1c6c, 4), (stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x1c6b, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x1c6c, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x1c6b, 4)]
[(stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x1c6c, 4), (stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x1c6b, 4)]
[(stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x1c6c, 4), (stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x1c6b, 4)]
[(stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x1c6c, 4), (stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x1c6b, 4)]
[(stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x1c6c, 4), (stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x1c6b, 4)]
[(stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x1c6c, 4), (stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x1c6b, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x1c6c, 4), (stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x1c6b, 4)]
[(stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x1c6c, 4), (stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x1c6b, 4)]
[(stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x1c6c, 4), (stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x1c6b, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x1c6c, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x1c6b, 4)]
[(stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x1c6c, 4), (stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x1c6b, 4)]
[(stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x1c6c, 4), (stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x1c6b, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x1c6c, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x1c6b, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x1c6c, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x1c6b, 4)]
[(stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x1c6c, 4), (stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x1c6b, 4)]
[(stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x1c6c, 4), (stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x1c6b, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1c6c, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1c6b, 4)]
[(stack, 0xfffffffffffffb10, 4) SUBPIECE (stack, 0xfffffffffffffb10, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x1c6c, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x1c6b, 4), (stack, 0xfffffffffffffb10, 8) CAST (unique, 0x1000369e, 8), (unique, 0x1000369e, 8) INT_OR (unique, 0x1000143c, 8) , (unique, 0x10001444, 8), (unique, 0x10001444, 8) INT_ZEXT (register, 0x88, 4), (unique, 0x1000143c, 8) INT_AND (unique, 0x10003696, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10003696, 8) CAST (stack, 0xfffffffffffffb10, 8)]
[ ---  CBRANCH (ram, 0x414e24, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0xffffffff, 4), (register, 0x0, 4) CALL (ram, 0x41e9e0, 8) , (register, 0x38, 8) , (register, 0x30, 4), (register, 0x30, 4) INT_AND (unique, 0xbc80, 4) , (const, 0xff, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3800, 8) , (unique, 0x3100, 8), (unique, 0x3800, 8) PTRSUB (register, 0x38, 8) , (const, 0x28, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x1c12, 4), (ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x1c10, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x1c12, 4), (ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x1c10, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x1c12, 4), (ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x1c10, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x1c12, 4), (ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x1c10, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0xbd80, 8) , (register, 0x10, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbc0, 8) MULTIEQUAL (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8)]
[(stack, 0xfffffffffffffbb8, 8) MULTIEQUAL (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb90, 8) MULTIEQUAL (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8)]
[(stack, 0xfffffffffffffb88, 8) MULTIEQUAL (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb74, 4) MULTIEQUAL (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4)]
[(stack, 0xfffffffffffffb70, 4) MULTIEQUAL (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4)]
[(stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb64, 4) MULTIEQUAL (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4)]
[(stack, 0xfffffffffffffb62, 2) MULTIEQUAL (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2)]
[(stack, 0xfffffffffffffb60, 2) MULTIEQUAL (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2)]
[(stack, 0xfffffffffffffb5c, 4) MULTIEQUAL (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4)]
[(stack, 0xfffffffffffffb58, 4) MULTIEQUAL (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb24, 4) MULTIEQUAL (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4)]
[(stack, 0xfffffffffffffb20, 4) MULTIEQUAL (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae4, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[(stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffadc, 4) MULTIEQUAL (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4)]
[(stack, 0xfffffffffffffad8, 4) MULTIEQUAL (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4)]
[(stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffac8, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffac0, 8) MULTIEQUAL (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8)]
[(stack, 0xfffffffffffffabc, 4) MULTIEQUAL (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4)]
[(stack, 0xfffffffffffffab8, 4) MULTIEQUAL (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4)]
[(stack, 0xfffffffffffffab4, 4) MULTIEQUAL (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4)]
[(stack, 0xfffffffffffffab3, 1) MULTIEQUAL (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1)]
[(stack, 0xfffffffffffffaac, 4) MULTIEQUAL (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4)]
[(stack, 0xfffffffffffffaa8, 4) MULTIEQUAL (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4)]
[(stack, 0xfffffffffffffaa4, 4) MULTIEQUAL (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4)]
[(stack, 0xfffffffffffffaa0, 4) MULTIEQUAL (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4)]
[(ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[(ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x414398, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x88, 4) , (const, 0x7fffffff, 4), (register, 0x88, 4) MULTIEQUAL (register, 0x88, 4) , (stack, 0xfffffffffffffb10, 4)]
[(register, 0x88, 8) INT_ZEXT (register, 0x88, 4), (register, 0x88, 4) INT_ADD (register, 0x88, 4) , (const, 0x1, 4)]
[ ---  CBRANCH (ram, 0x414640, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xfffffffffffffb08, 4) , (const, 0x0, 4), (stack, 0xfffffffffffffb08, 4) SUBPIECE (stack, 0xfffffffffffffb08, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x414640, 1) , (unique, 0x10000d0a, 1), (unique, 0x10000d0a, 1) BOOL_NEGATE (unique, 0xd080, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbc0, 8) MULTIEQUAL (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8)]
[(stack, 0xfffffffffffffbb8, 8) MULTIEQUAL (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb90, 8) MULTIEQUAL (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8)]
[(stack, 0xfffffffffffffb88, 8) MULTIEQUAL (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb74, 4) MULTIEQUAL (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4)]
[(stack, 0xfffffffffffffb70, 4) MULTIEQUAL (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4)]
[(stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb64, 4) MULTIEQUAL (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4)]
[(stack, 0xfffffffffffffb62, 2) MULTIEQUAL (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2)]
[(stack, 0xfffffffffffffb60, 2) MULTIEQUAL (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2)]
[(stack, 0xfffffffffffffb5c, 4) MULTIEQUAL (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4)]
[(stack, 0xfffffffffffffb58, 4) MULTIEQUAL (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb24, 4) MULTIEQUAL (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae4, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[(stack, 0xfffffffffffffadc, 4) MULTIEQUAL (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4)]
[(stack, 0xfffffffffffffad8, 4) MULTIEQUAL (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4)]
[(stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffac8, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffac0, 8) MULTIEQUAL (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8)]
[(stack, 0xfffffffffffffabc, 4) MULTIEQUAL (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4)]
[(stack, 0xfffffffffffffab8, 4) MULTIEQUAL (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4)]
[(stack, 0xfffffffffffffab4, 4) MULTIEQUAL (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4)]
[(stack, 0xfffffffffffffab3, 1) MULTIEQUAL (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1)]
[(stack, 0xfffffffffffffaac, 4) MULTIEQUAL (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4)]
[(stack, 0xfffffffffffffaa8, 4) MULTIEQUAL (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4)]
[(stack, 0xfffffffffffffaa4, 4) MULTIEQUAL (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4)]
[(stack, 0xfffffffffffffaa0, 4) MULTIEQUAL (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4)]
[(ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[(ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb8, 1) MULTIEQUAL (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1)]
[(register, 0x90, 4) MULTIEQUAL (unique, 0x10002af7, 4) , (unique, 0x10002afb, 4) , (unique, 0x10002aff, 4) , (unique, 0x10002b03, 4) , (unique, 0x10002b07, 4) , (unique, 0x10002b0b, 4) , (unique, 0x10002b0f, 4) , (unique, 0x10002b13, 4) , (unique, 0x10002b17, 4) , (unique, 0x10002b1b, 4) , (unique, 0x10002b1f, 4) , (unique, 0x10002b23, 4) , (unique, 0x10002b07, 4)]
[(register, 0x88, 8) MULTIEQUAL (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8)]
[(register, 0x80, 8) MULTIEQUAL (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8)]
[(register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8)]
[(stack, 0xfffffffffffffaf8, 4) SUBPIECE (stack, 0xfffffffffffffaf8, 8) , (const, 0x0, 4), (stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffae8, 8) CAST (unique, 0x100036b2, 8), (unique, 0x100036b2, 8) INT_ADD (unique, 0x10002437, 8) , (const, 0x10, 4), (unique, 0x10002437, 8) INT_LEFT (unique, 0x1000242f, 8) , (const, 0x20, 8), (unique, 0x1000242f, 8) INT_SEXT (unique, 0x100036ae, 4), (unique, 0x100036ae, 4) CAST (stack, 0xfffffffffffffaec, 4), (stack, 0xfffffffffffffaec, 4) SUBPIECE (stack, 0xfffffffffffffae8, 8) , (const, 0x4, 8), (stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[ ---  BRANCH (ram, 0x415286, 1)]
[(stack, 0xfffffffffffffaf8, 4) MULTIEQUAL (stack, 0xfffffffffffffaf8, 4) , (stack, 0xfffffffffffffaf8, 4) , (stack, 0xfffffffffffffaf8, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbc0, 8) MULTIEQUAL (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8)]
[(stack, 0xfffffffffffffbb8, 8) MULTIEQUAL (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb90, 8) MULTIEQUAL (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8)]
[(stack, 0xfffffffffffffb88, 8) MULTIEQUAL (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb74, 4) MULTIEQUAL (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4)]
[(stack, 0xfffffffffffffb70, 4) MULTIEQUAL (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4)]
[(stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb64, 4) MULTIEQUAL (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4)]
[(stack, 0xfffffffffffffb62, 2) MULTIEQUAL (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2)]
[(stack, 0xfffffffffffffb60, 2) MULTIEQUAL (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2)]
[(stack, 0xfffffffffffffb5c, 4) MULTIEQUAL (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4)]
[(stack, 0xfffffffffffffb58, 4) MULTIEQUAL (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb24, 4) MULTIEQUAL (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae4, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[(stack, 0xfffffffffffffadc, 4) MULTIEQUAL (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4)]
[(stack, 0xfffffffffffffad8, 4) MULTIEQUAL (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4)]
[(stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffac8, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffac0, 8) MULTIEQUAL (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8)]
[(stack, 0xfffffffffffffabc, 4) MULTIEQUAL (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4)]
[(stack, 0xfffffffffffffab8, 4) MULTIEQUAL (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4)]
[(stack, 0xfffffffffffffab4, 4) MULTIEQUAL (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4)]
[(stack, 0xfffffffffffffab3, 1) MULTIEQUAL (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1)]
[(stack, 0xfffffffffffffaac, 4) MULTIEQUAL (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4)]
[(stack, 0xfffffffffffffaa8, 4) MULTIEQUAL (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4)]
[(stack, 0xfffffffffffffaa4, 4) MULTIEQUAL (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4)]
[(stack, 0xfffffffffffffaa0, 4) MULTIEQUAL (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4)]
[(ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[(ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb8, 1) MULTIEQUAL (register, 0xb8, 1) , (register, 0xb8, 1) , (register, 0xb8, 1)]
[(register, 0x90, 4) MULTIEQUAL (register, 0x90, 4) , (register, 0x90, 4) , (register, 0x90, 4)]
[(register, 0x88, 8) MULTIEQUAL (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8)]
[(register, 0x80, 8) MULTIEQUAL (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8)]
[(register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100036ba, 8), (unique, 0x100036ba, 8) CAST (register, 0x10, 8)]
[(stack, 0xfffffffffffffb14, 4) SUBPIECE (stack, 0xfffffffffffffb10, 8) , (const, 0x4, 8), (stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[ ---  CBRANCH (ram, 0x4158f0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xfffffffffffffb10, 4) , (const, 0x0, 4), (stack, 0xfffffffffffffb10, 4) SUBPIECE (stack, 0xfffffffffffffb10, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[ ---  CBRANCH (ram, 0x415e10, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xfffffffffffffabc, 4) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x4161a8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xfffffffffffffaf8, 4) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x4167db, 1) , (unique, 0xc900, 1), (unique, 0xc900, 1) INT_LESS (unique, 0xbc80, 4) , (const, 0x30, 4)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0xf4f, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0xf4f, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0xf4f, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0xf4f, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x8, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x4, 8) , (const, 0x2, 8), (unique, 0xbd80, 8) CAST (unique, 0x100036c2, 8), (unique, 0x100036c2, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[ ---  BRANCH (ram, 0x4161bd, 1)]
[(register, 0x10, 8) CAST (unique, 0x100036ca, 8), (unique, 0x100036ca, 8) INT_ADD (register, 0x10, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x2, 8) , (const, 0x8, 8), (register, 0x10, 8) INT_ZEXT (unique, 0xbc80, 4)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0xf37, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0xf37, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0xf37, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0xf37, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100036d2, 8) , (register, 0x0, 4), (unique, 0x100036d2, 8) CAST (register, 0x10, 8), (register, 0x0, 4) INT_ADD (unique, 0xbc80, 4) , (const, 0x8, 4)]
[(ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[(ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(stack, 0xfffffffffffffb20, 4) COPY (const, 0x0, 4)]
[(stack, 0xfffffffffffffae0, 4) COPY (const, 0x0, 4)]
[(stack, 0xfffffffffffffaf8, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x100036da, 8), (unique, 0x100036da, 8) INT_ZEXT (unique, 0xbc00, 2), (unique, 0xbc00, 2) LOAD (const, 0x1b1, 4) , (register, 0x10, 8), (register, 0x10, 8) MULTIEQUAL (register, 0x10, 8) , (unique, 0xbd80, 8)]
[(stack, 0xfffffffffffffb10, 8) CAST (unique, 0x100036e2, 8), (unique, 0x100036e2, 8) INT_LEFT (unique, 0x1000124e, 8) , (const, 0x20, 4), (unique, 0x1000124e, 8) INT_ZEXT (stack, 0xfffffffffffffb14, 4)]
[ ---  BRANCH (ram, 0x414fc8, 1)]
[ ---  CBRANCH (ram, 0x4167ca, 1) , (unique, 0xc900, 1), (unique, 0xc900, 1) INT_LESS (unique, 0xbc80, 4) , (const, 0x30, 4)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0xf0f, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0xf0f, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0xf0f, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0xf0f, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x8, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x2, 8) , (const, 0x4, 8), (unique, 0xbd80, 8) CAST (unique, 0x100036ea, 8), (unique, 0x100036ea, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[ ---  BRANCH (ram, 0x415e33, 1)]
[(register, 0x10, 8) CAST (unique, 0x100036f2, 8), (unique, 0x100036f2, 8) INT_ADD (register, 0x10, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x2, 8) , (const, 0x8, 8), (register, 0x10, 8) INT_ZEXT (unique, 0xbc80, 4)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0xef7, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0xef7, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0xef7, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0xef7, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100036fa, 8) , (register, 0x0, 4), (unique, 0x100036fa, 8) CAST (register, 0x10, 8), (register, 0x0, 4) INT_ADD (unique, 0xbc80, 4) , (const, 0x8, 4)]
[(ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[(ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(stack, 0xfffffffffffffb20, 4) COPY (const, 0x0, 4)]
[(stack, 0xfffffffffffffae0, 4) COPY (const, 0x0, 4)]
[(stack, 0xfffffffffffffaf8, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10003702, 8), (unique, 0x10003702, 8) INT_ZEXT (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (register, 0x10, 8), (register, 0x10, 8) MULTIEQUAL (register, 0x10, 8) , (unique, 0xbd80, 8)]
[(stack, 0xfffffffffffffb10, 8) CAST (unique, 0x1000370a, 8), (unique, 0x1000370a, 8) INT_LEFT (unique, 0x100011d2, 8) , (const, 0x20, 4), (unique, 0x100011d2, 8) INT_ZEXT (stack, 0xfffffffffffffb14, 4)]
[ ---  BRANCH (ram, 0x414fc8, 1)]
[ ---  CBRANCH (ram, 0x4161f0, 1) , (unique, 0xc900, 1), (unique, 0xc900, 1) INT_LESS (unique, 0xbc80, 4) , (const, 0x30, 4)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0xec0, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0xec0, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0xec0, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0xec0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x8, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x8, 8) , (const, 0x1, 8), (unique, 0xbd80, 8) CAST (unique, 0x10003712, 8), (unique, 0x10003712, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[ ---  BRANCH (ram, 0x415913, 1)]
[(register, 0x10, 8) CAST (unique, 0x1000371a, 8), (unique, 0x1000371a, 8) INT_ADD (register, 0x10, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x2, 8) , (const, 0x8, 8), (register, 0x10, 8) INT_ZEXT (unique, 0xbc80, 4)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0xeab, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0xeab, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0xeab, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0xeab, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10003722, 8) , (register, 0x0, 4), (unique, 0x10003722, 8) CAST (register, 0x10, 8), (register, 0x0, 4) INT_ADD (unique, 0xbc80, 4) , (const, 0x8, 4)]
[(ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[(ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(stack, 0xfffffffffffffb20, 4) COPY (const, 0x0, 4)]
[(stack, 0xfffffffffffffae0, 4) COPY (const, 0x0, 4)]
[(stack, 0xfffffffffffffaf8, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x1000372a, 8), (unique, 0x1000372a, 8) INT_ZEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0x10, 8), (register, 0x10, 8) MULTIEQUAL (register, 0x10, 8) , (unique, 0xbd80, 8)]
[ ---  BRANCH (ram, 0x414fc8, 1)]
[ ---  CBRANCH (ram, 0x415df8, 1) , (unique, 0xc900, 1), (unique, 0xc900, 1) INT_LESS (unique, 0xbc80, 4) , (const, 0x30, 4)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0xe75, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0xe75, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0xe75, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0xe75, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x8, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x1, 8) , (const, 0x8, 8), (unique, 0xbd80, 8) CAST (unique, 0x10003732, 8), (unique, 0x10003732, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[ ---  BRANCH (ram, 0x4152ac, 1)]
[(register, 0x10, 8) CAST (unique, 0x1000373a, 8), (unique, 0x1000373a, 8) INT_ADD (register, 0x10, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x2, 8) , (const, 0x8, 8), (register, 0x10, 8) INT_ZEXT (unique, 0xbc80, 4)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x46c, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x46c, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x46c, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x46c, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10003742, 8) , (register, 0x0, 4), (unique, 0x10003742, 8) CAST (register, 0x10, 8), (register, 0x0, 4) INT_ADD (unique, 0xbc80, 4) , (const, 0x8, 4)]
[(ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[(ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(stack, 0xfffffffffffffb20, 4) COPY (const, 0x0, 4)]
[(stack, 0xfffffffffffffae0, 4) COPY (const, 0x0, 4)]
[(stack, 0xfffffffffffffaf8, 8) COPY (unique, 0x1000374a, 8), (unique, 0x1000374a, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x10, 8), (register, 0x10, 8) MULTIEQUAL (register, 0x10, 8) , (unique, 0xbd80, 8)]
[(stack, 0xfffffffffffffb10, 8) CAST (unique, 0x10003752, 8), (unique, 0x10003752, 8) INT_LEFT (unique, 0x10001081, 8) , (const, 0x20, 4), (unique, 0x10001081, 8) INT_ZEXT (stack, 0xfffffffffffffb14, 4)]
[ ---  BRANCH (ram, 0x414fc8, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbc0, 8) MULTIEQUAL (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8)]
[(stack, 0xfffffffffffffbb8, 8) MULTIEQUAL (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb90, 8) MULTIEQUAL (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8)]
[(stack, 0xfffffffffffffb88, 8) MULTIEQUAL (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb74, 4) MULTIEQUAL (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4)]
[(stack, 0xfffffffffffffb70, 4) MULTIEQUAL (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4)]
[(stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb64, 4) MULTIEQUAL (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4)]
[(stack, 0xfffffffffffffb62, 2) MULTIEQUAL (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2)]
[(stack, 0xfffffffffffffb60, 2) MULTIEQUAL (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2)]
[(stack, 0xfffffffffffffb5c, 4) MULTIEQUAL (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4)]
[(stack, 0xfffffffffffffb58, 4) MULTIEQUAL (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb24, 4) MULTIEQUAL (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4)]
[(stack, 0xfffffffffffffb20, 4) MULTIEQUAL (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae4, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[(stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffadc, 4) MULTIEQUAL (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4)]
[(stack, 0xfffffffffffffad8, 4) MULTIEQUAL (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4)]
[(stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffac8, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffac0, 8) MULTIEQUAL (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8)]
[(stack, 0xfffffffffffffabc, 4) MULTIEQUAL (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4)]
[(stack, 0xfffffffffffffab8, 4) MULTIEQUAL (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4)]
[(stack, 0xfffffffffffffab4, 4) MULTIEQUAL (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4)]
[(stack, 0xfffffffffffffab3, 1) MULTIEQUAL (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1)]
[(stack, 0xfffffffffffffaac, 4) MULTIEQUAL (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4)]
[(stack, 0xfffffffffffffaa8, 4) MULTIEQUAL (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4)]
[(stack, 0xfffffffffffffaa4, 4) MULTIEQUAL (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4)]
[(stack, 0xfffffffffffffaa0, 4) MULTIEQUAL (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4)]
[(ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[(ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(register, 0x90, 4) MULTIEQUAL (register, 0x90, 4) , (register, 0x90, 4) , (register, 0x90, 4) , (register, 0x90, 4) , (unique, 0x10002abb, 4) , (register, 0x90, 4) , (register, 0x90, 4)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb8, 1) MULTIEQUAL (register, 0xb8, 1) , (register, 0xb8, 1) , (register, 0xb8, 1) , (register, 0xb8, 1) , (register, 0xb8, 1) , (register, 0xb8, 1) , (register, 0xb8, 1)]
[(register, 0x88, 8) MULTIEQUAL (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8)]
[(register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8)]
[(unique, 0x1000256f, 8) COPY (stack, 0xfffffffffffffb00, 8), (stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(unique, 0x10002557, 8) COPY (stack, 0xfffffffffffffaf8, 8), (stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(register, 0x206, 1) INT_NOTEQUAL (register, 0x80, 4) , (const, 0x0, 4), (register, 0x80, 4) SUBPIECE (register, 0x80, 8) , (const, 0x0, 4), (register, 0x80, 8) MULTIEQUAL (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8)]
[(stack, 0xfffffffffffffae8, 4) SUBPIECE (stack, 0xfffffffffffffae8, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[ ---  CBRANCH (ram, 0x415a50, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (register, 0x80, 4) , (const, 0x0, 4), (register, 0x80, 4) SUBPIECE (register, 0x80, 8) , (const, 0x0, 4), (register, 0x80, 8) MULTIEQUAL (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8)]
[(register, 0x18, 8) COPY (const, 0x1, 8)]
[ ---  BRANCH (ram, 0x414fe1, 1)]
[(stack, 0xfffffffffffffaf1, 7) SUBPIECE (stack, 0xfffffffffffffaf0, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x415810, 1) , (register, 0x206, 1)]
[(stack, 0xfffffffffffffaf0, 8) CAST (unique, 0x10003761, 8), (unique, 0x10003761, 8) INT_ADD (unique, 0x100023e7, 8) , (const, 0x20, 1), (unique, 0x100023e7, 8) INT_LEFT (unique, 0x100023df, 8) , (const, 0x8, 8), (unique, 0x100023df, 8) INT_SEXT (unique, 0x1000375a, 7), (unique, 0x1000375a, 7) CAST (stack, 0xfffffffffffffaf1, 7)]
[(register, 0x18, 8) INT_SEXT (register, 0x80, 4)]
[ ---  CBRANCH (ram, 0x415c88, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xfffffffffffffaf8, 8) , (const, 0x0, 8)]
[(stack, 0xfffffffffffffaf0, 8) CAST (unique, 0x10003770, 8), (unique, 0x10003770, 8) INT_ADD (unique, 0x1000248f, 8) , (const, 0x20, 1), (unique, 0x1000248f, 8) INT_LEFT (unique, 0x10002487, 8) , (const, 0x8, 8), (unique, 0x10002487, 8) INT_SEXT (unique, 0x10003769, 7), (unique, 0x10003769, 7) CAST (stack, 0xfffffffffffffaf1, 7)]
[(register, 0x18, 8) COPY (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x414fe1, 1)]
[(register, 0x18, 8) MULTIEQUAL (register, 0x18, 8) , (register, 0x18, 8) , (register, 0x18, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10003780, 8) , (const, 0x415011, 8), (unique, 0x10003780, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x4b1, 4)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x4b1, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x4b1, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x4b1, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x4b1, 4)]
[(stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x4b1, 4), (stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x4b0, 4)]
[(stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x4b1, 4), (stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x4b0, 4)]
[(stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x4b1, 4), (stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x4b0, 4)]
[(stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x4b1, 4), (stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x4b0, 4)]
[(stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x4b1, 4), (stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x4b0, 4)]
[(stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x4b1, 4), (stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x4b0, 4)]
[(stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x4b1, 4), (stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x4b0, 4)]
[(stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x4b1, 4), (stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x4b0, 4)]
[(stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x4b1, 4), (stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x4b0, 4)]
[(stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x4b1, 4), (stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x4b0, 4)]
[(stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x4b1, 4), (stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x4b0, 4)]
[(stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x4b1, 4), (stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x4b0, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x4b1, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x4b0, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x4b1, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x4b0, 4), (stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x4b1, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x4b0, 4)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x4b1, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x4b0, 4)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x4b1, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x4b0, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x4b1, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x4b0, 4)]
[(stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x4b1, 4), (stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x4b0, 4)]
[(stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x4b1, 4), (stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x4b0, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x4b1, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x4b0, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x4b1, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x4b0, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x4b1, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x4b0, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x4b1, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x4b0, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x4b1, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x4b0, 4)]
[(stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x4b1, 4), (stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x4b0, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x4b1, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x4b0, 4)]
[(stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x4b1, 4), (stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x4b0, 4)]
[(stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x4b1, 4), (stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x4b0, 4)]
[(stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x4b1, 4), (stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x4b0, 4)]
[(stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x4b1, 4), (stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x4b0, 4)]
[(stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x4b1, 4), (stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x4b0, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x4b1, 4), (stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x4b0, 4)]
[(stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x4b1, 4), (stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x4b0, 4)]
[(stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x4b1, 4), (stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x4b0, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x4b1, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x4b0, 4)]
[(stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x4b1, 4), (stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x4b0, 4)]
[(stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x4b1, 4), (stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x4b0, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x4b1, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x4b0, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x4b1, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x4b0, 4)]
[(stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x4b1, 4), (stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x4b0, 4)]
[(stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x4b1, 4), (stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x4b0, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x4b1, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x4b0, 4)]
[(register, 0x0, 8) CAST (unique, 0x10003788, 8), (unique, 0x10003788, 8) CALL (ram, 0x46b290, 8) , (unique, 0x10002557, 8) , (unique, 0x1000256f, 8) , (register, 0x10, 8) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xb8, 1) , (const, 0x58, 1), (register, 0x10, 8) INT_AND (unique, 0x10003778, 8) , (const, 0xffffffff, 8), (unique, 0x10003778, 8) CAST (stack, 0xfffffffffffffae8, 8)]
[(unique, 0x10002577, 8) COPY (stack, 0xfffffffffffffb00, 8), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x4b1, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x4b0, 4)]
[(unique, 0x10002533, 4) COPY (stack, 0xfffffffffffffabc, 4), (stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x4b1, 4), (stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x4b0, 4), (stack, 0xfffffffffffffabc, 4) COPY (register, 0x90, 4)]
[(register, 0x88, 8) INT_ZEXT (stack, 0xfffffffffffffab4, 4), (stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x4b1, 4), (stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x4b0, 4), (stack, 0xfffffffffffffab4, 4) COPY (register, 0x88, 4), (register, 0x88, 4) SUBPIECE (register, 0x88, 8) , (const, 0x0, 4)]
[(unique, 0x10002d3f, 4) COPY (stack, 0xfffffffffffffabc, 4), (stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x4b1, 4), (stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x4b0, 4), (stack, 0xfffffffffffffabc, 4) COPY (register, 0x90, 4)]
[ ---  CBRANCH (ram, 0x415074, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xfffffffffffffad0, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x4b1, 4), (stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x4b0, 4)]
[ ---  CBRANCH (ram, 0x415074, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xfffffffffffffac8, 4) , (const, 0x0, 4), (stack, 0xfffffffffffffac8, 4) SUBPIECE (stack, 0xfffffffffffffac8, 8) , (const, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100037a0, 8) , (const, 0x415063, 8), (unique, 0x100037a0, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x4e7, 4)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x4e7, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x4e7, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x4e7, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x4e7, 4)]
[(stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x4e7, 4), (stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x4e6, 4)]
[(stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x4e7, 4), (stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x4e6, 4)]
[(stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x4e7, 4), (stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x4e6, 4)]
[(stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x4e7, 4), (stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x4e6, 4)]
[(stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x4e7, 4), (stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x4e6, 4)]
[(stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x4e7, 4), (stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x4e6, 4)]
[(stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x4e7, 4), (stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x4e6, 4)]
[(stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x4e7, 4), (stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x4e6, 4)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x4e7, 4), (stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x4e6, 4)]
[(stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x4e7, 4), (stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x4e6, 4)]
[(stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x4e7, 4), (stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x4e6, 4)]
[(stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x4e7, 4), (stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x4e6, 4)]
[(stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x4e7, 4), (stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x4e6, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x4e7, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x4e6, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x4e7, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x4e6, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x4e7, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x4e6, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x4e7, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x4e6, 4)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x4e7, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x4e6, 4)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x4e7, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x4e6, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x4e7, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x4e6, 4)]
[(stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x4e7, 4), (stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x4e6, 4)]
[(stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x4e7, 4), (stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x4e6, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x4e7, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x4e6, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x4e7, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x4e6, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x4e7, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x4e6, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x4e7, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x4e6, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x4e7, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x4e6, 4)]
[(stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x4e7, 4), (stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x4e6, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x4e7, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x4e6, 4)]
[(stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x4e7, 4), (stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x4e6, 4)]
[(stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x4e7, 4), (stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x4e6, 4)]
[(stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x4e7, 4), (stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x4e6, 4)]
[(stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x4e7, 4), (stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x4e6, 4)]
[(stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x4e7, 4), (stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x4e6, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x4e7, 4), (stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x4e6, 4)]
[(stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x4e7, 4), (stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x4e6, 4)]
[(stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x4e7, 4), (stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x4e6, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x4e7, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x4e6, 4)]
[(stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x4e7, 4), (stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x4e6, 4)]
[(stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x4e7, 4), (stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x4e6, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x4e7, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x4e6, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x4e7, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x4e6, 4)]
[(stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x4e7, 4), (stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x4e6, 4)]
[(stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x4e7, 4), (stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x4e6, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x4e7, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x4e6, 4)]
[(register, 0x0, 8) CAST (unique, 0x100037a8, 8), (unique, 0x100037a8, 8) CALL (ram, 0x410f50, 8) , (unique, 0x3200, 8) , (register, 0x0, 8) , (unique, 0x10002577, 8), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffbd8, 8)]
[(register, 0x88, 8) INT_ZEXT (stack, 0xfffffffffffffabc, 4), (stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x4e7, 4), (stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x4e6, 4), (stack, 0xfffffffffffffabc, 4) COPY (stack, 0xfffffffffffffab4, 4)]
[(unique, 0x10002d3b, 4) COPY (stack, 0xfffffffffffffac8, 4), (stack, 0xfffffffffffffac8, 4) SUBPIECE (stack, 0xfffffffffffffac8, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x4e7, 4), (stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x4e6, 4), (stack, 0xfffffffffffffac8, 8) CAST (unique, 0x10003798, 8), (unique, 0x10003798, 8) INT_OR (unique, 0x10001037, 8) , (unique, 0x1000103f, 8), (unique, 0x1000103f, 8) INT_ZEXT (unique, 0x10002533, 4), (unique, 0x10001037, 8) INT_AND (unique, 0x10003790, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10003790, 8) CAST (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbc0, 8) MULTIEQUAL (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8)]
[(stack, 0xfffffffffffffbb8, 8) MULTIEQUAL (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb90, 8) MULTIEQUAL (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8)]
[(stack, 0xfffffffffffffb88, 8) MULTIEQUAL (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb74, 4) MULTIEQUAL (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4)]
[(stack, 0xfffffffffffffb70, 4) MULTIEQUAL (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4)]
[(stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb64, 4) MULTIEQUAL (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4)]
[(stack, 0xfffffffffffffb62, 2) MULTIEQUAL (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2)]
[(stack, 0xfffffffffffffb60, 2) MULTIEQUAL (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2)]
[(stack, 0xfffffffffffffb5c, 4) MULTIEQUAL (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4)]
[(stack, 0xfffffffffffffb58, 4) MULTIEQUAL (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb24, 4) MULTIEQUAL (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4)]
[(stack, 0xfffffffffffffb20, 4) MULTIEQUAL (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae4, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[(stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffadc, 4) MULTIEQUAL (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4)]
[(stack, 0xfffffffffffffad8, 4) MULTIEQUAL (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4)]
[(stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffac8, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffac0, 8) MULTIEQUAL (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8)]
[(stack, 0xfffffffffffffabc, 4) MULTIEQUAL (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4)]
[(stack, 0xfffffffffffffab8, 4) MULTIEQUAL (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4)]
[(stack, 0xfffffffffffffab4, 4) MULTIEQUAL (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4)]
[(stack, 0xfffffffffffffab3, 1) MULTIEQUAL (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1)]
[(stack, 0xfffffffffffffaac, 4) MULTIEQUAL (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4)]
[(stack, 0xfffffffffffffaa8, 4) MULTIEQUAL (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4)]
[(stack, 0xfffffffffffffaa4, 4) MULTIEQUAL (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4)]
[(stack, 0xfffffffffffffaa0, 4) MULTIEQUAL (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4)]
[(ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[(ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x98, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8) , (register, 0x0, 8)]
[(register, 0x90, 4) MULTIEQUAL (unique, 0x10002d3f, 4) , (unique, 0x10002d3f, 4) , (unique, 0x10002d3b, 4)]
[(register, 0x88, 8) MULTIEQUAL (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8)]
[(unique, 0x1000257f, 8) COPY (stack, 0xfffffffffffffb00, 8), (stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[ ---  CBRANCH (ram, 0x4150b8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xfffffffffffffae8, 4) , (const, 0xa, 4), (stack, 0xfffffffffffffae8, 4) SUBPIECE (stack, 0xfffffffffffffae8, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[ ---  CBRANCH (ram, 0x4150b8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xfffffffffffffad8, 4) , (const, 0x0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100037c0, 8) , (const, 0x4150a7, 8), (unique, 0x100037c0, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x51b, 4)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x51b, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x51b, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x51b, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x51b, 4)]
[(stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x51b, 4), (stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x51a, 4)]
[(stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x51b, 4), (stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x51a, 4)]
[(stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x51b, 4), (stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x51a, 4)]
[(stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x51b, 4), (stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x51a, 4)]
[(stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x51b, 4), (stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x51a, 4)]
[(stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x51b, 4), (stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x51a, 4)]
[(stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x51b, 4), (stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x51a, 4)]
[(stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x51b, 4), (stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x51a, 4)]
[(stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x51b, 4), (stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x51a, 4)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x51b, 4), (stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x51a, 4)]
[(stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x51b, 4), (stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x51a, 4)]
[(stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x51b, 4), (stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x51a, 4)]
[(stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x51b, 4), (stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x51a, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x51b, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x51a, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x51b, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x51a, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x51b, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x51a, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x51b, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x51a, 4)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x51b, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x51a, 4)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x51b, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x51a, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x51b, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x51a, 4)]
[(stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x51b, 4), (stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x51a, 4)]
[(stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x51b, 4), (stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x51a, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x51b, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x51a, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x51b, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x51a, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x51b, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x51a, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x51b, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x51a, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x51b, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x51a, 4)]
[(stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x51b, 4), (stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x51a, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x51b, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x51a, 4)]
[(stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x51b, 4), (stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x51a, 4)]
[(stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x51b, 4), (stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x51a, 4)]
[(stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x51b, 4), (stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x51a, 4)]
[(stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x51b, 4), (stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x51a, 4)]
[(stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x51b, 4), (stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x51a, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x51b, 4), (stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x51a, 4)]
[(stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x51b, 4), (stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x51a, 4)]
[(stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x51b, 4), (stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x51a, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x51b, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x51a, 4)]
[(stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x51b, 4), (stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x51a, 4)]
[(stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x51b, 4), (stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x51a, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x51b, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x51a, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x51b, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x51a, 4)]
[(stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x51b, 4), (stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x51a, 4)]
[(stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x51b, 4), (stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x51a, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x51b, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x51a, 4)]
[(register, 0x0, 8) CAST (unique, 0x100037c8, 8), (unique, 0x100037c8, 8) CALL (ram, 0x4110a0, 8) , (register, 0x98, 8) , (unique, 0x1000257f, 8) , (unique, 0x1000257f, 8)]
[(register, 0x88, 8) INT_ZEXT (stack, 0xfffffffffffffad8, 4), (stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x51b, 4), (stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x51a, 4), (stack, 0xfffffffffffffad8, 4) COPY (register, 0x88, 4), (register, 0x88, 4) SUBPIECE (register, 0x88, 8) , (const, 0x0, 4)]
[(unique, 0x10002d47, 4) COPY (stack, 0xfffffffffffffac8, 4), (stack, 0xfffffffffffffac8, 4) SUBPIECE (stack, 0xfffffffffffffac8, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x51b, 4), (stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x51a, 4), (stack, 0xfffffffffffffac8, 8) CAST (unique, 0x100037b8, 8), (unique, 0x100037b8, 8) INT_OR (unique, 0x10001049, 8) , (unique, 0x10001051, 8), (unique, 0x10001051, 8) INT_ZEXT (register, 0x90, 4), (unique, 0x10001049, 8) INT_AND (unique, 0x100037b0, 8) , (const, 0xffffffff00000000, 8), (unique, 0x100037b0, 8) CAST (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbc0, 8) MULTIEQUAL (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8)]
[(stack, 0xfffffffffffffbb8, 8) MULTIEQUAL (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb90, 8) MULTIEQUAL (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8)]
[(stack, 0xfffffffffffffb88, 8) MULTIEQUAL (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb74, 4) MULTIEQUAL (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4)]
[(stack, 0xfffffffffffffb70, 4) MULTIEQUAL (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4)]
[(stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb64, 4) MULTIEQUAL (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4)]
[(stack, 0xfffffffffffffb62, 2) MULTIEQUAL (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2)]
[(stack, 0xfffffffffffffb60, 2) MULTIEQUAL (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2)]
[(stack, 0xfffffffffffffb5c, 4) MULTIEQUAL (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4)]
[(stack, 0xfffffffffffffb58, 4) MULTIEQUAL (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb24, 4) MULTIEQUAL (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4)]
[(stack, 0xfffffffffffffb20, 4) MULTIEQUAL (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae4, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[(stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffadc, 4) MULTIEQUAL (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4)]
[(stack, 0xfffffffffffffad8, 4) MULTIEQUAL (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4)]
[(stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffac8, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffac0, 8) MULTIEQUAL (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8)]
[(stack, 0xfffffffffffffabc, 4) MULTIEQUAL (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4)]
[(stack, 0xfffffffffffffab8, 4) MULTIEQUAL (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4)]
[(stack, 0xfffffffffffffab4, 4) MULTIEQUAL (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4)]
[(stack, 0xfffffffffffffab3, 1) MULTIEQUAL (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1)]
[(stack, 0xfffffffffffffaac, 4) MULTIEQUAL (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4)]
[(stack, 0xfffffffffffffaa8, 4) MULTIEQUAL (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4)]
[(stack, 0xfffffffffffffaa4, 4) MULTIEQUAL (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4)]
[(stack, 0xfffffffffffffaa0, 4) MULTIEQUAL (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4)]
[(ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[(ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x90, 4) MULTIEQUAL (register, 0x90, 4) , (register, 0x90, 4) , (unique, 0x10002d47, 4)]
[(register, 0x88, 8) MULTIEQUAL (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8)]
[(stack, 0xfffffffffffffb08, 4) SUBPIECE (stack, 0xfffffffffffffb08, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffae8, 4) SUBPIECE (stack, 0xfffffffffffffae8, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(unique, 0x10002e5f, 8) COPY (register, 0x98, 8), (register, 0x98, 8) MULTIEQUAL (register, 0x98, 8) , (register, 0x98, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x415880, 1) , (unique, 0xcd00, 1), (unique, 0xcd00, 1) INT_SLESS (unique, 0x100037e8, 8) , (register, 0x18, 8), (unique, 0x100037e8, 8) CAST (register, 0x8, 8), (register, 0x8, 8) CAST (unique, 0x100037e0, 8), (unique, 0x100037e0, 8) INT_SUB (unique, 0x100037d0, 8) , (unique, 0x100037d8, 8), (unique, 0x100037d8, 8) CAST (register, 0x98, 8), (unique, 0x100037d0, 8) CAST (stack, 0xfffffffffffffb00, 8), (register, 0x98, 8) MULTIEQUAL (register, 0x98, 8) , (register, 0x98, 8) , (register, 0x0, 8), (stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[ ---  CBRANCH (ram, 0x415ef8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xfffffffffffffaf8, 8) , (const, 0x0, 8)]
[(unique, 0x1000275b, 8) COPY (register, 0x18, 8), (register, 0x18, 8) CAST (unique, 0x100037f8, 8), (unique, 0x100037f8, 8) INT_SUB (register, 0x18, 8) , (unique, 0x100037f0, 8), (unique, 0x100037f0, 8) CAST (register, 0x8, 8)]
[ ---  CBRANCH (ram, 0x415f03, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (unique, 0x10003800, 8) , (const, 0x0, 8), (unique, 0x10003800, 8) CAST (register, 0x18, 8), (register, 0x18, 8) CAST (unique, 0x100037f8, 8), (unique, 0x100037f8, 8) INT_SUB (register, 0x18, 8) , (unique, 0x100037f0, 8), (unique, 0x100037f0, 8) CAST (register, 0x8, 8)]
[(unique, 0x10002763, 8) COPY (stack, 0xfffffffffffffaf8, 8)]
[(register, 0x18, 4) SUBPIECE (register, 0x18, 8) , (const, 0x0, 4), (register, 0x18, 8) MULTIEQUAL (unique, 0x1000275b, 8) , (unique, 0x10002763, 8)]
[(register, 0x80, 8) INT_AND (unique, 0x10003808, 8) , (const, 0xffffffff, 8), (unique, 0x10003808, 8) CAST (register, 0x18, 8), (register, 0x18, 8) MULTIEQUAL (unique, 0x1000275b, 8) , (unique, 0x10002763, 8)]
[ ---  BRANCH (ram, 0x415856, 1)]
[(unique, 0x100010ff, 4) INT_AND (stack, 0xfffffffffffffadc, 4) , (const, 0x1, 4)]
[ ---  CBRANCH (ram, 0x4158bb, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xfffffffffffffae8, 4) , (const, 0x8, 4)]
[ ---  CBRANCH (ram, 0x4158bb, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x100010ff, 4) , (const, 0x0, 4)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0xd82, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0xd82, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0xd82, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0xd82, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (const, 0x30, 1), (unique, 0x3100, 8) CAST (unique, 0x10003828, 8), (unique, 0x10003828, 8) INT_ADD (unique, 0x10003820, 8) , (const, 0xffffffffffffffff, 8), (unique, 0x10003820, 8) CAST (register, 0x98, 8)]
[(register, 0x8, 8) CAST (unique, 0x10003840, 8), (unique, 0x10003840, 8) INT_SUB (unique, 0x10003830, 8) , (unique, 0x10003838, 8), (unique, 0x10003838, 8) CAST (unique, 0x3100, 8), (unique, 0x10003830, 8) CAST (stack, 0xfffffffffffffb00, 8), (unique, 0x3100, 8) CAST (unique, 0x10003818, 8), (unique, 0x10003818, 8) INT_ADD (unique, 0x10003810, 8) , (const, 0xffffffffffffffff, 8), (unique, 0x10003810, 8) CAST (register, 0x98, 8)]
[(ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[(ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(register, 0x98, 8) MULTIEQUAL (unique, 0x10002e5f, 8) , (unique, 0x10002e5f, 8) , (unique, 0x3100, 8)]
[ ---  CBRANCH (ram, 0x4158c7, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (unique, 0x10003850, 8) , (const, 0x0, 8), (unique, 0x10003850, 8) CAST (register, 0x18, 8), (register, 0x18, 8) INT_SUB (register, 0x18, 8) , (unique, 0x10003848, 8), (unique, 0x10003848, 8) CAST (register, 0x8, 8), (register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8) , (register, 0x8, 8)]
[(register, 0x18, 8) COPY (const, 0x0, 8)]
[(register, 0x18, 4) SUBPIECE (register, 0x18, 8) , (const, 0x0, 4), (register, 0x18, 8) MULTIEQUAL (register, 0x18, 8) , (register, 0x18, 8)]
[(register, 0x80, 4) SUBPIECE (register, 0x80, 8) , (const, 0x0, 4), (register, 0x80, 8) INT_AND (register, 0x18, 8) , (const, 0xffffffff, 8), (register, 0x18, 8) MULTIEQUAL (register, 0x18, 8) , (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x415670, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xfffffffffffffb08, 4) , (const, 0x0, 4)]
[(stack, 0xfffffffffffffb08, 8) CAST (unique, 0x10003868, 8), (unique, 0x10003868, 8) INT_OR (unique, 0x10001106, 8) , (unique, 0x1000110e, 8), (unique, 0x1000110e, 8) INT_AND (unique, 0x10003860, 8) , (const, 0xffffffff, 8), (unique, 0x10003860, 8) CAST (register, 0x8, 8), (unique, 0x10001106, 8) INT_AND (unique, 0x10003858, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10003858, 8) CAST (stack, 0xfffffffffffffb08, 8)]
[(register, 0x10, 4) INT_SUB (register, 0x10, 4) , (register, 0x18, 4), (register, 0x10, 4) INT_SUB (register, 0x90, 4) , (register, 0x8, 4), (register, 0x8, 4) SUBPIECE (register, 0x8, 8) , (const, 0x0, 4)]
[(unique, 0x1000285b, 8) COPY (register, 0x98, 8)]
[ ---  BRANCH (ram, 0x41510b, 1)]
[ ---  CBRANCH (ram, 0x4150d7, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (unique, 0x10003878, 8) , (const, 0x0, 8), (unique, 0x10003878, 8) CAST (register, 0x18, 8), (register, 0x18, 8) INT_SUB (register, 0x18, 8) , (unique, 0x10003870, 8), (unique, 0x10003870, 8) CAST (register, 0x8, 8)]
[(register, 0x18, 8) COPY (const, 0x0, 8)]
[(register, 0x18, 4) SUBPIECE (register, 0x18, 8) , (const, 0x0, 4), (register, 0x18, 8) MULTIEQUAL (register, 0x18, 8) , (register, 0x18, 8)]
[(register, 0x80, 4) SUBPIECE (register, 0x80, 8) , (const, 0x0, 4), (register, 0x80, 8) INT_AND (register, 0x18, 8) , (const, 0xffffffff, 8), (register, 0x18, 8) MULTIEQUAL (register, 0x18, 8) , (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x415670, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xfffffffffffffb08, 4) , (const, 0x0, 4)]
[(stack, 0xfffffffffffffb08, 8) CAST (unique, 0x10003890, 8), (unique, 0x10003890, 8) INT_OR (unique, 0x1000105b, 8) , (unique, 0x10001063, 8), (unique, 0x10001063, 8) INT_AND (unique, 0x10003888, 8) , (const, 0xffffffff, 8), (unique, 0x10003888, 8) CAST (register, 0x8, 8), (unique, 0x1000105b, 8) INT_AND (unique, 0x10003880, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10003880, 8) CAST (stack, 0xfffffffffffffb08, 8)]
[(unique, 0x10002987, 4) COPY (register, 0x0, 4), (register, 0x0, 4) INT_SUB (register, 0x0, 4) , (register, 0x18, 4), (register, 0x0, 4) INT_SUB (register, 0x90, 4) , (register, 0x8, 4), (register, 0x8, 4) SUBPIECE (register, 0x8, 8) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x41511c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xfffffffffffffaf8, 8) , (const, 0x0, 8)]
[(register, 0x80, 4) MULTIEQUAL (register, 0x80, 4) , (register, 0x80, 4)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[(ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8)]
[(unique, 0x100015b1, 4) INT_AND (stack, 0xfffffffffffffadc, 4) , (const, 0x1, 4)]
[(unique, 0x100028e3, 8) COPY (register, 0x98, 8), (register, 0x98, 8) MULTIEQUAL (unique, 0x1000285b, 8) , (register, 0x98, 8)]
[(unique, 0x1000298b, 4) COPY (register, 0x18, 4), (register, 0x18, 4) MULTIEQUAL (register, 0x10, 4) , (register, 0x0, 4)]
[ ---  CBRANCH (ram, 0x41511c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xfffffffffffffae8, 4) , (const, 0x10, 4)]
[(unique, 0x3100, 4) INT_SUB (register, 0x18, 4) , (const, 0x2, 4)]
[(unique, 0x1000298f, 4) COPY (register, 0x18, 4)]
[ ---  CBRANCH (ram, 0x41511c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x100015b1, 4) , (const, 0x0, 4)]
[(unique, 0x10002993, 4) COPY (unique, 0x3100, 4)]
[ ---  CBRANCH (ram, 0x416048, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xfffffffffffffae8, 4) , (const, 0x8, 4)]
[ ---  CBRANCH (ram, 0x416048, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xfffffffffffffadc, 4) , (const, 0x0, 4)]
[(stack, 0xfffffffffffffaf0, 8) CAST (unique, 0x1000389f, 8), (unique, 0x1000389f, 8) INT_ADD (unique, 0x100024ab, 8) , (const, 0x20, 1), (unique, 0x100024ab, 8) INT_LEFT (unique, 0x100024a3, 8) , (const, 0x8, 8), (unique, 0x100024a3, 8) INT_SEXT (unique, 0x10003898, 7), (unique, 0x10003898, 7) CAST (stack, 0xfffffffffffffaf1, 7)]
[(register, 0x18, 4) COPY (const, 0x0, 4)]
[(register, 0x8, 8) COPY (const, 0x0, 8)]
[(unique, 0x100028d3, 8) COPY (stack, 0xfffffffffffffb00, 8)]
[ ---  BRANCH (ram, 0x415856, 1)]
[(stack, 0xfffffffffffffaf0, 8) CAST (unique, 0x100038ae, 8), (unique, 0x100038ae, 8) INT_ADD (unique, 0x1000247f, 8) , (const, 0x20, 1), (unique, 0x1000247f, 8) INT_LEFT (unique, 0x10002477, 8) , (const, 0x8, 8), (unique, 0x10002477, 8) INT_SEXT (unique, 0x100038a7, 7), (unique, 0x100038a7, 7) CAST (stack, 0xfffffffffffffaf1, 7)]
[(register, 0x18, 4) COPY (const, 0x0, 4)]
[(register, 0x8, 8) COPY (const, 0x1, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xe40, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (const, 0x30, 1), (unique, 0x3100, 8) CAST (unique, 0x100038be, 8), (unique, 0x100038be, 8) INT_ADD (unique, 0x100038b6, 8) , (const, 0xffffffffffffffff, 8), (unique, 0x100038b6, 8) CAST (stack, 0xfffffffffffffb00, 8)]
[(unique, 0x100028cb, 8) COPY (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100038ce, 8), (unique, 0x100038ce, 8) INT_ADD (unique, 0x100038c6, 8) , (const, 0xffffffffffffffff, 8), (unique, 0x100038c6, 8) CAST (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbc0, 8) MULTIEQUAL (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8)]
[(stack, 0xfffffffffffffbb8, 8) MULTIEQUAL (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb90, 8) MULTIEQUAL (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8)]
[(stack, 0xfffffffffffffb88, 8) MULTIEQUAL (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb74, 4) MULTIEQUAL (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4)]
[(stack, 0xfffffffffffffb70, 4) MULTIEQUAL (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4)]
[(stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb64, 4) MULTIEQUAL (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4)]
[(stack, 0xfffffffffffffb62, 2) MULTIEQUAL (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2)]
[(stack, 0xfffffffffffffb60, 2) MULTIEQUAL (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2)]
[(stack, 0xfffffffffffffb5c, 4) MULTIEQUAL (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4)]
[(stack, 0xfffffffffffffb58, 4) MULTIEQUAL (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb24, 4) MULTIEQUAL (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4)]
[(stack, 0xfffffffffffffb20, 4) MULTIEQUAL (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae4, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[(stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffadc, 4) MULTIEQUAL (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4)]
[(stack, 0xfffffffffffffad8, 4) MULTIEQUAL (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4)]
[(stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffac8, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffac0, 8) MULTIEQUAL (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8)]
[(stack, 0xfffffffffffffabc, 4) MULTIEQUAL (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4)]
[(stack, 0xfffffffffffffab8, 4) MULTIEQUAL (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4)]
[(stack, 0xfffffffffffffab4, 4) MULTIEQUAL (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4)]
[(stack, 0xfffffffffffffab3, 1) MULTIEQUAL (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1)]
[(stack, 0xfffffffffffffaac, 4) MULTIEQUAL (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4)]
[(stack, 0xfffffffffffffaa8, 4) MULTIEQUAL (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4)]
[(stack, 0xfffffffffffffaa4, 4) MULTIEQUAL (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4)]
[(stack, 0xfffffffffffffaa0, 4) MULTIEQUAL (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4)]
[(ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[(ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(register, 0x90, 4) MULTIEQUAL (register, 0x90, 4) , (register, 0x90, 4) , (register, 0x90, 4)]
[(register, 0x18, 4) MULTIEQUAL (register, 0x18, 4) , (register, 0x18, 4) , (register, 0x18, 4)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x98, 8) MULTIEQUAL (unique, 0x10002e5f, 8) , (unique, 0x100028cb, 8) , (unique, 0x100028d3, 8)]
[(register, 0x88, 8) MULTIEQUAL (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8)]
[(register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8) , (register, 0x8, 8)]
[(register, 0x80, 4) SUBPIECE (register, 0x80, 8) , (const, 0x0, 4), (register, 0x80, 8) MULTIEQUAL (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8)]
[ ---  CBRANCH (ram, 0x415670, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xfffffffffffffb08, 4) , (const, 0x0, 4), (stack, 0xfffffffffffffb08, 4) SUBPIECE (stack, 0xfffffffffffffb08, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb08, 8) CAST (unique, 0x100038e6, 8), (unique, 0x100038e6, 8) INT_OR (unique, 0x100010ee, 8) , (unique, 0x100010f6, 8), (unique, 0x100010f6, 8) INT_AND (unique, 0x100038de, 8) , (const, 0xffffffff, 8), (unique, 0x100038de, 8) CAST (register, 0x8, 8), (unique, 0x100010ee, 8) INT_AND (unique, 0x100038d6, 8) , (const, 0xffffffff00000000, 8), (unique, 0x100038d6, 8) CAST (stack, 0xfffffffffffffb08, 8)]
[(register, 0x90, 4) INT_SUB (register, 0x90, 4) , (register, 0x18, 4), (register, 0x18, 4) INT_ADD (register, 0x18, 4) , (register, 0x8, 4), (register, 0x8, 4) SUBPIECE (register, 0x8, 8) , (const, 0x0, 4)]
[ ---  BRANCH (ram, 0x41511c, 1)]
[(register, 0x80, 4) MULTIEQUAL (register, 0x80, 4) , (register, 0x80, 4) , (register, 0x80, 4) , (register, 0x80, 4) , (register, 0x80, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbc0, 8) MULTIEQUAL (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8)]
[(stack, 0xfffffffffffffbb8, 8) MULTIEQUAL (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb90, 8) MULTIEQUAL (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8)]
[(stack, 0xfffffffffffffb88, 8) MULTIEQUAL (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb74, 4) MULTIEQUAL (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4)]
[(stack, 0xfffffffffffffb70, 4) MULTIEQUAL (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4)]
[(stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb64, 4) MULTIEQUAL (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4)]
[(stack, 0xfffffffffffffb62, 2) MULTIEQUAL (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2)]
[(stack, 0xfffffffffffffb60, 2) MULTIEQUAL (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2)]
[(stack, 0xfffffffffffffb5c, 4) MULTIEQUAL (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4)]
[(stack, 0xfffffffffffffb58, 4) MULTIEQUAL (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb24, 4) MULTIEQUAL (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae4, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[(stack, 0xfffffffffffffadc, 4) MULTIEQUAL (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4)]
[(stack, 0xfffffffffffffad8, 4) MULTIEQUAL (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4)]
[(stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffac8, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffac0, 8) MULTIEQUAL (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8)]
[(stack, 0xfffffffffffffabc, 4) MULTIEQUAL (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4)]
[(stack, 0xfffffffffffffab8, 4) MULTIEQUAL (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4)]
[(stack, 0xfffffffffffffab4, 4) MULTIEQUAL (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4)]
[(stack, 0xfffffffffffffab3, 1) MULTIEQUAL (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1)]
[(stack, 0xfffffffffffffaac, 4) MULTIEQUAL (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4)]
[(stack, 0xfffffffffffffaa8, 4) MULTIEQUAL (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4)]
[(stack, 0xfffffffffffffaa4, 4) MULTIEQUAL (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4)]
[(stack, 0xfffffffffffffaa0, 4) MULTIEQUAL (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4)]
[(ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[(ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x98, 8) MULTIEQUAL (unique, 0x10002e5f, 8) , (unique, 0x100028e3, 8) , (unique, 0x100028e3, 8) , (unique, 0x100028e3, 8) , (register, 0x98, 8)]
[(register, 0x88, 8) MULTIEQUAL (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8)]
[(register, 0x18, 4) MULTIEQUAL (unique, 0x10002987, 4) , (unique, 0x1000298b, 4) , (unique, 0x1000298f, 4) , (unique, 0x10002993, 4) , (register, 0x90, 4)]
[(register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8) , (register, 0x8, 8) , (register, 0x8, 8) , (register, 0x8, 8)]
[(stack, 0xfffffffffffffaf0, 1) SUBPIECE (stack, 0xfffffffffffffaf0, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[ ---  CBRANCH (ram, 0x415a60, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) INT_OR (register, 0x0, 4) , (stack, 0xfffffffffffffb10, 4), (stack, 0xfffffffffffffb10, 4) SUBPIECE (stack, 0xfffffffffffffb10, 8) , (const, 0x0, 8), (register, 0x0, 4) INT_OR (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffae0, 4), (stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4), (stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8), (stack, 0xfffffffffffffb20, 4) MULTIEQUAL (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4)]
[ ---  CBRANCH (ram, 0x41517f, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xfffffffffffffaf0, 1) , (const, 0x20, 1)]
[ ---  CBRANCH (ram, 0x41724f, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (const, 0x0, 4) , (unique, 0x100038ee, 4), (unique, 0x100038ee, 4) CAST (register, 0x18, 4)]
[(register, 0x18, 4) COPY (const, 0x0, 4)]
[ ---  BRANCH (ram, 0x41517f, 1)]
[(register, 0x18, 4) INT_SUB (register, 0x18, 4) , (const, 0x1, 4)]
[(unique, 0x100026f3, 8) COPY (register, 0x8, 8)]
[(unique, 0x10002943, 8) COPY (register, 0x98, 8)]
[ ---  CBRANCH (ram, 0x417256, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xfffffffffffffaf0, 1) , (const, 0x20, 1)]
[ ---  CBRANCH (ram, 0x415a75, 1) , (unique, 0xd080, 1), (unique, 0xd080, 1) INT_SLESS (unique, 0x100038f2, 4) , (const, 0x1, 4), (unique, 0x100038f2, 4) CAST (register, 0x18, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10003902, 8) , (const, 0x415aa8, 8), (unique, 0x10003902, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x9a1, 4)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x9a1, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x9a1, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x9a1, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x9a1, 4)]
[(stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x9a1, 4), (stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x9a0, 4)]
[(stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x9a1, 4), (stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x9a0, 4)]
[(stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x9a1, 4), (stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x9a0, 4)]
[(stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x9a1, 4), (stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x9a0, 4)]
[(stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x9a1, 4), (stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x9a0, 4)]
[(stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x9a1, 4), (stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x9a0, 4)]
[(stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x9a1, 4), (stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x9a0, 4)]
[(stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x9a1, 4), (stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x9a0, 4), (stack, 0xfffffffffffffabc, 4) COPY (register, 0x88, 4), (register, 0x88, 4) SUBPIECE (register, 0x88, 8) , (const, 0x0, 4)]
[(stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x9a1, 4), (stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x9a0, 4)]
[(stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x9a1, 4), (stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x9a0, 4), (stack, 0xfffffffffffffac8, 8) COPY (register, 0x98, 8)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x9a1, 4), (stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x9a0, 4)]
[(stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x9a1, 4), (stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x9a0, 4), (stack, 0xfffffffffffffad8, 4) COPY (register, 0x80, 4)]
[(stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x9a1, 4), (stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x9a0, 4)]
[(stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x9a1, 4), (stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x9a0, 4)]
[(stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x9a1, 4), (stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x9a0, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x9a1, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x9a0, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x9a1, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x9a0, 4), (stack, 0xfffffffffffffaf0, 8) COPY (register, 0x8, 8)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x9a1, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x9a0, 4)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x9a1, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x9a0, 4)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x9a1, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x9a0, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x9a1, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x9a0, 4)]
[(stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x9a1, 4), (stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x9a0, 4)]
[(stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x9a1, 4), (stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x9a0, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x9a1, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x9a0, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x9a1, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x9a0, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x9a1, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x9a0, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x9a1, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x9a0, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x9a1, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x9a0, 4)]
[(stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x9a1, 4), (stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x9a0, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x9a1, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x9a0, 4)]
[(stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x9a1, 4), (stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x9a0, 4)]
[(stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x9a1, 4), (stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x9a0, 4)]
[(stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x9a1, 4), (stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x9a0, 4)]
[(stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x9a1, 4), (stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x9a0, 4)]
[(stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x9a1, 4), (stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x9a0, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x9a1, 4), (stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x9a0, 4)]
[(stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x9a1, 4), (stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x9a0, 4)]
[(stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x9a1, 4), (stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x9a0, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x9a1, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x9a0, 4)]
[(stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x9a1, 4), (stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x9a0, 4)]
[(stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x9a1, 4), (stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x9a0, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x9a1, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x9a0, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x9a1, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x9a0, 4)]
[(stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x9a1, 4), (stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x9a0, 4)]
[(stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x9a1, 4), (stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x9a0, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x9a1, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x9a0, 4)]
[ ---  CBRANCH (ram, 0x414398, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xfffffffffffffb00, 8) , (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10003912, 8), (unique, 0x10003912, 8) CALL (ram, 0x418b00, 8) , (register, 0x38, 8) , (const, 0x20, 4) , (unique, 0x1000390a, 8), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x9a1, 4), (unique, 0x1000390a, 8) CAST (register, 0x10, 8), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x9a0, 4), (stack, 0xfffffffffffffb00, 8) COPY (register, 0x10, 8), (register, 0x10, 8) CAST (unique, 0x100038fa, 8), (unique, 0x100038fa, 8) INT_SEXT (unique, 0x100038f6, 4), (unique, 0x100038f6, 4) CAST (register, 0x18, 4), (register, 0x18, 4) MULTIEQUAL (register, 0x18, 4) , (register, 0x18, 4)]
[ ---  CBRANCH (ram, 0x4157e8, 1) , (unique, 0xc900, 1), (unique, 0xc900, 1) INT_LESS (const, 0x7ffffffe, 4) , (stack, 0xfffffffffffffabc, 4)]
[ ---  CBRANCH (ram, 0x414e98, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (register, 0x0, 4) , (register, 0x18, 4), (register, 0x0, 4) INT_SUB (const, 0x7fffffff, 4) , (stack, 0xfffffffffffffabc, 4)]
[(register, 0x88, 8) INT_ZEXT (register, 0x88, 4), (register, 0x88, 4) INT_ADD (stack, 0xfffffffffffffabc, 4) , (register, 0x18, 4)]
[(register, 0x18, 4) COPY (const, 0x0, 4)]
[(unique, 0x10002703, 8) COPY (stack, 0xfffffffffffffaf0, 8)]
[(unique, 0x10002953, 8) COPY (stack, 0xfffffffffffffac8, 8)]
[(unique, 0x10002abf, 4) COPY (stack, 0xfffffffffffffad8, 4)]
[ ---  BRANCH (ram, 0x415144, 1)]
[(register, 0x18, 4) COPY (const, 0x0, 4)]
[(unique, 0x100026fb, 8) COPY (register, 0x8, 8)]
[(unique, 0x1000294b, 8) COPY (register, 0x98, 8)]
[ ---  BRANCH (ram, 0x415144, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbc0, 8) MULTIEQUAL (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8)]
[(stack, 0xfffffffffffffbb8, 8) MULTIEQUAL (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb90, 8) MULTIEQUAL (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8)]
[(stack, 0xfffffffffffffb88, 8) MULTIEQUAL (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb74, 4) MULTIEQUAL (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4)]
[(stack, 0xfffffffffffffb70, 4) MULTIEQUAL (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4)]
[(stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb64, 4) MULTIEQUAL (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4)]
[(stack, 0xfffffffffffffb62, 2) MULTIEQUAL (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2)]
[(stack, 0xfffffffffffffb60, 2) MULTIEQUAL (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2)]
[(stack, 0xfffffffffffffb5c, 4) MULTIEQUAL (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4)]
[(stack, 0xfffffffffffffb58, 4) MULTIEQUAL (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb24, 4) MULTIEQUAL (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4)]
[(stack, 0xfffffffffffffb20, 4) MULTIEQUAL (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae4, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[(stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffadc, 4) MULTIEQUAL (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4)]
[(stack, 0xfffffffffffffad8, 4) MULTIEQUAL (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4)]
[(stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffac8, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffac0, 8) MULTIEQUAL (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8)]
[(stack, 0xfffffffffffffabc, 4) MULTIEQUAL (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4)]
[(stack, 0xfffffffffffffab8, 4) MULTIEQUAL (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4)]
[(stack, 0xfffffffffffffab4, 4) MULTIEQUAL (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4)]
[(stack, 0xfffffffffffffab3, 1) MULTIEQUAL (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1)]
[(stack, 0xfffffffffffffaac, 4) MULTIEQUAL (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4)]
[(stack, 0xfffffffffffffaa8, 4) MULTIEQUAL (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4)]
[(stack, 0xfffffffffffffaa4, 4) MULTIEQUAL (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4)]
[(stack, 0xfffffffffffffaa0, 4) MULTIEQUAL (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4)]
[(ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[(ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(register, 0x80, 4) MULTIEQUAL (register, 0x80, 4) , (register, 0x80, 4) , (unique, 0x10002abf, 4)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x98, 8) MULTIEQUAL (unique, 0x10002943, 8) , (unique, 0x1000294b, 8) , (unique, 0x10002953, 8)]
[(register, 0x18, 4) MULTIEQUAL (register, 0x18, 4) , (register, 0x18, 4) , (register, 0x18, 4)]
[(register, 0x8, 8) MULTIEQUAL (unique, 0x100026f3, 8) , (unique, 0x100026fb, 8) , (unique, 0x10002703, 8)]
[(register, 0x88, 4) SUBPIECE (register, 0x88, 8) , (const, 0x0, 4), (register, 0x88, 8) MULTIEQUAL (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8)]
[ ---  CBRANCH (ram, 0x415ca0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xfffffffffffffb10, 4) , (const, 0x0, 4), (stack, 0xfffffffffffffb10, 4) SUBPIECE (stack, 0xfffffffffffffb10, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[ ---  CBRANCH (ram, 0x41652d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xfffffffffffffb20, 4) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x41517f, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xfffffffffffffae0, 4) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x41705e, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESSEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRSUB (register, 0x38, 8) , (const, 0x30, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRSUB (register, 0x38, 8) , (const, 0x28, 8)]
[(stack, 0xfffffffffffffb20, 4) COPY (register, 0x88, 4)]
[(register, 0x30, 4) COPY (const, 0x20, 4)]
[(stack, 0xfffffffffffffaf0, 8) CAST (unique, 0x10003922, 8), (unique, 0x10003922, 8) INT_OR (unique, 0x10001571, 8) , (unique, 0x10001579, 8), (unique, 0x10001579, 8) INT_ZEXT (register, 0x80, 4), (unique, 0x10001571, 8) INT_AND (unique, 0x1000391a, 8) , (const, 0xffffffff00000000, 8), (unique, 0x1000391a, 8) CAST (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffb00, 8) COPY (register, 0x98, 8)]
[(stack, 0xfffffffffffffb10, 8) COPY (register, 0x8, 8)]
[ ---  BRANCH (ram, 0x416c31, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3800, 8) , (unique, 0x3100, 8), (unique, 0x3800, 8) PTRSUB (register, 0x38, 8) , (const, 0x28, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x965, 4), (ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x963, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x965, 4), (ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x963, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x965, 4), (ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x963, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x965, 4), (ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x963, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0xbd80, 8) , (const, 0x20, 1)]
[ ---  BRANCH (ram, 0x41516e, 1)]
[ ---  CBRANCH (ram, 0x416f10, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESSEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRSUB (register, 0x38, 8) , (const, 0x30, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRSUB (register, 0x38, 8) , (const, 0x28, 8)]
[(stack, 0xfffffffffffffb20, 4) COPY (register, 0x88, 4)]
[(register, 0x30, 4) COPY (const, 0x2b, 4)]
[(stack, 0xfffffffffffffaf0, 8) CAST (unique, 0x10003932, 8), (unique, 0x10003932, 8) INT_OR (unique, 0x100014d7, 8) , (unique, 0x100014df, 8), (unique, 0x100014df, 8) INT_ZEXT (register, 0x80, 4), (unique, 0x100014d7, 8) INT_AND (unique, 0x1000392a, 8) , (const, 0xffffffff00000000, 8), (unique, 0x1000392a, 8) CAST (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffb00, 8) COPY (register, 0x98, 8)]
[(stack, 0xfffffffffffffb10, 8) COPY (register, 0x8, 8)]
[ ---  BRANCH (ram, 0x416c31, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3800, 8) , (unique, 0x3100, 8), (unique, 0x3800, 8) PTRSUB (register, 0x38, 8) , (const, 0x28, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x92f, 4), (ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x92d, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x92f, 4), (ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x92d, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x92f, 4), (ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x92d, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x92f, 4), (ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x92d, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0xbd80, 8) , (const, 0x2b, 1)]
[ ---  BRANCH (ram, 0x41516e, 1)]
[ ---  CBRANCH (ram, 0x416c10, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRSUB (register, 0x38, 8) , (const, 0x30, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRSUB (register, 0x38, 8) , (const, 0x28, 8)]
[(stack, 0xfffffffffffffb20, 4) COPY (register, 0x88, 4)]
[(register, 0x30, 4) COPY (const, 0x2d, 4)]
[(stack, 0xfffffffffffffaf0, 8) CAST (unique, 0x10003942, 8), (unique, 0x10003942, 8) INT_OR (unique, 0x100013fe, 8) , (unique, 0x10001406, 8), (unique, 0x10001406, 8) INT_ZEXT (register, 0x80, 4), (unique, 0x100013fe, 8) INT_AND (unique, 0x1000393a, 8) , (const, 0xffffffff00000000, 8), (unique, 0x1000393a, 8) CAST (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffb00, 8) COPY (register, 0x98, 8)]
[(stack, 0xfffffffffffffb10, 8) COPY (register, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000394a, 8) , (const, 0x416c39, 8), (unique, 0x1000394a, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x8ee, 4)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x8ee, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x8ee, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x8ee, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x8ee, 4)]
[(stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x8ee, 4), (stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x8ed, 4)]
[(stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x8ee, 4), (stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x8ed, 4)]
[(stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x8ee, 4), (stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x8ed, 4)]
[(stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x8ee, 4), (stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x8ed, 4)]
[(stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x8ee, 4), (stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x8ed, 4)]
[(stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x8ee, 4), (stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x8ed, 4)]
[(stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x8ee, 4), (stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x8ed, 4)]
[(stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x8ee, 4), (stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x8ed, 4)]
[(stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x8ee, 4), (stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x8ed, 4)]
[(stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x8ee, 4), (stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x8ed, 4)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x8ee, 4), (stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x8ed, 4)]
[(stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x8ee, 4), (stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x8ed, 4)]
[(stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x8ee, 4), (stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x8ed, 4)]
[(stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x8ee, 4), (stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x8ed, 4)]
[(stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x8ee, 4), (stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x8ed, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x8ee, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x8ed, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x8ee, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x8ed, 4)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x8ee, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x8ed, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x8ee, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x8ed, 4)]
[(stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x8ee, 4), (stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x8ed, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x8ee, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x8ed, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x8ee, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x8ed, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x8ee, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x8ed, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x8ee, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x8ed, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x8ee, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x8ed, 4)]
[(stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x8ee, 4), (stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x8ed, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x8ee, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x8ed, 4)]
[(stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x8ee, 4), (stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x8ed, 4)]
[(stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x8ee, 4), (stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x8ed, 4)]
[(stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x8ee, 4), (stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x8ed, 4)]
[(stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x8ee, 4), (stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x8ed, 4)]
[(stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x8ee, 4), (stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x8ed, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x8ee, 4), (stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x8ed, 4)]
[(stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x8ee, 4), (stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x8ed, 4)]
[(stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x8ee, 4), (stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x8ed, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x8ee, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x8ed, 4)]
[(stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x8ee, 4), (stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x8ed, 4)]
[(stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x8ee, 4), (stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x8ed, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x8ee, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x8ed, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x8ee, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x8ed, 4)]
[(stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x8ee, 4), (stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x8ed, 4)]
[(stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x8ee, 4), (stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x8ed, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x8ee, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x8ed, 4)]
[(unique, 0x100026eb, 8) COPY (stack, 0xfffffffffffffb10, 8), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x8ee, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (unique, 0x10002d6b, 8) , (const, 0x8ed, 4), (unique, 0x10002d6b, 8) COPY (register, 0x8, 8)]
[(unique, 0x1000292b, 8) COPY (stack, 0xfffffffffffffb00, 8), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x8ee, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (unique, 0x10002d5b, 8) , (const, 0x8ed, 4), (unique, 0x10002d5b, 8) COPY (register, 0x98, 8)]
[(unique, 0x10002a2b, 4) COPY (stack, 0xfffffffffffffaf0, 4), (stack, 0xfffffffffffffaf0, 4) SUBPIECE (stack, 0xfffffffffffffaf0, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x8ee, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x8ed, 4), (stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(unique, 0x10002d97, 4) COPY (stack, 0xfffffffffffffb20, 4), (stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x8ee, 4), (stack, 0xfffffffffffffb20, 4) INDIRECT (unique, 0x10002d7b, 4) , (const, 0x8ed, 4), (unique, 0x10002d7b, 4) COPY (register, 0x88, 4)]
[ ---  CBRANCH (ram, 0x41516e, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0xffffffff, 4), (register, 0x0, 4) CALL (ram, 0x41e9e0, 8) , (register, 0x38, 8) , (register, 0x30, 4), (register, 0x30, 4) MULTIEQUAL (register, 0x30, 4) , (register, 0x30, 4) , (register, 0x30, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3800, 8) , (unique, 0x3100, 8), (unique, 0x3800, 8) PTRSUB (register, 0x38, 8) , (const, 0x28, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x60c, 4), (ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x60a, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x60c, 4), (ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x60a, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x60c, 4), (ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x60a, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x60c, 4), (ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x60a, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0xbd80, 8) , (const, 0x2d, 1)]
[(unique, 0x100026e3, 8) COPY (register, 0x8, 8)]
[(unique, 0x10002923, 8) COPY (register, 0x98, 8)]
[(unique, 0x10002d93, 4) COPY (register, 0x88, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbc0, 8) MULTIEQUAL (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8)]
[(stack, 0xfffffffffffffbb8, 8) MULTIEQUAL (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb90, 8) MULTIEQUAL (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8)]
[(stack, 0xfffffffffffffb88, 8) MULTIEQUAL (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb74, 4) MULTIEQUAL (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4)]
[(stack, 0xfffffffffffffb70, 4) MULTIEQUAL (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4)]
[(stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb64, 4) MULTIEQUAL (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4)]
[(stack, 0xfffffffffffffb62, 2) MULTIEQUAL (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2)]
[(stack, 0xfffffffffffffb60, 2) MULTIEQUAL (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2)]
[(stack, 0xfffffffffffffb5c, 4) MULTIEQUAL (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4)]
[(stack, 0xfffffffffffffb58, 4) MULTIEQUAL (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb24, 4) MULTIEQUAL (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4)]
[(stack, 0xfffffffffffffb20, 4) MULTIEQUAL (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae4, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[(stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffadc, 4) MULTIEQUAL (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4)]
[(stack, 0xfffffffffffffad8, 4) MULTIEQUAL (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4)]
[(stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffac8, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffac0, 8) MULTIEQUAL (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8)]
[(stack, 0xfffffffffffffabc, 4) MULTIEQUAL (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4)]
[(stack, 0xfffffffffffffab8, 4) MULTIEQUAL (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4)]
[(stack, 0xfffffffffffffab4, 4) MULTIEQUAL (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4)]
[(stack, 0xfffffffffffffab3, 1) MULTIEQUAL (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1)]
[(stack, 0xfffffffffffffaac, 4) MULTIEQUAL (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4)]
[(stack, 0xfffffffffffffaa8, 4) MULTIEQUAL (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4)]
[(stack, 0xfffffffffffffaa4, 4) MULTIEQUAL (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4)]
[(stack, 0xfffffffffffffaa0, 4) MULTIEQUAL (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4)]
[(ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[(ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(register, 0x80, 4) MULTIEQUAL (register, 0x80, 4) , (unique, 0x10002a2b, 4) , (register, 0x80, 4) , (register, 0x80, 4)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x98, 8) MULTIEQUAL (unique, 0x10002923, 8) , (unique, 0x1000292b, 8) , (register, 0x98, 8) , (register, 0x98, 8)]
[(register, 0x8, 8) MULTIEQUAL (unique, 0x100026e3, 8) , (unique, 0x100026eb, 8) , (register, 0x8, 8) , (register, 0x8, 8)]
[ ---  CBRANCH (ram, 0x414398, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x88, 4) , (const, 0x7fffffff, 4), (register, 0x88, 4) MULTIEQUAL (unique, 0x10002d93, 4) , (unique, 0x10002d97, 4) , (register, 0x88, 4) , (register, 0x88, 4)]
[(register, 0x88, 8) INT_ZEXT (register, 0x88, 4), (register, 0x88, 4) INT_ADD (register, 0x88, 4) , (const, 0x1, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbc0, 8) MULTIEQUAL (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8)]
[(stack, 0xfffffffffffffbb8, 8) MULTIEQUAL (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb90, 8) MULTIEQUAL (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8)]
[(stack, 0xfffffffffffffb88, 8) MULTIEQUAL (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb74, 4) MULTIEQUAL (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4)]
[(stack, 0xfffffffffffffb70, 4) MULTIEQUAL (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4)]
[(stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb64, 4) MULTIEQUAL (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4)]
[(stack, 0xfffffffffffffb62, 2) MULTIEQUAL (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2)]
[(stack, 0xfffffffffffffb60, 2) MULTIEQUAL (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2)]
[(stack, 0xfffffffffffffb5c, 4) MULTIEQUAL (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4)]
[(stack, 0xfffffffffffffb58, 4) MULTIEQUAL (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb24, 4) MULTIEQUAL (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4)]
[(stack, 0xfffffffffffffb20, 4) MULTIEQUAL (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae4, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[(stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffadc, 4) MULTIEQUAL (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4)]
[(stack, 0xfffffffffffffad8, 4) MULTIEQUAL (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4)]
[(stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffac8, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffac0, 8) MULTIEQUAL (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8)]
[(stack, 0xfffffffffffffabc, 4) MULTIEQUAL (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4)]
[(stack, 0xfffffffffffffab8, 4) MULTIEQUAL (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4)]
[(stack, 0xfffffffffffffab4, 4) MULTIEQUAL (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4)]
[(stack, 0xfffffffffffffab3, 1) MULTIEQUAL (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1)]
[(stack, 0xfffffffffffffaac, 4) MULTIEQUAL (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4)]
[(stack, 0xfffffffffffffaa8, 4) MULTIEQUAL (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4)]
[(stack, 0xfffffffffffffaa4, 4) MULTIEQUAL (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4)]
[(stack, 0xfffffffffffffaa0, 4) MULTIEQUAL (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4)]
[(ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[(ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(register, 0x80, 4) MULTIEQUAL (register, 0x80, 4) , (register, 0x80, 4) , (register, 0x80, 4) , (register, 0x80, 4)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x98, 8) MULTIEQUAL (register, 0x98, 8) , (register, 0x98, 8) , (register, 0x98, 8) , (register, 0x98, 8)]
[(register, 0x18, 4) MULTIEQUAL (register, 0x18, 4) , (register, 0x18, 4) , (register, 0x18, 4) , (register, 0x18, 4)]
[(register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8) , (register, 0x8, 8) , (register, 0x8, 8)]
[(register, 0x88, 4) SUBPIECE (register, 0x88, 8) , (const, 0x0, 4), (register, 0x88, 8) MULTIEQUAL (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8)]
[ ---  CBRANCH (ram, 0x4151f2, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xfffffffffffffaf8, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[ ---  CBRANCH (ram, 0x4151f2, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xfffffffffffffae8, 4) , (const, 0x10, 4), (stack, 0xfffffffffffffae8, 4) SUBPIECE (stack, 0xfffffffffffffae8, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x4151f2, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xfffffffffffffadc, 4) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x416f90, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRSUB (register, 0x38, 8) , (const, 0x30, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRSUB (register, 0x38, 8) , (const, 0x28, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10003972, 8) , (const, 0x416fb9, 8), (unique, 0x10003972, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x8c3, 4)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x8c3, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x8c3, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x8c3, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x8c3, 4)]
[(stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x8c3, 4), (stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x8c2, 4)]
[(stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x8c3, 4), (stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x8c2, 4)]
[(stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x8c3, 4), (stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x8c2, 4)]
[(stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x8c3, 4), (stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x8c2, 4)]
[(stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x8c3, 4), (stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x8c2, 4)]
[(stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x8c3, 4), (stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x8c2, 4)]
[(stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x8c3, 4), (stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x8c2, 4)]
[(stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x8c3, 4), (stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x8c2, 4)]
[(stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x8c3, 4), (stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x8c2, 4)]
[(stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x8c3, 4), (stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x8c2, 4)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x8c3, 4), (stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x8c2, 4)]
[(stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x8c3, 4), (stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x8c2, 4)]
[(stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x8c3, 4), (stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x8c2, 4)]
[(stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x8c3, 4), (stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x8c2, 4)]
[(stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x8c3, 4), (stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x8c2, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x8c3, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x8c2, 4)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x8c3, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x8c2, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x8c3, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x8c2, 4)]
[(stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x8c3, 4), (stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x8c2, 4)]
[(stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x8c3, 4), (stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x8c2, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x8c3, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x8c2, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x8c3, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x8c2, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x8c3, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x8c2, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x8c3, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x8c2, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x8c3, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x8c2, 4)]
[(stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x8c3, 4), (stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x8c2, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x8c3, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x8c2, 4)]
[(stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x8c3, 4), (stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x8c2, 4)]
[(stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x8c3, 4), (stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x8c2, 4)]
[(stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x8c3, 4), (stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x8c2, 4)]
[(stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x8c3, 4), (stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x8c2, 4)]
[(stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x8c3, 4), (stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x8c2, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x8c3, 4), (stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x8c2, 4)]
[(stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x8c3, 4), (stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x8c2, 4)]
[(stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x8c3, 4), (stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x8c2, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x8c3, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x8c2, 4)]
[(stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x8c3, 4), (stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x8c2, 4)]
[(stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x8c3, 4), (stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x8c2, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x8c3, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x8c2, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x8c3, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x8c2, 4)]
[(stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x8c3, 4), (stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x8c2, 4)]
[(stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x8c3, 4), (stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x8c2, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x8c3, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x8c2, 4)]
[(stack, 0xfffffffffffffaf8, 4) SUBPIECE (stack, 0xfffffffffffffaf8, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x8c3, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x8c2, 4), (stack, 0xfffffffffffffaf8, 8) CAST (unique, 0x1000396a, 8), (unique, 0x1000396a, 8) INT_OR (unique, 0x10001518, 8) , (unique, 0x10001520, 8), (unique, 0x10001520, 8) INT_ZEXT (register, 0x80, 4), (unique, 0x10001518, 8) INT_AND (unique, 0x10003962, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10003962, 8) CAST (stack, 0xfffffffffffffaf8, 8)]
[(unique, 0x10001528, 4) SUBPIECE (stack, 0xfffffffffffffaf0, 8) , (const, 0x0, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x8c3, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x8c2, 4), (stack, 0xfffffffffffffaf0, 8) CAST (unique, 0x1000395a, 8), (unique, 0x1000395a, 8) INT_OR (unique, 0x10001508, 8) , (register, 0x88, 8), (unique, 0x10001508, 8) INT_AND (unique, 0x10003952, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10003952, 8) CAST (stack, 0xfffffffffffffaf0, 8)]
[(unique, 0x1000267b, 8) COPY (stack, 0xfffffffffffffb10, 8), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x8c3, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x8c2, 4), (stack, 0xfffffffffffffb10, 8) COPY (register, 0x8, 8)]
[(unique, 0x1000286b, 8) COPY (stack, 0xfffffffffffffb00, 8), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x8c3, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x8c2, 4), (stack, 0xfffffffffffffb00, 8) COPY (register, 0x98, 8)]
[ ---  CBRANCH (ram, 0x4151b8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0xffffffff, 4), (register, 0x0, 4) CALL (ram, 0x41e9e0, 8) , (register, 0x38, 8) , (const, 0x30, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3800, 8) , (unique, 0x3100, 8), (unique, 0x3800, 8) PTRSUB (register, 0x38, 8) , (const, 0x28, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x664, 4), (ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x662, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x664, 4), (ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x662, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x664, 4), (ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x662, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x664, 4), (ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x662, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0xbd80, 8) , (const, 0x30, 1)]
[(unique, 0x10002673, 8) COPY (register, 0x8, 8)]
[(unique, 0x10002863, 8) COPY (register, 0x98, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbc0, 8) MULTIEQUAL (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8)]
[(stack, 0xfffffffffffffbb8, 8) MULTIEQUAL (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb90, 8) MULTIEQUAL (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8)]
[(stack, 0xfffffffffffffb88, 8) MULTIEQUAL (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb74, 4) MULTIEQUAL (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4)]
[(stack, 0xfffffffffffffb70, 4) MULTIEQUAL (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4)]
[(stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb64, 4) MULTIEQUAL (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4)]
[(stack, 0xfffffffffffffb62, 2) MULTIEQUAL (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2)]
[(stack, 0xfffffffffffffb60, 2) MULTIEQUAL (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2)]
[(stack, 0xfffffffffffffb5c, 4) MULTIEQUAL (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4)]
[(stack, 0xfffffffffffffb58, 4) MULTIEQUAL (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb24, 4) MULTIEQUAL (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4)]
[(stack, 0xfffffffffffffb20, 4) MULTIEQUAL (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae4, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[(stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffadc, 4) MULTIEQUAL (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4)]
[(stack, 0xfffffffffffffad8, 4) MULTIEQUAL (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4)]
[(stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffac8, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffac0, 8) MULTIEQUAL (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8)]
[(stack, 0xfffffffffffffabc, 4) MULTIEQUAL (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4)]
[(stack, 0xfffffffffffffab8, 4) MULTIEQUAL (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4)]
[(stack, 0xfffffffffffffab4, 4) MULTIEQUAL (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4)]
[(stack, 0xfffffffffffffab3, 1) MULTIEQUAL (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1)]
[(stack, 0xfffffffffffffaac, 4) MULTIEQUAL (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4)]
[(stack, 0xfffffffffffffaa8, 4) MULTIEQUAL (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4)]
[(stack, 0xfffffffffffffaa4, 4) MULTIEQUAL (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4)]
[(stack, 0xfffffffffffffaa0, 4) MULTIEQUAL (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4)]
[(ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[(ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(register, 0x80, 4) MULTIEQUAL (register, 0x80, 4) , (stack, 0xfffffffffffffaf8, 4)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x98, 8) MULTIEQUAL (unique, 0x10002863, 8) , (unique, 0x1000286b, 8)]
[(register, 0x8, 8) MULTIEQUAL (unique, 0x10002673, 8) , (unique, 0x1000267b, 8)]
[ ---  CBRANCH (ram, 0x414398, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x88, 4) , (const, 0x7fffffff, 4), (register, 0x88, 4) MULTIEQUAL (register, 0x88, 4) , (unique, 0x10001528, 4)]
[ ---  CBRANCH (ram, 0x416f36, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRSUB (register, 0x38, 8) , (const, 0x30, 8), (unique, 0xbd80, 8) CAST (unique, 0x1000397a, 8), (unique, 0x1000397a, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRSUB (register, 0x38, 8) , (const, 0x28, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100039a2, 8) , (const, 0x416f5e, 8), (unique, 0x100039a2, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x898, 4)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x898, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x898, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x898, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x898, 4)]
[(stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x898, 4), (stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x897, 4)]
[(stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x898, 4), (stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x897, 4)]
[(stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x898, 4), (stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x897, 4)]
[(stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x898, 4), (stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x897, 4)]
[(stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x898, 4), (stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x897, 4)]
[(stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x898, 4), (stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x897, 4)]
[(stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x898, 4), (stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x897, 4)]
[(stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x898, 4), (stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x897, 4)]
[(stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x898, 4), (stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x897, 4)]
[(stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x898, 4), (stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x897, 4)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x898, 4), (stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x897, 4)]
[(stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x898, 4), (stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x897, 4)]
[(stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x898, 4), (stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x897, 4)]
[(stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x898, 4), (stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x897, 4)]
[(stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x898, 4), (stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x897, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x898, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x897, 4)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x898, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x897, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x898, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x897, 4)]
[(stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x898, 4), (stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x897, 4)]
[(stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x898, 4), (stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x897, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x898, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x897, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x898, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x897, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x898, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x897, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x898, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x897, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x898, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x897, 4)]
[(stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x898, 4), (stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x897, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x898, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x897, 4)]
[(stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x898, 4), (stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x897, 4)]
[(stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x898, 4), (stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x897, 4)]
[(stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x898, 4), (stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x897, 4)]
[(stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x898, 4), (stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x897, 4)]
[(stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x898, 4), (stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x897, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x898, 4), (stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x897, 4)]
[(stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x898, 4), (stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x897, 4)]
[(stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x898, 4), (stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x897, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x898, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x897, 4)]
[(stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x898, 4), (stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x897, 4)]
[(stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x898, 4), (stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x897, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x898, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x897, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x898, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x897, 4)]
[(stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x898, 4), (stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x897, 4)]
[(stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x898, 4), (stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x897, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x898, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x897, 4)]
[(stack, 0xfffffffffffffaf8, 4) SUBPIECE (stack, 0xfffffffffffffaf8, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x898, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x897, 4), (stack, 0xfffffffffffffaf8, 8) CAST (unique, 0x1000399a, 8), (unique, 0x1000399a, 8) INT_OR (unique, 0x100014f7, 8) , (unique, 0x100014ff, 8), (unique, 0x100014ff, 8) INT_ZEXT (register, 0x80, 4), (unique, 0x100014f7, 8) INT_AND (unique, 0x10003992, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10003992, 8) CAST (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 4) SUBPIECE (stack, 0xfffffffffffffaf0, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x898, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x897, 4), (stack, 0xfffffffffffffaf0, 8) CAST (unique, 0x1000398a, 8), (unique, 0x1000398a, 8) INT_OR (unique, 0x100014e7, 8) , (unique, 0x100014ef, 8), (unique, 0x100014ef, 8) INT_ZEXT (register, 0x88, 4), (unique, 0x100014e7, 8) INT_AND (unique, 0x10003982, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10003982, 8) CAST (stack, 0xfffffffffffffaf0, 8)]
[(unique, 0x1000265b, 8) COPY (stack, 0xfffffffffffffb10, 8), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x898, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x897, 4), (stack, 0xfffffffffffffb10, 8) COPY (register, 0x8, 8)]
[(unique, 0x1000282b, 8) COPY (stack, 0xfffffffffffffb00, 8), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x898, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x897, 4), (stack, 0xfffffffffffffb00, 8) COPY (register, 0x98, 8)]
[ ---  CBRANCH (ram, 0x4151e1, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0xffffffff, 4), (register, 0x0, 4) CALL (ram, 0x41e9e0, 8) , (register, 0x38, 8) , (register, 0x30, 4), (register, 0x30, 4) INT_ZEXT (register, 0xb8, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3800, 8) , (unique, 0x100039aa, 8), (unique, 0x100039aa, 8) CAST (unique, 0x3100, 8), (unique, 0x3800, 8) PTRSUB (register, 0x38, 8) , (const, 0x28, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x687, 4), (ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x685, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x687, 4), (ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x685, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x687, 4), (ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x685, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x687, 4), (ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x685, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0xbd80, 8) , (register, 0xb8, 1)]
[(unique, 0x10002653, 8) COPY (register, 0x8, 8)]
[(unique, 0x10002823, 8) COPY (register, 0x98, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbc0, 8) MULTIEQUAL (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8)]
[(stack, 0xfffffffffffffbb8, 8) MULTIEQUAL (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb90, 8) MULTIEQUAL (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8)]
[(stack, 0xfffffffffffffb88, 8) MULTIEQUAL (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb74, 4) MULTIEQUAL (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4)]
[(stack, 0xfffffffffffffb70, 4) MULTIEQUAL (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4)]
[(stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb64, 4) MULTIEQUAL (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4)]
[(stack, 0xfffffffffffffb62, 2) MULTIEQUAL (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2)]
[(stack, 0xfffffffffffffb60, 2) MULTIEQUAL (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2)]
[(stack, 0xfffffffffffffb5c, 4) MULTIEQUAL (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4)]
[(stack, 0xfffffffffffffb58, 4) MULTIEQUAL (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb24, 4) MULTIEQUAL (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4)]
[(stack, 0xfffffffffffffb20, 4) MULTIEQUAL (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae4, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[(stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffadc, 4) MULTIEQUAL (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4)]
[(stack, 0xfffffffffffffad8, 4) MULTIEQUAL (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4)]
[(stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffac8, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffac0, 8) MULTIEQUAL (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8)]
[(stack, 0xfffffffffffffabc, 4) MULTIEQUAL (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4)]
[(stack, 0xfffffffffffffab8, 4) MULTIEQUAL (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4)]
[(stack, 0xfffffffffffffab4, 4) MULTIEQUAL (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4)]
[(stack, 0xfffffffffffffab3, 1) MULTIEQUAL (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1)]
[(stack, 0xfffffffffffffaac, 4) MULTIEQUAL (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4)]
[(stack, 0xfffffffffffffaa8, 4) MULTIEQUAL (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4)]
[(stack, 0xfffffffffffffaa4, 4) MULTIEQUAL (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4)]
[(stack, 0xfffffffffffffaa0, 4) MULTIEQUAL (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4)]
[(ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[(ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(register, 0x80, 4) MULTIEQUAL (register, 0x80, 4) , (stack, 0xfffffffffffffaf8, 4)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x98, 8) MULTIEQUAL (unique, 0x10002823, 8) , (unique, 0x1000282b, 8)]
[(register, 0x8, 8) MULTIEQUAL (unique, 0x10002653, 8) , (unique, 0x1000265b, 8)]
[ ---  CBRANCH (ram, 0x414398, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x88, 4) , (const, 0x7ffffffe, 4), (register, 0x88, 4) MULTIEQUAL (register, 0x88, 4) , (stack, 0xfffffffffffffaf0, 4)]
[(register, 0x88, 8) INT_ZEXT (register, 0x88, 4), (register, 0x88, 4) INT_ADD (register, 0x88, 4) , (const, 0x2, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbc0, 8) MULTIEQUAL (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8)]
[(stack, 0xfffffffffffffbb8, 8) MULTIEQUAL (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb90, 8) MULTIEQUAL (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8)]
[(stack, 0xfffffffffffffb88, 8) MULTIEQUAL (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb74, 4) MULTIEQUAL (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4)]
[(stack, 0xfffffffffffffb70, 4) MULTIEQUAL (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4)]
[(stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb64, 4) MULTIEQUAL (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4)]
[(stack, 0xfffffffffffffb62, 2) MULTIEQUAL (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2)]
[(stack, 0xfffffffffffffb60, 2) MULTIEQUAL (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2)]
[(stack, 0xfffffffffffffb5c, 4) MULTIEQUAL (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4)]
[(stack, 0xfffffffffffffb58, 4) MULTIEQUAL (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb24, 4) MULTIEQUAL (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4)]
[(stack, 0xfffffffffffffb20, 4) MULTIEQUAL (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae4, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[(stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffadc, 4) MULTIEQUAL (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4)]
[(stack, 0xfffffffffffffad8, 4) MULTIEQUAL (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4)]
[(stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffac8, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffac0, 8) MULTIEQUAL (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8)]
[(stack, 0xfffffffffffffabc, 4) MULTIEQUAL (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4)]
[(stack, 0xfffffffffffffab8, 4) MULTIEQUAL (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4)]
[(stack, 0xfffffffffffffab4, 4) MULTIEQUAL (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4)]
[(stack, 0xfffffffffffffab3, 1) MULTIEQUAL (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1)]
[(stack, 0xfffffffffffffaac, 4) MULTIEQUAL (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4)]
[(stack, 0xfffffffffffffaa8, 4) MULTIEQUAL (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4)]
[(stack, 0xfffffffffffffaa4, 4) MULTIEQUAL (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4)]
[(stack, 0xfffffffffffffaa0, 4) MULTIEQUAL (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4)]
[(ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[(ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x88, 8) MULTIEQUAL (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8)]
[(unique, 0x100026b3, 8) COPY (register, 0x8, 8), (register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8) , (register, 0x8, 8) , (register, 0x8, 8)]
[(unique, 0x100028a3, 8) COPY (register, 0x98, 8), (register, 0x98, 8) MULTIEQUAL (register, 0x98, 8) , (register, 0x98, 8) , (register, 0x98, 8) , (register, 0x98, 8)]
[ ---  CBRANCH (ram, 0x415c18, 1) , (unique, 0xd080, 1), (unique, 0xd080, 1) INT_SLESS (const, 0x0, 4) , (unique, 0x100039b2, 4), (unique, 0x100039b2, 4) CAST (register, 0x18, 4), (register, 0x18, 4) INT_ADD (register, 0x18, 4) , (register, 0x80, 4), (register, 0x80, 4) MULTIEQUAL (register, 0x80, 4) , (register, 0x80, 4) , (register, 0x80, 4) , (register, 0x80, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100039ca, 8) , (const, 0x415c40, 8), (unique, 0x100039ca, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x83c, 4)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x83c, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x83c, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x83c, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x83c, 4)]
[(stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x83c, 4), (stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x83b, 4)]
[(stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x83c, 4), (stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x83b, 4)]
[(stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x83c, 4), (stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x83b, 4)]
[(stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x83c, 4), (stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x83b, 4)]
[(stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x83c, 4), (stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x83b, 4)]
[(stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x83c, 4), (stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x83b, 4)]
[(stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x83c, 4), (stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x83b, 4)]
[(stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x83c, 4), (stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x83b, 4)]
[(stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x83c, 4), (stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x83b, 4)]
[(stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x83c, 4), (stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x83b, 4)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x83c, 4), (stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x83b, 4)]
[(stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x83c, 4), (stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x83b, 4)]
[(stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x83c, 4), (stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x83b, 4)]
[(stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x83c, 4), (stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x83b, 4)]
[(stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x83c, 4), (stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x83b, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x83c, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x83b, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x83c, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x83b, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x83c, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x83b, 4), (stack, 0xfffffffffffffaf8, 8) CAST (unique, 0x100039c2, 8), (unique, 0x100039c2, 8) INT_OR (unique, 0x100011ac, 8) , (register, 0x88, 8), (unique, 0x100011ac, 8) INT_AND (unique, 0x100039ba, 8) , (const, 0xffffffff00000000, 8), (unique, 0x100039ba, 8) CAST (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x83c, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x83b, 4), (stack, 0xfffffffffffffb00, 8) COPY (register, 0x98, 8)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x83c, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x83b, 4)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x83c, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x83b, 4), (stack, 0xfffffffffffffb10, 8) COPY (register, 0x8, 8)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x83c, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x83b, 4)]
[(stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x83c, 4), (stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x83b, 4)]
[(stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x83c, 4), (stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x83b, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x83c, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x83b, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x83c, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x83b, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x83c, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x83b, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x83c, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x83b, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x83c, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x83b, 4)]
[(stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x83c, 4), (stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x83b, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x83c, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x83b, 4)]
[(stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x83c, 4), (stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x83b, 4)]
[(stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x83c, 4), (stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x83b, 4)]
[(stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x83c, 4), (stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x83b, 4)]
[(stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x83c, 4), (stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x83b, 4)]
[(stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x83c, 4), (stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x83b, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x83c, 4), (stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x83b, 4)]
[(stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x83c, 4), (stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x83b, 4)]
[(stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x83c, 4), (stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x83b, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x83c, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x83b, 4)]
[(stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x83c, 4), (stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x83b, 4)]
[(stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x83c, 4), (stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x83b, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x83c, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x83b, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x83c, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x83b, 4)]
[(stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x83c, 4), (stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x83b, 4)]
[(stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x83c, 4), (stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x83b, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x83c, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x83b, 4)]
[ ---  CBRANCH (ram, 0x414398, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xb8, 8) , (register, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x418b00, 8) , (register, 0x38, 8) , (const, 0x30, 4) , (register, 0xb8, 8), (register, 0xb8, 8) INT_SEXT (unique, 0x100039b6, 4), (unique, 0x100039b6, 4) CAST (register, 0x18, 4)]
[ ---  CBRANCH (ram, 0x4157e8, 1) , (unique, 0xc900, 1), (unique, 0xc900, 1) INT_LESS (const, 0x7ffffffe, 4) , (stack, 0xfffffffffffffaf8, 4), (stack, 0xfffffffffffffaf8, 4) SUBPIECE (stack, 0xfffffffffffffaf8, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x414e98, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (register, 0x0, 4) , (register, 0x18, 4), (register, 0x0, 4) INT_SUB (const, 0x7fffffff, 4) , (stack, 0xfffffffffffffaf8, 4)]
[(register, 0x88, 8) INT_ZEXT (register, 0x88, 4), (register, 0x88, 4) INT_ADD (stack, 0xfffffffffffffaf8, 4) , (register, 0x18, 4)]
[(unique, 0x100026bb, 8) COPY (stack, 0xfffffffffffffb10, 8)]
[(unique, 0x100028ab, 8) COPY (stack, 0xfffffffffffffb00, 8)]
[ ---  BRANCH (ram, 0x4151fd, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbc0, 8) MULTIEQUAL (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8)]
[(stack, 0xfffffffffffffbb8, 8) MULTIEQUAL (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb90, 8) MULTIEQUAL (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8)]
[(stack, 0xfffffffffffffb88, 8) MULTIEQUAL (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb74, 4) MULTIEQUAL (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4)]
[(stack, 0xfffffffffffffb70, 4) MULTIEQUAL (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4)]
[(stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb64, 4) MULTIEQUAL (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4)]
[(stack, 0xfffffffffffffb62, 2) MULTIEQUAL (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2)]
[(stack, 0xfffffffffffffb60, 2) MULTIEQUAL (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2)]
[(stack, 0xfffffffffffffb5c, 4) MULTIEQUAL (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4)]
[(stack, 0xfffffffffffffb58, 4) MULTIEQUAL (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb24, 4) MULTIEQUAL (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4)]
[(stack, 0xfffffffffffffb20, 4) MULTIEQUAL (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae4, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[(stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffadc, 4) MULTIEQUAL (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4)]
[(stack, 0xfffffffffffffad8, 4) MULTIEQUAL (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4)]
[(stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffac8, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffac0, 8) MULTIEQUAL (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8)]
[(stack, 0xfffffffffffffabc, 4) MULTIEQUAL (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4)]
[(stack, 0xfffffffffffffab8, 4) MULTIEQUAL (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4)]
[(stack, 0xfffffffffffffab4, 4) MULTIEQUAL (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4)]
[(stack, 0xfffffffffffffab3, 1) MULTIEQUAL (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1)]
[(stack, 0xfffffffffffffaac, 4) MULTIEQUAL (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4)]
[(stack, 0xfffffffffffffaa8, 4) MULTIEQUAL (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4)]
[(stack, 0xfffffffffffffaa4, 4) MULTIEQUAL (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4)]
[(stack, 0xfffffffffffffaa0, 4) MULTIEQUAL (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4)]
[(ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[(ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x98, 8) MULTIEQUAL (unique, 0x100028a3, 8) , (unique, 0x100028ab, 8)]
[(register, 0x8, 8) MULTIEQUAL (unique, 0x100026b3, 8) , (unique, 0x100026bb, 8)]
[ ---  CBRANCH (ram, 0x4170ea, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (unique, 0x100039d2, 4) , (const, 0x0, 4), (unique, 0x100039d2, 4) CAST (register, 0x88, 4), (register, 0x88, 4) SUBPIECE (register, 0x88, 8) , (const, 0x0, 4), (register, 0x88, 8) MULTIEQUAL (register, 0x88, 8) , (register, 0x88, 8)]
[(unique, 0x10002693, 8) COPY (register, 0x8, 8)]
[(unique, 0x10002883, 8) COPY (register, 0x98, 8)]
[ ---  CBRANCH (ram, 0x416774, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESSEQUAL (stack, 0xfffffffffffffb28, 8) , (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x100039de, 8), (unique, 0x100039de, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0xffffffffffb394a0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x100039d6, 8), (unique, 0x100039d6, 8) CAST (unique, 0x3c80, 8), (unique, 0x3c80, 8) PTRADD (register, 0x38, 8) , (const, 0x1, 8) , (const, 0xd8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100039f6, 8) , (const, 0x41678e, 8), (unique, 0x100039f6, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x818, 4)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x818, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x818, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x818, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x818, 4)]
[(stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x818, 4), (stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x817, 4)]
[(stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x818, 4), (stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x817, 4)]
[(stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x818, 4), (stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x817, 4)]
[(stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x818, 4), (stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x817, 4)]
[(stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x818, 4), (stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x817, 4)]
[(stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x818, 4), (stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x817, 4)]
[(stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x818, 4), (stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x817, 4)]
[(stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x818, 4), (stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x817, 4)]
[(stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x818, 4), (stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x817, 4)]
[(stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x818, 4), (stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x817, 4)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x818, 4), (stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x817, 4)]
[(stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x818, 4), (stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x817, 4)]
[(stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x818, 4), (stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x817, 4)]
[(stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x818, 4), (stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x817, 4)]
[(stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x818, 4), (stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x817, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x818, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x817, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x818, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x817, 4)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x818, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x817, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x818, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x817, 4)]
[(stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x818, 4), (stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x817, 4)]
[(stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x818, 4), (stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x817, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x818, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x817, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x818, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x817, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x818, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x817, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x818, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x817, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x818, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x817, 4)]
[(stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x818, 4), (stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x817, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x818, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x817, 4)]
[(stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x818, 4), (stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x817, 4)]
[(stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x818, 4), (stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x817, 4)]
[(stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x818, 4), (stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x817, 4)]
[(stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x818, 4), (stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x817, 4)]
[(stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x818, 4), (stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x817, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x818, 4), (stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x817, 4)]
[(stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x818, 4), (stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x817, 4)]
[(stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x818, 4), (stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x817, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x818, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x817, 4)]
[(stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x818, 4), (stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x817, 4)]
[(stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x818, 4), (stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x817, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x818, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x817, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x818, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x817, 4)]
[(stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x818, 4), (stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x817, 4)]
[(stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x818, 4), (stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x817, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x818, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x817, 4)]
[ ---  CALL (ram, 0x41b380, 8)]
[(unique, 0x100015e9, 4) SUBPIECE (stack, 0xfffffffffffffaf8, 8) , (const, 0x0, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x818, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x817, 4), (stack, 0xfffffffffffffaf8, 8) CAST (unique, 0x100039ee, 8), (unique, 0x100039ee, 8) INT_OR (unique, 0x100012f0, 8) , (register, 0x88, 8), (unique, 0x100012f0, 8) INT_AND (unique, 0x100039e6, 8) , (const, 0xffffffff00000000, 8), (unique, 0x100039e6, 8) CAST (stack, 0xfffffffffffffaf8, 8)]
[(unique, 0x1000269b, 8) COPY (stack, 0xfffffffffffffb10, 8), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x818, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x817, 4), (stack, 0xfffffffffffffb10, 8) COPY (register, 0x8, 8)]
[(unique, 0x1000288b, 8) COPY (stack, 0xfffffffffffffb00, 8), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x818, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x817, 4), (stack, 0xfffffffffffffb00, 8) COPY (register, 0x98, 8)]
[ ---  BRANCH (ram, 0x415225, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10003a16, 8) , (const, 0x41523f, 8), (unique, 0x10003a16, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x6e6, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x6e6, 4), (ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x6e6, 4), (ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x6e6, 4), (ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x6e6, 4), (ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[(stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x6e6, 4), (stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x6e4, 4), (stack, 0xfffffffffffffaa0, 4) MULTIEQUAL (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4)]
[(stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x6e6, 4), (stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x6e4, 4), (stack, 0xfffffffffffffaa4, 4) MULTIEQUAL (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4)]
[(stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x6e6, 4), (stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x6e4, 4), (stack, 0xfffffffffffffaa8, 4) MULTIEQUAL (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4)]
[(stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x6e6, 4), (stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x6e4, 4), (stack, 0xfffffffffffffaac, 4) MULTIEQUAL (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4)]
[(stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x6e6, 4), (stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x6e4, 4), (stack, 0xfffffffffffffab3, 1) MULTIEQUAL (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1)]
[(stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x6e6, 4), (stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x6e4, 4), (stack, 0xfffffffffffffab4, 4) MULTIEQUAL (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4)]
[(stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x6e6, 4), (stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x6e4, 4), (stack, 0xfffffffffffffab8, 4) MULTIEQUAL (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4)]
[(stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x6e6, 4), (stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x6e4, 4), (stack, 0xfffffffffffffabc, 4) MULTIEQUAL (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4)]
[(stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x6e6, 4), (stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x6e4, 4), (stack, 0xfffffffffffffac0, 8) MULTIEQUAL (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8)]
[(stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x6e6, 4), (stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x6e4, 4), (stack, 0xfffffffffffffac8, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x6e6, 4), (stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x6e4, 4), (stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x6e6, 4), (stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x6e4, 4), (stack, 0xfffffffffffffad8, 4) MULTIEQUAL (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4)]
[(stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x6e6, 4), (stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x6e4, 4), (stack, 0xfffffffffffffadc, 4) MULTIEQUAL (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4)]
[(stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x6e6, 4), (stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x6e4, 4), (stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x6e6, 4), (stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x6e4, 4), (stack, 0xfffffffffffffae4, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x6e6, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x6e4, 4), (stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x6e6, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x6e4, 4), (stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x6e6, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x6e4, 4), (stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x6e6, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x6e4, 4), (stack, 0xfffffffffffffb00, 8) CAST (unique, 0x10003a06, 8), (unique, 0x10003a06, 8) INT_OR (unique, 0x10001071, 8) , (unique, 0x10001079, 8), (unique, 0x10001079, 8) INT_ZEXT (register, 0x88, 4), (unique, 0x10001071, 8) INT_AND (unique, 0x100039fe, 8) , (const, 0xffffffff00000000, 8), (unique, 0x100039fe, 8) CAST (stack, 0xfffffffffffffb00, 8), (stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8), (register, 0x88, 4) MULTIEQUAL (register, 0x88, 4) , (unique, 0x100015e9, 4)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x6e6, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x6e4, 4), (stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x6e6, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x6e4, 4), (stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x6e6, 4), (stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x6e4, 4), (stack, 0xfffffffffffffb20, 4) MULTIEQUAL (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4)]
[(stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x6e6, 4), (stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x6e4, 4), (stack, 0xfffffffffffffb24, 4) MULTIEQUAL (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x6e6, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x6e4, 4), (stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x6e6, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x6e4, 4), (stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x6e6, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x6e4, 4), (stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x6e6, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x6e4, 4), (stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x6e6, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x6e4, 4), (stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x6e6, 4), (stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x6e4, 4), (stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x6e6, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x6e4, 4), (stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x6e6, 4), (stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x6e4, 4), (stack, 0xfffffffffffffb58, 4) MULTIEQUAL (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4)]
[(stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x6e6, 4), (stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x6e4, 4), (stack, 0xfffffffffffffb5c, 4) MULTIEQUAL (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4)]
[(stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x6e6, 4), (stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x6e4, 4), (stack, 0xfffffffffffffb60, 2) MULTIEQUAL (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2)]
[(stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x6e6, 4), (stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x6e4, 4), (stack, 0xfffffffffffffb62, 2) MULTIEQUAL (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2)]
[(stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x6e6, 4), (stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x6e4, 4), (stack, 0xfffffffffffffb64, 4) MULTIEQUAL (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x6e6, 4), (stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x6e4, 4), (stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x6e6, 4), (stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x6e4, 4), (stack, 0xfffffffffffffb70, 4) MULTIEQUAL (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4)]
[(stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x6e6, 4), (stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x6e4, 4), (stack, 0xfffffffffffffb74, 4) MULTIEQUAL (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x6e6, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x6e4, 4), (stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x6e6, 4), (stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x6e4, 4), (stack, 0xfffffffffffffb88, 8) MULTIEQUAL (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8)]
[(stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x6e6, 4), (stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x6e4, 4), (stack, 0xfffffffffffffb90, 8) MULTIEQUAL (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x6e6, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x6e4, 4), (stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x6e6, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x6e4, 4), (stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x6e6, 4), (stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x6e4, 4), (stack, 0xfffffffffffffbb8, 8) MULTIEQUAL (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8)]
[(stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x6e6, 4), (stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x6e4, 4), (stack, 0xfffffffffffffbc0, 8) MULTIEQUAL (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x6e6, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x6e4, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CBRANCH (ram, 0x414398, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xfffffffffffffb10, 8) , (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10003a1e, 8), (unique, 0x10003a1e, 8) CALLIND (unique, 0xbd80, 8) , (register, 0x38, 8) , (register, 0x98, 8) , (register, 0x8, 8), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x6e6, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x6e4, 4), (unique, 0x3100, 8) CAST (unique, 0x10003a0e, 8), (unique, 0x10003a0e, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x38, 8), (stack, 0xfffffffffffffb10, 8) COPY (register, 0x8, 8), (register, 0x8, 8) MULTIEQUAL (unique, 0x10002693, 8) , (unique, 0x1000269b, 8), (register, 0x98, 8) MULTIEQUAL (unique, 0x10002883, 8) , (unique, 0x1000288b, 8)]
[ ---  CBRANCH (ram, 0x414e98, 1) , (unique, 0xcc00, 1), (unique, 0xcc00, 1) INT_SLESSEQUAL (unique, 0x10003a2a, 8) , (register, 0x0, 8), (unique, 0x10003a2a, 8) CAST (stack, 0xfffffffffffffb10, 8), (register, 0x0, 8) INT_SEXT (unique, 0x10003a26, 4), (unique, 0x10003a26, 4) CAST (register, 0x0, 4), (register, 0x0, 4) INT_SUB (const, 0x7fffffff, 4) , (stack, 0xfffffffffffffb00, 4), (stack, 0xfffffffffffffb00, 4) SUBPIECE (stack, 0xfffffffffffffb00, 8) , (const, 0x0, 8)]
[(register, 0x88, 8) INT_ZEXT (register, 0x88, 4), (register, 0x88, 4) INT_ADD (stack, 0xfffffffffffffb00, 4) , (stack, 0xfffffffffffffb08, 4), (stack, 0xfffffffffffffb08, 4) SUBPIECE (stack, 0xfffffffffffffb08, 8) , (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x414640, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbc0, 8) MULTIEQUAL (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8)]
[(stack, 0xfffffffffffffbb8, 8) MULTIEQUAL (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb90, 8) MULTIEQUAL (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8)]
[(stack, 0xfffffffffffffb88, 8) MULTIEQUAL (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb74, 4) MULTIEQUAL (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4)]
[(stack, 0xfffffffffffffb70, 4) MULTIEQUAL (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4)]
[(stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb64, 4) MULTIEQUAL (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4)]
[(stack, 0xfffffffffffffb62, 2) MULTIEQUAL (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2)]
[(stack, 0xfffffffffffffb60, 2) MULTIEQUAL (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2)]
[(stack, 0xfffffffffffffb5c, 4) MULTIEQUAL (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4)]
[(stack, 0xfffffffffffffb58, 4) MULTIEQUAL (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb24, 4) MULTIEQUAL (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4)]
[(stack, 0xfffffffffffffb20, 4) MULTIEQUAL (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae4, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[(stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffadc, 4) MULTIEQUAL (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4)]
[(stack, 0xfffffffffffffad8, 4) MULTIEQUAL (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4)]
[(stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffac8, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffac0, 8) MULTIEQUAL (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8)]
[(stack, 0xfffffffffffffabc, 4) MULTIEQUAL (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4)]
[(stack, 0xfffffffffffffab8, 4) MULTIEQUAL (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4)]
[(stack, 0xfffffffffffffab4, 4) MULTIEQUAL (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4)]
[(stack, 0xfffffffffffffab3, 1) MULTIEQUAL (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1)]
[(stack, 0xfffffffffffffaac, 4) MULTIEQUAL (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4)]
[(stack, 0xfffffffffffffaa8, 4) MULTIEQUAL (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4)]
[(stack, 0xfffffffffffffaa4, 4) MULTIEQUAL (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4)]
[(stack, 0xfffffffffffffaa0, 4) MULTIEQUAL (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4)]
[(ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[(ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(register, 0x90, 4) MULTIEQUAL (register, 0x90, 4) , (register, 0x90, 4) , (register, 0x90, 4)]
[(register, 0x18, 4) MULTIEQUAL (register, 0x18, 4) , (register, 0x18, 4) , (register, 0x18, 4)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x98, 8) MULTIEQUAL (unique, 0x10002e5f, 8) , (register, 0x98, 8) , (register, 0x98, 8)]
[(register, 0x80, 8) MULTIEQUAL (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8)]
[(register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8) , (register, 0x8, 8)]
[(register, 0x88, 4) SUBPIECE (register, 0x88, 8) , (const, 0x0, 4), (register, 0x88, 8) MULTIEQUAL (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8)]
[ ---  CBRANCH (ram, 0x415b00, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xfffffffffffffb10, 4) , (const, 0x0, 4), (stack, 0xfffffffffffffb10, 4) SUBPIECE (stack, 0xfffffffffffffb10, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[ ---  CBRANCH (ram, 0x415ea0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xfffffffffffffb20, 4) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x416e18, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESSEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRSUB (register, 0x38, 8) , (const, 0x30, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRSUB (register, 0x38, 8) , (const, 0x28, 8)]
[(stack, 0xfffffffffffffb20, 4) COPY (register, 0x88, 4)]
[(register, 0x30, 4) COPY (const, 0x2b, 4)]
[(stack, 0xfffffffffffffaf0, 8) CAST (unique, 0x10003a3a, 8), (unique, 0x10003a3a, 8) INT_OR (unique, 0x1000144d, 8) , (register, 0x80, 8), (unique, 0x1000144d, 8) INT_AND (unique, 0x10003a32, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10003a32, 8) CAST (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffb00, 8) CAST (unique, 0x10003a4a, 8), (unique, 0x10003a4a, 8) INT_OR (unique, 0x1000145d, 8) , (unique, 0x10001465, 8), (unique, 0x10001465, 8) INT_ZEXT (register, 0x90, 4), (unique, 0x1000145d, 8) INT_AND (unique, 0x10003a42, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10003a42, 8) CAST (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffb08, 8) COPY (register, 0x98, 8)]
[(stack, 0xfffffffffffffb10, 8) COPY (register, 0x8, 8)]
[ ---  BRANCH (ram, 0x416bd2, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3800, 8) , (unique, 0x3100, 8), (unique, 0x3800, 8) PTRSUB (register, 0x38, 8) , (const, 0x28, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0xcfa, 4), (ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0xcf8, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0xcfa, 4), (ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0xcf8, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0xcfa, 4), (ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0xcf8, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0xcfa, 4), (ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0xcf8, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0xbd80, 8) , (const, 0x2b, 1)]
[ ---  BRANCH (ram, 0x41569a, 1)]
[ ---  CBRANCH (ram, 0x4156af, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xfffffffffffffae0, 4) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x417031, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESSEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRSUB (register, 0x38, 8) , (const, 0x30, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRSUB (register, 0x38, 8) , (const, 0x28, 8)]
[(stack, 0xfffffffffffffb20, 4) COPY (register, 0x88, 4)]
[(register, 0x30, 4) COPY (const, 0x20, 4)]
[(stack, 0xfffffffffffffaf0, 8) CAST (unique, 0x10003a5a, 8), (unique, 0x10003a5a, 8) INT_OR (unique, 0x10001551, 8) , (register, 0x80, 8), (unique, 0x10001551, 8) INT_AND (unique, 0x10003a52, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10003a52, 8) CAST (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffb00, 8) CAST (unique, 0x10003a6a, 8), (unique, 0x10003a6a, 8) INT_OR (unique, 0x10001561, 8) , (unique, 0x10001569, 8), (unique, 0x10001569, 8) INT_ZEXT (register, 0x90, 4), (unique, 0x10001561, 8) INT_AND (unique, 0x10003a62, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10003a62, 8) CAST (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffb08, 8) COPY (register, 0x98, 8)]
[(stack, 0xfffffffffffffb10, 8) COPY (register, 0x8, 8)]
[ ---  BRANCH (ram, 0x416bd2, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3800, 8) , (unique, 0x3100, 8), (unique, 0x3800, 8) PTRSUB (register, 0x38, 8) , (const, 0x28, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0xd33, 4), (ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0xd31, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0xd33, 4), (ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0xd31, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0xd33, 4), (ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0xd31, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0xd33, 4), (ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0xd31, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0xbd80, 8) , (const, 0x20, 1)]
[ ---  BRANCH (ram, 0x41569a, 1)]
[ ---  CBRANCH (ram, 0x416baa, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRSUB (register, 0x38, 8) , (const, 0x30, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRSUB (register, 0x38, 8) , (const, 0x28, 8)]
[(stack, 0xfffffffffffffb20, 4) COPY (register, 0x88, 4)]
[(register, 0x30, 4) COPY (const, 0x2d, 4)]
[(stack, 0xfffffffffffffaf0, 8) CAST (unique, 0x10003a7a, 8), (unique, 0x10003a7a, 8) INT_OR (unique, 0x100013dd, 8) , (register, 0x80, 8), (unique, 0x100013dd, 8) INT_AND (unique, 0x10003a72, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10003a72, 8) CAST (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffb00, 8) CAST (unique, 0x10003a8a, 8), (unique, 0x10003a8a, 8) INT_OR (unique, 0x100013ed, 8) , (unique, 0x100013f5, 8), (unique, 0x100013f5, 8) INT_ZEXT (register, 0x90, 4), (unique, 0x100013ed, 8) INT_AND (unique, 0x10003a82, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10003a82, 8) CAST (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffb08, 8) COPY (register, 0x98, 8)]
[(stack, 0xfffffffffffffb10, 8) COPY (register, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10003a92, 8) , (const, 0x416bda, 8), (unique, 0x10003a92, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xcb5, 4)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0xcb5, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0xcb5, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0xcb5, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0xcb5, 4)]
[(stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0xcb5, 4), (stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0xcb4, 4)]
[(stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0xcb5, 4), (stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0xcb4, 4)]
[(stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0xcb5, 4), (stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0xcb4, 4)]
[(stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0xcb5, 4), (stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0xcb4, 4)]
[(stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0xcb5, 4), (stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0xcb4, 4)]
[(stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0xcb5, 4), (stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0xcb4, 4)]
[(stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0xcb5, 4), (stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0xcb4, 4)]
[(stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0xcb5, 4), (stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0xcb4, 4)]
[(stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0xcb5, 4), (stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0xcb4, 4)]
[(stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0xcb5, 4), (stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0xcb4, 4)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0xcb5, 4), (stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0xcb4, 4)]
[(stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0xcb5, 4), (stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0xcb4, 4)]
[(stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0xcb5, 4), (stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0xcb4, 4)]
[(stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0xcb5, 4), (stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0xcb4, 4)]
[(stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0xcb5, 4), (stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0xcb4, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0xcb5, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0xcb4, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0xcb5, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0xcb4, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0xcb5, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0xcb4, 4)]
[(stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0xcb5, 4), (stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0xcb4, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0xcb5, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0xcb4, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0xcb5, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0xcb4, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0xcb5, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0xcb4, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0xcb5, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0xcb4, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0xcb5, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0xcb4, 4)]
[(stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0xcb5, 4), (stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0xcb4, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0xcb5, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0xcb4, 4)]
[(stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0xcb5, 4), (stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0xcb4, 4)]
[(stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0xcb5, 4), (stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0xcb4, 4)]
[(stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0xcb5, 4), (stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0xcb4, 4)]
[(stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0xcb5, 4), (stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0xcb4, 4)]
[(stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0xcb5, 4), (stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0xcb4, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0xcb5, 4), (stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0xcb4, 4)]
[(stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0xcb5, 4), (stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0xcb4, 4)]
[(stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0xcb5, 4), (stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0xcb4, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0xcb5, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0xcb4, 4)]
[(stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0xcb5, 4), (stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0xcb4, 4)]
[(stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0xcb5, 4), (stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0xcb4, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0xcb5, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0xcb4, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0xcb5, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0xcb4, 4)]
[(stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0xcb5, 4), (stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0xcb4, 4)]
[(stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0xcb5, 4), (stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0xcb4, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xcb5, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xcb4, 4)]
[(stack, 0xfffffffffffffb00, 4) SUBPIECE (stack, 0xfffffffffffffb00, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0xcb5, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0xcb4, 4), (stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(register, 0x80, 8) INT_AND (unique, 0x10003a9a, 8) , (const, 0xffffffff, 8), (unique, 0x10003a9a, 8) CAST (stack, 0xfffffffffffffaf0, 8), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0xcb5, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0xcb4, 4), (stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(unique, 0x10002713, 8) COPY (stack, 0xfffffffffffffb10, 8), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0xcb5, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (unique, 0x10002d73, 8) , (const, 0xcb4, 4), (unique, 0x10002d73, 8) COPY (register, 0x8, 8)]
[(unique, 0x10002963, 8) COPY (stack, 0xfffffffffffffb08, 8), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0xcb5, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (unique, 0x10002d63, 8) , (const, 0xcb4, 4), (unique, 0x10002d63, 8) COPY (register, 0x98, 8)]
[(unique, 0x10002dd3, 4) COPY (stack, 0xfffffffffffffb20, 4), (stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0xcb5, 4), (stack, 0xfffffffffffffb20, 4) INDIRECT (unique, 0x10002d7f, 4) , (const, 0xcb4, 4), (unique, 0x10002d7f, 4) COPY (register, 0x88, 4)]
[ ---  CBRANCH (ram, 0x41569a, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0xffffffff, 4), (register, 0x0, 4) CALL (ram, 0x41e9e0, 8) , (register, 0x38, 8) , (register, 0x30, 4), (register, 0x30, 4) MULTIEQUAL (register, 0x30, 4) , (register, 0x30, 4) , (register, 0x30, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3800, 8) , (unique, 0x3100, 8), (unique, 0x3800, 8) PTRSUB (register, 0x38, 8) , (const, 0x28, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0xa40, 4), (ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0xa3e, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0xa40, 4), (ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0xa3e, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0xa40, 4), (ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0xa3e, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0xa40, 4), (ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0xa3e, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0xbd80, 8) , (const, 0x2d, 1)]
[(unique, 0x1000270b, 8) COPY (register, 0x8, 8)]
[(unique, 0x1000295b, 8) COPY (register, 0x98, 8)]
[(unique, 0x10002dcf, 4) COPY (register, 0x88, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbc0, 8) MULTIEQUAL (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8)]
[(stack, 0xfffffffffffffbb8, 8) MULTIEQUAL (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb90, 8) MULTIEQUAL (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8)]
[(stack, 0xfffffffffffffb88, 8) MULTIEQUAL (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb74, 4) MULTIEQUAL (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4)]
[(stack, 0xfffffffffffffb70, 4) MULTIEQUAL (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4)]
[(stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb64, 4) MULTIEQUAL (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4)]
[(stack, 0xfffffffffffffb62, 2) MULTIEQUAL (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2)]
[(stack, 0xfffffffffffffb60, 2) MULTIEQUAL (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2)]
[(stack, 0xfffffffffffffb5c, 4) MULTIEQUAL (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4)]
[(stack, 0xfffffffffffffb58, 4) MULTIEQUAL (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb24, 4) MULTIEQUAL (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4)]
[(stack, 0xfffffffffffffb20, 4) MULTIEQUAL (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae4, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[(stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffadc, 4) MULTIEQUAL (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4)]
[(stack, 0xfffffffffffffad8, 4) MULTIEQUAL (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4)]
[(stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffac8, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffac0, 8) MULTIEQUAL (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8)]
[(stack, 0xfffffffffffffabc, 4) MULTIEQUAL (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4)]
[(stack, 0xfffffffffffffab8, 4) MULTIEQUAL (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4)]
[(stack, 0xfffffffffffffab4, 4) MULTIEQUAL (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4)]
[(stack, 0xfffffffffffffab3, 1) MULTIEQUAL (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1)]
[(stack, 0xfffffffffffffaac, 4) MULTIEQUAL (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4)]
[(stack, 0xfffffffffffffaa8, 4) MULTIEQUAL (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4)]
[(stack, 0xfffffffffffffaa4, 4) MULTIEQUAL (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4)]
[(stack, 0xfffffffffffffaa0, 4) MULTIEQUAL (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4)]
[(ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[(ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(register, 0x90, 4) MULTIEQUAL (register, 0x90, 4) , (stack, 0xfffffffffffffb00, 4) , (register, 0x90, 4) , (register, 0x90, 4)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x98, 8) MULTIEQUAL (unique, 0x1000295b, 8) , (unique, 0x10002963, 8) , (register, 0x98, 8) , (register, 0x98, 8)]
[(register, 0x80, 8) MULTIEQUAL (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8)]
[(register, 0x8, 8) MULTIEQUAL (unique, 0x1000270b, 8) , (unique, 0x10002713, 8) , (register, 0x8, 8) , (register, 0x8, 8)]
[ ---  CBRANCH (ram, 0x414398, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x88, 4) , (const, 0x7fffffff, 4), (register, 0x88, 4) MULTIEQUAL (unique, 0x10002dcf, 4) , (unique, 0x10002dd3, 4) , (register, 0x88, 4) , (register, 0x88, 4)]
[(register, 0x88, 8) INT_ZEXT (register, 0x88, 4), (register, 0x88, 4) INT_ADD (register, 0x88, 4) , (const, 0x1, 4)]
[(register, 0x90, 4) INT_SUB (register, 0x90, 4) , (const, 0x1, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbc0, 8) MULTIEQUAL (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8)]
[(stack, 0xfffffffffffffbb8, 8) MULTIEQUAL (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb90, 8) MULTIEQUAL (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8)]
[(stack, 0xfffffffffffffb88, 8) MULTIEQUAL (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb74, 4) MULTIEQUAL (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4)]
[(stack, 0xfffffffffffffb70, 4) MULTIEQUAL (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4)]
[(stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb64, 4) MULTIEQUAL (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4)]
[(stack, 0xfffffffffffffb62, 2) MULTIEQUAL (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2)]
[(stack, 0xfffffffffffffb60, 2) MULTIEQUAL (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2)]
[(stack, 0xfffffffffffffb5c, 4) MULTIEQUAL (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4)]
[(stack, 0xfffffffffffffb58, 4) MULTIEQUAL (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb24, 4) MULTIEQUAL (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4)]
[(stack, 0xfffffffffffffb20, 4) MULTIEQUAL (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae4, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[(stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffadc, 4) MULTIEQUAL (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4)]
[(stack, 0xfffffffffffffad8, 4) MULTIEQUAL (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4)]
[(stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffac8, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffac0, 8) MULTIEQUAL (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8)]
[(stack, 0xfffffffffffffabc, 4) MULTIEQUAL (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4)]
[(stack, 0xfffffffffffffab8, 4) MULTIEQUAL (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4)]
[(stack, 0xfffffffffffffab4, 4) MULTIEQUAL (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4)]
[(stack, 0xfffffffffffffab3, 1) MULTIEQUAL (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1)]
[(stack, 0xfffffffffffffaac, 4) MULTIEQUAL (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4)]
[(stack, 0xfffffffffffffaa8, 4) MULTIEQUAL (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4)]
[(stack, 0xfffffffffffffaa4, 4) MULTIEQUAL (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4)]
[(stack, 0xfffffffffffffaa0, 4) MULTIEQUAL (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4)]
[(ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[(ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(register, 0x90, 4) MULTIEQUAL (register, 0x90, 4) , (register, 0x90, 4)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x98, 8) MULTIEQUAL (register, 0x98, 8) , (register, 0x98, 8)]
[(register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8)]
[(register, 0x80, 4) SUBPIECE (register, 0x80, 8) , (const, 0x0, 4), (register, 0x80, 8) MULTIEQUAL (register, 0x80, 8) , (register, 0x80, 8)]
[(register, 0x88, 4) SUBPIECE (register, 0x88, 8) , (const, 0x0, 4), (register, 0x88, 8) MULTIEQUAL (register, 0x88, 8) , (register, 0x88, 8)]
[ ---  CBRANCH (ram, 0x415726, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xfffffffffffffaf8, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[ ---  CBRANCH (ram, 0x415726, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xfffffffffffffae8, 4) , (const, 0x10, 4), (stack, 0xfffffffffffffae8, 4) SUBPIECE (stack, 0xfffffffffffffae8, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x415726, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xfffffffffffffadc, 4) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x416e45, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRSUB (register, 0x38, 8) , (const, 0x30, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRSUB (register, 0x38, 8) , (const, 0x28, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10003ad2, 8) , (const, 0x416e75, 8), (unique, 0x10003ad2, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xc83, 4)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0xc83, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0xc83, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0xc83, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0xc83, 4)]
[(stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0xc83, 4), (stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0xc82, 4)]
[(stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0xc83, 4), (stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0xc82, 4)]
[(stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0xc83, 4), (stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0xc82, 4)]
[(stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0xc83, 4), (stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0xc82, 4)]
[(stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0xc83, 4), (stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0xc82, 4)]
[(stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0xc83, 4), (stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0xc82, 4)]
[(stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0xc83, 4), (stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0xc82, 4)]
[(stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0xc83, 4), (stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0xc82, 4)]
[(stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0xc83, 4), (stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0xc82, 4)]
[(stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0xc83, 4), (stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0xc82, 4)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0xc83, 4), (stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0xc82, 4)]
[(stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0xc83, 4), (stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0xc82, 4)]
[(stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0xc83, 4), (stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0xc82, 4)]
[(stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0xc83, 4), (stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0xc82, 4)]
[(stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0xc83, 4), (stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0xc82, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0xc83, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0xc82, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0xc83, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0xc82, 4)]
[(stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0xc83, 4), (stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0xc82, 4)]
[(stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0xc83, 4), (stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0xc82, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0xc83, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0xc82, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0xc83, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0xc82, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0xc83, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0xc82, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0xc83, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0xc82, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0xc83, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0xc82, 4)]
[(stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0xc83, 4), (stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0xc82, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0xc83, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0xc82, 4)]
[(stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0xc83, 4), (stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0xc82, 4)]
[(stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0xc83, 4), (stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0xc82, 4)]
[(stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0xc83, 4), (stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0xc82, 4)]
[(stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0xc83, 4), (stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0xc82, 4)]
[(stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0xc83, 4), (stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0xc82, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0xc83, 4), (stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0xc82, 4)]
[(stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0xc83, 4), (stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0xc82, 4)]
[(stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0xc83, 4), (stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0xc82, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0xc83, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0xc82, 4)]
[(stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0xc83, 4), (stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0xc82, 4)]
[(stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0xc83, 4), (stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0xc82, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0xc83, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0xc82, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0xc83, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0xc82, 4)]
[(stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0xc83, 4), (stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0xc82, 4)]
[(stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0xc83, 4), (stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0xc82, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xc83, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xc82, 4)]
[(stack, 0xfffffffffffffb00, 4) SUBPIECE (stack, 0xfffffffffffffb00, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0xc83, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0xc82, 4), (stack, 0xfffffffffffffb00, 8) CAST (unique, 0x10003aca, 8), (unique, 0x10003aca, 8) INT_OR (unique, 0x1000148d, 8) , (unique, 0x10001495, 8), (unique, 0x10001495, 8) INT_ZEXT (register, 0x90, 4), (unique, 0x1000148d, 8) INT_AND (unique, 0x10003ac2, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10003ac2, 8) CAST (stack, 0xfffffffffffffb00, 8)]
[(register, 0x80, 8) INT_AND (unique, 0x10003ada, 8) , (const, 0xffffffff, 8), (unique, 0x10003ada, 8) CAST (stack, 0xfffffffffffffaf8, 8), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0xc83, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0xc82, 4), (stack, 0xfffffffffffffaf8, 8) CAST (unique, 0x10003aba, 8), (unique, 0x10003aba, 8) INT_OR (unique, 0x1000147d, 8) , (register, 0x80, 8), (unique, 0x1000147d, 8) INT_AND (unique, 0x10003ab2, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10003ab2, 8) CAST (stack, 0xfffffffffffffaf8, 8)]
[(unique, 0x1000149d, 4) SUBPIECE (stack, 0xfffffffffffffaf0, 8) , (const, 0x0, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0xc83, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0xc82, 4), (stack, 0xfffffffffffffaf0, 8) CAST (unique, 0x10003aaa, 8), (unique, 0x10003aaa, 8) INT_OR (unique, 0x1000146d, 8) , (register, 0x88, 8), (unique, 0x1000146d, 8) INT_AND (unique, 0x10003aa2, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10003aa2, 8) CAST (stack, 0xfffffffffffffaf0, 8)]
[(unique, 0x1000268b, 8) COPY (stack, 0xfffffffffffffb10, 8), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0xc83, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0xc82, 4), (stack, 0xfffffffffffffb10, 8) COPY (register, 0x8, 8)]
[(unique, 0x1000287b, 8) COPY (stack, 0xfffffffffffffb08, 8), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0xc83, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0xc82, 4), (stack, 0xfffffffffffffb08, 8) COPY (register, 0x98, 8)]
[ ---  CBRANCH (ram, 0x4156e8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0xffffffff, 4), (register, 0x0, 4) CALL (ram, 0x41e9e0, 8) , (register, 0x38, 8) , (const, 0x30, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3800, 8) , (unique, 0x3100, 8), (unique, 0x3800, 8) PTRSUB (register, 0x38, 8) , (const, 0x28, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0xaa2, 4), (ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0xaa0, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0xaa2, 4), (ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0xaa0, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0xaa2, 4), (ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0xaa0, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0xaa2, 4), (ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0xaa0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0xbd80, 8) , (const, 0x30, 1)]
[(unique, 0x10002683, 8) COPY (register, 0x8, 8)]
[(unique, 0x10002873, 8) COPY (register, 0x98, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbc0, 8) MULTIEQUAL (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8)]
[(stack, 0xfffffffffffffbb8, 8) MULTIEQUAL (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb90, 8) MULTIEQUAL (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8)]
[(stack, 0xfffffffffffffb88, 8) MULTIEQUAL (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb74, 4) MULTIEQUAL (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4)]
[(stack, 0xfffffffffffffb70, 4) MULTIEQUAL (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4)]
[(stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb64, 4) MULTIEQUAL (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4)]
[(stack, 0xfffffffffffffb62, 2) MULTIEQUAL (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2)]
[(stack, 0xfffffffffffffb60, 2) MULTIEQUAL (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2)]
[(stack, 0xfffffffffffffb5c, 4) MULTIEQUAL (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4)]
[(stack, 0xfffffffffffffb58, 4) MULTIEQUAL (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb24, 4) MULTIEQUAL (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4)]
[(stack, 0xfffffffffffffb20, 4) MULTIEQUAL (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae4, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[(stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffadc, 4) MULTIEQUAL (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4)]
[(stack, 0xfffffffffffffad8, 4) MULTIEQUAL (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4)]
[(stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffac8, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffac0, 8) MULTIEQUAL (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8)]
[(stack, 0xfffffffffffffabc, 4) MULTIEQUAL (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4)]
[(stack, 0xfffffffffffffab8, 4) MULTIEQUAL (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4)]
[(stack, 0xfffffffffffffab4, 4) MULTIEQUAL (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4)]
[(stack, 0xfffffffffffffab3, 1) MULTIEQUAL (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1)]
[(stack, 0xfffffffffffffaac, 4) MULTIEQUAL (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4)]
[(stack, 0xfffffffffffffaa8, 4) MULTIEQUAL (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4)]
[(stack, 0xfffffffffffffaa4, 4) MULTIEQUAL (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4)]
[(stack, 0xfffffffffffffaa0, 4) MULTIEQUAL (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4)]
[(ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[(ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(register, 0x90, 4) MULTIEQUAL (register, 0x90, 4) , (stack, 0xfffffffffffffb00, 4)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x98, 8) MULTIEQUAL (unique, 0x10002873, 8) , (unique, 0x1000287b, 8)]
[(register, 0x8, 8) MULTIEQUAL (unique, 0x10002683, 8) , (unique, 0x1000268b, 8)]
[(register, 0x80, 4) SUBPIECE (register, 0x80, 8) , (const, 0x0, 4), (register, 0x80, 8) MULTIEQUAL (register, 0x80, 8) , (register, 0x80, 8)]
[ ---  CBRANCH (ram, 0x414398, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x88, 4) , (const, 0x7fffffff, 4), (register, 0x88, 4) MULTIEQUAL (register, 0x88, 4) , (unique, 0x1000149d, 4)]
[ ---  CBRANCH (ram, 0x416eb0, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRSUB (register, 0x38, 8) , (const, 0x30, 8), (unique, 0xbd80, 8) CAST (unique, 0x10003ae2, 8), (unique, 0x10003ae2, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRSUB (register, 0x38, 8) , (const, 0x28, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10003b1a, 8) , (const, 0x416edf, 8), (unique, 0x10003b1a, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xc51, 4)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0xc51, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0xc51, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0xc51, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0xc51, 4)]
[(stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0xc51, 4), (stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0xc50, 4)]
[(stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0xc51, 4), (stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0xc50, 4)]
[(stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0xc51, 4), (stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0xc50, 4)]
[(stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0xc51, 4), (stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0xc50, 4)]
[(stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0xc51, 4), (stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0xc50, 4)]
[(stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0xc51, 4), (stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0xc50, 4)]
[(stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0xc51, 4), (stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0xc50, 4)]
[(stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0xc51, 4), (stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0xc50, 4)]
[(stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0xc51, 4), (stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0xc50, 4)]
[(stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0xc51, 4), (stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0xc50, 4)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0xc51, 4), (stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0xc50, 4)]
[(stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0xc51, 4), (stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0xc50, 4)]
[(stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0xc51, 4), (stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0xc50, 4)]
[(stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0xc51, 4), (stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0xc50, 4)]
[(stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0xc51, 4), (stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0xc50, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0xc51, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0xc50, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0xc51, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0xc50, 4)]
[(stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0xc51, 4), (stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0xc50, 4)]
[(stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0xc51, 4), (stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0xc50, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0xc51, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0xc50, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0xc51, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0xc50, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0xc51, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0xc50, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0xc51, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0xc50, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0xc51, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0xc50, 4)]
[(stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0xc51, 4), (stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0xc50, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0xc51, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0xc50, 4)]
[(stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0xc51, 4), (stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0xc50, 4)]
[(stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0xc51, 4), (stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0xc50, 4)]
[(stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0xc51, 4), (stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0xc50, 4)]
[(stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0xc51, 4), (stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0xc50, 4)]
[(stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0xc51, 4), (stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0xc50, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0xc51, 4), (stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0xc50, 4)]
[(stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0xc51, 4), (stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0xc50, 4)]
[(stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0xc51, 4), (stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0xc50, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0xc51, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0xc50, 4)]
[(stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0xc51, 4), (stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0xc50, 4)]
[(stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0xc51, 4), (stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0xc50, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0xc51, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0xc50, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0xc51, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0xc50, 4)]
[(stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0xc51, 4), (stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0xc50, 4)]
[(stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0xc51, 4), (stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0xc50, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xc51, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xc50, 4)]
[(stack, 0xfffffffffffffb00, 4) SUBPIECE (stack, 0xfffffffffffffb00, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0xc51, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0xc50, 4), (stack, 0xfffffffffffffb00, 8) CAST (unique, 0x10003b12, 8), (unique, 0x10003b12, 8) INT_OR (unique, 0x100014c6, 8) , (unique, 0x100014ce, 8), (unique, 0x100014ce, 8) INT_ZEXT (register, 0x90, 4), (unique, 0x100014c6, 8) INT_AND (unique, 0x10003b0a, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10003b0a, 8) CAST (stack, 0xfffffffffffffb00, 8)]
[(unique, 0x1000161d, 4) SUBPIECE (stack, 0xfffffffffffffaf8, 8) , (const, 0x0, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0xc51, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0xc50, 4), (stack, 0xfffffffffffffaf8, 8) CAST (unique, 0x10003b02, 8), (unique, 0x10003b02, 8) INT_OR (unique, 0x100014b6, 8) , (register, 0x80, 8), (unique, 0x100014b6, 8) INT_AND (unique, 0x10003afa, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10003afa, 8) CAST (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 4) SUBPIECE (stack, 0xfffffffffffffaf0, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0xc51, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0xc50, 4), (stack, 0xfffffffffffffaf0, 8) CAST (unique, 0x10003af2, 8), (unique, 0x10003af2, 8) INT_OR (unique, 0x100014a6, 8) , (unique, 0x100014ae, 8), (unique, 0x100014ae, 8) INT_ZEXT (register, 0x88, 4), (unique, 0x100014a6, 8) INT_AND (unique, 0x10003aea, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10003aea, 8) CAST (stack, 0xfffffffffffffaf0, 8)]
[(unique, 0x1000266b, 8) COPY (stack, 0xfffffffffffffb10, 8), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0xc51, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0xc50, 4), (stack, 0xfffffffffffffb10, 8) COPY (register, 0x8, 8)]
[(unique, 0x1000283b, 8) COPY (stack, 0xfffffffffffffb08, 8), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0xc51, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0xc50, 4), (stack, 0xfffffffffffffb08, 8) COPY (register, 0x98, 8)]
[ ---  CBRANCH (ram, 0x415711, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0xffffffff, 4), (register, 0x0, 4) CALL (ram, 0x41e9e0, 8) , (register, 0x38, 8) , (register, 0x30, 4), (register, 0x30, 4) INT_ZEXT (register, 0xb8, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3800, 8) , (unique, 0x10003b22, 8), (unique, 0x10003b22, 8) CAST (unique, 0x3100, 8), (unique, 0x3800, 8) PTRSUB (register, 0x38, 8) , (const, 0x28, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0xac5, 4), (ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0xac3, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0xac5, 4), (ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0xac3, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0xac5, 4), (ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0xac3, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0xac5, 4), (ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0xac3, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0xbd80, 8) , (register, 0xb8, 1)]
[(unique, 0x10002663, 8) COPY (register, 0x8, 8)]
[(unique, 0x10002833, 8) COPY (register, 0x98, 8)]
[(register, 0x80, 4) MULTIEQUAL (register, 0x80, 4) , (unique, 0x1000161d, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbc0, 8) MULTIEQUAL (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8)]
[(stack, 0xfffffffffffffbb8, 8) MULTIEQUAL (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb90, 8) MULTIEQUAL (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8)]
[(stack, 0xfffffffffffffb88, 8) MULTIEQUAL (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb74, 4) MULTIEQUAL (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4)]
[(stack, 0xfffffffffffffb70, 4) MULTIEQUAL (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4)]
[(stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb64, 4) MULTIEQUAL (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4)]
[(stack, 0xfffffffffffffb62, 2) MULTIEQUAL (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2)]
[(stack, 0xfffffffffffffb60, 2) MULTIEQUAL (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2)]
[(stack, 0xfffffffffffffb5c, 4) MULTIEQUAL (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4)]
[(stack, 0xfffffffffffffb58, 4) MULTIEQUAL (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb24, 4) MULTIEQUAL (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4)]
[(stack, 0xfffffffffffffb20, 4) MULTIEQUAL (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae4, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[(stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffadc, 4) MULTIEQUAL (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4)]
[(stack, 0xfffffffffffffad8, 4) MULTIEQUAL (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4)]
[(stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffac8, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffac0, 8) MULTIEQUAL (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8)]
[(stack, 0xfffffffffffffabc, 4) MULTIEQUAL (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4)]
[(stack, 0xfffffffffffffab8, 4) MULTIEQUAL (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4)]
[(stack, 0xfffffffffffffab4, 4) MULTIEQUAL (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4)]
[(stack, 0xfffffffffffffab3, 1) MULTIEQUAL (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1)]
[(stack, 0xfffffffffffffaac, 4) MULTIEQUAL (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4)]
[(stack, 0xfffffffffffffaa8, 4) MULTIEQUAL (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4)]
[(stack, 0xfffffffffffffaa4, 4) MULTIEQUAL (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4)]
[(stack, 0xfffffffffffffaa0, 4) MULTIEQUAL (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4)]
[(ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[(ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(register, 0x90, 4) MULTIEQUAL (register, 0x90, 4) , (stack, 0xfffffffffffffb00, 4)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x98, 8) MULTIEQUAL (unique, 0x10002833, 8) , (unique, 0x1000283b, 8)]
[(register, 0x8, 8) MULTIEQUAL (unique, 0x10002663, 8) , (unique, 0x1000266b, 8)]
[ ---  CBRANCH (ram, 0x414398, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x88, 4) , (const, 0x7ffffffe, 4), (register, 0x88, 4) MULTIEQUAL (register, 0x88, 4) , (stack, 0xfffffffffffffaf0, 4)]
[(register, 0x88, 8) INT_ZEXT (register, 0x88, 4), (register, 0x88, 4) INT_ADD (register, 0x88, 4) , (const, 0x2, 4)]
[(register, 0x90, 4) INT_SUB (register, 0x90, 4) , (const, 0x2, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbc0, 8) MULTIEQUAL (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8)]
[(stack, 0xfffffffffffffbb8, 8) MULTIEQUAL (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb90, 8) MULTIEQUAL (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8)]
[(stack, 0xfffffffffffffb88, 8) MULTIEQUAL (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb74, 4) MULTIEQUAL (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4)]
[(stack, 0xfffffffffffffb70, 4) MULTIEQUAL (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4)]
[(stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb64, 4) MULTIEQUAL (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4)]
[(stack, 0xfffffffffffffb62, 2) MULTIEQUAL (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2)]
[(stack, 0xfffffffffffffb60, 2) MULTIEQUAL (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2)]
[(stack, 0xfffffffffffffb5c, 4) MULTIEQUAL (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4)]
[(stack, 0xfffffffffffffb58, 4) MULTIEQUAL (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb24, 4) MULTIEQUAL (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4)]
[(stack, 0xfffffffffffffb20, 4) MULTIEQUAL (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae4, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[(stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffadc, 4) MULTIEQUAL (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4)]
[(stack, 0xfffffffffffffad8, 4) MULTIEQUAL (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4)]
[(stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffac8, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffac0, 8) MULTIEQUAL (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8)]
[(stack, 0xfffffffffffffabc, 4) MULTIEQUAL (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4)]
[(stack, 0xfffffffffffffab8, 4) MULTIEQUAL (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4)]
[(stack, 0xfffffffffffffab4, 4) MULTIEQUAL (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4)]
[(stack, 0xfffffffffffffab3, 1) MULTIEQUAL (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1)]
[(stack, 0xfffffffffffffaac, 4) MULTIEQUAL (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4)]
[(stack, 0xfffffffffffffaa8, 4) MULTIEQUAL (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4)]
[(stack, 0xfffffffffffffaa4, 4) MULTIEQUAL (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4)]
[(stack, 0xfffffffffffffaa0, 4) MULTIEQUAL (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4)]
[(ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[(ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x88, 8) MULTIEQUAL (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8)]
[(register, 0x90, 4) INT_SUB (register, 0x90, 4) , (register, 0x18, 4), (register, 0x18, 4) INT_ADD (register, 0x18, 4) , (register, 0x8, 4), (register, 0x8, 4) SUBPIECE (register, 0x8, 8) , (const, 0x0, 4), (register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8) , (register, 0x8, 8) , (register, 0x8, 8), (register, 0x90, 4) MULTIEQUAL (register, 0x90, 4) , (register, 0x90, 4) , (register, 0x90, 4) , (register, 0x90, 4)]
[(unique, 0x100026c3, 8) COPY (register, 0x8, 8), (register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8) , (register, 0x8, 8) , (register, 0x8, 8)]
[(unique, 0x100028b3, 8) COPY (register, 0x98, 8), (register, 0x98, 8) MULTIEQUAL (register, 0x98, 8) , (register, 0x98, 8) , (register, 0x98, 8) , (register, 0x98, 8)]
[ ---  CBRANCH (ram, 0x415b90, 1) , (unique, 0xd080, 1), (unique, 0xd080, 1) INT_SLESS (const, 0x0, 4) , (unique, 0x10003b2a, 4), (unique, 0x10003b2a, 4) CAST (register, 0x80, 4), (register, 0x80, 4) MULTIEQUAL (register, 0x80, 4) , (register, 0x80, 4) , (register, 0x80, 4) , (register, 0x80, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10003b5a, 8) , (const, 0x415bc3, 8), (unique, 0x10003b5a, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xbf4, 4)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0xbf4, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0xbf4, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0xbf4, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0xbf4, 4)]
[(stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0xbf4, 4), (stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0xbf3, 4)]
[(stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0xbf4, 4), (stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0xbf3, 4)]
[(stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0xbf4, 4), (stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0xbf3, 4)]
[(stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0xbf4, 4), (stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0xbf3, 4)]
[(stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0xbf4, 4), (stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0xbf3, 4)]
[(stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0xbf4, 4), (stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0xbf3, 4)]
[(stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0xbf4, 4), (stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0xbf3, 4)]
[(stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0xbf4, 4), (stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0xbf3, 4)]
[(stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0xbf4, 4), (stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0xbf3, 4)]
[(stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0xbf4, 4), (stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0xbf3, 4)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0xbf4, 4), (stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0xbf3, 4)]
[(stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0xbf4, 4), (stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0xbf3, 4)]
[(stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0xbf4, 4), (stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0xbf3, 4)]
[(stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0xbf4, 4), (stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0xbf3, 4)]
[(stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0xbf4, 4), (stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0xbf3, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0xbf4, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0xbf3, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0xbf4, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0xbf3, 4), (stack, 0xfffffffffffffaf0, 8) CAST (unique, 0x10003b42, 8), (unique, 0x10003b42, 8) INT_OR (unique, 0x1000118c, 8) , (register, 0x88, 8), (unique, 0x1000118c, 8) INT_AND (unique, 0x10003b3a, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10003b3a, 8) CAST (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0xbf4, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0xbf3, 4), (stack, 0xfffffffffffffaf8, 8) COPY (register, 0x98, 8)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0xbf4, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0xbf3, 4), (stack, 0xfffffffffffffb00, 8) COPY (register, 0x8, 8)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0xbf4, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0xbf3, 4), (stack, 0xfffffffffffffb08, 8) CAST (unique, 0x10003b52, 8), (unique, 0x10003b52, 8) INT_OR (unique, 0x1000119c, 8) , (unique, 0x100011a4, 8), (unique, 0x100011a4, 8) INT_ZEXT (register, 0x80, 4), (unique, 0x1000119c, 8) INT_AND (unique, 0x10003b4a, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10003b4a, 8) CAST (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0xbf4, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0xbf3, 4)]
[(stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0xbf4, 4), (stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0xbf3, 4)]
[(stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0xbf4, 4), (stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0xbf3, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0xbf4, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0xbf3, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0xbf4, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0xbf3, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0xbf4, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0xbf3, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0xbf4, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0xbf3, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0xbf4, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0xbf3, 4)]
[(stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0xbf4, 4), (stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0xbf3, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0xbf4, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0xbf3, 4)]
[(stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0xbf4, 4), (stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0xbf3, 4)]
[(stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0xbf4, 4), (stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0xbf3, 4)]
[(stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0xbf4, 4), (stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0xbf3, 4)]
[(stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0xbf4, 4), (stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0xbf3, 4)]
[(stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0xbf4, 4), (stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0xbf3, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0xbf4, 4), (stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0xbf3, 4)]
[(stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0xbf4, 4), (stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0xbf3, 4)]
[(stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0xbf4, 4), (stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0xbf3, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0xbf4, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0xbf3, 4)]
[(stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0xbf4, 4), (stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0xbf3, 4)]
[(stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0xbf4, 4), (stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0xbf3, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0xbf4, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0xbf3, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0xbf4, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0xbf3, 4)]
[(stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0xbf4, 4), (stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0xbf3, 4)]
[(stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0xbf4, 4), (stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0xbf3, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xbf4, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xbf3, 4)]
[ ---  CBRANCH (ram, 0x414398, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xfffffffffffffb10, 8) , (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10003b6a, 8), (unique, 0x10003b6a, 8) CALL (ram, 0x418b00, 8) , (register, 0x38, 8) , (const, 0x30, 4) , (unique, 0x10003b62, 8), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0xbf4, 4), (unique, 0x10003b62, 8) CAST (register, 0x10, 8), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0xbf3, 4), (stack, 0xfffffffffffffb10, 8) COPY (register, 0x10, 8), (register, 0x10, 8) CAST (unique, 0x10003b32, 8), (unique, 0x10003b32, 8) INT_SEXT (unique, 0x10003b2e, 4), (unique, 0x10003b2e, 4) CAST (register, 0x80, 4)]
[ ---  CBRANCH (ram, 0x4157e8, 1) , (unique, 0xc900, 1), (unique, 0xc900, 1) INT_LESS (const, 0x7ffffffe, 4) , (stack, 0xfffffffffffffaf0, 4), (stack, 0xfffffffffffffaf0, 4) SUBPIECE (stack, 0xfffffffffffffaf0, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x414e98, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (register, 0x0, 4) , (stack, 0xfffffffffffffb08, 4), (register, 0x0, 4) INT_SUB (const, 0x7fffffff, 4) , (stack, 0xfffffffffffffaf0, 4), (stack, 0xfffffffffffffb08, 4) SUBPIECE (stack, 0xfffffffffffffb08, 8) , (const, 0x0, 8)]
[(register, 0x88, 8) INT_ZEXT (register, 0x88, 4), (register, 0x88, 4) INT_ADD (stack, 0xfffffffffffffaf0, 4) , (stack, 0xfffffffffffffb08, 4)]
[(unique, 0x100026cb, 8) COPY (stack, 0xfffffffffffffb00, 8)]
[(unique, 0x100028bb, 8) COPY (stack, 0xfffffffffffffaf8, 8)]
[ ---  BRANCH (ram, 0x41573a, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbc0, 8) MULTIEQUAL (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8)]
[(stack, 0xfffffffffffffbb8, 8) MULTIEQUAL (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb90, 8) MULTIEQUAL (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8)]
[(stack, 0xfffffffffffffb88, 8) MULTIEQUAL (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb74, 4) MULTIEQUAL (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4)]
[(stack, 0xfffffffffffffb70, 4) MULTIEQUAL (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4)]
[(stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb64, 4) MULTIEQUAL (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4)]
[(stack, 0xfffffffffffffb62, 2) MULTIEQUAL (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2)]
[(stack, 0xfffffffffffffb60, 2) MULTIEQUAL (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2)]
[(stack, 0xfffffffffffffb5c, 4) MULTIEQUAL (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4)]
[(stack, 0xfffffffffffffb58, 4) MULTIEQUAL (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb24, 4) MULTIEQUAL (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4)]
[(stack, 0xfffffffffffffb20, 4) MULTIEQUAL (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae4, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[(stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffadc, 4) MULTIEQUAL (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4)]
[(stack, 0xfffffffffffffad8, 4) MULTIEQUAL (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4)]
[(stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffac8, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffac0, 8) MULTIEQUAL (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8)]
[(stack, 0xfffffffffffffabc, 4) MULTIEQUAL (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4)]
[(stack, 0xfffffffffffffab8, 4) MULTIEQUAL (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4)]
[(stack, 0xfffffffffffffab4, 4) MULTIEQUAL (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4)]
[(stack, 0xfffffffffffffab3, 1) MULTIEQUAL (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1)]
[(stack, 0xfffffffffffffaac, 4) MULTIEQUAL (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4)]
[(stack, 0xfffffffffffffaa8, 4) MULTIEQUAL (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4)]
[(stack, 0xfffffffffffffaa4, 4) MULTIEQUAL (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4)]
[(stack, 0xfffffffffffffaa0, 4) MULTIEQUAL (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4)]
[(ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[(ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x98, 8) MULTIEQUAL (unique, 0x100028b3, 8) , (unique, 0x100028bb, 8)]
[(register, 0x8, 8) MULTIEQUAL (unique, 0x100026c3, 8) , (unique, 0x100026cb, 8)]
[ ---  CBRANCH (ram, 0x4170ea, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (unique, 0x10003b72, 4) , (const, 0x0, 4), (unique, 0x10003b72, 4) CAST (register, 0x88, 4), (register, 0x88, 4) SUBPIECE (register, 0x88, 8) , (const, 0x0, 4), (register, 0x88, 8) MULTIEQUAL (register, 0x88, 8) , (register, 0x88, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10003b76, 8) , (const, 0x417109, 8), (unique, 0x10003b76, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x82a, 4), (stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x829, 4), (stack, 0xfffffffffffffaa4, 4) MULTIEQUAL (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4)]
[(stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x82a, 4), (stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x829, 4), (stack, 0xfffffffffffffaa8, 4) MULTIEQUAL (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4)]
[(stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x82a, 4), (stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x829, 4), (stack, 0xfffffffffffffaac, 4) MULTIEQUAL (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4)]
[(stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x82a, 4), (stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x829, 4), (stack, 0xfffffffffffffab3, 1) MULTIEQUAL (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1)]
[(stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x82a, 4), (stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x829, 4), (stack, 0xfffffffffffffab4, 4) MULTIEQUAL (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4)]
[(stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x82a, 4), (stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x829, 4), (stack, 0xfffffffffffffab8, 4) MULTIEQUAL (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4)]
[(stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x82a, 4), (stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x829, 4), (stack, 0xfffffffffffffabc, 4) MULTIEQUAL (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4)]
[(stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x82a, 4), (stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x829, 4), (stack, 0xfffffffffffffac0, 8) MULTIEQUAL (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8)]
[(stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x82a, 4), (stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x829, 4), (stack, 0xfffffffffffffac8, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x82a, 4), (stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x829, 4), (stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x82a, 4), (stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x829, 4), (stack, 0xfffffffffffffad8, 4) MULTIEQUAL (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4)]
[(stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x82a, 4), (stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x829, 4), (stack, 0xfffffffffffffadc, 4) MULTIEQUAL (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4)]
[(stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x82a, 4), (stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x829, 4), (stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x82a, 4), (stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x829, 4), (stack, 0xfffffffffffffae4, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x82a, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x829, 4), (stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x82a, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x829, 4), (stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x82a, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x829, 4), (stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x82a, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x829, 4), (stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x82a, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x829, 4), (stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x82a, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x829, 4), (stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x82a, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x829, 4), (stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x82a, 4), (stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x829, 4), (stack, 0xfffffffffffffb20, 4) MULTIEQUAL (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4)]
[(stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x82a, 4), (stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x829, 4), (stack, 0xfffffffffffffb24, 4) MULTIEQUAL (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x82a, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x829, 4), (stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x82a, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x829, 4), (stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x82a, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x829, 4), (stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x82a, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x829, 4), (stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x82a, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x829, 4), (stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x82a, 4), (stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x829, 4), (stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x82a, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x829, 4), (stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x82a, 4), (stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x829, 4), (stack, 0xfffffffffffffb58, 4) MULTIEQUAL (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4)]
[(stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x82a, 4), (stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x829, 4), (stack, 0xfffffffffffffb5c, 4) MULTIEQUAL (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4)]
[(stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x82a, 4), (stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x829, 4), (stack, 0xfffffffffffffb60, 2) MULTIEQUAL (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2)]
[(stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x82a, 4), (stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x829, 4), (stack, 0xfffffffffffffb62, 2) MULTIEQUAL (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2)]
[(stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x82a, 4), (stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x829, 4), (stack, 0xfffffffffffffb64, 4) MULTIEQUAL (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x82a, 4), (stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x829, 4), (stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x82a, 4), (stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x829, 4), (stack, 0xfffffffffffffb70, 4) MULTIEQUAL (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4)]
[(stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x82a, 4), (stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x829, 4), (stack, 0xfffffffffffffb74, 4) MULTIEQUAL (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x82a, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x829, 4), (stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x82a, 4), (stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x829, 4), (stack, 0xfffffffffffffb88, 8) MULTIEQUAL (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8)]
[(stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x82a, 4), (stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x829, 4), (stack, 0xfffffffffffffb90, 8) MULTIEQUAL (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x82a, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x829, 4), (stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x82a, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x829, 4), (stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x82a, 4), (stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x829, 4), (stack, 0xfffffffffffffbb8, 8) MULTIEQUAL (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8)]
[(stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x82a, 4), (stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x829, 4), (stack, 0xfffffffffffffbc0, 8) MULTIEQUAL (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x82a, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x829, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CALL (ram, 0x403170, 8) , (unique, 0x10001b20, 8) , (unique, 0x10001ae0, 8) , (const, 0x697, 4) , (unique, 0x10001b50, 8), (unique, 0x10001b50, 8) COPY (const, 0x49ab60, 8), (unique, 0x10001b20, 8) COPY (const, 0x49aa58, 8), (unique, 0x10001ae0, 8) COPY (const, 0x49a9a4, 8)]
[(ram, 0x4c4fb0, 8) COPY (ram, 0x4c4fb0, 8), (ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x82a, 4), (ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(ram, 0x4c8948, 8) COPY (ram, 0x4c8948, 8), (ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x82a, 4), (ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c8950, 8) COPY (ram, 0x4c8950, 8), (ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x82a, 4), (ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8970, 8) COPY (ram, 0x4c8970, 8), (ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x82a, 4), (ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[ ---  RETURN (const, 0x1, 4)]
[(unique, 0x100025c3, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10003b7e, 8), (unique, 0x10003b7e, 8) CAST (unique, 0x3c80, 8), (unique, 0x3c80, 8) PTRADD (register, 0x38, 8) , (const, 0x1, 8) , (const, 0xd8, 8)]
[(unique, 0x100026a3, 8) COPY (register, 0x8, 8)]
[(unique, 0x10002893, 8) COPY (register, 0x98, 8)]
[ ---  CBRANCH (ram, 0x416732, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESSEQUAL (stack, 0xfffffffffffffb28, 8) , (register, 0x10, 8), (register, 0x10, 8) PTRADD (unique, 0xbd80, 8) , (const, 0xfffffffffff67294, 8) , (const, 0x8, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10003b7e, 8), (unique, 0x10003b7e, 8) CAST (unique, 0x3c80, 8), (unique, 0x3c80, 8) PTRADD (register, 0x38, 8) , (const, 0x1, 8) , (const, 0xd8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10003b96, 8) , (const, 0x416753, 8), (unique, 0x10003b96, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xbd1, 4)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0xbd1, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0xbd1, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0xbd1, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0xbd1, 4)]
[(stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0xbd1, 4), (stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0xbd0, 4)]
[(stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0xbd1, 4), (stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0xbd0, 4)]
[(stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0xbd1, 4), (stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0xbd0, 4)]
[(stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0xbd1, 4), (stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0xbd0, 4)]
[(stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0xbd1, 4), (stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0xbd0, 4)]
[(stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0xbd1, 4), (stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0xbd0, 4)]
[(stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0xbd1, 4), (stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0xbd0, 4)]
[(stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0xbd1, 4), (stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0xbd0, 4)]
[(stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0xbd1, 4), (stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0xbd0, 4)]
[(stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0xbd1, 4), (stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0xbd0, 4)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0xbd1, 4), (stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0xbd0, 4)]
[(stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0xbd1, 4), (stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0xbd0, 4)]
[(stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0xbd1, 4), (stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0xbd0, 4)]
[(stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0xbd1, 4), (stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0xbd0, 4)]
[(stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0xbd1, 4), (stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0xbd0, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0xbd1, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0xbd0, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0xbd1, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0xbd0, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0xbd1, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0xbd0, 4)]
[(stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0xbd1, 4), (stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0xbd0, 4)]
[(stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0xbd1, 4), (stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0xbd0, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0xbd1, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0xbd0, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0xbd1, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0xbd0, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0xbd1, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0xbd0, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0xbd1, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0xbd0, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0xbd1, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0xbd0, 4)]
[(stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0xbd1, 4), (stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0xbd0, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0xbd1, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0xbd0, 4)]
[(stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0xbd1, 4), (stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0xbd0, 4)]
[(stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0xbd1, 4), (stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0xbd0, 4)]
[(stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0xbd1, 4), (stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0xbd0, 4)]
[(stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0xbd1, 4), (stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0xbd0, 4)]
[(stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0xbd1, 4), (stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0xbd0, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0xbd1, 4), (stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0xbd0, 4)]
[(stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0xbd1, 4), (stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0xbd0, 4)]
[(stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0xbd1, 4), (stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0xbd0, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0xbd1, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0xbd0, 4)]
[(stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0xbd1, 4), (stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0xbd0, 4)]
[(stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0xbd1, 4), (stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0xbd0, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0xbd1, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0xbd0, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0xbd1, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0xbd0, 4)]
[(stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0xbd1, 4), (stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0xbd0, 4)]
[(stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0xbd1, 4), (stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0xbd0, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xbd1, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xbd0, 4)]
[ ---  CALL (ram, 0x41b380, 8)]
[(unique, 0x100015e1, 4) SUBPIECE (stack, 0xfffffffffffffaf8, 8) , (const, 0x0, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0xbd1, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0xbd0, 4), (stack, 0xfffffffffffffaf8, 8) CAST (unique, 0x10003b8e, 8), (unique, 0x10003b8e, 8) INT_OR (unique, 0x100012e0, 8) , (register, 0x88, 8), (unique, 0x100012e0, 8) INT_AND (unique, 0x10003b86, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10003b86, 8) CAST (stack, 0xfffffffffffffaf8, 8)]
[(unique, 0x100025cb, 8) COPY (stack, 0xfffffffffffffb08, 8), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0xbd1, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0xbd0, 4), (stack, 0xfffffffffffffb08, 8) COPY (unique, 0xbd80, 8)]
[(unique, 0x100026ab, 8) COPY (stack, 0xfffffffffffffb10, 8), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0xbd1, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0xbd0, 4), (stack, 0xfffffffffffffb10, 8) COPY (register, 0x8, 8)]
[(unique, 0x1000289b, 8) COPY (stack, 0xfffffffffffffb00, 8), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0xbd1, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0xbd0, 4), (stack, 0xfffffffffffffb00, 8) COPY (register, 0x98, 8)]
[ ---  BRANCH (ram, 0x415762, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10003bae, 8) , (const, 0x41577c, 8), (unique, 0x10003bae, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xb3c, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0xb3c, 4), (ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0xb3c, 4), (ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0xb3c, 4), (ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0xb3c, 4), (ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[(stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0xb3c, 4), (stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0xb3a, 4), (stack, 0xfffffffffffffaa0, 4) MULTIEQUAL (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4)]
[(stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0xb3c, 4), (stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0xb3a, 4), (stack, 0xfffffffffffffaa4, 4) MULTIEQUAL (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4)]
[(stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0xb3c, 4), (stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0xb3a, 4), (stack, 0xfffffffffffffaa8, 4) MULTIEQUAL (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4)]
[(stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0xb3c, 4), (stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0xb3a, 4), (stack, 0xfffffffffffffaac, 4) MULTIEQUAL (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4)]
[(stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0xb3c, 4), (stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0xb3a, 4), (stack, 0xfffffffffffffab3, 1) MULTIEQUAL (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1)]
[(stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0xb3c, 4), (stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0xb3a, 4), (stack, 0xfffffffffffffab4, 4) MULTIEQUAL (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4)]
[(stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0xb3c, 4), (stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0xb3a, 4), (stack, 0xfffffffffffffab8, 4) MULTIEQUAL (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4)]
[(stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0xb3c, 4), (stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0xb3a, 4), (stack, 0xfffffffffffffabc, 4) MULTIEQUAL (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4)]
[(stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0xb3c, 4), (stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0xb3a, 4), (stack, 0xfffffffffffffac0, 8) MULTIEQUAL (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8)]
[(stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0xb3c, 4), (stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0xb3a, 4), (stack, 0xfffffffffffffac8, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0xb3c, 4), (stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0xb3a, 4), (stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0xb3c, 4), (stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0xb3a, 4), (stack, 0xfffffffffffffad8, 4) MULTIEQUAL (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4)]
[(stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0xb3c, 4), (stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0xb3a, 4), (stack, 0xfffffffffffffadc, 4) MULTIEQUAL (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4)]
[(stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0xb3c, 4), (stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0xb3a, 4), (stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0xb3c, 4), (stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0xb3a, 4), (stack, 0xfffffffffffffae4, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0xb3c, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0xb3a, 4), (stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0xb3c, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0xb3a, 4), (stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0xb3c, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0xb3a, 4), (stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0xb3c, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0xb3a, 4), (stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0xb3c, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0xb3a, 4), (stack, 0xfffffffffffffb08, 8) CAST (unique, 0x10003ba6, 8), (unique, 0x10003ba6, 8) INT_OR (unique, 0x100010cb, 8) , (unique, 0x100010d3, 8), (unique, 0x100010d3, 8) INT_ZEXT (register, 0x88, 4), (unique, 0x100010cb, 8) INT_AND (unique, 0x10003b9e, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10003b9e, 8) CAST (stack, 0xfffffffffffffb08, 8), (stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8), (register, 0x88, 4) MULTIEQUAL (register, 0x88, 4) , (unique, 0x100015e1, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0xb3c, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0xb3a, 4), (stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0xb3c, 4), (stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0xb3a, 4), (stack, 0xfffffffffffffb20, 4) MULTIEQUAL (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4)]
[(stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0xb3c, 4), (stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0xb3a, 4), (stack, 0xfffffffffffffb24, 4) MULTIEQUAL (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0xb3c, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0xb3a, 4), (stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0xb3c, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0xb3a, 4), (stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0xb3c, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0xb3a, 4), (stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0xb3c, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0xb3a, 4), (stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0xb3c, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0xb3a, 4), (stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0xb3c, 4), (stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0xb3a, 4), (stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0xb3c, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0xb3a, 4), (stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0xb3c, 4), (stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0xb3a, 4), (stack, 0xfffffffffffffb58, 4) MULTIEQUAL (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4)]
[(stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0xb3c, 4), (stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0xb3a, 4), (stack, 0xfffffffffffffb5c, 4) MULTIEQUAL (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4)]
[(stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0xb3c, 4), (stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0xb3a, 4), (stack, 0xfffffffffffffb60, 2) MULTIEQUAL (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2)]
[(stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0xb3c, 4), (stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0xb3a, 4), (stack, 0xfffffffffffffb62, 2) MULTIEQUAL (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2)]
[(stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0xb3c, 4), (stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0xb3a, 4), (stack, 0xfffffffffffffb64, 4) MULTIEQUAL (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0xb3c, 4), (stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0xb3a, 4), (stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0xb3c, 4), (stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0xb3a, 4), (stack, 0xfffffffffffffb70, 4) MULTIEQUAL (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4)]
[(stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0xb3c, 4), (stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0xb3a, 4), (stack, 0xfffffffffffffb74, 4) MULTIEQUAL (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0xb3c, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0xb3a, 4), (stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0xb3c, 4), (stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0xb3a, 4), (stack, 0xfffffffffffffb88, 8) MULTIEQUAL (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8)]
[(stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0xb3c, 4), (stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0xb3a, 4), (stack, 0xfffffffffffffb90, 8) MULTIEQUAL (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0xb3c, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0xb3a, 4), (stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0xb3c, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0xb3a, 4), (stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0xb3c, 4), (stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0xb3a, 4), (stack, 0xfffffffffffffbb8, 8) MULTIEQUAL (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8)]
[(stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0xb3c, 4), (stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0xb3a, 4), (stack, 0xfffffffffffffbc0, 8) MULTIEQUAL (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xb3c, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xb3a, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CBRANCH (ram, 0x414398, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xfffffffffffffb10, 8) , (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10003bbe, 8), (unique, 0x10003bbe, 8) CALLIND (unique, 0x10003bb6, 8) , (register, 0x38, 8) , (register, 0x98, 8) , (register, 0x8, 8), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0xb3c, 4), (unique, 0x10003bb6, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0xb3a, 4), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x7, 8) , (const, 0x8, 8), (stack, 0xfffffffffffffb10, 8) COPY (register, 0x8, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x100025c3, 8) , (unique, 0x100025cb, 8), (register, 0x8, 8) MULTIEQUAL (unique, 0x100026a3, 8) , (unique, 0x100026ab, 8), (register, 0x98, 8) MULTIEQUAL (unique, 0x10002893, 8) , (unique, 0x1000289b, 8)]
[ ---  CBRANCH (ram, 0x414e98, 1) , (unique, 0xcc00, 1), (unique, 0xcc00, 1) INT_SLESS (register, 0x0, 8) , (unique, 0x10003bca, 8), (unique, 0x10003bca, 8) CAST (stack, 0xfffffffffffffb10, 8), (register, 0x0, 8) INT_SEXT (unique, 0x10003bc6, 4), (unique, 0x10003bc6, 4) CAST (register, 0x0, 4), (register, 0x0, 4) INT_SUB (const, 0x7fffffff, 4) , (stack, 0xfffffffffffffb08, 4), (stack, 0xfffffffffffffb08, 4) SUBPIECE (stack, 0xfffffffffffffb08, 8) , (const, 0x0, 8)]
[(register, 0x88, 8) INT_ZEXT (register, 0x88, 4), (register, 0x88, 4) INT_ADD (stack, 0xfffffffffffffb08, 4) , (register, 0x8, 4)]
[ ---  CBRANCH (ram, 0x414640, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (const, 0x0, 4) , (unique, 0x10003bd2, 4), (unique, 0x10003bd2, 4) CAST (register, 0x90, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10003bea, 8) , (const, 0x4157cb, 8), (unique, 0x10003bea, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xb85, 4)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0xb85, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0xb85, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0xb85, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0xb85, 4)]
[(stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0xb85, 4), (stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0xb84, 4)]
[(stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0xb85, 4), (stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0xb84, 4)]
[(stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0xb85, 4), (stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0xb84, 4)]
[(stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0xb85, 4), (stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0xb84, 4)]
[(stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0xb85, 4), (stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0xb84, 4)]
[(stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0xb85, 4), (stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0xb84, 4)]
[(stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0xb85, 4), (stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0xb84, 4)]
[(stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0xb85, 4), (stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0xb84, 4)]
[(stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0xb85, 4), (stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0xb84, 4)]
[(stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0xb85, 4), (stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0xb84, 4)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0xb85, 4), (stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0xb84, 4)]
[(stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0xb85, 4), (stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0xb84, 4)]
[(stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0xb85, 4), (stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0xb84, 4)]
[(stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0xb85, 4), (stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0xb84, 4)]
[(stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0xb85, 4), (stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0xb84, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0xb85, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0xb84, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0xb85, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0xb84, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0xb85, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0xb84, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0xb85, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0xb84, 4)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0xb85, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0xb84, 4)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0xb85, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0xb84, 4), (stack, 0xfffffffffffffb10, 8) CAST (unique, 0x10003be2, 8), (unique, 0x10003be2, 8) INT_OR (unique, 0x100010dc, 8) , (unique, 0x100010e4, 8), (unique, 0x100010e4, 8) INT_ZEXT (register, 0x88, 4), (unique, 0x100010dc, 8) INT_AND (unique, 0x10003bda, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10003bda, 8) CAST (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0xb85, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0xb84, 4)]
[(stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0xb85, 4), (stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0xb84, 4)]
[(stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0xb85, 4), (stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0xb84, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0xb85, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0xb84, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0xb85, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0xb84, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0xb85, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0xb84, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0xb85, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0xb84, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0xb85, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0xb84, 4)]
[(stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0xb85, 4), (stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0xb84, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0xb85, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0xb84, 4)]
[(stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0xb85, 4), (stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0xb84, 4)]
[(stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0xb85, 4), (stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0xb84, 4)]
[(stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0xb85, 4), (stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0xb84, 4)]
[(stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0xb85, 4), (stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0xb84, 4)]
[(stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0xb85, 4), (stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0xb84, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0xb85, 4), (stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0xb84, 4)]
[(stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0xb85, 4), (stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0xb84, 4)]
[(stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0xb85, 4), (stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0xb84, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0xb85, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0xb84, 4)]
[(stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0xb85, 4), (stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0xb84, 4)]
[(stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0xb85, 4), (stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0xb84, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0xb85, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0xb84, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0xb85, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0xb84, 4)]
[(stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0xb85, 4), (stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0xb84, 4)]
[(stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0xb85, 4), (stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0xb84, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xb85, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xb84, 4)]
[ ---  CBRANCH (ram, 0x414398, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xb8, 8) , (register, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x418b00, 8) , (register, 0x38, 8) , (const, 0x20, 4) , (register, 0xb8, 8), (register, 0xb8, 8) INT_SEXT (unique, 0x10003bd6, 4), (unique, 0x10003bd6, 4) CAST (register, 0x90, 4)]
[ ---  CBRANCH (ram, 0x414e83, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (const, 0x7ffffffe, 4) , (stack, 0xfffffffffffffb10, 4), (stack, 0xfffffffffffffb10, 4) SUBPIECE (stack, 0xfffffffffffffb10, 8) , (const, 0x0, 8)]
[(register, 0x80, 4) MULTIEQUAL (unique, 0x10002deb, 4) , (unique, 0x10002def, 4) , (unique, 0x10002df3, 4) , (unique, 0x10002df7, 4) , (unique, 0x10002dfb, 4) , (unique, 0x10002dff, 4) , (unique, 0x10002e03, 4) , (unique, 0x10002e07, 4) , (unique, 0x10002e0b, 4) , (unique, 0x10002e0f, 4) , (unique, 0x10002e13, 4) , (unique, 0x10002e17, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbc0, 8) MULTIEQUAL (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8)]
[(stack, 0xfffffffffffffbb8, 8) MULTIEQUAL (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb90, 8) MULTIEQUAL (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8)]
[(stack, 0xfffffffffffffb88, 8) MULTIEQUAL (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb74, 4) MULTIEQUAL (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4)]
[(stack, 0xfffffffffffffb70, 4) MULTIEQUAL (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4)]
[(stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb64, 4) MULTIEQUAL (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4)]
[(stack, 0xfffffffffffffb62, 2) MULTIEQUAL (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2)]
[(stack, 0xfffffffffffffb60, 2) MULTIEQUAL (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2)]
[(stack, 0xfffffffffffffb5c, 4) MULTIEQUAL (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4)]
[(stack, 0xfffffffffffffb58, 4) MULTIEQUAL (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb24, 4) MULTIEQUAL (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4)]
[(stack, 0xfffffffffffffb20, 4) MULTIEQUAL (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae4, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[(stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffadc, 4) MULTIEQUAL (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4)]
[(stack, 0xfffffffffffffad8, 4) MULTIEQUAL (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4)]
[(stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffac8, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffac0, 8) MULTIEQUAL (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8)]
[(stack, 0xfffffffffffffabc, 4) MULTIEQUAL (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4)]
[(stack, 0xfffffffffffffab8, 4) MULTIEQUAL (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4)]
[(stack, 0xfffffffffffffab4, 4) MULTIEQUAL (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4)]
[(stack, 0xfffffffffffffab3, 1) MULTIEQUAL (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1)]
[(stack, 0xfffffffffffffaac, 4) MULTIEQUAL (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4)]
[(stack, 0xfffffffffffffaa8, 4) MULTIEQUAL (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4)]
[(stack, 0xfffffffffffffaa4, 4) MULTIEQUAL (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4)]
[(stack, 0xfffffffffffffaa0, 4) MULTIEQUAL (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4)]
[(ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[(ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(register, 0x90, 4) MULTIEQUAL (unique, 0x10002a2f, 4) , (unique, 0x10002a33, 4) , (unique, 0x10002a37, 4) , (unique, 0x10002a3b, 4) , (unique, 0x10002a3f, 4) , (unique, 0x10002a43, 4) , (unique, 0x10002a47, 4) , (unique, 0x10002a4b, 4) , (unique, 0x10002a4f, 4) , (unique, 0x10002a53, 4) , (unique, 0x10002a57, 4) , (unique, 0x10002a5b, 4)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb8, 1) MULTIEQUAL (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1)]
[(register, 0x88, 8) MULTIEQUAL (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8)]
[(register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x415fa0, 1) , (unique, 0xc900, 1), (unique, 0xc900, 1) INT_LESS (unique, 0xbc80, 4) , (const, 0x30, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10003bf2, 8), (unique, 0x10003bf2, 8) CAST (register, 0x10, 8)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x14a1, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x14a1, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x14a1, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x14a1, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x8, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x1, 8) , (const, 0x8, 8), (unique, 0xbd80, 8) CAST (unique, 0x10003bfa, 8), (unique, 0x10003bfa, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[ ---  BRANCH (ram, 0x414724, 1)]
[(register, 0x10, 8) CAST (unique, 0x10003c02, 8), (unique, 0x10003c02, 8) INT_ADD (register, 0x10, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x2, 8) , (const, 0x8, 8), (register, 0x10, 8) INT_ZEXT (unique, 0xbc80, 4)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0xf7d, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0xf7d, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0xf7d, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0xf7d, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10003c0a, 8) , (register, 0x0, 4), (unique, 0x10003c0a, 8) CAST (register, 0x10, 8), (register, 0x0, 4) INT_ADD (unique, 0xbc80, 4) , (const, 0x8, 4)]
[(ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[(ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(unique, 0xbd80, 8) CAST (unique, 0x10003c12, 8), (unique, 0x10003c12, 8) LOAD (const, 0x1b1, 4) , (register, 0x10, 8), (register, 0x10, 8) MULTIEQUAL (register, 0x10, 8) , (unique, 0xbd80, 8)]
[(register, 0x80, 4) MULTIEQUAL (register, 0x80, 4) , (unique, 0x100015fb, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbc0, 8) MULTIEQUAL (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8)]
[(stack, 0xfffffffffffffbb8, 8) MULTIEQUAL (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb90, 8) MULTIEQUAL (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8)]
[(stack, 0xfffffffffffffb88, 8) MULTIEQUAL (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb74, 4) MULTIEQUAL (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4)]
[(stack, 0xfffffffffffffb70, 4) MULTIEQUAL (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4)]
[(stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb64, 4) MULTIEQUAL (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4)]
[(stack, 0xfffffffffffffb62, 2) MULTIEQUAL (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2)]
[(stack, 0xfffffffffffffb60, 2) MULTIEQUAL (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2)]
[(stack, 0xfffffffffffffb5c, 4) MULTIEQUAL (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4)]
[(stack, 0xfffffffffffffb58, 4) MULTIEQUAL (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb24, 4) MULTIEQUAL (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4)]
[(stack, 0xfffffffffffffb20, 4) MULTIEQUAL (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae4, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[(stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffadc, 4) MULTIEQUAL (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4)]
[(stack, 0xfffffffffffffad8, 4) MULTIEQUAL (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4)]
[(stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffac8, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffac0, 8) MULTIEQUAL (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8)]
[(stack, 0xfffffffffffffabc, 4) MULTIEQUAL (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4)]
[(stack, 0xfffffffffffffab8, 4) MULTIEQUAL (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4)]
[(stack, 0xfffffffffffffab4, 4) MULTIEQUAL (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4)]
[(stack, 0xfffffffffffffab3, 1) MULTIEQUAL (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1)]
[(stack, 0xfffffffffffffaac, 4) MULTIEQUAL (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4)]
[(stack, 0xfffffffffffffaa8, 4) MULTIEQUAL (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4)]
[(stack, 0xfffffffffffffaa4, 4) MULTIEQUAL (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4)]
[(stack, 0xfffffffffffffaa0, 4) MULTIEQUAL (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4)]
[(ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[(ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(register, 0x90, 4) MULTIEQUAL (register, 0x90, 4) , (unique, 0x100029c7, 4)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb8, 1) MULTIEQUAL (register, 0xb8, 1) , (register, 0xb8, 1)]
[(register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8)]
[(register, 0x88, 4) SUBPIECE (register, 0x88, 8) , (const, 0x0, 4), (register, 0x88, 8) MULTIEQUAL (register, 0x88, 8) , (register, 0x88, 8)]
[ ---  CBRANCH (ram, 0x415940, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x10003c1a, 8) , (const, 0x0, 8), (unique, 0x10003c1a, 8) CAST (register, 0x98, 8), (register, 0x98, 8) MULTIEQUAL (unique, 0xbd80, 8) , (register, 0x0, 8)]
[(stack, 0xfffffffffffffb00, 8) CAST (unique, 0x10003c2a, 8), (unique, 0x10003c2a, 8) INT_AND (unique, 0x10003c22, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10003c22, 8) CAST (stack, 0xfffffffffffffb00, 8)]
[ ---  CBRANCH (ram, 0x416280, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x80, 4) , (const, 0xffffffff, 4)]
[ ---  CBRANCH (ram, 0x416280, 1) , (unique, 0xd080, 1), (unique, 0xd080, 1) INT_SLESS (const, 0x5, 4) , (unique, 0x10003c32, 4), (unique, 0x10003c32, 4) CAST (register, 0x80, 4)]
[(register, 0x18, 4) COPY (const, 0x6, 4)]
[(register, 0xb8, 8) COPY (const, 0x6, 8)]
[(register, 0x98, 8) COPY (const, 0x49a9cd, 8)]
[ ---  BRANCH (ram, 0x414796, 1)]
[(register, 0x18, 4) COPY (const, 0x0, 4)]
[(register, 0x98, 8) PTRSUB (const, 0x0, 8) , (const, 0x4b0c15, 8)]
[(register, 0xb8, 8) COPY (const, 0x0, 8)]
[(unique, 0x100029c3, 4) COPY (register, 0x90, 4)]
[ ---  CBRANCH (ram, 0x416060, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xfffffffffffffb10, 4) , (const, 0x0, 4), (stack, 0xfffffffffffffb10, 4) SUBPIECE (stack, 0xfffffffffffffb10, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x416060, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xb8, 1) , (const, 0x53, 1)]
[(stack, 0xfffffffffffffb68, 8) COPY (unique, 0x10003c36, 8), (unique, 0x10003c36, 8) CAST (register, 0x98, 8)]
[(unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffba8, 8) COPY (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x4168d8, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (unique, 0x10003c3e, 4) , (const, 0x0, 4), (unique, 0x10003c3e, 4) CAST (register, 0x80, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10003c6a, 8) , (const, 0x416907, 8), (unique, 0x10003c6a, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1338, 4)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x1338, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x1338, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x1338, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x1338, 4)]
[(stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x1338, 4), (stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x1337, 4)]
[(stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x1338, 4), (stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x1337, 4)]
[(stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x1338, 4), (stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x1337, 4)]
[(stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x1338, 4), (stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x1337, 4)]
[(stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x1338, 4), (stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x1337, 4)]
[(stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x1338, 4), (stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x1337, 4)]
[(stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x1338, 4), (stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x1337, 4)]
[(stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x1338, 4), (stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x1337, 4)]
[(stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x1338, 4), (stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x1337, 4)]
[(stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x1338, 4), (stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x1337, 4)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x1338, 4), (stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x1337, 4)]
[(stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x1338, 4), (stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x1337, 4)]
[(stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x1338, 4), (stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x1337, 4)]
[(stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x1338, 4), (stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x1337, 4)]
[(stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x1338, 4), (stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x1337, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x1338, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x1337, 4)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x1338, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x1337, 4)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x1338, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x1337, 4), (stack, 0xfffffffffffffb10, 8) COPY (unique, 0x3200, 8), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x1338, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x1337, 4)]
[(stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x1338, 4), (stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x1337, 4)]
[(stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x1338, 4), (stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x1337, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x1338, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x1337, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x1338, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x1337, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x1338, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x1337, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x1338, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x1337, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x1338, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x1337, 4)]
[(stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x1338, 4), (stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x1337, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x1338, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x1337, 4)]
[(stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x1338, 4), (stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x1337, 4)]
[(stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x1338, 4), (stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x1337, 4)]
[(stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x1338, 4), (stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x1337, 4)]
[(stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x1338, 4), (stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x1337, 4)]
[(stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x1338, 4), (stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x1337, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x1338, 4), (stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x1337, 4)]
[(stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x1338, 4), (stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x1337, 4)]
[(stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x1338, 4), (stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x1337, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x1338, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x1337, 4)]
[(stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x1338, 4), (stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x1337, 4)]
[(stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x1338, 4), (stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x1337, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x1338, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x1337, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x1338, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x1337, 4)]
[(stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x1338, 4), (stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x1337, 4)]
[(stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x1338, 4), (stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x1337, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1338, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1337, 4)]
[(unique, 0x10002567, 8) COPY (stack, 0xfffffffffffffaf8, 8), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x1338, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x1337, 4), (stack, 0xfffffffffffffaf8, 8) COPY (unique, 0x10003c62, 8), (unique, 0x10003c62, 8) CAST (register, 0x98, 8)]
[(unique, 0x10002547, 8) COPY (stack, 0xfffffffffffffaf0, 8), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x1338, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x1337, 4), (stack, 0xfffffffffffffaf0, 8) CAST (unique, 0x10003c5a, 8), (unique, 0x10003c5a, 8) INT_OR (unique, 0x10001342, 8) , (unique, 0x1000134a, 8), (unique, 0x1000134a, 8) INT_ZEXT (register, 0x90, 4), (unique, 0x10001342, 8) INT_AND (unique, 0x10003c52, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10003c52, 8) CAST (stack, 0xfffffffffffffaf0, 8)]
[(unique, 0x10002537, 8) COPY (stack, 0xfffffffffffffae8, 8), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x1338, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x1337, 4), (stack, 0xfffffffffffffae8, 8) CAST (unique, 0x10003c4a, 8), (unique, 0x10003c4a, 8) INT_OR (unique, 0x10001332, 8) , (register, 0x88, 8), (unique, 0x10001332, 8) INT_AND (unique, 0x10003c42, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10003c42, 8) CAST (stack, 0xfffffffffffffae8, 8)]
[ ---  CBRANCH (ram, 0x414398, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0xffffffffffffffff, 8), (register, 0x0, 8) CALL (ram, 0x453930, 8) , (const, 0x0, 8) , (unique, 0x10003c72, 8) , (const, 0x0, 8) , (unique, 0x3200, 8), (unique, 0x10003c72, 8) CAST (unique, 0x3200, 8), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb00, 8) CAST (unique, 0x10003c82, 8), (unique, 0x10003c82, 8) INT_OR (unique, 0x10001352, 8) , (unique, 0x1000135a, 8), (unique, 0x1000135a, 8) INT_AND (stack, 0xfffffffffffffba8, 8) , (const, 0xffffffff, 8), (unique, 0x10001352, 8) INT_AND (unique, 0x10003c7a, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10003c7a, 8) CAST (stack, 0xfffffffffffffb00, 8)]
[ ---  CBRANCH (ram, 0x417265, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xfffffffffffffba8, 4) , (const, 0x0, 4), (stack, 0xfffffffffffffba8, 4) SUBPIECE (stack, 0xfffffffffffffba8, 8) , (const, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10003c8a, 8) , (const, 0x417284, 8), (unique, 0x10003c8a, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x1464, 4), (stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x1463, 4)]
[(stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x1464, 4), (stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x1463, 4)]
[(stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x1464, 4), (stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x1463, 4)]
[(stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x1464, 4), (stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x1463, 4)]
[(stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x1464, 4), (stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x1463, 4)]
[(stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x1464, 4), (stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x1463, 4)]
[(stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x1464, 4), (stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x1463, 4)]
[(stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x1464, 4), (stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x1463, 4)]
[(stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x1464, 4), (stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x1463, 4)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x1464, 4), (stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x1463, 4)]
[(stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x1464, 4), (stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x1463, 4)]
[(stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x1464, 4), (stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x1463, 4)]
[(stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x1464, 4), (stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x1463, 4)]
[(stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x1464, 4), (stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x1463, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x1464, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x1463, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x1464, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x1463, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x1464, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x1463, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x1464, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x1463, 4)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x1464, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x1463, 4)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x1464, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x1463, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x1464, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x1463, 4)]
[(stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x1464, 4), (stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x1463, 4)]
[(stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x1464, 4), (stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x1463, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x1464, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x1463, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x1464, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x1463, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x1464, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x1463, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x1464, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x1463, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x1464, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x1463, 4)]
[(stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x1464, 4), (stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x1463, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x1464, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x1463, 4)]
[(stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x1464, 4), (stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x1463, 4)]
[(stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x1464, 4), (stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x1463, 4)]
[(stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x1464, 4), (stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x1463, 4)]
[(stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x1464, 4), (stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x1463, 4)]
[(stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x1464, 4), (stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x1463, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x1464, 4), (stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x1463, 4)]
[(stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x1464, 4), (stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x1463, 4)]
[(stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x1464, 4), (stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x1463, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x1464, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x1463, 4)]
[(stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x1464, 4), (stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x1463, 4)]
[(stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x1464, 4), (stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x1463, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x1464, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x1463, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x1464, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x1463, 4)]
[(stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x1464, 4), (stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x1463, 4)]
[(stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x1464, 4), (stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x1463, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1464, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1463, 4)]
[ ---  CALL (ram, 0x403170, 8) , (unique, 0x10001b08, 8) , (unique, 0x10001b00, 8) , (const, 0x698, 4) , (unique, 0x10001b70, 8), (unique, 0x10001b70, 8) COPY (const, 0x49ab60, 8), (unique, 0x10001b08, 8) COPY (const, 0x49a9b8, 8), (unique, 0x10001b00, 8) COPY (const, 0x49a9a4, 8)]
[(ram, 0x4c4fb0, 8) COPY (ram, 0x4c4fb0, 8), (ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x1464, 4)]
[(ram, 0x4c8948, 8) COPY (ram, 0x4c8948, 8), (ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x1464, 4)]
[(ram, 0x4c8950, 8) COPY (ram, 0x4c8950, 8), (ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x1464, 4)]
[(ram, 0x4c8970, 8) COPY (ram, 0x4c8970, 8), (ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x1464, 4)]
[ ---  RETURN (const, 0x1, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10003cd2, 8) , (const, 0x416973, 8), (unique, 0x10003cd2, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1378, 4)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x1378, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x1378, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x1378, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x1378, 4)]
[(stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x1378, 4), (stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x1377, 4)]
[(stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x1378, 4), (stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x1377, 4)]
[(stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x1378, 4), (stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x1377, 4)]
[(stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x1378, 4), (stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x1377, 4)]
[(stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x1378, 4), (stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x1377, 4)]
[(stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x1378, 4), (stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x1377, 4)]
[(stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x1378, 4), (stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x1377, 4)]
[(stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x1378, 4), (stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x1377, 4)]
[(stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x1378, 4), (stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x1377, 4)]
[(stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x1378, 4), (stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x1377, 4)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x1378, 4), (stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x1377, 4)]
[(stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x1378, 4), (stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x1377, 4)]
[(stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x1378, 4), (stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x1377, 4)]
[(stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x1378, 4), (stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x1377, 4)]
[(stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x1378, 4), (stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x1377, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x1378, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x1377, 4)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x1378, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x1377, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x1378, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x1377, 4)]
[(stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x1378, 4), (stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x1377, 4)]
[(stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x1378, 4), (stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x1377, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x1378, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x1377, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x1378, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x1377, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x1378, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x1377, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x1378, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x1377, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x1378, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x1377, 4)]
[(stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x1378, 4), (stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x1377, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x1378, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x1377, 4)]
[(stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x1378, 4), (stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x1377, 4)]
[(stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x1378, 4), (stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x1377, 4)]
[(stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x1378, 4), (stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x1377, 4)]
[(stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x1378, 4), (stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x1377, 4)]
[(stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x1378, 4), (stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x1377, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x1378, 4), (stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x1377, 4), (stack, 0xfffffffffffffb68, 8) COPY (unique, 0x10003cca, 8), (unique, 0x10003cca, 8) CAST (unique, 0x10002567, 8)]
[(stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x1378, 4), (stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x1377, 4)]
[(stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x1378, 4), (stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x1377, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x1378, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x1377, 4)]
[(stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x1378, 4), (stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x1377, 4)]
[(stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x1378, 4), (stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x1377, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x1378, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x1377, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x1378, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x1377, 4)]
[(stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x1378, 4), (stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x1377, 4)]
[(stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x1378, 4), (stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x1377, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1378, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1377, 4)]
[(register, 0x0, 4) CALL (ram, 0x421340, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10003c92, 8), (unique, 0x10003c92, 8) INT_ADD (register, 0x0, 8) , (const, 0x1, 8)]
[(unique, 0x1000258f, 8) COPY (stack, 0xfffffffffffffb10, 8), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x1378, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x1377, 4), (stack, 0xfffffffffffffb10, 8) COPY (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10003c92, 8), (unique, 0x10003c92, 8) INT_ADD (register, 0x0, 8) , (const, 0x1, 8)]
[(unique, 0x1000253f, 8) COPY (stack, 0xfffffffffffffae8, 8), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x1378, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x1377, 4), (stack, 0xfffffffffffffae8, 8) COPY (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffaf8, 4) SUBPIECE (stack, 0xfffffffffffffaf8, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x1378, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x1377, 4), (stack, 0xfffffffffffffaf8, 8) CAST (unique, 0x10003cc2, 8), (unique, 0x10003cc2, 8) INT_OR (unique, 0x10001372, 8) , (unique, 0x1000137a, 8), (unique, 0x1000137a, 8) INT_AND (unique, 0x10003cba, 8) , (const, 0xffffffff, 8), (unique, 0x10003cba, 8) CAST (unique, 0x10002547, 8), (unique, 0x10001372, 8) INT_AND (unique, 0x10003cb2, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10003cb2, 8) CAST (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 4) SUBPIECE (stack, 0xfffffffffffffaf0, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x1378, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x1377, 4), (stack, 0xfffffffffffffaf0, 8) CAST (unique, 0x10003caa, 8), (unique, 0x10003caa, 8) INT_OR (unique, 0x10001362, 8) , (unique, 0x1000136a, 8), (unique, 0x1000136a, 8) INT_AND (unique, 0x10003ca2, 8) , (const, 0xffffffff, 8), (unique, 0x10003ca2, 8) CAST (unique, 0x10002537, 8), (unique, 0x10001362, 8) INT_AND (unique, 0x10003c9a, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10003c9a, 8) CAST (stack, 0xfffffffffffffaf0, 8)]
[ ---  CBRANCH (ram, 0x4169a0, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (stack, 0xfffffffffffffb10, 8) , (const, 0x1001, 8), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x1378, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x1377, 4), (stack, 0xfffffffffffffb10, 8) COPY (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10003c92, 8), (unique, 0x10003c92, 8) INT_ADD (register, 0x0, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x417284, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4)]
[(register, 0x38, 8) PTRADD (register, 0x20, 8) , (unique, 0x10000b53, 8) , (const, 0x1, 8), (unique, 0x10000b53, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (unique, 0x10003cea, 8) , (const, 0xfffffffffffff000, 8), (unique, 0x10003cea, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10003ce2, 8), (unique, 0x10003ce2, 8) INT_ADD (unique, 0x10003cda, 8) , (const, 0x17, 8), (unique, 0x10003cda, 8) CAST (stack, 0xfffffffffffffb10, 8)]
[(unique, 0x10000b73, 4) SUBPIECE (unique, 0x3100, 8) , (const, 0x0, 4), (unique, 0x3100, 8) CAST (unique, 0x10003ce2, 8), (unique, 0x10003ce2, 8) INT_ADD (unique, 0x10003cda, 8) , (const, 0x17, 8), (unique, 0x10003cda, 8) CAST (stack, 0xfffffffffffffb10, 8)]
[(unique, 0x10002e57, 8) COPY (register, 0x20, 8)]
[(unique, 0x10001779, 4) MULTIEQUAL (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4)]
[(unique, 0x1000177d, 4) MULTIEQUAL (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4)]
[(unique, 0x10001781, 4) MULTIEQUAL (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4)]
[(unique, 0x10001785, 4) MULTIEQUAL (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4)]
[(unique, 0x10001789, 1) MULTIEQUAL (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1)]
[(unique, 0x1000178a, 4) MULTIEQUAL (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4)]
[(unique, 0x1000178e, 4) MULTIEQUAL (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4)]
[(unique, 0x10001792, 4) MULTIEQUAL (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4)]
[(unique, 0x10001796, 8) MULTIEQUAL (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8)]
[(unique, 0x1000179e, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(unique, 0x100017a6, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(unique, 0x100017ae, 4) MULTIEQUAL (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4)]
[(unique, 0x100017b2, 4) MULTIEQUAL (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4)]
[(unique, 0x100017b6, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(unique, 0x100017ba, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[(unique, 0x100017be, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(unique, 0x100017c6, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(unique, 0x100017ce, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(unique, 0x100017d6, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(unique, 0x100017de, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(unique, 0x100017e6, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(unique, 0x100017ee, 4) MULTIEQUAL (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4)]
[(unique, 0x100017f2, 4) MULTIEQUAL (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4)]
[(unique, 0x100017f6, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(unique, 0x100017fe, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(unique, 0x10001806, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(unique, 0x1000180e, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(unique, 0x10001812, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(unique, 0x10001816, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(unique, 0x1000181e, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(unique, 0x10001826, 4) MULTIEQUAL (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4)]
[(unique, 0x1000182a, 4) MULTIEQUAL (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4)]
[(unique, 0x1000182e, 2) MULTIEQUAL (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2)]
[(unique, 0x10001830, 2) MULTIEQUAL (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2)]
[(unique, 0x10001832, 4) MULTIEQUAL (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4)]
[(unique, 0x10001836, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(unique, 0x1000183e, 4) MULTIEQUAL (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4)]
[(unique, 0x10001842, 4) MULTIEQUAL (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4)]
[(unique, 0x10001846, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(unique, 0x1000184a, 8) MULTIEQUAL (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8)]
[(unique, 0x10001852, 8) MULTIEQUAL (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8)]
[(unique, 0x1000185a, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(unique, 0x10001862, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(unique, 0x1000186a, 8) MULTIEQUAL (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8)]
[(unique, 0x10001872, 8) MULTIEQUAL (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8)]
[(unique, 0x1000187a, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CBRANCH (ram, 0x4169d4, 1) , (unique, 0x10001760, 1), (unique, 0x10001760, 1) INT_NOTEQUAL (register, 0x20, 8) , (register, 0x38, 8), (register, 0x20, 8) MULTIEQUAL (unique, 0x10002e57, 8) , (register, 0x20, 8)]
[(stack, 0xfffffffffffffaa0, 4) INDIRECT (unique, 0x10001779, 4) , (const, 0x13d4, 4)]
[(stack, 0xfffffffffffffaa4, 4) INDIRECT (unique, 0x1000177d, 4) , (const, 0x13d4, 4)]
[(stack, 0xfffffffffffffaa8, 4) INDIRECT (unique, 0x10001781, 4) , (const, 0x13d4, 4)]
[(stack, 0xfffffffffffffaac, 4) INDIRECT (unique, 0x10001785, 4) , (const, 0x13d4, 4)]
[(stack, 0xfffffffffffffab3, 1) INDIRECT (unique, 0x10001789, 1) , (const, 0x13d4, 4)]
[(stack, 0xfffffffffffffab4, 4) INDIRECT (unique, 0x1000178a, 4) , (const, 0x13d4, 4)]
[(stack, 0xfffffffffffffab8, 4) INDIRECT (unique, 0x1000178e, 4) , (const, 0x13d4, 4)]
[(stack, 0xfffffffffffffabc, 4) INDIRECT (unique, 0x10001792, 4) , (const, 0x13d4, 4)]
[(stack, 0xfffffffffffffac0, 8) INDIRECT (unique, 0x10001796, 8) , (const, 0x13d4, 4)]
[(stack, 0xfffffffffffffac8, 8) INDIRECT (unique, 0x1000179e, 8) , (const, 0x13d4, 4)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (unique, 0x100017a6, 8) , (const, 0x13d4, 4)]
[(stack, 0xfffffffffffffad8, 4) INDIRECT (unique, 0x100017ae, 4) , (const, 0x13d4, 4)]
[(stack, 0xfffffffffffffadc, 4) INDIRECT (unique, 0x100017b2, 4) , (const, 0x13d4, 4)]
[(stack, 0xfffffffffffffae0, 4) INDIRECT (unique, 0x100017b6, 4) , (const, 0x13d4, 4)]
[(stack, 0xfffffffffffffae4, 4) INDIRECT (unique, 0x100017ba, 4) , (const, 0x13d4, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (unique, 0x100017be, 8) , (const, 0x13d4, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (unique, 0x100017c6, 8) , (const, 0x13d4, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (unique, 0x100017ce, 8) , (const, 0x13d4, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (unique, 0x100017d6, 8) , (const, 0x13d4, 4)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (unique, 0x100017de, 8) , (const, 0x13d4, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (unique, 0x100017e6, 8) , (const, 0x13d4, 4)]
[(stack, 0xfffffffffffffb20, 4) INDIRECT (unique, 0x100017ee, 4) , (const, 0x13d4, 4)]
[(stack, 0xfffffffffffffb24, 4) INDIRECT (unique, 0x100017f2, 4) , (const, 0x13d4, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (unique, 0x100017f6, 8) , (const, 0x13d4, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (unique, 0x100017fe, 8) , (const, 0x13d4, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (unique, 0x10001806, 8) , (const, 0x13d4, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (unique, 0x1000180e, 4) , (const, 0x13d4, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (unique, 0x10001812, 4) , (const, 0x13d4, 4)]
[(stack, 0xfffffffffffffb48, 8) INDIRECT (unique, 0x10001816, 8) , (const, 0x13d4, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (unique, 0x1000181e, 8) , (const, 0x13d4, 4)]
[(stack, 0xfffffffffffffb58, 4) INDIRECT (unique, 0x10001826, 4) , (const, 0x13d4, 4)]
[(stack, 0xfffffffffffffb5c, 4) INDIRECT (unique, 0x1000182a, 4) , (const, 0x13d4, 4)]
[(stack, 0xfffffffffffffb60, 2) INDIRECT (unique, 0x1000182e, 2) , (const, 0x13d4, 4)]
[(stack, 0xfffffffffffffb62, 2) INDIRECT (unique, 0x10001830, 2) , (const, 0x13d4, 4)]
[(stack, 0xfffffffffffffb64, 4) INDIRECT (unique, 0x10001832, 4) , (const, 0x13d4, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (unique, 0x10001836, 8) , (const, 0x13d4, 4)]
[(stack, 0xfffffffffffffb70, 4) INDIRECT (unique, 0x1000183e, 4) , (const, 0x13d4, 4)]
[(stack, 0xfffffffffffffb74, 4) INDIRECT (unique, 0x10001842, 4) , (const, 0x13d4, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (unique, 0x10001846, 4) , (const, 0x13d4, 4)]
[(stack, 0xfffffffffffffb88, 8) INDIRECT (unique, 0x1000184a, 8) , (const, 0x13d4, 4)]
[(stack, 0xfffffffffffffb90, 8) INDIRECT (unique, 0x10001852, 8) , (const, 0x13d4, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (unique, 0x1000185a, 8) , (const, 0x13d4, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (unique, 0x10001862, 8) , (const, 0x13d4, 4)]
[(stack, 0xfffffffffffffbb8, 8) INDIRECT (unique, 0x1000186a, 8) , (const, 0x13d4, 4)]
[(stack, 0xfffffffffffffbc0, 8) INDIRECT (unique, 0x10001872, 8) , (const, 0x13d4, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (unique, 0x1000187a, 8) , (const, 0x13d4, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10003cfa, 8) , (unique, 0xbe00, 8), (unique, 0x10003cfa, 8) CAST (unique, 0x3c80, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10003cf2, 8), (unique, 0x10003cf2, 8) CAST (unique, 0x3c80, 8), (unique, 0x3c80, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffff000, 8) , (const, 0x1, 8)]
[(register, 0x20, 8) PTRADD (register, 0x20, 8) , (unique, 0x10000b7b, 8) , (const, 0x1, 8), (unique, 0x10000b7b, 8) INT_2COMP (register, 0x8, 8), (register, 0x8, 8) INT_ZEXT (register, 0x8, 4), (register, 0x8, 4) INT_AND (unique, 0x10000b73, 4) , (const, 0xff0, 4)]
[ ---  CBRANCH (ram, 0x4169e8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x8, 8) , (const, 0x0, 8), (register, 0x8, 8) INT_ZEXT (register, 0x8, 4), (register, 0x8, 4) INT_AND (unique, 0x10000b73, 4) , (const, 0xff0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10003d0a, 8) , (unique, 0xbe00, 8), (unique, 0x10003d0a, 8) CAST (unique, 0x3880, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10003d02, 8), (unique, 0x10003d02, 8) CAST (unique, 0x3880, 8), (unique, 0x3880, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x98, 8) CAST (unique, 0x10003d1a, 8), (unique, 0x10003d1a, 8) INT_AND (unique, 0x10003d12, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x10003d12, 8) CAST (unique, 0x3800, 8), (unique, 0x3800, 8) PTRADD (register, 0x20, 8) , (unique, 0x10002108, 8) , (const, 0x1, 8), (unique, 0x10002108, 8) INT_ADD (unique, 0x10000b7b, 8) , (const, 0xf, 8)]
[(unique, 0x1000271b, 8) COPY (stack, 0xfffffffffffffb10, 8)]
[(unique, 0x100027d3, 8) COPY (unique, 0x1000253f, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10003d22, 8) , (const, 0x41728c, 8), (unique, 0x10003d22, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1440, 4)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x1440, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x1440, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x1440, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x1440, 4)]
[(stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x1440, 4), (stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x143f, 4)]
[(stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x1440, 4), (stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x143f, 4)]
[(stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x1440, 4), (stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x143f, 4)]
[(stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x1440, 4), (stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x143f, 4)]
[(stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x1440, 4), (stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x143f, 4)]
[(stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x1440, 4), (stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x143f, 4)]
[(stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x1440, 4), (stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x143f, 4)]
[(stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x1440, 4), (stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x143f, 4)]
[(stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x1440, 4), (stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x143f, 4)]
[(stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x1440, 4), (stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x143f, 4)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x1440, 4), (stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x143f, 4)]
[(stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x1440, 4), (stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x143f, 4)]
[(stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x1440, 4), (stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x143f, 4)]
[(stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x1440, 4), (stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x143f, 4)]
[(stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x1440, 4), (stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x143f, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x1440, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x143f, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x1440, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x143f, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x1440, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x143f, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x1440, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x143f, 4)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x1440, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x143f, 4)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x1440, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x143f, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x1440, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x143f, 4)]
[(stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x1440, 4), (stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x143f, 4)]
[(stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x1440, 4), (stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x143f, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x1440, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x143f, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x1440, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x143f, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x1440, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x143f, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x1440, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x143f, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x1440, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x143f, 4)]
[(stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x1440, 4), (stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x143f, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x1440, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x143f, 4)]
[(stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x1440, 4), (stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x143f, 4)]
[(stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x1440, 4), (stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x143f, 4)]
[(stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x1440, 4), (stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x143f, 4)]
[(stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x1440, 4), (stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x143f, 4)]
[(stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x1440, 4), (stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x143f, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x1440, 4), (stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x143f, 4)]
[(stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x1440, 4), (stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x143f, 4)]
[(stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x1440, 4), (stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x143f, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x1440, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x143f, 4)]
[(stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x1440, 4), (stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x143f, 4)]
[(stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x1440, 4), (stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x143f, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x1440, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x143f, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x1440, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x143f, 4)]
[(stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x1440, 4), (stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x143f, 4)]
[(stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x1440, 4), (stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x143f, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1440, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x143f, 4)]
[ ---  CBRANCH (ram, 0x414398, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10003d32, 8), (unique, 0x10003d32, 8) CALL (ram, 0x426550, 8) , (unique, 0x10003d2a, 8), (unique, 0x10003d2a, 8) CAST (unique, 0x1000258f, 8)]
[(stack, 0xfffffffffffffaf8, 4) SUBPIECE (stack, 0xfffffffffffffaf8, 8) , (const, 0x0, 8)]
[(stack, 0xfffffffffffffb00, 8) CAST (unique, 0x10003d3e, 8), (unique, 0x10003d3e, 8) INT_ADD (unique, 0x10002513, 8) , (const, 0x1, 4), (unique, 0x10002513, 8) INT_LEFT (unique, 0x1000250b, 8) , (const, 0x20, 8), (unique, 0x1000250b, 8) INT_SEXT (unique, 0x10003d3a, 4), (unique, 0x10003d3a, 4) CAST (stack, 0xfffffffffffffb04, 4), (stack, 0xfffffffffffffb04, 4) SUBPIECE (stack, 0xfffffffffffffb00, 8) , (const, 0x4, 8)]
[(stack, 0xfffffffffffffaf0, 4) SUBPIECE (stack, 0xfffffffffffffaf0, 8) , (const, 0x0, 8)]
[(unique, 0x10002723, 8) COPY (stack, 0xfffffffffffffb10, 8)]
[(unique, 0x100027db, 8) COPY (stack, 0xfffffffffffffae8, 8)]
[ ---  BRANCH (ram, 0x4169f4, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10003d66, 8) , (const, 0x416a14, 8), (unique, 0x10003d66, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8), (register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1430, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x1430, 4), (ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x1430, 4), (ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x1430, 4), (ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x1430, 4), (ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[(stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x1430, 4), (stack, 0xfffffffffffffaa0, 4) MULTIEQUAL (unique, 0x10001779, 4) , (stack, 0xfffffffffffffaa0, 4)]
[(stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x1430, 4), (stack, 0xfffffffffffffaa4, 4) MULTIEQUAL (unique, 0x1000177d, 4) , (stack, 0xfffffffffffffaa4, 4)]
[(stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x1430, 4), (stack, 0xfffffffffffffaa8, 4) MULTIEQUAL (unique, 0x10001781, 4) , (stack, 0xfffffffffffffaa8, 4)]
[(stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x1430, 4), (stack, 0xfffffffffffffaac, 4) MULTIEQUAL (unique, 0x10001785, 4) , (stack, 0xfffffffffffffaac, 4)]
[(stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x1430, 4), (stack, 0xfffffffffffffab3, 1) MULTIEQUAL (unique, 0x10001789, 1) , (stack, 0xfffffffffffffab3, 1)]
[(stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x1430, 4), (stack, 0xfffffffffffffab4, 4) MULTIEQUAL (unique, 0x1000178a, 4) , (stack, 0xfffffffffffffab4, 4)]
[(stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x1430, 4), (stack, 0xfffffffffffffab8, 4) MULTIEQUAL (unique, 0x1000178e, 4) , (stack, 0xfffffffffffffab8, 4)]
[(stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x1430, 4), (stack, 0xfffffffffffffabc, 4) MULTIEQUAL (unique, 0x10001792, 4) , (stack, 0xfffffffffffffabc, 4)]
[(stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x1430, 4), (stack, 0xfffffffffffffac0, 8) MULTIEQUAL (unique, 0x10001796, 8) , (stack, 0xfffffffffffffac0, 8)]
[(stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x1430, 4), (stack, 0xfffffffffffffac8, 8) MULTIEQUAL (unique, 0x1000179e, 8) , (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x1430, 4), (stack, 0xfffffffffffffad0, 8) MULTIEQUAL (unique, 0x100017a6, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x1430, 4), (stack, 0xfffffffffffffad8, 4) MULTIEQUAL (unique, 0x100017ae, 4) , (stack, 0xfffffffffffffad8, 4)]
[(stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x1430, 4), (stack, 0xfffffffffffffadc, 4) MULTIEQUAL (unique, 0x100017b2, 4) , (stack, 0xfffffffffffffadc, 4)]
[(stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x1430, 4), (stack, 0xfffffffffffffae0, 4) MULTIEQUAL (unique, 0x100017b6, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x1430, 4), (stack, 0xfffffffffffffae4, 4) MULTIEQUAL (unique, 0x100017ba, 4) , (stack, 0xfffffffffffffae4, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x1430, 4), (stack, 0xfffffffffffffae8, 8) MULTIEQUAL (unique, 0x100017be, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x1430, 4), (stack, 0xfffffffffffffb00, 8) MULTIEQUAL (unique, 0x100017d6, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x1430, 4), (stack, 0xfffffffffffffb08, 8) MULTIEQUAL (unique, 0x100017de, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x1430, 4), (stack, 0xfffffffffffffb10, 8) COPY (register, 0x98, 8), (register, 0x98, 8) MULTIEQUAL (register, 0x98, 8) , (register, 0x0, 8)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x1430, 4), (stack, 0xfffffffffffffb18, 8) MULTIEQUAL (unique, 0x100017e6, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x1430, 4), (stack, 0xfffffffffffffb20, 4) MULTIEQUAL (unique, 0x100017ee, 4) , (stack, 0xfffffffffffffb20, 4)]
[(stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x1430, 4), (stack, 0xfffffffffffffb24, 4) MULTIEQUAL (unique, 0x100017f2, 4) , (stack, 0xfffffffffffffb24, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x1430, 4), (stack, 0xfffffffffffffb28, 8) MULTIEQUAL (unique, 0x100017f6, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x1430, 4), (stack, 0xfffffffffffffb30, 8) MULTIEQUAL (unique, 0x100017fe, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x1430, 4), (stack, 0xfffffffffffffb38, 8) MULTIEQUAL (unique, 0x10001806, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x1430, 4), (stack, 0xfffffffffffffb40, 4) MULTIEQUAL (unique, 0x1000180e, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x1430, 4), (stack, 0xfffffffffffffb44, 4) MULTIEQUAL (unique, 0x10001812, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x1430, 4), (stack, 0xfffffffffffffb48, 8) MULTIEQUAL (unique, 0x10001816, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x1430, 4), (stack, 0xfffffffffffffb50, 8) MULTIEQUAL (unique, 0x1000181e, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x1430, 4), (stack, 0xfffffffffffffb58, 4) MULTIEQUAL (unique, 0x10001826, 4) , (stack, 0xfffffffffffffb58, 4)]
[(stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x1430, 4), (stack, 0xfffffffffffffb5c, 4) MULTIEQUAL (unique, 0x1000182a, 4) , (stack, 0xfffffffffffffb5c, 4)]
[(stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x1430, 4), (stack, 0xfffffffffffffb60, 2) MULTIEQUAL (unique, 0x1000182e, 2) , (stack, 0xfffffffffffffb60, 2)]
[(stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x1430, 4), (stack, 0xfffffffffffffb62, 2) MULTIEQUAL (unique, 0x10001830, 2) , (stack, 0xfffffffffffffb62, 2)]
[(stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x1430, 4), (stack, 0xfffffffffffffb64, 4) MULTIEQUAL (unique, 0x10001832, 4) , (stack, 0xfffffffffffffb64, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x1430, 4), (stack, 0xfffffffffffffb68, 8) MULTIEQUAL (unique, 0x10001836, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x1430, 4), (stack, 0xfffffffffffffb70, 4) MULTIEQUAL (unique, 0x1000183e, 4) , (stack, 0xfffffffffffffb70, 4)]
[(stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x1430, 4), (stack, 0xfffffffffffffb74, 4) MULTIEQUAL (unique, 0x10001842, 4) , (stack, 0xfffffffffffffb74, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x1430, 4), (stack, 0xfffffffffffffb78, 4) MULTIEQUAL (unique, 0x10001846, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x1430, 4), (stack, 0xfffffffffffffb88, 8) MULTIEQUAL (unique, 0x1000184a, 8) , (stack, 0xfffffffffffffb88, 8)]
[(stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x1430, 4), (stack, 0xfffffffffffffb90, 8) MULTIEQUAL (unique, 0x10001852, 8) , (stack, 0xfffffffffffffb90, 8)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x1430, 4), (stack, 0xfffffffffffffba8, 8) MULTIEQUAL (unique, 0x1000185a, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x1430, 4), (stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (unique, 0x10001862, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x1430, 4), (stack, 0xfffffffffffffbb8, 8) MULTIEQUAL (unique, 0x1000186a, 8) , (stack, 0xfffffffffffffbb8, 8)]
[(stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x1430, 4), (stack, 0xfffffffffffffbc0, 8) MULTIEQUAL (unique, 0x10001872, 8) , (stack, 0xfffffffffffffbc0, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1430, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (unique, 0x1000187a, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CALL (ram, 0x453930, 8) , (unique, 0x10003d6e, 8) , (unique, 0x10003d76, 8) , (unique, 0x10003d7e, 8) , (unique, 0x3200, 8), (unique, 0x10003d7e, 8) CAST (register, 0x10, 8), (unique, 0x10003d76, 8) CAST (register, 0x30, 8), (unique, 0x10003d6e, 8) CAST (register, 0x98, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0x1000271b, 8) , (unique, 0x10002723, 8), (register, 0x30, 8) MULTIEQUAL (unique, 0x100027d3, 8) , (unique, 0x100027db, 8), (register, 0x98, 8) MULTIEQUAL (register, 0x98, 8) , (register, 0x0, 8)]
[(stack, 0xfffffffffffffaf0, 4) SUBPIECE (stack, 0xfffffffffffffaf0, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x1430, 4), (stack, 0xfffffffffffffaf0, 8) CAST (unique, 0x10003d4e, 8), (unique, 0x10003d4e, 8) INT_OR (unique, 0x10001385, 8) , (unique, 0x1000138d, 8), (unique, 0x1000138d, 8) INT_ZEXT (register, 0x88, 4), (unique, 0x10001385, 8) INT_AND (unique, 0x10003d46, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10003d46, 8) CAST (stack, 0xfffffffffffffaf0, 8), (register, 0x88, 4) MULTIEQUAL (stack, 0xfffffffffffffaf0, 4) , (stack, 0xfffffffffffffaf0, 4), (stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (unique, 0x100017c6, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffaf8, 4) SUBPIECE (stack, 0xfffffffffffffaf8, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x1430, 4), (stack, 0xfffffffffffffaf8, 8) CAST (unique, 0x10003d5e, 8), (unique, 0x10003d5e, 8) INT_OR (unique, 0x10001395, 8) , (unique, 0x1000139d, 8), (unique, 0x1000139d, 8) INT_ZEXT (register, 0x90, 4), (unique, 0x10001395, 8) INT_AND (unique, 0x10003d56, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10003d56, 8) CAST (stack, 0xfffffffffffffaf8, 8), (register, 0x90, 4) MULTIEQUAL (stack, 0xfffffffffffffaf8, 4) , (stack, 0xfffffffffffffaf8, 4), (stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (unique, 0x100017ce, 8) , (stack, 0xfffffffffffffaf8, 8)]
[ ---  BRANCH (ram, 0x416172, 1)]
[(register, 0x18, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffba8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10003dba, 8) , (const, 0x4160a2, 8), (unique, 0x10003dba, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8), (register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x121c, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x121c, 4), (ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x121c, 4), (ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x121c, 4), (ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x121c, 4), (ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[(stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x121c, 4), (stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x121b, 4), (stack, 0xfffffffffffffaa0, 4) MULTIEQUAL (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4)]
[(stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x121c, 4), (stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x121b, 4), (stack, 0xfffffffffffffaa4, 4) MULTIEQUAL (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4)]
[(stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x121c, 4), (stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x121b, 4), (stack, 0xfffffffffffffaa8, 4) MULTIEQUAL (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4)]
[(stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x121c, 4), (stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x121b, 4), (stack, 0xfffffffffffffaac, 4) MULTIEQUAL (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4)]
[(stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x121c, 4), (stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x121b, 4), (stack, 0xfffffffffffffab3, 1) MULTIEQUAL (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1)]
[(stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x121c, 4), (stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x121b, 4), (stack, 0xfffffffffffffab4, 4) MULTIEQUAL (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4)]
[(stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x121c, 4), (stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x121b, 4), (stack, 0xfffffffffffffab8, 4) MULTIEQUAL (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4)]
[(stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x121c, 4), (stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x121b, 4), (stack, 0xfffffffffffffabc, 4) MULTIEQUAL (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4)]
[(stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x121c, 4), (stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x121b, 4), (stack, 0xfffffffffffffac0, 8) MULTIEQUAL (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8)]
[(stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x121c, 4), (stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x121b, 4), (stack, 0xfffffffffffffac8, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x121c, 4), (stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x121b, 4), (stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x121c, 4), (stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x121b, 4), (stack, 0xfffffffffffffad8, 4) MULTIEQUAL (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4)]
[(stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x121c, 4), (stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x121b, 4), (stack, 0xfffffffffffffadc, 4) MULTIEQUAL (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4)]
[(stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x121c, 4), (stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x121b, 4), (stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x121c, 4), (stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x121b, 4), (stack, 0xfffffffffffffae4, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x121c, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x121b, 4), (stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x121c, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x121b, 4), (stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x121c, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x121b, 4), (stack, 0xfffffffffffffaf8, 8) CAST (unique, 0x10003db2, 8), (unique, 0x10003db2, 8) INT_OR (unique, 0x1000121b, 8) , (unique, 0x10001223, 8), (unique, 0x10001223, 8) INT_ZEXT (register, 0x80, 4), (unique, 0x1000121b, 8) INT_AND (unique, 0x10003daa, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10003daa, 8) CAST (stack, 0xfffffffffffffaf8, 8), (stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8), (register, 0x80, 4) MULTIEQUAL (register, 0x80, 4) , (register, 0x80, 4)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x121c, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x121b, 4), (stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x121c, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x121b, 4), (stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x121c, 4), (stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x121b, 4), (stack, 0xfffffffffffffb20, 4) MULTIEQUAL (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4)]
[(stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x121c, 4), (stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x121b, 4), (stack, 0xfffffffffffffb24, 4) MULTIEQUAL (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x121c, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x121b, 4), (stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x121c, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x121b, 4), (stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x121c, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x121b, 4), (stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x121c, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x121b, 4), (stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x121c, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x121b, 4), (stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x121c, 4), (stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x121b, 4), (stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x121c, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x121b, 4), (stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x121c, 4), (stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x121b, 4), (stack, 0xfffffffffffffb58, 4) MULTIEQUAL (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4)]
[(stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x121c, 4), (stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x121b, 4), (stack, 0xfffffffffffffb5c, 4) MULTIEQUAL (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4)]
[(stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x121c, 4), (stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x121b, 4), (stack, 0xfffffffffffffb60, 2) MULTIEQUAL (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2)]
[(stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x121c, 4), (stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x121b, 4), (stack, 0xfffffffffffffb62, 2) MULTIEQUAL (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2)]
[(stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x121c, 4), (stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x121b, 4), (stack, 0xfffffffffffffb64, 4) MULTIEQUAL (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x121c, 4), (stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x121b, 4), (stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x121c, 4), (stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x121b, 4), (stack, 0xfffffffffffffb70, 4) MULTIEQUAL (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4)]
[(stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x121c, 4), (stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x121b, 4), (stack, 0xfffffffffffffb74, 4) MULTIEQUAL (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x121c, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x121b, 4), (stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x121c, 4), (stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x121b, 4), (stack, 0xfffffffffffffb88, 8) MULTIEQUAL (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8)]
[(stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x121c, 4), (stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x121b, 4), (stack, 0xfffffffffffffb90, 8) MULTIEQUAL (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x121c, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x121b, 4), (stack, 0xfffffffffffffba8, 8) COPY (const, 0x0, 8)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x121c, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x121b, 4), (stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x121c, 4), (stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x121b, 4), (stack, 0xfffffffffffffbb8, 8) MULTIEQUAL (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8)]
[(stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x121c, 4), (stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x121b, 4), (stack, 0xfffffffffffffbc0, 8) MULTIEQUAL (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x121c, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x121b, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffb10, 4) SUBPIECE (stack, 0xfffffffffffffb10, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x121c, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x121b, 4), (stack, 0xfffffffffffffb10, 8) CAST (unique, 0x10003da2, 8), (unique, 0x10003da2, 8) INT_OR (unique, 0x1000120b, 8) , (unique, 0x10001213, 8), (unique, 0x10001213, 8) INT_ZEXT (register, 0x90, 4), (unique, 0x1000120b, 8) INT_AND (unique, 0x10003d9a, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10003d9a, 8) CAST (stack, 0xfffffffffffffb10, 8), (register, 0x90, 4) MULTIEQUAL (register, 0x90, 4) , (register, 0x90, 4), (stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb00, 4) SUBPIECE (stack, 0xfffffffffffffb00, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x121c, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x121b, 4), (stack, 0xfffffffffffffb00, 8) CAST (unique, 0x10003d92, 8), (unique, 0x10003d92, 8) INT_OR (unique, 0x100011fb, 8) , (unique, 0x10001203, 8), (unique, 0x10001203, 8) INT_ZEXT (register, 0x88, 4), (unique, 0x100011fb, 8) INT_AND (unique, 0x10003d8a, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10003d8a, 8) CAST (stack, 0xfffffffffffffb00, 8), (stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8), (register, 0x88, 4) MULTIEQUAL (register, 0x88, 4) , (register, 0x88, 4)]
[ ---  CBRANCH (ram, 0x4160c8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x421340, 8) , (register, 0xb8, 8), (register, 0xb8, 8) INT_SEXT (unique, 0x10003d86, 4), (unique, 0x10003d86, 4) CAST (register, 0x80, 4), (register, 0x80, 4) MULTIEQUAL (register, 0x80, 4) , (register, 0x80, 4)]
[ ---  CBRANCH (ram, 0x41717d, 1) , (unique, 0xd080, 1), (unique, 0xd080, 1) INT_SLESS (const, 0x1000, 4) , (unique, 0x10003dc2, 4), (unique, 0x10003dc2, 4) CAST (stack, 0xfffffffffffffaf8, 4), (stack, 0xfffffffffffffaf8, 4) SUBPIECE (stack, 0xfffffffffffffaf8, 8) , (const, 0x0, 8)]
[(register, 0x30, 8) PTRADD (register, 0x20, 8) , (unique, 0x10000968, 8) , (const, 0x1, 8), (unique, 0x10000968, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (unique, 0x3100, 8) , (const, 0xfffffffffffff000, 8), (unique, 0x3100, 8) INT_ADD (register, 0xb8, 8) , (const, 0x17, 8)]
[(unique, 0x10000988, 4) SUBPIECE (unique, 0x3100, 8) , (const, 0x0, 4), (unique, 0x3100, 8) INT_ADD (register, 0xb8, 8) , (const, 0x17, 8)]
[(unique, 0x10002e47, 8) COPY (register, 0x20, 8)]
[(unique, 0x1000189b, 4) MULTIEQUAL (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4)]
[(unique, 0x1000189f, 4) MULTIEQUAL (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4)]
[(unique, 0x100018a3, 4) MULTIEQUAL (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4)]
[(unique, 0x100018a7, 4) MULTIEQUAL (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4)]
[(unique, 0x100018ab, 1) MULTIEQUAL (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1)]
[(unique, 0x100018ac, 4) MULTIEQUAL (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4)]
[(unique, 0x100018b0, 4) MULTIEQUAL (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4)]
[(unique, 0x100018b4, 4) MULTIEQUAL (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4)]
[(unique, 0x100018b8, 8) MULTIEQUAL (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8)]
[(unique, 0x100018c0, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(unique, 0x100018c8, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(unique, 0x100018d0, 4) MULTIEQUAL (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4)]
[(unique, 0x100018d4, 4) MULTIEQUAL (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4)]
[(unique, 0x100018d8, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(unique, 0x100018dc, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[(unique, 0x100018e0, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(unique, 0x100018e8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(unique, 0x100018f0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(unique, 0x100018f8, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(unique, 0x10001900, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(unique, 0x10001908, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(unique, 0x10001910, 4) MULTIEQUAL (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4)]
[(unique, 0x10001914, 4) MULTIEQUAL (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4)]
[(unique, 0x10001918, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(unique, 0x10001920, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(unique, 0x10001928, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(unique, 0x10001930, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(unique, 0x10001934, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(unique, 0x10001938, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(unique, 0x10001940, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(unique, 0x10001948, 4) MULTIEQUAL (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4)]
[(unique, 0x1000194c, 4) MULTIEQUAL (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4)]
[(unique, 0x10001950, 2) MULTIEQUAL (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2)]
[(unique, 0x10001952, 2) MULTIEQUAL (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2)]
[(unique, 0x10001954, 4) MULTIEQUAL (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4)]
[(unique, 0x10001958, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(unique, 0x10001960, 4) MULTIEQUAL (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4)]
[(unique, 0x10001964, 4) MULTIEQUAL (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4)]
[(unique, 0x10001968, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(unique, 0x1000196c, 8) MULTIEQUAL (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8)]
[(unique, 0x10001974, 8) MULTIEQUAL (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8)]
[(unique, 0x1000197c, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(unique, 0x10001984, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(unique, 0x1000198c, 8) MULTIEQUAL (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8)]
[(unique, 0x10001994, 8) MULTIEQUAL (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8)]
[(unique, 0x1000199c, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CBRANCH (ram, 0x4160fc, 1) , (unique, 0x10001882, 1), (unique, 0x10001882, 1) INT_NOTEQUAL (register, 0x20, 8) , (register, 0x30, 8), (register, 0x20, 8) MULTIEQUAL (unique, 0x10002e47, 8) , (register, 0x20, 8)]
[(stack, 0xfffffffffffffaa0, 4) INDIRECT (unique, 0x1000189b, 4) , (const, 0x1279, 4)]
[(stack, 0xfffffffffffffaa4, 4) INDIRECT (unique, 0x1000189f, 4) , (const, 0x1279, 4)]
[(stack, 0xfffffffffffffaa8, 4) INDIRECT (unique, 0x100018a3, 4) , (const, 0x1279, 4)]
[(stack, 0xfffffffffffffaac, 4) INDIRECT (unique, 0x100018a7, 4) , (const, 0x1279, 4)]
[(stack, 0xfffffffffffffab3, 1) INDIRECT (unique, 0x100018ab, 1) , (const, 0x1279, 4)]
[(stack, 0xfffffffffffffab4, 4) INDIRECT (unique, 0x100018ac, 4) , (const, 0x1279, 4)]
[(stack, 0xfffffffffffffab8, 4) INDIRECT (unique, 0x100018b0, 4) , (const, 0x1279, 4)]
[(stack, 0xfffffffffffffabc, 4) INDIRECT (unique, 0x100018b4, 4) , (const, 0x1279, 4)]
[(stack, 0xfffffffffffffac0, 8) INDIRECT (unique, 0x100018b8, 8) , (const, 0x1279, 4)]
[(stack, 0xfffffffffffffac8, 8) INDIRECT (unique, 0x100018c0, 8) , (const, 0x1279, 4)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (unique, 0x100018c8, 8) , (const, 0x1279, 4)]
[(stack, 0xfffffffffffffad8, 4) INDIRECT (unique, 0x100018d0, 4) , (const, 0x1279, 4)]
[(stack, 0xfffffffffffffadc, 4) INDIRECT (unique, 0x100018d4, 4) , (const, 0x1279, 4)]
[(stack, 0xfffffffffffffae0, 4) INDIRECT (unique, 0x100018d8, 4) , (const, 0x1279, 4)]
[(stack, 0xfffffffffffffae4, 4) INDIRECT (unique, 0x100018dc, 4) , (const, 0x1279, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (unique, 0x100018e0, 8) , (const, 0x1279, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (unique, 0x100018e8, 8) , (const, 0x1279, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (unique, 0x100018f0, 8) , (const, 0x1279, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (unique, 0x100018f8, 8) , (const, 0x1279, 4)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (unique, 0x10001900, 8) , (const, 0x1279, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (unique, 0x10001908, 8) , (const, 0x1279, 4)]
[(stack, 0xfffffffffffffb20, 4) INDIRECT (unique, 0x10001910, 4) , (const, 0x1279, 4)]
[(stack, 0xfffffffffffffb24, 4) INDIRECT (unique, 0x10001914, 4) , (const, 0x1279, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (unique, 0x10001918, 8) , (const, 0x1279, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (unique, 0x10001920, 8) , (const, 0x1279, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (unique, 0x10001928, 8) , (const, 0x1279, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (unique, 0x10001930, 4) , (const, 0x1279, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (unique, 0x10001934, 4) , (const, 0x1279, 4)]
[(stack, 0xfffffffffffffb48, 8) INDIRECT (unique, 0x10001938, 8) , (const, 0x1279, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (unique, 0x10001940, 8) , (const, 0x1279, 4)]
[(stack, 0xfffffffffffffb58, 4) INDIRECT (unique, 0x10001948, 4) , (const, 0x1279, 4)]
[(stack, 0xfffffffffffffb5c, 4) INDIRECT (unique, 0x1000194c, 4) , (const, 0x1279, 4)]
[(stack, 0xfffffffffffffb60, 2) INDIRECT (unique, 0x10001950, 2) , (const, 0x1279, 4)]
[(stack, 0xfffffffffffffb62, 2) INDIRECT (unique, 0x10001952, 2) , (const, 0x1279, 4)]
[(stack, 0xfffffffffffffb64, 4) INDIRECT (unique, 0x10001954, 4) , (const, 0x1279, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (unique, 0x10001958, 8) , (const, 0x1279, 4)]
[(stack, 0xfffffffffffffb70, 4) INDIRECT (unique, 0x10001960, 4) , (const, 0x1279, 4)]
[(stack, 0xfffffffffffffb74, 4) INDIRECT (unique, 0x10001964, 4) , (const, 0x1279, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (unique, 0x10001968, 4) , (const, 0x1279, 4)]
[(stack, 0xfffffffffffffb88, 8) INDIRECT (unique, 0x1000196c, 8) , (const, 0x1279, 4)]
[(stack, 0xfffffffffffffb90, 8) INDIRECT (unique, 0x10001974, 8) , (const, 0x1279, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (unique, 0x1000197c, 8) , (const, 0x1279, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (unique, 0x10001984, 8) , (const, 0x1279, 4)]
[(stack, 0xfffffffffffffbb8, 8) INDIRECT (unique, 0x1000198c, 8) , (const, 0x1279, 4)]
[(stack, 0xfffffffffffffbc0, 8) INDIRECT (unique, 0x10001994, 8) , (const, 0x1279, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (unique, 0x1000199c, 8) , (const, 0x1279, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10003dce, 8) , (unique, 0xbe00, 8), (unique, 0x10003dce, 8) CAST (unique, 0x3c80, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10003dc6, 8), (unique, 0x10003dc6, 8) CAST (unique, 0x3c80, 8), (unique, 0x3c80, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffff000, 8) , (const, 0x1, 8)]
[(register, 0x20, 8) PTRADD (register, 0x20, 8) , (unique, 0x10000990, 8) , (const, 0x1, 8), (unique, 0x10000990, 8) INT_2COMP (register, 0x10, 8), (register, 0x10, 8) INT_ZEXT (register, 0x10, 4), (register, 0x10, 4) INT_AND (unique, 0x10000988, 4) , (const, 0xff0, 4)]
[ ---  CBRANCH (ram, 0x416110, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x10, 8) , (const, 0x0, 8), (register, 0x10, 8) INT_ZEXT (register, 0x10, 4), (register, 0x10, 4) INT_AND (unique, 0x10000988, 4) , (const, 0xff0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10003dde, 8) , (unique, 0xbe00, 8), (unique, 0x10003dde, 8) CAST (unique, 0x3880, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10003dd6, 8), (unique, 0x10003dd6, 8) CAST (unique, 0x3880, 8), (unique, 0x3880, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(stack, 0xfffffffffffffb00, 8) CAST (unique, 0x10003dee, 8), (unique, 0x10003dee, 8) INT_AND (unique, 0x10003de6, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10003de6, 8) CAST (unique, 0x100018f8, 8)]
[(register, 0x98, 8) CAST (unique, 0x10003dfe, 8), (unique, 0x10003dfe, 8) INT_AND (unique, 0x10003df6, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x10003df6, 8) CAST (unique, 0x3800, 8), (unique, 0x3800, 8) PTRADD (register, 0x20, 8) , (unique, 0x10001fb8, 8) , (const, 0x1, 8), (unique, 0x10001fb8, 8) INT_ADD (unique, 0x10000990, 8) , (const, 0xf, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10003e1e, 8) , (const, 0x41718c, 8), (unique, 0x10003e1e, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x12fb, 4)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x12fb, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x12fb, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x12fb, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x12fb, 4)]
[(stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x12fb, 4), (stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x12fa, 4)]
[(stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x12fb, 4), (stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x12fa, 4)]
[(stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x12fb, 4), (stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x12fa, 4)]
[(stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x12fb, 4), (stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x12fa, 4)]
[(stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x12fb, 4), (stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x12fa, 4)]
[(stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x12fb, 4), (stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x12fa, 4)]
[(stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x12fb, 4), (stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x12fa, 4)]
[(stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x12fb, 4), (stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x12fa, 4)]
[(stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x12fb, 4), (stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x12fa, 4)]
[(stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x12fb, 4), (stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x12fa, 4)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x12fb, 4), (stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x12fa, 4)]
[(stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x12fb, 4), (stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x12fa, 4)]
[(stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x12fb, 4), (stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x12fa, 4)]
[(stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x12fb, 4), (stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x12fa, 4)]
[(stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x12fb, 4), (stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x12fa, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x12fb, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x12fa, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x12fb, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x12fa, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x12fb, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x12fa, 4), (stack, 0xfffffffffffffaf8, 8) CAST (unique, 0x10003e16, 8), (unique, 0x10003e16, 8) INT_OR (unique, 0x10001591, 8) , (unique, 0x10001599, 8), (unique, 0x10001599, 8) INT_AND (unique, 0x10003e0e, 8) , (const, 0xffffffff, 8), (unique, 0x10003e0e, 8) CAST (stack, 0xfffffffffffffb00, 8), (unique, 0x10001591, 8) INT_AND (unique, 0x10003e06, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10003e06, 8) CAST (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x12fb, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x12fa, 4)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x12fb, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x12fa, 4)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x12fb, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x12fa, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x12fb, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x12fa, 4)]
[(stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x12fb, 4), (stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x12fa, 4)]
[(stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x12fb, 4), (stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x12fa, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x12fb, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x12fa, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x12fb, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x12fa, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x12fb, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x12fa, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x12fb, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x12fa, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x12fb, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x12fa, 4)]
[(stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x12fb, 4), (stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x12fa, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x12fb, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x12fa, 4)]
[(stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x12fb, 4), (stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x12fa, 4)]
[(stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x12fb, 4), (stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x12fa, 4)]
[(stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x12fb, 4), (stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x12fa, 4)]
[(stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x12fb, 4), (stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x12fa, 4)]
[(stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x12fb, 4), (stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x12fa, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x12fb, 4), (stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x12fa, 4)]
[(stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x12fb, 4), (stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x12fa, 4)]
[(stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x12fb, 4), (stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x12fa, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x12fb, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x12fa, 4)]
[(stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x12fb, 4), (stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x12fa, 4)]
[(stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x12fb, 4), (stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x12fa, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x12fb, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x12fa, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x12fb, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x12fa, 4)]
[(stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x12fb, 4), (stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x12fa, 4)]
[(stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x12fb, 4), (stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x12fa, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x12fb, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x12fa, 4)]
[ ---  CBRANCH (ram, 0x414398, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10003e26, 8), (unique, 0x10003e26, 8) CALL (ram, 0x426550, 8) , (register, 0xb8, 8)]
[(stack, 0xfffffffffffffb10, 4) SUBPIECE (stack, 0xfffffffffffffb10, 8) , (const, 0x0, 8)]
[(stack, 0xfffffffffffffb00, 8) CAST (unique, 0x10003e32, 8), (unique, 0x10003e32, 8) INT_ADD (unique, 0x10002503, 8) , (const, 0x1, 4), (unique, 0x10002503, 8) INT_LEFT (unique, 0x100024fb, 8) , (const, 0x20, 8), (unique, 0x100024fb, 8) INT_SEXT (unique, 0x10003e2e, 4), (unique, 0x10003e2e, 4) CAST (stack, 0xfffffffffffffb04, 4), (stack, 0xfffffffffffffb04, 4) SUBPIECE (stack, 0xfffffffffffffb00, 8) , (const, 0x4, 8)]
[(unique, 0x10002997, 4) COPY (stack, 0xfffffffffffffaf8, 4), (stack, 0xfffffffffffffaf8, 4) SUBPIECE (stack, 0xfffffffffffffaf8, 8) , (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x416126, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10003e5a, 8) , (const, 0x416150, 8), (unique, 0x10003e5a, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8), (register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x12db, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x12db, 4), (ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x12db, 4), (ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x12db, 4), (ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x12db, 4), (ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[(stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x12db, 4), (stack, 0xfffffffffffffaa0, 4) MULTIEQUAL (unique, 0x1000189b, 4) , (stack, 0xfffffffffffffaa0, 4)]
[(stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x12db, 4), (stack, 0xfffffffffffffaa4, 4) MULTIEQUAL (unique, 0x1000189f, 4) , (stack, 0xfffffffffffffaa4, 4)]
[(stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x12db, 4), (stack, 0xfffffffffffffaa8, 4) MULTIEQUAL (unique, 0x100018a3, 4) , (stack, 0xfffffffffffffaa8, 4)]
[(stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x12db, 4), (stack, 0xfffffffffffffaac, 4) MULTIEQUAL (unique, 0x100018a7, 4) , (stack, 0xfffffffffffffaac, 4)]
[(stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x12db, 4), (stack, 0xfffffffffffffab3, 1) MULTIEQUAL (unique, 0x100018ab, 1) , (stack, 0xfffffffffffffab3, 1)]
[(stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x12db, 4), (stack, 0xfffffffffffffab4, 4) MULTIEQUAL (unique, 0x100018ac, 4) , (stack, 0xfffffffffffffab4, 4)]
[(stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x12db, 4), (stack, 0xfffffffffffffab8, 4) MULTIEQUAL (unique, 0x100018b0, 4) , (stack, 0xfffffffffffffab8, 4)]
[(stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x12db, 4), (stack, 0xfffffffffffffabc, 4) MULTIEQUAL (unique, 0x100018b4, 4) , (stack, 0xfffffffffffffabc, 4)]
[(stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x12db, 4), (stack, 0xfffffffffffffac0, 8) MULTIEQUAL (unique, 0x100018b8, 8) , (stack, 0xfffffffffffffac0, 8)]
[(stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x12db, 4), (stack, 0xfffffffffffffac8, 8) MULTIEQUAL (unique, 0x100018c0, 8) , (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x12db, 4), (stack, 0xfffffffffffffad0, 8) MULTIEQUAL (unique, 0x100018c8, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x12db, 4), (stack, 0xfffffffffffffad8, 4) MULTIEQUAL (unique, 0x100018d0, 4) , (stack, 0xfffffffffffffad8, 4)]
[(stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x12db, 4), (stack, 0xfffffffffffffadc, 4) MULTIEQUAL (unique, 0x100018d4, 4) , (stack, 0xfffffffffffffadc, 4)]
[(stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x12db, 4), (stack, 0xfffffffffffffae0, 4) MULTIEQUAL (unique, 0x100018d8, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x12db, 4), (stack, 0xfffffffffffffae4, 4) MULTIEQUAL (unique, 0x100018dc, 4) , (stack, 0xfffffffffffffae4, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x12db, 4), (stack, 0xfffffffffffffae8, 8) MULTIEQUAL (unique, 0x100018e0, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x12db, 4), (stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x12db, 4), (stack, 0xfffffffffffffb08, 8) MULTIEQUAL (unique, 0x10001900, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x12db, 4), (stack, 0xfffffffffffffb10, 8) COPY (register, 0x98, 8), (register, 0x98, 8) MULTIEQUAL (register, 0x98, 8) , (register, 0x0, 8)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x12db, 4), (stack, 0xfffffffffffffb18, 8) MULTIEQUAL (unique, 0x10001908, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x12db, 4), (stack, 0xfffffffffffffb20, 4) MULTIEQUAL (unique, 0x10001910, 4) , (stack, 0xfffffffffffffb20, 4)]
[(stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x12db, 4), (stack, 0xfffffffffffffb24, 4) MULTIEQUAL (unique, 0x10001914, 4) , (stack, 0xfffffffffffffb24, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x12db, 4), (stack, 0xfffffffffffffb28, 8) MULTIEQUAL (unique, 0x10001918, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x12db, 4), (stack, 0xfffffffffffffb30, 8) MULTIEQUAL (unique, 0x10001920, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x12db, 4), (stack, 0xfffffffffffffb38, 8) MULTIEQUAL (unique, 0x10001928, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x12db, 4), (stack, 0xfffffffffffffb40, 4) MULTIEQUAL (unique, 0x10001930, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x12db, 4), (stack, 0xfffffffffffffb44, 4) MULTIEQUAL (unique, 0x10001934, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x12db, 4), (stack, 0xfffffffffffffb48, 8) MULTIEQUAL (unique, 0x10001938, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x12db, 4), (stack, 0xfffffffffffffb50, 8) MULTIEQUAL (unique, 0x10001940, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x12db, 4), (stack, 0xfffffffffffffb58, 4) MULTIEQUAL (unique, 0x10001948, 4) , (stack, 0xfffffffffffffb58, 4)]
[(stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x12db, 4), (stack, 0xfffffffffffffb5c, 4) MULTIEQUAL (unique, 0x1000194c, 4) , (stack, 0xfffffffffffffb5c, 4)]
[(stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x12db, 4), (stack, 0xfffffffffffffb60, 2) MULTIEQUAL (unique, 0x10001950, 2) , (stack, 0xfffffffffffffb60, 2)]
[(stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x12db, 4), (stack, 0xfffffffffffffb62, 2) MULTIEQUAL (unique, 0x10001952, 2) , (stack, 0xfffffffffffffb62, 2)]
[(stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x12db, 4), (stack, 0xfffffffffffffb64, 4) MULTIEQUAL (unique, 0x10001954, 4) , (stack, 0xfffffffffffffb64, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x12db, 4), (stack, 0xfffffffffffffb68, 8) MULTIEQUAL (unique, 0x10001958, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x12db, 4), (stack, 0xfffffffffffffb70, 4) MULTIEQUAL (unique, 0x10001960, 4) , (stack, 0xfffffffffffffb70, 4)]
[(stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x12db, 4), (stack, 0xfffffffffffffb74, 4) MULTIEQUAL (unique, 0x10001964, 4) , (stack, 0xfffffffffffffb74, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x12db, 4), (stack, 0xfffffffffffffb78, 4) MULTIEQUAL (unique, 0x10001968, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x12db, 4), (stack, 0xfffffffffffffb88, 8) MULTIEQUAL (unique, 0x1000196c, 8) , (stack, 0xfffffffffffffb88, 8)]
[(stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x12db, 4), (stack, 0xfffffffffffffb90, 8) MULTIEQUAL (unique, 0x10001974, 8) , (stack, 0xfffffffffffffb90, 8)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x12db, 4), (stack, 0xfffffffffffffba8, 8) MULTIEQUAL (unique, 0x1000197c, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x12db, 4), (stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (unique, 0x10001984, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x12db, 4), (stack, 0xfffffffffffffbb8, 8) MULTIEQUAL (unique, 0x1000198c, 8) , (stack, 0xfffffffffffffbb8, 8)]
[(stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x12db, 4), (stack, 0xfffffffffffffbc0, 8) MULTIEQUAL (unique, 0x10001994, 8) , (stack, 0xfffffffffffffbc0, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x12db, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (unique, 0x1000199c, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffaf8, 4) SUBPIECE (stack, 0xfffffffffffffaf8, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x12db, 4), (stack, 0xfffffffffffffaf8, 8) CAST (unique, 0x10003e52, 8), (unique, 0x10003e52, 8) INT_OR (unique, 0x1000123e, 8) , (unique, 0x10001246, 8), (unique, 0x10001246, 8) INT_ZEXT (register, 0x90, 4), (unique, 0x1000123e, 8) INT_AND (unique, 0x10003e4a, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10003e4a, 8) CAST (stack, 0xfffffffffffffaf8, 8), (register, 0x90, 4) MULTIEQUAL (stack, 0xfffffffffffffb10, 4) , (stack, 0xfffffffffffffb10, 4), (stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (unique, 0x100018f0, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 4) SUBPIECE (stack, 0xfffffffffffffaf0, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x12db, 4), (stack, 0xfffffffffffffaf0, 8) CAST (unique, 0x10003e42, 8), (unique, 0x10003e42, 8) INT_OR (unique, 0x1000122e, 8) , (unique, 0x10001236, 8), (unique, 0x10001236, 8) INT_ZEXT (register, 0x88, 4), (unique, 0x1000122e, 8) INT_AND (unique, 0x10003e3a, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10003e3a, 8) CAST (stack, 0xfffffffffffffaf0, 8), (register, 0x88, 4) MULTIEQUAL (stack, 0xfffffffffffffb00, 4) , (unique, 0x10002997, 4), (stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (unique, 0x100018e8, 8) , (stack, 0xfffffffffffffaf0, 8)]
[ ---  CBRANCH (ram, 0x414398, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0xffffffffffffffff, 8), (register, 0x0, 8) CALL (ram, 0x453930, 8) , (unique, 0x10003e62, 8) , (unique, 0x10003e6a, 8) , (register, 0xb8, 8) , (register, 0x18, 8), (unique, 0x10003e6a, 8) CAST (unique, 0x3200, 8), (unique, 0x10003e62, 8) CAST (register, 0x98, 8), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffb68, 8), (register, 0x98, 8) MULTIEQUAL (register, 0x98, 8) , (register, 0x0, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbc0, 8) MULTIEQUAL (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8)]
[(stack, 0xfffffffffffffbb8, 8) MULTIEQUAL (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb90, 8) MULTIEQUAL (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8)]
[(stack, 0xfffffffffffffb88, 8) MULTIEQUAL (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb74, 4) MULTIEQUAL (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4)]
[(stack, 0xfffffffffffffb70, 4) MULTIEQUAL (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4)]
[(stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb64, 4) MULTIEQUAL (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4)]
[(stack, 0xfffffffffffffb62, 2) MULTIEQUAL (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2)]
[(stack, 0xfffffffffffffb60, 2) MULTIEQUAL (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2)]
[(stack, 0xfffffffffffffb5c, 4) MULTIEQUAL (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4)]
[(stack, 0xfffffffffffffb58, 4) MULTIEQUAL (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb24, 4) MULTIEQUAL (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4)]
[(stack, 0xfffffffffffffb20, 4) MULTIEQUAL (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae4, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[(stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffadc, 4) MULTIEQUAL (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4)]
[(stack, 0xfffffffffffffad8, 4) MULTIEQUAL (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4)]
[(stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffac8, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffac0, 8) MULTIEQUAL (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8)]
[(stack, 0xfffffffffffffabc, 4) MULTIEQUAL (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4)]
[(stack, 0xfffffffffffffab8, 4) MULTIEQUAL (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4)]
[(stack, 0xfffffffffffffab4, 4) MULTIEQUAL (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4)]
[(stack, 0xfffffffffffffab3, 1) MULTIEQUAL (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1)]
[(stack, 0xfffffffffffffaac, 4) MULTIEQUAL (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4)]
[(stack, 0xfffffffffffffaa8, 4) MULTIEQUAL (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4)]
[(stack, 0xfffffffffffffaa4, 4) MULTIEQUAL (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4)]
[(stack, 0xfffffffffffffaa0, 4) MULTIEQUAL (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4)]
[(ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[(ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x90, 4) MULTIEQUAL (stack, 0xfffffffffffffaf8, 4) , (stack, 0xfffffffffffffaf8, 4)]
[(register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8)]
[(register, 0x88, 8) INT_ZEXT (unique, 0xbc80, 4), (unique, 0xbc80, 4) MULTIEQUAL (stack, 0xfffffffffffffaf0, 4) , (stack, 0xfffffffffffffaf0, 4)]
[(register, 0xb8, 4) SUBPIECE (register, 0xb8, 8) , (const, 0x0, 4), (register, 0xb8, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[(unique, 0x10002973, 8) COPY (unique, 0x10003e72, 8), (unique, 0x10003e72, 8) CAST (stack, 0xfffffffffffffb10, 8), (stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[ ---  BRANCH (ram, 0x414796, 1)]
[ ---  CBRANCH (ram, 0x416258, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x80, 4) , (const, 0xffffffff, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10003ea2, 8) , (const, 0x416275, 8), (unique, 0x10003ea2, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x11fb, 4)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x11fb, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x11fb, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x11fb, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x11fb, 4)]
[(stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x11fb, 4), (stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x11fa, 4)]
[(stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x11fb, 4), (stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x11fa, 4)]
[(stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x11fb, 4), (stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x11fa, 4)]
[(stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x11fb, 4), (stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x11fa, 4)]
[(stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x11fb, 4), (stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x11fa, 4)]
[(stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x11fb, 4), (stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x11fa, 4)]
[(stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x11fb, 4), (stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x11fa, 4)]
[(stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x11fb, 4), (stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x11fa, 4)]
[(stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x11fb, 4), (stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x11fa, 4)]
[(stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x11fb, 4), (stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x11fa, 4)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x11fb, 4), (stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x11fa, 4)]
[(stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x11fb, 4), (stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x11fa, 4)]
[(stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x11fb, 4), (stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x11fa, 4)]
[(stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x11fb, 4), (stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x11fa, 4)]
[(stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x11fb, 4), (stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x11fa, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x11fb, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x11fa, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x11fb, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x11fa, 4), (stack, 0xfffffffffffffaf0, 8) CAST (unique, 0x10003e82, 8), (unique, 0x10003e82, 8) INT_OR (unique, 0x10001274, 8) , (register, 0x88, 8), (unique, 0x10001274, 8) INT_AND (unique, 0x10003e7a, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10003e7a, 8) CAST (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x11fb, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x11fa, 4), (stack, 0xfffffffffffffaf8, 8) CAST (unique, 0x10003e92, 8), (unique, 0x10003e92, 8) INT_OR (unique, 0x10001284, 8) , (unique, 0x1000128c, 8), (unique, 0x1000128c, 8) INT_ZEXT (register, 0x90, 4), (unique, 0x10001284, 8) INT_AND (unique, 0x10003e8a, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10003e8a, 8) CAST (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x11fb, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x11fa, 4)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x11fb, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x11fa, 4)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x11fb, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x11fa, 4), (stack, 0xfffffffffffffb10, 8) COPY (unique, 0x10003e9a, 8), (unique, 0x10003e9a, 8) CAST (register, 0x98, 8)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x11fb, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x11fa, 4)]
[(stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x11fb, 4), (stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x11fa, 4)]
[(stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x11fb, 4), (stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x11fa, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x11fb, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x11fa, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x11fb, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x11fa, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x11fb, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x11fa, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x11fb, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x11fa, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x11fb, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x11fa, 4)]
[(stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x11fb, 4), (stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x11fa, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x11fb, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x11fa, 4)]
[(stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x11fb, 4), (stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x11fa, 4)]
[(stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x11fb, 4), (stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x11fa, 4)]
[(stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x11fb, 4), (stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x11fa, 4)]
[(stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x11fb, 4), (stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x11fa, 4)]
[(stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x11fb, 4), (stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x11fa, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x11fb, 4), (stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x11fa, 4)]
[(stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x11fb, 4), (stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x11fa, 4)]
[(stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x11fb, 4), (stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x11fa, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x11fb, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x11fa, 4)]
[(stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x11fb, 4), (stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x11fa, 4)]
[(stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x11fb, 4), (stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x11fa, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x11fb, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x11fa, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x11fb, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x11fa, 4)]
[(stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x11fb, 4), (stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x11fa, 4)]
[(stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x11fb, 4), (stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x11fa, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x11fb, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x11fa, 4)]
[(register, 0x0, 8) CALL (ram, 0x401190, 8) , (register, 0x98, 8)]
[ ---  BRANCH (ram, 0x414772, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10003ed6, 8) , (const, 0x414772, 8), (unique, 0x10003ed6, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8), (register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xfba, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0xfba, 4), (ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0xfba, 4), (ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0xfba, 4), (ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0xfba, 4), (ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[(stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0xfba, 4), (stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0xfb9, 4), (stack, 0xfffffffffffffaa0, 4) MULTIEQUAL (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4)]
[(stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0xfba, 4), (stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0xfb9, 4), (stack, 0xfffffffffffffaa4, 4) MULTIEQUAL (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4)]
[(stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0xfba, 4), (stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0xfb9, 4), (stack, 0xfffffffffffffaa8, 4) MULTIEQUAL (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4)]
[(stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0xfba, 4), (stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0xfb9, 4), (stack, 0xfffffffffffffaac, 4) MULTIEQUAL (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4)]
[(stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0xfba, 4), (stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0xfb9, 4), (stack, 0xfffffffffffffab3, 1) MULTIEQUAL (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1)]
[(stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0xfba, 4), (stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0xfb9, 4), (stack, 0xfffffffffffffab4, 4) MULTIEQUAL (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4)]
[(stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0xfba, 4), (stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0xfb9, 4), (stack, 0xfffffffffffffab8, 4) MULTIEQUAL (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4)]
[(stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0xfba, 4), (stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0xfb9, 4), (stack, 0xfffffffffffffabc, 4) MULTIEQUAL (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4)]
[(stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0xfba, 4), (stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0xfb9, 4), (stack, 0xfffffffffffffac0, 8) MULTIEQUAL (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8)]
[(stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0xfba, 4), (stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0xfb9, 4), (stack, 0xfffffffffffffac8, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0xfba, 4), (stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0xfb9, 4), (stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0xfba, 4), (stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0xfb9, 4), (stack, 0xfffffffffffffad8, 4) MULTIEQUAL (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4)]
[(stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0xfba, 4), (stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0xfb9, 4), (stack, 0xfffffffffffffadc, 4) MULTIEQUAL (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4)]
[(stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0xfba, 4), (stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0xfb9, 4), (stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0xfba, 4), (stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0xfb9, 4), (stack, 0xfffffffffffffae4, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0xfba, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0xfb9, 4), (stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0xfba, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0xfb9, 4), (stack, 0xfffffffffffffaf0, 8) CAST (unique, 0x10003eb6, 8), (unique, 0x10003eb6, 8) INT_OR (unique, 0x10000f3d, 8) , (unique, 0x10000f45, 8), (unique, 0x10000f45, 8) INT_ZEXT (register, 0x88, 4), (unique, 0x10000f3d, 8) INT_AND (unique, 0x10003eae, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10003eae, 8) CAST (stack, 0xfffffffffffffaf0, 8), (stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8), (register, 0x88, 4) MULTIEQUAL (register, 0x88, 4) , (register, 0x88, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0xfba, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0xfb9, 4), (stack, 0xfffffffffffffaf8, 8) CAST (unique, 0x10003ec6, 8), (unique, 0x10003ec6, 8) INT_OR (unique, 0x10000f4d, 8) , (unique, 0x10000f55, 8), (unique, 0x10000f55, 8) INT_ZEXT (register, 0x90, 4), (unique, 0x10000f4d, 8) INT_AND (unique, 0x10003ebe, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10003ebe, 8) CAST (stack, 0xfffffffffffffaf8, 8), (register, 0x90, 4) MULTIEQUAL (register, 0x90, 4) , (register, 0x90, 4), (stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0xfba, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0xfb9, 4), (stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0xfba, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0xfb9, 4), (stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0xfba, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0xfb9, 4), (stack, 0xfffffffffffffb10, 8) COPY (unique, 0x10003ece, 8), (unique, 0x10003ece, 8) CAST (register, 0x98, 8), (register, 0x98, 8) MULTIEQUAL (register, 0x98, 8) , (register, 0x98, 8)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0xfba, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0xfb9, 4), (stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0xfba, 4), (stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0xfb9, 4), (stack, 0xfffffffffffffb20, 4) MULTIEQUAL (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4)]
[(stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0xfba, 4), (stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0xfb9, 4), (stack, 0xfffffffffffffb24, 4) MULTIEQUAL (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0xfba, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0xfb9, 4), (stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0xfba, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0xfb9, 4), (stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0xfba, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0xfb9, 4), (stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0xfba, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0xfb9, 4), (stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0xfba, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0xfb9, 4), (stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0xfba, 4), (stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0xfb9, 4), (stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0xfba, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0xfb9, 4), (stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0xfba, 4), (stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0xfb9, 4), (stack, 0xfffffffffffffb58, 4) MULTIEQUAL (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4)]
[(stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0xfba, 4), (stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0xfb9, 4), (stack, 0xfffffffffffffb5c, 4) MULTIEQUAL (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4)]
[(stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0xfba, 4), (stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0xfb9, 4), (stack, 0xfffffffffffffb60, 2) MULTIEQUAL (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2)]
[(stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0xfba, 4), (stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0xfb9, 4), (stack, 0xfffffffffffffb62, 2) MULTIEQUAL (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2)]
[(stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0xfba, 4), (stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0xfb9, 4), (stack, 0xfffffffffffffb64, 4) MULTIEQUAL (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0xfba, 4), (stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0xfb9, 4), (stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0xfba, 4), (stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0xfb9, 4), (stack, 0xfffffffffffffb70, 4) MULTIEQUAL (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4)]
[(stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0xfba, 4), (stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0xfb9, 4), (stack, 0xfffffffffffffb74, 4) MULTIEQUAL (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0xfba, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0xfb9, 4), (stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0xfba, 4), (stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0xfb9, 4), (stack, 0xfffffffffffffb88, 8) MULTIEQUAL (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8)]
[(stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0xfba, 4), (stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0xfb9, 4), (stack, 0xfffffffffffffb90, 8) MULTIEQUAL (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0xfba, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0xfb9, 4), (stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0xfba, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0xfb9, 4), (stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0xfba, 4), (stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0xfb9, 4), (stack, 0xfffffffffffffbb8, 8) MULTIEQUAL (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8)]
[(stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0xfba, 4), (stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0xfb9, 4), (stack, 0xfffffffffffffbc0, 8) MULTIEQUAL (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xfba, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xfb9, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(register, 0x0, 8) CALL (ram, 0x401030, 8) , (register, 0x98, 8) , (register, 0x30, 8), (register, 0x30, 8) INT_SEXT (unique, 0x10003eaa, 4), (unique, 0x10003eaa, 4) CAST (register, 0x80, 4), (register, 0x98, 8) MULTIEQUAL (register, 0x98, 8) , (register, 0x98, 8), (register, 0x80, 4) MULTIEQUAL (register, 0x80, 4) , (register, 0x80, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbc0, 8) MULTIEQUAL (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8)]
[(stack, 0xfffffffffffffbb8, 8) MULTIEQUAL (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb90, 8) MULTIEQUAL (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8)]
[(stack, 0xfffffffffffffb88, 8) MULTIEQUAL (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb74, 4) MULTIEQUAL (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4)]
[(stack, 0xfffffffffffffb70, 4) MULTIEQUAL (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4)]
[(stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb64, 4) MULTIEQUAL (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4)]
[(stack, 0xfffffffffffffb62, 2) MULTIEQUAL (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2)]
[(stack, 0xfffffffffffffb60, 2) MULTIEQUAL (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2)]
[(stack, 0xfffffffffffffb5c, 4) MULTIEQUAL (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4)]
[(stack, 0xfffffffffffffb58, 4) MULTIEQUAL (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb24, 4) MULTIEQUAL (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4)]
[(stack, 0xfffffffffffffb20, 4) MULTIEQUAL (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae4, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[(stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffadc, 4) MULTIEQUAL (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4)]
[(stack, 0xfffffffffffffad8, 4) MULTIEQUAL (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4)]
[(stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffac8, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffac0, 8) MULTIEQUAL (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8)]
[(stack, 0xfffffffffffffabc, 4) MULTIEQUAL (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4)]
[(stack, 0xfffffffffffffab8, 4) MULTIEQUAL (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4)]
[(stack, 0xfffffffffffffab4, 4) MULTIEQUAL (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4)]
[(stack, 0xfffffffffffffab3, 1) MULTIEQUAL (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1)]
[(stack, 0xfffffffffffffaac, 4) MULTIEQUAL (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4)]
[(stack, 0xfffffffffffffaa8, 4) MULTIEQUAL (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4)]
[(stack, 0xfffffffffffffaa4, 4) MULTIEQUAL (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4)]
[(stack, 0xfffffffffffffaa0, 4) MULTIEQUAL (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4)]
[(ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[(ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8)]
[(stack, 0xfffffffffffffb00, 8) CAST (unique, 0x10003ee6, 8), (unique, 0x10003ee6, 8) INT_AND (unique, 0x10003ede, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10003ede, 8) CAST (stack, 0xfffffffffffffb00, 8), (stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(register, 0x0, 4) SUBPIECE (register, 0x0, 8) , (const, 0x0, 4), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[(stack, 0xfffffffffffffaf8, 4) SUBPIECE (stack, 0xfffffffffffffaf8, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(register, 0x88, 8) INT_AND (unique, 0x10003eee, 8) , (const, 0xffffffff, 8), (unique, 0x10003eee, 8) CAST (stack, 0xfffffffffffffaf0, 8), (stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(unique, 0x1000296b, 8) COPY (unique, 0x10003ef6, 8), (unique, 0x10003ef6, 8) CAST (stack, 0xfffffffffffffb10, 8), (stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbc0, 8) MULTIEQUAL (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8)]
[(stack, 0xfffffffffffffbb8, 8) MULTIEQUAL (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb90, 8) MULTIEQUAL (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8)]
[(stack, 0xfffffffffffffb88, 8) MULTIEQUAL (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb74, 4) MULTIEQUAL (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4)]
[(stack, 0xfffffffffffffb70, 4) MULTIEQUAL (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4)]
[(stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb64, 4) MULTIEQUAL (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4)]
[(stack, 0xfffffffffffffb62, 2) MULTIEQUAL (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2)]
[(stack, 0xfffffffffffffb60, 2) MULTIEQUAL (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2)]
[(stack, 0xfffffffffffffb5c, 4) MULTIEQUAL (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4)]
[(stack, 0xfffffffffffffb58, 4) MULTIEQUAL (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb24, 4) MULTIEQUAL (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4)]
[(stack, 0xfffffffffffffb20, 4) MULTIEQUAL (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae4, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[(stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffadc, 4) MULTIEQUAL (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4)]
[(stack, 0xfffffffffffffad8, 4) MULTIEQUAL (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4)]
[(stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffac8, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffac0, 8) MULTIEQUAL (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8)]
[(stack, 0xfffffffffffffabc, 4) MULTIEQUAL (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4)]
[(stack, 0xfffffffffffffab8, 4) MULTIEQUAL (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4)]
[(stack, 0xfffffffffffffab4, 4) MULTIEQUAL (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4)]
[(stack, 0xfffffffffffffab3, 1) MULTIEQUAL (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1)]
[(stack, 0xfffffffffffffaac, 4) MULTIEQUAL (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4)]
[(stack, 0xfffffffffffffaa8, 4) MULTIEQUAL (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4)]
[(stack, 0xfffffffffffffaa4, 4) MULTIEQUAL (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4)]
[(stack, 0xfffffffffffffaa0, 4) MULTIEQUAL (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4)]
[(ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[(ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb8, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0xb8, 8) , (register, 0xb8, 8)]
[(register, 0x98, 8) MULTIEQUAL (unique, 0x1000296b, 8) , (unique, 0x10002973, 8) , (register, 0x98, 8)]
[(register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8)]
[(register, 0x88, 4) SUBPIECE (register, 0x88, 8) , (const, 0x0, 4), (register, 0x88, 8) MULTIEQUAL (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8)]
[ ---  CBRANCH (ram, 0x41596a, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (const, 0xffffffff, 4) , (unique, 0x10003efe, 4), (unique, 0x10003efe, 4) CAST (register, 0x90, 4), (register, 0x90, 4) INT_SUB (register, 0x90, 4) , (register, 0x18, 4), (register, 0x18, 4) MULTIEQUAL (register, 0x0, 4) , (register, 0xb8, 4) , (register, 0x18, 4), (register, 0x90, 4) MULTIEQUAL (stack, 0xfffffffffffffaf8, 4) , (register, 0x90, 4) , (register, 0x90, 4)]
[(register, 0x88, 4) MULTIEQUAL (register, 0x88, 4) , (register, 0x88, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbc0, 8) MULTIEQUAL (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8)]
[(stack, 0xfffffffffffffbb8, 8) MULTIEQUAL (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb90, 8) MULTIEQUAL (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8)]
[(stack, 0xfffffffffffffb88, 8) MULTIEQUAL (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb74, 4) MULTIEQUAL (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4)]
[(stack, 0xfffffffffffffb70, 4) MULTIEQUAL (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4)]
[(stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb64, 4) MULTIEQUAL (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4)]
[(stack, 0xfffffffffffffb62, 2) MULTIEQUAL (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2)]
[(stack, 0xfffffffffffffb60, 2) MULTIEQUAL (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2)]
[(stack, 0xfffffffffffffb5c, 4) MULTIEQUAL (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4)]
[(stack, 0xfffffffffffffb58, 4) MULTIEQUAL (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb24, 4) MULTIEQUAL (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4)]
[(stack, 0xfffffffffffffb20, 4) MULTIEQUAL (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae4, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[(stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffadc, 4) MULTIEQUAL (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4)]
[(stack, 0xfffffffffffffad8, 4) MULTIEQUAL (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4)]
[(stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffac8, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffac0, 8) MULTIEQUAL (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8)]
[(stack, 0xfffffffffffffabc, 4) MULTIEQUAL (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4)]
[(stack, 0xfffffffffffffab8, 4) MULTIEQUAL (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4)]
[(stack, 0xfffffffffffffab4, 4) MULTIEQUAL (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4)]
[(stack, 0xfffffffffffffab3, 1) MULTIEQUAL (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1)]
[(stack, 0xfffffffffffffaac, 4) MULTIEQUAL (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4)]
[(stack, 0xfffffffffffffaa8, 4) MULTIEQUAL (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4)]
[(stack, 0xfffffffffffffaa4, 4) MULTIEQUAL (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4)]
[(stack, 0xfffffffffffffaa0, 4) MULTIEQUAL (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4)]
[(ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[(ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb8, 8) MULTIEQUAL (register, 0xb8, 8) , (register, 0xb8, 8)]
[(register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8)]
[(register, 0x18, 4) MULTIEQUAL (register, 0x18, 4) , (register, 0x18, 4)]
[(stack, 0xfffffffffffffb10, 8) CAST (unique, 0x10003f0a, 8), (unique, 0x10003f0a, 8) INT_OR (unique, 0x10001126, 8) , (unique, 0x1000112e, 8), (unique, 0x1000112e, 8) INT_ZEXT (register, 0x206, 1), (unique, 0x10001126, 8) INT_AND (unique, 0x10003f02, 8) , (const, 0xffffffffffffff00, 8), (unique, 0x10003f02, 8) CAST (stack, 0xfffffffffffffb10, 8), (register, 0x206, 1) INT_NOTEQUAL (register, 0x90, 4) , (const, 0x0, 4), (register, 0x90, 4) MULTIEQUAL (register, 0x90, 4) , (unique, 0x100029c3, 4), (stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(unique, 0x100028fb, 8) COPY (register, 0x98, 8), (register, 0x98, 8) MULTIEQUAL (register, 0x98, 8) , (register, 0x98, 8)]
[ ---  CBRANCH (ram, 0x41598f, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xfffffffffffffb08, 4) , (const, 0x0, 4), (stack, 0xfffffffffffffb08, 4) SUBPIECE (stack, 0xfffffffffffffb08, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(unique, 0x10002903, 8) COPY (register, 0x98, 8)]
[ ---  CBRANCH (ram, 0x41663c, 1) , (register, 0x206, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10003f36, 8) , (const, 0x416668, 8), (unique, 0x10003f36, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x11a9, 4)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x11a9, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x11a9, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x11a9, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x11a9, 4)]
[(stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x11a9, 4), (stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x11a8, 4)]
[(stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x11a9, 4), (stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x11a8, 4)]
[(stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x11a9, 4), (stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x11a8, 4)]
[(stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x11a9, 4), (stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x11a8, 4)]
[(stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x11a9, 4), (stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x11a8, 4)]
[(stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x11a9, 4), (stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x11a8, 4)]
[(stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x11a9, 4), (stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x11a8, 4)]
[(stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x11a9, 4), (stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x11a8, 4)]
[(stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x11a9, 4), (stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x11a8, 4)]
[(stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x11a9, 4), (stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x11a8, 4)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x11a9, 4), (stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x11a8, 4)]
[(stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x11a9, 4), (stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x11a8, 4)]
[(stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x11a9, 4), (stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x11a8, 4)]
[(stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x11a9, 4), (stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x11a8, 4)]
[(stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x11a9, 4), (stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x11a8, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x11a9, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x11a8, 4), (stack, 0xfffffffffffffae8, 8) COPY (unique, 0x10003f1e, 8), (unique, 0x10003f1e, 8) CAST (register, 0x98, 8)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x11a9, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x11a8, 4), (stack, 0xfffffffffffffaf0, 8) CAST (unique, 0x10003f2e, 8), (unique, 0x10003f2e, 8) INT_OR (unique, 0x100012cf, 8) , (unique, 0x100012d7, 8), (unique, 0x100012d7, 8) INT_ZEXT (register, 0x90, 4), (unique, 0x100012cf, 8) INT_AND (unique, 0x10003f26, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10003f26, 8) CAST (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x11a9, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x11a8, 4)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x11a9, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x11a8, 4)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x11a9, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x11a8, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x11a9, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x11a8, 4)]
[(stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x11a9, 4), (stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x11a8, 4), (stack, 0xfffffffffffffb20, 4) COPY (register, 0x88, 4)]
[(stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x11a9, 4), (stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x11a8, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x11a9, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x11a8, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x11a9, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x11a8, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x11a9, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x11a8, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x11a9, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x11a8, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x11a9, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x11a8, 4)]
[(stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x11a9, 4), (stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x11a8, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x11a9, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x11a8, 4)]
[(stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x11a9, 4), (stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x11a8, 4)]
[(stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x11a9, 4), (stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x11a8, 4)]
[(stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x11a9, 4), (stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x11a8, 4)]
[(stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x11a9, 4), (stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x11a8, 4)]
[(stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x11a9, 4), (stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x11a8, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x11a9, 4), (stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x11a8, 4)]
[(stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x11a9, 4), (stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x11a8, 4)]
[(stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x11a9, 4), (stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x11a8, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x11a9, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x11a8, 4)]
[(stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x11a9, 4), (stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x11a8, 4)]
[(stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x11a9, 4), (stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x11a8, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x11a9, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x11a8, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x11a9, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x11a8, 4)]
[(stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x11a9, 4), (stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x11a8, 4)]
[(stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x11a9, 4), (stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x11a8, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x11a9, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x11a8, 4)]
[ ---  CBRANCH (ram, 0x414398, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xfffffffffffffaf8, 8) , (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10003f46, 8), (unique, 0x10003f46, 8) CALL (ram, 0x418b00, 8) , (register, 0x38, 8) , (const, 0x20, 4) , (unique, 0x10003f3e, 8), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x11a9, 4), (unique, 0x10003f3e, 8) CAST (register, 0x10, 8), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x11a8, 4), (stack, 0xfffffffffffffaf8, 8) COPY (register, 0x10, 8), (register, 0x10, 8) CAST (unique, 0x10003f16, 8), (unique, 0x10003f16, 8) INT_SEXT (unique, 0x10003f12, 4), (unique, 0x10003f12, 4) CAST (register, 0x90, 4)]
[ ---  CBRANCH (ram, 0x417230, 1) , (unique, 0xc900, 1), (unique, 0xc900, 1) INT_LESS (const, 0x7ffffffe, 4) , (stack, 0xfffffffffffffb20, 4)]
[ ---  CBRANCH (ram, 0x414e98, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (register, 0x0, 4) , (stack, 0xfffffffffffffaf0, 4), (register, 0x0, 4) INT_SUB (const, 0x7fffffff, 4) , (stack, 0xfffffffffffffb20, 4), (stack, 0xfffffffffffffaf0, 4) SUBPIECE (stack, 0xfffffffffffffaf0, 8) , (const, 0x0, 8)]
[(register, 0x88, 4) INT_ADD (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffaf0, 4)]
[(unique, 0x1000290b, 8) COPY (unique, 0x10003f4e, 8), (unique, 0x10003f4e, 8) CAST (stack, 0xfffffffffffffae8, 8)]
[ ---  BRANCH (ram, 0x41598f, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbc0, 8) MULTIEQUAL (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8)]
[(stack, 0xfffffffffffffbb8, 8) MULTIEQUAL (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb90, 8) MULTIEQUAL (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8)]
[(stack, 0xfffffffffffffb88, 8) MULTIEQUAL (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb74, 4) MULTIEQUAL (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4)]
[(stack, 0xfffffffffffffb70, 4) MULTIEQUAL (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4)]
[(stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb64, 4) MULTIEQUAL (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4)]
[(stack, 0xfffffffffffffb62, 2) MULTIEQUAL (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2)]
[(stack, 0xfffffffffffffb60, 2) MULTIEQUAL (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2)]
[(stack, 0xfffffffffffffb5c, 4) MULTIEQUAL (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4)]
[(stack, 0xfffffffffffffb58, 4) MULTIEQUAL (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb24, 4) MULTIEQUAL (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4)]
[(stack, 0xfffffffffffffb20, 4) MULTIEQUAL (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae4, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[(stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffadc, 4) MULTIEQUAL (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4)]
[(stack, 0xfffffffffffffad8, 4) MULTIEQUAL (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4)]
[(stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffac8, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffac0, 8) MULTIEQUAL (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8)]
[(stack, 0xfffffffffffffabc, 4) MULTIEQUAL (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4)]
[(stack, 0xfffffffffffffab8, 4) MULTIEQUAL (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4)]
[(stack, 0xfffffffffffffab4, 4) MULTIEQUAL (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4)]
[(stack, 0xfffffffffffffab3, 1) MULTIEQUAL (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1)]
[(stack, 0xfffffffffffffaac, 4) MULTIEQUAL (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4)]
[(stack, 0xfffffffffffffaa8, 4) MULTIEQUAL (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4)]
[(stack, 0xfffffffffffffaa4, 4) MULTIEQUAL (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4)]
[(stack, 0xfffffffffffffaa0, 4) MULTIEQUAL (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4)]
[(ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[(ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(register, 0x90, 4) MULTIEQUAL (register, 0x90, 4) , (register, 0x90, 4) , (stack, 0xfffffffffffffaf0, 4)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x98, 8) MULTIEQUAL (unique, 0x100028fb, 8) , (unique, 0x10002903, 8) , (unique, 0x1000290b, 8)]
[ ---  CBRANCH (ram, 0x417211, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (unique, 0x10003f56, 4) , (const, 0x0, 4), (unique, 0x10003f56, 4) CAST (register, 0x88, 4), (register, 0x88, 4) MULTIEQUAL (register, 0x88, 4) , (register, 0x88, 4) , (register, 0x88, 4)]
[(unique, 0x1000260b, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10003f5a, 8), (unique, 0x10003f5a, 8) CAST (unique, 0x3c80, 8), (unique, 0x3c80, 8) PTRADD (register, 0x38, 8) , (const, 0x1, 8) , (const, 0xd8, 8)]
[(unique, 0x10002933, 8) COPY (register, 0x98, 8)]
[(unique, 0x10002dd7, 4) COPY (register, 0x88, 4)]
[ ---  CBRANCH (ram, 0x416aa1, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESSEQUAL (stack, 0xfffffffffffffb28, 8) , (register, 0x10, 8), (register, 0x10, 8) PTRADD (unique, 0xbd80, 8) , (const, 0xfffffffffff67294, 8) , (const, 0x8, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10003f5a, 8), (unique, 0x10003f5a, 8) CAST (unique, 0x3c80, 8), (unique, 0x3c80, 8) PTRADD (register, 0x38, 8) , (const, 0x1, 8) , (const, 0xd8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10003f7a, 8) , (const, 0x416ac2, 8), (unique, 0x10003f7a, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1188, 4)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x1188, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x1188, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x1188, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x1188, 4)]
[(stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x1188, 4), (stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x1187, 4)]
[(stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x1188, 4), (stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x1187, 4)]
[(stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x1188, 4), (stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x1187, 4)]
[(stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x1188, 4), (stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x1187, 4)]
[(stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x1188, 4), (stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x1187, 4)]
[(stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x1188, 4), (stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x1187, 4)]
[(stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x1188, 4), (stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x1187, 4)]
[(stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x1188, 4), (stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x1187, 4)]
[(stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x1188, 4), (stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x1187, 4)]
[(stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x1188, 4), (stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x1187, 4)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x1188, 4), (stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x1187, 4)]
[(stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x1188, 4), (stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x1187, 4)]
[(stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x1188, 4), (stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x1187, 4)]
[(stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x1188, 4), (stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x1187, 4)]
[(stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x1188, 4), (stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x1187, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x1188, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x1187, 4)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x1188, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x1187, 4)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x1188, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x1187, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x1188, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x1187, 4)]
[(stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x1188, 4), (stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x1187, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x1188, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x1187, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x1188, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x1187, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x1188, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x1187, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x1188, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x1187, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x1188, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x1187, 4)]
[(stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x1188, 4), (stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x1187, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x1188, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x1187, 4)]
[(stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x1188, 4), (stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x1187, 4)]
[(stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x1188, 4), (stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x1187, 4)]
[(stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x1188, 4), (stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x1187, 4)]
[(stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x1188, 4), (stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x1187, 4)]
[(stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x1188, 4), (stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x1187, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x1188, 4), (stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x1187, 4)]
[(stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x1188, 4), (stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x1187, 4)]
[(stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x1188, 4), (stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x1187, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x1188, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x1187, 4)]
[(stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x1188, 4), (stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x1187, 4)]
[(stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x1188, 4), (stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x1187, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x1188, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x1187, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x1188, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x1187, 4)]
[(stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x1188, 4), (stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x1187, 4)]
[(stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x1188, 4), (stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x1187, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1188, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1187, 4)]
[ ---  CALL (ram, 0x41b380, 8)]
[(stack, 0xfffffffffffffaf0, 4) SUBPIECE (stack, 0xfffffffffffffaf0, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x1188, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x1187, 4), (stack, 0xfffffffffffffaf0, 8) CAST (unique, 0x10003f6a, 8), (unique, 0x10003f6a, 8) INT_OR (unique, 0x100013b5, 8) , (unique, 0x100013bd, 8), (unique, 0x100013bd, 8) INT_ZEXT (register, 0x90, 4), (unique, 0x100013b5, 8) INT_AND (unique, 0x10003f62, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10003f62, 8) CAST (stack, 0xfffffffffffffaf0, 8)]
[(unique, 0x10002613, 8) COPY (stack, 0xfffffffffffffae8, 8), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x1188, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x1187, 4), (stack, 0xfffffffffffffae8, 8) COPY (unique, 0xbd80, 8)]
[(unique, 0x1000293b, 8) COPY (unique, 0x10003f82, 8), (unique, 0x10003f82, 8) CAST (stack, 0xfffffffffffffaf8, 8), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x1188, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x1187, 4), (stack, 0xfffffffffffffaf8, 8) COPY (unique, 0x10003f72, 8), (unique, 0x10003f72, 8) CAST (register, 0x98, 8)]
[(unique, 0x10002ddb, 4) COPY (stack, 0xfffffffffffffb20, 4), (stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x1188, 4), (stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x1187, 4), (stack, 0xfffffffffffffb20, 4) COPY (register, 0x88, 4)]
[ ---  BRANCH (ram, 0x4159b7, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10003fb2, 8) , (const, 0x4159d8, 8), (unique, 0x10003fb2, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x10b1, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x10b1, 4), (ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x10b1, 4), (ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x10b1, 4), (ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x10b1, 4), (ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[(stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x10b1, 4), (stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x10af, 4), (stack, 0xfffffffffffffaa0, 4) MULTIEQUAL (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4)]
[(stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x10b1, 4), (stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x10af, 4), (stack, 0xfffffffffffffaa4, 4) MULTIEQUAL (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4)]
[(stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x10b1, 4), (stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x10af, 4), (stack, 0xfffffffffffffaa8, 4) MULTIEQUAL (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4)]
[(stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x10b1, 4), (stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x10af, 4), (stack, 0xfffffffffffffaac, 4) MULTIEQUAL (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4)]
[(stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x10b1, 4), (stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x10af, 4), (stack, 0xfffffffffffffab3, 1) MULTIEQUAL (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1)]
[(stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x10b1, 4), (stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x10af, 4), (stack, 0xfffffffffffffab4, 4) MULTIEQUAL (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4)]
[(stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x10b1, 4), (stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x10af, 4), (stack, 0xfffffffffffffab8, 4) MULTIEQUAL (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4)]
[(stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x10b1, 4), (stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x10af, 4), (stack, 0xfffffffffffffabc, 4) MULTIEQUAL (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4)]
[(stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x10b1, 4), (stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x10af, 4), (stack, 0xfffffffffffffac0, 8) MULTIEQUAL (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8)]
[(stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x10b1, 4), (stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x10af, 4), (stack, 0xfffffffffffffac8, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x10b1, 4), (stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x10af, 4), (stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x10b1, 4), (stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x10af, 4), (stack, 0xfffffffffffffad8, 4) MULTIEQUAL (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4)]
[(stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x10b1, 4), (stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x10af, 4), (stack, 0xfffffffffffffadc, 4) MULTIEQUAL (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4)]
[(stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x10b1, 4), (stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x10af, 4), (stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x10b1, 4), (stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x10af, 4), (stack, 0xfffffffffffffae4, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x10b1, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x10af, 4), (stack, 0xfffffffffffffae8, 8) CAST (unique, 0x10003f92, 8), (unique, 0x10003f92, 8) INT_OR (unique, 0x10001137, 8) , (unique, 0x1000113f, 8), (unique, 0x1000113f, 8) INT_ZEXT (register, 0x88, 4), (unique, 0x10001137, 8) INT_AND (unique, 0x10003f8a, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10003f8a, 8) CAST (stack, 0xfffffffffffffae8, 8), (stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8), (register, 0x88, 4) MULTIEQUAL (unique, 0x10002dd7, 4) , (unique, 0x10002ddb, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x10b1, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x10af, 4), (stack, 0xfffffffffffffaf0, 8) CAST (unique, 0x10003fa2, 8), (unique, 0x10003fa2, 8) INT_OR (unique, 0x10001147, 8) , (unique, 0x1000114f, 8), (unique, 0x1000114f, 8) INT_ZEXT (register, 0x90, 4), (unique, 0x10001147, 8) INT_AND (unique, 0x10003f9a, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10003f9a, 8) CAST (stack, 0xfffffffffffffaf0, 8), (register, 0x90, 4) MULTIEQUAL (register, 0x90, 4) , (stack, 0xfffffffffffffaf0, 4), (stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x10b1, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x10af, 4), (stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x10b1, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x10af, 4), (stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x10b1, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x10af, 4), (stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x10b1, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x10af, 4), (stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x10b1, 4), (stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x10af, 4), (stack, 0xfffffffffffffb20, 4) MULTIEQUAL (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4)]
[(stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x10b1, 4), (stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x10af, 4), (stack, 0xfffffffffffffb24, 4) MULTIEQUAL (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x10b1, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x10af, 4), (stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x10b1, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x10af, 4), (stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x10b1, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x10af, 4), (stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x10b1, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x10af, 4), (stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x10b1, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x10af, 4), (stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x10b1, 4), (stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x10af, 4), (stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x10b1, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x10af, 4), (stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x10b1, 4), (stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x10af, 4), (stack, 0xfffffffffffffb58, 4) MULTIEQUAL (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4)]
[(stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x10b1, 4), (stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x10af, 4), (stack, 0xfffffffffffffb5c, 4) MULTIEQUAL (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4)]
[(stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x10b1, 4), (stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x10af, 4), (stack, 0xfffffffffffffb60, 2) MULTIEQUAL (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2)]
[(stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x10b1, 4), (stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x10af, 4), (stack, 0xfffffffffffffb62, 2) MULTIEQUAL (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2)]
[(stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x10b1, 4), (stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x10af, 4), (stack, 0xfffffffffffffb64, 4) MULTIEQUAL (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x10b1, 4), (stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x10af, 4), (stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x10b1, 4), (stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x10af, 4), (stack, 0xfffffffffffffb70, 4) MULTIEQUAL (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4)]
[(stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x10b1, 4), (stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x10af, 4), (stack, 0xfffffffffffffb74, 4) MULTIEQUAL (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x10b1, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x10af, 4), (stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x10b1, 4), (stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x10af, 4), (stack, 0xfffffffffffffb88, 8) MULTIEQUAL (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8)]
[(stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x10b1, 4), (stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x10af, 4), (stack, 0xfffffffffffffb90, 8) MULTIEQUAL (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x10b1, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x10af, 4), (stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x10b1, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x10af, 4), (stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x10b1, 4), (stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x10af, 4), (stack, 0xfffffffffffffbb8, 8) MULTIEQUAL (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8)]
[(stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x10b1, 4), (stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x10af, 4), (stack, 0xfffffffffffffbc0, 8) MULTIEQUAL (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x10b1, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x10af, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(unique, 0x1000255f, 8) COPY (stack, 0xfffffffffffffaf8, 8), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x10b1, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x10af, 4), (stack, 0xfffffffffffffaf8, 8) COPY (unique, 0x10003faa, 8), (unique, 0x10003faa, 8) CAST (register, 0x98, 8), (register, 0x98, 8) MULTIEQUAL (unique, 0x10002933, 8) , (unique, 0x1000293b, 8)]
[ ---  CBRANCH (ram, 0x414398, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (register, 0xb8, 8), (register, 0x0, 8) CALLIND (unique, 0x10003fba, 8) , (register, 0x38, 8) , (register, 0x98, 8) , (register, 0xb8, 8), (unique, 0x10003fba, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x7, 8) , (const, 0x8, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x1000260b, 8) , (unique, 0x10002613, 8), (register, 0x98, 8) MULTIEQUAL (unique, 0x10002933, 8) , (unique, 0x1000293b, 8)]
[(stack, 0xfffffffffffffaf0, 4) SUBPIECE (stack, 0xfffffffffffffaf0, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x414e98, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (unique, 0x10003fc6, 8) , (register, 0xb8, 8), (unique, 0x10003fc6, 8) CAST (register, 0x0, 8), (register, 0x0, 8) INT_SEXT (unique, 0x10003fc2, 4), (unique, 0x10003fc2, 4) CAST (register, 0x0, 4), (register, 0x0, 4) INT_SUB (const, 0x7fffffff, 4) , (stack, 0xfffffffffffffae8, 4), (stack, 0xfffffffffffffae8, 4) SUBPIECE (stack, 0xfffffffffffffae8, 8) , (const, 0x0, 8)]
[(register, 0x88, 8) INT_ZEXT (register, 0x88, 4), (register, 0x88, 4) INT_ADD (stack, 0xfffffffffffffae8, 4) , (register, 0x18, 4)]
[(unique, 0x10002813, 8) COPY (unique, 0x1000255f, 8)]
[ ---  CBRANCH (ram, 0x415a23, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xfffffffffffffb08, 4) , (const, 0x0, 4), (stack, 0xfffffffffffffb08, 4) SUBPIECE (stack, 0xfffffffffffffb08, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x416808, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xfffffffffffffb10, 1) , (const, 0x0, 1), (stack, 0xfffffffffffffb10, 1) SUBPIECE (stack, 0xfffffffffffffb10, 8) , (const, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10003ffa, 8) , (const, 0x416830, 8), (unique, 0x10003ffa, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x112e, 4)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x112e, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x112e, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x112e, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x112e, 4)]
[(stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x112e, 4), (stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x112d, 4)]
[(stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x112e, 4), (stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x112d, 4)]
[(stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x112e, 4), (stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x112d, 4)]
[(stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x112e, 4), (stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x112d, 4)]
[(stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x112e, 4), (stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x112d, 4)]
[(stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x112e, 4), (stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x112d, 4)]
[(stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x112e, 4), (stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x112d, 4)]
[(stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x112e, 4), (stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x112d, 4)]
[(stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x112e, 4), (stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x112d, 4)]
[(stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x112e, 4), (stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x112d, 4)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x112e, 4), (stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x112d, 4)]
[(stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x112e, 4), (stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x112d, 4)]
[(stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x112e, 4), (stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x112d, 4)]
[(stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x112e, 4), (stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x112d, 4)]
[(stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x112e, 4), (stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x112d, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x112e, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x112d, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x112e, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x112d, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x112e, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x112d, 4), (stack, 0xfffffffffffffaf8, 8) CAST (unique, 0x10003fda, 8), (unique, 0x10003fda, 8) INT_OR (unique, 0x10001301, 8) , (unique, 0x10001309, 8), (unique, 0x10001309, 8) INT_ZEXT (register, 0x88, 4), (unique, 0x10001301, 8) INT_AND (unique, 0x10003fd2, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10003fd2, 8) CAST (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x112e, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x112d, 4)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x112e, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x112d, 4), (stack, 0xfffffffffffffb08, 8) COPY (unique, 0x1000255f, 8)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x112e, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x112d, 4), (stack, 0xfffffffffffffb10, 8) CAST (unique, 0x10003ff2, 8), (unique, 0x10003ff2, 8) INT_OR (unique, 0x10001311, 8) , (unique, 0x10001319, 8), (unique, 0x10001319, 8) INT_AND (unique, 0x10003fea, 8) , (const, 0xffffffff, 8), (unique, 0x10003fea, 8) CAST (stack, 0xfffffffffffffaf0, 8), (unique, 0x10001311, 8) INT_AND (unique, 0x10003fe2, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10003fe2, 8) CAST (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x112e, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x112d, 4)]
[(stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x112e, 4), (stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x112d, 4)]
[(stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x112e, 4), (stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x112d, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x112e, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x112d, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x112e, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x112d, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x112e, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x112d, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x112e, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x112d, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x112e, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x112d, 4)]
[(stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x112e, 4), (stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x112d, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x112e, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x112d, 4)]
[(stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x112e, 4), (stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x112d, 4)]
[(stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x112e, 4), (stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x112d, 4)]
[(stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x112e, 4), (stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x112d, 4)]
[(stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x112e, 4), (stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x112d, 4)]
[(stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x112e, 4), (stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x112d, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x112e, 4), (stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x112d, 4)]
[(stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x112e, 4), (stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x112d, 4)]
[(stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x112e, 4), (stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x112d, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x112e, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x112d, 4)]
[(stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x112e, 4), (stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x112d, 4)]
[(stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x112e, 4), (stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x112d, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x112e, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x112d, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x112e, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x112d, 4)]
[(stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x112e, 4), (stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x112d, 4)]
[(stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x112e, 4), (stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x112d, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x112e, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x112d, 4)]
[ ---  CBRANCH (ram, 0x414398, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x18, 8) , (register, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x418b00, 8) , (register, 0x38, 8) , (const, 0x20, 4) , (register, 0x18, 8), (register, 0x18, 8) INT_SEXT (unique, 0x10003fce, 4), (unique, 0x10003fce, 4) CAST (stack, 0xfffffffffffffaf0, 4)]
[ ---  CBRANCH (ram, 0x417230, 1) , (unique, 0xc900, 1), (unique, 0xc900, 1) INT_LESS (const, 0x7ffffffe, 4) , (stack, 0xfffffffffffffaf8, 4), (stack, 0xfffffffffffffaf8, 4) SUBPIECE (stack, 0xfffffffffffffaf8, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x414e98, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (register, 0x0, 4) , (stack, 0xfffffffffffffb10, 4), (register, 0x0, 4) INT_SUB (const, 0x7fffffff, 4) , (stack, 0xfffffffffffffaf8, 4), (stack, 0xfffffffffffffb10, 4) SUBPIECE (stack, 0xfffffffffffffb10, 8) , (const, 0x0, 8)]
[(register, 0x88, 8) INT_ZEXT (register, 0x88, 4), (register, 0x88, 4) INT_ADD (stack, 0xfffffffffffffaf8, 4) , (stack, 0xfffffffffffffb10, 4)]
[(unique, 0x1000280b, 8) COPY (stack, 0xfffffffffffffb08, 8)]
[ ---  BRANCH (ram, 0x415a23, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbc0, 8) MULTIEQUAL (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8)]
[(stack, 0xfffffffffffffbb8, 8) MULTIEQUAL (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb90, 8) MULTIEQUAL (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8)]
[(stack, 0xfffffffffffffb88, 8) MULTIEQUAL (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb74, 4) MULTIEQUAL (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4)]
[(stack, 0xfffffffffffffb70, 4) MULTIEQUAL (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4)]
[(stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb64, 4) MULTIEQUAL (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4)]
[(stack, 0xfffffffffffffb62, 2) MULTIEQUAL (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2)]
[(stack, 0xfffffffffffffb60, 2) MULTIEQUAL (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2)]
[(stack, 0xfffffffffffffb5c, 4) MULTIEQUAL (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4)]
[(stack, 0xfffffffffffffb58, 4) MULTIEQUAL (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb24, 4) MULTIEQUAL (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4)]
[(stack, 0xfffffffffffffb20, 4) MULTIEQUAL (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae4, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[(stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffadc, 4) MULTIEQUAL (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4)]
[(stack, 0xfffffffffffffad8, 4) MULTIEQUAL (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4)]
[(stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffac8, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffac0, 8) MULTIEQUAL (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8)]
[(stack, 0xfffffffffffffabc, 4) MULTIEQUAL (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4)]
[(stack, 0xfffffffffffffab8, 4) MULTIEQUAL (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4)]
[(stack, 0xfffffffffffffab4, 4) MULTIEQUAL (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4)]
[(stack, 0xfffffffffffffab3, 1) MULTIEQUAL (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1)]
[(stack, 0xfffffffffffffaac, 4) MULTIEQUAL (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4)]
[(stack, 0xfffffffffffffaa8, 4) MULTIEQUAL (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4)]
[(stack, 0xfffffffffffffaa4, 4) MULTIEQUAL (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4)]
[(stack, 0xfffffffffffffaa0, 4) MULTIEQUAL (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4)]
[(ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[(ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x98, 8) MULTIEQUAL (unique, 0x10002813, 8) , (unique, 0x10002813, 8) , (unique, 0x1000280b, 8)]
[(register, 0x88, 8) MULTIEQUAL (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8)]
[ ---  CBRANCH (ram, 0x414640, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xfffffffffffffb00, 4) , (const, 0x0, 4), (stack, 0xfffffffffffffb00, 4) SUBPIECE (stack, 0xfffffffffffffb00, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10004012, 8) , (const, 0x415a40, 8), (unique, 0x10004012, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1119, 4)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x1119, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x1119, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x1119, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x1119, 4)]
[(stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x1119, 4), (stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x1118, 4)]
[(stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x1119, 4), (stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x1118, 4)]
[(stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x1119, 4), (stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x1118, 4)]
[(stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x1119, 4), (stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x1118, 4)]
[(stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x1119, 4), (stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x1118, 4)]
[(stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x1119, 4), (stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x1118, 4)]
[(stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x1119, 4), (stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x1118, 4)]
[(stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x1119, 4), (stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x1118, 4)]
[(stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x1119, 4), (stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x1118, 4)]
[(stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x1119, 4), (stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x1118, 4)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x1119, 4), (stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x1118, 4)]
[(stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x1119, 4), (stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x1118, 4)]
[(stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x1119, 4), (stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x1118, 4)]
[(stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x1119, 4), (stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x1118, 4)]
[(stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x1119, 4), (stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x1118, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x1119, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x1118, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x1119, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x1118, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x1119, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x1118, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x1119, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x1118, 4)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x1119, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x1118, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x1119, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x1118, 4)]
[(stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x1119, 4), (stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x1118, 4)]
[(stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x1119, 4), (stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x1118, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x1119, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x1118, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x1119, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x1118, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x1119, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x1118, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x1119, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x1118, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x1119, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x1118, 4)]
[(stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x1119, 4), (stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x1118, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x1119, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x1118, 4)]
[(stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x1119, 4), (stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x1118, 4)]
[(stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x1119, 4), (stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x1118, 4)]
[(stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x1119, 4), (stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x1118, 4)]
[(stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x1119, 4), (stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x1118, 4)]
[(stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x1119, 4), (stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x1118, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x1119, 4), (stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x1118, 4)]
[(stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x1119, 4), (stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x1118, 4)]
[(stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x1119, 4), (stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x1118, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x1119, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x1118, 4)]
[(stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x1119, 4), (stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x1118, 4)]
[(stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x1119, 4), (stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x1118, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x1119, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x1118, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x1119, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x1118, 4)]
[(stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x1119, 4), (stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x1118, 4)]
[(stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x1119, 4), (stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x1118, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1119, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1118, 4)]
[ ---  CALL (ram, 0x426b40, 8) , (register, 0x98, 8)]
[(register, 0x88, 8) INT_AND (unique, 0x1000401a, 8) , (const, 0xffffffff, 8), (unique, 0x1000401a, 8) CAST (stack, 0xfffffffffffffb10, 8), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x1119, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x1118, 4), (stack, 0xfffffffffffffb10, 8) CAST (unique, 0x1000400a, 8), (unique, 0x1000400a, 8) INT_OR (unique, 0x10001159, 8) , (register, 0x88, 8), (unique, 0x10001159, 8) INT_AND (unique, 0x10004002, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10004002, 8) CAST (stack, 0xfffffffffffffb10, 8)]
[ ---  BRANCH (ram, 0x414640, 1)]
[ ---  CBRANCH (ram, 0x417211, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (unique, 0x10004022, 4) , (const, 0x0, 4), (unique, 0x10004022, 4) CAST (register, 0x88, 4)]
[(unique, 0x100026d3, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10004026, 8), (unique, 0x10004026, 8) CAST (unique, 0x3c80, 8), (unique, 0x3c80, 8) PTRADD (register, 0x38, 8) , (const, 0x1, 8) , (const, 0xd8, 8)]
[(unique, 0x10002913, 8) COPY (register, 0x98, 8)]
[ ---  CBRANCH (ram, 0x416d72, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESSEQUAL (stack, 0xfffffffffffffb28, 8) , (register, 0x0, 8), (register, 0x0, 8) PTRADD (unique, 0xbd80, 8) , (const, 0xfffffffffff67294, 8) , (const, 0x8, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10004026, 8), (unique, 0x10004026, 8) CAST (unique, 0x3c80, 8), (unique, 0x3c80, 8) PTRADD (register, 0x38, 8) , (const, 0x1, 8) , (const, 0xd8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10004046, 8) , (const, 0x416d8c, 8), (unique, 0x10004046, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x103b, 4)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x103b, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x103b, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x103b, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x103b, 4)]
[(stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x103b, 4), (stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x103a, 4)]
[(stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x103b, 4), (stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x103a, 4)]
[(stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x103b, 4), (stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x103a, 4)]
[(stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x103b, 4), (stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x103a, 4)]
[(stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x103b, 4), (stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x103a, 4)]
[(stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x103b, 4), (stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x103a, 4)]
[(stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x103b, 4), (stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x103a, 4)]
[(stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x103b, 4), (stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x103a, 4)]
[(stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x103b, 4), (stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x103a, 4)]
[(stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x103b, 4), (stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x103a, 4)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x103b, 4), (stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x103a, 4)]
[(stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x103b, 4), (stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x103a, 4)]
[(stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x103b, 4), (stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x103a, 4)]
[(stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x103b, 4), (stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x103a, 4)]
[(stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x103b, 4), (stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x103a, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x103b, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x103a, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x103b, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x103a, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x103b, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x103a, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x103b, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x103a, 4)]
[(stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x103b, 4), (stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x103a, 4)]
[(stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x103b, 4), (stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x103a, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x103b, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x103a, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x103b, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x103a, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x103b, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x103a, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x103b, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x103a, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x103b, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x103a, 4)]
[(stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x103b, 4), (stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x103a, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x103b, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x103a, 4)]
[(stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x103b, 4), (stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x103a, 4)]
[(stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x103b, 4), (stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x103a, 4)]
[(stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x103b, 4), (stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x103a, 4)]
[(stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x103b, 4), (stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x103a, 4)]
[(stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x103b, 4), (stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x103a, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x103b, 4), (stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x103a, 4)]
[(stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x103b, 4), (stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x103a, 4)]
[(stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x103b, 4), (stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x103a, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x103b, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x103a, 4)]
[(stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x103b, 4), (stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x103a, 4)]
[(stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x103b, 4), (stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x103a, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x103b, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x103a, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x103b, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x103a, 4)]
[(stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x103b, 4), (stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x103a, 4)]
[(stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x103b, 4), (stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x103a, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x103b, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x103a, 4)]
[ ---  CALL (ram, 0x41b380, 8)]
[(unique, 0x10001434, 4) SUBPIECE (stack, 0xfffffffffffffb00, 8) , (const, 0x0, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x103b, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x103a, 4), (stack, 0xfffffffffffffb00, 8) CAST (unique, 0x10004036, 8), (unique, 0x10004036, 8) INT_OR (unique, 0x10001424, 8) , (register, 0x88, 8), (unique, 0x10001424, 8) INT_AND (unique, 0x1000402e, 8) , (const, 0xffffffff00000000, 8), (unique, 0x1000402e, 8) CAST (stack, 0xfffffffffffffb00, 8)]
[(unique, 0x100026db, 8) COPY (stack, 0xfffffffffffffb08, 8), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x103b, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x103a, 4), (stack, 0xfffffffffffffb08, 8) COPY (unique, 0xbd80, 8)]
[(unique, 0x1000291b, 8) COPY (unique, 0x1000404e, 8), (unique, 0x1000404e, 8) CAST (stack, 0xfffffffffffffb10, 8), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x103b, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x103a, 4), (stack, 0xfffffffffffffb10, 8) COPY (unique, 0x1000403e, 8), (unique, 0x1000403e, 8) CAST (register, 0x98, 8)]
[ ---  BRANCH (ram, 0x4147c7, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10004066, 8) , (const, 0x4147da, 8), (unique, 0x10004066, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1008, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x1008, 4), (ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x1008, 4), (ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x1008, 4), (ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x1008, 4), (ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[(stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x1008, 4), (stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x1006, 4), (stack, 0xfffffffffffffaa0, 4) MULTIEQUAL (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4)]
[(stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x1008, 4), (stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x1006, 4), (stack, 0xfffffffffffffaa4, 4) MULTIEQUAL (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4)]
[(stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x1008, 4), (stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x1006, 4), (stack, 0xfffffffffffffaa8, 4) MULTIEQUAL (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4)]
[(stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x1008, 4), (stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x1006, 4), (stack, 0xfffffffffffffaac, 4) MULTIEQUAL (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4)]
[(stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x1008, 4), (stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x1006, 4), (stack, 0xfffffffffffffab3, 1) MULTIEQUAL (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1)]
[(stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x1008, 4), (stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x1006, 4), (stack, 0xfffffffffffffab4, 4) MULTIEQUAL (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4)]
[(stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x1008, 4), (stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x1006, 4), (stack, 0xfffffffffffffab8, 4) MULTIEQUAL (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4)]
[(stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x1008, 4), (stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x1006, 4), (stack, 0xfffffffffffffabc, 4) MULTIEQUAL (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4)]
[(stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x1008, 4), (stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x1006, 4), (stack, 0xfffffffffffffac0, 8) MULTIEQUAL (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8)]
[(stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x1008, 4), (stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x1006, 4), (stack, 0xfffffffffffffac8, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x1008, 4), (stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x1006, 4), (stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x1008, 4), (stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x1006, 4), (stack, 0xfffffffffffffad8, 4) MULTIEQUAL (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4)]
[(stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x1008, 4), (stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x1006, 4), (stack, 0xfffffffffffffadc, 4) MULTIEQUAL (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4)]
[(stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x1008, 4), (stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x1006, 4), (stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x1008, 4), (stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x1006, 4), (stack, 0xfffffffffffffae4, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x1008, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x1006, 4), (stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x1008, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x1006, 4), (stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x1008, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x1006, 4), (stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x1008, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x1006, 4), (stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x1008, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x1006, 4), (stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x1008, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x1006, 4), (stack, 0xfffffffffffffb10, 8) CAST (unique, 0x1000405e, 8), (unique, 0x1000405e, 8) INT_OR (unique, 0x10000f6d, 8) , (unique, 0x10000f75, 8), (unique, 0x10000f75, 8) INT_ZEXT (register, 0x88, 4), (unique, 0x10000f6d, 8) INT_AND (unique, 0x10004056, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10004056, 8) CAST (stack, 0xfffffffffffffb10, 8), (stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8), (register, 0x88, 4) MULTIEQUAL (register, 0x88, 4) , (unique, 0x10001434, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x1008, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x1006, 4), (stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x1008, 4), (stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x1006, 4), (stack, 0xfffffffffffffb20, 4) MULTIEQUAL (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4)]
[(stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x1008, 4), (stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x1006, 4), (stack, 0xfffffffffffffb24, 4) MULTIEQUAL (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x1008, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x1006, 4), (stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x1008, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x1006, 4), (stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x1008, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x1006, 4), (stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x1008, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x1006, 4), (stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x1008, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x1006, 4), (stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x1008, 4), (stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x1006, 4), (stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x1008, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x1006, 4), (stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x1008, 4), (stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x1006, 4), (stack, 0xfffffffffffffb58, 4) MULTIEQUAL (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4)]
[(stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x1008, 4), (stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x1006, 4), (stack, 0xfffffffffffffb5c, 4) MULTIEQUAL (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4)]
[(stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x1008, 4), (stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x1006, 4), (stack, 0xfffffffffffffb60, 2) MULTIEQUAL (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2)]
[(stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x1008, 4), (stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x1006, 4), (stack, 0xfffffffffffffb62, 2) MULTIEQUAL (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2)]
[(stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x1008, 4), (stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x1006, 4), (stack, 0xfffffffffffffb64, 4) MULTIEQUAL (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x1008, 4), (stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x1006, 4), (stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x1008, 4), (stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x1006, 4), (stack, 0xfffffffffffffb70, 4) MULTIEQUAL (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4)]
[(stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x1008, 4), (stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x1006, 4), (stack, 0xfffffffffffffb74, 4) MULTIEQUAL (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x1008, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x1006, 4), (stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x1008, 4), (stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x1006, 4), (stack, 0xfffffffffffffb88, 8) MULTIEQUAL (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8)]
[(stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x1008, 4), (stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x1006, 4), (stack, 0xfffffffffffffb90, 8) MULTIEQUAL (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x1008, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x1006, 4), (stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x1008, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x1006, 4), (stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x1008, 4), (stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x1006, 4), (stack, 0xfffffffffffffbb8, 8) MULTIEQUAL (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8)]
[(stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x1008, 4), (stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x1006, 4), (stack, 0xfffffffffffffbc0, 8) MULTIEQUAL (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1008, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1006, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CBRANCH (ram, 0x414398, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xb8, 8) , (register, 0x0, 8), (register, 0x0, 8) CALLIND (unique, 0x1000406e, 8) , (register, 0x38, 8) , (register, 0x98, 8) , (register, 0xb8, 8), (unique, 0x1000406e, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x8, 8) , (const, 0x7, 8) , (const, 0x8, 8), (register, 0x8, 8) MULTIEQUAL (unique, 0x100026d3, 8) , (unique, 0x100026db, 8), (register, 0x98, 8) MULTIEQUAL (unique, 0x10002913, 8) , (unique, 0x1000291b, 8)]
[ ---  CBRANCH (ram, 0x414e98, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESSEQUAL (register, 0xb8, 8) , (unique, 0x1000407a, 8), (unique, 0x1000407a, 8) CAST (register, 0x0, 8), (register, 0x0, 8) INT_SEXT (unique, 0x10004076, 4), (unique, 0x10004076, 4) CAST (register, 0x0, 4), (register, 0x0, 4) INT_SUB (const, 0x7fffffff, 4) , (stack, 0xfffffffffffffb10, 4), (stack, 0xfffffffffffffb10, 4) SUBPIECE (stack, 0xfffffffffffffb10, 8) , (const, 0x0, 8)]
[(register, 0x88, 4) MULTIEQUAL (register, 0x88, 4) , (register, 0x88, 4) , (register, 0x88, 4) , (register, 0x88, 4) , (register, 0x88, 4) , (register, 0x88, 4) , (register, 0x88, 4) , (register, 0x88, 4) , (register, 0x88, 4) , (register, 0x88, 4) , (register, 0x88, 4) , (register, 0x88, 4)]
[(register, 0x80, 4) MULTIEQUAL (register, 0x80, 4) , (register, 0x80, 4) , (register, 0x80, 4) , (register, 0x80, 4) , (register, 0x80, 4) , (register, 0x80, 4) , (register, 0x80, 4) , (register, 0x80, 4) , (register, 0x80, 4) , (register, 0x80, 4) , (register, 0x80, 4) , (register, 0x80, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbc0, 8) MULTIEQUAL (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8)]
[(stack, 0xfffffffffffffbb8, 8) MULTIEQUAL (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb90, 8) MULTIEQUAL (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8)]
[(stack, 0xfffffffffffffb88, 8) MULTIEQUAL (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8)]
[(stack, 0xfffffffffffffb64, 4) MULTIEQUAL (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4)]
[(stack, 0xfffffffffffffb62, 2) MULTIEQUAL (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2)]
[(stack, 0xfffffffffffffb60, 2) MULTIEQUAL (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb24, 4) MULTIEQUAL (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4)]
[(stack, 0xfffffffffffffb20, 4) MULTIEQUAL (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae4, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[(stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffadc, 4) MULTIEQUAL (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4)]
[(stack, 0xfffffffffffffad8, 4) MULTIEQUAL (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4)]
[(stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffac8, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffac0, 8) MULTIEQUAL (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8)]
[(stack, 0xfffffffffffffabc, 4) MULTIEQUAL (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4)]
[(stack, 0xfffffffffffffab8, 4) MULTIEQUAL (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4)]
[(stack, 0xfffffffffffffab4, 4) MULTIEQUAL (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4)]
[(stack, 0xfffffffffffffaac, 4) MULTIEQUAL (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4)]
[(stack, 0xfffffffffffffaa8, 4) MULTIEQUAL (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4)]
[(stack, 0xfffffffffffffaa4, 4) MULTIEQUAL (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4)]
[(stack, 0xfffffffffffffaa0, 4) MULTIEQUAL (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4)]
[(ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[(ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(register, 0xb8, 1) MULTIEQUAL (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1)]
[(register, 0x98, 4) MULTIEQUAL (unique, 0x10002a5f, 4) , (unique, 0x10002a63, 4) , (unique, 0x10002a67, 4) , (unique, 0x10002a6b, 4) , (unique, 0x10002a6f, 4) , (unique, 0x10002a73, 4) , (unique, 0x10002a77, 4) , (unique, 0x10002a7b, 4) , (unique, 0x10002a7f, 4) , (unique, 0x10002a83, 4) , (unique, 0x10002a87, 4) , (register, 0x98, 4)]
[(register, 0x90, 4) MULTIEQUAL (unique, 0x100029cb, 4) , (unique, 0x100029cf, 4) , (unique, 0x100029d3, 4) , (unique, 0x100029d7, 4) , (unique, 0x100029db, 4) , (unique, 0x100029df, 4) , (unique, 0x100029e3, 4) , (unique, 0x100029e7, 4) , (unique, 0x100029eb, 4) , (unique, 0x100029ef, 4) , (unique, 0x100029f3, 4) , (unique, 0x100029f7, 4)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x416d68, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xfffffffffffffab3, 1) , (const, 0x0, 1), (stack, 0xfffffffffffffab3, 1) MULTIEQUAL (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1)]
[(register, 0x98, 4) COPY (const, 0x0, 4)]
[(register, 0x10, 2) COPY (const, 0x0, 2)]
[ ---  BRANCH (ram, 0x415507, 1)]
[(register, 0x10, 2) INT_AND (unique, 0x10001603, 2) , (const, 0x1, 2), (unique, 0x10001603, 2) SUBPIECE (register, 0x98, 4) , (const, 0x0, 4)]
[(stack, 0xfffffffffffffb68, 8) CAST (unique, 0x10004087, 8), (unique, 0x10004087, 8) INT_ADD (unique, 0x10002457, 8) , (register, 0x80, 4), (unique, 0x10002457, 8) INT_LEFT (unique, 0x1000244f, 8) , (const, 0x20, 8), (unique, 0x1000244f, 8) INT_SEXT (unique, 0x10004083, 4), (unique, 0x10004083, 4) CAST (register, 0x90, 4)]
[(stack, 0xfffffffffffffb70, 4) COPY (register, 0xb8, 4), (register, 0xb8, 4) INT_SEXT (unique, 0x10004082, 1), (unique, 0x10004082, 1) CAST (register, 0xb8, 1)]
[(unique, 0x10000d46, 2) INT_OR (unique, 0x10000d6f, 2) , (unique, 0x10000d71, 2), (unique, 0x10000d71, 2) INT_LEFT (stack, 0xfffffffffffffac8, 2) , (const, 0x7, 4), (stack, 0xfffffffffffffac8, 2) SUBPIECE (stack, 0xfffffffffffffac8, 8) , (const, 0x0, 8), (unique, 0x10000d6f, 2) INT_OR (unique, 0x10000d73, 2) , (unique, 0x10000d75, 2), (unique, 0x10000d75, 2) INT_LEFT (stack, 0xfffffffffffffb20, 2) , (const, 0x6, 4), (stack, 0xfffffffffffffb20, 2) SUBPIECE (stack, 0xfffffffffffffb20, 4) , (const, 0x0, 8), (unique, 0x10000d73, 2) INT_OR (unique, 0x10000d79, 2) , (unique, 0x10000d7b, 2), (unique, 0x10000d7b, 2) INT_LEFT (stack, 0xfffffffffffffb08, 2) , (const, 0x5, 4), (stack, 0xfffffffffffffb08, 2) SUBPIECE (stack, 0xfffffffffffffb08, 8) , (const, 0x0, 8), (unique, 0x10000d79, 2) INT_OR (unique, 0x10000d7f, 2) , (unique, 0x10000d81, 2), (unique, 0x10000d81, 2) INT_LEFT (stack, 0xfffffffffffffae0, 2) , (const, 0x4, 4), (stack, 0xfffffffffffffae0, 2) SUBPIECE (stack, 0xfffffffffffffae0, 4) , (const, 0x0, 8), (unique, 0x10000d7f, 2) INT_OR (unique, 0x10000d85, 2) , (unique, 0x10000d87, 2), (unique, 0x10000d87, 2) INT_LEFT (stack, 0xfffffffffffffadc, 2) , (const, 0x3, 4), (stack, 0xfffffffffffffadc, 2) SUBPIECE (stack, 0xfffffffffffffadc, 4) , (const, 0x0, 8), (unique, 0x10000d85, 2) INT_OR (unique, 0x10000d8b, 2) , (unique, 0x10000d8d, 2), (unique, 0x10000d8d, 2) INT_LEFT (stack, 0xfffffffffffffb10, 2) , (const, 0x2, 4), (stack, 0xfffffffffffffb10, 2) SUBPIECE (stack, 0xfffffffffffffb10, 8) , (const, 0x0, 8), (unique, 0x10000d8b, 2) INT_OR (unique, 0x10000d91, 2) , (register, 0x10, 2), (unique, 0x10000d91, 2) INT_MULT (stack, 0xfffffffffffffaf8, 2) , (const, 0x2, 2), (stack, 0xfffffffffffffaf8, 2) SUBPIECE (stack, 0xfffffffffffffaf8, 8) , (const, 0x0, 8), (register, 0x10, 2) MULTIEQUAL (register, 0x10, 2) , (register, 0x10, 2)]
[(unique, 0x10000d48, 2) INT_LEFT (stack, 0xfffffffffffffad8, 2) , (const, 0xb, 4), (stack, 0xfffffffffffffad8, 2) SUBPIECE (stack, 0xfffffffffffffad8, 4) , (const, 0x0, 8)]
[(stack, 0xfffffffffffffb78, 4) COPY (register, 0x0, 4), (register, 0x0, 4) INT_ZEXT (stack, 0xfffffffffffffaf0, 1), (stack, 0xfffffffffffffaf0, 1) SUBPIECE (stack, 0xfffffffffffffaf0, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x415f58, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x98, 4) , (const, 0x0, 4), (register, 0x98, 4) MULTIEQUAL (register, 0x98, 4) , (register, 0x98, 4)]
[ ---  CBRANCH (ram, 0x416229, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xfffffffffffffaac, 4) , (const, 0x0, 4)]
[(stack, 0xfffffffffffffb74, 4) COPY (unique, 0x10001615, 4), (unique, 0x10001615, 4) INT_AND (unique, 0x1000126c, 4) , (const, 0xffffefff, 4), (unique, 0x1000126c, 4) INT_ZEXT (unique, 0x1000408f, 2), (unique, 0x1000408f, 2) CAST (unique, 0x1000125e, 2), (unique, 0x1000125e, 2) INT_OR (unique, 0x10001264, 2) , (unique, 0x100015dd, 2), (unique, 0x100015dd, 2) INT_AND (unique, 0x10000d46, 2) , (const, 0xff, 2), (unique, 0x10001264, 2) INT_OR (unique, 0x10001270, 2) , (unique, 0x10000d48, 2), (unique, 0x10001270, 2) INT_AND (unique, 0x10000d46, 2) , (const, 0xff00, 2)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x1b6a, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x1b6a, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x1b6a, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x1b6a, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x8, 8), (unique, 0x3100, 8) INT_ADD (unique, 0x10004099, 8) , (const, 0x10, 8), (unique, 0x10004099, 8) CAST (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10004091, 8), (unique, 0x10004091, 8) INT_AND (register, 0x0, 8) , (const, 0xfffffffffffffff0, 8), (register, 0x0, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0xf, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[(stack, 0xfffffffffffffb58, 4) SUBPIECE (unique, 0x5580, 10) , (const, 0x0, 4), (unique, 0x5580, 10) LOAD (const, 0x1b1, 4) , (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10004091, 8), (unique, 0x10004091, 8) INT_AND (register, 0x0, 8) , (const, 0xfffffffffffffff0, 8), (register, 0x0, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0xf, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[(stack, 0xfffffffffffffb5c, 4) SUBPIECE (unique, 0x100024e7, 10) , (const, 0x0, 4), (unique, 0x100024e7, 10) INT_RIGHT (unique, 0x100040a1, 10) , (const, 0x20, 4), (unique, 0x100040a1, 10) CAST (unique, 0x5580, 10), (unique, 0x5580, 10) LOAD (const, 0x1b1, 4) , (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10004091, 8), (unique, 0x10004091, 8) INT_AND (register, 0x0, 8) , (const, 0xfffffffffffffff0, 8), (register, 0x0, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0xf, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[(stack, 0xfffffffffffffb60, 2) SUBPIECE (unique, 0x100024f1, 10) , (const, 0x0, 4), (unique, 0x100024f1, 10) INT_RIGHT (unique, 0x100040ab, 10) , (const, 0x40, 4), (unique, 0x100040ab, 10) CAST (unique, 0x5580, 10), (unique, 0x5580, 10) LOAD (const, 0x1b1, 4) , (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10004091, 8), (unique, 0x10004091, 8) INT_AND (register, 0x0, 8) , (const, 0xfffffffffffffff0, 8), (register, 0x0, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0xf, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[ ---  BRANCH (ram, 0x4155d8, 1)]
[(stack, 0xfffffffffffffb74, 4) INT_OR (unique, 0x100011f3, 4) , (const, 0x1000, 4), (unique, 0x100011f3, 4) INT_ZEXT (unique, 0x100040c5, 2), (unique, 0x100040c5, 2) CAST (unique, 0x100011e5, 2), (unique, 0x100011e5, 2) INT_OR (unique, 0x100011eb, 2) , (unique, 0x100015c9, 2), (unique, 0x100015c9, 2) INT_AND (unique, 0x10000d46, 2) , (const, 0xff, 2), (unique, 0x100011eb, 2) INT_OR (unique, 0x100011f7, 2) , (unique, 0x10000d48, 2), (unique, 0x100011f7, 2) INT_AND (unique, 0x10000d46, 2) , (const, 0xff00, 2)]
[ ---  CBRANCH (ram, 0x416b80, 1) , (unique, 0xc900, 1), (unique, 0xc900, 1) INT_LESS (unique, 0xbc80, 4) , (const, 0xb0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100040bd, 8), (unique, 0x100040bd, 8) INT_ADD (unique, 0x100040b5, 8) , (const, 0x4, 8), (unique, 0x100040b5, 8) CAST (register, 0x10, 8)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x1b40, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x1b40, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x1b40, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x1b40, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x8, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x4, 8) , (const, 0x4, 8), (register, 0x0, 8) CAST (unique, 0x100040c7, 8), (unique, 0x100040c7, 8) INT_AND (register, 0x0, 8) , (const, 0xfffffffffffffff0, 8), (register, 0x0, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0xf, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[ ---  BRANCH (ram, 0x415f8a, 1)]
[(register, 0x0, 8) CAST (unique, 0x100040cf, 8), (unique, 0x100040cf, 8) INT_ADD (register, 0x0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x2, 8) , (const, 0x8, 8), (register, 0x0, 8) INT_ZEXT (unique, 0xbc80, 4)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x1b20, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x1b20, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x1b20, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x1b20, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (register, 0x10, 4), (unique, 0x3100, 8) CAST (unique, 0x100040df, 8), (unique, 0x100040df, 8) INT_ADD (unique, 0x100040d7, 8) , (const, 0x4, 8), (unique, 0x100040d7, 8) CAST (register, 0x10, 8), (register, 0x10, 4) INT_ADD (unique, 0xbc80, 4) , (const, 0x10, 4)]
[(ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[(ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(stack, 0xfffffffffffffb58, 4) COPY (unique, 0x10000e0b, 4), (unique, 0x10000e0b, 4) LOAD (const, 0x1b1, 4) , (register, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[(stack, 0xfffffffffffffb5c, 4) COPY (unique, 0x10000e0f, 4), (unique, 0x10000e0f, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000e13, 8), (unique, 0x10000e13, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x4, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[(stack, 0xfffffffffffffb60, 2) SUBPIECE (unique, 0x10000e1b, 4) , (const, 0x0, 4), (unique, 0x10000e1b, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000e1f, 8), (unique, 0x10000e1f, 8) PTRADD (register, 0x0, 8) , (const, 0x2, 8) , (const, 0x4, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[(stack, 0xfffffffffffffb62, 2) SUBPIECE (unique, 0x1000249f, 4) , (const, 0x0, 4), (unique, 0x1000249f, 4) INT_RIGHT (unique, 0x100040e7, 4) , (const, 0x10, 4), (unique, 0x100040e7, 4) CAST (unique, 0x10000e1b, 4), (unique, 0x10000e1b, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000e1f, 8), (unique, 0x10000e1f, 8) PTRADD (register, 0x0, 8) , (const, 0x2, 8) , (const, 0x4, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[(stack, 0xfffffffffffffb64, 4) COPY (unique, 0x10000e27, 4), (unique, 0x10000e27, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000e2b, 8), (unique, 0x10000e2b, 8) PTRADD (register, 0x0, 8) , (const, 0x3, 8) , (const, 0x4, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[ ---  BRANCH (ram, 0x4155d8, 1)]
[(stack, 0xfffffffffffffb74, 4) COPY (unique, 0x1000160d, 4), (unique, 0x1000160d, 4) INT_AND (unique, 0x100010a7, 4) , (const, 0xffffefff, 4), (unique, 0x100010a7, 4) INT_ZEXT (unique, 0x100040fb, 2), (unique, 0x100040fb, 2) CAST (unique, 0x10001099, 2), (unique, 0x10001099, 2) INT_OR (unique, 0x1000109f, 2) , (unique, 0x100015b5, 2), (unique, 0x100015b5, 2) INT_AND (unique, 0x10000d46, 2) , (const, 0xff, 2), (unique, 0x1000109f, 2) INT_OR (unique, 0x100010ab, 2) , (unique, 0x10000d48, 2), (unique, 0x100010ab, 2) INT_AND (unique, 0x10000d46, 2) , (const, 0xff00, 2)]
[ ---  CBRANCH (ram, 0x4167b9, 1) , (unique, 0xc900, 1), (unique, 0xc900, 1) INT_LESS (unique, 0xbc80, 4) , (const, 0xb0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100040f3, 8), (unique, 0x100040f3, 8) INT_ADD (unique, 0x100040eb, 8) , (const, 0x4, 8), (unique, 0x100040eb, 8) CAST (register, 0x10, 8)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x1ad6, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x1ad6, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x1ad6, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x1ad6, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x8, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x1, 8) , (const, 0x8, 8), (unique, 0xbd80, 8) CAST (unique, 0x100040fd, 8), (unique, 0x100040fd, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[ ---  BRANCH (ram, 0x4155cc, 1)]
[(register, 0x10, 8) CAST (unique, 0x10004105, 8), (unique, 0x10004105, 8) INT_ADD (register, 0x10, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x2, 8) , (const, 0x8, 8), (register, 0x10, 8) INT_ZEXT (unique, 0xbc80, 4)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x1a7c, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x1a7c, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x1a7c, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x1a7c, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (register, 0x0, 4), (unique, 0x3100, 8) CAST (unique, 0x10004115, 8), (unique, 0x10004115, 8) INT_ADD (unique, 0x1000410d, 8) , (const, 0x4, 8), (unique, 0x1000410d, 8) CAST (register, 0x10, 8), (register, 0x0, 4) INT_ADD (unique, 0xbc80, 4) , (const, 0x10, 4)]
[(ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[(ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(stack, 0xfffffffffffffb58, 4) SUBPIECE (unique, 0x5280, 8) , (const, 0x0, 4), (unique, 0x5280, 8) LOAD (const, 0x1b1, 4) , (register, 0x10, 8), (register, 0x10, 8) MULTIEQUAL (register, 0x10, 8) , (unique, 0xbd80, 8)]
[(stack, 0xfffffffffffffb5c, 4) SUBPIECE (unique, 0x1000245f, 8) , (const, 0x0, 4), (unique, 0x1000245f, 8) INT_RIGHT (unique, 0x1000411d, 8) , (const, 0x20, 4), (unique, 0x1000411d, 8) CAST (unique, 0x5280, 8), (unique, 0x5280, 8) LOAD (const, 0x1b1, 4) , (register, 0x10, 8), (register, 0x10, 8) MULTIEQUAL (register, 0x10, 8) , (unique, 0xbd80, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10004135, 8) , (const, 0x415603, 8), (unique, 0x10004135, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1a92, 4)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x1a92, 4), (ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x1a92, 4), (ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x1a92, 4), (ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x1a92, 4), (ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[(stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x1a92, 4), (stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x1a91, 4)]
[(stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x1a92, 4), (stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x1a91, 4)]
[(stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x1a92, 4), (stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x1a91, 4)]
[(stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x1a92, 4), (stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x1a91, 4)]
[(stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x1a92, 4), (stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x1a91, 4)]
[(stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x1a92, 4), (stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x1a91, 4)]
[(stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x1a92, 4), (stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x1a91, 4)]
[(stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x1a92, 4), (stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x1a91, 4)]
[(stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x1a92, 4), (stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x1a91, 4)]
[(stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x1a92, 4), (stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x1a91, 4)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x1a92, 4), (stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x1a91, 4)]
[(stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x1a92, 4), (stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x1a91, 4)]
[(stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x1a92, 4), (stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x1a91, 4)]
[(stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x1a92, 4), (stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x1a91, 4)]
[(stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x1a92, 4), (stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x1a91, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x1a92, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x1a91, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x1a92, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x1a91, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x1a92, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x1a91, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x1a92, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x1a91, 4)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x1a92, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x1a91, 4)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x1a92, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x1a91, 4), (stack, 0xfffffffffffffb10, 8) CAST (unique, 0x1000412d, 8), (unique, 0x1000412d, 8) INT_OR (unique, 0x100010af, 8) , (unique, 0x100010b7, 8), (unique, 0x100010b7, 8) INT_ZEXT (register, 0x88, 4), (unique, 0x100010af, 8) INT_AND (unique, 0x10004125, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10004125, 8) CAST (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x1a92, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x1a91, 4)]
[(stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x1a92, 4), (stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x1a91, 4)]
[(stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x1a92, 4), (stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x1a91, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x1a92, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x1a91, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x1a92, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x1a91, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x1a92, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x1a91, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x1a92, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x1a91, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x1a92, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x1a91, 4)]
[(stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x1a92, 4), (stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x1a91, 4), (stack, 0xfffffffffffffb48, 8) COPY (unique, 0x3200, 8), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffb58, 8)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x1a92, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x1a91, 4)]
[(stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x1a92, 4), (stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x1a91, 4), (stack, 0xfffffffffffffb58, 4) MULTIEQUAL (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4)]
[(stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x1a92, 4), (stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x1a91, 4), (stack, 0xfffffffffffffb5c, 4) MULTIEQUAL (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4)]
[(stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x1a92, 4), (stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x1a91, 4), (stack, 0xfffffffffffffb60, 2) MULTIEQUAL (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2)]
[(stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x1a92, 4), (stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x1a91, 4), (stack, 0xfffffffffffffb62, 2) MULTIEQUAL (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2)]
[(stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x1a92, 4), (stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x1a91, 4), (stack, 0xfffffffffffffb64, 4) MULTIEQUAL (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x1a92, 4), (stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x1a91, 4)]
[(stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x1a92, 4), (stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x1a91, 4)]
[(stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x1a92, 4), (stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x1a91, 4), (stack, 0xfffffffffffffb74, 4) MULTIEQUAL (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x1a92, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x1a91, 4)]
[(stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x1a92, 4), (stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x1a91, 4)]
[(stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x1a92, 4), (stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x1a91, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x1a92, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x1a91, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x1a92, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x1a91, 4)]
[(stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x1a92, 4), (stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x1a91, 4)]
[(stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x1a92, 4), (stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x1a91, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1a92, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1a91, 4)]
[ ---  CBRANCH (ram, 0x414c33, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (unique, 0x1000413d, 4) , (const, 0x0, 4), (unique, 0x1000413d, 4) CAST (register, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x46e650, 8) , (register, 0x38, 8) , (unique, 0x3200, 8) , (unique, 0x3200, 8), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffb68, 8), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffb48, 8)]
[(register, 0x88, 4) MULTIEQUAL (register, 0x88, 4) , (register, 0x88, 4) , (register, 0x88, 4) , (register, 0x88, 4) , (register, 0x88, 4) , (register, 0x88, 4) , (register, 0x88, 4) , (register, 0x88, 4) , (register, 0x88, 4) , (register, 0x88, 4) , (register, 0x88, 4) , (register, 0x88, 4) , (register, 0x88, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbc0, 8) MULTIEQUAL (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8)]
[(stack, 0xfffffffffffffbb8, 8) MULTIEQUAL (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffb90, 8) MULTIEQUAL (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8)]
[(stack, 0xfffffffffffffb88, 8) MULTIEQUAL (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb74, 4) MULTIEQUAL (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4)]
[(stack, 0xfffffffffffffb70, 4) MULTIEQUAL (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4)]
[(stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb64, 4) MULTIEQUAL (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4)]
[(stack, 0xfffffffffffffb62, 2) MULTIEQUAL (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2)]
[(stack, 0xfffffffffffffb60, 2) MULTIEQUAL (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2)]
[(stack, 0xfffffffffffffb5c, 4) MULTIEQUAL (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4)]
[(stack, 0xfffffffffffffb58, 4) MULTIEQUAL (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb24, 4) MULTIEQUAL (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4)]
[(stack, 0xfffffffffffffb20, 4) MULTIEQUAL (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae4, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[(stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffadc, 4) MULTIEQUAL (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4)]
[(stack, 0xfffffffffffffad8, 4) MULTIEQUAL (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4)]
[(stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffac8, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffac0, 8) MULTIEQUAL (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8)]
[(stack, 0xfffffffffffffabc, 4) MULTIEQUAL (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4)]
[(stack, 0xfffffffffffffab8, 4) MULTIEQUAL (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4)]
[(stack, 0xfffffffffffffab4, 4) MULTIEQUAL (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4)]
[(stack, 0xfffffffffffffab3, 1) MULTIEQUAL (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1)]
[(stack, 0xfffffffffffffaac, 4) MULTIEQUAL (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4)]
[(stack, 0xfffffffffffffaa8, 4) MULTIEQUAL (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4)]
[(stack, 0xfffffffffffffaa4, 4) MULTIEQUAL (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4)]
[(stack, 0xfffffffffffffaa0, 4) MULTIEQUAL (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4)]
[(ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[(ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(register, 0x90, 4) MULTIEQUAL (register, 0x90, 4) , (register, 0x90, 4) , (register, 0x90, 4) , (register, 0x90, 4) , (register, 0x90, 4) , (register, 0x90, 4) , (register, 0x90, 4) , (register, 0x90, 4) , (register, 0x90, 4) , (register, 0x90, 4) , (register, 0x90, 4) , (register, 0x90, 4) , (register, 0x90, 4)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8)]
[(unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffba8, 8) COPY (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x415e60, 1) , (unique, 0xc900, 1), (unique, 0xc900, 1) INT_LESS (unique, 0xbc80, 4) , (const, 0x30, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10004141, 8), (unique, 0x10004141, 8) CAST (register, 0x10, 8)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x1e4b, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x1e4b, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x1e4b, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x1e4b, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x8, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x2, 8) , (const, 0x4, 8), (unique, 0xbd80, 8) CAST (unique, 0x10004149, 8), (unique, 0x10004149, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[ ---  BRANCH (ram, 0x41454e, 1)]
[(register, 0x8, 8) CAST (unique, 0x10004151, 8), (unique, 0x10004151, 8) INT_ADD (register, 0x8, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x2, 8) , (const, 0x8, 8), (register, 0x8, 8) INT_ZEXT (unique, 0xbc80, 4)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x1cfe, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x1cfe, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x1cfe, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x1cfe, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10004159, 8) , (register, 0x0, 4), (unique, 0x10004159, 8) CAST (register, 0x10, 8), (register, 0x0, 4) INT_ADD (unique, 0xbc80, 4) , (const, 0x8, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10004181, 8) , (const, 0x414577, 8), (unique, 0x10004181, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1d11, 4)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x1d11, 4), (ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x1d11, 4), (ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x1d11, 4), (ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x1d11, 4), (ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[(stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x1d11, 4), (stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x1d10, 4)]
[(stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x1d11, 4), (stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x1d10, 4)]
[(stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x1d11, 4), (stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x1d10, 4)]
[(stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x1d11, 4), (stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x1d10, 4)]
[(stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x1d11, 4), (stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x1d10, 4)]
[(stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x1d11, 4), (stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x1d10, 4)]
[(stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x1d11, 4), (stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x1d10, 4)]
[(stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x1d11, 4), (stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x1d10, 4)]
[(stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x1d11, 4), (stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x1d10, 4)]
[(stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x1d11, 4), (stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x1d10, 4)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x1d11, 4), (stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x1d10, 4)]
[(stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x1d11, 4), (stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x1d10, 4)]
[(stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x1d11, 4), (stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x1d10, 4)]
[(stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x1d11, 4), (stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x1d10, 4)]
[(stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x1d11, 4), (stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x1d10, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x1d11, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x1d10, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x1d11, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x1d10, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x1d11, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x1d10, 4), (stack, 0xfffffffffffffaf8, 8) CAST (unique, 0x10004169, 8), (unique, 0x10004169, 8) INT_OR (unique, 0x10000eda, 8) , (unique, 0x10000ee2, 8), (unique, 0x10000ee2, 8) INT_ZEXT (register, 0x88, 4), (unique, 0x10000eda, 8) INT_AND (unique, 0x10004161, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10004161, 8) CAST (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x1d11, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x1d10, 4), (stack, 0xfffffffffffffb00, 8) COPY (unique, 0x3200, 8), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffbc8, 8)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x1d11, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x1d10, 4)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x1d11, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x1d10, 4), (stack, 0xfffffffffffffb10, 8) CAST (unique, 0x10004179, 8), (unique, 0x10004179, 8) INT_OR (unique, 0x10000eea, 8) , (unique, 0x10000ef2, 8), (unique, 0x10000ef2, 8) INT_ZEXT (register, 0x90, 4), (unique, 0x10000eea, 8) INT_AND (unique, 0x10004171, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10004171, 8) CAST (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x1d11, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x1d10, 4)]
[(stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x1d11, 4), (stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x1d10, 4)]
[(stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x1d11, 4), (stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x1d10, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x1d11, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x1d10, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x1d11, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x1d10, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x1d11, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x1d10, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x1d11, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x1d10, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x1d11, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x1d10, 4)]
[(stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x1d11, 4), (stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x1d10, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x1d11, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x1d10, 4)]
[(stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x1d11, 4), (stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x1d10, 4)]
[(stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x1d11, 4), (stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x1d10, 4)]
[(stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x1d11, 4), (stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x1d10, 4)]
[(stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x1d11, 4), (stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x1d10, 4)]
[(stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x1d11, 4), (stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x1d10, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x1d11, 4), (stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x1d10, 4)]
[(stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x1d11, 4), (stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x1d10, 4)]
[(stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x1d11, 4), (stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x1d10, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x1d11, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x1d10, 4)]
[(stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x1d11, 4), (stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x1d10, 4)]
[(stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x1d11, 4), (stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x1d10, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x1d11, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x1d10, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x1d11, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x1d10, 4)]
[(stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x1d11, 4), (stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x1d10, 4)]
[(stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x1d11, 4), (stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x1d10, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1d11, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1d10, 4)]
[ ---  CBRANCH (ram, 0x414398, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0xffffffffffffffff, 8), (register, 0x0, 8) CALL (ram, 0x453710, 8) , (unique, 0x10004189, 8) , (unique, 0xbc80, 4) , (unique, 0x3200, 8), (unique, 0x10004189, 8) CAST (unique, 0x3200, 8), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (register, 0x8, 8), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffbc8, 8), (register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (unique, 0xbd80, 8)]
[(register, 0x88, 8) INT_AND (unique, 0x10004191, 8) , (const, 0xffffffff, 8), (unique, 0x10004191, 8) CAST (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffb10, 8) CAST (unique, 0x100041a5, 8), (unique, 0x100041a5, 8) INT_OR (unique, 0x10000efa, 8) , (unique, 0x10000f02, 8), (unique, 0x10000f02, 8) INT_ZEXT (unique, 0xd080, 1), (unique, 0x10000efa, 8) INT_AND (unique, 0x1000419d, 8) , (const, 0xffffffffffffff00, 8), (unique, 0x1000419d, 8) CAST (stack, 0xfffffffffffffb10, 8), (unique, 0xd080, 1) INT_SLESS (const, 0x0, 4) , (unique, 0x10004199, 4), (unique, 0x10004199, 4) CAST (register, 0x18, 4), (register, 0x18, 4) INT_SUB (stack, 0xfffffffffffffb10, 4) , (register, 0x0, 4), (register, 0x0, 4) SUBPIECE (register, 0x0, 8) , (const, 0x0, 4), (stack, 0xfffffffffffffb10, 4) SUBPIECE (stack, 0xfffffffffffffb10, 8) , (const, 0x0, 8)]
[(unique, 0x100027eb, 8) COPY (stack, 0xfffffffffffffb00, 8)]
[ ---  CBRANCH (ram, 0x4145c0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xfffffffffffffb08, 4) , (const, 0x0, 4), (stack, 0xfffffffffffffb08, 4) SUBPIECE (stack, 0xfffffffffffffb08, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x41655c, 1) , (unique, 0xd080, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100041b9, 8) , (const, 0x41657a, 8), (unique, 0x100041b9, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1e02, 4)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x1e02, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x1e02, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x1e02, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x1e02, 4)]
[(stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x1e02, 4), (stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x1e01, 4)]
[(stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x1e02, 4), (stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x1e01, 4)]
[(stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x1e02, 4), (stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x1e01, 4)]
[(stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x1e02, 4), (stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x1e01, 4)]
[(stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x1e02, 4), (stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x1e01, 4)]
[(stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x1e02, 4), (stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x1e01, 4)]
[(stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x1e02, 4), (stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x1e01, 4)]
[(stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x1e02, 4), (stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x1e01, 4)]
[(stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x1e02, 4), (stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x1e01, 4)]
[(stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x1e02, 4), (stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x1e01, 4)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x1e02, 4), (stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x1e01, 4)]
[(stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x1e02, 4), (stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x1e01, 4)]
[(stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x1e02, 4), (stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x1e01, 4)]
[(stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x1e02, 4), (stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x1e01, 4)]
[(stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x1e02, 4), (stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x1e01, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x1e02, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x1e01, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x1e02, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x1e01, 4), (stack, 0xfffffffffffffaf0, 8) COPY (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x1e02, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x1e01, 4)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x1e02, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x1e01, 4)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x1e02, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x1e01, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x1e02, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x1e01, 4)]
[(stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x1e02, 4), (stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x1e01, 4)]
[(stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x1e02, 4), (stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x1e01, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x1e02, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x1e01, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x1e02, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x1e01, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x1e02, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x1e01, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x1e02, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x1e01, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x1e02, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x1e01, 4)]
[(stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x1e02, 4), (stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x1e01, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x1e02, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x1e01, 4)]
[(stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x1e02, 4), (stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x1e01, 4)]
[(stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x1e02, 4), (stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x1e01, 4)]
[(stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x1e02, 4), (stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x1e01, 4)]
[(stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x1e02, 4), (stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x1e01, 4)]
[(stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x1e02, 4), (stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x1e01, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x1e02, 4), (stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x1e01, 4)]
[(stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x1e02, 4), (stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x1e01, 4)]
[(stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x1e02, 4), (stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x1e01, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x1e02, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x1e01, 4)]
[(stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x1e02, 4), (stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x1e01, 4)]
[(stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x1e02, 4), (stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x1e01, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x1e02, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x1e01, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x1e02, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x1e01, 4)]
[(stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x1e02, 4), (stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x1e01, 4)]
[(stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x1e02, 4), (stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x1e01, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1e02, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1e01, 4)]
[ ---  CBRANCH (ram, 0x414398, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xfffffffffffffb00, 8) , (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x100041c9, 8), (unique, 0x100041c9, 8) CALL (ram, 0x418b00, 8) , (register, 0x38, 8) , (const, 0x20, 4) , (unique, 0x100041c1, 8), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x1e02, 4), (unique, 0x100041c1, 8) CAST (register, 0x10, 8), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x1e01, 4), (stack, 0xfffffffffffffb00, 8) COPY (register, 0x10, 8), (register, 0x10, 8) CAST (unique, 0x100041b1, 8), (unique, 0x100041b1, 8) INT_SEXT (unique, 0x100041ad, 4), (unique, 0x100041ad, 4) CAST (register, 0x18, 4)]
[ ---  CBRANCH (ram, 0x417230, 1) , (unique, 0xc900, 1), (unique, 0xc900, 1) INT_LESS (const, 0x7ffffffe, 4) , (stack, 0xfffffffffffffaf8, 4), (stack, 0xfffffffffffffaf8, 4) SUBPIECE (stack, 0xfffffffffffffaf8, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x414e98, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (register, 0x0, 4) , (register, 0x18, 4), (register, 0x0, 4) INT_SUB (const, 0x7fffffff, 4) , (stack, 0xfffffffffffffaf8, 4)]
[(register, 0x88, 8) INT_ZEXT (register, 0x88, 4), (register, 0x88, 4) INT_ADD (stack, 0xfffffffffffffaf8, 4) , (register, 0x18, 4)]
[(unique, 0x100027e3, 8) COPY (stack, 0xfffffffffffffaf0, 8)]
[ ---  BRANCH (ram, 0x4145c0, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbc0, 8) MULTIEQUAL (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8)]
[(stack, 0xfffffffffffffbb8, 8) MULTIEQUAL (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb90, 8) MULTIEQUAL (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8)]
[(stack, 0xfffffffffffffb88, 8) MULTIEQUAL (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb74, 4) MULTIEQUAL (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4)]
[(stack, 0xfffffffffffffb70, 4) MULTIEQUAL (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4)]
[(stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb64, 4) MULTIEQUAL (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4)]
[(stack, 0xfffffffffffffb62, 2) MULTIEQUAL (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2)]
[(stack, 0xfffffffffffffb60, 2) MULTIEQUAL (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2)]
[(stack, 0xfffffffffffffb5c, 4) MULTIEQUAL (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4)]
[(stack, 0xfffffffffffffb58, 4) MULTIEQUAL (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb24, 4) MULTIEQUAL (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4)]
[(stack, 0xfffffffffffffb20, 4) MULTIEQUAL (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae4, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[(stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffadc, 4) MULTIEQUAL (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4)]
[(stack, 0xfffffffffffffad8, 4) MULTIEQUAL (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4)]
[(stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffac8, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffac0, 8) MULTIEQUAL (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8)]
[(stack, 0xfffffffffffffabc, 4) MULTIEQUAL (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4)]
[(stack, 0xfffffffffffffab8, 4) MULTIEQUAL (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4)]
[(stack, 0xfffffffffffffab4, 4) MULTIEQUAL (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4)]
[(stack, 0xfffffffffffffab3, 1) MULTIEQUAL (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1)]
[(stack, 0xfffffffffffffaac, 4) MULTIEQUAL (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4)]
[(stack, 0xfffffffffffffaa8, 4) MULTIEQUAL (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4)]
[(stack, 0xfffffffffffffaa4, 4) MULTIEQUAL (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4)]
[(stack, 0xfffffffffffffaa0, 4) MULTIEQUAL (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4)]
[(ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[(ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x80, 8) MULTIEQUAL (unique, 0x100027eb, 8) , (unique, 0x100027eb, 8) , (unique, 0x100027e3, 8)]
[ ---  CBRANCH (ram, 0x417211, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (unique, 0x100041d1, 4) , (const, 0x0, 4), (unique, 0x100041d1, 4) CAST (register, 0x88, 4), (register, 0x88, 4) SUBPIECE (register, 0x88, 8) , (const, 0x0, 4), (register, 0x88, 8) MULTIEQUAL (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100041d5, 8) , (const, 0x417230, 8), (unique, 0x100041d5, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8), (register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8)]
[(stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x104d, 4), (stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x104c, 4), (stack, 0xfffffffffffffaa4, 4) MULTIEQUAL (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4)]
[(stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x104d, 4), (stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x104c, 4), (stack, 0xfffffffffffffaa8, 4) MULTIEQUAL (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4)]
[(stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x104d, 4), (stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x104c, 4), (stack, 0xfffffffffffffaac, 4) MULTIEQUAL (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4)]
[(stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x104d, 4), (stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x104c, 4), (stack, 0xfffffffffffffab3, 1) MULTIEQUAL (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1)]
[(stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x104d, 4), (stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x104c, 4), (stack, 0xfffffffffffffab4, 4) MULTIEQUAL (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4)]
[(stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x104d, 4), (stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x104c, 4), (stack, 0xfffffffffffffab8, 4) MULTIEQUAL (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4)]
[(stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x104d, 4), (stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x104c, 4), (stack, 0xfffffffffffffabc, 4) MULTIEQUAL (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4)]
[(stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x104d, 4), (stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x104c, 4), (stack, 0xfffffffffffffac0, 8) MULTIEQUAL (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8)]
[(stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x104d, 4), (stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x104c, 4), (stack, 0xfffffffffffffac8, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x104d, 4), (stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x104c, 4), (stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x104d, 4), (stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x104c, 4), (stack, 0xfffffffffffffad8, 4) MULTIEQUAL (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4)]
[(stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x104d, 4), (stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x104c, 4), (stack, 0xfffffffffffffadc, 4) MULTIEQUAL (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4)]
[(stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x104d, 4), (stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x104c, 4), (stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x104d, 4), (stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x104c, 4), (stack, 0xfffffffffffffae4, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x104d, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x104c, 4), (stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x104d, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x104c, 4), (stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x104d, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x104c, 4), (stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x104d, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x104c, 4), (stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x104d, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x104c, 4), (stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x104d, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x104c, 4), (stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x104d, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x104c, 4), (stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x104d, 4), (stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x104c, 4), (stack, 0xfffffffffffffb20, 4) MULTIEQUAL (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4)]
[(stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x104d, 4), (stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x104c, 4), (stack, 0xfffffffffffffb24, 4) MULTIEQUAL (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x104d, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x104c, 4), (stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x104d, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x104c, 4), (stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x104d, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x104c, 4), (stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x104d, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x104c, 4), (stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x104d, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x104c, 4), (stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x104d, 4), (stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x104c, 4), (stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x104d, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x104c, 4), (stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x104d, 4), (stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x104c, 4), (stack, 0xfffffffffffffb58, 4) MULTIEQUAL (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4)]
[(stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x104d, 4), (stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x104c, 4), (stack, 0xfffffffffffffb5c, 4) MULTIEQUAL (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4)]
[(stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x104d, 4), (stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x104c, 4), (stack, 0xfffffffffffffb60, 2) MULTIEQUAL (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2)]
[(stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x104d, 4), (stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x104c, 4), (stack, 0xfffffffffffffb62, 2) MULTIEQUAL (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2)]
[(stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x104d, 4), (stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x104c, 4), (stack, 0xfffffffffffffb64, 4) MULTIEQUAL (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x104d, 4), (stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x104c, 4), (stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x104d, 4), (stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x104c, 4), (stack, 0xfffffffffffffb70, 4) MULTIEQUAL (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4)]
[(stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x104d, 4), (stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x104c, 4), (stack, 0xfffffffffffffb74, 4) MULTIEQUAL (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x104d, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x104c, 4), (stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x104d, 4), (stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x104c, 4), (stack, 0xfffffffffffffb88, 8) MULTIEQUAL (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8)]
[(stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x104d, 4), (stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x104c, 4), (stack, 0xfffffffffffffb90, 8) MULTIEQUAL (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x104d, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x104c, 4), (stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x104d, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x104c, 4), (stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x104d, 4), (stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x104c, 4), (stack, 0xfffffffffffffbb8, 8) MULTIEQUAL (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8)]
[(stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x104d, 4), (stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x104c, 4), (stack, 0xfffffffffffffbc0, 8) MULTIEQUAL (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x104d, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x104c, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CALL (ram, 0x403170, 8) , (unique, 0x10001b30, 8) , (unique, 0x10001af0, 8) , (const, 0x698, 4) , (unique, 0x10001b60, 8), (unique, 0x10001b60, 8) COPY (const, 0x49ab60, 8), (unique, 0x10001b30, 8) COPY (const, 0x49aa58, 8), (unique, 0x10001af0, 8) COPY (const, 0x49a9a4, 8)]
[(ram, 0x4c4fb0, 8) COPY (ram, 0x4c4fb0, 8), (ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x104d, 4), (ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(ram, 0x4c8948, 8) COPY (ram, 0x4c8948, 8), (ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x104d, 4), (ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c8950, 8) COPY (ram, 0x4c8950, 8), (ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x104d, 4), (ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8970, 8) COPY (ram, 0x4c8970, 8), (ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x104d, 4), (ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[ ---  RETURN (const, 0x1, 4)]
[(unique, 0x100025d3, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x100041dd, 8), (unique, 0x100041dd, 8) CAST (unique, 0x3c80, 8), (unique, 0x3c80, 8) PTRADD (register, 0x38, 8) , (const, 0x1, 8) , (const, 0xd8, 8)]
[(unique, 0x100027fb, 8) COPY (register, 0x80, 8)]
[ ---  CBRANCH (ram, 0x416ae3, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESSEQUAL (stack, 0xfffffffffffffb28, 8) , (register, 0x10, 8), (register, 0x10, 8) PTRADD (unique, 0xbd80, 8) , (const, 0xfffffffffff67294, 8) , (const, 0x8, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x100041dd, 8), (unique, 0x100041dd, 8) CAST (unique, 0x3c80, 8), (unique, 0x3c80, 8) PTRADD (register, 0x38, 8) , (const, 0x1, 8) , (const, 0xd8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100041f5, 8) , (const, 0x416afd, 8), (unique, 0x100041f5, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1deb, 4)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x1deb, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x1deb, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x1deb, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x1deb, 4)]
[(stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x1deb, 4), (stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x1dea, 4)]
[(stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x1deb, 4), (stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x1dea, 4)]
[(stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x1deb, 4), (stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x1dea, 4)]
[(stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x1deb, 4), (stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x1dea, 4)]
[(stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x1deb, 4), (stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x1dea, 4)]
[(stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x1deb, 4), (stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x1dea, 4)]
[(stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x1deb, 4), (stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x1dea, 4)]
[(stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x1deb, 4), (stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x1dea, 4)]
[(stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x1deb, 4), (stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x1dea, 4)]
[(stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x1deb, 4), (stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x1dea, 4)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x1deb, 4), (stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x1dea, 4)]
[(stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x1deb, 4), (stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x1dea, 4)]
[(stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x1deb, 4), (stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x1dea, 4)]
[(stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x1deb, 4), (stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x1dea, 4)]
[(stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x1deb, 4), (stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x1dea, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x1deb, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x1dea, 4)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x1deb, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x1dea, 4)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x1deb, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x1dea, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x1deb, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x1dea, 4)]
[(stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x1deb, 4), (stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x1dea, 4)]
[(stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x1deb, 4), (stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x1dea, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x1deb, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x1dea, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x1deb, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x1dea, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x1deb, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x1dea, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x1deb, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x1dea, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x1deb, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x1dea, 4)]
[(stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x1deb, 4), (stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x1dea, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x1deb, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x1dea, 4)]
[(stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x1deb, 4), (stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x1dea, 4)]
[(stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x1deb, 4), (stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x1dea, 4)]
[(stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x1deb, 4), (stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x1dea, 4)]
[(stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x1deb, 4), (stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x1dea, 4)]
[(stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x1deb, 4), (stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x1dea, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x1deb, 4), (stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x1dea, 4)]
[(stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x1deb, 4), (stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x1dea, 4)]
[(stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x1deb, 4), (stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x1dea, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x1deb, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x1dea, 4)]
[(stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x1deb, 4), (stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x1dea, 4)]
[(stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x1deb, 4), (stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x1dea, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x1deb, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x1dea, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x1deb, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x1dea, 4)]
[(stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x1deb, 4), (stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x1dea, 4)]
[(stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x1deb, 4), (stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x1dea, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1deb, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1dea, 4)]
[ ---  CALL (ram, 0x41b380, 8)]
[(unique, 0x100013d5, 4) SUBPIECE (stack, 0xfffffffffffffaf8, 8) , (const, 0x0, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x1deb, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x1dea, 4), (stack, 0xfffffffffffffaf8, 8) CAST (unique, 0x100041ed, 8), (unique, 0x100041ed, 8) INT_OR (unique, 0x100013c5, 8) , (register, 0x88, 8), (unique, 0x100013c5, 8) INT_AND (unique, 0x100041e5, 8) , (const, 0xffffffff00000000, 8), (unique, 0x100041e5, 8) CAST (stack, 0xfffffffffffffaf8, 8)]
[(unique, 0x100025db, 8) COPY (stack, 0xfffffffffffffb00, 8), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x1deb, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x1dea, 4), (stack, 0xfffffffffffffb00, 8) COPY (unique, 0xbd80, 8)]
[(unique, 0x10002803, 8) COPY (stack, 0xfffffffffffffaf0, 8), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x1deb, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x1dea, 4), (stack, 0xfffffffffffffaf0, 8) COPY (register, 0x80, 8)]
[ ---  BRANCH (ram, 0x4145e8, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000420d, 8) , (const, 0x4145fb, 8), (unique, 0x1000420d, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1d91, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x1d91, 4), (ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x1d91, 4), (ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x1d91, 4), (ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x1d91, 4), (ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[(stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x1d91, 4), (stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x1d8f, 4), (stack, 0xfffffffffffffaa0, 4) MULTIEQUAL (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4)]
[(stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x1d91, 4), (stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x1d8f, 4), (stack, 0xfffffffffffffaa4, 4) MULTIEQUAL (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4)]
[(stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x1d91, 4), (stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x1d8f, 4), (stack, 0xfffffffffffffaa8, 4) MULTIEQUAL (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4)]
[(stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x1d91, 4), (stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x1d8f, 4), (stack, 0xfffffffffffffaac, 4) MULTIEQUAL (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4)]
[(stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x1d91, 4), (stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x1d8f, 4), (stack, 0xfffffffffffffab3, 1) MULTIEQUAL (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1)]
[(stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x1d91, 4), (stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x1d8f, 4), (stack, 0xfffffffffffffab4, 4) MULTIEQUAL (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4)]
[(stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x1d91, 4), (stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x1d8f, 4), (stack, 0xfffffffffffffab8, 4) MULTIEQUAL (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4)]
[(stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x1d91, 4), (stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x1d8f, 4), (stack, 0xfffffffffffffabc, 4) MULTIEQUAL (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4)]
[(stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x1d91, 4), (stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x1d8f, 4), (stack, 0xfffffffffffffac0, 8) MULTIEQUAL (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8)]
[(stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x1d91, 4), (stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x1d8f, 4), (stack, 0xfffffffffffffac8, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x1d91, 4), (stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x1d8f, 4), (stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x1d91, 4), (stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x1d8f, 4), (stack, 0xfffffffffffffad8, 4) MULTIEQUAL (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4)]
[(stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x1d91, 4), (stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x1d8f, 4), (stack, 0xfffffffffffffadc, 4) MULTIEQUAL (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4)]
[(stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x1d91, 4), (stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x1d8f, 4), (stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x1d91, 4), (stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x1d8f, 4), (stack, 0xfffffffffffffae4, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x1d91, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x1d8f, 4), (stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x1d91, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x1d8f, 4), (stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x1d91, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x1d8f, 4), (stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x1d91, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x1d8f, 4), (stack, 0xfffffffffffffb00, 8) CAST (unique, 0x10004205, 8), (unique, 0x10004205, 8) INT_OR (unique, 0x10000f0b, 8) , (unique, 0x10000f13, 8), (unique, 0x10000f13, 8) INT_ZEXT (register, 0x88, 4), (unique, 0x10000f0b, 8) INT_AND (unique, 0x100041fd, 8) , (const, 0xffffffff00000000, 8), (unique, 0x100041fd, 8) CAST (stack, 0xfffffffffffffb00, 8), (stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8), (register, 0x88, 4) MULTIEQUAL (register, 0x88, 4) , (unique, 0x100013d5, 4)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x1d91, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x1d8f, 4), (stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x1d91, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x1d8f, 4), (stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x1d91, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x1d8f, 4), (stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x1d91, 4), (stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x1d8f, 4), (stack, 0xfffffffffffffb20, 4) MULTIEQUAL (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4)]
[(stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x1d91, 4), (stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x1d8f, 4), (stack, 0xfffffffffffffb24, 4) MULTIEQUAL (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x1d91, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x1d8f, 4), (stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x1d91, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x1d8f, 4), (stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x1d91, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x1d8f, 4), (stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x1d91, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x1d8f, 4), (stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x1d91, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x1d8f, 4), (stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x1d91, 4), (stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x1d8f, 4), (stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x1d91, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x1d8f, 4), (stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x1d91, 4), (stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x1d8f, 4), (stack, 0xfffffffffffffb58, 4) MULTIEQUAL (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4)]
[(stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x1d91, 4), (stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x1d8f, 4), (stack, 0xfffffffffffffb5c, 4) MULTIEQUAL (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4)]
[(stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x1d91, 4), (stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x1d8f, 4), (stack, 0xfffffffffffffb60, 2) MULTIEQUAL (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2)]
[(stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x1d91, 4), (stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x1d8f, 4), (stack, 0xfffffffffffffb62, 2) MULTIEQUAL (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2)]
[(stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x1d91, 4), (stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x1d8f, 4), (stack, 0xfffffffffffffb64, 4) MULTIEQUAL (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x1d91, 4), (stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x1d8f, 4), (stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x1d91, 4), (stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x1d8f, 4), (stack, 0xfffffffffffffb70, 4) MULTIEQUAL (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4)]
[(stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x1d91, 4), (stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x1d8f, 4), (stack, 0xfffffffffffffb74, 4) MULTIEQUAL (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x1d91, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x1d8f, 4), (stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x1d91, 4), (stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x1d8f, 4), (stack, 0xfffffffffffffb88, 8) MULTIEQUAL (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8)]
[(stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x1d91, 4), (stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x1d8f, 4), (stack, 0xfffffffffffffb90, 8) MULTIEQUAL (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x1d91, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x1d8f, 4), (stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x1d91, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x1d8f, 4), (stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x1d91, 4), (stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x1d8f, 4), (stack, 0xfffffffffffffbb8, 8) MULTIEQUAL (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8)]
[(stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x1d91, 4), (stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x1d8f, 4), (stack, 0xfffffffffffffbc0, 8) MULTIEQUAL (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1d91, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1d8f, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CBRANCH (ram, 0x414398, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) CALLIND (unique, 0x10004215, 8) , (register, 0x38, 8) , (register, 0x80, 8) , (register, 0x0, 8), (unique, 0x10004215, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x7, 8) , (const, 0x8, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x100025d3, 8) , (unique, 0x100025db, 8), (register, 0x80, 8) MULTIEQUAL (unique, 0x100027fb, 8) , (unique, 0x10002803, 8)]
[ ---  CBRANCH (ram, 0x414e98, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESSEQUAL (register, 0x0, 8) , (unique, 0x10004221, 8), (unique, 0x10004221, 8) CAST (register, 0x0, 8), (register, 0x0, 8) INT_SEXT (unique, 0x1000421d, 4), (unique, 0x1000421d, 4) CAST (register, 0x0, 4), (register, 0x0, 4) INT_SUB (const, 0x7fffffff, 4) , (stack, 0xfffffffffffffb00, 4), (stack, 0xfffffffffffffb00, 4) SUBPIECE (stack, 0xfffffffffffffb00, 8) , (const, 0x0, 8)]
[(register, 0x88, 8) INT_ZEXT (register, 0x88, 4), (register, 0x88, 4) INT_ADD (stack, 0xfffffffffffffb00, 4) , (register, 0x0, 4)]
[ ---  CBRANCH (ram, 0x414640, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xfffffffffffffb08, 4) , (const, 0x0, 4), (stack, 0xfffffffffffffb08, 4) SUBPIECE (stack, 0xfffffffffffffb08, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x414e4c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xfffffffffffffb10, 1) , (const, 0x0, 1), (stack, 0xfffffffffffffb10, 1) SUBPIECE (stack, 0xfffffffffffffb10, 8) , (const, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000423d, 8) , (const, 0x414e66, 8), (unique, 0x1000423d, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8), (register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1c48, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x1c48, 4), (ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x1c48, 4), (ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x1c48, 4), (ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x1c48, 4), (ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[(stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x1c48, 4), (stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x1c47, 4), (stack, 0xfffffffffffffaa0, 4) MULTIEQUAL (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4)]
[(stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x1c48, 4), (stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x1c47, 4), (stack, 0xfffffffffffffaa4, 4) MULTIEQUAL (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4)]
[(stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x1c48, 4), (stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x1c47, 4), (stack, 0xfffffffffffffaa8, 4) MULTIEQUAL (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4)]
[(stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x1c48, 4), (stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x1c47, 4), (stack, 0xfffffffffffffaac, 4) MULTIEQUAL (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4)]
[(stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x1c48, 4), (stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x1c47, 4), (stack, 0xfffffffffffffab3, 1) MULTIEQUAL (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1)]
[(stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x1c48, 4), (stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x1c47, 4), (stack, 0xfffffffffffffab4, 4) MULTIEQUAL (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4)]
[(stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x1c48, 4), (stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x1c47, 4), (stack, 0xfffffffffffffab8, 4) MULTIEQUAL (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4)]
[(stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x1c48, 4), (stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x1c47, 4), (stack, 0xfffffffffffffabc, 4) MULTIEQUAL (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4)]
[(stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x1c48, 4), (stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x1c47, 4), (stack, 0xfffffffffffffac0, 8) MULTIEQUAL (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8)]
[(stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x1c48, 4), (stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x1c47, 4), (stack, 0xfffffffffffffac8, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x1c48, 4), (stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x1c47, 4), (stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x1c48, 4), (stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x1c47, 4), (stack, 0xfffffffffffffad8, 4) MULTIEQUAL (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4)]
[(stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x1c48, 4), (stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x1c47, 4), (stack, 0xfffffffffffffadc, 4) MULTIEQUAL (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4)]
[(stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x1c48, 4), (stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x1c47, 4), (stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x1c48, 4), (stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x1c47, 4), (stack, 0xfffffffffffffae4, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x1c48, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x1c47, 4), (stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x1c48, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x1c47, 4), (stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x1c48, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x1c47, 4), (stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x1c48, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x1c47, 4), (stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x1c48, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x1c47, 4), (stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x1c48, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x1c47, 4), (stack, 0xfffffffffffffb10, 8) CAST (unique, 0x10004235, 8), (unique, 0x10004235, 8) INT_OR (unique, 0x10000fc1, 8) , (unique, 0x10000fc9, 8), (unique, 0x10000fc9, 8) INT_ZEXT (register, 0x88, 4), (unique, 0x10000fc1, 8) INT_AND (unique, 0x1000422d, 8) , (const, 0xffffffff00000000, 8), (unique, 0x1000422d, 8) CAST (stack, 0xfffffffffffffb10, 8), (register, 0x88, 4) MULTIEQUAL (register, 0x88, 4) , (register, 0x88, 4), (stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x1c48, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x1c47, 4), (stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x1c48, 4), (stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x1c47, 4), (stack, 0xfffffffffffffb20, 4) MULTIEQUAL (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4)]
[(stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x1c48, 4), (stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x1c47, 4), (stack, 0xfffffffffffffb24, 4) MULTIEQUAL (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x1c48, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x1c47, 4), (stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x1c48, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x1c47, 4), (stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x1c48, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x1c47, 4), (stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x1c48, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x1c47, 4), (stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x1c48, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x1c47, 4), (stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x1c48, 4), (stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x1c47, 4), (stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x1c48, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x1c47, 4), (stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x1c48, 4), (stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x1c47, 4), (stack, 0xfffffffffffffb58, 4) MULTIEQUAL (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4)]
[(stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x1c48, 4), (stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x1c47, 4), (stack, 0xfffffffffffffb5c, 4) MULTIEQUAL (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4)]
[(stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x1c48, 4), (stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x1c47, 4), (stack, 0xfffffffffffffb60, 2) MULTIEQUAL (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2)]
[(stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x1c48, 4), (stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x1c47, 4), (stack, 0xfffffffffffffb62, 2) MULTIEQUAL (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2)]
[(stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x1c48, 4), (stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x1c47, 4), (stack, 0xfffffffffffffb64, 4) MULTIEQUAL (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x1c48, 4), (stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x1c47, 4), (stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x1c48, 4), (stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x1c47, 4), (stack, 0xfffffffffffffb70, 4) MULTIEQUAL (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4)]
[(stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x1c48, 4), (stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x1c47, 4), (stack, 0xfffffffffffffb74, 4) MULTIEQUAL (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x1c48, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x1c47, 4), (stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x1c48, 4), (stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x1c47, 4), (stack, 0xfffffffffffffb88, 8) MULTIEQUAL (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8)]
[(stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x1c48, 4), (stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x1c47, 4), (stack, 0xfffffffffffffb90, 8) MULTIEQUAL (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x1c48, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x1c47, 4), (stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x1c48, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x1c47, 4), (stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x1c48, 4), (stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x1c47, 4), (stack, 0xfffffffffffffbb8, 8) MULTIEQUAL (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8)]
[(stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x1c48, 4), (stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x1c47, 4), (stack, 0xfffffffffffffbc0, 8) MULTIEQUAL (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1c48, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1c47, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CBRANCH (ram, 0x414398, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xb8, 8) , (register, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x418b00, 8) , (register, 0x38, 8) , (const, 0x20, 4) , (register, 0xb8, 8), (register, 0xb8, 8) INT_SEXT (unique, 0x10004229, 4), (unique, 0x10004229, 4) CAST (register, 0x18, 4), (register, 0x18, 4) MULTIEQUAL (register, 0x18, 4) , (register, 0x18, 4)]
[ ---  CBRANCH (ram, 0x417230, 1) , (unique, 0xc900, 1), (unique, 0xc900, 1) INT_LESS (const, 0x7ffffffe, 4) , (stack, 0xfffffffffffffb10, 4), (stack, 0xfffffffffffffb10, 4) SUBPIECE (stack, 0xfffffffffffffb10, 8) , (const, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10004245, 8) , (const, 0x41724f, 8), (unique, 0x10004245, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8), (register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8)]
[(stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x1177, 4), (stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x1176, 4), (stack, 0xfffffffffffffaa4, 4) MULTIEQUAL (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4)]
[(stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x1177, 4), (stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x1176, 4), (stack, 0xfffffffffffffaa8, 4) MULTIEQUAL (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4)]
[(stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x1177, 4), (stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x1176, 4), (stack, 0xfffffffffffffaac, 4) MULTIEQUAL (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4)]
[(stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x1177, 4), (stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x1176, 4), (stack, 0xfffffffffffffab3, 1) MULTIEQUAL (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1)]
[(stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x1177, 4), (stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x1176, 4), (stack, 0xfffffffffffffab4, 4) MULTIEQUAL (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4)]
[(stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x1177, 4), (stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x1176, 4), (stack, 0xfffffffffffffab8, 4) MULTIEQUAL (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4)]
[(stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x1177, 4), (stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x1176, 4), (stack, 0xfffffffffffffabc, 4) MULTIEQUAL (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4)]
[(stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x1177, 4), (stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x1176, 4), (stack, 0xfffffffffffffac0, 8) MULTIEQUAL (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8)]
[(stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x1177, 4), (stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x1176, 4), (stack, 0xfffffffffffffac8, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x1177, 4), (stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x1176, 4), (stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x1177, 4), (stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x1176, 4), (stack, 0xfffffffffffffad8, 4) MULTIEQUAL (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4)]
[(stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x1177, 4), (stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x1176, 4), (stack, 0xfffffffffffffadc, 4) MULTIEQUAL (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4)]
[(stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x1177, 4), (stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x1176, 4), (stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x1177, 4), (stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x1176, 4), (stack, 0xfffffffffffffae4, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x1177, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x1176, 4), (stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x1177, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x1176, 4), (stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x1177, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x1176, 4), (stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x1177, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x1176, 4), (stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x1177, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x1176, 4), (stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x1177, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x1176, 4), (stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x1177, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x1176, 4), (stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x1177, 4), (stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x1176, 4), (stack, 0xfffffffffffffb20, 4) MULTIEQUAL (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4)]
[(stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x1177, 4), (stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x1176, 4), (stack, 0xfffffffffffffb24, 4) MULTIEQUAL (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x1177, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x1176, 4), (stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x1177, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x1176, 4), (stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x1177, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x1176, 4), (stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x1177, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x1176, 4), (stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x1177, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x1176, 4), (stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x1177, 4), (stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x1176, 4), (stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x1177, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x1176, 4), (stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x1177, 4), (stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x1176, 4), (stack, 0xfffffffffffffb58, 4) MULTIEQUAL (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4)]
[(stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x1177, 4), (stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x1176, 4), (stack, 0xfffffffffffffb5c, 4) MULTIEQUAL (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4)]
[(stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x1177, 4), (stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x1176, 4), (stack, 0xfffffffffffffb60, 2) MULTIEQUAL (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2)]
[(stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x1177, 4), (stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x1176, 4), (stack, 0xfffffffffffffb62, 2) MULTIEQUAL (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2)]
[(stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x1177, 4), (stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x1176, 4), (stack, 0xfffffffffffffb64, 4) MULTIEQUAL (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x1177, 4), (stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x1176, 4), (stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x1177, 4), (stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x1176, 4), (stack, 0xfffffffffffffb70, 4) MULTIEQUAL (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4)]
[(stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x1177, 4), (stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x1176, 4), (stack, 0xfffffffffffffb74, 4) MULTIEQUAL (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x1177, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x1176, 4), (stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x1177, 4), (stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x1176, 4), (stack, 0xfffffffffffffb88, 8) MULTIEQUAL (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8)]
[(stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x1177, 4), (stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x1176, 4), (stack, 0xfffffffffffffb90, 8) MULTIEQUAL (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x1177, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x1176, 4), (stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x1177, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x1176, 4), (stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x1177, 4), (stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x1176, 4), (stack, 0xfffffffffffffbb8, 8) MULTIEQUAL (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8)]
[(stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x1177, 4), (stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x1176, 4), (stack, 0xfffffffffffffbc0, 8) MULTIEQUAL (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1177, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1176, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CALL (ram, 0x403170, 8) , (unique, 0x10001b18, 8) , (unique, 0x10001af8, 8) , (const, 0x698, 4) , (unique, 0x10001b68, 8), (unique, 0x10001b68, 8) COPY (const, 0x49ab60, 8), (unique, 0x10001b18, 8) COPY (const, 0x49aa28, 8), (unique, 0x10001af8, 8) COPY (const, 0x49a9a4, 8)]
[(ram, 0x4c4fb0, 8) COPY (ram, 0x4c4fb0, 8), (ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x1177, 4), (ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(ram, 0x4c8948, 8) COPY (ram, 0x4c8948, 8), (ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x1177, 4), (ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c8950, 8) COPY (ram, 0x4c8950, 8), (ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x1177, 4), (ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8970, 8) COPY (ram, 0x4c8970, 8), (ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x1177, 4), (ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[ ---  RETURN (const, 0x1, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbc0, 8) MULTIEQUAL (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8)]
[(stack, 0xfffffffffffffbb8, 8) MULTIEQUAL (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb90, 8) MULTIEQUAL (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8)]
[(stack, 0xfffffffffffffb88, 8) MULTIEQUAL (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb74, 4) MULTIEQUAL (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4)]
[(stack, 0xfffffffffffffb70, 4) MULTIEQUAL (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4)]
[(stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb64, 4) MULTIEQUAL (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4)]
[(stack, 0xfffffffffffffb62, 2) MULTIEQUAL (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2)]
[(stack, 0xfffffffffffffb60, 2) MULTIEQUAL (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2)]
[(stack, 0xfffffffffffffb5c, 4) MULTIEQUAL (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4)]
[(stack, 0xfffffffffffffb58, 4) MULTIEQUAL (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb24, 4) MULTIEQUAL (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4)]
[(stack, 0xfffffffffffffb20, 4) MULTIEQUAL (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae4, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[(stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffadc, 4) MULTIEQUAL (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4)]
[(stack, 0xfffffffffffffad8, 4) MULTIEQUAL (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4)]
[(stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffac8, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffac0, 8) MULTIEQUAL (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8)]
[(stack, 0xfffffffffffffabc, 4) MULTIEQUAL (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4)]
[(stack, 0xfffffffffffffab8, 4) MULTIEQUAL (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4)]
[(stack, 0xfffffffffffffab4, 4) MULTIEQUAL (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4)]
[(stack, 0xfffffffffffffab3, 1) MULTIEQUAL (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1)]
[(stack, 0xfffffffffffffaac, 4) MULTIEQUAL (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4)]
[(stack, 0xfffffffffffffaa8, 4) MULTIEQUAL (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4)]
[(stack, 0xfffffffffffffaa4, 4) MULTIEQUAL (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4)]
[(stack, 0xfffffffffffffaa0, 4) MULTIEQUAL (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4)]
[(ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[(ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x4147fd, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (register, 0x0, 4) , (register, 0x18, 4), (register, 0x0, 4) INT_SUB (const, 0x7fffffff, 4) , (register, 0x88, 4), (register, 0x18, 4) MULTIEQUAL (register, 0x90, 4) , (register, 0x18, 4), (register, 0x88, 4) MULTIEQUAL (stack, 0xfffffffffffffb10, 4) , (stack, 0xfffffffffffffb10, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbc0, 8) MULTIEQUAL (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8)]
[(stack, 0xfffffffffffffbb8, 8) MULTIEQUAL (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb90, 8) MULTIEQUAL (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8)]
[(stack, 0xfffffffffffffb88, 8) MULTIEQUAL (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb74, 4) MULTIEQUAL (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4)]
[(stack, 0xfffffffffffffb70, 4) MULTIEQUAL (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4)]
[(stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb64, 4) MULTIEQUAL (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4)]
[(stack, 0xfffffffffffffb62, 2) MULTIEQUAL (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2)]
[(stack, 0xfffffffffffffb60, 2) MULTIEQUAL (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2)]
[(stack, 0xfffffffffffffb5c, 4) MULTIEQUAL (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4)]
[(stack, 0xfffffffffffffb58, 4) MULTIEQUAL (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb24, 4) MULTIEQUAL (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4)]
[(stack, 0xfffffffffffffb20, 4) MULTIEQUAL (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae4, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[(stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffadc, 4) MULTIEQUAL (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4)]
[(stack, 0xfffffffffffffad8, 4) MULTIEQUAL (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4)]
[(stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffac8, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffac0, 8) MULTIEQUAL (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8)]
[(stack, 0xfffffffffffffabc, 4) MULTIEQUAL (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4)]
[(stack, 0xfffffffffffffab8, 4) MULTIEQUAL (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4)]
[(stack, 0xfffffffffffffab4, 4) MULTIEQUAL (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4)]
[(stack, 0xfffffffffffffab3, 1) MULTIEQUAL (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1)]
[(stack, 0xfffffffffffffaac, 4) MULTIEQUAL (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4)]
[(stack, 0xfffffffffffffaa8, 4) MULTIEQUAL (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4)]
[(stack, 0xfffffffffffffaa4, 4) MULTIEQUAL (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4)]
[(stack, 0xfffffffffffffaa0, 4) MULTIEQUAL (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4)]
[(ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[(ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8)]
[(register, 0x88, 8) INT_ZEXT (register, 0x88, 4), (register, 0x88, 4) INT_ADD (register, 0x88, 4) , (register, 0x18, 4), (register, 0x18, 4) MULTIEQUAL (register, 0x18, 4) , (register, 0x18, 4), (register, 0x88, 4) MULTIEQUAL (register, 0x88, 4) , (stack, 0xfffffffffffffb10, 4)]
[ ---  BRANCH (ram, 0x414640, 1)]
[(register, 0x88, 4) MULTIEQUAL (register, 0x88, 4) , (register, 0x88, 4) , (register, 0x88, 4) , (register, 0x88, 4) , (register, 0x88, 4) , (register, 0x88, 4) , (register, 0x88, 4) , (register, 0x88, 4) , (register, 0x88, 4) , (register, 0x88, 4) , (register, 0x88, 4) , (register, 0x88, 4)]
[(register, 0x80, 4) MULTIEQUAL (register, 0x80, 4) , (register, 0x80, 4) , (register, 0x80, 4) , (register, 0x80, 4) , (register, 0x80, 4) , (register, 0x80, 4) , (register, 0x80, 4) , (register, 0x80, 4) , (register, 0x80, 4) , (register, 0x80, 4) , (register, 0x80, 4) , (register, 0x80, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbc0, 8) MULTIEQUAL (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8)]
[(stack, 0xfffffffffffffbb8, 8) MULTIEQUAL (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb90, 8) MULTIEQUAL (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8)]
[(stack, 0xfffffffffffffb88, 8) MULTIEQUAL (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8)]
[(stack, 0xfffffffffffffb64, 4) MULTIEQUAL (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4)]
[(stack, 0xfffffffffffffb62, 2) MULTIEQUAL (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2)]
[(stack, 0xfffffffffffffb60, 2) MULTIEQUAL (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2)]
[(stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb24, 4) MULTIEQUAL (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4)]
[(stack, 0xfffffffffffffb20, 4) MULTIEQUAL (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae4, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[(stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffadc, 4) MULTIEQUAL (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4)]
[(stack, 0xfffffffffffffad8, 4) MULTIEQUAL (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4)]
[(stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffac8, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffac0, 8) MULTIEQUAL (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8)]
[(stack, 0xfffffffffffffabc, 4) MULTIEQUAL (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4)]
[(stack, 0xfffffffffffffab8, 4) MULTIEQUAL (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4)]
[(stack, 0xfffffffffffffab4, 4) MULTIEQUAL (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4)]
[(stack, 0xfffffffffffffaac, 4) MULTIEQUAL (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4)]
[(stack, 0xfffffffffffffaa8, 4) MULTIEQUAL (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4)]
[(stack, 0xfffffffffffffaa4, 4) MULTIEQUAL (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4)]
[(stack, 0xfffffffffffffaa0, 4) MULTIEQUAL (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4)]
[(ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[(ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(register, 0xb8, 1) MULTIEQUAL (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1)]
[(register, 0x98, 4) MULTIEQUAL (unique, 0x10002a8b, 4) , (unique, 0x10002a8f, 4) , (unique, 0x10002a93, 4) , (unique, 0x10002a97, 4) , (unique, 0x10002a9b, 4) , (unique, 0x10002a9f, 4) , (unique, 0x10002aa3, 4) , (unique, 0x10002aa7, 4) , (unique, 0x10002aab, 4) , (unique, 0x10002aaf, 4) , (unique, 0x10002ab3, 4) , (unique, 0x10002ab7, 4)]
[(register, 0x90, 4) MULTIEQUAL (unique, 0x100029fb, 4) , (unique, 0x100029ff, 4) , (unique, 0x10002a03, 4) , (unique, 0x10002a07, 4) , (unique, 0x10002a0b, 4) , (unique, 0x10002a0f, 4) , (unique, 0x10002a13, 4) , (unique, 0x10002a17, 4) , (unique, 0x10002a1b, 4) , (unique, 0x10002a1f, 4) , (unique, 0x10002a23, 4) , (unique, 0x10002a27, 4)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x416d30, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xfffffffffffffab3, 1) , (const, 0x0, 1), (stack, 0xfffffffffffffab3, 1) MULTIEQUAL (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1)]
[(register, 0x98, 4) COPY (const, 0x0, 4)]
[(register, 0x10, 1) COPY (const, 0x0, 1)]
[ ---  BRANCH (ram, 0x414b3f, 1)]
[(register, 0x10, 1) INT_AND (unique, 0x100015f9, 1) , (const, 0x1, 1), (unique, 0x100015f9, 1) SUBPIECE (register, 0x98, 4) , (const, 0x0, 4)]
[(stack, 0xfffffffffffffb68, 8) CAST (unique, 0x10004252, 8), (unique, 0x10004252, 8) INT_ADD (unique, 0x100023af, 8) , (register, 0x80, 4), (unique, 0x100023af, 8) INT_LEFT (unique, 0x100023a7, 8) , (const, 0x20, 8), (unique, 0x100023a7, 8) INT_SEXT (unique, 0x1000424e, 4), (unique, 0x1000424e, 4) CAST (register, 0x90, 4)]
[(stack, 0xfffffffffffffb70, 4) COPY (register, 0xb8, 4), (register, 0xb8, 4) INT_SEXT (unique, 0x1000424d, 1), (unique, 0x1000424d, 1) CAST (register, 0xb8, 1)]
[(stack, 0xfffffffffffffb74, 4) INT_ZEXT (register, 0x0, 1), (register, 0x0, 1) INT_OR (unique, 0x10000cfc, 1) , (unique, 0x10000cfd, 1), (unique, 0x10000cfd, 1) INT_LEFT (stack, 0xfffffffffffffac8, 1) , (const, 0x7, 4), (stack, 0xfffffffffffffac8, 1) SUBPIECE (stack, 0xfffffffffffffac8, 8) , (const, 0x0, 8), (unique, 0x10000cfc, 1) INT_OR (unique, 0x10000d5e, 1) , (unique, 0x10000d5f, 1), (unique, 0x10000d5f, 1) INT_LEFT (stack, 0xfffffffffffffb20, 1) , (const, 0x6, 4), (stack, 0xfffffffffffffb20, 1) SUBPIECE (stack, 0xfffffffffffffb20, 4) , (const, 0x0, 8), (unique, 0x10000d5e, 1) INT_OR (unique, 0x10000d60, 1) , (unique, 0x10000d61, 1), (unique, 0x10000d61, 1) INT_LEFT (stack, 0xfffffffffffffb08, 1) , (const, 0x5, 4), (stack, 0xfffffffffffffb08, 1) SUBPIECE (stack, 0xfffffffffffffb08, 8) , (const, 0x0, 8), (unique, 0x10000d60, 1) INT_OR (unique, 0x10000d63, 1) , (unique, 0x10000d64, 1), (unique, 0x10000d64, 1) INT_LEFT (stack, 0xfffffffffffffae0, 1) , (const, 0x4, 4), (stack, 0xfffffffffffffae0, 1) SUBPIECE (stack, 0xfffffffffffffae0, 4) , (const, 0x0, 8), (unique, 0x10000d63, 1) INT_OR (unique, 0x10000d66, 1) , (unique, 0x10000d67, 1), (unique, 0x10000d67, 1) INT_LEFT (stack, 0xfffffffffffffadc, 1) , (const, 0x3, 4), (stack, 0xfffffffffffffadc, 1) SUBPIECE (stack, 0xfffffffffffffadc, 4) , (const, 0x0, 8), (unique, 0x10000d66, 1) INT_OR (unique, 0x10000d69, 1) , (unique, 0x10000d6a, 1), (unique, 0x10000d6a, 1) INT_LEFT (stack, 0xfffffffffffffb10, 1) , (const, 0x2, 4), (stack, 0xfffffffffffffb10, 1) SUBPIECE (stack, 0xfffffffffffffb10, 8) , (const, 0x0, 8), (unique, 0x10000d69, 1) INT_OR (unique, 0x10000d6c, 1) , (register, 0x10, 1), (unique, 0x10000d6c, 1) INT_MULT (stack, 0xfffffffffffffaf8, 1) , (const, 0x2, 1), (stack, 0xfffffffffffffaf8, 1) SUBPIECE (stack, 0xfffffffffffffaf8, 8) , (const, 0x0, 8), (register, 0x10, 1) MULTIEQUAL (register, 0x10, 1) , (register, 0x10, 1)]
[(stack, 0xfffffffffffffb78, 4) COPY (register, 0x0, 4), (register, 0x0, 4) INT_ZEXT (stack, 0xfffffffffffffaf0, 1), (stack, 0xfffffffffffffaf0, 1) SUBPIECE (stack, 0xfffffffffffffaf0, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x415f10, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x98, 4) , (const, 0x0, 4), (register, 0x98, 4) MULTIEQUAL (register, 0x98, 4) , (register, 0x98, 4)]
[ ---  CBRANCH (ram, 0x416201, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xfffffffffffffaac, 4) , (const, 0x0, 4)]
[(stack, 0xfffffffffffffb74, 4) COPY (stack, 0xfffffffffffffb74, 4)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x20d1, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x20d1, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x20d1, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x20d1, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x8, 8), (unique, 0x3100, 8) INT_ADD (unique, 0x10004262, 8) , (const, 0x10, 8), (unique, 0x10004262, 8) CAST (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x1000425a, 8), (unique, 0x1000425a, 8) INT_AND (register, 0x0, 8) , (const, 0xfffffffffffffff0, 8), (register, 0x0, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0xf, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[(stack, 0xfffffffffffffb58, 4) SUBPIECE (unique, 0x5580, 10) , (const, 0x0, 4), (unique, 0x5580, 10) LOAD (const, 0x1b1, 4) , (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x1000425a, 8), (unique, 0x1000425a, 8) INT_AND (register, 0x0, 8) , (const, 0xfffffffffffffff0, 8), (register, 0x0, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0xf, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[(stack, 0xfffffffffffffb5c, 4) SUBPIECE (unique, 0x100024d3, 10) , (const, 0x0, 4), (unique, 0x100024d3, 10) INT_RIGHT (unique, 0x1000426a, 10) , (const, 0x20, 4), (unique, 0x1000426a, 10) CAST (unique, 0x5580, 10), (unique, 0x5580, 10) LOAD (const, 0x1b1, 4) , (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x1000425a, 8), (unique, 0x1000425a, 8) INT_AND (register, 0x0, 8) , (const, 0xfffffffffffffff0, 8), (register, 0x0, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0xf, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[(stack, 0xfffffffffffffb60, 2) SUBPIECE (unique, 0x100024dd, 10) , (const, 0x0, 4), (unique, 0x100024dd, 10) INT_RIGHT (unique, 0x10004274, 10) , (const, 0x40, 4), (unique, 0x10004274, 10) CAST (unique, 0x5580, 10), (unique, 0x5580, 10) LOAD (const, 0x1b1, 4) , (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x1000425a, 8), (unique, 0x1000425a, 8) INT_AND (register, 0x0, 8) , (const, 0xfffffffffffffff0, 8), (register, 0x0, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0xf, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[ ---  BRANCH (ram, 0x414c00, 1)]
[(stack, 0xfffffffffffffb74, 4) COPY (unique, 0x100011e1, 4), (unique, 0x100011e1, 4) INT_ZEXT (stack, 0xfffffffffffffb74, 2), (stack, 0xfffffffffffffb74, 2) INT_ADD (unique, 0x10002499, 2) , (register, 0x0, 1), (unique, 0x10002499, 2) INT_LEFT (unique, 0x10002497, 2) , (const, 0x8, 2), (unique, 0x10002497, 2) INT_SEXT (const, 0x10, 1)]
[ ---  CBRANCH (ram, 0x416b67, 1) , (unique, 0xc900, 1), (unique, 0xc900, 1) INT_LESS (unique, 0xbc80, 4) , (const, 0xb0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10004286, 8), (unique, 0x10004286, 8) INT_ADD (unique, 0x1000427e, 8) , (const, 0x4, 8), (unique, 0x1000427e, 8) CAST (register, 0x10, 8)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x20a7, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x20a7, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x20a7, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x20a7, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x8, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x4, 8) , (const, 0x4, 8), (register, 0x0, 8) CAST (unique, 0x1000428e, 8), (unique, 0x1000428e, 8) INT_AND (register, 0x0, 8) , (const, 0xfffffffffffffff0, 8), (register, 0x0, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0xf, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[ ---  BRANCH (ram, 0x415f42, 1)]
[(register, 0x0, 8) CAST (unique, 0x10004296, 8), (unique, 0x10004296, 8) INT_ADD (register, 0x0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x2, 8) , (const, 0x8, 8), (register, 0x0, 8) INT_ZEXT (unique, 0xbc80, 4)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x2087, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x2087, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x2087, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x2087, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (register, 0x10, 4), (unique, 0x3100, 8) CAST (unique, 0x100042a6, 8), (unique, 0x100042a6, 8) INT_ADD (unique, 0x1000429e, 8) , (const, 0x4, 8), (unique, 0x1000429e, 8) CAST (register, 0x10, 8), (register, 0x10, 4) INT_ADD (unique, 0xbc80, 4) , (const, 0x10, 4)]
[(ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[(ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(stack, 0xfffffffffffffb58, 4) COPY (unique, 0x10000dcb, 4), (unique, 0x10000dcb, 4) LOAD (const, 0x1b1, 4) , (register, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[(stack, 0xfffffffffffffb5c, 4) COPY (unique, 0x10000dcf, 4), (unique, 0x10000dcf, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000dd3, 8), (unique, 0x10000dd3, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x4, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[(stack, 0xfffffffffffffb60, 2) SUBPIECE (unique, 0x10000ddb, 4) , (const, 0x0, 4), (unique, 0x10000ddb, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000ddf, 8), (unique, 0x10000ddf, 8) PTRADD (register, 0x0, 8) , (const, 0x2, 8) , (const, 0x4, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[(stack, 0xfffffffffffffb62, 2) SUBPIECE (unique, 0x1000249b, 4) , (const, 0x0, 4), (unique, 0x1000249b, 4) INT_RIGHT (unique, 0x100042ae, 4) , (const, 0x10, 4), (unique, 0x100042ae, 4) CAST (unique, 0x10000ddb, 4), (unique, 0x10000ddb, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000ddf, 8), (unique, 0x10000ddf, 8) PTRADD (register, 0x0, 8) , (const, 0x2, 8) , (const, 0x4, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[(stack, 0xfffffffffffffb64, 4) COPY (unique, 0x10000de7, 4), (unique, 0x10000de7, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000deb, 8), (unique, 0x10000deb, 8) PTRADD (register, 0x0, 8) , (const, 0x3, 8) , (const, 0x4, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[ ---  BRANCH (ram, 0x414c00, 1)]
[(stack, 0xfffffffffffffb74, 4) COPY (stack, 0xfffffffffffffb74, 4)]
[ ---  CBRANCH (ram, 0x4167a8, 1) , (unique, 0xc900, 1), (unique, 0xc900, 1) INT_LESS (unique, 0xbc80, 4) , (const, 0xb0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100042ba, 8), (unique, 0x100042ba, 8) INT_ADD (unique, 0x100042b2, 8) , (const, 0x4, 8), (unique, 0x100042b2, 8) CAST (register, 0x10, 8)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x203d, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x203d, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x203d, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x203d, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x8, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x1, 8) , (const, 0x8, 8), (unique, 0xbd80, 8) CAST (unique, 0x100042c2, 8), (unique, 0x100042c2, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[ ---  BRANCH (ram, 0x414bf4, 1)]
[(register, 0x10, 8) CAST (unique, 0x100042ca, 8), (unique, 0x100042ca, 8) INT_ADD (register, 0x10, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x2, 8) , (const, 0x8, 8), (register, 0x10, 8) INT_ZEXT (unique, 0xbc80, 4)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x2015, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x2015, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x2015, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x2015, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (register, 0x0, 4), (unique, 0x3100, 8) CAST (unique, 0x100042da, 8), (unique, 0x100042da, 8) INT_ADD (unique, 0x100042d2, 8) , (const, 0x4, 8), (unique, 0x100042d2, 8) CAST (register, 0x10, 8), (register, 0x0, 4) INT_ADD (unique, 0xbc80, 4) , (const, 0x10, 4)]
[(ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[(ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(stack, 0xfffffffffffffb58, 4) SUBPIECE (unique, 0x5280, 8) , (const, 0x0, 4), (unique, 0x5280, 8) LOAD (const, 0x1b1, 4) , (register, 0x10, 8), (register, 0x10, 8) MULTIEQUAL (register, 0x10, 8) , (unique, 0xbd80, 8)]
[(stack, 0xfffffffffffffb5c, 4) SUBPIECE (unique, 0x100023b7, 8) , (const, 0x0, 4), (unique, 0x100023b7, 8) INT_RIGHT (unique, 0x100042e2, 8) , (const, 0x20, 4), (unique, 0x100042e2, 8) CAST (unique, 0x5280, 8), (unique, 0x5280, 8) LOAD (const, 0x1b1, 4) , (register, 0x10, 8), (register, 0x10, 8) MULTIEQUAL (register, 0x10, 8) , (unique, 0xbd80, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100042fa, 8) , (const, 0x414c2b, 8), (unique, 0x100042fa, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x202b, 4)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x202b, 4), (ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x202b, 4), (ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x202b, 4), (ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x202b, 4), (ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[(stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x202b, 4), (stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x202a, 4)]
[(stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x202b, 4), (stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x202a, 4)]
[(stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x202b, 4), (stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x202a, 4)]
[(stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x202b, 4), (stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x202a, 4)]
[(stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x202b, 4), (stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x202a, 4)]
[(stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x202b, 4), (stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x202a, 4)]
[(stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x202b, 4), (stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x202a, 4)]
[(stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x202b, 4), (stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x202a, 4)]
[(stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x202b, 4), (stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x202a, 4)]
[(stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x202b, 4), (stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x202a, 4)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x202b, 4), (stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x202a, 4)]
[(stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x202b, 4), (stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x202a, 4)]
[(stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x202b, 4), (stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x202a, 4)]
[(stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x202b, 4), (stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x202a, 4)]
[(stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x202b, 4), (stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x202a, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x202b, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x202a, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x202b, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x202a, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x202b, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x202a, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x202b, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x202a, 4)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x202b, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x202a, 4)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x202b, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x202a, 4), (stack, 0xfffffffffffffb10, 8) CAST (unique, 0x100042f2, 8), (unique, 0x100042f2, 8) INT_OR (unique, 0x10000f9e, 8) , (unique, 0x10000fa6, 8), (unique, 0x10000fa6, 8) INT_ZEXT (register, 0x88, 4), (unique, 0x10000f9e, 8) INT_AND (unique, 0x100042ea, 8) , (const, 0xffffffff00000000, 8), (unique, 0x100042ea, 8) CAST (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x202b, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x202a, 4)]
[(stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x202b, 4), (stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x202a, 4)]
[(stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x202b, 4), (stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x202a, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x202b, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x202a, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x202b, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x202a, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x202b, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x202a, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x202b, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x202a, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x202b, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x202a, 4)]
[(stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x202b, 4), (stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x202a, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x202b, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x202a, 4), (stack, 0xfffffffffffffb50, 8) COPY (unique, 0x3200, 8), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffb58, 8)]
[(stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x202b, 4), (stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x202a, 4), (stack, 0xfffffffffffffb58, 4) MULTIEQUAL (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4)]
[(stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x202b, 4), (stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x202a, 4), (stack, 0xfffffffffffffb5c, 4) MULTIEQUAL (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4)]
[(stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x202b, 4), (stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x202a, 4), (stack, 0xfffffffffffffb60, 2) MULTIEQUAL (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2)]
[(stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x202b, 4), (stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x202a, 4), (stack, 0xfffffffffffffb62, 2) MULTIEQUAL (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2)]
[(stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x202b, 4), (stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x202a, 4), (stack, 0xfffffffffffffb64, 4) MULTIEQUAL (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x202b, 4), (stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x202a, 4)]
[(stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x202b, 4), (stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x202a, 4)]
[(stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x202b, 4), (stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x202a, 4), (stack, 0xfffffffffffffb74, 4) MULTIEQUAL (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x202b, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x202a, 4)]
[(stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x202b, 4), (stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x202a, 4)]
[(stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x202b, 4), (stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x202a, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x202b, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x202a, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x202b, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x202a, 4)]
[(stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x202b, 4), (stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x202a, 4)]
[(stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x202b, 4), (stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x202a, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x202b, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x202a, 4)]
[ ---  CBRANCH (ram, 0x414398, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (const, 0xffffffff, 4) , (unique, 0x10004302, 4), (unique, 0x10004302, 4) CAST (register, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x46e940, 8) , (register, 0x38, 8) , (unique, 0x3200, 8) , (unique, 0x3200, 8), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffb68, 8), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffb50, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbc0, 8) MULTIEQUAL (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8)]
[(stack, 0xfffffffffffffbb8, 8) MULTIEQUAL (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb90, 8) MULTIEQUAL (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8)]
[(stack, 0xfffffffffffffb88, 8) MULTIEQUAL (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb74, 4) MULTIEQUAL (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4)]
[(stack, 0xfffffffffffffb70, 4) MULTIEQUAL (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4)]
[(stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb64, 4) MULTIEQUAL (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4)]
[(stack, 0xfffffffffffffb62, 2) MULTIEQUAL (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2)]
[(stack, 0xfffffffffffffb60, 2) MULTIEQUAL (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2)]
[(stack, 0xfffffffffffffb5c, 4) MULTIEQUAL (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4)]
[(stack, 0xfffffffffffffb58, 4) MULTIEQUAL (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb24, 4) MULTIEQUAL (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4)]
[(stack, 0xfffffffffffffb20, 4) MULTIEQUAL (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae4, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[(stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffadc, 4) MULTIEQUAL (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4)]
[(stack, 0xfffffffffffffad8, 4) MULTIEQUAL (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4)]
[(stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffac8, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffac0, 8) MULTIEQUAL (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8)]
[(stack, 0xfffffffffffffabc, 4) MULTIEQUAL (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4)]
[(stack, 0xfffffffffffffab8, 4) MULTIEQUAL (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4)]
[(stack, 0xfffffffffffffab4, 4) MULTIEQUAL (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4)]
[(stack, 0xfffffffffffffab3, 1) MULTIEQUAL (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1)]
[(stack, 0xfffffffffffffaac, 4) MULTIEQUAL (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4)]
[(stack, 0xfffffffffffffaa8, 4) MULTIEQUAL (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4)]
[(stack, 0xfffffffffffffaa4, 4) MULTIEQUAL (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4)]
[(stack, 0xfffffffffffffaa0, 4) MULTIEQUAL (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4)]
[(ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[(ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(register, 0x0, 4) MULTIEQUAL (register, 0x0, 4) , (register, 0x0, 4)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x4157e8, 1) , (unique, 0xc900, 1), (unique, 0xc900, 1) INT_LESS (const, 0x7ffffffe, 4) , (stack, 0xfffffffffffffb10, 4), (stack, 0xfffffffffffffb10, 4) SUBPIECE (stack, 0xfffffffffffffb10, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10004306, 8) , (unique, 0x10001ac8, 8), (unique, 0x10004306, 8) CAST (register, 0x20, 8), (unique, 0x10001ac8, 8) PTRSUB (const, 0x0, 8) , (const, 0x415807, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8), (register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8)]
[(stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x884, 4), (stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x883, 4), (stack, 0xfffffffffffffaa4, 4) MULTIEQUAL (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4)]
[(stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x884, 4), (stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x883, 4), (stack, 0xfffffffffffffaa8, 4) MULTIEQUAL (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4)]
[(stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x884, 4), (stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x883, 4), (stack, 0xfffffffffffffaac, 4) MULTIEQUAL (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4)]
[(stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x884, 4), (stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x883, 4), (stack, 0xfffffffffffffab3, 1) MULTIEQUAL (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1)]
[(stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x884, 4), (stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x883, 4), (stack, 0xfffffffffffffab4, 4) MULTIEQUAL (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4)]
[(stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x884, 4), (stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x883, 4), (stack, 0xfffffffffffffab8, 4) MULTIEQUAL (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4)]
[(stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x884, 4), (stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x883, 4), (stack, 0xfffffffffffffabc, 4) MULTIEQUAL (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4)]
[(stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x884, 4), (stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x883, 4), (stack, 0xfffffffffffffac0, 8) MULTIEQUAL (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8)]
[(stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x884, 4), (stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x883, 4), (stack, 0xfffffffffffffac8, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x884, 4), (stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x883, 4), (stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x884, 4), (stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x883, 4), (stack, 0xfffffffffffffad8, 4) MULTIEQUAL (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4)]
[(stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x884, 4), (stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x883, 4), (stack, 0xfffffffffffffadc, 4) MULTIEQUAL (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4)]
[(stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x884, 4), (stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x883, 4), (stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x884, 4), (stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x883, 4), (stack, 0xfffffffffffffae4, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x884, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x883, 4), (stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x884, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x883, 4), (stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x884, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x883, 4), (stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x884, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x883, 4), (stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x884, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x883, 4), (stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x884, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x883, 4), (stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x884, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x883, 4), (stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x884, 4), (stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x883, 4), (stack, 0xfffffffffffffb20, 4) MULTIEQUAL (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4)]
[(stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x884, 4), (stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x883, 4), (stack, 0xfffffffffffffb24, 4) MULTIEQUAL (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x884, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x883, 4), (stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x884, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x883, 4), (stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x884, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x883, 4), (stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x884, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x883, 4), (stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x884, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x883, 4), (stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x884, 4), (stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x883, 4), (stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x884, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x883, 4), (stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x884, 4), (stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x883, 4), (stack, 0xfffffffffffffb58, 4) MULTIEQUAL (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4)]
[(stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x884, 4), (stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x883, 4), (stack, 0xfffffffffffffb5c, 4) MULTIEQUAL (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4)]
[(stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x884, 4), (stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x883, 4), (stack, 0xfffffffffffffb60, 2) MULTIEQUAL (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2)]
[(stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x884, 4), (stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x883, 4), (stack, 0xfffffffffffffb62, 2) MULTIEQUAL (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2)]
[(stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x884, 4), (stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x883, 4), (stack, 0xfffffffffffffb64, 4) MULTIEQUAL (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x884, 4), (stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x883, 4), (stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x884, 4), (stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x883, 4), (stack, 0xfffffffffffffb70, 4) MULTIEQUAL (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4)]
[(stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x884, 4), (stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x883, 4), (stack, 0xfffffffffffffb74, 4) MULTIEQUAL (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x884, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x883, 4), (stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x884, 4), (stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x883, 4), (stack, 0xfffffffffffffb88, 8) MULTIEQUAL (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8)]
[(stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x884, 4), (stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x883, 4), (stack, 0xfffffffffffffb90, 8) MULTIEQUAL (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x884, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x883, 4), (stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x884, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x883, 4), (stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x884, 4), (stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x883, 4), (stack, 0xfffffffffffffbb8, 8) MULTIEQUAL (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8)]
[(stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x884, 4), (stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x883, 4), (stack, 0xfffffffffffffbc0, 8) MULTIEQUAL (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x884, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x883, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CALL (ram, 0x403170, 8) , (unique, 0x10001b10, 8) , (unique, 0x10001ad8, 8) , (const, 0x697, 4) , (unique, 0x10001b48, 8), (unique, 0x10001b48, 8) COPY (const, 0x49ab60, 8), (unique, 0x10001b10, 8) COPY (const, 0x49aa28, 8), (unique, 0x10001ad8, 8) COPY (const, 0x49a9a4, 8)]
[(ram, 0x4c4fb0, 8) COPY (ram, 0x4c4fb0, 8), (ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x884, 4), (ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(ram, 0x4c8948, 8) COPY (ram, 0x4c8948, 8), (ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x884, 4), (ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c8950, 8) COPY (ram, 0x4c8950, 8), (ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x884, 4), (ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8970, 8) COPY (ram, 0x4c8970, 8), (ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x884, 4), (ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[ ---  RETURN (const, 0x1, 4)]
[ ---  CBRANCH (ram, 0x414e98, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (register, 0x10, 4) , (register, 0x0, 4), (register, 0x10, 4) INT_SUB (const, 0x7fffffff, 4) , (stack, 0xfffffffffffffb10, 4)]
[(register, 0x88, 8) INT_ZEXT (register, 0x88, 4), (register, 0x88, 4) INT_ADD (stack, 0xfffffffffffffb10, 4) , (register, 0x0, 4)]
[ ---  BRANCH (ram, 0x414640, 1)]
[(stack, 0xfffffffffffffb20, 4) MULTIEQUAL (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffadc, 4) MULTIEQUAL (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4)]
[(stack, 0xfffffffffffffad8, 4) MULTIEQUAL (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4)]
[(stack, 0xfffffffffffffae8, 8) COPY (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10004316, 8), (unique, 0x10004316, 8) INT_ADD (unique, 0x1000430e, 8) , (const, 0x1, 8), (unique, 0x1000430e, 8) CAST (stack, 0xfffffffffffffb30, 8), (stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[ ---  CBRANCH (ram, 0x4163e0, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (const, 0x9, 4) , (register, 0x0, 4), (register, 0x0, 4) INT_SUB (register, 0x0, 4) , (const, 0x30, 4), (register, 0x0, 4) INT_ZEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10004326, 8), (unique, 0x10004326, 8) INT_ADD (unique, 0x1000431e, 8) , (const, 0x1, 8), (unique, 0x1000431e, 8) CAST (stack, 0xfffffffffffffb30, 8), (stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(unique, 0x10002743, 8) COPY (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10004336, 8), (unique, 0x10004336, 8) INT_ADD (unique, 0x1000432e, 8) , (const, 0x2, 8), (unique, 0x1000432e, 8) CAST (stack, 0xfffffffffffffb30, 8)]
[(unique, 0x100029a3, 4) COPY (register, 0x8, 4), (register, 0x8, 4) INT_SUB (register, 0x8, 4) , (const, 0x30, 4), (register, 0x8, 4) INT_ZEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10004346, 8), (unique, 0x10004346, 8) INT_ADD (unique, 0x1000433e, 8) , (const, 0x2, 8), (unique, 0x1000433e, 8) CAST (stack, 0xfffffffffffffb30, 8)]
[ ---  CBRANCH (ram, 0x41642b, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (const, 0x9, 4) , (register, 0x8, 4), (register, 0x8, 4) INT_SUB (register, 0x8, 4) , (const, 0x30, 4), (register, 0x8, 4) INT_ZEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10004346, 8), (unique, 0x10004346, 8) INT_ADD (unique, 0x1000433e, 8) , (const, 0x2, 8), (unique, 0x1000433e, 8) CAST (stack, 0xfffffffffffffb30, 8)]
[(register, 0x8, 4) MULTIEQUAL (unique, 0x100029a3, 4) , (unique, 0x100029a7, 4) , (unique, 0x100029ab, 4)]
[(unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x1, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0x10002743, 8) , (unique, 0x1000274b, 8) , (unique, 0x10002753, 8)]
[(register, 0x30, 4) INT_SUB (register, 0x30, 4) , (const, 0x30, 4), (register, 0x30, 4) INT_ZEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x1, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0x10002743, 8) , (unique, 0x1000274b, 8) , (unique, 0x10002753, 8)]
[ ---  CBRANCH (ram, 0x41641d, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (const, 0xffffffff, 4) , (unique, 0x1000434e, 4), (unique, 0x1000434e, 4) CAST (register, 0x0, 4), (register, 0x0, 4) MULTIEQUAL (register, 0x0, 4) , (register, 0x0, 4) , (register, 0x0, 4)]
[ ---  CBRANCH (ram, 0x416408, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (const, 0xccccccc, 4) , (unique, 0x10004352, 4), (unique, 0x10004352, 4) CAST (register, 0x0, 4)]
[ ---  CBRANCH (ram, 0x416443, 1) , (unique, 0xd080, 1), (unique, 0xd080, 1) INT_SLESS (unique, 0x10004356, 4) , (unique, 0x1000435a, 4), (unique, 0x1000435a, 4) CAST (unique, 0x10000d56, 4), (unique, 0x10004356, 4) CAST (register, 0xb8, 4), (register, 0xb8, 4) INT_SUB (const, 0x7fffffff, 4) , (register, 0x8, 4), (unique, 0x10000d56, 4) INT_MULT (register, 0x0, 4) , (const, 0xa, 4)]
[ ---  CBRANCH (ram, 0x414e98, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (const, 0x9, 4) , (register, 0x30, 4)]
[(unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x2, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x414e98, 1) , (unique, 0xc900, 1), (unique, 0xc900, 1) INT_LESS (const, 0x9, 4) , (register, 0x8, 4), (register, 0x8, 4) INT_SUB (register, 0x8, 4) , (const, 0x30, 4), (register, 0x8, 4) INT_ZEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000435e, 8), (unique, 0x1000435e, 8) PTRADD (register, 0x10, 8) , (const, 0x2, 8) , (const, 0x1, 8)]
[(register, 0x0, 4) COPY (const, 0xffffffff, 4)]
[(unique, 0x1000274b, 8) COPY (unique, 0x3100, 8)]
[(unique, 0x100029a7, 4) COPY (register, 0x8, 4)]
[ ---  BRANCH (ram, 0x416428, 1)]
[(register, 0x0, 4) INT_ADD (unique, 0x10000d56, 4) , (register, 0x8, 4)]
[(register, 0x0, 4) MULTIEQUAL (register, 0x0, 4) , (register, 0x0, 4)]
[(unique, 0x10002753, 8) COPY (unique, 0x3100, 8)]
[(unique, 0x100029ab, 4) COPY (register, 0x30, 4)]
[ ---  CBRANCH (ram, 0x4144ce, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (register, 0x30, 4) , (const, 0xa, 4)]
[ ---  CBRANCH (ram, 0x414e98, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0xffffffff, 4)]
[(register, 0x0, 4) MULTIEQUAL (register, 0x0, 4) , (register, 0x0, 4)]
[ ---  CBRANCH (ram, 0x4149e6, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x38, 1) , (const, 0x24, 1), (register, 0x38, 1) MULTIEQUAL (unique, 0xbb00, 1) , (unique, 0xbb00, 1)]
[ ---  CBRANCH (ram, 0x4149e6, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x416030, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (unique, 0xbc80, 4) , (const, 0x30, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10004366, 8), (unique, 0x10004366, 8) CAST (register, 0x10, 8)]
[(register, 0x10, 8) CAST (unique, 0x1000436e, 8), (unique, 0x1000436e, 8) INT_ADD (register, 0x10, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x2, 8) , (const, 0x8, 8), (register, 0x10, 8) INT_ZEXT (unique, 0xbc80, 4)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x2998, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x2998, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x2998, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x2998, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10004376, 8) , (register, 0x0, 4), (unique, 0x10004376, 8) CAST (register, 0x10, 8), (register, 0x0, 4) INT_ADD (unique, 0xbc80, 4) , (const, 0x8, 4)]
[ ---  BRANCH (ram, 0x4149fe, 1)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x2821, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x2821, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x2821, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x2821, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x8, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x2, 8) , (const, 0x4, 8), (unique, 0xbd80, 8) CAST (unique, 0x1000437e, 8), (unique, 0x1000437e, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[(ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[(ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[ ---  CBRANCH (ram, 0x414a1a, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (unique, 0x10004386, 4) , (const, 0x0, 4), (unique, 0x10004386, 4) CAST (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (register, 0x10, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0xbd80, 8) , (register, 0x10, 8)]
[(stack, 0xfffffffffffffaf0, 8) CAST (unique, 0x10004391, 8), (unique, 0x10004391, 8) INT_ADD (unique, 0x1000238f, 8) , (const, 0x20, 1), (unique, 0x1000238f, 8) INT_LEFT (unique, 0x10002387, 8) , (const, 0x8, 8), (unique, 0x10002387, 8) INT_SEXT (unique, 0x1000438a, 7), (unique, 0x1000438a, 7) CAST (stack, 0xfffffffffffffaf1, 7), (stack, 0xfffffffffffffaf1, 7) SUBPIECE (stack, 0xfffffffffffffaf0, 8) , (const, 0x1, 8)]
[(register, 0x90, 4) INT_2COMP (unique, 0xbc80, 4)]
[(stack, 0xfffffffffffffb08, 8) CAST (unique, 0x1000439d, 8), (unique, 0x1000439d, 8) INT_ADD (unique, 0x1000239f, 8) , (const, 0x1, 4), (unique, 0x1000239f, 8) INT_LEFT (unique, 0x10002397, 8) , (const, 0x20, 8), (unique, 0x10002397, 8) INT_SEXT (unique, 0x10004399, 4), (unique, 0x10004399, 4) CAST (stack, 0xfffffffffffffb0c, 4), (stack, 0xfffffffffffffb0c, 4) SUBPIECE (stack, 0xfffffffffffffb08, 8) , (const, 0x4, 8)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[ ---  CBRANCH (ram, 0x414e98, 1) , (unique, 0xd080, 1), (unique, 0xd080, 1) INT_SLESS (unique, 0x100043a5, 4) , (const, 0x7fffffdf, 4), (unique, 0x100043a5, 4) CAST (register, 0x90, 4), (register, 0x90, 4) MULTIEQUAL (unique, 0xbc80, 4) , (register, 0x90, 4)]
[(unique, 0x10002e1b, 4) COPY (register, 0x88, 4)]
[ ---  CBRANCH (ram, 0x414ae7, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (const, 0x3c7, 4) , (unique, 0x100043a9, 4), (unique, 0x100043a9, 4) CAST (register, 0x90, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100043c1, 8) , (const, 0x414a5f, 8), (unique, 0x100043c1, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x2872, 4)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x2872, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x2872, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x2872, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x2872, 4)]
[(stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x2872, 4), (stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x2871, 4), (stack, 0xfffffffffffffaa4, 4) COPY (const, 0xffffffff, 4)]
[(stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x2872, 4), (stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x2871, 4)]
[(stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x2872, 4), (stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x2871, 4)]
[(stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x2872, 4), (stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x2871, 4)]
[(stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x2872, 4), (stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x2871, 4)]
[(stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x2872, 4), (stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x2871, 4)]
[(stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x2872, 4), (stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x2871, 4)]
[(stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x2872, 4), (stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x2871, 4)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x2872, 4), (stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x2871, 4)]
[(stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x2872, 4), (stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x2871, 4)]
[(stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x2872, 4), (stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x2871, 4)]
[(stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x2872, 4), (stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x2871, 4)]
[(stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x2872, 4), (stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x2871, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x2872, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x2871, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x2872, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x2871, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x2872, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x2871, 4)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x2872, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x2871, 4)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x2872, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x2871, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x2872, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x2871, 4)]
[(stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x2872, 4), (stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x2871, 4)]
[(stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x2872, 4), (stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x2871, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x2872, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x2871, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x2872, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x2871, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x2872, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x2871, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x2872, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x2871, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x2872, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x2871, 4)]
[(stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x2872, 4), (stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x2871, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x2872, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x2871, 4)]
[(stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x2872, 4), (stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x2871, 4)]
[(stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x2872, 4), (stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x2871, 4)]
[(stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x2872, 4), (stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x2871, 4)]
[(stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x2872, 4), (stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x2871, 4)]
[(stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x2872, 4), (stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x2871, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x2872, 4), (stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x2871, 4)]
[(stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x2872, 4), (stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x2871, 4)]
[(stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x2872, 4), (stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x2871, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x2872, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x2871, 4)]
[(stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x2872, 4), (stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x2871, 4)]
[(stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x2872, 4), (stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x2871, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x2872, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x2871, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x2872, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x2871, 4)]
[(stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x2872, 4), (stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x2871, 4)]
[(stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x2872, 4), (stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x2871, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2872, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2871, 4)]
[(register, 0x0, 4) CALL (ram, 0x421340, 8) , (register, 0xb8, 8), (register, 0xb8, 8) INT_ADD (register, 0xb8, 8) , (const, 0x20, 8), (register, 0xb8, 8) INT_SEXT (unique, 0x100043ad, 4), (unique, 0x100043ad, 4) CAST (register, 0x90, 4)]
[(unique, 0x10002523, 4) COPY (stack, 0xfffffffffffffab4, 4), (stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x2872, 4), (stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x2871, 4), (stack, 0xfffffffffffffab4, 4) COPY (const, 0x0, 4)]
[(unique, 0x1000251b, 4) COPY (stack, 0xfffffffffffffaa0, 4), (stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x2872, 4), (stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x2871, 4), (stack, 0xfffffffffffffaa0, 4) COPY (register, 0x88, 4)]
[(stack, 0xfffffffffffffb00, 4) SUBPIECE (stack, 0xfffffffffffffb00, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x2872, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x2871, 4), (stack, 0xfffffffffffffb00, 8) CAST (unique, 0x100043b9, 8), (unique, 0x100043b9, 8) INT_OR (unique, 0x10000f82, 8) , (unique, 0x10000f8a, 8), (unique, 0x10000f8a, 8) INT_ZEXT (register, 0x90, 4), (unique, 0x10000f82, 8) INT_AND (unique, 0x100043b1, 8) , (const, 0xffffffff00000000, 8), (unique, 0x100043b1, 8) CAST (unique, 0x3100, 8)]
[ ---  CBRANCH (ram, 0x414a8c, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (register, 0xb8, 8) , (const, 0x1001, 8), (register, 0xb8, 8) INT_ADD (register, 0xb8, 8) , (const, 0x20, 8), (register, 0xb8, 8) INT_SEXT (unique, 0x100043ad, 4), (unique, 0x100043ad, 4) CAST (register, 0x90, 4)]
[ ---  CBRANCH (ram, 0x417128, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4)]
[(register, 0x30, 8) PTRADD (register, 0x20, 8) , (unique, 0x1000057e, 8) , (const, 0x1, 8), (unique, 0x1000057e, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (unique, 0x3100, 8) , (const, 0xfffffffffffff000, 8), (unique, 0x3100, 8) INT_ADD (register, 0xb8, 8) , (const, 0x37, 8)]
[(unique, 0x1000059e, 4) SUBPIECE (unique, 0x3100, 8) , (const, 0x0, 4), (unique, 0x3100, 8) INT_ADD (register, 0xb8, 8) , (const, 0x37, 8)]
[(unique, 0x10002e37, 8) COPY (register, 0x20, 8)]
[(unique, 0x100019bd, 4) MULTIEQUAL (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4)]
[(unique, 0x100019c1, 4) MULTIEQUAL (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4)]
[(unique, 0x100019c5, 4) MULTIEQUAL (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4)]
[(unique, 0x100019c9, 4) MULTIEQUAL (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4)]
[(unique, 0x100019cd, 1) MULTIEQUAL (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1)]
[(unique, 0x100019ce, 4) MULTIEQUAL (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4)]
[(unique, 0x100019d2, 4) MULTIEQUAL (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4)]
[(unique, 0x100019d6, 4) MULTIEQUAL (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4)]
[(unique, 0x100019da, 8) MULTIEQUAL (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8)]
[(unique, 0x100019e2, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(unique, 0x100019ea, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(unique, 0x100019f2, 4) MULTIEQUAL (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4)]
[(unique, 0x100019f6, 4) MULTIEQUAL (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4)]
[(unique, 0x100019fa, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(unique, 0x100019fe, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[(unique, 0x10001a02, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(unique, 0x10001a0a, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(unique, 0x10001a12, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(unique, 0x10001a1a, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(unique, 0x10001a22, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(unique, 0x10001a2a, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(unique, 0x10001a32, 4) MULTIEQUAL (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4)]
[(unique, 0x10001a36, 4) MULTIEQUAL (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4)]
[(unique, 0x10001a3a, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(unique, 0x10001a42, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(unique, 0x10001a4a, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(unique, 0x10001a52, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(unique, 0x10001a56, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(unique, 0x10001a5a, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(unique, 0x10001a62, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(unique, 0x10001a6a, 4) MULTIEQUAL (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4)]
[(unique, 0x10001a6e, 4) MULTIEQUAL (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4)]
[(unique, 0x10001a72, 2) MULTIEQUAL (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2)]
[(unique, 0x10001a74, 2) MULTIEQUAL (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2)]
[(unique, 0x10001a76, 4) MULTIEQUAL (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4)]
[(unique, 0x10001a7a, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(unique, 0x10001a82, 4) MULTIEQUAL (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4)]
[(unique, 0x10001a86, 4) MULTIEQUAL (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4)]
[(unique, 0x10001a8a, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(unique, 0x10001a8e, 8) MULTIEQUAL (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8)]
[(unique, 0x10001a96, 8) MULTIEQUAL (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8)]
[(unique, 0x10001a9e, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(unique, 0x10001aa6, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(unique, 0x10001aae, 8) MULTIEQUAL (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8)]
[(unique, 0x10001ab6, 8) MULTIEQUAL (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8)]
[(unique, 0x10001abe, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CBRANCH (ram, 0x414ac0, 1) , (unique, 0x100019a4, 1), (unique, 0x100019a4, 1) INT_NOTEQUAL (register, 0x20, 8) , (register, 0x30, 8), (register, 0x20, 8) MULTIEQUAL (unique, 0x10002e37, 8) , (register, 0x20, 8)]
[(stack, 0xfffffffffffffaa0, 4) INDIRECT (unique, 0x100019bd, 4) , (const, 0x28d0, 4)]
[(stack, 0xfffffffffffffaa4, 4) INDIRECT (unique, 0x100019c1, 4) , (const, 0x28d0, 4)]
[(stack, 0xfffffffffffffaa8, 4) INDIRECT (unique, 0x100019c5, 4) , (const, 0x28d0, 4)]
[(stack, 0xfffffffffffffaac, 4) INDIRECT (unique, 0x100019c9, 4) , (const, 0x28d0, 4)]
[(stack, 0xfffffffffffffab3, 1) INDIRECT (unique, 0x100019cd, 1) , (const, 0x28d0, 4)]
[(stack, 0xfffffffffffffab4, 4) INDIRECT (unique, 0x100019ce, 4) , (const, 0x28d0, 4)]
[(stack, 0xfffffffffffffab8, 4) INDIRECT (unique, 0x100019d2, 4) , (const, 0x28d0, 4)]
[(stack, 0xfffffffffffffabc, 4) INDIRECT (unique, 0x100019d6, 4) , (const, 0x28d0, 4)]
[(stack, 0xfffffffffffffac0, 8) INDIRECT (unique, 0x100019da, 8) , (const, 0x28d0, 4)]
[(stack, 0xfffffffffffffac8, 8) INDIRECT (unique, 0x100019e2, 8) , (const, 0x28d0, 4)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (unique, 0x100019ea, 8) , (const, 0x28d0, 4)]
[(stack, 0xfffffffffffffad8, 4) INDIRECT (unique, 0x100019f2, 4) , (const, 0x28d0, 4)]
[(stack, 0xfffffffffffffadc, 4) INDIRECT (unique, 0x100019f6, 4) , (const, 0x28d0, 4)]
[(stack, 0xfffffffffffffae0, 4) INDIRECT (unique, 0x100019fa, 4) , (const, 0x28d0, 4)]
[(stack, 0xfffffffffffffae4, 4) INDIRECT (unique, 0x100019fe, 4) , (const, 0x28d0, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (unique, 0x10001a02, 8) , (const, 0x28d0, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (unique, 0x10001a0a, 8) , (const, 0x28d0, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (unique, 0x10001a12, 8) , (const, 0x28d0, 4)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (unique, 0x10001a1a, 8) , (const, 0x28d0, 4)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (unique, 0x10001a22, 8) , (const, 0x28d0, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (unique, 0x10001a2a, 8) , (const, 0x28d0, 4)]
[(stack, 0xfffffffffffffb20, 4) INDIRECT (unique, 0x10001a32, 4) , (const, 0x28d0, 4)]
[(stack, 0xfffffffffffffb24, 4) INDIRECT (unique, 0x10001a36, 4) , (const, 0x28d0, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (unique, 0x10001a3a, 8) , (const, 0x28d0, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (unique, 0x10001a42, 8) , (const, 0x28d0, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (unique, 0x10001a4a, 8) , (const, 0x28d0, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (unique, 0x10001a52, 4) , (const, 0x28d0, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (unique, 0x10001a56, 4) , (const, 0x28d0, 4)]
[(stack, 0xfffffffffffffb48, 8) INDIRECT (unique, 0x10001a5a, 8) , (const, 0x28d0, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (unique, 0x10001a62, 8) , (const, 0x28d0, 4)]
[(stack, 0xfffffffffffffb58, 4) INDIRECT (unique, 0x10001a6a, 4) , (const, 0x28d0, 4)]
[(stack, 0xfffffffffffffb5c, 4) INDIRECT (unique, 0x10001a6e, 4) , (const, 0x28d0, 4)]
[(stack, 0xfffffffffffffb60, 2) INDIRECT (unique, 0x10001a72, 2) , (const, 0x28d0, 4)]
[(stack, 0xfffffffffffffb62, 2) INDIRECT (unique, 0x10001a74, 2) , (const, 0x28d0, 4)]
[(stack, 0xfffffffffffffb64, 4) INDIRECT (unique, 0x10001a76, 4) , (const, 0x28d0, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (unique, 0x10001a7a, 8) , (const, 0x28d0, 4)]
[(stack, 0xfffffffffffffb70, 4) INDIRECT (unique, 0x10001a82, 4) , (const, 0x28d0, 4)]
[(stack, 0xfffffffffffffb74, 4) INDIRECT (unique, 0x10001a86, 4) , (const, 0x28d0, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (unique, 0x10001a8a, 4) , (const, 0x28d0, 4)]
[(stack, 0xfffffffffffffb88, 8) INDIRECT (unique, 0x10001a8e, 8) , (const, 0x28d0, 4)]
[(stack, 0xfffffffffffffb90, 8) INDIRECT (unique, 0x10001a96, 8) , (const, 0x28d0, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (unique, 0x10001a9e, 8) , (const, 0x28d0, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (unique, 0x10001aa6, 8) , (const, 0x28d0, 4)]
[(stack, 0xfffffffffffffbb8, 8) INDIRECT (unique, 0x10001aae, 8) , (const, 0x28d0, 4)]
[(stack, 0xfffffffffffffbc0, 8) INDIRECT (unique, 0x10001ab6, 8) , (const, 0x28d0, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (unique, 0x10001abe, 8) , (const, 0x28d0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100043d1, 8) , (unique, 0xbe00, 8), (unique, 0x100043d1, 8) CAST (unique, 0x3c80, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x100043c9, 8), (unique, 0x100043c9, 8) CAST (unique, 0x3c80, 8), (unique, 0x3c80, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffff000, 8) , (const, 0x1, 8)]
[(register, 0x20, 8) PTRADD (register, 0x20, 8) , (unique, 0x100005a6, 8) , (const, 0x1, 8), (unique, 0x100005a6, 8) INT_2COMP (register, 0x10, 8), (register, 0x10, 8) INT_ZEXT (register, 0x10, 4), (register, 0x10, 4) INT_AND (unique, 0x1000059e, 4) , (const, 0xff0, 4)]
[ ---  CBRANCH (ram, 0x414ad4, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x10, 8) , (const, 0x0, 8), (register, 0x10, 8) INT_ZEXT (register, 0x10, 4), (register, 0x10, 4) INT_AND (unique, 0x1000059e, 4) , (const, 0xff0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100043e1, 8) , (unique, 0xbe00, 8), (unique, 0x100043e1, 8) CAST (unique, 0x3880, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x100043d9, 8), (unique, 0x100043d9, 8) CAST (unique, 0x3880, 8), (unique, 0x3880, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(stack, 0xfffffffffffffb00, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x100043f1, 8), (unique, 0x100043f1, 8) INT_ADD (register, 0x0, 8) , (register, 0xb8, 8), (register, 0x0, 8) INT_AND (unique, 0x100043e9, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x100043e9, 8) CAST (unique, 0x3800, 8), (unique, 0x3800, 8) PTRADD (register, 0x20, 8) , (unique, 0x10001d10, 8) , (const, 0x1, 8), (unique, 0x10001d10, 8) INT_ADD (unique, 0x100005a6, 8) , (const, 0xf, 8)]
[(unique, 0x10002e1f, 4) COPY (unique, 0x1000251b, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10004409, 8) , (const, 0x41713e, 8), (unique, 0x10004409, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x294f, 4)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x294f, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x294f, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x294f, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x294f, 4)]
[(stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x294f, 4), (stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x294e, 4)]
[(stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x294f, 4), (stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x294e, 4)]
[(stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x294f, 4), (stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x294e, 4)]
[(stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x294f, 4), (stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x294e, 4)]
[(stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x294f, 4), (stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x294e, 4)]
[(stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x294f, 4), (stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x294e, 4), (stack, 0xfffffffffffffab4, 4) COPY (stack, 0xfffffffffffffb00, 4)]
[(stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x294f, 4), (stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x294e, 4)]
[(stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x294f, 4), (stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x294e, 4)]
[(stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x294f, 4), (stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x294e, 4)]
[(stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x294f, 4), (stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x294e, 4)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x294f, 4), (stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x294e, 4)]
[(stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x294f, 4), (stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x294e, 4)]
[(stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x294f, 4), (stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x294e, 4)]
[(stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x294f, 4), (stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x294e, 4)]
[(stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x294f, 4), (stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x294e, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x294f, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x294e, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x294f, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x294e, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x294f, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x294e, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x294f, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x294e, 4), (stack, 0xfffffffffffffb00, 8) CAST (unique, 0x10004401, 8), (unique, 0x10004401, 8) INT_OR (unique, 0x10001581, 8) , (unique, 0x10001589, 8), (unique, 0x10001589, 8) INT_ZEXT (unique, 0x10002523, 4), (unique, 0x10001581, 8) INT_AND (unique, 0x100043f9, 8) , (const, 0xffffffff00000000, 8), (unique, 0x100043f9, 8) CAST (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x294f, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x294e, 4)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x294f, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x294e, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x294f, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x294e, 4)]
[(stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x294f, 4), (stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x294e, 4)]
[(stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x294f, 4), (stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x294e, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x294f, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x294e, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x294f, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x294e, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x294f, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x294e, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x294f, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x294e, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x294f, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x294e, 4)]
[(stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x294f, 4), (stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x294e, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x294f, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x294e, 4)]
[(stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x294f, 4), (stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x294e, 4)]
[(stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x294f, 4), (stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x294e, 4)]
[(stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x294f, 4), (stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x294e, 4)]
[(stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x294f, 4), (stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x294e, 4)]
[(stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x294f, 4), (stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x294e, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x294f, 4), (stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x294e, 4)]
[(stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x294f, 4), (stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x294e, 4)]
[(stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x294f, 4), (stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x294e, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x294f, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x294e, 4)]
[(stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x294f, 4), (stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x294e, 4)]
[(stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x294f, 4), (stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x294e, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x294f, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x294e, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x294f, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x294e, 4)]
[(stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x294f, 4), (stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x294e, 4)]
[(stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x294f, 4), (stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x294e, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x294f, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x294e, 4)]
[(stack, 0xfffffffffffffb18, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x426550, 8) , (register, 0xb8, 8)]
[ ---  CBRANCH (ram, 0x4143b0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x426550, 8) , (register, 0xb8, 8)]
[(stack, 0xfffffffffffffb00, 8) COPY (register, 0xb8, 8), (register, 0xb8, 8) CAST (unique, 0x10004419, 8), (unique, 0x10004419, 8) INT_ADD (register, 0xb8, 8) , (unique, 0x10004411, 8), (unique, 0x10004411, 8) CAST (register, 0x0, 8)]
[(unique, 0x10002e23, 4) COPY (stack, 0xfffffffffffffaa0, 4)]
[ ---  BRANCH (ram, 0x414ae7, 1)]
[(register, 0x88, 4) MULTIEQUAL (unique, 0x10002e1b, 4) , (unique, 0x10002e1f, 4) , (unique, 0x10002e23, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (unique, 0x10001abe, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbc0, 8) MULTIEQUAL (stack, 0xfffffffffffffbc0, 8) , (unique, 0x10001ab6, 8) , (stack, 0xfffffffffffffbc0, 8)]
[(stack, 0xfffffffffffffbb8, 8) MULTIEQUAL (stack, 0xfffffffffffffbb8, 8) , (unique, 0x10001aae, 8) , (stack, 0xfffffffffffffbb8, 8)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (unique, 0x10001aa6, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (unique, 0x10001a9e, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb90, 8) MULTIEQUAL (stack, 0xfffffffffffffb90, 8) , (unique, 0x10001a96, 8) , (stack, 0xfffffffffffffb90, 8)]
[(stack, 0xfffffffffffffb88, 8) MULTIEQUAL (stack, 0xfffffffffffffb88, 8) , (unique, 0x10001a8e, 8) , (stack, 0xfffffffffffffb88, 8)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (unique, 0x10001a8a, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb74, 4) MULTIEQUAL (stack, 0xfffffffffffffb74, 4) , (unique, 0x10001a86, 4) , (stack, 0xfffffffffffffb74, 4)]
[(stack, 0xfffffffffffffb70, 4) MULTIEQUAL (stack, 0xfffffffffffffb70, 4) , (unique, 0x10001a82, 4) , (stack, 0xfffffffffffffb70, 4)]
[(stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (unique, 0x10001a7a, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb64, 4) MULTIEQUAL (stack, 0xfffffffffffffb64, 4) , (unique, 0x10001a76, 4) , (stack, 0xfffffffffffffb64, 4)]
[(stack, 0xfffffffffffffb62, 2) MULTIEQUAL (stack, 0xfffffffffffffb62, 2) , (unique, 0x10001a74, 2) , (stack, 0xfffffffffffffb62, 2)]
[(stack, 0xfffffffffffffb60, 2) MULTIEQUAL (stack, 0xfffffffffffffb60, 2) , (unique, 0x10001a72, 2) , (stack, 0xfffffffffffffb60, 2)]
[(stack, 0xfffffffffffffb5c, 4) MULTIEQUAL (stack, 0xfffffffffffffb5c, 4) , (unique, 0x10001a6e, 4) , (stack, 0xfffffffffffffb5c, 4)]
[(stack, 0xfffffffffffffb58, 4) MULTIEQUAL (stack, 0xfffffffffffffb58, 4) , (unique, 0x10001a6a, 4) , (stack, 0xfffffffffffffb58, 4)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (unique, 0x10001a62, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (unique, 0x10001a5a, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (unique, 0x10001a56, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (unique, 0x10001a52, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (unique, 0x10001a4a, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (unique, 0x10001a3a, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb24, 4) MULTIEQUAL (stack, 0xfffffffffffffb24, 4) , (unique, 0x10001a36, 4) , (stack, 0xfffffffffffffb24, 4)]
[(stack, 0xfffffffffffffb20, 4) MULTIEQUAL (stack, 0xfffffffffffffb20, 4) , (unique, 0x10001a32, 4) , (stack, 0xfffffffffffffb20, 4)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (unique, 0x10001a2a, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (unique, 0x10001a22, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (unique, 0x10001a1a, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (unique, 0x10001a12, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (unique, 0x10001a0a, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae4, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (unique, 0x100019fe, 4) , (stack, 0xfffffffffffffae4, 4)]
[(stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (unique, 0x100019fa, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffadc, 4) MULTIEQUAL (stack, 0xfffffffffffffadc, 4) , (unique, 0x100019f6, 4) , (stack, 0xfffffffffffffadc, 4)]
[(stack, 0xfffffffffffffad8, 4) MULTIEQUAL (stack, 0xfffffffffffffad8, 4) , (unique, 0x100019f2, 4) , (stack, 0xfffffffffffffad8, 4)]
[(stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (unique, 0x100019ea, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffac8, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (unique, 0x100019e2, 8) , (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffac0, 8) MULTIEQUAL (stack, 0xfffffffffffffac0, 8) , (unique, 0x100019da, 8) , (stack, 0xfffffffffffffac0, 8)]
[(stack, 0xfffffffffffffabc, 4) MULTIEQUAL (stack, 0xfffffffffffffabc, 4) , (unique, 0x100019d6, 4) , (stack, 0xfffffffffffffabc, 4)]
[(stack, 0xfffffffffffffab8, 4) MULTIEQUAL (stack, 0xfffffffffffffab8, 4) , (unique, 0x100019d2, 4) , (stack, 0xfffffffffffffab8, 4)]
[(stack, 0xfffffffffffffab4, 4) MULTIEQUAL (stack, 0xfffffffffffffab4, 4) , (unique, 0x100019ce, 4) , (stack, 0xfffffffffffffab4, 4)]
[(stack, 0xfffffffffffffab3, 1) MULTIEQUAL (stack, 0xfffffffffffffab3, 1) , (unique, 0x100019cd, 1) , (stack, 0xfffffffffffffab3, 1)]
[(stack, 0xfffffffffffffaac, 4) MULTIEQUAL (stack, 0xfffffffffffffaac, 4) , (unique, 0x100019c9, 4) , (stack, 0xfffffffffffffaac, 4)]
[(stack, 0xfffffffffffffaa8, 4) MULTIEQUAL (stack, 0xfffffffffffffaa8, 4) , (unique, 0x100019c5, 4) , (stack, 0xfffffffffffffaa8, 4)]
[(stack, 0xfffffffffffffaa4, 4) MULTIEQUAL (stack, 0xfffffffffffffaa4, 4) , (unique, 0x100019c1, 4) , (stack, 0xfffffffffffffaa4, 4)]
[(stack, 0xfffffffffffffaa0, 4) MULTIEQUAL (stack, 0xfffffffffffffaa0, 4) , (unique, 0x100019bd, 4) , (stack, 0xfffffffffffffaa0, 4)]
[(ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[(ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8)]
[(unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10004429, 8), (unique, 0x10004429, 8) INT_ADD (unique, 0x10004421, 8) , (const, 0x1, 8), (unique, 0x10004421, 8) CAST (stack, 0xfffffffffffffb30, 8), (stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (unique, 0x10001a42, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb30, 8) COPY (stack, 0xfffffffffffffae8, 8), (stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (unique, 0x10001a02, 8) , (stack, 0xfffffffffffffae8, 8)]
[(unique, 0x100021d9, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8)]
[(unique, 0x100021e1, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x100021e9, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(unique, 0x100021f1, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(unique, 0x100021f9, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(unique, 0x10002201, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[(unique, 0x10002209, 4) MULTIEQUAL (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4)]
[(unique, 0x1000220d, 4) MULTIEQUAL (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4)]
[(unique, 0x10002211, 4) MULTIEQUAL (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4)]
[(unique, 0x10002215, 4) MULTIEQUAL (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4)]
[(unique, 0x10002219, 1) MULTIEQUAL (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1)]
[(unique, 0x1000221a, 4) MULTIEQUAL (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4)]
[(unique, 0x1000221e, 4) MULTIEQUAL (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4)]
[(unique, 0x10002222, 4) MULTIEQUAL (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4)]
[(unique, 0x10002226, 8) MULTIEQUAL (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8)]
[(unique, 0x1000222e, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(unique, 0x10002236, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(unique, 0x1000223e, 4) MULTIEQUAL (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4)]
[(unique, 0x10002242, 4) MULTIEQUAL (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4)]
[(unique, 0x10002246, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(unique, 0x1000224a, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[(unique, 0x1000224e, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(unique, 0x10002256, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(unique, 0x1000225e, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(unique, 0x10002266, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(unique, 0x1000226e, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(unique, 0x10002276, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(unique, 0x1000227e, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(unique, 0x10002286, 4) MULTIEQUAL (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4)]
[(unique, 0x1000228a, 4) MULTIEQUAL (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4)]
[(unique, 0x1000228e, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(unique, 0x10002296, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(unique, 0x1000229e, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(unique, 0x100022a6, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(unique, 0x100022aa, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(unique, 0x100022ae, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(unique, 0x100022b6, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(unique, 0x100022be, 4) MULTIEQUAL (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4)]
[(unique, 0x100022c2, 4) MULTIEQUAL (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4)]
[(unique, 0x100022c6, 2) MULTIEQUAL (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2)]
[(unique, 0x100022c8, 2) MULTIEQUAL (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2)]
[(unique, 0x100022ca, 4) MULTIEQUAL (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4)]
[(unique, 0x100022ce, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(unique, 0x100022d6, 4) MULTIEQUAL (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4)]
[(unique, 0x100022da, 4) MULTIEQUAL (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4)]
[(unique, 0x100022de, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(unique, 0x100022e2, 8) MULTIEQUAL (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8)]
[(unique, 0x100022ea, 8) MULTIEQUAL (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8)]
[(unique, 0x100022f2, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(unique, 0x100022fa, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(unique, 0x10002302, 8) MULTIEQUAL (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8)]
[(unique, 0x1000230a, 8) MULTIEQUAL (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8)]
[(unique, 0x10002312, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(unique, 0x1000231b, 4) MULTIEQUAL (register, 0x88, 4) , (register, 0x88, 4)]
[ ---  CBRANCH (ram, 0x414378, 1) , (unique, 0x100021d8, 1), (unique, 0x100021d8, 1) INT_LESS (unique, 0x10004431, 1) , (const, 0x5b, 1), (unique, 0x10004431, 1) CAST (register, 0x0, 1), (register, 0x0, 1) INT_SUB (unique, 0x1000231a, 1) , (const, 0x20, 1), (unique, 0x1000231a, 1) MULTIEQUAL (unique, 0xbb00, 1) , (register, 0xb8, 1)]
[(stack, 0xfffffffffffffaa0, 4) INDIRECT (unique, 0x10002209, 4) , (const, 0x2198, 4)]
[(stack, 0xfffffffffffffaa4, 4) INDIRECT (unique, 0x1000220d, 4) , (const, 0x2198, 4)]
[(stack, 0xfffffffffffffaa8, 4) INDIRECT (unique, 0x10002211, 4) , (const, 0x2198, 4)]
[(stack, 0xfffffffffffffaac, 4) INDIRECT (unique, 0x10002215, 4) , (const, 0x2198, 4)]
[(stack, 0xfffffffffffffab3, 1) INDIRECT (unique, 0x10002219, 1) , (const, 0x2198, 4)]
[(stack, 0xfffffffffffffab4, 4) INDIRECT (unique, 0x1000221a, 4) , (const, 0x2198, 4)]
[(stack, 0xfffffffffffffab8, 4) INDIRECT (unique, 0x1000221e, 4) , (const, 0x2198, 4)]
[(stack, 0xfffffffffffffabc, 4) INDIRECT (unique, 0x10002222, 4) , (const, 0x2198, 4)]
[(stack, 0xfffffffffffffac0, 8) INDIRECT (unique, 0x10002226, 8) , (const, 0x2198, 4)]
[(stack, 0xfffffffffffffac8, 8) INDIRECT (unique, 0x1000222e, 8) , (const, 0x2198, 4)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (unique, 0x10002236, 8) , (const, 0x2198, 4)]
[(stack, 0xfffffffffffffad8, 4) INDIRECT (unique, 0x1000223e, 4) , (const, 0x2198, 4)]
[(stack, 0xfffffffffffffadc, 4) INDIRECT (unique, 0x10002242, 4) , (const, 0x2198, 4)]
[(stack, 0xfffffffffffffae0, 4) INDIRECT (unique, 0x10002246, 4) , (const, 0x2198, 4)]
[(stack, 0xfffffffffffffae4, 4) INDIRECT (unique, 0x1000224a, 4) , (const, 0x2198, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (unique, 0x1000224e, 8) , (const, 0x2198, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (unique, 0x10002256, 8) , (const, 0x2198, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (unique, 0x1000225e, 8) , (const, 0x2198, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (unique, 0x10002266, 8) , (const, 0x2198, 4)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (unique, 0x1000226e, 8) , (const, 0x2198, 4)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (unique, 0x10002276, 8) , (const, 0x2198, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (unique, 0x1000227e, 8) , (const, 0x2198, 4)]
[(stack, 0xfffffffffffffb20, 4) INDIRECT (unique, 0x10002286, 4) , (const, 0x2198, 4)]
[(stack, 0xfffffffffffffb24, 4) INDIRECT (unique, 0x1000228a, 4) , (const, 0x2198, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (unique, 0x1000228e, 8) , (const, 0x2198, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (unique, 0x10002296, 8) , (const, 0x2198, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (unique, 0x1000229e, 8) , (const, 0x2198, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (unique, 0x100022a6, 4) , (const, 0x2198, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (unique, 0x100022aa, 4) , (const, 0x2198, 4)]
[(stack, 0xfffffffffffffb48, 8) INDIRECT (unique, 0x100022ae, 8) , (const, 0x2198, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (unique, 0x100022b6, 8) , (const, 0x2198, 4)]
[(stack, 0xfffffffffffffb58, 4) INDIRECT (unique, 0x100022be, 4) , (const, 0x2198, 4)]
[(stack, 0xfffffffffffffb5c, 4) INDIRECT (unique, 0x100022c2, 4) , (const, 0x2198, 4)]
[(stack, 0xfffffffffffffb60, 2) INDIRECT (unique, 0x100022c6, 2) , (const, 0x2198, 4)]
[(stack, 0xfffffffffffffb62, 2) INDIRECT (unique, 0x100022c8, 2) , (const, 0x2198, 4)]
[(stack, 0xfffffffffffffb64, 4) INDIRECT (unique, 0x100022ca, 4) , (const, 0x2198, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (unique, 0x100022ce, 8) , (const, 0x2198, 4)]
[(stack, 0xfffffffffffffb70, 4) INDIRECT (unique, 0x100022d6, 4) , (const, 0x2198, 4)]
[(stack, 0xfffffffffffffb74, 4) INDIRECT (unique, 0x100022da, 4) , (const, 0x2198, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (unique, 0x100022de, 4) , (const, 0x2198, 4)]
[(stack, 0xfffffffffffffb88, 8) INDIRECT (unique, 0x100022e2, 8) , (const, 0x2198, 4)]
[(stack, 0xfffffffffffffb90, 8) INDIRECT (unique, 0x100022ea, 8) , (const, 0x2198, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (unique, 0x100022f2, 8) , (const, 0x2198, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (unique, 0x100022fa, 8) , (const, 0x2198, 4)]
[(stack, 0xfffffffffffffbb8, 8) INDIRECT (unique, 0x10002302, 8) , (const, 0x2198, 4)]
[(stack, 0xfffffffffffffbc0, 8) INDIRECT (unique, 0x1000230a, 8) , (const, 0x2198, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (unique, 0x10002312, 8) , (const, 0x2198, 4)]
[(ram, 0x4c4fb0, 8) COPY (ram, 0x4c4fb0, 8), (ram, 0x4c4fb0, 8) INDIRECT (unique, 0x100021e9, 8) , (const, 0x2198, 4)]
[(ram, 0x4c8948, 8) COPY (ram, 0x4c8948, 8), (ram, 0x4c8948, 8) INDIRECT (unique, 0x100021f1, 8) , (const, 0x2198, 4)]
[(ram, 0x4c8950, 8) COPY (ram, 0x4c8950, 8), (ram, 0x4c8950, 8) INDIRECT (unique, 0x100021f9, 8) , (const, 0x2198, 4)]
[(ram, 0x4c8970, 8) COPY (ram, 0x4c8970, 8), (ram, 0x4c8970, 8) INDIRECT (unique, 0x10002201, 8) , (const, 0x2198, 4)]
[ ---  RETURN (const, 0x1, 4) , (register, 0x0, 8), (register, 0x0, 8) CALLIND (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10004433, 8), (unique, 0x10004433, 8) CAST (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (unique, 0x10001b78, 8) , (unique, 0x3300, 8) , (const, 0x1, 8), (unique, 0x10001b78, 8) PTRSUB (const, 0x0, 8) , (const, 0x4c2620, 8), (unique, 0x3300, 8) INT_MULT (register, 0x10, 8) , (const, 0x8, 8), (register, 0x10, 8) INT_ZEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (unique, 0x10001b40, 8) , (register, 0x0, 8) , (const, 0x1, 8), (unique, 0x10001b40, 8) PTRSUB (const, 0x0, 8) , (const, 0x49aae0, 8), (register, 0x0, 8) INT_SEXT (register, 0x0, 4), (register, 0x0, 4) INT_ADD (register, 0x0, 4) , (const, 0xffffffe0, 4), (register, 0x0, 4) INT_SEXT (unique, 0x10004432, 1), (unique, 0x10004432, 1) CAST (unique, 0x1000231a, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbc0, 8) MULTIEQUAL (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8)]
[(stack, 0xfffffffffffffbb8, 8) MULTIEQUAL (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb90, 8) MULTIEQUAL (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8)]
[(stack, 0xfffffffffffffb88, 8) MULTIEQUAL (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb74, 4) MULTIEQUAL (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4)]
[(stack, 0xfffffffffffffb70, 4) MULTIEQUAL (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4)]
[(stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb64, 4) MULTIEQUAL (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4)]
[(stack, 0xfffffffffffffb62, 2) MULTIEQUAL (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2)]
[(stack, 0xfffffffffffffb60, 2) MULTIEQUAL (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2)]
[(stack, 0xfffffffffffffb5c, 4) MULTIEQUAL (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4)]
[(stack, 0xfffffffffffffb58, 4) MULTIEQUAL (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb24, 4) MULTIEQUAL (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4)]
[(stack, 0xfffffffffffffb20, 4) MULTIEQUAL (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae4, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[(stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffadc, 4) MULTIEQUAL (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4)]
[(stack, 0xfffffffffffffad8, 4) MULTIEQUAL (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4)]
[(stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffac8, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffac0, 8) MULTIEQUAL (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8)]
[(stack, 0xfffffffffffffabc, 4) MULTIEQUAL (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4)]
[(stack, 0xfffffffffffffab8, 4) MULTIEQUAL (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4)]
[(stack, 0xfffffffffffffab4, 4) MULTIEQUAL (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4)]
[(stack, 0xfffffffffffffab3, 1) MULTIEQUAL (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1)]
[(stack, 0xfffffffffffffaac, 4) MULTIEQUAL (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4)]
[(stack, 0xfffffffffffffaa8, 4) MULTIEQUAL (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4)]
[(stack, 0xfffffffffffffaa4, 4) MULTIEQUAL (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4)]
[(stack, 0xfffffffffffffaa0, 4) MULTIEQUAL (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4)]
[(register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x80b, 4), (ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x80b, 4), (ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x80b, 4), (ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x80b, 4), (ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x4f00, 8) , (const, 0x4b, 4), (unique, 0x4f00, 8) CAST (unique, 0x1000443b, 8), (unique, 0x1000443b, 8) INT_ADD (register, 0x110, 8) , (const, 0xffffffffffffffc0, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  BRANCH (ram, 0x414398, 1)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb20, 4) MULTIEQUAL (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffadc, 4) MULTIEQUAL (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4)]
[(stack, 0xfffffffffffffad8, 4) MULTIEQUAL (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4)]
[ ---  CBRANCH (ram, 0x4164e5, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xfffffffffffffad0, 8) , (const, 0xffffffffffffffff, 8)]
[(stack, 0xfffffffffffffac0, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10004453, 8), (unique, 0x10004453, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x48, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10004443, 8), (unique, 0x10004443, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (unique, 0x10001b88, 8) , (register, 0x110, 8) , (const, 0x1, 8), (unique, 0x10001b88, 8) PTRSUB (const, 0x0, 8) , (const, 0xffffffffffffffa8, 8)]
[ ---  CBRANCH (ram, 0x4168c8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000444b, 8), (unique, 0x1000444b, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x50, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10004443, 8), (unique, 0x10004443, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (unique, 0x10001b88, 8) , (register, 0x110, 8) , (const, 0x1, 8), (unique, 0x10001b88, 8) PTRSUB (const, 0x0, 8) , (const, 0xffffffffffffffa8, 8)]
[ ---  CBRANCH (ram, 0x4168c8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x7f, 1)]
[(unique, 0x100025fb, 8) COPY (register, 0x0, 8), (register, 0x0, 8) COPY (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x416521, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0xbd80, 8)]
[(unique, 0x10002603, 8) COPY (unique, 0xbd80, 8)]
[(stack, 0xfffffffffffffad0, 8) COPY (register, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x100025fb, 8) , (unique, 0x10002603, 8)]
[ ---  BRANCH (ram, 0x414cc2, 1)]
[(register, 0x88, 4) MULTIEQUAL (register, 0x88, 4) , (register, 0x88, 4) , (register, 0x88, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbc0, 8) MULTIEQUAL (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8)]
[(stack, 0xfffffffffffffbb8, 8) MULTIEQUAL (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb90, 8) MULTIEQUAL (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8)]
[(stack, 0xfffffffffffffb88, 8) MULTIEQUAL (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb74, 4) MULTIEQUAL (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4)]
[(stack, 0xfffffffffffffb70, 4) MULTIEQUAL (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4)]
[(stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb64, 4) MULTIEQUAL (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4)]
[(stack, 0xfffffffffffffb62, 2) MULTIEQUAL (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2)]
[(stack, 0xfffffffffffffb60, 2) MULTIEQUAL (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2)]
[(stack, 0xfffffffffffffb5c, 4) MULTIEQUAL (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4)]
[(stack, 0xfffffffffffffb58, 4) MULTIEQUAL (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb24, 4) MULTIEQUAL (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4)]
[(stack, 0xfffffffffffffb20, 4) MULTIEQUAL (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae4, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[(stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffadc, 4) MULTIEQUAL (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4)]
[(stack, 0xfffffffffffffad8, 4) MULTIEQUAL (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4)]
[(stack, 0xfffffffffffffac8, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffac0, 8) MULTIEQUAL (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8)]
[(stack, 0xfffffffffffffabc, 4) MULTIEQUAL (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4)]
[(stack, 0xfffffffffffffab8, 4) MULTIEQUAL (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4)]
[(stack, 0xfffffffffffffab4, 4) MULTIEQUAL (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4)]
[(stack, 0xfffffffffffffab3, 1) MULTIEQUAL (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1)]
[(stack, 0xfffffffffffffaac, 4) MULTIEQUAL (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4)]
[(stack, 0xfffffffffffffaa8, 4) MULTIEQUAL (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4)]
[(stack, 0xfffffffffffffaa4, 4) MULTIEQUAL (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4)]
[(stack, 0xfffffffffffffaa0, 4) MULTIEQUAL (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4)]
[(ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[(ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8)]
[(register, 0x18, 8) MULTIEQUAL (register, 0x18, 8) , (register, 0x18, 8) , (register, 0x18, 8)]
[(stack, 0xfffffffffffffad0, 8) COPY (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x414cc2, 1)]
[(register, 0x88, 4) MULTIEQUAL (register, 0x88, 4) , (register, 0x88, 4) , (register, 0x88, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbc0, 8) MULTIEQUAL (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8)]
[(stack, 0xfffffffffffffbb8, 8) MULTIEQUAL (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb90, 8) MULTIEQUAL (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8)]
[(stack, 0xfffffffffffffb88, 8) MULTIEQUAL (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb74, 4) MULTIEQUAL (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4)]
[(stack, 0xfffffffffffffb70, 4) MULTIEQUAL (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4)]
[(stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb64, 4) MULTIEQUAL (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4)]
[(stack, 0xfffffffffffffb62, 2) MULTIEQUAL (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2)]
[(stack, 0xfffffffffffffb60, 2) MULTIEQUAL (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2)]
[(stack, 0xfffffffffffffb5c, 4) MULTIEQUAL (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4)]
[(stack, 0xfffffffffffffb58, 4) MULTIEQUAL (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb24, 4) MULTIEQUAL (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4)]
[(stack, 0xfffffffffffffb20, 4) MULTIEQUAL (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae4, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[(stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffadc, 4) MULTIEQUAL (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4)]
[(stack, 0xfffffffffffffad8, 4) MULTIEQUAL (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4)]
[(stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffac8, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffac0, 8) MULTIEQUAL (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8)]
[(stack, 0xfffffffffffffabc, 4) MULTIEQUAL (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4)]
[(stack, 0xfffffffffffffab8, 4) MULTIEQUAL (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4)]
[(stack, 0xfffffffffffffab4, 4) MULTIEQUAL (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4)]
[(stack, 0xfffffffffffffab3, 1) MULTIEQUAL (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1)]
[(stack, 0xfffffffffffffaac, 4) MULTIEQUAL (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4)]
[(stack, 0xfffffffffffffaa8, 4) MULTIEQUAL (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4)]
[(stack, 0xfffffffffffffaa4, 4) MULTIEQUAL (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4)]
[(stack, 0xfffffffffffffaa0, 4) MULTIEQUAL (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4)]
[(ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[(ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8)]
[(register, 0x18, 8) MULTIEQUAL (register, 0x18, 8) , (register, 0x18, 8) , (register, 0x18, 8)]
[(unique, 0x3100, 8) CAST (unique, 0x10004473, 8), (unique, 0x10004473, 8) INT_ADD (unique, 0x1000446b, 8) , (const, 0x1, 8), (unique, 0x1000446b, 8) CAST (stack, 0xfffffffffffffb30, 8), (stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[ ---  CBRANCH (ram, 0x414378, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (unique, 0x1000447b, 1) , (const, 0x5b, 1), (unique, 0x1000447b, 1) CAST (register, 0x0, 1), (register, 0x0, 1) INT_SUB (unique, 0xbb00, 1) , (const, 0x20, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10004463, 8), (unique, 0x10004463, 8) INT_ADD (unique, 0x1000445b, 8) , (const, 0x1, 8), (unique, 0x1000445b, 8) CAST (stack, 0xfffffffffffffb30, 8), (stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x16cd, 4)]
[(stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x16cd, 4)]
[(stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x16cd, 4)]
[(stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x16cd, 4)]
[(stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x16cd, 4)]
[(stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x16cd, 4)]
[(stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x16cd, 4)]
[(stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x16cd, 4)]
[(stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x16cd, 4), (stack, 0xfffffffffffffac8, 8) CAST (unique, 0x10004481, 8), (unique, 0x10004481, 8) INT_ADD (unique, 0x100023c7, 8) , (const, 0x1, 4), (unique, 0x100023c7, 8) INT_LEFT (unique, 0x100023bf, 8) , (const, 0x20, 8), (unique, 0x100023bf, 8) INT_SEXT (unique, 0x1000447d, 4), (unique, 0x1000447d, 4) CAST (stack, 0xfffffffffffffacc, 4), (stack, 0xfffffffffffffacc, 4) SUBPIECE (stack, 0xfffffffffffffac8, 8) , (const, 0x4, 8)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x16cd, 4)]
[(stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x16cd, 4)]
[(stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x16cd, 4)]
[(stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x16cd, 4)]
[(stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x16cd, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x16cd, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x16cd, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x16cd, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x16cd, 4)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x16cd, 4)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x16cd, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x16cd, 4)]
[(stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x16cd, 4)]
[(stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x16cd, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x16cd, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x16cd, 4), (stack, 0xfffffffffffffb30, 8) COPY (unique, 0x3100, 8)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x16cd, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x16cd, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x16cd, 4)]
[(stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x16cd, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x16cd, 4)]
[(stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x16cd, 4)]
[(stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x16cd, 4)]
[(stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x16cd, 4)]
[(stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x16cd, 4)]
[(stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x16cd, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x16cd, 4)]
[(stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x16cd, 4)]
[(stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x16cd, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x16cd, 4)]
[(stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x16cd, 4)]
[(stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x16cd, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x16cd, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x16cd, 4)]
[(stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x16cd, 4)]
[(stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x16cd, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x16cd, 4)]
[(ram, 0x4c4fb0, 8) COPY (ram, 0x4c4fb0, 8), (ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x16cd, 4)]
[(ram, 0x4c8948, 8) COPY (ram, 0x4c8948, 8), (ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x16cd, 4)]
[(ram, 0x4c8950, 8) COPY (ram, 0x4c8950, 8), (ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x16cd, 4)]
[(ram, 0x4c8970, 8) COPY (ram, 0x4c8970, 8), (ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x16cd, 4)]
[ ---  RETURN (const, 0x1, 4) , (register, 0x0, 8), (register, 0x0, 8) CALLIND (unique, 0x10004489, 8), (unique, 0x10004489, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (unique, 0x10001b80, 8) , (register, 0x0, 8) , (const, 0x8, 8), (unique, 0x10001b80, 8) PTRSUB (const, 0x0, 8) , (const, 0x4c2720, 8), (register, 0x0, 8) INT_ZEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (register, 0x18, 8) , (register, 0x0, 8) , (const, 0x1, 8), (register, 0x0, 8) INT_SEXT (register, 0x0, 4), (register, 0x0, 4) INT_ADD (register, 0x0, 4) , (const, 0xffffffe0, 4), (register, 0x0, 4) INT_SEXT (unique, 0x1000447c, 1), (unique, 0x1000447c, 1) CAST (unique, 0xbb00, 1)]
[(register, 0x88, 4) MULTIEQUAL (unique, 0x10002d9b, 4) , (unique, 0x10002d9f, 4) , (unique, 0x10002da3, 4) , (unique, 0x10002da7, 4) , (unique, 0x10002dab, 4) , (unique, 0x10002d9b, 4) , (unique, 0x10002d9b, 4) , (unique, 0x10002db7, 4) , (unique, 0x10002d9b, 4) , (unique, 0x10002d9b, 4) , (unique, 0x10002d9b, 4) , (unique, 0x10002d9b, 4) , (unique, 0x10002dab, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbc0, 8) MULTIEQUAL (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8)]
[(stack, 0xfffffffffffffbb8, 8) MULTIEQUAL (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb90, 8) MULTIEQUAL (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8)]
[(stack, 0xfffffffffffffb88, 8) MULTIEQUAL (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb74, 4) MULTIEQUAL (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4)]
[(stack, 0xfffffffffffffb70, 4) MULTIEQUAL (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4)]
[(stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb64, 4) MULTIEQUAL (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4)]
[(stack, 0xfffffffffffffb62, 2) MULTIEQUAL (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2)]
[(stack, 0xfffffffffffffb60, 2) MULTIEQUAL (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2)]
[(stack, 0xfffffffffffffb5c, 4) MULTIEQUAL (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4)]
[(stack, 0xfffffffffffffb58, 4) MULTIEQUAL (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb24, 4) MULTIEQUAL (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4)]
[(stack, 0xfffffffffffffb20, 4) MULTIEQUAL (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae4, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[(stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffadc, 4) MULTIEQUAL (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4)]
[(stack, 0xfffffffffffffad8, 4) MULTIEQUAL (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4)]
[(stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffac8, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffac0, 8) MULTIEQUAL (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8)]
[(stack, 0xfffffffffffffabc, 4) MULTIEQUAL (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4)]
[(stack, 0xfffffffffffffab8, 4) MULTIEQUAL (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4)]
[(stack, 0xfffffffffffffab4, 4) MULTIEQUAL (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4)]
[(stack, 0xfffffffffffffab3, 1) MULTIEQUAL (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1)]
[(stack, 0xfffffffffffffaac, 4) MULTIEQUAL (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4)]
[(stack, 0xfffffffffffffaa8, 4) MULTIEQUAL (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4)]
[(stack, 0xfffffffffffffaa4, 4) MULTIEQUAL (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4)]
[(stack, 0xfffffffffffffaa0, 4) MULTIEQUAL (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4)]
[(ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[(ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x416d3a, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRSUB (register, 0x38, 8) , (const, 0x30, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRSUB (register, 0x38, 8) , (const, 0x28, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100044a1, 8) , (const, 0x416d4e, 8), (unique, 0x100044a1, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x2aec, 4)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x2aec, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x2aec, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x2aec, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x2aec, 4)]
[(stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x2aec, 4), (stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x2aeb, 4)]
[(stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x2aec, 4), (stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x2aeb, 4)]
[(stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x2aec, 4), (stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x2aeb, 4)]
[(stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x2aec, 4), (stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x2aeb, 4)]
[(stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x2aec, 4), (stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x2aeb, 4)]
[(stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x2aec, 4), (stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x2aeb, 4)]
[(stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x2aec, 4), (stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x2aeb, 4)]
[(stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x2aec, 4), (stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x2aeb, 4)]
[(stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x2aec, 4), (stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x2aeb, 4)]
[(stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x2aec, 4), (stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x2aeb, 4)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x2aec, 4), (stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x2aeb, 4)]
[(stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x2aec, 4), (stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x2aeb, 4)]
[(stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x2aec, 4), (stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x2aeb, 4)]
[(stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x2aec, 4), (stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x2aeb, 4)]
[(stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x2aec, 4), (stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x2aeb, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x2aec, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x2aeb, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x2aec, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x2aeb, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x2aec, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x2aeb, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x2aec, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x2aeb, 4)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x2aec, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x2aeb, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x2aec, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x2aeb, 4)]
[(stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x2aec, 4), (stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x2aeb, 4)]
[(stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x2aec, 4), (stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x2aeb, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x2aec, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x2aeb, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x2aec, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x2aeb, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x2aec, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x2aeb, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x2aec, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x2aeb, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x2aec, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x2aeb, 4)]
[(stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x2aec, 4), (stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x2aeb, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x2aec, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x2aeb, 4)]
[(stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x2aec, 4), (stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x2aeb, 4)]
[(stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x2aec, 4), (stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x2aeb, 4)]
[(stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x2aec, 4), (stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x2aeb, 4)]
[(stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x2aec, 4), (stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x2aeb, 4)]
[(stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x2aec, 4), (stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x2aeb, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x2aec, 4), (stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x2aeb, 4)]
[(stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x2aec, 4), (stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x2aeb, 4)]
[(stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x2aec, 4), (stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x2aeb, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x2aec, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x2aeb, 4)]
[(stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x2aec, 4), (stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x2aeb, 4)]
[(stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x2aec, 4), (stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x2aeb, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x2aec, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x2aeb, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x2aec, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x2aeb, 4)]
[(stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x2aec, 4), (stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x2aeb, 4)]
[(stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x2aec, 4), (stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x2aeb, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2aec, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2aeb, 4)]
[(stack, 0xfffffffffffffb10, 4) SUBPIECE (stack, 0xfffffffffffffb10, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x2aec, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x2aeb, 4), (stack, 0xfffffffffffffb10, 8) CAST (unique, 0x10004499, 8), (unique, 0x10004499, 8) INT_OR (unique, 0x10001413, 8) , (unique, 0x1000141b, 8), (unique, 0x1000141b, 8) INT_ZEXT (register, 0x88, 4), (unique, 0x10001413, 8) INT_AND (unique, 0x10004491, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10004491, 8) CAST (stack, 0xfffffffffffffb10, 8)]
[ ---  CBRANCH (ram, 0x415300, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0xffffffff, 4), (register, 0x0, 4) CALL (ram, 0x41e9e0, 8) , (register, 0x38, 8) , (const, 0x25, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3800, 8) , (unique, 0x3100, 8), (unique, 0x3800, 8) PTRSUB (register, 0x38, 8) , (const, 0x28, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x2acf, 4), (ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x2acd, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x2acf, 4), (ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x2acd, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x2acf, 4), (ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x2acd, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x2acf, 4), (ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x2acd, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0xbd80, 8) , (const, 0x25, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbc0, 8) MULTIEQUAL (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8)]
[(stack, 0xfffffffffffffbb8, 8) MULTIEQUAL (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb90, 8) MULTIEQUAL (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8)]
[(stack, 0xfffffffffffffb88, 8) MULTIEQUAL (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb74, 4) MULTIEQUAL (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4)]
[(stack, 0xfffffffffffffb70, 4) MULTIEQUAL (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4)]
[(stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb64, 4) MULTIEQUAL (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4)]
[(stack, 0xfffffffffffffb62, 2) MULTIEQUAL (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2)]
[(stack, 0xfffffffffffffb60, 2) MULTIEQUAL (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2)]
[(stack, 0xfffffffffffffb5c, 4) MULTIEQUAL (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4)]
[(stack, 0xfffffffffffffb58, 4) MULTIEQUAL (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb24, 4) MULTIEQUAL (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4)]
[(stack, 0xfffffffffffffb20, 4) MULTIEQUAL (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae4, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[(stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffadc, 4) MULTIEQUAL (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4)]
[(stack, 0xfffffffffffffad8, 4) MULTIEQUAL (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4)]
[(stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffac8, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffac0, 8) MULTIEQUAL (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8)]
[(stack, 0xfffffffffffffabc, 4) MULTIEQUAL (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4)]
[(stack, 0xfffffffffffffab8, 4) MULTIEQUAL (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4)]
[(stack, 0xfffffffffffffab4, 4) MULTIEQUAL (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4)]
[(stack, 0xfffffffffffffab3, 1) MULTIEQUAL (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1)]
[(stack, 0xfffffffffffffaac, 4) MULTIEQUAL (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4)]
[(stack, 0xfffffffffffffaa8, 4) MULTIEQUAL (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4)]
[(stack, 0xfffffffffffffaa4, 4) MULTIEQUAL (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4)]
[(stack, 0xfffffffffffffaa0, 4) MULTIEQUAL (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4)]
[(ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[(ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x414398, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x88, 4) , (const, 0x7fffffff, 4), (register, 0x88, 4) MULTIEQUAL (register, 0x88, 4) , (stack, 0xfffffffffffffb10, 4)]
[(register, 0x88, 8) INT_ZEXT (register, 0x88, 4), (register, 0x88, 4) INT_ADD (register, 0x88, 4) , (const, 0x1, 4)]
[ ---  BRANCH (ram, 0x414640, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbc0, 8) MULTIEQUAL (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8)]
[(stack, 0xfffffffffffffbb8, 8) MULTIEQUAL (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb90, 8) MULTIEQUAL (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8)]
[(stack, 0xfffffffffffffb88, 8) MULTIEQUAL (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb74, 4) MULTIEQUAL (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4)]
[(stack, 0xfffffffffffffb70, 4) MULTIEQUAL (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4)]
[(stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb64, 4) MULTIEQUAL (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4)]
[(stack, 0xfffffffffffffb62, 2) MULTIEQUAL (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2)]
[(stack, 0xfffffffffffffb60, 2) MULTIEQUAL (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2)]
[(stack, 0xfffffffffffffb5c, 4) MULTIEQUAL (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4)]
[(stack, 0xfffffffffffffb58, 4) MULTIEQUAL (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb24, 4) MULTIEQUAL (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4)]
[(stack, 0xfffffffffffffb20, 4) MULTIEQUAL (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4)]
[(stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffadc, 4) MULTIEQUAL (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4)]
[(stack, 0xfffffffffffffad8, 4) MULTIEQUAL (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4)]
[(stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffac8, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffac0, 8) MULTIEQUAL (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8)]
[(stack, 0xfffffffffffffabc, 4) MULTIEQUAL (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4)]
[(stack, 0xfffffffffffffab8, 4) MULTIEQUAL (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4)]
[(stack, 0xfffffffffffffab4, 4) MULTIEQUAL (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4)]
[(stack, 0xfffffffffffffab3, 1) MULTIEQUAL (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1)]
[(stack, 0xfffffffffffffaac, 4) MULTIEQUAL (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4)]
[(stack, 0xfffffffffffffaa8, 4) MULTIEQUAL (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4)]
[(stack, 0xfffffffffffffaa4, 4) MULTIEQUAL (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4)]
[(stack, 0xfffffffffffffaa0, 4) MULTIEQUAL (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4)]
[(ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[(ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8)]
[(unique, 0x100025a7, 8) COPY (stack, 0xfffffffffffffb18, 8), (stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(register, 0x88, 4) SUBPIECE (register, 0x88, 8) , (const, 0x0, 4), (register, 0x88, 8) MULTIEQUAL (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8)]
[(stack, 0xfffffffffffffae4, 4) COPY (unique, 0xbd00, 4), (unique, 0xbd00, 4) INT_ADD (stack, 0xfffffffffffffae4, 4) , (const, 0x1, 4), (stack, 0xfffffffffffffae4, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[ ---  CBRANCH (ram, 0x415b68, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xfffffffffffffb18, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100044b9, 8) , (const, 0x415b7b, 8), (unique, 0x100044b9, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x802, 4)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x802, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x802, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x802, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x802, 4)]
[(stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x802, 4), (stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x801, 4)]
[(stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x802, 4), (stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x801, 4)]
[(stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x802, 4), (stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x801, 4)]
[(stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x802, 4), (stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x801, 4)]
[(stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x802, 4), (stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x801, 4)]
[(stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x802, 4), (stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x801, 4)]
[(stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x802, 4), (stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x801, 4)]
[(stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x802, 4), (stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x801, 4)]
[(stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x802, 4), (stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x801, 4)]
[(stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x802, 4), (stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x801, 4)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x802, 4), (stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x801, 4)]
[(stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x802, 4), (stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x801, 4)]
[(stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x802, 4), (stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x801, 4)]
[(stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x802, 4), (stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x801, 4)]
[(stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x802, 4), (stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x801, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x802, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x801, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x802, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x801, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x802, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x801, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x802, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x801, 4)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x802, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x801, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x802, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x801, 4)]
[(stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x802, 4), (stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x801, 4)]
[(stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x802, 4), (stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x801, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x802, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x801, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x802, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x801, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x802, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x801, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x802, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x801, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x802, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x801, 4)]
[(stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x802, 4), (stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x801, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x802, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x801, 4)]
[(stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x802, 4), (stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x801, 4)]
[(stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x802, 4), (stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x801, 4)]
[(stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x802, 4), (stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x801, 4)]
[(stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x802, 4), (stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x801, 4)]
[(stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x802, 4), (stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x801, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x802, 4), (stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x801, 4)]
[(stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x802, 4), (stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x801, 4)]
[(stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x802, 4), (stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x801, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x802, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x801, 4)]
[(stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x802, 4), (stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x801, 4)]
[(stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x802, 4), (stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x801, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x802, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x801, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x802, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x801, 4)]
[(stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x802, 4), (stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x801, 4)]
[(stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x802, 4), (stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x801, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x802, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x801, 4)]
[ ---  CALL (ram, 0x426b40, 8) , (unique, 0x100025a7, 8)]
[(unique, 0x100015c1, 4) SUBPIECE (stack, 0xfffffffffffffb10, 8) , (const, 0x0, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x802, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x801, 4), (stack, 0xfffffffffffffb10, 8) CAST (unique, 0x100044b1, 8), (unique, 0x100044b1, 8) INT_OR (unique, 0x1000117c, 8) , (register, 0x88, 8), (unique, 0x1000117c, 8) INT_AND (unique, 0x100044a9, 8) , (const, 0xffffffff00000000, 8), (unique, 0x100044a9, 8) CAST (stack, 0xfffffffffffffb10, 8)]
[ ---  BRANCH (ram, 0x414655, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100044e9, 8) , (const, 0x41467b, 8), (unique, 0x100044e9, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x755, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x755, 4), (ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x755, 4), (ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x755, 4), (ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x755, 4), (ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[(stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x755, 4), (stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x754, 4), (stack, 0xfffffffffffffaa0, 4) MULTIEQUAL (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4)]
[(stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x755, 4), (stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x754, 4), (stack, 0xfffffffffffffaa4, 4) MULTIEQUAL (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4)]
[(stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x755, 4), (stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x754, 4), (stack, 0xfffffffffffffaa8, 4) MULTIEQUAL (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4)]
[(stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x755, 4), (stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x754, 4), (stack, 0xfffffffffffffaac, 4) MULTIEQUAL (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4)]
[(stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x755, 4), (stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x754, 4), (stack, 0xfffffffffffffab3, 1) MULTIEQUAL (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1)]
[(stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x755, 4), (stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x754, 4), (stack, 0xfffffffffffffab4, 4) MULTIEQUAL (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4)]
[(stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x755, 4), (stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x754, 4), (stack, 0xfffffffffffffab8, 4) MULTIEQUAL (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4)]
[(stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x755, 4), (stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x754, 4), (stack, 0xfffffffffffffabc, 4) MULTIEQUAL (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4)]
[(stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x755, 4), (stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x754, 4), (stack, 0xfffffffffffffac0, 8) MULTIEQUAL (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8)]
[(stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x755, 4), (stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x754, 4), (stack, 0xfffffffffffffac8, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x755, 4), (stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x754, 4), (stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x755, 4), (stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x754, 4), (stack, 0xfffffffffffffad8, 4) MULTIEQUAL (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4)]
[(stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x755, 4), (stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x754, 4), (stack, 0xfffffffffffffadc, 4) MULTIEQUAL (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4)]
[(stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x755, 4), (stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x754, 4), (stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x755, 4), (stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x754, 4), (stack, 0xfffffffffffffae4, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x755, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x754, 4), (stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x755, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x754, 4), (stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x755, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x754, 4), (stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x755, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x754, 4), (stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x755, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x754, 4), (stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x755, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x754, 4), (stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x755, 4), (stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x754, 4), (stack, 0xfffffffffffffb20, 4) MULTIEQUAL (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4)]
[(stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x755, 4), (stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x754, 4), (stack, 0xfffffffffffffb24, 4) MULTIEQUAL (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x755, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x754, 4), (stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x755, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x754, 4), (stack, 0xfffffffffffffb30, 8) COPY (unique, 0x100044e1, 8), (unique, 0x100044e1, 8) CAST (register, 0x80, 8), (register, 0x80, 8) CAST (unique, 0x100044d9, 8), (unique, 0x100044d9, 8) INT_ADD (unique, 0x100044d1, 8) , (const, 0x1, 8), (unique, 0x100044d1, 8) CAST (stack, 0xfffffffffffffb30, 8), (stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x755, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x754, 4), (stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x755, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x754, 4), (stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x755, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x754, 4), (stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x755, 4), (stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x754, 4), (stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x755, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x754, 4), (stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x755, 4), (stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x754, 4), (stack, 0xfffffffffffffb58, 4) MULTIEQUAL (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4)]
[(stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x755, 4), (stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x754, 4), (stack, 0xfffffffffffffb5c, 4) MULTIEQUAL (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4)]
[(stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x755, 4), (stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x754, 4), (stack, 0xfffffffffffffb60, 2) MULTIEQUAL (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2)]
[(stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x755, 4), (stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x754, 4), (stack, 0xfffffffffffffb62, 2) MULTIEQUAL (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2)]
[(stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x755, 4), (stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x754, 4), (stack, 0xfffffffffffffb64, 4) MULTIEQUAL (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x755, 4), (stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x754, 4), (stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x755, 4), (stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x754, 4), (stack, 0xfffffffffffffb70, 4) MULTIEQUAL (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4)]
[(stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x755, 4), (stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x754, 4), (stack, 0xfffffffffffffb74, 4) MULTIEQUAL (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x755, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x754, 4), (stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x755, 4), (stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x754, 4), (stack, 0xfffffffffffffb88, 8) MULTIEQUAL (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8)]
[(stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x755, 4), (stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x754, 4), (stack, 0xfffffffffffffb90, 8) MULTIEQUAL (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x755, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x754, 4), (stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x755, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x754, 4), (stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x755, 4), (stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x754, 4), (stack, 0xfffffffffffffbb8, 8) MULTIEQUAL (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8)]
[(stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x755, 4), (stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x754, 4), (stack, 0xfffffffffffffbc0, 8) MULTIEQUAL (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x755, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x754, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(register, 0x0, 8) CAST (unique, 0x100044f1, 8), (unique, 0x100044f1, 8) CALL (ram, 0x4010a0, 8) , (register, 0x80, 8) , (const, 0x25, 8), (register, 0x80, 8) CAST (unique, 0x100044d9, 8), (unique, 0x100044d9, 8) INT_ADD (unique, 0x100044d1, 8) , (const, 0x1, 8), (unique, 0x100044d1, 8) CAST (stack, 0xfffffffffffffb30, 8), (stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[ ---  CBRANCH (ram, 0x417109, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (unique, 0x100044f9, 4) , (const, 0x0, 4), (unique, 0x100044f9, 4) CAST (stack, 0xfffffffffffffb18, 4), (stack, 0xfffffffffffffb18, 4) SUBPIECE (stack, 0xfffffffffffffb18, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x755, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x754, 4), (stack, 0xfffffffffffffb18, 8) CAST (unique, 0x100044c9, 8), (unique, 0x100044c9, 8) INT_OR (unique, 0x10000f1c, 8) , (unique, 0x10000f24, 8), (unique, 0x10000f24, 8) INT_ZEXT (register, 0x88, 4), (unique, 0x10000f1c, 8) INT_AND (unique, 0x100044c1, 8) , (const, 0xffffffff00000000, 8), (unique, 0x100044c1, 8) CAST (stack, 0xfffffffffffffb18, 8), (stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8), (register, 0x88, 4) MULTIEQUAL (register, 0x88, 4) , (unique, 0x100015c1, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100044fd, 8) , (const, 0x417128, 8), (unique, 0x100044fd, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x7f7, 4), (stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x7f6, 4)]
[(stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x7f7, 4), (stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x7f6, 4)]
[(stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x7f7, 4), (stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x7f6, 4)]
[(stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x7f7, 4), (stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x7f6, 4)]
[(stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x7f7, 4), (stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x7f6, 4)]
[(stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x7f7, 4), (stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x7f6, 4)]
[(stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x7f7, 4), (stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x7f6, 4)]
[(stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x7f7, 4), (stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x7f6, 4)]
[(stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x7f7, 4), (stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x7f6, 4)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x7f7, 4), (stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x7f6, 4)]
[(stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x7f7, 4), (stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x7f6, 4)]
[(stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x7f7, 4), (stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x7f6, 4)]
[(stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x7f7, 4), (stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x7f6, 4)]
[(stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x7f7, 4), (stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x7f6, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x7f7, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x7f6, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x7f7, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x7f6, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x7f7, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x7f6, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x7f7, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x7f6, 4)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x7f7, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x7f6, 4)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x7f7, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x7f6, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x7f7, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x7f6, 4)]
[(stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x7f7, 4), (stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x7f6, 4)]
[(stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x7f7, 4), (stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x7f6, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x7f7, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x7f6, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x7f7, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x7f6, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x7f7, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x7f6, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x7f7, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x7f6, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x7f7, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x7f6, 4)]
[(stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x7f7, 4), (stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x7f6, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x7f7, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x7f6, 4)]
[(stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x7f7, 4), (stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x7f6, 4)]
[(stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x7f7, 4), (stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x7f6, 4)]
[(stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x7f7, 4), (stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x7f6, 4)]
[(stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x7f7, 4), (stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x7f6, 4)]
[(stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x7f7, 4), (stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x7f6, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x7f7, 4), (stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x7f6, 4)]
[(stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x7f7, 4), (stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x7f6, 4)]
[(stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x7f7, 4), (stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x7f6, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x7f7, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x7f6, 4)]
[(stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x7f7, 4), (stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x7f6, 4)]
[(stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x7f7, 4), (stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x7f6, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x7f7, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x7f6, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x7f7, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x7f6, 4)]
[(stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x7f7, 4), (stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x7f6, 4)]
[(stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x7f7, 4), (stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x7f6, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x7f7, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x7f6, 4)]
[ ---  CALL (ram, 0x403170, 8) , (unique, 0x10001b28, 8) , (unique, 0x10001ae8, 8) , (const, 0x6b7, 4) , (unique, 0x10001b58, 8), (unique, 0x10001b58, 8) COPY (const, 0x49ab60, 8), (unique, 0x10001b28, 8) COPY (const, 0x49aa58, 8), (unique, 0x10001ae8, 8) COPY (const, 0x49a9a4, 8)]
[(ram, 0x4c4fb0, 8) COPY (ram, 0x4c4fb0, 8), (ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x7f7, 4)]
[(ram, 0x4c8948, 8) COPY (ram, 0x4c8948, 8), (ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x7f7, 4)]
[(ram, 0x4c8950, 8) COPY (ram, 0x4c8950, 8), (ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x7f7, 4)]
[(ram, 0x4c8970, 8) COPY (ram, 0x4c8970, 8), (ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x7f7, 4)]
[ ---  RETURN (const, 0x1, 4)]
[(unique, 0x1000261b, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10004505, 8), (unique, 0x10004505, 8) CAST (unique, 0x3c80, 8), (unique, 0x3c80, 8) PTRADD (register, 0x38, 8) , (const, 0x1, 8) , (const, 0xd8, 8)]
[ ---  CBRANCH (ram, 0x415b30, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESSEQUAL (stack, 0xfffffffffffffb28, 8) , (register, 0x10, 8), (register, 0x10, 8) CAST (unique, 0x10004515, 8), (unique, 0x10004515, 8) INT_ADD (unique, 0x1000450d, 8) , (const, 0xffffffffffb394a0, 8), (unique, 0x1000450d, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10004505, 8), (unique, 0x10004505, 8) CAST (unique, 0x3c80, 8), (unique, 0x3c80, 8) PTRADD (register, 0x38, 8) , (const, 0x1, 8) , (const, 0xd8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10004535, 8) , (const, 0x415b4a, 8), (unique, 0x10004535, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x7e5, 4)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x7e5, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x7e5, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x7e5, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x7e5, 4)]
[(stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x7e5, 4), (stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x7e4, 4)]
[(stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x7e5, 4), (stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x7e4, 4)]
[(stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x7e5, 4), (stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x7e4, 4)]
[(stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x7e5, 4), (stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x7e4, 4)]
[(stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x7e5, 4), (stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x7e4, 4)]
[(stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x7e5, 4), (stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x7e4, 4)]
[(stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x7e5, 4), (stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x7e4, 4)]
[(stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x7e5, 4), (stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x7e4, 4)]
[(stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x7e5, 4), (stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x7e4, 4)]
[(stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x7e5, 4), (stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x7e4, 4)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x7e5, 4), (stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x7e4, 4)]
[(stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x7e5, 4), (stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x7e4, 4)]
[(stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x7e5, 4), (stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x7e4, 4)]
[(stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x7e5, 4), (stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x7e4, 4)]
[(stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x7e5, 4), (stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x7e4, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x7e5, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x7e4, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x7e5, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x7e4, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x7e5, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x7e4, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x7e5, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x7e4, 4)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x7e5, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x7e4, 4)]
[(stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x7e5, 4), (stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x7e4, 4)]
[(stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x7e5, 4), (stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x7e4, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x7e5, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x7e4, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x7e5, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x7e4, 4), (stack, 0xfffffffffffffb30, 8) COPY (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x7e5, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x7e4, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x7e5, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x7e4, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x7e5, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x7e4, 4)]
[(stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x7e5, 4), (stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x7e4, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x7e5, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x7e4, 4)]
[(stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x7e5, 4), (stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x7e4, 4)]
[(stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x7e5, 4), (stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x7e4, 4)]
[(stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x7e5, 4), (stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x7e4, 4)]
[(stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x7e5, 4), (stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x7e4, 4)]
[(stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x7e5, 4), (stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x7e4, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x7e5, 4), (stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x7e4, 4)]
[(stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x7e5, 4), (stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x7e4, 4)]
[(stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x7e5, 4), (stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x7e4, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x7e5, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x7e4, 4)]
[(stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x7e5, 4), (stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x7e4, 4)]
[(stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x7e5, 4), (stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x7e4, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x7e5, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x7e4, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x7e5, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x7e4, 4)]
[(stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x7e5, 4), (stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x7e4, 4)]
[(stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x7e5, 4), (stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x7e4, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x7e5, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x7e4, 4)]
[ ---  CALL (ram, 0x41b380, 8)]
[(unique, 0x100015b9, 4) SUBPIECE (stack, 0xfffffffffffffb10, 8) , (const, 0x0, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x7e5, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x7e4, 4), (stack, 0xfffffffffffffb10, 8) CAST (unique, 0x1000452d, 8), (unique, 0x1000452d, 8) INT_OR (unique, 0x1000116c, 8) , (unique, 0x10001174, 8), (unique, 0x10001174, 8) INT_AND (unique, 0x10004525, 8) , (const, 0xffffffff, 8), (unique, 0x10004525, 8) CAST (stack, 0xfffffffffffffb18, 8), (unique, 0x1000116c, 8) INT_AND (unique, 0x1000451d, 8) , (const, 0xffffffff00000000, 8), (unique, 0x1000451d, 8) CAST (stack, 0xfffffffffffffb10, 8)]
[(unique, 0x10002623, 8) COPY (stack, 0xfffffffffffffb18, 8), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x7e5, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x7e4, 4), (stack, 0xfffffffffffffb18, 8) COPY (unique, 0xbd80, 8)]
[ ---  BRANCH (ram, 0x4146b4, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000456d, 8) , (const, 0x4146cd, 8), (unique, 0x1000456d, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x798, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x798, 4), (ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x798, 4), (ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x798, 4), (ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x798, 4), (ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[(stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x798, 4), (stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x796, 4), (stack, 0xfffffffffffffaa0, 4) MULTIEQUAL (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4)]
[(stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x798, 4), (stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x796, 4), (stack, 0xfffffffffffffaa4, 4) MULTIEQUAL (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4)]
[(stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x798, 4), (stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x796, 4), (stack, 0xfffffffffffffaa8, 4) MULTIEQUAL (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4)]
[(stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x798, 4), (stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x796, 4), (stack, 0xfffffffffffffaac, 4) MULTIEQUAL (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4)]
[(stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x798, 4), (stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x796, 4), (stack, 0xfffffffffffffab3, 1) MULTIEQUAL (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1)]
[(stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x798, 4), (stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x796, 4), (stack, 0xfffffffffffffab4, 4) MULTIEQUAL (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4)]
[(stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x798, 4), (stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x796, 4), (stack, 0xfffffffffffffab8, 4) MULTIEQUAL (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4)]
[(stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x798, 4), (stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x796, 4), (stack, 0xfffffffffffffabc, 4) MULTIEQUAL (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4)]
[(stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x798, 4), (stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x796, 4), (stack, 0xfffffffffffffac0, 8) MULTIEQUAL (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8)]
[(stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x798, 4), (stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x796, 4), (stack, 0xfffffffffffffac8, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x798, 4), (stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x796, 4), (stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x798, 4), (stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x796, 4), (stack, 0xfffffffffffffad8, 4) MULTIEQUAL (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4)]
[(stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x798, 4), (stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x796, 4), (stack, 0xfffffffffffffadc, 4) MULTIEQUAL (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4)]
[(stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x798, 4), (stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x796, 4), (stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x798, 4), (stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x796, 4), (stack, 0xfffffffffffffae4, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x798, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x796, 4), (stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x798, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x796, 4), (stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x798, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x796, 4), (stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x798, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x796, 4), (stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x798, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x796, 4), (stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x798, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x796, 4), (stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x798, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x796, 4), (stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x798, 4), (stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x796, 4), (stack, 0xfffffffffffffb20, 4) MULTIEQUAL (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4)]
[(stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x798, 4), (stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x796, 4), (stack, 0xfffffffffffffb24, 4) MULTIEQUAL (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x798, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x796, 4), (stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x798, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x796, 4), (stack, 0xfffffffffffffb30, 8) CAST (unique, 0x1000454d, 8), (unique, 0x1000454d, 8) INT_OR (unique, 0x10000f2c, 8) , (unique, 0x10000f34, 8), (unique, 0x10000f34, 8) INT_ZEXT (unique, 0x10001619, 4), (unique, 0x10000f2c, 8) INT_AND (unique, 0x10004545, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10004545, 8) CAST (stack, 0xfffffffffffffb30, 8), (stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8), (unique, 0x10001619, 4) MULTIEQUAL (stack, 0xfffffffffffffb18, 4) , (unique, 0x100015b9, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x798, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x796, 4), (stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x798, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x796, 4), (stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x798, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x796, 4), (stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x798, 4), (stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x796, 4), (stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x798, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x796, 4), (stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x798, 4), (stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x796, 4), (stack, 0xfffffffffffffb58, 4) MULTIEQUAL (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4)]
[(stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x798, 4), (stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x796, 4), (stack, 0xfffffffffffffb5c, 4) MULTIEQUAL (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4)]
[(stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x798, 4), (stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x796, 4), (stack, 0xfffffffffffffb60, 2) MULTIEQUAL (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2)]
[(stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x798, 4), (stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x796, 4), (stack, 0xfffffffffffffb62, 2) MULTIEQUAL (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2)]
[(stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x798, 4), (stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x796, 4), (stack, 0xfffffffffffffb64, 4) MULTIEQUAL (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x798, 4), (stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x796, 4), (stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x798, 4), (stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x796, 4), (stack, 0xfffffffffffffb70, 4) MULTIEQUAL (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4)]
[(stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x798, 4), (stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x796, 4), (stack, 0xfffffffffffffb74, 4) MULTIEQUAL (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x798, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x796, 4), (stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x798, 4), (stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x796, 4), (stack, 0xfffffffffffffb88, 8) MULTIEQUAL (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8)]
[(stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x798, 4), (stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x796, 4), (stack, 0xfffffffffffffb90, 8) MULTIEQUAL (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x798, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x796, 4), (stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x798, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x796, 4), (stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x798, 4), (stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x796, 4), (stack, 0xfffffffffffffbb8, 8) MULTIEQUAL (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8)]
[(stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x798, 4), (stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x796, 4), (stack, 0xfffffffffffffbc0, 8) MULTIEQUAL (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x798, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x796, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CBRANCH (ram, 0x4143b0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xb8, 8) , (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10004575, 8), (unique, 0x10004575, 8) CALLIND (unique, 0xbd80, 8) , (register, 0x38, 8) , (unique, 0x100025b3, 8) , (register, 0xb8, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10004565, 8), (unique, 0x10004565, 8) INT_ADD (unique, 0x1000455d, 8) , (const, 0x38, 8), (unique, 0x1000455d, 8) CAST (register, 0x0, 8), (register, 0xb8, 8) PTRADD (register, 0x0, 8) , (unique, 0x10000480, 8) , (const, 0x1, 8), (unique, 0x10000480, 8) INT_2COMP (unique, 0x10004555, 8), (unique, 0x10004555, 8) CAST (unique, 0x100025b3, 8), (unique, 0x100025b3, 8) COPY (unique, 0x1000453d, 8), (unique, 0x1000453d, 8) CAST (stack, 0xfffffffffffffb30, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x1000261b, 8) , (unique, 0x10002623, 8), (stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(unique, 0x10002d4f, 4) COPY (stack, 0xfffffffffffffabc, 4)]
[ ---  CBRANCH (ram, 0x414480, 1) , (unique, 0xd080, 1), (unique, 0xd080, 1) INT_SLESS (register, 0x0, 8) , (unique, 0x1000457d, 8), (unique, 0x1000457d, 8) CAST (register, 0xb8, 8), (register, 0x0, 8) INT_SEXT (register, 0x0, 4), (register, 0x0, 4) INT_SUB (const, 0x7fffffff, 4) , (stack, 0xfffffffffffffb30, 4), (stack, 0xfffffffffffffb30, 4) SUBPIECE (stack, 0xfffffffffffffb30, 8) , (const, 0x0, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbc0, 8) MULTIEQUAL (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8)]
[(stack, 0xfffffffffffffbb8, 8) MULTIEQUAL (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb90, 8) MULTIEQUAL (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8)]
[(stack, 0xfffffffffffffb88, 8) MULTIEQUAL (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb74, 4) MULTIEQUAL (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4)]
[(stack, 0xfffffffffffffb70, 4) MULTIEQUAL (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4)]
[(stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb64, 4) MULTIEQUAL (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4)]
[(stack, 0xfffffffffffffb62, 2) MULTIEQUAL (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2)]
[(stack, 0xfffffffffffffb60, 2) MULTIEQUAL (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2)]
[(stack, 0xfffffffffffffb5c, 4) MULTIEQUAL (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4)]
[(stack, 0xfffffffffffffb58, 4) MULTIEQUAL (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb24, 4) MULTIEQUAL (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4)]
[(stack, 0xfffffffffffffb20, 4) MULTIEQUAL (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae4, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[(stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffadc, 4) MULTIEQUAL (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4)]
[(stack, 0xfffffffffffffad8, 4) MULTIEQUAL (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4)]
[(stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffac8, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffac0, 8) MULTIEQUAL (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8)]
[(stack, 0xfffffffffffffab8, 4) MULTIEQUAL (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4)]
[(stack, 0xfffffffffffffab4, 4) MULTIEQUAL (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4)]
[(stack, 0xfffffffffffffab3, 1) MULTIEQUAL (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1)]
[(stack, 0xfffffffffffffaac, 4) MULTIEQUAL (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4)]
[(stack, 0xfffffffffffffaa8, 4) MULTIEQUAL (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4)]
[(stack, 0xfffffffffffffaa4, 4) MULTIEQUAL (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4)]
[(stack, 0xfffffffffffffaa0, 4) MULTIEQUAL (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4)]
[(register, 0x20, 8) MULTIEQUAL (unique, 0x10002773, 8) , (register, 0x20, 8) , (register, 0x20, 8)]
[(stack, 0xfffffffffffffabc, 4) COPY (unique, 0x10002d57, 4), (unique, 0x10002d57, 4) MULTIEQUAL (unique, 0x10002d4b, 4) , (unique, 0x10002d4f, 4) , (unique, 0x10002d53, 4)]
[(register, 0x88, 8) COPY (const, 0xffffffff, 8)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x384, 4), (ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x384, 4), (ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x384, 4), (ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x384, 4), (ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x4f00, 8) , (const, 0x4b, 4), (unique, 0x4f00, 8) CAST (unique, 0x10004585, 8), (unique, 0x10004585, 8) INT_ADD (register, 0x110, 8) , (const, 0xffffffffffffffc0, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  BRANCH (ram, 0x4142f8, 1)]
[(register, 0x88, 8) INT_ZEXT (unique, 0x1000458d, 4), (unique, 0x1000458d, 4) CAST (register, 0x88, 4), (register, 0x88, 4) INT_ADD (stack, 0xfffffffffffffb30, 4) , (register, 0xb8, 4), (register, 0xb8, 4) SUBPIECE (register, 0xb8, 8) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x4141cc, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0x0, 8)]
[(register, 0x88, 4) MULTIEQUAL (register, 0x88, 4) , (register, 0x88, 4) , (register, 0x88, 4) , (register, 0x88, 4) , (register, 0x88, 4) , (register, 0x88, 4) , (register, 0x88, 4) , (register, 0x88, 4) , (unique, 0x1000231b, 4) , (register, 0x88, 4) , (register, 0x88, 4) , (register, 0x88, 4) , (register, 0x88, 4) , (register, 0x88, 4) , (register, 0x88, 4) , (register, 0x88, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (unique, 0x10002312, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbc0, 8) MULTIEQUAL (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (unique, 0x1000230a, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8)]
[(stack, 0xfffffffffffffbb8, 8) MULTIEQUAL (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (unique, 0x10002302, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (unique, 0x100022fa, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (unique, 0x100022f2, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb90, 8) MULTIEQUAL (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (unique, 0x100022ea, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8)]
[(stack, 0xfffffffffffffb88, 8) MULTIEQUAL (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (unique, 0x100022e2, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (unique, 0x100022de, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb74, 4) MULTIEQUAL (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (unique, 0x100022da, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4)]
[(stack, 0xfffffffffffffb70, 4) MULTIEQUAL (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (unique, 0x100022d6, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4)]
[(stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (unique, 0x100022ce, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb64, 4) MULTIEQUAL (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (unique, 0x100022ca, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4)]
[(stack, 0xfffffffffffffb62, 2) MULTIEQUAL (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (unique, 0x100022c8, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2)]
[(stack, 0xfffffffffffffb60, 2) MULTIEQUAL (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (unique, 0x100022c6, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2)]
[(stack, 0xfffffffffffffb5c, 4) MULTIEQUAL (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (unique, 0x100022c2, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4)]
[(stack, 0xfffffffffffffb58, 4) MULTIEQUAL (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (unique, 0x100022be, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (unique, 0x100022b6, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (unique, 0x100022ae, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (unique, 0x100022aa, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (unique, 0x100022a6, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (unique, 0x1000229e, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (unique, 0x10002296, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (unique, 0x1000228e, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb24, 4) MULTIEQUAL (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (unique, 0x1000228a, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4)]
[(stack, 0xfffffffffffffb20, 4) MULTIEQUAL (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (unique, 0x10002286, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (unique, 0x1000227e, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (unique, 0x10002276, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (unique, 0x1000226e, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (unique, 0x10002266, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (unique, 0x1000225e, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (unique, 0x10002256, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (unique, 0x1000224e, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae4, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (unique, 0x1000224a, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[(stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (unique, 0x10002246, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffadc, 4) MULTIEQUAL (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (unique, 0x10002242, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4)]
[(stack, 0xfffffffffffffad8, 4) MULTIEQUAL (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (unique, 0x1000223e, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4)]
[(stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (unique, 0x10002236, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffac8, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (unique, 0x1000222e, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffac0, 8) MULTIEQUAL (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (unique, 0x10002226, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8)]
[(stack, 0xfffffffffffffabc, 4) MULTIEQUAL (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (unique, 0x10002222, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4)]
[(stack, 0xfffffffffffffab8, 4) MULTIEQUAL (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (unique, 0x1000221e, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4)]
[(stack, 0xfffffffffffffab4, 4) MULTIEQUAL (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (unique, 0x1000221a, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4)]
[(stack, 0xfffffffffffffab3, 1) MULTIEQUAL (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (unique, 0x10002219, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1)]
[(stack, 0xfffffffffffffaac, 4) MULTIEQUAL (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (unique, 0x10002215, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4)]
[(stack, 0xfffffffffffffaa8, 4) MULTIEQUAL (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (unique, 0x10002211, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4)]
[(stack, 0xfffffffffffffaa4, 4) MULTIEQUAL (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (unique, 0x1000220d, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4)]
[(stack, 0xfffffffffffffaa0, 4) MULTIEQUAL (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (unique, 0x10002209, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4)]
[(ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (unique, 0x10002201, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[(ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (unique, 0x100021f9, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (unique, 0x100021f1, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (unique, 0x100021e9, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (unique, 0x100021e1, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (unique, 0x100021d9, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x4144f0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xb8, 1) , (const, 0x0, 1), (register, 0xb8, 1) MULTIEQUAL (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0x1000231a, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1)]
[(register, 0x88, 4) MULTIEQUAL (register, 0x88, 4) , (register, 0x88, 4) , (register, 0x88, 4) , (register, 0x88, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbc0, 8) MULTIEQUAL (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8)]
[(stack, 0xfffffffffffffbb8, 8) MULTIEQUAL (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb90, 8) MULTIEQUAL (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8)]
[(stack, 0xfffffffffffffb88, 8) MULTIEQUAL (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb74, 4) MULTIEQUAL (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4)]
[(stack, 0xfffffffffffffb70, 4) MULTIEQUAL (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4)]
[(stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb64, 4) MULTIEQUAL (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4)]
[(stack, 0xfffffffffffffb62, 2) MULTIEQUAL (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2)]
[(stack, 0xfffffffffffffb60, 2) MULTIEQUAL (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2)]
[(stack, 0xfffffffffffffb5c, 4) MULTIEQUAL (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4)]
[(stack, 0xfffffffffffffb58, 4) MULTIEQUAL (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb24, 4) MULTIEQUAL (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4)]
[(stack, 0xfffffffffffffb20, 4) MULTIEQUAL (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4)]
[(stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffadc, 4) MULTIEQUAL (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4)]
[(stack, 0xfffffffffffffad8, 4) MULTIEQUAL (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4)]
[(stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffac8, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffac0, 8) MULTIEQUAL (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8)]
[(stack, 0xfffffffffffffabc, 4) MULTIEQUAL (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4)]
[(stack, 0xfffffffffffffab8, 4) MULTIEQUAL (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4)]
[(stack, 0xfffffffffffffab4, 4) MULTIEQUAL (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4)]
[(stack, 0xfffffffffffffab3, 1) MULTIEQUAL (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1)]
[(stack, 0xfffffffffffffaac, 4) MULTIEQUAL (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4)]
[(stack, 0xfffffffffffffaa8, 4) MULTIEQUAL (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4)]
[(stack, 0xfffffffffffffaa4, 4) MULTIEQUAL (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4)]
[(stack, 0xfffffffffffffaa0, 4) MULTIEQUAL (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4)]
[(ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[(ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x1000259f, 8) COPY (stack, 0xfffffffffffffb18, 8), (stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(register, 0x18, 8) INT_ZEXT (stack, 0xfffffffffffffae4, 4), (stack, 0xfffffffffffffae4, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[(unique, 0x1000278b, 8) COPY (register, 0x20, 8), (register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x4142a5, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xfffffffffffffb18, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100045a1, 8) , (const, 0x414512, 8), (unique, 0x100045a1, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x325, 4)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x325, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x325, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x325, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x325, 4)]
[(stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x325, 4), (stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x324, 4)]
[(stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x325, 4), (stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x324, 4)]
[(stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x325, 4), (stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x324, 4)]
[(stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x325, 4), (stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x324, 4)]
[(stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x325, 4), (stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x324, 4)]
[(stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x325, 4), (stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x324, 4)]
[(stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x325, 4), (stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x324, 4)]
[(stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x325, 4), (stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x324, 4)]
[(stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x325, 4), (stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x324, 4)]
[(stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x325, 4), (stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x324, 4)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x325, 4), (stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x324, 4)]
[(stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x325, 4), (stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x324, 4)]
[(stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x325, 4), (stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x324, 4)]
[(stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x325, 4), (stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x324, 4)]
[(stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x325, 4), (stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x324, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x325, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x324, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x325, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x324, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x325, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x324, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x325, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x324, 4)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x325, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x324, 4)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x325, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x324, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x325, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x324, 4)]
[(stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x325, 4), (stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x324, 4)]
[(stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x325, 4), (stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x324, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x325, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x324, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x325, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x324, 4), (stack, 0xfffffffffffffb30, 8) CAST (unique, 0x10004599, 8), (unique, 0x10004599, 8) INT_OR (unique, 0x10000eca, 8) , (unique, 0x10000ed2, 8), (unique, 0x10000ed2, 8) INT_ZEXT (register, 0x88, 4), (unique, 0x10000eca, 8) INT_AND (unique, 0x10004591, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10004591, 8) CAST (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x325, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x324, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x325, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x324, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x325, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x324, 4)]
[(stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x325, 4), (stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x324, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x325, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x324, 4)]
[(stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x325, 4), (stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x324, 4)]
[(stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x325, 4), (stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x324, 4)]
[(stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x325, 4), (stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x324, 4)]
[(stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x325, 4), (stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x324, 4)]
[(stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x325, 4), (stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x324, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x325, 4), (stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x324, 4)]
[(stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x325, 4), (stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x324, 4)]
[(stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x325, 4), (stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x324, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x325, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x324, 4)]
[(stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x325, 4), (stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x324, 4)]
[(stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x325, 4), (stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x324, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x325, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x324, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x325, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x324, 4)]
[(stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x325, 4), (stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x324, 4)]
[(stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x325, 4), (stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x324, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x325, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x324, 4)]
[ ---  CALL (ram, 0x426b40, 8) , (unique, 0x1000259f, 8)]
[(unique, 0x10002793, 8) COPY (register, 0x20, 8)]
[ ---  BRANCH (ram, 0x4142a5, 1)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x243, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x243, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x243, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x243, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x4f00, 8) , (const, 0x16, 4), (unique, 0x4f00, 8) CAST (unique, 0x100045a9, 8), (unique, 0x100045a9, 8) INT_ADD (register, 0x110, 8) , (const, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbc0, 8) MULTIEQUAL (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8)]
[(stack, 0xfffffffffffffbb8, 8) MULTIEQUAL (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb90, 8) MULTIEQUAL (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8)]
[(stack, 0xfffffffffffffb88, 8) MULTIEQUAL (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb74, 4) MULTIEQUAL (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4)]
[(stack, 0xfffffffffffffb70, 4) MULTIEQUAL (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4)]
[(stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb64, 4) MULTIEQUAL (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4)]
[(stack, 0xfffffffffffffb62, 2) MULTIEQUAL (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2)]
[(stack, 0xfffffffffffffb60, 2) MULTIEQUAL (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2)]
[(stack, 0xfffffffffffffb5c, 4) MULTIEQUAL (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4)]
[(stack, 0xfffffffffffffb58, 4) MULTIEQUAL (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb24, 4) MULTIEQUAL (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4)]
[(stack, 0xfffffffffffffb20, 4) MULTIEQUAL (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4)]
[(stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae4, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[(stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffadc, 4) MULTIEQUAL (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4)]
[(stack, 0xfffffffffffffad8, 4) MULTIEQUAL (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4)]
[(stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffac8, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffac0, 8) MULTIEQUAL (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8)]
[(stack, 0xfffffffffffffabc, 4) MULTIEQUAL (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4)]
[(stack, 0xfffffffffffffab8, 4) MULTIEQUAL (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4)]
[(stack, 0xfffffffffffffab4, 4) MULTIEQUAL (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4)]
[(stack, 0xfffffffffffffab3, 1) MULTIEQUAL (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1)]
[(stack, 0xfffffffffffffaac, 4) MULTIEQUAL (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4)]
[(stack, 0xfffffffffffffaa8, 4) MULTIEQUAL (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4)]
[(stack, 0xfffffffffffffaa4, 4) MULTIEQUAL (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4)]
[(stack, 0xfffffffffffffaa0, 4) MULTIEQUAL (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4)]
[(ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[(ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8)]
[(unique, 0x10002597, 8) COPY (stack, 0xfffffffffffffb18, 8), (stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[ ---  CBRANCH (ram, 0x4143b0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xfffffffffffffb18, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100045b1, 8) , (const, 0x4143ae, 8), (unique, 0x100045b1, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x259, 4)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x259, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x259, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x259, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x259, 4)]
[(stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x259, 4), (stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x258, 4)]
[(stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x259, 4), (stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x258, 4)]
[(stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x259, 4), (stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x258, 4)]
[(stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x259, 4), (stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x258, 4)]
[(stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x259, 4), (stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x258, 4)]
[(stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x259, 4), (stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x258, 4)]
[(stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x259, 4), (stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x258, 4)]
[(stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x259, 4), (stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x258, 4)]
[(stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x259, 4), (stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x258, 4)]
[(stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x259, 4), (stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x258, 4)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x259, 4), (stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x258, 4)]
[(stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x259, 4), (stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x258, 4)]
[(stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x259, 4), (stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x258, 4)]
[(stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x259, 4), (stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x258, 4)]
[(stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x259, 4), (stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x258, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x259, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x258, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x259, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x258, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x259, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x258, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x259, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x258, 4)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x259, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x258, 4)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x259, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x258, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x259, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x258, 4)]
[(stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x259, 4), (stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x258, 4)]
[(stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x259, 4), (stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x258, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x259, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x258, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x259, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x258, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x259, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x258, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x259, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x258, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x259, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x258, 4)]
[(stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x259, 4), (stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x258, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x259, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x258, 4)]
[(stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x259, 4), (stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x258, 4)]
[(stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x259, 4), (stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x258, 4)]
[(stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x259, 4), (stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x258, 4)]
[(stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x259, 4), (stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x258, 4)]
[(stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x259, 4), (stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x258, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x259, 4), (stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x258, 4)]
[(stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x259, 4), (stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x258, 4)]
[(stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x259, 4), (stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x258, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x259, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x258, 4)]
[(stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x259, 4), (stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x258, 4)]
[(stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x259, 4), (stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x258, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x259, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x258, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x259, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x258, 4)]
[(stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x259, 4), (stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x258, 4)]
[(stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x259, 4), (stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x258, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x259, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x258, 4)]
[ ---  CALL (ram, 0x426b40, 8) , (unique, 0x10002597, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbc0, 8) MULTIEQUAL (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8)]
[(stack, 0xfffffffffffffbb8, 8) MULTIEQUAL (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb90, 8) MULTIEQUAL (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8)]
[(stack, 0xfffffffffffffb88, 8) MULTIEQUAL (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb74, 4) MULTIEQUAL (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4)]
[(stack, 0xfffffffffffffb70, 4) MULTIEQUAL (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4)]
[(stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb64, 4) MULTIEQUAL (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4)]
[(stack, 0xfffffffffffffb62, 2) MULTIEQUAL (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2)]
[(stack, 0xfffffffffffffb60, 2) MULTIEQUAL (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2)]
[(stack, 0xfffffffffffffb5c, 4) MULTIEQUAL (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4)]
[(stack, 0xfffffffffffffb58, 4) MULTIEQUAL (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb24, 4) MULTIEQUAL (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4)]
[(stack, 0xfffffffffffffb20, 4) MULTIEQUAL (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae4, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[(stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffadc, 4) MULTIEQUAL (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4)]
[(stack, 0xfffffffffffffad8, 4) MULTIEQUAL (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4)]
[(stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffac8, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffac0, 8) MULTIEQUAL (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8)]
[(stack, 0xfffffffffffffabc, 4) MULTIEQUAL (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4)]
[(stack, 0xfffffffffffffab8, 4) MULTIEQUAL (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4)]
[(stack, 0xfffffffffffffab4, 4) MULTIEQUAL (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4)]
[(stack, 0xfffffffffffffab3, 1) MULTIEQUAL (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1)]
[(stack, 0xfffffffffffffaac, 4) MULTIEQUAL (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4)]
[(stack, 0xfffffffffffffaa8, 4) MULTIEQUAL (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4)]
[(stack, 0xfffffffffffffaa4, 4) MULTIEQUAL (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4)]
[(stack, 0xfffffffffffffaa0, 4) MULTIEQUAL (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4)]
[(ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[(ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8)]
[(register, 0x88, 8) COPY (const, 0xffffffff, 8)]
[ ---  BRANCH (ram, 0x4142f8, 1)]
[(stack, 0xfffffffffffffab8, 4) COPY (const, 0x0, 4)]
[(stack, 0xfffffffffffffad0, 8) COPY (const, 0xffffffffffffffff, 8)]
[(unique, 0x1000279b, 8) COPY (register, 0x20, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100045b9, 8) , (register, 0x0, 8), (unique, 0x100045b9, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff0, 8) , (const, 0x1, 8), (register, 0x0, 8) INT_ZEXT (stack, 0xfffffffffffffb40, 4), (register, 0x20, 8) MULTIEQUAL (unique, 0x1000278b, 8) , (unique, 0x10002793, 8) , (unique, 0x1000279b, 8) , (unique, 0x100027a3, 8), (stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100045c1, 8) , (stack, 0xfffffffffffffac0, 8), (unique, 0x100045c1, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xffffffffffffffe8, 8) , (const, 0x1, 8), (stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x343, 4), (register, 0x20, 8) MULTIEQUAL (unique, 0x1000278b, 8) , (unique, 0x10002793, 8) , (unique, 0x1000279b, 8) , (unique, 0x100027a3, 8), (stack, 0xfffffffffffffac0, 8) MULTIEQUAL (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100045c9, 8) , (stack, 0xfffffffffffffad0, 8), (unique, 0x100045c9, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xffffffffffffffe0, 8) , (const, 0x1, 8), (stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x34c, 4), (stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x343, 4), (register, 0x20, 8) MULTIEQUAL (unique, 0x1000278b, 8) , (unique, 0x10002793, 8) , (unique, 0x1000279b, 8) , (unique, 0x100027a3, 8), (stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100045d1, 8) , (register, 0x0, 8), (unique, 0x100045d1, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xffffffffffffffd8, 8) , (const, 0x1, 8), (register, 0x0, 8) INT_ZEXT (stack, 0xfffffffffffffb24, 4), (stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x343, 4), (register, 0x20, 8) MULTIEQUAL (unique, 0x1000278b, 8) , (unique, 0x10002793, 8) , (unique, 0x1000279b, 8) , (unique, 0x100027a3, 8), (stack, 0xfffffffffffffb24, 4) MULTIEQUAL (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100045d9, 8) , (unique, 0x3200, 8), (unique, 0x100045d9, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xffffffffffffffd0, 8) , (const, 0x1, 8), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffbd8, 8), (register, 0x20, 8) MULTIEQUAL (unique, 0x1000278b, 8) , (unique, 0x10002793, 8) , (unique, 0x1000279b, 8) , (unique, 0x100027a3, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100045e1, 8) , (stack, 0xfffffffffffffb38, 8), (unique, 0x100045e1, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xffffffffffffffc8, 8) , (const, 0x1, 8), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x359, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x354, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x351, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x34c, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x343, 4), (register, 0x20, 8) MULTIEQUAL (unique, 0x1000278b, 8) , (unique, 0x10002793, 8) , (unique, 0x1000279b, 8) , (unique, 0x100027a3, 8), (stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100045e9, 8) , (register, 0x18, 8), (unique, 0x100045e9, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xffffffffffffffc0, 8) , (const, 0x1, 8), (register, 0x18, 8) MULTIEQUAL (register, 0x18, 8) , (register, 0x18, 8) , (register, 0x18, 8) , (register, 0x18, 8), (register, 0x20, 8) MULTIEQUAL (unique, 0x1000278b, 8) , (unique, 0x10002793, 8) , (unique, 0x1000279b, 8) , (unique, 0x100027a3, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100045f1, 8) , (const, 0x4142ed, 8), (unique, 0x100045f1, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xffffffffffffffb8, 8) , (const, 0x1, 8), (register, 0x20, 8) MULTIEQUAL (unique, 0x1000278b, 8) , (unique, 0x10002793, 8) , (unique, 0x1000279b, 8) , (unique, 0x100027a3, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x364, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x364, 4), (ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x364, 4), (ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x364, 4), (ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x364, 4), (ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[(stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x364, 4), (stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x363, 4), (stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x361, 4), (stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x35e, 4), (stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x359, 4), (stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x354, 4), (stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x351, 4), (stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x34c, 4), (stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x343, 4), (stack, 0xfffffffffffffaa0, 4) MULTIEQUAL (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4)]
[(stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x364, 4), (stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x363, 4), (stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x361, 4), (stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x35e, 4), (stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x359, 4), (stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x354, 4), (stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x351, 4), (stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x34c, 4), (stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x343, 4), (stack, 0xfffffffffffffaa4, 4) MULTIEQUAL (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4)]
[(stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x364, 4), (stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x363, 4), (stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x361, 4), (stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x35e, 4), (stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x359, 4), (stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x354, 4), (stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x351, 4), (stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x34c, 4), (stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x343, 4), (stack, 0xfffffffffffffaa8, 4) MULTIEQUAL (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4)]
[(stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x364, 4), (stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x363, 4), (stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x361, 4), (stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x35e, 4), (stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x359, 4), (stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x354, 4), (stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x351, 4), (stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x34c, 4), (stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x343, 4), (stack, 0xfffffffffffffaac, 4) MULTIEQUAL (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4)]
[(stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x364, 4), (stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x363, 4), (stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x361, 4), (stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x35e, 4), (stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x359, 4), (stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x354, 4), (stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x351, 4), (stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x34c, 4), (stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x343, 4), (stack, 0xfffffffffffffab3, 1) MULTIEQUAL (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1)]
[(stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x364, 4), (stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x363, 4), (stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x361, 4), (stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x35e, 4), (stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x359, 4), (stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x354, 4), (stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x351, 4), (stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x34c, 4), (stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x343, 4), (stack, 0xfffffffffffffab4, 4) MULTIEQUAL (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4)]
[(stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x364, 4), (stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x363, 4), (stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x361, 4), (stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x35e, 4), (stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x359, 4), (stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x354, 4), (stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x351, 4), (stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x34c, 4), (stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x343, 4), (stack, 0xfffffffffffffab8, 4) MULTIEQUAL (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4)]
[(stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x364, 4), (stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x363, 4), (stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x361, 4), (stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x35e, 4), (stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x359, 4), (stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x354, 4), (stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x351, 4), (stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x34c, 4), (stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x343, 4), (stack, 0xfffffffffffffabc, 4) MULTIEQUAL (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4)]
[(stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x364, 4), (stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x363, 4), (stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x361, 4), (stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x35e, 4), (stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x359, 4), (stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x354, 4), (stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x351, 4), (stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x34c, 4), (stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x343, 4), (stack, 0xfffffffffffffac0, 8) MULTIEQUAL (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8)]
[(stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x364, 4), (stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x363, 4), (stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x361, 4), (stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x35e, 4), (stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x359, 4), (stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x354, 4), (stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x351, 4), (stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x34c, 4), (stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x343, 4), (stack, 0xfffffffffffffac8, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x364, 4), (stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x363, 4), (stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x361, 4), (stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x35e, 4), (stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x359, 4), (stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x354, 4), (stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x351, 4), (stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x34c, 4), (stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x343, 4), (stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x364, 4), (stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x363, 4), (stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x361, 4), (stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x35e, 4), (stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x359, 4), (stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x354, 4), (stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x351, 4), (stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x34c, 4), (stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x343, 4), (stack, 0xfffffffffffffad8, 4) MULTIEQUAL (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4)]
[(stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x364, 4), (stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x363, 4), (stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x361, 4), (stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x35e, 4), (stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x359, 4), (stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x354, 4), (stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x351, 4), (stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x34c, 4), (stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x343, 4), (stack, 0xfffffffffffffadc, 4) MULTIEQUAL (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4)]
[(stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x364, 4), (stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x363, 4), (stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x361, 4), (stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x35e, 4), (stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x359, 4), (stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x354, 4), (stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x351, 4), (stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x34c, 4), (stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x343, 4), (stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x364, 4), (stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x363, 4), (stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x361, 4), (stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x35e, 4), (stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x359, 4), (stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x354, 4), (stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x351, 4), (stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x34c, 4), (stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x343, 4), (stack, 0xfffffffffffffae4, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x364, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x363, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x361, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x35e, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x359, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x354, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x351, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x34c, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x343, 4), (stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x364, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x363, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x361, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x35e, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x359, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x354, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x351, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x34c, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x343, 4), (stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x364, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x363, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x361, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x35e, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x359, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x354, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x351, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x34c, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x343, 4), (stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x364, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x363, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x361, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x35e, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x359, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x354, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x351, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x34c, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x343, 4), (stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x364, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x363, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x361, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x35e, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x359, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x354, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x351, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x34c, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x343, 4), (stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x364, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x363, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x361, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x35e, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x359, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x354, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x351, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x34c, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x343, 4), (stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x364, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x363, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x361, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x35e, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x359, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x354, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x351, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x34c, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x343, 4), (stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x364, 4), (stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x363, 4), (stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x361, 4), (stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x35e, 4), (stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x359, 4), (stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x354, 4), (stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x351, 4), (stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x34c, 4), (stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x343, 4), (stack, 0xfffffffffffffb20, 4) MULTIEQUAL (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4)]
[(stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x364, 4), (stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x363, 4), (stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x361, 4), (stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x35e, 4), (stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x359, 4), (stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x354, 4), (stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x351, 4), (stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x34c, 4), (stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x343, 4), (stack, 0xfffffffffffffb24, 4) MULTIEQUAL (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x364, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x363, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x361, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x35e, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x359, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x354, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x351, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x34c, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x343, 4), (stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x364, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x363, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x361, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x35e, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x359, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x354, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x351, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x34c, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x343, 4), (stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x364, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x363, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x361, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x35e, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x359, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x354, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x351, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x34c, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x343, 4), (stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x364, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x363, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x361, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x35e, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x359, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x354, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x351, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x34c, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x343, 4), (stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x364, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x363, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x361, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x35e, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x359, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x354, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x351, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x34c, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x343, 4), (stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x364, 4), (stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x363, 4), (stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x361, 4), (stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x35e, 4), (stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x359, 4), (stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x354, 4), (stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x351, 4), (stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x34c, 4), (stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x343, 4), (stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x364, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x363, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x361, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x35e, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x359, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x354, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x351, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x34c, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x343, 4), (stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x364, 4), (stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x363, 4), (stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x361, 4), (stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x35e, 4), (stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x359, 4), (stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x354, 4), (stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x351, 4), (stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x34c, 4), (stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x343, 4), (stack, 0xfffffffffffffb58, 4) MULTIEQUAL (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4)]
[(stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x364, 4), (stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x363, 4), (stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x361, 4), (stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x35e, 4), (stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x359, 4), (stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x354, 4), (stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x351, 4), (stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x34c, 4), (stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x343, 4), (stack, 0xfffffffffffffb5c, 4) MULTIEQUAL (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4)]
[(stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x364, 4), (stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x363, 4), (stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x361, 4), (stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x35e, 4), (stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x359, 4), (stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x354, 4), (stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x351, 4), (stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x34c, 4), (stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x343, 4), (stack, 0xfffffffffffffb60, 2) MULTIEQUAL (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2)]
[(stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x364, 4), (stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x363, 4), (stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x361, 4), (stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x35e, 4), (stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x359, 4), (stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x354, 4), (stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x351, 4), (stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x34c, 4), (stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x343, 4), (stack, 0xfffffffffffffb62, 2) MULTIEQUAL (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2)]
[(stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x364, 4), (stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x363, 4), (stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x361, 4), (stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x35e, 4), (stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x359, 4), (stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x354, 4), (stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x351, 4), (stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x34c, 4), (stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x343, 4), (stack, 0xfffffffffffffb64, 4) MULTIEQUAL (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x364, 4), (stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x363, 4), (stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x361, 4), (stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x35e, 4), (stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x359, 4), (stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x354, 4), (stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x351, 4), (stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x34c, 4), (stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x343, 4), (stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x364, 4), (stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x363, 4), (stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x361, 4), (stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x35e, 4), (stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x359, 4), (stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x354, 4), (stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x351, 4), (stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x34c, 4), (stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x343, 4), (stack, 0xfffffffffffffb70, 4) MULTIEQUAL (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4)]
[(stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x364, 4), (stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x363, 4), (stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x361, 4), (stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x35e, 4), (stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x359, 4), (stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x354, 4), (stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x351, 4), (stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x34c, 4), (stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x343, 4), (stack, 0xfffffffffffffb74, 4) MULTIEQUAL (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x364, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x363, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x361, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x35e, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x359, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x354, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x351, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x34c, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x343, 4), (stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x364, 4), (stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x363, 4), (stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x361, 4), (stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x35e, 4), (stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x359, 4), (stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x354, 4), (stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x351, 4), (stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x34c, 4), (stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x343, 4), (stack, 0xfffffffffffffb88, 8) MULTIEQUAL (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8)]
[(stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x364, 4), (stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x363, 4), (stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x361, 4), (stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x35e, 4), (stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x359, 4), (stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x354, 4), (stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x351, 4), (stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x34c, 4), (stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x343, 4), (stack, 0xfffffffffffffb90, 8) MULTIEQUAL (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x364, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x363, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x361, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x35e, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x359, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x354, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x351, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x34c, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x343, 4), (stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x364, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x363, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x361, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x35e, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x359, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x354, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x351, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x34c, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x343, 4), (stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x364, 4), (stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x363, 4), (stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x361, 4), (stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x35e, 4), (stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x359, 4), (stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x354, 4), (stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x351, 4), (stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x34c, 4), (stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x343, 4), (stack, 0xfffffffffffffbb8, 8) MULTIEQUAL (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8)]
[(stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x364, 4), (stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x363, 4), (stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x361, 4), (stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x35e, 4), (stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x359, 4), (stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x354, 4), (stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x351, 4), (stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x34c, 4), (stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x343, 4), (stack, 0xfffffffffffffbc0, 8) MULTIEQUAL (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x364, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x363, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x361, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x35e, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x359, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x354, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x351, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x34c, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x343, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(register, 0x88, 8) INT_ZEXT (register, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x4114c0, 8) , (register, 0x38, 8) , (register, 0x30, 8) , (unique, 0x1000252b, 4) , (register, 0x10, 8) , (unique, 0x3200, 8), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffbb0, 8), (unique, 0x1000252b, 4) COPY (stack, 0xfffffffffffffab8, 4), (stack, 0xfffffffffffffab8, 4) MULTIEQUAL (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbc0, 8) MULTIEQUAL (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8)]
[(stack, 0xfffffffffffffbb8, 8) MULTIEQUAL (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb90, 8) MULTIEQUAL (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8)]
[(stack, 0xfffffffffffffb88, 8) MULTIEQUAL (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb74, 4) MULTIEQUAL (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4)]
[(stack, 0xfffffffffffffb70, 4) MULTIEQUAL (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4)]
[(stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb64, 4) MULTIEQUAL (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4)]
[(stack, 0xfffffffffffffb62, 2) MULTIEQUAL (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2)]
[(stack, 0xfffffffffffffb60, 2) MULTIEQUAL (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2)]
[(stack, 0xfffffffffffffb5c, 4) MULTIEQUAL (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4)]
[(stack, 0xfffffffffffffb58, 4) MULTIEQUAL (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb24, 4) MULTIEQUAL (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4)]
[(stack, 0xfffffffffffffb20, 4) MULTIEQUAL (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae4, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[(stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffadc, 4) MULTIEQUAL (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4)]
[(stack, 0xfffffffffffffad8, 4) MULTIEQUAL (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4)]
[(stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffac8, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffac0, 8) MULTIEQUAL (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8)]
[(stack, 0xfffffffffffffabc, 4) MULTIEQUAL (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4)]
[(stack, 0xfffffffffffffab8, 4) MULTIEQUAL (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4)]
[(stack, 0xfffffffffffffab4, 4) MULTIEQUAL (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4)]
[(stack, 0xfffffffffffffab3, 1) MULTIEQUAL (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1)]
[(stack, 0xfffffffffffffaac, 4) MULTIEQUAL (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4)]
[(stack, 0xfffffffffffffaa8, 4) MULTIEQUAL (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4)]
[(stack, 0xfffffffffffffaa4, 4) MULTIEQUAL (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4)]
[(stack, 0xfffffffffffffaa0, 4) MULTIEQUAL (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4)]
[(ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[(ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x88, 8) MULTIEQUAL (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8)]
[(register, 0x20, 8) MULTIEQUAL (unique, 0x10002783, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x414319, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x58e00, 4) , (const, 0x0, 4), (unique, 0x58e00, 4) INT_AND (unique, 0xbd00, 4) , (const, 0x8000, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10001c70, 8), (unique, 0x10001c70, 8) PTRSUB (register, 0x38, 8) , (const, 0x0, 8)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x27b, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x27b, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x27b, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x27b, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (register, 0x0, 4), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x1, 8) , (const, 0x4, 8), (register, 0x0, 4) INT_ADD (unique, 0xbc80, 4) , (const, 0xffffffff, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x1, 8) , (const, 0x4, 8), (unique, 0xbd80, 8) CAST (unique, 0x100045f9, 8), (unique, 0x100045f9, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3c80, 8), (unique, 0x3c80, 8) PTRSUB (register, 0x38, 8) , (const, 0x88, 8)]
[ ---  CBRANCH (ram, 0x4143e8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) INT_ADD (unique, 0xbc80, 4) , (const, 0xffffffff, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x1, 8) , (const, 0x4, 8), (unique, 0xbd80, 8) CAST (unique, 0x100045f9, 8), (unique, 0x100045f9, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3c80, 8), (unique, 0x3c80, 8) PTRSUB (register, 0x38, 8) , (const, 0x88, 8)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x2cd, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x2cd, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x2cd, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x2cd, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10004601, 8) , (const, 0x0, 8), (unique, 0x10004601, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x2, 8) , (const, 0x4, 8)]
[ ---  CBRANCH (ram, 0x415ed0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10004609, 8), (unique, 0x10004609, 8) INT_ADD (register, 0x110, 8) , (const, 0x18, 8)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x2f1, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x2f1, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x2f1, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x2f1, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0xbd80, 8) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x414319, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (const, 0x1, 4) , (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0xbd80, 8)]
[ ---  CALLOTHER (const, 0x5, 4)]
[ ---  BRANCH (ram, 0x414319, 1)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x2e3, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x2e3, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x2e3, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x2e3, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0xbd80, 8) , (unique, 0xbd00, 4), (unique, 0xbd00, 4) INT_ADD (unique, 0xbd00, 4) , (const, 0xffffffff, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0xbd80, 8)]
[ ---  BRANCH (ram, 0x414319, 1)]
[(ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[(ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(unique, 0x100027ab, 8) COPY (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x4143c0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xfffffffffffffb44, 4) , (const, 0x0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10004611, 8) , (const, 0x4143d5, 8), (unique, 0x10004611, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x2c5, 4)]
[(ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x2c5, 4)]
[(ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x2c5, 4)]
[(ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x2c5, 4)]
[(ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x2c5, 4)]
[(stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x2c5, 4), (stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x2c4, 4)]
[(stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x2c5, 4), (stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x2c4, 4)]
[(stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x2c5, 4), (stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x2c4, 4)]
[(stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x2c5, 4), (stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x2c4, 4)]
[(stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x2c5, 4), (stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x2c4, 4)]
[(stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x2c5, 4), (stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x2c4, 4)]
[(stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x2c5, 4), (stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x2c4, 4)]
[(stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x2c5, 4), (stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x2c4, 4)]
[(stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x2c5, 4), (stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x2c4, 4)]
[(stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x2c5, 4), (stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x2c4, 4)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x2c5, 4), (stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x2c4, 4)]
[(stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x2c5, 4), (stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x2c4, 4)]
[(stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x2c5, 4), (stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x2c4, 4)]
[(stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x2c5, 4), (stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x2c4, 4)]
[(stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x2c5, 4), (stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x2c4, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x2c5, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x2c4, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x2c5, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x2c4, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x2c5, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x2c4, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x2c5, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x2c4, 4)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x2c5, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x2c4, 4)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x2c5, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x2c4, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x2c5, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x2c4, 4)]
[(stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x2c5, 4), (stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x2c4, 4)]
[(stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x2c5, 4), (stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x2c4, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x2c5, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x2c4, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x2c5, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x2c4, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x2c5, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x2c4, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x2c5, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x2c4, 4)]
[(stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x2c5, 4), (stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x2c4, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x2c5, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x2c4, 4)]
[(stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x2c5, 4), (stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x2c4, 4)]
[(stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x2c5, 4), (stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x2c4, 4)]
[(stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x2c5, 4), (stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x2c4, 4)]
[(stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x2c5, 4), (stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x2c4, 4)]
[(stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x2c5, 4), (stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x2c4, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x2c5, 4), (stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x2c4, 4)]
[(stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x2c5, 4), (stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x2c4, 4)]
[(stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x2c5, 4), (stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x2c4, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x2c5, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x2c4, 4)]
[(stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x2c5, 4), (stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x2c4, 4)]
[(stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x2c5, 4), (stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x2c4, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x2c5, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x2c4, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x2c5, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x2c4, 4)]
[(stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x2c5, 4), (stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x2c4, 4)]
[(stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x2c5, 4), (stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x2c4, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2c5, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2c4, 4)]
[ ---  CALL (ram, 0x0, 8) , (unique, 0x3200, 8) , (const, 0x0, 8), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffb88, 8)]
[(register, 0x88, 8) INT_ZEXT (stack, 0xfffffffffffffb44, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x2c5, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x2c4, 4), (stack, 0xfffffffffffffb44, 4) COPY (register, 0x88, 4), (register, 0x88, 4) SUBPIECE (register, 0x88, 8) , (const, 0x0, 4)]
[ ---  BRANCH (ram, 0x414327, 1)]
[(stack, 0xfffffffffffffbc0, 8) MULTIEQUAL (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8) , (stack, 0xfffffffffffffbc0, 8)]
[(stack, 0xfffffffffffffbb8, 8) MULTIEQUAL (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8) , (stack, 0xfffffffffffffbb8, 8)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb90, 8) MULTIEQUAL (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8) , (stack, 0xfffffffffffffb90, 8)]
[(stack, 0xfffffffffffffb88, 8) MULTIEQUAL (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8) , (stack, 0xfffffffffffffb88, 8)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb74, 4) MULTIEQUAL (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4) , (stack, 0xfffffffffffffb74, 4)]
[(stack, 0xfffffffffffffb70, 4) MULTIEQUAL (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4) , (stack, 0xfffffffffffffb70, 4)]
[(stack, 0xfffffffffffffb68, 8) MULTIEQUAL (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8) , (stack, 0xfffffffffffffb68, 8)]
[(stack, 0xfffffffffffffb64, 4) MULTIEQUAL (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4) , (stack, 0xfffffffffffffb64, 4)]
[(stack, 0xfffffffffffffb62, 2) MULTIEQUAL (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2) , (stack, 0xfffffffffffffb62, 2)]
[(stack, 0xfffffffffffffb60, 2) MULTIEQUAL (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2) , (stack, 0xfffffffffffffb60, 2)]
[(stack, 0xfffffffffffffb5c, 4) MULTIEQUAL (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4) , (stack, 0xfffffffffffffb5c, 4)]
[(stack, 0xfffffffffffffb58, 4) MULTIEQUAL (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4) , (stack, 0xfffffffffffffb58, 4)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb48, 8) MULTIEQUAL (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8) , (stack, 0xfffffffffffffb48, 8)]
[(stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb24, 4) MULTIEQUAL (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4) , (stack, 0xfffffffffffffb24, 4)]
[(stack, 0xfffffffffffffb20, 4) MULTIEQUAL (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4) , (stack, 0xfffffffffffffb20, 4)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae4, 4) MULTIEQUAL (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4) , (stack, 0xfffffffffffffae4, 4)]
[(stack, 0xfffffffffffffae0, 4) MULTIEQUAL (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4) , (stack, 0xfffffffffffffae0, 4)]
[(stack, 0xfffffffffffffadc, 4) MULTIEQUAL (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4) , (stack, 0xfffffffffffffadc, 4)]
[(stack, 0xfffffffffffffad8, 4) MULTIEQUAL (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4) , (stack, 0xfffffffffffffad8, 4)]
[(stack, 0xfffffffffffffad0, 8) MULTIEQUAL (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8) , (stack, 0xfffffffffffffad0, 8)]
[(stack, 0xfffffffffffffac8, 8) MULTIEQUAL (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8) , (stack, 0xfffffffffffffac8, 8)]
[(stack, 0xfffffffffffffac0, 8) MULTIEQUAL (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8) , (stack, 0xfffffffffffffac0, 8)]
[(stack, 0xfffffffffffffabc, 4) MULTIEQUAL (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4) , (stack, 0xfffffffffffffabc, 4)]
[(stack, 0xfffffffffffffab8, 4) MULTIEQUAL (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4) , (stack, 0xfffffffffffffab8, 4)]
[(stack, 0xfffffffffffffab4, 4) MULTIEQUAL (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4) , (stack, 0xfffffffffffffab4, 4)]
[(stack, 0xfffffffffffffab3, 1) MULTIEQUAL (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1) , (stack, 0xfffffffffffffab3, 1)]
[(stack, 0xfffffffffffffaac, 4) MULTIEQUAL (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4) , (stack, 0xfffffffffffffaac, 4)]
[(stack, 0xfffffffffffffaa8, 4) MULTIEQUAL (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4) , (stack, 0xfffffffffffffaa8, 4)]
[(stack, 0xfffffffffffffaa4, 4) MULTIEQUAL (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4) , (stack, 0xfffffffffffffaa4, 4)]
[(stack, 0xfffffffffffffaa0, 4) MULTIEQUAL (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4) , (stack, 0xfffffffffffffaa0, 4)]
[(ram, 0x4c8970, 8) MULTIEQUAL (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8) , (ram, 0x4c8970, 8)]
[(ram, 0x4c8950, 8) MULTIEQUAL (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8) , (ram, 0x4c8950, 8)]
[(ram, 0x4c8948, 8) MULTIEQUAL (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8) , (ram, 0x4c8948, 8)]
[(ram, 0x4c4fb0, 8) MULTIEQUAL (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8) , (ram, 0x4c4fb0, 8)]
[(register, 0x88, 8) MULTIEQUAL (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8)]
[(register, 0x20, 8) MULTIEQUAL (unique, 0x100027ab, 8) , (unique, 0x100027ab, 8) , (unique, 0x100027bb, 8) , (unique, 0x100027c3, 8) , (unique, 0x100027cb, 8) , (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x417090, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffffc0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10004619, 8), (unique, 0x10004619, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(ram, 0x4c4fb0, 8) COPY (ram, 0x4c4fb0, 8)]
[(ram, 0x4c8948, 8) COPY (ram, 0x4c8948, 8)]
[(ram, 0x4c8950, 8) COPY (ram, 0x4c8950, 8)]
[(ram, 0x4c8970, 8) COPY (ram, 0x4c8970, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) COPY (register, 0x88, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10004621, 8) , (const, 0x417095, 8), (unique, 0x10004621, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x2b1, 4), (stack, 0xfffffffffffffaa0, 4) INDIRECT (stack, 0xfffffffffffffaa0, 4) , (const, 0x2b0, 4)]
[(stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x2b1, 4), (stack, 0xfffffffffffffaa4, 4) INDIRECT (stack, 0xfffffffffffffaa4, 4) , (const, 0x2b0, 4)]
[(stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x2b1, 4), (stack, 0xfffffffffffffaa8, 4) INDIRECT (stack, 0xfffffffffffffaa8, 4) , (const, 0x2b0, 4)]
[(stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x2b1, 4), (stack, 0xfffffffffffffaac, 4) INDIRECT (stack, 0xfffffffffffffaac, 4) , (const, 0x2b0, 4)]
[(stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x2b1, 4), (stack, 0xfffffffffffffab3, 1) INDIRECT (stack, 0xfffffffffffffab3, 1) , (const, 0x2b0, 4)]
[(stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x2b1, 4), (stack, 0xfffffffffffffab4, 4) INDIRECT (stack, 0xfffffffffffffab4, 4) , (const, 0x2b0, 4)]
[(stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x2b1, 4), (stack, 0xfffffffffffffab8, 4) INDIRECT (stack, 0xfffffffffffffab8, 4) , (const, 0x2b0, 4)]
[(stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x2b1, 4), (stack, 0xfffffffffffffabc, 4) INDIRECT (stack, 0xfffffffffffffabc, 4) , (const, 0x2b0, 4)]
[(stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x2b1, 4), (stack, 0xfffffffffffffac0, 8) INDIRECT (stack, 0xfffffffffffffac0, 8) , (const, 0x2b0, 4)]
[(stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x2b1, 4), (stack, 0xfffffffffffffac8, 8) INDIRECT (stack, 0xfffffffffffffac8, 8) , (const, 0x2b0, 4)]
[(stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x2b1, 4), (stack, 0xfffffffffffffad0, 8) INDIRECT (stack, 0xfffffffffffffad0, 8) , (const, 0x2b0, 4)]
[(stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x2b1, 4), (stack, 0xfffffffffffffad8, 4) INDIRECT (stack, 0xfffffffffffffad8, 4) , (const, 0x2b0, 4)]
[(stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x2b1, 4), (stack, 0xfffffffffffffadc, 4) INDIRECT (stack, 0xfffffffffffffadc, 4) , (const, 0x2b0, 4)]
[(stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x2b1, 4), (stack, 0xfffffffffffffae0, 4) INDIRECT (stack, 0xfffffffffffffae0, 4) , (const, 0x2b0, 4)]
[(stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x2b1, 4), (stack, 0xfffffffffffffae4, 4) INDIRECT (stack, 0xfffffffffffffae4, 4) , (const, 0x2b0, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x2b1, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x2b0, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x2b1, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x2b0, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x2b1, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x2b0, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x2b1, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x2b0, 4)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x2b1, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x2b0, 4)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x2b1, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x2b0, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x2b1, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x2b0, 4)]
[(stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x2b1, 4), (stack, 0xfffffffffffffb20, 4) INDIRECT (stack, 0xfffffffffffffb20, 4) , (const, 0x2b0, 4)]
[(stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x2b1, 4), (stack, 0xfffffffffffffb24, 4) INDIRECT (stack, 0xfffffffffffffb24, 4) , (const, 0x2b0, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x2b1, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x2b0, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x2b1, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x2b0, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x2b1, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x2b0, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x2b1, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x2b0, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x2b1, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x2b0, 4)]
[(stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x2b1, 4), (stack, 0xfffffffffffffb48, 8) INDIRECT (stack, 0xfffffffffffffb48, 8) , (const, 0x2b0, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x2b1, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x2b0, 4)]
[(stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x2b1, 4), (stack, 0xfffffffffffffb58, 4) INDIRECT (stack, 0xfffffffffffffb58, 4) , (const, 0x2b0, 4)]
[(stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x2b1, 4), (stack, 0xfffffffffffffb5c, 4) INDIRECT (stack, 0xfffffffffffffb5c, 4) , (const, 0x2b0, 4)]
[(stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x2b1, 4), (stack, 0xfffffffffffffb60, 2) INDIRECT (stack, 0xfffffffffffffb60, 2) , (const, 0x2b0, 4)]
[(stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x2b1, 4), (stack, 0xfffffffffffffb62, 2) INDIRECT (stack, 0xfffffffffffffb62, 2) , (const, 0x2b0, 4)]
[(stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x2b1, 4), (stack, 0xfffffffffffffb64, 4) INDIRECT (stack, 0xfffffffffffffb64, 4) , (const, 0x2b0, 4)]
[(stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x2b1, 4), (stack, 0xfffffffffffffb68, 8) INDIRECT (stack, 0xfffffffffffffb68, 8) , (const, 0x2b0, 4)]
[(stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x2b1, 4), (stack, 0xfffffffffffffb70, 4) INDIRECT (stack, 0xfffffffffffffb70, 4) , (const, 0x2b0, 4)]
[(stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x2b1, 4), (stack, 0xfffffffffffffb74, 4) INDIRECT (stack, 0xfffffffffffffb74, 4) , (const, 0x2b0, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x2b1, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x2b0, 4)]
[(stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x2b1, 4), (stack, 0xfffffffffffffb88, 8) INDIRECT (stack, 0xfffffffffffffb88, 8) , (const, 0x2b0, 4)]
[(stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x2b1, 4), (stack, 0xfffffffffffffb90, 8) INDIRECT (stack, 0xfffffffffffffb90, 8) , (const, 0x2b0, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x2b1, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x2b0, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x2b1, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x2b0, 4)]
[(stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x2b1, 4), (stack, 0xfffffffffffffbb8, 8) INDIRECT (stack, 0xfffffffffffffbb8, 8) , (const, 0x2b0, 4)]
[(stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x2b1, 4), (stack, 0xfffffffffffffbc0, 8) INDIRECT (stack, 0xfffffffffffffbc0, 8) , (const, 0x2b0, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2b1, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2b0, 4)]
[ ---  CALL (ram, 0x458dd0, 8)]
[(ram, 0x4c4fb0, 8) COPY (ram, 0x4c4fb0, 8), (ram, 0x4c4fb0, 8) INDIRECT (ram, 0x4c4fb0, 8) , (const, 0x2b1, 4)]
[(ram, 0x4c8948, 8) COPY (ram, 0x4c8948, 8), (ram, 0x4c8948, 8) INDIRECT (ram, 0x4c8948, 8) , (const, 0x2b1, 4)]
[(ram, 0x4c8950, 8) COPY (ram, 0x4c8950, 8), (ram, 0x4c8950, 8) INDIRECT (ram, 0x4c8950, 8) , (const, 0x2b1, 4)]
[(ram, 0x4c8970, 8) COPY (ram, 0x4c8970, 8), (ram, 0x4c8970, 8) INDIRECT (ram, 0x4c8970, 8) , (const, 0x2b1, 4)]
[ ---  RETURN (const, 0x1, 4)]
