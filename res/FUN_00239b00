[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff48, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x2b, 4)]
[(ram, 0x4eae10, 8) INDIRECT (ram, 0x4eae10, 8) , (const, 0x2b, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x2b, 4)]
[(stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0x2b, 4)]
[(stack, 0xffffffffffffff64, 4) INDIRECT (stack, 0xffffffffffffff64, 4) , (const, 0x2b, 4)]
[(stack, 0xffffffffffffffe0, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x2b, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10000200, 8), (unique, 0x10000200, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8)]
[ ---  CBRANCH (ram, 0x239c18, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x20f800, 8) , (const, 0x1, 4) , (register, 0x38, 8) , (register, 0x20, 8), (register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff48, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x152, 4)]
[(ram, 0x4eae10, 8) INDIRECT (ram, 0x4eae10, 8) , (const, 0x152, 4)]
[(stack, 0xffffffffffffffe0, 8) INDIRECT (stack, 0xffffffffffffffe0, 8) , (const, 0x152, 4)]
[(register, 0x0, 8) CALL (ram, 0x130d70, 8) , (unique, 0x1000015f, 8) , (unique, 0x1000018f, 8) , (const, 0x5, 8), (unique, 0x1000018f, 8) COPY (const, 0x2b6ae9, 8), (unique, 0x1000015f, 8) PTRSUB (const, 0x0, 8) , (const, 0x2b3d14, 8)]
[ ---  CBRANCH (ram, 0x239ba8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x8000, 4), (register, 0x0, 4) INT_AND (stack, 0xffffffffffffff60, 4) , (const, 0xf000, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x9c, 4)]
[(ram, 0x4eae10, 8) INDIRECT (ram, 0x4eae10, 8) , (const, 0x9c, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x9c, 4)]
[(stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0x9c, 4)]
[(stack, 0xffffffffffffff64, 4) INDIRECT (stack, 0xffffffffffffff64, 4) , (const, 0x9c, 4)]
[(stack, 0xffffffffffffffe0, 8) INDIRECT (stack, 0xffffffffffffffe0, 8) , (const, 0x9c, 4)]
[ ---  CBRANCH (ram, 0x239c48, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x17ee30, 8) , (register, 0x38, 8) , (unique, 0x1000014f, 8), (unique, 0x1000014f, 8) COPY (const, 0x2b3893, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x13e, 4)]
[(ram, 0x4eae10, 8) INDIRECT (ram, 0x4eae10, 8) , (const, 0x13e, 4)]
[(stack, 0xffffffffffffffe0, 8) INDIRECT (stack, 0xffffffffffffffe0, 8) , (const, 0x13e, 4)]
[ ---  CBRANCH (ram, 0x239c39, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x130d70, 8) , (unique, 0x10000167, 8) , (unique, 0x1000019f, 8) , (const, 0x5, 8), (unique, 0x1000019f, 8) COPY (const, 0x2b6b07, 8), (unique, 0x10000167, 8) PTRSUB (const, 0x0, 8) , (const, 0x2b3d14, 8)]
[(ram, 0x4eae10, 8) INDIRECT (ram, 0x4eae10, 8) , (const, 0x14b, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000208, 8) , (register, 0x0, 8), (unique, 0x10000208, 8) CAST (ram, 0x4eae10, 8)]
[ ---  BRANCH (ram, 0x239b7c, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xb2, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xab, 4)]
[(ram, 0x4eae10, 8) INDIRECT (ram, 0x4eae10, 8) , (const, 0xb2, 4), (ram, 0x4eae10, 8) INDIRECT (ram, 0x4eae10, 8) , (const, 0xab, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0xb2, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0xab, 4)]
[(stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0xb2, 4), (stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0xab, 4)]
[(stack, 0xffffffffffffff64, 4) INDIRECT (stack, 0xffffffffffffff64, 4) , (const, 0xb2, 4), (stack, 0xffffffffffffff64, 4) INDIRECT (stack, 0xffffffffffffff64, 4) , (const, 0xab, 4)]
[(stack, 0xffffffffffffffe0, 8) INDIRECT (stack, 0xffffffffffffffe0, 8) , (const, 0xb2, 4), (stack, 0xffffffffffffffe0, 8) INDIRECT (stack, 0xffffffffffffffe0, 8) , (const, 0xab, 4)]
[ ---  CBRANCH (ram, 0x239cd8, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x20f7b0, 8) , (const, 0x1, 4) , (register, 0x0, 4) , (register, 0x20, 8), (register, 0x0, 4) CALL (ram, 0x1877b0, 8) , (register, 0x0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x137, 4)]
[(ram, 0x4eae10, 8) INDIRECT (ram, 0x4eae10, 8) , (const, 0x137, 4)]
[(stack, 0xffffffffffffffe0, 8) INDIRECT (stack, 0xffffffffffffffe0, 8) , (const, 0x137, 4)]
[(register, 0x0, 8) CALL (ram, 0x130d70, 8) , (unique, 0x1000017f, 8) , (unique, 0x100001a7, 8) , (const, 0x5, 8), (unique, 0x100001a7, 8) COPY (const, 0x2b6b13, 8), (unique, 0x1000017f, 8) PTRSUB (const, 0x0, 8) , (const, 0x2b3d14, 8)]
[ ---  BRANCH (ram, 0x239c90, 1)]
[ ---  CBRANCH (ram, 0x239bf3, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffff64, 4) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x239c78, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffff64, 4) , (register, 0x30, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x131, 4)]
[(ram, 0x4eae10, 8) INDIRECT (ram, 0x4eae10, 8) , (const, 0x131, 4)]
[(stack, 0xffffffffffffffe0, 8) INDIRECT (stack, 0xffffffffffffffe0, 8) , (const, 0x131, 4)]
[(register, 0x0, 8) CALL (ram, 0x130d70, 8) , (unique, 0x1000016f, 8) , (unique, 0x100001af, 8) , (const, 0x5, 8), (unique, 0x100001af, 8) COPY (const, 0x2b6b20, 8), (unique, 0x1000016f, 8) PTRSUB (const, 0x0, 8) , (const, 0x2b3d14, 8)]
[ ---  CBRANCH (ram, 0x239cf8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x10000127, 4) , (const, 0x0, 4), (unique, 0x10000127, 4) INT_AND (stack, 0xffffffffffffff60, 4) , (const, 0x12, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x12a, 4)]
[(ram, 0x4eae10, 8) INDIRECT (ram, 0x4eae10, 8) , (const, 0x12a, 4)]
[(stack, 0xffffffffffffffe0, 8) INDIRECT (stack, 0xffffffffffffffe0, 8) , (const, 0x12a, 4)]
[(register, 0x0, 8) CALL (ram, 0x130d70, 8) , (unique, 0x10000187, 8) , (unique, 0x100001b7, 8) , (const, 0x5, 8), (unique, 0x100001b7, 8) COPY (const, 0x2b6b2a, 8), (unique, 0x10000187, 8) PTRSUB (const, 0x0, 8) , (const, 0x2b3d14, 8)]
[ ---  BRANCH (ram, 0x239c90, 1)]
[ ---  CBRANCH (ram, 0x239cb8, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (const, 0x1, 8) , (stack, 0xffffffffffffff58, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x107, 4)]
[(ram, 0x4eae10, 8) INDIRECT (ram, 0x4eae10, 8) , (const, 0x107, 4)]
[(stack, 0xffffffffffffffe0, 8) INDIRECT (stack, 0xffffffffffffffe0, 8) , (const, 0x107, 4)]
[(register, 0x0, 8) CALL (ram, 0x130d70, 8) , (unique, 0x10000177, 8) , (unique, 0x100001bf, 8) , (const, 0x5, 8), (unique, 0x100001bf, 8) COPY (const, 0x2b6b48, 8), (unique, 0x10000177, 8) PTRSUB (const, 0x0, 8) , (const, 0x2b3d14, 8)]
[ ---  BRANCH (ram, 0x239c90, 1)]
[(stack, 0xffffffffffffffe0, 8) MULTIEQUAL (stack, 0xffffffffffffffe0, 8) , (stack, 0xffffffffffffffe0, 8) , (stack, 0xffffffffffffffe0, 8) , (stack, 0xffffffffffffffe0, 8)]
[(ram, 0x4eae10, 8) MULTIEQUAL (ram, 0x4eae10, 8) , (ram, 0x4eae10, 8) , (ram, 0x4eae10, 8) , (ram, 0x4eae10, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x239c0a, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8) , (register, 0x0, 8) , (register, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000210, 8) , (register, 0x0, 8), (unique, 0x10000210, 8) CAST (ram, 0x4eae10, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x123, 4)]
[(ram, 0x4eae10, 8) INDIRECT (ram, 0x4eae10, 8) , (const, 0x123, 4), (ram, 0x4eae10, 8) INDIRECT (ram, 0x4eae10, 8) , (const, 0x120, 4)]
[(stack, 0xffffffffffffffe0, 8) INDIRECT (stack, 0xffffffffffffffe0, 8) , (const, 0x123, 4)]
[ ---  CALL (ram, 0x17e250, 8) , (register, 0x0, 8)]
[(unique, 0x100001f8, 8) COPY (register, 0x18, 8), (register, 0x18, 8) COPY (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x239b7c, 1)]
[(stack, 0xffffffffffffffe0, 8) MULTIEQUAL (stack, 0xffffffffffffffe0, 8) , (stack, 0xffffffffffffffe0, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae10, 8) INDIRECT (ram, 0x4eae10, 8) , (const, 0xf7, 4), (ram, 0x4eae10, 8) MULTIEQUAL (ram, 0x4eae10, 8) , (ram, 0x4eae10, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100001df, 8) , (unique, 0xbd00, 4), (unique, 0x100001df, 8) PTRSUB (register, 0x0, 8) , (const, 0x0, 8), (unique, 0xbd00, 4) INT_OR (unique, 0xbd00, 4) , (const, 0x8000, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100001d7, 8), (unique, 0x100001d7, 8) PTRSUB (register, 0x0, 8) , (const, 0x0, 8)]
[(unique, 0x100001f0, 8) COPY (register, 0x0, 8)]
[ ---  BRANCH (ram, 0x239b7c, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x54, 4)]
[(ram, 0x4eae10, 8) INDIRECT (ram, 0x4eae10, 8) , (const, 0x54, 4)]
[(stack, 0xffffffffffffffe0, 8) INDIRECT (stack, 0xffffffffffffffe0, 8) , (const, 0x54, 4)]
[(register, 0x0, 8) CALL (ram, 0x130d70, 8) , (unique, 0x10000157, 8) , (unique, 0x10000197, 8) , (const, 0x5, 8), (unique, 0x10000197, 8) COPY (const, 0x2b6af6, 8), (unique, 0x10000157, 8) PTRSUB (const, 0x0, 8) , (const, 0x2b3d14, 8)]
[(unique, 0x10000136, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x1000013e, 8) MULTIEQUAL (ram, 0x4eae10, 8) , (ram, 0x4eae10, 8)]
[(unique, 0x10000146, 8) MULTIEQUAL (stack, 0xffffffffffffffe0, 8) , (stack, 0xffffffffffffffe0, 8)]
[ ---  CBRANCH (ram, 0x239b70, 1) , (unique, 0x1000012d, 1), (unique, 0x1000012d, 1) INT_EQUAL (unique, 0x1000012e, 8) , (const, 0x0, 8), (unique, 0x1000012e, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[ ---  CALLOTHER (const, 0x49, 4)]
[ ---  BRANCH (ram, 0x239c40, 1)]
[(ram, 0x4eae10, 8) INDIRECT (unique, 0x1000013e, 8) , (const, 0x6b, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000218, 8) , (unique, 0x1000012e, 8), (unique, 0x10000218, 8) CAST (unique, 0x1000013e, 8)]
[(unique, 0x100001e8, 8) COPY (register, 0x18, 8), (register, 0x18, 8) COPY (const, 0x0, 8)]
[(ram, 0x4eae10, 8) MULTIEQUAL (ram, 0x4eae10, 8) , (ram, 0x4eae10, 8) , (ram, 0x4eae10, 8) , (ram, 0x4eae10, 8)]
[(register, 0x0, 8) COPY (register, 0x18, 8), (register, 0x18, 8) MULTIEQUAL (unique, 0x100001e8, 8) , (unique, 0x100001f0, 8) , (unique, 0x100001f8, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x239d15, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffffe0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10000220, 8), (unique, 0x10000220, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8), (register, 0x110, 8) MULTIEQUAL (unique, 0x10000136, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8), (stack, 0xffffffffffffffe0, 8) MULTIEQUAL (unique, 0x10000146, 8) , (stack, 0xffffffffffffffe0, 8) , (stack, 0xffffffffffffffe0, 8) , (stack, 0xffffffffffffffe0, 8)]
[(stack, 0xffffffffffffffe0, 8) INDIRECT (stack, 0xffffffffffffffe0, 8) , (const, 0x91, 4)]
[ ---  CALL (ram, 0x234c80, 8)]
[(ram, 0x4eae10, 8) COPY (ram, 0x4eae10, 8), (ram, 0x4eae10, 8) INDIRECT (ram, 0x4eae10, 8) , (const, 0x91, 4)]
[ ---  RETURN (const, 0x1, 4)]
[(ram, 0x4eae10, 8) COPY (ram, 0x4eae10, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8)]
