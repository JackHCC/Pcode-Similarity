[(register, 0x20a, 1) COPY (const, 0x0, 1)]
[(unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffea58, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffea28, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffea28, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffea28, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x100004a4, 8), (unique, 0x100004a4, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8)]
[ ---  CBRANCH (ram, 0x1e6068, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x38, 8) , (const, 0x0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x2ea, 4)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x2ea, 4)]
[(stack, 0xffffffffffffea20, 8) INDIRECT (stack, 0xffffffffffffea20, 8) , (const, 0x2ea, 4), (stack, 0xffffffffffffea20, 8) COPY (const, 0x1e6072, 8)]
[(stack, 0xffffffffffffea30, 8) INDIRECT (stack, 0xffffffffffffea30, 8) , (const, 0x2ea, 4)]
[(stack, 0xffffffffffffea38, 8) INDIRECT (stack, 0xffffffffffffea38, 8) , (const, 0x2ea, 4)]
[(stack, 0xffffffffffffea58, 8) INDIRECT (stack, 0xffffffffffffea58, 8) , (const, 0x2ea, 4)]
[(stack, 0xffffffffffffeae8, 8) INDIRECT (stack, 0xffffffffffffeae8, 8) , (const, 0x2ea, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x2ea, 4)]
[(register, 0x0, 4) CALL (ram, 0x20f7b0, 8) , (const, 0x1, 4) , (register, 0x30, 4) , (unique, 0x3200, 8)]
[ ---  BRANCH (ram, 0x1e5e15, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x3c, 4)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x3c, 4)]
[(stack, 0xffffffffffffea20, 8) INDIRECT (stack, 0xffffffffffffea20, 8) , (const, 0x3c, 4), (stack, 0xffffffffffffea20, 8) COPY (const, 0x1e5e10, 8)]
[(stack, 0xffffffffffffea30, 8) INDIRECT (stack, 0xffffffffffffea30, 8) , (const, 0x3c, 4)]
[(stack, 0xffffffffffffea38, 8) INDIRECT (stack, 0xffffffffffffea38, 8) , (const, 0x3c, 4)]
[(stack, 0xffffffffffffea58, 8) INDIRECT (stack, 0xffffffffffffea58, 8) , (const, 0x3c, 4)]
[(stack, 0xffffffffffffeae8, 8) INDIRECT (stack, 0xffffffffffffeae8, 8) , (const, 0x3c, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x3c, 4)]
[(register, 0x0, 4) CALL (ram, 0x20f760, 8) , (const, 0x1, 4) , (register, 0x38, 8) , (unique, 0x100004ac, 8), (unique, 0x100004ac, 8) CAST (unique, 0x3200, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffeae8, 8) MULTIEQUAL (stack, 0xffffffffffffeae8, 8) , (stack, 0xffffffffffffeae8, 8)]
[(stack, 0xffffffffffffea58, 8) MULTIEQUAL (stack, 0xffffffffffffea58, 8) , (stack, 0xffffffffffffea58, 8)]
[(stack, 0xffffffffffffea38, 8) MULTIEQUAL (stack, 0xffffffffffffea38, 8) , (stack, 0xffffffffffffea38, 8)]
[(stack, 0xffffffffffffea30, 8) MULTIEQUAL (stack, 0xffffffffffffea30, 8) , (stack, 0xffffffffffffea30, 8)]
[(stack, 0xffffffffffffea20, 8) MULTIEQUAL (stack, 0xffffffffffffea20, 8) , (stack, 0xffffffffffffea20, 8)]
[(register, 0x20a, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x10000404, 8) COPY (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x1e5fc0, 1) , (register, 0x0, 1), (register, 0x0, 1) INT_EQUAL (unique, 0x59200, 4) , (const, 0x0, 4), (unique, 0x59200, 4) MULTIEQUAL (register, 0x0, 4) , (register, 0x0, 4)]
[(stack, 0xffffffffffffea20, 8) INDIRECT (stack, 0xffffffffffffea20, 8) , (const, 0x110, 4), (stack, 0xffffffffffffea20, 8) COPY (const, 0x1e5e76, 8)]
[ ---  CALL (ram, 0x164f50, 8) , (unique, 0x3200, 8) , (const, 0x40, 8) , (unique, 0x1000024b, 8) , (register, 0x8, 8) , (register, 0x80, 8), (unique, 0x1000024b, 8) COPY (const, 0x2b53ba, 8), (register, 0x8, 8) INT_ZEXT (register, 0x8, 4), (register, 0x8, 4) INT_OR (register, 0x8, 4) , (register, 0x10, 4), (register, 0x80, 8) INT_ZEXT (register, 0x80, 4), (register, 0x80, 4) INT_OR (register, 0x80, 4) , (register, 0x30, 4), (register, 0x80, 4) SUBPIECE (register, 0x80, 8) , (const, 0x0, 4), (register, 0x8, 4) INT_AND (register, 0x8, 4) , (const, 0xfffff000, 4), (register, 0x8, 4) SUBPIECE (unique, 0x100003fc, 8) , (const, 0x0, 4), (unique, 0x100003fc, 8) INT_RIGHT (stack, 0xffffffffffffea58, 8) , (const, 0x20, 4), (register, 0x10, 4) INT_AND (unique, 0x10000209, 4) , (const, 0xfff, 4), (register, 0x80, 8) INT_LEFT (unique, 0x100000cf, 8) , (const, 0x8, 4), (unique, 0x100000cf, 8) INT_RIGHT (stack, 0xffffffffffffea58, 8) , (const, 0x14, 8), (unique, 0x10000209, 4) SUBPIECE (unique, 0x100003f4, 8) , (const, 0x0, 4), (unique, 0x100003f4, 8) INT_RIGHT (stack, 0xffffffffffffea58, 8) , (const, 0x8, 4), (register, 0x30, 4) INT_AND (unique, 0x10000211, 4) , (const, 0xff, 4), (unique, 0x10000211, 4) SUBPIECE (stack, 0xffffffffffffea58, 8) , (const, 0x0, 4), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffeb78, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x116, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x110, 4)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x116, 4), (register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x110, 4)]
[(stack, 0xffffffffffffea20, 8) INDIRECT (stack, 0xffffffffffffea20, 8) , (const, 0x116, 4), (stack, 0xffffffffffffea20, 8) COPY (const, 0x1e5e86, 8)]
[(stack, 0xffffffffffffea30, 8) INDIRECT (stack, 0xffffffffffffea30, 8) , (const, 0x116, 4), (stack, 0xffffffffffffea30, 8) INDIRECT (stack, 0xffffffffffffea30, 8) , (const, 0x110, 4)]
[(stack, 0xffffffffffffea38, 8) INDIRECT (stack, 0xffffffffffffea38, 8) , (const, 0x116, 4), (stack, 0xffffffffffffea38, 8) INDIRECT (stack, 0xffffffffffffea38, 8) , (const, 0x110, 4)]
[(stack, 0xffffffffffffea58, 8) INDIRECT (stack, 0xffffffffffffea58, 8) , (const, 0x116, 4), (stack, 0xffffffffffffea58, 8) INDIRECT (stack, 0xffffffffffffea58, 8) , (const, 0x110, 4)]
[(stack, 0xffffffffffffeae8, 8) INDIRECT (stack, 0xffffffffffffeae8, 8) , (const, 0x116, 4), (stack, 0xffffffffffffeae8, 8) INDIRECT (stack, 0xffffffffffffeae8, 8) , (const, 0x110, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x116, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x110, 4)]
[ ---  CBRANCH (ram, 0x1e5ff0, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (const, 0xfff, 8) , (register, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x211ce0, 8) , (unique, 0x3200, 8) , (unique, 0x3200, 8) , (const, 0x1000, 8), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffefb8, 8), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffeb78, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x126, 4)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x126, 4)]
[(stack, 0xffffffffffffea20, 8) INDIRECT (stack, 0xffffffffffffea20, 8) , (const, 0x126, 4), (stack, 0xffffffffffffea20, 8) COPY (const, 0x1e5ea5, 8)]
[(stack, 0xffffffffffffea30, 8) INDIRECT (stack, 0xffffffffffffea30, 8) , (const, 0x126, 4)]
[(stack, 0xffffffffffffea38, 8) INDIRECT (stack, 0xffffffffffffea38, 8) , (const, 0x126, 4)]
[(stack, 0xffffffffffffea58, 8) INDIRECT (stack, 0xffffffffffffea58, 8) , (const, 0x126, 4)]
[(stack, 0xffffffffffffeae8, 8) INDIRECT (stack, 0xffffffffffffeae8, 8) , (const, 0x126, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x126, 4)]
[ ---  CBRANCH (ram, 0x1e5fa0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x100004b4, 8), (unique, 0x100004b4, 8) CALL (ram, 0x218180, 8) , (unique, 0x1000025b, 8) , (unique, 0x10000273, 8), (unique, 0x10000273, 8) COPY (const, 0x2b56da, 8), (unique, 0x1000025b, 8) COPY (const, 0x2b53df, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x274, 4)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x274, 4)]
[(stack, 0xffffffffffffea20, 8) INDIRECT (stack, 0xffffffffffffea20, 8) , (const, 0x274, 4), (stack, 0xffffffffffffea20, 8) COPY (const, 0x1e5fb3, 8)]
[(stack, 0xffffffffffffea30, 8) INDIRECT (stack, 0xffffffffffffea30, 8) , (const, 0x274, 4)]
[(stack, 0xffffffffffffea38, 8) INDIRECT (stack, 0xffffffffffffea38, 8) , (const, 0x274, 4)]
[(stack, 0xffffffffffffea58, 8) INDIRECT (stack, 0xffffffffffffea58, 8) , (const, 0x274, 4)]
[(stack, 0xffffffffffffeae8, 8) INDIRECT (stack, 0xffffffffffffeae8, 8) , (const, 0x274, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x274, 4)]
[(unique, 0x1000040c, 8) COPY (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x1e5eb1, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x100004bc, 8), (unique, 0x100004bc, 8) CALL (ram, 0x218180, 8) , (unique, 0x10000263, 8) , (unique, 0x10000283, 8), (unique, 0x10000283, 8) COPY (const, 0x2b56da, 8), (unique, 0x10000263, 8) COPY (const, 0x2b53ec, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffeae8, 8) MULTIEQUAL (stack, 0xffffffffffffeae8, 8) , (stack, 0xffffffffffffeae8, 8)]
[(stack, 0xffffffffffffea58, 8) MULTIEQUAL (stack, 0xffffffffffffea58, 8) , (stack, 0xffffffffffffea58, 8)]
[(stack, 0xffffffffffffea38, 8) MULTIEQUAL (stack, 0xffffffffffffea38, 8) , (stack, 0xffffffffffffea38, 8)]
[(stack, 0xffffffffffffea30, 8) MULTIEQUAL (stack, 0xffffffffffffea30, 8) , (stack, 0xffffffffffffea30, 8)]
[(register, 0x20a, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x18, 8) , (unique, 0xbd00, 4), (unique, 0xbd00, 4) INT_OR (unique, 0xbd00, 4) , (const, 0x8000, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (register, 0x18, 8), (register, 0x18, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[(unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffebb8, 8)]
[(unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffea28, 8)]
[(unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffeae8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x14f, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x14f, 4), (register, 0x20a, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1) , (register, 0x20a, 1) , (register, 0x20a, 1)]
[(stack, 0xffffffffffffea20, 8) INDIRECT (stack, 0xffffffffffffea20, 8) , (const, 0x14f, 4), (stack, 0xffffffffffffea20, 8) COPY (const, 0x1e5eeb, 8)]
[(stack, 0xffffffffffffea30, 8) INDIRECT (stack, 0xffffffffffffea30, 8) , (const, 0x14f, 4), (stack, 0xffffffffffffea30, 8) MULTIEQUAL (stack, 0xffffffffffffea30, 8) , (stack, 0xffffffffffffea30, 8) , (stack, 0xffffffffffffea30, 8) , (stack, 0xffffffffffffea30, 8)]
[(stack, 0xffffffffffffea38, 8) INDIRECT (stack, 0xffffffffffffea38, 8) , (const, 0x14f, 4), (stack, 0xffffffffffffea38, 8) MULTIEQUAL (stack, 0xffffffffffffea38, 8) , (stack, 0xffffffffffffea38, 8) , (stack, 0xffffffffffffea38, 8) , (stack, 0xffffffffffffea38, 8)]
[(stack, 0xffffffffffffea58, 8) INDIRECT (stack, 0xffffffffffffea58, 8) , (const, 0x14f, 4), (stack, 0xffffffffffffea58, 8) MULTIEQUAL (stack, 0xffffffffffffea58, 8) , (stack, 0xffffffffffffea58, 8) , (stack, 0xffffffffffffea58, 8) , (stack, 0xffffffffffffea58, 8)]
[(stack, 0xffffffffffffeae8, 8) INDIRECT (stack, 0xffffffffffffeae8, 8) , (const, 0x14f, 4), (stack, 0xffffffffffffeae8, 8) MULTIEQUAL (stack, 0xffffffffffffeae8, 8) , (stack, 0xffffffffffffeae8, 8) , (stack, 0xffffffffffffeae8, 8) , (stack, 0xffffffffffffeae8, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x14f, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CBRANCH (ram, 0x1e6080, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x218230, 8) , (register, 0x18, 8) , (unique, 0x3200, 8) , (unique, 0x3200, 8) , (const, 0x400, 8)]
[(register, 0xa0, 4) COPY (const, 0x7d00, 4)]
[ ---  BRANCH (ram, 0x1e5f8c, 1)]
[(register, 0x8, 8) COPY (const, 0x5, 8)]
[(unique, 0x10000454, 8) COPY (unique, 0x100004c4, 8), (unique, 0x100004c4, 8) CAST (stack, 0xffffffffffffea38, 8)]
[(unique, 0x10000494, 8) COPY (register, 0x38, 8), (register, 0x38, 8) PTRSUB (const, 0x0, 8) , (const, 0x2b53f6, 8)]
[(register, 0x206, 1) MULTIEQUAL (register, 0x206, 1) , (register, 0x206, 1)]
[(register, 0x38, 8) MULTIEQUAL (unique, 0x10000494, 8) , (unique, 0x1000049c, 8)]
[(register, 0x30, 8) MULTIEQUAL (unique, 0x10000454, 8) , (unique, 0x1000045c, 8)]
[ ---  CBRANCH (ram, 0x1e5f08, 1) , (unique, 0xd600, 1), (unique, 0xd600, 1) INT_EQUAL (register, 0x8, 8) , (const, 0x0, 8), (register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8)]
[(register, 0x8, 8) INT_ADD (register, 0x8, 8) , (const, 0xffffffffffffffff, 8)]
[(unique, 0x1000045c, 8) COPY (register, 0x30, 8), (register, 0x30, 8) PTRADD (register, 0x30, 8) , (unique, 0x100002eb, 8) , (const, 0x1, 8), (unique, 0x100002eb, 8) INT_ADD (unique, 0x1000010f, 8) , (const, 0x1, 8), (unique, 0x1000010f, 8) INT_MULT (unique, 0xa380, 8) , (const, 0xfffffffffffffffe, 8), (unique, 0xa380, 8) INT_ZEXT (register, 0x20a, 1)]
[(unique, 0x1000049c, 8) COPY (register, 0x38, 8), (register, 0x38, 8) PTRADD (register, 0x38, 8) , (unique, 0x100002e3, 8) , (const, 0x1, 8), (unique, 0x100002e3, 8) INT_ADD (unique, 0x10000107, 8) , (const, 0x1, 8), (unique, 0x10000107, 8) INT_MULT (unique, 0xaf80, 8) , (const, 0xfffffffffffffffe, 8), (unique, 0xaf80, 8) INT_ZEXT (register, 0x20a, 1)]
[ ---  CBRANCH (ram, 0x1e5f06, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xa500, 1) , (unique, 0xb100, 1), (unique, 0xb100, 1) LOAD (const, 0x1b1, 4) , (register, 0x38, 8), (unique, 0xa500, 1) LOAD (const, 0x1b1, 4) , (register, 0x30, 8)]
[ ---  CBRANCH (ram, 0x1e5f30, 1) , (unique, 0x1000023f, 1), (unique, 0x1000023f, 1) BOOL_NEGATE (register, 0x206, 1), (register, 0x206, 1) MULTIEQUAL (register, 0x206, 1) , (register, 0x206, 1)]
[(register, 0x8, 8) COPY (const, 0x5, 8)]
[(unique, 0x10000444, 8) COPY (unique, 0x100004cc, 8), (unique, 0x100004cc, 8) CAST (stack, 0xffffffffffffea38, 8)]
[(unique, 0x10000484, 8) COPY (register, 0x38, 8), (register, 0x38, 8) PTRSUB (const, 0x0, 8) , (const, 0x2b53fb, 8)]
[(register, 0x206, 1) MULTIEQUAL (register, 0x206, 1) , (register, 0x206, 1)]
[(register, 0x38, 8) MULTIEQUAL (unique, 0x10000484, 8) , (unique, 0x1000048c, 8)]
[(register, 0x30, 8) MULTIEQUAL (unique, 0x10000444, 8) , (unique, 0x1000044c, 8)]
[ ---  CBRANCH (ram, 0x1e5f1b, 1) , (unique, 0xd600, 1), (unique, 0xd600, 1) INT_EQUAL (register, 0x8, 8) , (const, 0x0, 8), (register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8)]
[(register, 0x8, 8) INT_ADD (register, 0x8, 8) , (const, 0xffffffffffffffff, 8)]
[(unique, 0x1000044c, 8) COPY (register, 0x30, 8), (register, 0x30, 8) PTRADD (register, 0x30, 8) , (unique, 0x100002fb, 8) , (const, 0x1, 8), (unique, 0x100002fb, 8) INT_ADD (unique, 0x10000128, 8) , (const, 0x1, 8), (unique, 0x10000128, 8) INT_MULT (unique, 0xa380, 8) , (const, 0xfffffffffffffffe, 8), (unique, 0xa380, 8) INT_ZEXT (register, 0x20a, 1)]
[(unique, 0x1000048c, 8) COPY (register, 0x38, 8), (register, 0x38, 8) PTRADD (register, 0x38, 8) , (unique, 0x100002f3, 8) , (const, 0x1, 8), (unique, 0x100002f3, 8) INT_ADD (unique, 0x10000120, 8) , (const, 0x1, 8), (unique, 0x10000120, 8) INT_MULT (unique, 0xaf80, 8) , (const, 0xfffffffffffffffe, 8), (unique, 0xaf80, 8) INT_ZEXT (register, 0x20a, 1)]
[ ---  CBRANCH (ram, 0x1e5f19, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xa500, 1) , (unique, 0xb100, 1), (unique, 0xb100, 1) LOAD (const, 0x1b1, 4) , (register, 0x38, 8), (unique, 0xa500, 1) LOAD (const, 0x1b1, 4) , (register, 0x30, 8)]
[ ---  CBRANCH (ram, 0x1e5f30, 1) , (unique, 0x10000240, 1), (unique, 0x10000240, 1) BOOL_NEGATE (register, 0x206, 1), (register, 0x206, 1) MULTIEQUAL (register, 0x206, 1) , (register, 0x206, 1)]
[(register, 0x8, 8) COPY (const, 0x5, 8)]
[(unique, 0x10000424, 8) COPY (unique, 0x100004d4, 8), (unique, 0x100004d4, 8) CAST (stack, 0xffffffffffffea38, 8)]
[(unique, 0x10000464, 8) COPY (register, 0x38, 8), (register, 0x38, 8) PTRSUB (const, 0x0, 8) , (const, 0x2b5400, 8)]
[(register, 0x206, 1) MULTIEQUAL (register, 0x206, 1) , (register, 0x206, 1)]
[(register, 0x38, 8) MULTIEQUAL (unique, 0x10000464, 8) , (unique, 0x1000046c, 8)]
[(register, 0x30, 8) MULTIEQUAL (unique, 0x10000424, 8) , (unique, 0x1000042c, 8)]
[ ---  CBRANCH (ram, 0x1e5f2e, 1) , (unique, 0xd600, 1), (unique, 0xd600, 1) INT_EQUAL (register, 0x8, 8) , (const, 0x0, 8), (register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8)]
[(register, 0x8, 8) INT_ADD (register, 0x8, 8) , (const, 0xffffffffffffffff, 8)]
[(unique, 0x1000042c, 8) COPY (register, 0x30, 8), (register, 0x30, 8) PTRADD (register, 0x30, 8) , (unique, 0x1000030b, 8) , (const, 0x1, 8), (unique, 0x1000030b, 8) INT_ADD (unique, 0x10000141, 8) , (const, 0x1, 8), (unique, 0x10000141, 8) INT_MULT (unique, 0xa380, 8) , (const, 0xfffffffffffffffe, 8), (unique, 0xa380, 8) INT_ZEXT (register, 0x20a, 1)]
[(unique, 0x1000046c, 8) COPY (register, 0x38, 8), (register, 0x38, 8) PTRADD (register, 0x38, 8) , (unique, 0x10000303, 8) , (const, 0x1, 8), (unique, 0x10000303, 8) INT_ADD (unique, 0x10000139, 8) , (const, 0x1, 8), (unique, 0x10000139, 8) INT_MULT (unique, 0xaf80, 8) , (const, 0xfffffffffffffffe, 8), (unique, 0xaf80, 8) INT_ZEXT (register, 0x20a, 1)]
[ ---  CBRANCH (ram, 0x1e5f2c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xa500, 1) , (unique, 0xb100, 1), (unique, 0xb100, 1) LOAD (const, 0x1b1, 4) , (register, 0x38, 8), (unique, 0xa500, 1) LOAD (const, 0x1b1, 4) , (register, 0x30, 8)]
[ ---  CBRANCH (ram, 0x1e5ed8, 1) , (unique, 0xc680, 1), (unique, 0xc680, 1) BOOL_NEGATE (register, 0x206, 1), (register, 0x206, 1) MULTIEQUAL (register, 0x206, 1) , (register, 0x206, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1c8, 4)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x1c8, 4)]
[(stack, 0xffffffffffffea20, 8) INDIRECT (stack, 0xffffffffffffea20, 8) , (const, 0x1c8, 4), (stack, 0xffffffffffffea20, 8) COPY (const, 0x1e5f44, 8)]
[(stack, 0xffffffffffffea30, 8) INDIRECT (stack, 0xffffffffffffea30, 8) , (const, 0x1c8, 4)]
[(stack, 0xffffffffffffea38, 8) INDIRECT (stack, 0xffffffffffffea38, 8) , (const, 0x1c8, 4)]
[(stack, 0xffffffffffffea58, 8) INDIRECT (stack, 0xffffffffffffea58, 8) , (const, 0x1c8, 4)]
[(stack, 0xffffffffffffeae8, 8) INDIRECT (stack, 0xffffffffffffeae8, 8) , (const, 0x1c8, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1c8, 4)]
[ ---  CBRANCH (ram, 0x1e5ed8, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x20f760, 8) , (const, 0x1, 4) , (stack, 0xffffffffffffea30, 8) , (unique, 0x3200, 8)]
[(register, 0x200, 1) INT_LESS (stack, 0xffffffffffffea58, 8) , (stack, 0xffffffffffffeae8, 8)]
[ ---  CBRANCH (ram, 0x1e5ed8, 1) , (unique, 0xc680, 1), (unique, 0xc680, 1) BOOL_NEGATE (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffea58, 8) , (stack, 0xffffffffffffeae8, 8)]
[(register, 0x8, 8) COPY (const, 0x5, 8)]
[(unique, 0x10000434, 8) COPY (stack, 0xffffffffffffea38, 8)]
[(unique, 0x10000474, 8) COPY (register, 0x38, 8), (register, 0x38, 8) PTRSUB (const, 0x0, 8) , (const, 0x2b5400, 8)]
[(register, 0x206, 1) MULTIEQUAL (register, 0x206, 1) , (register, 0x206, 1)]
[(register, 0x200, 1) MULTIEQUAL (register, 0x200, 1) , (register, 0x200, 1)]
[(register, 0x38, 8) MULTIEQUAL (unique, 0x10000474, 8) , (unique, 0x1000047c, 8)]
[(register, 0x30, 8) MULTIEQUAL (unique, 0x10000434, 8) , (unique, 0x1000043c, 8)]
[ ---  CBRANCH (ram, 0x1e5f6d, 1) , (unique, 0xd600, 1), (unique, 0xd600, 1) INT_EQUAL (register, 0x8, 8) , (const, 0x0, 8), (register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8)]
[(register, 0x8, 8) INT_ADD (register, 0x8, 8) , (const, 0xffffffffffffffff, 8)]
[(register, 0x200, 1) INT_LESS (unique, 0x100004e4, 1) , (unique, 0xb100, 1), (unique, 0x100004e4, 1) CAST (unique, 0xa500, 1), (unique, 0xb100, 1) LOAD (const, 0x1b1, 4) , (register, 0x38, 8), (unique, 0xa500, 1) LOAD (const, 0x1b1, 4) , (register, 0x30, 8)]
[(unique, 0x1000043c, 8) COPY (unique, 0x100004e5, 8), (unique, 0x100004e5, 8) CAST (register, 0x30, 8), (register, 0x30, 8) PTRADD (unique, 0x100004dc, 8) , (unique, 0x1000031b, 8) , (const, 0x1, 8), (unique, 0x100004dc, 8) CAST (register, 0x30, 8), (unique, 0x1000031b, 8) INT_ADD (unique, 0x1000016a, 8) , (const, 0x1, 8), (unique, 0x1000016a, 8) INT_MULT (unique, 0xa380, 8) , (const, 0xfffffffffffffffe, 8), (unique, 0xa380, 8) INT_ZEXT (register, 0x20a, 1)]
[(unique, 0x1000047c, 8) COPY (register, 0x38, 8), (register, 0x38, 8) PTRADD (register, 0x38, 8) , (unique, 0x10000313, 8) , (const, 0x1, 8), (unique, 0x10000313, 8) INT_ADD (unique, 0x10000162, 8) , (const, 0x1, 8), (unique, 0x10000162, 8) INT_MULT (unique, 0xaf80, 8) , (const, 0xfffffffffffffffe, 8), (unique, 0xaf80, 8) INT_ZEXT (register, 0x20a, 1)]
[ ---  CBRANCH (ram, 0x1e5f6b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xa500, 1) , (unique, 0xb100, 1), (unique, 0xb100, 1) LOAD (const, 0x1b1, 4) , (register, 0x38, 8), (unique, 0xa500, 1) LOAD (const, 0x1b1, 4) , (register, 0x30, 8)]
[(register, 0xa0, 4) INT_ADD (register, 0xa0, 4) , (const, 0x7d00, 4), (register, 0xa0, 4) INT_AND (unique, 0x1000019d, 4) , (const, 0x80e8, 4), (unique, 0x1000019d, 4) INT_2COMP (unique, 0x100001a1, 4), (unique, 0x100001a1, 4) INT_ZEXT (register, 0x200, 1), (register, 0x200, 1) INT_EQUAL (unique, 0xc900, 1) , (register, 0x200, 1), (unique, 0xc900, 1) BOOL_AND (unique, 0x10000173, 1) , (unique, 0x10000174, 1), (unique, 0x10000174, 1) BOOL_NEGATE (register, 0x206, 1), (unique, 0x10000173, 1) BOOL_NEGATE (register, 0x200, 1), (register, 0x200, 1) MULTIEQUAL (register, 0x200, 1) , (register, 0x200, 1), (register, 0x206, 1) MULTIEQUAL (register, 0x206, 1) , (register, 0x206, 1)]
[(register, 0xa0, 4) MULTIEQUAL (register, 0xa0, 4) , (register, 0xa0, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x245, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(stack, 0xffffffffffffea20, 8) INDIRECT (stack, 0xffffffffffffea20, 8) , (const, 0x245, 4), (stack, 0xffffffffffffea20, 8) COPY (const, 0x1e5f94, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x245, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CALL (ram, 0x218200, 8) , (register, 0x18, 8)]
[ ---  BRANCH (ram, 0x1e5fc6, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3e80, 8) , (const, 0x0, 1), (unique, 0x3e80, 8) PTRADD (unique, 0x10000333, 8) , (register, 0x0, 8) , (const, 0x1, 8), (unique, 0x10000333, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffefb8, 8)]
[(stack, 0xffffffffffffea20, 8) INDIRECT (stack, 0xffffffffffffea20, 8) , (const, 0x28a, 4), (stack, 0xffffffffffffea20, 8) COPY (const, 0x1e6000, 8)]
[(register, 0xa0, 4) COPY (const, 0xfde8, 4)]
[(register, 0x20, 8) PTRADD (unique, 0x10000363, 8) , (unique, 0x100001c9, 8) , (const, 0x1, 8), (unique, 0x10000363, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffea28, 8), (unique, 0x100001c9, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (register, 0x0, 8) , (const, 0xfffffffffffffff0, 8), (register, 0x0, 8) INT_ADD (register, 0x0, 8) , (const, 0x1f, 8), (register, 0x0, 8) CALL (ram, 0x121100, 8) , (register, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x1a1900, 8) , (unique, 0x3200, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100004fd, 8) , (const, 0x1e6031, 8), (unique, 0x100004fd, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x100003b3, 8) , (unique, 0x100003ab, 8) , (const, 0x1, 8), (unique, 0x100003b3, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffea28, 8), (unique, 0x100003ab, 8) INT_ADD (unique, 0x100001c9, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x100001c9, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (register, 0x0, 8) , (const, 0xfffffffffffffff0, 8), (register, 0x0, 8) INT_ADD (register, 0x0, 8) , (const, 0x1f, 8), (register, 0x0, 8) CALL (ram, 0x121100, 8) , (register, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x1a1900, 8) , (unique, 0x3200, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000505, 8) , (const, 0x1e604a, 8), (unique, 0x10000505, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x100003cb, 8) , (unique, 0x100003c3, 8) , (const, 0x1, 8), (unique, 0x100003cb, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffea28, 8), (unique, 0x100003c3, 8) INT_ADD (unique, 0x100001c9, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x100001c9, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (register, 0x0, 8) , (const, 0xfffffffffffffff0, 8), (register, 0x0, 8) INT_ADD (register, 0x0, 8) , (const, 0x1f, 8), (register, 0x0, 8) CALL (ram, 0x121100, 8) , (register, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x1a1900, 8) , (unique, 0x3200, 8)]
[ ---  CALL (ram, 0x164f50, 8) , (unique, 0x3200, 8) , (const, 0x1000, 8) , (unique, 0x10000253, 8) , (register, 0x0, 8), (unique, 0x10000253, 8) COPY (const, 0x2b53cf, 8), (register, 0x0, 8) CALL (ram, 0x121160, 8) , (unique, 0x3800, 8) , (register, 0x0, 8) , (unique, 0x3100, 8), (unique, 0x3800, 8) CAST (unique, 0x100004f5, 8), (unique, 0x100004f5, 8) INT_ADD (unique, 0x100004ed, 8) , (unique, 0x100001c9, 8), (unique, 0x100004ed, 8) CAST (unique, 0x1000039b, 8), (unique, 0x1000039b, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffea30, 8), (unique, 0x100001c9, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (register, 0x0, 8) , (const, 0xfffffffffffffff0, 8), (register, 0x0, 8) INT_ADD (register, 0x0, 8) , (const, 0x1f, 8), (unique, 0x3100, 8) INT_ADD (register, 0x0, 8) , (const, 0x1, 8), (register, 0x0, 8) CALL (ram, 0x121100, 8) , (register, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x1a1900, 8) , (unique, 0x3200, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000050d, 8) , (const, 0x1e6054, 8), (unique, 0x1000050d, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x100003e3, 8) , (unique, 0x100003db, 8) , (const, 0x1, 8), (unique, 0x100003e3, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffea28, 8), (unique, 0x100003db, 8) INT_ADD (unique, 0x100001c9, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x100001c9, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (register, 0x0, 8) , (const, 0xfffffffffffffff0, 8), (register, 0x0, 8) INT_ADD (register, 0x0, 8) , (const, 0x1f, 8), (register, 0x0, 8) CALL (ram, 0x121100, 8) , (register, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x1a1900, 8) , (unique, 0x3200, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x2db, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x2cd, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x2bc, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x28f, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x28a, 4)]
[(stack, 0xffffffffffffea20, 8) INDIRECT (stack, 0xffffffffffffea20, 8) , (const, 0x2db, 4), (stack, 0xffffffffffffea20, 8) INDIRECT (stack, 0xffffffffffffea20, 8) , (const, 0x2da, 4), (stack, 0xffffffffffffea20, 8) INDIRECT (stack, 0xffffffffffffea20, 8) , (const, 0x2cd, 4), (stack, 0xffffffffffffea20, 8) INDIRECT (stack, 0xffffffffffffea20, 8) , (const, 0x2cc, 4), (stack, 0xffffffffffffea20, 8) INDIRECT (stack, 0xffffffffffffea20, 8) , (const, 0x2bc, 4), (stack, 0xffffffffffffea20, 8) INDIRECT (stack, 0xffffffffffffea20, 8) , (const, 0x2bb, 4), (stack, 0xffffffffffffea20, 8) INDIRECT (stack, 0xffffffffffffea20, 8) , (const, 0x28f, 4), (stack, 0xffffffffffffea20, 8) COPY (const, 0x1e600b, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2db, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2cd, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2bc, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x28f, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x28a, 4)]
[(unique, 0x10000414, 8) COPY (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x1000034b, 8) , (unique, 0x100001c9, 8) , (const, 0x1, 8), (unique, 0x1000034b, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffea28, 8), (unique, 0x100001c9, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (register, 0x0, 8) , (const, 0xfffffffffffffff0, 8), (register, 0x0, 8) INT_ADD (register, 0x0, 8) , (const, 0x1f, 8), (register, 0x0, 8) CALL (ram, 0x121100, 8) , (register, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x1a1900, 8) , (unique, 0x3200, 8)]
[ ---  CBRANCH (ram, 0x1e5fc6, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x210240, 8) , (unique, 0x3200, 8) , (const, 0x0, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffea20, 8) MULTIEQUAL (stack, 0xffffffffffffea20, 8) , (stack, 0xffffffffffffea20, 8) , (stack, 0xffffffffffffea20, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x20, 8) COPY (unique, 0x1000041c, 8), (unique, 0x1000041c, 8) MULTIEQUAL (unique, 0x10000404, 8) , (unique, 0x1000040c, 8) , (unique, 0x10000414, 8)]
[(register, 0xa0, 4) COPY (const, 0x7d00, 4)]
[(stack, 0xffffffffffffea20, 8) MULTIEQUAL (stack, 0xffffffffffffea20, 8) , (stack, 0xffffffffffffea20, 8) , (stack, 0xffffffffffffea20, 8)]
[(register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8)]
[(register, 0x0, 4) COPY (register, 0xa0, 4), (register, 0xa0, 4) MULTIEQUAL (register, 0xa0, 4) , (register, 0xa0, 4) , (register, 0xa0, 4)]
[ ---  CBRANCH (ram, 0x1e608b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffffc0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10000515, 8), (unique, 0x10000515, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000051d, 8) , (unique, 0x10000243, 8), (unique, 0x1000051d, 8) CAST (register, 0x20, 8), (unique, 0x10000243, 8) PTRSUB (const, 0x0, 8) , (const, 0x1e6090, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(stack, 0xffffffffffffea20, 8) INDIRECT (stack, 0xffffffffffffea20, 8) , (const, 0x26b, 4), (stack, 0xffffffffffffea20, 8) INDIRECT (stack, 0xffffffffffffea20, 8) , (const, 0x26a, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x26b, 4)]
[ ---  CALL (ram, 0x234c80, 8)]
[ ---  RETURN (const, 0x1, 4)]
