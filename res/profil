[(register, 0x20, 8) CAST (unique, 0x10000459, 8), (unique, 0x10000459, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff18, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10000461, 8), (unique, 0x10000461, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8)]
[(register, 0x0, 4) COPY (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x48c418, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x38, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x48c3f0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4c80d8, 8) , (const, 0x0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x125, 4)]
[(ram, 0x4c80c0, 4) INDIRECT (ram, 0x4c80c0, 4) , (const, 0x125, 4)]
[(ram, 0x4c80c8, 8) INDIRECT (ram, 0x4c80c8, 8) , (const, 0x125, 4)]
[(ram, 0x4c80d0, 8) INDIRECT (ram, 0x4c80d0, 8) , (const, 0x125, 4)]
[(ram, 0x4c80d8, 8) INDIRECT (ram, 0x4c80d8, 8) , (const, 0x125, 4)]
[(stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x125, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x125, 4)]
[(stack, 0xffffffffffffff20, 4) INDIRECT (stack, 0xffffffffffffff20, 4) , (const, 0x125, 4)]
[(stack, 0xffffffffffffff24, 4) INDIRECT (stack, 0xffffffffffffff24, 4) , (const, 0x125, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x125, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x125, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x125, 4)]
[(stack, 0xffffffffffffff40, 16) INDIRECT (stack, 0xffffffffffffff40, 16) , (const, 0x125, 4)]
[(stack, 0xffffffffffffff50, 16) INDIRECT (stack, 0xffffffffffffff50, 16) , (const, 0x125, 4)]
[(stack, 0xffffffffffffff60, 16) INDIRECT (stack, 0xffffffffffffff60, 16) , (const, 0x125, 4)]
[(stack, 0xffffffffffffff70, 16) INDIRECT (stack, 0xffffffffffffff70, 16) , (const, 0x125, 4)]
[(stack, 0xffffffffffffff80, 16) INDIRECT (stack, 0xffffffffffffff80, 16) , (const, 0x125, 4)]
[(stack, 0xffffffffffffff90, 16) INDIRECT (stack, 0xffffffffffffff90, 16) , (const, 0x125, 4)]
[(stack, 0xffffffffffffffa0, 16) INDIRECT (stack, 0xffffffffffffffa0, 16) , (const, 0x125, 4)]
[(stack, 0xffffffffffffffb0, 16) INDIRECT (stack, 0xffffffffffffffb0, 16) , (const, 0x125, 4)]
[(stack, 0xffffffffffffffc0, 4) INDIRECT (stack, 0xffffffffffffffc0, 4) , (const, 0x125, 4)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x125, 4)]
[ ---  CBRANCH (ram, 0x48c454, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (const, 0xffffffff, 4) , (register, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x490040, 8) , (const, 0x2, 4) , (unique, 0x10000469, 8) , (const, 0x0, 8), (unique, 0x10000469, 8) CAST (unique, 0x10000265, 8), (unique, 0x10000265, 8) PTRSUB (const, 0x0, 8) , (const, 0x4c80a0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x13f, 4)]
[(ram, 0x4c80c0, 4) INDIRECT (ram, 0x4c80c0, 4) , (const, 0x13f, 4)]
[(ram, 0x4c80c8, 8) INDIRECT (ram, 0x4c80c8, 8) , (const, 0x13f, 4)]
[(ram, 0x4c80d0, 8) INDIRECT (ram, 0x4c80d0, 8) , (const, 0x13f, 4)]
[(ram, 0x4c80d8, 8) INDIRECT (ram, 0x4c80d8, 8) , (const, 0x13f, 4), (ram, 0x4c80d8, 8) COPY (const, 0x0, 8)]
[(stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x13f, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x13f, 4)]
[(stack, 0xffffffffffffff20, 4) INDIRECT (stack, 0xffffffffffffff20, 4) , (const, 0x13f, 4)]
[(stack, 0xffffffffffffff24, 4) INDIRECT (stack, 0xffffffffffffff24, 4) , (const, 0x13f, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x13f, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x13f, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x13f, 4)]
[(stack, 0xffffffffffffff40, 16) INDIRECT (stack, 0xffffffffffffff40, 16) , (const, 0x13f, 4)]
[(stack, 0xffffffffffffff50, 16) INDIRECT (stack, 0xffffffffffffff50, 16) , (const, 0x13f, 4)]
[(stack, 0xffffffffffffff60, 16) INDIRECT (stack, 0xffffffffffffff60, 16) , (const, 0x13f, 4)]
[(stack, 0xffffffffffffff70, 16) INDIRECT (stack, 0xffffffffffffff70, 16) , (const, 0x13f, 4)]
[(stack, 0xffffffffffffff80, 16) INDIRECT (stack, 0xffffffffffffff80, 16) , (const, 0x13f, 4)]
[(stack, 0xffffffffffffff90, 16) INDIRECT (stack, 0xffffffffffffff90, 16) , (const, 0x13f, 4)]
[(stack, 0xffffffffffffffa0, 16) INDIRECT (stack, 0xffffffffffffffa0, 16) , (const, 0x13f, 4)]
[(stack, 0xffffffffffffffb0, 16) INDIRECT (stack, 0xffffffffffffffb0, 16) , (const, 0x13f, 4)]
[(stack, 0xffffffffffffffc0, 4) INDIRECT (stack, 0xffffffffffffffc0, 4) , (const, 0x13f, 4)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0x13f, 4)]
[(register, 0x0, 4) CALL (ram, 0x469550, 8) , (const, 0x1b, 4) , (unique, 0x10000471, 8) , (const, 0x0, 8), (unique, 0x10000471, 8) CAST (unique, 0x1000024d, 8), (unique, 0x1000024d, 8) PTRSUB (const, 0x0, 8) , (const, 0x4c8000, 8)]
[ ---  BRANCH (ram, 0x48c3f0, 1)]
[ ---  CBRANCH (ram, 0x48c32b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4c80d8, 8) , (const, 0x0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x4d, 4)]
[(ram, 0x4c80c0, 4) INDIRECT (ram, 0x4c80c0, 4) , (const, 0x4d, 4)]
[(ram, 0x4c80c8, 8) INDIRECT (ram, 0x4c80c8, 8) , (const, 0x4d, 4)]
[(ram, 0x4c80d0, 8) INDIRECT (ram, 0x4c80d0, 8) , (const, 0x4d, 4)]
[(ram, 0x4c80d8, 8) INDIRECT (ram, 0x4c80d8, 8) , (const, 0x4d, 4)]
[(stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x4d, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x4d, 4)]
[(stack, 0xffffffffffffff20, 4) INDIRECT (stack, 0xffffffffffffff20, 4) , (const, 0x4d, 4)]
[(stack, 0xffffffffffffff24, 4) INDIRECT (stack, 0xffffffffffffff24, 4) , (const, 0x4d, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x4d, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x4d, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x4d, 4)]
[(stack, 0xffffffffffffff40, 16) INDIRECT (stack, 0xffffffffffffff40, 16) , (const, 0x4d, 4)]
[(stack, 0xffffffffffffff50, 16) INDIRECT (stack, 0xffffffffffffff50, 16) , (const, 0x4d, 4)]
[(stack, 0xffffffffffffff60, 16) INDIRECT (stack, 0xffffffffffffff60, 16) , (const, 0x4d, 4)]
[(stack, 0xffffffffffffff70, 16) INDIRECT (stack, 0xffffffffffffff70, 16) , (const, 0x4d, 4)]
[(stack, 0xffffffffffffff80, 16) INDIRECT (stack, 0xffffffffffffff80, 16) , (const, 0x4d, 4)]
[(stack, 0xffffffffffffff90, 16) INDIRECT (stack, 0xffffffffffffff90, 16) , (const, 0x4d, 4)]
[(stack, 0xffffffffffffffa0, 16) INDIRECT (stack, 0xffffffffffffffa0, 16) , (const, 0x4d, 4)]
[(stack, 0xffffffffffffffb0, 16) INDIRECT (stack, 0xffffffffffffffb0, 16) , (const, 0x4d, 4)]
[(stack, 0xffffffffffffffc0, 4) INDIRECT (stack, 0xffffffffffffffc0, 4) , (const, 0x4d, 4)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x4d, 4)]
[ ---  CBRANCH (ram, 0x48c454, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (const, 0xffffffff, 4) , (register, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x490040, 8) , (const, 0x2, 4) , (unique, 0x10000479, 8) , (const, 0x0, 8), (unique, 0x10000479, 8) CAST (unique, 0x1000025d, 8), (unique, 0x1000025d, 8) PTRSUB (const, 0x0, 8) , (const, 0x4c80a0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x66, 4)]
[(ram, 0x4c80c0, 4) INDIRECT (ram, 0x4c80c0, 4) , (const, 0x66, 4)]
[(ram, 0x4c80c8, 8) INDIRECT (ram, 0x4c80c8, 8) , (const, 0x66, 4)]
[(ram, 0x4c80d0, 8) INDIRECT (ram, 0x4c80d0, 8) , (const, 0x66, 4)]
[(ram, 0x4c80d8, 8) INDIRECT (ram, 0x4c80d8, 8) , (const, 0x66, 4)]
[(stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x66, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x66, 4)]
[(stack, 0xffffffffffffff20, 4) INDIRECT (stack, 0xffffffffffffff20, 4) , (const, 0x66, 4)]
[(stack, 0xffffffffffffff24, 4) INDIRECT (stack, 0xffffffffffffff24, 4) , (const, 0x66, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x66, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x66, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x66, 4)]
[(stack, 0xffffffffffffff40, 16) INDIRECT (stack, 0xffffffffffffff40, 16) , (const, 0x66, 4)]
[(stack, 0xffffffffffffff50, 16) INDIRECT (stack, 0xffffffffffffff50, 16) , (const, 0x66, 4)]
[(stack, 0xffffffffffffff60, 16) INDIRECT (stack, 0xffffffffffffff60, 16) , (const, 0x66, 4)]
[(stack, 0xffffffffffffff70, 16) INDIRECT (stack, 0xffffffffffffff70, 16) , (const, 0x66, 4)]
[(stack, 0xffffffffffffff80, 16) INDIRECT (stack, 0xffffffffffffff80, 16) , (const, 0x66, 4)]
[(stack, 0xffffffffffffff90, 16) INDIRECT (stack, 0xffffffffffffff90, 16) , (const, 0x66, 4)]
[(stack, 0xffffffffffffffa0, 16) INDIRECT (stack, 0xffffffffffffffa0, 16) , (const, 0x66, 4)]
[(stack, 0xffffffffffffffb0, 16) INDIRECT (stack, 0xffffffffffffffb0, 16) , (const, 0x66, 4)]
[(stack, 0xffffffffffffffc0, 4) INDIRECT (stack, 0xffffffffffffffc0, 4) , (const, 0x66, 4)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0x66, 4)]
[ ---  CBRANCH (ram, 0x48c454, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (const, 0xffffffff, 4) , (register, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x469550, 8) , (const, 0x1b, 4) , (unique, 0x10000481, 8) , (const, 0x0, 8), (unique, 0x10000481, 8) CAST (unique, 0x10000245, 8), (unique, 0x10000245, 8) PTRSUB (const, 0x0, 8) , (const, 0x4c8000, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xb1, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4c80c0, 4) INDIRECT (unique, 0x10000445, 4) , (const, 0xb1, 4), (unique, 0x10000445, 4) COPY (register, 0x8, 4)]
[(ram, 0x4c80c8, 8) INDIRECT (unique, 0x10000449, 8) , (const, 0xb1, 4), (unique, 0x10000449, 8) COPY (register, 0x10, 8)]
[(ram, 0x4c80d0, 8) INDIRECT (register, 0x18, 8) , (const, 0xb1, 4), (register, 0x18, 8) INT_RIGHT (register, 0x30, 8) , (const, 0x1, 4)]
[(ram, 0x4c80d8, 8) INDIRECT (unique, 0x10000451, 8) , (const, 0xb1, 4), (unique, 0x10000451, 8) COPY (register, 0x38, 8)]
[(stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0xb1, 4), (stack, 0xffffffffffffff18, 4) MULTIEQUAL (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0xb1, 4), (stack, 0xffffffffffffff1c, 4) MULTIEQUAL (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4)]
[(stack, 0xffffffffffffff20, 4) INDIRECT (stack, 0xffffffffffffff20, 4) , (const, 0xb1, 4), (stack, 0xffffffffffffff20, 4) MULTIEQUAL (stack, 0xffffffffffffff20, 4) , (stack, 0xffffffffffffff20, 4)]
[(stack, 0xffffffffffffff24, 4) INDIRECT (stack, 0xffffffffffffff24, 4) , (const, 0xb1, 4), (stack, 0xffffffffffffff24, 4) MULTIEQUAL (stack, 0xffffffffffffff24, 4) , (stack, 0xffffffffffffff24, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0xb1, 4), (stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0xb1, 4), (stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0xb1, 4), (stack, 0xffffffffffffff38, 8) PTRSUB (const, 0x0, 8) , (const, 0x48c260, 8)]
[(stack, 0xffffffffffffff40, 16) INDIRECT (unique, 0x10000048, 16) , (const, 0xb1, 4), (unique, 0x10000048, 16) INT_ADD (unique, 0x100002ad, 16) , (unique, 0x10000060, 12), (unique, 0x100002ad, 16) INT_LEFT (unique, 0x1000029d, 16) , (const, 0x60, 16), (unique, 0x1000029d, 16) INT_SEXT (const, 0xffffffff, 4), (unique, 0x10000060, 12) INT_ADD (unique, 0x10000291, 12) , (const, 0xffffffffffffffff, 8), (unique, 0x10000291, 12) INT_LEFT (unique, 0x10000285, 12) , (const, 0x40, 12), (unique, 0x10000285, 12) INT_SEXT (const, 0xffffffff, 4)]
[(stack, 0xffffffffffffff50, 16) INDIRECT (unique, 0x1000006c, 16) , (const, 0xb1, 4), (unique, 0x1000006c, 16) INT_ADD (unique, 0x100002e5, 16) , (unique, 0x10000084, 12), (unique, 0x100002e5, 16) INT_LEFT (unique, 0x100002d5, 16) , (const, 0x60, 16), (unique, 0x100002d5, 16) INT_SEXT (const, 0xffffffff, 4), (unique, 0x10000084, 12) INT_ADD (unique, 0x100002c9, 12) , (const, 0xffffffffffffffff, 8), (unique, 0x100002c9, 12) INT_LEFT (unique, 0x100002bd, 12) , (const, 0x40, 12), (unique, 0x100002bd, 12) INT_SEXT (const, 0xffffffff, 4)]
[(stack, 0xffffffffffffff60, 16) INDIRECT (unique, 0x10000090, 16) , (const, 0xb1, 4), (unique, 0x10000090, 16) INT_ADD (unique, 0x1000031d, 16) , (unique, 0x100000a8, 12), (unique, 0x1000031d, 16) INT_LEFT (unique, 0x1000030d, 16) , (const, 0x60, 16), (unique, 0x1000030d, 16) INT_SEXT (const, 0xffffffff, 4), (unique, 0x100000a8, 12) INT_ADD (unique, 0x10000301, 12) , (const, 0xffffffffffffffff, 8), (unique, 0x10000301, 12) INT_LEFT (unique, 0x100002f5, 12) , (const, 0x40, 12), (unique, 0x100002f5, 12) INT_SEXT (const, 0xffffffff, 4)]
[(stack, 0xffffffffffffff70, 16) INDIRECT (unique, 0x100000b4, 16) , (const, 0xb1, 4), (unique, 0x100000b4, 16) INT_ADD (unique, 0x10000355, 16) , (unique, 0x100000cc, 12), (unique, 0x10000355, 16) INT_LEFT (unique, 0x10000345, 16) , (const, 0x60, 16), (unique, 0x10000345, 16) INT_SEXT (const, 0xffffffff, 4), (unique, 0x100000cc, 12) INT_ADD (unique, 0x10000339, 12) , (const, 0xffffffffffffffff, 8), (unique, 0x10000339, 12) INT_LEFT (unique, 0x1000032d, 12) , (const, 0x40, 12), (unique, 0x1000032d, 12) INT_SEXT (const, 0xffffffff, 4)]
[(stack, 0xffffffffffffff80, 16) INDIRECT (unique, 0x100000d8, 16) , (const, 0xb1, 4), (unique, 0x100000d8, 16) INT_ADD (unique, 0x1000038d, 16) , (unique, 0x100000f0, 12), (unique, 0x1000038d, 16) INT_LEFT (unique, 0x1000037d, 16) , (const, 0x60, 16), (unique, 0x1000037d, 16) INT_SEXT (const, 0xffffffff, 4), (unique, 0x100000f0, 12) INT_ADD (unique, 0x10000371, 12) , (const, 0xffffffffffffffff, 8), (unique, 0x10000371, 12) INT_LEFT (unique, 0x10000365, 12) , (const, 0x40, 12), (unique, 0x10000365, 12) INT_SEXT (const, 0xffffffff, 4)]
[(stack, 0xffffffffffffff90, 16) INDIRECT (unique, 0x100000fc, 16) , (const, 0xb1, 4), (unique, 0x100000fc, 16) INT_ADD (unique, 0x100003c5, 16) , (unique, 0x10000114, 12), (unique, 0x100003c5, 16) INT_LEFT (unique, 0x100003b5, 16) , (const, 0x60, 16), (unique, 0x100003b5, 16) INT_SEXT (const, 0xffffffff, 4), (unique, 0x10000114, 12) INT_ADD (unique, 0x100003a9, 12) , (const, 0xffffffffffffffff, 8), (unique, 0x100003a9, 12) INT_LEFT (unique, 0x1000039d, 12) , (const, 0x40, 12), (unique, 0x1000039d, 12) INT_SEXT (const, 0xffffffff, 4)]
[(stack, 0xffffffffffffffa0, 16) INDIRECT (unique, 0x10000120, 16) , (const, 0xb1, 4), (unique, 0x10000120, 16) INT_ADD (unique, 0x100003fd, 16) , (unique, 0x10000138, 12), (unique, 0x100003fd, 16) INT_LEFT (unique, 0x100003ed, 16) , (const, 0x60, 16), (unique, 0x100003ed, 16) INT_SEXT (const, 0xffffffff, 4), (unique, 0x10000138, 12) INT_ADD (unique, 0x100003e1, 12) , (const, 0xffffffffffffffff, 8), (unique, 0x100003e1, 12) INT_LEFT (unique, 0x100003d5, 12) , (const, 0x40, 12), (unique, 0x100003d5, 12) INT_SEXT (const, 0xffffffff, 4)]
[(stack, 0xffffffffffffffb0, 16) INDIRECT (unique, 0x10000144, 16) , (const, 0xb1, 4), (unique, 0x10000144, 16) INT_ADD (unique, 0x10000435, 16) , (unique, 0x1000015c, 12), (unique, 0x10000435, 16) INT_LEFT (unique, 0x10000425, 16) , (const, 0x60, 16), (unique, 0x10000425, 16) INT_SEXT (const, 0xffffffff, 4), (unique, 0x1000015c, 12) INT_ADD (unique, 0x10000419, 12) , (const, 0xffffffffffffffff, 8), (unique, 0x10000419, 12) INT_LEFT (unique, 0x1000040d, 12) , (const, 0x40, 12), (unique, 0x1000040d, 12) INT_SEXT (const, 0xffffffff, 4)]
[(stack, 0xffffffffffffffc0, 4) INDIRECT (stack, 0xffffffffffffffc0, 4) , (const, 0xb1, 4), (stack, 0xffffffffffffffc0, 4) COPY (const, 0x10000004, 4)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0xb1, 4), (stack, 0xffffffffffffffd0, 8) MULTIEQUAL (unique, 0xbd80, 8) , (stack, 0xffffffffffffffd0, 8)]
[ ---  CBRANCH (ram, 0x48c454, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (const, 0xffffffff, 4) , (register, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x469550, 8) , (const, 0x1b, 4) , (unique, 0x3800, 8) , (unique, 0x10000491, 8), (unique, 0x10000491, 8) CAST (unique, 0x10000255, 8), (unique, 0x10000255, 8) PTRSUB (const, 0x0, 8) , (const, 0x4c8000, 8), (unique, 0x3800, 8) CAST (unique, 0x10000489, 8), (unique, 0x10000489, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffffd0, 8) MULTIEQUAL (stack, 0xffffffffffffffd0, 8) , (stack, 0xffffffffffffffd0, 8) , (stack, 0xffffffffffffffd0, 8) , (stack, 0xffffffffffffffd0, 8)]
[(stack, 0xffffffffffffffc0, 4) MULTIEQUAL (stack, 0xffffffffffffffc0, 4) , (stack, 0xffffffffffffffc0, 4) , (stack, 0xffffffffffffffc0, 4) , (stack, 0xffffffffffffffc0, 4)]
[(stack, 0xffffffffffffffb0, 16) MULTIEQUAL (stack, 0xffffffffffffffb0, 16) , (stack, 0xffffffffffffffb0, 16) , (stack, 0xffffffffffffffb0, 16) , (stack, 0xffffffffffffffb0, 16)]
[(stack, 0xffffffffffffffa0, 16) MULTIEQUAL (stack, 0xffffffffffffffa0, 16) , (stack, 0xffffffffffffffa0, 16) , (stack, 0xffffffffffffffa0, 16) , (stack, 0xffffffffffffffa0, 16)]
[(stack, 0xffffffffffffff90, 16) MULTIEQUAL (stack, 0xffffffffffffff90, 16) , (stack, 0xffffffffffffff90, 16) , (stack, 0xffffffffffffff90, 16) , (stack, 0xffffffffffffff90, 16)]
[(stack, 0xffffffffffffff80, 16) MULTIEQUAL (stack, 0xffffffffffffff80, 16) , (stack, 0xffffffffffffff80, 16) , (stack, 0xffffffffffffff80, 16) , (stack, 0xffffffffffffff80, 16)]
[(stack, 0xffffffffffffff70, 16) MULTIEQUAL (stack, 0xffffffffffffff70, 16) , (stack, 0xffffffffffffff70, 16) , (stack, 0xffffffffffffff70, 16) , (stack, 0xffffffffffffff70, 16)]
[(stack, 0xffffffffffffff60, 16) MULTIEQUAL (stack, 0xffffffffffffff60, 16) , (stack, 0xffffffffffffff60, 16) , (stack, 0xffffffffffffff60, 16) , (stack, 0xffffffffffffff60, 16)]
[(stack, 0xffffffffffffff50, 16) MULTIEQUAL (stack, 0xffffffffffffff50, 16) , (stack, 0xffffffffffffff50, 16) , (stack, 0xffffffffffffff50, 16) , (stack, 0xffffffffffffff50, 16)]
[(stack, 0xffffffffffffff40, 16) MULTIEQUAL (stack, 0xffffffffffffff40, 16) , (stack, 0xffffffffffffff40, 16) , (stack, 0xffffffffffffff40, 16) , (stack, 0xffffffffffffff40, 16)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff24, 4) MULTIEQUAL (stack, 0xffffffffffffff24, 4) , (stack, 0xffffffffffffff24, 4) , (stack, 0xffffffffffffff24, 4) , (stack, 0xffffffffffffff24, 4)]
[(stack, 0xffffffffffffff20, 4) MULTIEQUAL (stack, 0xffffffffffffff20, 4) , (stack, 0xffffffffffffff20, 4) , (stack, 0xffffffffffffff20, 4) , (stack, 0xffffffffffffff20, 4)]
[(stack, 0xffffffffffffff1c, 4) MULTIEQUAL (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4)]
[(stack, 0xffffffffffffff18, 4) MULTIEQUAL (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4)]
[(ram, 0x4c80d8, 8) MULTIEQUAL (ram, 0x4c80d8, 8) , (ram, 0x4c80d8, 8) , (ram, 0x4c80d8, 8) , (ram, 0x4c80d8, 8)]
[(ram, 0x4c80d0, 8) MULTIEQUAL (ram, 0x4c80d0, 8) , (ram, 0x4c80d0, 8) , (ram, 0x4c80d0, 8) , (ram, 0x4c80d0, 8)]
[(ram, 0x4c80c8, 8) MULTIEQUAL (ram, 0x4c80c8, 8) , (ram, 0x4c80c8, 8) , (ram, 0x4c80c8, 8) , (ram, 0x4c80c8, 8)]
[(ram, 0x4c80c0, 4) MULTIEQUAL (ram, 0x4c80c0, 4) , (ram, 0x4c80c0, 4) , (ram, 0x4c80c0, 4) , (ram, 0x4c80c0, 4)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x0, 4) COPY (const, 0xffffffff, 4)]
[ ---  BRANCH (ram, 0x48c3f0, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xe1, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xc1, 4)]
[(ram, 0x4c80c0, 4) INDIRECT (ram, 0x4c80c0, 4) , (const, 0xe1, 4), (ram, 0x4c80c0, 4) INDIRECT (ram, 0x4c80c0, 4) , (const, 0xc1, 4)]
[(ram, 0x4c80c8, 8) INDIRECT (ram, 0x4c80c8, 8) , (const, 0xe1, 4), (ram, 0x4c80c8, 8) INDIRECT (ram, 0x4c80c8, 8) , (const, 0xc1, 4)]
[(ram, 0x4c80d0, 8) INDIRECT (ram, 0x4c80d0, 8) , (const, 0xe1, 4), (ram, 0x4c80d0, 8) INDIRECT (ram, 0x4c80d0, 8) , (const, 0xc1, 4)]
[(ram, 0x4c80d8, 8) INDIRECT (ram, 0x4c80d8, 8) , (const, 0xe1, 4), (ram, 0x4c80d8, 8) INDIRECT (ram, 0x4c80d8, 8) , (const, 0xc1, 4)]
[(stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0xe1, 4), (stack, 0xffffffffffffff18, 4) COPY (stack, 0xffffffffffffff28, 4), (stack, 0xffffffffffffff28, 4) SUBPIECE (stack, 0xffffffffffffff28, 8) , (const, 0x0, 8), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0xc1, 4), (stack, 0xffffffffffffff28, 8) COPY (const, 0x0, 8)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0xe1, 4), (stack, 0xffffffffffffff1c, 4) COPY (stack, 0xffffffffffffff2c, 4), (stack, 0xffffffffffffff2c, 4) SUBPIECE (stack, 0xffffffffffffff28, 8) , (const, 0x4, 8), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0xc1, 4), (stack, 0xffffffffffffff28, 8) COPY (const, 0x0, 8)]
[(stack, 0xffffffffffffff20, 4) INDIRECT (unique, 0x100001f8, 4) , (const, 0xe1, 4), (unique, 0x100001f8, 4) SUBPIECE (unique, 0x34400, 8) , (const, 0x0, 4), (unique, 0x34400, 8) INT_SDIV (const, 0xf4240, 8) , (unique, 0x34080, 8), (unique, 0x34080, 8) INT_SEXT (register, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x48c460, 8)]
[(stack, 0xffffffffffffff24, 4) INDIRECT (stack, 0xffffffffffffff24, 4) , (const, 0xe1, 4), (stack, 0xffffffffffffff24, 4) COPY (stack, 0xffffffffffffff34, 4), (stack, 0xffffffffffffff34, 4) INT_SRIGHT (unique, 0x100001f8, 4) , (const, 0x1f, 4), (unique, 0x100001f8, 4) SUBPIECE (unique, 0x34400, 8) , (const, 0x0, 4), (unique, 0x34400, 8) INT_SDIV (const, 0xf4240, 8) , (unique, 0x34080, 8), (unique, 0x34080, 8) INT_SEXT (register, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x48c460, 8)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0xe1, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0xc1, 4), (stack, 0xffffffffffffff28, 8) COPY (const, 0x0, 8)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (register, 0x0, 8) , (const, 0xe1, 4), (register, 0x0, 8) INT_SEXT (unique, 0x100001f8, 4), (unique, 0x100001f8, 4) SUBPIECE (unique, 0x34400, 8) , (const, 0x0, 4), (unique, 0x34400, 8) INT_SDIV (const, 0xf4240, 8) , (unique, 0x34080, 8), (unique, 0x34080, 8) INT_SEXT (register, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x48c460, 8)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0xe1, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0xc1, 4)]
[(stack, 0xffffffffffffff40, 16) INDIRECT (stack, 0xffffffffffffff40, 16) , (const, 0xe1, 4), (stack, 0xffffffffffffff40, 16) INDIRECT (stack, 0xffffffffffffff40, 16) , (const, 0xc1, 4)]
[(stack, 0xffffffffffffff50, 16) INDIRECT (stack, 0xffffffffffffff50, 16) , (const, 0xe1, 4), (stack, 0xffffffffffffff50, 16) INDIRECT (stack, 0xffffffffffffff50, 16) , (const, 0xc1, 4)]
[(stack, 0xffffffffffffff60, 16) INDIRECT (stack, 0xffffffffffffff60, 16) , (const, 0xe1, 4), (stack, 0xffffffffffffff60, 16) INDIRECT (stack, 0xffffffffffffff60, 16) , (const, 0xc1, 4)]
[(stack, 0xffffffffffffff70, 16) INDIRECT (stack, 0xffffffffffffff70, 16) , (const, 0xe1, 4), (stack, 0xffffffffffffff70, 16) INDIRECT (stack, 0xffffffffffffff70, 16) , (const, 0xc1, 4)]
[(stack, 0xffffffffffffff80, 16) INDIRECT (stack, 0xffffffffffffff80, 16) , (const, 0xe1, 4), (stack, 0xffffffffffffff80, 16) INDIRECT (stack, 0xffffffffffffff80, 16) , (const, 0xc1, 4)]
[(stack, 0xffffffffffffff90, 16) INDIRECT (stack, 0xffffffffffffff90, 16) , (const, 0xe1, 4), (stack, 0xffffffffffffff90, 16) INDIRECT (stack, 0xffffffffffffff90, 16) , (const, 0xc1, 4)]
[(stack, 0xffffffffffffffa0, 16) INDIRECT (stack, 0xffffffffffffffa0, 16) , (const, 0xe1, 4), (stack, 0xffffffffffffffa0, 16) INDIRECT (stack, 0xffffffffffffffa0, 16) , (const, 0xc1, 4)]
[(stack, 0xffffffffffffffb0, 16) INDIRECT (stack, 0xffffffffffffffb0, 16) , (const, 0xe1, 4), (stack, 0xffffffffffffffb0, 16) INDIRECT (stack, 0xffffffffffffffb0, 16) , (const, 0xc1, 4)]
[(stack, 0xffffffffffffffc0, 4) INDIRECT (stack, 0xffffffffffffffc0, 4) , (const, 0xe1, 4), (stack, 0xffffffffffffffc0, 4) INDIRECT (stack, 0xffffffffffffffc0, 4) , (const, 0xc1, 4)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0xe1, 4), (stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0xc1, 4)]
[(register, 0x0, 4) CALL (ram, 0x490040, 8) , (const, 0x2, 4) , (register, 0x20, 8) , (unique, 0x10000499, 8), (unique, 0x10000499, 8) CAST (unique, 0x1000026d, 8), (unique, 0x1000026d, 8) PTRSUB (const, 0x0, 8) , (const, 0x4c80a0, 8)]
[(stack, 0xffffffffffffffc0, 4) MULTIEQUAL (stack, 0xffffffffffffffc0, 4) , (stack, 0xffffffffffffffc0, 4) , (stack, 0xffffffffffffffc0, 4) , (stack, 0xffffffffffffffc0, 4)]
[(stack, 0xffffffffffffffb0, 16) MULTIEQUAL (stack, 0xffffffffffffffb0, 16) , (stack, 0xffffffffffffffb0, 16) , (stack, 0xffffffffffffffb0, 16) , (stack, 0xffffffffffffffb0, 16)]
[(stack, 0xffffffffffffffa0, 16) MULTIEQUAL (stack, 0xffffffffffffffa0, 16) , (stack, 0xffffffffffffffa0, 16) , (stack, 0xffffffffffffffa0, 16) , (stack, 0xffffffffffffffa0, 16)]
[(stack, 0xffffffffffffff90, 16) MULTIEQUAL (stack, 0xffffffffffffff90, 16) , (stack, 0xffffffffffffff90, 16) , (stack, 0xffffffffffffff90, 16) , (stack, 0xffffffffffffff90, 16)]
[(stack, 0xffffffffffffff80, 16) MULTIEQUAL (stack, 0xffffffffffffff80, 16) , (stack, 0xffffffffffffff80, 16) , (stack, 0xffffffffffffff80, 16) , (stack, 0xffffffffffffff80, 16)]
[(stack, 0xffffffffffffff70, 16) MULTIEQUAL (stack, 0xffffffffffffff70, 16) , (stack, 0xffffffffffffff70, 16) , (stack, 0xffffffffffffff70, 16) , (stack, 0xffffffffffffff70, 16)]
[(stack, 0xffffffffffffff60, 16) MULTIEQUAL (stack, 0xffffffffffffff60, 16) , (stack, 0xffffffffffffff60, 16) , (stack, 0xffffffffffffff60, 16) , (stack, 0xffffffffffffff60, 16)]
[(stack, 0xffffffffffffff50, 16) MULTIEQUAL (stack, 0xffffffffffffff50, 16) , (stack, 0xffffffffffffff50, 16) , (stack, 0xffffffffffffff50, 16) , (stack, 0xffffffffffffff50, 16)]
[(stack, 0xffffffffffffff40, 16) MULTIEQUAL (stack, 0xffffffffffffff40, 16) , (stack, 0xffffffffffffff40, 16) , (stack, 0xffffffffffffff40, 16) , (stack, 0xffffffffffffff40, 16)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff24, 4) MULTIEQUAL (stack, 0xffffffffffffff24, 4) , (stack, 0xffffffffffffff24, 4) , (stack, 0xffffffffffffff24, 4) , (stack, 0xffffffffffffff24, 4)]
[(stack, 0xffffffffffffff20, 4) MULTIEQUAL (stack, 0xffffffffffffff20, 4) , (stack, 0xffffffffffffff20, 4) , (stack, 0xffffffffffffff20, 4) , (stack, 0xffffffffffffff20, 4)]
[(stack, 0xffffffffffffff1c, 4) MULTIEQUAL (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4)]
[(stack, 0xffffffffffffff18, 4) MULTIEQUAL (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4)]
[(ram, 0x4c80d8, 8) MULTIEQUAL (ram, 0x4c80d8, 8) , (ram, 0x4c80d8, 8) , (ram, 0x4c80d8, 8) , (ram, 0x4c80d8, 8)]
[(ram, 0x4c80d0, 8) MULTIEQUAL (ram, 0x4c80d0, 8) , (ram, 0x4c80d0, 8) , (ram, 0x4c80d0, 8) , (ram, 0x4c80d0, 8)]
[(ram, 0x4c80c8, 8) MULTIEQUAL (ram, 0x4c80c8, 8) , (ram, 0x4c80c8, 8) , (ram, 0x4c80c8, 8) , (ram, 0x4c80c8, 8)]
[(ram, 0x4c80c0, 4) MULTIEQUAL (ram, 0x4c80c0, 4) , (ram, 0x4c80c0, 4) , (ram, 0x4c80c0, 4) , (ram, 0x4c80c0, 4)]
[(register, 0x0, 4) MULTIEQUAL (register, 0x0, 4) , (register, 0x0, 4) , (register, 0x0, 4) , (register, 0x0, 4)]
[ ---  CBRANCH (ram, 0x48c45b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffffd0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x100004a1, 8), (unique, 0x100004a1, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8), (stack, 0xffffffffffffffd0, 8) MULTIEQUAL (stack, 0xffffffffffffffd0, 8) , (stack, 0xffffffffffffffd0, 8) , (unique, 0xbd80, 8) , (stack, 0xffffffffffffffd0, 8)]
[(stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x108, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x108, 4)]
[(stack, 0xffffffffffffff20, 4) INDIRECT (stack, 0xffffffffffffff20, 4) , (const, 0x108, 4)]
[(stack, 0xffffffffffffff24, 4) INDIRECT (stack, 0xffffffffffffff24, 4) , (const, 0x108, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x108, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x108, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x108, 4)]
[(stack, 0xffffffffffffff40, 16) INDIRECT (stack, 0xffffffffffffff40, 16) , (const, 0x108, 4)]
[(stack, 0xffffffffffffff50, 16) INDIRECT (stack, 0xffffffffffffff50, 16) , (const, 0x108, 4)]
[(stack, 0xffffffffffffff60, 16) INDIRECT (stack, 0xffffffffffffff60, 16) , (const, 0x108, 4)]
[(stack, 0xffffffffffffff70, 16) INDIRECT (stack, 0xffffffffffffff70, 16) , (const, 0x108, 4)]
[(stack, 0xffffffffffffff80, 16) INDIRECT (stack, 0xffffffffffffff80, 16) , (const, 0x108, 4)]
[(stack, 0xffffffffffffff90, 16) INDIRECT (stack, 0xffffffffffffff90, 16) , (const, 0x108, 4)]
[(stack, 0xffffffffffffffa0, 16) INDIRECT (stack, 0xffffffffffffffa0, 16) , (const, 0x108, 4)]
[(stack, 0xffffffffffffffb0, 16) INDIRECT (stack, 0xffffffffffffffb0, 16) , (const, 0x108, 4)]
[(stack, 0xffffffffffffffc0, 4) INDIRECT (stack, 0xffffffffffffffc0, 4) , (const, 0x108, 4)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0x108, 4)]
[ ---  CALL (ram, 0x458dd0, 8)]
[(ram, 0x4c80c0, 4) COPY (ram, 0x4c80c0, 4), (ram, 0x4c80c0, 4) INDIRECT (ram, 0x4c80c0, 4) , (const, 0x108, 4)]
[(ram, 0x4c80c8, 8) COPY (ram, 0x4c80c8, 8), (ram, 0x4c80c8, 8) INDIRECT (ram, 0x4c80c8, 8) , (const, 0x108, 4)]
[(ram, 0x4c80d0, 8) COPY (ram, 0x4c80d0, 8), (ram, 0x4c80d0, 8) INDIRECT (ram, 0x4c80d0, 8) , (const, 0x108, 4)]
[(ram, 0x4c80d8, 8) COPY (ram, 0x4c80d8, 8), (ram, 0x4c80d8, 8) INDIRECT (ram, 0x4c80d8, 8) , (const, 0x108, 4)]
[ ---  RETURN (const, 0x1, 4)]
[(ram, 0x4c80c0, 4) COPY (ram, 0x4c80c0, 4)]
[(ram, 0x4c80c8, 8) COPY (ram, 0x4c80c8, 8)]
[(ram, 0x4c80d0, 8) COPY (ram, 0x4c80d0, 8)]
[(ram, 0x4c80d8, 8) COPY (ram, 0x4c80d8, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 4), (register, 0x0, 4) COPY (register, 0x0, 4)]
