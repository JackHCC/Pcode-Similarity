[(unique, 0x1000014a, 8) COPY (ram, 0x4eae68, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10000182, 8), (unique, 0x10000182, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8)]
[ ---  CBRANCH (ram, 0x1e043a, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x38, 8) , (const, 0x0, 8)]
[(stack, 0xffffffffffffff88, 8) COPY (const, 0x0, 8)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x1000018a, 8), (unique, 0x1000018a, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (ram, 0x4eae68, 8) , (register, 0x110, 8) , (const, 0x1, 8)]
[(stack, 0xffffffffffffff80, 8) COPY (const, 0x0, 8)]
[(stack, 0xffffffffffffffb0, 16) COPY (const, 0x0, 16)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x53, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000192, 8) , (const, 0x0, 4), (unique, 0x10000192, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (ram, 0x4eae68, 8) , (register, 0x110, 8) , (const, 0x1, 8)]
[(unique, 0x1000017a, 8) COPY (register, 0x38, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x5b, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x5b, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x5b, 4), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (unique, 0x1000017a, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffb0, 16) INDIRECT (stack, 0xffffffffffffffb0, 16) , (const, 0x5b, 4), (stack, 0xffffffffffffffb0, 16) MULTIEQUAL (stack, 0xffffffffffffffb0, 16) , (stack, 0xffffffffffffffb0, 16)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x5b, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (unique, 0xbd80, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CBRANCH (ram, 0x1e0361, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x1dfbe0, 8) , (register, 0x38, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 16) MULTIEQUAL (stack, 0xffffffffffffffb0, 16) , (stack, 0xffffffffffffffb0, 16)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x18, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x1e0300, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x10, 8) , (const, 0x0, 8)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x75, 4)]
[(stack, 0xffffffffffffffb0, 16) INDIRECT (stack, 0xffffffffffffffb0, 16) , (const, 0x75, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x75, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x81, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x75, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000019a, 8) , (const, 0x0, 4), (unique, 0x1000019a, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (unique, 0x1000014a, 8) , (register, 0x110, 8) , (const, 0x1, 8), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x75, 4)]
[ ---  CBRANCH (ram, 0x1e02d3, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALLIND (register, 0x10, 8) , (register, 0x18, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x10000152, 8) COPY (stack, 0xffffffffffffffb8, 8), (stack, 0xffffffffffffffb8, 8) SUBPIECE (stack, 0xffffffffffffffb0, 16) , (const, 0x8, 8), (stack, 0xffffffffffffffb0, 16) MULTIEQUAL (stack, 0xffffffffffffffb0, 16) , (stack, 0xffffffffffffffb0, 16)]
[(unique, 0x1000015a, 8) COPY (stack, 0xffffffffffffff80, 8)]
[ ---  CBRANCH (ram, 0x1e03e0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffff88, 8), (stack, 0xffffffffffffffb8, 8) SUBPIECE (stack, 0xffffffffffffffb0, 16) , (const, 0x8, 8), (stack, 0xffffffffffffffb0, 16) MULTIEQUAL (stack, 0xffffffffffffffb0, 16) , (stack, 0xffffffffffffffb0, 16)]
[ ---  CBRANCH (ram, 0x1e0420, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffff88, 8) , (const, 0x0, 8)]
[(unique, 0x3680, 8) INT_LEFT (stack, 0xffffffffffffff88, 8) , (const, 0x4, 8)]
[(unique, 0x10000172, 8) COPY (unique, 0x100000da, 8), (unique, 0x100000da, 8) INT_MULT (stack, 0xffffffffffffff88, 8) , (const, 0x2, 8)]
[ ---  BRANCH (ram, 0x1e03f8, 1)]
[(register, 0x30, 8) COPY (const, 0x50, 8)]
[(unique, 0x1000016a, 8) COPY (stack, 0xffffffffffffff88, 8), (stack, 0xffffffffffffff88, 8) COPY (const, 0xa, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (unique, 0x1000016a, 8) , (unique, 0x10000172, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x165, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x165, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x165, 4)]
[(stack, 0xffffffffffffffb0, 16) INDIRECT (stack, 0xffffffffffffffb0, 16) , (const, 0x165, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x165, 4)]
[ ---  CBRANCH (ram, 0x1e0361, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x121020, 8) , (stack, 0xffffffffffffff80, 8) , (register, 0x30, 8), (register, 0x30, 8) MULTIEQUAL (register, 0x30, 8) , (unique, 0x3680, 8)]
[(stack, 0xffffffffffffffb0, 16) INT_ADD (unique, 0x1000013a, 16) , (unique, 0x100001aa, 8), (unique, 0x100001aa, 8) CAST (register, 0x0, 8), (unique, 0x1000013a, 16) INT_LEFT (unique, 0x1000012a, 16) , (const, 0x40, 16), (unique, 0x1000012a, 16) INT_SEXT (unique, 0x100001a2, 8), (unique, 0x100001a2, 8) CAST (stack, 0xffffffffffffffb8, 8), (stack, 0xffffffffffffffb8, 8) SUBPIECE (stack, 0xffffffffffffffb0, 16) , (const, 0x8, 8)]
[(unique, 0x10000162, 8) COPY (register, 0x0, 8)]
[ ---  BRANCH (ram, 0x1e0310, 1)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (unique, 0x1000015a, 8) , (unique, 0x10000162, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x9d, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x9d, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x9d, 4), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffb0, 16) INDIRECT (stack, 0xffffffffffffffb0, 16) , (const, 0x9d, 4), (stack, 0xffffffffffffffb0, 16) MULTIEQUAL (stack, 0xffffffffffffffb0, 16) , (stack, 0xffffffffffffffb0, 16)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x9d, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CBRANCH (ram, 0x1e0361, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x1212c0, 8) , (register, 0x10, 8), (register, 0x10, 8) INT_ZEXT (unique, 0xbc00, 2), (unique, 0xbc00, 2) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0x18, 8) , (const, 0x10, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100001b2, 8) , (const, 0x0, 4), (unique, 0x100001b2, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (unique, 0x1000014a, 8) , (register, 0x110, 8) , (const, 0x1, 8), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xb3, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3400, 8) , (register, 0x0, 8), (unique, 0x3400, 8) CAST (unique, 0x100001c2, 8), (unique, 0x100001c2, 8) INT_ADD (unique, 0x100001ba, 8) , (unique, 0x3300, 8), (unique, 0x100001ba, 8) CAST (stack, 0xffffffffffffff80, 8), (unique, 0x3300, 8) INT_MULT (unique, 0x10000152, 8) , (const, 0x8, 8), (register, 0x0, 8) CALL (ram, 0x121160, 8) , (register, 0x0, 8) , (register, 0x18, 8) , (register, 0x10, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xc2, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xb3, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xc2, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xbe, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xba, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xb3, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0xc2, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0xb3, 4)]
[(stack, 0xffffffffffffffb0, 16) INDIRECT (stack, 0xffffffffffffffb0, 16) , (const, 0xc2, 4), (stack, 0xffffffffffffffb0, 16) INDIRECT (stack, 0xffffffffffffffb0, 16) , (const, 0xb3, 4), (stack, 0xffffffffffffffb0, 16) INT_ADD (unique, 0x1000011a, 16) , (stack, 0xffffffffffffffb0, 8), (unique, 0x1000011a, 16) INT_LEFT (unique, 0x1000010a, 16) , (const, 0x40, 16), (unique, 0x1000010a, 16) INT_SEXT (unique, 0x3100, 8), (stack, 0xffffffffffffffb0, 8) SUBPIECE (stack, 0xffffffffffffffb0, 16) , (const, 0x0, 8), (unique, 0x3100, 8) INT_ADD (unique, 0x10000152, 8) , (const, 0x1, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xc2, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xb3, 4)]
[ ---  CBRANCH (ram, 0x1e02e6, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x1dfbe0, 8) , (register, 0x38, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 16) MULTIEQUAL (stack, 0xffffffffffffffb0, 16) , (stack, 0xffffffffffffffb0, 16) , (stack, 0xffffffffffffffb0, 16) , (stack, 0xffffffffffffffb0, 16)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffa8, 8)]
[ ---  CBRANCH (ram, 0x1e0432, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100001ca, 8), (unique, 0x100001ca, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (unique, 0x1000014a, 8) , (register, 0x110, 8) , (const, 0x1, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x14b, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x14b, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x14b, 4)]
[(stack, 0xffffffffffffffb0, 16) INDIRECT (stack, 0xffffffffffffffb0, 16) , (const, 0x14b, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x14b, 4)]
[ ---  CALL (ram, 0x1e0220, 8) , (unique, 0x3800, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (unique, 0xbd80, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 16) MULTIEQUAL (stack, 0xffffffffffffffb0, 16) , (stack, 0xffffffffffffffb0, 16)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x0, 8) COPY (const, 0xffffffff, 8)]
[ ---  BRANCH (ram, 0x1e03bd, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xe3, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xe3, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0xe3, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xe3, 4)]
[ ---  CALL (ram, 0x1dfbb0, 8) , (register, 0x38, 8)]
[(stack, 0xffffffffffffffb8, 8) SUBPIECE (stack, 0xffffffffffffffb0, 16) , (const, 0x8, 8), (stack, 0xffffffffffffffb0, 16) INDIRECT (stack, 0xffffffffffffffb0, 16) , (const, 0xe3, 4)]
[ ---  CBRANCH (ram, 0x1e03a2, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x8, 8) , (const, 0x0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xfc, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xfc, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0xfc, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xfc, 4)]
[ ---  CALL (ram, 0x1426d0, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffffb8, 8) , (const, 0x8, 8) , (register, 0x8, 8)]
[(stack, 0xffffffffffffffb8, 8) SUBPIECE (stack, 0xffffffffffffffb0, 16) , (const, 0x8, 8), (stack, 0xffffffffffffffb0, 16) INDIRECT (stack, 0xffffffffffffffb0, 16) , (const, 0xfc, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 16) MULTIEQUAL (stack, 0xffffffffffffffb0, 16) , (stack, 0xffffffffffffffb0, 16)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x110, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x30, 8) , (stack, 0xffffffffffffff80, 8)]
[(register, 0x0, 8) INT_AND (register, 0x30, 8) , (const, 0xffffffff, 8), (register, 0x30, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[ ---  CBRANCH (ram, 0x1e03bd, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (const, 0xffffffff, 4) , (register, 0x30, 4), (register, 0x30, 4) SUBPIECE (register, 0x30, 8) , (const, 0x0, 4), (register, 0x30, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x11a, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100001d2, 8) , (unique, 0xbc80, 4), (unique, 0x100001d2, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (unique, 0x1000014a, 8) , (register, 0x110, 8) , (const, 0x1, 8)]
[(stack, 0xffffffffffffffb0, 16) MULTIEQUAL (stack, 0xffffffffffffffb0, 16) , (stack, 0xffffffffffffffb0, 16) , (stack, 0xffffffffffffffb0, 16)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x1e0457, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffffc0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x100001da, 8), (unique, 0x100001da, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x145, 4)]
[(stack, 0xffffffffffffffb0, 16) INDIRECT (stack, 0xffffffffffffffb0, 16) , (const, 0x145, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x145, 4)]
[ ---  CALL (ram, 0x234c80, 8)]
[(ram, 0x4eae68, 8) COPY (ram, 0x4eae68, 8), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x145, 4)]
[ ---  RETURN (const, 0x1, 4)]
[(ram, 0x4eae68, 8) COPY (ram, 0x4eae68, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8)]
