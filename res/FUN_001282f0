[(stack, 0xffffffffffffffc0, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10000b6b, 8), (unique, 0x10000b6b, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8)]
[(unique, 0x3100, 8) INT_ADD (register, 0x38, 8) , (const, 0x68, 8)]
[(unique, 0x3100, 8) PTRADD (register, 0x30, 8) , (const, 0x6, 8) , (const, 0x8, 8)]
[(stack, 0xffffffffffffff60, 8) COPY (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x128373, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x100004cf, 4) , (const, 0x0, 4), (unique, 0x100004cf, 4) INT_AND (unique, 0xbc80, 4) , (const, 0x1, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000b73, 8), (unique, 0x10000b73, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x30, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x10000b83, 8), (unique, 0x10000b83, 8) INT_ADD (register, 0x38, 8) , (const, 0x90, 8)]
[ ---  CBRANCH (ram, 0x128373, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbe00, 8) , (const, 0x0, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000b7b, 8), (unique, 0x10000b7b, 8) INT_ADD (register, 0x38, 8) , (const, 0x68, 8)]
[(register, 0x0, 8) CAST (unique, 0x10000ba3, 8), (unique, 0x10000ba3, 8) INT_XOR (register, 0x0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10000b9b, 8), (unique, 0x10000b9b, 8) INT_ADD (register, 0x110, 8) , (const, 0x30, 8), (register, 0x0, 8) INT_OR (unique, 0x4ff00, 8) , (unique, 0x50000, 8), (unique, 0x50000, 8) INT_LEFT (unique, 0x10000b93, 8) , (const, 0x2f, 4), (unique, 0x10000b93, 8) CAST (unique, 0xbd80, 8), (unique, 0x4ff00, 8) INT_RIGHT (unique, 0x10000b8b, 8) , (const, 0x11, 4), (unique, 0x10000b8b, 8) CAST (unique, 0xbd80, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (unique, 0xbd80, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x128ae7, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0x8, 4) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x12915d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x80, 8) , (const, 0x0, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1604, 4)]
[ ---  CALL (ram, 0x1303d0, 8) , (unique, 0x100006a9, 8) , (unique, 0x10000691, 8) , (const, 0x19f, 4) , (unique, 0x10000729, 8), (unique, 0x10000729, 8) COPY (const, 0x2bbb00, 8), (unique, 0x100006a9, 8) COPY (const, 0x2b39f4, 8), (unique, 0x10000691, 8) COPY (const, 0x2b39e0, 8)]
[ ---  RETURN (const, 0x1, 4)]
[(register, 0xb8, 4) COPY (const, 0x0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000bab, 8) , (const, 0x0, 8), (unique, 0x10000bab, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRADD (register, 0x30, 8) , (const, 0x4, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x128573, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x58c00, 1) , (const, 0x0, 1), (unique, 0x58c00, 1) INT_AND (unique, 0xbb00, 1) , (const, 0x1, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x10000bb3, 8), (unique, 0x10000bb3, 8) CAST (unique, 0x3800, 8), (unique, 0x3800, 8) PTRADD (register, 0x30, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[ ---  CALL (ram, 0x266330, 8) , (stack, 0xffffffffffffff60, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x15f6, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x15c2, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x15f6, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x15c2, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x15f6, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x15c2, 4)]
[(stack, 0xffffffffffffffba, 1) INDIRECT (stack, 0xffffffffffffffba, 1) , (const, 0x15f6, 4), (stack, 0xffffffffffffffba, 1) INDIRECT (stack, 0xffffffffffffffba, 1) , (const, 0x15c2, 4)]
[(stack, 0xffffffffffffffbf, 1) INDIRECT (stack, 0xffffffffffffffbf, 1) , (const, 0x15f6, 4), (stack, 0xffffffffffffffbf, 1) INDIRECT (stack, 0xffffffffffffffbf, 1) , (const, 0x15c2, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x15f6, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x15c2, 4)]
[(register, 0x0, 4) CALLIND (stack, 0xffffffffffffff60, 8) , (unique, 0x3100, 8) , (unique, 0x3100, 8) , (const, 0x0, 8) , (const, 0x0, 8) , (const, 0x0, 8) , (register, 0x88, 8) , (stack, 0x8, 4) , (stack, 0x10, 4)]
[ ---  BRANCH (ram, 0x128573, 1)]
[(unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffa8, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRADD (register, 0x30, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x10, 8)]
[(unique, 0x100009e3, 8) COPY (register, 0x80, 8)]
[ ---  CBRANCH (ram, 0x1283a2, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x80, 8) , (const, 0x0, 8)]
[(unique, 0x100009eb, 8) COPY (register, 0x30, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x100009e3, 8) , (unique, 0x100009eb, 8)]
[(stack, 0xffffffffffffffa8, 8) COPY (const, 0x0, 8)]
[(unique, 0x100009d3, 8) COPY (register, 0x0, 8), (register, 0x0, 8) COPY (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x1283bd, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x88, 8) , (const, 0x0, 8)]
[(unique, 0x100009db, 8) COPY (unique, 0x3800, 8)]
[(register, 0x0, 8) MULTIEQUAL (unique, 0x100009d3, 8) , (unique, 0x100009db, 8)]
[ ---  CBRANCH (ram, 0x128768, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0x10, 4) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x1283ca, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x10, 4) , (const, 0x0, 4), (register, 0x10, 4) INT_AND (unique, 0xbc80, 4) , (const, 0x7, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRADD (register, 0x30, 8) , (const, 0x4, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x1290f1, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x80, 8) , (const, 0x0, 8)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x158e, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x158e, 4)]
[ ---  CALL (ram, 0x1303d0, 8) , (unique, 0x100006a1, 8) , (unique, 0x10000689, 8) , (const, 0x22f, 4) , (unique, 0x10000721, 8), (unique, 0x10000721, 8) COPY (const, 0x2bbb00, 8), (unique, 0x100006a1, 8) COPY (const, 0x2b39f4, 8), (unique, 0x10000689, 8) COPY (const, 0x2b39e0, 8)]
[ ---  RETURN (const, 0x1, 4)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x1, 8) , (const, 0x4, 8)]
[(register, 0x8, 8) INT_ZEXT (register, 0x8, 1), (register, 0x8, 1) SUBPIECE (unique, 0xbc80, 4) , (const, 0x0, 4)]
[(unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) PTRADD (unique, 0x10000669, 8) , (unique, 0x100007a1, 8) , (const, 0x1, 8), (unique, 0x100007a1, 8) INT_ADD (register, 0x30, 8) , (const, 0xc, 8), (unique, 0x10000669, 8) COPY (const, 0x29ccb9, 8), (register, 0x30, 8) INT_SEXT (register, 0x30, 4), (register, 0x30, 4) INT_SRIGHT (unique, 0x10000bbb, 4) , (const, 0x8, 4), (unique, 0x10000bbb, 4) CAST (unique, 0xbc80, 4)]
[(unique, 0x10000a8b, 8) COPY (register, 0x30, 8), (register, 0x30, 8) INT_SEXT (register, 0x30, 4), (register, 0x30, 4) INT_SRIGHT (unique, 0x10000bbb, 4) , (const, 0x8, 4), (unique, 0x10000bbb, 4) CAST (unique, 0xbc80, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffbf, 1) MULTIEQUAL (stack, 0xffffffffffffffbf, 1) , (stack, 0xffffffffffffffbf, 1)]
[(stack, 0xffffffffffffffbe, 1) MULTIEQUAL (stack, 0xffffffffffffffbe, 1) , (stack, 0xffffffffffffffbe, 1)]
[(stack, 0xffffffffffffffbd, 1) MULTIEQUAL (stack, 0xffffffffffffffbd, 1) , (stack, 0xffffffffffffffbd, 1)]
[(stack, 0xffffffffffffffbc, 1) MULTIEQUAL (stack, 0xffffffffffffffbc, 1) , (stack, 0xffffffffffffffbc, 1)]
[(stack, 0xffffffffffffffbb, 1) MULTIEQUAL (stack, 0xffffffffffffffbb, 1) , (stack, 0xffffffffffffffbb, 1)]
[(stack, 0xffffffffffffffba, 1) MULTIEQUAL (unique, 0xbb00, 1) , (stack, 0xffffffffffffffba, 1)]
[(register, 0x38, 4) MULTIEQUAL (unique, 0xbc80, 4) , (register, 0x38, 4)]
[ ---  CBRANCH (ram, 0x1287c1, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (register, 0x30, 8) , (register, 0x8, 8), (register, 0x30, 8) INT_SUB (register, 0x30, 8) , (const, 0x1, 8), (register, 0x30, 8) MULTIEQUAL (unique, 0x10000a8b, 8) , (unique, 0x10000a93, 8)]
[(stack, 0xffffffffffffffba, 1) INDIRECT (stack, 0xffffffffffffffba, 1) , (const, 0xe32, 4)]
[(stack, 0xffffffffffffffbb, 1) INDIRECT (stack, 0xffffffffffffffbb, 1) , (const, 0xe32, 4)]
[(stack, 0xffffffffffffffbc, 1) INDIRECT (stack, 0xffffffffffffffbc, 1) , (const, 0xe32, 4)]
[(stack, 0xffffffffffffffbd, 1) INDIRECT (stack, 0xffffffffffffffbd, 1) , (const, 0xe32, 4)]
[(stack, 0xffffffffffffffbe, 1) INDIRECT (stack, 0xffffffffffffffbe, 1) , (const, 0xe32, 4)]
[(stack, 0xffffffffffffffbf, 1) INDIRECT (stack, 0xffffffffffffffbf, 1) , (const, 0xe32, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xe32, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3a00, 8) , (register, 0x88, 1), (unique, 0x3a00, 8) PTRADD (unique, 0x100007b9, 8) , (register, 0x30, 8) , (const, 0x1, 8), (unique, 0x100007b9, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffb9, 8), (register, 0x88, 1) INT_OR (unique, 0x100004df, 1) , (const, 0x80, 1), (unique, 0x100004df, 1) INT_AND (unique, 0x1000051f, 1) , (const, 0x3f, 1), (unique, 0x1000051f, 1) SUBPIECE (register, 0x38, 4) , (const, 0x0, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffbf, 1) MULTIEQUAL (stack, 0xffffffffffffffbf, 1) , (stack, 0xffffffffffffffbf, 1)]
[(stack, 0xffffffffffffffbe, 1) MULTIEQUAL (stack, 0xffffffffffffffbe, 1) , (stack, 0xffffffffffffffbe, 1)]
[(stack, 0xffffffffffffffbd, 1) MULTIEQUAL (stack, 0xffffffffffffffbd, 1) , (stack, 0xffffffffffffffbd, 1)]
[(stack, 0xffffffffffffffbc, 1) MULTIEQUAL (stack, 0xffffffffffffffbc, 1) , (stack, 0xffffffffffffffbc, 1)]
[(stack, 0xffffffffffffffbb, 1) MULTIEQUAL (stack, 0xffffffffffffffbb, 1) , (stack, 0xffffffffffffffbb, 1)]
[(stack, 0xffffffffffffffba, 1) MULTIEQUAL (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1)]
[(register, 0x38, 4) INT_RIGHT (register, 0x38, 4) , (const, 0x6, 4)]
[(unique, 0x10000a93, 8) COPY (register, 0x30, 8)]
[ ---  CBRANCH (ram, 0x1287a8, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (const, 0x1, 8) , (register, 0x30, 8)]
[ ---  CBRANCH (ram, 0x128a70, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (unique, 0xbd80, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x1, 8) , (const, 0x4, 8)]
[(register, 0xb8, 4) COPY (const, 0x5, 4)]
[ ---  BRANCH (ram, 0x128573, 1)]
[(unique, 0x3100, 8) INT_ADD (register, 0x8, 8) , (const, 0x1, 8)]
[(stack, 0xffffffffffffffba, 1) INDIRECT (stack, 0xffffffffffffffba, 1) , (const, 0xe89, 4), (stack, 0xffffffffffffffba, 1) COPY (unique, 0xba80, 1), (unique, 0xba80, 1) INT_OR (stack, 0xffffffffffffffba, 1) , (register, 0x38, 1), (register, 0x38, 1) SUBPIECE (register, 0x38, 4) , (const, 0x0, 4)]
[(stack, 0xffffffffffffffbb, 1) INDIRECT (stack, 0xffffffffffffffbb, 1) , (const, 0xe89, 4)]
[(stack, 0xffffffffffffffbc, 1) INDIRECT (stack, 0xffffffffffffffbc, 1) , (const, 0xe89, 4)]
[(stack, 0xffffffffffffffbd, 1) INDIRECT (stack, 0xffffffffffffffbd, 1) , (const, 0xe89, 4)]
[(stack, 0xffffffffffffffbe, 1) INDIRECT (stack, 0xffffffffffffffbe, 1) , (const, 0xe89, 4)]
[(stack, 0xffffffffffffffbf, 1) INDIRECT (stack, 0xffffffffffffffbf, 1) , (const, 0xe89, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xe89, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3a00, 8) , (unique, 0xbb00, 1), (unique, 0x3a00, 8) PTRADD (unique, 0x100007e1, 8) , (unique, 0x100007d9, 8) , (const, 0x1, 8), (unique, 0x100007e1, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffb9, 8), (unique, 0x100007d9, 8) INT_ADD (register, 0x8, 8) , (const, 0x1, 8), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0xbd80, 8)]
[ ---  CBRANCH (ram, 0x128891, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (unique, 0x3100, 8) , (register, 0x8, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x128891, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (unique, 0x3100, 8) , (const, 0x6, 8)]
[(stack, 0xffffffffffffffba, 1) INDIRECT (stack, 0xffffffffffffffba, 1) , (const, 0xeb6, 4)]
[(stack, 0xffffffffffffffbb, 1) INDIRECT (stack, 0xffffffffffffffbb, 1) , (const, 0xeb6, 4)]
[(stack, 0xffffffffffffffbc, 1) INDIRECT (stack, 0xffffffffffffffbc, 1) , (const, 0xeb6, 4)]
[(stack, 0xffffffffffffffbd, 1) INDIRECT (stack, 0xffffffffffffffbd, 1) , (const, 0xeb6, 4)]
[(stack, 0xffffffffffffffbe, 1) INDIRECT (stack, 0xffffffffffffffbe, 1) , (const, 0xeb6, 4)]
[(stack, 0xffffffffffffffbf, 1) INDIRECT (stack, 0xffffffffffffffbf, 1) , (const, 0xeb6, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xeb6, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3a00, 8) , (unique, 0xbb00, 1), (unique, 0x3a00, 8) PTRADD (unique, 0x10000801, 8) , (unique, 0x100007f9, 8) , (const, 0x1, 8), (unique, 0x10000801, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffb9, 8), (unique, 0x100007f9, 8) INT_ADD (register, 0x8, 8) , (const, 0x2, 8), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x128dc0, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (unique, 0x3100, 8) , (const, 0x6, 8), (unique, 0x3100, 8) INT_ADD (register, 0x8, 8) , (const, 0x2, 8)]
[ ---  CBRANCH (ram, 0x128dc0, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (unique, 0x3100, 8) , (register, 0x8, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x2, 8) , (const, 0x1, 8)]
[(stack, 0xffffffffffffffbc, 1) INDIRECT (stack, 0xffffffffffffffbc, 1) , (const, 0xeda, 4)]
[(stack, 0xffffffffffffffbd, 1) INDIRECT (stack, 0xffffffffffffffbd, 1) , (const, 0xeda, 4)]
[(stack, 0xffffffffffffffbe, 1) INDIRECT (stack, 0xffffffffffffffbe, 1) , (const, 0xeda, 4)]
[(stack, 0xffffffffffffffbf, 1) INDIRECT (stack, 0xffffffffffffffbf, 1) , (const, 0xeda, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xeda, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3a00, 8) , (unique, 0xbb00, 1), (unique, 0x3a00, 8) PTRADD (unique, 0x10000821, 8) , (unique, 0x10000819, 8) , (const, 0x1, 8), (unique, 0x10000821, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffb9, 8), (unique, 0x10000819, 8) INT_ADD (register, 0x8, 8) , (const, 0x3, 8), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x2, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x128891, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (unique, 0x3100, 8) , (const, 0x6, 8), (unique, 0x3100, 8) INT_ADD (register, 0x8, 8) , (const, 0x3, 8)]
[ ---  CBRANCH (ram, 0x128891, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (unique, 0x3100, 8) , (register, 0x8, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x3, 8) , (const, 0x1, 8)]
[(stack, 0xffffffffffffffbd, 1) INDIRECT (stack, 0xffffffffffffffbd, 1) , (const, 0xefe, 4)]
[(stack, 0xffffffffffffffbe, 1) INDIRECT (stack, 0xffffffffffffffbe, 1) , (const, 0xefe, 4)]
[(stack, 0xffffffffffffffbf, 1) INDIRECT (stack, 0xffffffffffffffbf, 1) , (const, 0xefe, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xefe, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3a00, 8) , (unique, 0xbb00, 1), (unique, 0x3a00, 8) PTRADD (unique, 0x10000841, 8) , (unique, 0x10000839, 8) , (const, 0x1, 8), (unique, 0x10000841, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffb9, 8), (unique, 0x10000839, 8) INT_ADD (register, 0x8, 8) , (const, 0x4, 8), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x3, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x128dc0, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (unique, 0x3100, 8) , (const, 0x6, 8), (unique, 0x3100, 8) INT_ADD (register, 0x8, 8) , (const, 0x4, 8)]
[ ---  CBRANCH (ram, 0x128dc0, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (unique, 0x3100, 8) , (register, 0x8, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x4, 8) , (const, 0x1, 8)]
[(stack, 0xffffffffffffffbe, 1) INDIRECT (stack, 0xffffffffffffffbe, 1) , (const, 0xf22, 4)]
[(stack, 0xffffffffffffffbf, 1) INDIRECT (stack, 0xffffffffffffffbf, 1) , (const, 0xf22, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xf22, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3a00, 8) , (unique, 0xbb00, 1), (unique, 0x3a00, 8) PTRADD (unique, 0x10000861, 8) , (unique, 0x10000859, 8) , (const, 0x1, 8), (unique, 0x10000861, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffb9, 8), (unique, 0x10000859, 8) INT_ADD (register, 0x8, 8) , (const, 0x5, 8), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x4, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x128891, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (unique, 0x3100, 8) , (const, 0x6, 8), (unique, 0x3100, 8) INT_ADD (register, 0x8, 8) , (const, 0x5, 8)]
[ ---  CBRANCH (ram, 0x128891, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (unique, 0x3100, 8) , (register, 0x8, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x5, 8) , (const, 0x1, 8)]
[(register, 0x30, 8) COPY (const, 0x6, 8)]
[(stack, 0xffffffffffffffbf, 1) COPY (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x5, 8) , (const, 0x1, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffbf, 1) MULTIEQUAL (stack, 0xffffffffffffffbf, 1) , (stack, 0xffffffffffffffbf, 1) , (stack, 0xffffffffffffffbf, 1) , (stack, 0xffffffffffffffbf, 1) , (stack, 0xffffffffffffffbf, 1) , (stack, 0xffffffffffffffbf, 1) , (stack, 0xffffffffffffffbf, 1) , (stack, 0xffffffffffffffbf, 1) , (stack, 0xffffffffffffffbf, 1) , (stack, 0xffffffffffffffbf, 1) , (stack, 0xffffffffffffffbf, 1)]
[(stack, 0xffffffffffffffbe, 1) MULTIEQUAL (stack, 0xffffffffffffffbe, 1) , (stack, 0xffffffffffffffbe, 1) , (stack, 0xffffffffffffffbe, 1) , (stack, 0xffffffffffffffbe, 1) , (stack, 0xffffffffffffffbe, 1) , (stack, 0xffffffffffffffbe, 1) , (stack, 0xffffffffffffffbe, 1) , (stack, 0xffffffffffffffbe, 1) , (stack, 0xffffffffffffffbe, 1) , (stack, 0xffffffffffffffbe, 1) , (stack, 0xffffffffffffffbe, 1)]
[(stack, 0xffffffffffffffbd, 1) MULTIEQUAL (stack, 0xffffffffffffffbd, 1) , (stack, 0xffffffffffffffbd, 1) , (stack, 0xffffffffffffffbd, 1) , (stack, 0xffffffffffffffbd, 1) , (stack, 0xffffffffffffffbd, 1) , (stack, 0xffffffffffffffbd, 1) , (stack, 0xffffffffffffffbd, 1) , (stack, 0xffffffffffffffbd, 1) , (stack, 0xffffffffffffffbd, 1) , (stack, 0xffffffffffffffbd, 1) , (stack, 0xffffffffffffffbd, 1)]
[(stack, 0xffffffffffffffbc, 1) MULTIEQUAL (stack, 0xffffffffffffffbc, 1) , (stack, 0xffffffffffffffbc, 1) , (stack, 0xffffffffffffffbc, 1) , (stack, 0xffffffffffffffbc, 1) , (stack, 0xffffffffffffffbc, 1) , (stack, 0xffffffffffffffbc, 1) , (stack, 0xffffffffffffffbc, 1) , (stack, 0xffffffffffffffbc, 1) , (stack, 0xffffffffffffffbc, 1) , (stack, 0xffffffffffffffbc, 1) , (stack, 0xffffffffffffffbc, 1)]
[(stack, 0xffffffffffffffbb, 1) MULTIEQUAL (stack, 0xffffffffffffffbb, 1) , (stack, 0xffffffffffffffbb, 1) , (stack, 0xffffffffffffffbb, 1) , (stack, 0xffffffffffffffbb, 1) , (stack, 0xffffffffffffffbb, 1) , (stack, 0xffffffffffffffbb, 1) , (stack, 0xffffffffffffffbb, 1) , (stack, 0xffffffffffffffbb, 1) , (stack, 0xffffffffffffffbb, 1) , (stack, 0xffffffffffffffbb, 1) , (stack, 0xffffffffffffffbb, 1)]
[(register, 0x30, 8) MULTIEQUAL (unique, 0x3100, 8) , (unique, 0x3100, 8) , (unique, 0x3100, 8) , (unique, 0x3100, 8) , (unique, 0x3100, 8) , (unique, 0x3100, 8) , (register, 0x30, 8) , (unique, 0x3100, 8) , (unique, 0x3100, 8) , (unique, 0x3100, 8) , (unique, 0x3100, 8)]
[(register, 0x18, 4) INT_ZEXT (stack, 0xffffffffffffffba, 1), (stack, 0xffffffffffffffba, 1) MULTIEQUAL (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1)]
[(register, 0x18, 4) INT_ZEXT (stack, 0xffffffffffffffba, 1), (stack, 0xffffffffffffffba, 1) MULTIEQUAL (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1)]
[ ---  CBRANCH (ram, 0x128de8, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (const, 0x7f, 1) , (stack, 0xffffffffffffffba, 1), (stack, 0xffffffffffffffba, 1) MULTIEQUAL (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1)]
[(unique, 0x3400, 8) CAST (unique, 0x10000bcf, 8), (unique, 0x10000bcf, 8) INT_ADD (unique, 0x10000bc7, 8) , (register, 0x30, 8), (unique, 0x10000bc7, 8) CAST (unique, 0x3800, 8), (unique, 0x3800, 8) CAST (unique, 0x10000bbf, 8), (unique, 0x10000bbf, 8) PTRADD (unique, 0x100008d9, 8) , (const, 0x1, 8) , (const, 0x1, 8), (unique, 0x100008d9, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffb9, 8)]
[ ---  CBRANCH (ram, 0x128fd4, 1) , (unique, 0xc900, 1), (unique, 0xc900, 1) INT_LESS (const, 0x1d, 4) , (register, 0x88, 4), (register, 0x88, 4) INT_SUB (unique, 0x10000383, 4) , (const, 0xc2, 4), (unique, 0x10000383, 4) INT_ZEXT (stack, 0xffffffffffffffba, 1)]
[ ---  CBRANCH (ram, 0x1293a1, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x88, 1) , (const, 0xe0, 1), (register, 0x88, 1) INT_AND (stack, 0xffffffffffffffba, 1) , (const, 0xf0, 1)]
[(stack, 0xffffffffffffff90, 8) COPY (const, 0x3, 8)]
[(register, 0x98, 4) INT_AND (register, 0x18, 4) , (const, 0xf, 4)]
[ ---  BRANCH (ram, 0x128e1c, 1)]
[ ---  CBRANCH (ram, 0x1293e1, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x88, 1) , (const, 0xf0, 1), (register, 0x88, 1) INT_AND (stack, 0xffffffffffffffba, 1) , (const, 0xf8, 1)]
[(stack, 0xffffffffffffff90, 8) COPY (const, 0x4, 8)]
[(register, 0x98, 4) INT_AND (register, 0x18, 4) , (const, 0x7, 4)]
[ ---  BRANCH (ram, 0x128e1c, 1)]
[ ---  CBRANCH (ram, 0x129403, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x88, 1) , (const, 0xf8, 1), (register, 0x88, 1) INT_AND (stack, 0xffffffffffffffba, 1) , (const, 0xfc, 1)]
[(stack, 0xffffffffffffff90, 8) COPY (const, 0x5, 8)]
[(register, 0x98, 4) INT_AND (register, 0x18, 4) , (const, 0x3, 4)]
[ ---  BRANCH (ram, 0x128e1c, 1)]
[ ---  CBRANCH (ram, 0x129425, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x88, 1) , (const, 0xfc, 1), (register, 0x88, 1) INT_AND (stack, 0xffffffffffffffba, 1) , (const, 0xfe, 1)]
[(stack, 0xffffffffffffff90, 8) COPY (const, 0x6, 8)]
[(register, 0x98, 4) INT_AND (register, 0x18, 4) , (const, 0x1, 4)]
[ ---  BRANCH (ram, 0x128e1c, 1)]
[(register, 0x98, 8) COPY (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x128f9a, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESSEQUAL (unique, 0x3400, 8) , (unique, 0x3400, 8), (unique, 0x3400, 8) CAST (unique, 0x10000bf7, 8), (unique, 0x10000bf7, 8) INT_ADD (unique, 0x10000be7, 8) , (unique, 0x10000bef, 8), (unique, 0x10000bef, 8) CAST (register, 0x98, 8), (unique, 0x10000be7, 8) CAST (unique, 0x3800, 8), (register, 0x98, 8) CAST (unique, 0x10000bdf, 8), (unique, 0x10000bdf, 8) INT_ADD (unique, 0x10000bd7, 8) , (const, 0x1, 8), (unique, 0x10000bd7, 8) CAST (register, 0x98, 8), (register, 0x98, 8) MULTIEQUAL (register, 0x98, 8) , (register, 0x98, 8)]
[ ---  CBRANCH (ram, 0x128f9a, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x8, 1) , (const, 0x80, 1), (register, 0x8, 1) INT_AND (unique, 0xbb00, 1) , (const, 0xc0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) CAST (unique, 0x10000c0f, 8), (unique, 0x10000c0f, 8) INT_ADD (unique, 0x10000bff, 8) , (unique, 0x10000c07, 8), (unique, 0x10000c07, 8) CAST (register, 0x98, 8), (unique, 0x10000bff, 8) CAST (unique, 0x3800, 8)]
[ ---  CBRANCH (ram, 0x129428, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x98, 8) , (unique, 0x10000c17, 8), (unique, 0x10000c17, 8) CAST (unique, 0x10000641, 8), (unique, 0x10000641, 8) PTRSUB (const, 0x0, 8) , (const, 0x5, 8)]
[(stack, 0xffffffffffffff90, 8) COPY (const, 0x2, 8)]
[(register, 0x98, 4) INT_AND (register, 0x18, 4) , (const, 0x1f, 4)]
[(register, 0x98, 4) MULTIEQUAL (register, 0x98, 4) , (register, 0x98, 4) , (register, 0x98, 4) , (register, 0x98, 4) , (register, 0x98, 4)]
[ ---  CBRANCH (ram, 0x129028, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (unique, 0x3400, 8) , (register, 0x88, 8), (register, 0x88, 8) CAST (unique, 0x10000c27, 8), (unique, 0x10000c27, 8) INT_ADD (stack, 0xffffffffffffff90, 8) , (unique, 0x10000c1f, 8), (unique, 0x10000c1f, 8) CAST (unique, 0x3800, 8), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(register, 0x206, 1) INT_EQUAL (unique, 0x3400, 8) , (unique, 0x10000c2f, 8), (unique, 0x10000c2f, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0x100008f9, 8) , (const, 0x2, 8) , (const, 0x1, 8), (unique, 0x100008f9, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffb9, 8)]
[ ---  CBRANCH (ram, 0x128f8e, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (unique, 0x3100, 8) , (unique, 0x3400, 8), (unique, 0x3100, 8) PTRADD (unique, 0x100008f9, 8) , (const, 0x2, 8) , (const, 0x1, 8), (unique, 0x100008f9, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffb9, 8)]
[ ---  CBRANCH (ram, 0x1291b7, 1) , (register, 0x206, 1)]
[ ---  CBRANCH (ram, 0x128f94, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x88, 1) , (const, 0x80, 1), (register, 0x88, 1) INT_AND (stack, 0xffffffffffffffbb, 1) , (const, 0xc0, 1)]
[(unique, 0x3100, 8) CAST (unique, 0x10000c37, 8), (unique, 0x10000c37, 8) PTRADD (unique, 0x10000911, 8) , (const, 0x3, 8) , (const, 0x1, 8), (unique, 0x10000911, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffb9, 8)]
[(register, 0x98, 8) CAST (unique, 0x10000c4f, 8), (unique, 0x10000c4f, 8) INT_SUB (unique, 0x10000c3f, 8) , (unique, 0x10000c47, 8), (unique, 0x10000c47, 8) CAST (unique, 0x3800, 8), (unique, 0x10000c3f, 8) CAST (register, 0xb8, 8), (register, 0xb8, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0xb8, 8)]
[(register, 0x206, 1) INT_EQUAL (unique, 0x3400, 8) , (register, 0xb8, 8), (register, 0xb8, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0xb8, 8)]
[ ---  CBRANCH (ram, 0x1291a2, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESSEQUAL (unique, 0x3400, 8) , (register, 0xb8, 8), (register, 0xb8, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0xb8, 8)]
[ ---  CBRANCH (ram, 0x128f9a, 1) , (register, 0x206, 1)]
[ ---  CBRANCH (ram, 0x129294, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x3400, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x1499, 4)]
[(stack, 0xffffffffffffffba, 1) INDIRECT (stack, 0xffffffffffffffba, 1) , (const, 0x1499, 4)]
[(stack, 0xffffffffffffffbf, 1) INDIRECT (stack, 0xffffffffffffffbf, 1) , (const, 0x1499, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1499, 4)]
[ ---  CALL (ram, 0x1303d0, 8) , (unique, 0x100006e9, 8) , (unique, 0x100006c1, 8) , (const, 0x1d0, 4) , (unique, 0x10000709, 8), (unique, 0x10000709, 8) COPY (const, 0x2bb050, 8), (unique, 0x100006e9, 8) COPY (const, 0x2b7628, 8), (unique, 0x100006c1, 8) COPY (const, 0x2b3a41, 8)]
[ ---  RETURN (const, 0x1, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x10, 8) , (register, 0xb0, 8), (register, 0xb0, 8) PTRADD (unique, 0xbd80, 8) , (register, 0x88, 8) , (const, 0x1, 8), (register, 0x88, 8) INT_SUB (register, 0x30, 8) , (register, 0x10, 8), (register, 0x10, 8) INT_SEXT (unique, 0x10000c57, 4), (unique, 0x10000c57, 4) CAST (register, 0x10, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0xbd80, 8) , (register, 0x30, 4), (register, 0x30, 4) SUBPIECE (register, 0x30, 8) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x129253, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (register, 0x18, 4) , (const, 0x2, 4), (register, 0x18, 4) INT_SUB (register, 0x18, 4) , (const, 0xc0, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x1490, 4)]
[(stack, 0xffffffffffffffba, 1) INDIRECT (stack, 0xffffffffffffffba, 1) , (const, 0x1490, 4)]
[(stack, 0xffffffffffffffbf, 1) INDIRECT (stack, 0xffffffffffffffbf, 1) , (const, 0x1490, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1490, 4)]
[ ---  CALL (ram, 0x1303d0, 8) , (unique, 0x100006d1, 8) , (unique, 0x100006b9, 8) , (const, 0x1d6, 4) , (unique, 0x10000701, 8), (unique, 0x10000701, 8) COPY (const, 0x2bb050, 8), (unique, 0x100006d1, 8) COPY (const, 0x2b3a62, 8), (unique, 0x100006b9, 8) COPY (const, 0x2b3a41, 8)]
[ ---  RETURN (const, 0x1, 4)]
[ ---  CBRANCH (ram, 0x129236, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (register, 0x88, 4) , (const, 0x1e, 4)]
[ ---  CBRANCH (ram, 0x1292b3, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x10, 1) , (const, 0xe0, 1), (register, 0x10, 1) INT_AND (stack, 0xffffffffffffffba, 1) , (const, 0xf0, 1)]
[ ---  CBRANCH (ram, 0x1292eb, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x10, 1) , (const, 0xf0, 1), (register, 0x10, 1) INT_AND (stack, 0xffffffffffffffba, 1) , (const, 0xf8, 1)]
[ ---  CBRANCH (ram, 0x1293cd, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x10, 1) , (const, 0xf8, 1), (register, 0x10, 1) INT_AND (stack, 0xffffffffffffffba, 1) , (const, 0xfc, 1)]
[(register, 0x10, 4) INT_AND (register, 0x18, 4) , (const, 0x1, 4)]
[(register, 0x88, 4) COPY (const, 0x600, 4)]
[(register, 0x80, 1) COPY (const, 0x5, 1)]
[ ---  BRANCH (ram, 0x1291ef, 1)]
[(register, 0x10, 4) INT_AND (register, 0x18, 4) , (const, 0x3, 4)]
[(register, 0x88, 4) COPY (const, 0x500, 4)]
[(register, 0x80, 1) COPY (const, 0x4, 1)]
[ ---  BRANCH (ram, 0x1291ef, 1)]
[(register, 0x88, 4) COPY (const, 0x400, 4)]
[(register, 0x80, 1) COPY (const, 0x3, 1)]
[(register, 0x10, 4) INT_AND (register, 0x18, 4) , (const, 0x7, 4)]
[ ---  BRANCH (ram, 0x1291ef, 1)]
[(register, 0x88, 4) COPY (const, 0x300, 4)]
[(register, 0x80, 1) COPY (const, 0x2, 1)]
[(register, 0x10, 4) INT_AND (register, 0x18, 4) , (const, 0xf, 4)]
[ ---  BRANCH (ram, 0x1291ef, 1)]
[(register, 0x88, 4) COPY (const, 0x200, 4)]
[(register, 0x80, 1) COPY (const, 0x1, 1)]
[(register, 0x10, 4) INT_AND (register, 0x18, 4) , (const, 0x1f, 4)]
[(register, 0x80, 1) MULTIEQUAL (register, 0x80, 1) , (register, 0x80, 1) , (register, 0x80, 1) , (register, 0x80, 1) , (register, 0x80, 1)]
[(register, 0x88, 4) MULTIEQUAL (register, 0x88, 4) , (register, 0x88, 4) , (register, 0x88, 4) , (register, 0x88, 4) , (register, 0x88, 4)]
[(register, 0x10, 4) MULTIEQUAL (register, 0x10, 4) , (register, 0x10, 4) , (register, 0x10, 4) , (register, 0x10, 4) , (register, 0x10, 4)]
[ ---  CBRANCH (ram, 0x12921b, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (unique, 0x3100, 8) , (unique, 0x3400, 8), (unique, 0x3100, 8) CAST (unique, 0x10000c5b, 8), (unique, 0x10000c5b, 8) PTRADD (unique, 0x10000949, 8) , (const, 0x2, 8) , (const, 0x1, 8), (unique, 0x10000949, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffb9, 8)]
[(register, 0x10, 4) INT_OR (register, 0x10, 4) , (register, 0x8, 4), (register, 0x8, 4) INT_AND (register, 0x8, 4) , (const, 0x3f, 4), (register, 0x8, 4) INT_ZEXT (unique, 0xbb00, 1), (register, 0x10, 4) INT_LEFT (register, 0x10, 4) , (const, 0x6, 4), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x10000c63, 8), (unique, 0x10000c63, 8) CAST (register, 0x90, 8), (register, 0x10, 4) MULTIEQUAL (register, 0x10, 4) , (register, 0x10, 4), (register, 0x90, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0x90, 8)]
[ ---  CBRANCH (ram, 0x1291fa, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x3400, 8) , (register, 0x90, 8), (register, 0x90, 8) CAST (unique, 0x10000c73, 8), (unique, 0x10000c73, 8) INT_ADD (unique, 0x10000c6b, 8) , (const, 0x1, 8), (unique, 0x10000c6b, 8) CAST (register, 0x90, 8), (register, 0x90, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0x90, 8)]
[(unique, 0x3a00, 1) INT_ADD (unique, 0x100005f5, 1) , (register, 0x80, 1), (unique, 0x100005f5, 1) INT_SUB (const, 0xbb, 1) , (unique, 0x100005fb, 1), (unique, 0x100005fb, 1) SUBPIECE (unique, 0x3400, 8) , (const, 0x0, 4)]
[(register, 0xb8, 4) COPY (const, 0x7, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0xbd80, 8) , (register, 0x30, 4), (register, 0x30, 4) INT_OR (register, 0x30, 4) , (register, 0x88, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (register, 0x10, 4), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x1, 8) , (const, 0x4, 8), (register, 0x10, 4) INT_LEFT (register, 0x10, 4) , (unique, 0x53100, 1), (unique, 0x53100, 1) INT_AND (unique, 0x100005ea, 1) , (const, 0x1f, 1), (unique, 0x100005ea, 1) INT_MULT (register, 0x80, 1) , (const, 0x6, 1), (register, 0x10, 4) MULTIEQUAL (register, 0x10, 4) , (register, 0x10, 4), (register, 0x80, 1) MULTIEQUAL (register, 0x80, 1) , (unique, 0x3a00, 1)]
[ ---  BRANCH (ram, 0x128573, 1)]
[(register, 0xb8, 8) CAST (unique, 0x10000c8b, 8), (unique, 0x10000c8b, 8) INT_ADD (unique, 0x10000c83, 8) , (const, 0x1, 8), (unique, 0x10000c83, 8) CAST (register, 0xb8, 8)]
[ ---  CBRANCH (ram, 0x12904f, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x88, 1) , (const, 0x80, 1), (register, 0x88, 1) INT_AND (unique, 0xbb00, 1) , (const, 0xc0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x10000c7b, 8), (unique, 0x10000c7b, 8) CAST (register, 0xb8, 8)]
[(register, 0x30, 4) INT_ZEXT (stack, 0xffffffffffffffbb, 1)]
[ ---  CBRANCH (ram, 0x128f94, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x8, 1) , (const, 0x80, 1), (register, 0x8, 1) INT_AND (stack, 0xffffffffffffffbb, 1) , (const, 0xc0, 1)]
[(register, 0x98, 8) COPY (const, 0x1, 8)]
[(register, 0x30, 4) INT_OR (register, 0x30, 4) , (register, 0x8, 4), (register, 0x8, 4) INT_LEFT (register, 0x98, 4) , (const, 0x6, 4), (register, 0x30, 4) INT_AND (register, 0x30, 4) , (const, 0x3f, 4)]
[ ---  CBRANCH (ram, 0x129080, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffff90, 8) , (const, 0x2, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0xbd80, 8) , (register, 0x30, 4)]
[(unique, 0x3100, 8) CAST (unique, 0x10000c93, 8), (unique, 0x10000c93, 8) PTRADD (unique, 0x10000929, 8) , (const, 0x3, 8) , (const, 0x1, 8), (unique, 0x10000929, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffb9, 8)]
[(register, 0x10, 4) INT_AND (unique, 0xbc80, 4) , (const, 0x7, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0xbd80, 8)]
[(unique, 0x10000b0b, 8) COPY (unique, 0x3100, 8)]
[ ---  BRANCH (ram, 0x1288b2, 1)]
[(register, 0x98, 4) INT_ZEXT (stack, 0xffffffffffffffbc, 1)]
[ ---  CBRANCH (ram, 0x129152, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x8, 1) , (const, 0x80, 1), (register, 0x8, 1) INT_AND (stack, 0xffffffffffffffbc, 1) , (const, 0xc0, 1)]
[(register, 0x98, 8) COPY (const, 0x2, 8)]
[ ---  BRANCH (ram, 0x128f9a, 1)]
[(register, 0x30, 4) INT_OR (register, 0x30, 4) , (register, 0x8, 4), (register, 0x8, 4) INT_AND (register, 0x98, 4) , (const, 0x3f, 4), (register, 0x30, 4) INT_LEFT (register, 0x30, 4) , (const, 0x6, 4)]
[ ---  CBRANCH (ram, 0x129144, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffff90, 8) , (const, 0x3, 8)]
[(register, 0x98, 8) COPY (const, 0x3, 8)]
[ ---  BRANCH (ram, 0x128f03, 1)]
[(register, 0x98, 4) INT_ZEXT (stack, 0xffffffffffffffbd, 1)]
[ ---  CBRANCH (ram, 0x129139, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x8, 1) , (const, 0x80, 1), (register, 0x8, 1) INT_AND (stack, 0xffffffffffffffbd, 1) , (const, 0xc0, 1)]
[(register, 0x98, 8) COPY (const, 0x3, 8)]
[ ---  BRANCH (ram, 0x128f9a, 1)]
[(register, 0x30, 4) INT_OR (register, 0x30, 4) , (register, 0x8, 4), (register, 0x8, 4) INT_AND (register, 0x98, 4) , (const, 0x3f, 4), (register, 0x30, 4) INT_LEFT (register, 0x30, 4) , (const, 0x6, 4)]
[ ---  CBRANCH (ram, 0x12912b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffff90, 8) , (const, 0x4, 8)]
[(register, 0x98, 8) CAST (unique, 0x10000c9b, 8), (unique, 0x10000c9b, 8) PTRSUB (const, 0x0, 8) , (const, 0x4, 8)]
[ ---  BRANCH (ram, 0x128f03, 1)]
[(register, 0x98, 4) INT_ZEXT (stack, 0xffffffffffffffbe, 1)]
[ ---  CBRANCH (ram, 0x129339, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x8, 1) , (const, 0x80, 1), (register, 0x8, 1) INT_AND (stack, 0xffffffffffffffbe, 1) , (const, 0xc0, 1)]
[(register, 0x98, 8) CAST (unique, 0x10000ca3, 8), (unique, 0x10000ca3, 8) PTRSUB (const, 0x0, 8) , (const, 0x4, 8)]
[ ---  BRANCH (ram, 0x128f9a, 1)]
[(register, 0x30, 4) INT_OR (register, 0x30, 4) , (register, 0x8, 4), (register, 0x8, 4) INT_AND (register, 0x98, 4) , (const, 0x3f, 4), (register, 0x30, 4) INT_LEFT (register, 0x30, 4) , (const, 0x6, 4)]
[ ---  CBRANCH (ram, 0x12911d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffff90, 8) , (const, 0x6, 8)]
[(register, 0x98, 8) CAST (unique, 0x10000cab, 8), (unique, 0x10000cab, 8) PTRSUB (const, 0x0, 8) , (const, 0x5, 8)]
[ ---  BRANCH (ram, 0x128f03, 1)]
[(register, 0x98, 4) INT_ZEXT (stack, 0xffffffffffffffbf, 1)]
[ ---  CBRANCH (ram, 0x12932e, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x8, 1) , (const, 0x80, 1), (register, 0x8, 1) INT_AND (stack, 0xffffffffffffffbf, 1) , (const, 0xc0, 1)]
[(register, 0x98, 8) CAST (unique, 0x10000cb3, 8), (unique, 0x10000cb3, 8) PTRSUB (const, 0x0, 8) , (const, 0x5, 8)]
[ ---  BRANCH (ram, 0x128f9a, 1)]
[(register, 0x98, 8) CAST (unique, 0x10000cbb, 8), (unique, 0x10000cbb, 8) PTRSUB (const, 0x0, 8) , (const, 0x6, 8)]
[(register, 0x30, 4) INT_OR (register, 0x30, 4) , (register, 0x8, 4), (register, 0x8, 4) INT_AND (register, 0x98, 4) , (const, 0x3f, 4), (register, 0x30, 4) INT_LEFT (register, 0x30, 4) , (const, 0x6, 4)]
[(register, 0x98, 8) MULTIEQUAL (register, 0x98, 8) , (register, 0x98, 8) , (register, 0x98, 8) , (register, 0x98, 8)]
[ ---  CBRANCH (ram, 0x128f9a, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x59200, 4) , (const, 0x0, 4), (unique, 0x59200, 4) INT_RIGHT (register, 0x30, 4) , (unique, 0x57100, 1), (unique, 0x57100, 1) INT_AND (unique, 0x10000501, 1) , (const, 0x1f, 1), (unique, 0x10000501, 1) INT_SUB (unique, 0x10000503, 1) , (const, 0x4, 1), (unique, 0x10000503, 1) INT_MULT (unique, 0x10000505, 1) , (const, 0x5, 1), (unique, 0x10000505, 1) SUBPIECE (stack, 0xffffffffffffff90, 8) , (const, 0x0, 4), (register, 0x30, 4) MULTIEQUAL (register, 0x30, 4) , (register, 0x30, 4) , (register, 0x30, 4) , (register, 0x30, 4)]
[ ---  CBRANCH (ram, 0x128f9a, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (const, 0x7ff, 4) , (unique, 0x3200, 4), (unique, 0x3200, 4) INT_SUB (register, 0x30, 4) , (const, 0xd800, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0xbd80, 8) , (register, 0x30, 4)]
[ ---  CBRANCH (ram, 0x1293c3, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x88, 8) , (unique, 0x3800, 8)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000cc3, 8), (unique, 0x10000cc3, 8) CAST (unique, 0x3800, 8), (unique, 0x3800, 8) PTRADD (register, 0x30, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[ ---  BRANCH (ram, 0x1283ca, 1)]
[(register, 0x10, 4) INT_AND (unique, 0xbc80, 4) , (const, 0x7, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0xbd80, 8)]
[(unique, 0x10000afb, 8) COPY (unique, 0x3100, 8)]
[ ---  BRANCH (ram, 0x1288b2, 1)]
[(register, 0x98, 8) MULTIEQUAL (register, 0x98, 8) , (register, 0x98, 8) , (register, 0x98, 8) , (register, 0x98, 8) , (register, 0x98, 8) , (register, 0x98, 8) , (register, 0x98, 8) , (register, 0x98, 8) , (register, 0x98, 8) , (register, 0x98, 8) , (register, 0x98, 8) , (register, 0x98, 8)]
[ ---  CBRANCH (ram, 0x128fa8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x129007, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x80, 4) , (const, 0x0, 4), (register, 0x80, 4) INT_AND (unique, 0xbc80, 4) , (const, 0x2, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x124f, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x124f, 4)]
[(stack, 0xffffffffffffffba, 1) INDIRECT (stack, 0xffffffffffffffba, 1) , (const, 0x124f, 4)]
[(stack, 0xffffffffffffffbf, 1) INDIRECT (stack, 0xffffffffffffffbf, 1) , (const, 0x124f, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x124f, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x0, 8) , (unique, 0xbe00, 8), (unique, 0xbe00, 8) INT_ADD (unique, 0xbe00, 8) , (const, 0x1, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (register, 0x0, 8)]
[(unique, 0x10000b03, 8) COPY (unique, 0xbd80, 8)]
[ ---  CBRANCH (ram, 0x1288b2, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x3400, 8) , (unique, 0x3800, 8), (unique, 0x3400, 8) CAST (unique, 0x10000cdb, 8), (unique, 0x10000cdb, 8) INT_ADD (unique, 0x10000ccb, 8) , (unique, 0x10000cd3, 8), (unique, 0x10000cd3, 8) CAST (register, 0x98, 8), (unique, 0x10000ccb, 8) CAST (unique, 0x3800, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffbf, 1) MULTIEQUAL (stack, 0xffffffffffffffbf, 1) , (stack, 0xffffffffffffffbf, 1) , (stack, 0xffffffffffffffbf, 1)]
[(stack, 0xffffffffffffffba, 1) MULTIEQUAL (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(register, 0xb8, 4) COPY (const, 0x6, 4)]
[ ---  BRANCH (ram, 0x128573, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0xbd80, 8) , (register, 0x18, 4)]
[(unique, 0x3100, 8) CAST (unique, 0x10000ce3, 8), (unique, 0x10000ce3, 8) PTRADD (unique, 0x10000879, 8) , (const, 0x2, 8) , (const, 0x1, 8), (unique, 0x10000879, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffb9, 8)]
[(register, 0x10, 4) INT_AND (unique, 0xbc80, 4) , (const, 0x7, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0xbd80, 8)]
[(unique, 0x10000af3, 8) COPY (unique, 0x3100, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffbf, 1) MULTIEQUAL (stack, 0xffffffffffffffbf, 1) , (stack, 0xffffffffffffffbf, 1) , (stack, 0xffffffffffffffbf, 1) , (stack, 0xffffffffffffffbf, 1)]
[(stack, 0xffffffffffffffba, 1) MULTIEQUAL (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(register, 0xb8, 8) MULTIEQUAL (unique, 0x10000af3, 8) , (unique, 0x10000afb, 8) , (unique, 0x10000b03, 8) , (unique, 0x10000b0b, 8)]
[ ---  CBRANCH (ram, 0x12909b, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESSEQUAL (unique, 0x10000d07, 8) , (register, 0x10, 8), (unique, 0x10000d07, 8) CAST (register, 0x88, 8), (register, 0x10, 8) INT_SEXT (unique, 0x10000d03, 4), (unique, 0x10000d03, 4) CAST (register, 0x10, 4), (register, 0x88, 8) CAST (unique, 0x10000cfb, 8), (unique, 0x10000cfb, 8) INT_SUB (unique, 0x10000ceb, 8) , (unique, 0x10000cf3, 8), (unique, 0x10000cf3, 8) CAST (register, 0x38, 8), (unique, 0x10000ceb, 8) CAST (register, 0x88, 8), (register, 0x38, 8) PTRADD (unique, 0x10000891, 8) , (const, 0x1, 8) , (const, 0x1, 8), (unique, 0x10000891, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffb9, 8), (register, 0x88, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0x88, 8) , (unique, 0x3400, 8) , (unique, 0x3100, 8), (register, 0x10, 4) MULTIEQUAL (register, 0x10, 4) , (register, 0x10, 4) , (register, 0x10, 4) , (register, 0x10, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0xf9a, 4)]
[(stack, 0xffffffffffffffba, 1) INDIRECT (stack, 0xffffffffffffffba, 1) , (const, 0xf9a, 4)]
[(stack, 0xffffffffffffffbf, 1) INDIRECT (stack, 0xffffffffffffffbf, 1) , (const, 0xf9a, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xf9a, 4)]
[ ---  CALL (ram, 0x1303d0, 8) , (unique, 0x100006e1, 8) , (unique, 0x100006b1, 8) , (const, 0x1be, 4) , (unique, 0x100006f9, 8), (unique, 0x100006f9, 8) COPY (const, 0x2bb050, 8), (unique, 0x100006e1, 8) COPY (const, 0x2b7600, 8), (unique, 0x100006b1, 8) COPY (const, 0x2b3a41, 8)]
[ ---  RETURN (const, 0x1, 4)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000d1f, 8), (unique, 0x10000d1f, 8) CAST (unique, 0x3800, 8), (unique, 0x3800, 8) PTRADD (register, 0x30, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x10, 8) , (register, 0xb0, 8), (register, 0xb0, 8) PTRADD (unique, 0xbd80, 8) , (register, 0x88, 8) , (const, 0x1, 8), (register, 0x88, 8) CAST (unique, 0x10000d17, 8), (unique, 0x10000d17, 8) INT_SUB (unique, 0x10000d0f, 8) , (register, 0x10, 8), (unique, 0x10000d0f, 8) CAST (register, 0x88, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0xbd80, 8) , (const, 0x0, 4)]
[ ---  BRANCH (ram, 0x1283ca, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffbf, 1) MULTIEQUAL (stack, 0xffffffffffffffbf, 1) , (stack, 0xffffffffffffffbf, 1) , (stack, 0xffffffffffffffbf, 1) , (stack, 0xffffffffffffffbf, 1)]
[(stack, 0xffffffffffffffba, 1) MULTIEQUAL (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(register, 0x80, 4) MULTIEQUAL (unique, 0xbc80, 4) , (unique, 0xbc80, 4) , (unique, 0xbc80, 4) , (unique, 0xbc80, 4)]
[(unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffb0, 8)]
[(unique, 0x10000b13, 8) COPY (register, 0x90, 8), (register, 0x90, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8) , (register, 0xb8, 8) , (unique, 0xbd80, 8)]
[ ---  CBRANCH (ram, 0x128543, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x8, 8) , (register, 0xb0, 8), (register, 0xb0, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8) , (register, 0xb0, 8) , (unique, 0xbd80, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffbf, 1) MULTIEQUAL (stack, 0xffffffffffffffbf, 1) , (stack, 0xffffffffffffffbf, 1)]
[(stack, 0xffffffffffffffba, 1) MULTIEQUAL (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x80, 4) MULTIEQUAL (register, 0x80, 4) , (unique, 0xbc80, 4)]
[(unique, 0x10000b53, 8) COPY (register, 0xb8, 8), (register, 0xb8, 8) MULTIEQUAL (register, 0x90, 8) , (unique, 0xbd80, 8)]
[(unique, 0x10000b5b, 8) COPY (register, 0xb0, 8), (register, 0xb0, 8) MULTIEQUAL (register, 0xb0, 8) , (unique, 0xbd80, 8)]
[ ---  CBRANCH (ram, 0x128900, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (unique, 0xbd80, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb8, 8) , (const, 0x1, 8) , (const, 0x4, 8), (register, 0xb8, 8) MULTIEQUAL (register, 0x90, 8) , (unique, 0xbd80, 8)]
[(register, 0x90, 4) COPY (const, 0x5, 4)]
[ ---  BRANCH (ram, 0x128493, 1)]
[(unique, 0x10000555, 4) INT_AND (register, 0x80, 4) , (const, 0x2, 4)]
[(register, 0x90, 4) COPY (const, 0x4, 4)]
[(unique, 0x10000ab3, 8) COPY (unique, 0x3100, 8)]
[ ---  BRANCH (ram, 0x128423, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffbf, 1) MULTIEQUAL (stack, 0xffffffffffffffbf, 1) , (stack, 0xffffffffffffffbf, 1)]
[(stack, 0xffffffffffffffba, 1) MULTIEQUAL (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(register, 0x90, 4) MULTIEQUAL (register, 0x90, 4) , (register, 0x90, 4)]
[(register, 0x18, 8) MULTIEQUAL (unique, 0x10000b53, 8) , (unique, 0x10000a23, 8)]
[(register, 0x38, 8) COPY (unique, 0x10000ac3, 8), (unique, 0x10000ac3, 8) MULTIEQUAL (unique, 0x10000ab3, 8) , (unique, 0x10000abb, 8)]
[(register, 0x0, 4) INT_ZEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0x30, 8), (register, 0x30, 8) MULTIEQUAL (unique, 0x10000b5b, 8) , (unique, 0x10000a5b, 8)]
[ ---  CBRANCH (ram, 0x128408, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (register, 0x0, 4) , (const, 0x80, 4), (register, 0x0, 4) INT_ZEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0x30, 8), (register, 0x30, 8) MULTIEQUAL (unique, 0x10000b5b, 8) , (unique, 0x10000a5b, 8)]
[(register, 0x30, 8) PTRADD (register, 0x30, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x128660, 1) , (unique, 0xc900, 1), (unique, 0xc900, 1) INT_LESS (register, 0x0, 4) , (const, 0x1e, 4), (register, 0x0, 4) INT_SUB (register, 0x0, 4) , (const, 0xc2, 4)]
[ ---  CBRANCH (ram, 0x128ab6, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 1) , (const, 0xe0, 1), (register, 0x0, 1) INT_AND (unique, 0xbb00, 1) , (const, 0xf0, 1)]
[ ---  CBRANCH (ram, 0x128f5d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 1) , (const, 0xf0, 1), (register, 0x0, 1) INT_AND (unique, 0xbb00, 1) , (const, 0xf8, 1)]
[ ---  CBRANCH (ram, 0x128945, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 1) , (const, 0xf8, 1), (register, 0x0, 1) INT_AND (unique, 0xbb00, 1) , (const, 0xfc, 1)]
[ ---  CBRANCH (ram, 0x129374, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 1) , (const, 0xfc, 1), (register, 0x0, 1) INT_AND (unique, 0xbb00, 1) , (const, 0xfe, 1)]
[(register, 0x10, 8) COPY (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x12847c, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESSEQUAL (register, 0x8, 8) , (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (register, 0x30, 8) , (unique, 0x10000d27, 8) , (const, 0x1, 8), (unique, 0x10000d27, 8) CAST (register, 0x10, 8), (register, 0x10, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x1, 8), (register, 0x10, 8) MULTIEQUAL (register, 0x10, 8) , (register, 0x10, 8)]
[ ---  CBRANCH (ram, 0x12847c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 1) , (const, 0x80, 1), (register, 0x0, 1) INT_AND (unique, 0xbb00, 1) , (const, 0xc0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (register, 0x30, 8) , (unique, 0x10000d2f, 8) , (const, 0x1, 8), (unique, 0x10000d2f, 8) CAST (register, 0x10, 8)]
[ ---  CBRANCH (ram, 0x129376, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x10, 8) , (unique, 0x10000639, 8), (unique, 0x10000639, 8) PTRSUB (const, 0x0, 8) , (const, 0x5, 8)]
[(stack, 0xffffffffffffff70, 1) COPY (const, 0x1a, 1)]
[(register, 0x0, 4) INT_AND (register, 0x0, 4) , (const, 0x1, 4)]
[(register, 0x10, 8) PTRSUB (const, 0x0, 8) , (const, 0x6, 8)]
[ ---  CBRANCH (ram, 0x12868c, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESSEQUAL (unique, 0x3100, 8) , (register, 0x8, 8), (unique, 0x3100, 8) PTRADD (register, 0x30, 8) , (const, 0x6, 8) , (const, 0x1, 8)]
[(register, 0x0, 4) INT_AND (register, 0x0, 4) , (const, 0x3, 4)]
[ ---  CBRANCH (ram, 0x128971, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESSEQUAL (unique, 0x3100, 8) , (register, 0x8, 8), (unique, 0x3100, 8) PTRADD (register, 0x30, 8) , (const, 0x5, 8) , (const, 0x1, 8)]
[(stack, 0xffffffffffffff70, 1) COPY (const, 0x15, 1)]
[(register, 0x10, 8) PTRSUB (const, 0x0, 8) , (const, 0x5, 8)]
[ ---  BRANCH (ram, 0x12868c, 1)]
[(register, 0x0, 4) INT_AND (register, 0x0, 4) , (const, 0x7, 4)]
[ ---  CBRANCH (ram, 0x128971, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESSEQUAL (unique, 0x3100, 8) , (register, 0x8, 8), (unique, 0x3100, 8) PTRADD (register, 0x30, 8) , (const, 0x4, 8) , (const, 0x1, 8)]
[(stack, 0xffffffffffffff70, 1) COPY (const, 0x10, 1)]
[(register, 0x10, 8) PTRSUB (const, 0x0, 8) , (const, 0x4, 8)]
[ ---  BRANCH (ram, 0x12868c, 1)]
[(register, 0x0, 4) INT_AND (register, 0x0, 4) , (const, 0xf, 4)]
[ ---  CBRANCH (ram, 0x128971, 1) , (unique, 0xc900, 1), (unique, 0xc900, 1) INT_LESS (register, 0x8, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x30, 8) , (const, 0x3, 8) , (const, 0x1, 8)]
[(stack, 0xffffffffffffff70, 1) COPY (const, 0xb, 1)]
[(register, 0x10, 8) COPY (const, 0x3, 8)]
[(stack, 0xffffffffffffff70, 1) MULTIEQUAL (stack, 0xffffffffffffff70, 1) , (stack, 0xffffffffffffff70, 1) , (stack, 0xffffffffffffff70, 1) , (stack, 0xffffffffffffff70, 1)]
[(register, 0x80, 8) MULTIEQUAL (unique, 0x3100, 8) , (unique, 0x3100, 8) , (unique, 0x3100, 8) , (unique, 0x3100, 8)]
[(register, 0x10, 8) MULTIEQUAL (register, 0x10, 8) , (register, 0x10, 8) , (register, 0x10, 8) , (register, 0x10, 8)]
[(register, 0x0, 4) MULTIEQUAL (register, 0x0, 4) , (register, 0x0, 4) , (register, 0x0, 4) , (register, 0x0, 4)]
[(register, 0x8, 4) INT_ZEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x30, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x128a7b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x98, 1) , (const, 0x80, 1), (register, 0x98, 1) INT_AND (unique, 0xbb00, 1) , (const, 0xc0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x30, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[(register, 0x8, 4) INT_OR (register, 0x8, 4) , (register, 0x0, 4), (register, 0x8, 4) INT_AND (register, 0x8, 4) , (const, 0x3f, 4), (register, 0x0, 4) INT_LEFT (register, 0x0, 4) , (const, 0x6, 4)]
[(register, 0x98, 4) INT_ZEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x30, 8) , (const, 0x2, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x128a85, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 1) , (const, 0x80, 1), (register, 0x0, 1) INT_AND (unique, 0xbb00, 1) , (const, 0xc0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x30, 8) , (const, 0x2, 8) , (const, 0x1, 8)]
[(register, 0x10, 8) COPY (const, 0x2, 8)]
[ ---  BRANCH (ram, 0x12847c, 1)]
[(register, 0x0, 4) INT_OR (register, 0x0, 4) , (register, 0x8, 4), (register, 0x0, 4) INT_AND (register, 0x98, 4) , (const, 0x3f, 4), (register, 0x8, 4) INT_LEFT (register, 0x8, 4) , (const, 0x6, 4)]
[ ---  CBRANCH (ram, 0x128734, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x10, 8) , (const, 0x3, 8)]
[(register, 0x8, 4) INT_ZEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x30, 8) , (const, 0x3, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x128b49, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x98, 1) , (const, 0x80, 1), (register, 0x98, 1) INT_AND (unique, 0xbb00, 1) , (const, 0xc0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x30, 8) , (const, 0x3, 8) , (const, 0x1, 8)]
[(register, 0x10, 8) COPY (const, 0x3, 8)]
[ ---  BRANCH (ram, 0x12847c, 1)]
[(register, 0x0, 4) INT_OR (register, 0x0, 4) , (register, 0x8, 4), (register, 0x8, 4) INT_AND (register, 0x8, 4) , (const, 0x3f, 4), (register, 0x0, 4) INT_LEFT (register, 0x0, 4) , (const, 0x6, 4)]
[ ---  CBRANCH (ram, 0x128734, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x10, 8) , (unique, 0x10000621, 8), (unique, 0x10000621, 8) PTRSUB (const, 0x0, 8) , (const, 0x4, 8)]
[(register, 0x8, 4) INT_ZEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x30, 8) , (const, 0x4, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x128b53, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x98, 1) , (const, 0x80, 1), (register, 0x98, 1) INT_AND (unique, 0xbb00, 1) , (const, 0xc0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x30, 8) , (const, 0x4, 8) , (const, 0x1, 8)]
[(register, 0x10, 8) PTRSUB (const, 0x0, 8) , (const, 0x4, 8)]
[ ---  BRANCH (ram, 0x12847c, 1)]
[(register, 0x0, 4) INT_OR (register, 0x0, 4) , (register, 0x8, 4), (register, 0x8, 4) INT_AND (register, 0x8, 4) , (const, 0x3f, 4), (register, 0x0, 4) INT_LEFT (register, 0x0, 4) , (const, 0x6, 4)]
[ ---  CBRANCH (ram, 0x128931, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x10, 8) , (unique, 0x10000659, 8), (unique, 0x10000659, 8) PTRSUB (const, 0x0, 8) , (const, 0x6, 8)]
[ ---  CBRANCH (ram, 0x129091, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (unique, 0x10000651, 8) , (register, 0x10, 8), (unique, 0x10000651, 8) PTRSUB (const, 0x0, 8) , (const, 0x5, 8)]
[(register, 0x10, 8) PTRSUB (const, 0x0, 8) , (const, 0x5, 8)]
[ ---  BRANCH (ram, 0x128734, 1)]
[(register, 0x8, 4) INT_ZEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x30, 8) , (const, 0x5, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x12893b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x98, 1) , (const, 0x80, 1), (register, 0x98, 1) INT_AND (unique, 0xbb00, 1) , (const, 0xc0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x30, 8) , (const, 0x5, 8) , (const, 0x1, 8)]
[(register, 0x10, 8) PTRSUB (const, 0x0, 8) , (const, 0x5, 8)]
[ ---  BRANCH (ram, 0x12847c, 1)]
[(register, 0x0, 4) INT_OR (register, 0x0, 4) , (register, 0x8, 4), (register, 0x8, 4) INT_AND (register, 0x8, 4) , (const, 0x3f, 4), (register, 0x0, 4) INT_LEFT (register, 0x0, 4) , (const, 0x6, 4)]
[(register, 0x10, 8) MULTIEQUAL (register, 0x10, 8) , (register, 0x10, 8) , (register, 0x10, 8) , (register, 0x10, 8)]
[ ---  CBRANCH (ram, 0x12847c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x59200, 4) , (const, 0x0, 4), (unique, 0x59200, 4) INT_RIGHT (register, 0x0, 4) , (stack, 0xffffffffffffff70, 1), (register, 0x0, 4) MULTIEQUAL (register, 0x0, 4) , (register, 0x0, 4) , (register, 0x0, 4) , (register, 0x0, 4)]
[ ---  CBRANCH (ram, 0x128971, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (register, 0x8, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x30, 8) , (const, 0x2, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x128c9d, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (unique, 0x3100, 8) , (register, 0x8, 8), (unique, 0x3100, 8) PTRADD (register, 0x30, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[(unique, 0x10000aa3, 8) COPY (register, 0x38, 8), (register, 0x38, 8) COPY (const, 0x1, 8)]
[ ---  BRANCH (ram, 0x1289be, 1)]
[ ---  CBRANCH (ram, 0x128a7b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 1) , (const, 0x80, 1), (register, 0x0, 1) INT_AND (unique, 0xbb00, 1) , (const, 0xc0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x30, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[(unique, 0x3100, 8) PTRADD (register, 0x30, 8) , (const, 0x2, 8) , (const, 0x1, 8)]
[(register, 0x10, 8) COPY (const, 0x1, 8)]
[(register, 0x38, 8) PTRADD (register, 0x8, 8) , (unique, 0x10000268, 8) , (const, 0x1, 8), (unique, 0x10000268, 8) INT_2COMP (unique, 0x10000d37, 8), (unique, 0x10000d37, 8) CAST (register, 0x30, 8)]
[ ---  BRANCH (ram, 0x1289b2, 1)]
[(register, 0x8, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0x8, 8)]
[(unique, 0x10000a9b, 8) COPY (register, 0x38, 8)]
[ ---  CBRANCH (ram, 0x1289a0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x10, 8) , (register, 0x38, 8), (register, 0x10, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x1, 8), (register, 0x10, 8) MULTIEQUAL (register, 0x10, 8) , (register, 0x10, 8)]
[(register, 0x38, 8) COPY (unique, 0x10000aab, 8), (unique, 0x10000aab, 8) MULTIEQUAL (unique, 0x10000a9b, 8) , (unique, 0x10000aa3, 8)]
[ ---  CBRANCH (ram, 0x1290ba, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x8, 8) , (register, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x8, 8) , (unique, 0x3100, 8)]
[(register, 0x90, 4) COPY (const, 0x7, 4)]
[(unique, 0x10000a33, 8) COPY (register, 0x18, 8)]
[(unique, 0x10000a6b, 8) COPY (register, 0x30, 8)]
[ ---  BRANCH (ram, 0x128493, 1)]
[(register, 0x8, 8) PTRADD (register, 0x8, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x12847c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 1) , (const, 0x80, 1), (register, 0x0, 1) INT_AND (unique, 0xbb00, 1) , (const, 0xc0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0x8, 8)]
[(register, 0x0, 4) INT_ZEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x30, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x128a7b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x8, 1) , (const, 0x80, 1), (register, 0x8, 1) INT_AND (unique, 0xbb00, 1) , (const, 0xc0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x30, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[(register, 0x0, 4) INT_OR (register, 0x0, 4) , (register, 0x10, 4), (register, 0x10, 4) INT_LEFT (register, 0x10, 4) , (const, 0x6, 4), (register, 0x0, 4) INT_AND (register, 0x0, 4) , (const, 0x3f, 4), (register, 0x10, 4) INT_AND (register, 0x0, 4) , (const, 0x1f, 4)]
[(register, 0x10, 8) COPY (const, 0x2, 8)]
[(unique, 0x1000096c, 8) MULTIEQUAL (register, 0x10, 8) , (register, 0x10, 8)]
[(unique, 0x10000974, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0x80, 8)]
[ ---  CBRANCH (ram, 0x12847c, 1) , (unique, 0x1000096b, 1), (unique, 0x1000096b, 1) INT_LESS (unique, 0x3200, 4) , (const, 0x800, 4), (unique, 0x3200, 4) INT_SUB (unique, 0x1000097c, 4) , (const, 0xd800, 4), (unique, 0x1000097c, 4) MULTIEQUAL (register, 0x0, 4) , (register, 0x0, 4)]
[(register, 0x30, 8) MULTIEQUAL (register, 0x30, 8) , (unique, 0x10000974, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x18, 8) , (register, 0x0, 4), (register, 0x0, 4) MULTIEQUAL (register, 0x0, 4) , (unique, 0x1000097c, 4)]
[(register, 0x10, 8) COPY (const, 0x1, 8)]
[ ---  BRANCH (ram, 0x12847c, 1)]
[(register, 0x10, 8) MULTIEQUAL (unique, 0x1000096c, 8) , (register, 0x10, 8) , (register, 0x10, 8) , (register, 0x10, 8) , (register, 0x10, 8) , (register, 0x10, 8) , (register, 0x10, 8) , (register, 0x10, 8) , (register, 0x10, 8) , (register, 0x10, 8) , (register, 0x10, 8) , (register, 0x38, 8)]
[ ---  CBRANCH (ram, 0x12848d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x1288e8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x10000555, 4) , (const, 0x0, 4)]
[(register, 0x90, 4) COPY (const, 0x6, 4)]
[(unique, 0x10000a1b, 8) COPY (register, 0x18, 8)]
[(unique, 0x10000a53, 8) COPY (register, 0x30, 8)]
[(register, 0x30, 8) PTRADD (register, 0x30, 8) , (unique, 0x10000d3f, 8) , (const, 0x1, 8), (unique, 0x10000d3f, 8) CAST (register, 0x10, 8)]
[(register, 0x90, 4) COPY (const, 0x6, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x9c1, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x9c1, 4)]
[(stack, 0xffffffffffffffba, 1) INDIRECT (stack, 0xffffffffffffffba, 1) , (const, 0x9c1, 4)]
[(stack, 0xffffffffffffffbf, 1) INDIRECT (stack, 0xffffffffffffffbf, 1) , (const, 0x9c1, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x9c1, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x0, 8) , (unique, 0xbe00, 8), (unique, 0xbe00, 8) INT_ADD (unique, 0xbe00, 8) , (const, 0x1, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (register, 0x0, 8)]
[(unique, 0x10000a13, 8) COPY (register, 0x18, 8)]
[ ---  BRANCH (ram, 0x128411, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffbf, 1) MULTIEQUAL (stack, 0xffffffffffffffbf, 1) , (stack, 0xffffffffffffffbf, 1)]
[(stack, 0xffffffffffffffba, 1) MULTIEQUAL (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(register, 0x90, 4) MULTIEQUAL (register, 0x90, 4) , (register, 0x90, 4)]
[(unique, 0x10000a23, 8) COPY (register, 0x18, 8), (register, 0x18, 8) MULTIEQUAL (unique, 0x10000a13, 8) , (register, 0x38, 8)]
[(unique, 0x10000a5b, 8) COPY (register, 0x30, 8), (register, 0x30, 8) MULTIEQUAL (register, 0x30, 8) , (register, 0x30, 8)]
[ ---  CBRANCH (ram, 0x128493, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x8, 8) , (register, 0x30, 8), (register, 0x30, 8) MULTIEQUAL (register, 0x30, 8) , (register, 0x30, 8)]
[(unique, 0x10000abb, 8) COPY (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x1, 8) , (const, 0x4, 8)]
[ ---  CBRANCH (ram, 0x1285a0, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESSEQUAL (unique, 0x3100, 8) , (unique, 0xbd80, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x1, 8) , (const, 0x4, 8)]
[(register, 0x90, 4) COPY (const, 0x5, 4)]
[ ---  BRANCH (ram, 0x128493, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffbf, 1) MULTIEQUAL (stack, 0xffffffffffffffbf, 1) , (stack, 0xffffffffffffffbf, 1) , (stack, 0xffffffffffffffbf, 1) , (stack, 0xffffffffffffffbf, 1) , (stack, 0xffffffffffffffbf, 1)]
[(stack, 0xffffffffffffffba, 1) MULTIEQUAL (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(register, 0x90, 4) MULTIEQUAL (register, 0x90, 4) , (register, 0x90, 4) , (register, 0x90, 4) , (register, 0x90, 4) , (register, 0x90, 4)]
[(register, 0x18, 8) MULTIEQUAL (unique, 0x10000a1b, 8) , (unique, 0x10000a23, 8) , (unique, 0x10000a23, 8) , (unique, 0x10000a33, 8) , (unique, 0x10000b53, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x10, 8) , (register, 0x30, 8), (register, 0x30, 8) MULTIEQUAL (unique, 0x10000a53, 8) , (unique, 0x10000a5b, 8) , (unique, 0x10000a5b, 8) , (unique, 0x10000a6b, 8) , (unique, 0x10000b5b, 8)]
[(unique, 0x10000b23, 8) COPY (register, 0xb8, 8)]
[ ---  CBRANCH (ram, 0x128568, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x80, 8) , (const, 0x0, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffbf, 1) MULTIEQUAL (stack, 0xffffffffffffffbf, 1) , (stack, 0xffffffffffffffbf, 1)]
[(stack, 0xffffffffffffffba, 1) MULTIEQUAL (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb8, 8) MULTIEQUAL (unique, 0x10000b23, 8) , (unique, 0x10000b2b, 8)]
[(register, 0xb0, 8) MULTIEQUAL (register, 0xb0, 8) , (register, 0xb0, 8)]
[(register, 0x90, 4) MULTIEQUAL (register, 0x90, 4) , (register, 0x90, 4)]
[(register, 0x18, 8) MULTIEQUAL (register, 0x18, 8) , (register, 0xb8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3800, 8) , (unique, 0xbd00, 4), (unique, 0xbd00, 4) INT_ADD (unique, 0xbd00, 4) , (const, 0x1, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) CAST (unique, 0x10000d4f, 8), (unique, 0x10000d4f, 8) INT_ADD (unique, 0x10000d47, 8) , (const, 0x14, 8), (unique, 0x10000d47, 8) CAST (register, 0x30, 8)]
[ ---  CBRANCH (ram, 0x128918, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x58c00, 1) , (const, 0x0, 1), (unique, 0x58c00, 1) INT_AND (unique, 0xbb00, 1) , (const, 0x1, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x10000d57, 8), (unique, 0x10000d57, 8) CAST (unique, 0x3800, 8), (unique, 0x3800, 8) PTRADD (register, 0x30, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x30, 8) , (register, 0x18, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x88, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) INT_ADD (unique, 0xbd80, 8) , (stack, 0xffffffffffffffa8, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x88, 8)]
[(unique, 0x10000b33, 4) COPY (register, 0x90, 4)]
[ ---  BRANCH (ram, 0x1285bd, 1)]
[(unique, 0x10000b37, 4) COPY (register, 0x90, 4)]
[ ---  CBRANCH (ram, 0x1285ba, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESSEQUAL (register, 0x18, 8) , (register, 0xb8, 8)]
[ ---  CALL (ram, 0x266330, 8) , (stack, 0xffffffffffffff60, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x22f, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x208, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x22f, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x208, 4)]
[(stack, 0xffffffffffffffba, 1) INDIRECT (stack, 0xffffffffffffffba, 1) , (const, 0x22f, 4), (stack, 0xffffffffffffffba, 1) INDIRECT (stack, 0xffffffffffffffba, 1) , (const, 0x208, 4)]
[(stack, 0xffffffffffffffbf, 1) INDIRECT (stack, 0xffffffffffffffbf, 1) , (const, 0x22f, 4), (stack, 0xffffffffffffffbf, 1) INDIRECT (stack, 0xffffffffffffffbf, 1) , (const, 0x208, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x22f, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x208, 4)]
[(unique, 0x100009cb, 8) COPY (stack, 0xffffffffffffffb0, 8), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x22f, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x208, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x30, 8)]
[ ---  CBRANCH (ram, 0x1285b0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x4, 4), (register, 0x0, 4) CALLIND (stack, 0xffffffffffffff60, 8) , (unique, 0x3100, 8) , (unique, 0x3100, 8) , (unique, 0x3800, 8) , (register, 0x18, 8) , (const, 0x0, 8) , (register, 0x88, 8) , (const, 0x0, 8) , (stack, 0x10, 4)]
[(unique, 0x10000b3b, 4) COPY (register, 0x90, 4)]
[ ---  CBRANCH (ram, 0x12852a, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x90, 4) , (const, 0x5, 4)]
[ ---  CBRANCH (ram, 0x1289d2, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffffb0, 8) , (register, 0x18, 8)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000d5f, 8), (unique, 0x10000d5f, 8) CAST (unique, 0x3800, 8), (unique, 0x3800, 8) PTRADD (register, 0x30, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x10, 8) , (register, 0xb0, 8)]
[ ---  CBRANCH (ram, 0x128ca7, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x8, 8) , (register, 0xb0, 8)]
[(unique, 0x10000a03, 8) COPY (register, 0xb8, 8)]
[ ---  CBRANCH (ram, 0x128a8f, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESSEQUAL (unique, 0x3100, 8) , (stack, 0xffffffffffffffb0, 8), (unique, 0x3100, 8) PTRADD (register, 0xb8, 8) , (const, 0x1, 8) , (const, 0x4, 8)]
[(unique, 0x10000615, 4) INT_AND (unique, 0xbc80, 4) , (const, 0x2, 4)]
[(unique, 0x10000ae3, 8) COPY (register, 0xb0, 8)]
[ ---  BRANCH (ram, 0x128a1b, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffbf, 1) MULTIEQUAL (stack, 0xffffffffffffffbf, 1) , (stack, 0xffffffffffffffbf, 1)]
[(stack, 0xffffffffffffffba, 1) MULTIEQUAL (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(register, 0x80, 8) MULTIEQUAL (unique, 0x3100, 8) , (unique, 0x3100, 8)]
[(register, 0x18, 8) MULTIEQUAL (unique, 0x10000a03, 8) , (register, 0x18, 8)]
[(register, 0x10, 4) INT_ZEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0xb0, 8), (register, 0xb0, 8) MULTIEQUAL (unique, 0x10000ae3, 8) , (unique, 0x10000aeb, 8)]
[(register, 0x10, 4) INT_ZEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0xb0, 8), (register, 0xb0, 8) MULTIEQUAL (unique, 0x10000ae3, 8) , (unique, 0x10000aeb, 8)]
[ ---  CBRANCH (ram, 0x128a00, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (const, 0x7f, 1) , (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0xb0, 8), (register, 0xb0, 8) MULTIEQUAL (unique, 0x10000ae3, 8) , (unique, 0x10000aeb, 8)]
[ ---  CBRANCH (ram, 0x128b9b, 1) , (unique, 0xc900, 1), (unique, 0xc900, 1) INT_LESS (register, 0x10, 4) , (const, 0x1e, 4), (register, 0x10, 4) INT_SUB (register, 0x10, 4) , (const, 0xc2, 4)]
[(register, 0x8, 4) INT_ZEXT (unique, 0xbb00, 1)]
[ ---  CBRANCH (ram, 0x128d4f, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x10, 1) , (const, 0xe0, 1), (register, 0x10, 1) INT_AND (unique, 0xbb00, 1) , (const, 0xf0, 1)]
[ ---  CBRANCH (ram, 0x1290c2, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x10, 1) , (const, 0xf0, 1), (register, 0x10, 1) INT_AND (unique, 0xbb00, 1) , (const, 0xf8, 1)]
[ ---  CBRANCH (ram, 0x128cd2, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x10, 1) , (const, 0xf8, 1), (register, 0x10, 1) INT_AND (unique, 0xbb00, 1) , (const, 0xfc, 1)]
[ ---  CBRANCH (ram, 0x129344, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x10, 1) , (const, 0xfc, 1), (register, 0x10, 1) INT_AND (unique, 0xbb00, 1) , (const, 0xfe, 1)]
[(register, 0x88, 8) COPY (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x128d80, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESSEQUAL (register, 0x8, 8) , (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (register, 0xb0, 8) , (unique, 0x10000d67, 8) , (const, 0x1, 8), (unique, 0x10000d67, 8) CAST (register, 0x88, 8), (register, 0x88, 8) PTRADD (register, 0x88, 8) , (const, 0x1, 8) , (const, 0x1, 8), (register, 0x88, 8) MULTIEQUAL (register, 0x88, 8) , (register, 0x88, 8)]
[ ---  CBRANCH (ram, 0x128d80, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x10, 1) , (const, 0x80, 1), (register, 0x10, 1) INT_AND (unique, 0xbb00, 1) , (const, 0xc0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (register, 0xb0, 8) , (unique, 0x10000d6f, 8) , (const, 0x1, 8), (unique, 0x10000d6f, 8) CAST (register, 0x88, 8)]
[ ---  CBRANCH (ram, 0x129347, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x88, 8) , (unique, 0x10000631, 8), (unique, 0x10000631, 8) PTRSUB (const, 0x0, 8) , (const, 0x5, 8)]
[(register, 0x8, 4) INT_AND (register, 0x8, 4) , (const, 0x1, 4)]
[(register, 0x90, 1) COPY (const, 0x1a, 1)]
[(register, 0x88, 8) PTRSUB (const, 0x0, 8) , (const, 0x6, 8)]
[ ---  CBRANCH (ram, 0x128bc5, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESSEQUAL (unique, 0x3100, 8) , (register, 0x8, 8), (unique, 0x3100, 8) PTRADD (register, 0xb0, 8) , (const, 0x6, 8) , (const, 0x1, 8)]
[(register, 0x8, 4) INT_AND (register, 0x8, 4) , (const, 0x3, 4)]
[ ---  CBRANCH (ram, 0x128cfc, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESSEQUAL (unique, 0x3100, 8) , (register, 0x8, 8), (unique, 0x3100, 8) PTRADD (register, 0xb0, 8) , (const, 0x5, 8) , (const, 0x1, 8)]
[(register, 0x90, 1) COPY (const, 0x15, 1)]
[(register, 0x88, 8) PTRSUB (const, 0x0, 8) , (const, 0x5, 8)]
[ ---  BRANCH (ram, 0x128bc5, 1)]
[(register, 0x8, 4) INT_AND (register, 0x8, 4) , (const, 0x7, 4)]
[ ---  CBRANCH (ram, 0x128cfc, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESSEQUAL (unique, 0x3100, 8) , (register, 0x8, 8), (unique, 0x3100, 8) PTRADD (register, 0xb0, 8) , (const, 0x4, 8) , (const, 0x1, 8)]
[(register, 0x90, 1) COPY (const, 0x10, 1)]
[(register, 0x88, 8) PTRSUB (const, 0x0, 8) , (const, 0x4, 8)]
[ ---  BRANCH (ram, 0x128bc5, 1)]
[(register, 0x8, 4) INT_AND (register, 0x8, 4) , (const, 0xf, 4)]
[ ---  CBRANCH (ram, 0x128cfc, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESSEQUAL (unique, 0x3100, 8) , (register, 0x8, 8), (unique, 0x3100, 8) PTRADD (register, 0xb0, 8) , (const, 0x3, 8) , (const, 0x1, 8)]
[(register, 0x90, 1) COPY (const, 0xb, 1)]
[(register, 0x88, 8) COPY (const, 0x3, 8)]
[(register, 0x90, 1) MULTIEQUAL (register, 0x90, 1) , (register, 0x90, 1) , (register, 0x90, 1) , (register, 0x90, 1)]
[(register, 0x88, 8) MULTIEQUAL (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8)]
[(register, 0x30, 8) MULTIEQUAL (unique, 0x3100, 8) , (unique, 0x3100, 8) , (unique, 0x3100, 8) , (unique, 0x3100, 8)]
[(register, 0x8, 4) MULTIEQUAL (register, 0x8, 4) , (register, 0x8, 4) , (register, 0x8, 4) , (register, 0x8, 4)]
[(register, 0x10, 4) INT_ZEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb0, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x128d7a, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x98, 1) , (const, 0x80, 1), (register, 0x98, 1) INT_AND (unique, 0xbb00, 1) , (const, 0xc0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb0, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[(register, 0x8, 4) INT_OR (register, 0x8, 4) , (register, 0x10, 4), (register, 0x8, 4) INT_LEFT (register, 0x8, 4) , (const, 0x6, 4), (register, 0x10, 4) INT_AND (register, 0x10, 4) , (const, 0x3f, 4)]
[(register, 0x10, 4) INT_ZEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb0, 8) , (const, 0x2, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x128fc9, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x98, 1) , (const, 0x80, 1), (register, 0x98, 1) INT_AND (unique, 0xbb00, 1) , (const, 0xc0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb0, 8) , (const, 0x2, 8) , (const, 0x1, 8)]
[(register, 0x88, 8) COPY (const, 0x2, 8)]
[ ---  BRANCH (ram, 0x128d80, 1)]
[(register, 0x10, 4) INT_OR (register, 0x10, 4) , (register, 0x8, 4), (register, 0x10, 4) INT_AND (register, 0x10, 4) , (const, 0x3f, 4), (register, 0x8, 4) INT_LEFT (register, 0x8, 4) , (const, 0x6, 4)]
[ ---  CBRANCH (ram, 0x128c71, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x88, 8) , (const, 0x3, 8)]
[(register, 0x8, 4) INT_ZEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb0, 8) , (const, 0x3, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x128fbe, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x98, 1) , (const, 0x80, 1), (register, 0x98, 1) INT_AND (unique, 0xbb00, 1) , (const, 0xc0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb0, 8) , (const, 0x3, 8) , (const, 0x1, 8)]
[(register, 0x88, 8) COPY (const, 0x3, 8)]
[ ---  BRANCH (ram, 0x128d80, 1)]
[(register, 0x10, 4) INT_OR (register, 0x10, 4) , (register, 0x8, 4), (register, 0x8, 4) INT_AND (register, 0x8, 4) , (const, 0x3f, 4), (register, 0x10, 4) INT_LEFT (register, 0x10, 4) , (const, 0x6, 4)]
[ ---  CBRANCH (ram, 0x128c71, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x88, 8) , (unique, 0x10000629, 8), (unique, 0x10000629, 8) PTRSUB (const, 0x0, 8) , (const, 0x4, 8)]
[(register, 0x8, 4) INT_ZEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb0, 8) , (const, 0x4, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x128fb3, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x98, 1) , (const, 0x80, 1), (register, 0x98, 1) INT_AND (unique, 0xbb00, 1) , (const, 0xc0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb0, 8) , (const, 0x4, 8) , (const, 0x1, 8)]
[(register, 0x88, 8) PTRSUB (const, 0x0, 8) , (const, 0x4, 8)]
[ ---  BRANCH (ram, 0x128d80, 1)]
[(register, 0x10, 4) INT_OR (register, 0x10, 4) , (register, 0x8, 4), (register, 0x8, 4) INT_AND (register, 0x8, 4) , (const, 0x3f, 4), (register, 0x10, 4) INT_LEFT (register, 0x10, 4) , (const, 0x6, 4)]
[ ---  CBRANCH (ram, 0x128dd0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x88, 8) , (unique, 0x10000661, 8), (unique, 0x10000661, 8) PTRSUB (const, 0x0, 8) , (const, 0x6, 8)]
[ ---  CBRANCH (ram, 0x128dc8, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (unique, 0x10000649, 8) , (register, 0x88, 8), (unique, 0x10000649, 8) PTRSUB (const, 0x0, 8) , (const, 0x5, 8)]
[(register, 0x88, 8) PTRSUB (const, 0x0, 8) , (const, 0x5, 8)]
[ ---  BRANCH (ram, 0x128c71, 1)]
[(register, 0x8, 4) INT_ZEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb0, 8) , (const, 0x5, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x128dc8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x98, 1) , (const, 0x80, 1), (register, 0x98, 1) INT_AND (unique, 0xbb00, 1) , (const, 0xc0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb0, 8) , (const, 0x5, 8) , (const, 0x1, 8)]
[(register, 0x88, 8) PTRSUB (const, 0x0, 8) , (const, 0x5, 8)]
[ ---  BRANCH (ram, 0x128d80, 1)]
[(register, 0x10, 4) INT_OR (register, 0x10, 4) , (register, 0x8, 4), (register, 0x8, 4) INT_AND (register, 0x8, 4) , (const, 0x3f, 4), (register, 0x10, 4) INT_LEFT (register, 0x10, 4) , (const, 0x6, 4)]
[(register, 0x88, 8) MULTIEQUAL (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8)]
[ ---  CBRANCH (ram, 0x128d80, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x59200, 4) , (const, 0x0, 4), (unique, 0x59200, 4) INT_RIGHT (register, 0x10, 4) , (register, 0x90, 1), (register, 0x10, 4) MULTIEQUAL (register, 0x10, 4) , (register, 0x10, 4) , (register, 0x10, 4) , (register, 0x10, 4)]
[ ---  CBRANCH (ram, 0x128cfc, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (register, 0x8, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb0, 8) , (const, 0x2, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x128b5d, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (unique, 0x3100, 8) , (register, 0x8, 8), (unique, 0x3100, 8) PTRADD (register, 0xb0, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x128ffa, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x10, 1) , (const, 0x80, 1), (register, 0x10, 1) INT_AND (unique, 0xbb00, 1) , (const, 0xc0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb0, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[(register, 0x10, 8) COPY (const, 0x1, 8)]
[(unique, 0x3100, 8) PTRADD (register, 0xb0, 8) , (const, 0x2, 8) , (const, 0x1, 8)]
[(register, 0x10, 8) COPY (const, 0x1, 8)]
[(register, 0x88, 8) PTRADD (register, 0x8, 8) , (unique, 0x10000359, 8) , (const, 0x1, 8), (unique, 0x10000359, 8) INT_2COMP (unique, 0x10000d77, 8), (unique, 0x10000d77, 8) CAST (register, 0xb0, 8)]
[ ---  BRANCH (ram, 0x128d3e, 1)]
[(register, 0x30, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0x30, 8)]
[(unique, 0x10000ad3, 8) COPY (register, 0x88, 8)]
[ ---  CBRANCH (ram, 0x128d2b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x10, 8) , (register, 0x88, 8), (register, 0x10, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x1, 8), (register, 0x10, 8) MULTIEQUAL (register, 0x10, 8) , (register, 0x10, 8)]
[(register, 0x30, 8) PTRADD (register, 0x30, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x128fff, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x8, 1) , (const, 0x80, 1), (register, 0x8, 1) INT_AND (unique, 0xbb00, 1) , (const, 0xc0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0x30, 8)]
[(unique, 0x10000acb, 8) COPY (register, 0x88, 8), (register, 0x88, 8) COPY (const, 0x1, 8)]
[(register, 0x88, 8) COPY (unique, 0x10000adb, 8), (unique, 0x10000adb, 8) MULTIEQUAL (unique, 0x10000acb, 8) , (unique, 0x10000ad3, 8)]
[ ---  CBRANCH (ram, 0x128d80, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x8, 8) , (register, 0x8, 8), (register, 0x8, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0x30, 8)]
[(register, 0x88, 4) INT_ZEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb0, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x128d7a, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x10, 1) , (const, 0x80, 1), (register, 0x10, 1) INT_AND (unique, 0xbb00, 1) , (const, 0xc0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb0, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[(register, 0x88, 8) COPY (const, 0x1, 8)]
[(register, 0x10, 4) INT_OR (register, 0x10, 4) , (register, 0x88, 4), (register, 0x10, 4) INT_LEFT (register, 0x10, 4) , (const, 0x6, 4), (register, 0x10, 4) INT_AND (register, 0x10, 4) , (const, 0x1f, 4), (register, 0x10, 4) INT_ZEXT (unique, 0xbb00, 1), (register, 0x88, 4) INT_AND (register, 0x88, 4) , (const, 0x3f, 4)]
[(register, 0x88, 8) COPY (const, 0x2, 8)]
[ ---  BRANCH (ram, 0x128c83, 1)]
[(register, 0x88, 8) MULTIEQUAL (register, 0x88, 8) , (register, 0x88, 8)]
[(register, 0x30, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0x30, 8)]
[ ---  CBRANCH (ram, 0x128d80, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (const, 0x7ff, 4) , (register, 0x8, 4), (register, 0x8, 4) INT_SUB (register, 0x10, 4) , (const, 0xd800, 4), (register, 0x10, 4) MULTIEQUAL (register, 0x10, 4) , (register, 0x10, 4)]
[(register, 0x88, 8) MULTIEQUAL (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x10, 8) , (register, 0x10, 8)]
[ ---  CBRANCH (ram, 0x128b6c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x128b6c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x10000615, 4) , (const, 0x0, 4)]
[(register, 0xb0, 8) PTRADD (register, 0xb0, 8) , (unique, 0x10000d7f, 8) , (const, 0x1, 8), (unique, 0x10000d7f, 8) CAST (register, 0x88, 8)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x5c5, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x5c5, 4)]
[(stack, 0xffffffffffffffba, 1) INDIRECT (stack, 0xffffffffffffffba, 1) , (const, 0x5c5, 4)]
[(stack, 0xffffffffffffffbf, 1) INDIRECT (stack, 0xffffffffffffffbf, 1) , (const, 0x5c5, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x5c5, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x0, 8) , (unique, 0xbe00, 8), (unique, 0xbe00, 8) INT_ADD (unique, 0xbe00, 8) , (const, 0x1, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (register, 0x0, 8)]
[ ---  BRANCH (ram, 0x128a09, 1)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x10, 8) , (register, 0xb0, 8)]
[(unique, 0x10000b4b, 8) COPY (register, 0x18, 8)]
[(register, 0xb0, 8) PTRADD (register, 0xb0, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[(register, 0xb0, 8) MULTIEQUAL (register, 0xb0, 8) , (register, 0x30, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x18, 8) , (register, 0x10, 4), (register, 0x10, 4) MULTIEQUAL (register, 0x10, 4) , (register, 0x10, 4)]
[(unique, 0x100009f3, 8) COPY (register, 0x80, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffbf, 1) MULTIEQUAL (stack, 0xffffffffffffffbf, 1) , (stack, 0xffffffffffffffbf, 1)]
[(stack, 0xffffffffffffffba, 1) MULTIEQUAL (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(register, 0x18, 8) MULTIEQUAL (unique, 0x100009f3, 8) , (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x128da9, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x8, 8) , (register, 0xb0, 8), (register, 0xb0, 8) MULTIEQUAL (register, 0xb0, 8) , (register, 0xb0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x10, 8) , (register, 0x8, 8)]
[(unique, 0x10000b43, 8) COPY (register, 0x18, 8)]
[(unique, 0x100009a7, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(unique, 0x100009af, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(unique, 0x100009b7, 1) MULTIEQUAL (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1)]
[(unique, 0x100009b8, 1) MULTIEQUAL (stack, 0xffffffffffffffbf, 1) , (stack, 0xffffffffffffffbf, 1) , (stack, 0xffffffffffffffbf, 1)]
[(unique, 0x100009b9, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CBRANCH (ram, 0x128b7c, 1) , (unique, 0x100009a6, 1), (unique, 0x100009a6, 1) INT_EQUAL (unique, 0x100009cb, 8) , (unique, 0x100009c1, 8), (unique, 0x100009c1, 8) MULTIEQUAL (unique, 0x10000b43, 8) , (unique, 0x10000b4b, 8) , (register, 0xb8, 8)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (unique, 0x100009a7, 8) , (const, 0x594, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (unique, 0x100009af, 8) , (const, 0x594, 4)]
[(stack, 0xffffffffffffffba, 1) INDIRECT (unique, 0x100009b7, 1) , (const, 0x594, 4)]
[(stack, 0xffffffffffffffbf, 1) INDIRECT (unique, 0x100009b8, 1) , (const, 0x594, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (unique, 0x100009b9, 8) , (const, 0x594, 4)]
[ ---  CALL (ram, 0x1303d0, 8) , (unique, 0x100006f1, 8) , (unique, 0x10000681, 8) , (const, 0x2d8, 4) , (unique, 0x10000719, 8), (unique, 0x10000719, 8) COPY (const, 0x2bbb00, 8), (unique, 0x100006f1, 8) COPY (const, 0x2b76a8, 8), (unique, 0x10000681, 8) COPY (const, 0x2b39e0, 8)]
[ ---  RETURN (const, 0x1, 4)]
[(unique, 0x100009fb, 8) COPY (register, 0x18, 8)]
[(unique, 0x10000aeb, 8) COPY (register, 0xb0, 8)]
[ ---  CBRANCH (ram, 0x128a92, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESSEQUAL (unique, 0x3100, 8) , (unique, 0x100009cb, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x1, 8) , (const, 0x4, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffbf, 1) MULTIEQUAL (stack, 0xffffffffffffffbf, 1) , (stack, 0xffffffffffffffbf, 1)]
[(stack, 0xffffffffffffffba, 1) MULTIEQUAL (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x10, 8) , (register, 0xb0, 8), (register, 0xb0, 8) MULTIEQUAL (register, 0xb0, 8) , (register, 0xb0, 8)]
[ ---  CBRANCH (ram, 0x128b7c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x18, 8) , (unique, 0x100009cb, 8), (register, 0x18, 8) MULTIEQUAL (unique, 0x100009fb, 8) , (unique, 0x10000a03, 8)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x57c, 4), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (unique, 0x100009a7, 8)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x57c, 4), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (unique, 0x100009af, 8)]
[(stack, 0xffffffffffffffba, 1) INDIRECT (stack, 0xffffffffffffffba, 1) , (const, 0x57c, 4), (stack, 0xffffffffffffffba, 1) MULTIEQUAL (stack, 0xffffffffffffffba, 1) , (unique, 0x100009b7, 1)]
[(stack, 0xffffffffffffffbf, 1) INDIRECT (stack, 0xffffffffffffffbf, 1) , (const, 0x57c, 4), (stack, 0xffffffffffffffbf, 1) MULTIEQUAL (stack, 0xffffffffffffffbf, 1) , (unique, 0x100009b8, 1)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x57c, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (unique, 0x100009b9, 8)]
[ ---  CALL (ram, 0x1303d0, 8) , (unique, 0x100006c9, 8) , (unique, 0x10000679, 8) , (const, 0x2d7, 4) , (unique, 0x10000711, 8), (unique, 0x10000711, 8) COPY (const, 0x2bbb00, 8), (unique, 0x100006c9, 8) COPY (const, 0x2b3a51, 8), (unique, 0x10000679, 8) COPY (const, 0x2b39e0, 8)]
[ ---  RETURN (const, 0x1, 4)]
[ ---  CBRANCH (ram, 0x128522, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x18, 8) , (register, 0xb8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3800, 8) , (unique, 0xbd00, 4), (unique, 0xbd00, 4) INT_ADD (unique, 0xbd00, 4) , (const, 0xffffffff, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) CAST (unique, 0x10000d8f, 8), (unique, 0x10000d8f, 8) INT_ADD (unique, 0x10000d87, 8) , (const, 0x14, 8), (unique, 0x10000d87, 8) CAST (register, 0x30, 8)]
[ ---  BRANCH (ram, 0x128522, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffbf, 1) MULTIEQUAL (stack, 0xffffffffffffffbf, 1) , (stack, 0xffffffffffffffbf, 1) , (stack, 0xffffffffffffffbf, 1)]
[(stack, 0xffffffffffffffba, 1) MULTIEQUAL (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(unique, 0x10000b3f, 4) COPY (register, 0x0, 4)]
[ ---  CBRANCH (ram, 0x129115, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffbf, 1) MULTIEQUAL (stack, 0xffffffffffffffbf, 1) , (stack, 0xffffffffffffffbf, 1) , (stack, 0xffffffffffffffbf, 1) , (stack, 0xffffffffffffffbf, 1)]
[(stack, 0xffffffffffffffba, 1) MULTIEQUAL (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb8, 4) MULTIEQUAL (unique, 0x10000b33, 4) , (unique, 0x10000b37, 4) , (unique, 0x10000b3b, 4) , (unique, 0x10000b3f, 4)]
[ ---  CBRANCH (ram, 0x128573, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0x10, 4) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x128573, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xb8, 4) , (const, 0x7, 4)]
[(register, 0x10, 4) INT_ZEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x10, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0xbd80, 8) , (register, 0x88, 4), (register, 0x88, 4) INT_SUB (unique, 0x10000150, 4) , (unique, 0x10000158, 4), (unique, 0x10000150, 4) SUBPIECE (register, 0x8, 8) , (const, 0x0, 4), (unique, 0x10000158, 4) SUBPIECE (unique, 0xbd80, 8) , (const, 0x0, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x10, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRADD (register, 0x30, 8) , (const, 0x4, 8) , (const, 0x8, 8)]
[(register, 0x10, 4) INT_ZEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x10, 8)]
[ ---  CBRANCH (ram, 0x12930f, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (register, 0x8, 4) , (const, 0x2, 4), (register, 0x8, 4) INT_SUB (unique, 0x10000160, 4) , (const, 0xc0, 4), (unique, 0x10000160, 4) INT_ZEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x10, 8)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x45c, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x45c, 4)]
[(stack, 0xffffffffffffffba, 1) INDIRECT (stack, 0xffffffffffffffba, 1) , (const, 0x45c, 4)]
[(stack, 0xffffffffffffffbf, 1) INDIRECT (stack, 0xffffffffffffffbf, 1) , (const, 0x45c, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x45c, 4)]
[ ---  CALL (ram, 0x1303d0, 8) , (unique, 0x100006d9, 8) , (unique, 0x10000699, 8) , (const, 0x305, 4) , (unique, 0x10000731, 8), (unique, 0x10000731, 8) COPY (const, 0x2bbb00, 8), (unique, 0x100006d9, 8) COPY (const, 0x2b3a62, 8), (unique, 0x10000699, 8) COPY (const, 0x2b39e0, 8)]
[ ---  RETURN (const, 0x1, 4)]
[ ---  CBRANCH (ram, 0x128f37, 1) , (unique, 0xc900, 1), (unique, 0xc900, 1) INT_LESS (register, 0x10, 4) , (const, 0x1e, 4), (register, 0x10, 4) INT_SUB (register, 0x10, 4) , (const, 0xc2, 4)]
[ ---  CBRANCH (ram, 0x12917c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x10, 1) , (const, 0xe0, 1), (register, 0x10, 1) INT_AND (unique, 0xbb00, 1) , (const, 0xf0, 1)]
[ ---  CBRANCH (ram, 0x129272, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x10, 1) , (const, 0xf0, 1), (register, 0x10, 1) INT_AND (unique, 0xbb00, 1) , (const, 0xf8, 1)]
[ ---  CBRANCH (ram, 0x1292d3, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x10, 1) , (const, 0xf8, 1), (register, 0x10, 1) INT_AND (unique, 0xbb00, 1) , (const, 0xfc, 1)]
[(register, 0x0, 4) INT_AND (register, 0x10, 4) , (const, 0x1, 4)]
[(register, 0x8, 1) COPY (const, 0x1e, 1)]
[(register, 0x90, 1) COPY (const, 0x5, 1)]
[(register, 0x38, 4) COPY (const, 0x600, 4)]
[ ---  BRANCH (ram, 0x12861a, 1)]
[(register, 0x0, 4) INT_AND (register, 0x10, 4) , (const, 0x3, 4)]
[(register, 0x8, 1) COPY (const, 0x18, 1)]
[(register, 0x90, 1) COPY (const, 0x4, 1)]
[(register, 0x38, 4) COPY (const, 0x500, 4)]
[ ---  BRANCH (ram, 0x12861a, 1)]
[(register, 0x0, 4) INT_AND (register, 0x10, 4) , (const, 0x7, 4)]
[(register, 0x8, 1) COPY (const, 0x12, 1)]
[(register, 0x90, 1) COPY (const, 0x3, 1)]
[(register, 0x38, 4) COPY (const, 0x400, 4)]
[ ---  BRANCH (ram, 0x12861a, 1)]
[(register, 0x0, 4) INT_AND (register, 0x10, 4) , (const, 0xf, 4)]
[(register, 0x8, 1) COPY (const, 0xc, 1)]
[(register, 0x90, 1) COPY (const, 0x2, 1)]
[(register, 0x38, 4) COPY (const, 0x300, 4)]
[ ---  BRANCH (ram, 0x12861a, 1)]
[(register, 0x0, 4) INT_AND (register, 0x10, 4) , (const, 0x1f, 4)]
[(register, 0x8, 1) COPY (const, 0x6, 1)]
[(register, 0x90, 1) COPY (const, 0x1, 1)]
[(register, 0x38, 4) COPY (const, 0x200, 4)]
[(register, 0x90, 1) MULTIEQUAL (register, 0x90, 1) , (register, 0x90, 1) , (register, 0x90, 1) , (register, 0x90, 1) , (register, 0x90, 1)]
[(register, 0x8, 1) MULTIEQUAL (register, 0x8, 1) , (register, 0x8, 1) , (register, 0x8, 1) , (register, 0x8, 1) , (register, 0x8, 1)]
[(register, 0x38, 4) MULTIEQUAL (register, 0x38, 4) , (register, 0x38, 4) , (register, 0x38, 4) , (register, 0x38, 4) , (register, 0x38, 4)]
[(register, 0x0, 4) MULTIEQUAL (register, 0x0, 4) , (register, 0x0, 4) , (register, 0x0, 4) , (register, 0x0, 4) , (register, 0x0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x10, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x12864e, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (unique, 0x3100, 8) , (register, 0x8, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x10, 8) , (register, 0x10, 8), (register, 0x10, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x1, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0x10, 8)]
[(register, 0x0, 4) INT_OR (register, 0x0, 4) , (register, 0x8, 4), (register, 0x8, 4) INT_AND (register, 0x8, 4) , (const, 0x3f, 4), (register, 0x8, 4) INT_ZEXT (unique, 0xbb00, 1), (register, 0x0, 4) INT_LEFT (register, 0x0, 4) , (const, 0x6, 4), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0x10, 8), (register, 0x0, 4) MULTIEQUAL (register, 0x0, 4) , (register, 0x0, 4), (register, 0x10, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0x10, 8)]
[ ---  CBRANCH (ram, 0x12862a, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x10, 8) , (register, 0x8, 8), (register, 0x10, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x1, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0x10, 8)]
[(unique, 0x10000531, 1) INT_MULT (unique, 0x100005eb, 1) , (const, 0x6, 1), (unique, 0x100005eb, 1) INT_ADD (unique, 0x100005ed, 1) , (register, 0x90, 1), (unique, 0x100005ed, 1) INT_ADD (unique, 0x100005ef, 1) , (const, 0x1, 1), (unique, 0x100005ef, 1) INT_SUB (unique, 0x100005f1, 1) , (unique, 0x100005f3, 1), (unique, 0x100005f1, 1) SUBPIECE (unique, 0xbd80, 8) , (const, 0x0, 4), (unique, 0x100005f3, 1) SUBPIECE (register, 0x10, 8) , (const, 0x0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (register, 0x0, 4), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x1, 8) , (const, 0x4, 8), (register, 0x0, 4) INT_LEFT (register, 0x0, 4) , (unique, 0x53100, 1), (unique, 0x53100, 1) INT_AND (register, 0x8, 1) , (const, 0x1f, 1), (register, 0x0, 4) MULTIEQUAL (register, 0x0, 4) , (register, 0x0, 4), (register, 0x8, 1) MULTIEQUAL (register, 0x8, 1) , (unique, 0x10000531, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0xbd80, 8) , (register, 0x10, 4), (register, 0x10, 4) INT_OR (register, 0x38, 4) , (register, 0x88, 4)]
[ ---  BRANCH (ram, 0x128573, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffbf, 1) MULTIEQUAL (stack, 0xffffffffffffffbf, 1) , (stack, 0xffffffffffffffbf, 1)]
[(stack, 0xffffffffffffffba, 1) MULTIEQUAL (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000d97, 8), (unique, 0x10000d97, 8) CAST (unique, 0x3800, 8), (unique, 0x3800, 8) PTRADD (register, 0x30, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[(unique, 0x10000b1b, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x30, 8)]
[ ---  CBRANCH (ram, 0x1283e0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x8, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x10, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffbf, 1) MULTIEQUAL (stack, 0xffffffffffffffbf, 1) , (stack, 0xffffffffffffffbf, 1)]
[(stack, 0xffffffffffffffba, 1) MULTIEQUAL (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb0, 8) MULTIEQUAL (register, 0xb0, 8) , (unique, 0xbd80, 8)]
[(register, 0x90, 4) COPY (const, 0x4, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x10, 8) , (register, 0x8, 8)]
[(unique, 0x10000b2b, 8) COPY (register, 0xb8, 8), (register, 0xb8, 8) MULTIEQUAL (unique, 0x10000b13, 8) , (unique, 0x10000b1b, 8)]
[ ---  CBRANCH (ram, 0x1284a6, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x80, 8) , (const, 0x0, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffbf, 1) MULTIEQUAL (stack, 0xffffffffffffffbf, 1) , (stack, 0xffffffffffffffbf, 1)]
[(stack, 0xffffffffffffffba, 1) MULTIEQUAL (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x90, 4) MULTIEQUAL (register, 0x90, 4) , (register, 0x90, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x80, 8) , (register, 0x18, 8), (register, 0x18, 8) MULTIEQUAL (register, 0x18, 8) , (register, 0xb8, 8)]
[(stack, 0xffffffffffffffbf, 1) MULTIEQUAL (stack, 0xffffffffffffffbf, 1) , (stack, 0xffffffffffffffbf, 1) , (stack, 0xffffffffffffffbf, 1) , (stack, 0xffffffffffffffbf, 1) , (stack, 0xffffffffffffffbf, 1) , (stack, 0xffffffffffffffbf, 1) , (stack, 0xffffffffffffffbf, 1) , (stack, 0xffffffffffffffbf, 1) , (stack, 0xffffffffffffffbf, 1)]
[(stack, 0xffffffffffffffba, 1) MULTIEQUAL (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(register, 0x0, 4) COPY (register, 0xb8, 4), (register, 0xb8, 4) MULTIEQUAL (register, 0x90, 4) , (register, 0xb8, 4) , (register, 0xb8, 4) , (register, 0xb8, 4) , (register, 0xb8, 4) , (register, 0xb8, 4) , (register, 0xb8, 4) , (register, 0xb8, 4) , (register, 0x0, 4)]
[ ---  CBRANCH (ram, 0x129110, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffffc0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10000d9f, 8), (unique, 0x10000d9f, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x2ba, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x2ba, 4)]
[(stack, 0xffffffffffffffba, 1) INDIRECT (stack, 0xffffffffffffffba, 1) , (const, 0x2ba, 4)]
[(stack, 0xffffffffffffffbf, 1) INDIRECT (stack, 0xffffffffffffffbf, 1) , (const, 0x2ba, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2ba, 4)]
[ ---  CALL (ram, 0x234c80, 8)]
[ ---  RETURN (const, 0x1, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 4)]
