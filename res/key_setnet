[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10000121, 8), (unique, 0x10000121, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8)]
[ ---  CBRANCH (ram, 0x258672, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4f08f8, 4) , (const, 0x0, 4)]
[ ---  CBRANCH (const, 0x4, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4f00f0, 4) , (const, 0x0, 4)]
[(ram, 0x4f00f0, 4) COPY (const, 0x1, 4)]
[ ---  CALLOTHER (const, 0x11, 4)]
[ ---  CBRANCH (const, 0x4, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4f00f0, 4) , (const, 0x0, 4)]
[(ram, 0x4f00f0, 4) COPY (const, 0x1, 4)]
[ ---  BRANCH (ram, 0x258695, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x105, 4)]
[(ram, 0x4f00f0, 4) INDIRECT (ram, 0x4f00f0, 4) , (const, 0x105, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x105, 4)]
[(stack, 0xffffffffffffffec, 4) INDIRECT (stack, 0xffffffffffffffec, 4) , (const, 0x105, 4)]
[(stack, 0xfffffffffffffff0, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x105, 4)]
[ ---  CALL (ram, 0x230690, 8) , (unique, 0x100000f2, 8), (unique, 0x100000f2, 8) PTRSUB (const, 0x0, 8) , (const, 0x4f00f0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x3e, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4f00f0, 4) INDIRECT (ram, 0x4f00f0, 4) , (const, 0x3e, 4), (ram, 0x4f00f0, 4) MULTIEQUAL (ram, 0x4f00f0, 4) , (ram, 0x4f00f0, 4) , (ram, 0x4f00f0, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x3e, 4), (ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(stack, 0xffffffffffffffec, 4) INDIRECT (stack, 0xffffffffffffffec, 4) , (const, 0x3e, 4), (stack, 0xffffffffffffffec, 4) MULTIEQUAL (stack, 0xffffffffffffffec, 4) , (stack, 0xffffffffffffffec, 4) , (stack, 0xffffffffffffffec, 4)]
[(stack, 0xfffffffffffffff0, 8) INDIRECT (stack, 0xfffffffffffffff0, 8) , (const, 0x3e, 4), (stack, 0xfffffffffffffff0, 8) MULTIEQUAL (unique, 0xbd80, 8) , (stack, 0xfffffffffffffff0, 8) , (unique, 0xbd80, 8)]
[ ---  CBRANCH (ram, 0x258740, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x257b80, 8) , (const, 0x2, 8)]
[(register, 0x10, 8) COPY (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x2586da, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x5c, 4)]
[(ram, 0x4f00f0, 4) INDIRECT (ram, 0x4f00f0, 4) , (const, 0x5c, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x5c, 4)]
[(stack, 0xffffffffffffffec, 4) INDIRECT (stack, 0xffffffffffffffec, 4) , (const, 0x5c, 4)]
[(stack, 0xfffffffffffffff0, 8) INDIRECT (stack, 0xfffffffffffffff0, 8) , (const, 0x5c, 4)]
[(unique, 0x10000091, 8) INT_ZEXT (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALLIND (unique, 0xbd80, 8) , (register, 0x0, 8) , (const, 0x8, 8) , (unique, 0x100000e2, 8) , (register, 0x38, 8) , (unique, 0x100000da, 8) , (unique, 0x3800, 8) , (const, 0x1e, 8) , (const, 0x0, 8), (unique, 0x100000e2, 8) PTRSUB (const, 0x0, 8) , (const, 0x250ea0, 8), (unique, 0x100000da, 8) PTRSUB (const, 0x0, 8) , (const, 0x250c50, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0xbd80, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffec, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000129, 8), (unique, 0x10000129, 8) INT_ADD (register, 0x0, 8) , (const, 0x8, 8)]
[(stack, 0xfffffffffffffff0, 8) MULTIEQUAL (stack, 0xfffffffffffffff0, 8) , (stack, 0xfffffffffffffff0, 8)]
[(stack, 0xffffffffffffffec, 4) MULTIEQUAL (stack, 0xffffffffffffffec, 4) , (stack, 0xffffffffffffffec, 4)]
[(ram, 0x4f00f0, 4) MULTIEQUAL (ram, 0x4f00f0, 4) , (ram, 0x4f00f0, 4)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x10, 8) MULTIEQUAL (unique, 0x10000091, 8) , (register, 0x10, 8)]
[ ---  CBRANCH (ram, 0x2586ee, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4f08f8, 4) , (const, 0x0, 4), (ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[ ---  CALLOTHER (const, 0x11, 4)]
[(unique, 0x10000119, 4) COPY (unique, 0x10000102, 4), (unique, 0x10000102, 4) INT_ADD (ram, 0x4f00f0, 4) , (const, 0xffffffff, 4)]
[ ---  CBRANCH (ram, 0x258710, 1) , (unique, 0x10000106, 1), (unique, 0x10000106, 1) INT_NOTEQUAL (unique, 0x10000102, 4) , (const, 0x0, 4), (unique, 0x10000102, 4) INT_ADD (ram, 0x4f00f0, 4) , (const, 0xffffffff, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xdb, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0xdb, 4)]
[(stack, 0xffffffffffffffec, 4) INDIRECT (stack, 0xffffffffffffffec, 4) , (const, 0xdb, 4)]
[(stack, 0xfffffffffffffff0, 8) INDIRECT (stack, 0xfffffffffffffff0, 8) , (const, 0xdb, 4)]
[ ---  CALL (ram, 0x2306c0, 8) , (unique, 0x100000ea, 8), (unique, 0x100000ea, 8) PTRSUB (const, 0x0, 8) , (const, 0x4f00f0, 8)]
[(unique, 0x1000010d, 8) COPY (register, 0x10, 8), (register, 0x10, 8) INDIRECT (const, 0x0, 8) , (const, 0xdb, 4)]
[(unique, 0x10000115, 4) COPY (ram, 0x4f00f0, 4), (ram, 0x4f00f0, 4) INDIRECT (ram, 0x4f00f0, 4) , (const, 0xdb, 4), (ram, 0x4f00f0, 4) INT_ADD (ram, 0x4f00f0, 4) , (const, 0xffffffff, 4)]
[(stack, 0xfffffffffffffff0, 8) MULTIEQUAL (stack, 0xfffffffffffffff0, 8) , (stack, 0xfffffffffffffff0, 8)]
[(stack, 0xffffffffffffffec, 4) MULTIEQUAL (stack, 0xffffffffffffffec, 4) , (stack, 0xffffffffffffffec, 4)]
[(ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4f00f0, 4) COPY (unique, 0x1000011d, 4), (unique, 0x1000011d, 4) MULTIEQUAL (unique, 0x10000115, 4) , (unique, 0x10000119, 4)]
[ ---  CBRANCH (ram, 0x258748, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x10, 4) , (const, 0x0, 4), (register, 0x10, 4) SUBPIECE (register, 0x10, 8) , (const, 0x0, 4), (register, 0x10, 8) MULTIEQUAL (unique, 0x1000010d, 8) , (register, 0x10, 8)]
[(register, 0x10, 8) COPY (const, 0xffffffff, 8)]
[ ---  BRANCH (ram, 0x258722, 1)]
[(register, 0x10, 8) INT_AND (register, 0x10, 8) , (const, 0xffffffff, 8)]
[ ---  CBRANCH (ram, 0x258722, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffffec, 4) , (const, 0x0, 4)]
[(register, 0x10, 8) COPY (const, 0xffffffff, 8)]
[(register, 0x0, 8) COPY (register, 0x10, 8), (register, 0x10, 8) MULTIEQUAL (register, 0x10, 8) , (register, 0x10, 8) , (register, 0x10, 8)]
[ ---  CBRANCH (ram, 0x25874f, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xfffffffffffffff0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10000131, 8), (unique, 0x10000131, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8)]
[(stack, 0xfffffffffffffff0, 8) INDIRECT (stack, 0xfffffffffffffff0, 8) , (const, 0xca, 4)]
[ ---  CALL (ram, 0x234c80, 8)]
[(ram, 0x4f00f0, 4) COPY (ram, 0x4f00f0, 4), (ram, 0x4f00f0, 4) INDIRECT (ram, 0x4f00f0, 4) , (const, 0xca, 4)]
[(ram, 0x4f08f8, 4) COPY (ram, 0x4f08f8, 4), (ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0xca, 4)]
[ ---  RETURN (const, 0x1, 4)]
[(ram, 0x4f00f0, 4) COPY (ram, 0x4f00f0, 4)]
[(ram, 0x4f08f8, 4) COPY (ram, 0x4f08f8, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8)]
