[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x1000030a, 8), (unique, 0x1000030a, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8)]
[ ---  CBRANCH (ram, 0x123c80, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4f08e8, 4) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x123a9f, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4eca08, 4) , (const, 0x0, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x2d7, 4)]
[(ram, 0x4f04e0, 4) INDIRECT (ram, 0x4f04e0, 4) , (const, 0x2d7, 4)]
[(ram, 0x4f04e8, 8) INDIRECT (ram, 0x4f04e8, 8) , (const, 0x2d7, 4)]
[(ram, 0x4f0870, 8) INDIRECT (ram, 0x4f0870, 8) , (const, 0x2d7, 4)]
[(ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x2d7, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x2d7, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x2d7, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x2d7, 4)]
[ ---  CALL (ram, 0x1246f0, 8)]
[(ram, 0x4eca08, 4) INT_OR (ram, 0x4eca08, 4) , (const, 0x2, 4), (ram, 0x4eca08, 4) INDIRECT (ram, 0x4eca08, 4) , (const, 0x2d7, 4)]
[ ---  BRANCH (ram, 0x123a9f, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x61, 4)]
[(ram, 0x4eca08, 4) INDIRECT (ram, 0x4eca08, 4) , (const, 0x61, 4)]
[(ram, 0x4f04e0, 4) INDIRECT (ram, 0x4f04e0, 4) , (const, 0x61, 4)]
[(ram, 0x4f04e8, 8) INDIRECT (ram, 0x4f04e8, 8) , (const, 0x61, 4)]
[(ram, 0x4f0870, 8) INDIRECT (ram, 0x4f0870, 8) , (const, 0x61, 4)]
[(ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x61, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x61, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x61, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x61, 4)]
[ ---  CALLIND (register, 0x0, 8) , (unique, 0x1000023d, 8) , (unique, 0x10000235, 8), (unique, 0x1000023d, 8) PTRSUB (const, 0x0, 8) , (const, 0x4eca08, 8), (unique, 0x10000235, 8) PTRSUB (const, 0x0, 8) , (const, 0x1246f0, 8), (register, 0x0, 8) CAST (unique, 0x1000031a, 8), (unique, 0x1000031a, 8) INT_XOR (register, 0x0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10000312, 8), (unique, 0x10000312, 8) INT_ADD (register, 0x110, 8) , (const, 0x30, 8), (register, 0x0, 8) INT_OR (unique, 0x4ff00, 8) , (unique, 0x50000, 8), (unique, 0x50000, 8) INT_LEFT (ram, 0x4f0870, 8) , (const, 0x2f, 4), (unique, 0x4ff00, 8) INT_RIGHT (ram, 0x4f0870, 8) , (const, 0x11, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (unique, 0xbd80, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(ram, 0x4f08e8, 4) MULTIEQUAL (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4)]
[(ram, 0x4f0870, 8) MULTIEQUAL (ram, 0x4f0870, 8) , (ram, 0x4f0870, 8) , (ram, 0x4f0870, 8)]
[(ram, 0x4f04e8, 8) MULTIEQUAL (ram, 0x4f04e8, 8) , (ram, 0x4f04e8, 8) , (ram, 0x4f04e8, 8)]
[(ram, 0x4f04e0, 4) MULTIEQUAL (ram, 0x4f04e0, 4) , (ram, 0x4f04e0, 4) , (ram, 0x4f04e0, 4)]
[(ram, 0x4eca08, 4) MULTIEQUAL (ram, 0x4eca08, 4) , (ram, 0x4eca08, 4) , (ram, 0x4eca08, 4)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x123abb, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4f08f8, 4) , (const, 0x0, 4), (ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[ ---  CBRANCH (const, 0x4, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4f04e0, 4) , (const, 0x0, 4)]
[(ram, 0x4f04e0, 4) COPY (const, 0x1, 4)]
[ ---  CALLOTHER (const, 0x11, 4)]
[ ---  CBRANCH (const, 0x4, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4f04e0, 4) , (const, 0x0, 4)]
[(ram, 0x4f04e0, 4) COPY (const, 0x1, 4)]
[ ---  BRANCH (ram, 0x123ade, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x2ae, 4)]
[(ram, 0x4eca08, 4) INDIRECT (ram, 0x4eca08, 4) , (const, 0x2ae, 4)]
[(ram, 0x4f04e0, 4) INDIRECT (ram, 0x4f04e0, 4) , (const, 0x2ae, 4)]
[(ram, 0x4f04e8, 8) INDIRECT (ram, 0x4f04e8, 8) , (const, 0x2ae, 4)]
[(ram, 0x4f0870, 8) INDIRECT (ram, 0x4f0870, 8) , (const, 0x2ae, 4)]
[(ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x2ae, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x2ae, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x2ae, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2ae, 4)]
[ ---  CALL (ram, 0x230690, 8) , (unique, 0x1000025d, 8), (unique, 0x1000025d, 8) PTRSUB (const, 0x0, 8) , (const, 0x4f04e0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x92, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eca08, 4) INDIRECT (ram, 0x4eca08, 4) , (const, 0x92, 4), (ram, 0x4eca08, 4) MULTIEQUAL (ram, 0x4eca08, 4) , (ram, 0x4eca08, 4) , (ram, 0x4eca08, 4)]
[(ram, 0x4f04e0, 4) INDIRECT (ram, 0x4f04e0, 4) , (const, 0x92, 4), (ram, 0x4f04e0, 4) MULTIEQUAL (ram, 0x4f04e0, 4) , (ram, 0x4f04e0, 4) , (ram, 0x4f04e0, 4)]
[(ram, 0x4f04e8, 8) INDIRECT (ram, 0x4f04e8, 8) , (const, 0x92, 4), (ram, 0x4f04e8, 8) MULTIEQUAL (ram, 0x4f04e8, 8) , (ram, 0x4f04e8, 8) , (ram, 0x4f04e8, 8)]
[(ram, 0x4f0870, 8) INDIRECT (ram, 0x4f0870, 8) , (const, 0x92, 4), (ram, 0x4f0870, 8) MULTIEQUAL (ram, 0x4f0870, 8) , (ram, 0x4f0870, 8) , (ram, 0x4f0870, 8)]
[(ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x92, 4), (ram, 0x4f08e8, 4) MULTIEQUAL (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x92, 4), (ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x92, 4), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x92, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(register, 0x10, 8) INT_ZEXT (register, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x12c190, 8) , (register, 0x38, 8) , (register, 0x30, 8) , (register, 0x10, 8) , (register, 0x8, 8) , (register, 0x80, 4)]
[ ---  CBRANCH (ram, 0x123b58, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x2, 4), (register, 0x0, 4) CALL (ram, 0x12c190, 8) , (register, 0x38, 8) , (register, 0x30, 8) , (register, 0x10, 8) , (register, 0x8, 8) , (register, 0x80, 4)]
[ ---  CBRANCH (ram, 0x123b0d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4f08f8, 4) , (const, 0x0, 4)]
[ ---  CALLOTHER (const, 0x11, 4)]
[(unique, 0x100002ca, 4) COPY (unique, 0x10000285, 4), (unique, 0x10000285, 4) INT_ADD (ram, 0x4f04e0, 4) , (const, 0xffffffff, 4)]
[ ---  CBRANCH (ram, 0x123b2f, 1) , (unique, 0x10000289, 1), (unique, 0x10000289, 1) INT_NOTEQUAL (unique, 0x10000285, 4) , (const, 0x0, 4), (unique, 0x10000285, 4) INT_ADD (ram, 0x4f04e0, 4) , (const, 0xffffffff, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xf0, 4)]
[(ram, 0x4eca08, 4) INDIRECT (ram, 0x4eca08, 4) , (const, 0xf0, 4)]
[(ram, 0x4f04e8, 8) INDIRECT (ram, 0x4f04e8, 8) , (const, 0xf0, 4)]
[(ram, 0x4f0870, 8) INDIRECT (ram, 0x4f0870, 8) , (const, 0xf0, 4)]
[(ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0xf0, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0xf0, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0xf0, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xf0, 4)]
[ ---  CALL (ram, 0x2306c0, 8) , (unique, 0x10000265, 8), (unique, 0x10000265, 8) PTRSUB (const, 0x0, 8) , (const, 0x4f04e0, 8)]
[(unique, 0x100002aa, 8) COPY (register, 0x10, 8), (register, 0x10, 8) INDIRECT (const, 0x0, 8) , (const, 0xf0, 4)]
[(unique, 0x100002c6, 4) COPY (ram, 0x4f04e0, 4), (ram, 0x4f04e0, 4) INDIRECT (ram, 0x4f04e0, 4) , (const, 0xf0, 4), (ram, 0x4f04e0, 4) INT_ADD (ram, 0x4f04e0, 4) , (const, 0xffffffff, 4)]
[ ---  CBRANCH (ram, 0x123c38, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4f04e8, 8) , (const, 0x0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x117, 4)]
[(ram, 0x4eca08, 4) INDIRECT (ram, 0x4eca08, 4) , (const, 0x117, 4)]
[(ram, 0x4f04e0, 4) INDIRECT (ram, 0x4f04e0, 4) , (const, 0x117, 4)]
[(ram, 0x4f04e8, 8) INDIRECT (ram, 0x4f04e8, 8) , (const, 0x117, 4)]
[(ram, 0x4f0870, 8) INDIRECT (ram, 0x4f0870, 8) , (const, 0x117, 4)]
[(ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x117, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x117, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (unique, 0x100002fa, 8) , (const, 0x117, 4), (unique, 0x100002fa, 8) COPY (register, 0x30, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x117, 4)]
[(register, 0x8, 8) COPY (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x123b94, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x1000032a, 8), (unique, 0x1000032a, 8) CALL (ram, 0x21d6c0, 8) , (unique, 0x3800, 8) , (unique, 0x10000322, 8) , (unique, 0x10000225, 8), (unique, 0x10000322, 8) CAST (unique, 0x10000245, 8), (unique, 0x10000245, 8) PTRSUB (const, 0x0, 8) , (const, 0x4f04d8, 8), (unique, 0x10000225, 8) PTRSUB (const, 0x0, 8) , (const, 0x122d00, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffa8, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000332, 8), (unique, 0x10000332, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x8, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x0, 8)]
[(register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (unique, 0xbd80, 8)]
[(register, 0xb8, 8) COPY (const, 0x0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x146, 4)]
[(ram, 0x4eca08, 4) INDIRECT (ram, 0x4eca08, 4) , (const, 0x146, 4)]
[(ram, 0x4f04e0, 4) INDIRECT (ram, 0x4f04e0, 4) , (const, 0x146, 4)]
[(ram, 0x4f04e8, 8) INDIRECT (ram, 0x4f04e8, 8) , (const, 0x146, 4)]
[(ram, 0x4f0870, 8) INDIRECT (ram, 0x4f0870, 8) , (const, 0x146, 4)]
[(ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x146, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x146, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (unique, 0x10000302, 8) , (const, 0x146, 4), (unique, 0x10000302, 8) COPY (register, 0x38, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x146, 4)]
[ ---  CBRANCH (ram, 0x123bc8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10000342, 8), (unique, 0x10000342, 8) CALL (ram, 0x21d6c0, 8) , (unique, 0x3800, 8) , (unique, 0x1000033a, 8) , (unique, 0x1000022d, 8), (unique, 0x1000033a, 8) CAST (unique, 0x1000024d, 8), (unique, 0x1000024d, 8) PTRSUB (const, 0x0, 8) , (const, 0x4f04d8, 8), (unique, 0x1000022d, 8) PTRSUB (const, 0x0, 8) , (const, 0x122d00, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000034a, 8), (unique, 0x1000034a, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x8, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x0, 8)]
[(register, 0xb8, 8) MULTIEQUAL (register, 0xb8, 8) , (unique, 0xbd80, 8)]
[ ---  CBRANCH (ram, 0x123ca0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x10000204, 4) , (const, 0x0, 4), (unique, 0x10000204, 4) INT_AND (register, 0x80, 4) , (const, 0x1, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1ce, 4)]
[(ram, 0x4eca08, 4) INDIRECT (ram, 0x4eca08, 4) , (const, 0x1ce, 4)]
[(ram, 0x4f04e0, 4) INDIRECT (ram, 0x4f04e0, 4) , (const, 0x1ce, 4)]
[(ram, 0x4f04e8, 8) INDIRECT (ram, 0x4f04e8, 8) , (const, 0x1ce, 4)]
[(ram, 0x4f0870, 8) INDIRECT (ram, 0x4f0870, 8) , (const, 0x1ce, 4)]
[(ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x1ce, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x1ce, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x1ce, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1ce, 4)]
[ ---  CBRANCH (ram, 0x123d15, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x121200, 8) , (register, 0x38, 8) , (register, 0x30, 8)]
[ ---  CBRANCH (ram, 0x123cd2, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xb8, 8) , (const, 0x0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1ea, 4)]
[(ram, 0x4eca08, 4) INDIRECT (ram, 0x4eca08, 4) , (const, 0x1ea, 4)]
[(ram, 0x4f04e0, 4) INDIRECT (ram, 0x4f04e0, 4) , (const, 0x1ea, 4)]
[(ram, 0x4f04e8, 8) INDIRECT (ram, 0x4f04e8, 8) , (const, 0x1ea, 4)]
[(ram, 0x4f0870, 8) INDIRECT (ram, 0x4f0870, 8) , (const, 0x1ea, 4)]
[(ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x1ea, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x1ea, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x1ea, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1ea, 4)]
[ ---  CBRANCH (ram, 0x123d15, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x121200, 8) , (register, 0xb8, 8) , (register, 0x30, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(ram, 0x4f08e8, 4) MULTIEQUAL (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4)]
[(ram, 0x4f0870, 8) MULTIEQUAL (ram, 0x4f0870, 8) , (ram, 0x4f0870, 8)]
[(ram, 0x4f04e8, 8) MULTIEQUAL (ram, 0x4f04e8, 8) , (ram, 0x4f04e8, 8)]
[(ram, 0x4f04e0, 4) MULTIEQUAL (ram, 0x4f04e0, 4) , (ram, 0x4f04e0, 4)]
[(ram, 0x4eca08, 4) MULTIEQUAL (ram, 0x4eca08, 4) , (ram, 0x4eca08, 4)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x123bd2, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x8, 8) , (const, 0x0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x209, 4)]
[(ram, 0x4eca08, 4) INDIRECT (ram, 0x4eca08, 4) , (const, 0x209, 4)]
[(ram, 0x4f04e0, 4) INDIRECT (ram, 0x4f04e0, 4) , (const, 0x209, 4)]
[(ram, 0x4f04e8, 8) INDIRECT (ram, 0x4f04e8, 8) , (const, 0x209, 4)]
[(ram, 0x4f0870, 8) INDIRECT (ram, 0x4f0870, 8) , (const, 0x209, 4)]
[(ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x209, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x209, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x209, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x209, 4)]
[ ---  CBRANCH (ram, 0x123d15, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x121200, 8) , (register, 0x38, 8) , (register, 0x8, 8)]
[ ---  CBRANCH (ram, 0x123bd2, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xb8, 8) , (const, 0x0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x225, 4)]
[(ram, 0x4eca08, 4) INDIRECT (ram, 0x4eca08, 4) , (const, 0x225, 4)]
[(ram, 0x4f04e0, 4) INDIRECT (ram, 0x4f04e0, 4) , (const, 0x225, 4)]
[(ram, 0x4f04e8, 8) INDIRECT (ram, 0x4f04e8, 8) , (const, 0x225, 4)]
[(ram, 0x4f0870, 8) INDIRECT (ram, 0x4f0870, 8) , (const, 0x225, 4)]
[(ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x225, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x225, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x225, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x225, 4)]
[ ---  CBRANCH (ram, 0x123bd2, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x121200, 8) , (register, 0xb8, 8) , (register, 0x8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x16c, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eca08, 4) INDIRECT (ram, 0x4eca08, 4) , (const, 0x16c, 4), (ram, 0x4eca08, 4) MULTIEQUAL (ram, 0x4eca08, 4) , (ram, 0x4eca08, 4) , (ram, 0x4eca08, 4) , (ram, 0x4eca08, 4)]
[(ram, 0x4f04e0, 4) INDIRECT (ram, 0x4f04e0, 4) , (const, 0x16c, 4), (ram, 0x4f04e0, 4) MULTIEQUAL (ram, 0x4f04e0, 4) , (ram, 0x4f04e0, 4) , (ram, 0x4f04e0, 4) , (ram, 0x4f04e0, 4)]
[(ram, 0x4f04e8, 8) INDIRECT (ram, 0x4f04e8, 8) , (const, 0x16c, 4), (ram, 0x4f04e8, 8) MULTIEQUAL (ram, 0x4f04e8, 8) , (ram, 0x4f04e8, 8) , (ram, 0x4f04e8, 8) , (ram, 0x4f04e8, 8)]
[(ram, 0x4f0870, 8) INDIRECT (ram, 0x4f0870, 8) , (const, 0x16c, 4), (ram, 0x4f0870, 8) MULTIEQUAL (ram, 0x4f0870, 8) , (ram, 0x4f0870, 8) , (ram, 0x4f0870, 8) , (ram, 0x4f0870, 8)]
[(ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x16c, 4), (ram, 0x4f08e8, 4) MULTIEQUAL (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x16c, 4), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x16c, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(register, 0x10, 8) INT_ZEXT (register, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x122d50, 8) , (register, 0x38, 8) , (register, 0xb8, 8) , (register, 0x30, 8) , (register, 0x8, 8) , (register, 0x10, 8) , (register, 0x8, 8)]
[ ---  CBRANCH (ram, 0x123bfc, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4f08f8, 4) , (const, 0x0, 4), (ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x16c, 4), (ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[ ---  CALLOTHER (const, 0x11, 4)]
[(unique, 0x100002e6, 4) COPY (unique, 0x1000028f, 4), (unique, 0x1000028f, 4) INT_ADD (ram, 0x4f04e0, 4) , (const, 0xffffffff, 4)]
[ ---  CBRANCH (ram, 0x123c1e, 1) , (unique, 0x10000293, 1), (unique, 0x10000293, 1) INT_NOTEQUAL (unique, 0x1000028f, 4) , (const, 0x0, 4), (unique, 0x1000028f, 4) INT_ADD (ram, 0x4f04e0, 4) , (const, 0xffffffff, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1b4, 4)]
[(ram, 0x4eca08, 4) INDIRECT (ram, 0x4eca08, 4) , (const, 0x1b4, 4)]
[(ram, 0x4f04e8, 8) INDIRECT (ram, 0x4f04e8, 8) , (const, 0x1b4, 4)]
[(ram, 0x4f0870, 8) INDIRECT (ram, 0x4f0870, 8) , (const, 0x1b4, 4)]
[(ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x1b4, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x1b4, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x1b4, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1b4, 4)]
[ ---  CALL (ram, 0x2306c0, 8) , (unique, 0x1000026d, 8), (unique, 0x1000026d, 8) PTRSUB (const, 0x0, 8) , (const, 0x4f04e0, 8)]
[(unique, 0x100002b2, 8) COPY (register, 0x10, 8), (register, 0x10, 8) INDIRECT (const, 0x0, 8) , (const, 0x1b4, 4)]
[(unique, 0x100002e2, 4) COPY (ram, 0x4f04e0, 4), (ram, 0x4f04e0, 4) INDIRECT (ram, 0x4f04e0, 4) , (const, 0x1b4, 4), (ram, 0x4f04e0, 4) INT_ADD (ram, 0x4f04e0, 4) , (const, 0xffffffff, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(ram, 0x4f08e8, 4) MULTIEQUAL (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4)]
[(ram, 0x4f0870, 8) MULTIEQUAL (ram, 0x4f0870, 8) , (ram, 0x4f0870, 8)]
[(ram, 0x4f04e8, 8) MULTIEQUAL (ram, 0x4f04e8, 8) , (ram, 0x4f04e8, 8)]
[(ram, 0x4eca08, 4) MULTIEQUAL (ram, 0x4eca08, 4) , (ram, 0x4eca08, 4)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x100002ce, 4) COPY (ram, 0x4f04e0, 4), (ram, 0x4f04e0, 4) COPY (unique, 0x100002ea, 4), (unique, 0x100002ea, 4) MULTIEQUAL (unique, 0x100002e2, 4) , (unique, 0x100002e6, 4)]
[ ---  CBRANCH (ram, 0x123b2f, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x10, 4) , (const, 0x0, 4), (register, 0x10, 4) SUBPIECE (register, 0x10, 8) , (const, 0x0, 4), (register, 0x10, 8) MULTIEQUAL (unique, 0x100002b2, 8) , (register, 0x10, 8)]
[(unique, 0x10000184, 8) INT_ZEXT (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbe00, 8) , (const, 0x0, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (register, 0x10, 8)]
[ ---  BRANCH (ram, 0x123b2f, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(ram, 0x4f08e8, 4) MULTIEQUAL (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4)]
[(ram, 0x4f0870, 8) MULTIEQUAL (ram, 0x4f0870, 8) , (ram, 0x4f0870, 8) , (ram, 0x4f0870, 8) , (ram, 0x4f0870, 8)]
[(ram, 0x4f04e8, 8) MULTIEQUAL (ram, 0x4f04e8, 8) , (ram, 0x4f04e8, 8) , (ram, 0x4f04e8, 8) , (ram, 0x4f04e8, 8)]
[(ram, 0x4f04e0, 4) MULTIEQUAL (ram, 0x4f04e0, 4) , (ram, 0x4f04e0, 4) , (ram, 0x4f04e0, 4) , (ram, 0x4f04e0, 4)]
[(ram, 0x4eca08, 4) MULTIEQUAL (ram, 0x4eca08, 4) , (ram, 0x4eca08, 4) , (ram, 0x4eca08, 4) , (ram, 0x4eca08, 4)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x123d29, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4f08f8, 4) , (const, 0x0, 4), (ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[ ---  CALLOTHER (const, 0x11, 4)]
[(unique, 0x100002be, 4) COPY (unique, 0x1000028a, 4), (unique, 0x1000028a, 4) INT_ADD (ram, 0x4f04e0, 4) , (const, 0xffffffff, 4)]
[ ---  CBRANCH (ram, 0x123d4b, 1) , (unique, 0x1000028e, 1), (unique, 0x1000028e, 1) INT_NOTEQUAL (unique, 0x1000028a, 4) , (const, 0x0, 4), (unique, 0x1000028a, 4) INT_ADD (ram, 0x4f04e0, 4) , (const, 0xffffffff, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x258, 4)]
[(ram, 0x4eca08, 4) INDIRECT (ram, 0x4eca08, 4) , (const, 0x258, 4)]
[(ram, 0x4f04e8, 8) INDIRECT (ram, 0x4f04e8, 8) , (const, 0x258, 4)]
[(ram, 0x4f0870, 8) INDIRECT (ram, 0x4f0870, 8) , (const, 0x258, 4)]
[(ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x258, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x258, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x258, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x258, 4)]
[ ---  CALL (ram, 0x2306c0, 8) , (unique, 0x10000255, 8), (unique, 0x10000255, 8) PTRSUB (const, 0x0, 8) , (const, 0x4f04e0, 8)]
[(unique, 0x100002ba, 4) COPY (ram, 0x4f04e0, 4), (ram, 0x4f04e0, 4) INDIRECT (ram, 0x4f04e0, 4) , (const, 0x258, 4), (ram, 0x4f04e0, 4) INT_ADD (ram, 0x4f04e0, 4) , (const, 0xffffffff, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(ram, 0x4f08e8, 4) MULTIEQUAL (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4)]
[(ram, 0x4f0870, 8) MULTIEQUAL (ram, 0x4f0870, 8) , (ram, 0x4f0870, 8)]
[(ram, 0x4f04e8, 8) MULTIEQUAL (ram, 0x4f04e8, 8) , (ram, 0x4f04e8, 8)]
[(ram, 0x4eca08, 4) MULTIEQUAL (ram, 0x4eca08, 4) , (ram, 0x4eca08, 4)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x10, 8) COPY (const, 0xffffffff, 8)]
[(unique, 0x100002d6, 4) COPY (ram, 0x4f04e0, 4), (ram, 0x4f04e0, 4) COPY (unique, 0x100002c2, 4), (unique, 0x100002c2, 4) MULTIEQUAL (unique, 0x100002ba, 4) , (unique, 0x100002be, 4)]
[ ---  BRANCH (ram, 0x123b2f, 1)]
[ ---  CBRANCH (ram, 0x123c4c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4f08f8, 4) , (const, 0x0, 4)]
[ ---  CALLOTHER (const, 0x11, 4)]
[(unique, 0x100002f2, 4) COPY (unique, 0x10000294, 4), (unique, 0x10000294, 4) INT_ADD (ram, 0x4f04e0, 4) , (const, 0xffffffff, 4)]
[ ---  CBRANCH (ram, 0x123c6e, 1) , (unique, 0x10000298, 1), (unique, 0x10000298, 1) INT_NOTEQUAL (unique, 0x10000294, 4) , (const, 0x0, 4), (unique, 0x10000294, 4) INT_ADD (ram, 0x4f04e0, 4) , (const, 0xffffffff, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x28f, 4)]
[(ram, 0x4eca08, 4) INDIRECT (ram, 0x4eca08, 4) , (const, 0x28f, 4)]
[(ram, 0x4f04e8, 8) INDIRECT (ram, 0x4f04e8, 8) , (const, 0x28f, 4)]
[(ram, 0x4f0870, 8) INDIRECT (ram, 0x4f0870, 8) , (const, 0x28f, 4)]
[(ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x28f, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x28f, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x28f, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x28f, 4)]
[ ---  CALL (ram, 0x2306c0, 8) , (unique, 0x10000275, 8), (unique, 0x10000275, 8) PTRSUB (const, 0x0, 8) , (const, 0x4f04e0, 8)]
[(unique, 0x100002ee, 4) COPY (ram, 0x4f04e0, 4), (ram, 0x4f04e0, 4) INDIRECT (ram, 0x4f04e0, 4) , (const, 0x28f, 4), (ram, 0x4f04e0, 4) INT_ADD (ram, 0x4f04e0, 4) , (const, 0xffffffff, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(ram, 0x4f08e8, 4) MULTIEQUAL (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4)]
[(ram, 0x4f0870, 8) MULTIEQUAL (ram, 0x4f0870, 8) , (ram, 0x4f0870, 8)]
[(ram, 0x4f04e8, 8) MULTIEQUAL (ram, 0x4f04e8, 8) , (ram, 0x4f04e8, 8)]
[(ram, 0x4eca08, 4) MULTIEQUAL (ram, 0x4eca08, 4) , (ram, 0x4eca08, 4)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x10, 8) COPY (const, 0x1, 8)]
[(unique, 0x100002da, 4) COPY (ram, 0x4f04e0, 4), (ram, 0x4f04e0, 4) COPY (unique, 0x100002f6, 4), (unique, 0x100002f6, 4) MULTIEQUAL (unique, 0x100002ee, 4) , (unique, 0x100002f2, 4)]
[ ---  BRANCH (ram, 0x123b2f, 1)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(ram, 0x4f08e8, 4) MULTIEQUAL (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4)]
[(ram, 0x4f0870, 8) MULTIEQUAL (ram, 0x4f0870, 8) , (ram, 0x4f0870, 8) , (ram, 0x4f0870, 8) , (ram, 0x4f0870, 8) , (ram, 0x4f0870, 8) , (ram, 0x4f0870, 8)]
[(ram, 0x4f04e8, 8) MULTIEQUAL (ram, 0x4f04e8, 8) , (ram, 0x4f04e8, 8) , (ram, 0x4f04e8, 8) , (ram, 0x4f04e8, 8) , (ram, 0x4f04e8, 8) , (ram, 0x4f04e8, 8)]
[(ram, 0x4eca08, 4) MULTIEQUAL (ram, 0x4eca08, 4) , (ram, 0x4eca08, 4) , (ram, 0x4eca08, 4) , (ram, 0x4eca08, 4) , (ram, 0x4eca08, 4) , (ram, 0x4eca08, 4)]
[(ram, 0x4f04e0, 4) COPY (unique, 0x100002de, 4), (unique, 0x100002de, 4) MULTIEQUAL (unique, 0x100002c6, 4) , (unique, 0x100002ca, 4) , (unique, 0x100002ce, 4) , (unique, 0x100002ce, 4) , (unique, 0x100002d6, 4) , (unique, 0x100002da, 4)]
[(register, 0x0, 8) COPY (register, 0x0, 8), (register, 0x0, 8) INT_AND (register, 0x10, 8) , (const, 0xffffffff, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0x100002aa, 8) , (register, 0x10, 8) , (register, 0x10, 8) , (unique, 0x10000184, 8) , (register, 0x10, 8) , (register, 0x10, 8)]
[ ---  CBRANCH (ram, 0x123d55, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffffc0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10000352, 8), (unique, 0x10000352, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0xe1, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xe1, 4)]
[ ---  CALL (ram, 0x234c80, 8)]
[(ram, 0x4eca08, 4) COPY (ram, 0x4eca08, 4), (ram, 0x4eca08, 4) INDIRECT (ram, 0x4eca08, 4) , (const, 0xe1, 4)]
[(ram, 0x4f04e0, 4) COPY (ram, 0x4f04e0, 4), (ram, 0x4f04e0, 4) INDIRECT (ram, 0x4f04e0, 4) , (const, 0xe1, 4)]
[(ram, 0x4f04e8, 8) COPY (ram, 0x4f04e8, 8), (ram, 0x4f04e8, 8) INDIRECT (ram, 0x4f04e8, 8) , (const, 0xe1, 4)]
[(ram, 0x4f0870, 8) COPY (ram, 0x4f0870, 8), (ram, 0x4f0870, 8) INDIRECT (ram, 0x4f0870, 8) , (const, 0xe1, 4)]
[(ram, 0x4f08e8, 4) COPY (ram, 0x4f08e8, 4), (ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0xe1, 4)]
[(ram, 0x4f08f8, 4) COPY (ram, 0x4f08f8, 4), (ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0xe1, 4)]
[ ---  RETURN (const, 0x1, 4)]
[(ram, 0x4eca08, 4) COPY (ram, 0x4eca08, 4)]
[(ram, 0x4f04e0, 4) COPY (ram, 0x4f04e0, 4)]
[(ram, 0x4f04e8, 8) COPY (ram, 0x4f04e8, 8)]
[(ram, 0x4f0870, 8) COPY (ram, 0x4f0870, 8)]
[(ram, 0x4f08e8, 4) COPY (ram, 0x4f08e8, 4)]
[(ram, 0x4f08f8, 4) COPY (ram, 0x4f08f8, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8)]
