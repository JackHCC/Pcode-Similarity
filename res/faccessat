[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff48, 8)]
[ ---  CBRANCH (ram, 0x1f6d18, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x100000bc, 4) , (const, 0x0, 4), (unique, 0x100000bc, 4) INT_AND (register, 0x8, 4) , (const, 0xfffffcff, 4)]
[(register, 0x18, 4) COPY (const, 0xffffffff, 4)]
[(ram, 0x4c2e38, 8) INDIRECT (ram, 0x4c2e38, 8) , (const, 0x1da, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x1da, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100000e4, 8) , (const, 0x16, 4), (unique, 0x100000e4, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (ram, 0x4c2e78, 8) , (register, 0x110, 8) , (const, 0x1, 8)]
[ ---  BRANCH (ram, 0x1f6be8, 1)]
[ ---  CBRANCH (ram, 0x1f6c00, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x8, 4) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x1f6c15, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x58e00, 4) , (const, 0x0, 4), (unique, 0x58e00, 4) INT_AND (register, 0x8, 4) , (const, 0xfffffdff, 4)]
[ ---  CBRANCH (ram, 0x1f6bcd, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100000ec, 8), (unique, 0x100000ec, 8) CAST (ram, 0x4c2e38, 8)]
[ ---  CALLOTHER (const, 0x5, 4)]
[(register, 0x18, 4) COPY (const, 0x10d, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x93, 4)]
[(ram, 0x4c2e38, 8) INDIRECT (ram, 0x4c2e38, 8) , (const, 0x93, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x93, 4)]
[(stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0x93, 4)]
[(stack, 0xffffffffffffff64, 4) INDIRECT (stack, 0xffffffffffffff64, 4) , (const, 0x93, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x93, 4)]
[ ---  CBRANCH (ram, 0x1f6d48, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x1f64d0, 8) , (const, 0x1, 4) , (register, 0x38, 4) , (register, 0x30, 8) , (register, 0x20, 8) , (register, 0x80, 4), (register, 0x80, 4) INT_AND (register, 0x8, 4) , (const, 0x100, 4)]
[(register, 0x18, 4) COPY (const, 0xffffffff, 4)]
[ ---  BRANCH (ram, 0x1f6be8, 1)]
[ ---  CBRANCH (ram, 0x1f6be8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xa8, 4) , (const, 0x0, 4), (register, 0xa8, 4) INT_AND (register, 0x10, 4) , (const, 0x7, 4)]
[ ---  CBRANCH (ram, 0x1f6cc8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4), (register, 0x28, 4) INT_AND (register, 0x8, 4) , (const, 0x200, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1d2, 4)]
[(ram, 0x4c2e38, 8) INDIRECT (ram, 0x4c2e38, 8) , (const, 0x1d2, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x1d2, 4)]
[(stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0x1d2, 4)]
[(stack, 0xffffffffffffff64, 4) INDIRECT (stack, 0xffffffffffffff64, 4) , (const, 0x1d2, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x1d2, 4)]
[(register, 0x0, 4) CALL (ram, 0x1cc7c0, 8)]
[ ---  BRANCH (ram, 0x1f6c56, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xbb, 4)]
[(ram, 0x4c2e38, 8) INDIRECT (ram, 0x4c2e38, 8) , (const, 0xbb, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0xbb, 4)]
[(stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0xbb, 4)]
[(stack, 0xffffffffffffff64, 4) INDIRECT (stack, 0xffffffffffffff64, 4) , (const, 0xbb, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0xbb, 4)]
[(register, 0x0, 4) CALL (ram, 0x1cc7d0, 8)]
[(stack, 0xffffffffffffff64, 4) MULTIEQUAL (stack, 0xffffffffffffff64, 4) , (stack, 0xffffffffffffff64, 4)]
[(stack, 0xffffffffffffff60, 4) MULTIEQUAL (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4)]
[(ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(ram, 0x4c2e38, 8) MULTIEQUAL (ram, 0x4c2e38, 8) , (ram, 0x4c2e38, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x100000e0, 4) COPY (stack, 0xffffffffffffff68, 4), (stack, 0xffffffffffffff68, 4) MULTIEQUAL (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4)]
[ ---  CBRANCH (ram, 0x1f6c67, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) MULTIEQUAL (register, 0x0, 4) , (register, 0x0, 4)]
[ ---  CBRANCH (ram, 0x1f6be8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xa0, 4) , (const, 0x0, 4), (register, 0xa0, 4) INT_AND (register, 0x10, 4) , (const, 0x1, 4)]
[ ---  CBRANCH (ram, 0x1f6be8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x100000cb, 4) , (const, 0x0, 4), (unique, 0x100000cb, 4) INT_AND (stack, 0xffffffffffffff60, 4) , (const, 0x49, 4)]
[ ---  CBRANCH (ram, 0x1f6d30, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (stack, 0xffffffffffffff64, 4)]
[(register, 0x0, 4) INT_RIGHT (register, 0x0, 4) , (const, 0x6, 4), (register, 0x0, 4) INT_AND (register, 0x0, 4) , (stack, 0xffffffffffffff60, 4), (register, 0x0, 4) INT_LEFT (register, 0xa8, 4) , (const, 0x6, 4)]
[ ---  BRANCH (ram, 0x1f6ca0, 1)]
[ ---  CBRANCH (ram, 0x1f6cf0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x173, 4)]
[(ram, 0x4c2e38, 8) INDIRECT (ram, 0x4c2e38, 8) , (const, 0x173, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x173, 4)]
[(stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0x173, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x173, 4)]
[(register, 0x0, 4) CALL (ram, 0x1cc7f0, 8)]
[ ---  BRANCH (ram, 0x1f6c7f, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xfe, 4)]
[(ram, 0x4c2e38, 8) INDIRECT (ram, 0x4c2e38, 8) , (const, 0xfe, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0xfe, 4)]
[(stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0xfe, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0xfe, 4)]
[(register, 0x0, 4) CALL (ram, 0x1cc7e0, 8)]
[(stack, 0xffffffffffffff68, 4) MULTIEQUAL (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4)]
[(stack, 0xffffffffffffff60, 4) MULTIEQUAL (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4)]
[(ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(ram, 0x4c2e38, 8) MULTIEQUAL (ram, 0x4c2e38, 8) , (ram, 0x4c2e38, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x1f6d00, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (unique, 0x100000e0, 4), (register, 0x0, 4) MULTIEQUAL (register, 0x0, 4) , (register, 0x0, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x10f, 4)]
[(ram, 0x4c2e38, 8) INDIRECT (ram, 0x4c2e38, 8) , (const, 0x10f, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x10f, 4)]
[(stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0x10f, 4)]
[ ---  CBRANCH (ram, 0x1f6d00, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x1cc910, 8) , (stack, 0xffffffffffffff68, 4)]
[(register, 0x0, 4) INT_AND (stack, 0xffffffffffffff60, 4) , (register, 0xa8, 4)]
[(ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(ram, 0x4c2e38, 8) MULTIEQUAL (ram, 0x4c2e38, 8) , (ram, 0x4c2e38, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x0, 4) INT_RIGHT (register, 0x0, 4) , (const, 0x3, 4), (register, 0x0, 4) INT_AND (unique, 0x3680, 4) , (stack, 0xffffffffffffff60, 4), (unique, 0x3680, 4) INT_MULT (register, 0xa8, 4) , (const, 0x8, 4), (stack, 0xffffffffffffff60, 4) MULTIEQUAL (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4)]
[ ---  BRANCH (ram, 0x1f6ca0, 1)]
[(ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(ram, 0x4c2e38, 8) MULTIEQUAL (ram, 0x4c2e38, 8) , (ram, 0x4c2e38, 8) , (ram, 0x4c2e38, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x1f6be8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (register, 0xa8, 4), (register, 0x0, 4) MULTIEQUAL (register, 0x0, 4) , (register, 0x0, 4) , (register, 0x0, 4)]
[(register, 0x18, 4) COPY (const, 0xffffffff, 4)]
[(ram, 0x4c2e38, 8) INDIRECT (ram, 0x4c2e38, 8) , (const, 0x139, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x139, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100000f4, 8) , (const, 0xd, 4), (unique, 0x100000f4, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (ram, 0x4c2e78, 8) , (register, 0x110, 8) , (const, 0x1, 8)]
[ ---  BRANCH (ram, 0x1f6be8, 1)]
[(ram, 0x4c2e38, 8) COPY (ram, 0x4c2e38, 8), (ram, 0x4c2e38, 8) MULTIEQUAL (ram, 0x4c2e38, 8) , (ram, 0x4c2e38, 8) , (ram, 0x4c2e38, 8) , (ram, 0x4c2e38, 8) , (ram, 0x4c2e38, 8) , (ram, 0x4c2e38, 8) , (ram, 0x4c2e38, 8) , (ram, 0x4c2e38, 8)]
[(ram, 0x4c2e78, 8) COPY (ram, 0x4c2e78, 8), (ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 4), (register, 0x0, 4) COPY (register, 0x18, 4), (register, 0x18, 4) MULTIEQUAL (register, 0x18, 4) , (register, 0x0, 4) , (register, 0x0, 4) , (register, 0x0, 4) , (register, 0x0, 4) , (register, 0x18, 4) , (register, 0x18, 4) , (register, 0x18, 4)]
