[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff38, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x100000f7, 8), (unique, 0x100000f7, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8)]
[ ---  CBRANCH (ram, 0x210570, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x100000cd, 4) , (const, 0x0, 4), (unique, 0x100000cd, 4) INT_AND (register, 0x8, 4) , (const, 0xfffffcff, 4)]
[(register, 0x18, 4) COPY (const, 0xffffffff, 4)]
[(ram, 0x4eae20, 8) INDIRECT (ram, 0x4eae20, 8) , (const, 0x1ff, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x1ff, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100000ff, 8) , (const, 0x16, 4), (unique, 0x100000ff, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (ram, 0x4eae68, 8) , (register, 0x110, 8) , (const, 0x1, 8)]
[ ---  BRANCH (ram, 0x21040d, 1)]
[ ---  CBRANCH (ram, 0x210438, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x8, 4) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x21044d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x58e00, 4) , (const, 0x0, 4), (unique, 0x58e00, 4) INT_AND (register, 0x8, 4) , (const, 0xfffffdff, 4)]
[ ---  CBRANCH (ram, 0x2103f5, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000107, 8), (unique, 0x10000107, 8) CAST (ram, 0x4eae20, 8)]
[ ---  CALLOTHER (const, 0x5, 4)]
[(register, 0x18, 4) COPY (const, 0x10d, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xb8, 4)]
[(ram, 0x4eae20, 8) INDIRECT (ram, 0x4eae20, 8) , (const, 0xb8, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xb8, 4)]
[(stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0xb8, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0xb8, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0xb8, 4)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0xb8, 4)]
[ ---  CBRANCH (ram, 0x210588, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x20f910, 8) , (const, 0x1, 4) , (register, 0x38, 4) , (register, 0x30, 8) , (register, 0x20, 8) , (register, 0x80, 4), (register, 0x80, 4) INT_AND (register, 0x8, 4) , (const, 0x100, 4)]
[(register, 0x18, 4) COPY (const, 0xffffffff, 4)]
[ ---  BRANCH (ram, 0x21040d, 1)]
[ ---  CBRANCH (ram, 0x21040d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xa8, 4) , (const, 0x0, 4), (register, 0xa8, 4) INT_AND (register, 0x10, 4) , (const, 0x7, 4)]
[ ---  CBRANCH (ram, 0x210508, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4), (register, 0x28, 4) INT_AND (register, 0x8, 4) , (const, 0x200, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1f7, 4)]
[(ram, 0x4eae20, 8) INDIRECT (ram, 0x4eae20, 8) , (const, 0x1f7, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x1f7, 4)]
[(stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x1f7, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x1f7, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x1f7, 4)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0x1f7, 4)]
[(register, 0x0, 4) CALL (ram, 0x1e5900, 8)]
[ ---  BRANCH (ram, 0x21048d, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xe0, 4)]
[(ram, 0x4eae20, 8) INDIRECT (ram, 0x4eae20, 8) , (const, 0xe0, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xe0, 4)]
[(stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0xe0, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0xe0, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0xe0, 4)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0xe0, 4)]
[(register, 0x0, 4) CALL (ram, 0x1e5910, 8)]
[(stack, 0xffffffffffffffd0, 8) MULTIEQUAL (stack, 0xffffffffffffffd0, 8) , (stack, 0xffffffffffffffd0, 8)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff50, 4) MULTIEQUAL (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4eae20, 8) MULTIEQUAL (ram, 0x4eae20, 8) , (ram, 0x4eae20, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x100000f3, 4) COPY (stack, 0xffffffffffffff58, 4), (stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4)]
[ ---  CBRANCH (ram, 0x2104a6, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) MULTIEQUAL (register, 0x0, 4) , (register, 0x0, 4)]
[ ---  CBRANCH (ram, 0x21040d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xa0, 4) , (const, 0x0, 4), (register, 0xa0, 4) INT_AND (register, 0x10, 4) , (const, 0x1, 4)]
[ ---  CBRANCH (ram, 0x21040d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x100000dd, 4) , (const, 0x0, 4), (unique, 0x100000dd, 4) INT_AND (stack, 0xffffffffffffff50, 4) , (const, 0x49, 4)]
[ ---  CBRANCH (ram, 0x210558, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffff54, 4) , (register, 0x0, 4)]
[(register, 0x0, 4) INT_RIGHT (register, 0x0, 4) , (const, 0x6, 4), (register, 0x0, 4) INT_AND (register, 0x0, 4) , (stack, 0xffffffffffffff50, 4), (register, 0x0, 4) INT_LEFT (register, 0xa8, 4) , (const, 0x6, 4)]
[ ---  BRANCH (ram, 0x2104e0, 1)]
[ ---  CBRANCH (ram, 0x210530, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x198, 4)]
[(ram, 0x4eae20, 8) INDIRECT (ram, 0x4eae20, 8) , (const, 0x198, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x198, 4)]
[(stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x198, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x198, 4)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0x198, 4)]
[(register, 0x0, 4) CALL (ram, 0x1e5930, 8)]
[ ---  BRANCH (ram, 0x2104be, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x123, 4)]
[(ram, 0x4eae20, 8) INDIRECT (ram, 0x4eae20, 8) , (const, 0x123, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x123, 4)]
[(stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x123, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x123, 4)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0x123, 4)]
[(register, 0x0, 4) CALL (ram, 0x1e5920, 8)]
[(stack, 0xffffffffffffffd0, 8) MULTIEQUAL (stack, 0xffffffffffffffd0, 8) , (stack, 0xffffffffffffffd0, 8)]
[(stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4)]
[(stack, 0xffffffffffffff50, 4) MULTIEQUAL (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4eae20, 8) MULTIEQUAL (ram, 0x4eae20, 8) , (ram, 0x4eae20, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x210540, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x100000f3, 4) , (register, 0x0, 4), (register, 0x0, 4) MULTIEQUAL (register, 0x0, 4) , (register, 0x0, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x134, 4)]
[(ram, 0x4eae20, 8) INDIRECT (ram, 0x4eae20, 8) , (const, 0x134, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x134, 4)]
[(stack, 0xffffffffffffff50, 4) INDIRECT (stack, 0xffffffffffffff50, 4) , (const, 0x134, 4)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0x134, 4)]
[ ---  CBRANCH (ram, 0x210540, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x1e5a90, 8) , (stack, 0xffffffffffffff58, 4)]
[(register, 0x0, 4) INT_AND (stack, 0xffffffffffffff50, 4) , (register, 0xa8, 4)]
[(stack, 0xffffffffffffffd0, 8) MULTIEQUAL (stack, 0xffffffffffffffd0, 8) , (stack, 0xffffffffffffffd0, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4eae20, 8) MULTIEQUAL (ram, 0x4eae20, 8) , (ram, 0x4eae20, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x0, 4) INT_RIGHT (register, 0x0, 4) , (const, 0x3, 4), (register, 0x0, 4) INT_AND (unique, 0x3680, 4) , (stack, 0xffffffffffffff50, 4), (unique, 0x3680, 4) INT_MULT (register, 0xa8, 4) , (const, 0x8, 4), (stack, 0xffffffffffffff50, 4) MULTIEQUAL (stack, 0xffffffffffffff50, 4) , (stack, 0xffffffffffffff50, 4)]
[ ---  BRANCH (ram, 0x2104e0, 1)]
[(stack, 0xffffffffffffffd0, 8) MULTIEQUAL (stack, 0xffffffffffffffd0, 8) , (stack, 0xffffffffffffffd0, 8) , (stack, 0xffffffffffffffd0, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4eae20, 8) MULTIEQUAL (ram, 0x4eae20, 8) , (ram, 0x4eae20, 8) , (ram, 0x4eae20, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x21040d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (register, 0xa8, 4), (register, 0x0, 4) MULTIEQUAL (register, 0x0, 4) , (register, 0x0, 4) , (register, 0x0, 4)]
[(register, 0x18, 4) COPY (const, 0xffffffff, 4)]
[(ram, 0x4eae20, 8) INDIRECT (ram, 0x4eae20, 8) , (const, 0x15e, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x15e, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000010f, 8) , (const, 0xd, 4), (unique, 0x1000010f, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (ram, 0x4eae68, 8) , (register, 0x110, 8) , (const, 0x1, 8)]
[ ---  BRANCH (ram, 0x21040d, 1)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4eae20, 8) MULTIEQUAL (ram, 0x4eae20, 8) , (ram, 0x4eae20, 8) , (ram, 0x4eae20, 8) , (ram, 0x4eae20, 8) , (ram, 0x4eae20, 8) , (ram, 0x4eae20, 8) , (ram, 0x4eae20, 8) , (ram, 0x4eae20, 8)]
[(register, 0x18, 4) MULTIEQUAL (register, 0x18, 4) , (register, 0x0, 4) , (register, 0x0, 4) , (register, 0x0, 4) , (register, 0x0, 4) , (register, 0x18, 4) , (register, 0x18, 4) , (register, 0x18, 4)]
[ ---  CBRANCH (ram, 0x210592, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffffd0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10000117, 8), (unique, 0x10000117, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8), (stack, 0xffffffffffffffd0, 8) MULTIEQUAL (unique, 0xbd80, 8) , (stack, 0xffffffffffffffd0, 8) , (stack, 0xffffffffffffffd0, 8) , (stack, 0xffffffffffffffd0, 8) , (stack, 0xffffffffffffffd0, 8) , (stack, 0xffffffffffffffd0, 8) , (stack, 0xffffffffffffffd0, 8) , (unique, 0xbd80, 8)]
[(ram, 0x4eae20, 8) COPY (ram, 0x4eae20, 8)]
[(ram, 0x4eae68, 8) COPY (ram, 0x4eae68, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 4), (register, 0x0, 4) COPY (register, 0x18, 4)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0x79, 4)]
[ ---  CALL (ram, 0x234c80, 8)]
[(ram, 0x4eae20, 8) COPY (ram, 0x4eae20, 8), (ram, 0x4eae20, 8) INDIRECT (ram, 0x4eae20, 8) , (const, 0x79, 4)]
[(ram, 0x4eae68, 8) COPY (ram, 0x4eae68, 8), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x79, 4)]
[ ---  RETURN (const, 0x1, 4)]
