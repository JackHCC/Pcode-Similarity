[ ---  CBRANCH (ram, 0x243010, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4c8340, 8) , (const, 0x0, 8)]
[(ram, 0x4c2e70, 8) COPY (ram, 0x4c2e70, 8), (ram, 0x4c2e70, 8) INDIRECT (ram, 0x4c2e70, 8) , (const, 0x78, 4)]
[(ram, 0x4c8340, 8) COPY (ram, 0x4c8340, 8), (ram, 0x4c8340, 8) INDIRECT (ram, 0x4c8340, 8) , (const, 0x78, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) CALLIND (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000065, 8), (unique, 0x10000065, 8) INT_ADD (ram, 0x4c8340, 8) , (const, 0x10, 8)]
[(ram, 0x4c2e70, 8) INDIRECT (ram, 0x4c2e70, 8) , (const, 0x25, 4)]
[(ram, 0x4c8340, 8) INDIRECT (ram, 0x4c8340, 8) , (const, 0x25, 4)]
[(stack, 0xffffffffffffffe7, 1) INDIRECT (stack, 0xffffffffffffffe7, 1) , (const, 0x25, 4)]
[(stack, 0xfffffffffffffff0, 8) INDIRECT (stack, 0xfffffffffffffff0, 8) , (const, 0x25, 4), (stack, 0xfffffffffffffff0, 8) COPY (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x242fe0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) SUBPIECE (register, 0x0, 8) , (const, 0x0, 4), (register, 0x0, 8) CALLIND (unique, 0xbd80, 8) , (unique, 0x3800, 8) , (unique, 0x3800, 8) , (unique, 0x3800, 8) , (unique, 0x10000044, 8), (unique, 0x10000044, 8) PTRSUB (const, 0x0, 8) , (const, 0x242e30, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x1000006d, 8), (unique, 0x1000006d, 8) CAST (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (ram, 0x4c2e70, 8) , (const, 0x118, 8) , (const, 0x1, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffe8, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffe7, 8)]
[ ---  CBRANCH (ram, 0x242fda, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xfffffffffffffff0, 8) , (const, 0x0, 8)]
[(ram, 0x4c2e70, 8) COPY (ram, 0x4c2e70, 8)]
[(ram, 0x4c8340, 8) COPY (ram, 0x4c8340, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) COPY (register, 0x0, 8)]
[(register, 0x0, 8) COPY (const, 0x1, 8)]
[ ---  BRANCH (ram, 0x242fd3, 1)]
[(register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x242ff0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffffe7, 1) , (const, 0x0, 1)]
[(stack, 0xfffffffffffffff0, 8) INDIRECT (stack, 0xfffffffffffffff0, 8) , (const, 0x53, 4)]
[ ---  CALL (ram, 0x11f8a8, 8) , (stack, 0xfffffffffffffff0, 8)]
[(ram, 0x4c2e70, 8) COPY (ram, 0x4c2e70, 8), (ram, 0x4c2e70, 8) INDIRECT (ram, 0x4c2e70, 8) , (const, 0x53, 4)]
[(ram, 0x4c8340, 8) COPY (ram, 0x4c8340, 8), (ram, 0x4c8340, 8) INDIRECT (ram, 0x4c8340, 8) , (const, 0x53, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) COPY (register, 0x0, 8), (register, 0x0, 8) INT_AND (register, 0x0, 8) , (const, 0xffffffff, 8)]
[(ram, 0x4c2e70, 8) COPY (ram, 0x4c2e70, 8)]
[(ram, 0x4c8340, 8) COPY (ram, 0x4c8340, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) COPY (register, 0x0, 8)]
