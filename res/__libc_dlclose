[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10000080, 8), (unique, 0x10000080, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8)]
[ ---  CBRANCH (ram, 0x2667d8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbe00, 8) , (const, 0x0, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000088, 8), (unique, 0x10000088, 8) CAST (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (ram, 0x4eae58, 8) , (const, 0x148, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x5e, 4)]
[(ram, 0x4eae58, 8) INDIRECT (ram, 0x4eae58, 8) , (const, 0x5e, 4)]
[(ram, 0x4f04a8, 8) INDIRECT (ram, 0x4f04a8, 8) , (const, 0x5e, 4)]
[(stack, 0xffffffffffffffdf, 1) INDIRECT (stack, 0xffffffffffffffdf, 1) , (const, 0x5e, 4)]
[(stack, 0xffffffffffffffe8, 8) INDIRECT (stack, 0xffffffffffffffe8, 8) , (const, 0x5e, 4), (stack, 0xffffffffffffffe8, 8) COPY (const, 0x0, 8)]
[(stack, 0xfffffffffffffff0, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x5e, 4)]
[ ---  CBRANCH (ram, 0x266818, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) SUBPIECE (register, 0x0, 8) , (const, 0x0, 4), (register, 0x0, 8) CALL (ram, 0x267340, 8) , (unique, 0x3800, 8) , (unique, 0x3800, 8) , (unique, 0x3800, 8) , (unique, 0x10000060, 8) , (register, 0x38, 8), (unique, 0x10000060, 8) PTRSUB (const, 0x0, 8) , (const, 0x266440, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffe8, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffdf, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffe0, 8)]
[ ---  CBRANCH (ram, 0x2667bf, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffffe8, 8) , (const, 0x0, 8)]
[(register, 0x0, 8) COPY (const, 0x1, 8)]
[(register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x2667bf, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffffdf, 1) , (const, 0x0, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x91, 4)]
[(ram, 0x4eae58, 8) INDIRECT (ram, 0x4eae58, 8) , (const, 0x91, 4)]
[(ram, 0x4f04a8, 8) INDIRECT (ram, 0x4f04a8, 8) , (const, 0x91, 4)]
[(stack, 0xffffffffffffffe8, 8) INDIRECT (stack, 0xffffffffffffffe8, 8) , (const, 0x91, 4)]
[(stack, 0xfffffffffffffff0, 8) INDIRECT (stack, 0xfffffffffffffff0, 8) , (const, 0x91, 4)]
[ ---  CALL (ram, 0x1212c8, 8) , (stack, 0xffffffffffffffe8, 8)]
[(register, 0x0, 8) INT_AND (register, 0x0, 8) , (const, 0xffffffff, 8)]
[ ---  BRANCH (ram, 0x2667bf, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x2e, 4)]
[(ram, 0x4eae58, 8) INDIRECT (ram, 0x4eae58, 8) , (const, 0x2e, 4)]
[(ram, 0x4f04a8, 8) INDIRECT (ram, 0x4f04a8, 8) , (const, 0x2e, 4)]
[(stack, 0xffffffffffffffe8, 8) INDIRECT (stack, 0xffffffffffffffe8, 8) , (const, 0x2e, 4)]
[(stack, 0xfffffffffffffff0, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x2e, 4)]
[(register, 0x0, 8) CALLIND (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000090, 8), (unique, 0x10000090, 8) INT_ADD (ram, 0x4f04a8, 8) , (const, 0x10, 8)]
[(stack, 0xffffffffffffffe8, 8) MULTIEQUAL (stack, 0xffffffffffffffe8, 8) , (stack, 0xffffffffffffffe8, 8) , (stack, 0xffffffffffffffe8, 8) , (stack, 0xffffffffffffffe8, 8)]
[(ram, 0x4f04a8, 8) MULTIEQUAL (ram, 0x4f04a8, 8) , (ram, 0x4f04a8, 8) , (ram, 0x4f04a8, 8) , (ram, 0x4f04a8, 8)]
[(ram, 0x4eae58, 8) MULTIEQUAL (ram, 0x4eae58, 8) , (ram, 0x4eae58, 8) , (ram, 0x4eae58, 8) , (ram, 0x4eae58, 8)]
[(register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8) , (register, 0x0, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x266833, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xfffffffffffffff0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10000098, 8), (unique, 0x10000098, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8), (stack, 0xfffffffffffffff0, 8) MULTIEQUAL (stack, 0xfffffffffffffff0, 8) , (stack, 0xfffffffffffffff0, 8) , (stack, 0xfffffffffffffff0, 8) , (stack, 0xfffffffffffffff0, 8)]
[(stack, 0xffffffffffffffe8, 8) INDIRECT (stack, 0xffffffffffffffe8, 8) , (const, 0x4d, 4)]
[(stack, 0xfffffffffffffff0, 8) INDIRECT (stack, 0xfffffffffffffff0, 8) , (const, 0x4d, 4)]
[ ---  CALL (ram, 0x234c80, 8)]
[(ram, 0x4eae58, 8) COPY (ram, 0x4eae58, 8), (ram, 0x4eae58, 8) INDIRECT (ram, 0x4eae58, 8) , (const, 0x4d, 4)]
[(ram, 0x4f04a8, 8) COPY (ram, 0x4f04a8, 8), (ram, 0x4f04a8, 8) INDIRECT (ram, 0x4f04a8, 8) , (const, 0x4d, 4)]
[ ---  RETURN (const, 0x1, 4)]
[(ram, 0x4eae58, 8) COPY (ram, 0x4eae58, 8)]
[(ram, 0x4f04a8, 8) COPY (ram, 0x4f04a8, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8)]
