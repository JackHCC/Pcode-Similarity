[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff78, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff78, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff78, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff78, 8)]
[(ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0x2a, 4)]
[(ram, 0x4c6140, 8) INDIRECT (ram, 0x4c6140, 8) , (const, 0x2a, 4)]
[(ram, 0x4c66c8, 4) INDIRECT (ram, 0x4c66c8, 4) , (const, 0x2a, 4)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x2a, 4)]
[(ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0x2a, 4)]
[(ram, 0x4c87c1, 1) INDIRECT (ram, 0x4c87c1, 1) , (const, 0x2a, 4)]
[(ram, 0x4c87f8, 4) INDIRECT (ram, 0x4c87f8, 4) , (const, 0x2a, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x2a, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x2a, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x2a, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x2a, 4)]
[(stack, 0xffffffffffffffa4, 4) INDIRECT (unique, 0xbc80, 4) , (const, 0x2a, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000b73, 8), (unique, 0x10000b73, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x38, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[(unique, 0x10000b63, 8) COPY (ram, 0x4c6180, 8), (ram, 0x4c6180, 8) INDIRECT (ram, 0x4c6180, 8) , (const, 0x2a, 4)]
[(unique, 0x10000b6b, 8) COPY (ram, 0x4c6180, 8), (ram, 0x4c6180, 8) INDIRECT (ram, 0x4c6180, 8) , (const, 0x2a, 4)]
[ ---  CBRANCH (ram, 0x48d488, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x4011a0, 8) , (unique, 0xbd80, 8) , (const, 0x24, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x38, 8)]
[ ---  CBRANCH (ram, 0x48d820, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (const, 0xfffffffffffffffe, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x38, 8) , (const, 0x4, 8) , (const, 0x8, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x38, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[(unique, 0x10000a47, 8) COPY (ram, 0x4c6180, 8)]
[ ---  CBRANCH (ram, 0x48d00f, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4c6128, 8) , (const, 0x0, 8)]
[(ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0xad0, 4)]
[(ram, 0x4c6140, 8) INDIRECT (ram, 0x4c6140, 8) , (const, 0xad0, 4)]
[(ram, 0x4c6180, 8) INDIRECT (ram, 0x4c6180, 8) , (const, 0xad0, 4)]
[(ram, 0x4c66c8, 4) INDIRECT (ram, 0x4c66c8, 4) , (const, 0xad0, 4)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0xad0, 4)]
[(ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0xad0, 4)]
[(ram, 0x4c87c1, 1) INDIRECT (ram, 0x4c87c1, 1) , (const, 0xad0, 4)]
[(ram, 0x4c87f8, 4) INDIRECT (ram, 0x4c87f8, 4) , (const, 0xad0, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0xad0, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0xad0, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0xad0, 4)]
[(stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0xad0, 4)]
[(unique, 0x10000a17, 8) COPY (stack, 0xffffffffffffff98, 8), (stack, 0xffffffffffffff98, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0xad0, 4)]
[(unique, 0x10000a5f, 8) COPY (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x48d068, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x4011a0, 8) , (unique, 0xbd80, 8) , (const, 0x2f, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x38, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[(unique, 0x10000a67, 8) COPY (ram, 0x4c6180, 8)]
[(unique, 0x10000b03, 8) COPY (ram, 0x4c6180, 8)]
[(unique, 0x10000b23, 8) COPY (ram, 0x4c6180, 8)]
[ ---  CBRANCH (ram, 0x48d00f, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4c6128, 8) , (const, 0x0, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x38, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[(unique, 0x10000a6f, 8) COPY (ram, 0x4c6180, 8)]
[(unique, 0x10000ab7, 8) COPY (ram, 0x4c6180, 8)]
[ ---  CBRANCH (ram, 0x48d054, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4c6128, 8) , (const, 0x0, 8)]
[(register, 0xb0, 8) MULTIEQUAL (register, 0xb0, 8) , (unique, 0xbd80, 8) , (unique, 0xbd80, 8) , (unique, 0xbd80, 8)]
[(unique, 0x1000055f, 8) MULTIEQUAL (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8)]
[(unique, 0x10000567, 8) MULTIEQUAL (ram, 0x4c6140, 8) , (ram, 0x4c6140, 8) , (ram, 0x4c6140, 8) , (ram, 0x4c6140, 8)]
[(unique, 0x1000057f, 4) MULTIEQUAL (ram, 0x4c66c8, 4) , (ram, 0x4c66c8, 4) , (ram, 0x4c66c8, 4) , (ram, 0x4c66c8, 4)]
[(unique, 0x10000583, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(unique, 0x1000058b, 1) MULTIEQUAL (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1)]
[(unique, 0x1000058c, 1) MULTIEQUAL (ram, 0x4c87c1, 1) , (ram, 0x4c87c1, 1) , (ram, 0x4c87c1, 1) , (ram, 0x4c87c1, 1)]
[(unique, 0x1000058d, 4) MULTIEQUAL (ram, 0x4c87f8, 4) , (ram, 0x4c87f8, 4) , (ram, 0x4c87f8, 4) , (ram, 0x4c87f8, 4)]
[(unique, 0x10000591, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(unique, 0x10000599, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(unique, 0x100005a1, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(unique, 0x100005a9, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (unique, 0xbd80, 8)]
[(unique, 0x100005b1, 4) MULTIEQUAL (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4)]
[(unique, 0x10000a77, 8) COPY (unique, 0x100009af, 8), (unique, 0x100009af, 8) COPY (ram, 0x4c6180, 8), (ram, 0x4c6180, 8) MULTIEQUAL (unique, 0x10000b43, 8) , (ram, 0x4c6180, 8) , (ram, 0x4c6180, 8) , (ram, 0x4c6180, 8)]
[(unique, 0x10000abf, 8) COPY (unique, 0x10000577, 8), (unique, 0x10000577, 8) MULTIEQUAL (unique, 0x10000b13, 8) , (unique, 0x10000b6b, 8) , (unique, 0x10000b23, 8) , (unique, 0x10000b6b, 8)]
[ ---  CBRANCH (ram, 0x48d054, 1) , (unique, 0x1000055e, 1), (unique, 0x1000055e, 1) INT_NOTEQUAL (unique, 0x1000056f, 8) , (const, 0x0, 8), (unique, 0x1000056f, 8) MULTIEQUAL (unique, 0x10000af3, 8) , (unique, 0x10000b63, 8) , (unique, 0x10000b03, 8) , (unique, 0x10000b63, 8)]
[(unique, 0x10000a9f, 8) COPY (unique, 0x10000abf, 8)]
[ ---  CBRANCH (ram, 0x48d04b, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESSEQUAL (unique, 0xbd80, 8) , (register, 0xb0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x10000b7b, 8), (unique, 0x10000b7b, 8) INT_ADD (unique, 0x1000056f, 8) , (const, 0x350, 8)]
[(unique, 0x10000aa7, 8) COPY (unique, 0x10000abf, 8)]
[ ---  CBRANCH (ram, 0x48d04b, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (register, 0xb0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x10000b83, 8), (unique, 0x10000b83, 8) INT_ADD (unique, 0x1000056f, 8) , (const, 0x358, 8)]
[ ---  CBRANCH (ram, 0x48d448, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x58c00, 1) , (const, 0x0, 1), (unique, 0x58c00, 1) INT_AND (unique, 0xbb00, 1) , (const, 0x40, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x10000b8b, 8), (unique, 0x10000b8b, 8) INT_ADD (unique, 0x1000056f, 8) , (const, 0x31d, 8)]
[(ram, 0x4c6128, 8) INDIRECT (unique, 0x1000055f, 8) , (const, 0x7c, 4)]
[(ram, 0x4c6140, 8) INDIRECT (unique, 0x10000567, 8) , (const, 0x7c, 4)]
[(ram, 0x4c6180, 8) INDIRECT (unique, 0x10000abf, 8) , (const, 0x7c, 4)]
[(ram, 0x4c66c8, 4) INDIRECT (unique, 0x1000057f, 4) , (const, 0x7c, 4)]
[(ram, 0x4c8730, 8) INDIRECT (unique, 0x10000583, 8) , (const, 0x7c, 4)]
[(ram, 0x4c87c0, 1) INDIRECT (unique, 0x1000058b, 1) , (const, 0x7c, 4)]
[(ram, 0x4c87c1, 1) INDIRECT (unique, 0x1000058c, 1) , (const, 0x7c, 4)]
[(ram, 0x4c87f8, 4) INDIRECT (unique, 0x1000058d, 4) , (const, 0x7c, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (unique, 0x10000591, 8) , (const, 0x7c, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (unique, 0x10000599, 8) , (const, 0x7c, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (unique, 0x100005a1, 8) , (const, 0x7c, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (unique, 0x100005a9, 8) , (const, 0x7c, 4)]
[(stack, 0xffffffffffffffa4, 4) INDIRECT (unique, 0x100005b1, 4) , (const, 0x7c, 4)]
[ ---  CBRANCH (ram, 0x48d448, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x48fb40, 8) , (unique, 0x1000056f, 8) , (register, 0xb0, 8)]
[(stack, 0xffffffffffffffa4, 4) MULTIEQUAL (unique, 0x100005b1, 4) , (stack, 0xffffffffffffffa4, 4)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (unique, 0x100005a9, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (unique, 0x100005a1, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (unique, 0x10000599, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (unique, 0x10000591, 8) , (stack, 0xffffffffffffff78, 8)]
[(ram, 0x4c87f8, 4) MULTIEQUAL (unique, 0x1000058d, 4) , (ram, 0x4c87f8, 4)]
[(ram, 0x4c87c1, 1) MULTIEQUAL (unique, 0x1000058c, 1) , (ram, 0x4c87c1, 1)]
[(ram, 0x4c87c0, 1) MULTIEQUAL (unique, 0x1000058b, 1) , (ram, 0x4c87c0, 1)]
[(ram, 0x4c8730, 8) MULTIEQUAL (unique, 0x10000583, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c66c8, 4) MULTIEQUAL (unique, 0x1000057f, 4) , (ram, 0x4c66c8, 4)]
[(ram, 0x4c6180, 8) MULTIEQUAL (unique, 0x10000abf, 8) , (ram, 0x4c6180, 8)]
[(ram, 0x4c6140, 8) MULTIEQUAL (unique, 0x10000567, 8) , (ram, 0x4c6140, 8)]
[(ram, 0x4c6128, 8) MULTIEQUAL (unique, 0x1000055f, 8) , (ram, 0x4c6128, 8)]
[ ---  CBRANCH (ram, 0x48da74, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbe00, 8) , (const, 0x0, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000b93, 8), (unique, 0x10000b93, 8) INT_ADD (unique, 0x1000056f, 8) , (const, 0x30, 8)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0xab8, 4)]
[(stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0xab8, 4)]
[ ---  CALL (ram, 0x403170, 8) , (unique, 0x1000069f, 8) , (unique, 0x1000068f, 8) , (const, 0xd3, 4) , (unique, 0x1000071f, 8), (unique, 0x1000071f, 8) COPY (const, 0x4b54e0, 8), (unique, 0x1000069f, 8) COPY (const, 0x4b51b7, 8), (unique, 0x1000068f, 8) COPY (const, 0x4b5192, 8)]
[(ram, 0x4c6128, 8) COPY (ram, 0x4c6128, 8), (ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0xab8, 4)]
[(ram, 0x4c6140, 8) COPY (ram, 0x4c6140, 8), (ram, 0x4c6140, 8) INDIRECT (ram, 0x4c6140, 8) , (const, 0xab8, 4)]
[(ram, 0x4c6180, 8) COPY (ram, 0x4c6180, 8), (ram, 0x4c6180, 8) INDIRECT (ram, 0x4c6180, 8) , (const, 0xab8, 4)]
[(ram, 0x4c66c8, 4) COPY (ram, 0x4c66c8, 4), (ram, 0x4c66c8, 4) INDIRECT (ram, 0x4c66c8, 4) , (const, 0xab8, 4)]
[(ram, 0x4c8730, 8) COPY (ram, 0x4c8730, 8), (ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0xab8, 4)]
[(ram, 0x4c87c0, 1) COPY (ram, 0x4c87c0, 1), (ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0xab8, 4)]
[(ram, 0x4c87c1, 1) COPY (ram, 0x4c87c1, 1), (ram, 0x4c87c1, 1) INDIRECT (ram, 0x4c87c1, 1) , (const, 0xab8, 4)]
[(ram, 0x4c87f8, 4) COPY (ram, 0x4c87f8, 4), (ram, 0x4c87f8, 4) INDIRECT (ram, 0x4c87f8, 4) , (const, 0xab8, 4)]
[ ---  RETURN (const, 0x1, 4)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x38, 8) , (const, 0x4, 8) , (const, 0x8, 8)]
[(unique, 0x10000b4b, 8) COPY (unique, 0x1000056f, 8)]
[(stack, 0xffffffffffffffa4, 4) MULTIEQUAL (unique, 0x100005b1, 4) , (unique, 0x100005b1, 4) , (stack, 0xffffffffffffffa4, 4)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (unique, 0x100005a9, 8) , (unique, 0x100005a9, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (unique, 0x100005a1, 8) , (unique, 0x100005a1, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (unique, 0x10000599, 8) , (unique, 0x10000599, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (unique, 0x10000591, 8) , (unique, 0x10000591, 8) , (stack, 0xffffffffffffff78, 8)]
[(ram, 0x4c87f8, 4) MULTIEQUAL (unique, 0x1000058d, 4) , (unique, 0x1000058d, 4) , (ram, 0x4c87f8, 4)]
[(ram, 0x4c87c1, 1) MULTIEQUAL (unique, 0x1000058c, 1) , (unique, 0x1000058c, 1) , (ram, 0x4c87c1, 1)]
[(ram, 0x4c87c0, 1) MULTIEQUAL (unique, 0x1000058b, 1) , (unique, 0x1000058b, 1) , (ram, 0x4c87c0, 1)]
[(ram, 0x4c8730, 8) MULTIEQUAL (unique, 0x10000583, 8) , (unique, 0x10000583, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c66c8, 4) MULTIEQUAL (unique, 0x1000057f, 4) , (unique, 0x1000057f, 4) , (ram, 0x4c66c8, 4)]
[(ram, 0x4c6140, 8) MULTIEQUAL (unique, 0x10000567, 8) , (unique, 0x10000567, 8) , (ram, 0x4c6140, 8)]
[(ram, 0x4c6128, 8) MULTIEQUAL (unique, 0x1000055f, 8) , (unique, 0x1000055f, 8) , (ram, 0x4c6128, 8)]
[(unique, 0x10000b13, 8) COPY (ram, 0x4c6180, 8), (ram, 0x4c6180, 8) MULTIEQUAL (unique, 0x10000a9f, 8) , (unique, 0x10000aa7, 8) , (ram, 0x4c6180, 8)]
[(unique, 0x10000b43, 8) COPY (unique, 0x100009af, 8)]
[(unique, 0x10000af3, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000b9b, 8), (unique, 0x10000b9b, 8) INT_ADD (unique, 0x1000056f, 8) , (const, 0x18, 8)]
[(stack, 0xffffffffffffffa4, 4) MULTIEQUAL (stack, 0xffffffffffffffa4, 4) , (unique, 0x100005b1, 4)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (unique, 0x100005a9, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (unique, 0x100005a1, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (unique, 0x10000599, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (unique, 0x10000591, 8)]
[(ram, 0x4c87f8, 4) MULTIEQUAL (ram, 0x4c87f8, 4) , (unique, 0x1000058d, 4)]
[(ram, 0x4c87c1, 1) MULTIEQUAL (ram, 0x4c87c1, 1) , (unique, 0x1000058c, 1)]
[(ram, 0x4c87c0, 1) MULTIEQUAL (ram, 0x4c87c0, 1) , (unique, 0x1000058b, 1)]
[(ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (unique, 0x10000583, 8)]
[(ram, 0x4c66c8, 4) MULTIEQUAL (ram, 0x4c66c8, 4) , (unique, 0x1000057f, 4)]
[(ram, 0x4c6180, 8) MULTIEQUAL (unique, 0x10000ab7, 8) , (unique, 0x10000abf, 8)]
[(ram, 0x4c6140, 8) MULTIEQUAL (ram, 0x4c6140, 8) , (unique, 0x10000567, 8)]
[(ram, 0x4c6128, 8) MULTIEQUAL (ram, 0x4c6128, 8) , (unique, 0x1000055f, 8)]
[(register, 0xa0, 8) MULTIEQUAL (unique, 0x10000a6f, 8) , (unique, 0x10000a77, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x38, 8) , (const, 0x4, 8) , (const, 0x8, 8)]
[(unique, 0x10000945, 8) MULTIEQUAL (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8)]
[(unique, 0x1000094d, 8) MULTIEQUAL (ram, 0x4c6140, 8) , (ram, 0x4c6140, 8)]
[(unique, 0x10000955, 8) MULTIEQUAL (ram, 0x4c6180, 8) , (ram, 0x4c6180, 8)]
[(unique, 0x1000095d, 4) MULTIEQUAL (ram, 0x4c66c8, 4) , (ram, 0x4c66c8, 4)]
[(unique, 0x10000961, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(unique, 0x10000969, 1) MULTIEQUAL (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1)]
[(unique, 0x1000096a, 1) MULTIEQUAL (ram, 0x4c87c1, 1) , (ram, 0x4c87c1, 1)]
[(unique, 0x1000096b, 4) MULTIEQUAL (ram, 0x4c87f8, 4) , (ram, 0x4c87f8, 4)]
[(unique, 0x1000096f, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(unique, 0x10000977, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(unique, 0x1000097f, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(unique, 0x10000987, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(unique, 0x1000098f, 4) MULTIEQUAL (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4)]
[(unique, 0x10000a0f, 8) COPY (unique, 0x1000093c, 8), (unique, 0x1000093c, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8)]
[(unique, 0x10000a3f, 8) COPY (unique, 0x10000993, 8), (unique, 0x10000993, 8) MULTIEQUAL (unique, 0x10000b4b, 8) , (register, 0xa0, 8)]
[(unique, 0x10000a57, 8) COPY (unique, 0x10000993, 8), (unique, 0x10000993, 8) MULTIEQUAL (unique, 0x10000b4b, 8) , (register, 0xa0, 8)]
[ ---  CBRANCH (ram, 0x48d068, 1) , (unique, 0x10000944, 1), (unique, 0x10000944, 1) INT_EQUAL (unique, 0x1000093c, 8) , (const, 0xfffffffffffffffe, 8), (unique, 0x1000093c, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8)]
[(stack, 0xffffffffffffffa4, 4) MULTIEQUAL (unique, 0x1000098f, 4) , (stack, 0xffffffffffffffa4, 4)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (unique, 0x10000987, 8) , (unique, 0xbd80, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (unique, 0x1000097f, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (unique, 0x10000977, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (unique, 0x1000096f, 8) , (stack, 0xffffffffffffff78, 8)]
[(ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0xa92, 4), (ram, 0x4c6128, 8) MULTIEQUAL (unique, 0x10000945, 8) , (ram, 0x4c6128, 8)]
[(ram, 0x4c6140, 8) INDIRECT (ram, 0x4c6140, 8) , (const, 0xa92, 4), (ram, 0x4c6140, 8) MULTIEQUAL (unique, 0x1000094d, 8) , (ram, 0x4c6140, 8)]
[(ram, 0x4c6180, 8) INDIRECT (ram, 0x4c6180, 8) , (const, 0xa92, 4), (ram, 0x4c6180, 8) MULTIEQUAL (unique, 0x10000955, 8) , (ram, 0x4c6180, 8)]
[(ram, 0x4c66c8, 4) INDIRECT (ram, 0x4c66c8, 4) , (const, 0xa92, 4), (ram, 0x4c66c8, 4) MULTIEQUAL (unique, 0x1000095d, 4) , (ram, 0x4c66c8, 4)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0xa92, 4), (ram, 0x4c8730, 8) MULTIEQUAL (unique, 0x10000961, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0xa92, 4), (ram, 0x4c87c0, 1) MULTIEQUAL (unique, 0x10000969, 1) , (ram, 0x4c87c0, 1)]
[(ram, 0x4c87c1, 1) INDIRECT (ram, 0x4c87c1, 1) , (const, 0xa92, 4), (ram, 0x4c87c1, 1) MULTIEQUAL (unique, 0x1000096a, 1) , (ram, 0x4c87c1, 1)]
[(ram, 0x4c87f8, 4) INDIRECT (ram, 0x4c87f8, 4) , (const, 0xa92, 4), (ram, 0x4c87f8, 4) MULTIEQUAL (unique, 0x1000096b, 4) , (ram, 0x4c87f8, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0xbd80, 8), (unique, 0x3100, 8) PTRADD (register, 0x38, 8) , (const, 0x4, 8) , (const, 0x8, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) CAST (unique, 0x10000ba3, 8), (unique, 0x10000ba3, 8) INT_ADD (register, 0xa0, 8) , (const, 0x30, 8), (register, 0xa0, 8) MULTIEQUAL (unique, 0x10000a3f, 8) , (unique, 0x10000a47, 8)]
[(unique, 0x10000a07, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) CAST (unique, 0x10000ba3, 8), (unique, 0x10000ba3, 8) INT_ADD (register, 0xa0, 8) , (const, 0x30, 8), (register, 0xa0, 8) MULTIEQUAL (unique, 0x10000a3f, 8) , (unique, 0x10000a47, 8)]
[(unique, 0x10000a4f, 8) COPY (register, 0xa0, 8), (register, 0xa0, 8) MULTIEQUAL (unique, 0x10000a3f, 8) , (unique, 0x10000a47, 8)]
[ ---  BRANCH (ram, 0x48d068, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000bb3, 8) , (unique, 0xbc80, 4), (unique, 0x10000bb3, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x38, 8) , (const, 0x5, 8) , (const, 0x8, 8), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000bab, 8), (unique, 0x10000bab, 8) CAST (unique, 0x3a00, 8), (unique, 0x3a00, 8) PTRADD (unique, 0x1000072f, 8) , (unique, 0x1000077f, 8) , (const, 0x1, 8), (unique, 0x1000077f, 8) INT_ADD (register, 0x0, 8) , (const, 0x1c, 8), (unique, 0x1000072f, 8) PTRSUB (const, 0x0, 8) , (const, 0x4c6180, 8), (register, 0x0, 8) INT_MULT (register, 0x80, 8) , (const, 0x90, 8), (register, 0x80, 8) MULTIEQUAL (unique, 0x10000a07, 8) , (unique, 0x10000a0f, 8) , (unique, 0x10000a17, 8) , (unique, 0x10000a17, 8)]
[ ---  CALL (ram, 0x458e30, 8) , (const, 0x0, 8) , (register, 0x80, 8), (register, 0x80, 8) MULTIEQUAL (unique, 0x10000a07, 8) , (unique, 0x10000a0f, 8) , (unique, 0x10000a17, 8) , (unique, 0x10000a17, 8)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x105, 4), (stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0xe4, 4), (stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (unique, 0x1000096f, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x105, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0xe4, 4), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (unique, 0x10000977, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x105, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0xe4, 4), (stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (unique, 0x1000097f, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x105, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0xe4, 4), (stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (unique, 0x10000987, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0x105, 4), (stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0xe4, 4), (stack, 0xffffffffffffffa4, 4) MULTIEQUAL (stack, 0xffffffffffffffa4, 4) , (unique, 0x1000098f, 4) , (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4)]
[(ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0x108, 4), (ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0x105, 4), (ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0xe4, 4), (ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0xe1, 4), (ram, 0x4c6128, 8) MULTIEQUAL (ram, 0x4c6128, 8) , (unique, 0x10000945, 8) , (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8)]
[(ram, 0x4c6140, 8) INDIRECT (ram, 0x4c6140, 8) , (const, 0x108, 4), (ram, 0x4c6140, 8) INDIRECT (ram, 0x4c6140, 8) , (const, 0x105, 4), (ram, 0x4c6140, 8) INDIRECT (ram, 0x4c6140, 8) , (const, 0xe4, 4), (ram, 0x4c6140, 8) INDIRECT (ram, 0x4c6140, 8) , (const, 0xe1, 4), (ram, 0x4c6140, 8) MULTIEQUAL (ram, 0x4c6140, 8) , (unique, 0x1000094d, 8) , (ram, 0x4c6140, 8) , (ram, 0x4c6140, 8)]
[(ram, 0x4c6180, 8) INDIRECT (ram, 0x4c6180, 8) , (const, 0x108, 4), (ram, 0x4c6180, 8) INDIRECT (ram, 0x4c6180, 8) , (const, 0x105, 4), (ram, 0x4c6180, 8) INDIRECT (ram, 0x4c6180, 8) , (const, 0xe4, 4), (ram, 0x4c6180, 8) INDIRECT (ram, 0x4c6180, 8) , (const, 0xe1, 4), (ram, 0x4c6180, 8) MULTIEQUAL (ram, 0x4c6180, 8) , (unique, 0x10000955, 8) , (ram, 0x4c6180, 8) , (ram, 0x4c6180, 8)]
[(ram, 0x4c66c8, 4) INDIRECT (ram, 0x4c66c8, 4) , (const, 0x108, 4), (ram, 0x4c66c8, 4) INDIRECT (ram, 0x4c66c8, 4) , (const, 0x105, 4), (ram, 0x4c66c8, 4) INDIRECT (ram, 0x4c66c8, 4) , (const, 0xe4, 4), (ram, 0x4c66c8, 4) INDIRECT (ram, 0x4c66c8, 4) , (const, 0xe1, 4), (ram, 0x4c66c8, 4) MULTIEQUAL (ram, 0x4c66c8, 4) , (unique, 0x1000095d, 4) , (ram, 0x4c66c8, 4) , (ram, 0x4c66c8, 4)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x108, 4), (ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x105, 4), (ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0xe4, 4), (ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0xe1, 4), (ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (unique, 0x10000961, 8) , (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0x108, 4), (ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0x105, 4), (ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0xe4, 4), (ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0xe1, 4), (ram, 0x4c87c0, 1) MULTIEQUAL (ram, 0x4c87c0, 1) , (unique, 0x10000969, 1) , (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1)]
[(ram, 0x4c87c1, 1) INDIRECT (ram, 0x4c87c1, 1) , (const, 0x108, 4), (ram, 0x4c87c1, 1) INDIRECT (ram, 0x4c87c1, 1) , (const, 0x105, 4), (ram, 0x4c87c1, 1) INDIRECT (ram, 0x4c87c1, 1) , (const, 0xe4, 4), (ram, 0x4c87c1, 1) INDIRECT (ram, 0x4c87c1, 1) , (const, 0xe1, 4), (ram, 0x4c87c1, 1) MULTIEQUAL (ram, 0x4c87c1, 1) , (unique, 0x1000096a, 1) , (ram, 0x4c87c1, 1) , (ram, 0x4c87c1, 1)]
[(ram, 0x4c87f8, 4) INDIRECT (ram, 0x4c87f8, 4) , (const, 0x108, 4), (ram, 0x4c87f8, 4) INDIRECT (ram, 0x4c87f8, 4) , (const, 0x105, 4), (ram, 0x4c87f8, 4) INDIRECT (ram, 0x4c87f8, 4) , (const, 0xe4, 4), (ram, 0x4c87f8, 4) INDIRECT (ram, 0x4c87f8, 4) , (const, 0xe1, 4), (ram, 0x4c87f8, 4) MULTIEQUAL (ram, 0x4c87f8, 4) , (unique, 0x1000096b, 4) , (ram, 0x4c87f8, 4) , (ram, 0x4c87f8, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (register, 0x0, 8), (unique, 0x3100, 8) PTRADD (register, 0x38, 8) , (const, 0x3, 8) , (const, 0x8, 8), (register, 0x0, 8) CALL (ram, 0x47fe90, 8) , (register, 0xa0, 8) , (unique, 0xbd80, 8) , (const, 0x2, 8) , (const, 0x0, 8) , (register, 0x80, 4) , (unique, 0xbd80, 8), (register, 0x80, 4) INT_OR (stack, 0xffffffffffffffa4, 4) , (const, 0x10000000, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x38, 8) , (const, 0x4, 8) , (const, 0x8, 8), (stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0xe4, 4), (register, 0xa0, 8) MULTIEQUAL (unique, 0x10000a4f, 8) , (unique, 0x10000a57, 8) , (unique, 0x10000a5f, 8) , (unique, 0x10000a67, 8), (stack, 0xffffffffffffffa4, 4) MULTIEQUAL (stack, 0xffffffffffffffa4, 4) , (unique, 0x1000098f, 4) , (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4)]
[ ---  CBRANCH (ram, 0x48d4e0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x47fe90, 8) , (register, 0xa0, 8) , (unique, 0xbd80, 8) , (const, 0x2, 8) , (const, 0x0, 8) , (register, 0x80, 4) , (unique, 0xbd80, 8), (register, 0x80, 4) INT_OR (stack, 0xffffffffffffffa4, 4) , (const, 0x10000000, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x38, 8) , (const, 0x4, 8) , (const, 0x8, 8), (stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0xe4, 4), (register, 0xa0, 8) MULTIEQUAL (unique, 0x10000a4f, 8) , (unique, 0x10000a57, 8) , (unique, 0x10000a5f, 8) , (unique, 0x10000a67, 8), (stack, 0xffffffffffffffa4, 4) MULTIEQUAL (stack, 0xffffffffffffffa4, 4) , (unique, 0x1000098f, 4) , (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4)]
[ ---  CBRANCH (ram, 0x48d40a, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x10000540, 4) , (const, 0x0, 4), (unique, 0x10000540, 4) INT_AND (stack, 0xffffffffffffffa4, 4) , (const, 0x4, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0xa8a, 4)]
[(stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0xa8a, 4)]
[ ---  CALL (ram, 0x403170, 8) , (unique, 0x100006a7, 8) , (unique, 0x10000677, 8) , (const, 0x208, 4) , (unique, 0x10000707, 8), (unique, 0x10000707, 8) COPY (const, 0x4b5478, 8), (unique, 0x100006a7, 8) COPY (const, 0x4b5206, 8), (unique, 0x10000677, 8) COPY (const, 0x4b5192, 8)]
[(ram, 0x4c6128, 8) COPY (ram, 0x4c6128, 8), (ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0xa8a, 4)]
[(ram, 0x4c6140, 8) COPY (ram, 0x4c6140, 8), (ram, 0x4c6140, 8) INDIRECT (ram, 0x4c6140, 8) , (const, 0xa8a, 4)]
[(ram, 0x4c6180, 8) COPY (ram, 0x4c6180, 8), (ram, 0x4c6180, 8) INDIRECT (ram, 0x4c6180, 8) , (const, 0xa8a, 4)]
[(ram, 0x4c66c8, 4) COPY (ram, 0x4c66c8, 4), (ram, 0x4c66c8, 4) INDIRECT (ram, 0x4c66c8, 4) , (const, 0xa8a, 4)]
[(ram, 0x4c8730, 8) COPY (ram, 0x4c8730, 8), (ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0xa8a, 4)]
[(ram, 0x4c87c0, 1) COPY (ram, 0x4c87c0, 1), (ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0xa8a, 4)]
[(ram, 0x4c87c1, 1) COPY (ram, 0x4c87c1, 1), (ram, 0x4c87c1, 1) INDIRECT (ram, 0x4c87c1, 1) , (const, 0xa8a, 4)]
[(ram, 0x4c87f8, 4) COPY (ram, 0x4c87f8, 4), (ram, 0x4c87f8, 4) INDIRECT (ram, 0x4c87f8, 4) , (const, 0xa8a, 4)]
[ ---  RETURN (const, 0x1, 4)]
[(ram, 0x4c6128, 8) COPY (ram, 0x4c6128, 8)]
[(ram, 0x4c6140, 8) COPY (ram, 0x4c6140, 8)]
[(ram, 0x4c6180, 8) COPY (ram, 0x4c6180, 8)]
[(ram, 0x4c66c8, 4) COPY (ram, 0x4c66c8, 4)]
[(ram, 0x4c8730, 8) COPY (ram, 0x4c8730, 8)]
[(ram, 0x4c87c0, 1) COPY (ram, 0x4c87c0, 1)]
[(ram, 0x4c87c1, 1) COPY (ram, 0x4c87c1, 1)]
[(ram, 0x4c87f8, 4) COPY (ram, 0x4c87f8, 4)]
[ ---  RETURN (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x48d40a, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x58a00, 4) , (const, 0x0, 4), (unique, 0x58a00, 4) INT_AND (stack, 0xffffffffffffffa4, 4) , (const, 0x40000000, 4)]
[(ram, 0x4c6128, 8) COPY (ram, 0x4c6128, 8)]
[(ram, 0x4c6140, 8) COPY (ram, 0x4c6140, 8)]
[(ram, 0x4c6180, 8) COPY (ram, 0x4c6180, 8)]
[(ram, 0x4c66c8, 4) COPY (ram, 0x4c66c8, 4)]
[(ram, 0x4c8730, 8) COPY (ram, 0x4c8730, 8)]
[(ram, 0x4c87c0, 1) COPY (ram, 0x4c87c0, 1)]
[(ram, 0x4c87c1, 1) COPY (ram, 0x4c87c1, 1)]
[(ram, 0x4c87f8, 4) COPY (ram, 0x4c87f8, 4)]
[ ---  RETURN (const, 0x0, 8)]
[(register, 0x0, 4) INT_AND (stack, 0xffffffffffffffa4, 4) , (const, 0x1000, 4)]
[(ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0x14c, 4)]
[(ram, 0x4c6140, 8) INDIRECT (ram, 0x4c6140, 8) , (const, 0x14c, 4)]
[(ram, 0x4c6180, 8) INDIRECT (ram, 0x4c6180, 8) , (const, 0x14c, 4)]
[(ram, 0x4c66c8, 4) INDIRECT (ram, 0x4c66c8, 4) , (const, 0x14c, 4)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x14c, 4)]
[(ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0x14c, 4)]
[(ram, 0x4c87c1, 1) INDIRECT (ram, 0x4c87c1, 1) , (const, 0x14c, 4)]
[(ram, 0x4c87f8, 4) INDIRECT (ram, 0x4c87f8, 4) , (const, 0x14c, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3200, 8) , (register, 0x8, 4), (unique, 0x3200, 8) CAST (unique, 0x10000bcb, 8), (unique, 0x10000bcb, 8) INT_ADD (register, 0x0, 8) , (const, 0x318, 8), (register, 0x8, 4) INT_ADD (unique, 0xbc80, 4) , (const, 0x1, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x10000bbb, 8), (unique, 0x10000bbb, 8) INT_ADD (register, 0x0, 8) , (const, 0x318, 8)]
[ ---  CBRANCH (ram, 0x48d870, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbe00, 8) , (const, 0x0, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x10000bc3, 8), (unique, 0x10000bc3, 8) INT_ADD (register, 0x0, 8) , (const, 0x2c0, 8)]
[ ---  CBRANCH (ram, 0x48d8f0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4)]
[(ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0x97b, 4)]
[(ram, 0x4c6140, 8) INDIRECT (ram, 0x4c6140, 8) , (const, 0x97b, 4)]
[(ram, 0x4c6180, 8) INDIRECT (ram, 0x4c6180, 8) , (const, 0x97b, 4)]
[(ram, 0x4c66c8, 4) INDIRECT (ram, 0x4c66c8, 4) , (const, 0x97b, 4)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x97b, 4)]
[(ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0x97b, 4)]
[(ram, 0x4c87c1, 1) INDIRECT (ram, 0x4c87c1, 1) , (const, 0x97b, 4)]
[(ram, 0x4c87f8, 4) INDIRECT (ram, 0x4c87f8, 4) , (const, 0x97b, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3200, 8) , (const, 0x1, 1), (unique, 0x3200, 8) CAST (unique, 0x10000bd3, 8), (unique, 0x10000bd3, 8) INT_ADD (register, 0x0, 8) , (const, 0x320, 8)]
[ ---  BRANCH (ram, 0x48d0f6, 1)]
[(register, 0xa0, 4) COPY (const, 0x0, 4)]
[(ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0x193, 4), (ram, 0x4c6128, 8) MULTIEQUAL (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8)]
[(ram, 0x4c6140, 8) INDIRECT (ram, 0x4c6140, 8) , (const, 0x193, 4), (ram, 0x4c6140, 8) MULTIEQUAL (ram, 0x4c6140, 8) , (ram, 0x4c6140, 8)]
[(ram, 0x4c6180, 8) INDIRECT (ram, 0x4c6180, 8) , (const, 0x193, 4), (ram, 0x4c6180, 8) MULTIEQUAL (ram, 0x4c6180, 8) , (ram, 0x4c6180, 8)]
[(ram, 0x4c66c8, 4) INDIRECT (ram, 0x4c66c8, 4) , (const, 0x193, 4), (ram, 0x4c66c8, 4) MULTIEQUAL (ram, 0x4c66c8, 4) , (ram, 0x4c66c8, 4)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x193, 4), (ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0x193, 4), (ram, 0x4c87c0, 1) MULTIEQUAL (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1)]
[(ram, 0x4c87c1, 1) INDIRECT (ram, 0x4c87c1, 1) , (const, 0x193, 4), (ram, 0x4c87c1, 1) MULTIEQUAL (ram, 0x4c87c1, 1) , (ram, 0x4c87c1, 1)]
[(ram, 0x4c87f8, 4) INDIRECT (ram, 0x4c87f8, 4) , (const, 0x193, 4), (ram, 0x4c87f8, 4) MULTIEQUAL (ram, 0x4c87f8, 4) , (ram, 0x4c87f8, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x193, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x193, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x193, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x193, 4)]
[(stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0x193, 4)]
[ ---  CALL (ram, 0x490140, 8) , (register, 0x0, 8) , (const, 0x0, 8) , (const, 0x0, 8) , (const, 0x0, 8) , (register, 0x80, 4), (register, 0x80, 4) INT_AND (stack, 0xffffffffffffffa4, 4) , (const, 0x88000008, 4)]
[ ---  CBRANCH (ram, 0x48d146, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x10000bdb, 8), (unique, 0x10000bdb, 8) INT_ADD (register, 0x0, 8) , (const, 0x2c8, 8)]
[(stack, 0xffffffffffffffa4, 4) MULTIEQUAL (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(ram, 0x4c87f8, 4) MULTIEQUAL (ram, 0x4c87f8, 4) , (ram, 0x4c87f8, 4)]
[(ram, 0x4c87c1, 1) MULTIEQUAL (ram, 0x4c87c1, 1) , (ram, 0x4c87c1, 1)]
[(ram, 0x4c87c0, 1) MULTIEQUAL (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1)]
[(ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c66c8, 4) MULTIEQUAL (ram, 0x4c66c8, 4) , (ram, 0x4c66c8, 4)]
[(ram, 0x4c6180, 8) MULTIEQUAL (ram, 0x4c6180, 8) , (ram, 0x4c6180, 8)]
[(ram, 0x4c6140, 8) MULTIEQUAL (ram, 0x4c6140, 8) , (ram, 0x4c6140, 8)]
[(ram, 0x4c6128, 8) MULTIEQUAL (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8)]
[(register, 0xa0, 4) MULTIEQUAL (register, 0xa0, 4) , (register, 0xa0, 4)]
[(register, 0x10, 4) MULTIEQUAL (unique, 0xbc80, 4) , (unique, 0xbc80, 4)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x10000be3, 8), (unique, 0x10000be3, 8) INT_ADD (register, 0x0, 8) , (const, 0x2c0, 8)]
[ ---  CBRANCH (ram, 0x48d420, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbe00, 8) , (const, 0x0, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x10000bfb, 8), (unique, 0x10000bfb, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x2e8, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000bf3, 8), (unique, 0x10000bf3, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x28, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) CAST (unique, 0x10000beb, 8), (unique, 0x10000beb, 8) INT_ADD (unique, 0xbd80, 8) , (unique, 0x3300, 8), (unique, 0x3300, 8) INT_MULT (register, 0x0, 8) , (const, 0x8, 8), (register, 0x0, 8) INT_ZEXT (register, 0xa0, 4), (register, 0xa0, 4) MULTIEQUAL (register, 0xa0, 4) , (register, 0xa0, 4)]
[ ---  CBRANCH (ram, 0x48d124, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESSEQUAL (register, 0x10, 4) , (register, 0xa0, 4), (register, 0xa0, 4) INT_ADD (register, 0xa0, 4) , (const, 0x1, 4)]
[(ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0x969, 4)]
[(ram, 0x4c6140, 8) INDIRECT (ram, 0x4c6140, 8) , (const, 0x969, 4)]
[(ram, 0x4c6180, 8) INDIRECT (ram, 0x4c6180, 8) , (const, 0x969, 4)]
[(ram, 0x4c66c8, 4) INDIRECT (ram, 0x4c66c8, 4) , (const, 0x969, 4)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x969, 4)]
[(ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0x969, 4)]
[(ram, 0x4c87c1, 1) INDIRECT (ram, 0x4c87c1, 1) , (const, 0x969, 4)]
[(ram, 0x4c87f8, 4) INDIRECT (ram, 0x4c87f8, 4) , (const, 0x969, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x969, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x969, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x969, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x969, 4)]
[(stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0x969, 4)]
[ ---  CALL (ram, 0x4915d0, 8) , (unique, 0xbd80, 8) , (const, 0x0, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x48d11d, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (register, 0xa0, 4) , (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x10000c03, 8), (unique, 0x10000c03, 8) INT_ADD (register, 0x0, 8) , (const, 0x2c8, 8), (register, 0xa0, 4) INT_ADD (register, 0xa0, 4) , (const, 0x1, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x1df, 4), (stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (const, 0x0, 4), (unique, 0x3100, 8) CAST (unique, 0x10000c0b, 8), (unique, 0x10000c0b, 8) INT_ADD (register, 0x0, 8) , (const, 0x18, 8), (register, 0x0, 8) CALL (ram, 0x458e30, 8) , (const, 0x0, 8)]
[ ---  CALL (ram, 0x458e20, 8)]
[(ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0x1ed, 4), (ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0x1e9, 4), (ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0x1e2, 4), (ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0x1df, 4), (ram, 0x4c6128, 8) MULTIEQUAL (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8)]
[(ram, 0x4c6140, 8) INDIRECT (ram, 0x4c6140, 8) , (const, 0x1ed, 4), (ram, 0x4c6140, 8) INDIRECT (ram, 0x4c6140, 8) , (const, 0x1e9, 4), (ram, 0x4c6140, 8) INDIRECT (ram, 0x4c6140, 8) , (const, 0x1e2, 4), (ram, 0x4c6140, 8) INDIRECT (ram, 0x4c6140, 8) , (const, 0x1df, 4), (ram, 0x4c6140, 8) MULTIEQUAL (ram, 0x4c6140, 8) , (ram, 0x4c6140, 8) , (ram, 0x4c6140, 8)]
[(ram, 0x4c6180, 8) INDIRECT (ram, 0x4c6180, 8) , (const, 0x1ed, 4), (ram, 0x4c6180, 8) INDIRECT (ram, 0x4c6180, 8) , (const, 0x1e9, 4), (ram, 0x4c6180, 8) INDIRECT (ram, 0x4c6180, 8) , (const, 0x1e2, 4), (ram, 0x4c6180, 8) INDIRECT (ram, 0x4c6180, 8) , (const, 0x1df, 4), (ram, 0x4c6180, 8) MULTIEQUAL (ram, 0x4c6180, 8) , (ram, 0x4c6180, 8) , (ram, 0x4c6180, 8)]
[(ram, 0x4c66c8, 4) INDIRECT (ram, 0x4c66c8, 4) , (const, 0x1ed, 4), (ram, 0x4c66c8, 4) INDIRECT (ram, 0x4c66c8, 4) , (const, 0x1e9, 4), (ram, 0x4c66c8, 4) INDIRECT (ram, 0x4c66c8, 4) , (const, 0x1e2, 4), (ram, 0x4c66c8, 4) INDIRECT (ram, 0x4c66c8, 4) , (const, 0x1df, 4), (ram, 0x4c66c8, 4) MULTIEQUAL (ram, 0x4c66c8, 4) , (ram, 0x4c66c8, 4) , (ram, 0x4c66c8, 4)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x1ed, 4), (ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x1e9, 4), (ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x1e2, 4), (ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x1df, 4), (ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0x1ed, 4), (ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0x1e9, 4), (ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0x1e2, 4), (ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0x1df, 4), (ram, 0x4c87c0, 1) MULTIEQUAL (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1)]
[(ram, 0x4c87f8, 4) INDIRECT (ram, 0x4c87f8, 4) , (const, 0x1ed, 4), (ram, 0x4c87f8, 4) INDIRECT (ram, 0x4c87f8, 4) , (const, 0x1e9, 4), (ram, 0x4c87f8, 4) INDIRECT (ram, 0x4c87f8, 4) , (const, 0x1e2, 4), (ram, 0x4c87f8, 4) INDIRECT (ram, 0x4c87f8, 4) , (const, 0x1df, 4), (ram, 0x4c87f8, 4) MULTIEQUAL (ram, 0x4c87f8, 4) , (ram, 0x4c87f8, 4) , (ram, 0x4c87f8, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x1ed, 4), (stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x1e9, 4), (stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x1df, 4), (stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x1ed, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x1e9, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x1df, 4), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x1ed, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x1e9, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x1df, 4), (stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x1ed, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (register, 0x0, 8) , (const, 0x1e9, 4), (register, 0x0, 8) CALL (ram, 0x458e30, 8) , (const, 0x0, 8)]
[(stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0x1ed, 4), (stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0x1e9, 4), (stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0x1df, 4), (stack, 0xffffffffffffffa4, 4) MULTIEQUAL (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4)]
[ ---  CALL (ram, 0x48f2e0, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x48d8e0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x58c00, 1) , (const, 0x0, 1), (unique, 0x58c00, 1) INT_AND (ram, 0x4c87c1, 1) , (const, 0x2, 1), (ram, 0x4c87c1, 1) INDIRECT (ram, 0x4c87c1, 1) , (const, 0x1ed, 4), (ram, 0x4c87c1, 1) INDIRECT (ram, 0x4c87c1, 1) , (const, 0x1e9, 4), (ram, 0x4c87c1, 1) INDIRECT (ram, 0x4c87c1, 1) , (const, 0x1e2, 4), (ram, 0x4c87c1, 1) INDIRECT (ram, 0x4c87c1, 1) , (const, 0x1df, 4), (ram, 0x4c87c1, 1) MULTIEQUAL (ram, 0x4c87c1, 1) , (ram, 0x4c87c1, 1) , (ram, 0x4c87c1, 1)]
[(ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0x947, 4)]
[(ram, 0x4c6140, 8) INDIRECT (ram, 0x4c6140, 8) , (const, 0x947, 4)]
[(ram, 0x4c6180, 8) INDIRECT (ram, 0x4c6180, 8) , (const, 0x947, 4)]
[(ram, 0x4c66c8, 4) INDIRECT (ram, 0x4c66c8, 4) , (const, 0x947, 4)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x947, 4)]
[(ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0x947, 4)]
[(ram, 0x4c87c1, 1) INDIRECT (ram, 0x4c87c1, 1) , (const, 0x947, 4)]
[(ram, 0x4c87f8, 4) INDIRECT (ram, 0x4c87f8, 4) , (const, 0x947, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x947, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x947, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x947, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x947, 4)]
[(stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0x947, 4)]
[ ---  CALL (ram, 0x48ce80, 8) , (register, 0x0, 8)]
[ ---  BRANCH (ram, 0x48d17a, 1)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(ram, 0x4c87c1, 1) MULTIEQUAL (ram, 0x4c87c1, 1) , (ram, 0x4c87c1, 1)]
[(ram, 0x4c87c0, 1) MULTIEQUAL (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1)]
[(ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c66c8, 4) MULTIEQUAL (ram, 0x4c66c8, 4) , (ram, 0x4c66c8, 4)]
[(ram, 0x4c6180, 8) MULTIEQUAL (ram, 0x4c6180, 8) , (ram, 0x4c6180, 8)]
[(ram, 0x4c6140, 8) MULTIEQUAL (ram, 0x4c6140, 8) , (ram, 0x4c6140, 8)]
[(ram, 0x4c6128, 8) MULTIEQUAL (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8)]
[(register, 0xb8, 4) INT_AND (stack, 0xffffffffffffffa4, 4) , (const, 0x8000001, 4), (stack, 0xffffffffffffffa4, 4) MULTIEQUAL (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4)]
[ ---  CBRANCH (ram, 0x48d478, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4c87f8, 4) , (const, 0x0, 4), (ram, 0x4c87f8, 4) MULTIEQUAL (ram, 0x4c87f8, 4) , (ram, 0x4c87f8, 4)]
[(register, 0x0, 4) INT_AND (stack, 0xffffffffffffffa4, 4) , (const, 0x8000000, 4)]
[ ---  BRANCH (ram, 0x48d195, 1)]
[(register, 0xb8, 4) MULTIEQUAL (register, 0xb8, 4) , (register, 0x0, 4)]
[(register, 0x8, 8) COPY (const, 0x0, 8)]
[(unique, 0x100009d7, 8) COPY (register, 0x0, 8)]
[(register, 0x8, 8) INT_ZEXT (register, 0x8, 4), (register, 0x8, 4) INT_ADD (register, 0x8, 4) , (unique, 0x12080, 4), (register, 0x8, 4) SUBPIECE (register, 0x8, 8) , (const, 0x0, 4), (unique, 0x12080, 4) INT_ZEXT (register, 0x200, 1), (register, 0x200, 1) INT_EQUAL (register, 0x10, 1) , (const, 0x0, 1), (register, 0x10, 1) INT_AND (unique, 0xbb00, 1) , (const, 0x4, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x10000c23, 8), (unique, 0x10000c23, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x31c, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000c13, 8), (unique, 0x10000c13, 8) INT_ADD (register, 0x0, 8) , (const, 0x28, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x100009d7, 8) , (unique, 0xbd80, 8), (register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8)]
[ ---  CBRANCH (ram, 0x48d1a0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000c1b, 8), (unique, 0x10000c1b, 8) INT_ADD (register, 0x0, 8) , (const, 0x18, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x100009d7, 8) , (unique, 0xbd80, 8)]
[(unique, 0x100004bc, 4) SUBPIECE (unique, 0x3580, 8) , (const, 0x0, 4), (unique, 0x3580, 8) INT_ADD (unique, 0x3480, 8) , (const, 0xf, 8), (unique, 0x3480, 8) INT_MULT (register, 0x8, 8) , (const, 0x8, 8)]
[(register, 0x8, 8) CAST (unique, 0x10000c33, 8), (unique, 0x10000c33, 8) INT_SUB (unique, 0x10000c2b, 8) , (register, 0x10, 8), (unique, 0x10000c2b, 8) CAST (unique, 0x100007a7, 8), (unique, 0x100007a7, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff78, 8), (register, 0x10, 8) INT_AND (unique, 0x3580, 8) , (const, 0xfffffffffffff000, 8), (unique, 0x3580, 8) INT_ADD (unique, 0x3480, 8) , (const, 0xf, 8), (unique, 0x3480, 8) INT_MULT (register, 0x8, 8) , (const, 0x8, 8)]
[(unique, 0x10000b33, 8) COPY (register, 0x20, 8)]
[(unique, 0x100005be, 8) MULTIEQUAL (unique, 0x10000b33, 8) , (unique, 0x10000b3b, 8)]
[(unique, 0x100005c6, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x48d1fe, 1) , (unique, 0x100005b5, 1), (unique, 0x100005b5, 1) INT_NOTEQUAL (register, 0x20, 8) , (register, 0x8, 8), (register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8)]
[(register, 0x20, 8) CAST (unique, 0x10000c43, 8), (unique, 0x10000c43, 8) INT_ADD (unique, 0x10000c3b, 8) , (const, 0xfffffffffffff000, 8), (unique, 0x10000c3b, 8) CAST (unique, 0x100005be, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3c80, 8) , (unique, 0xbe00, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3c80, 8), (unique, 0x3c80, 8) CAST (unique, 0x10000c63, 8), (unique, 0x10000c63, 8) INT_ADD (unique, 0x10000c5b, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x10000c5b, 8) CAST (unique, 0x100005be, 8)]
[(register, 0x20, 8) CAST (unique, 0x10000c73, 8), (unique, 0x10000c73, 8) INT_ADD (unique, 0x10000c6b, 8) , (const, 0xfffffffffffff000, 8), (unique, 0x10000c6b, 8) CAST (unique, 0x100005be, 8)]
[(unique, 0x10000b3b, 8) COPY (register, 0x20, 8), (register, 0x20, 8) CAST (unique, 0x10000c53, 8), (unique, 0x10000c53, 8) INT_ADD (unique, 0x10000c4b, 8) , (const, 0xfffffffffffff000, 8), (unique, 0x10000c4b, 8) CAST (unique, 0x100005be, 8)]
[(register, 0x20, 8) CAST (unique, 0x10000c83, 8), (unique, 0x10000c83, 8) INT_ADD (unique, 0x10000c7b, 8) , (unique, 0x10000261, 8), (unique, 0x10000c7b, 8) CAST (unique, 0x100005c6, 8), (unique, 0x10000261, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_ZEXT (register, 0x0, 4), (register, 0x0, 4) INT_AND (unique, 0x100004bc, 4) , (const, 0xff0, 4)]
[ ---  CBRANCH (ram, 0x48d211, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) INT_ZEXT (register, 0x0, 4), (register, 0x0, 4) INT_AND (unique, 0x100004bc, 4) , (const, 0xff0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3880, 8) , (unique, 0xbe00, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3880, 8), (unique, 0x3880, 8) CAST (unique, 0x10000c93, 8), (unique, 0x10000c93, 8) INT_ADD (unique, 0x10000c8b, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x10000c8b, 8) CAST (unique, 0x100005c6, 8)]
[(register, 0x10, 8) COPY (const, 0x0, 8)]
[(unique, 0x100009cf, 8) COPY (register, 0x0, 8)]
[(register, 0x10, 8) MULTIEQUAL (register, 0x10, 8) , (unique, 0x100005d7, 8)]
[(unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x10000ca3, 8), (unique, 0x10000ca3, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x31c, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000c9b, 8), (unique, 0x10000c9b, 8) INT_ADD (register, 0x0, 8) , (const, 0x28, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x100009cf, 8) , (unique, 0xbd80, 8)]
[(unique, 0x100005cf, 8) MULTIEQUAL (register, 0x0, 8) , (unique, 0xbd80, 8)]
[(unique, 0x100005d7, 8) MULTIEQUAL (register, 0x10, 8) , (register, 0x30, 8)]
[ ---  CBRANCH (ram, 0x48d24c, 1) , (unique, 0x100005ce, 1), (unique, 0x100005ce, 1) INT_EQUAL (unique, 0x58c00, 1) , (const, 0x0, 1), (unique, 0x58c00, 1) INT_AND (unique, 0xbb00, 1) , (const, 0x4, 1), (unique, 0xbb00, 1) MULTIEQUAL (unique, 0xbb00, 1) , (unique, 0xbb00, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3400, 8) , (unique, 0x100005cf, 8), (unique, 0x3400, 8) CAST (unique, 0x10000cb3, 8), (unique, 0x10000cb3, 8) INT_ADD (unique, 0x10000cab, 8) , (unique, 0x100007bf, 8), (unique, 0x10000cab, 8) CAST (unique, 0x100005c6, 8), (unique, 0x100007bf, 8) INT_ADD (unique, 0x3300, 8) , (unique, 0x10000261, 8), (unique, 0x3300, 8) INT_MULT (unique, 0x100005d7, 8) , (const, 0x8, 8)]
[(register, 0x30, 8) INT_ZEXT (register, 0x30, 4), (register, 0x30, 4) INT_ADD (unique, 0x10000271, 4) , (const, 0x1, 4), (unique, 0x10000271, 4) SUBPIECE (unique, 0x100005d7, 8) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x48d257, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000cbb, 8), (unique, 0x10000cbb, 8) INT_ADD (unique, 0x100005cf, 8) , (const, 0x18, 8)]
[(unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x10000ccb, 8), (unique, 0x10000ccb, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x31c, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000cc3, 8), (unique, 0x10000cc3, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x28, 8)]
[ ---  CBRANCH (ram, 0x48d220, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000cd3, 8), (unique, 0x10000cd3, 8) INT_ADD (unique, 0x100005cf, 8) , (const, 0x18, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x48d266, 8), (register, 0x20, 8) CAST (unique, 0x10000ce3, 8), (unique, 0x10000ce3, 8) INT_ADD (unique, 0x10000cdb, 8) , (unique, 0x100007b7, 8), (unique, 0x10000cdb, 8) CAST (unique, 0x100005c6, 8), (unique, 0x100007b7, 8) INT_ADD (unique, 0x10000261, 8) , (const, 0xfffffffffffffff8, 8)]
[(ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0x385, 4)]
[(ram, 0x4c6140, 8) INDIRECT (ram, 0x4c6140, 8) , (const, 0x385, 4)]
[(ram, 0x4c6180, 8) INDIRECT (ram, 0x4c6180, 8) , (const, 0x385, 4)]
[(ram, 0x4c66c8, 4) INDIRECT (ram, 0x4c66c8, 4) , (const, 0x385, 4)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x385, 4)]
[(ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0x385, 4)]
[(ram, 0x4c87c1, 1) INDIRECT (ram, 0x4c87c1, 1) , (const, 0x385, 4)]
[(ram, 0x4c87f8, 4) INDIRECT (ram, 0x4c87f8, 4) , (const, 0x385, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x385, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x385, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x385, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (register, 0x20, 8) , (const, 0x385, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x385, 4)]
[(stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0x385, 4)]
[ ---  CALL (ram, 0x48eda0, 8) , (register, 0x20, 8) , (register, 0x30, 8) , (const, 0x0, 8), (register, 0x30, 8) MULTIEQUAL (register, 0x30, 8) , (unique, 0x100005d7, 8)]
[(register, 0xa8, 4) INT_SUB (stack, 0xffffffffffffffa0, 4) , (const, 0x1, 4), (stack, 0xffffffffffffffa0, 4) INDIRECT (register, 0x30, 4) , (const, 0x385, 4), (register, 0x30, 4) SUBPIECE (register, 0x30, 8) , (const, 0x0, 4), (register, 0x30, 8) MULTIEQUAL (register, 0x30, 8) , (unique, 0x100005d7, 8)]
[ ---  CBRANCH (ram, 0x48d8d0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffffa0, 4) , (const, 0x0, 4), (stack, 0xffffffffffffffa0, 4) INDIRECT (register, 0x30, 4) , (const, 0x385, 4), (register, 0x30, 4) SUBPIECE (register, 0x30, 8) , (const, 0x0, 4), (register, 0x30, 8) MULTIEQUAL (register, 0x30, 8) , (unique, 0x100005d7, 8)]
[(stack, 0xffffffffffffffa0, 4) COPY (const, 0x0, 4)]
[ ---  BRANCH (ram, 0x48d2a9, 1)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) CAST (unique, 0x10000cf3, 8), (unique, 0x10000cf3, 8) INT_ADD (unique, 0x10000ceb, 8) , (unique, 0x100007c7, 8), (unique, 0x10000ceb, 8) CAST (unique, 0x100005c6, 8), (unique, 0x100007c7, 8) INT_ADD (unique, 0x3300, 8) , (unique, 0x10000261, 8), (unique, 0x3300, 8) INT_MULT (register, 0x10, 8) , (const, 0x8, 8), (register, 0x10, 8) INT_ZEXT (register, 0xa8, 4)]
[ ---  BRANCH (ram, 0x48d287, 1)]
[(register, 0xa8, 8) INT_ZEXT (register, 0xa8, 4), (register, 0xa8, 4) INT_SUB (register, 0xa8, 4) , (const, 0x1, 4), (register, 0xa8, 4) MULTIEQUAL (register, 0xa8, 4) , (register, 0xa8, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x48d29c, 8), (register, 0x20, 8) CAST (unique, 0x10000d0b, 8), (unique, 0x10000d0b, 8) INT_ADD (unique, 0x10000d03, 8) , (unique, 0x100007d7, 8), (unique, 0x10000d03, 8) CAST (unique, 0x100005c6, 8), (unique, 0x100007d7, 8) INT_ADD (unique, 0x10000261, 8) , (const, 0xfffffffffffffff8, 8)]
[(ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0x3b9, 4), (ram, 0x4c6128, 8) MULTIEQUAL (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8)]
[(ram, 0x4c6140, 8) INDIRECT (ram, 0x4c6140, 8) , (const, 0x3b9, 4), (ram, 0x4c6140, 8) MULTIEQUAL (ram, 0x4c6140, 8) , (ram, 0x4c6140, 8)]
[(ram, 0x4c6180, 8) INDIRECT (ram, 0x4c6180, 8) , (const, 0x3b9, 4), (ram, 0x4c6180, 8) MULTIEQUAL (ram, 0x4c6180, 8) , (ram, 0x4c6180, 8)]
[(ram, 0x4c66c8, 4) INDIRECT (ram, 0x4c66c8, 4) , (const, 0x3b9, 4), (ram, 0x4c66c8, 4) MULTIEQUAL (ram, 0x4c66c8, 4) , (ram, 0x4c66c8, 4)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x3b9, 4), (ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0x3b9, 4), (ram, 0x4c87c0, 1) MULTIEQUAL (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1)]
[(ram, 0x4c87c1, 1) INDIRECT (ram, 0x4c87c1, 1) , (const, 0x3b9, 4), (ram, 0x4c87c1, 1) MULTIEQUAL (ram, 0x4c87c1, 1) , (ram, 0x4c87c1, 1)]
[(ram, 0x4c87f8, 4) INDIRECT (ram, 0x4c87f8, 4) , (const, 0x3b9, 4), (ram, 0x4c87f8, 4) MULTIEQUAL (ram, 0x4c87f8, 4) , (ram, 0x4c87f8, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x3b9, 4), (stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x3b9, 4), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x3b9, 4), (stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x3b9, 4), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x3b9, 4), (stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffffa0, 4) INDIRECT (stack, 0xffffffffffffffa0, 4) , (const, 0x3b9, 4), (stack, 0xffffffffffffffa0, 4) MULTIEQUAL (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4)]
[(stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0x3b9, 4), (stack, 0xffffffffffffffa4, 4) MULTIEQUAL (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4)]
[ ---  CALL (ram, 0x482a50, 8) , (register, 0x38, 8) , (unique, 0xbd80, 8) , (register, 0xb8, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x10000cfb, 8), (unique, 0x10000cfb, 8) INT_ADD (register, 0x38, 8) , (const, 0x390, 8), (register, 0x38, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8)]
[ ---  CBRANCH (ram, 0x48d280, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xa8, 4) , (const, 0xffffffff, 4), (register, 0xa8, 4) INT_SUB (register, 0xa8, 4) , (const, 0x1, 4), (register, 0xa8, 4) MULTIEQUAL (register, 0xa8, 4) , (register, 0xa8, 4)]
[(stack, 0xffffffffffffffa0, 4) COPY (const, 0x1, 4)]
[(stack, 0xffffffffffffffa4, 4) MULTIEQUAL (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4)]
[(stack, 0xffffffffffffffa0, 4) MULTIEQUAL (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(ram, 0x4c87f8, 4) MULTIEQUAL (ram, 0x4c87f8, 4) , (ram, 0x4c87f8, 4)]
[(ram, 0x4c87c1, 1) MULTIEQUAL (ram, 0x4c87c1, 1) , (ram, 0x4c87c1, 1)]
[(ram, 0x4c87c0, 1) MULTIEQUAL (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1)]
[(ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c66c8, 4) MULTIEQUAL (ram, 0x4c66c8, 4) , (ram, 0x4c66c8, 4)]
[(ram, 0x4c6180, 8) MULTIEQUAL (ram, 0x4c6180, 8) , (ram, 0x4c6180, 8)]
[(ram, 0x4c6140, 8) MULTIEQUAL (ram, 0x4c6140, 8) , (ram, 0x4c6140, 8)]
[(ram, 0x4c6128, 8) MULTIEQUAL (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8)]
[ ---  CBRANCH (ram, 0x48d9b0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x10000d13, 8), (unique, 0x10000d13, 8) INT_ADD (register, 0x0, 8) , (const, 0x2c8, 8)]
[(unique, 0x10000538, 1) COPY (const, 0x0, 1)]
[ ---  BRANCH (ram, 0x48d570, 1)]
[(register, 0xb8, 4) COPY (const, 0x0, 4)]
[ ---  BRANCH (ram, 0x48d2cd, 1)]
[(stack, 0xffffffffffffffa4, 4) MULTIEQUAL (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4)]
[(stack, 0xffffffffffffffa0, 4) MULTIEQUAL (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(ram, 0x4c87f8, 4) MULTIEQUAL (ram, 0x4c87f8, 4) , (ram, 0x4c87f8, 4)]
[(ram, 0x4c87c1, 1) MULTIEQUAL (ram, 0x4c87c1, 1) , (ram, 0x4c87c1, 1)]
[(ram, 0x4c87c0, 1) MULTIEQUAL (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1)]
[(ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c66c8, 4) MULTIEQUAL (ram, 0x4c66c8, 4) , (ram, 0x4c66c8, 4)]
[(ram, 0x4c6180, 8) MULTIEQUAL (ram, 0x4c6180, 8) , (ram, 0x4c6180, 8)]
[(ram, 0x4c6140, 8) MULTIEQUAL (ram, 0x4c6140, 8) , (ram, 0x4c6140, 8)]
[(ram, 0x4c6128, 8) MULTIEQUAL (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8)]
[(register, 0x10, 4) MULTIEQUAL (unique, 0xbc80, 4) , (register, 0x10, 4)]
[ ---  CBRANCH (ram, 0x48d2c0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 1) , (const, 0xa, 1), (register, 0x0, 1) INT_AND (unique, 0xbb00, 1) , (const, 0xb, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x10000d2b, 8), (unique, 0x10000d2b, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x31c, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) CAST (unique, 0x10000d23, 8), (unique, 0x10000d23, 8) INT_ADD (unique, 0xbd80, 8) , (unique, 0x3300, 8), (unique, 0x3300, 8) INT_MULT (register, 0x0, 8) , (const, 0x8, 8), (register, 0x0, 8) INT_ZEXT (register, 0xb8, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x10000d1b, 8), (unique, 0x10000d1b, 8) INT_ADD (register, 0x0, 8) , (const, 0x2c0, 8), (register, 0xb8, 4) MULTIEQUAL (register, 0xb8, 4) , (register, 0xb8, 4)]
[ ---  CBRANCH (ram, 0x48d848, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x10000d33, 8), (unique, 0x10000d33, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x390, 8)]
[(register, 0x90, 8) COPY (const, 0x1, 8)]
[ ---  BRANCH (ram, 0x48d33a, 1)]
[(unique, 0x3200, 8) INT_ADD (register, 0x0, 8) , (const, 0x2c0, 8)]
[(unique, 0x10000a87, 8) COPY (unique, 0xbd80, 8)]
[(register, 0x38, 8) PTRADD (unique, 0x100004c4, 8) , (const, 0x1, 8) , (const, 0x8, 8), (unique, 0x100004c4, 8) MULTIEQUAL (unique, 0x10000a87, 8) , (register, 0x38, 8)]
[ ---  CBRANCH (ram, 0x48d2c0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (unique, 0x3200, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8)]
[(unique, 0x100009b7, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x38, 8)]
[ ---  CBRANCH (ram, 0x48d310, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x38, 8)]
[(unique, 0x100009bf, 8) COPY (register, 0x0, 8), (register, 0x0, 8) INT_ADD (register, 0x0, 8) , (const, 0x1, 8), (register, 0x0, 8) COPY (unique, 0x100009c7, 8), (unique, 0x100009c7, 8) MULTIEQUAL (unique, 0x100009b7, 8) , (unique, 0x100009bf, 8)]
[ ---  CBRANCH (ram, 0x48d328, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbe00, 8) , (const, 0x0, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (unique, 0xbd80, 8) , (register, 0x0, 8) , (const, 0x8, 8), (register, 0x0, 8) INT_ADD (register, 0x0, 8) , (const, 0x1, 8), (register, 0x0, 8) COPY (unique, 0x100009c7, 8), (unique, 0x100009c7, 8) MULTIEQUAL (unique, 0x100009b7, 8) , (unique, 0x100009bf, 8)]
[(unique, 0x3100, 8) INT_ADD (register, 0x0, 8) , (const, 0x2, 8)]
[ ---  CBRANCH (ram, 0x48d2c0, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESSEQUAL (unique, 0xbd80, 8) , (register, 0x90, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x10000d3b, 8), (unique, 0x10000d3b, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x388, 8), (register, 0x90, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0x90, 8)]
[(unique, 0x3200, 8) CAST (unique, 0x10000d43, 8), (unique, 0x10000d43, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x368, 8)]
[ ---  CBRANCH (ram, 0x48d960, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (const, 0x3, 8) , (unique, 0xbd80, 8)]
[(stack, 0xffffffffffffff88, 8) COPY (const, 0x4, 8)]
[(unique, 0x100009f7, 8) COPY (unique, 0xbd80, 8)]
[(unique, 0x10000a27, 8) COPY (register, 0x90, 8)]
[(unique, 0x10000a37, 8) COPY (unique, 0x3200, 8)]
[ ---  CBRANCH (ram, 0x48d960, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (unique, 0x3200, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x48d979, 8), (register, 0x20, 8) CAST (unique, 0x10000d53, 8), (unique, 0x10000d53, 8) INT_ADD (unique, 0x10000d4b, 8) , (unique, 0x100007df, 8), (unique, 0x10000d4b, 8) CAST (unique, 0x100005c6, 8), (unique, 0x100007df, 8) INT_ADD (unique, 0x10000261, 8) , (const, 0xfffffffffffffff8, 8)]
[(ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0x8f1, 4)]
[(ram, 0x4c6140, 8) INDIRECT (ram, 0x4c6140, 8) , (const, 0x8f1, 4)]
[(ram, 0x4c6180, 8) INDIRECT (ram, 0x4c6180, 8) , (const, 0x8f1, 4)]
[(ram, 0x4c66c8, 4) INDIRECT (ram, 0x4c66c8, 4) , (const, 0x8f1, 4)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x8f1, 4)]
[(ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0x8f1, 4)]
[(ram, 0x4c87c1, 1) INDIRECT (ram, 0x4c87c1, 1) , (const, 0x8f1, 4)]
[(ram, 0x4c87f8, 4) INDIRECT (ram, 0x4c87f8, 4) , (const, 0x8f1, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (unique, 0x100004dc, 8) , (const, 0x8f1, 4), (unique, 0x100004dc, 8) INT_MULT (unique, 0xbd80, 8) , (const, 0x2, 8)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x8f1, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x8f1, 4)]
[(stack, 0xffffffffffffffa0, 4) INDIRECT (stack, 0xffffffffffffffa0, 4) , (const, 0x8f1, 4)]
[(stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0x8f1, 4)]
[(unique, 0x100009ff, 8) COPY (stack, 0xffffffffffffff80, 8), (stack, 0xffffffffffffff80, 8) INDIRECT (unique, 0x10000acf, 8) , (const, 0x8f1, 4), (unique, 0x10000acf, 8) COPY (unique, 0xbd80, 8)]
[(unique, 0x10000a2f, 8) COPY (stack, 0xffffffffffffff78, 8), (stack, 0xffffffffffffff78, 8) INDIRECT (unique, 0x10000ac7, 8) , (const, 0x8f1, 4), (unique, 0x10000ac7, 8) COPY (register, 0x90, 8)]
[ ---  CBRANCH (ram, 0x48d36f, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10000d5b, 8), (unique, 0x10000d5b, 8) CALL (ram, 0x426550, 8) , (register, 0x38, 8), (register, 0x38, 8) INT_LEFT (unique, 0xbd80, 8) , (const, 0x4, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x48d9a7, 8), (register, 0x20, 8) CAST (unique, 0x10000d6b, 8), (unique, 0x10000d6b, 8) INT_ADD (unique, 0x10000d63, 8) , (unique, 0x100007e7, 8), (unique, 0x10000d63, 8) CAST (unique, 0x100005c6, 8), (unique, 0x100007e7, 8) INT_ADD (unique, 0x10000261, 8) , (const, 0xfffffffffffffff8, 8)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x913, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x913, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x913, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x913, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x913, 4)]
[(stack, 0xffffffffffffffa0, 4) INDIRECT (stack, 0xffffffffffffffa0, 4) , (const, 0x913, 4)]
[(stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0x913, 4)]
[ ---  CALL (ram, 0x489410, 8) , (const, 0xc, 8) , (unique, 0x1000066f, 8) , (const, 0x0, 8) , (unique, 0x100006af, 8), (unique, 0x100006af, 8) COPY (const, 0x4b5219, 8), (unique, 0x1000066f, 8) COPY (const, 0x4b08a1, 8)]
[(ram, 0x4c6128, 8) COPY (ram, 0x4c6128, 8), (ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0x913, 4)]
[(ram, 0x4c6140, 8) COPY (ram, 0x4c6140, 8), (ram, 0x4c6140, 8) INDIRECT (ram, 0x4c6140, 8) , (const, 0x913, 4)]
[(ram, 0x4c6180, 8) COPY (ram, 0x4c6180, 8), (ram, 0x4c6180, 8) INDIRECT (ram, 0x4c6180, 8) , (const, 0x913, 4)]
[(ram, 0x4c66c8, 4) COPY (ram, 0x4c66c8, 4), (ram, 0x4c66c8, 4) INDIRECT (ram, 0x4c66c8, 4) , (const, 0x913, 4)]
[(ram, 0x4c8730, 8) COPY (ram, 0x4c8730, 8), (ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x913, 4)]
[(ram, 0x4c87c0, 1) COPY (ram, 0x4c87c0, 1), (ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0x913, 4)]
[(ram, 0x4c87c1, 1) COPY (ram, 0x4c87c1, 1), (ram, 0x4c87c1, 1) INDIRECT (ram, 0x4c87c1, 1) , (const, 0x913, 4)]
[(ram, 0x4c87f8, 4) COPY (ram, 0x4c87f8, 4), (ram, 0x4c87f8, 4) INDIRECT (ram, 0x4c87f8, 4) , (const, 0x913, 4)]
[ ---  RETURN (const, 0x1, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x48d37f, 8), (register, 0x20, 8) CAST (unique, 0x10000d7b, 8), (unique, 0x10000d7b, 8) INT_ADD (unique, 0x10000d73, 8) , (unique, 0x100007ef, 8), (unique, 0x10000d73, 8) CAST (unique, 0x100005c6, 8), (unique, 0x100007ef, 8) INT_ADD (unique, 0x10000261, 8) , (const, 0xfffffffffffffff8, 8)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x484, 4), (stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x484, 4), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x484, 4), (stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x484, 4), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x484, 4), (stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffffa0, 4) INDIRECT (stack, 0xffffffffffffffa0, 4) , (const, 0x484, 4), (stack, 0xffffffffffffffa0, 4) MULTIEQUAL (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4)]
[(stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0x484, 4), (stack, 0xffffffffffffffa4, 4) MULTIEQUAL (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4)]
[(ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0x48a, 4), (ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0x484, 4), (ram, 0x4c6128, 8) MULTIEQUAL (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8)]
[(ram, 0x4c6140, 8) INDIRECT (ram, 0x4c6140, 8) , (const, 0x48a, 4), (ram, 0x4c6140, 8) INDIRECT (ram, 0x4c6140, 8) , (const, 0x484, 4), (ram, 0x4c6140, 8) MULTIEQUAL (ram, 0x4c6140, 8) , (ram, 0x4c6140, 8)]
[(ram, 0x4c6180, 8) INDIRECT (ram, 0x4c6180, 8) , (const, 0x48a, 4), (ram, 0x4c6180, 8) INDIRECT (ram, 0x4c6180, 8) , (const, 0x484, 4), (ram, 0x4c6180, 8) MULTIEQUAL (ram, 0x4c6180, 8) , (ram, 0x4c6180, 8)]
[(ram, 0x4c66c8, 4) INDIRECT (ram, 0x4c66c8, 4) , (const, 0x48a, 4), (ram, 0x4c66c8, 4) INDIRECT (ram, 0x4c66c8, 4) , (const, 0x484, 4), (ram, 0x4c66c8, 4) MULTIEQUAL (ram, 0x4c66c8, 4) , (ram, 0x4c66c8, 4)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x48a, 4), (ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x484, 4), (ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0x48a, 4), (ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0x484, 4), (ram, 0x4c87c0, 1) MULTIEQUAL (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1)]
[(ram, 0x4c87c1, 1) INDIRECT (ram, 0x4c87c1, 1) , (const, 0x48a, 4), (ram, 0x4c87c1, 1) INDIRECT (ram, 0x4c87c1, 1) , (const, 0x484, 4), (ram, 0x4c87c1, 1) MULTIEQUAL (ram, 0x4c87c1, 1) , (ram, 0x4c87c1, 1)]
[(ram, 0x4c87f8, 4) INDIRECT (ram, 0x4c87f8, 4) , (const, 0x48a, 4), (ram, 0x4c87f8, 4) INDIRECT (ram, 0x4c87f8, 4) , (const, 0x484, 4), (ram, 0x4c87f8, 4) MULTIEQUAL (ram, 0x4c87f8, 4) , (ram, 0x4c87f8, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3200, 8) , (register, 0x0, 8), (unique, 0x3200, 8) CAST (unique, 0x10000d8b, 8), (unique, 0x10000d8b, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x390, 8), (register, 0x0, 8) CALL (ram, 0x401060, 8) , (register, 0x98, 8) , (register, 0x30, 8) , (unique, 0x3680, 8), (unique, 0x3680, 8) INT_MULT (register, 0x90, 8) , (const, 0x8, 8), (register, 0x30, 8) MULTIEQUAL (unique, 0x100009f7, 8) , (unique, 0x100009ff, 8), (register, 0x90, 8) MULTIEQUAL (unique, 0x10000a27, 8) , (unique, 0x10000a2f, 8), (register, 0x98, 8) MULTIEQUAL (unique, 0x10000a37, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x48d397, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x3200, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x10000d83, 8), (unique, 0x10000d83, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x390, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x48d397, 8), (register, 0x20, 8) CAST (unique, 0x10000d9b, 8), (unique, 0x10000d9b, 8) INT_ADD (unique, 0x10000d93, 8) , (unique, 0x100007f7, 8), (unique, 0x10000d93, 8) CAST (unique, 0x100005c6, 8), (unique, 0x100007f7, 8) INT_ADD (unique, 0x10000261, 8) , (const, 0xfffffffffffffff8, 8)]
[(ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0x497, 4)]
[(ram, 0x4c6140, 8) INDIRECT (ram, 0x4c6140, 8) , (const, 0x497, 4)]
[(ram, 0x4c6180, 8) INDIRECT (ram, 0x4c6180, 8) , (const, 0x497, 4)]
[(ram, 0x4c66c8, 4) INDIRECT (ram, 0x4c66c8, 4) , (const, 0x497, 4)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x497, 4)]
[(ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0x497, 4)]
[(ram, 0x4c87c1, 1) INDIRECT (ram, 0x4c87c1, 1) , (const, 0x497, 4)]
[(ram, 0x4c87f8, 4) INDIRECT (ram, 0x4c87f8, 4) , (const, 0x497, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x497, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x497, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x497, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x497, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x497, 4)]
[(stack, 0xffffffffffffffa0, 4) INDIRECT (stack, 0xffffffffffffffa0, 4) , (const, 0x497, 4)]
[(stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0x497, 4)]
[ ---  CALL (ram, 0x486b50, 8)]
[(stack, 0xffffffffffffffa4, 4) MULTIEQUAL (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4)]
[(stack, 0xffffffffffffffa0, 4) MULTIEQUAL (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x10000da3, 8), (unique, 0x10000da3, 8) INT_ADD (register, 0x0, 8) , (const, 0x2c8, 8)]
[(ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0x4a1, 4), (ram, 0x4c6128, 8) MULTIEQUAL (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8)]
[(ram, 0x4c6140, 8) INDIRECT (ram, 0x4c6140, 8) , (const, 0x4a1, 4), (ram, 0x4c6140, 8) MULTIEQUAL (ram, 0x4c6140, 8) , (ram, 0x4c6140, 8)]
[(ram, 0x4c6180, 8) INDIRECT (ram, 0x4c6180, 8) , (const, 0x4a1, 4), (ram, 0x4c6180, 8) MULTIEQUAL (ram, 0x4c6180, 8) , (ram, 0x4c6180, 8)]
[(ram, 0x4c66c8, 4) INDIRECT (ram, 0x4c66c8, 4) , (const, 0x4a1, 4), (ram, 0x4c66c8, 4) MULTIEQUAL (ram, 0x4c66c8, 4) , (ram, 0x4c66c8, 4)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x4a1, 4), (ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0x4a1, 4), (ram, 0x4c87c0, 1) MULTIEQUAL (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1)]
[(ram, 0x4c87c1, 1) INDIRECT (ram, 0x4c87c1, 1) , (const, 0x4a1, 4), (ram, 0x4c87c1, 1) MULTIEQUAL (ram, 0x4c87c1, 1) , (ram, 0x4c87c1, 1)]
[(ram, 0x4c87f8, 4) INDIRECT (ram, 0x4c87f8, 4) , (const, 0x4a1, 4), (ram, 0x4c87f8, 4) MULTIEQUAL (ram, 0x4c87f8, 4) , (ram, 0x4c87f8, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3200, 8) , (stack, 0xffffffffffffff88, 8), (unique, 0x3200, 8) CAST (unique, 0x10000dab, 8), (unique, 0x10000dab, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x388, 8), (stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[ ---  BRANCH (ram, 0x48d2c0, 1)]
[(stack, 0xffffffffffffffa4, 4) MULTIEQUAL (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4)]
[(stack, 0xffffffffffffffa0, 4) MULTIEQUAL (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(ram, 0x4c87f8, 4) MULTIEQUAL (ram, 0x4c87f8, 4) , (ram, 0x4c87f8, 4) , (ram, 0x4c87f8, 4) , (ram, 0x4c87f8, 4)]
[(ram, 0x4c87c1, 1) MULTIEQUAL (ram, 0x4c87c1, 1) , (ram, 0x4c87c1, 1) , (ram, 0x4c87c1, 1) , (ram, 0x4c87c1, 1)]
[(ram, 0x4c87c0, 1) MULTIEQUAL (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1)]
[(ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c66c8, 4) MULTIEQUAL (ram, 0x4c66c8, 4) , (ram, 0x4c66c8, 4) , (ram, 0x4c66c8, 4) , (ram, 0x4c66c8, 4)]
[(ram, 0x4c6180, 8) MULTIEQUAL (ram, 0x4c6180, 8) , (ram, 0x4c6180, 8) , (ram, 0x4c6180, 8) , (ram, 0x4c6180, 8)]
[(ram, 0x4c6140, 8) MULTIEQUAL (ram, 0x4c6140, 8) , (ram, 0x4c6140, 8) , (ram, 0x4c6140, 8) , (ram, 0x4c6140, 8)]
[(ram, 0x4c6128, 8) MULTIEQUAL (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8)]
[ ---  CBRANCH (ram, 0x48d510, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (register, 0xb8, 4) , (register, 0x10, 4), (register, 0xb8, 4) INT_ADD (register, 0xb8, 4) , (const, 0x1, 4), (register, 0x10, 4) MULTIEQUAL (register, 0x10, 4) , (register, 0x10, 4) , (register, 0x10, 4) , (unique, 0xbc80, 4)]
[(unique, 0x1000053b, 1) COPY (const, 0x0, 1)]
[(unique, 0x1000053d, 1) COPY (const, 0x0, 1)]
[ ---  CBRANCH (ram, 0x48d570, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x10, 4) , (const, 0x0, 4)]
[(register, 0xb8, 4) COPY (const, 0x0, 4)]
[(unique, 0x10000aeb, 1) COPY (unique, 0x1000053b, 1)]
[ ---  BRANCH (ram, 0x48d529, 1)]
[(stack, 0xffffffffffffffa4, 4) MULTIEQUAL (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4)]
[(stack, 0xffffffffffffffa0, 4) MULTIEQUAL (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(ram, 0x4c87f8, 4) MULTIEQUAL (ram, 0x4c87f8, 4) , (ram, 0x4c87f8, 4) , (ram, 0x4c87f8, 4)]
[(ram, 0x4c87c1, 1) MULTIEQUAL (ram, 0x4c87c1, 1) , (ram, 0x4c87c1, 1) , (ram, 0x4c87c1, 1)]
[(ram, 0x4c87c0, 1) MULTIEQUAL (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1)]
[(ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c66c8, 4) MULTIEQUAL (ram, 0x4c66c8, 4) , (ram, 0x4c66c8, 4) , (ram, 0x4c66c8, 4)]
[(ram, 0x4c6180, 8) MULTIEQUAL (ram, 0x4c6180, 8) , (ram, 0x4c6180, 8) , (ram, 0x4c6180, 8)]
[(ram, 0x4c6140, 8) MULTIEQUAL (ram, 0x4c6140, 8) , (ram, 0x4c6140, 8) , (ram, 0x4c6140, 8)]
[(ram, 0x4c6128, 8) MULTIEQUAL (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8)]
[(register, 0x10, 4) MULTIEQUAL (register, 0x10, 4) , (unique, 0xbc80, 4) , (register, 0x10, 4)]
[(unique, 0x10000539, 1) COPY (unique, 0x10000aee, 1), (unique, 0x10000aee, 1) MULTIEQUAL (unique, 0x10000aeb, 1) , (unique, 0x10000aec, 1) , (unique, 0x10000aed, 1)]
[ ---  CBRANCH (ram, 0x48d520, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x58c00, 1) , (const, 0x0, 1), (unique, 0x58c00, 1) INT_AND (unique, 0xbb00, 1) , (const, 0x8, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x10000dc3, 8), (unique, 0x10000dc3, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x31c, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) CAST (unique, 0x10000dbb, 8), (unique, 0x10000dbb, 8) INT_ADD (unique, 0xbd80, 8) , (unique, 0x3300, 8), (unique, 0x3300, 8) INT_MULT (register, 0x8, 8) , (const, 0x8, 8), (register, 0x8, 8) INT_ZEXT (register, 0xb8, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x10000db3, 8), (unique, 0x10000db3, 8) INT_ADD (register, 0x0, 8) , (const, 0x2c0, 8), (register, 0xb8, 4) MULTIEQUAL (register, 0xb8, 4) , (register, 0xb8, 4) , (register, 0xb8, 4)]
[ ---  CBRANCH (ram, 0x48d520, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbe00, 8) , (const, 0x0, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x10000dcb, 8), (unique, 0x10000dcb, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x438, 8)]
[(unique, 0x10000aed, 1) COPY (unique, 0x10000539, 1)]
[ ---  CBRANCH (ram, 0x48d570, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (register, 0xb8, 4) , (register, 0x10, 4), (register, 0xb8, 4) INT_ADD (register, 0xb8, 4) , (const, 0x1, 4)]
[(unique, 0x1000053c, 1) COPY (const, 0x1, 1)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x48d55b, 8), (register, 0x20, 8) CAST (unique, 0x10000ddb, 8), (unique, 0x10000ddb, 8) INT_ADD (unique, 0x10000dd3, 8) , (unique, 0x100007ff, 8), (unique, 0x10000dd3, 8) CAST (unique, 0x100005c6, 8), (unique, 0x100007ff, 8) INT_ADD (unique, 0x10000261, 8) , (const, 0xfffffffffffffff8, 8)]
[(ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0x512, 4)]
[(ram, 0x4c6140, 8) INDIRECT (ram, 0x4c6140, 8) , (const, 0x512, 4)]
[(ram, 0x4c6180, 8) INDIRECT (ram, 0x4c6180, 8) , (const, 0x512, 4)]
[(ram, 0x4c66c8, 4) INDIRECT (ram, 0x4c66c8, 4) , (const, 0x512, 4)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x512, 4)]
[(ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0x512, 4)]
[(ram, 0x4c87c1, 1) INDIRECT (ram, 0x4c87c1, 1) , (const, 0x512, 4)]
[(ram, 0x4c87f8, 4) INDIRECT (ram, 0x4c87f8, 4) , (const, 0x512, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x512, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x512, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x512, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x512, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x512, 4)]
[(stack, 0xffffffffffffffa0, 4) INDIRECT (stack, 0xffffffffffffffa0, 4) , (const, 0x512, 4)]
[(stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0x512, 4)]
[ ---  CALL (ram, 0x4868f0, 8) , (unique, 0xbd80, 8) , (const, 0x0, 8)]
[(unique, 0x10000aec, 1) COPY (unique, 0x1000053a, 1), (unique, 0x1000053a, 1) COPY (const, 0x1, 1)]
[ ---  CBRANCH (ram, 0x48d529, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESSEQUAL (unique, 0xbc80, 4) , (register, 0xb8, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x10000de3, 8), (unique, 0x10000de3, 8) INT_ADD (register, 0x0, 8) , (const, 0x2c8, 8), (register, 0xb8, 4) INT_ADD (register, 0xb8, 4) , (const, 0x1, 4)]
[(stack, 0xffffffffffffffa0, 4) MULTIEQUAL (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(ram, 0x4c87f8, 4) MULTIEQUAL (ram, 0x4c87f8, 4) , (ram, 0x4c87f8, 4) , (ram, 0x4c87f8, 4) , (ram, 0x4c87f8, 4)]
[(ram, 0x4c87c1, 1) MULTIEQUAL (ram, 0x4c87c1, 1) , (ram, 0x4c87c1, 1) , (ram, 0x4c87c1, 1) , (ram, 0x4c87c1, 1)]
[(ram, 0x4c87c0, 1) MULTIEQUAL (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1)]
[(ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c66c8, 4) MULTIEQUAL (ram, 0x4c66c8, 4) , (ram, 0x4c66c8, 4) , (ram, 0x4c66c8, 4) , (ram, 0x4c66c8, 4)]
[(ram, 0x4c6180, 8) MULTIEQUAL (ram, 0x4c6180, 8) , (ram, 0x4c6180, 8) , (ram, 0x4c6180, 8) , (ram, 0x4c6180, 8)]
[(ram, 0x4c6140, 8) MULTIEQUAL (ram, 0x4c6140, 8) , (ram, 0x4c6140, 8) , (ram, 0x4c6140, 8) , (ram, 0x4c6140, 8)]
[(ram, 0x4c6128, 8) MULTIEQUAL (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8)]
[(unique, 0x10000536, 1) MULTIEQUAL (unique, 0x1000053d, 1) , (unique, 0x10000539, 1) , (unique, 0x10000538, 1) , (unique, 0x1000053c, 1)]
[ ---  CBRANCH (ram, 0x48d6f0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xa8, 4) , (const, 0x0, 4), (register, 0xa8, 4) INT_AND (stack, 0xffffffffffffffa4, 4) , (const, 0x100, 4), (stack, 0xffffffffffffffa4, 4) MULTIEQUAL (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x48d6f8, 8), (register, 0x20, 8) CAST (unique, 0x10000df3, 8), (unique, 0x10000df3, 8) INT_ADD (unique, 0x10000deb, 8) , (unique, 0x10000807, 8), (unique, 0x10000deb, 8) CAST (unique, 0x100005c6, 8), (unique, 0x10000807, 8) INT_ADD (unique, 0x10000261, 8) , (const, 0xfffffffffffffff8, 8)]
[(ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0x8a7, 4)]
[(ram, 0x4c6140, 8) INDIRECT (ram, 0x4c6140, 8) , (const, 0x8a7, 4)]
[(ram, 0x4c6180, 8) INDIRECT (ram, 0x4c6180, 8) , (const, 0x8a7, 4)]
[(ram, 0x4c66c8, 4) INDIRECT (ram, 0x4c66c8, 4) , (const, 0x8a7, 4)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x8a7, 4)]
[(ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0x8a7, 4)]
[(ram, 0x4c87c1, 1) INDIRECT (ram, 0x4c87c1, 1) , (const, 0x8a7, 4)]
[(ram, 0x4c87f8, 4) INDIRECT (ram, 0x4c87f8, 4) , (const, 0x8a7, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x8a7, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x8a7, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x8a7, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x8a7, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x8a7, 4)]
[(stack, 0xffffffffffffffa0, 4) INDIRECT (stack, 0xffffffffffffffa0, 4) , (const, 0x8a7, 4)]
[(stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0x8a7, 4)]
[ ---  CALL (ram, 0x48ca20, 8) , (register, 0x0, 8)]
[ ---  BRANCH (ram, 0x48d581, 1)]
[(stack, 0xffffffffffffffa4, 4) MULTIEQUAL (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4)]
[(stack, 0xffffffffffffffa0, 4) MULTIEQUAL (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(ram, 0x4c87f8, 4) MULTIEQUAL (ram, 0x4c87f8, 4) , (ram, 0x4c87f8, 4)]
[(ram, 0x4c87c1, 1) MULTIEQUAL (ram, 0x4c87c1, 1) , (ram, 0x4c87c1, 1)]
[(ram, 0x4c87c0, 1) MULTIEQUAL (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1)]
[(ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c66c8, 4) MULTIEQUAL (ram, 0x4c66c8, 4) , (ram, 0x4c66c8, 4)]
[(ram, 0x4c6180, 8) MULTIEQUAL (ram, 0x4c6180, 8) , (ram, 0x4c6180, 8)]
[(ram, 0x4c6140, 8) MULTIEQUAL (ram, 0x4c6140, 8) , (ram, 0x4c6140, 8)]
[(ram, 0x4c6128, 8) MULTIEQUAL (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000e03, 8), (unique, 0x10000e03, 8) CAST (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (unique, 0x10000727, 8) , (register, 0x0, 8) , (const, 0x1, 8), (unique, 0x10000727, 8) PTRSUB (const, 0x0, 8) , (const, 0x4c6180, 8), (register, 0x0, 8) INT_MULT (unique, 0xbd80, 8) , (const, 0x90, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000dfb, 8), (unique, 0x10000dfb, 8) INT_ADD (register, 0x0, 8) , (const, 0x30, 8)]
[(unique, 0x100005f0, 8) MULTIEQUAL (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8)]
[(unique, 0x100005f8, 8) MULTIEQUAL (ram, 0x4c6140, 8) , (ram, 0x4c6140, 8)]
[(unique, 0x10000600, 8) MULTIEQUAL (ram, 0x4c6180, 8) , (ram, 0x4c6180, 8)]
[(unique, 0x10000608, 4) MULTIEQUAL (ram, 0x4c66c8, 4) , (ram, 0x4c66c8, 4)]
[(unique, 0x1000060c, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(unique, 0x10000614, 1) MULTIEQUAL (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1)]
[(unique, 0x10000615, 1) MULTIEQUAL (ram, 0x4c87c1, 1) , (ram, 0x4c87c1, 1)]
[(unique, 0x10000616, 4) MULTIEQUAL (ram, 0x4c87f8, 4) , (ram, 0x4c87f8, 4)]
[(unique, 0x1000061a, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(unique, 0x10000622, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(unique, 0x1000062a, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(unique, 0x10000632, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(unique, 0x1000063a, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(unique, 0x10000642, 4) MULTIEQUAL (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4)]
[(unique, 0x10000646, 4) MULTIEQUAL (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4)]
[ ---  CBRANCH (ram, 0x48d5d5, 1) , (unique, 0x100005ef, 1), (unique, 0x100005ef, 1) INT_NOTEQUAL (unique, 0x100005e7, 8) , (const, 0x0, 8), (unique, 0x100005e7, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8)]
[ ---  CBRANCH (ram, 0x48d5cc, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x10000e0b, 8), (unique, 0x10000e0b, 8) INT_ADD (unique, 0x100005e7, 8) , (const, 0x320, 8)]
[ ---  CBRANCH (ram, 0x48d6d0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x58c00, 1) , (const, 0x0, 1), (unique, 0x58c00, 1) INT_AND (unique, 0x10000614, 1) , (const, 0x40, 1)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x48d6df, 8), (register, 0x20, 8) CAST (unique, 0x10000e2b, 8), (unique, 0x10000e2b, 8) INT_ADD (unique, 0x10000e23, 8) , (unique, 0x1000080f, 8), (unique, 0x10000e23, 8) CAST (unique, 0x100005c6, 8), (unique, 0x1000080f, 8) INT_ADD (unique, 0x10000261, 8) , (const, 0xfffffffffffffff8, 8)]
[(ram, 0x4c6128, 8) INDIRECT (unique, 0x100005f0, 8) , (const, 0x8a1, 4)]
[(ram, 0x4c6140, 8) INDIRECT (unique, 0x100005f8, 8) , (const, 0x8a1, 4)]
[(ram, 0x4c6180, 8) INDIRECT (unique, 0x10000600, 8) , (const, 0x8a1, 4)]
[(ram, 0x4c66c8, 4) INDIRECT (unique, 0x10000608, 4) , (const, 0x8a1, 4)]
[(ram, 0x4c8730, 8) INDIRECT (unique, 0x1000060c, 8) , (const, 0x8a1, 4)]
[(ram, 0x4c87c0, 1) INDIRECT (unique, 0x10000614, 1) , (const, 0x8a1, 4)]
[(ram, 0x4c87c1, 1) INDIRECT (unique, 0x10000615, 1) , (const, 0x8a1, 4)]
[(ram, 0x4c87f8, 4) INDIRECT (unique, 0x10000616, 4) , (const, 0x8a1, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (unique, 0x1000061a, 8) , (const, 0x8a1, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (unique, 0x10000622, 8) , (const, 0x8a1, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (unique, 0x1000062a, 8) , (const, 0x8a1, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (unique, 0x10000632, 8) , (const, 0x8a1, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (unique, 0x1000063a, 8) , (const, 0x8a1, 4)]
[(stack, 0xffffffffffffffa0, 4) INDIRECT (unique, 0x10000642, 4) , (const, 0x8a1, 4)]
[(stack, 0xffffffffffffffa4, 4) INDIRECT (unique, 0x10000646, 4) , (const, 0x8a1, 4)]
[ ---  CALL (ram, 0x485320, 8) , (unique, 0x100006ef, 8) , (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (unique, 0x100006ef, 8) COPY (const, 0x4b5408, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000e1b, 8), (unique, 0x10000e1b, 8) INT_ADD (unique, 0x100005e7, 8) , (const, 0x8, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000e13, 8), (unique, 0x10000e13, 8) INT_ADD (unique, 0x100005e7, 8) , (const, 0x30, 8)]
[ ---  BRANCH (ram, 0x48d5bf, 1)]
[(stack, 0xffffffffffffffa4, 4) MULTIEQUAL (unique, 0x10000646, 4) , (stack, 0xffffffffffffffa4, 4)]
[(stack, 0xffffffffffffffa0, 4) MULTIEQUAL (unique, 0x10000642, 4) , (stack, 0xffffffffffffffa0, 4)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (unique, 0x1000063a, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (unique, 0x10000632, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (unique, 0x1000062a, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (unique, 0x10000622, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (unique, 0x1000061a, 8) , (stack, 0xffffffffffffff78, 8)]
[(ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0x58a, 4), (ram, 0x4c6128, 8) MULTIEQUAL (unique, 0x100005f0, 8) , (ram, 0x4c6128, 8)]
[(ram, 0x4c6140, 8) INDIRECT (ram, 0x4c6140, 8) , (const, 0x58a, 4), (ram, 0x4c6140, 8) MULTIEQUAL (unique, 0x100005f8, 8) , (ram, 0x4c6140, 8)]
[(ram, 0x4c6180, 8) INDIRECT (ram, 0x4c6180, 8) , (const, 0x58a, 4), (ram, 0x4c6180, 8) MULTIEQUAL (unique, 0x10000600, 8) , (ram, 0x4c6180, 8)]
[(ram, 0x4c66c8, 4) INDIRECT (ram, 0x4c66c8, 4) , (const, 0x58a, 4), (ram, 0x4c66c8, 4) MULTIEQUAL (unique, 0x10000608, 4) , (ram, 0x4c66c8, 4)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x58a, 4), (ram, 0x4c8730, 8) MULTIEQUAL (unique, 0x1000060c, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0x58a, 4), (ram, 0x4c87c0, 1) MULTIEQUAL (unique, 0x10000614, 1) , (ram, 0x4c87c0, 1)]
[(ram, 0x4c87c1, 1) INDIRECT (ram, 0x4c87c1, 1) , (const, 0x58a, 4), (ram, 0x4c87c1, 1) MULTIEQUAL (unique, 0x10000615, 1) , (ram, 0x4c87c1, 1)]
[(ram, 0x4c87f8, 4) INDIRECT (ram, 0x4c87f8, 4) , (const, 0x58a, 4), (ram, 0x4c87f8, 4) MULTIEQUAL (unique, 0x10000616, 4) , (ram, 0x4c87f8, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3200, 8) , (const, 0x1, 2), (unique, 0x3200, 8) CAST (unique, 0x10000e33, 8), (unique, 0x10000e33, 8) INT_ADD (unique, 0x100005e7, 8) , (const, 0x31f, 8)]
[(stack, 0xffffffffffffffa4, 4) MULTIEQUAL (unique, 0x10000646, 4) , (stack, 0xffffffffffffffa4, 4)]
[(stack, 0xffffffffffffffa0, 4) MULTIEQUAL (unique, 0x10000642, 4) , (stack, 0xffffffffffffffa0, 4)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (unique, 0x1000063a, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (unique, 0x10000632, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (unique, 0x1000062a, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (unique, 0x10000622, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (unique, 0x1000061a, 8) , (stack, 0xffffffffffffff78, 8)]
[(ram, 0x4c87f8, 4) MULTIEQUAL (unique, 0x10000616, 4) , (ram, 0x4c87f8, 4)]
[(ram, 0x4c87c1, 1) MULTIEQUAL (unique, 0x10000615, 1) , (ram, 0x4c87c1, 1)]
[(ram, 0x4c87c0, 1) MULTIEQUAL (unique, 0x10000614, 1) , (ram, 0x4c87c0, 1)]
[(ram, 0x4c8730, 8) MULTIEQUAL (unique, 0x1000060c, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c66c8, 4) MULTIEQUAL (unique, 0x10000608, 4) , (ram, 0x4c66c8, 4)]
[(ram, 0x4c6180, 8) MULTIEQUAL (unique, 0x10000600, 8) , (ram, 0x4c6180, 8)]
[(ram, 0x4c6140, 8) MULTIEQUAL (unique, 0x100005f8, 8) , (ram, 0x4c6140, 8)]
[(ram, 0x4c6128, 8) MULTIEQUAL (unique, 0x100005f0, 8) , (ram, 0x4c6128, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000e3b, 8), (unique, 0x10000e3b, 8) INT_ADD (unique, 0x100005e7, 8) , (const, 0x18, 8)]
[(register, 0xb8, 4) COPY (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x48d611, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x10000e43, 8), (unique, 0x10000e43, 8) INT_ADD (register, 0x0, 8) , (const, 0x2c8, 8)]
[(stack, 0xffffffffffffffa4, 4) MULTIEQUAL (unique, 0x10000646, 4) , (stack, 0xffffffffffffffa4, 4)]
[(stack, 0xffffffffffffffa0, 4) MULTIEQUAL (unique, 0x10000642, 4) , (stack, 0xffffffffffffffa0, 4)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (unique, 0x1000063a, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (unique, 0x10000632, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (unique, 0x1000062a, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (unique, 0x10000622, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (unique, 0x1000061a, 8) , (stack, 0xffffffffffffff78, 8)]
[(ram, 0x4c87f8, 4) MULTIEQUAL (unique, 0x10000616, 4) , (ram, 0x4c87f8, 4)]
[(ram, 0x4c87c1, 1) MULTIEQUAL (unique, 0x10000615, 1) , (ram, 0x4c87c1, 1)]
[(ram, 0x4c87c0, 1) MULTIEQUAL (unique, 0x10000614, 1) , (ram, 0x4c87c0, 1)]
[(ram, 0x4c8730, 8) MULTIEQUAL (unique, 0x1000060c, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c66c8, 4) MULTIEQUAL (unique, 0x10000608, 4) , (ram, 0x4c66c8, 4)]
[(ram, 0x4c6180, 8) MULTIEQUAL (unique, 0x10000600, 8) , (ram, 0x4c6180, 8)]
[(ram, 0x4c6140, 8) MULTIEQUAL (unique, 0x100005f8, 8) , (ram, 0x4c6140, 8)]
[(ram, 0x4c6128, 8) MULTIEQUAL (unique, 0x100005f0, 8) , (ram, 0x4c6128, 8)]
[(register, 0x30, 8) COPY (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x48d5f0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x10, 1) , (const, 0xa, 1), (register, 0x10, 1) INT_AND (unique, 0xbb00, 1) , (const, 0xb, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x10000e5b, 8), (unique, 0x10000e5b, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x31c, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) CAST (unique, 0x10000e53, 8), (unique, 0x10000e53, 8) INT_ADD (unique, 0xbd80, 8) , (unique, 0x3300, 8), (unique, 0x3300, 8) INT_MULT (register, 0x10, 8) , (const, 0x8, 8), (register, 0x10, 8) INT_ZEXT (register, 0xb8, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x10000e4b, 8), (unique, 0x10000e4b, 8) INT_ADD (register, 0x0, 8) , (const, 0x2c0, 8), (register, 0xb8, 4) MULTIEQUAL (register, 0xb8, 4) , (register, 0xb8, 4)]
[ ---  CBRANCH (ram, 0x48d858, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x10000e63, 8), (unique, 0x10000e63, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x390, 8)]
[(register, 0x10, 8) COPY (const, 0x1, 8)]
[(register, 0x8, 8) COPY (const, 0x0, 8)]
[(register, 0x30, 8) COPY (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x48d682, 1)]
[(unique, 0x3200, 8) INT_ADD (register, 0x0, 8) , (const, 0x2c0, 8)]
[(unique, 0x10000a8f, 8) COPY (unique, 0xbd80, 8)]
[(register, 0x8, 8) PTRADD (unique, 0x100004d4, 8) , (const, 0x1, 8) , (const, 0x8, 8), (unique, 0x100004d4, 8) MULTIEQUAL (unique, 0x10000a8f, 8) , (register, 0x8, 8)]
[ ---  CBRANCH (ram, 0x48d5fd, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x10, 8) , (unique, 0x3200, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8)]
[ ---  CBRANCH (ram, 0x48d650, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x8, 8)]
[(unique, 0x100009df, 8) COPY (register, 0x30, 8), (register, 0x30, 8) COPY (const, 0x0, 8)]
[(unique, 0x3680, 8) INT_MULT (register, 0x30, 8) , (const, 0x8, 8), (register, 0x30, 8) INT_ADD (register, 0x30, 8) , (const, 0x1, 8), (register, 0x30, 8) COPY (unique, 0x100009ef, 8), (unique, 0x100009ef, 8) MULTIEQUAL (unique, 0x100009df, 8) , (unique, 0x100009e7, 8)]
[(unique, 0x100009e7, 8) COPY (register, 0x30, 8), (register, 0x30, 8) INT_ADD (register, 0x30, 8) , (const, 0x1, 8), (register, 0x30, 8) COPY (unique, 0x100009ef, 8), (unique, 0x100009ef, 8) MULTIEQUAL (unique, 0x100009df, 8) , (unique, 0x100009e7, 8)]
[ ---  CBRANCH (ram, 0x48d668, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbe00, 8) , (const, 0x0, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (unique, 0xbd80, 8) , (register, 0x30, 8) , (const, 0x8, 8), (register, 0x30, 8) INT_ADD (register, 0x30, 8) , (const, 0x1, 8), (register, 0x30, 8) COPY (unique, 0x100009ef, 8), (unique, 0x100009ef, 8) MULTIEQUAL (unique, 0x100009df, 8) , (unique, 0x100009e7, 8)]
[(register, 0x10, 8) INT_ADD (register, 0x30, 8) , (const, 0x2, 8)]
[(register, 0x30, 8) MULTIEQUAL (register, 0x30, 8) , (register, 0x30, 8)]
[(register, 0x8, 8) MULTIEQUAL (unique, 0x3680, 8) , (register, 0x8, 8)]
[ ---  CBRANCH (ram, 0x48da33, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) BOOL_OR (register, 0x200, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (register, 0x10, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (register, 0x200, 1) INT_LESS (unique, 0xbd80, 8) , (register, 0x10, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x10000e6b, 8), (unique, 0x10000e6b, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x388, 8), (register, 0x10, 8) MULTIEQUAL (register, 0x10, 8) , (register, 0x10, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x48da52, 8), (register, 0x20, 8) CAST (unique, 0x10000e7b, 8), (unique, 0x10000e7b, 8) INT_ADD (unique, 0x10000e73, 8) , (unique, 0x10000817, 8), (unique, 0x10000e73, 8) CAST (unique, 0x100005c6, 8), (unique, 0x10000817, 8) INT_ADD (unique, 0x10000261, 8) , (const, 0xfffffffffffffff8, 8)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x86b, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x86b, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x86b, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x86b, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x86b, 4)]
[(stack, 0xffffffffffffffa0, 4) INDIRECT (stack, 0xffffffffffffffa0, 4) , (const, 0x86b, 4)]
[(stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0x86b, 4)]
[ ---  CALL (ram, 0x403170, 8) , (unique, 0x100006b7, 8) , (unique, 0x10000687, 8) , (const, 0x146, 4) , (unique, 0x100006ff, 8), (unique, 0x100006ff, 8) COPY (const, 0x4b5468, 8), (unique, 0x100006b7, 8) COPY (const, 0x4b5232, 8), (unique, 0x10000687, 8) COPY (const, 0x4b5192, 8)]
[(ram, 0x4c6128, 8) COPY (ram, 0x4c6128, 8), (ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0x86b, 4)]
[(ram, 0x4c6140, 8) COPY (ram, 0x4c6140, 8), (ram, 0x4c6140, 8) INDIRECT (ram, 0x4c6140, 8) , (const, 0x86b, 4)]
[(ram, 0x4c6180, 8) COPY (ram, 0x4c6180, 8), (ram, 0x4c6180, 8) INDIRECT (ram, 0x4c6180, 8) , (const, 0x86b, 4)]
[(ram, 0x4c66c8, 4) COPY (ram, 0x4c66c8, 4), (ram, 0x4c66c8, 4) INDIRECT (ram, 0x4c66c8, 4) , (const, 0x86b, 4)]
[(ram, 0x4c8730, 8) COPY (ram, 0x4c8730, 8), (ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x86b, 4)]
[(ram, 0x4c87c0, 1) COPY (ram, 0x4c87c0, 1), (ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0x86b, 4)]
[(ram, 0x4c87c1, 1) COPY (ram, 0x4c87c1, 1), (ram, 0x4c87c1, 1) INDIRECT (ram, 0x4c87c1, 1) , (const, 0x86b, 4)]
[(ram, 0x4c87f8, 4) COPY (ram, 0x4c87f8, 4), (ram, 0x4c87f8, 4) INDIRECT (ram, 0x4c87f8, 4) , (const, 0x86b, 4)]
[ ---  RETURN (const, 0x1, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3400, 8) , (const, 0x0, 8), (unique, 0x3400, 8) PTRADD (unique, 0xbd80, 8) , (register, 0x10, 8) , (const, 0x8, 8)]
[(ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0x723, 4), (ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0x71a, 4)]
[(ram, 0x4c6140, 8) INDIRECT (ram, 0x4c6140, 8) , (const, 0x723, 4), (ram, 0x4c6140, 8) INDIRECT (ram, 0x4c6140, 8) , (const, 0x71a, 4)]
[(ram, 0x4c6180, 8) INDIRECT (ram, 0x4c6180, 8) , (const, 0x723, 4), (ram, 0x4c6180, 8) INDIRECT (ram, 0x4c6180, 8) , (const, 0x71a, 4)]
[(ram, 0x4c66c8, 4) INDIRECT (ram, 0x4c66c8, 4) , (const, 0x723, 4), (ram, 0x4c66c8, 4) INDIRECT (ram, 0x4c66c8, 4) , (const, 0x71a, 4)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x723, 4), (ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x71a, 4)]
[(ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0x723, 4), (ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0x71a, 4)]
[(ram, 0x4c87c1, 1) INDIRECT (ram, 0x4c87c1, 1) , (const, 0x723, 4), (ram, 0x4c87c1, 1) INDIRECT (ram, 0x4c87c1, 1) , (const, 0x71a, 4)]
[(ram, 0x4c87f8, 4) INDIRECT (ram, 0x4c87f8, 4) , (const, 0x723, 4), (ram, 0x4c87f8, 4) INDIRECT (ram, 0x4c87f8, 4) , (const, 0x71a, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3400, 8) , (unique, 0x3200, 8), (unique, 0x3400, 8) CAST (unique, 0x10000e8b, 8), (unique, 0x10000e8b, 8) INT_ADD (unique, 0xbd80, 8) , (register, 0x8, 8), (unique, 0x3200, 8) INT_ADD (register, 0x0, 8) , (const, 0x2c0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x10000e83, 8), (unique, 0x10000e83, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x390, 8)]
[(unique, 0x10000900, 8) MULTIEQUAL (register, 0x30, 8) , (register, 0x30, 8)]
[(unique, 0x10000908, 8) MULTIEQUAL (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8)]
[(unique, 0x10000910, 8) MULTIEQUAL (ram, 0x4c6140, 8) , (ram, 0x4c6140, 8)]
[(unique, 0x10000918, 8) MULTIEQUAL (ram, 0x4c6180, 8) , (ram, 0x4c6180, 8)]
[(unique, 0x10000920, 4) MULTIEQUAL (ram, 0x4c66c8, 4) , (ram, 0x4c66c8, 4)]
[(unique, 0x10000924, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(unique, 0x1000092c, 1) MULTIEQUAL (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1)]
[(unique, 0x1000092e, 4) MULTIEQUAL (ram, 0x4c87f8, 4) , (ram, 0x4c87f8, 4)]
[ ---  CBRANCH (ram, 0x48d6c0, 1) , (unique, 0x100008ff, 1), (unique, 0x100008ff, 1) INT_NOTEQUAL (unique, 0x58c00, 1) , (const, 0x0, 1), (unique, 0x58c00, 1) INT_AND (unique, 0x1000092d, 1) , (const, 0x2, 1), (unique, 0x1000092d, 1) MULTIEQUAL (ram, 0x4c87c1, 1) , (ram, 0x4c87c1, 1)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x48d6c5, 8), (register, 0x20, 8) CAST (unique, 0x10000e9b, 8), (unique, 0x10000e9b, 8) INT_ADD (unique, 0x10000e93, 8) , (unique, 0x1000081f, 8), (unique, 0x10000e93, 8) CAST (unique, 0x100005c6, 8), (unique, 0x1000081f, 8) INT_ADD (unique, 0x10000261, 8) , (const, 0xfffffffffffffff8, 8)]
[(ram, 0x4c6128, 8) INDIRECT (unique, 0x10000908, 8) , (const, 0x732, 4)]
[(ram, 0x4c6140, 8) INDIRECT (unique, 0x10000910, 8) , (const, 0x732, 4)]
[(ram, 0x4c6180, 8) INDIRECT (unique, 0x10000918, 8) , (const, 0x732, 4)]
[(ram, 0x4c66c8, 4) INDIRECT (unique, 0x10000920, 4) , (const, 0x732, 4)]
[(ram, 0x4c8730, 8) INDIRECT (unique, 0x10000924, 8) , (const, 0x732, 4)]
[(ram, 0x4c87c0, 1) INDIRECT (unique, 0x1000092c, 1) , (const, 0x732, 4)]
[(ram, 0x4c87c1, 1) INDIRECT (unique, 0x1000092d, 1) , (const, 0x732, 4)]
[(ram, 0x4c87f8, 4) INDIRECT (unique, 0x1000092e, 4) , (const, 0x732, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x732, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x732, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x732, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x732, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x732, 4)]
[(stack, 0xffffffffffffffa0, 4) INDIRECT (stack, 0xffffffffffffffa0, 4) , (const, 0x732, 4)]
[(stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0x732, 4)]
[ ---  CALL (ram, 0x48ce80, 8) , (unique, 0xbd80, 8) , (unique, 0x10000900, 8)]
[ ---  BRANCH (ram, 0x48d5fd, 1)]
[(stack, 0xffffffffffffffa4, 4) MULTIEQUAL (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4)]
[(stack, 0xffffffffffffffa0, 4) MULTIEQUAL (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(ram, 0x4c87f8, 4) MULTIEQUAL (ram, 0x4c87f8, 4) , (unique, 0x1000092e, 4) , (ram, 0x4c87f8, 4)]
[(ram, 0x4c87c1, 1) MULTIEQUAL (ram, 0x4c87c1, 1) , (unique, 0x1000092d, 1) , (ram, 0x4c87c1, 1)]
[(ram, 0x4c87c0, 1) MULTIEQUAL (ram, 0x4c87c0, 1) , (unique, 0x1000092c, 1) , (ram, 0x4c87c0, 1)]
[(ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (unique, 0x10000924, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c66c8, 4) MULTIEQUAL (ram, 0x4c66c8, 4) , (unique, 0x10000920, 4) , (ram, 0x4c66c8, 4)]
[(ram, 0x4c6180, 8) MULTIEQUAL (ram, 0x4c6180, 8) , (unique, 0x10000918, 8) , (ram, 0x4c6180, 8)]
[(ram, 0x4c6140, 8) MULTIEQUAL (ram, 0x4c6140, 8) , (unique, 0x10000910, 8) , (ram, 0x4c6140, 8)]
[(ram, 0x4c6128, 8) MULTIEQUAL (ram, 0x4c6128, 8) , (unique, 0x10000908, 8) , (ram, 0x4c6128, 8)]
[ ---  CBRANCH (ram, 0x48d3b0, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (register, 0xb8, 4) , (unique, 0xbc80, 4), (register, 0xb8, 4) INT_ADD (register, 0xb8, 4) , (const, 0x1, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x10000ea3, 8), (unique, 0x10000ea3, 8) INT_ADD (register, 0x0, 8) , (const, 0x2c8, 8)]
[ ---  CBRANCH (ram, 0x48d740, 1) , (unique, 0x100009a4, 1), (unique, 0x100009a4, 1) BOOL_NEGATE (unique, 0x10000536, 1)]
[ ---  CBRANCH (ram, 0x48d9c1, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbc80, 4) , (const, 0x0, 4)]
[(register, 0x8, 8) COPY (const, 0x0, 8)]
[(unique, 0x10000aef, 4) COPY (unique, 0xbc80, 4)]
[ ---  BRANCH (ram, 0x48d757, 1)]
[(stack, 0xffffffffffffffa4, 4) MULTIEQUAL (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4)]
[(stack, 0xffffffffffffffa0, 4) MULTIEQUAL (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(ram, 0x4c87f8, 4) MULTIEQUAL (ram, 0x4c87f8, 4) , (ram, 0x4c87f8, 4) , (ram, 0x4c87f8, 4)]
[(ram, 0x4c87c1, 1) MULTIEQUAL (ram, 0x4c87c1, 1) , (ram, 0x4c87c1, 1) , (ram, 0x4c87c1, 1)]
[(ram, 0x4c87c0, 1) MULTIEQUAL (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1)]
[(ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c66c8, 4) MULTIEQUAL (ram, 0x4c66c8, 4) , (ram, 0x4c66c8, 4) , (ram, 0x4c66c8, 4)]
[(ram, 0x4c6180, 8) MULTIEQUAL (ram, 0x4c6180, 8) , (ram, 0x4c6180, 8) , (ram, 0x4c6180, 8)]
[(ram, 0x4c6140, 8) MULTIEQUAL (ram, 0x4c6140, 8) , (ram, 0x4c6140, 8) , (ram, 0x4c6140, 8)]
[(ram, 0x4c6128, 8) MULTIEQUAL (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8)]
[(register, 0xa0, 4) MULTIEQUAL (unique, 0xbc80, 4) , (register, 0xa0, 4) , (register, 0xa0, 4)]
[(register, 0x10, 4) MULTIEQUAL (unique, 0x10000aef, 4) , (unique, 0xbc80, 4) , (register, 0x10, 4)]
[(register, 0x8, 4) SUBPIECE (register, 0x8, 8) , (const, 0x0, 4), (register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8) , (register, 0x8, 8)]
[ ---  CBRANCH (ram, 0x48d750, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x58c00, 1) , (const, 0x0, 1), (unique, 0x58c00, 1) INT_AND (unique, 0xbb00, 1) , (const, 0x8, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x10000ebb, 8), (unique, 0x10000ebb, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x31c, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) CAST (unique, 0x10000eb3, 8), (unique, 0x10000eb3, 8) INT_ADD (unique, 0xbd80, 8) , (unique, 0x3300, 8), (unique, 0x3300, 8) INT_MULT (register, 0x8, 8) , (const, 0x8, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x10000eab, 8), (unique, 0x10000eab, 8) INT_ADD (register, 0x0, 8) , (const, 0x2c0, 8), (register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8) , (register, 0x8, 8)]
[ ---  CBRANCH (ram, 0x48d750, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbe00, 8) , (const, 0x0, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x10000ec3, 8), (unique, 0x10000ec3, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x438, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x48d788, 8), (register, 0x20, 8) CAST (unique, 0x10000ed3, 8), (unique, 0x10000ed3, 8) INT_ADD (unique, 0x10000ecb, 8) , (unique, 0x10000837, 8), (unique, 0x10000ecb, 8) CAST (unique, 0x100005c6, 8), (unique, 0x10000837, 8) INT_ADD (unique, 0x10000261, 8) , (const, 0xfffffffffffffff8, 8)]
[(ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0x79a, 4)]
[(ram, 0x4c6140, 8) INDIRECT (ram, 0x4c6140, 8) , (const, 0x79a, 4)]
[(ram, 0x4c6180, 8) INDIRECT (ram, 0x4c6180, 8) , (const, 0x79a, 4)]
[(ram, 0x4c66c8, 4) INDIRECT (ram, 0x4c66c8, 4) , (const, 0x79a, 4)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x79a, 4)]
[(ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0x79a, 4)]
[(ram, 0x4c87c1, 1) INDIRECT (ram, 0x4c87c1, 1) , (const, 0x79a, 4)]
[(ram, 0x4c87f8, 4) INDIRECT (ram, 0x4c87f8, 4) , (const, 0x79a, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x79a, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x79a, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x79a, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x79a, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x79a, 4)]
[(stack, 0xffffffffffffffa0, 4) INDIRECT (stack, 0xffffffffffffffa0, 4) , (const, 0x79a, 4)]
[ ---  CALL (ram, 0x4868f0, 8) , (unique, 0xbd80, 8) , (const, 0x1, 8)]
[(register, 0x8, 8) INT_ZEXT (stack, 0xffffffffffffffa4, 4), (stack, 0xffffffffffffffa4, 4) INDIRECT (unique, 0x10000ad7, 4) , (const, 0x79a, 4), (unique, 0x10000ad7, 4) COPY (register, 0x8, 4)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x10000ee3, 8), (unique, 0x10000ee3, 8) INT_ADD (register, 0x0, 8) , (const, 0x2c8, 8)]
[ ---  CBRANCH (ram, 0x48d750, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x58c00, 1) , (const, 0x0, 1), (unique, 0x58c00, 1) INT_AND (unique, 0xbb00, 1) , (const, 0x4, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x10000edb, 8), (unique, 0x10000edb, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x31d, 8)]
[(unique, 0x10000a7f, 4) COPY (register, 0xa0, 4)]
[ ---  CBRANCH (ram, 0x48d7a3, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (register, 0xa0, 4)]
[(unique, 0x10000a83, 4) COPY (stack, 0xffffffffffffffa4, 4)]
[(register, 0xa0, 4) MULTIEQUAL (unique, 0x10000a7f, 4) , (unique, 0x10000a83, 4)]
[(register, 0x8, 8) INT_ZEXT (register, 0x8, 4), (register, 0x8, 4) INT_ADD (stack, 0xffffffffffffffa4, 4) , (const, 0x1, 4)]
[ ---  CBRANCH (ram, 0x48d757, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (register, 0x8, 4) , (unique, 0xbc80, 4), (register, 0x8, 4) INT_ADD (stack, 0xffffffffffffffa4, 4) , (const, 0x1, 4)]
[(stack, 0xffffffffffffffa4, 4) MULTIEQUAL (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4)]
[(stack, 0xffffffffffffffa0, 4) MULTIEQUAL (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(ram, 0x4c87f8, 4) MULTIEQUAL (ram, 0x4c87f8, 4) , (ram, 0x4c87f8, 4) , (ram, 0x4c87f8, 4)]
[(ram, 0x4c87c1, 1) MULTIEQUAL (ram, 0x4c87c1, 1) , (ram, 0x4c87c1, 1) , (ram, 0x4c87c1, 1)]
[(ram, 0x4c87c0, 1) MULTIEQUAL (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1)]
[(ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c66c8, 4) MULTIEQUAL (ram, 0x4c66c8, 4) , (ram, 0x4c66c8, 4) , (ram, 0x4c66c8, 4)]
[(ram, 0x4c6180, 8) MULTIEQUAL (ram, 0x4c6180, 8) , (ram, 0x4c6180, 8) , (ram, 0x4c6180, 8)]
[(ram, 0x4c6140, 8) MULTIEQUAL (ram, 0x4c6140, 8) , (ram, 0x4c6140, 8) , (ram, 0x4c6140, 8)]
[(ram, 0x4c6128, 8) MULTIEQUAL (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8)]
[(register, 0x8, 8) INT_ZEXT (register, 0x8, 4), (register, 0x8, 4) INT_ADD (register, 0x8, 4) , (const, 0x1, 4), (register, 0x8, 4) SUBPIECE (register, 0x8, 8) , (const, 0x0, 4), (register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8) , (register, 0x8, 8)]
[ ---  CBRANCH (ram, 0x48d7b0, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESSEQUAL (register, 0x10, 4) , (register, 0x8, 4), (register, 0x8, 4) INT_ADD (register, 0x8, 4) , (const, 0x1, 4), (register, 0x8, 4) SUBPIECE (register, 0x8, 8) , (const, 0x0, 4), (register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8) , (register, 0x8, 8), (register, 0x10, 4) MULTIEQUAL (register, 0x10, 4) , (register, 0x10, 4) , (unique, 0xbc80, 4)]
[(stack, 0xffffffffffffffa4, 4) MULTIEQUAL (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4)]
[(stack, 0xffffffffffffffa0, 4) MULTIEQUAL (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(ram, 0x4c87f8, 4) MULTIEQUAL (ram, 0x4c87f8, 4) , (ram, 0x4c87f8, 4)]
[(ram, 0x4c87c1, 1) MULTIEQUAL (ram, 0x4c87c1, 1) , (ram, 0x4c87c1, 1)]
[(ram, 0x4c87c0, 1) MULTIEQUAL (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1)]
[(ram, 0x4c66c8, 4) MULTIEQUAL (ram, 0x4c66c8, 4) , (ram, 0x4c66c8, 4)]
[(ram, 0x4c6180, 8) MULTIEQUAL (ram, 0x4c6180, 8) , (ram, 0x4c6180, 8)]
[(ram, 0x4c6140, 8) MULTIEQUAL (ram, 0x4c6140, 8) , (ram, 0x4c6140, 8)]
[(ram, 0x4c6128, 8) MULTIEQUAL (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8)]
[(register, 0xa0, 4) MULTIEQUAL (register, 0xa0, 4) , (register, 0xa0, 4)]
[(register, 0x10, 4) MULTIEQUAL (register, 0x10, 4) , (unique, 0xbc80, 4)]
[ ---  CBRANCH (ram, 0x48d7c4, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4c8730, 8) , (const, 0x0, 8), (ram, 0x4c8730, 8) INT_ADD (ram, 0x4c8730, 8) , (const, 0x1, 8), (ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(stack, 0xffffffffffffffa4, 4) MULTIEQUAL (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4)]
[(stack, 0xffffffffffffffa0, 4) MULTIEQUAL (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(ram, 0x4c87f8, 4) MULTIEQUAL (ram, 0x4c87f8, 4) , (ram, 0x4c87f8, 4)]
[(ram, 0x4c87c1, 1) MULTIEQUAL (ram, 0x4c87c1, 1) , (ram, 0x4c87c1, 1)]
[(ram, 0x4c87c0, 1) MULTIEQUAL (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1)]
[(ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c66c8, 4) MULTIEQUAL (ram, 0x4c66c8, 4) , (ram, 0x4c66c8, 4)]
[(ram, 0x4c6180, 8) MULTIEQUAL (ram, 0x4c6180, 8) , (ram, 0x4c6180, 8)]
[(ram, 0x4c6140, 8) MULTIEQUAL (ram, 0x4c6140, 8) , (ram, 0x4c6140, 8)]
[(ram, 0x4c6128, 8) MULTIEQUAL (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8)]
[ ---  CBRANCH (ram, 0x48d3b9, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (register, 0xa0, 4) , (register, 0x10, 4), (register, 0x10, 4) MULTIEQUAL (register, 0x10, 4) , (register, 0x10, 4), (register, 0xa0, 4) MULTIEQUAL (register, 0xa0, 4) , (register, 0xa0, 4)]
[ ---  CBRANCH (ram, 0x48d7c0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 2) , (const, 0x400, 2), (register, 0x0, 2) INT_AND (unique, 0xbc00, 2) , (const, 0x408, 2), (unique, 0xbc00, 2) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x10000efb, 8), (unique, 0x10000efb, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x31c, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) CAST (unique, 0x10000ef3, 8), (unique, 0x10000ef3, 8) INT_ADD (unique, 0xbd80, 8) , (unique, 0x3300, 8), (unique, 0x3300, 8) INT_MULT (register, 0x0, 8) , (const, 0x8, 8), (register, 0x0, 8) INT_ZEXT (register, 0xa0, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x10000eeb, 8), (unique, 0x10000eeb, 8) INT_ADD (register, 0x0, 8) , (const, 0x2c0, 8)]
[ ---  CBRANCH (ram, 0x48d7c0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbe00, 8) , (const, 0x0, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x10000f03, 8), (unique, 0x10000f03, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x438, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3200, 8) , (unique, 0xba80, 1), (unique, 0xba80, 1) INT_AND (unique, 0xba80, 1) , (const, 0xfb, 1), (unique, 0xba80, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x10000f0b, 8), (unique, 0x10000f0b, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x31d, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x48d808, 8), (register, 0x20, 8) CAST (unique, 0x10000f1b, 8), (unique, 0x10000f1b, 8) INT_ADD (unique, 0x10000f13, 8) , (unique, 0x1000083f, 8), (unique, 0x10000f13, 8) CAST (unique, 0x100005c6, 8), (unique, 0x1000083f, 8) INT_ADD (unique, 0x10000261, 8) , (const, 0xfffffffffffffff8, 8)]
[(ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0x82a, 4), (ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0x81d, 4)]
[(ram, 0x4c6140, 8) INDIRECT (ram, 0x4c6140, 8) , (const, 0x82a, 4), (ram, 0x4c6140, 8) INDIRECT (ram, 0x4c6140, 8) , (const, 0x81d, 4)]
[(ram, 0x4c6180, 8) INDIRECT (ram, 0x4c6180, 8) , (const, 0x82a, 4), (ram, 0x4c6180, 8) INDIRECT (ram, 0x4c6180, 8) , (const, 0x81d, 4)]
[(ram, 0x4c66c8, 4) INDIRECT (ram, 0x4c66c8, 4) , (const, 0x82a, 4), (ram, 0x4c66c8, 4) INDIRECT (ram, 0x4c66c8, 4) , (const, 0x81d, 4)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x82a, 4), (ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x81d, 4)]
[(ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0x82a, 4), (ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0x81d, 4)]
[(ram, 0x4c87c1, 1) INDIRECT (ram, 0x4c87c1, 1) , (const, 0x82a, 4), (ram, 0x4c87c1, 1) INDIRECT (ram, 0x4c87c1, 1) , (const, 0x81d, 4)]
[(ram, 0x4c87f8, 4) INDIRECT (ram, 0x4c87f8, 4) , (const, 0x82a, 4), (ram, 0x4c87f8, 4) INDIRECT (ram, 0x4c87f8, 4) , (const, 0x81d, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x82a, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x82a, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x82a, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x82a, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x82a, 4)]
[(stack, 0xffffffffffffffa0, 4) INDIRECT (stack, 0xffffffffffffffa0, 4) , (const, 0x82a, 4)]
[(stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0x82a, 4)]
[ ---  CALLIND (unique, 0x10000f23, 8) , (unique, 0xbd80, 8), (unique, 0x10000f23, 8) CAST (ram, 0x4c6140, 8), (ram, 0x4c6140, 8) INDIRECT (ram, 0x4c6140, 8) , (const, 0x81d, 4)]
[ ---  CBRANCH (ram, 0x48dabc, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x58c00, 1) , (const, 0x0, 1), (unique, 0x58c00, 1) INT_AND (unique, 0xbb00, 1) , (const, 0x4, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x10000f2b, 8), (unique, 0x10000f2b, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x31d, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (unique, 0x10000667, 8), (unique, 0x10000667, 8) PTRSUB (const, 0x0, 8) , (const, 0x48dadb, 8), (register, 0x20, 8) CAST (unique, 0x10000f3b, 8), (unique, 0x10000f3b, 8) INT_ADD (unique, 0x10000f33, 8) , (unique, 0x10000847, 8), (unique, 0x10000f33, 8) CAST (unique, 0x100005c6, 8), (unique, 0x10000847, 8) INT_ADD (unique, 0x10000261, 8) , (const, 0xfffffffffffffff8, 8)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x84d, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x84d, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x84d, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x84d, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x84d, 4)]
[(stack, 0xffffffffffffffa0, 4) INDIRECT (stack, 0xffffffffffffffa0, 4) , (const, 0x84d, 4)]
[(stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0x84d, 4)]
[ ---  CALL (ram, 0x403170, 8) , (unique, 0x100006bf, 8) , (unique, 0x10000697, 8) , (const, 0x1a6, 4) , (unique, 0x10000717, 8), (unique, 0x10000717, 8) COPY (const, 0x4b54c0, 8), (unique, 0x100006bf, 8) COPY (const, 0x4b524e, 8), (unique, 0x10000697, 8) COPY (const, 0x4b5192, 8)]
[(ram, 0x4c6128, 8) COPY (ram, 0x4c6128, 8), (ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0x84d, 4)]
[(ram, 0x4c6140, 8) COPY (ram, 0x4c6140, 8), (ram, 0x4c6140, 8) INDIRECT (ram, 0x4c6140, 8) , (const, 0x84d, 4)]
[(ram, 0x4c6180, 8) COPY (ram, 0x4c6180, 8), (ram, 0x4c6180, 8) INDIRECT (ram, 0x4c6180, 8) , (const, 0x84d, 4)]
[(ram, 0x4c66c8, 4) COPY (ram, 0x4c66c8, 4), (ram, 0x4c66c8, 4) INDIRECT (ram, 0x4c66c8, 4) , (const, 0x84d, 4)]
[(ram, 0x4c8730, 8) COPY (ram, 0x4c8730, 8), (ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x84d, 4)]
[(ram, 0x4c87c0, 1) COPY (ram, 0x4c87c0, 1), (ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0x84d, 4)]
[(ram, 0x4c87c1, 1) COPY (ram, 0x4c87c1, 1), (ram, 0x4c87c1, 1) INDIRECT (ram, 0x4c87c1, 1) , (const, 0x84d, 4)]
[(ram, 0x4c87f8, 4) COPY (ram, 0x4c87f8, 4), (ram, 0x4c87f8, 4) INDIRECT (ram, 0x4c87f8, 4) , (const, 0x84d, 4)]
[ ---  RETURN (const, 0x1, 4)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x10000f43, 8), (unique, 0x10000f43, 8) INT_ADD (register, 0x0, 8) , (const, 0x2c8, 8)]
[ ---  BRANCH (ram, 0x48d7c0, 1)]
[(stack, 0xffffffffffffffa4, 4) MULTIEQUAL (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4)]
[(stack, 0xffffffffffffffa0, 4) MULTIEQUAL (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(ram, 0x4c87f8, 4) MULTIEQUAL (ram, 0x4c87f8, 4) , (ram, 0x4c87f8, 4) , (ram, 0x4c87f8, 4)]
[(ram, 0x4c87c1, 1) MULTIEQUAL (ram, 0x4c87c1, 1) , (ram, 0x4c87c1, 1) , (ram, 0x4c87c1, 1)]
[(ram, 0x4c87c0, 1) MULTIEQUAL (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1)]
[(ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c66c8, 4) MULTIEQUAL (ram, 0x4c66c8, 4) , (ram, 0x4c66c8, 4) , (ram, 0x4c66c8, 4)]
[(ram, 0x4c6180, 8) MULTIEQUAL (ram, 0x4c6180, 8) , (ram, 0x4c6180, 8) , (ram, 0x4c6180, 8)]
[(ram, 0x4c6140, 8) MULTIEQUAL (ram, 0x4c6140, 8) , (ram, 0x4c6140, 8) , (ram, 0x4c6140, 8)]
[(ram, 0x4c6128, 8) MULTIEQUAL (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8)]
[(register, 0x10, 4) MULTIEQUAL (register, 0x10, 4) , (register, 0x10, 4) , (unique, 0xbc80, 4)]
[(register, 0xa0, 4) INT_ADD (register, 0xa0, 4) , (const, 0x1, 4)]
[ ---  CBRANCH (ram, 0x48d3b9, 1) , (unique, 0x100009ae, 1), (unique, 0x100009ae, 1) BOOL_NEGATE (unique, 0x10000536, 1)]
[(stack, 0xffffffffffffffa4, 4) MULTIEQUAL (unique, 0x10000646, 4) , (stack, 0xffffffffffffffa4, 4)]
[(stack, 0xffffffffffffffa0, 4) MULTIEQUAL (unique, 0x10000642, 4) , (stack, 0xffffffffffffffa0, 4)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (unique, 0x1000063a, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (unique, 0x10000632, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (unique, 0x1000062a, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (unique, 0x10000622, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (unique, 0x1000061a, 8) , (stack, 0xffffffffffffff78, 8)]
[(ram, 0x4c87f8, 4) MULTIEQUAL (unique, 0x10000616, 4) , (ram, 0x4c87f8, 4)]
[(ram, 0x4c87c1, 1) MULTIEQUAL (unique, 0x10000615, 1) , (ram, 0x4c87c1, 1)]
[(ram, 0x4c87c0, 1) MULTIEQUAL (unique, 0x10000614, 1) , (ram, 0x4c87c0, 1)]
[(ram, 0x4c66c8, 4) MULTIEQUAL (unique, 0x10000608, 4) , (ram, 0x4c66c8, 4)]
[(ram, 0x4c6180, 8) MULTIEQUAL (unique, 0x10000600, 8) , (ram, 0x4c6180, 8)]
[(ram, 0x4c6140, 8) MULTIEQUAL (unique, 0x100005f8, 8) , (ram, 0x4c6140, 8)]
[(ram, 0x4c6128, 8) MULTIEQUAL (unique, 0x100005f0, 8) , (ram, 0x4c6128, 8)]
[ ---  CBRANCH (ram, 0x48d3b9, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4c8730, 8) , (const, 0x0, 8), (ram, 0x4c8730, 8) INT_ADD (ram, 0x4c8730, 8) , (const, 0x1, 8), (ram, 0x4c8730, 8) MULTIEQUAL (unique, 0x1000060c, 8) , (ram, 0x4c8730, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x48d9e2, 8), (register, 0x20, 8) CAST (unique, 0x10000f53, 8), (unique, 0x10000f53, 8) INT_ADD (unique, 0x10000f4b, 8) , (unique, 0x10000827, 8), (unique, 0x10000f4b, 8) CAST (unique, 0x100005c6, 8), (unique, 0x10000827, 8) INT_ADD (unique, 0x10000261, 8) , (const, 0xfffffffffffffff8, 8)]
[ ---  CALL (ram, 0x485480, 8) , (const, 0x2, 8) , (unique, 0x100006f7, 8), (unique, 0x100006f7, 8) COPY (const, 0x4b5430, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x48d9ec, 8), (register, 0x20, 8) CAST (unique, 0x10000f63, 8), (unique, 0x10000f63, 8) INT_ADD (unique, 0x10000f5b, 8) , (unique, 0x1000082f, 8), (unique, 0x10000f5b, 8) CAST (unique, 0x100005c6, 8), (unique, 0x1000082f, 8) INT_ADD (unique, 0x10000261, 8) , (const, 0xfffffffffffffff8, 8)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x5da, 4), (stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x5d6, 4), (stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x5da, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x5d6, 4), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x5da, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x5d6, 4), (stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x5da, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x5d6, 4), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x5da, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x5d6, 4), (stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffffa0, 4) INDIRECT (stack, 0xffffffffffffffa0, 4) , (const, 0x5da, 4), (stack, 0xffffffffffffffa0, 4) INDIRECT (stack, 0xffffffffffffffa0, 4) , (const, 0x5d6, 4), (stack, 0xffffffffffffffa0, 4) MULTIEQUAL (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4)]
[(stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0x5da, 4), (stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0x5d6, 4), (stack, 0xffffffffffffffa4, 4) MULTIEQUAL (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4)]
[ ---  CALL (ram, 0x454cb0, 8) , (const, 0x7f, 4)]
[(ram, 0x4c6128, 8) COPY (ram, 0x4c6128, 8), (ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0x5da, 4), (ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0x5d6, 4), (ram, 0x4c6128, 8) MULTIEQUAL (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8)]
[(ram, 0x4c6140, 8) COPY (ram, 0x4c6140, 8), (ram, 0x4c6140, 8) INDIRECT (ram, 0x4c6140, 8) , (const, 0x5da, 4), (ram, 0x4c6140, 8) INDIRECT (ram, 0x4c6140, 8) , (const, 0x5d6, 4), (ram, 0x4c6140, 8) MULTIEQUAL (ram, 0x4c6140, 8) , (ram, 0x4c6140, 8)]
[(ram, 0x4c6180, 8) COPY (ram, 0x4c6180, 8), (ram, 0x4c6180, 8) INDIRECT (ram, 0x4c6180, 8) , (const, 0x5da, 4), (ram, 0x4c6180, 8) INDIRECT (ram, 0x4c6180, 8) , (const, 0x5d6, 4), (ram, 0x4c6180, 8) MULTIEQUAL (ram, 0x4c6180, 8) , (ram, 0x4c6180, 8)]
[(ram, 0x4c66c8, 4) COPY (ram, 0x4c66c8, 4), (ram, 0x4c66c8, 4) INDIRECT (ram, 0x4c66c8, 4) , (const, 0x5da, 4), (ram, 0x4c66c8, 4) INDIRECT (ram, 0x4c66c8, 4) , (const, 0x5d6, 4), (ram, 0x4c66c8, 4) MULTIEQUAL (ram, 0x4c66c8, 4) , (ram, 0x4c66c8, 4)]
[(ram, 0x4c8730, 8) COPY (ram, 0x4c8730, 8), (ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x5da, 4), (ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x5d6, 4), (ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c87c0, 1) COPY (ram, 0x4c87c0, 1), (ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0x5da, 4), (ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0x5d6, 4), (ram, 0x4c87c0, 1) MULTIEQUAL (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1)]
[(ram, 0x4c87c1, 1) COPY (ram, 0x4c87c1, 1), (ram, 0x4c87c1, 1) INDIRECT (ram, 0x4c87c1, 1) , (const, 0x5da, 4), (ram, 0x4c87c1, 1) INDIRECT (ram, 0x4c87c1, 1) , (const, 0x5d6, 4), (ram, 0x4c87c1, 1) MULTIEQUAL (ram, 0x4c87c1, 1) , (ram, 0x4c87c1, 1)]
[(ram, 0x4c87f8, 4) COPY (ram, 0x4c87f8, 4), (ram, 0x4c87f8, 4) INDIRECT (ram, 0x4c87f8, 4) , (const, 0x5da, 4), (ram, 0x4c87f8, 4) INDIRECT (ram, 0x4c87f8, 4) , (const, 0x5d6, 4), (ram, 0x4c87f8, 4) MULTIEQUAL (ram, 0x4c87f8, 4) , (ram, 0x4c87f8, 4)]
[ ---  RETURN (const, 0x1, 4)]
[(stack, 0xffffffffffffffa4, 4) MULTIEQUAL (unique, 0x10000646, 4) , (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4)]
[(stack, 0xffffffffffffffa0, 4) MULTIEQUAL (unique, 0x10000642, 4) , (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (unique, 0x1000063a, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (unique, 0x10000632, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (unique, 0x1000062a, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (unique, 0x10000622, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (unique, 0x1000061a, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(ram, 0x4c87f8, 4) MULTIEQUAL (unique, 0x10000616, 4) , (ram, 0x4c87f8, 4) , (ram, 0x4c87f8, 4) , (ram, 0x4c87f8, 4)]
[(ram, 0x4c87c1, 1) MULTIEQUAL (unique, 0x10000615, 1) , (ram, 0x4c87c1, 1) , (ram, 0x4c87c1, 1) , (ram, 0x4c87c1, 1)]
[(ram, 0x4c87c0, 1) MULTIEQUAL (unique, 0x10000614, 1) , (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1)]
[(ram, 0x4c8730, 8) MULTIEQUAL (unique, 0x1000060c, 8) , (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c66c8, 4) MULTIEQUAL (unique, 0x10000608, 4) , (ram, 0x4c66c8, 4) , (ram, 0x4c66c8, 4) , (ram, 0x4c66c8, 4)]
[(ram, 0x4c6180, 8) MULTIEQUAL (unique, 0x10000600, 8) , (ram, 0x4c6180, 8) , (ram, 0x4c6180, 8) , (ram, 0x4c6180, 8)]
[(ram, 0x4c6140, 8) MULTIEQUAL (unique, 0x100005f8, 8) , (ram, 0x4c6140, 8) , (ram, 0x4c6140, 8) , (ram, 0x4c6140, 8)]
[(ram, 0x4c6128, 8) MULTIEQUAL (unique, 0x100005f0, 8) , (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8)]
[(unique, 0x10000b5b, 8) COPY (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x48d700, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xa8, 4) , (const, 0x0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x48d708, 8), (register, 0x20, 8) CAST (unique, 0x10000f73, 8), (unique, 0x10000f73, 8) INT_ADD (unique, 0x10000f6b, 8) , (unique, 0x1000084f, 8), (unique, 0x10000f6b, 8) CAST (unique, 0x100005c6, 8), (unique, 0x1000084f, 8) INT_ADD (unique, 0x10000261, 8) , (const, 0xfffffffffffffff8, 8)]
[ ---  CALL (ram, 0x48ca20, 8) , (register, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x48d72d, 8), (register, 0x20, 8) CAST (unique, 0x10000f93, 8), (unique, 0x10000f93, 8) INT_ADD (unique, 0x10000f8b, 8) , (unique, 0x1000085f, 8), (unique, 0x10000f8b, 8) CAST (unique, 0x100005c6, 8), (unique, 0x1000085f, 8) INT_ADD (unique, 0x10000261, 8) , (const, 0xfffffffffffffff8, 8)]
[ ---  CALL (ram, 0x489470, 8) , (const, 0x0, 8) , (unique, 0x1000065f, 8) , (unique, 0x3100, 8), (unique, 0x1000065f, 8) PTRSUB (const, 0x0, 8) , (const, 0x48c9e0, 8), (unique, 0x3100, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffa8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x48d735, 8), (register, 0x20, 8) CAST (unique, 0x10000fa3, 8), (unique, 0x10000fa3, 8) INT_ADD (unique, 0x10000f9b, 8) , (unique, 0x10000867, 8), (unique, 0x10000f9b, 8) CAST (unique, 0x100005c6, 8), (unique, 0x10000867, 8) INT_ADD (unique, 0x10000261, 8) , (const, 0xfffffffffffffff8, 8)]
[(ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0x676, 4), (ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0x672, 4), (ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0x652, 4)]
[(ram, 0x4c6140, 8) INDIRECT (ram, 0x4c6140, 8) , (const, 0x676, 4), (ram, 0x4c6140, 8) INDIRECT (ram, 0x4c6140, 8) , (const, 0x672, 4), (ram, 0x4c6140, 8) INDIRECT (ram, 0x4c6140, 8) , (const, 0x652, 4)]
[(ram, 0x4c6180, 8) INDIRECT (ram, 0x4c6180, 8) , (const, 0x676, 4), (ram, 0x4c6180, 8) INDIRECT (ram, 0x4c6180, 8) , (const, 0x672, 4), (ram, 0x4c6180, 8) INDIRECT (ram, 0x4c6180, 8) , (const, 0x652, 4)]
[(ram, 0x4c66c8, 4) INDIRECT (ram, 0x4c66c8, 4) , (const, 0x676, 4), (ram, 0x4c66c8, 4) INDIRECT (ram, 0x4c66c8, 4) , (const, 0x672, 4), (ram, 0x4c66c8, 4) INDIRECT (ram, 0x4c66c8, 4) , (const, 0x652, 4)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x676, 4), (ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x672, 4), (ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x652, 4)]
[(ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0x676, 4), (ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0x672, 4), (ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0x652, 4)]
[(ram, 0x4c87c1, 1) INDIRECT (ram, 0x4c87c1, 1) , (const, 0x676, 4), (ram, 0x4c87c1, 1) INDIRECT (ram, 0x4c87c1, 1) , (const, 0x672, 4), (ram, 0x4c87c1, 1) INDIRECT (ram, 0x4c87c1, 1) , (const, 0x652, 4)]
[(ram, 0x4c87f8, 4) INDIRECT (ram, 0x4c87f8, 4) , (const, 0x676, 4), (ram, 0x4c87f8, 4) INDIRECT (ram, 0x4c87f8, 4) , (const, 0x672, 4), (ram, 0x4c87f8, 4) INDIRECT (ram, 0x4c87f8, 4) , (const, 0x652, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x676, 4), (stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x672, 4), (stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x652, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x676, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x672, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x652, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x676, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x672, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x652, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x676, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x672, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x652, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x676, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x672, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x652, 4)]
[(stack, 0xffffffffffffffa0, 4) INDIRECT (stack, 0xffffffffffffffa0, 4) , (const, 0x676, 4), (stack, 0xffffffffffffffa0, 4) INDIRECT (stack, 0xffffffffffffffa0, 4) , (const, 0x672, 4), (stack, 0xffffffffffffffa0, 4) INDIRECT (stack, 0xffffffffffffffa0, 4) , (const, 0x652, 4)]
[(stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0x676, 4), (stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0x672, 4), (stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0x652, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x676, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (unique, 0x10000b5b, 8) , (const, 0x672, 4)]
[(stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0x676, 4), (stack, 0xffffffffffffffb0, 4) INDIRECT (unique, 0xbc80, 4) , (const, 0x672, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000f83, 8), (unique, 0x10000f83, 8) INT_ADD (unique, 0x10000f7b, 8) , (const, 0x2c, 8), (unique, 0x10000f7b, 8) CAST (register, 0x38, 8)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x676, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (unique, 0x10000504, 8) , (const, 0x672, 4), (unique, 0x10000504, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x38, 8) , (const, 0x6, 8) , (const, 0x8, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x676, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (unique, 0x1000050c, 8) , (const, 0x672, 4), (unique, 0x1000050c, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000514, 8), (unique, 0x10000514, 8) PTRADD (register, 0x38, 8) , (const, 0x7, 8) , (const, 0x8, 8)]
[ ---  CALL (ram, 0x48c8a0, 8) , (register, 0x0, 8)]
[ ---  BRANCH (ram, 0x48d3ef, 1)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x48d3ef, 8), (register, 0x20, 8) CAST (unique, 0x10000fc3, 8), (unique, 0x10000fc3, 8) INT_ADD (unique, 0x10000fbb, 8) , (unique, 0x10000857, 8), (unique, 0x10000fbb, 8) CAST (unique, 0x100005c6, 8), (unique, 0x10000857, 8) INT_ADD (unique, 0x10000261, 8) , (const, 0xfffffffffffffff8, 8)]
[(ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0x615, 4)]
[(ram, 0x4c6140, 8) INDIRECT (ram, 0x4c6140, 8) , (const, 0x615, 4)]
[(ram, 0x4c6180, 8) INDIRECT (ram, 0x4c6180, 8) , (const, 0x615, 4)]
[(ram, 0x4c66c8, 4) INDIRECT (ram, 0x4c66c8, 4) , (const, 0x615, 4)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x615, 4)]
[(ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0x615, 4)]
[(ram, 0x4c87c1, 1) INDIRECT (ram, 0x4c87c1, 1) , (const, 0x615, 4)]
[(ram, 0x4c87f8, 4) INDIRECT (ram, 0x4c87f8, 4) , (const, 0x615, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x615, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x615, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x615, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x615, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x615, 4)]
[(stack, 0xffffffffffffffa0, 4) INDIRECT (stack, 0xffffffffffffffa0, 4) , (const, 0x615, 4)]
[(stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0x615, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (unique, 0x10000b5b, 8) , (const, 0x615, 4)]
[(stack, 0xffffffffffffffb0, 4) INDIRECT (unique, 0xbc80, 4) , (const, 0x615, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000fb3, 8), (unique, 0x10000fb3, 8) INT_ADD (unique, 0x10000fab, 8) , (const, 0x2c, 8), (unique, 0x10000fab, 8) CAST (register, 0x38, 8)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (unique, 0x100004e4, 8) , (const, 0x615, 4), (unique, 0x100004e4, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x38, 8) , (const, 0x6, 8) , (const, 0x8, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (unique, 0x100004ec, 8) , (const, 0x615, 4), (unique, 0x100004ec, 8) LOAD (const, 0x1b1, 4) , (unique, 0x100004f4, 8), (unique, 0x100004f4, 8) PTRADD (register, 0x38, 8) , (const, 0x7, 8) , (const, 0x8, 8)]
[ ---  CALL (ram, 0x489470, 8) , (unique, 0x100004e4, 8) , (const, 0x0, 8) , (unique, 0x10000657, 8) , (unique, 0x3100, 8), (unique, 0x10000657, 8) PTRSUB (const, 0x0, 8) , (const, 0x48c9e0, 8), (unique, 0x3100, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffa8, 8), (unique, 0x100004e4, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x38, 8) , (const, 0x6, 8) , (const, 0x8, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffb0, 4) MULTIEQUAL (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa4, 4) MULTIEQUAL (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4)]
[(stack, 0xffffffffffffffa0, 4) MULTIEQUAL (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(ram, 0x4c87f8, 4) MULTIEQUAL (ram, 0x4c87f8, 4) , (ram, 0x4c87f8, 4)]
[(ram, 0x4c87c1, 1) MULTIEQUAL (ram, 0x4c87c1, 1) , (ram, 0x4c87c1, 1)]
[(ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c6180, 8) MULTIEQUAL (ram, 0x4c6180, 8) , (ram, 0x4c6180, 8)]
[(ram, 0x4c6140, 8) MULTIEQUAL (ram, 0x4c6140, 8) , (ram, 0x4c6140, 8)]
[(ram, 0x4c6128, 8) MULTIEQUAL (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8)]
[(ram, 0x4c66c8, 4) COPY (const, 0x1, 4)]
[ ---  CBRANCH (ram, 0x48d900, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x58c00, 1) , (const, 0x0, 1), (unique, 0x58c00, 1) INT_AND (ram, 0x4c87c0, 1) , (const, 0x40, 1), (ram, 0x4c87c0, 1) MULTIEQUAL (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x48d91d, 8), (register, 0x20, 8) CAST (unique, 0x10000feb, 8), (unique, 0x10000feb, 8) INT_ADD (unique, 0x10000fe3, 8) , (unique, 0x1000086f, 8), (unique, 0x10000fe3, 8) CAST (unique, 0x100005c6, 8), (unique, 0x1000086f, 8) INT_ADD (unique, 0x10000261, 8) , (const, 0xfffffffffffffff8, 8)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x64d, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x64d, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x64d, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x64d, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x64d, 4)]
[(stack, 0xffffffffffffffa0, 4) INDIRECT (stack, 0xffffffffffffffa0, 4) , (const, 0x64d, 4)]
[(stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0x64d, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x64d, 4)]
[(stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0x64d, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x64d, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x64d, 4)]
[ ---  CALL (ram, 0x485320, 8) , (unique, 0x100006d7, 8) , (unique, 0xbd80, 8) , (unique, 0xbd80, 8) , (unique, 0xbc80, 4), (unique, 0x100006d7, 8) COPY (const, 0x4b5398, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000fdb, 8), (unique, 0x10000fdb, 8) INT_ADD (register, 0x0, 8) , (const, 0x8, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000fd3, 8), (unique, 0x10000fd3, 8) INT_ADD (register, 0x0, 8) , (const, 0x30, 8), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x10000fcb, 8), (unique, 0x10000fcb, 8) INT_ADD (register, 0x0, 8) , (const, 0x318, 8)]
[(ram, 0x4c6128, 8) COPY (ram, 0x4c6128, 8), (ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0x64d, 4)]
[(ram, 0x4c6140, 8) COPY (ram, 0x4c6140, 8), (ram, 0x4c6140, 8) INDIRECT (ram, 0x4c6140, 8) , (const, 0x64d, 4)]
[(ram, 0x4c6180, 8) COPY (ram, 0x4c6180, 8), (ram, 0x4c6180, 8) INDIRECT (ram, 0x4c6180, 8) , (const, 0x64d, 4)]
[(ram, 0x4c66c8, 4) COPY (ram, 0x4c66c8, 4), (ram, 0x4c66c8, 4) INDIRECT (ram, 0x4c66c8, 4) , (const, 0x64d, 4)]
[(ram, 0x4c8730, 8) COPY (ram, 0x4c8730, 8), (ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x64d, 4)]
[(ram, 0x4c87c0, 1) COPY (ram, 0x4c87c0, 1), (ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0x64d, 4)]
[(ram, 0x4c87c1, 1) COPY (ram, 0x4c87c1, 1), (ram, 0x4c87c1, 1) INDIRECT (ram, 0x4c87c1, 1) , (const, 0x64d, 4)]
[(ram, 0x4c87f8, 4) COPY (ram, 0x4c87f8, 4), (ram, 0x4c87f8, 4) INDIRECT (ram, 0x4c87f8, 4) , (const, 0x64d, 4)]
[ ---  RETURN (const, 0x0, 8)]
[(ram, 0x4c6128, 8) COPY (ram, 0x4c6128, 8)]
[(ram, 0x4c6140, 8) COPY (ram, 0x4c6140, 8)]
[(ram, 0x4c6180, 8) COPY (ram, 0x4c6180, 8)]
[(ram, 0x4c66c8, 4) COPY (const, 0x1, 4)]
[(ram, 0x4c8730, 8) COPY (ram, 0x4c8730, 8)]
[(ram, 0x4c87c0, 1) COPY (ram, 0x4c87c0, 1)]
[(ram, 0x4c87c1, 1) COPY (ram, 0x4c87c1, 1)]
[(ram, 0x4c87f8, 4) COPY (ram, 0x4c87f8, 4)]
[ ---  RETURN (const, 0x0, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) CAST (unique, 0x10000ffb, 8), (unique, 0x10000ffb, 8) INT_ADD (unique, 0x10000ff3, 8) , (unique, 0x100007cf, 8), (unique, 0x10000ff3, 8) CAST (unique, 0x100005c6, 8), (unique, 0x100007cf, 8) INT_ADD (unique, 0x3300, 8) , (unique, 0x10000261, 8), (unique, 0x3300, 8) INT_MULT (register, 0xa8, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x48da02, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x58c00, 1) , (const, 0x0, 1), (unique, 0x58c00, 1) INT_AND (ram, 0x4c87c0, 1) , (const, 0x40, 1)]
[(ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0xa75, 4)]
[(ram, 0x4c6140, 8) INDIRECT (ram, 0x4c6140, 8) , (const, 0xa75, 4)]
[(ram, 0x4c6180, 8) INDIRECT (ram, 0x4c6180, 8) , (const, 0xa75, 4)]
[(ram, 0x4c66c8, 4) INDIRECT (ram, 0x4c66c8, 4) , (const, 0xa75, 4)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0xa75, 4)]
[(ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0xa75, 4)]
[(ram, 0x4c87c1, 1) INDIRECT (ram, 0x4c87c1, 1) , (const, 0xa75, 4)]
[(ram, 0x4c87f8, 4) INDIRECT (ram, 0x4c87f8, 4) , (const, 0xa75, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0xa75, 4)]
[(stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0xa75, 4)]
[ ---  CALL (ram, 0x485320, 8) , (unique, 0x100006df, 8) , (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (unique, 0x100006df, 8) COPY (const, 0x4b5398, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000100b, 8), (unique, 0x1000100b, 8) INT_ADD (register, 0x0, 8) , (const, 0x8, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10001003, 8), (unique, 0x10001003, 8) INT_ADD (register, 0x0, 8) , (const, 0x30, 8)]
[ ---  BRANCH (ram, 0x48d87d, 1)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(ram, 0x4c87f8, 4) MULTIEQUAL (ram, 0x4c87f8, 4) , (ram, 0x4c87f8, 4)]
[(ram, 0x4c87c1, 1) MULTIEQUAL (ram, 0x4c87c1, 1) , (ram, 0x4c87c1, 1)]
[(ram, 0x4c87c0, 1) MULTIEQUAL (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1)]
[(ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c66c8, 4) MULTIEQUAL (ram, 0x4c66c8, 4) , (ram, 0x4c66c8, 4)]
[(ram, 0x4c6180, 8) MULTIEQUAL (ram, 0x4c6180, 8) , (ram, 0x4c6180, 8)]
[(ram, 0x4c6140, 8) MULTIEQUAL (ram, 0x4c6140, 8) , (ram, 0x4c6140, 8)]
[(ram, 0x4c6128, 8) MULTIEQUAL (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8)]
[ ---  CBRANCH (ram, 0x48d922, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x58e00, 4) , (const, 0x0, 4), (unique, 0x58e00, 4) INT_AND (stack, 0xffffffffffffffa4, 4) , (const, 0x100, 4), (stack, 0xffffffffffffffa4, 4) MULTIEQUAL (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4)]
[ ---  CBRANCH (ram, 0x48da1d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x48da52, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x58c00, 1) , (const, 0x0, 1), (unique, 0x58c00, 1) INT_AND (ram, 0x4c87c0, 1) , (const, 0x40, 1)]
[ ---  CBRANCH (ram, 0x48da26, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x10001013, 8), (unique, 0x10001013, 8) INT_ADD (register, 0x0, 8) , (const, 0x31f, 8)]
[(ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0xa60, 4)]
[(ram, 0x4c6140, 8) INDIRECT (ram, 0x4c6140, 8) , (const, 0xa60, 4)]
[(ram, 0x4c6180, 8) INDIRECT (ram, 0x4c6180, 8) , (const, 0xa60, 4)]
[(ram, 0x4c66c8, 4) INDIRECT (ram, 0x4c66c8, 4) , (const, 0xa60, 4)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0xa60, 4)]
[(ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0xa60, 4)]
[(ram, 0x4c87c1, 1) INDIRECT (ram, 0x4c87c1, 1) , (const, 0xa60, 4)]
[(ram, 0x4c87f8, 4) INDIRECT (ram, 0x4c87f8, 4) , (const, 0xa60, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0xa60, 4)]
[(stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0xa60, 4)]
[ ---  CALL (ram, 0x485320, 8) , (unique, 0x100006c7, 8) , (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (unique, 0x100006c7, 8) COPY (const, 0x4b5269, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10001023, 8), (unique, 0x10001023, 8) INT_ADD (register, 0x0, 8) , (const, 0x8, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000101b, 8), (unique, 0x1000101b, 8) INT_ADD (register, 0x0, 8) , (const, 0x30, 8)]
[ ---  BRANCH (ram, 0x48da26, 1)]
[(stack, 0xffffffffffffffa4, 4) MULTIEQUAL (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0xa3c, 4), (ram, 0x4c6128, 8) MULTIEQUAL (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8)]
[(ram, 0x4c6140, 8) INDIRECT (ram, 0x4c6140, 8) , (const, 0xa3c, 4), (ram, 0x4c6140, 8) MULTIEQUAL (ram, 0x4c6140, 8) , (ram, 0x4c6140, 8) , (ram, 0x4c6140, 8)]
[(ram, 0x4c6180, 8) INDIRECT (ram, 0x4c6180, 8) , (const, 0xa3c, 4), (ram, 0x4c6180, 8) MULTIEQUAL (ram, 0x4c6180, 8) , (ram, 0x4c6180, 8) , (ram, 0x4c6180, 8)]
[(ram, 0x4c66c8, 4) INDIRECT (ram, 0x4c66c8, 4) , (const, 0xa3c, 4), (ram, 0x4c66c8, 4) MULTIEQUAL (ram, 0x4c66c8, 4) , (ram, 0x4c66c8, 4) , (ram, 0x4c66c8, 4)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0xa3c, 4), (ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0xa3c, 4), (ram, 0x4c87c0, 1) MULTIEQUAL (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1)]
[(ram, 0x4c87c1, 1) INDIRECT (ram, 0x4c87c1, 1) , (const, 0xa3c, 4), (ram, 0x4c87c1, 1) MULTIEQUAL (ram, 0x4c87c1, 1) , (ram, 0x4c87c1, 1) , (ram, 0x4c87c1, 1)]
[(ram, 0x4c87f8, 4) INDIRECT (ram, 0x4c87f8, 4) , (const, 0xa3c, 4), (ram, 0x4c87f8, 4) MULTIEQUAL (ram, 0x4c87f8, 4) , (ram, 0x4c87f8, 4) , (ram, 0x4c87f8, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3200, 8) , (const, 0x1, 1), (unique, 0x3200, 8) CAST (unique, 0x1000102b, 8), (unique, 0x1000102b, 8) INT_ADD (register, 0x0, 8) , (const, 0x31f, 8)]
[ ---  BRANCH (ram, 0x48d92b, 1)]
[ ---  CBRANCH (ram, 0x48d9ec, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x58c00, 1) , (const, 0x0, 1), (unique, 0x58c00, 1) INT_AND (unique, 0xbb00, 1) , (const, 0x10, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x10001033, 8), (unique, 0x10001033, 8) INT_ADD (register, 0x0, 8) , (const, 0x31c, 8)]
[(ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0xa18, 4)]
[(ram, 0x4c6140, 8) INDIRECT (ram, 0x4c6140, 8) , (const, 0xa18, 4)]
[(ram, 0x4c6180, 8) INDIRECT (ram, 0x4c6180, 8) , (const, 0xa18, 4)]
[(ram, 0x4c66c8, 4) INDIRECT (ram, 0x4c66c8, 4) , (const, 0xa18, 4)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0xa18, 4)]
[(ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0xa18, 4)]
[(ram, 0x4c87c1, 1) INDIRECT (ram, 0x4c87c1, 1) , (const, 0xa18, 4)]
[(ram, 0x4c87f8, 4) INDIRECT (ram, 0x4c87f8, 4) , (const, 0xa18, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0xa18, 4)]
[(stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0xa18, 4)]
[ ---  CALL (ram, 0x48ca20, 8)]
[ ---  CBRANCH (ram, 0x48d8b6, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x48d92b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4)]
[(stack, 0xffffffffffffffa4, 4) MULTIEQUAL (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(ram, 0x4c87f8, 4) MULTIEQUAL (ram, 0x4c87f8, 4) , (ram, 0x4c87f8, 4)]
[(ram, 0x4c87c1, 1) MULTIEQUAL (ram, 0x4c87c1, 1) , (ram, 0x4c87c1, 1)]
[(ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c66c8, 4) MULTIEQUAL (ram, 0x4c66c8, 4) , (ram, 0x4c66c8, 4)]
[(ram, 0x4c6180, 8) MULTIEQUAL (ram, 0x4c6180, 8) , (ram, 0x4c6180, 8)]
[(ram, 0x4c6140, 8) MULTIEQUAL (ram, 0x4c6140, 8) , (ram, 0x4c6140, 8)]
[(ram, 0x4c6128, 8) MULTIEQUAL (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8)]
[ ---  CBRANCH (ram, 0x48da93, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x58c00, 1) , (const, 0x0, 1), (unique, 0x58c00, 1) INT_AND (ram, 0x4c87c0, 1) , (const, 0x40, 1), (ram, 0x4c87c0, 1) MULTIEQUAL (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1)]
[ ---  CBRANCH (ram, 0x48d8ae, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x1000103b, 8), (unique, 0x1000103b, 8) INT_ADD (register, 0x0, 8) , (const, 0x31f, 8)]
[(ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0xa13, 4)]
[(ram, 0x4c6140, 8) INDIRECT (ram, 0x4c6140, 8) , (const, 0xa13, 4)]
[(ram, 0x4c6180, 8) INDIRECT (ram, 0x4c6180, 8) , (const, 0xa13, 4)]
[(ram, 0x4c66c8, 4) INDIRECT (ram, 0x4c66c8, 4) , (const, 0xa13, 4)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0xa13, 4)]
[(ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0xa13, 4)]
[(ram, 0x4c87c1, 1) INDIRECT (ram, 0x4c87c1, 1) , (const, 0xa13, 4)]
[(ram, 0x4c87f8, 4) INDIRECT (ram, 0x4c87f8, 4) , (const, 0xa13, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0xa13, 4)]
[(stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0xa13, 4)]
[ ---  CALL (ram, 0x485320, 8) , (unique, 0x100006cf, 8) , (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (unique, 0x100006cf, 8) COPY (const, 0x4b5269, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000104b, 8), (unique, 0x1000104b, 8) INT_ADD (register, 0x0, 8) , (const, 0x8, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10001043, 8), (unique, 0x10001043, 8) INT_ADD (register, 0x0, 8) , (const, 0x30, 8)]
[ ---  BRANCH (ram, 0x48d8ae, 1)]
[(stack, 0xffffffffffffffa4, 4) MULTIEQUAL (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0x9b7, 4), (ram, 0x4c6128, 8) MULTIEQUAL (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8)]
[(ram, 0x4c6140, 8) INDIRECT (ram, 0x4c6140, 8) , (const, 0x9b7, 4), (ram, 0x4c6140, 8) MULTIEQUAL (ram, 0x4c6140, 8) , (ram, 0x4c6140, 8) , (ram, 0x4c6140, 8)]
[(ram, 0x4c6180, 8) INDIRECT (ram, 0x4c6180, 8) , (const, 0x9b7, 4), (ram, 0x4c6180, 8) MULTIEQUAL (ram, 0x4c6180, 8) , (ram, 0x4c6180, 8) , (ram, 0x4c6180, 8)]
[(ram, 0x4c66c8, 4) INDIRECT (ram, 0x4c66c8, 4) , (const, 0x9b7, 4), (ram, 0x4c66c8, 4) MULTIEQUAL (ram, 0x4c66c8, 4) , (ram, 0x4c66c8, 4) , (ram, 0x4c66c8, 4)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x9b7, 4), (ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0x9b7, 4), (ram, 0x4c87c0, 1) MULTIEQUAL (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1)]
[(ram, 0x4c87c1, 1) INDIRECT (ram, 0x4c87c1, 1) , (const, 0x9b7, 4), (ram, 0x4c87c1, 1) MULTIEQUAL (ram, 0x4c87c1, 1) , (ram, 0x4c87c1, 1) , (ram, 0x4c87c1, 1)]
[(ram, 0x4c87f8, 4) INDIRECT (ram, 0x4c87f8, 4) , (const, 0x9b7, 4), (ram, 0x4c87f8, 4) MULTIEQUAL (ram, 0x4c87f8, 4) , (ram, 0x4c87f8, 4) , (ram, 0x4c87f8, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3200, 8) , (const, 0x1, 1), (unique, 0x3200, 8) CAST (unique, 0x10001053, 8), (unique, 0x10001053, 8) INT_ADD (register, 0x0, 8) , (const, 0x31f, 8)]
[(stack, 0xffffffffffffffa4, 4) MULTIEQUAL (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(ram, 0x4c87f8, 4) MULTIEQUAL (ram, 0x4c87f8, 4) , (ram, 0x4c87f8, 4)]
[(ram, 0x4c87c1, 1) MULTIEQUAL (ram, 0x4c87c1, 1) , (ram, 0x4c87c1, 1)]
[(ram, 0x4c87c0, 1) MULTIEQUAL (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1)]
[(ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c66c8, 4) MULTIEQUAL (ram, 0x4c66c8, 4) , (ram, 0x4c66c8, 4)]
[(ram, 0x4c6180, 8) MULTIEQUAL (ram, 0x4c6180, 8) , (ram, 0x4c6180, 8)]
[(ram, 0x4c6140, 8) MULTIEQUAL (ram, 0x4c6140, 8) , (ram, 0x4c6140, 8)]
[(ram, 0x4c6128, 8) MULTIEQUAL (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8)]
[ ---  CBRANCH (ram, 0x48d92b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x58c00, 1) , (const, 0x0, 1), (unique, 0x58c00, 1) INT_AND (unique, 0xbb00, 1) , (const, 0x10, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x1000105b, 8), (unique, 0x1000105b, 8) INT_ADD (register, 0x0, 8) , (const, 0x31c, 8)]
[(ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0x9c8, 4)]
[(ram, 0x4c6140, 8) INDIRECT (ram, 0x4c6140, 8) , (const, 0x9c8, 4)]
[(ram, 0x4c6180, 8) INDIRECT (ram, 0x4c6180, 8) , (const, 0x9c8, 4)]
[(ram, 0x4c66c8, 4) INDIRECT (ram, 0x4c66c8, 4) , (const, 0x9c8, 4)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x9c8, 4)]
[(ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0x9c8, 4)]
[(ram, 0x4c87c1, 1) INDIRECT (ram, 0x4c87c1, 1) , (const, 0x9c8, 4)]
[(ram, 0x4c87f8, 4) INDIRECT (ram, 0x4c87f8, 4) , (const, 0x9c8, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x9c8, 4)]
[(stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0x9c8, 4)]
[ ---  CALL (ram, 0x48c8a0, 8)]
[ ---  BRANCH (ram, 0x48d92b, 1)]
[(ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0x9d9, 4), (ram, 0x4c6128, 8) MULTIEQUAL (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8) , (ram, 0x4c6128, 8)]
[(ram, 0x4c6140, 8) INDIRECT (ram, 0x4c6140, 8) , (const, 0x9d9, 4), (ram, 0x4c6140, 8) MULTIEQUAL (ram, 0x4c6140, 8) , (ram, 0x4c6140, 8) , (ram, 0x4c6140, 8) , (ram, 0x4c6140, 8) , (ram, 0x4c6140, 8)]
[(ram, 0x4c6180, 8) INDIRECT (ram, 0x4c6180, 8) , (const, 0x9d9, 4), (ram, 0x4c6180, 8) MULTIEQUAL (ram, 0x4c6180, 8) , (ram, 0x4c6180, 8) , (ram, 0x4c6180, 8) , (ram, 0x4c6180, 8) , (ram, 0x4c6180, 8)]
[(ram, 0x4c66c8, 4) INDIRECT (ram, 0x4c66c8, 4) , (const, 0x9d9, 4), (ram, 0x4c66c8, 4) MULTIEQUAL (ram, 0x4c66c8, 4) , (ram, 0x4c66c8, 4) , (ram, 0x4c66c8, 4) , (ram, 0x4c66c8, 4) , (ram, 0x4c66c8, 4)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x9d9, 4), (ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0x9d9, 4), (ram, 0x4c87c0, 1) MULTIEQUAL (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1) , (ram, 0x4c87c0, 1)]
[(ram, 0x4c87c1, 1) INDIRECT (ram, 0x4c87c1, 1) , (const, 0x9d9, 4), (ram, 0x4c87c1, 1) MULTIEQUAL (ram, 0x4c87c1, 1) , (ram, 0x4c87c1, 1) , (ram, 0x4c87c1, 1) , (ram, 0x4c87c1, 1) , (ram, 0x4c87c1, 1)]
[(ram, 0x4c87f8, 4) INDIRECT (ram, 0x4c87f8, 4) , (const, 0x9d9, 4), (ram, 0x4c87f8, 4) MULTIEQUAL (ram, 0x4c87f8, 4) , (ram, 0x4c87f8, 4) , (ram, 0x4c87f8, 4) , (ram, 0x4c87f8, 4) , (ram, 0x4c87f8, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x9d9, 4), (stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0x9d9, 4), (stack, 0xffffffffffffffa4, 4) MULTIEQUAL (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4)]
[ ---  CBRANCH (ram, 0x48d40a, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10001063, 8), (unique, 0x10001063, 8) INT_ADD (register, 0x0, 8) , (const, 0x18, 8), (register, 0x0, 8) CALL (ram, 0x458e30, 8) , (const, 0x0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x38, 8) , (const, 0x4, 8) , (const, 0x8, 8)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x9ee, 4)]
[(stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0x9ee, 4)]
[ ---  CALL (ram, 0x403170, 8) , (unique, 0x100006e7, 8) , (unique, 0x1000067f, 8) , (const, 0x230, 4) , (unique, 0x1000070f, 8), (unique, 0x1000070f, 8) COPY (const, 0x4b5478, 8), (unique, 0x100006e7, 8) COPY (const, 0x4b53c8, 8), (unique, 0x1000067f, 8) COPY (const, 0x4b5192, 8)]
[(ram, 0x4c6128, 8) COPY (ram, 0x4c6128, 8), (ram, 0x4c6128, 8) INDIRECT (ram, 0x4c6128, 8) , (const, 0x9ee, 4)]
[(ram, 0x4c6140, 8) COPY (ram, 0x4c6140, 8), (ram, 0x4c6140, 8) INDIRECT (ram, 0x4c6140, 8) , (const, 0x9ee, 4)]
[(ram, 0x4c6180, 8) COPY (ram, 0x4c6180, 8), (ram, 0x4c6180, 8) INDIRECT (ram, 0x4c6180, 8) , (const, 0x9ee, 4)]
[(ram, 0x4c66c8, 4) COPY (ram, 0x4c66c8, 4), (ram, 0x4c66c8, 4) INDIRECT (ram, 0x4c66c8, 4) , (const, 0x9ee, 4)]
[(ram, 0x4c8730, 8) COPY (ram, 0x4c8730, 8), (ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x9ee, 4)]
[(ram, 0x4c87c0, 1) COPY (ram, 0x4c87c0, 1), (ram, 0x4c87c0, 1) INDIRECT (ram, 0x4c87c0, 1) , (const, 0x9ee, 4)]
[(ram, 0x4c87c1, 1) COPY (ram, 0x4c87c1, 1), (ram, 0x4c87c1, 1) INDIRECT (ram, 0x4c87c1, 1) , (const, 0x9ee, 4)]
[(ram, 0x4c87f8, 4) COPY (ram, 0x4c87f8, 4), (ram, 0x4c87f8, 4) INDIRECT (ram, 0x4c87f8, 4) , (const, 0x9ee, 4)]
[ ---  RETURN (const, 0x1, 4)]
[(ram, 0x4c6128, 8) COPY (ram, 0x4c6128, 8)]
[(ram, 0x4c6140, 8) COPY (ram, 0x4c6140, 8)]
[(ram, 0x4c6180, 8) COPY (ram, 0x4c6180, 8)]
[(ram, 0x4c66c8, 4) COPY (ram, 0x4c66c8, 4)]
[(ram, 0x4c8730, 8) COPY (ram, 0x4c8730, 8)]
[(ram, 0x4c87c0, 1) COPY (ram, 0x4c87c0, 1)]
[(ram, 0x4c87c1, 1) COPY (ram, 0x4c87c1, 1)]
[(ram, 0x4c87f8, 4) COPY (ram, 0x4c87f8, 4)]
[ ---  RETURN (const, 0x0, 8)]
