[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff18, 8)]
[ ---  CBRANCH (ram, 0x21251a, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 1) , (const, 0x0, 1)]
[(unique, 0x100001ad, 4) COPY (register, 0x1200, 4)]
[(unique, 0x100001b1, 4) COPY (register, 0x1220, 4)]
[(unique, 0x100001b5, 4) COPY (register, 0x1240, 4)]
[(unique, 0x100001b9, 4) COPY (register, 0x1260, 4)]
[(unique, 0x100001bd, 4) COPY (register, 0x1280, 4)]
[(unique, 0x100001c1, 4) COPY (register, 0x12a0, 4)]
[(unique, 0x100001c5, 4) COPY (register, 0x12c0, 4)]
[(unique, 0x100001c9, 4) COPY (register, 0x12e0, 4)]
[(stack, 0xffffffffffffffd8, 4) MULTIEQUAL (stack, 0xffffffffffffffd8, 4) , (unique, 0x100001c9, 4)]
[(stack, 0xffffffffffffffc8, 4) MULTIEQUAL (stack, 0xffffffffffffffc8, 4) , (unique, 0x100001c5, 4)]
[(stack, 0xffffffffffffffb8, 4) MULTIEQUAL (stack, 0xffffffffffffffb8, 4) , (unique, 0x100001c1, 4)]
[(stack, 0xffffffffffffffa8, 4) MULTIEQUAL (stack, 0xffffffffffffffa8, 4) , (unique, 0x100001bd, 4)]
[(stack, 0xffffffffffffff98, 4) MULTIEQUAL (stack, 0xffffffffffffff98, 4) , (unique, 0x100001b9, 4)]
[(stack, 0xffffffffffffff88, 4) MULTIEQUAL (stack, 0xffffffffffffff88, 4) , (unique, 0x100001b5, 4)]
[(stack, 0xffffffffffffff78, 4) MULTIEQUAL (stack, 0xffffffffffffff78, 4) , (unique, 0x100001b1, 4)]
[(stack, 0xffffffffffffff68, 4) MULTIEQUAL (stack, 0xffffffffffffff68, 4) , (unique, 0x100001ad, 4)]
[ ---  CBRANCH (ram, 0x2125f0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x38, 8) , (const, 0x0, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x100001cd, 8), (unique, 0x100001cd, 8) CAST (ram, 0x4c2db8, 8)]
[ ---  BRANCH (ram, 0x212531, 1)]
[ ---  CBRANCH (ram, 0x2125c2, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x58c00, 1) , (const, 0x0, 1), (unique, 0x58c00, 1) INT_AND (unique, 0xbb00, 1) , (const, 0x2, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100001d5, 8), (unique, 0x100001d5, 8) INT_ADD (register, 0x38, 8) , (const, 0x1c, 8)]
[(ram, 0x4c2db8, 8) COPY (ram, 0x4c2db8, 8)]
[(ram, 0x4c2f38, 8) COPY (ram, 0x4c2f38, 8)]
[ ---  RETURN (const, 0x0, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100001dd, 8), (unique, 0x100001dd, 8) INT_ADD (register, 0x38, 8) , (const, 0x48, 8)]
[ ---  CBRANCH (ram, 0x2125c2, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x28, 8) , (const, 0x0, 8), (register, 0x28, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8)]
[ ---  CALL (ram, 0x16b370, 8) , (register, 0x28, 8)]
[(ram, 0x4c2db8, 8) INDIRECT (ram, 0x4c2db8, 8) , (const, 0x80, 4), (ram, 0x4c2db8, 8) INDIRECT (ram, 0x4c2db8, 8) , (const, 0x69, 4)]
[(ram, 0x4c2f38, 8) INDIRECT (ram, 0x4c2f38, 8) , (const, 0x80, 4), (ram, 0x4c2f38, 8) INDIRECT (ram, 0x4c2f38, 8) , (const, 0x69, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x80, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x69, 4)]
[(stack, 0xffffffffffffff20, 4) INDIRECT (stack, 0xffffffffffffff20, 4) , (const, 0x80, 4), (stack, 0xffffffffffffff20, 4) COPY (const, 0x10, 4)]
[(stack, 0xffffffffffffff24, 4) INDIRECT (stack, 0xffffffffffffff24, 4) , (const, 0x80, 4), (stack, 0xffffffffffffff24, 4) COPY (const, 0x30, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (unique, 0x3c80, 8) , (const, 0x80, 4), (unique, 0x3c80, 8) PTRSUB (register, 0x20, 8) , (const, 0x8, 8)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (unique, 0x3800, 8) , (const, 0x80, 4), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x80, 4), (stack, 0xffffffffffffff48, 8) INDIRECT (unique, 0x1000018d, 8) , (const, 0x69, 4), (unique, 0x1000018d, 8) COPY (register, 0x10, 8)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x80, 4), (stack, 0xffffffffffffff50, 8) INDIRECT (unique, 0x10000195, 8) , (const, 0x69, 4), (unique, 0x10000195, 8) COPY (register, 0x8, 8)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x80, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (unique, 0x1000019d, 8) , (const, 0x69, 4), (unique, 0x1000019d, 8) COPY (register, 0x80, 8)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x80, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (unique, 0x100001a5, 8) , (const, 0x69, 4), (unique, 0x100001a5, 8) COPY (register, 0x88, 8)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x80, 4), (stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x69, 4)]
[(stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0x80, 4), (stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0x69, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x80, 4), (stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x69, 4)]
[(stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0x80, 4), (stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0x69, 4)]
[(stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0x80, 4), (stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0x69, 4)]
[(stack, 0xffffffffffffffb8, 4) INDIRECT (stack, 0xffffffffffffffb8, 4) , (const, 0x80, 4), (stack, 0xffffffffffffffb8, 4) INDIRECT (stack, 0xffffffffffffffb8, 4) , (const, 0x69, 4)]
[(stack, 0xffffffffffffffc8, 4) INDIRECT (stack, 0xffffffffffffffc8, 4) , (const, 0x80, 4), (stack, 0xffffffffffffffc8, 4) INDIRECT (stack, 0xffffffffffffffc8, 4) , (const, 0x69, 4)]
[(stack, 0xffffffffffffffd8, 4) INDIRECT (stack, 0xffffffffffffffd8, 4) , (const, 0x80, 4), (stack, 0xffffffffffffffd8, 4) INDIRECT (stack, 0xffffffffffffffd8, 4) , (const, 0x69, 4)]
[ ---  CBRANCH (ram, 0x2125d0, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x176610, 8) , (register, 0x20, 8) , (register, 0x30, 8) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff18, 8) COPY (const, 0x0, 8)]
[(unique, 0x10000183, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[ ---  CBRANCH (ram, 0x21258c, 1) , (unique, 0x10000182, 1), (unique, 0x10000182, 1) INT_EQUAL (register, 0x38, 8) , (const, 0x0, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100001e5, 8), (unique, 0x100001e5, 8) INT_ADD (register, 0x38, 8) , (const, 0x40, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x100001ed, 8), (unique, 0x100001ed, 8) CAST (ram, 0x4c2f38, 8)]
[ ---  BRANCH (ram, 0x212590, 1)]
[ ---  CALL (ram, 0x16cfd0, 8) , (register, 0x28, 8) , (unique, 0x10000159, 8) , (register, 0x10, 8) , (unique, 0x10000183, 8), (unique, 0x10000159, 8) COPY (const, 0x28dec4, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8)]
[ ---  CALL (ram, 0x11f8a8, 8) , (stack, 0xffffffffffffff18, 8), (stack, 0xffffffffffffff18, 8) INDIRECT (unique, 0x10000183, 8) , (const, 0xa8, 4)]
[ ---  CALL (ram, 0x212420, 8) , (register, 0x38, 8) , (register, 0x28, 8) , (const, 0x104, 8)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0xb7, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0xb3, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0xad, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (unique, 0x10000183, 8) , (const, 0xa8, 4)]
[(stack, 0xffffffffffffff20, 4) INDIRECT (stack, 0xffffffffffffff20, 4) , (const, 0xb7, 4), (stack, 0xffffffffffffff20, 4) INDIRECT (stack, 0xffffffffffffff20, 4) , (const, 0xb3, 4), (stack, 0xffffffffffffff20, 4) INDIRECT (stack, 0xffffffffffffff20, 4) , (const, 0xad, 4), (stack, 0xffffffffffffff20, 4) INDIRECT (stack, 0xffffffffffffff20, 4) , (const, 0xa8, 4)]
[(stack, 0xffffffffffffff24, 4) INDIRECT (stack, 0xffffffffffffff24, 4) , (const, 0xb7, 4), (stack, 0xffffffffffffff24, 4) INDIRECT (stack, 0xffffffffffffff24, 4) , (const, 0xb3, 4), (stack, 0xffffffffffffff24, 4) INDIRECT (stack, 0xffffffffffffff24, 4) , (const, 0xad, 4), (stack, 0xffffffffffffff24, 4) INDIRECT (stack, 0xffffffffffffff24, 4) , (const, 0xa8, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0xb7, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0xb3, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0xad, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0xa8, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0xb7, 4), (stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0xb3, 4), (stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0xad, 4), (stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0xa8, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0xb7, 4), (stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0xb3, 4), (stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0xad, 4), (stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0xa8, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0xb7, 4), (stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0xb3, 4), (stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0xad, 4), (stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0xa8, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0xb7, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0xb3, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0xad, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0xa8, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0xb7, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0xb3, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0xad, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0xa8, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0xb7, 4), (stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0xb3, 4), (stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0xad, 4), (stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0xa8, 4)]
[(stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0xb7, 4), (stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0xb3, 4), (stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0xad, 4), (stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0xa8, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0xb7, 4), (stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0xb3, 4), (stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0xad, 4), (stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0xa8, 4)]
[(stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0xb7, 4), (stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0xb3, 4), (stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0xad, 4), (stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0xa8, 4)]
[(stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0xb7, 4), (stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0xb3, 4), (stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0xad, 4), (stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0xa8, 4)]
[(stack, 0xffffffffffffffb8, 4) INDIRECT (stack, 0xffffffffffffffb8, 4) , (const, 0xb7, 4), (stack, 0xffffffffffffffb8, 4) INDIRECT (stack, 0xffffffffffffffb8, 4) , (const, 0xb3, 4), (stack, 0xffffffffffffffb8, 4) INDIRECT (stack, 0xffffffffffffffb8, 4) , (const, 0xad, 4), (stack, 0xffffffffffffffb8, 4) INDIRECT (stack, 0xffffffffffffffb8, 4) , (const, 0xa8, 4)]
[(stack, 0xffffffffffffffc8, 4) INDIRECT (stack, 0xffffffffffffffc8, 4) , (const, 0xb7, 4), (stack, 0xffffffffffffffc8, 4) INDIRECT (stack, 0xffffffffffffffc8, 4) , (const, 0xb3, 4), (stack, 0xffffffffffffffc8, 4) INDIRECT (stack, 0xffffffffffffffc8, 4) , (const, 0xad, 4), (stack, 0xffffffffffffffc8, 4) INDIRECT (stack, 0xffffffffffffffc8, 4) , (const, 0xa8, 4)]
[(stack, 0xffffffffffffffd8, 4) INDIRECT (stack, 0xffffffffffffffd8, 4) , (const, 0xb7, 4), (stack, 0xffffffffffffffd8, 4) INDIRECT (stack, 0xffffffffffffffd8, 4) , (const, 0xb3, 4), (stack, 0xffffffffffffffd8, 4) INDIRECT (stack, 0xffffffffffffffd8, 4) , (const, 0xad, 4), (stack, 0xffffffffffffffd8, 4) INDIRECT (stack, 0xffffffffffffffd8, 4) , (const, 0xa8, 4)]
[ ---  CALL (ram, 0x16b430, 8) , (register, 0x28, 8)]
[(ram, 0x4c2db8, 8) COPY (ram, 0x4c2db8, 8), (ram, 0x4c2db8, 8) INDIRECT (ram, 0x4c2db8, 8) , (const, 0xb7, 4), (ram, 0x4c2db8, 8) INDIRECT (ram, 0x4c2db8, 8) , (const, 0xb3, 4), (ram, 0x4c2db8, 8) INDIRECT (ram, 0x4c2db8, 8) , (const, 0xad, 4), (ram, 0x4c2db8, 8) INDIRECT (ram, 0x4c2db8, 8) , (const, 0xa8, 4)]
[(ram, 0x4c2f38, 8) COPY (ram, 0x4c2f38, 8), (ram, 0x4c2f38, 8) INDIRECT (ram, 0x4c2f38, 8) , (const, 0xb7, 4), (ram, 0x4c2f38, 8) INDIRECT (ram, 0x4c2f38, 8) , (const, 0xb3, 4), (ram, 0x4c2f38, 8) INDIRECT (ram, 0x4c2f38, 8) , (const, 0xad, 4), (ram, 0x4c2f38, 8) INDIRECT (ram, 0x4c2f38, 8) , (const, 0xa8, 4)]
[ ---  RETURN (const, 0x0, 8)]
[(ram, 0x4c2db8, 8) COPY (ram, 0x4c2db8, 8)]
[(ram, 0x4c2f38, 8) COPY (ram, 0x4c2f38, 8)]
[ ---  RETURN (const, 0x0, 8)]
