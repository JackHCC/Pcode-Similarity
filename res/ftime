[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x23, 4)]
[(stack, 0xffffffffffffffd0, 2) INDIRECT (stack, 0xffffffffffffffd0, 2) , (const, 0x23, 4)]
[(stack, 0xffffffffffffffd4, 2) INDIRECT (stack, 0xffffffffffffffd4, 2) , (const, 0x23, 4)]
[(stack, 0xffffffffffffffd8, 8) INDIRECT (stack, 0xffffffffffffffd8, 8) , (const, 0x23, 4)]
[(stack, 0xffffffffffffffe0, 8) INDIRECT (stack, 0xffffffffffffffe0, 8) , (const, 0x23, 4)]
[(stack, 0xfffffffffffffff0, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x23, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10000086, 8), (unique, 0x10000086, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8)]
[ ---  CBRANCH (ram, 0x1d6000, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x120ff0, 8) , (unique, 0x3800, 8) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffd8, 8), (unique, 0x3800, 8) CAST (unique, 0x1000007e, 8), (unique, 0x1000007e, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffd0, 8)]
[(register, 0x0, 8) COPY (const, 0xffffffff, 8)]
[ ---  BRANCH (ram, 0x1d5fe4, 1)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x38, 8) , (stack, 0xffffffffffffffd8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000008e, 8) , (register, 0x10, 2), (unique, 0x1000008e, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x38, 8) , (const, 0x1, 8) , (const, 0x8, 8), (register, 0x10, 2) SUBPIECE (unique, 0x1000002a, 8) , (const, 0x0, 4), (unique, 0x1000002a, 8) INT_SDIV (unique, 0x3200, 8) , (const, 0x3e8, 8), (unique, 0x3200, 8) INT_ADD (stack, 0xffffffffffffffe0, 8) , (const, 0x1f4, 8)]
[ ---  CBRANCH (ram, 0x1d5fd2, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x10, 2) , (const, 0x3e8, 2), (register, 0x10, 2) SUBPIECE (unique, 0x1000002a, 8) , (const, 0x0, 4), (unique, 0x1000002a, 8) INT_SDIV (unique, 0x3200, 8) , (const, 0x3e8, 8), (unique, 0x3200, 8) INT_ADD (stack, 0xffffffffffffffe0, 8) , (const, 0x1f4, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x38, 8) , (register, 0x30, 8), (register, 0x30, 8) INT_ADD (stack, 0xffffffffffffffd8, 8) , (const, 0x1, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000096, 8) , (const, 0x0, 2), (unique, 0x10000096, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x38, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (stack, 0xffffffffffffffd0, 2), (unique, 0x3100, 8) CAST (unique, 0x100000a6, 8), (unique, 0x100000a6, 8) INT_ADD (unique, 0x1000009e, 8) , (const, 0xa, 8), (unique, 0x1000009e, 8) CAST (register, 0x38, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (stack, 0xffffffffffffffd4, 2), (unique, 0x3100, 8) CAST (unique, 0x100000b6, 8), (unique, 0x100000b6, 8) INT_ADD (unique, 0x100000ae, 8) , (const, 0xc, 8), (unique, 0x100000ae, 8) CAST (register, 0x38, 8)]
[(register, 0x0, 8) COPY (const, 0x0, 8)]
[(register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x1d6007, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xfffffffffffffff0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x100000be, 8), (unique, 0x100000be, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8)]
[(stack, 0xfffffffffffffff0, 8) INDIRECT (stack, 0xfffffffffffffff0, 8) , (const, 0xed, 4)]
[ ---  CALL (ram, 0x234c80, 8)]
[ ---  RETURN (const, 0x1, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8)]
