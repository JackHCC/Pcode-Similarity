[(unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0x80, 8)]
[(unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x80, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x1000008b, 8), (unique, 0x1000008b, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8)]
[(unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x80, 8) , (const, 0x2, 8) , (const, 0x1, 8)]
[(unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x80, 8) , (const, 0x3, 8) , (const, 0x1, 8)]
[(unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x80, 8) , (const, 0x4, 8) , (const, 0x1, 8)]
[(unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x80, 8) , (const, 0x5, 8) , (const, 0x1, 8)]
[(unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x80, 8) , (const, 0x6, 8) , (const, 0x1, 8)]
[(unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x80, 8) , (const, 0x7, 8) , (const, 0x1, 8)]
[(stack, 0xffffffffffffffa4, 4) COPY (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x250040, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x1000006e, 4) , (const, 0x0, 4), (unique, 0x1000006e, 4) INT_AND (register, 0x10, 4) , (const, 0x7, 4)]
[ ---  CBRANCH (ram, 0x250040, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (register, 0x10, 4) , (const, 0x2001, 4)]
[(register, 0x0, 4) COPY (const, 0x3, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xca, 4)]
[(stack, 0xffffffffffffff98, 1) INDIRECT (unique, 0xbb00, 1) , (const, 0xca, 4), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0x38, 8)]
[(stack, 0xffffffffffffff99, 1) INDIRECT (unique, 0xbb00, 1) , (const, 0xca, 4), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x38, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[(stack, 0xffffffffffffff9a, 1) INDIRECT (unique, 0xbb00, 1) , (const, 0xca, 4), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x38, 8) , (const, 0x2, 8) , (const, 0x1, 8)]
[(stack, 0xffffffffffffff9b, 1) INDIRECT (unique, 0xbb00, 1) , (const, 0xca, 4), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x38, 8) , (const, 0x3, 8) , (const, 0x1, 8)]
[(stack, 0xffffffffffffff9c, 1) INDIRECT (unique, 0xbb00, 1) , (const, 0xca, 4), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x38, 8) , (const, 0x4, 8) , (const, 0x1, 8)]
[(stack, 0xffffffffffffff9d, 1) INDIRECT (unique, 0xbb00, 1) , (const, 0xca, 4), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x38, 8) , (const, 0x5, 8) , (const, 0x1, 8)]
[(stack, 0xffffffffffffff9e, 1) INDIRECT (unique, 0xbb00, 1) , (const, 0xca, 4), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x38, 8) , (const, 0x6, 8) , (const, 0x1, 8)]
[(stack, 0xffffffffffffff9f, 1) INDIRECT (unique, 0xbb00, 1) , (const, 0xca, 4), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x38, 8) , (const, 0x7, 8) , (const, 0x1, 8)]
[(stack, 0xffffffffffffffa0, 4) INDIRECT (register, 0x10, 4) , (const, 0xca, 4), (register, 0x10, 4) INT_AND (register, 0x8, 4) , (const, 0x1, 4)]
[(stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0xca, 4)]
[(stack, 0xffffffffffffffa8, 1) INDIRECT (unique, 0xbb00, 1) , (const, 0xca, 4)]
[(stack, 0xffffffffffffffa9, 1) INDIRECT (unique, 0xbb00, 1) , (const, 0xca, 4)]
[(stack, 0xffffffffffffffaa, 1) INDIRECT (unique, 0xbb00, 1) , (const, 0xca, 4)]
[(stack, 0xffffffffffffffab, 1) INDIRECT (unique, 0xbb00, 1) , (const, 0xca, 4)]
[(stack, 0xffffffffffffffac, 1) INDIRECT (unique, 0xbb00, 1) , (const, 0xca, 4)]
[(stack, 0xffffffffffffffad, 1) INDIRECT (unique, 0xbb00, 1) , (const, 0xca, 4)]
[(stack, 0xffffffffffffffae, 1) INDIRECT (unique, 0xbb00, 1) , (const, 0xca, 4)]
[(stack, 0xffffffffffffffaf, 1) INDIRECT (unique, 0xbb00, 1) , (const, 0xca, 4)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0xca, 4)]
[ ---  CBRANCH (ram, 0x250080, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x250190, 8) , (register, 0x30, 8) , (register, 0x10, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff98, 8)]
[(register, 0x0, 4) COPY (const, 0x2, 4)]
[ ---  BRANCH (ram, 0x250045, 1)]
[(register, 0x0, 4) INT_ZEXT (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x8, 4) , (const, 0x0, 4), (register, 0x8, 4) INT_AND (register, 0x8, 4) , (const, 0x2, 4)]
[ ---  BRANCH (ram, 0x250045, 1)]
[(stack, 0xffffffffffffffa4, 4) MULTIEQUAL (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4)]
[(stack, 0xffffffffffffffa0, 4) MULTIEQUAL (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4)]
[(stack, 0xffffffffffffff9f, 1) MULTIEQUAL (stack, 0xffffffffffffff9f, 1) , (stack, 0xffffffffffffff9f, 1) , (stack, 0xffffffffffffff9f, 1)]
[(stack, 0xffffffffffffff9e, 1) MULTIEQUAL (stack, 0xffffffffffffff9e, 1) , (stack, 0xffffffffffffff9e, 1) , (stack, 0xffffffffffffff9e, 1)]
[(stack, 0xffffffffffffff9d, 1) MULTIEQUAL (stack, 0xffffffffffffff9d, 1) , (stack, 0xffffffffffffff9d, 1) , (stack, 0xffffffffffffff9d, 1)]
[(stack, 0xffffffffffffff9c, 1) MULTIEQUAL (stack, 0xffffffffffffff9c, 1) , (stack, 0xffffffffffffff9c, 1) , (stack, 0xffffffffffffff9c, 1)]
[(stack, 0xffffffffffffff9b, 1) MULTIEQUAL (stack, 0xffffffffffffff9b, 1) , (stack, 0xffffffffffffff9b, 1) , (stack, 0xffffffffffffff9b, 1)]
[(stack, 0xffffffffffffff9a, 1) MULTIEQUAL (stack, 0xffffffffffffff9a, 1) , (stack, 0xffffffffffffff9a, 1) , (stack, 0xffffffffffffff9a, 1)]
[(stack, 0xffffffffffffff99, 1) MULTIEQUAL (stack, 0xffffffffffffff99, 1) , (stack, 0xffffffffffffff99, 1) , (stack, 0xffffffffffffff99, 1)]
[(stack, 0xffffffffffffff98, 1) MULTIEQUAL (stack, 0xffffffffffffff98, 1) , (stack, 0xffffffffffffff98, 1) , (stack, 0xffffffffffffff98, 1)]
[(register, 0x0, 4) MULTIEQUAL (register, 0x0, 4) , (register, 0x0, 4) , (register, 0x0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x80, 8) , (stack, 0xffffffffffffffa8, 1), (stack, 0xffffffffffffffa8, 1) MULTIEQUAL (stack, 0xffffffffffffffa8, 1) , (stack, 0xffffffffffffffa8, 1) , (unique, 0xbb00, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (stack, 0xffffffffffffffa9, 1), (unique, 0x3100, 8) PTRADD (register, 0x80, 8) , (const, 0x1, 8) , (const, 0x1, 8), (stack, 0xffffffffffffffa9, 1) MULTIEQUAL (stack, 0xffffffffffffffa9, 1) , (stack, 0xffffffffffffffa9, 1) , (unique, 0xbb00, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (stack, 0xffffffffffffffaa, 1), (unique, 0x3100, 8) PTRADD (register, 0x80, 8) , (const, 0x2, 8) , (const, 0x1, 8), (stack, 0xffffffffffffffaa, 1) MULTIEQUAL (stack, 0xffffffffffffffaa, 1) , (stack, 0xffffffffffffffaa, 1) , (unique, 0xbb00, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (stack, 0xffffffffffffffab, 1), (unique, 0x3100, 8) PTRADD (register, 0x80, 8) , (const, 0x3, 8) , (const, 0x1, 8), (stack, 0xffffffffffffffab, 1) MULTIEQUAL (stack, 0xffffffffffffffab, 1) , (stack, 0xffffffffffffffab, 1) , (unique, 0xbb00, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (stack, 0xffffffffffffffac, 1), (unique, 0x3100, 8) PTRADD (register, 0x80, 8) , (const, 0x4, 8) , (const, 0x1, 8), (stack, 0xffffffffffffffac, 1) MULTIEQUAL (stack, 0xffffffffffffffac, 1) , (stack, 0xffffffffffffffac, 1) , (unique, 0xbb00, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (stack, 0xffffffffffffffad, 1), (unique, 0x3100, 8) PTRADD (register, 0x80, 8) , (const, 0x5, 8) , (const, 0x1, 8), (stack, 0xffffffffffffffad, 1) MULTIEQUAL (stack, 0xffffffffffffffad, 1) , (stack, 0xffffffffffffffad, 1) , (unique, 0xbb00, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (stack, 0xffffffffffffffae, 1), (unique, 0x3100, 8) PTRADD (register, 0x80, 8) , (const, 0x6, 8) , (const, 0x1, 8), (stack, 0xffffffffffffffae, 1) MULTIEQUAL (stack, 0xffffffffffffffae, 1) , (stack, 0xffffffffffffffae, 1) , (unique, 0xbb00, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (stack, 0xffffffffffffffaf, 1), (unique, 0x3100, 8) PTRADD (register, 0x80, 8) , (const, 0x7, 8) , (const, 0x1, 8), (stack, 0xffffffffffffffaf, 1) MULTIEQUAL (stack, 0xffffffffffffffaf, 1) , (stack, 0xffffffffffffffaf, 1) , (unique, 0xbb00, 1)]
[ ---  CBRANCH (ram, 0x2500b4, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffffd0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10000093, 8), (unique, 0x10000093, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8), (stack, 0xffffffffffffffd0, 8) MULTIEQUAL (stack, 0xffffffffffffffd0, 8) , (stack, 0xffffffffffffffd0, 8) , (unique, 0xbd80, 8)]
[(stack, 0xffffffffffffff98, 1) INDIRECT (stack, 0xffffffffffffff98, 1) , (const, 0x14f, 4)]
[(stack, 0xffffffffffffff99, 1) INDIRECT (stack, 0xffffffffffffff99, 1) , (const, 0x14f, 4)]
[(stack, 0xffffffffffffff9a, 1) INDIRECT (stack, 0xffffffffffffff9a, 1) , (const, 0x14f, 4)]
[(stack, 0xffffffffffffff9b, 1) INDIRECT (stack, 0xffffffffffffff9b, 1) , (const, 0x14f, 4)]
[(stack, 0xffffffffffffff9c, 1) INDIRECT (stack, 0xffffffffffffff9c, 1) , (const, 0x14f, 4)]
[(stack, 0xffffffffffffff9d, 1) INDIRECT (stack, 0xffffffffffffff9d, 1) , (const, 0x14f, 4)]
[(stack, 0xffffffffffffff9e, 1) INDIRECT (stack, 0xffffffffffffff9e, 1) , (const, 0x14f, 4)]
[(stack, 0xffffffffffffff9f, 1) INDIRECT (stack, 0xffffffffffffff9f, 1) , (const, 0x14f, 4)]
[(stack, 0xffffffffffffffa0, 4) INDIRECT (stack, 0xffffffffffffffa0, 4) , (const, 0x14f, 4)]
[(stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0x14f, 4)]
[(stack, 0xffffffffffffffa8, 1) INDIRECT (stack, 0xffffffffffffffa8, 1) , (const, 0x14f, 4)]
[(stack, 0xffffffffffffffa9, 1) INDIRECT (stack, 0xffffffffffffffa9, 1) , (const, 0x14f, 4)]
[(stack, 0xffffffffffffffaa, 1) INDIRECT (stack, 0xffffffffffffffaa, 1) , (const, 0x14f, 4)]
[(stack, 0xffffffffffffffab, 1) INDIRECT (stack, 0xffffffffffffffab, 1) , (const, 0x14f, 4)]
[(stack, 0xffffffffffffffac, 1) INDIRECT (stack, 0xffffffffffffffac, 1) , (const, 0x14f, 4)]
[(stack, 0xffffffffffffffad, 1) INDIRECT (stack, 0xffffffffffffffad, 1) , (const, 0x14f, 4)]
[(stack, 0xffffffffffffffae, 1) INDIRECT (stack, 0xffffffffffffffae, 1) , (const, 0x14f, 4)]
[(stack, 0xffffffffffffffaf, 1) INDIRECT (stack, 0xffffffffffffffaf, 1) , (const, 0x14f, 4)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0x14f, 4)]
[ ---  CALL (ram, 0x234c80, 8)]
[ ---  RETURN (const, 0x1, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 4), (register, 0x0, 4) CAST (unique, 0x1000009b, 4), (unique, 0x1000009b, 4) COPY (register, 0x0, 4)]
