[ ---  CBRANCH (ram, 0x426bd8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4c7c78, 8) , (const, 0x0, 8)]
[ ---  CALLIND (ram, 0x4c7c78, 8) , (register, 0x38, 8) , (unique, 0x1000006d, 8), (unique, 0x1000006d, 8) INT_ADD (unique, 0x10000083, 8) , (stack, 0x0, 1), (unique, 0x10000083, 8) INT_LEFT (unique, 0x1000007b, 8) , (const, 0x8, 8), (unique, 0x1000007b, 8) INT_SEXT (unique, 0x1000008b, 7), (unique, 0x1000008b, 7) CAST (stack, 0x1, 7)]
[(ram, 0x4c5700, 8) COPY (ram, 0x4c5700, 8), (ram, 0x4c5700, 8) INDIRECT (ram, 0x4c5700, 8) , (const, 0xdf, 4)]
[(ram, 0x4c5710, 8) COPY (ram, 0x4c5710, 8), (ram, 0x4c5710, 8) INDIRECT (ram, 0x4c5710, 8) , (const, 0xdf, 4)]
[(ram, 0x4c5734, 4) COPY (ram, 0x4c5734, 4), (ram, 0x4c5734, 4) INDIRECT (ram, 0x4c5734, 4) , (const, 0xdf, 4)]
[(ram, 0x4c7c78, 8) COPY (ram, 0x4c7c78, 8), (ram, 0x4c7c78, 8) INDIRECT (ram, 0x4c7c78, 8) , (const, 0xdf, 4)]
[ ---  RETURN (const, 0x1, 4)]
[ ---  CBRANCH (ram, 0x426bd0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x38, 8) , (const, 0x0, 8)]
[(ram, 0x4c5700, 8) COPY (ram, 0x4c5700, 8)]
[(ram, 0x4c5710, 8) COPY (ram, 0x4c5710, 8)]
[(ram, 0x4c5734, 4) COPY (ram, 0x4c5734, 4)]
[(ram, 0x4c7c78, 8) COPY (ram, 0x4c7c78, 8)]
[ ---  RETURN (const, 0x0, 8)]
[(unique, 0x3100, 8) INT_SUB (unique, 0x100000a2, 8) , (const, 0x10, 8), (unique, 0x100000a2, 8) CAST (register, 0x38, 8)]
[ ---  CBRANCH (ram, 0x426ba0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x1000002c, 8) , (const, 0x0, 8), (unique, 0x1000002c, 8) INT_AND (unique, 0xbd80, 8) , (const, 0x2, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000009a, 8), (unique, 0x1000009a, 8) INT_ADD (unique, 0x10000092, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x10000092, 8) CAST (register, 0x38, 8)]
[ ---  CBRANCH (ram, 0x426bbb, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4c5734, 4) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x426bbb, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (ram, 0x4c5710, 8) , (unique, 0xbd80, 8)]
[ ---  CBRANCH (ram, 0x426be8, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (unique, 0xbd80, 8) , (const, 0x2000001, 8)]
[(unique, 0x10000065, 8) INT_MULT (register, 0x0, 8) , (const, 0x2, 8), (register, 0x0, 8) INT_AND (unique, 0xbd80, 8) , (const, 0xfffffffffffffff8, 8)]
[ ---  BRANCH (ram, 0x426bbb, 1)]
[ ---  CALL (ram, 0x421a50, 8) , (unique, 0x3100, 8)]
[(ram, 0x4c5700, 8) COPY (ram, 0x4c5700, 8), (ram, 0x4c5700, 8) INDIRECT (ram, 0x4c5700, 8) , (const, 0xb6, 4), (ram, 0x4c5700, 8) MULTIEQUAL (ram, 0x4c5700, 8) , (ram, 0x4c5700, 8) , (ram, 0x4c5700, 8) , (unique, 0x10000065, 8)]
[(ram, 0x4c5710, 8) COPY (ram, 0x4c5710, 8), (ram, 0x4c5710, 8) INDIRECT (ram, 0x4c5710, 8) , (const, 0xb6, 4), (ram, 0x4c5710, 8) MULTIEQUAL (ram, 0x4c5710, 8) , (ram, 0x4c5710, 8) , (ram, 0x4c5710, 8) , (register, 0x0, 8)]
[(ram, 0x4c5734, 4) COPY (ram, 0x4c5734, 4), (ram, 0x4c5734, 4) INDIRECT (ram, 0x4c5734, 4) , (const, 0xb6, 4)]
[(ram, 0x4c7c78, 8) COPY (ram, 0x4c7c78, 8), (ram, 0x4c7c78, 8) INDIRECT (ram, 0x4c7c78, 8) , (const, 0xb6, 4)]
[ ---  RETURN (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x426c08, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbe00, 8) , (const, 0x0, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x100000aa, 8), (unique, 0x100000aa, 8) INT_ADD (register, 0x110, 8) , (const, 0xffffffc8, 8)]
[ ---  CBRANCH (ram, 0x426b79, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x100000b2, 8), (unique, 0x100000b2, 8) INT_ADD (register, 0x110, 8) , (const, 0xffffffd0, 8)]
[(ram, 0x4c5700, 8) INDIRECT (ram, 0x4c5700, 8) , (const, 0x7f, 4)]
[(ram, 0x4c5710, 8) INDIRECT (ram, 0x4c5710, 8) , (const, 0x7f, 4)]
[(ram, 0x4c5734, 4) INDIRECT (ram, 0x4c5734, 4) , (const, 0x7f, 4)]
[(ram, 0x4c7c78, 8) INDIRECT (ram, 0x4c7c78, 8) , (const, 0x7f, 4)]
[ ---  CALL (ram, 0x424e50, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100000c2, 8), (unique, 0x100000c2, 8) INT_ADD (unique, 0x100000ba, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x100000ba, 8) CAST (register, 0x38, 8)]
[ ---  BRANCH (ram, 0x426b79, 1)]
[(ram, 0x4c7c78, 8) MULTIEQUAL (ram, 0x4c7c78, 8) , (ram, 0x4c7c78, 8) , (ram, 0x4c7c78, 8)]
[(ram, 0x4c5734, 4) MULTIEQUAL (ram, 0x4c5734, 4) , (ram, 0x4c5734, 4) , (ram, 0x4c5734, 4)]
[(ram, 0x4c5710, 8) MULTIEQUAL (ram, 0x4c5710, 8) , (ram, 0x4c5710, 8) , (ram, 0x4c5710, 8)]
[(ram, 0x4c5700, 8) MULTIEQUAL (ram, 0x4c5700, 8) , (ram, 0x4c5700, 8) , (ram, 0x4c5700, 8)]
[(register, 0x38, 8) PTRSUB (const, 0x0, 8) , (const, 0x4c57a0, 8)]
[ ---  CBRANCH (ram, 0x426b90, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x1000003c, 8) , (const, 0x0, 8), (unique, 0x1000003c, 8) INT_AND (register, 0x0, 8) , (const, 0x4, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8) , (unique, 0xbd80, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x100000ca, 8), (unique, 0x100000ca, 8) INT_AND (unique, 0x3100, 8) , (const, 0xfffffffffc000000, 8)]
[ ---  CALL (ram, 0x422d80, 8) , (register, 0x38, 8) , (unique, 0x3100, 8) , (const, 0x0, 8), (register, 0x38, 8) MULTIEQUAL (register, 0x38, 8) , (unique, 0xbd80, 8)]
[(ram, 0x4c5700, 8) COPY (ram, 0x4c5700, 8), (ram, 0x4c5700, 8) INDIRECT (ram, 0x4c5700, 8) , (const, 0x67, 4)]
[(ram, 0x4c5710, 8) COPY (ram, 0x4c5710, 8), (ram, 0x4c5710, 8) INDIRECT (ram, 0x4c5710, 8) , (const, 0x67, 4)]
[(ram, 0x4c5734, 4) COPY (ram, 0x4c5734, 4), (ram, 0x4c5734, 4) INDIRECT (ram, 0x4c5734, 4) , (const, 0x67, 4)]
[(ram, 0x4c7c78, 8) COPY (ram, 0x4c7c78, 8), (ram, 0x4c7c78, 8) INDIRECT (ram, 0x4c7c78, 8) , (const, 0x67, 4)]
[ ---  RETURN (const, 0x0, 8)]
