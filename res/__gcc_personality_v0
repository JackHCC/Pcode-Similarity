[(register, 0x0, 8) COPY (const, 0x3, 8)]
[(stack, 0xffffffffffffff7c, 4) COPY (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x4972cd, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x38, 4) , (const, 0x1, 4)]
[ ---  CBRANCH (ram, 0x4972e0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x30, 4) , (const, 0x0, 4), (register, 0x30, 4) INT_AND (register, 0x30, 4) , (const, 0x2, 4)]
[(stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0x5b, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x5b, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x5b, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x5b, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x5b, 4)]
[ ---  CBRANCH (ram, 0x4972c8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10000219, 8), (unique, 0x10000219, 8) CALL (ram, 0x494b60, 8)]
[(register, 0x0, 8) COPY (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x497303, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x80, 8) , (const, 0x0, 8)]
[(stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0x7e, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x7e, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x7e, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x7e, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x7e, 4)]
[(register, 0x0, 8) CALL (ram, 0x494b70, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff7c, 4) MULTIEQUAL (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4)]
[(unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[(unique, 0x10000209, 8) COPY (unique, 0x100001f9, 8), (unique, 0x100001f9, 8) COPY (register, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x4974a0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0xff, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0x0, 8)]
[(stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0xa2, 4), (stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0x99, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0xa2, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x99, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0xa2, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x99, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0xa2, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x99, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0xa2, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (register, 0x0, 8) , (const, 0x99, 4)]
[(register, 0x0, 8) CAST (unique, 0x10000221, 8), (unique, 0x10000221, 8) CALL (ram, 0x497140, 8) , (unique, 0xbb00, 1) , (register, 0x0, 8) , (unique, 0x3100, 8), (register, 0x0, 8) CALL (ram, 0x4970c0, 8) , (unique, 0xbb00, 1) , (register, 0x80, 8)]
[(unique, 0x10000201, 8) COPY (stack, 0xffffffffffffffa0, 8), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0xa2, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x99, 4)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (register, 0x0, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff7c, 4) MULTIEQUAL (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4)]
[(stack, 0xffffffffffffffa0, 8) COPY (unique, 0x10000211, 8), (unique, 0x10000211, 8) MULTIEQUAL (unique, 0x10000201, 8) , (unique, 0x10000209, 8)]
[(unique, 0x3100, 8) CAST (unique, 0x10000229, 8), (unique, 0x10000229, 8) PTRADD (register, 0xa8, 8) , (const, 0x1, 8) , (const, 0x1, 8), (register, 0xa8, 8) MULTIEQUAL (register, 0x0, 8) , (unique, 0x3100, 8)]
[ ---  CBRANCH (ram, 0x4974aa, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0xff, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0xa8, 8), (register, 0xa8, 8) MULTIEQUAL (register, 0x0, 8) , (unique, 0x3100, 8)]
[(stack, 0xffffffffffffffb0, 8) COPY (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x497382, 1)]
[(register, 0x38, 8) COPY (const, 0x0, 8)]
[(register, 0x8, 1) COPY (const, 0x0, 1)]
[(register, 0x30, 8) PTRADD (register, 0x30, 8) , (const, 0x1, 8) , (const, 0x1, 8), (register, 0x30, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0x30, 8)]
[(register, 0x8, 1) INT_ADD (register, 0x8, 1) , (const, 0x7, 1), (register, 0x8, 1) MULTIEQUAL (register, 0x8, 1) , (register, 0x8, 1)]
[(register, 0x38, 8) INT_OR (register, 0x38, 8) , (register, 0x0, 8), (register, 0x0, 8) INT_LEFT (register, 0x0, 8) , (unique, 0x53700, 1), (unique, 0x53700, 1) INT_AND (register, 0x8, 1) , (const, 0x3f, 1), (register, 0x0, 8) INT_ZEXT (register, 0x0, 4), (register, 0x0, 4) INT_AND (register, 0x0, 4) , (const, 0x7f, 4), (register, 0x0, 4) INT_ZEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0x30, 8), (register, 0x8, 1) MULTIEQUAL (register, 0x8, 1) , (register, 0x8, 1), (register, 0x30, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0x30, 8), (register, 0x38, 8) MULTIEQUAL (register, 0x38, 8) , (register, 0x38, 8)]
[ ---  CBRANCH (ram, 0x497360, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (unique, 0x10000231, 1) , (const, 0x0, 1), (unique, 0x10000231, 1) CAST (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0x30, 8), (register, 0x30, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0x30, 8)]
[(register, 0x38, 8) PTRADD (register, 0x30, 8) , (register, 0x38, 8) , (const, 0x1, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (register, 0x38, 8) , (stack, 0xffffffffffffffb0, 8)]
[(unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0x30, 8), (register, 0x30, 8) MULTIEQUAL (register, 0x30, 8) , (unique, 0x3100, 8)]
[(unique, 0x3100, 8) PTRADD (register, 0x30, 8) , (const, 0x1, 8) , (const, 0x1, 8), (register, 0x30, 8) MULTIEQUAL (register, 0x30, 8) , (unique, 0x3100, 8)]
[(register, 0x38, 8) COPY (const, 0x0, 8)]
[(register, 0x8, 1) COPY (const, 0x0, 1)]
[(register, 0xa0, 8) PTRADD (register, 0xa0, 8) , (const, 0x1, 8) , (const, 0x1, 8), (register, 0xa0, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0xa0, 8)]
[(register, 0x8, 1) INT_ADD (register, 0x8, 1) , (const, 0x7, 1), (register, 0x8, 1) MULTIEQUAL (register, 0x8, 1) , (register, 0x8, 1)]
[(register, 0x38, 8) INT_OR (register, 0x38, 8) , (register, 0x0, 8), (register, 0x0, 8) INT_LEFT (register, 0x0, 8) , (unique, 0x53700, 1), (unique, 0x53700, 1) INT_AND (register, 0x8, 1) , (const, 0x3f, 1), (register, 0x0, 8) INT_ZEXT (register, 0x0, 4), (register, 0x0, 4) INT_AND (register, 0x0, 4) , (const, 0x7f, 4), (register, 0x0, 4) INT_ZEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0xa0, 8), (register, 0x8, 1) MULTIEQUAL (register, 0x8, 1) , (register, 0x8, 1), (register, 0x38, 8) MULTIEQUAL (register, 0x38, 8) , (register, 0x38, 8), (register, 0xa0, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0xa0, 8)]
[ ---  CBRANCH (ram, 0x497398, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (unique, 0x10000232, 1) , (const, 0x0, 1), (unique, 0x10000232, 1) CAST (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0xa0, 8), (register, 0xa0, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0xa0, 8)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x1b8, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x1b8, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x1b8, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x1b8, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x1b8, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x1b8, 4)]
[(stack, 0xffffffffffffffc0, 1) INDIRECT (unique, 0xbb00, 1) , (const, 0x1b8, 4)]
[(stack, 0xffffffffffffffc1, 1) INDIRECT (unique, 0xbb00, 1) , (const, 0x1b8, 4)]
[(register, 0x0, 8) INT_SUB (register, 0x0, 8) , (unique, 0x12600, 8), (unique, 0x12600, 8) INT_ZEXT (register, 0x200, 1), (register, 0x200, 1) INT_EQUAL (stack, 0xffffffffffffff7c, 4) , (const, 0x0, 4), (register, 0x0, 8) CALL (ram, 0x494b30, 8) , (register, 0x80, 8) , (unique, 0x3800, 8), (stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0x1b8, 4), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff7c, 8)]
[ ---  CBRANCH (ram, 0x4972c8, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (register, 0xa0, 8) , (stack, 0xffffffffffffffb8, 8), (stack, 0xffffffffffffffb8, 8) INDIRECT (register, 0x38, 8) , (const, 0x1b8, 4), (register, 0x38, 8) PTRADD (register, 0xa0, 8) , (register, 0x38, 8) , (const, 0x1, 8)]
[(unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff80, 8)]
[(unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff88, 8)]
[(unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0x23d, 4), (stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0x235, 4), (stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0x221, 4), (stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0x219, 4), (stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0x205, 4), (stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0x1fd, 4), (stack, 0xffffffffffffff7c, 4) MULTIEQUAL (stack, 0xffffffffffffff7c, 4) , (stack, 0xffffffffffffff7c, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x23d, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x235, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x221, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x219, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x205, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x1fd, 4), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x23d, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x235, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x221, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x219, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x205, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x1fd, 4), (stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x23d, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x235, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x221, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x219, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x205, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x1fd, 4), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x23d, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x235, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x221, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x219, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x205, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x1fd, 4), (stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x23d, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x235, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x221, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x219, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x205, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x1fd, 4), (stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x23d, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x235, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x221, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x219, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x205, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x1fd, 4), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x23d, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x235, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x221, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x219, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x205, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x1fd, 4), (stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffc0, 1) INDIRECT (stack, 0xffffffffffffffc0, 1) , (const, 0x23d, 4), (stack, 0xffffffffffffffc0, 1) INDIRECT (stack, 0xffffffffffffffc0, 1) , (const, 0x235, 4), (stack, 0xffffffffffffffc0, 1) INDIRECT (stack, 0xffffffffffffffc0, 1) , (const, 0x221, 4), (stack, 0xffffffffffffffc0, 1) INDIRECT (stack, 0xffffffffffffffc0, 1) , (const, 0x219, 4), (stack, 0xffffffffffffffc0, 1) INDIRECT (stack, 0xffffffffffffffc0, 1) , (const, 0x205, 4), (stack, 0xffffffffffffffc0, 1) INDIRECT (stack, 0xffffffffffffffc0, 1) , (const, 0x1fd, 4), (stack, 0xffffffffffffffc0, 1) MULTIEQUAL (stack, 0xffffffffffffffc0, 1) , (stack, 0xffffffffffffffc0, 1)]
[(stack, 0xffffffffffffffc1, 1) INDIRECT (stack, 0xffffffffffffffc1, 1) , (const, 0x23d, 4), (stack, 0xffffffffffffffc1, 1) INDIRECT (stack, 0xffffffffffffffc1, 1) , (const, 0x235, 4), (stack, 0xffffffffffffffc1, 1) INDIRECT (stack, 0xffffffffffffffc1, 1) , (const, 0x221, 4), (stack, 0xffffffffffffffc1, 1) INDIRECT (stack, 0xffffffffffffffc1, 1) , (const, 0x219, 4), (stack, 0xffffffffffffffc1, 1) INDIRECT (stack, 0xffffffffffffffc1, 1) , (const, 0x205, 4), (stack, 0xffffffffffffffc1, 1) INDIRECT (stack, 0xffffffffffffffc1, 1) , (const, 0x1fd, 4), (stack, 0xffffffffffffffc1, 1) MULTIEQUAL (stack, 0xffffffffffffffc1, 1) , (stack, 0xffffffffffffffc1, 1)]
[(unique, 0x100001e9, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10000233, 8), (unique, 0x10000233, 8) CALL (ram, 0x497140, 8) , (unique, 0x100001e8, 1) , (register, 0x0, 8) , (register, 0x0, 8) , (unique, 0x3800, 8), (register, 0x0, 8) CALL (ram, 0x4970c0, 8) , (stack, 0xffffffffffffffc1, 1) , (const, 0x0, 8), (unique, 0x100001e8, 1) COPY (stack, 0xffffffffffffffc1, 1), (register, 0x0, 8) CALL (ram, 0x497140, 8) , (unique, 0x100001e7, 1) , (register, 0x0, 8) , (register, 0x0, 8) , (unique, 0x3800, 8), (stack, 0xffffffffffffffc1, 1) INDIRECT (stack, 0xffffffffffffffc1, 1) , (const, 0x221, 4), (register, 0x0, 8) CALL (ram, 0x4970c0, 8) , (stack, 0xffffffffffffffc1, 1) , (const, 0x0, 8), (stack, 0xffffffffffffffc1, 1) INDIRECT (stack, 0xffffffffffffffc1, 1) , (const, 0x219, 4), (unique, 0x100001e7, 1) COPY (stack, 0xffffffffffffffc1, 1), (register, 0x0, 8) CALL (ram, 0x497140, 8) , (unique, 0x100001e6, 1) , (register, 0x0, 8) , (register, 0xa0, 8) , (unique, 0x3800, 8), (stack, 0xffffffffffffffc1, 1) INDIRECT (stack, 0xffffffffffffffc1, 1) , (const, 0x205, 4), (register, 0x0, 8) CALL (ram, 0x4970c0, 8) , (stack, 0xffffffffffffffc1, 1) , (const, 0x0, 8), (stack, 0xffffffffffffffc1, 1) INDIRECT (stack, 0xffffffffffffffc1, 1) , (const, 0x1fd, 4), (unique, 0x100001e6, 1) COPY (stack, 0xffffffffffffffc1, 1), (register, 0xa0, 8) MULTIEQUAL (register, 0xa0, 8) , (register, 0xa0, 8), (stack, 0xffffffffffffffc1, 1) MULTIEQUAL (stack, 0xffffffffffffffc1, 1) , (stack, 0xffffffffffffffc1, 1)]
[(unique, 0x100001f1, 8) COPY (register, 0xa0, 8), (register, 0xa0, 8) PTRADD (register, 0xa0, 8) , (const, 0x1, 8) , (const, 0x1, 8), (register, 0xa0, 8) MULTIEQUAL (unique, 0x100001e9, 8) , (unique, 0x100001f1, 8)]
[ ---  CBRANCH (ram, 0x497460, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (unique, 0x1000023b, 1) , (const, 0x0, 1), (unique, 0x1000023b, 1) CAST (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0xa0, 8), (register, 0xa0, 8) MULTIEQUAL (unique, 0x100001e9, 8) , (unique, 0x100001f1, 8)]
[ ---  CBRANCH (ram, 0x4972c8, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (register, 0x0, 8) , (unique, 0x1000023c, 8), (unique, 0x1000023c, 8) CAST (register, 0x0, 8), (register, 0x0, 8) INT_ADD (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff98, 8)]
[ ---  CBRANCH (ram, 0x4974b8, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (register, 0x0, 8) , (unique, 0x10000244, 8), (unique, 0x10000244, 8) CAST (register, 0x0, 8), (register, 0x0, 8) INT_ADD (register, 0x0, 8) , (stack, 0xffffffffffffff88, 8)]
[ ---  CBRANCH (ram, 0x4972c8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffff90, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x4972c8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) INT_ADD (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffffa0, 8)]
[ ---  CALL (ram, 0x494ac0, 8) , (register, 0x80, 8) , (const, 0x0, 8) , (register, 0x8, 8)]
[ ---  CALL (ram, 0x494ac0, 8) , (register, 0x80, 8) , (const, 0x1, 8) , (const, 0x0, 8)]
[(stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0x2de, 4), (stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0x2d9, 4), (stack, 0xffffffffffffff7c, 4) INDIRECT (stack, 0xffffffffffffff7c, 4) , (const, 0x2ca, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x2de, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x2d9, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x2ca, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x2de, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x2d9, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x2ca, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x2de, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x2d9, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x2ca, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x2de, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x2d9, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x2ca, 4)]
[(stack, 0xffffffffffffffc0, 1) INDIRECT (stack, 0xffffffffffffffc0, 1) , (const, 0x2de, 4), (stack, 0xffffffffffffffc0, 1) INDIRECT (stack, 0xffffffffffffffc0, 1) , (const, 0x2d9, 4), (stack, 0xffffffffffffffc0, 1) INDIRECT (stack, 0xffffffffffffffc0, 1) , (const, 0x2ca, 4)]
[(stack, 0xffffffffffffffc1, 1) INDIRECT (stack, 0xffffffffffffffc1, 1) , (const, 0x2de, 4), (stack, 0xffffffffffffffc1, 1) INDIRECT (stack, 0xffffffffffffffc1, 1) , (const, 0x2d9, 4), (stack, 0xffffffffffffffc1, 1) INDIRECT (stack, 0xffffffffffffffc1, 1) , (const, 0x2ca, 4)]
[ ---  CALL (ram, 0x494b50, 8) , (register, 0x80, 8) , (register, 0x0, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) COPY (const, 0x7, 8)]
[ ---  CBRANCH (ram, 0x4973f8, 1) , (unique, 0xc900, 1), (unique, 0xc900, 1) INT_LESS (register, 0xa0, 8) , (stack, 0xffffffffffffffb8, 8)]
[(register, 0x0, 8) COPY (const, 0x8, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
