[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff68, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff68, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff68, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff68, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff68, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff68, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff68, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff68, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff68, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x1000043a, 8), (unique, 0x1000043a, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8)]
[(stack, 0xffffffffffffff88, 8) COPY (const, 0x0, 8)]
[(unique, 0x1000042a, 8) COPY (register, 0x10, 8)]
[(unique, 0x10000432, 4) COPY (register, 0x8, 4)]
[(unique, 0x10000436, 4) COPY (register, 0x80, 4)]
[ ---  CBRANCH (ram, 0x23e120, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc00, 2) , (const, 0xa, 2), (unique, 0xbc00, 2) LOAD (const, 0x1b1, 4) , (register, 0x30, 8)]
[(unique, 0x3100, 8) PTRADD (register, 0x30, 8) , (const, 0x4, 8) , (const, 0x2, 8)]
[(unique, 0x3100, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff98, 8)]
[(unique, 0x3100, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff84, 8)]
[(unique, 0x3100, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff88, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x290, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae50, 8) INDIRECT (ram, 0x4eae50, 8) , (const, 0x290, 4), (ram, 0x4eae50, 8) MULTIEQUAL (ram, 0x4eae50, 8) , (ram, 0x4eae50, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x290, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (unique, 0x100003fa, 8) , (const, 0x290, 4), (unique, 0x100003fa, 8) COPY (unique, 0x3100, 8)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x290, 4), (stack, 0xffffffffffffff68, 8) MULTIEQUAL (unique, 0x1000042a, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0x290, 4), (stack, 0xffffffffffffff70, 4) MULTIEQUAL (unique, 0x10000432, 4) , (stack, 0xffffffffffffff70, 4)]
[(stack, 0xffffffffffffff74, 4) INDIRECT (stack, 0xffffffffffffff74, 4) , (const, 0x290, 4), (stack, 0xffffffffffffff74, 4) MULTIEQUAL (unique, 0x10000436, 4) , (stack, 0xffffffffffffff74, 4)]
[(stack, 0xffffffffffffff84, 4) INDIRECT (stack, 0xffffffffffffff84, 4) , (const, 0x290, 4), (stack, 0xffffffffffffff84, 4) MULTIEQUAL (stack, 0xffffffffffffff84, 4) , (stack, 0xffffffffffffff84, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x290, 4), (stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x290, 4), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x290, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (unique, 0xbd80, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CBRANCH (ram, 0x23e180, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x2352d0, 8) , (unique, 0x3100, 8) , (const, 0x10, 4) , (const, 0xa, 4) , (unique, 0x3100, 8) , (unique, 0xbd80, 8) , (unique, 0x10000442, 8) , (unique, 0x3100, 8) , (unique, 0x3100, 8), (unique, 0x10000442, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x38, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x38, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x23e2b8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffff84, 4) , (const, 0xffffffff, 4)]
[ ---  CBRANCH (ram, 0x23e1b0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd00, 4) , (const, 0x22, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x1000044a, 8), (unique, 0x1000044a, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (ram, 0x4eae68, 8) , (register, 0x110, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x2c1, 4)]
[(ram, 0x4eae50, 8) INDIRECT (ram, 0x4eae50, 8) , (const, 0x2c1, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x2c1, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x2c1, 4)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0x2c1, 4)]
[(stack, 0xffffffffffffff74, 4) INDIRECT (stack, 0xffffffffffffff74, 4) , (const, 0x2c1, 4)]
[(stack, 0xffffffffffffff84, 4) INDIRECT (stack, 0xffffffffffffff84, 4) , (const, 0x2c1, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x2c1, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x2c1, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2c1, 4)]
[ ---  CBRANCH (ram, 0x23e130, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 1) , (const, 0x0, 1), (register, 0x0, 1) CALL (ram, 0x19d0c0, 8) , (register, 0x38, 8) , (stack, 0xffffffffffffff58, 8)]
[(unique, 0x3100, 8) PTRADD (register, 0x30, 8) , (const, 0x2, 8) , (const, 0x2, 8)]
[(unique, 0x3100, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff98, 8)]
[(unique, 0x3100, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff84, 8)]
[(unique, 0x3100, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff88, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x5f, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae50, 8) INDIRECT (ram, 0x4eae50, 8) , (const, 0x5f, 4), (ram, 0x4eae50, 8) MULTIEQUAL (ram, 0x4eae50, 8) , (ram, 0x4eae50, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x5f, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x5f, 4), (stack, 0xffffffffffffff68, 8) MULTIEQUAL (unique, 0x1000042a, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0x5f, 4), (stack, 0xffffffffffffff70, 4) MULTIEQUAL (unique, 0x10000432, 4) , (stack, 0xffffffffffffff70, 4)]
[(stack, 0xffffffffffffff74, 4) INDIRECT (stack, 0xffffffffffffff74, 4) , (const, 0x5f, 4), (stack, 0xffffffffffffff74, 4) MULTIEQUAL (unique, 0x10000436, 4) , (stack, 0xffffffffffffff74, 4)]
[(stack, 0xffffffffffffff84, 4) INDIRECT (stack, 0xffffffffffffff84, 4) , (const, 0x5f, 4), (stack, 0xffffffffffffff84, 4) MULTIEQUAL (stack, 0xffffffffffffff84, 4) , (stack, 0xffffffffffffff84, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x5f, 4), (stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x5f, 4), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x5f, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (unique, 0xbd80, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CBRANCH (ram, 0x23e180, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x2352d0, 8) , (unique, 0x3100, 8) , (const, 0x4, 4) , (const, 0x2, 4) , (unique, 0x3100, 8) , (unique, 0xbd80, 8) , (unique, 0x10000452, 8) , (unique, 0x3100, 8) , (unique, 0x3100, 8), (unique, 0x10000452, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x38, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x38, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff84, 4) MULTIEQUAL (stack, 0xffffffffffffff84, 4) , (stack, 0xffffffffffffff84, 4)]
[(stack, 0xffffffffffffff74, 4) MULTIEQUAL (stack, 0xffffffffffffff74, 4) , (stack, 0xffffffffffffff74, 4)]
[(stack, 0xffffffffffffff70, 4) MULTIEQUAL (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4eae50, 8) MULTIEQUAL (ram, 0x4eae50, 8) , (ram, 0x4eae50, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x23e1bd, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffff88, 8) , (const, 0x0, 8), (stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[ ---  CBRANCH (ram, 0x23e31a, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffff84, 4) , (const, 0xffffffff, 4)]
[ ---  CBRANCH (ram, 0x23e2b8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffff84, 4) , (const, 0xffffffff, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff74, 4) MULTIEQUAL (stack, 0xffffffffffffff74, 4) , (stack, 0xffffffffffffff74, 4)]
[(stack, 0xffffffffffffff70, 4) MULTIEQUAL (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4eae50, 8) MULTIEQUAL (ram, 0x4eae50, 8) , (ram, 0x4eae50, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x0, 4) MULTIEQUAL (stack, 0xffffffffffffff84, 4) , (stack, 0xffffffffffffff84, 4)]
[ ---  CBRANCH (ram, 0x23e195, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffff88, 8) , (const, 0x0, 8), (stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff74, 4) MULTIEQUAL (stack, 0xffffffffffffff74, 4) , (stack, 0xffffffffffffff74, 4)]
[(stack, 0xffffffffffffff70, 4) MULTIEQUAL (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4eae50, 8) MULTIEQUAL (ram, 0x4eae50, 8) , (ram, 0x4eae50, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x23e33c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x2, 4), (register, 0x0, 4) MULTIEQUAL (register, 0x0, 4) , (stack, 0xffffffffffffff84, 4)]
[(ram, 0x4eae50, 8) INDIRECT (ram, 0x4eae50, 8) , (const, 0x258, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x258, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000045a, 8) , (const, 0x2, 4), (unique, 0x1000045a, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (ram, 0x4eae50, 8) , (register, 0x110, 8) , (const, 0x1, 8)]
[(register, 0x0, 8) COPY (const, 0xfffffffd, 8)]
[(unique, 0x100003da, 8) COPY (register, 0x20, 8)]
[ ---  BRANCH (ram, 0x23e0f5, 1)]
[(register, 0x0, 8) COPY (const, 0xfffffffe, 8)]
[(unique, 0x100003d2, 8) COPY (register, 0x20, 8)]
[ ---  BRANCH (ram, 0x23e0f5, 1)]
[ ---  CBRANCH (ram, 0x23e1b0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd00, 4) , (const, 0x22, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000462, 8), (unique, 0x10000462, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (ram, 0x4eae68, 8) , (register, 0x110, 8) , (const, 0x1, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff74, 4) MULTIEQUAL (stack, 0xffffffffffffff74, 4) , (stack, 0xffffffffffffff74, 4)]
[(stack, 0xffffffffffffff70, 4) MULTIEQUAL (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4eae50, 8) MULTIEQUAL (ram, 0x4eae50, 8) , (ram, 0x4eae50, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x23e31a, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffff88, 8) , (const, 0x0, 8), (stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff74, 4) MULTIEQUAL (stack, 0xffffffffffffff74, 4) , (stack, 0xffffffffffffff74, 4)]
[(stack, 0xffffffffffffff70, 4) MULTIEQUAL (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(ram, 0x4eae50, 8) INDIRECT (ram, 0x4eae50, 8) , (const, 0x22d, 4), (ram, 0x4eae50, 8) MULTIEQUAL (ram, 0x4eae50, 8) , (ram, 0x4eae50, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x22d, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000046a, 8) , (const, 0xffffffff, 4), (unique, 0x1000046a, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (ram, 0x4eae50, 8) , (register, 0x110, 8) , (const, 0x1, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8), (ram, 0x4eae50, 8) MULTIEQUAL (ram, 0x4eae50, 8) , (ram, 0x4eae50, 8)]
[(register, 0x0, 8) COPY (const, 0xfffffff5, 8)]
[(unique, 0x100003ca, 8) COPY (register, 0x20, 8)]
[ ---  BRANCH (ram, 0x23e0f5, 1)]
[(unique, 0x1000020c, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x10000214, 8) MULTIEQUAL (ram, 0x4eae50, 8) , (ram, 0x4eae50, 8) , (ram, 0x4eae50, 8)]
[(unique, 0x1000021c, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(unique, 0x10000224, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(unique, 0x1000022c, 4) MULTIEQUAL (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4)]
[(unique, 0x10000234, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(unique, 0x1000023c, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(unique, 0x10000244, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CBRANCH (ram, 0x23e1ca, 1) , (unique, 0x1000020b, 1), (unique, 0x1000020b, 1) INT_EQUAL (unique, 0x1000024c, 4) , (const, 0x0, 4), (unique, 0x1000024c, 4) INT_AND (unique, 0x10000230, 4) , (const, 0x4, 4), (unique, 0x10000230, 4) MULTIEQUAL (stack, 0xffffffffffffff74, 4) , (stack, 0xffffffffffffff74, 4) , (stack, 0xffffffffffffff74, 4)]
[(register, 0x110, 8) INDIRECT (unique, 0x1000020c, 8) , (const, 0x1e9, 4)]
[(ram, 0x4eae50, 8) INDIRECT (unique, 0x10000214, 8) , (const, 0x1e9, 4)]
[(ram, 0x4eae68, 8) INDIRECT (unique, 0x1000021c, 8) , (const, 0x1e9, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (unique, 0x10000224, 8) , (const, 0x1e9, 4)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (unique, 0x1000022c, 4) , (const, 0x1e9, 4)]
[(stack, 0xffffffffffffff74, 4) INDIRECT (unique, 0x10000230, 4) , (const, 0x1e9, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (unique, 0x10000234, 8) , (const, 0x1e9, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (unique, 0x1000023c, 8) , (const, 0x1e9, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (unique, 0x10000244, 8) , (const, 0x1e9, 4)]
[ ---  CBRANCH (ram, 0x23e30e, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x23dcd0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1fd, 4)]
[(ram, 0x4eae50, 8) INDIRECT (ram, 0x4eae50, 8) , (const, 0x1fd, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x1fd, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x1fd, 4)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0x1fd, 4)]
[(stack, 0xffffffffffffff74, 4) INDIRECT (stack, 0xffffffffffffff74, 4) , (const, 0x1fd, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x1fd, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x1fd, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1fd, 4)]
[ ---  CBRANCH (ram, 0x23e1cd, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10000472, 8), (unique, 0x10000472, 8) CALL (ram, 0x19e590, 8) , (unique, 0xbd80, 8) , (register, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000351, 8), (unique, 0x10000351, 8) PTRSUB (stack, 0xffffffffffffff88, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x23e1cd, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x23e1cd, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x2e, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0xffffffffffffffff, 8) , (const, 0x1, 8)]
[(ram, 0x4eae50, 8) INDIRECT (ram, 0x4eae50, 8) , (const, 0x223, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x223, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (const, 0x0, 1), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0xffffffffffffffff, 8) , (const, 0x1, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff74, 4) MULTIEQUAL (stack, 0xffffffffffffff74, 4) , (stack, 0xffffffffffffff74, 4)]
[(stack, 0xffffffffffffff70, 4) MULTIEQUAL (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4eae50, 8) MULTIEQUAL (ram, 0x4eae50, 8) , (ram, 0x4eae50, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000359, 8), (unique, 0x10000359, 8) PTRSUB (stack, 0xffffffffffffff88, 8) , (const, 0x0, 8), (stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[ ---  BRANCH (ram, 0x23e1cd, 1)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x100002f9, 8), (unique, 0x100002f9, 8) PTRSUB (unique, 0x10000234, 8) , (const, 0x0, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (unique, 0x10000244, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (unique, 0x1000023c, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (unique, 0x10000234, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff70, 4) MULTIEQUAL (unique, 0x1000022c, 4) , (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (unique, 0x10000224, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (unique, 0x1000021c, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4eae50, 8) MULTIEQUAL (unique, 0x10000214, 8) , (ram, 0x4eae50, 8) , (ram, 0x4eae50, 8) , (ram, 0x4eae50, 8) , (ram, 0x4eae50, 8)]
[(register, 0x110, 8) MULTIEQUAL (unique, 0x1000020c, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x1000038a, 8) COPY (register, 0x18, 8), (register, 0x18, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8) , (unique, 0xbd80, 8) , (unique, 0xbd80, 8) , (unique, 0xbd80, 8)]
[(unique, 0x1000039a, 8) COPY (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x23e280, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x10000145, 4) , (const, 0x0, 4), (unique, 0x10000145, 4) INT_AND (stack, 0xffffffffffffff74, 4) , (const, 0x20, 4), (stack, 0xffffffffffffff74, 4) MULTIEQUAL (unique, 0x10000230, 4) , (stack, 0xffffffffffffff74, 4) , (stack, 0xffffffffffffff74, 4) , (stack, 0xffffffffffffff74, 4) , (stack, 0xffffffffffffff74, 4)]
[(unique, 0x3100, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff90, 8)]
[(register, 0x0, 4) INT_OR (register, 0x10, 4) , (const, 0x2, 4), (register, 0x10, 4) INT_AND (register, 0x10, 4) , (const, 0x1, 4), (register, 0x10, 4) INT_RIGHT (stack, 0xffffffffffffff74, 4) , (const, 0x6, 4)]
[(unique, 0x100003f2, 4) COPY (register, 0x10, 4), (register, 0x10, 4) INT_AND (register, 0x10, 4) , (const, 0x1, 4), (register, 0x10, 4) INT_RIGHT (stack, 0xffffffffffffff74, 4) , (const, 0x6, 4)]
[ ---  CBRANCH (ram, 0x23e1f9, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x8, 4) , (const, 0x0, 4), (register, 0x8, 4) INT_AND (stack, 0xffffffffffffff74, 4) , (const, 0x80, 4)]
[(unique, 0x100003f6, 4) COPY (register, 0x0, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x147, 4)]
[(ram, 0x4eae50, 8) INDIRECT (ram, 0x4eae50, 8) , (const, 0x147, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x147, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x147, 4)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0x147, 4)]
[(stack, 0xffffffffffffff74, 4) INDIRECT (stack, 0xffffffffffffff74, 4) , (const, 0x147, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x147, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x147, 4)]
[(unique, 0x10000382, 8) COPY (stack, 0xffffffffffffff88, 8), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x147, 4)]
[ ---  CBRANCH (ram, 0x23e230, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x262c70, 8) , (register, 0x18, 8) , (unique, 0x3100, 8) , (unique, 0x10000151, 4), (unique, 0x10000151, 4) MULTIEQUAL (unique, 0x100003f2, 4) , (unique, 0x100003f6, 4)]
[(register, 0x0, 8) COPY (const, 0xfffffff6, 8)]
[(unique, 0x100003b2, 8) COPY (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x23e0f5, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0xc9, 4)]
[(register, 0x0, 8) COPY (const, 0xffffff97, 8)]
[(unique, 0x100003e2, 8) COPY (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x23e228, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0xca, 4)]
[(register, 0x0, 8) COPY (const, 0xfffffff5, 8)]
[(unique, 0x100003ea, 8) COPY (register, 0x20, 8)]
[(unique, 0x10000392, 8) COPY (stack, 0xffffffffffffff90, 8)]
[(unique, 0x100003a2, 8) COPY (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x23e280, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (stack, 0xffffffffffffff90, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000309, 8), (unique, 0x10000309, 8) PTRSUB (stack, 0xffffffffffffff88, 8) , (const, 0x0, 8)]
[(register, 0x20, 8) CAST (unique, 0x10000482, 8), (unique, 0x10000482, 8) INT_ADD (unique, 0x1000047a, 8) , (unique, 0x10000185, 8), (unique, 0x1000047a, 8) CAST (unique, 0x10000319, 8), (unique, 0x10000319, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff68, 8), (unique, 0x10000185, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (register, 0x0, 8) , (const, 0xfffffffffffffff0, 8), (register, 0x0, 8) INT_ADD (register, 0x0, 8) , (const, 0x1f, 8), (register, 0x0, 8) CALL (ram, 0x121100, 8) , (stack, 0xffffffffffffff90, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000049a, 8) , (const, 0x23e266, 8), (unique, 0x1000049a, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x100001e8, 8) , (unique, 0x10000185, 8) , (const, 0x1, 8), (unique, 0x100001e8, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff60, 8), (unique, 0x10000185, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (register, 0x0, 8) , (const, 0xfffffffffffffff0, 8), (register, 0x0, 8) INT_ADD (register, 0x0, 8) , (const, 0x1f, 8), (register, 0x0, 8) CALL (ram, 0x121100, 8) , (stack, 0xffffffffffffff90, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000339, 8) , (register, 0x0, 8), (unique, 0x10000339, 8) PTRSUB (unique, 0x10000382, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x100004a2, 8), (unique, 0x100004a2, 8) CALL (ram, 0x121160, 8) , (unique, 0x3800, 8) , (stack, 0xffffffffffffff90, 8) , (unique, 0x3100, 8), (unique, 0x3800, 8) CAST (unique, 0x10000492, 8), (unique, 0x10000492, 8) INT_ADD (unique, 0x1000048a, 8) , (unique, 0x10000185, 8), (unique, 0x1000048a, 8) CAST (unique, 0x10000369, 8), (unique, 0x10000369, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff70, 8), (unique, 0x10000185, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (register, 0x0, 8) , (const, 0xfffffffffffffff0, 8), (register, 0x0, 8) INT_ADD (register, 0x0, 8) , (const, 0x1f, 8), (unique, 0x3100, 8) INT_ADD (register, 0x0, 8) , (const, 0x1, 8), (register, 0x0, 8) CALL (ram, 0x121100, 8) , (stack, 0xffffffffffffff90, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100004aa, 8) , (const, 0x23e272, 8), (unique, 0x100004aa, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x100001f0, 8) , (unique, 0x10000185, 8) , (const, 0x1, 8), (unique, 0x100001f0, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff60, 8), (unique, 0x10000185, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (register, 0x0, 8) , (const, 0xfffffffffffffff0, 8), (register, 0x0, 8) INT_ADD (register, 0x0, 8) , (const, 0x1f, 8), (register, 0x0, 8) CALL (ram, 0x121100, 8) , (stack, 0xffffffffffffff90, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1b7, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1b1, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x185, 4)]
[(ram, 0x4eae50, 8) INDIRECT (ram, 0x4eae50, 8) , (const, 0x1b7, 4), (ram, 0x4eae50, 8) INDIRECT (ram, 0x4eae50, 8) , (const, 0x1b4, 4), (ram, 0x4eae50, 8) INDIRECT (ram, 0x4eae50, 8) , (const, 0x1b1, 4), (ram, 0x4eae50, 8) INDIRECT (ram, 0x4eae50, 8) , (const, 0x185, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x1b7, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x1b4, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x1b1, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x185, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x1b7, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x1b6, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x1b1, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x1b0, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x185, 4)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0x1b7, 4), (stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0x1b6, 4), (stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0x1b1, 4), (stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0x1b0, 4), (stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0x185, 4)]
[(stack, 0xffffffffffffff74, 4) INDIRECT (stack, 0xffffffffffffff74, 4) , (const, 0x1b7, 4), (stack, 0xffffffffffffff74, 4) INDIRECT (stack, 0xffffffffffffff74, 4) , (const, 0x1b6, 4), (stack, 0xffffffffffffff74, 4) INDIRECT (stack, 0xffffffffffffff74, 4) , (const, 0x1b1, 4), (stack, 0xffffffffffffff74, 4) INDIRECT (stack, 0xffffffffffffff74, 4) , (const, 0x1b0, 4), (stack, 0xffffffffffffff74, 4) INDIRECT (stack, 0xffffffffffffff74, 4) , (const, 0x185, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1b7, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1b6, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1b1, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1b0, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x185, 4)]
[ ---  CALL (ram, 0x1212c8, 8) , (stack, 0xffffffffffffff90, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000349, 8), (unique, 0x10000349, 8) PTRSUB (stack, 0xffffffffffffff88, 8) , (const, 0x0, 8), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x1b7, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x1b6, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x1b1, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x1b0, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x185, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x23e288, 8), (register, 0x20, 8) CAST (unique, 0x100004ba, 8), (unique, 0x100004ba, 8) INT_ADD (unique, 0x100004b2, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x100004b2, 8) CAST (register, 0x20, 8), (register, 0x20, 8) MULTIEQUAL (unique, 0x1000039a, 8) , (unique, 0x100003a2, 8) , (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1c0, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae50, 8) INDIRECT (ram, 0x4eae50, 8) , (const, 0x1c0, 4), (ram, 0x4eae50, 8) MULTIEQUAL (ram, 0x4eae50, 8) , (ram, 0x4eae50, 8) , (ram, 0x4eae50, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x1c0, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(stack, 0xffffffffffffff74, 4) INDIRECT (stack, 0xffffffffffffff74, 4) , (const, 0x1c0, 4), (stack, 0xffffffffffffff74, 4) INDIRECT (stack, 0xffffffffffffff74, 4) , (const, 0x1bf, 4), (stack, 0xffffffffffffff74, 4) MULTIEQUAL (stack, 0xffffffffffffff74, 4) , (stack, 0xffffffffffffff74, 4) , (stack, 0xffffffffffffff74, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x1c0, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x1bf, 4), (stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1c0, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1bf, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(unique, 0x1000037a, 8) COPY (stack, 0xffffffffffffff68, 8), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x1c0, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x1bf, 4), (stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(unique, 0x10000422, 8) COPY (register, 0x20, 8), (register, 0x20, 8) MULTIEQUAL (unique, 0x1000039a, 8) , (unique, 0x100003a2, 8) , (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x23e332, 1) , (unique, 0xc900, 1), (unique, 0xc900, 1) INT_LESS (register, 0x0, 8) , (unique, 0x3100, 8), (register, 0x0, 8) INT_ZEXT (stack, 0xffffffffffffff70, 4), (unique, 0x3100, 8) INT_ADD (register, 0x0, 8) , (const, 0x1, 8), (register, 0x0, 8) CALL (ram, 0x121100, 8) , (register, 0x18, 8), (stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0x1c0, 4), (stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0x1bf, 4), (register, 0x18, 8) MULTIEQUAL (unique, 0x1000038a, 8) , (unique, 0x10000392, 8) , (unique, 0xbd80, 8), (stack, 0xffffffffffffff70, 4) MULTIEQUAL (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4)]
[(register, 0x0, 8) COPY (const, 0xfffffff4, 8)]
[ ---  BRANCH (ram, 0x23e0f5, 1)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x23e2aa, 8), (register, 0x20, 8) CAST (unique, 0x100004ca, 8), (unique, 0x100004ca, 8) INT_ADD (unique, 0x100004c2, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x100004c2, 8) CAST (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1d9, 4)]
[(ram, 0x4eae50, 8) INDIRECT (ram, 0x4eae50, 8) , (const, 0x1d9, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x1d9, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x1d9, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x1d8, 4)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0x1d9, 4), (stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0x1d8, 4)]
[(stack, 0xffffffffffffff74, 4) INDIRECT (stack, 0xffffffffffffff74, 4) , (const, 0x1d9, 4), (stack, 0xffffffffffffff74, 4) INDIRECT (stack, 0xffffffffffffff74, 4) , (const, 0x1d8, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x1d9, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x1d8, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1d9, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1d8, 4)]
[ ---  CALL (ram, 0x121160, 8) , (unique, 0x1000037a, 8) , (register, 0x18, 8) , (unique, 0x3100, 8)]
[(register, 0x0, 8) COPY (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x23e0f5, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x90, 4)]
[(ram, 0x4eae50, 8) INDIRECT (ram, 0x4eae50, 8) , (const, 0x90, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x90, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x90, 4)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0x90, 4)]
[(stack, 0xffffffffffffff74, 4) INDIRECT (stack, 0xffffffffffffff74, 4) , (const, 0x90, 4)]
[(stack, 0xffffffffffffff84, 4) INDIRECT (stack, 0xffffffffffffff84, 4) , (const, 0x90, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x90, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x90, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x90, 4)]
[ ---  CBRANCH (ram, 0x23e090, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 1) , (const, 0x0, 1), (register, 0x0, 1) CALL (ram, 0x19d0c0, 8) , (register, 0x38, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff74, 4) MULTIEQUAL (stack, 0xffffffffffffff74, 4) , (stack, 0xffffffffffffff74, 4)]
[(stack, 0xffffffffffffff70, 4) MULTIEQUAL (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(ram, 0x4eae50, 8) INDIRECT (ram, 0x4eae50, 8) , (const, 0xa3, 4), (ram, 0x4eae50, 8) MULTIEQUAL (ram, 0x4eae50, 8) , (ram, 0x4eae50, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xa3, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100004d2, 8) , (stack, 0xffffffffffffff84, 4), (unique, 0x100004d2, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (ram, 0x4eae50, 8) , (register, 0x110, 8) , (const, 0x1, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8), (ram, 0x4eae50, 8) MULTIEQUAL (ram, 0x4eae50, 8) , (ram, 0x4eae50, 8), (stack, 0xffffffffffffff84, 4) MULTIEQUAL (stack, 0xffffffffffffff84, 4) , (stack, 0xffffffffffffff84, 4)]
[(register, 0x0, 8) COPY (const, 0xfffffff6, 8)]
[(unique, 0x100003aa, 8) COPY (register, 0x20, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff74, 4) MULTIEQUAL (stack, 0xffffffffffffff74, 4) , (stack, 0xffffffffffffff74, 4) , (stack, 0xffffffffffffff74, 4) , (stack, 0xffffffffffffff74, 4) , (stack, 0xffffffffffffff74, 4) , (stack, 0xffffffffffffff74, 4) , (stack, 0xffffffffffffff74, 4) , (stack, 0xffffffffffffff74, 4) , (stack, 0xffffffffffffff74, 4)]
[(stack, 0xffffffffffffff70, 4) MULTIEQUAL (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4eae50, 8) MULTIEQUAL (ram, 0x4eae50, 8) , (ram, 0x4eae50, 8) , (ram, 0x4eae50, 8) , (ram, 0x4eae50, 8) , (ram, 0x4eae50, 8) , (ram, 0x4eae50, 8) , (ram, 0x4eae50, 8) , (ram, 0x4eae50, 8) , (ram, 0x4eae50, 8)]
[(register, 0x20, 8) MULTIEQUAL (unique, 0x100003aa, 8) , (unique, 0x100003b2, 8) , (unique, 0x10000422, 8) , (unique, 0x10000422, 8) , (unique, 0x100003ca, 8) , (unique, 0x100003d2, 8) , (unique, 0x100003da, 8) , (unique, 0x100003e2, 8) , (unique, 0x100003ea, 8)]
[(register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8) , (register, 0x0, 8) , (register, 0x0, 8) , (register, 0x0, 8) , (register, 0x0, 8) , (register, 0x0, 8) , (register, 0x0, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x23e354, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffffc0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x100004da, 8), (unique, 0x100004da, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (unique, 0x10000251, 8), (unique, 0x10000251, 8) PTRSUB (const, 0x0, 8) , (const, 0x23e359, 8), (register, 0x20, 8) CAST (unique, 0x100004ea, 8), (unique, 0x100004ea, 8) INT_ADD (unique, 0x100004e2, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x100004e2, 8) CAST (register, 0x20, 8)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0xc8, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0xc7, 4)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0xc8, 4), (stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0xc7, 4)]
[(stack, 0xffffffffffffff74, 4) INDIRECT (stack, 0xffffffffffffff74, 4) , (const, 0xc8, 4), (stack, 0xffffffffffffff74, 4) INDIRECT (stack, 0xffffffffffffff74, 4) , (const, 0xc7, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0xc8, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0xc7, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xc8, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xc7, 4)]
[ ---  CALL (ram, 0x234c80, 8)]
[(ram, 0x4eae50, 8) COPY (ram, 0x4eae50, 8), (ram, 0x4eae50, 8) INDIRECT (ram, 0x4eae50, 8) , (const, 0xc8, 4)]
[(ram, 0x4eae68, 8) COPY (ram, 0x4eae68, 8), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xc8, 4)]
[ ---  RETURN (const, 0x1, 4)]
[(ram, 0x4eae50, 8) COPY (ram, 0x4eae50, 8)]
[(ram, 0x4eae68, 8) COPY (ram, 0x4eae68, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8)]
