[(register, 0x20, 8) CAST (unique, 0x100007a9, 8), (unique, 0x100007a9, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff58, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x2e, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x2e, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x2e, 4), (stack, 0xffffffffffffff50, 8) COPY (const, 0x22bb09, 8)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (unique, 0x10000781, 8) , (const, 0x2e, 4), (unique, 0x10000781, 8) COPY (register, 0x88, 8)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (unique, 0x10000789, 8) , (const, 0x2e, 4), (unique, 0x10000789, 8) COPY (register, 0x80, 8)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (unique, 0x10000791, 8) , (const, 0x2e, 4), (unique, 0x10000791, 8) COPY (register, 0x8, 8)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (unique, 0x10000799, 8) , (const, 0x2e, 4), (unique, 0x10000799, 8) COPY (unique, 0x100007b1, 8), (unique, 0x100007b1, 8) CAST (register, 0x10, 8)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (unique, 0x100007a1, 8) , (const, 0x2e, 4), (unique, 0x100007a1, 8) COPY (unique, 0x100007b9, 8), (unique, 0x100007b9, 8) CAST (register, 0x30, 8)]
[(stack, 0xffffffffffffff8c, 4) INDIRECT (stack, 0xffffffffffffff8c, 4) , (const, 0x2e, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x2e, 4)]
[(stack, 0xffffffffffffff98, 2) INDIRECT (stack, 0xffffffffffffff98, 2) , (const, 0x2e, 4)]
[(stack, 0xffffffffffffff9a, 2) INDIRECT (stack, 0xffffffffffffff9a, 2) , (const, 0x2e, 4)]
[(stack, 0xffffffffffffff80, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x100007c1, 8), (unique, 0x100007c1, 8) INT_ADD (register, 0x0, 8) , (const, 0xc0, 8), (register, 0x0, 8) CALL (ram, 0x237a60, 8)]
[ ---  CBRANCH (ram, 0x22bd12, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x100007c1, 8), (unique, 0x100007c1, 8) INT_ADD (register, 0x0, 8) , (const, 0xc0, 8), (register, 0x0, 8) CALL (ram, 0x237a60, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x20e, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x20e, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x20e, 4), (stack, 0xffffffffffffff50, 8) COPY (const, 0x22bd21, 8)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x20e, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x20e, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x20e, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x20e, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x20e, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x20e, 4)]
[(stack, 0xffffffffffffff8c, 4) INDIRECT (stack, 0xffffffffffffff8c, 4) , (const, 0x20e, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x20e, 4)]
[(stack, 0xffffffffffffff98, 2) INDIRECT (stack, 0xffffffffffffff98, 2) , (const, 0x20e, 4)]
[(stack, 0xffffffffffffff9a, 2) INDIRECT (stack, 0xffffffffffffff9a, 2) , (const, 0x20e, 4)]
[(stack, 0xffffffffffffff80, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x100007c9, 8), (unique, 0x100007c9, 8) CALL (ram, 0x11f870, 8) , (const, 0x1, 8) , (const, 0x30, 8)]
[ ---  CBRANCH (ram, 0x22bd5b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x100007c9, 8), (unique, 0x100007c9, 8) CALL (ram, 0x11f870, 8) , (const, 0x1, 8) , (const, 0x30, 8)]
[(ram, 0x4c2e78, 8) COPY (ram, 0x4c2e78, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 4), (register, 0x0, 4) COPY (const, 0x0, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x21e, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3c80, 8) , (register, 0x0, 8), (unique, 0x3c80, 8) CAST (unique, 0x100007d1, 8), (unique, 0x100007d1, 8) INT_ADD (register, 0x0, 8) , (const, 0xc0, 8)]
[ ---  BRANCH (ram, 0x22bb20, 1)]
[(stack, 0xffffffffffffff9a, 2) MULTIEQUAL (stack, 0xffffffffffffff9a, 2) , (stack, 0xffffffffffffff9a, 2)]
[(stack, 0xffffffffffffff98, 2) MULTIEQUAL (stack, 0xffffffffffffff98, 2) , (stack, 0xffffffffffffff98, 2)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff8c, 4) MULTIEQUAL (stack, 0xffffffffffffff8c, 4) , (stack, 0xffffffffffffff8c, 4)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x22bd37, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbe00, 8) , (const, 0x0, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100007e1, 8), (unique, 0x100007e1, 8) INT_ADD (unique, 0x100007d9, 8) , (const, 0x10, 8), (unique, 0x100007d9, 8) CAST (unique, 0x100005f0, 8), (unique, 0x100005f0, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x18, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0xbd80, 8) , (register, 0x0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1fc, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x1fc, 4), (stack, 0xffffffffffffff50, 8) COPY (const, 0x22bd41, 8)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x1fc, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x1fc, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x1fc, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x1fc, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x1fc, 4)]
[(stack, 0xffffffffffffff8c, 4) INDIRECT (stack, 0xffffffffffffff8c, 4) , (const, 0x1fc, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x1fc, 4)]
[(stack, 0xffffffffffffff98, 2) INDIRECT (stack, 0xffffffffffffff98, 2) , (const, 0x1fc, 4)]
[(stack, 0xffffffffffffff9a, 2) INDIRECT (stack, 0xffffffffffffff9a, 2) , (const, 0x1fc, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (register, 0x0, 8), (unique, 0x3100, 8) CAST (unique, 0x100007f9, 8), (unique, 0x100007f9, 8) INT_ADD (unique, 0x100007f1, 8) , (const, 0x10, 8), (unique, 0x100007f1, 8) CAST (unique, 0x10000700, 8), (unique, 0x10000700, 8) PTRADD (stack, 0xffffffffffffff80, 8) , (const, 0x1, 8) , (const, 0x18, 8), (register, 0x0, 8) CAST (unique, 0x100007e9, 8), (unique, 0x100007e9, 8) CALL (ram, 0x11f8a0, 8) , (const, 0x100, 8), (stack, 0xffffffffffffff80, 8) INDIRECT (register, 0x0, 8) , (const, 0x1fc, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000801, 8) , (const, 0x0, 1), (unique, 0x10000801, 8) CAST (unique, 0x10000710, 8), (unique, 0x10000710, 8) PTRSUB (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x100007e9, 8), (unique, 0x100007e9, 8) CALL (ram, 0x11f8a0, 8) , (const, 0x100, 8)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x208, 4), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x204, 4), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x202, 4), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x1fc, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000809, 8) , (const, 0xffffffff, 4), (unique, 0x10000809, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (stack, 0xffffffffffffff80, 8) , (const, 0x8, 8), (stack, 0xffffffffffffff80, 8) INDIRECT (register, 0x0, 8) , (const, 0x1fc, 4)]
[ ---  BRANCH (ram, 0x22bb2b, 1)]
[(stack, 0xffffffffffffff9a, 2) MULTIEQUAL (stack, 0xffffffffffffff9a, 2) , (stack, 0xffffffffffffff9a, 2)]
[(stack, 0xffffffffffffff98, 2) MULTIEQUAL (stack, 0xffffffffffffff98, 2) , (stack, 0xffffffffffffff98, 2)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff8c, 4) MULTIEQUAL (stack, 0xffffffffffffff8c, 4) , (stack, 0xffffffffffffff8c, 4)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x22bb40, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbe00, 8) , (const, 0x0, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000819, 8), (unique, 0x10000819, 8) INT_ADD (unique, 0x10000811, 8) , (const, 0x8, 8), (unique, 0x10000811, 8) CAST (unique, 0x10000600, 8), (unique, 0x10000600, 8) PTRADD (stack, 0xffffffffffffff80, 8) , (const, 0x1, 8) , (const, 0x18, 8), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (register, 0x0, 8) , (stack, 0xffffffffffffff80, 8)]
[ ---  CBRANCH (ram, 0x22bce0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (stack, 0xffffffffffffff78, 8), (unique, 0xbd80, 8) CAST (unique, 0x10000821, 8), (unique, 0x10000821, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (stack, 0xffffffffffffff80, 8) , (const, 0x10, 8)]
[ ---  CBRANCH (ram, 0x22bb40, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (stack, 0xffffffffffffff70, 8), (unique, 0xbd80, 8) CAST (unique, 0x10000829, 8), (unique, 0x10000829, 8) LOAD (const, 0x1b1, 4) , (unique, 0x100006e0, 8), (unique, 0x100006e0, 8) PTRSUB (unique, 0x3100, 8) , (const, 0x0, 8), (unique, 0x3100, 8) PTRADD (stack, 0xffffffffffffff80, 8) , (const, 0x1, 8) , (const, 0x18, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1ed, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x1ed, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x1ed, 4), (stack, 0xffffffffffffff50, 8) COPY (const, 0x22bcfd, 8)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x1ed, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x1ed, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x1ed, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x1ed, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x1ed, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x1ed, 4)]
[(stack, 0xffffffffffffff8c, 4) INDIRECT (stack, 0xffffffffffffff8c, 4) , (const, 0x1ed, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x1ed, 4)]
[(stack, 0xffffffffffffff98, 2) INDIRECT (stack, 0xffffffffffffff98, 2) , (const, 0x1ed, 4)]
[(stack, 0xffffffffffffff9a, 2) INDIRECT (stack, 0xffffffffffffff9a, 2) , (const, 0x1ed, 4)]
[ ---  CBRANCH (ram, 0x22bc92, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x1892e0, 8) , (unique, 0xbd80, 8) , (register, 0x38, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000839, 8), (unique, 0x10000839, 8) INT_ADD (unique, 0x10000831, 8) , (const, 0x10, 8), (unique, 0x10000831, 8) CAST (unique, 0x100006f0, 8), (unique, 0x100006f0, 8) PTRADD (stack, 0xffffffffffffff80, 8) , (const, 0x1, 8) , (const, 0x18, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff8c, 4) MULTIEQUAL (stack, 0xffffffffffffff8c, 4) , (stack, 0xffffffffffffff8c, 4) , (stack, 0xffffffffffffff8c, 4) , (stack, 0xffffffffffffff8c, 4)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x10000749, 8) COPY (stack, 0xffffffffffffff80, 8), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x76, 4), (ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (const, 0x0, 8), (unique, 0x3100, 8) CAST (unique, 0x10000851, 8), (unique, 0x10000851, 8) INT_ADD (unique, 0x10000849, 8) , (const, 0x8, 8), (unique, 0x10000849, 8) CAST (unique, 0x10000620, 8), (unique, 0x10000620, 8) PTRADD (stack, 0xffffffffffffff80, 8) , (const, 0x1, 8) , (const, 0x18, 8), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[ ---  CBRANCH (ram, 0x22bb66, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbc80, 4) , (const, 0xffffffff, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000841, 8), (unique, 0x10000841, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (stack, 0xffffffffffffff80, 8) , (const, 0x8, 8), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x83, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x83, 4), (stack, 0xffffffffffffff50, 8) COPY (const, 0x22bb5a, 8)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x83, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x83, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x83, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x83, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x83, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x83, 4)]
[(stack, 0xffffffffffffff8c, 4) INDIRECT (stack, 0xffffffffffffff8c, 4) , (const, 0x83, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x83, 4)]
[ ---  CALL (ram, 0x1f7030, 8) , (unique, 0xbc80, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x86, 4), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x83, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000859, 8) , (const, 0xffffffff, 4), (unique, 0x10000859, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (unique, 0x10000749, 8) , (const, 0x8, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff8c, 4) MULTIEQUAL (stack, 0xffffffffffffff8c, 4) , (stack, 0xffffffffffffff8c, 4)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x10000751, 8) COPY (stack, 0xffffffffffffff80, 8), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[ ---  CBRANCH (ram, 0x22bb7c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) CAST (unique, 0x10000861, 8), (unique, 0x10000861, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000638, 8), (unique, 0x10000638, 8) PTRSUB (stack, 0xffffffffffffff80, 8) , (const, 0x0, 8), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x9d, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x9d, 4), (stack, 0xffffffffffffff50, 8) COPY (const, 0x22bb75, 8)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x9d, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x9d, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x9d, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x9d, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x9d, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x9d, 4)]
[(stack, 0xffffffffffffff8c, 4) INDIRECT (stack, 0xffffffffffffff8c, 4) , (const, 0x9d, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x9d, 4)]
[ ---  CALLIND (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (unique, 0xbd80, 8) , (const, 0x20, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (unique, 0xbd80, 8) , (const, 0x8, 8)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x9f, 4), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x9d, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000640, 8) , (const, 0x0, 8), (unique, 0x10000640, 8) PTRSUB (unique, 0x10000751, 8) , (const, 0x0, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff8c, 4) MULTIEQUAL (stack, 0xffffffffffffff8c, 4) , (stack, 0xffffffffffffff8c, 4)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb8, 8) COPY (const, 0x400, 8)]
[(unique, 0x3100, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff8c, 8)]
[(unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffb57, 8)]
[(unique, 0x3100, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff90, 8)]
[(unique, 0x3100, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffa8, 8)]
[(unique, 0x10000771, 8) COPY (unique, 0x10000869, 8), (unique, 0x10000869, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffb48, 8)]
[ ---  BRANCH (ram, 0x22bbc4, 1)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x22bbd8, 8), (register, 0x20, 8) PTRSUB (unique, 0x10000227, 8) , (const, 0x8, 8), (unique, 0x10000227, 8) PTRADD (register, 0x20, 8) , (const, 0xffffffffffffffff, 8) , (const, 0x10, 8), (register, 0x20, 8) MULTIEQUAL (unique, 0x10000771, 8) , (unique, 0x10000779, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xc3, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0xc3, 4), (ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0xc3, 4), (stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0xc2, 4), (stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0xc3, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0xc2, 4), (stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0xc3, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0xc2, 4), (stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0xc3, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0xc2, 4), (stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0xc3, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0xc2, 4), (stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0xc3, 4), (stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0xc2, 4), (stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0xc3, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0xc2, 4), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff8c, 4) INDIRECT (stack, 0xffffffffffffff8c, 4) , (const, 0xc3, 4), (stack, 0xffffffffffffff8c, 4) INDIRECT (stack, 0xffffffffffffff8c, 4) , (const, 0xc2, 4), (stack, 0xffffffffffffff8c, 4) MULTIEQUAL (stack, 0xffffffffffffff8c, 4) , (stack, 0xffffffffffffff8c, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0xc3, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0xc2, 4), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[ ---  CBRANCH (ram, 0x22bbe5, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x219b60, 8) , (register, 0x38, 8) , (unique, 0x3100, 8) , (register, 0x10, 8) , (register, 0xb8, 8) , (unique, 0x3100, 8) , (unique, 0x3100, 8), (register, 0x10, 8) CAST (unique, 0x10000879, 8), (unique, 0x10000879, 8) INT_AND (unique, 0x10000871, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x10000871, 8) CAST (unique, 0x3800, 8), (register, 0xb8, 8) MULTIEQUAL (register, 0xb8, 8) , (unique, 0x100000f3, 8), (unique, 0x3800, 8) MULTIEQUAL (unique, 0x3800, 8) , (unique, 0x3800, 8)]
[ ---  CBRANCH (ram, 0x22bc00, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffff90, 8) , (const, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x22bc19, 8), (register, 0x20, 8) PTRSUB (unique, 0x10000257, 8) , (const, 0x8, 8), (unique, 0x10000257, 8) PTRADD (register, 0x20, 8) , (const, 0xffffffffffffffff, 8) , (const, 0x10, 8)]
[ ---  CALL (ram, 0x193a40, 8) , (unique, 0x3800, 8) , (unique, 0xbd80, 8) , (register, 0x10, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0xbd80, 8), (unique, 0x3800, 8) PTRADD (unique, 0x10000380, 8) , (const, 0x4, 8) , (const, 0x1, 8), (unique, 0x10000380, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff98, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (stack, 0xffffffffffffff90, 8) , (const, 0x18, 8), (register, 0x10, 8) INT_SEXT (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (stack, 0xffffffffffffff90, 8) , (const, 0x14, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x22bc4b, 8), (register, 0x20, 8) PTRSUB (unique, 0x10000267, 8) , (const, 0x8, 8), (unique, 0x10000267, 8) PTRADD (register, 0x20, 8) , (const, 0xffffffffffffffff, 8) , (const, 0x10, 8)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x16e, 4), (stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x16d, 4), (stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x143, 4), (stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x142, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x16e, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x16d, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x143, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x142, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x16e, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x16d, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x143, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x142, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x16e, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x16d, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x143, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x142, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x16e, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x16d, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x143, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x142, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x16e, 4), (stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x16d, 4), (stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x143, 4), (stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x142, 4)]
[(stack, 0xffffffffffffff98, 2) INDIRECT (stack, 0xffffffffffffff98, 2) , (const, 0x16e, 4), (stack, 0xffffffffffffff98, 2) INDIRECT (stack, 0xffffffffffffff98, 2) , (const, 0x16d, 4), (stack, 0xffffffffffffff98, 2) COPY (const, 0x2, 2)]
[(stack, 0xffffffffffffff9a, 2) INDIRECT (stack, 0xffffffffffffff9a, 2) , (const, 0x16e, 4), (stack, 0xffffffffffffff9a, 2) INDIRECT (stack, 0xffffffffffffff9a, 2) , (const, 0x16d, 4), (stack, 0xffffffffffffff9a, 2) COPY (const, 0x0, 2)]
[(unique, 0x10000761, 8) COPY (stack, 0xffffffffffffff80, 8), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x16e, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x16d, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x143, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x142, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x179, 4), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x16e, 4), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x143, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000648, 8) , (unique, 0x100008a1, 8), (unique, 0x100008a1, 8) CAST (register, 0x0, 8), (unique, 0x10000648, 8) PTRSUB (unique, 0x10000759, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x235f60, 8) , (unique, 0x3100, 8) , (unique, 0x10000889, 8) , (unique, 0x10000891, 8) , (unique, 0x10000050, 16) , (unique, 0x10000899, 8), (unique, 0x10000899, 8) CAST (unique, 0x1000017f, 8), (unique, 0x10000891, 8) CAST (unique, 0x10000739, 8), (unique, 0x10000889, 8) CAST (unique, 0x10000741, 8), (unique, 0x1000017f, 8) PTRSUB (const, 0x0, 8) , (const, 0x5, 8), (unique, 0x10000050, 16) LOAD (const, 0x1b1, 4) , (register, 0x20, 8), (unique, 0x10000739, 8) COPY (stack, 0xffffffffffffff70, 8), (unique, 0x10000741, 8) COPY (stack, 0xffffffffffffff78, 8), (unique, 0x10000759, 8) COPY (stack, 0xffffffffffffff80, 8), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x143, 4), (stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x143, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x143, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x142, 4), (stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x142, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x142, 4), (unique, 0x3100, 8) CAST (unique, 0x10000881, 8), (unique, 0x10000881, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff98, 8)]
[ ---  CBRANCH (ram, 0x22bd06, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x235f60, 8) , (unique, 0x3100, 8) , (unique, 0x10000889, 8) , (unique, 0x10000891, 8) , (unique, 0x10000050, 16) , (unique, 0x10000899, 8), (unique, 0x10000899, 8) CAST (unique, 0x1000017f, 8), (unique, 0x10000891, 8) CAST (unique, 0x10000739, 8), (unique, 0x10000889, 8) CAST (unique, 0x10000741, 8), (unique, 0x1000017f, 8) PTRSUB (const, 0x0, 8) , (const, 0x5, 8), (unique, 0x10000050, 16) LOAD (const, 0x1b1, 4) , (register, 0x20, 8), (unique, 0x10000739, 8) COPY (stack, 0xffffffffffffff70, 8), (unique, 0x10000741, 8) COPY (stack, 0xffffffffffffff78, 8), (stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x143, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x143, 4), (stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x142, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x142, 4), (unique, 0x3100, 8) CAST (unique, 0x10000881, 8), (unique, 0x10000881, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff98, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x22bd0b, 8), (register, 0x20, 8) PTRSUB (unique, 0x1000033f, 8) , (const, 0x8, 8), (unique, 0x1000033f, 8) PTRADD (register, 0x20, 8) , (const, 0xffffffffffffffff, 8) , (const, 0x10, 8)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x1d0, 4), (stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x1cf, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x1d0, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x1cf, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x1d0, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x1cf, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x1d0, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x1cf, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x1d0, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x1cf, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x1d0, 4), (stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x1cf, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x1d0, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x1cf, 4)]
[(stack, 0xffffffffffffff98, 2) INDIRECT (stack, 0xffffffffffffff98, 2) , (const, 0x1d0, 4), (stack, 0xffffffffffffff98, 2) INDIRECT (stack, 0xffffffffffffff98, 2) , (const, 0x1cf, 4)]
[(stack, 0xffffffffffffff9a, 2) INDIRECT (stack, 0xffffffffffffff9a, 2) , (const, 0x1d0, 4), (stack, 0xffffffffffffff9a, 2) INDIRECT (stack, 0xffffffffffffff9a, 2) , (const, 0x1cf, 4)]
[(ram, 0x4c2e78, 8) COPY (ram, 0x4c2e78, 8), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x1d0, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 4), (register, 0x0, 4) COPY (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x1000034f, 8), (unique, 0x1000034f, 8) PTRSUB (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x237b30, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0x100008b9, 8), (unique, 0x100008b9, 8) CAST (stack, 0xffffffffffffff78, 8), (unique, 0x3100, 8) PTRSUB (stack, 0xffffffffffffff80, 8) , (const, 0x10, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (const, 0x1, 8), (unique, 0x3100, 8) CAST (unique, 0x100008c9, 8), (unique, 0x100008c9, 8) INT_ADD (unique, 0x100008c1, 8) , (const, 0x8, 8), (unique, 0x100008c1, 8) CAST (unique, 0x10000668, 8), (unique, 0x10000668, 8) PTRADD (stack, 0xffffffffffffff80, 8) , (const, 0x1, 8) , (const, 0x18, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000678, 8) , (unique, 0x100008d1, 8), (unique, 0x100008d1, 8) CAST (stack, 0xffffffffffffff70, 8), (unique, 0x10000678, 8) PTRSUB (unique, 0x3100, 8) , (const, 0x0, 8), (unique, 0x3100, 8) PTRADD (stack, 0xffffffffffffff80, 8) , (const, 0x1, 8) , (const, 0x18, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x22bc87, 8), (register, 0x20, 8) PTRSUB (unique, 0x100002b7, 8) , (const, 0x8, 8), (unique, 0x100002b7, 8) PTRADD (register, 0x20, 8) , (const, 0xffffffffffffffff, 8) , (const, 0x10, 8)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x194, 4), (stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x193, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x194, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x193, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x194, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x193, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x194, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x193, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x194, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x193, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x194, 4), (stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x193, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x194, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x193, 4)]
[(stack, 0xffffffffffffff98, 2) INDIRECT (stack, 0xffffffffffffff98, 2) , (const, 0x194, 4), (stack, 0xffffffffffffff98, 2) INDIRECT (stack, 0xffffffffffffff98, 2) , (const, 0x193, 4)]
[(stack, 0xffffffffffffff9a, 2) INDIRECT (stack, 0xffffffffffffff9a, 2) , (const, 0x194, 4), (stack, 0xffffffffffffff9a, 2) INDIRECT (stack, 0xffffffffffffff9a, 2) , (const, 0x193, 4)]
[ ---  CALL (ram, 0x19eaf0, 8) , (unique, 0xbd80, 8) , (register, 0x38, 8) , (const, 0xff, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100008b1, 8), (unique, 0x100008b1, 8) INT_ADD (unique, 0x100008a9, 8) , (const, 0x10, 8), (unique, 0x100008a9, 8) CAST (unique, 0x10000650, 8), (unique, 0x10000650, 8) PTRADD (stack, 0xffffffffffffff80, 8) , (const, 0x1, 8) , (const, 0x18, 8)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x19a, 4), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x194, 4), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x191, 4), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x18e, 4), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x18a, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3200, 8) , (const, 0x0, 1), (unique, 0x3200, 8) CAST (unique, 0x100008f1, 8), (unique, 0x100008f1, 8) INT_ADD (unique, 0x100008e9, 8) , (const, 0xf, 8), (unique, 0x100008e9, 8) CAST (unique, 0x100006a0, 8), (unique, 0x100006a0, 8) PTRADD (unique, 0xbd80, 8) , (const, 0xa, 8) , (const, 0x18, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100008e1, 8), (unique, 0x100008e1, 8) INT_ADD (unique, 0x100008d9, 8) , (const, 0x10, 8), (unique, 0x100008d9, 8) CAST (unique, 0x10000688, 8), (unique, 0x10000688, 8) PTRADD (unique, 0x10000761, 8) , (const, 0x1, 8) , (const, 0x18, 8)]
[(unique, 0x10000769, 8) COPY (stack, 0xffffffffffffff80, 8), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x0, 8), (register, 0x20, 8) CAST (unique, 0x10000909, 8), (unique, 0x10000909, 8) INT_ADD (unique, 0x10000901, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x10000901, 8) CAST (register, 0x20, 8), (register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x19, 8), (register, 0x20, 8) CAST (unique, 0x10000919, 8), (unique, 0x10000919, 8) INT_ADD (unique, 0x10000911, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x10000911, 8) CAST (register, 0x20, 8), (register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x22bcc0, 8), (register, 0x20, 8) CAST (unique, 0x10000929, 8), (unique, 0x10000929, 8) INT_ADD (unique, 0x10000921, 8) , (const, 0xffffffffffffffe8, 8), (unique, 0x10000921, 8) CAST (register, 0x20, 8), (register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x1bb, 4), (ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x1bb, 4), (stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x1b9, 4), (stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x1b7, 4), (stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x1b4, 4), (stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x1bb, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x1b9, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x1b7, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x1b4, 4), (stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x1bb, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x1b9, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x1b7, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x1b4, 4), (stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x1bb, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x1b9, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x1b7, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x1b4, 4), (stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x1bb, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x1b9, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x1b7, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x1b4, 4), (stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x1bb, 4), (stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x1b9, 4), (stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x1b7, 4), (stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x1b4, 4), (stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x1bb, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x1b9, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x1b7, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x1b4, 4), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff98, 2) INDIRECT (stack, 0xffffffffffffff98, 2) , (const, 0x1bb, 4), (stack, 0xffffffffffffff98, 2) INDIRECT (stack, 0xffffffffffffff98, 2) , (const, 0x1b9, 4), (stack, 0xffffffffffffff98, 2) INDIRECT (stack, 0xffffffffffffff98, 2) , (const, 0x1b7, 4), (stack, 0xffffffffffffff98, 2) INDIRECT (stack, 0xffffffffffffff98, 2) , (const, 0x1b4, 4), (stack, 0xffffffffffffff98, 2) MULTIEQUAL (stack, 0xffffffffffffff98, 2) , (stack, 0xffffffffffffff98, 2)]
[(stack, 0xffffffffffffff9a, 2) INDIRECT (stack, 0xffffffffffffff9a, 2) , (const, 0x1bb, 4), (stack, 0xffffffffffffff9a, 2) INDIRECT (stack, 0xffffffffffffff9a, 2) , (const, 0x1b9, 4), (stack, 0xffffffffffffff9a, 2) INDIRECT (stack, 0xffffffffffffff9a, 2) , (const, 0x1b7, 4), (stack, 0xffffffffffffff9a, 2) INDIRECT (stack, 0xffffffffffffff9a, 2) , (const, 0x1b4, 4), (stack, 0xffffffffffffff9a, 2) MULTIEQUAL (stack, 0xffffffffffffff9a, 2) , (stack, 0xffffffffffffff9a, 2)]
[ ---  CBRANCH (ram, 0x22bbf0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALLIND (unique, 0xbd80, 8) , (unique, 0xbd80, 8) , (unique, 0x10000731, 8) , (unique, 0x10000729, 8) , (unique, 0x10000721, 8) , (stack, 0x8, 8) , (stack, 0x10, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x100006c8, 8), (unique, 0x100006c8, 8) PTRSUB (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (unique, 0xbd80, 8) , (const, 0x8, 8), (unique, 0xbd80, 8) CAST (unique, 0x100008f9, 8), (unique, 0x100008f9, 8) LOAD (const, 0x1b1, 4) , (unique, 0x100006b8, 8), (unique, 0x100006b8, 8) PTRSUB (stack, 0xffffffffffffff80, 8) , (const, 0x0, 8), (unique, 0x10000721, 8) COPY (stack, 0xffffffffffffff58, 8), (unique, 0x10000729, 8) COPY (stack, 0xffffffffffffff60, 8), (unique, 0x10000731, 8) COPY (stack, 0xffffffffffffff68, 8), (stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8), (stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8), (stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (const, 0x0, 8), (unique, 0x3100, 8) CAST (unique, 0x10000939, 8), (unique, 0x10000939, 8) INT_ADD (unique, 0x10000931, 8) , (const, 0x8, 8), (unique, 0x10000931, 8) CAST (unique, 0x100006d0, 8), (unique, 0x100006d0, 8) PTRADD (unique, 0x10000769, 8) , (const, 0x1, 8) , (const, 0x18, 8)]
[(ram, 0x4c2e78, 8) COPY (ram, 0x4c2e78, 8), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x1cc, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 4), (register, 0x0, 4) COPY (register, 0x0, 4)]
[(ram, 0x4c2e78, 8) COPY (ram, 0x4c2e78, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 4), (register, 0x0, 4) COPY (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x22bba0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffff8c, 4) , (const, 0xffffffff, 4)]
[ ---  CBRANCH (ram, 0x22bbeb, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd00, 4) , (const, 0x22, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000941, 8), (unique, 0x10000941, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (ram, 0x4c2e78, 8) , (register, 0x110, 8) , (const, 0x1, 8)]
[(ram, 0x4c2e78, 8) COPY (ram, 0x4c2e78, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 4), (register, 0x0, 4) CAST (unique, 0x10000949, 4), (unique, 0x10000949, 4) COPY (const, 0xd, 4)]
[(unique, 0x3800, 8) CAST (unique, 0x10000965, 8), (unique, 0x10000965, 8) INT_ADD (unique, 0x1000095d, 8) , (unique, 0x1000021f, 8), (unique, 0x1000095d, 8) CAST (register, 0x20, 8), (unique, 0x1000021f, 8) INT_ADD (unique, 0x100000fb, 8) , (const, 0xf, 8), (unique, 0x100000fb, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_ADD (unique, 0x100000f3, 8) , (const, 0x10, 8), (unique, 0x100000f3, 8) INT_MULT (register, 0xb8, 8) , (const, 0x2, 8)]
[(unique, 0x10000779, 8) COPY (register, 0x20, 8), (register, 0x20, 8) CAST (unique, 0x10000955, 8), (unique, 0x10000955, 8) INT_ADD (unique, 0x1000094d, 8) , (unique, 0x100000fb, 8), (unique, 0x1000094d, 8) CAST (register, 0x20, 8), (unique, 0x100000fb, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_ADD (unique, 0x100000f3, 8) , (const, 0x10, 8), (unique, 0x100000f3, 8) INT_MULT (register, 0xb8, 8) , (const, 0x2, 8)]
