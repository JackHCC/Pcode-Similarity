[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x100002b1, 8), (unique, 0x100002b1, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8)]
[(register, 0xb8, 8) INT_ADD (register, 0x30, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x425f58, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (const, 0xfffffffffffffffe, 8) , (register, 0x30, 8)]
[(register, 0xa0, 8) COPY (const, 0x0, 8)]
[(ram, 0x4c5748, 8) INDIRECT (ram, 0x4c5748, 8) , (const, 0x431, 4)]
[(ram, 0x4c57a0, 4) INDIRECT (ram, 0x4c57a0, 4) , (const, 0x431, 4)]
[(ram, 0x4c57a4, 1) INDIRECT (ram, 0x4c57a4, 1) , (const, 0x431, 4)]
[(ram, 0x4c5800, 8) INDIRECT (ram, 0x4c5800, 8) , (const, 0x431, 4)]
[(ram, 0x4c6028, 8) INDIRECT (ram, 0x4c6028, 8) , (const, 0x431, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x4f00, 8) , (const, 0xc, 4), (unique, 0x4f00, 8) CAST (unique, 0x100002b9, 8), (unique, 0x100002b9, 8) INT_ADD (register, 0x110, 8) , (const, 0xffffffffffffffc0, 8)]
[ ---  BRANCH (ram, 0x425cf0, 1)]
[ ---  CBRANCH (ram, 0x425e60, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x38, 8) , (const, 0x0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x421, 4)]
[(ram, 0x4c5748, 8) INDIRECT (ram, 0x4c5748, 8) , (const, 0x421, 4)]
[(ram, 0x4c57a0, 4) INDIRECT (ram, 0x4c57a0, 4) , (const, 0x421, 4)]
[(ram, 0x4c57a4, 1) INDIRECT (ram, 0x4c57a4, 1) , (const, 0x421, 4)]
[(ram, 0x4c5800, 8) INDIRECT (ram, 0x4c5800, 8) , (const, 0x421, 4)]
[(ram, 0x4c6028, 8) INDIRECT (ram, 0x4c6028, 8) , (const, 0x421, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x421, 4)]
[(register, 0x0, 8) CALL (ram, 0x4256f0, 8) , (register, 0x30, 8) , (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x425cf0, 1)]
[ ---  CBRANCH (ram, 0x425e78, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x30, 8) , (const, 0x0, 8)]
[(register, 0xa0, 8) COPY (const, 0x0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x412, 4)]
[(ram, 0x4c5748, 8) INDIRECT (ram, 0x4c5748, 8) , (const, 0x412, 4)]
[(ram, 0x4c57a0, 4) INDIRECT (ram, 0x4c57a0, 4) , (const, 0x412, 4)]
[(ram, 0x4c57a4, 1) INDIRECT (ram, 0x4c57a4, 1) , (const, 0x412, 4)]
[(ram, 0x4c5800, 8) INDIRECT (ram, 0x4c5800, 8) , (const, 0x412, 4)]
[(ram, 0x4c6028, 8) INDIRECT (ram, 0x4c6028, 8) , (const, 0x412, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x412, 4)]
[ ---  CALL (ram, 0x425190, 8) , (register, 0x38, 8) , (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x425cf0, 1)]
[ ---  CBRANCH (ram, 0x425ec8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x100002c1, 8), (unique, 0x100002c1, 8) INT_ADD (register, 0x110, 8) , (const, 0x18, 8)]
[ ---  CALLOTHER (const, 0x11, 4)]
[ ---  CBRANCH (const, 0x4, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4c57a0, 4) , (const, 0x0, 4)]
[(ram, 0x4c57a0, 4) COPY (const, 0x1, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x3fa, 4)]
[(ram, 0x4c5748, 8) INDIRECT (ram, 0x4c5748, 8) , (const, 0x3fa, 4)]
[(ram, 0x4c57a0, 4) INDIRECT (ram, 0x4c57a0, 4) , (const, 0x3fa, 4)]
[(ram, 0x4c57a4, 1) INDIRECT (ram, 0x4c57a4, 1) , (const, 0x3fa, 4)]
[(ram, 0x4c5800, 8) INDIRECT (ram, 0x4c5800, 8) , (const, 0x3fa, 4)]
[(ram, 0x4c6028, 8) INDIRECT (ram, 0x4c6028, 8) , (const, 0x3fa, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x3fa, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x3fa, 4)]
[ ---  CALL (ram, 0x421390, 8) , (unique, 0x10000240, 8), (unique, 0x10000240, 8) PTRSUB (const, 0x0, 8) , (const, 0x4c57a0, 8)]
[ ---  BRANCH (ram, 0x425bb3, 1)]
[ ---  CBRANCH (const, 0x4, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4c57a0, 4) , (const, 0x0, 4)]
[(ram, 0x4c57a0, 4) COPY (const, 0x1, 4)]
[(ram, 0x4c5748, 8) INDIRECT (ram, 0x4c5748, 8) , (const, 0x70, 4), (ram, 0x4c5748, 8) MULTIEQUAL (ram, 0x4c5748, 8) , (ram, 0x4c5748, 8) , (ram, 0x4c5748, 8) , (ram, 0x4c5748, 8)]
[(ram, 0x4c57a4, 1) INDIRECT (ram, 0x4c57a4, 1) , (const, 0x70, 4), (ram, 0x4c57a4, 1) MULTIEQUAL (ram, 0x4c57a4, 1) , (ram, 0x4c57a4, 1) , (ram, 0x4c57a4, 1) , (ram, 0x4c57a4, 1)]
[(ram, 0x4c5800, 8) INDIRECT (ram, 0x4c5800, 8) , (const, 0x70, 4), (ram, 0x4c5800, 8) MULTIEQUAL (ram, 0x4c5800, 8) , (ram, 0x4c5800, 8) , (ram, 0x4c5800, 8) , (ram, 0x4c5800, 8)]
[(ram, 0x4c6028, 8) INDIRECT (ram, 0x4c6028, 8) , (const, 0x70, 4), (ram, 0x4c6028, 8) MULTIEQUAL (ram, 0x4c6028, 8) , (ram, 0x4c6028, 8) , (ram, 0x4c6028, 8) , (ram, 0x4c6028, 8)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x70, 4), (stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x70, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8) , (stack, 0xffffffffffffffc0, 8) , (unique, 0xbd80, 8)]
[(register, 0x0, 8) CALL (ram, 0x421460, 8) , (register, 0x38, 8) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffb8, 8)]
[(unique, 0x10000269, 4) COPY (ram, 0x4c57a0, 4), (ram, 0x4c57a0, 4) INDIRECT (ram, 0x4c57a0, 4) , (const, 0x70, 4), (ram, 0x4c57a0, 4) MULTIEQUAL (ram, 0x4c57a0, 4) , (ram, 0x4c57a0, 4) , (ram, 0x4c57a0, 4) , (ram, 0x4c57a0, 4)]
[ ---  CBRANCH (ram, 0x425e90, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x100002c9, 8), (unique, 0x100002c9, 8) INT_ADD (register, 0x110, 8) , (const, 0x18, 8), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x70, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4c57a0, 4) COPY (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x425bda, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (const, 0x1, 4) , (unique, 0x10000269, 4)]
[ ---  CALLOTHER (const, 0x5, 4)]
[ ---  BRANCH (ram, 0x425bda, 1)]
[(ram, 0x4c57a0, 4) INT_ADD (ram, 0x4c57a0, 4) , (const, 0xffffffff, 4)]
[(ram, 0x4c57a0, 4) MULTIEQUAL (ram, 0x4c57a0, 4) , (ram, 0x4c57a0, 4) , (ram, 0x4c57a0, 4)]
[ ---  CBRANCH (ram, 0x425f7f, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x3ae, 4)]
[ ---  CALL (ram, 0x421880, 8) , (unique, 0x10000238, 8), (unique, 0x10000238, 8) COPY (const, 0x49b36f, 8)]
[(ram, 0x4c5748, 8) COPY (ram, 0x4c5748, 8), (ram, 0x4c5748, 8) INDIRECT (ram, 0x4c5748, 8) , (const, 0x3ae, 4)]
[(ram, 0x4c57a0, 4) COPY (ram, 0x4c57a0, 4), (ram, 0x4c57a0, 4) INDIRECT (ram, 0x4c57a0, 4) , (const, 0x3ae, 4)]
[(ram, 0x4c57a4, 1) COPY (ram, 0x4c57a4, 1), (ram, 0x4c57a4, 1) INDIRECT (ram, 0x4c57a4, 1) , (const, 0x3ae, 4)]
[(ram, 0x4c5800, 8) COPY (ram, 0x4c5800, 8), (ram, 0x4c5800, 8) INDIRECT (ram, 0x4c5800, 8) , (const, 0x3ae, 4)]
[(ram, 0x4c6028, 8) COPY (ram, 0x4c6028, 8), (ram, 0x4c6028, 8) INDIRECT (ram, 0x4c6028, 8) , (const, 0x3ae, 4)]
[ ---  RETURN (const, 0x1, 4)]
[ ---  CBRANCH (ram, 0x425d9b, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (unique, 0x100002d1, 8) , (const, 0x0, 8), (unique, 0x100002d1, 8) CAST (register, 0xb8, 8)]
[(register, 0x10, 8) INT_AND (unique, 0x3100, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3100, 8) INT_ADD (register, 0x30, 8) , (const, 0x18, 8)]
[(unique, 0x10000291, 8) COPY (register, 0x18, 8), (register, 0x18, 8) COPY (const, 0x20, 8)]
[ ---  CBRANCH (ram, 0x425c07, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (const, 0x1f, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) INT_ADD (register, 0x30, 8) , (const, 0x18, 8)]
[(unique, 0x10000299, 8) COPY (register, 0x10, 8)]
[(register, 0x18, 8) MULTIEQUAL (unique, 0x10000291, 8) , (unique, 0x10000299, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100002d9, 8), (unique, 0x100002d9, 8) INT_ADD (register, 0x0, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x425f28, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x100002e1, 8), (unique, 0x100002e1, 8) INT_ADD (register, 0x110, 8) , (const, 0x18, 8)]
[ ---  CALLOTHER (const, 0x11, 4)]
[ ---  CBRANCH (const, 0x4, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4c57a0, 4) , (const, 0x0, 4)]
[(ram, 0x4c57a0, 4) COPY (const, 0x1, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x3a6, 4)]
[(ram, 0x4c5748, 8) INDIRECT (ram, 0x4c5748, 8) , (const, 0x3a6, 4)]
[(ram, 0x4c57a0, 4) INDIRECT (ram, 0x4c57a0, 4) , (const, 0x3a6, 4)]
[(ram, 0x4c57a4, 1) INDIRECT (ram, 0x4c57a4, 1) , (const, 0x3a6, 4)]
[(ram, 0x4c5800, 8) INDIRECT (ram, 0x4c5800, 8) , (const, 0x3a6, 4)]
[(ram, 0x4c6028, 8) INDIRECT (ram, 0x4c6028, 8) , (const, 0x3a6, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x3a6, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x3a6, 4)]
[ ---  CALL (ram, 0x421390, 8) , (unique, 0x10000258, 8), (unique, 0x10000258, 8) PTRSUB (const, 0x0, 8) , (const, 0x4c57a0, 8)]
[ ---  BRANCH (ram, 0x425c27, 1)]
[ ---  CBRANCH (const, 0x4, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4c57a0, 4) , (const, 0x0, 4)]
[(ram, 0x4c57a0, 4) COPY (const, 0x1, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(ram, 0x4c6028, 8) MULTIEQUAL (ram, 0x4c6028, 8) , (ram, 0x4c6028, 8) , (ram, 0x4c6028, 8) , (ram, 0x4c6028, 8)]
[(ram, 0x4c5800, 8) MULTIEQUAL (ram, 0x4c5800, 8) , (ram, 0x4c5800, 8) , (ram, 0x4c5800, 8) , (ram, 0x4c5800, 8)]
[(ram, 0x4c57a4, 1) MULTIEQUAL (ram, 0x4c57a4, 1) , (ram, 0x4c57a4, 1) , (ram, 0x4c57a4, 1) , (ram, 0x4c57a4, 1)]
[(ram, 0x4c57a0, 4) MULTIEQUAL (ram, 0x4c57a0, 4) , (ram, 0x4c57a0, 4) , (ram, 0x4c57a0, 4) , (ram, 0x4c57a0, 4)]
[(ram, 0x4c5748, 8) MULTIEQUAL (ram, 0x4c5748, 8) , (ram, 0x4c5748, 8) , (ram, 0x4c5748, 8) , (ram, 0x4c5748, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x10, 8) INT_AND (unique, 0xbd80, 8) , (const, 0xfffffffffffffff8, 8)]
[ ---  CBRANCH (ram, 0x425d20, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x58c00, 1) , (const, 0x0, 1), (unique, 0x58c00, 1) INT_AND (unique, 0xbb00, 1) , (const, 0x2, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100002e9, 8), (unique, 0x100002e9, 8) INT_ADD (register, 0x0, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x425d7d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4c5800, 8) , (const, 0x4c5800, 8)]
[ ---  CBRANCH (ram, 0x425f73, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x10000106, 8) , (const, 0x0, 8), (unique, 0x10000106, 8) INT_AND (unique, 0xbd80, 8) , (const, 0x2, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100002f1, 8), (unique, 0x100002f1, 8) INT_ADD (ram, 0x4c5800, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x425f73, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (register, 0x30, 8) , (const, 0x20, 8), (register, 0x30, 8) INT_AND (unique, 0xbd80, 8) , (const, 0xfffffffffffffff8, 8)]
[ ---  CBRANCH (ram, 0x425f73, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x100001e6, 8) , (const, 0x0, 8), (unique, 0x100001e6, 8) INT_AND (unique, 0xbd80, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x425d7d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x58c00, 1) , (const, 0x0, 1), (unique, 0x58c00, 1) INT_AND (ram, 0x4c57a4, 1) , (const, 0x2, 1)]
[ ---  CBRANCH (ram, 0x425f73, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (register, 0x8, 8), (register, 0x8, 8) INT_ADD (ram, 0x4c6028, 8) , (ram, 0x4c5748, 8), (register, 0x0, 8) INT_ADD (ram, 0x4c5800, 8) , (register, 0x30, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x377, 4)]
[(ram, 0x4c5748, 8) INDIRECT (ram, 0x4c5748, 8) , (const, 0x377, 4)]
[(ram, 0x4c57a0, 4) INDIRECT (ram, 0x4c57a0, 4) , (const, 0x377, 4)]
[(ram, 0x4c57a4, 1) INDIRECT (ram, 0x4c57a4, 1) , (const, 0x377, 4)]
[(ram, 0x4c5800, 8) INDIRECT (ram, 0x4c5800, 8) , (const, 0x377, 4)]
[(ram, 0x4c6028, 8) INDIRECT (ram, 0x4c6028, 8) , (const, 0x377, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x377, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x377, 4)]
[ ---  CBRANCH (ram, 0x425c58, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x4252e0, 8) , (unique, 0x10000248, 8) , (register, 0x0, 8) , (register, 0x10, 8) , (register, 0x18, 8), (unique, 0x10000248, 8) PTRSUB (const, 0x0, 8) , (const, 0x4c57a0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xf8, 4)]
[(ram, 0x4c5748, 8) INDIRECT (ram, 0x4c5748, 8) , (const, 0xf8, 4)]
[(ram, 0x4c57a0, 4) INDIRECT (ram, 0x4c57a0, 4) , (const, 0xf8, 4)]
[(ram, 0x4c57a4, 1) INDIRECT (ram, 0x4c57a4, 1) , (const, 0xf8, 4)]
[(ram, 0x4c5800, 8) INDIRECT (ram, 0x4c5800, 8) , (const, 0xf8, 4)]
[(ram, 0x4c6028, 8) INDIRECT (ram, 0x4c6028, 8) , (const, 0xf8, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0xf8, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xf8, 4)]
[(unique, 0x100002a1, 8) COPY (unique, 0x3100, 8), (unique, 0x3100, 8) INT_ADD (register, 0x0, 8) , (const, 0x10, 8), (register, 0x0, 8) CALL (ram, 0x421af0, 8) , (register, 0x0, 8) , (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x425db0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x421af0, 8) , (register, 0x0, 8) , (register, 0x18, 8)]
[(unique, 0x100002a9, 8) COPY (register, 0x38, 8)]
[ ---  CBRANCH (ram, 0x425c58, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (unique, 0x3100, 8) , (register, 0x18, 8), (unique, 0x3100, 8) INT_SUB (register, 0x10, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x425e1d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4c5800, 8) , (const, 0x4c5800, 8)]
[ ---  CBRANCH (ram, 0x425f73, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x1000013e, 8) , (const, 0x0, 8), (unique, 0x1000013e, 8) INT_AND (unique, 0xbd80, 8) , (const, 0x2, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100002f9, 8), (unique, 0x100002f9, 8) INT_ADD (ram, 0x4c5800, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x425f73, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (register, 0x30, 8) , (const, 0x20, 8), (register, 0x30, 8) INT_AND (unique, 0xbd80, 8) , (const, 0xfffffffffffffff8, 8)]
[ ---  CBRANCH (ram, 0x425f73, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x100001ee, 8) , (const, 0x0, 8), (unique, 0x100001ee, 8) INT_AND (unique, 0xbd80, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x425e1d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x58c00, 1) , (const, 0x0, 1), (unique, 0x58c00, 1) INT_AND (ram, 0x4c57a4, 1) , (const, 0x2, 1)]
[ ---  CBRANCH (ram, 0x425f73, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (register, 0x8, 8), (register, 0x8, 8) INT_ADD (ram, 0x4c6028, 8) , (ram, 0x4c5748, 8), (register, 0x0, 8) INT_ADD (ram, 0x4c5800, 8) , (register, 0x30, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x30c, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CALL (ram, 0x421880, 8) , (unique, 0x10000230, 8), (unique, 0x10000230, 8) COPY (const, 0x49b352, 8)]
[(ram, 0x4c5748, 8) COPY (ram, 0x4c5748, 8), (ram, 0x4c5748, 8) INDIRECT (ram, 0x4c5748, 8) , (const, 0x30c, 4), (ram, 0x4c5748, 8) MULTIEQUAL (ram, 0x4c5748, 8) , (ram, 0x4c5748, 8) , (ram, 0x4c5748, 8) , (ram, 0x4c5748, 8) , (ram, 0x4c5748, 8) , (ram, 0x4c5748, 8) , (ram, 0x4c5748, 8) , (ram, 0x4c5748, 8)]
[(ram, 0x4c57a0, 4) COPY (ram, 0x4c57a0, 4), (ram, 0x4c57a0, 4) INDIRECT (ram, 0x4c57a0, 4) , (const, 0x30c, 4), (ram, 0x4c57a0, 4) MULTIEQUAL (ram, 0x4c57a0, 4) , (ram, 0x4c57a0, 4) , (ram, 0x4c57a0, 4) , (ram, 0x4c57a0, 4) , (ram, 0x4c57a0, 4) , (ram, 0x4c57a0, 4) , (ram, 0x4c57a0, 4) , (ram, 0x4c57a0, 4)]
[(ram, 0x4c57a4, 1) COPY (ram, 0x4c57a4, 1), (ram, 0x4c57a4, 1) INDIRECT (ram, 0x4c57a4, 1) , (const, 0x30c, 4), (ram, 0x4c57a4, 1) MULTIEQUAL (ram, 0x4c57a4, 1) , (ram, 0x4c57a4, 1) , (ram, 0x4c57a4, 1) , (ram, 0x4c57a4, 1) , (ram, 0x4c57a4, 1) , (ram, 0x4c57a4, 1) , (ram, 0x4c57a4, 1) , (ram, 0x4c57a4, 1)]
[(ram, 0x4c5800, 8) COPY (ram, 0x4c5800, 8), (ram, 0x4c5800, 8) INDIRECT (ram, 0x4c5800, 8) , (const, 0x30c, 4), (ram, 0x4c5800, 8) MULTIEQUAL (ram, 0x4c5800, 8) , (ram, 0x4c5800, 8) , (ram, 0x4c5800, 8) , (ram, 0x4c5800, 8) , (ram, 0x4c5800, 8) , (ram, 0x4c5800, 8) , (ram, 0x4c5800, 8) , (ram, 0x4c5800, 8)]
[(ram, 0x4c6028, 8) COPY (ram, 0x4c6028, 8), (ram, 0x4c6028, 8) INDIRECT (ram, 0x4c6028, 8) , (const, 0x30c, 4), (ram, 0x4c6028, 8) MULTIEQUAL (ram, 0x4c6028, 8) , (ram, 0x4c6028, 8) , (ram, 0x4c6028, 8) , (ram, 0x4c6028, 8) , (ram, 0x4c6028, 8) , (ram, 0x4c6028, 8) , (ram, 0x4c6028, 8) , (ram, 0x4c6028, 8)]
[ ---  RETURN (const, 0x1, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x2d6, 4)]
[(ram, 0x4c5748, 8) INDIRECT (ram, 0x4c5748, 8) , (const, 0x2d6, 4)]
[(ram, 0x4c57a0, 4) INDIRECT (ram, 0x4c57a0, 4) , (const, 0x2d6, 4)]
[(ram, 0x4c57a4, 1) INDIRECT (ram, 0x4c57a4, 1) , (const, 0x2d6, 4)]
[(ram, 0x4c5800, 8) INDIRECT (ram, 0x4c5800, 8) , (const, 0x2d6, 4)]
[(ram, 0x4c6028, 8) INDIRECT (ram, 0x4c6028, 8) , (const, 0x2d6, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x2d6, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2d6, 4)]
[ ---  CBRANCH (ram, 0x425d9b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x423fd0, 8) , (unique, 0x10000250, 8) , (register, 0xb8, 8), (unique, 0x10000250, 8) PTRSUB (const, 0x0, 8) , (const, 0x4c57a0, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xa0, 8) COPY (const, 0x0, 8)]
[(ram, 0x4c5748, 8) INDIRECT (ram, 0x4c5748, 8) , (const, 0x307, 4), (ram, 0x4c5748, 8) MULTIEQUAL (ram, 0x4c5748, 8) , (ram, 0x4c5748, 8) , (ram, 0x4c5748, 8)]
[(ram, 0x4c57a0, 4) INDIRECT (ram, 0x4c57a0, 4) , (const, 0x307, 4), (ram, 0x4c57a0, 4) MULTIEQUAL (ram, 0x4c57a0, 4) , (ram, 0x4c57a0, 4) , (ram, 0x4c57a0, 4)]
[(ram, 0x4c57a4, 1) INDIRECT (ram, 0x4c57a4, 1) , (const, 0x307, 4), (ram, 0x4c57a4, 1) MULTIEQUAL (ram, 0x4c57a4, 1) , (ram, 0x4c57a4, 1) , (ram, 0x4c57a4, 1)]
[(ram, 0x4c5800, 8) INDIRECT (ram, 0x4c5800, 8) , (const, 0x307, 4), (ram, 0x4c5800, 8) MULTIEQUAL (ram, 0x4c5800, 8) , (ram, 0x4c5800, 8) , (ram, 0x4c5800, 8)]
[(ram, 0x4c6028, 8) INDIRECT (ram, 0x4c6028, 8) , (const, 0x307, 4), (ram, 0x4c6028, 8) MULTIEQUAL (ram, 0x4c6028, 8) , (ram, 0x4c6028, 8) , (ram, 0x4c6028, 8)]
[ ---  STORE (const, 0x1b1, 4) , (stack, 0xffffffffffffffb8, 8) , (unique, 0xba80, 1), (unique, 0xba80, 1) INT_NEGATE (unique, 0xba80, 1), (unique, 0xba80, 1) LOAD (const, 0x1b1, 4) , (stack, 0xffffffffffffffb8, 8), (stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[ ---  BRANCH (ram, 0x425c58, 1)]
[ ---  CALL (ram, 0x401060, 8) , (register, 0x0, 8) , (register, 0x38, 8) , (register, 0x10, 8), (register, 0x10, 8) INT_SUB (register, 0x10, 8) , (const, 0x10, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x2f6, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x2f2, 4)]
[(ram, 0x4c5748, 8) INDIRECT (ram, 0x4c5748, 8) , (const, 0x2f6, 4), (ram, 0x4c5748, 8) INDIRECT (ram, 0x4c5748, 8) , (const, 0x2f2, 4)]
[(ram, 0x4c57a0, 4) INDIRECT (ram, 0x4c57a0, 4) , (const, 0x2f6, 4), (ram, 0x4c57a0, 4) INDIRECT (ram, 0x4c57a0, 4) , (const, 0x2f2, 4)]
[(ram, 0x4c57a4, 1) INDIRECT (ram, 0x4c57a4, 1) , (const, 0x2f6, 4), (ram, 0x4c57a4, 1) INDIRECT (ram, 0x4c57a4, 1) , (const, 0x2f2, 4)]
[(ram, 0x4c5800, 8) INDIRECT (ram, 0x4c5800, 8) , (const, 0x2f6, 4), (ram, 0x4c5800, 8) INDIRECT (ram, 0x4c5800, 8) , (const, 0x2f2, 4)]
[(ram, 0x4c6028, 8) INDIRECT (ram, 0x4c6028, 8) , (const, 0x2f6, 4), (ram, 0x4c6028, 8) INDIRECT (ram, 0x4c6028, 8) , (const, 0x2f2, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2f6, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2f2, 4)]
[ ---  CALL (ram, 0x421a50, 8) , (register, 0x0, 8)]
[ ---  BRANCH (ram, 0x425c58, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(ram, 0x4c6028, 8) MULTIEQUAL (ram, 0x4c6028, 8) , (ram, 0x4c6028, 8) , (ram, 0x4c6028, 8) , (ram, 0x4c6028, 8) , (ram, 0x4c6028, 8)]
[(ram, 0x4c5800, 8) MULTIEQUAL (ram, 0x4c5800, 8) , (ram, 0x4c5800, 8) , (ram, 0x4c5800, 8) , (ram, 0x4c5800, 8) , (ram, 0x4c5800, 8)]
[(ram, 0x4c57a4, 1) MULTIEQUAL (ram, 0x4c57a4, 1) , (ram, 0x4c57a4, 1) , (ram, 0x4c57a4, 1) , (ram, 0x4c57a4, 1) , (ram, 0x4c57a4, 1)]
[(ram, 0x4c5748, 8) MULTIEQUAL (ram, 0x4c5748, 8) , (ram, 0x4c5748, 8) , (ram, 0x4c5748, 8) , (ram, 0x4c5748, 8) , (ram, 0x4c5748, 8)]
[(register, 0xa0, 8) MULTIEQUAL (unique, 0x100002a1, 8) , (unique, 0x100002a9, 8) , (register, 0x0, 8) , (register, 0xa0, 8) , (register, 0x0, 8)]
[(unique, 0x1000026d, 4) COPY (ram, 0x4c57a0, 4), (ram, 0x4c57a0, 4) MULTIEQUAL (ram, 0x4c57a0, 4) , (ram, 0x4c57a0, 4) , (ram, 0x4c57a0, 4) , (ram, 0x4c57a0, 4) , (ram, 0x4c57a0, 4)]
[ ---  CBRANCH (ram, 0x425ef0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10000301, 8), (unique, 0x10000301, 8) INT_ADD (register, 0x110, 8) , (const, 0x18, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4c57a0, 4) COPY (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x425c6f, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (const, 0x1, 4) , (unique, 0x1000026d, 4)]
[ ---  CALLOTHER (const, 0x5, 4)]
[ ---  BRANCH (ram, 0x425c6f, 1)]
[(ram, 0x4c57a0, 4) INT_ADD (ram, 0x4c57a0, 4) , (const, 0xffffffff, 4)]
[(ram, 0x4c57a0, 4) MULTIEQUAL (ram, 0x4c57a0, 4) , (ram, 0x4c57a0, 4) , (ram, 0x4c57a0, 4)]
[ ---  CBRANCH (ram, 0x425cf0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xa0, 8) , (const, 0x0, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) CAST (unique, 0x10000309, 8), (unique, 0x10000309, 8) INT_ADD (register, 0xa0, 8) , (const, 0xfffffffffffffff8, 8)]
[ ---  CBRANCH (ram, 0x425c9e, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 1) , (const, 0x1, 1), (register, 0x0, 1) INT_XOR (unique, 0x100001f6, 1) , (unique, 0x100001f7, 1), (unique, 0x100001f7, 1) SUBPIECE (register, 0x10, 8) , (const, 0x0, 4), (unique, 0x100001f6, 1) SUBPIECE (register, 0x0, 8) , (const, 0x0, 4), (register, 0x0, 8) INT_RIGHT (unique, 0x3800, 8) , (const, 0x3, 4), (register, 0x10, 8) INT_RIGHT (unique, 0x3800, 8) , (const, 0xb, 4), (unique, 0x3800, 8) INT_SUB (register, 0xa0, 8) , (const, 0x10, 8)]
[(register, 0x0, 1) COPY (const, 0x2, 1)]
[(register, 0x0, 1) MULTIEQUAL (register, 0x0, 1) , (register, 0x0, 1)]
[(unique, 0x3100, 8) INT_SUB (register, 0x8, 8) , (const, 0x10, 8), (register, 0x8, 8) INT_AND (unique, 0xbd80, 8) , (const, 0xfffffffffffffff8, 8)]
[(unique, 0x10000281, 8) COPY (unique, 0x3100, 8), (unique, 0x3100, 8) INT_SUB (register, 0x8, 8) , (const, 0x8, 8), (register, 0x8, 8) INT_AND (unique, 0xbd80, 8) , (const, 0xfffffffffffffff8, 8)]
[ ---  CBRANCH (ram, 0x425cb1, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x100001de, 8) , (const, 0x0, 8), (unique, 0x100001de, 8) INT_AND (unique, 0xbd80, 8) , (const, 0x2, 8)]
[(unique, 0x10000289, 8) COPY (unique, 0x3100, 8)]
[(unique, 0x3100, 8) INT_SUB (register, 0x30, 8) , (const, 0x1, 8), (register, 0x30, 8) INT_ZEXT (register, 0x0, 1)]
[(register, 0x10, 8) INT_SUB (register, 0x10, 8) , (const, 0x1, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0x10000281, 8) , (unique, 0x10000289, 8)]
[(unique, 0x10000211, 8) MULTIEQUAL (ram, 0x4c5748, 8) , (ram, 0x4c5748, 8)]
[(unique, 0x10000219, 4) MULTIEQUAL (ram, 0x4c57a0, 4) , (ram, 0x4c57a0, 4)]
[(unique, 0x1000021d, 1) MULTIEQUAL (ram, 0x4c57a4, 1) , (ram, 0x4c57a4, 1)]
[(unique, 0x1000021e, 8) MULTIEQUAL (ram, 0x4c5800, 8) , (ram, 0x4c5800, 8)]
[(unique, 0x10000226, 8) MULTIEQUAL (ram, 0x4c6028, 8) , (ram, 0x4c6028, 8)]
[ ---  CBRANCH (ram, 0x425cec, 1) , (unique, 0x10000210, 1), (unique, 0x10000210, 1) INT_LESS (register, 0x30, 8) , (unique, 0x10000208, 8), (unique, 0x10000208, 8) MULTIEQUAL (register, 0x10, 8) , (register, 0x10, 8)]
[ ---  CBRANCH (ram, 0x425cd9, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (const, 0xff, 8) , (register, 0x8, 8), (register, 0x8, 8) INT_SUB (unique, 0x10000208, 8) , (register, 0x30, 8)]
[(register, 0x8, 8) COPY (const, 0xff, 8)]
[(unique, 0x10000271, 8) COPY (register, 0x8, 8), (register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8)]
[ ---  CBRANCH (ram, 0x425ce0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x30, 8) , (register, 0x8, 8), (register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8)]
[(unique, 0x10000279, 8) COPY (unique, 0x3100, 8)]
[(ram, 0x4c5748, 8) INDIRECT (unique, 0x10000211, 8) , (const, 0x1ee, 4)]
[(ram, 0x4c57a0, 4) INDIRECT (unique, 0x10000219, 4) , (const, 0x1ee, 4)]
[(ram, 0x4c57a4, 1) INDIRECT (unique, 0x1000021d, 1) , (const, 0x1ee, 4)]
[(ram, 0x4c5800, 8) INDIRECT (unique, 0x1000021e, 8) , (const, 0x1ee, 4)]
[(ram, 0x4c6028, 8) INDIRECT (unique, 0x10000226, 8) , (const, 0x1ee, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3400, 8) , (register, 0x8, 1), (register, 0x8, 1) SUBPIECE (register, 0x8, 8) , (const, 0x0, 4), (unique, 0x3400, 8) CAST (unique, 0x10000311, 8), (unique, 0x10000311, 8) INT_ADD (register, 0xa0, 8) , (unique, 0x10000208, 8), (register, 0x8, 8) MULTIEQUAL (unique, 0x10000271, 8) , (unique, 0x10000279, 8)]
[(register, 0x10, 8) INT_SUB (unique, 0x10000208, 8) , (register, 0x8, 8), (register, 0x8, 8) MULTIEQUAL (unique, 0x10000271, 8) , (unique, 0x10000279, 8)]
[(ram, 0x4c5748, 8) INDIRECT (unique, 0x10000211, 8) , (const, 0x205, 4)]
[(ram, 0x4c57a0, 4) INDIRECT (unique, 0x10000219, 4) , (const, 0x205, 4)]
[(ram, 0x4c57a4, 1) INDIRECT (unique, 0x1000021d, 1) , (const, 0x205, 4)]
[(ram, 0x4c5800, 8) INDIRECT (unique, 0x1000021e, 8) , (const, 0x205, 4)]
[(ram, 0x4c6028, 8) INDIRECT (unique, 0x10000226, 8) , (const, 0x205, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3400, 8) , (register, 0x0, 1), (unique, 0x3400, 8) CAST (unique, 0x10000319, 8), (unique, 0x10000319, 8) INT_ADD (register, 0xa0, 8) , (register, 0x30, 8)]
[(ram, 0x4c6028, 8) MULTIEQUAL (ram, 0x4c6028, 8) , (ram, 0x4c6028, 8) , (ram, 0x4c6028, 8) , (ram, 0x4c6028, 8) , (ram, 0x4c6028, 8)]
[(ram, 0x4c5800, 8) MULTIEQUAL (ram, 0x4c5800, 8) , (ram, 0x4c5800, 8) , (ram, 0x4c5800, 8) , (ram, 0x4c5800, 8) , (ram, 0x4c5800, 8)]
[(ram, 0x4c57a4, 1) MULTIEQUAL (ram, 0x4c57a4, 1) , (ram, 0x4c57a4, 1) , (ram, 0x4c57a4, 1) , (ram, 0x4c57a4, 1) , (ram, 0x4c57a4, 1)]
[(ram, 0x4c57a0, 4) MULTIEQUAL (ram, 0x4c57a0, 4) , (ram, 0x4c57a0, 4) , (ram, 0x4c57a0, 4) , (ram, 0x4c57a0, 4) , (ram, 0x4c57a0, 4)]
[(ram, 0x4c5748, 8) MULTIEQUAL (ram, 0x4c5748, 8) , (ram, 0x4c5748, 8) , (ram, 0x4c5748, 8) , (ram, 0x4c5748, 8) , (ram, 0x4c5748, 8)]
[(register, 0xa0, 8) MULTIEQUAL (register, 0xa0, 8) , (register, 0xa0, 8) , (register, 0xa0, 8) , (register, 0x0, 8) , (register, 0xa0, 8)]
[ ---  CBRANCH (ram, 0x425f6e, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffffc0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10000321, 8), (unique, 0x10000321, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (unique, 0xbd80, 8)]
[(ram, 0x4c5748, 8) COPY (ram, 0x4c5748, 8)]
[(ram, 0x4c57a0, 4) COPY (ram, 0x4c57a0, 4)]
[(ram, 0x4c57a4, 1) COPY (ram, 0x4c57a4, 1)]
[(ram, 0x4c5800, 8) COPY (ram, 0x4c5800, 8)]
[(ram, 0x4c6028, 8) COPY (ram, 0x4c6028, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) COPY (register, 0xa0, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x231, 4)]
[ ---  CALL (ram, 0x458dd0, 8)]
[(ram, 0x4c5748, 8) COPY (ram, 0x4c5748, 8), (ram, 0x4c5748, 8) INDIRECT (ram, 0x4c5748, 8) , (const, 0x231, 4)]
[(ram, 0x4c57a0, 4) COPY (ram, 0x4c57a0, 4), (ram, 0x4c57a0, 4) INDIRECT (ram, 0x4c57a0, 4) , (const, 0x231, 4)]
[(ram, 0x4c57a4, 1) COPY (ram, 0x4c57a4, 1), (ram, 0x4c57a4, 1) INDIRECT (ram, 0x4c57a4, 1) , (const, 0x231, 4)]
[(ram, 0x4c5800, 8) COPY (ram, 0x4c5800, 8), (ram, 0x4c5800, 8) INDIRECT (ram, 0x4c5800, 8) , (const, 0x231, 4)]
[(ram, 0x4c6028, 8) COPY (ram, 0x4c6028, 8), (ram, 0x4c6028, 8) INDIRECT (ram, 0x4c6028, 8) , (const, 0x231, 4)]
[ ---  RETURN (const, 0x1, 4)]
