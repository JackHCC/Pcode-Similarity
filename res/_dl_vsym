[(register, 0x8, 4) INT_ZEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0x10, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10000283, 8), (unique, 0x10000283, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8)]
[(stack, 0xffffffffffffff74, 4) COPY (const, 0x1, 4)]
[(unique, 0x10000263, 4) COPY (register, 0x0, 4), (register, 0x0, 4) COPY (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x491dc8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x8, 8) , (const, 0x0, 8), (register, 0x8, 8) INT_ZEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0x10, 8)]
[(register, 0x30, 8) INT_ZEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[(unique, 0x10000277, 4) COPY (register, 0x8, 4)]
[ ---  CBRANCH (ram, 0x491e70, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[(register, 0x0, 4) SUBPIECE (register, 0x0, 8) , (const, 0x0, 4), (register, 0x0, 8) INT_ADD (register, 0x30, 8) , (register, 0x8, 8), (register, 0x8, 8) INT_MULT (register, 0x8, 8) , (const, 0x10, 8)]
[(register, 0x8, 8) INT_ZEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x2, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x491ef0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x2, 8) , (const, 0x1, 8)]
[(register, 0x8, 8) INT_ZEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x3, 8) , (const, 0x1, 8)]
[(unique, 0x10000267, 4) COPY (register, 0x0, 4), (register, 0x0, 4) SUBPIECE (register, 0x0, 8) , (const, 0x0, 4), (register, 0x0, 8) INT_ADD (register, 0x0, 8) , (register, 0x8, 8), (register, 0x0, 8) INT_MULT (register, 0x0, 8) , (const, 0x10, 8)]
[ ---  CBRANCH (ram, 0x491dc8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x3, 8) , (const, 0x1, 8)]
[(register, 0x8, 8) INT_ZEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x4, 8) , (const, 0x1, 8)]
[(unique, 0x1000026b, 4) COPY (register, 0x0, 4), (register, 0x0, 4) SUBPIECE (register, 0x0, 8) , (const, 0x0, 4), (register, 0x0, 8) INT_ADD (register, 0x0, 8) , (register, 0x8, 8), (register, 0x0, 8) INT_MULT (register, 0x0, 8) , (const, 0x10, 8)]
[ ---  CBRANCH (ram, 0x491dc8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x4, 8) , (const, 0x1, 8)]
[(unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x5, 8) , (const, 0x1, 8)]
[(unique, 0x1000026f, 4) COPY (register, 0x0, 4), (register, 0x0, 4) SUBPIECE (register, 0x0, 8) , (const, 0x0, 4), (register, 0x0, 8) INT_ADD (register, 0x0, 8) , (register, 0x8, 8), (register, 0x0, 8) INT_MULT (register, 0x0, 8) , (const, 0x10, 8)]
[ ---  CBRANCH (ram, 0x491dc8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x5, 8) , (const, 0x1, 8)]
[(register, 0x0, 8) INT_XOR (register, 0x0, 8) , (register, 0x10, 8), (register, 0x10, 8) INT_ZEXT (register, 0x10, 4), (register, 0x10, 4) INT_AND (register, 0x10, 4) , (const, 0xf0, 4), (register, 0x10, 4) SUBPIECE (unique, 0x100001d3, 8) , (const, 0x0, 4), (unique, 0x100001d3, 8) INT_RIGHT (register, 0x0, 8) , (const, 0x18, 4), (register, 0x0, 8) INT_ADD (register, 0x0, 8) , (register, 0x10, 8), (register, 0x0, 8) INT_MULT (register, 0x0, 8) , (const, 0x10, 8), (register, 0x10, 8) INT_ZEXT (unique, 0xbb00, 1), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8), (unique, 0xbb00, 1) MULTIEQUAL (unique, 0xbb00, 1) , (unique, 0xbb00, 1)]
[ ---  CBRANCH (ram, 0x491f30, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0x8, 8), (register, 0x8, 8) PTRADD (register, 0x8, 8) , (const, 0x1, 8) , (const, 0x1, 8), (register, 0x8, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0x8, 8)]
[(unique, 0x10000273, 4) COPY (register, 0x0, 4), (register, 0x0, 4) INT_AND (register, 0x0, 4) , (const, 0xfffffff, 4), (register, 0x0, 4) SUBPIECE (register, 0x0, 8) , (const, 0x0, 4)]
[ ---  BRANCH (ram, 0x491dc8, 1)]
[(register, 0x0, 4) MULTIEQUAL (unique, 0x10000263, 4) , (unique, 0x10000267, 4) , (unique, 0x1000026b, 4) , (unique, 0x1000026f, 4) , (unique, 0x10000273, 4) , (unique, 0x10000277, 4) , (register, 0x0, 4)]
[(stack, 0xffffffffffffff78, 8) COPY (const, 0x0, 8)]
[(stack, 0xffffffffffffff60, 8) COPY (const, 0x0, 8)]
[(unique, 0x1000027b, 8) COPY (register, 0x10, 8)]
[ ---  CBRANCH (ram, 0x491fa8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x38, 8) , (const, 0x0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1e9, 4)]
[(ram, 0x4c6180, 8) INDIRECT (ram, 0x4c6180, 8) , (const, 0x1e9, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x1e9, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (unique, 0x1000027b, 8) , (const, 0x1e9, 4)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (register, 0x0, 4) , (const, 0x1e9, 4)]
[(stack, 0xffffffffffffff74, 4) INDIRECT (stack, 0xffffffffffffff74, 4) , (const, 0x1e9, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x1e9, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x1e9, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x1e9, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x1e9, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x1e9, 4)]
[(stack, 0xffffffffffffffc0, 4) INDIRECT (stack, 0xffffffffffffffc0, 4) , (const, 0x1e9, 4)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0x1e9, 4)]
[(stack, 0xffffffffffffffe0, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x1e9, 4)]
[(unique, 0x10000223, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x1000028b, 8), (unique, 0x1000028b, 8) CALL (ram, 0x48cba0, 8) , (register, 0x8, 8)]
[ ---  CBRANCH (ram, 0x491fbe, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x1000028b, 8), (unique, 0x1000028b, 8) CALL (ram, 0x48cba0, 8) , (register, 0x8, 8)]
[(unique, 0x1000022b, 8) COPY (ram, 0x4c6180, 8)]
[(register, 0x30, 8) MULTIEQUAL (unique, 0x10000223, 8) , (unique, 0x1000022b, 8)]
[ ---  CBRANCH (ram, 0x491fe0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10000293, 8), (unique, 0x10000293, 8) INT_ADD (register, 0x110, 8) , (const, 0x18, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x4f00, 8) , (const, 0x1, 4), (unique, 0x4f00, 8) CAST (unique, 0x1000029b, 8), (unique, 0x1000029b, 8) INT_ADD (register, 0x110, 8) , (const, 0x1c, 8)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x230, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x230, 4)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0x230, 4)]
[(stack, 0xffffffffffffff74, 4) INDIRECT (stack, 0xffffffffffffff74, 4) , (const, 0x230, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x230, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x230, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (unique, 0x10000253, 8) , (const, 0x230, 4), (unique, 0x10000253, 8) COPY (register, 0x30, 8)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (unique, 0x1000025b, 8) , (const, 0x230, 4), (unique, 0x1000025b, 8) COPY (register, 0x30, 8)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (unique, 0x3800, 8) , (const, 0x230, 4), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffffc0, 4) INDIRECT (stack, 0xffffffffffffffc0, 4) , (const, 0x230, 4), (stack, 0xffffffffffffffc0, 4) COPY (const, 0x5, 4)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (unique, 0x3800, 8) , (const, 0x230, 4), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffffe0, 8) INDIRECT (stack, 0xffffffffffffffe0, 8) , (const, 0x230, 4)]
[(register, 0x0, 4) CALL (ram, 0x489470, 8) , (unique, 0x3800, 8) , (unique, 0x1000015a, 8) , (unique, 0x3800, 8), (unique, 0x1000015a, 8) PTRSUB (const, 0x0, 8) , (const, 0x491d20, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffa8, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff88, 8)]
[(ram, 0x4c6180, 8) INDIRECT (ram, 0x4c6180, 8) , (const, 0x241, 4), (ram, 0x4c6180, 8) INDIRECT (ram, 0x4c6180, 8) , (const, 0x230, 4), (ram, 0x4c6180, 8) INDIRECT (ram, 0x4c6180, 8) , (const, 0x227, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x4f00, 8) , (const, 0x0, 4), (unique, 0x4f00, 8) CAST (unique, 0x100002a3, 8), (unique, 0x100002a3, 8) INT_ADD (register, 0x110, 8) , (const, 0x1c, 8), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x230, 4)]
[ ---  CBRANCH (ram, 0x492067, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0x2, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x100002a3, 8), (unique, 0x100002a3, 8) INT_ADD (register, 0x110, 8) , (const, 0x1c, 8), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x230, 4)]
[ ---  CALLOTHER (const, 0x5, 4)]
[(unique, 0x100001eb, 8) COPY (stack, 0xffffffffffffffa8, 8)]
[ ---  CBRANCH (ram, 0x491e19, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffff90, 8) , (const, 0x0, 8)]
[(ram, 0x4c6180, 8) INDIRECT (ram, 0x4c6180, 8) , (const, 0x289, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x289, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x289, 4)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0x289, 4)]
[(stack, 0xffffffffffffff74, 4) INDIRECT (stack, 0xffffffffffffff74, 4) , (const, 0x289, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x289, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x289, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x289, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x289, 4)]
[(stack, 0xffffffffffffffc0, 4) INDIRECT (stack, 0xffffffffffffffc0, 4) , (const, 0x289, 4)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0x289, 4)]
[(stack, 0xffffffffffffffe0, 8) INDIRECT (stack, 0xffffffffffffffe0, 8) , (const, 0x289, 4)]
[ ---  CALL (ram, 0x4893c0, 8) , (register, 0x0, 4) , (unique, 0x3800, 8) , (const, 0x0, 8)]
[(unique, 0xbd80, 8) CAST (unique, 0x100002ab, 8), (unique, 0x100002ab, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (register, 0x30, 8) , (const, 0x72, 8) , (const, 0x8, 8)]
[(stack, 0xffffffffffffff50, 8) COPY (const, 0x0, 8)]
[(stack, 0xffffffffffffff48, 8) COPY (const, 0x1, 8)]
[ ---  BRANCH (ram, 0x491ece, 1)]
[ ---  CBRANCH (ram, 0x491e88, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x38, 8) , (const, 0xffffffffffffffff, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x14e, 4)]
[(ram, 0x4c6180, 8) INDIRECT (ram, 0x4c6180, 8) , (const, 0x14e, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x14e, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (unique, 0x1000027b, 8) , (const, 0x14e, 4)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (register, 0x0, 4) , (const, 0x14e, 4)]
[(stack, 0xffffffffffffff74, 4) INDIRECT (stack, 0xffffffffffffff74, 4) , (const, 0x14e, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x14e, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x14e, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x14e, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x14e, 4)]
[(stack, 0xffffffffffffffc0, 4) INDIRECT (stack, 0xffffffffffffffc0, 4) , (const, 0x14e, 4)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0x14e, 4)]
[(stack, 0xffffffffffffffe0, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x14e, 4)]
[ ---  CBRANCH (ram, 0x491f70, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x100002b3, 8), (unique, 0x100002b3, 8) CALL (ram, 0x48cba0, 8) , (register, 0x8, 8)]
[(unique, 0x1000021b, 8) COPY (ram, 0x4c6180, 8)]
[ ---  CBRANCH (ram, 0x491f92, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4c6180, 8) , (const, 0x0, 8)]
[(unique, 0x100001fb, 8) COPY (register, 0x0, 8)]
[(unique, 0x10000213, 8) COPY (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x491f7c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (ram, 0x4c6180, 8)]
[ ---  CBRANCH (ram, 0x491f92, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (register, 0x8, 8) , (unique, 0x100002bb, 8), (unique, 0x100002bb, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (register, 0x30, 8) , (const, 0x6a, 8) , (const, 0x8, 8), (register, 0x30, 8) MULTIEQUAL (unique, 0x10000213, 8) , (unique, 0x1000021b, 8)]
[(unique, 0x10000203, 8) COPY (register, 0x30, 8)]
[ ---  CBRANCH (ram, 0x491ea9, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESSEQUAL (unique, 0x100002c3, 8) , (register, 0x8, 8), (unique, 0x100002c3, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (register, 0x30, 8) , (const, 0x6b, 8) , (const, 0x8, 8)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x1d8, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x1d8, 4)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0x1d8, 4)]
[(stack, 0xffffffffffffff74, 4) INDIRECT (stack, 0xffffffffffffff74, 4) , (const, 0x1d8, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x1d8, 4)]
[(stack, 0xffffffffffffffe0, 8) INDIRECT (stack, 0xffffffffffffffe0, 8) , (const, 0x1d8, 4)]
[ ---  CALL (ram, 0x489410, 8) , (const, 0x0, 8) , (const, 0x0, 8) , (const, 0x0, 8) , (unique, 0x10000162, 8), (unique, 0x10000162, 8) COPY (const, 0x4b5be8, 8)]
[(ram, 0x4c6180, 8) COPY (ram, 0x4c6180, 8), (ram, 0x4c6180, 8) INDIRECT (ram, 0x4c6180, 8) , (const, 0x1d8, 4)]
[ ---  RETURN (const, 0x1, 4)]
[(register, 0x30, 8) MULTIEQUAL (register, 0x30, 8) , (register, 0x0, 8) , (register, 0x30, 8)]
[(unique, 0x100001f3, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) CAST (unique, 0x100002cb, 8), (unique, 0x100002cb, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (register, 0x10, 8) , (const, 0x5c, 8) , (const, 0x8, 8), (register, 0x10, 8) COPY (unique, 0x1000020b, 8), (unique, 0x1000020b, 8) MULTIEQUAL (unique, 0x100001f3, 8) , (unique, 0x100001fb, 8) , (unique, 0x10000203, 8)]
[ ---  CBRANCH (ram, 0x491eb0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) CAST (unique, 0x100002cb, 8), (unique, 0x100002cb, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (register, 0x10, 8) , (const, 0x5c, 8) , (const, 0x8, 8), (register, 0x10, 8) COPY (unique, 0x1000020b, 8), (unique, 0x1000020b, 8) MULTIEQUAL (unique, 0x100001f3, 8) , (unique, 0x100001fb, 8) , (unique, 0x10000203, 8)]
[(register, 0x8, 8) PTRADD (register, 0x10, 8) , (const, 0x73, 8) , (const, 0x8, 8)]
[(stack, 0xffffffffffffff48, 8) COPY (const, 0x0, 8)]
[(unique, 0x10000233, 8) COPY (register, 0x30, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x194, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4c6180, 8) INDIRECT (ram, 0x4c6180, 8) , (const, 0x194, 4), (ram, 0x4c6180, 8) MULTIEQUAL (ram, 0x4c6180, 8) , (ram, 0x4c6180, 8)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x194, 4), (stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x194, 4), (stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0x194, 4), (stack, 0xffffffffffffff70, 4) MULTIEQUAL (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4)]
[(stack, 0xffffffffffffff74, 4) INDIRECT (stack, 0xffffffffffffff74, 4) , (const, 0x194, 4), (stack, 0xffffffffffffff74, 4) MULTIEQUAL (stack, 0xffffffffffffff74, 4) , (stack, 0xffffffffffffff74, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x194, 4), (stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x194, 4), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x194, 4), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x194, 4), (stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffc0, 4) INDIRECT (stack, 0xffffffffffffffc0, 4) , (const, 0x194, 4), (stack, 0xffffffffffffffc0, 4) MULTIEQUAL (stack, 0xffffffffffffffc0, 4) , (stack, 0xffffffffffffffc0, 4)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0x194, 4), (stack, 0xffffffffffffffd0, 8) MULTIEQUAL (stack, 0xffffffffffffffd0, 8) , (stack, 0xffffffffffffffd0, 8)]
[(stack, 0xffffffffffffffe0, 8) INDIRECT (stack, 0xffffffffffffffe0, 8) , (const, 0x194, 4), (stack, 0xffffffffffffffe0, 8) MULTIEQUAL (stack, 0xffffffffffffffe0, 8) , (stack, 0xffffffffffffffe0, 8)]
[(unique, 0x100001e3, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x100002d3, 8), (unique, 0x100002d3, 8) CALL (ram, 0x481760, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x10, 8) , (register, 0x8, 8) , (unique, 0x3800, 8) , (const, 0x0, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff50, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff68, 8), (register, 0x10, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff60, 8), (register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (unique, 0xbd80, 8), (register, 0x30, 8) MULTIEQUAL (register, 0x30, 8) , (register, 0x30, 8), (stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8), (stack, 0xffffffffffffff50, 8) MULTIEQUAL (unique, 0x10000233, 8) , (stack, 0xffffffffffffff50, 8)]
[ ---  BRANCH (ram, 0x491e19, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xbb, 4)]
[(ram, 0x4c6180, 8) INDIRECT (ram, 0x4c6180, 8) , (const, 0xbb, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0xbb, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (unique, 0x1000027b, 8) , (const, 0xbb, 4)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (register, 0x0, 4) , (const, 0xbb, 4)]
[(stack, 0xffffffffffffff74, 4) INDIRECT (stack, 0xffffffffffffff74, 4) , (const, 0xbb, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0xbb, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0xbb, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0xbb, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0xbb, 4)]
[(stack, 0xffffffffffffffc0, 4) INDIRECT (stack, 0xffffffffffffffc0, 4) , (const, 0xbb, 4)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0xbb, 4)]
[(stack, 0xffffffffffffffe0, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0xbb, 4)]
[(unique, 0x100001db, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x100002db, 8), (unique, 0x100002db, 8) CALL (ram, 0x481760, 8) , (register, 0x30, 8) , (register, 0x38, 8) , (unique, 0x3800, 8) , (unique, 0x3200, 8) , (unique, 0x3800, 8) , (const, 0x0, 8) , (const, 0x0, 8) , (const, 0x0, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff68, 8), (unique, 0x3200, 8) INT_ADD (register, 0x38, 8) , (const, 0x398, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffffe0, 8) MULTIEQUAL (stack, 0xffffffffffffffe0, 8) , (stack, 0xffffffffffffffe0, 8) , (stack, 0xffffffffffffffe0, 8)]
[(stack, 0xffffffffffffffd0, 8) MULTIEQUAL (stack, 0xffffffffffffffd0, 8) , (stack, 0xffffffffffffffd0, 8) , (stack, 0xffffffffffffffd0, 8)]
[(stack, 0xffffffffffffffc0, 4) MULTIEQUAL (stack, 0xffffffffffffffc0, 4) , (stack, 0xffffffffffffffc0, 4) , (stack, 0xffffffffffffffc0, 4)]
[(stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff74, 4) MULTIEQUAL (stack, 0xffffffffffffff74, 4) , (stack, 0xffffffffffffff74, 4) , (stack, 0xffffffffffffff74, 4)]
[(stack, 0xffffffffffffff70, 4) MULTIEQUAL (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(ram, 0x4c6180, 8) MULTIEQUAL (ram, 0x4c6180, 8) , (ram, 0x4c6180, 8) , (ram, 0x4c6180, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x8, 8) MULTIEQUAL (unique, 0x100001db, 8) , (unique, 0x100001e3, 8) , (unique, 0x100001eb, 8)]
[ ---  CBRANCH (ram, 0x491e48, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffff60, 8) , (const, 0x0, 8), (stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[ ---  CBRANCH (ram, 0x491e80, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc00, 2) , (const, 0xfff1, 2), (unique, 0xbc00, 2) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100002e3, 8), (unique, 0x100002e3, 8) INT_ADD (stack, 0xffffffffffffff60, 8) , (const, 0x6, 8)]
[ ---  CBRANCH (ram, 0x491e80, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x8, 8) , (const, 0x0, 8)]
[(register, 0x0, 8) COPY (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x491e34, 1)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x8, 8)]
[(register, 0x0, 8) CAST (unique, 0x100002f3, 8), (unique, 0x100002f3, 8) INT_ADD (register, 0x0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100002eb, 8), (unique, 0x100002eb, 8) INT_ADD (stack, 0xffffffffffffff60, 8) , (const, 0x8, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0xbd80, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x491f60, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x10, 1) , (const, 0xa, 1), (register, 0x10, 1) INT_AND (unique, 0xbb00, 1) , (const, 0xf, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100002fb, 8), (unique, 0x100002fb, 8) INT_ADD (stack, 0xffffffffffffff60, 8) , (const, 0x4, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x13e, 4)]
[(ram, 0x4c6180, 8) INDIRECT (ram, 0x4c6180, 8) , (const, 0x13e, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x13e, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x13e, 4)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0x13e, 4)]
[(stack, 0xffffffffffffff74, 4) INDIRECT (stack, 0xffffffffffffff74, 4) , (const, 0x13e, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x13e, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x13e, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x13e, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x13e, 4)]
[(stack, 0xffffffffffffffc0, 4) INDIRECT (stack, 0xffffffffffffffc0, 4) , (const, 0x13e, 4)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0x13e, 4)]
[(stack, 0xffffffffffffffe0, 8) INDIRECT (stack, 0xffffffffffffffe0, 8) , (const, 0x13e, 4)]
[ ---  CALLIND (register, 0x0, 8)]
[ ---  BRANCH (ram, 0x491e48, 1)]
[(stack, 0xffffffffffffffd0, 8) MULTIEQUAL (stack, 0xffffffffffffffd0, 8) , (stack, 0xffffffffffffffd0, 8) , (stack, 0xffffffffffffffd0, 8)]
[(stack, 0xffffffffffffffc0, 4) MULTIEQUAL (stack, 0xffffffffffffffc0, 4) , (stack, 0xffffffffffffffc0, 4) , (stack, 0xffffffffffffffc0, 4)]
[(stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff74, 4) MULTIEQUAL (stack, 0xffffffffffffff74, 4) , (stack, 0xffffffffffffff74, 4) , (stack, 0xffffffffffffff74, 4)]
[(stack, 0xffffffffffffff70, 4) MULTIEQUAL (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(ram, 0x4c6180, 8) MULTIEQUAL (ram, 0x4c6180, 8) , (ram, 0x4c6180, 8) , (ram, 0x4c6180, 8)]
[ ---  CBRANCH (ram, 0x492085, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffffe0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10000303, 8), (unique, 0x10000303, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8), (stack, 0xffffffffffffffe0, 8) MULTIEQUAL (stack, 0xffffffffffffffe0, 8) , (stack, 0xffffffffffffffe0, 8) , (stack, 0xffffffffffffffe0, 8)]
[(ram, 0x4c6180, 8) COPY (ram, 0x4c6180, 8)]
[ ---  RETURN (const, 0x0, 8)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x139, 4), (stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x139, 4), (stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff70, 4) INDIRECT (stack, 0xffffffffffffff70, 4) , (const, 0x139, 4), (stack, 0xffffffffffffff70, 4) MULTIEQUAL (stack, 0xffffffffffffff70, 4) , (stack, 0xffffffffffffff70, 4)]
[(stack, 0xffffffffffffff74, 4) INDIRECT (stack, 0xffffffffffffff74, 4) , (const, 0x139, 4), (stack, 0xffffffffffffff74, 4) MULTIEQUAL (stack, 0xffffffffffffff74, 4) , (stack, 0xffffffffffffff74, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x139, 4), (stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x139, 4), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x139, 4), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x139, 4), (stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffc0, 4) INDIRECT (stack, 0xffffffffffffffc0, 4) , (const, 0x139, 4), (stack, 0xffffffffffffffc0, 4) MULTIEQUAL (stack, 0xffffffffffffffc0, 4) , (stack, 0xffffffffffffffc0, 4)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0x139, 4), (stack, 0xffffffffffffffd0, 8) MULTIEQUAL (stack, 0xffffffffffffffd0, 8) , (stack, 0xffffffffffffffd0, 8)]
[(stack, 0xffffffffffffffe0, 8) INDIRECT (stack, 0xffffffffffffffe0, 8) , (const, 0x139, 4), (stack, 0xffffffffffffffe0, 8) MULTIEQUAL (stack, 0xffffffffffffffe0, 8) , (stack, 0xffffffffffffffe0, 8)]
[ ---  CALL (ram, 0x458dd0, 8)]
[(ram, 0x4c6180, 8) COPY (ram, 0x4c6180, 8), (ram, 0x4c6180, 8) INDIRECT (ram, 0x4c6180, 8) , (const, 0x139, 4), (ram, 0x4c6180, 8) MULTIEQUAL (ram, 0x4c6180, 8) , (ram, 0x4c6180, 8)]
[ ---  RETURN (const, 0x1, 4)]
