[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffb68, 8)]
[(stack, 0xffffffffffffffc0, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x100005cf, 8), (unique, 0x100005cf, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8)]
[(unique, 0x100005bf, 4) COPY (ram, 0x4ef904, 4)]
[ ---  CBRANCH (ram, 0x23de3c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4ef908, 4) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x23dd1b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4f08f8, 4) , (const, 0x0, 4)]
[ ---  CBRANCH (const, 0x4, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4ef904, 4) , (const, 0x0, 4)]
[(ram, 0x4ef904, 4) COPY (const, 0x1, 4)]
[ ---  CALLOTHER (const, 0x11, 4)]
[ ---  CBRANCH (const, 0x4, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4ef904, 4) , (const, 0x0, 4)]
[(ram, 0x4ef904, 4) COPY (const, 0x1, 4)]
[ ---  BRANCH (ram, 0x23dd3e, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x2a8, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x2a8, 4)]
[(ram, 0x4ec9b8, 8) INDIRECT (ram, 0x4ec9b8, 8) , (const, 0x2a8, 4)]
[(ram, 0x4ef904, 4) INDIRECT (ram, 0x4ef904, 4) , (const, 0x2a8, 4)]
[(ram, 0x4ef908, 4) INDIRECT (ram, 0x4ef908, 4) , (const, 0x2a8, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x2a8, 4)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x2a8, 4)]
[(stack, 0xfffffffffffffb70, 8) INDIRECT (stack, 0xfffffffffffffb70, 8) , (const, 0x2a8, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x2a8, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x2a8, 4)]
[(stack, 0xfffffffffffffb80, 8) INDIRECT (stack, 0xfffffffffffffb80, 8) , (const, 0x2a8, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x2a8, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x2a8, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2a8, 4)]
[ ---  CALL (ram, 0x230690, 8) , (unique, 0x1000027d, 8), (unique, 0x1000027d, 8) PTRSUB (const, 0x0, 8) , (const, 0x4ef904, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb80, 8) MULTIEQUAL (stack, 0xfffffffffffffb80, 8) , (stack, 0xfffffffffffffb80, 8) , (stack, 0xfffffffffffffb80, 8)]
[(stack, 0xfffffffffffffb7c, 4) MULTIEQUAL (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb70, 8) MULTIEQUAL (stack, 0xfffffffffffffb70, 8) , (stack, 0xfffffffffffffb70, 8) , (stack, 0xfffffffffffffb70, 8)]
[(stack, 0xfffffffffffffb60, 8) MULTIEQUAL (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8)]
[(ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(ram, 0x4ef904, 4) MULTIEQUAL (ram, 0x4ef904, 4) , (ram, 0x4ef904, 4) , (ram, 0x4ef904, 4)]
[(ram, 0x4ec9b8, 8) MULTIEQUAL (ram, 0x4ec9b8, 8) , (ram, 0x4ec9b8, 8) , (ram, 0x4ec9b8, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffb68, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffb68, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffb68, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffb68, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffb68, 8)]
[ ---  CBRANCH (ram, 0x23de06, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4ef908, 4) , (const, 0x0, 4), (ram, 0x4ef908, 4) MULTIEQUAL (ram, 0x4ef908, 4) , (ram, 0x4ef908, 4) , (ram, 0x4ef908, 4)]
[(unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffbb0, 8) COPY (const, 0x400, 8)]
[(ram, 0x4ef908, 4) COPY (const, 0x1, 4)]
[(unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffb78, 8)]
[(unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffb80, 8)]
[(unique, 0x3100, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffbb8, 8)]
[(unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffb88, 8)]
[ ---  BRANCH (ram, 0x23ddae, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x7e, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x7e, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4ec9b8, 8) INDIRECT (ram, 0x4ec9b8, 8) , (const, 0x7e, 4), (ram, 0x4ec9b8, 8) MULTIEQUAL (ram, 0x4ec9b8, 8) , (ram, 0x4ec9b8, 8)]
[(ram, 0x4ef904, 4) INDIRECT (ram, 0x4ef904, 4) , (const, 0x7e, 4), (ram, 0x4ef904, 4) MULTIEQUAL (ram, 0x4ef904, 4) , (ram, 0x4ef904, 4)]
[(ram, 0x4ef908, 4) INDIRECT (ram, 0x4ef908, 4) , (const, 0x7e, 4), (ram, 0x4ef908, 4) MULTIEQUAL (ram, 0x4ef908, 4) , (ram, 0x4ef908, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x7e, 4), (ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x7e, 4), (stack, 0xfffffffffffffb60, 8) COPY (const, 0x23ddbf, 8)]
[(stack, 0xfffffffffffffb70, 8) INDIRECT (stack, 0xfffffffffffffb70, 8) , (const, 0x7e, 4), (stack, 0xfffffffffffffb70, 8) MULTIEQUAL (stack, 0xfffffffffffffb70, 8) , (stack, 0xfffffffffffffb70, 8)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x7e, 4), (stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x7e, 4), (stack, 0xfffffffffffffb7c, 4) MULTIEQUAL (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4)]
[(stack, 0xfffffffffffffb80, 8) INDIRECT (stack, 0xfffffffffffffb80, 8) , (const, 0x7e, 4), (stack, 0xfffffffffffffb80, 8) MULTIEQUAL (stack, 0xfffffffffffffb80, 8) , (stack, 0xfffffffffffffb80, 8)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x7e, 4), (stack, 0xfffffffffffffba8, 8) MULTIEQUAL (unique, 0x3100, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x7e, 4), (stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x7e, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CBRANCH (ram, 0x23de68, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x2361e0, 8) , (unique, 0x1000026d, 8) , (unique, 0x3200, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffbb0, 8) , (unique, 0x3200, 8) , (unique, 0x3200, 8), (unique, 0x1000026d, 8) COPY (const, 0x2b6d10, 8), (stack, 0xfffffffffffffba8, 8) MULTIEQUAL (unique, 0x3100, 8) , (stack, 0xfffffffffffffba8, 8), (stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[ ---  CBRANCH (ram, 0x23de68, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xfffffffffffffb78, 4) , (const, 0xffffffff, 4)]
[ ---  CBRANCH (ram, 0x23de68, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd00, 4) , (const, 0x22, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100005d7, 8), (unique, 0x100005d7, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (ram, 0x4eae68, 8) , (register, 0x110, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x23dea0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xfffffffffffffb80, 8) , (const, 0x0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x144, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x144, 4)]
[(ram, 0x4ec9b8, 8) INDIRECT (ram, 0x4ec9b8, 8) , (const, 0x144, 4)]
[(ram, 0x4ef904, 4) INDIRECT (ram, 0x4ef904, 4) , (const, 0x144, 4)]
[(ram, 0x4ef908, 4) INDIRECT (ram, 0x4ef908, 4) , (const, 0x144, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x144, 4)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x144, 4), (stack, 0xfffffffffffffb60, 8) COPY (const, 0x23de81, 8)]
[(stack, 0xfffffffffffffb70, 8) INDIRECT (stack, 0xfffffffffffffb70, 8) , (const, 0x144, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x144, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x144, 4)]
[(stack, 0xfffffffffffffb80, 8) INDIRECT (stack, 0xfffffffffffffb80, 8) , (const, 0x144, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x144, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x144, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x144, 4)]
[(unique, 0x1000058f, 8) COPY (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x23dea0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x121110, 8) , (unique, 0xbd80, 8) , (const, 0x2e, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000315, 8), (unique, 0x10000315, 8) PTRSUB (stack, 0xfffffffffffffb80, 8) , (const, 0x0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x15e, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x15e, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4ec9b8, 8) INDIRECT (ram, 0x4ec9b8, 8) , (const, 0x15e, 4), (ram, 0x4ec9b8, 8) MULTIEQUAL (ram, 0x4ec9b8, 8) , (ram, 0x4ec9b8, 8) , (ram, 0x4ec9b8, 8)]
[(ram, 0x4ef904, 4) INDIRECT (ram, 0x4ef904, 4) , (const, 0x15e, 4), (ram, 0x4ef904, 4) MULTIEQUAL (ram, 0x4ef904, 4) , (ram, 0x4ef904, 4) , (ram, 0x4ef904, 4)]
[(ram, 0x4ef908, 4) INDIRECT (ram, 0x4ef908, 4) , (const, 0x15e, 4), (ram, 0x4ef908, 4) MULTIEQUAL (ram, 0x4ef908, 4) , (ram, 0x4ef908, 4) , (ram, 0x4ef908, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x15e, 4), (ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x15e, 4), (stack, 0xfffffffffffffb60, 8) COPY (const, 0x23deb3, 8)]
[(stack, 0xfffffffffffffb70, 8) INDIRECT (stack, 0xfffffffffffffb70, 8) , (const, 0x15e, 4), (stack, 0xfffffffffffffb70, 8) MULTIEQUAL (stack, 0xfffffffffffffb70, 8) , (stack, 0xfffffffffffffb70, 8) , (stack, 0xfffffffffffffb70, 8)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x15e, 4), (stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x15e, 4), (stack, 0xfffffffffffffb7c, 4) MULTIEQUAL (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4)]
[(stack, 0xfffffffffffffb80, 8) INDIRECT (stack, 0xfffffffffffffb80, 8) , (const, 0x15e, 4), (stack, 0xfffffffffffffb80, 8) MULTIEQUAL (stack, 0xfffffffffffffb80, 8) , (stack, 0xfffffffffffffb80, 8) , (stack, 0xfffffffffffffb80, 8)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x15e, 4), (stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x15e, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(unique, 0x10000537, 8) COPY (stack, 0xfffffffffffffba8, 8), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x15e, 4), (stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[ ---  CBRANCH (ram, 0x23ded0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x216e30, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffbb0, 8), (stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8), (stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x180, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x180, 4)]
[(ram, 0x4ec9b8, 8) INDIRECT (ram, 0x4ec9b8, 8) , (const, 0x180, 4)]
[(ram, 0x4ef904, 4) INDIRECT (ram, 0x4ef904, 4) , (const, 0x180, 4)]
[(ram, 0x4ef908, 4) INDIRECT (ram, 0x4ef908, 4) , (const, 0x180, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x180, 4)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x180, 4), (stack, 0xfffffffffffffb60, 8) COPY (const, 0x23dee4, 8)]
[(stack, 0xfffffffffffffb70, 8) INDIRECT (stack, 0xfffffffffffffb70, 8) , (const, 0x180, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x180, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x180, 4)]
[(stack, 0xfffffffffffffb80, 8) INDIRECT (stack, 0xfffffffffffffb80, 8) , (const, 0x180, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x180, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x180, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x180, 4)]
[(unique, 0x10000597, 8) COPY (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x23de86, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x121110, 8) , (stack, 0xfffffffffffffba8, 8) , (const, 0x2e, 4)]
[(register, 0x20, 8) PTRADD (unique, 0x10000325, 8) , (unique, 0x10000192, 8) , (const, 0x1, 8), (unique, 0x10000325, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffb68, 8), (unique, 0x10000192, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (register, 0x0, 8) , (const, 0xfffffffffffffff0, 8), (register, 0x0, 8) INT_ADD (register, 0x0, 8) , (const, 0x1f, 8), (register, 0x0, 8) CALL (ram, 0x121100, 8) , (unique, 0x10000537, 8)]
[(register, 0x20, 8) PTRADD (unique, 0x1000033d, 8) , (unique, 0x10000192, 8) , (const, 0x1, 8), (unique, 0x1000033d, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffb68, 8), (unique, 0x10000192, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (register, 0x0, 8) , (const, 0xfffffffffffffff0, 8), (register, 0x0, 8) INT_ADD (register, 0x0, 8) , (const, 0x1f, 8), (register, 0x0, 8) CALL (ram, 0x121100, 8) , (unique, 0x10000537, 8)]
[(register, 0x20, 8) PTRADD (unique, 0x10000355, 8) , (unique, 0x10000192, 8) , (const, 0x1, 8), (unique, 0x10000355, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffb68, 8), (unique, 0x10000192, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (register, 0x0, 8) , (const, 0xfffffffffffffff0, 8), (register, 0x0, 8) INT_ADD (register, 0x0, 8) , (const, 0x1f, 8), (register, 0x0, 8) CALL (ram, 0x121100, 8) , (unique, 0x10000537, 8)]
[(register, 0x20, 8) PTRADD (unique, 0x1000036d, 8) , (unique, 0x10000192, 8) , (const, 0x1, 8), (unique, 0x1000036d, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffb68, 8), (unique, 0x10000192, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (register, 0x0, 8) , (const, 0xfffffffffffffff0, 8), (register, 0x0, 8) INT_ADD (register, 0x0, 8) , (const, 0x1f, 8), (register, 0x0, 8) CALL (ram, 0x121100, 8) , (unique, 0x10000537, 8)]
[(register, 0x20, 8) PTRADD (unique, 0x10000385, 8) , (unique, 0x10000192, 8) , (const, 0x1, 8), (unique, 0x10000385, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffb68, 8), (unique, 0x10000192, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (register, 0x0, 8) , (const, 0xfffffffffffffff0, 8), (register, 0x0, 8) INT_ADD (register, 0x0, 8) , (const, 0x1f, 8), (register, 0x0, 8) CALL (ram, 0x121100, 8) , (unique, 0x10000537, 8)]
[(register, 0x20, 8) PTRADD (unique, 0x1000039d, 8) , (unique, 0x10000192, 8) , (const, 0x1, 8), (unique, 0x1000039d, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffb68, 8), (unique, 0x10000192, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (register, 0x0, 8) , (const, 0xfffffffffffffff0, 8), (register, 0x0, 8) INT_ADD (register, 0x0, 8) , (const, 0x1f, 8), (register, 0x0, 8) CALL (ram, 0x121100, 8) , (unique, 0x10000537, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100005ef, 8) , (const, 0x23df11, 8), (unique, 0x100005ef, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x1000043d, 8) , (unique, 0x10000435, 8) , (const, 0x1, 8), (unique, 0x1000043d, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffb68, 8), (unique, 0x10000435, 8) INT_ADD (unique, 0x10000192, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x10000192, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (register, 0x0, 8) , (const, 0xfffffffffffffff0, 8), (register, 0x0, 8) INT_ADD (register, 0x0, 8) , (const, 0x1f, 8), (register, 0x0, 8) CALL (ram, 0x121100, 8) , (unique, 0x10000537, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1bb, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x18f, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x1bb, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x18f, 4)]
[(ram, 0x4ec9b8, 8) INDIRECT (ram, 0x4ec9b8, 8) , (const, 0x1bb, 4), (ram, 0x4ec9b8, 8) INDIRECT (ram, 0x4ec9b8, 8) , (const, 0x18f, 4)]
[(ram, 0x4ef904, 4) INDIRECT (ram, 0x4ef904, 4) , (const, 0x1bb, 4), (ram, 0x4ef904, 4) INDIRECT (ram, 0x4ef904, 4) , (const, 0x18f, 4)]
[(ram, 0x4ef908, 4) INDIRECT (ram, 0x4ef908, 4) , (const, 0x1bb, 4), (ram, 0x4ef908, 4) INDIRECT (ram, 0x4ef908, 4) , (const, 0x18f, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x1bb, 4), (ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x18f, 4)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x1bb, 4), (stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x1ba, 4), (stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x18f, 4), (stack, 0xfffffffffffffb60, 8) COPY (const, 0x23def1, 8)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x1bb, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x1ba, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x18f, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x1bb, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x1ba, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x18f, 4)]
[(stack, 0xfffffffffffffb80, 8) INDIRECT (stack, 0xfffffffffffffb80, 8) , (const, 0x1bb, 4), (stack, 0xfffffffffffffb80, 8) INDIRECT (stack, 0xfffffffffffffb80, 8) , (const, 0x1ba, 4), (stack, 0xfffffffffffffb80, 8) INDIRECT (stack, 0xfffffffffffffb80, 8) , (const, 0x18f, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x1bb, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x1ba, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x18f, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x1bb, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x1ba, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x18f, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1bb, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1ba, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x18f, 4)]
[(stack, 0xfffffffffffffb70, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x100005f7, 8), (unique, 0x100005f7, 8) CALL (ram, 0x121160, 8) , (unique, 0x3800, 8) , (unique, 0x10000537, 8) , (unique, 0x3100, 8), (unique, 0x3800, 8) CAST (unique, 0x100005e7, 8), (unique, 0x100005e7, 8) INT_ADD (unique, 0x100005df, 8) , (unique, 0x10000192, 8), (unique, 0x100005df, 8) CAST (unique, 0x10000425, 8), (unique, 0x10000425, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffb70, 8), (unique, 0x10000192, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (register, 0x0, 8) , (const, 0xfffffffffffffff0, 8), (register, 0x0, 8) INT_ADD (register, 0x0, 8) , (const, 0x1f, 8), (unique, 0x3100, 8) INT_ADD (register, 0x0, 8) , (const, 0x1, 8), (register, 0x0, 8) CALL (ram, 0x121100, 8) , (unique, 0x10000537, 8)]
[(unique, 0x100005af, 8) COPY (unique, 0x10000537, 8)]
[ ---  BRANCH (ram, 0x23df2e, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100005ff, 8) , (const, 0x23df46, 8), (unique, 0x100005ff, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x10000455, 8) , (unique, 0x1000044d, 8) , (const, 0x1, 8), (unique, 0x10000455, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffb68, 8), (unique, 0x1000044d, 8) INT_ADD (unique, 0x10000192, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1ca, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x1ca, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4ec9b8, 8) INDIRECT (ram, 0x4ec9b8, 8) , (const, 0x1ca, 4), (ram, 0x4ec9b8, 8) MULTIEQUAL (ram, 0x4ec9b8, 8) , (ram, 0x4ec9b8, 8)]
[(ram, 0x4ef904, 4) INDIRECT (ram, 0x4ef904, 4) , (const, 0x1ca, 4), (ram, 0x4ef904, 4) MULTIEQUAL (ram, 0x4ef904, 4) , (ram, 0x4ef904, 4)]
[(ram, 0x4ef908, 4) INDIRECT (ram, 0x4ef908, 4) , (const, 0x1ca, 4), (ram, 0x4ef908, 4) MULTIEQUAL (ram, 0x4ef908, 4) , (ram, 0x4ef908, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x1ca, 4), (ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x1ca, 4), (stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x1c9, 4), (stack, 0xfffffffffffffb60, 8) MULTIEQUAL (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8)]
[(stack, 0xfffffffffffffb70, 8) INDIRECT (stack, 0xfffffffffffffb70, 8) , (const, 0x1ca, 4), (stack, 0xfffffffffffffb70, 8) INDIRECT (stack, 0xfffffffffffffb70, 8) , (const, 0x1c9, 4), (stack, 0xfffffffffffffb70, 8) MULTIEQUAL (stack, 0xfffffffffffffb70, 8) , (stack, 0xfffffffffffffb70, 8)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x1ca, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x1c9, 4), (stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x1ca, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x1c9, 4), (stack, 0xfffffffffffffb7c, 4) MULTIEQUAL (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4)]
[(stack, 0xfffffffffffffb80, 8) INDIRECT (stack, 0xfffffffffffffb80, 8) , (const, 0x1ca, 4), (stack, 0xfffffffffffffb80, 8) INDIRECT (stack, 0xfffffffffffffb80, 8) , (const, 0x1c9, 4), (stack, 0xfffffffffffffb80, 8) MULTIEQUAL (stack, 0xfffffffffffffb80, 8) , (stack, 0xfffffffffffffb80, 8)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x1ca, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x1c9, 4), (stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x1ca, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x1c9, 4), (stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1ca, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1c9, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CBRANCH (ram, 0x23df71, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x2361e0, 8) , (unique, 0x10000527, 8) , (unique, 0x3200, 8) , (register, 0xb8, 8) , (unique, 0x10000547, 8) , (unique, 0x3200, 8) , (unique, 0x3200, 8), (unique, 0x10000527, 8) COPY (stack, 0xfffffffffffffb70, 8), (unique, 0x10000547, 8) COPY (stack, 0xfffffffffffffbb0, 8), (register, 0xb8, 8) MULTIEQUAL (unique, 0x100005af, 8) , (unique, 0x100005b7, 8), (stack, 0xfffffffffffffb70, 8) MULTIEQUAL (stack, 0xfffffffffffffb70, 8) , (stack, 0xfffffffffffffb70, 8), (stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[ ---  CBRANCH (ram, 0x23df71, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xfffffffffffffb78, 4) , (const, 0xffffffff, 4)]
[ ---  CBRANCH (ram, 0x23df71, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd00, 4) , (const, 0x22, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000607, 8), (unique, 0x10000607, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (ram, 0x4eae68, 8) , (register, 0x110, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x23df93, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xfffffffffffffb80, 8) , (const, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000060f, 8) , (const, 0x23df8a, 8), (unique, 0x1000060f, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x10000485, 8) , (unique, 0x1000047d, 8) , (const, 0x1, 8), (unique, 0x10000485, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffb68, 8), (unique, 0x1000047d, 8) INT_ADD (unique, 0x10000192, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x21c, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x21c, 4)]
[(ram, 0x4ec9b8, 8) INDIRECT (ram, 0x4ec9b8, 8) , (const, 0x21c, 4)]
[(ram, 0x4ef904, 4) INDIRECT (ram, 0x4ef904, 4) , (const, 0x21c, 4)]
[(ram, 0x4ef908, 4) INDIRECT (ram, 0x4ef908, 4) , (const, 0x21c, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x21c, 4)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x21c, 4), (stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x21b, 4)]
[(stack, 0xfffffffffffffb70, 8) INDIRECT (stack, 0xfffffffffffffb70, 8) , (const, 0x21c, 4), (stack, 0xfffffffffffffb70, 8) INDIRECT (stack, 0xfffffffffffffb70, 8) , (const, 0x21b, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x21c, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x21b, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x21c, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x21b, 4)]
[(stack, 0xfffffffffffffb80, 8) INDIRECT (stack, 0xfffffffffffffb80, 8) , (const, 0x21c, 4), (stack, 0xfffffffffffffb80, 8) INDIRECT (stack, 0xfffffffffffffb80, 8) , (const, 0x21b, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x21c, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x21b, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x21c, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x21b, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x21c, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x21b, 4)]
[(unique, 0x1000059f, 8) COPY (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x23de86, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x121110, 8) , (unique, 0xbd80, 8) , (const, 0x2e, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x100003cd, 8), (unique, 0x100003cd, 8) PTRSUB (stack, 0xfffffffffffffb80, 8) , (const, 0x0, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb80, 8) MULTIEQUAL (stack, 0xfffffffffffffb80, 8) , (stack, 0xfffffffffffffb80, 8)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb70, 8) MULTIEQUAL (stack, 0xfffffffffffffb70, 8) , (stack, 0xfffffffffffffb70, 8)]
[(stack, 0xfffffffffffffb60, 8) MULTIEQUAL (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8)]
[(ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(ram, 0x4ef908, 4) MULTIEQUAL (ram, 0x4ef908, 4) , (ram, 0x4ef908, 4)]
[(ram, 0x4ef904, 4) MULTIEQUAL (ram, 0x4ef904, 4) , (ram, 0x4ef904, 4)]
[(ram, 0x4ec9b8, 8) MULTIEQUAL (ram, 0x4ec9b8, 8) , (ram, 0x4ec9b8, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffb7c, 8)]
[(stack, 0xfffffffffffffb7c, 4) COPY (const, 0x100007f, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000617, 8) , (unique, 0x3200, 8), (unique, 0x10000617, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x1000049d, 8) , (unique, 0x10000495, 8) , (const, 0x1, 8), (unique, 0x1000049d, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffb68, 8), (unique, 0x10000495, 8) INT_ADD (unique, 0x10000192, 8) , (const, 0xfffffffffffffff8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (unique, 0x3200, 8), (register, 0x20, 8) CAST (unique, 0x10000627, 8), (unique, 0x10000627, 8) INT_ADD (unique, 0x1000061f, 8) , (unique, 0x10000192, 8), (unique, 0x1000061f, 8) CAST (unique, 0x1000022a, 8), (unique, 0x1000022a, 8) PTRADD (unique, 0x10000509, 8) , (const, 0x1, 8) , (const, 0x8, 8), (unique, 0x10000509, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffb50, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x23dfcf, 8), (register, 0x20, 8) CAST (unique, 0x10000647, 8), (unique, 0x10000647, 8) INT_ADD (unique, 0x1000063f, 8) , (unique, 0x10000192, 8), (unique, 0x1000063f, 8) CAST (unique, 0x10000232, 8), (unique, 0x10000232, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffb50, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x23f, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x23f, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4ec9b8, 8) INDIRECT (ram, 0x4ec9b8, 8) , (const, 0x23f, 4), (ram, 0x4ec9b8, 8) MULTIEQUAL (ram, 0x4ec9b8, 8) , (ram, 0x4ec9b8, 8)]
[(ram, 0x4ef904, 4) INDIRECT (ram, 0x4ef904, 4) , (const, 0x23f, 4), (ram, 0x4ef904, 4) MULTIEQUAL (ram, 0x4ef904, 4) , (ram, 0x4ef904, 4)]
[(ram, 0x4ef908, 4) INDIRECT (ram, 0x4ef908, 4) , (const, 0x23f, 4), (ram, 0x4ef908, 4) MULTIEQUAL (ram, 0x4ef908, 4) , (ram, 0x4ef908, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x23f, 4), (ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x23f, 4), (stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x23e, 4), (stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x239, 4), (stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x236, 4), (stack, 0xfffffffffffffb60, 8) MULTIEQUAL (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8)]
[(stack, 0xfffffffffffffb70, 8) INDIRECT (stack, 0xfffffffffffffb70, 8) , (const, 0x23f, 4), (stack, 0xfffffffffffffb70, 8) INDIRECT (stack, 0xfffffffffffffb70, 8) , (const, 0x23e, 4), (stack, 0xfffffffffffffb70, 8) INDIRECT (stack, 0xfffffffffffffb70, 8) , (const, 0x239, 4), (stack, 0xfffffffffffffb70, 8) INDIRECT (stack, 0xfffffffffffffb70, 8) , (const, 0x236, 4), (stack, 0xfffffffffffffb70, 8) MULTIEQUAL (stack, 0xfffffffffffffb70, 8) , (stack, 0xfffffffffffffb70, 8)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x23f, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x23e, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x239, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x236, 4), (stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x23f, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x23e, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x239, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x236, 4), (stack, 0xfffffffffffffb7c, 4) MULTIEQUAL (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4)]
[(stack, 0xfffffffffffffb80, 8) INDIRECT (stack, 0xfffffffffffffb80, 8) , (const, 0x23f, 4), (stack, 0xfffffffffffffb80, 8) INDIRECT (stack, 0xfffffffffffffb80, 8) , (const, 0x23e, 4), (stack, 0xfffffffffffffb80, 8) INDIRECT (stack, 0xfffffffffffffb80, 8) , (const, 0x239, 4), (stack, 0xfffffffffffffb80, 8) INDIRECT (stack, 0xfffffffffffffb80, 8) , (const, 0x236, 4), (stack, 0xfffffffffffffb80, 8) MULTIEQUAL (stack, 0xfffffffffffffb80, 8) , (stack, 0xfffffffffffffb80, 8)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x23f, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x23e, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x239, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x236, 4), (stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x23f, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x23e, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x239, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x236, 4), (stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x23f, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x23e, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x239, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x236, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CBRANCH (ram, 0x23dffc, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x2352d0, 8) , (unique, 0x3200, 8) , (const, 0x4, 4) , (const, 0x2, 4) , (unique, 0x3200, 8) , (unique, 0x1000053f, 8) , (unique, 0x1000054f, 8) , (unique, 0x10000059, 8) , (unique, 0x10000069, 8), (unique, 0x10000069, 8) LOAD (const, 0x1b1, 4) , (unique, 0x1000064f, 8), (unique, 0x1000064f, 8) CAST (unique, 0x10000061, 8), (unique, 0x10000061, 8) PTRADD (unique, 0x100004b5, 8) , (unique, 0x100004ad, 8) , (const, 0x1, 8), (unique, 0x100004b5, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffb68, 8), (unique, 0x100004ad, 8) INT_ADD (unique, 0x10000192, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x10000059, 8) LOAD (const, 0x1b1, 4) , (register, 0x20, 8), (register, 0x20, 8) CAST (unique, 0x10000637, 8), (unique, 0x10000637, 8) INT_ADD (unique, 0x1000062f, 8) , (unique, 0x10000192, 8), (unique, 0x1000062f, 8) CAST (unique, 0x1000022a, 8), (unique, 0x1000022a, 8) PTRADD (unique, 0x10000509, 8) , (const, 0x1, 8) , (const, 0x8, 8), (unique, 0x10000509, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffb50, 8), (unique, 0x1000053f, 8) COPY (stack, 0xfffffffffffffba8, 8), (unique, 0x1000054f, 8) COPY (stack, 0xfffffffffffffbb0, 8), (stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8), (stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[ ---  CBRANCH (ram, 0x23dffc, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xfffffffffffffb78, 4) , (const, 0xffffffff, 4)]
[ ---  CBRANCH (ram, 0x23dffc, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd00, 4) , (const, 0x22, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000657, 8), (unique, 0x10000657, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (ram, 0x4eae68, 8) , (register, 0x110, 8) , (const, 0x1, 8)]
[(unique, 0x10000567, 8) COPY (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x23ddf1, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xfffffffffffffb80, 8) , (const, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000065f, 8) , (const, 0x23e019, 8), (unique, 0x1000065f, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x100004e5, 8) , (unique, 0x100004dd, 8) , (const, 0x1, 8), (unique, 0x100004e5, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffb68, 8), (unique, 0x100004dd, 8) INT_ADD (unique, 0x10000192, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x28f, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x28f, 4)]
[(ram, 0x4ec9b8, 8) INDIRECT (ram, 0x4ec9b8, 8) , (const, 0x28f, 4)]
[(ram, 0x4ef904, 4) INDIRECT (ram, 0x4ef904, 4) , (const, 0x28f, 4)]
[(ram, 0x4ef908, 4) INDIRECT (ram, 0x4ef908, 4) , (const, 0x28f, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x28f, 4)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x28f, 4), (stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x28e, 4)]
[(stack, 0xfffffffffffffb70, 8) INDIRECT (stack, 0xfffffffffffffb70, 8) , (const, 0x28f, 4), (stack, 0xfffffffffffffb70, 8) INDIRECT (stack, 0xfffffffffffffb70, 8) , (const, 0x28e, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x28f, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x28e, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x28f, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x28e, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x28f, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x28e, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x28f, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x28e, 4)]
[(unique, 0x1000056f, 8) COPY (register, 0x20, 8)]
[(unique, 0x100005a7, 8) COPY (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x23de86, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x121110, 8) , (unique, 0xbd80, 8) , (const, 0x2e, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x1000040d, 8), (unique, 0x1000040d, 8) PTRSUB (stack, 0xfffffffffffffb80, 8) , (const, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000667, 8) , (const, 0x23de8f, 8), (unique, 0x10000667, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8), (register, 0x20, 8) MULTIEQUAL (unique, 0x1000058f, 8) , (unique, 0x10000597, 8) , (unique, 0x1000059f, 8) , (unique, 0x100005a7, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x153, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x153, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4ec9b8, 8) INDIRECT (ram, 0x4ec9b8, 8) , (const, 0x153, 4), (ram, 0x4ec9b8, 8) MULTIEQUAL (ram, 0x4ec9b8, 8) , (ram, 0x4ec9b8, 8) , (ram, 0x4ec9b8, 8) , (ram, 0x4ec9b8, 8)]
[(ram, 0x4ef904, 4) INDIRECT (ram, 0x4ef904, 4) , (const, 0x153, 4), (ram, 0x4ef904, 4) MULTIEQUAL (ram, 0x4ef904, 4) , (ram, 0x4ef904, 4) , (ram, 0x4ef904, 4) , (ram, 0x4ef904, 4)]
[(ram, 0x4ef908, 4) INDIRECT (ram, 0x4ef908, 4) , (const, 0x153, 4), (ram, 0x4ef908, 4) MULTIEQUAL (ram, 0x4ef908, 4) , (ram, 0x4ef908, 4) , (ram, 0x4ef908, 4) , (ram, 0x4ef908, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x153, 4), (ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x153, 4), (stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x152, 4), (stack, 0xfffffffffffffb60, 8) MULTIEQUAL (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8)]
[(stack, 0xfffffffffffffb70, 8) INDIRECT (stack, 0xfffffffffffffb70, 8) , (const, 0x153, 4), (stack, 0xfffffffffffffb70, 8) INDIRECT (stack, 0xfffffffffffffb70, 8) , (const, 0x152, 4), (stack, 0xfffffffffffffb70, 8) MULTIEQUAL (stack, 0xfffffffffffffb70, 8) , (stack, 0xfffffffffffffb70, 8) , (stack, 0xfffffffffffffb70, 8) , (stack, 0xfffffffffffffb70, 8)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x153, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x152, 4), (stack, 0xfffffffffffffb7c, 4) MULTIEQUAL (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x153, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x152, 4), (stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x153, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x152, 4), (stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x153, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x152, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(register, 0x0, 8) CALL (ram, 0x19d9a0, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x1, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8) , (register, 0x0, 8) , (register, 0x0, 8)]
[(unique, 0x1000055f, 8) COPY (register, 0x20, 8), (register, 0x20, 8) MULTIEQUAL (unique, 0x1000058f, 8) , (unique, 0x10000597, 8) , (unique, 0x1000059f, 8) , (unique, 0x100005a7, 8)]
[ ---  BRANCH (ram, 0x23ddf1, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000066f, 8) , (const, 0x23dff3, 8), (unique, 0x1000066f, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x100004cd, 8) , (unique, 0x100004c5, 8) , (const, 0x1, 8), (unique, 0x100004cd, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffb68, 8), (unique, 0x100004c5, 8) INT_ADD (unique, 0x10000192, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x270, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x270, 4)]
[(ram, 0x4ec9b8, 8) INDIRECT (ram, 0x4ec9b8, 8) , (const, 0x270, 4)]
[(ram, 0x4ef904, 4) INDIRECT (ram, 0x4ef904, 4) , (const, 0x270, 4)]
[(ram, 0x4ef908, 4) INDIRECT (ram, 0x4ef908, 4) , (const, 0x270, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x270, 4)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x270, 4), (stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x26f, 4)]
[(stack, 0xfffffffffffffb70, 8) INDIRECT (stack, 0xfffffffffffffb70, 8) , (const, 0x270, 4), (stack, 0xfffffffffffffb70, 8) INDIRECT (stack, 0xfffffffffffffb70, 8) , (const, 0x26f, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x270, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x26f, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x270, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x26f, 4)]
[(stack, 0xfffffffffffffb80, 8) INDIRECT (stack, 0xfffffffffffffb80, 8) , (const, 0x270, 4), (stack, 0xfffffffffffffb80, 8) INDIRECT (stack, 0xfffffffffffffb80, 8) , (const, 0x26f, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x270, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x26f, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x270, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x26f, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x270, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x26f, 4)]
[(unique, 0x10000577, 8) COPY (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x23dfa8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 1) , (const, 0x0, 1), (register, 0x0, 1) CALL (ram, 0x19d0c0, 8) , (unique, 0x3200, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000677, 8) , (const, 0x23df68, 8), (unique, 0x10000677, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x1000046d, 8) , (unique, 0x10000465, 8) , (const, 0x1, 8), (unique, 0x1000046d, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffb68, 8), (unique, 0x10000465, 8) INT_ADD (unique, 0x10000192, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1f7, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x1f7, 4)]
[(ram, 0x4ec9b8, 8) INDIRECT (ram, 0x4ec9b8, 8) , (const, 0x1f7, 4)]
[(ram, 0x4ef904, 4) INDIRECT (ram, 0x4ef904, 4) , (const, 0x1f7, 4)]
[(ram, 0x4ef908, 4) INDIRECT (ram, 0x4ef908, 4) , (const, 0x1f7, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x1f7, 4)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x1f7, 4), (stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x1f6, 4)]
[(stack, 0xfffffffffffffb70, 8) INDIRECT (stack, 0xfffffffffffffb70, 8) , (const, 0x1f7, 4), (stack, 0xfffffffffffffb70, 8) INDIRECT (stack, 0xfffffffffffffb70, 8) , (const, 0x1f6, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x1f7, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x1f6, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x1f7, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x1f6, 4)]
[(stack, 0xfffffffffffffb80, 8) INDIRECT (stack, 0xfffffffffffffb80, 8) , (const, 0x1f7, 4), (stack, 0xfffffffffffffb80, 8) INDIRECT (stack, 0xfffffffffffffb80, 8) , (const, 0x1f6, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x1f7, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x1f6, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1f7, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1f6, 4)]
[(unique, 0x1000057f, 8) COPY (register, 0x20, 8)]
[(unique, 0x100005b7, 8) COPY (stack, 0xfffffffffffffba8, 8), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x1f7, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x1f6, 4)]
[ ---  CBRANCH (ram, 0x23df20, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 1) , (const, 0x0, 1), (register, 0x0, 1) CALL (ram, 0x19d0c0, 8) , (unique, 0x3200, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x16c, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x16c, 4)]
[(ram, 0x4ec9b8, 8) INDIRECT (ram, 0x4ec9b8, 8) , (const, 0x16c, 4)]
[(ram, 0x4ef904, 4) INDIRECT (ram, 0x4ef904, 4) , (const, 0x16c, 4)]
[(ram, 0x4ef908, 4) INDIRECT (ram, 0x4ef908, 4) , (const, 0x16c, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x16c, 4)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x16c, 4), (stack, 0xfffffffffffffb60, 8) COPY (const, 0x23debf, 8)]
[(stack, 0xfffffffffffffb70, 8) INDIRECT (stack, 0xfffffffffffffb70, 8) , (const, 0x16c, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x16c, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x16c, 4)]
[(stack, 0xfffffffffffffb80, 8) INDIRECT (stack, 0xfffffffffffffb80, 8) , (const, 0x16c, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x16c, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x16c, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x16c, 4)]
[(unique, 0x10000587, 8) COPY (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x23dea0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 1) , (const, 0x0, 1), (register, 0x0, 1) CALL (ram, 0x19d0c0, 8) , (unique, 0x3200, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xab, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xab, 4)]
[(ram, 0x4ec9b8, 8) INDIRECT (ram, 0x4ec9b8, 8) , (const, 0xab, 4)]
[(ram, 0x4ef904, 4) INDIRECT (ram, 0x4ef904, 4) , (const, 0xab, 4)]
[(ram, 0x4ef908, 4) INDIRECT (ram, 0x4ef908, 4) , (const, 0xab, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0xab, 4)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0xab, 4), (stack, 0xfffffffffffffb60, 8) COPY (const, 0x23dded, 8)]
[(stack, 0xfffffffffffffb70, 8) INDIRECT (stack, 0xfffffffffffffb70, 8) , (const, 0xab, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0xab, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0xab, 4)]
[(stack, 0xfffffffffffffb80, 8) INDIRECT (stack, 0xfffffffffffffb80, 8) , (const, 0xab, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0xab, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0xab, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xab, 4)]
[(unique, 0x10000557, 8) COPY (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x23dda0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 1) , (const, 0x0, 1), (register, 0x0, 1) CALL (ram, 0x19d0c0, 8) , (unique, 0x3200, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffb7c, 4) MULTIEQUAL (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4)]
[(stack, 0xfffffffffffffb70, 8) MULTIEQUAL (stack, 0xfffffffffffffb70, 8) , (stack, 0xfffffffffffffb70, 8) , (stack, 0xfffffffffffffb70, 8) , (stack, 0xfffffffffffffb70, 8) , (stack, 0xfffffffffffffb70, 8) , (stack, 0xfffffffffffffb70, 8) , (stack, 0xfffffffffffffb70, 8)]
[(stack, 0xfffffffffffffb60, 8) MULTIEQUAL (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8)]
[(ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(ram, 0x4ef908, 4) MULTIEQUAL (ram, 0x4ef908, 4) , (ram, 0x4ef908, 4) , (ram, 0x4ef908, 4) , (ram, 0x4ef908, 4) , (ram, 0x4ef908, 4) , (ram, 0x4ef908, 4) , (ram, 0x4ef908, 4)]
[(ram, 0x4ef904, 4) MULTIEQUAL (ram, 0x4ef904, 4) , (ram, 0x4ef904, 4) , (ram, 0x4ef904, 4) , (ram, 0x4ef904, 4) , (ram, 0x4ef904, 4) , (ram, 0x4ef904, 4) , (ram, 0x4ef904, 4)]
[(ram, 0x4ec9b8, 8) MULTIEQUAL (ram, 0x4ec9b8, 8) , (register, 0x0, 8) , (ram, 0x4ec9b8, 8) , (ram, 0x4ec9b8, 8) , (ram, 0x4ec9b8, 8) , (ram, 0x4ec9b8, 8) , (ram, 0x4ec9b8, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x20, 8) MULTIEQUAL (unique, 0x10000557, 8) , (unique, 0x1000055f, 8) , (unique, 0x10000567, 8) , (unique, 0x1000056f, 8) , (unique, 0x10000577, 8) , (unique, 0x1000057f, 8) , (unique, 0x10000587, 8)]
[(unique, 0x1000052f, 8) COPY (stack, 0xfffffffffffffba8, 8), (stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[ ---  CBRANCH (ram, 0x23de06, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xfffffffffffffba8, 8) , (register, 0x18, 8), (register, 0x18, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffbb8, 8), (stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000067f, 8) , (const, 0x23de06, 8), (unique, 0x1000067f, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xcf, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xcf, 4)]
[(ram, 0x4ec9b8, 8) INDIRECT (ram, 0x4ec9b8, 8) , (const, 0xcf, 4)]
[(ram, 0x4ef904, 4) INDIRECT (ram, 0x4ef904, 4) , (const, 0xcf, 4)]
[(ram, 0x4ef908, 4) INDIRECT (ram, 0x4ef908, 4) , (const, 0xcf, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0xcf, 4)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0xcf, 4), (stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0xce, 4)]
[(stack, 0xfffffffffffffb70, 8) INDIRECT (stack, 0xfffffffffffffb70, 8) , (const, 0xcf, 4), (stack, 0xfffffffffffffb70, 8) INDIRECT (stack, 0xfffffffffffffb70, 8) , (const, 0xce, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0xcf, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0xce, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0xcf, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0xce, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0xcf, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0xce, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xcf, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xce, 4)]
[ ---  CALL (ram, 0x1212c8, 8) , (unique, 0x1000052f, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb7c, 4) MULTIEQUAL (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4)]
[(stack, 0xfffffffffffffb70, 8) MULTIEQUAL (stack, 0xfffffffffffffb70, 8) , (stack, 0xfffffffffffffb70, 8) , (stack, 0xfffffffffffffb70, 8)]
[(stack, 0xfffffffffffffb60, 8) MULTIEQUAL (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8)]
[(ram, 0x4ef908, 4) MULTIEQUAL (ram, 0x4ef908, 4) , (ram, 0x4ef908, 4) , (ram, 0x4ef908, 4)]
[(ram, 0x4ef904, 4) MULTIEQUAL (ram, 0x4ef904, 4) , (ram, 0x4ef904, 4) , (ram, 0x4ef904, 4)]
[(ram, 0x4ec9b8, 8) MULTIEQUAL (ram, 0x4ec9b8, 8) , (ram, 0x4ec9b8, 8) , (ram, 0x4ec9b8, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x23de1a, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4f08f8, 4) , (const, 0x0, 4), (ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[ ---  CALLOTHER (const, 0x11, 4)]
[(unique, 0x100005c7, 4) COPY (unique, 0x100004f5, 4), (unique, 0x100004f5, 4) INT_ADD (ram, 0x4ef904, 4) , (const, 0xffffffff, 4)]
[ ---  CBRANCH (ram, 0x23de3c, 1) , (unique, 0x100004f9, 1), (unique, 0x100004f9, 1) INT_NOTEQUAL (unique, 0x100004f5, 4) , (const, 0x0, 4), (unique, 0x100004f5, 4) INT_ADD (ram, 0x4ef904, 4) , (const, 0xffffffff, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000687, 8) , (const, 0x23de35, 8), (unique, 0x10000687, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xffffffffffffff78, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x119, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x119, 4)]
[(ram, 0x4ec9b8, 8) INDIRECT (ram, 0x4ec9b8, 8) , (const, 0x119, 4)]
[(ram, 0x4ef908, 4) INDIRECT (ram, 0x4ef908, 4) , (const, 0x119, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x119, 4)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x119, 4), (stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x118, 4)]
[(stack, 0xfffffffffffffb70, 8) INDIRECT (stack, 0xfffffffffffffb70, 8) , (const, 0x119, 4), (stack, 0xfffffffffffffb70, 8) INDIRECT (stack, 0xfffffffffffffb70, 8) , (const, 0x118, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x119, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x118, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x119, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x118, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x119, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x118, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x119, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x118, 4)]
[ ---  CALL (ram, 0x2306c0, 8) , (unique, 0x10000275, 8), (unique, 0x10000275, 8) PTRSUB (const, 0x0, 8) , (const, 0x4ef904, 8)]
[(unique, 0x100005c3, 4) COPY (ram, 0x4ef904, 4), (ram, 0x4ef904, 4) INDIRECT (ram, 0x4ef904, 4) , (const, 0x119, 4), (ram, 0x4ef904, 4) INT_ADD (ram, 0x4ef904, 4) , (const, 0xffffffff, 4)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb7c, 4) MULTIEQUAL (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4)]
[(stack, 0xfffffffffffffb70, 8) MULTIEQUAL (stack, 0xfffffffffffffb70, 8) , (stack, 0xfffffffffffffb70, 8) , (stack, 0xfffffffffffffb70, 8)]
[(stack, 0xfffffffffffffb60, 8) MULTIEQUAL (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8)]
[(ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(ram, 0x4ef908, 4) MULTIEQUAL (ram, 0x4ef908, 4) , (ram, 0x4ef908, 4) , (ram, 0x4ef908, 4)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8)]
[(ram, 0x4ef904, 4) COPY (unique, 0x100005cb, 4), (unique, 0x100005cb, 4) MULTIEQUAL (unique, 0x100005bf, 4) , (unique, 0x100005c3, 4) , (unique, 0x100005c7, 4)]
[(register, 0x0, 8) COPY (ram, 0x4ec9b8, 8), (ram, 0x4ec9b8, 8) MULTIEQUAL (ram, 0x4ec9b8, 8) , (ram, 0x4ec9b8, 8) , (ram, 0x4ec9b8, 8)]
[ ---  CBRANCH (ram, 0x23e027, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffffc0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x1000068f, 8), (unique, 0x1000068f, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000697, 8) , (unique, 0x10000265, 8), (unique, 0x10000697, 8) CAST (register, 0x20, 8), (unique, 0x10000265, 8) PTRSUB (const, 0x0, 8) , (const, 0x23e02c, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x10a, 4), (stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x109, 4)]
[(stack, 0xfffffffffffffb70, 8) INDIRECT (stack, 0xfffffffffffffb70, 8) , (const, 0x10a, 4), (stack, 0xfffffffffffffb70, 8) INDIRECT (stack, 0xfffffffffffffb70, 8) , (const, 0x109, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x10a, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x109, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x10a, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x109, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x10a, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x109, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x10a, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x109, 4)]
[ ---  CALL (ram, 0x234c80, 8)]
[(ram, 0x4eae68, 8) COPY (ram, 0x4eae68, 8), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x10a, 4)]
[(ram, 0x4ec9b8, 8) COPY (ram, 0x4ec9b8, 8), (ram, 0x4ec9b8, 8) INDIRECT (ram, 0x4ec9b8, 8) , (const, 0x10a, 4)]
[(ram, 0x4ef904, 4) COPY (ram, 0x4ef904, 4), (ram, 0x4ef904, 4) INDIRECT (ram, 0x4ef904, 4) , (const, 0x10a, 4)]
[(ram, 0x4ef908, 4) COPY (ram, 0x4ef908, 4), (ram, 0x4ef908, 4) INDIRECT (ram, 0x4ef908, 4) , (const, 0x10a, 4)]
[(ram, 0x4f08f8, 4) COPY (ram, 0x4f08f8, 4), (ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x10a, 4)]
[ ---  RETURN (const, 0x1, 4)]
[(ram, 0x4eae68, 8) COPY (ram, 0x4eae68, 8)]
[(ram, 0x4ec9b8, 8) COPY (ram, 0x4ec9b8, 8)]
[(ram, 0x4ef904, 4) COPY (ram, 0x4ef904, 4)]
[(ram, 0x4ef908, 4) COPY (ram, 0x4ef908, 4)]
[(ram, 0x4f08f8, 4) COPY (ram, 0x4f08f8, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8)]
