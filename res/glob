[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffad8, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffad8, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffad8, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffad8, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffad8, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffad8, 8)]
[(stack, 0xfffffffffffffb38, 8) COPY (unique, 0x10001e32, 8), (unique, 0x10001e32, 8) CAST (register, 0x10, 8)]
[(stack, 0xffffffffffffffc0, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10001e3a, 8), (unique, 0x10001e3a, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8)]
[ ---  CBRANCH (ram, 0x268801, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x38, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x268801, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x8, 8) , (const, 0x0, 8)]
[(stack, 0xfffffffffffffb44, 4) COPY (register, 0x0, 4), (register, 0x0, 4) INT_AND (register, 0x30, 4) , (const, 0xffff8100, 4)]
[ ---  CBRANCH (ram, 0x268801, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) INT_AND (register, 0x30, 4) , (const, 0xffff8100, 4)]
[(stack, 0xfffffffffffffb44, 4) COPY (const, 0xffffffff, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x16ae, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001e42, 8) , (const, 0x16, 4), (unique, 0x10001e42, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (ram, 0x4eae68, 8) , (register, 0x110, 8) , (const, 0x1, 8)]
[ ---  BRANCH (ram, 0x267926, 1)]
[ ---  CBRANCH (ram, 0x26779e, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0x38, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x67, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x67, 4)]
[(stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x67, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x67, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x67, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x67, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x67, 4)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x67, 4)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x67, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x67, 4)]
[(stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x67, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x67, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x67, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x67, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x67, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x67, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x67, 4)]
[(stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x67, 4)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x67, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x67, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x67, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x67, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x67, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x67, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x67, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x67, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x67, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x67, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x67, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x67, 4)]
[(stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0x67, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x67, 4)]
[ ---  CBRANCH (ram, 0x267cd7, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x2f, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) PTRADD (register, 0x38, 8) , (unique, 0x10000ef8, 8) , (const, 0x1, 8), (unique, 0x10000ef8, 8) INT_SUB (register, 0x0, 8) , (const, 0x1, 8), (register, 0x0, 8) CALL (ram, 0x121100, 8) , (register, 0x38, 8)]
[(register, 0xa0, 4) INT_OR (register, 0x30, 4) , (const, 0x2000, 4)]
[ ---  BRANCH (ram, 0x26779e, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbc0, 4) MULTIEQUAL (stack, 0xfffffffffffffbc0, 4) , (stack, 0xfffffffffffffbc0, 4) , (stack, 0xfffffffffffffbc0, 4)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb98, 8) MULTIEQUAL (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8)]
[(stack, 0xfffffffffffffb94, 4) MULTIEQUAL (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4)]
[(stack, 0xfffffffffffffb90, 4) MULTIEQUAL (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4)]
[(stack, 0xfffffffffffffb8c, 4) MULTIEQUAL (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4)]
[(stack, 0xfffffffffffffb88, 4) MULTIEQUAL (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4)]
[(stack, 0xfffffffffffffb84, 4) MULTIEQUAL (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4)]
[(stack, 0xfffffffffffffb80, 4) MULTIEQUAL (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4)]
[(stack, 0xfffffffffffffb7c, 4) MULTIEQUAL (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb60, 8) MULTIEQUAL (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8)]
[(stack, 0xfffffffffffffb58, 8) MULTIEQUAL (stack, 0xfffffffffffffb58, 8) , (stack, 0xfffffffffffffb58, 8) , (stack, 0xfffffffffffffb58, 8)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae0, 8) MULTIEQUAL (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x0, 4) INT_AND (register, 0xa0, 4) , (const, 0x20, 4), (register, 0xa0, 4) MULTIEQUAL (register, 0x30, 4) , (register, 0x30, 4) , (register, 0xa0, 4)]
[(stack, 0xfffffffffffffb20, 8) INT_OR (unique, 0x10000a56, 8) , (unique, 0x10000d3a, 8), (unique, 0x10000d3a, 8) INT_AND (unique, 0x10000a5e, 8) , (const, 0xffffffff00000020, 8), (unique, 0x10000a5e, 8) INT_ZEXT (unique, 0x10001e4a, 4), (unique, 0x10001e4a, 4) CAST (register, 0xa0, 4), (unique, 0x10000a56, 8) INT_AND (stack, 0xfffffffffffffb20, 8) , (const, 0xffffffff00000000, 8), (register, 0xa0, 4) MULTIEQUAL (register, 0x30, 4) , (register, 0x30, 4) , (register, 0xa0, 4), (stack, 0xfffffffffffffb20, 8) MULTIEQUAL (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8)]
[ ---  CBRANCH (ram, 0x2678f0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x10000398, 4) , (const, 0x0, 4), (unique, 0x10000398, 4) INT_AND (register, 0xa0, 4) , (const, 0x8, 4), (register, 0xa0, 4) MULTIEQUAL (register, 0x30, 4) , (register, 0x30, 4) , (register, 0xa0, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x9d, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (const, 0x0, 8), (unique, 0x3100, 8) PTRSUB (register, 0x8, 8) , (const, 0x10, 8)]
[ ---  CBRANCH (ram, 0x2677cf, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000f08, 8) , (const, 0x0, 8), (unique, 0x10000f08, 8) PTRSUB (register, 0x8, 8) , (const, 0x0, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xa4, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xa1, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (const, 0x0, 8), (unique, 0x3100, 8) PTRSUB (register, 0x8, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x2677cf, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xfffffffffffffb20, 4) , (const, 0x0, 4), (stack, 0xfffffffffffffb20, 4) SUBPIECE (unique, 0x10000d3a, 8) , (const, 0x0, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x167b, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000f40, 8) , (const, 0x0, 8), (unique, 0x10000f40, 8) PTRSUB (register, 0x8, 8) , (const, 0x0, 8)]
[(unique, 0x10001c9f, 8) COPY (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x267d6c, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (unique, 0xbd80, 8) , (const, 0x1fffffffffffffff, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0x8, 8) , (const, 0x10, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x168d, 4)]
[(stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x168d, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x168d, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x168d, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x168d, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x168d, 4)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x168d, 4)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x168d, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x168d, 4)]
[(stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x168d, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x168d, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x168d, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x168d, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x168d, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x168d, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x168d, 4)]
[(stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x168d, 4)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x168d, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x168d, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x168d, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x168d, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x168d, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x168d, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x168d, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x168d, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x168d, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x168d, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x168d, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x168d, 4)]
[(stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0x168d, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x168d, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x1699, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x168d, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (register, 0x0, 8), (unique, 0x3100, 8) PTRSUB (register, 0x8, 8) , (const, 0x8, 8), (register, 0x0, 8) CAST (unique, 0x10001e4e, 8), (unique, 0x10001e4e, 8) CALL (ram, 0x1211e0, 8) , (unique, 0x3580, 8) , (const, 0x1, 8), (unique, 0x3580, 8) INT_ADD (unique, 0x3480, 8) , (const, 0x8, 8), (unique, 0x3480, 8) INT_MULT (unique, 0xbd80, 8) , (const, 0x8, 8)]
[(unique, 0x10001ca7, 8) COPY (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x2677cf, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10001e4e, 8), (unique, 0x10001e4e, 8) CALL (ram, 0x1211e0, 8) , (unique, 0x3580, 8) , (const, 0x1, 8), (unique, 0x3580, 8) INT_ADD (unique, 0x3480, 8) , (const, 0x8, 8), (unique, 0x3480, 8) INT_MULT (unique, 0xbd80, 8) , (const, 0x8, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbc0, 4) MULTIEQUAL (stack, 0xfffffffffffffbc0, 4) , (stack, 0xfffffffffffffbc0, 4) , (stack, 0xfffffffffffffbc0, 4) , (stack, 0xfffffffffffffbc0, 4)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb98, 8) MULTIEQUAL (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8)]
[(stack, 0xfffffffffffffb94, 4) MULTIEQUAL (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4)]
[(stack, 0xfffffffffffffb90, 4) MULTIEQUAL (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4)]
[(stack, 0xfffffffffffffb8c, 4) MULTIEQUAL (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4)]
[(stack, 0xfffffffffffffb88, 4) MULTIEQUAL (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4)]
[(stack, 0xfffffffffffffb84, 4) MULTIEQUAL (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4)]
[(stack, 0xfffffffffffffb80, 4) MULTIEQUAL (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4)]
[(stack, 0xfffffffffffffb7c, 4) MULTIEQUAL (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb60, 8) MULTIEQUAL (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8)]
[(stack, 0xfffffffffffffb58, 8) MULTIEQUAL (stack, 0xfffffffffffffb58, 8) , (stack, 0xfffffffffffffb58, 8) , (stack, 0xfffffffffffffb58, 8) , (stack, 0xfffffffffffffb58, 8)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb20, 8) MULTIEQUAL (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae0, 8) MULTIEQUAL (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x267980, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x58e00, 4) , (const, 0x0, 4), (unique, 0x58e00, 4) INT_AND (register, 0xa0, 4) , (const, 0x400, 4)]
[ ---  CBRANCH (ram, 0x267950, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x8, 4) , (const, 0x0, 4), (register, 0x8, 4) INT_AND (register, 0xa0, 4) , (const, 0x40, 4)]
[(unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0x38, 8)]
[(unique, 0x10001dba, 8) COPY (register, 0x38, 8)]
[(unique, 0x10000d20, 8) MULTIEQUAL (unique, 0x10001dba, 8) , (register, 0xb8, 8) , (register, 0xb8, 8)]
[ ---  CBRANCH (ram, 0x267980, 1) , (unique, 0x10000d1f, 1), (unique, 0x10000d1f, 1) INT_NOTEQUAL (unique, 0x10000d1e, 1) , (const, 0x0, 1), (unique, 0x10000d1e, 1) MULTIEQUAL (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1)]
[ ---  CBRANCH (ram, 0x267f70, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x10000d1e, 1) , (const, 0x5c, 1)]
[ ---  CBRANCH (ram, 0x267980, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0x10000d20, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[(unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0x10000d20, 8) , (const, 0x2, 8) , (const, 0x1, 8)]
[(register, 0xb8, 8) PTRADD (unique, 0x10000d20, 8) , (const, 0x2, 8) , (const, 0x1, 8)]
[ ---  BRANCH (ram, 0x267979, 1)]
[ ---  CBRANCH (ram, 0x26780d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x10000d1e, 1) , (const, 0x7b, 1)]
[(unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0x10000d20, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[(register, 0xb8, 8) PTRADD (unique, 0x10000d20, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xc3, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xc3, 4)]
[(stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0xc3, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0xc3, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0xc3, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0xc3, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0xc3, 4)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0xc3, 4)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0xc3, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0xc3, 4)]
[(stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0xc3, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0xc3, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0xc3, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0xc3, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0xc3, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0xc3, 4)]
[(stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0xc3, 4)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0xc3, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0xc3, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0xc3, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0xc3, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0xc3, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0xc3, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0xc3, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0xc3, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0xc3, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0xc3, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0xc3, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0xc3, 4)]
[(stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0xc3, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xc3, 4)]
[(stack, 0xfffffffffffffb30, 4) SUBPIECE (stack, 0xfffffffffffffb30, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0xc3, 4), (stack, 0xfffffffffffffb30, 8) CAST (unique, 0x10001e62, 8), (unique, 0x10001e62, 8) INT_OR (unique, 0x10000a6f, 8) , (unique, 0x10000d4a, 8), (unique, 0x10000d4a, 8) INT_AND (unique, 0x10000a77, 8) , (const, 0xffffffff00000040, 8), (unique, 0x10000a77, 8) INT_ZEXT (unique, 0x10001e5e, 4), (unique, 0x10001e5e, 4) CAST (register, 0xa0, 4), (unique, 0x10000a6f, 8) INT_AND (unique, 0x10001e56, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10001e56, 8) CAST (stack, 0xfffffffffffffb30, 8)]
[ ---  CBRANCH (ram, 0x267980, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x121110, 8) , (register, 0x38, 8) , (const, 0x7b, 4)]
[(register, 0xb8, 8) MULTIEQUAL (register, 0x0, 8) , (unique, 0x10000d20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xdf, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xd9, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xdf, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xd9, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0xdf, 4), (stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0xd9, 4), (stack, 0xfffffffffffffae0, 8) MULTIEQUAL (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0xdf, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0xd9, 4), (stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0xdf, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0xd9, 4), (stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0xdf, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0xd9, 4), (stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0xdf, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0xd9, 4), (stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0xdf, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0xd9, 4), (stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0xdf, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0xd9, 4), (stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0xdf, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0xd9, 4), (stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0xdf, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0xd9, 4), (stack, 0xfffffffffffffb20, 8) MULTIEQUAL (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0xdf, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0xd9, 4), (stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0xdf, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0xd9, 4), (stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0xdf, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0xd9, 4), (stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0xdf, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0xd9, 4), (stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0xdf, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0xd9, 4), (stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0xdf, 4), (stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0xd9, 4), (stack, 0xfffffffffffffb58, 8) MULTIEQUAL (stack, 0xfffffffffffffb58, 8) , (stack, 0xfffffffffffffb58, 8)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0xdf, 4), (stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0xd9, 4), (stack, 0xfffffffffffffb60, 8) MULTIEQUAL (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0xdf, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0xd9, 4), (stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0xdf, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0xd9, 4), (stack, 0xfffffffffffffb7c, 4) MULTIEQUAL (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0xdf, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0xd9, 4), (stack, 0xfffffffffffffb80, 4) MULTIEQUAL (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0xdf, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0xd9, 4), (stack, 0xfffffffffffffb84, 4) MULTIEQUAL (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0xdf, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0xd9, 4), (stack, 0xfffffffffffffb88, 4) MULTIEQUAL (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0xdf, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0xd9, 4), (stack, 0xfffffffffffffb8c, 4) MULTIEQUAL (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0xdf, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0xd9, 4), (stack, 0xfffffffffffffb90, 4) MULTIEQUAL (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0xdf, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0xd9, 4), (stack, 0xfffffffffffffb94, 4) MULTIEQUAL (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0xdf, 4), (stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0xd9, 4), (stack, 0xfffffffffffffb98, 8) MULTIEQUAL (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0xdf, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0xd9, 4), (stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0xdf, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0xd9, 4), (stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0xdf, 4), (stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0xd9, 4), (stack, 0xfffffffffffffbc0, 4) MULTIEQUAL (stack, 0xfffffffffffffbc0, 4) , (stack, 0xfffffffffffffbc0, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xdf, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xd9, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffb30, 4) SUBPIECE (stack, 0xfffffffffffffb30, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0xdf, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0xd9, 4), (stack, 0xfffffffffffffb30, 8) CAST (unique, 0x10001e72, 8), (unique, 0x10001e72, 8) INT_OR (unique, 0x10000a7f, 8) , (unique, 0x10000a87, 8), (unique, 0x10000a87, 8) INT_ZEXT (register, 0x8, 4), (unique, 0x10000a7f, 8) INT_AND (unique, 0x10001e6a, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10001e6a, 8) CAST (stack, 0xfffffffffffffb30, 8), (register, 0x8, 4) MULTIEQUAL (stack, 0xfffffffffffffb30, 4) , (register, 0x8, 4), (stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[ ---  CBRANCH (ram, 0x26783e, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x2300b0, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) INT_SUB (register, 0x0, 8) , (const, 0x1, 8), (register, 0x0, 8) CALL (ram, 0x121100, 8) , (register, 0x38, 8)]
[ ---  CBRANCH (ram, 0x269159, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (const, 0x1000, 8) , (unique, 0x3100, 8)]
[(stack, 0xfffffffffffffb30, 8) COPY (unique, 0x3800, 8), (unique, 0x3800, 8) CAST (unique, 0x10001e7a, 8), (unique, 0x10001e7a, 8) PTRADD (unique, 0x10001708, 8) , (unique, 0x100003bc, 8) , (const, 0x1, 8), (unique, 0x10001708, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffae0, 8), (unique, 0x100003bc, 8) INT_2COMP (register, 0xb0, 8), (register, 0xb0, 8) INT_AND (register, 0xb0, 8) , (const, 0xfffffffffffffff0, 8), (register, 0xb0, 8) INT_ADD (register, 0x0, 8) , (const, 0x1d, 8)]
[(stack, 0xfffffffffffffb28, 8) COPY (register, 0xb0, 8), (register, 0xb0, 8) INT_AND (register, 0xb0, 8) , (const, 0xfffffffffffffff0, 8), (register, 0xb0, 8) INT_ADD (register, 0x0, 8) , (const, 0x1d, 8)]
[(stack, 0xfffffffffffffb00, 8) CAST (unique, 0x10001e86, 8), (unique, 0x10001e86, 8) INT_ADD (unique, 0x100018c3, 8) , (const, 0x1, 4), (unique, 0x100018c3, 8) INT_LEFT (unique, 0x100018bb, 8) , (const, 0x20, 8), (unique, 0x100018bb, 8) INT_SEXT (unique, 0x10001e82, 4), (unique, 0x10001e82, 4) CAST (stack, 0xfffffffffffffb04, 4), (stack, 0xfffffffffffffb04, 4) SUBPIECE (stack, 0xfffffffffffffb00, 8) , (const, 0x4, 8)]
[(unique, 0x10001cbf, 8) COPY (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x10000f20, 8) , (unique, 0x100003bc, 8) , (const, 0x1, 8), (unique, 0x10000f20, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffad8, 8), (unique, 0x100003bc, 8) INT_2COMP (register, 0xb0, 8), (register, 0xb0, 8) INT_AND (register, 0xb0, 8) , (const, 0xfffffffffffffff0, 8), (register, 0xb0, 8) INT_ADD (register, 0x0, 8) , (const, 0x1d, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x15f2, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x15f2, 4)]
[(stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x15f2, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x15f2, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x15f2, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x15f2, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x15f2, 4)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x15f2, 4)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x15f2, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x15f2, 4), (stack, 0xfffffffffffffb18, 8) CAST (unique, 0x10001e9e, 8), (unique, 0x10001e9e, 8) INT_OR (unique, 0x10000cd4, 8) , (unique, 0x10000cdc, 8), (unique, 0x10000cdc, 8) INT_AND (unique, 0x10001e96, 8) , (const, 0xffffffff, 8), (unique, 0x10001e96, 8) CAST (stack, 0xfffffffffffffb30, 8), (unique, 0x10000cd4, 8) INT_AND (unique, 0x10001e8e, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10001e8e, 8) CAST (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x15f2, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x15f2, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x15f2, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x15f2, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x15f2, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x15f2, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x15f2, 4)]
[(stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x15f2, 4)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x15f2, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x15f2, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x15f2, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x15f2, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x15f2, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x15f2, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x15f2, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x15f2, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x15f2, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x15f2, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x15f2, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x15f2, 4)]
[(stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0x15f2, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x15f2, 4)]
[(stack, 0xfffffffffffffb30, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10001ea6, 8), (unique, 0x10001ea6, 8) CALL (ram, 0x1212c0, 8) , (unique, 0x3100, 8)]
[(unique, 0x10001c97, 8) COPY (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x26791c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10001ea6, 8), (unique, 0x10001ea6, 8) CALL (ram, 0x1212c0, 8) , (unique, 0x3100, 8)]
[(stack, 0xfffffffffffffb00, 8) CAST (unique, 0x10001eb6, 8), (unique, 0x10001eb6, 8) INT_AND (unique, 0x10001eae, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10001eae, 8) CAST (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffb28, 8) COPY (const, 0x0, 8)]
[(unique, 0x10001cc7, 8) COPY (register, 0x20, 8)]
[(unique, 0x10001d8b, 4) COPY (stack, 0xfffffffffffffb18, 4), (stack, 0xfffffffffffffb18, 4) SUBPIECE (stack, 0xfffffffffffffb18, 8) , (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x267873, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001ec6, 8) , (const, 0x267887, 8), (unique, 0x10001ec6, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8), (register, 0x20, 8) MULTIEQUAL (unique, 0x10001cbf, 8) , (unique, 0x10001cc7, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x145, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x145, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x145, 4), (stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x144, 4), (stack, 0xfffffffffffffae0, 8) MULTIEQUAL (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x145, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x144, 4), (stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x145, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x144, 4), (stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x145, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x144, 4), (stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x145, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x144, 4), (stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x145, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x144, 4), (stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x145, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x144, 4), (stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x145, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x144, 4), (stack, 0xfffffffffffffb20, 8) MULTIEQUAL (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x145, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x144, 4), (stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x145, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x144, 4), (stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x145, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x144, 4), (stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x145, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x144, 4), (stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x145, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x144, 4), (stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x145, 4), (stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x144, 4), (stack, 0xfffffffffffffb58, 8) MULTIEQUAL (stack, 0xfffffffffffffb58, 8) , (stack, 0xfffffffffffffb58, 8)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x145, 4), (stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x144, 4), (stack, 0xfffffffffffffb60, 8) MULTIEQUAL (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x145, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x144, 4), (stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x145, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x144, 4), (stack, 0xfffffffffffffb7c, 4) MULTIEQUAL (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x145, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x144, 4), (stack, 0xfffffffffffffb80, 4) MULTIEQUAL (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x145, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x144, 4), (stack, 0xfffffffffffffb84, 4) MULTIEQUAL (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x145, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x144, 4), (stack, 0xfffffffffffffb88, 4) MULTIEQUAL (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x145, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x144, 4), (stack, 0xfffffffffffffb8c, 4) MULTIEQUAL (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x145, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x144, 4), (stack, 0xfffffffffffffb90, 4) MULTIEQUAL (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x145, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x144, 4), (stack, 0xfffffffffffffb94, 4) MULTIEQUAL (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x145, 4), (stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x144, 4), (stack, 0xfffffffffffffb98, 8) MULTIEQUAL (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x145, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x144, 4), (stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x145, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x144, 4), (stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0x145, 4), (stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0x144, 4), (stack, 0xfffffffffffffbc0, 4) MULTIEQUAL (stack, 0xfffffffffffffbc0, 4) , (stack, 0xfffffffffffffbc0, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x145, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x144, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(unique, 0x10001a5b, 8) COPY (stack, 0xfffffffffffffb30, 8), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x145, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (unique, 0x10001da2, 8) , (const, 0x144, 4), (unique, 0x10001da2, 8) COPY (register, 0x38, 8), (register, 0x38, 8) MULTIEQUAL (unique, 0x3800, 8) , (register, 0x0, 8)]
[(stack, 0xfffffffffffffb18, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10001ed6, 8), (unique, 0x10001ed6, 8) CALL (ram, 0x121230, 8) , (register, 0x38, 8) , (register, 0x38, 8) , (unique, 0x10001ece, 8), (unique, 0x10001ece, 8) CAST (register, 0x10, 8), (register, 0x10, 8) PTRADD (register, 0xb8, 8) , (unique, 0x100003cc, 8) , (const, 0x1, 8), (unique, 0x100003cc, 8) INT_2COMP (unique, 0x10001ebe, 8), (unique, 0x10001ebe, 8) CAST (register, 0x38, 8), (register, 0x38, 8) MULTIEQUAL (unique, 0x3800, 8) , (register, 0x0, 8)]
[(register, 0x38, 8) COPY (const, 0x0, 8)]
[(stack, 0xfffffffffffffb10, 4) SUBPIECE (stack, 0xfffffffffffffb10, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x145, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x144, 4), (stack, 0xfffffffffffffb10, 8) INT_OR (unique, 0x10000a90, 8) , (unique, 0x10000a98, 8), (unique, 0x10000a98, 8) INT_ZEXT (register, 0x8, 4), (unique, 0x10000a90, 8) INT_AND (stack, 0xfffffffffffffb10, 8) , (const, 0xffffffff00000000, 8), (register, 0x8, 4) MULTIEQUAL (stack, 0xfffffffffffffb30, 4) , (unique, 0x10001d8b, 4), (stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(unique, 0x10001d3f, 8) COPY (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb8, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[ ---  BRANCH (ram, 0x2678b4, 1)]
[(register, 0x38, 8) MULTIEQUAL (register, 0x38, 8) , (register, 0x38, 8) , (register, 0x38, 8) , (register, 0x38, 8) , (register, 0x38, 8) , (unique, 0x3100, 8)]
[(unique, 0x10001e22, 8) COPY (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x267f90, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0xb8, 8), (register, 0xb8, 8) COPY (unique, 0x10001d6f, 8), (unique, 0x10001d6f, 8) MULTIEQUAL (unique, 0x10001d3f, 8) , (unique, 0x10001d47, 8) , (unique, 0x10001d4f, 8) , (unique, 0x10001d57, 8) , (unique, 0x10001d5f, 8) , (unique, 0x10001d67, 8)]
[(register, 0x206, 1) INT_EQUAL (stack, 0xfffffffffffffb10, 4) , (const, 0x0, 4)]
[(unique, 0x3100, 8) PTRADD (register, 0xb8, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x2678da, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x5c, 1)]
[ ---  CBRANCH (ram, 0x267f58, 1) , (unique, 0x10000aa2, 1), (unique, 0x10000aa2, 1) BOOL_NEGATE (register, 0x206, 1)]
[ ---  CBRANCH (ram, 0x2678a0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x7d, 1)]
[ ---  CBRANCH (ram, 0x267f40, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x2c, 1)]
[(unique, 0x10001d47, 8) COPY (unique, 0x3100, 8)]
[ ---  CBRANCH (ram, 0x268787, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x38, 8) , (const, 0x0, 8)]
[(unique, 0x3100, 8) PTRADD (register, 0xb8, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[(register, 0x8, 8) MULTIEQUAL (unique, 0x3100, 8) , (unique, 0x3100, 8) , (unique, 0x3100, 8)]
[ ---  CBRANCH (ram, 0x2685cd, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 1) , (const, 0x7d, 1), (register, 0x0, 1) MULTIEQUAL (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1)]
[(register, 0x38, 8) COPY (const, 0x0, 8)]
[(unique, 0x10001cf7, 8) COPY (register, 0x8, 8)]
[ ---  BRANCH (ram, 0x2687ac, 1)]
[(register, 0x38, 8) MULTIEQUAL (register, 0x38, 8) , (register, 0x38, 8) , (register, 0x38, 8) , (register, 0x38, 8) , (register, 0x38, 8) , (unique, 0x3100, 8)]
[ ---  CBRANCH (ram, 0x267f90, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0xb0, 8), (register, 0xb0, 8) MULTIEQUAL (unique, 0x10001cf7, 8) , (unique, 0x10001e2a, 8) , (unique, 0x10001e2a, 8) , (unique, 0x10001e2a, 8) , (unique, 0x10001d17, 8) , (unique, 0x10001e2a, 8)]
[(unique, 0x3100, 8) PTRADD (register, 0xb0, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x2687c8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x5c, 1)]
[ ---  CBRANCH (ram, 0x2687f0, 1) , (unique, 0x10000c20, 1), (unique, 0x10000c20, 1) BOOL_NEGATE (register, 0x206, 1)]
[(unique, 0x10001e2a, 8) COPY (unique, 0x3100, 8)]
[ ---  CBRANCH (ram, 0x2687a0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x7d, 1)]
[ ---  CBRANCH (ram, 0x2687e0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x2c, 1)]
[ ---  CBRANCH (ram, 0x268790, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x38, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x2687a9, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x7b, 1)]
[(register, 0x38, 8) INT_ADD (register, 0x38, 8) , (const, 0x1, 8)]
[ ---  BRANCH (ram, 0x2687a9, 1)]
[(unique, 0x3100, 8) INT_ADD (register, 0x38, 8) , (const, 0xffffffffffffffff, 8)]
[ ---  CBRANCH (ram, 0x268790, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x38, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x267f90, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb0, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[(unique, 0x10001d17, 8) COPY (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb0, 8) , (const, 0x2, 8) , (const, 0x1, 8)]
[ ---  BRANCH (ram, 0x2687a9, 1)]
[(unique, 0x10001d4f, 8) COPY (unique, 0x3100, 8)]
[ ---  CBRANCH (ram, 0x2678b1, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x7b, 1)]
[(register, 0x38, 8) INT_ADD (register, 0x38, 8) , (const, 0x1, 8)]
[(unique, 0x10001d57, 8) COPY (unique, 0x3100, 8)]
[ ---  BRANCH (ram, 0x2678b1, 1)]
[(unique, 0x3100, 8) INT_ADD (register, 0x38, 8) , (const, 0xffffffffffffffff, 8)]
[(unique, 0x10001d67, 8) COPY (unique, 0x3100, 8)]
[ ---  CBRANCH (ram, 0x2685ca, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x38, 8) , (const, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001ef6, 8) , (const, 0x2685e3, 8), (unique, 0x10001ef6, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1af, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x1af, 4)]
[(stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x1af, 4), (stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x1ae, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x1af, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x1ae, 4)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x1af, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x1ae, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x1af, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x1ae, 4)]
[(stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x1af, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x1ae, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x1af, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x1ae, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x1af, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x1ae, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x1af, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x1ae, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x1af, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x1ae, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x1af, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x1ae, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x1af, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x1ae, 4)]
[(stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x1af, 4), (stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x1ae, 4)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x1af, 4), (stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x1ae, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x1af, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x1ae, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x1af, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x1ae, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x1af, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x1ae, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x1af, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x1ae, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x1af, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x1ae, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x1af, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x1ae, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x1af, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x1ae, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x1af, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x1ae, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x1af, 4), (stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x1ae, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x1af, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x1ae, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x1af, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x1ae, 4)]
[(stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0x1af, 4), (stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0x1ae, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1af, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1ae, 4)]
[(unique, 0x1000195b, 8) COPY (unique, 0x10001efe, 8), (unique, 0x10001efe, 8) CAST (stack, 0xfffffffffffffaf8, 8), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x1af, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x1ae, 4), (stack, 0xfffffffffffffaf8, 8) COPY (unique, 0x10001eee, 8), (unique, 0x10001eee, 8) CAST (unique, 0x3100, 8)]
[(stack, 0xfffffffffffffaf0, 1) SUBPIECE (stack, 0xfffffffffffffaf0, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x1af, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x1ae, 4), (stack, 0xfffffffffffffaf0, 8) CAST (unique, 0x10001ee6, 8), (unique, 0x10001ee6, 8) INT_OR (unique, 0x10000bf0, 8) , (unique, 0x10000bf8, 8), (unique, 0x10000bf8, 8) INT_ZEXT (register, 0x206, 1), (unique, 0x10000bf0, 8) INT_AND (unique, 0x10001ede, 8) , (const, 0xffffffffffffff00, 8), (unique, 0x10001ede, 8) CAST (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffb10, 8) COPY (register, 0x0, 8), (register, 0x0, 8) INT_ADD (register, 0x0, 8) , (const, 0x1, 8), (register, 0x0, 8) CALL (ram, 0x121100, 8) , (register, 0xb0, 8), (register, 0xb0, 8) MULTIEQUAL (register, 0x8, 8) , (unique, 0x3100, 8)]
[(stack, 0xfffffffffffffaf8, 8) CAST (unique, 0x10001f1a, 8), (unique, 0x10001f1a, 8) INT_OR (unique, 0x10000c00, 8) , (unique, 0x10000c08, 8), (unique, 0x10000c08, 8) INT_ZEXT (unique, 0x10001f16, 4), (unique, 0x10001f16, 4) CAST (register, 0xa0, 4), (unique, 0x10000c00, 8) INT_AND (unique, 0x10001f0e, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10001f0e, 8) CAST (stack, 0xfffffffffffffaf8, 8), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x1af, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x1ae, 4), (stack, 0xfffffffffffffaf8, 8) COPY (unique, 0x10001eee, 8), (unique, 0x10001eee, 8) CAST (unique, 0x3100, 8)]
[(stack, 0xfffffffffffffae8, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) CAST (unique, 0x10001f06, 8), (unique, 0x10001f06, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10001470, 8), (unique, 0x10001470, 8) PTRSUB (register, 0x8, 8) , (const, 0x0, 8)]
[(stack, 0xfffffffffffffb08, 8) CAST (unique, 0x10001f26, 8), (unique, 0x10001f26, 8) INT_OR (unique, 0x10000d0e, 8) , (const, 0x20, 8), (unique, 0x10000d0e, 8) INT_AND (unique, 0x10000d16, 8) , (const, 0xfffffffffffff7cf, 8), (unique, 0x10000d16, 8) INT_ADD (unique, 0x100018e3, 8) , (register, 0xa0, 4), (unique, 0x100018e3, 8) INT_LEFT (unique, 0x100018db, 8) , (const, 0x20, 8), (unique, 0x100018db, 8) INT_SEXT (unique, 0x10001f22, 4), (unique, 0x10001f22, 4) CAST (stack, 0xfffffffffffffb0c, 4), (stack, 0xfffffffffffffb0c, 4) INDIRECT (stack, 0xfffffffffffffb0c, 4) , (const, 0x1af, 4), (stack, 0xfffffffffffffb0c, 4) SUBPIECE (stack, 0xfffffffffffffb08, 8) , (const, 0x4, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x1ae, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001f36, 8) , (const, 0x268634, 8), (unique, 0x10001f36, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001f46, 8) , (const, 0x268646, 8), (unique, 0x10001f46, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[ ---  CALL (ram, 0x121160, 8) , (register, 0x0, 8) , (register, 0xb0, 8) , (unique, 0x10001a1b, 8), (unique, 0x10001a1b, 8) COPY (stack, 0xfffffffffffffb10, 8), (register, 0x0, 8) CALL (ram, 0x121230, 8) , (unique, 0x10001a2b, 8) , (register, 0x30, 8) , (unique, 0x10001f3e, 8), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x1f5, 4), (unique, 0x10001f3e, 8) CAST (register, 0x10, 8), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x1f4, 4), (register, 0x10, 8) PTRADD (register, 0xb8, 8) , (unique, 0x10000730, 8) , (const, 0x1, 8), (unique, 0x10000730, 8) INT_2COMP (unique, 0x10001f2e, 8), (unique, 0x10001f2e, 8) CAST (register, 0x30, 8), (unique, 0x10001a2b, 8) COPY (stack, 0xfffffffffffffb18, 8), (register, 0x30, 8) MULTIEQUAL (unique, 0x1000195b, 8) , (unique, 0x3100, 8) , (unique, 0x3100, 8), (register, 0xb8, 8) MULTIEQUAL (register, 0xb8, 8) , (unique, 0x10000d2a, 8) , (unique, 0x10000d2a, 8), (stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8), (stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001f4e, 8) , (const, 0x268662, 8), (unique, 0x10001f4e, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x20b, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1fd, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1f5, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x20b, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x1fd, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x1f5, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x20b, 4), (stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x20a, 4), (stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x1fd, 4), (stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x1fc, 4), (stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x1f5, 4), (stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x1f4, 4), (stack, 0xfffffffffffffae0, 8) MULTIEQUAL (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x20b, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x20a, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x1fd, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x1fc, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x1f5, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x1f4, 4), (stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x20b, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x20a, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x1fd, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x1fc, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x1f5, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x1f4, 4), (stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x20b, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x20a, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x1fd, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x1fc, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x1f5, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x1f4, 4), (stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x20b, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x20a, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x1fd, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x1fc, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x1f5, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x1f4, 4), (stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x20b, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x20a, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x1fd, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x1fc, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x1f5, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x1f4, 4), (stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x20b, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x20a, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x1fd, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x1fc, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x1f5, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x1f4, 4), (stack, 0xfffffffffffffb20, 8) MULTIEQUAL (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x20b, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x20a, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x1fd, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x1fc, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x1f5, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x1f4, 4), (stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x20b, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x20a, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x1fd, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x1fc, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x1f5, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x1f4, 4), (stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x20b, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x20a, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x1fd, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x1fc, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x1f5, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x1f4, 4), (stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x20b, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x20a, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x1fd, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x1fc, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x1f5, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x1f4, 4), (stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x20b, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x20a, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x1fd, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x1fc, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x1f5, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x1f4, 4), (stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x20b, 4), (stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x20a, 4), (stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x1fd, 4), (stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x1fc, 4), (stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x1f5, 4), (stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x1f4, 4), (stack, 0xfffffffffffffb58, 8) MULTIEQUAL (stack, 0xfffffffffffffb58, 8) , (stack, 0xfffffffffffffb58, 8) , (stack, 0xfffffffffffffb58, 8)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x20b, 4), (stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x20a, 4), (stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x1fd, 4), (stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x1fc, 4), (stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x1f5, 4), (stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x1f4, 4), (stack, 0xfffffffffffffb60, 8) MULTIEQUAL (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x20b, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x20a, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x1fd, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x1fc, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x1f5, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x1f4, 4), (stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x20b, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x20a, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x1fd, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x1fc, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x1f5, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x1f4, 4), (stack, 0xfffffffffffffb7c, 4) MULTIEQUAL (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x20b, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x20a, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x1fd, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x1fc, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x1f5, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x1f4, 4), (stack, 0xfffffffffffffb80, 4) MULTIEQUAL (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x20b, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x20a, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x1fd, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x1fc, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x1f5, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x1f4, 4), (stack, 0xfffffffffffffb84, 4) MULTIEQUAL (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x20b, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x20a, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x1fd, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x1fc, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x1f5, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x1f4, 4), (stack, 0xfffffffffffffb88, 4) MULTIEQUAL (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x20b, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x20a, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x1fd, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x1fc, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x1f5, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x1f4, 4), (stack, 0xfffffffffffffb8c, 4) MULTIEQUAL (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x20b, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x20a, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x1fd, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x1fc, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x1f5, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x1f4, 4), (stack, 0xfffffffffffffb90, 4) MULTIEQUAL (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x20b, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x20a, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x1fd, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x1fc, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x1f5, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x1f4, 4), (stack, 0xfffffffffffffb94, 4) MULTIEQUAL (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x20b, 4), (stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x20a, 4), (stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x1fd, 4), (stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x1fc, 4), (stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x1f5, 4), (stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x1f4, 4), (stack, 0xfffffffffffffb98, 8) MULTIEQUAL (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x20b, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x20a, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x1fd, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x1fc, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x1f5, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x1f4, 4), (stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x20b, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x20a, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x1fd, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x1fc, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x1f5, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x1f4, 4), (stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0x20b, 4), (stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0x20a, 4), (stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0x1fd, 4), (stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0x1fc, 4), (stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0x1f5, 4), (stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0x1f4, 4), (stack, 0xfffffffffffffbc0, 4) MULTIEQUAL (stack, 0xfffffffffffffbc0, 4) , (stack, 0xfffffffffffffbc0, 4) , (stack, 0xfffffffffffffbc0, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x20b, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x20a, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1fd, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1fc, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1f5, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1f4, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(unique, 0x10001abb, 8) COPY (stack, 0xfffffffffffffb30, 8), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x20b, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x20a, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x1fd, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x1fc, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x1f5, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x1f4, 4), (stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(unique, 0x10001963, 8) COPY (stack, 0xfffffffffffffaf8, 8), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x20b, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x20a, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x1fd, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x1fc, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x1f5, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x1f4, 4), (stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffb00, 4) SUBPIECE (stack, 0xfffffffffffffb00, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x20b, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x20a, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x1fd, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x1fc, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x1f5, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x1f4, 4), (stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[ ---  CBRANCH (ram, 0x26866f, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x267730, 8) , (unique, 0x10001f56, 8) , (stack, 0xfffffffffffffb08, 4) , (unique, 0x10001f5e, 8) , (register, 0x8, 8), (unique, 0x10001f5e, 8) CAST (unique, 0x10001b13, 8), (unique, 0x10001f56, 8) CAST (unique, 0x10001ab3, 8), (stack, 0xfffffffffffffb08, 4) SUBPIECE (stack, 0xfffffffffffffb08, 8) , (const, 0x0, 8), (unique, 0x10001ab3, 8) COPY (stack, 0xfffffffffffffb30, 8), (unique, 0x10001b13, 8) COPY (stack, 0xfffffffffffffb38, 8), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x1fd, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x1fd, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x1fd, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x1fc, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x1fc, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x1fc, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x1f5, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x1f5, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x1f5, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x1f4, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x1f4, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x1f4, 4), (stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8), (stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8), (stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[ ---  CBRANCH (ram, 0x268710, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x3, 4)]
[(unique, 0x10001d92, 4) COPY (register, 0x0, 4)]
[ ---  CBRANCH (ram, 0x26904c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xfffffffffffffb00, 4) , (const, 0x0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001f66, 8) , (const, 0x26905e, 8), (unique, 0x10001f66, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x14f4, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x14f4, 4)]
[(stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x14f4, 4), (stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x14f3, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x14f4, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x14f3, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x14f4, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x14f3, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x14f4, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x14f3, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x14f4, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x14f3, 4)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x14f4, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x14f3, 4)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x14f4, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x14f3, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x14f4, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x14f3, 4)]
[(stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x14f4, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x14f3, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x14f4, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x14f3, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x14f4, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x14f3, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x14f4, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x14f3, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x14f4, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x14f3, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x14f4, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x14f3, 4), (stack, 0xfffffffffffffb44, 4) COPY (register, 0x0, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x14f4, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x14f3, 4)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x14f4, 4), (stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x14f3, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x14f4, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x14f3, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x14f4, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x14f3, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x14f4, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x14f3, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x14f4, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x14f3, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x14f4, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x14f3, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x14f4, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x14f3, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x14f4, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x14f3, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x14f4, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x14f3, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x14f4, 4), (stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x14f3, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x14f4, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x14f3, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x14f4, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x14f3, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x14f4, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x14f3, 4)]
[ ---  CALL (ram, 0x1212c8, 8) , (unique, 0x10001abb, 8)]
[ ---  BRANCH (ram, 0x26871e, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb98, 8) MULTIEQUAL (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8)]
[(stack, 0xfffffffffffffb94, 4) MULTIEQUAL (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4)]
[(stack, 0xfffffffffffffb90, 4) MULTIEQUAL (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4)]
[(stack, 0xfffffffffffffb8c, 4) MULTIEQUAL (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4)]
[(stack, 0xfffffffffffffb88, 4) MULTIEQUAL (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4)]
[(stack, 0xfffffffffffffb84, 4) MULTIEQUAL (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4)]
[(stack, 0xfffffffffffffb80, 4) MULTIEQUAL (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4)]
[(stack, 0xfffffffffffffb7c, 4) MULTIEQUAL (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb60, 8) MULTIEQUAL (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae0, 8) MULTIEQUAL (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(stack, 0xfffffffffffffb44, 4) COPY (register, 0x0, 4), (register, 0x0, 4) MULTIEQUAL (unique, 0x10001d92, 4) , (stack, 0xfffffffffffffb44, 4)]
[ ---  CBRANCH (ram, 0x267926, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xfffffffffffffb20, 4) , (const, 0x0, 4), (stack, 0xfffffffffffffb20, 4) SUBPIECE (stack, 0xfffffffffffffb20, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffb20, 8) MULTIEQUAL (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001f6e, 8) , (const, 0x26873a, 8), (unique, 0x10001f6e, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x14e8, 4)]
[(stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x14e8, 4), (stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x14e7, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x14e8, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x14e7, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x14e8, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x14e7, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x14e8, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x14e7, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x14e8, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x14e7, 4)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x14e8, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x14e7, 4)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x14e8, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x14e7, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x14e8, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x14e7, 4)]
[(stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x14e8, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x14e7, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x14e8, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x14e7, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x14e8, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x14e7, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x14e8, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x14e7, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x14e8, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x14e7, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x14e8, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x14e7, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x14e8, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x14e7, 4)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x14e8, 4), (stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x14e7, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x14e8, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x14e7, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x14e8, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x14e7, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x14e8, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x14e7, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x14e8, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x14e7, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x14e8, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x14e7, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x14e8, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x14e7, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x14e8, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x14e7, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x14e8, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x14e7, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x14e8, 4), (stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x14e7, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x14e8, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x14e7, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x14e8, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x14e7, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x14e8, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x14e7, 4)]
[ ---  CALL (ram, 0x1e9620, 8) , (unique, 0x10001f76, 8), (unique, 0x10001f76, 8) CAST (register, 0x8, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x14ea, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x14e8, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001478, 8) , (const, 0x0, 8), (unique, 0x10001478, 8) PTRSUB (register, 0x8, 8) , (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x267926, 1)]
[ ---  CBRANCH (ram, 0x268746, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x7d, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0xb8, 8)]
[(register, 0x10, 8) COPY (const, 0x0, 8)]
[(unique, 0x10001d37, 8) COPY (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb8, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[(register, 0x10, 8) MULTIEQUAL (register, 0x10, 8) , (register, 0x10, 8) , (register, 0x10, 8) , (unique, 0x3100, 8) , (register, 0x10, 8)]
[(unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0xb8, 8), (register, 0xb8, 8) MULTIEQUAL (unique, 0x10001d37, 8) , (register, 0xb8, 8) , (register, 0xb8, 8) , (register, 0xb8, 8) , (register, 0xb8, 8)]
[(unique, 0x10000d2a, 8) MULTIEQUAL (register, 0xb8, 8) , (register, 0xb8, 8)]
[ ---  CBRANCH (ram, 0x2686b6, 1) , (unique, 0x10000d29, 1), (unique, 0x10000d29, 1) INT_EQUAL (unique, 0x10000d28, 1) , (const, 0x0, 1), (unique, 0x10000d28, 1) MULTIEQUAL (unique, 0xbb00, 1) , (unique, 0xbb00, 1)]
[ ---  CBRANCH (ram, 0x268699, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x10000d28, 1) , (const, 0x5c, 1)]
[ ---  CBRANCH (ram, 0x268700, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xfffffffffffffaf0, 1) , (const, 0x0, 1)]
[ ---  CBRANCH (ram, 0x2686b6, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0x10000d2a, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001f7e, 8) , (unique, 0x10000e98, 8), (unique, 0x10001f7e, 8) CAST (register, 0x20, 8), (unique, 0x10000e98, 8) PTRSUB (const, 0x0, 8) , (const, 0x2686d5, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x29c, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x29b, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x29c, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x29b, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x29c, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x29b, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x29c, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x29b, 4)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x29c, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x29b, 4)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x29c, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x29b, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x29c, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x29b, 4)]
[(stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x29c, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x29b, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x29c, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x29b, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x29c, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x29b, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x29c, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x29b, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x29c, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x29b, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x29c, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x29b, 4)]
[ ---  CALL (ram, 0x1303d0, 8) , (unique, 0x10000ea8, 8) , (unique, 0x10000ea0, 8) , (const, 0x1c8, 4) , (unique, 0x10000eb8, 8), (unique, 0x10000eb8, 8) COPY (const, 0x2bb540, 8), (unique, 0x10000ea8, 8) COPY (const, 0x2b5497, 8), (unique, 0x10000ea0, 8) COPY (const, 0x2b5473, 8)]
[(ram, 0x4eae68, 8) COPY (ram, 0x4eae68, 8), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x29c, 4)]
[ ---  RETURN (const, 0x1, 4)]
[(register, 0xb8, 8) PTRADD (unique, 0x10000d2a, 8) , (const, 0x2, 8) , (const, 0x1, 8)]
[ ---  BRANCH (ram, 0x268688, 1)]
[ ---  CBRANCH (ram, 0x2686d8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x10000d28, 1) , (const, 0x7d, 1)]
[(unique, 0x3100, 8) INT_ADD (register, 0x10, 8) , (const, 0xffffffffffffffff, 8)]
[ ---  CBRANCH (ram, 0x268622, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x10, 8) , (const, 0x0, 8)]
[(register, 0xb8, 8) PTRADD (unique, 0x10000d2a, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[ ---  BRANCH (ram, 0x268688, 1)]
[ ---  CBRANCH (ram, 0x2686f0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x10000d28, 1) , (const, 0x2c, 1)]
[(register, 0xb8, 8) PTRADD (unique, 0x10000d2a, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x268688, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x10000d28, 1) , (const, 0x7b, 1)]
[(register, 0x10, 8) INT_ADD (register, 0x10, 8) , (const, 0x1, 8)]
[ ---  BRANCH (ram, 0x268688, 1)]
[ ---  CBRANCH (ram, 0x268622, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x10, 8) , (const, 0x0, 8)]
[(unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0xb8, 8), (register, 0xb8, 8) PTRADD (unique, 0x10000d2a, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[(stack, 0xfffffffffffffaf8, 4) SUBPIECE (stack, 0xfffffffffffffaf8, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x268f26, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xfffffffffffffb00, 4) , (const, 0x0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001f86, 8) , (const, 0x268f32, 8), (unique, 0x10001f86, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x14c3, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x14c3, 4)]
[(stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x14c3, 4), (stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x14c2, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x14c3, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x14c2, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x14c3, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x14c2, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x14c3, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x14c2, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x14c3, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x14c2, 4)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x14c3, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x14c2, 4)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x14c3, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x14c2, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x14c3, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x14c2, 4)]
[(stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x14c3, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x14c2, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x14c3, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x14c2, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x14c3, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x14c2, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x14c3, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x14c2, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x14c3, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x14c2, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x14c3, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x14c2, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x14c3, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x14c2, 4)]
[(stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x14c3, 4), (stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x14c2, 4)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x14c3, 4), (stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x14c2, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x14c3, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x14c2, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x14c3, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x14c2, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x14c3, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x14c2, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x14c3, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x14c2, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x14c3, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x14c2, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x14c3, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x14c2, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x14c3, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x14c2, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x14c3, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x14c2, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x14c3, 4), (stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x14c2, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x14c3, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x14c2, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x14c3, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x14c2, 4)]
[(stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0x14c3, 4), (stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0x14c2, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x14c3, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x14c2, 4)]
[ ---  CALL (ram, 0x1212c8, 8) , (unique, 0x10001abb, 8)]
[ ---  BRANCH (ram, 0x26875b, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbc0, 4) MULTIEQUAL (stack, 0xfffffffffffffbc0, 4) , (stack, 0xfffffffffffffbc0, 4)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb98, 8) MULTIEQUAL (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8)]
[(stack, 0xfffffffffffffb94, 4) MULTIEQUAL (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4)]
[(stack, 0xfffffffffffffb90, 4) MULTIEQUAL (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4)]
[(stack, 0xfffffffffffffb8c, 4) MULTIEQUAL (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4)]
[(stack, 0xfffffffffffffb88, 4) MULTIEQUAL (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4)]
[(stack, 0xfffffffffffffb84, 4) MULTIEQUAL (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4)]
[(stack, 0xfffffffffffffb80, 4) MULTIEQUAL (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4)]
[(stack, 0xfffffffffffffb7c, 4) MULTIEQUAL (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb60, 8) MULTIEQUAL (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8)]
[(stack, 0xfffffffffffffb58, 8) MULTIEQUAL (stack, 0xfffffffffffffb58, 8) , (stack, 0xfffffffffffffb58, 8)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb20, 8) MULTIEQUAL (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae0, 8) MULTIEQUAL (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x267926, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (stack, 0xfffffffffffffae8, 8), (unique, 0xbd80, 8) CAST (unique, 0x10001f8e, 8), (unique, 0x10001f8e, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10001480, 8), (unique, 0x10001480, 8) PTRSUB (register, 0x8, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(unique, 0x10001d7b, 4) COPY (stack, 0xfffffffffffffaf8, 4)]
[ ---  CBRANCH (ram, 0x26798e, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x10000c16, 8) , (const, 0x0, 8), (unique, 0x10000c16, 8) INT_AND (unique, 0x10001f96, 8) , (const, 0x810, 8), (unique, 0x10001f96, 8) CAST (unique, 0x10001963, 8)]
[(stack, 0xfffffffffffffb44, 4) COPY (const, 0x3, 4)]
[ ---  BRANCH (ram, 0x267926, 1)]
[ ---  CBRANCH (ram, 0x267f90, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb8, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x268cd6, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xfffffffffffffb00, 4) , (const, 0x0, 4), (stack, 0xfffffffffffffb00, 4) SUBPIECE (stack, 0xfffffffffffffb00, 8) , (const, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001f9e, 8) , (const, 0x268ce2, 8), (unique, 0x10001f9e, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x15c4, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x15c4, 4)]
[(stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x15c4, 4), (stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x15c3, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x15c4, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x15c3, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x15c4, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x15c3, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x15c4, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x15c3, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x15c4, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x15c3, 4)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x15c4, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x15c3, 4)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x15c4, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x15c3, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x15c4, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x15c3, 4)]
[(stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x15c4, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x15c3, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x15c4, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x15c3, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x15c4, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x15c3, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x15c4, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x15c3, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x15c4, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x15c3, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x15c4, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x15c3, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x15c4, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x15c3, 4)]
[(stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x15c4, 4), (stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x15c3, 4)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x15c4, 4), (stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x15c3, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x15c4, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x15c3, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x15c4, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x15c3, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x15c4, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x15c3, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x15c4, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x15c3, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x15c4, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x15c3, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x15c4, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x15c3, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x15c4, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x15c3, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x15c4, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x15c3, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x15c4, 4), (stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x15c3, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x15c4, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x15c3, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x15c4, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x15c3, 4)]
[(stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0x15c4, 4), (stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0x15c3, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x15c4, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x15c3, 4)]
[ ---  CALL (ram, 0x1212c8, 8) , (unique, 0x10001a5b, 8)]
[ ---  BRANCH (ram, 0x267fa0, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbc0, 4) MULTIEQUAL (stack, 0xfffffffffffffbc0, 4) , (stack, 0xfffffffffffffbc0, 4)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb98, 8) MULTIEQUAL (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8)]
[(stack, 0xfffffffffffffb94, 4) MULTIEQUAL (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4)]
[(stack, 0xfffffffffffffb90, 4) MULTIEQUAL (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4)]
[(stack, 0xfffffffffffffb8c, 4) MULTIEQUAL (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4)]
[(stack, 0xfffffffffffffb88, 4) MULTIEQUAL (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4)]
[(stack, 0xfffffffffffffb84, 4) MULTIEQUAL (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4)]
[(stack, 0xfffffffffffffb80, 4) MULTIEQUAL (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4)]
[(stack, 0xfffffffffffffb7c, 4) MULTIEQUAL (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb60, 8) MULTIEQUAL (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8)]
[(stack, 0xfffffffffffffb58, 8) MULTIEQUAL (stack, 0xfffffffffffffb58, 8) , (stack, 0xfffffffffffffb58, 8)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb20, 8) MULTIEQUAL (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae0, 8) MULTIEQUAL (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xa0, 4) INT_AND (register, 0xa0, 4) , (const, 0xfffffbff, 4)]
[(unique, 0xbd80, 8) CAST (unique, 0x10001fa6, 8), (unique, 0x10001fa6, 8) LOAD (const, 0x1b1, 4) , (unique, 0x100011e0, 8), (unique, 0x100011e0, 8) PTRSUB (register, 0x8, 8) , (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x26798e, 1)]
[(unique, 0x10001d5f, 8) COPY (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb8, 8) , (const, 0x2, 8) , (const, 0x1, 8)]
[ ---  BRANCH (ram, 0x2678b1, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbc0, 4) MULTIEQUAL (stack, 0xfffffffffffffbc0, 4) , (stack, 0xfffffffffffffbc0, 4) , (stack, 0xfffffffffffffbc0, 4) , (stack, 0xfffffffffffffbc0, 4)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb98, 8) MULTIEQUAL (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8)]
[(stack, 0xfffffffffffffb94, 4) MULTIEQUAL (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4)]
[(stack, 0xfffffffffffffb90, 4) MULTIEQUAL (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4)]
[(stack, 0xfffffffffffffb8c, 4) MULTIEQUAL (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4)]
[(stack, 0xfffffffffffffb88, 4) MULTIEQUAL (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4)]
[(stack, 0xfffffffffffffb84, 4) MULTIEQUAL (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4)]
[(stack, 0xfffffffffffffb80, 4) MULTIEQUAL (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4)]
[(stack, 0xfffffffffffffb7c, 4) MULTIEQUAL (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb60, 8) MULTIEQUAL (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8)]
[(stack, 0xfffffffffffffb58, 8) MULTIEQUAL (stack, 0xfffffffffffffb58, 8) , (stack, 0xfffffffffffffb58, 8) , (stack, 0xfffffffffffffb58, 8) , (stack, 0xfffffffffffffb58, 8)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb20, 8) MULTIEQUAL (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae0, 8) MULTIEQUAL (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0xbd80, 8) CAST (unique, 0x10001fae, 8), (unique, 0x10001fae, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000f48, 8), (unique, 0x10000f48, 8) PTRSUB (register, 0x8, 8) , (const, 0x0, 8)]
[(stack, 0xfffffffffffffb28, 8) COPY (const, 0x0, 8)]
[(unique, 0x10001d77, 4) COPY (register, 0xa0, 4)]
[(register, 0xa0, 4) MULTIEQUAL (unique, 0x10001d7b, 4) , (register, 0xa0, 4) , (unique, 0x10001d77, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001fc6, 8) , (const, 0x2679b1, 8), (unique, 0x10001fc6, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8), (register, 0x20, 8) MULTIEQUAL (unique, 0x10001e22, 8) , (unique, 0x10001e22, 8) , (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x358, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x358, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x358, 4), (stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x357, 4), (stack, 0xfffffffffffffae0, 8) MULTIEQUAL (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x358, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x357, 4), (stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x358, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x357, 4), (stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x358, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x357, 4), (stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x358, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x357, 4), (stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x358, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x357, 4), (stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x358, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x357, 4), (stack, 0xfffffffffffffb10, 8) COPY (unique, 0x3400, 8), (unique, 0x3400, 8) INT_ADD (unique, 0x10001fbe, 8) , (unique, 0xbd80, 8), (unique, 0x10001fbe, 8) CAST (unique, 0x10000f58, 8), (unique, 0x10000f58, 8) PTRSUB (register, 0x10, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0x8, 8) , (const, 0x10, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8) , (unique, 0xbd80, 8)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x358, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x357, 4), (stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x358, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x357, 4), (stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x358, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x357, 4), (stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x358, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x357, 4), (stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x358, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x357, 4), (stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x358, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x357, 4), (stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x358, 4), (stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x357, 4), (stack, 0xfffffffffffffb58, 8) MULTIEQUAL (stack, 0xfffffffffffffb58, 8) , (stack, 0xfffffffffffffb58, 8) , (stack, 0xfffffffffffffb58, 8)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x358, 4), (stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x357, 4), (stack, 0xfffffffffffffb60, 8) MULTIEQUAL (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x358, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x357, 4), (stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x358, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x357, 4), (stack, 0xfffffffffffffb7c, 4) MULTIEQUAL (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x358, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x357, 4), (stack, 0xfffffffffffffb80, 4) MULTIEQUAL (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x358, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x357, 4), (stack, 0xfffffffffffffb84, 4) MULTIEQUAL (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x358, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x357, 4), (stack, 0xfffffffffffffb88, 4) MULTIEQUAL (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x358, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x357, 4), (stack, 0xfffffffffffffb8c, 4) MULTIEQUAL (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x358, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x357, 4), (stack, 0xfffffffffffffb90, 4) MULTIEQUAL (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x358, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x357, 4), (stack, 0xfffffffffffffb94, 4) MULTIEQUAL (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x358, 4), (stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x357, 4), (stack, 0xfffffffffffffb98, 8) MULTIEQUAL (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x358, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x357, 4), (stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x358, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x357, 4), (stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0x358, 4), (stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0x357, 4), (stack, 0xfffffffffffffbc0, 4) MULTIEQUAL (stack, 0xfffffffffffffbc0, 4) , (stack, 0xfffffffffffffbc0, 4) , (stack, 0xfffffffffffffbc0, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x358, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x357, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(unique, 0x10001a63, 8) COPY (unique, 0x10001fd6, 8), (unique, 0x10001fd6, 8) CAST (stack, 0xfffffffffffffb30, 8), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x358, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x357, 4), (stack, 0xfffffffffffffb30, 8) COPY (unique, 0x10001fb6, 8), (unique, 0x10001fb6, 8) CAST (register, 0x10, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8) , (unique, 0xbd80, 8)]
[(stack, 0xfffffffffffffb24, 4) SUBPIECE (stack, 0xfffffffffffffb20, 8) , (const, 0x4, 8), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x358, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x357, 4), (stack, 0xfffffffffffffb20, 8) MULTIEQUAL (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8)]
[(unique, 0x10001e02, 8) COPY (register, 0x20, 8), (register, 0x20, 8) MULTIEQUAL (unique, 0x10001e22, 8) , (unique, 0x10001e22, 8) , (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x267c38, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10001fce, 8), (unique, 0x10001fce, 8) CALL (ram, 0x121270, 8) , (register, 0x38, 8) , (const, 0x2f, 4)]
[(unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0x38, 8)]
[ ---  CBRANCH (ram, 0x267c4e, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x58e00, 4) , (const, 0x0, 4), (unique, 0x58e00, 4) INT_AND (register, 0xa0, 4) , (const, 0x5000, 4)]
[ ---  CBRANCH (ram, 0x2684f4, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x7e, 1)]
[ ---  CBRANCH (ram, 0x268c9d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x0, 1)]
[(stack, 0xfffffffffffffb20, 8) INT_LEFT (unique, 0x10000ad0, 8) , (const, 0x20, 4), (unique, 0x10000ad0, 8) INT_ZEXT (stack, 0xfffffffffffffb24, 4)]
[(register, 0xb8, 4) COPY (const, 0x0, 4)]
[(stack, 0xfffffffffffffb18, 8) COPY (const, 0x0, 8)]
[(stack, 0xfffffffffffffb30, 8) CAST (unique, 0x10001fde, 8), (unique, 0x10001fde, 8) PTRSUB (const, 0x0, 8) , (const, 0x2b57d8, 8)]
[(unique, 0x10001d2f, 8) COPY (unique, 0x10001fe6, 8), (unique, 0x10001fe6, 8) CAST (register, 0x38, 8)]
[(stack, 0xfffffffffffffb60, 8) COPY (const, 0x0, 8)]
[(register, 0x0, 4) INT_AND (register, 0xa0, 4) , (const, 0x10, 4)]
[(stack, 0xfffffffffffffb20, 8) INT_LEFT (unique, 0x10000c6f, 8) , (const, 0x20, 4), (unique, 0x10000c6f, 8) INT_ZEXT (stack, 0xfffffffffffffb24, 4)]
[(stack, 0xfffffffffffffb30, 8) COPY (const, 0x0, 8)]
[(stack, 0xfffffffffffffb08, 8) COPY (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x10001fee, 8), (unique, 0x10001fee, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffb58, 8)]
[ ---  BRANCH (ram, 0x26814b, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001ff6, 8) , (const, 0x2684fc, 8), (unique, 0x10001ff6, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x14b2, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x14b2, 4)]
[(stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x14b2, 4), (stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x14b1, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x14b2, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x14b1, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x14b2, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x14b1, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x14b2, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x14b1, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x14b2, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x14b1, 4)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x14b2, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x14b1, 4)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x14b2, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x14b1, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x14b2, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x14b1, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x14b2, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x14b1, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x14b2, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x14b1, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x14b2, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x14b1, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x14b2, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x14b1, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x14b2, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x14b1, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x14b2, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x14b1, 4)]
[(stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x14b2, 4), (stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x14b1, 4)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x14b2, 4), (stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x14b1, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x14b2, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x14b1, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x14b2, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x14b1, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x14b2, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x14b1, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x14b2, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x14b1, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x14b2, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x14b1, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x14b2, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x14b1, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x14b2, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x14b1, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x14b2, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x14b1, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x14b2, 4), (stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x14b1, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x14b2, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x14b1, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x14b2, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x14b1, 4)]
[(stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0x14b2, 4), (stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0x14b1, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x14b2, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x14b1, 4)]
[(stack, 0xfffffffffffffb30, 8) COPY (unique, 0x10002006, 8), (unique, 0x10002006, 8) CAST (register, 0x38, 8)]
[(stack, 0xfffffffffffffb18, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10001ffe, 8), (unique, 0x10001ffe, 8) CALL (ram, 0x121100, 8) , (register, 0x38, 8)]
[(stack, 0xfffffffffffffb20, 8) INT_AND (stack, 0xfffffffffffffb20, 8) , (const, 0xffffffff00000000, 8), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x14b2, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x14b1, 4)]
[ ---  BRANCH (ram, 0x267da0, 1)]
[ ---  CBRANCH (ram, 0x267fc4, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x1000200e, 8) , (register, 0x0, 8), (unique, 0x1000200e, 8) CAST (register, 0x38, 8)]
[ ---  CBRANCH (ram, 0x267faf, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10002016, 8), (unique, 0x10002016, 8) PTRADD (register, 0x38, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x2679da, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x5c, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0x38, 8)]
[ ---  CBRANCH (ram, 0x2679da, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x10000571, 4) , (const, 0x0, 4), (unique, 0x10000571, 4) INT_AND (register, 0xa0, 4) , (const, 0x40, 4)]
[(stack, 0xfffffffffffffb18, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x1000202e, 8), (unique, 0x1000202e, 8) INT_SUB (unique, 0x1000201e, 8) , (unique, 0x10002026, 8), (unique, 0x10002026, 8) CAST (register, 0x38, 8), (unique, 0x1000201e, 8) CAST (register, 0x0, 8)]
[(register, 0x0, 8) CAST (unique, 0x1000203e, 8), (unique, 0x1000203e, 8) INT_ADD (stack, 0xfffffffffffffb28, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) INT_ADD (unique, 0x10002036, 8) , (const, 0x1, 8), (unique, 0x10002036, 8) CAST (unique, 0x10000f68, 8), (unique, 0x10000f68, 8) PTRSUB (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x1000202e, 8), (unique, 0x1000202e, 8) INT_SUB (unique, 0x1000201e, 8) , (unique, 0x10002026, 8), (unique, 0x10002026, 8) CAST (register, 0x38, 8), (unique, 0x1000201e, 8) CAST (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x267f16, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_CARRY (stack, 0xfffffffffffffb28, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) INT_ADD (unique, 0x10002036, 8) , (const, 0x1, 8), (unique, 0x10002036, 8) CAST (unique, 0x10000f68, 8), (unique, 0x10000f68, 8) PTRSUB (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x1000202e, 8), (unique, 0x1000202e, 8) INT_SUB (unique, 0x1000201e, 8) , (unique, 0x10002026, 8), (unique, 0x10002026, 8) CAST (register, 0x38, 8), (unique, 0x1000201e, 8) CAST (register, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000204e, 8) , (const, 0x267a0a, 8), (unique, 0x1000204e, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x39f, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x39f, 4)]
[(stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x39f, 4), (stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x39e, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x39f, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x39e, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x39f, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x39e, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x39f, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x39e, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x39f, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x39e, 4)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x39f, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x39e, 4)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x39f, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x39e, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x39f, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x39e, 4)]
[(stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x39f, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x39e, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x39f, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x39e, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x39f, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x39e, 4), (stack, 0xfffffffffffffb30, 8) COPY (unique, 0x10002046, 8), (unique, 0x10002046, 8) CAST (register, 0x0, 8)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x39f, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x39e, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x39f, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x39e, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x39f, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x39e, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x39f, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x39e, 4)]
[(stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x39f, 4), (stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x39e, 4)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x39f, 4), (stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x39e, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x39f, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x39e, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x39f, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x39e, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x39f, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x39e, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x39f, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x39e, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x39f, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x39e, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x39f, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x39e, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x39f, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x39e, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x39f, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x39e, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x39f, 4), (stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x39e, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x39f, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x39e, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x39f, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x39e, 4)]
[(stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0x39f, 4), (stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0x39e, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x39f, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x39e, 4)]
[ ---  CBRANCH (ram, 0x267a1f, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x2300b0, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x267f16, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (const, 0x1000, 8) , (stack, 0xfffffffffffffb30, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10002056, 8) , (const, 0x267f1e, 8), (unique, 0x10002056, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1411, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x1411, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x1411, 4), (stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x1410, 4), (stack, 0xfffffffffffffae0, 8) MULTIEQUAL (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x1411, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x1410, 4), (stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x1411, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x1410, 4), (stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x1411, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x1410, 4), (stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x1411, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x1410, 4), (stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x1411, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x1410, 4), (stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x1411, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x1410, 4), (stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x1411, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x1410, 4), (stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x1411, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x1410, 4), (stack, 0xfffffffffffffb20, 8) MULTIEQUAL (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x1411, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x1410, 4), (stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x1411, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x1410, 4), (stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x1411, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x1410, 4), (stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x1411, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x1410, 4), (stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x1411, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x1410, 4), (stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x1411, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x1410, 4), (stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x1411, 4), (stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x1410, 4), (stack, 0xfffffffffffffb58, 8) MULTIEQUAL (stack, 0xfffffffffffffb58, 8) , (stack, 0xfffffffffffffb58, 8)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x1411, 4), (stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x1410, 4), (stack, 0xfffffffffffffb60, 8) MULTIEQUAL (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x1411, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x1410, 4), (stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x1411, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x1410, 4), (stack, 0xfffffffffffffb7c, 4) MULTIEQUAL (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x1411, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x1410, 4), (stack, 0xfffffffffffffb80, 4) MULTIEQUAL (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x1411, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x1410, 4), (stack, 0xfffffffffffffb84, 4) MULTIEQUAL (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x1411, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x1410, 4), (stack, 0xfffffffffffffb88, 4) MULTIEQUAL (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x1411, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x1410, 4), (stack, 0xfffffffffffffb8c, 4) MULTIEQUAL (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x1411, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x1410, 4), (stack, 0xfffffffffffffb90, 4) MULTIEQUAL (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x1411, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x1410, 4), (stack, 0xfffffffffffffb94, 4) MULTIEQUAL (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x1411, 4), (stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x1410, 4), (stack, 0xfffffffffffffb98, 8) MULTIEQUAL (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x1411, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x1410, 4), (stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x1411, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x1410, 4), (stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0x1411, 4), (stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0x1410, 4), (stack, 0xfffffffffffffbc0, 4) MULTIEQUAL (stack, 0xfffffffffffffbc0, 4) , (stack, 0xfffffffffffffbc0, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1411, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1410, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffb30, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x1000205e, 8), (unique, 0x1000205e, 8) CALL (ram, 0x1212c0, 8) , (unique, 0x3100, 8)]
[ ---  CBRANCH (ram, 0x26791c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x1000205e, 8), (unique, 0x1000205e, 8) CALL (ram, 0x1212c0, 8) , (unique, 0x3100, 8)]
[(stack, 0xfffffffffffffb20, 8) INT_ADD (unique, 0x100018d3, 8) , (const, 0x1, 4), (unique, 0x100018d3, 8) INT_LEFT (unique, 0x100018cb, 8) , (const, 0x20, 8), (unique, 0x100018cb, 8) INT_SEXT (unique, 0x10002066, 4), (unique, 0x10002066, 4) CAST (stack, 0xfffffffffffffb24, 4), (stack, 0xfffffffffffffb24, 4) SUBPIECE (stack, 0xfffffffffffffb20, 8) , (const, 0x4, 8)]
[ ---  BRANCH (ram, 0x267a54, 1)]
[(stack, 0xfffffffffffffb30, 8) COPY (register, 0x10, 8), (register, 0x10, 8) CAST (unique, 0x10002072, 8), (unique, 0x10002072, 8) INT_AND (unique, 0x1000206a, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x1000206a, 8) CAST (unique, 0x3800, 8), (unique, 0x3800, 8) PTRADD (register, 0x20, 8) , (unique, 0x10000f80, 8) , (const, 0x1, 8), (unique, 0x10000f80, 8) INT_ADD (unique, 0x10000421, 8) , (const, 0xf, 8), (unique, 0x10000421, 8) INT_2COMP (register, 0xb8, 8), (register, 0xb8, 8) INT_AND (register, 0xb8, 8) , (const, 0xfffffffffffffff0, 8), (register, 0xb8, 8) PTRSUB (register, 0x0, 8) , (const, 0x1f, 8)]
[(stack, 0xfffffffffffffb28, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) INT_ADD (stack, 0xfffffffffffffb28, 8) , (register, 0xb8, 8), (register, 0xb8, 8) INT_AND (register, 0xb8, 8) , (const, 0xfffffffffffffff0, 8), (register, 0xb8, 8) PTRSUB (register, 0x0, 8) , (const, 0x1f, 8)]
[(stack, 0xfffffffffffffb20, 8) INT_AND (stack, 0xfffffffffffffb20, 8) , (const, 0xffffffff00000000, 8)]
[(unique, 0x10001c87, 8) COPY (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (unique, 0x10000421, 8) , (const, 0x1, 8), (unique, 0x10000421, 8) INT_2COMP (register, 0xb8, 8), (register, 0xb8, 8) INT_AND (register, 0xb8, 8) , (const, 0xfffffffffffffff0, 8), (register, 0xb8, 8) PTRSUB (register, 0x0, 8) , (const, 0x1f, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000207a, 8) , (const, 0x267a66, 8), (unique, 0x1000207a, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8), (register, 0x20, 8) MULTIEQUAL (unique, 0x10001c87, 8) , (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x40a, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x40a, 4), (stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x409, 4), (stack, 0xfffffffffffffae0, 8) MULTIEQUAL (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x40a, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x409, 4), (stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x40a, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x409, 4), (stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x40a, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x409, 4), (stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x40a, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x409, 4), (stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x40a, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x409, 4), (stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x40a, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x409, 4), (stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x40a, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x409, 4), (stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x40a, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x409, 4), (stack, 0xfffffffffffffb20, 8) MULTIEQUAL (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x40a, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x409, 4), (stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x40a, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x409, 4), (stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x40a, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x409, 4), (stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x40a, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x409, 4), (stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x40a, 4), (stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x409, 4), (stack, 0xfffffffffffffb58, 8) MULTIEQUAL (stack, 0xfffffffffffffb58, 8) , (stack, 0xfffffffffffffb58, 8)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x40a, 4), (stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x409, 4), (stack, 0xfffffffffffffb60, 8) MULTIEQUAL (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x40a, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x409, 4), (stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x40a, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x409, 4), (stack, 0xfffffffffffffb7c, 4) MULTIEQUAL (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x40a, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x409, 4), (stack, 0xfffffffffffffb80, 4) MULTIEQUAL (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x40a, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x409, 4), (stack, 0xfffffffffffffb84, 4) MULTIEQUAL (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x40a, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x409, 4), (stack, 0xfffffffffffffb88, 4) MULTIEQUAL (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x40a, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x409, 4), (stack, 0xfffffffffffffb8c, 4) MULTIEQUAL (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x40a, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x409, 4), (stack, 0xfffffffffffffb90, 4) MULTIEQUAL (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x40a, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x409, 4), (stack, 0xfffffffffffffb94, 4) MULTIEQUAL (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x40a, 4), (stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x409, 4), (stack, 0xfffffffffffffb98, 8) MULTIEQUAL (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x40a, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x409, 4), (stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x40a, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x409, 4), (stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0x40a, 4), (stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0x409, 4), (stack, 0xfffffffffffffbc0, 4) MULTIEQUAL (stack, 0xfffffffffffffbc0, 4) , (stack, 0xfffffffffffffbc0, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x40a, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x409, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(unique, 0x10001aeb, 8) COPY (stack, 0xfffffffffffffb38, 8), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x40a, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x409, 4), (stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(unique, 0x10001a6b, 8) COPY (stack, 0xfffffffffffffb30, 8), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x40a, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (unique, 0x10001daa, 8) , (const, 0x409, 4), (unique, 0x10001daa, 8) COPY (register, 0x38, 8), (register, 0x38, 8) MULTIEQUAL (register, 0x10, 8) , (register, 0x0, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x419, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x40a, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x0, 8) , (const, 0x0, 1), (register, 0x0, 8) CAST (unique, 0x1000208a, 8), (unique, 0x1000208a, 8) CALL (ram, 0x121230, 8) , (register, 0x38, 8) , (register, 0x38, 8) , (unique, 0x10002082, 8), (unique, 0x10002082, 8) CAST (unique, 0x10001a23, 8), (unique, 0x10001a23, 8) COPY (stack, 0xfffffffffffffb18, 8), (register, 0x38, 8) MULTIEQUAL (register, 0x10, 8) , (register, 0x0, 8), (stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(unique, 0x10001e0a, 8) COPY (register, 0x20, 8), (register, 0x20, 8) MULTIEQUAL (unique, 0x10001c87, 8) , (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x267b70, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000209a, 8), (unique, 0x1000209a, 8) INT_ADD (unique, 0x10002092, 8) , (const, 0x1, 8), (unique, 0x10002092, 8) CAST (unique, 0x10000f88, 8), (unique, 0x10000f88, 8) PTRSUB (register, 0x0, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x267b70, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (unique, 0x10001a23, 8) , (const, 0x2, 8)]
[(register, 0xb0, 8) CAST (unique, 0x100020aa, 8), (unique, 0x100020aa, 8) INT_ADD (unique, 0x100020a2, 8) , (const, 0x1, 8), (unique, 0x100020a2, 8) CAST (unique, 0x10001030, 8), (unique, 0x10001030, 8) PTRSUB (register, 0x0, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x267d90, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xb8, 4) , (const, 0x0, 4), (register, 0xb8, 4) INT_AND (register, 0xa0, 4) , (const, 0x5000, 4)]
[ ---  CBRANCH (ram, 0x268b2c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x7e, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x100020b2, 8), (unique, 0x100020b2, 8) CAST (unique, 0x10001130, 8), (unique, 0x10001130, 8) PTRSUB (stack, 0xfffffffffffffb30, 8) , (const, 0x0, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbc0, 4) MULTIEQUAL (stack, 0xfffffffffffffbc0, 4) , (stack, 0xfffffffffffffbc0, 4)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb98, 8) MULTIEQUAL (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8)]
[(stack, 0xfffffffffffffb94, 4) MULTIEQUAL (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4)]
[(stack, 0xfffffffffffffb90, 4) MULTIEQUAL (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4)]
[(stack, 0xfffffffffffffb8c, 4) MULTIEQUAL (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4)]
[(stack, 0xfffffffffffffb88, 4) MULTIEQUAL (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4)]
[(stack, 0xfffffffffffffb84, 4) MULTIEQUAL (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4)]
[(stack, 0xfffffffffffffb80, 4) MULTIEQUAL (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4)]
[(stack, 0xfffffffffffffb7c, 4) MULTIEQUAL (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb60, 8) MULTIEQUAL (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8)]
[(stack, 0xfffffffffffffb58, 8) MULTIEQUAL (stack, 0xfffffffffffffb58, 8) , (stack, 0xfffffffffffffb58, 8)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb20, 8) MULTIEQUAL (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae0, 8) MULTIEQUAL (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb0, 8) MULTIEQUAL (register, 0xb0, 8) , (register, 0x0, 8)]
[(register, 0x20, 8) MULTIEQUAL (unique, 0x10001e0a, 8) , (unique, 0x10001e02, 8)]
[(unique, 0x10001a93, 8) COPY (stack, 0xfffffffffffffb30, 8), (stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[ ---  CBRANCH (ram, 0x268a5d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100020c2, 8), (unique, 0x100020c2, 8) INT_ADD (unique, 0x100020ba, 8) , (const, 0x1, 8), (unique, 0x100020ba, 8) CAST (unique, 0x10001138, 8), (unique, 0x10001138, 8) PTRSUB (stack, 0xfffffffffffffb30, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[ ---  CBRANCH (ram, 0x268a5d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x2f, 1)]
[ ---  CBRANCH (ram, 0x26857b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x100004f0, 4) , (const, 0x0, 4), (unique, 0x100004f0, 4) INT_AND (register, 0xa0, 4) , (const, 0x40, 4)]
[ ---  CBRANCH (ram, 0x268a46, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x5c, 1)]
[ ---  CBRANCH (ram, 0x268a5d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100020d2, 8), (unique, 0x100020d2, 8) INT_ADD (unique, 0x100020ca, 8) , (const, 0x2, 8), (unique, 0x100020ca, 8) CAST (unique, 0x10001500, 8), (unique, 0x10001500, 8) PTRSUB (stack, 0xfffffffffffffb30, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x268583, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x2f, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100020da, 8) , (const, 0x268a69, 8), (unique, 0x100020da, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x111f, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x111f, 4)]
[(stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x111f, 4), (stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x111e, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x111f, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x111e, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x111f, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x111e, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x111f, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x111e, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x111f, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x111e, 4)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x111f, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x111e, 4)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x111f, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x111e, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x111f, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x111e, 4)]
[(stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x111f, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x111e, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x111f, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x111e, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x111f, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x111e, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x111f, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x111e, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x111f, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x111e, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x111f, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x111e, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x111f, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x111e, 4)]
[(stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x111f, 4), (stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x111e, 4)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x111f, 4), (stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x111e, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x111f, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x111e, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x111f, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x111e, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x111f, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x111e, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x111f, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x111e, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x111f, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x111e, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x111f, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x111e, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x111f, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x111e, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x111f, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x111e, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x111f, 4), (stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x111e, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x111f, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x111e, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x111f, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x111e, 4)]
[(stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0x111f, 4), (stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0x111e, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x111f, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x111e, 4)]
[(stack, 0xfffffffffffffb00, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x100020e2, 8), (unique, 0x100020e2, 8) CALL (ram, 0x1426e0, 8) , (unique, 0x10000eb0, 8), (unique, 0x10000eb0, 8) COPY (const, 0x2b54a4, 8)]
[ ---  CBRANCH (ram, 0x268b34, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x100020e2, 8), (unique, 0x100020e2, 8) CALL (ram, 0x1426e0, 8) , (unique, 0x10000eb0, 8), (unique, 0x10000eb0, 8) COPY (const, 0x2b54a4, 8)]
[ ---  CBRANCH (ram, 0x268b34, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x100020ea, 8), (unique, 0x100020ea, 8) CAST (unique, 0x10001510, 8), (unique, 0x10001510, 8) PTRSUB (register, 0x0, 8) , (const, 0x0, 8)]
[(stack, 0xfffffffffffffbb0, 8) COPY (const, 0x400, 8)]
[(stack, 0xfffffffffffffae8, 8) COPY (register, 0x8, 8)]
[(stack, 0xfffffffffffffaf8, 8) COPY (unique, 0x3200, 8), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb08, 8) COPY (unique, 0x3200, 8), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffba8, 8) COPY (unique, 0x100020fa, 8), (unique, 0x100020fa, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (unique, 0x10001854, 8) , (const, 0x10, 8), (unique, 0x10001854, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffaf0, 8) COPY (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x100020f2, 8), (unique, 0x100020f2, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffb58, 8)]
[ ---  BRANCH (ram, 0x268ba9, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000210a, 8) , (const, 0x268bb9, 8), (unique, 0x1000210a, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x12c7, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x12c7, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x12c7, 4), (stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x12c6, 4), (stack, 0xfffffffffffffae0, 8) MULTIEQUAL (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x12c7, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x12c6, 4), (stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x12c7, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x12c6, 4), (stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x12c7, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x12c6, 4), (stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x12c7, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x12c6, 4), (stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x12c7, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x12c6, 4), (stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x12c7, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x12c6, 4), (stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x12c7, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x12c6, 4), (stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x12c7, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x12c6, 4), (stack, 0xfffffffffffffb20, 8) MULTIEQUAL (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x12c7, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x12c6, 4), (stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x12c7, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x12c6, 4), (stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x12c7, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x12c6, 4), (stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x12c7, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x12c6, 4), (stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x12c7, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x12c6, 4), (stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x12c7, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x12c6, 4), (stack, 0xfffffffffffffb50, 8) COPY (const, 0x0, 8)]
[(stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x12c7, 4), (stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x12c6, 4), (stack, 0xfffffffffffffb58, 8) MULTIEQUAL (stack, 0xfffffffffffffb58, 8) , (stack, 0xfffffffffffffb58, 8)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x12c7, 4), (stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x12c6, 4), (stack, 0xfffffffffffffb60, 8) MULTIEQUAL (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x12c7, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x12c6, 4), (stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x12c7, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x12c6, 4), (stack, 0xfffffffffffffb7c, 4) MULTIEQUAL (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x12c7, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x12c6, 4), (stack, 0xfffffffffffffb80, 4) MULTIEQUAL (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x12c7, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x12c6, 4), (stack, 0xfffffffffffffb84, 4) MULTIEQUAL (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x12c7, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x12c6, 4), (stack, 0xfffffffffffffb88, 4) MULTIEQUAL (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x12c7, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x12c6, 4), (stack, 0xfffffffffffffb8c, 4) MULTIEQUAL (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x12c7, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x12c6, 4), (stack, 0xfffffffffffffb90, 4) MULTIEQUAL (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x12c7, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x12c6, 4), (stack, 0xfffffffffffffb94, 4) MULTIEQUAL (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x12c7, 4), (stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x12c6, 4), (stack, 0xfffffffffffffb98, 8) MULTIEQUAL (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x12c7, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x12c6, 4), (stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0x12c7, 4), (stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0x12c6, 4), (stack, 0xfffffffffffffbc0, 4) MULTIEQUAL (stack, 0xfffffffffffffbc0, 4) , (stack, 0xfffffffffffffbc0, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x12c7, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x12c6, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(unique, 0x10001b37, 8) COPY (unique, 0x1000211a, 8), (unique, 0x1000211a, 8) CAST (stack, 0xfffffffffffffba8, 8), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x12c7, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x12c6, 4), (stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[ ---  CBRANCH (ram, 0x268b82, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x263360, 8) , (unique, 0x10002112, 8) , (unique, 0x10001b4f, 8), (unique, 0x10002112, 8) CAST (unique, 0x10001b2f, 8), (unique, 0x10001b2f, 8) COPY (unique, 0x10002102, 8), (unique, 0x10002102, 8) CAST (stack, 0xfffffffffffffba8, 8), (unique, 0x10001b4f, 8) COPY (stack, 0xfffffffffffffbb0, 8), (stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8), (stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10002122, 8) , (const, 0x268bcc, 8), (unique, 0x10002122, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10002142, 8) , (const, 0x268bf4, 8), (unique, 0x10002142, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x12fb, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x12d9, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x12fb, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x12d9, 4)]
[(stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x12fb, 4), (stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x12fa, 4), (stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x12d9, 4), (stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x12d8, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x12fb, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x12fa, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x12d9, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x12d8, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x12fb, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x12fa, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x12d9, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x12d8, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x12fb, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x12fa, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x12d9, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x12d8, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x12fb, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x12fa, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x12d9, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x12d8, 4)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x12fb, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x12fa, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x12d9, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x12d8, 4)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x12fb, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x12fa, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x12d9, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x12d8, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x12fb, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x12fa, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x12d9, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x12d8, 4)]
[(stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x12fb, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x12fa, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x12d9, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x12d8, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x12fb, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x12fa, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x12d9, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x12d8, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x12fb, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x12fa, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x12d9, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x12d8, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x12fb, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x12fa, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x12d9, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x12d8, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x12fb, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x12fa, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x12d9, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x12d8, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x12fb, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x12fa, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x12d9, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x12d8, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x12fb, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x12fa, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x12d9, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x12d8, 4)]
[(stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x12fb, 4), (stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x12fa, 4), (stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x12d9, 4), (stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x12d8, 4)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x12fb, 4), (stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x12fa, 4), (stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x12d9, 4), (stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x12d8, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x12fb, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x12fa, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x12d9, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x12d8, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x12fb, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x12fa, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x12d9, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x12d8, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x12fb, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x12fa, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x12d9, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x12d8, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x12fb, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x12fa, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x12d9, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x12d8, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x12fb, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x12fa, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x12d9, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x12d8, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x12fb, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x12fa, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x12d9, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x12d8, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x12fb, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x12fa, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x12d9, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x12d8, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x12fb, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x12fa, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x12d9, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x12d8, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x12fb, 4), (stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x12fa, 4), (stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x12d9, 4), (stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x12d8, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x12fb, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x12fa, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x12d9, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x12d8, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x12fb, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x12fa, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x12d9, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x12d8, 4)]
[(stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0x12fb, 4), (stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0x12fa, 4), (stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0x12d9, 4), (stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0x12d8, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x12fb, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x12fa, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x12d9, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x12d8, 4)]
[(register, 0x0, 4) CALL (ram, 0x1e3810, 8) , (unique, 0x1000214a, 8) , (unique, 0x10002152, 8) , (unique, 0x3400, 8) , (register, 0x8, 8) , (unique, 0x10001983, 8), (unique, 0x10002152, 8) CAST (unique, 0x1000194b, 8), (unique, 0x1000214a, 8) CAST (unique, 0x10001b37, 8), (register, 0x8, 8) INT_SUB (stack, 0xfffffffffffffbb0, 8) , (register, 0x0, 8), (unique, 0x3400, 8) CAST (unique, 0x1000213a, 8), (unique, 0x1000213a, 8) INT_ADD (unique, 0x10002132, 8) , (register, 0x0, 8), (unique, 0x10002132, 8) CAST (unique, 0x10001b37, 8), (register, 0x0, 8) INT_ADD (register, 0x0, 8) , (const, 0x1, 8), (unique, 0x1000194b, 8) COPY (stack, 0xfffffffffffffaf0, 8), (unique, 0x10001983, 8) COPY (stack, 0xfffffffffffffaf8, 8), (register, 0x0, 8) CALL (ram, 0x121100, 8) , (unique, 0x1000212a, 8), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x12d9, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x12d9, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x12d9, 4), (unique, 0x1000212a, 8) CAST (unique, 0x10001b37, 8), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x12d8, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x12d8, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x12d8, 4)]
[ ---  BRANCH (ram, 0x268b82, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbc0, 4) MULTIEQUAL (stack, 0xfffffffffffffbc0, 4) , (stack, 0xfffffffffffffbc0, 4)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb98, 8) MULTIEQUAL (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8)]
[(stack, 0xfffffffffffffb94, 4) MULTIEQUAL (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4)]
[(stack, 0xfffffffffffffb90, 4) MULTIEQUAL (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4)]
[(stack, 0xfffffffffffffb8c, 4) MULTIEQUAL (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4)]
[(stack, 0xfffffffffffffb88, 4) MULTIEQUAL (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4)]
[(stack, 0xfffffffffffffb84, 4) MULTIEQUAL (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4)]
[(stack, 0xfffffffffffffb80, 4) MULTIEQUAL (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4)]
[(stack, 0xfffffffffffffb7c, 4) MULTIEQUAL (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb60, 8) MULTIEQUAL (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8)]
[(stack, 0xfffffffffffffb58, 8) MULTIEQUAL (stack, 0xfffffffffffffb58, 8) , (stack, 0xfffffffffffffb58, 8)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb20, 8) MULTIEQUAL (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae0, 8) MULTIEQUAL (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x10001933, 8) COPY (stack, 0xfffffffffffffae8, 8), (stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[ ---  CBRANCH (ram, 0x268dcc, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x22, 4), (register, 0x0, 4) MULTIEQUAL (register, 0x0, 4) , (register, 0x0, 4)]
[ ---  CBRANCH (ram, 0x26907d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4)]
[(register, 0xb8, 4) COPY (const, 0x0, 4)]
[(register, 0xb8, 4) COPY (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x2690c6, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x1000215a, 8) , (register, 0x0, 8), (unique, 0x1000215a, 8) CAST (stack, 0xfffffffffffffba8, 8), (register, 0x0, 8) PTRSUB (stack, 0xfffffffffffffb08, 8) , (const, 0x10, 8)]
[ ---  CBRANCH (ram, 0x268e3d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xfffffffffffffb00, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x268e3d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x10002162, 8), (unique, 0x10002162, 8) CAST (unique, 0x100016e8, 8), (unique, 0x100016e8, 8) PTRSUB (stack, 0xfffffffffffffb00, 8) , (const, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000217a, 8) , (const, 0x269099, 8), (unique, 0x1000217a, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x13e0, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x13e0, 4)]
[(stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x13e0, 4), (stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x13df, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x13e0, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x13df, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x13e0, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x13df, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x13e0, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x13df, 4)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x13e0, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x13df, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x13e0, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x13df, 4)]
[(stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x13e0, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x13df, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x13e0, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x13df, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x13e0, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x13df, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x13e0, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x13df, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x13e0, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x13df, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x13e0, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x13df, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x13e0, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x13df, 4)]
[(stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x13e0, 4), (stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x13df, 4)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x13e0, 4), (stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x13df, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x13e0, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x13df, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x13e0, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x13df, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x13e0, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x13df, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x13e0, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x13df, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x13e0, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x13df, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x13e0, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x13df, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x13e0, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x13df, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x13e0, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x13df, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x13e0, 4), (stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x13df, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x13e0, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x13df, 4)]
[(stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0x13e0, 4), (stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0x13df, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x13e0, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x13df, 4)]
[(stack, 0xfffffffffffffb00, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10002182, 8), (unique, 0x10002182, 8) CALL (ram, 0x19d9a0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (stack, 0xfffffffffffffb50, 8) , (const, 0x20, 8)]
[(unique, 0x10001d96, 4) COPY (stack, 0xfffffffffffffaf8, 4), (stack, 0xfffffffffffffaf8, 4) SUBPIECE (stack, 0xfffffffffffffaf8, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x13e0, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x13df, 4), (stack, 0xfffffffffffffaf8, 8) COPY (unique, 0x10000cc1, 8), (unique, 0x10000cc1, 8) CAST (unique, 0x10002172, 8), (unique, 0x10002172, 8) INT_AND (unique, 0x1000216a, 8) , (const, 0xffffffff00000000, 8), (unique, 0x1000216a, 8) CAST (stack, 0xfffffffffffffaf8, 8)]
[(unique, 0x10001d9e, 4) COPY (register, 0xb8, 4), (register, 0xb8, 4) COPY (const, 0x1, 4)]
[ ---  CBRANCH (ram, 0x268dfb, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x1000218a, 8) , (register, 0x0, 8), (unique, 0x1000218a, 8) CAST (stack, 0xfffffffffffffba8, 8), (register, 0x0, 8) PTRSUB (stack, 0xfffffffffffffb08, 8) , (const, 0x10, 8), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x13e0, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x13e0, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x13df, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x13df, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100021aa, 8) , (const, 0x268e06, 8), (unique, 0x100021aa, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1353, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x1353, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x1353, 4), (stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x1352, 4), (stack, 0xfffffffffffffae0, 8) MULTIEQUAL (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x1353, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x1352, 4), (stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x1353, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x1352, 4), (stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x1353, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x1352, 4), (stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x1353, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x1352, 4), (stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x1353, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x1352, 4), (stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x1353, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x1352, 4), (stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x1353, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x1352, 4), (stack, 0xfffffffffffffb20, 8) MULTIEQUAL (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x1353, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x1352, 4), (stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x1353, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x1352, 4), (stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x1353, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x1352, 4), (stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x1353, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x1352, 4), (stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x1353, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x1352, 4), (stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x1353, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x1352, 4), (stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x1353, 4), (stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x1352, 4), (stack, 0xfffffffffffffb58, 8) MULTIEQUAL (stack, 0xfffffffffffffb58, 8) , (stack, 0xfffffffffffffb58, 8)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x1353, 4), (stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x1352, 4), (stack, 0xfffffffffffffb60, 8) MULTIEQUAL (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x1353, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x1352, 4), (stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x1353, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x1352, 4), (stack, 0xfffffffffffffb7c, 4) MULTIEQUAL (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x1353, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x1352, 4), (stack, 0xfffffffffffffb80, 4) MULTIEQUAL (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x1353, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x1352, 4), (stack, 0xfffffffffffffb84, 4) MULTIEQUAL (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x1353, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x1352, 4), (stack, 0xfffffffffffffb88, 4) MULTIEQUAL (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x1353, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x1352, 4), (stack, 0xfffffffffffffb8c, 4) MULTIEQUAL (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x1353, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x1352, 4), (stack, 0xfffffffffffffb90, 4) MULTIEQUAL (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x1353, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x1352, 4), (stack, 0xfffffffffffffb94, 4) MULTIEQUAL (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x1353, 4), (stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x1352, 4), (stack, 0xfffffffffffffb98, 8) MULTIEQUAL (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x1353, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x1352, 4), (stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x1353, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x1352, 4), (stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0x1353, 4), (stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0x1352, 4), (stack, 0xfffffffffffffbc0, 4) MULTIEQUAL (stack, 0xfffffffffffffbc0, 4) , (stack, 0xfffffffffffffbc0, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1353, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1352, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CALL (ram, 0x1212c8, 8) , (unique, 0x10001b3f, 8), (unique, 0x10001b3f, 8) COPY (unique, 0x10002192, 8), (unique, 0x10002192, 8) CAST (stack, 0xfffffffffffffba8, 8), (stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb08, 4) SUBPIECE (stack, 0xfffffffffffffb08, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x1353, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x1352, 4), (stack, 0xfffffffffffffb08, 8) CAST (unique, 0x100021a2, 8), (unique, 0x100021a2, 8) INT_OR (unique, 0x10000c7b, 8) , (unique, 0x10000c83, 8), (unique, 0x10000c83, 8) INT_ZEXT (register, 0x10, 4), (unique, 0x10000c7b, 8) INT_AND (unique, 0x1000219a, 8) , (const, 0xffffffff00000000, 8), (unique, 0x1000219a, 8) CAST (stack, 0xfffffffffffffb08, 8), (register, 0x10, 4) MULTIEQUAL (register, 0x0, 4) , (stack, 0xfffffffffffffaf8, 4), (stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(unique, 0x10001d9a, 4) COPY (register, 0xb8, 4), (register, 0xb8, 4) MULTIEQUAL (register, 0xb8, 4) , (register, 0xb8, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbc0, 4) MULTIEQUAL (stack, 0xfffffffffffffbc0, 4) , (stack, 0xfffffffffffffbc0, 4)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb98, 8) MULTIEQUAL (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8)]
[(stack, 0xfffffffffffffb94, 4) MULTIEQUAL (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4)]
[(stack, 0xfffffffffffffb90, 4) MULTIEQUAL (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4)]
[(stack, 0xfffffffffffffb8c, 4) MULTIEQUAL (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4)]
[(stack, 0xfffffffffffffb88, 4) MULTIEQUAL (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4)]
[(stack, 0xfffffffffffffb84, 4) MULTIEQUAL (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4)]
[(stack, 0xfffffffffffffb80, 4) MULTIEQUAL (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4)]
[(stack, 0xfffffffffffffb7c, 4) MULTIEQUAL (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb60, 8) MULTIEQUAL (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8)]
[(stack, 0xfffffffffffffb58, 8) MULTIEQUAL (stack, 0xfffffffffffffb58, 8) , (stack, 0xfffffffffffffb58, 8)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb20, 8) MULTIEQUAL (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae0, 8) MULTIEQUAL (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb8, 4) MULTIEQUAL (unique, 0x10001d9a, 4) , (unique, 0x10001d9e, 4)]
[(unique, 0x100019bb, 8) COPY (stack, 0xfffffffffffffb00, 8), (stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[ ---  CBRANCH (ram, 0x268e1e, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x10, 4) , (const, 0x0, 4), (register, 0x10, 4) MULTIEQUAL (stack, 0xfffffffffffffb08, 4) , (unique, 0x10001d96, 4)]
[ ---  CBRANCH (ram, 0x26849f, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xfffffffffffffb00, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x269237, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xfffffffffffffb00, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x268a85, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x100021b2, 8), (unique, 0x100021b2, 8) CAST (unique, 0x100016f8, 8), (unique, 0x100016f8, 8) PTRSUB (stack, 0xfffffffffffffb00, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x268e3d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xb8, 4) , (const, 0x0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100021ba, 8) , (const, 0x268e3d, 8), (unique, 0x100021ba, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x138f, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x138f, 4)]
[(stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x138f, 4), (stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x138e, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x138f, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x138e, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x138f, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x138e, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x138f, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x138e, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x138f, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x138e, 4)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x138f, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x138e, 4)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x138f, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x138e, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x138f, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x138e, 4)]
[(stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x138f, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x138e, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x138f, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x138e, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x138f, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x138e, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x138f, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x138e, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x138f, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x138e, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x138f, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x138e, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x138f, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x138e, 4)]
[(stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x138f, 4), (stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x138e, 4)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x138f, 4), (stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x138e, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x138f, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x138e, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x138f, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x138e, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x138f, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x138e, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x138f, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x138e, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x138f, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x138e, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x138f, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x138e, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x138f, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x138e, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x138f, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x138e, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x138f, 4), (stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x138e, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x138f, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x138e, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x138f, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x138e, 4)]
[(stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0x138f, 4), (stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0x138e, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x138f, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x138e, 4)]
[ ---  CALL (ram, 0x1212c8, 8) , (unique, 0x100019bb, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbc0, 4) MULTIEQUAL (stack, 0xfffffffffffffbc0, 4) , (stack, 0xfffffffffffffbc0, 4) , (stack, 0xfffffffffffffbc0, 4) , (stack, 0xfffffffffffffbc0, 4)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb98, 8) MULTIEQUAL (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8)]
[(stack, 0xfffffffffffffb94, 4) MULTIEQUAL (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4)]
[(stack, 0xfffffffffffffb90, 4) MULTIEQUAL (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4)]
[(stack, 0xfffffffffffffb8c, 4) MULTIEQUAL (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4)]
[(stack, 0xfffffffffffffb88, 4) MULTIEQUAL (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4)]
[(stack, 0xfffffffffffffb84, 4) MULTIEQUAL (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4)]
[(stack, 0xfffffffffffffb80, 4) MULTIEQUAL (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4)]
[(stack, 0xfffffffffffffb7c, 4) MULTIEQUAL (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb60, 8) MULTIEQUAL (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8)]
[(stack, 0xfffffffffffffb58, 8) MULTIEQUAL (stack, 0xfffffffffffffb58, 8) , (stack, 0xfffffffffffffb58, 8) , (stack, 0xfffffffffffffb58, 8) , (stack, 0xfffffffffffffb58, 8)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb20, 8) MULTIEQUAL (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae0, 8) MULTIEQUAL (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x26843c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xb8, 4) , (const, 0x0, 4), (register, 0xb8, 4) INT_AND (register, 0xa0, 4) , (const, 0x4000, 4)]
[(stack, 0xfffffffffffffb00, 8) CAST (unique, 0x100021c2, 8), (unique, 0x100021c2, 8) PTRSUB (const, 0x0, 8) , (const, 0x2b5495, 8)]
[ ---  BRANCH (ram, 0x268a85, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100021ca, 8) , (const, 0x268b93, 8), (unique, 0x100021ca, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x130b, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x130b, 4)]
[(stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x130b, 4), (stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x130a, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x130b, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x130a, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x130b, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x130a, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x130b, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x130a, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x130b, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x130a, 4)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x130b, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x130a, 4)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x130b, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x130a, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x130b, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x130a, 4)]
[(stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x130b, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x130a, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x130b, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x130a, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x130b, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x130a, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x130b, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x130a, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x130b, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x130a, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x130b, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x130a, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x130b, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x130a, 4)]
[(stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x130b, 4), (stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x130a, 4)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x130b, 4), (stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x130a, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x130b, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x130a, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x130b, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x130a, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x130b, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x130a, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x130b, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x130a, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x130b, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x130a, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x130b, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x130a, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x130b, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x130a, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x130b, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x130a, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x130b, 4), (stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x130a, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x130b, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x130a, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x130b, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x130a, 4)]
[(stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0x130b, 4), (stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0x130a, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x130b, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x130a, 4)]
[ ---  CBRANCH (ram, 0x26849f, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 1) , (const, 0x0, 1), (register, 0x0, 1) CALL (ram, 0x19d0c0, 8) , (unique, 0x3200, 8)]
[(register, 0xb8, 4) COPY (const, 0x0, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbc0, 4) MULTIEQUAL (stack, 0xfffffffffffffbc0, 4) , (stack, 0xfffffffffffffbc0, 4) , (stack, 0xfffffffffffffbc0, 4) , (stack, 0xfffffffffffffbc0, 4)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb98, 8) MULTIEQUAL (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8)]
[(stack, 0xfffffffffffffb94, 4) MULTIEQUAL (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4)]
[(stack, 0xfffffffffffffb90, 4) MULTIEQUAL (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4)]
[(stack, 0xfffffffffffffb8c, 4) MULTIEQUAL (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4)]
[(stack, 0xfffffffffffffb88, 4) MULTIEQUAL (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4)]
[(stack, 0xfffffffffffffb84, 4) MULTIEQUAL (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4)]
[(stack, 0xfffffffffffffb80, 4) MULTIEQUAL (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4)]
[(stack, 0xfffffffffffffb7c, 4) MULTIEQUAL (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb60, 8) MULTIEQUAL (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8)]
[(stack, 0xfffffffffffffb58, 8) MULTIEQUAL (stack, 0xfffffffffffffb58, 8) , (stack, 0xfffffffffffffb58, 8) , (stack, 0xfffffffffffffb58, 8) , (stack, 0xfffffffffffffb58, 8)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb20, 8) MULTIEQUAL (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae0, 8) MULTIEQUAL (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb8, 4) MULTIEQUAL (register, 0xb8, 4) , (register, 0xb8, 4) , (register, 0xb8, 4) , (register, 0xb8, 4)]
[(register, 0x18, 8) MULTIEQUAL (register, 0x8, 8) , (unique, 0x10001933, 8) , (unique, 0x10001933, 8) , (unique, 0x10001933, 8)]
[(unique, 0x10001acb, 8) COPY (stack, 0xfffffffffffffb30, 8), (stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(unique, 0x100019ab, 8) COPY (stack, 0xfffffffffffffb00, 8), (stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[ ---  CBRANCH (ram, 0x268f37, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100021da, 8), (unique, 0x100021da, 8) INT_ADD (unique, 0x100021d2, 8) , (const, 0x1, 8), (unique, 0x100021d2, 8) CAST (unique, 0x10001518, 8), (unique, 0x10001518, 8) PTRSUB (stack, 0xfffffffffffffb30, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[ ---  CBRANCH (ram, 0x2691e1, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xfffffffffffffb20, 4) , (const, 0x0, 4), (stack, 0xfffffffffffffb20, 4) SUBPIECE (stack, 0xfffffffffffffb20, 8) , (const, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100021e2, 8) , (const, 0x2691e9, 8), (unique, 0x100021e2, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x117c, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x117c, 4)]
[(stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x117c, 4), (stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x117b, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x117c, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x117b, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x117c, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x117b, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x117c, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x117b, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x117c, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x117b, 4)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x117c, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x117b, 4)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x117c, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x117b, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x117c, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x117b, 4)]
[(stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x117c, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x117b, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x117c, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x117b, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x117c, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x117b, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x117c, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x117b, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x117c, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x117b, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x117c, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x117b, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x117c, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x117b, 4)]
[(stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x117c, 4), (stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x117b, 4)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x117c, 4), (stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x117b, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x117c, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x117b, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x117c, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x117b, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x117c, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x117b, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x117c, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x117b, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x117c, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x117b, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x117c, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x117b, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x117c, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x117b, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x117c, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x117b, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x117c, 4), (stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x117b, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x117c, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x117b, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x117c, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x117b, 4)]
[(stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0x117c, 4), (stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0x117b, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x117c, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x117b, 4)]
[ ---  CALL (ram, 0x1212c8, 8) , (unique, 0x10001acb, 8)]
[ ---  BRANCH (ram, 0x268aa4, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100021ea, 8) , (const, 0x268ab0, 8), (unique, 0x100021ea, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x116a, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x116a, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x116a, 4), (stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x1169, 4), (stack, 0xfffffffffffffae0, 8) MULTIEQUAL (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x116a, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x1169, 4), (stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x116a, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x1169, 4), (stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x116a, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x1169, 4), (stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x116a, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x1169, 4), (stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x116a, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x1169, 4), (stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x116a, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x1169, 4), (stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x116a, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x1169, 4), (stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x116a, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x1169, 4), (stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x116a, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x1169, 4), (stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x116a, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x1169, 4), (stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x116a, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x1169, 4), (stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x116a, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x1169, 4), (stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x116a, 4), (stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x1169, 4), (stack, 0xfffffffffffffb58, 8) MULTIEQUAL (stack, 0xfffffffffffffb58, 8) , (stack, 0xfffffffffffffb58, 8)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x116a, 4), (stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x1169, 4), (stack, 0xfffffffffffffb60, 8) MULTIEQUAL (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x116a, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x1169, 4), (stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x116a, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x1169, 4), (stack, 0xfffffffffffffb7c, 4) MULTIEQUAL (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x116a, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x1169, 4), (stack, 0xfffffffffffffb80, 4) MULTIEQUAL (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x116a, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x1169, 4), (stack, 0xfffffffffffffb84, 4) MULTIEQUAL (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x116a, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x1169, 4), (stack, 0xfffffffffffffb88, 4) MULTIEQUAL (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x116a, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x1169, 4), (stack, 0xfffffffffffffb8c, 4) MULTIEQUAL (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x116a, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x1169, 4), (stack, 0xfffffffffffffb90, 4) MULTIEQUAL (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x116a, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x1169, 4), (stack, 0xfffffffffffffb94, 4) MULTIEQUAL (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x116a, 4), (stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x1169, 4), (stack, 0xfffffffffffffb98, 8) MULTIEQUAL (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x116a, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x1169, 4), (stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x116a, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x1169, 4), (stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0x116a, 4), (stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0x1169, 4), (stack, 0xfffffffffffffbc0, 4) MULTIEQUAL (stack, 0xfffffffffffffbc0, 4) , (stack, 0xfffffffffffffbc0, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x116a, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1169, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffb18, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x100021fa, 8), (unique, 0x100021fa, 8) CALL (ram, 0x121100, 8) , (unique, 0x100021f2, 8), (unique, 0x100021f2, 8) CAST (unique, 0x100019b3, 8), (unique, 0x100019b3, 8) COPY (stack, 0xfffffffffffffb00, 8), (stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffb20, 8) INT_OR (unique, 0x10000c4d, 8) , (unique, 0x10000c55, 8), (unique, 0x10000c55, 8) INT_ZEXT (register, 0xb8, 4), (unique, 0x10000c4d, 8) INT_AND (stack, 0xfffffffffffffb20, 8) , (const, 0xffffffff00000000, 8), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x116a, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x1169, 4), (stack, 0xfffffffffffffb20, 8) MULTIEQUAL (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8)]
[(register, 0xb8, 4) COPY (const, 0x1, 4)]
[(stack, 0xfffffffffffffb30, 8) COPY (stack, 0xfffffffffffffb00, 8), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x116a, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x1169, 4), (stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(unique, 0x10001c37, 8) COPY (register, 0x20, 8)]
[ ---  BRANCH (ram, 0x267b84, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10002202, 8) , (const, 0x268f43, 8), (unique, 0x10002202, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1183, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x1183, 4)]
[(stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x1183, 4), (stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x1182, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x1183, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x1182, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x1183, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x1182, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x1183, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x1182, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x1183, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x1182, 4)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x1183, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x1182, 4)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x1183, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x1182, 4)]
[(stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x1183, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x1182, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x1183, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x1182, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x1183, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x1182, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x1183, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x1182, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x1183, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x1182, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x1183, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x1182, 4)]
[(stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x1183, 4), (stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x1182, 4)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x1183, 4), (stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x1182, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x1183, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x1182, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x1183, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x1182, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x1183, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x1182, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x1183, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x1182, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x1183, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x1182, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x1183, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x1182, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x1183, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x1182, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x1183, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x1182, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x1183, 4), (stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x1182, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x1183, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x1182, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x1183, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x1182, 4)]
[(stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0x1183, 4), (stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0x1182, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1183, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1182, 4)]
[(stack, 0xfffffffffffffae8, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10002212, 8), (unique, 0x10002212, 8) CALL (ram, 0x121100, 8) , (unique, 0x1000220a, 8), (unique, 0x1000220a, 8) CAST (unique, 0x100019ab, 8)]
[(register, 0x10, 8) CAST (unique, 0x10002242, 8), (unique, 0x10002242, 8) INT_ADD (stack, 0xfffffffffffffb28, 8) , (unique, 0x1000223a, 8), (unique, 0x1000223a, 8) CAST (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x1000222a, 8), (unique, 0x1000222a, 8) INT_ADD (unique, 0x1000221a, 8) , (unique, 0x10002222, 8), (unique, 0x10002222, 8) CAST (unique, 0x100016a0, 8), (unique, 0x1000221a, 8) CAST (unique, 0x100016b0, 8), (unique, 0x100016b0, 8) PTRSUB (stack, 0xfffffffffffffb18, 8) , (const, 0x0, 8), (unique, 0x100016a0, 8) PTRSUB (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10002212, 8), (unique, 0x10002212, 8) CALL (ram, 0x121100, 8) , (unique, 0x1000220a, 8), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x1183, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x1183, 4), (unique, 0x1000220a, 8) CAST (unique, 0x100019ab, 8), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x1182, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x1182, 4)]
[(stack, 0xfffffffffffffaf8, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x1000222a, 8), (unique, 0x1000222a, 8) INT_ADD (unique, 0x1000221a, 8) , (unique, 0x10002222, 8), (unique, 0x10002222, 8) CAST (unique, 0x100016a0, 8), (unique, 0x1000221a, 8) CAST (unique, 0x100016b0, 8), (unique, 0x100016b0, 8) PTRSUB (stack, 0xfffffffffffffb18, 8) , (const, 0x0, 8), (unique, 0x100016a0, 8) PTRSUB (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10002212, 8), (unique, 0x10002212, 8) CALL (ram, 0x121100, 8) , (unique, 0x1000220a, 8), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x1183, 4), (unique, 0x1000220a, 8) CAST (unique, 0x100019ab, 8), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x1182, 4)]
[ ---  CBRANCH (ram, 0x2690f0, 1) , (unique, 0x10000c8f, 1), (unique, 0x10000c8f, 1) BOOL_NEGATE (register, 0x200, 1), (register, 0x200, 1) INT_CARRY (stack, 0xfffffffffffffb28, 8) , (unique, 0x10002232, 8), (unique, 0x10002232, 8) CAST (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x1000222a, 8), (unique, 0x1000222a, 8) INT_ADD (unique, 0x1000221a, 8) , (unique, 0x10002222, 8), (unique, 0x10002222, 8) CAST (unique, 0x100016a0, 8), (unique, 0x1000221a, 8) CAST (unique, 0x100016b0, 8), (unique, 0x100016b0, 8) PTRSUB (stack, 0xfffffffffffffb18, 8) , (const, 0x0, 8), (unique, 0x100016a0, 8) PTRSUB (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10002212, 8), (unique, 0x10002212, 8) CALL (ram, 0x121100, 8) , (unique, 0x1000220a, 8), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x1183, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x1183, 4), (unique, 0x1000220a, 8) CAST (unique, 0x100019ab, 8), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x1182, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x1182, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000224a, 8) , (const, 0x268f77, 8), (unique, 0x1000224a, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x11aa, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x11aa, 4)]
[(stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x11aa, 4), (stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x11a9, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x11aa, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x11a9, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x11aa, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x11a9, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x11aa, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x11a9, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x11aa, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x11a9, 4)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x11aa, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x11a9, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x11aa, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x11a9, 4)]
[(stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x11aa, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x11a9, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x11aa, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x11a9, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x11aa, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x11a9, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x11aa, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x11a9, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x11aa, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x11a9, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x11aa, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x11a9, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x11aa, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x11a9, 4)]
[(stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x11aa, 4), (stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x11a9, 4)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x11aa, 4), (stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x11a9, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x11aa, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x11a9, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x11aa, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x11a9, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x11aa, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x11a9, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x11aa, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x11a9, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x11aa, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x11a9, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x11aa, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x11a9, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x11aa, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x11a9, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x11aa, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x11a9, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x11aa, 4), (stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x11a9, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x11aa, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x11a9, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x11aa, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x11a9, 4)]
[(stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0x11aa, 4), (stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0x11a9, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x11aa, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x11a9, 4)]
[(register, 0x0, 4) CALL (ram, 0x2300b0, 8) , (register, 0x10, 8)]
[ ---  CBRANCH (ram, 0x268f8f, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (const, 0x1000, 8) , (stack, 0xfffffffffffffb08, 8), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x11aa, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x11a9, 4), (stack, 0xfffffffffffffb08, 8) COPY (register, 0x10, 8)]
[ ---  CBRANCH (ram, 0x2690f0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4)]
[(stack, 0xfffffffffffffb08, 8) COPY (register, 0x10, 8), (register, 0x10, 8) CAST (unique, 0x10002262, 8), (unique, 0x10002262, 8) INT_AND (unique, 0x1000225a, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x1000225a, 8) CAST (unique, 0x3800, 8), (unique, 0x3800, 8) PTRADD (register, 0x20, 8) , (unique, 0x100016c0, 8) , (const, 0x1, 8), (unique, 0x100016c0, 8) INT_ADD (unique, 0x10000917, 8) , (const, 0xf, 8), (unique, 0x10000917, 8) INT_2COMP (register, 0x10, 8), (register, 0x10, 8) INT_AND (unique, 0x3100, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3100, 8) INT_ADD (unique, 0x10002252, 8) , (const, 0x1e, 8), (unique, 0x10002252, 8) CAST (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffb28, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) INT_ADD (stack, 0xfffffffffffffb28, 8) , (register, 0x10, 8), (register, 0x10, 8) INT_AND (unique, 0x3100, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3100, 8) INT_ADD (unique, 0x10002252, 8) , (const, 0x1e, 8), (unique, 0x10002252, 8) CAST (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) CAST (unique, 0x10002272, 8), (unique, 0x10002272, 8) INT_AND (unique, 0x1000226a, 8) , (const, 0xffffffff00000000, 8), (unique, 0x1000226a, 8) CAST (stack, 0xfffffffffffffaf0, 8)]
[(unique, 0x10001c67, 8) COPY (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (unique, 0x10000917, 8) , (const, 0x1, 8), (unique, 0x10000917, 8) INT_2COMP (register, 0x10, 8), (register, 0x10, 8) INT_AND (unique, 0x3100, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3100, 8) INT_ADD (unique, 0x10002252, 8) , (const, 0x1e, 8), (unique, 0x10002252, 8) CAST (stack, 0xfffffffffffffaf8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000227a, 8) , (const, 0x2690fc, 8), (unique, 0x1000227a, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x127d, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x127d, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x127d, 4), (stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x127c, 4), (stack, 0xfffffffffffffae0, 8) MULTIEQUAL (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x127d, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x127c, 4), (stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x127d, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x127c, 4), (stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x127d, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x127c, 4), (stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x127d, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x127c, 4), (stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x127d, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x127c, 4), (stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x127d, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x127c, 4), (stack, 0xfffffffffffffb20, 8) MULTIEQUAL (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x127d, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x127c, 4), (stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x127d, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x127c, 4), (stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x127d, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x127c, 4), (stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x127d, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x127c, 4), (stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x127d, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x127c, 4), (stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x127d, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x127c, 4), (stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x127d, 4), (stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x127c, 4), (stack, 0xfffffffffffffb58, 8) MULTIEQUAL (stack, 0xfffffffffffffb58, 8) , (stack, 0xfffffffffffffb58, 8)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x127d, 4), (stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x127c, 4), (stack, 0xfffffffffffffb60, 8) MULTIEQUAL (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x127d, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x127c, 4), (stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x127d, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x127c, 4), (stack, 0xfffffffffffffb7c, 4) MULTIEQUAL (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x127d, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x127c, 4), (stack, 0xfffffffffffffb80, 4) MULTIEQUAL (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x127d, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x127c, 4), (stack, 0xfffffffffffffb84, 4) MULTIEQUAL (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x127d, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x127c, 4), (stack, 0xfffffffffffffb88, 4) MULTIEQUAL (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x127d, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x127c, 4), (stack, 0xfffffffffffffb8c, 4) MULTIEQUAL (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x127d, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x127c, 4), (stack, 0xfffffffffffffb90, 4) MULTIEQUAL (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x127d, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x127c, 4), (stack, 0xfffffffffffffb94, 4) MULTIEQUAL (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x127d, 4), (stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x127c, 4), (stack, 0xfffffffffffffb98, 8) MULTIEQUAL (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x127d, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x127c, 4), (stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x127d, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x127c, 4), (stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0x127d, 4), (stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0x127c, 4), (stack, 0xfffffffffffffbc0, 4) MULTIEQUAL (stack, 0xfffffffffffffbc0, 4) , (stack, 0xfffffffffffffbc0, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x127d, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x127c, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(unique, 0x100019d3, 8) COPY (stack, 0xfffffffffffffb00, 8), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x127d, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x127c, 4), (stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffb08, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x1000228a, 8), (unique, 0x1000228a, 8) CALL (ram, 0x1212c0, 8) , (unique, 0x10002282, 8), (unique, 0x10002282, 8) CAST (unique, 0x10001993, 8), (unique, 0x10001993, 8) COPY (stack, 0xfffffffffffffaf8, 8), (stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) CAST (unique, 0x10002296, 8), (unique, 0x10002296, 8) INT_ADD (unique, 0x10001913, 8) , (const, 0x1, 4), (unique, 0x10001913, 8) INT_LEFT (unique, 0x1000190b, 8) , (const, 0x20, 8), (unique, 0x1000190b, 8) INT_SEXT (unique, 0x10002292, 4), (unique, 0x10002292, 4) CAST (stack, 0xfffffffffffffaf4, 4), (stack, 0xfffffffffffffaf4, 4) SUBPIECE (stack, 0xfffffffffffffaf0, 8) , (const, 0x4, 8), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x127d, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x127c, 4), (stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[ ---  CBRANCH (ram, 0x268fc8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x1000228a, 8), (unique, 0x1000228a, 8) CALL (ram, 0x1212c0, 8) , (unique, 0x10002282, 8), (unique, 0x10002282, 8) CAST (unique, 0x10001993, 8), (unique, 0x10001993, 8) COPY (stack, 0xfffffffffffffaf8, 8), (stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000229e, 8) , (const, 0x268fe2, 8), (unique, 0x1000229e, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8), (register, 0x20, 8) MULTIEQUAL (unique, 0x10001c67, 8) , (register, 0x20, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100022be, 8) , (const, 0x268ffc, 8), (unique, 0x100022be, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8), (register, 0x20, 8) MULTIEQUAL (unique, 0x10001c67, 8) , (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1224, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1211, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x1224, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x1211, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x1224, 4), (stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x1223, 4), (stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x1211, 4), (stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x1210, 4), (stack, 0xfffffffffffffae0, 8) MULTIEQUAL (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x1224, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x1223, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x1211, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x1210, 4), (stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x1224, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x1223, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x1211, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x1210, 4), (stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x1224, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x1223, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x1211, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x1210, 4), (stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x1224, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x1223, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x1211, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x1210, 4), (stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x1224, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x1223, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x1211, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x1210, 4), (stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x1224, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x1223, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x1211, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x1210, 4), (stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x1224, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x1223, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x1211, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x1210, 4), (stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x1224, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x1223, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x1211, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x1210, 4), (stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x1224, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x1223, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x1211, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x1210, 4), (stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x1224, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x1223, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x1211, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x1210, 4), (stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x1224, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x1223, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x1211, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x1210, 4), (stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x1224, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x1223, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x1211, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x1210, 4), (stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x1224, 4), (stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x1223, 4), (stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x1211, 4), (stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x1210, 4), (stack, 0xfffffffffffffb58, 8) MULTIEQUAL (stack, 0xfffffffffffffb58, 8) , (stack, 0xfffffffffffffb58, 8)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x1224, 4), (stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x1223, 4), (stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x1211, 4), (stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x1210, 4), (stack, 0xfffffffffffffb60, 8) MULTIEQUAL (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x1224, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x1223, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x1211, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x1210, 4), (stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x1224, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x1223, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x1211, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x1210, 4), (stack, 0xfffffffffffffb7c, 4) MULTIEQUAL (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x1224, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x1223, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x1211, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x1210, 4), (stack, 0xfffffffffffffb80, 4) MULTIEQUAL (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x1224, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x1223, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x1211, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x1210, 4), (stack, 0xfffffffffffffb84, 4) MULTIEQUAL (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x1224, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x1223, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x1211, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x1210, 4), (stack, 0xfffffffffffffb88, 4) MULTIEQUAL (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x1224, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x1223, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x1211, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x1210, 4), (stack, 0xfffffffffffffb8c, 4) MULTIEQUAL (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x1224, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x1223, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x1211, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x1210, 4), (stack, 0xfffffffffffffb90, 4) MULTIEQUAL (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x1224, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x1223, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x1211, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x1210, 4), (stack, 0xfffffffffffffb94, 4) MULTIEQUAL (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x1224, 4), (stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x1223, 4), (stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x1211, 4), (stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x1210, 4), (stack, 0xfffffffffffffb98, 8) MULTIEQUAL (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x1224, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x1223, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x1211, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x1210, 4), (stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x1224, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x1223, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x1211, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x1210, 4), (stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0x1224, 4), (stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0x1223, 4), (stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0x1211, 4), (stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0x1210, 4), (stack, 0xfffffffffffffbc0, 4) MULTIEQUAL (stack, 0xfffffffffffffbc0, 4) , (stack, 0xfffffffffffffbc0, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1224, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1223, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1211, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1210, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CALL (ram, 0x121160, 8) , (register, 0x0, 8) , (register, 0x30, 8) , (unique, 0x100022c6, 8), (unique, 0x100022c6, 8) CAST (unique, 0x10001a3b, 8), (register, 0x30, 8) CAST (unique, 0x100022b6, 8), (unique, 0x100022b6, 8) INT_ADD (unique, 0x100022ae, 8) , (const, 0x1, 8), (unique, 0x100022ae, 8) CAST (unique, 0x100016c8, 8), (unique, 0x100016c8, 8) PTRSUB (stack, 0xfffffffffffffb30, 8) , (const, 0x0, 8), (unique, 0x10001a3b, 8) COPY (stack, 0xfffffffffffffb18, 8), (register, 0x0, 8) CALL (ram, 0x121230, 8) , (unique, 0x10001a13, 8) , (unique, 0x100019c3, 8) , (unique, 0x100022a6, 8), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x1211, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x1211, 4), (unique, 0x100022a6, 8) CAST (unique, 0x1000193b, 8), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x1210, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x1210, 4), (unique, 0x1000193b, 8) COPY (stack, 0xfffffffffffffae8, 8), (unique, 0x100019c3, 8) COPY (stack, 0xfffffffffffffb00, 8), (unique, 0x10001a13, 8) COPY (stack, 0xfffffffffffffb08, 8), (stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8), (stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8), (stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8), (stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8), (stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(unique, 0x10001ae3, 8) COPY (stack, 0xfffffffffffffb30, 8), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x1224, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x1223, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x1211, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x1210, 4), (stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[ ---  CBRANCH (ram, 0x269221, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xfffffffffffffb20, 4) , (const, 0x0, 4), (stack, 0xfffffffffffffb20, 4) SUBPIECE (stack, 0xfffffffffffffb20, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x1224, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x1223, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x1211, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x1210, 4), (stack, 0xfffffffffffffb20, 8) MULTIEQUAL (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100022ce, 8) , (const, 0x26922d, 8), (unique, 0x100022ce, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1276, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x1276, 4)]
[(stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x1276, 4), (stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x1275, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x1276, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x1275, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x1276, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x1275, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x1276, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x1275, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x1276, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x1275, 4)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x1276, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x1275, 4)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x1276, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x1275, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x1276, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x1275, 4)]
[(stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x1276, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x1275, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x1276, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x1275, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x1276, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x1275, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x1276, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x1275, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x1276, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x1275, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x1276, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x1275, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x1276, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x1275, 4)]
[(stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x1276, 4), (stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x1275, 4)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x1276, 4), (stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x1275, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x1276, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x1275, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x1276, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x1275, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x1276, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x1275, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x1276, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x1275, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x1276, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x1275, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x1276, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x1275, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x1276, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x1275, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x1276, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x1275, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x1276, 4), (stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x1275, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x1276, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x1275, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x1276, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x1275, 4)]
[(stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0x1276, 4), (stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0x1275, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1276, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1275, 4)]
[ ---  CALL (ram, 0x1212c8, 8) , (unique, 0x10001ae3, 8)]
[ ---  BRANCH (ram, 0x26900c, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbc0, 4) MULTIEQUAL (stack, 0xfffffffffffffbc0, 4) , (stack, 0xfffffffffffffbc0, 4)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb98, 8) MULTIEQUAL (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8)]
[(stack, 0xfffffffffffffb94, 4) MULTIEQUAL (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4)]
[(stack, 0xfffffffffffffb90, 4) MULTIEQUAL (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4)]
[(stack, 0xfffffffffffffb8c, 4) MULTIEQUAL (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4)]
[(stack, 0xfffffffffffffb88, 4) MULTIEQUAL (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4)]
[(stack, 0xfffffffffffffb84, 4) MULTIEQUAL (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4)]
[(stack, 0xfffffffffffffb80, 4) MULTIEQUAL (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4)]
[(stack, 0xfffffffffffffb7c, 4) MULTIEQUAL (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb60, 8) MULTIEQUAL (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8)]
[(stack, 0xfffffffffffffb58, 8) MULTIEQUAL (stack, 0xfffffffffffffb58, 8) , (stack, 0xfffffffffffffb58, 8)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb20, 8) MULTIEQUAL (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8)]
[(stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae0, 8) MULTIEQUAL (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x100019cb, 8) COPY (stack, 0xfffffffffffffb00, 8), (stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffb18, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x100022de, 8), (unique, 0x100022de, 8) INT_ADD (unique, 0x100022d6, 8) , (const, 0xffffffffffffffff, 8), (unique, 0x100022d6, 8) CAST (stack, 0xfffffffffffffaf8, 8), (stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[ ---  CBRANCH (ram, 0x2691f6, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xb8, 4) , (const, 0x0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100022e6, 8) , (const, 0x269202, 8), (unique, 0x100022e6, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1262, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x1262, 4)]
[(stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x1262, 4), (stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x1261, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x1262, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x1261, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x1262, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x1261, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x1262, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x1261, 4)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x1262, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x1261, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x1262, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x1261, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x1262, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x1261, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x1262, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x1261, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x1262, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x1261, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x1262, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x1261, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x1262, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x1261, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x1262, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x1261, 4)]
[(stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x1262, 4), (stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x1261, 4)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x1262, 4), (stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x1261, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x1262, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x1261, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x1262, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x1261, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x1262, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x1261, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x1262, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x1261, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x1262, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x1261, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x1262, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x1261, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x1262, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x1261, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x1262, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x1261, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x1262, 4), (stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x1261, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x1262, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x1261, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x1262, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x1261, 4)]
[(stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0x1262, 4), (stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0x1261, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1262, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1261, 4)]
[ ---  CALL (ram, 0x1212c8, 8) , (unique, 0x100019cb, 8)]
[(stack, 0xfffffffffffffb20, 8) INT_OR (unique, 0x10000cf5, 8) , (unique, 0x10000cfd, 8), (unique, 0x10000cfd, 8) INT_AND (unique, 0x100022ee, 8) , (const, 0xffffffff, 8), (unique, 0x100022ee, 8) CAST (stack, 0xfffffffffffffaf0, 8), (unique, 0x10000cf5, 8) INT_AND (stack, 0xfffffffffffffb20, 8) , (const, 0xffffffff00000000, 8), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x1262, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x1262, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x1261, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x1261, 4)]
[(stack, 0xfffffffffffffb30, 8) COPY (stack, 0xfffffffffffffb08, 8), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x1262, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x1261, 4)]
[(unique, 0x10001c47, 8) COPY (register, 0x20, 8)]
[ ---  BRANCH (ram, 0x267b84, 1)]
[(register, 0xb8, 4) COPY (const, 0x1, 4)]
[(stack, 0xfffffffffffffb20, 8) INT_OR (unique, 0x10000cb1, 8) , (unique, 0x10000cb9, 8), (unique, 0x10000cb9, 8) INT_AND (unique, 0x100022f6, 8) , (const, 0xffffffff, 8), (unique, 0x100022f6, 8) CAST (stack, 0xfffffffffffffaf0, 8), (unique, 0x10000cb1, 8) INT_AND (stack, 0xfffffffffffffb20, 8) , (const, 0xffffffff00000000, 8)]
[(stack, 0xfffffffffffffb30, 8) COPY (stack, 0xfffffffffffffb08, 8)]
[(unique, 0x10001c3f, 8) COPY (register, 0x20, 8)]
[ ---  BRANCH (ram, 0x267b84, 1)]
[(stack, 0xfffffffffffffb44, 4) COPY (const, 0x1, 4)]
[ ---  CBRANCH (ram, 0x267d4d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xb8, 4) , (const, 0x0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100022fe, 8) , (const, 0x269135, 8), (unique, 0x100022fe, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x12a1, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x12a1, 4)]
[(stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x12a1, 4), (stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x12a0, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x12a1, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x12a0, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x12a1, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x12a0, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x12a1, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x12a0, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x12a1, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x12a0, 4)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x12a1, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x12a0, 4)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x12a1, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x12a0, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x12a1, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x12a0, 4)]
[(stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x12a1, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x12a0, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x12a1, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x12a0, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x12a1, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x12a0, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x12a1, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x12a0, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x12a1, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x12a0, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x12a1, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x12a0, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x12a1, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x12a0, 4)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x12a1, 4), (stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x12a0, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x12a1, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x12a0, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x12a1, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x12a0, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x12a1, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x12a0, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x12a1, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x12a0, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x12a1, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x12a0, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x12a1, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x12a0, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x12a1, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x12a0, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x12a1, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x12a0, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x12a1, 4), (stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x12a0, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x12a1, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x12a0, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x12a1, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x12a0, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x12a1, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x12a0, 4)]
[ ---  CALL (ram, 0x1212c8, 8) , (unique, 0x100019d3, 8)]
[(stack, 0xfffffffffffffb44, 4) COPY (register, 0xb8, 4)]
[ ---  BRANCH (ram, 0x267d4d, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10002306, 8) , (const, 0x268594, 8), (unique, 0x10002306, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x10b9, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x10b9, 4)]
[(stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x10b9, 4), (stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x10b8, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x10b9, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x10b8, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x10b9, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x10b8, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x10b9, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x10b8, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x10b9, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x10b8, 4)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x10b9, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x10b8, 4)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x10b9, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x10b8, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x10b9, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x10b8, 4)]
[(stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x10b9, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x10b8, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x10b9, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x10b8, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x10b9, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x10b8, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x10b9, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x10b8, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x10b9, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x10b8, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x10b9, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x10b8, 4)]
[(stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x10b9, 4), (stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x10b8, 4)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x10b9, 4), (stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x10b8, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x10b9, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x10b8, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x10b9, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x10b8, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x10b9, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x10b8, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x10b9, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x10b8, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x10b9, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x10b8, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x10b9, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x10b8, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x10b9, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x10b8, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x10b9, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x10b8, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x10b9, 4), (stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x10b8, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x10b9, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x10b8, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x10b9, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x10b8, 4)]
[(stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0x10b9, 4), (stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0x10b8, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x10b9, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x10b8, 4)]
[(unique, 0x10001aab, 8) COPY (stack, 0xfffffffffffffb30, 8), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x10b9, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x10b8, 4)]
[(stack, 0xfffffffffffffb00, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10002316, 8), (unique, 0x10002316, 8) CALL (ram, 0x121110, 8) , (unique, 0x1000230e, 8) , (const, 0x2f, 4), (unique, 0x1000230e, 8) CAST (unique, 0x10001a93, 8)]
[ ---  CBRANCH (ram, 0x268ea6, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10002316, 8), (unique, 0x10002316, 8) CALL (ram, 0x121110, 8) , (unique, 0x1000230e, 8) , (const, 0x2f, 4), (unique, 0x1000230e, 8) CAST (unique, 0x10001a93, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10002336, 8) , (const, 0x2685c2, 8), (unique, 0x10002336, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x10da, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x10da, 4)]
[(stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x10da, 4), (stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x10d9, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x10da, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x10d9, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x10da, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x10d9, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x10da, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x10d9, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x10da, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x10d9, 4)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x10da, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x10d9, 4), (stack, 0xfffffffffffffb08, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x1000232e, 8), (unique, 0x1000232e, 8) INT_SUB (unique, 0x1000231e, 8) , (unique, 0x10002326, 8), (unique, 0x10002326, 8) CAST (stack, 0xfffffffffffffb30, 8), (unique, 0x1000231e, 8) CAST (register, 0x0, 8)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x10da, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x10d9, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x10da, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x10d9, 4)]
[(stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x10da, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x10d9, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x10da, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x10d9, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x10da, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x10d9, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x10da, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x10d9, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x10da, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x10d9, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x10da, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x10d9, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x10da, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x10d9, 4)]
[(stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x10da, 4), (stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x10d9, 4)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x10da, 4), (stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x10d9, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x10da, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x10d9, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x10da, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x10d9, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x10da, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x10d9, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x10da, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x10d9, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x10da, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x10d9, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x10da, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x10d9, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x10da, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x10d9, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x10da, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x10d9, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x10da, 4), (stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x10d9, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x10da, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x10d9, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x10da, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x10d9, 4)]
[(stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0x10da, 4), (stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0x10d9, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x10da, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x10d9, 4)]
[(register, 0x0, 8) CAST (unique, 0x10002346, 8), (unique, 0x10002346, 8) CALL (ram, 0x1210c0, 8) , (unique, 0x10001aab, 8) , (const, 0x5c, 4) , (unique, 0x1000233e, 8), (unique, 0x1000233e, 8) CAST (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x1000232e, 8), (unique, 0x1000232e, 8) INT_SUB (unique, 0x1000231e, 8) , (unique, 0x10002326, 8), (unique, 0x10002326, 8) CAST (stack, 0xfffffffffffffb30, 8), (unique, 0x1000231e, 8) CAST (register, 0x0, 8)]
[ ---  BRANCH (ram, 0x267df3, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000234e, 8) , (const, 0x268eb7, 8), (unique, 0x1000234e, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x10e3, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x10e3, 4)]
[(stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x10e3, 4), (stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x10e2, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x10e3, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x10e2, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x10e3, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x10e2, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x10e3, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x10e2, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x10e3, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x10e2, 4)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x10e3, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x10e2, 4)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x10e3, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x10e2, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x10e3, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x10e2, 4)]
[(stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x10e3, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x10e2, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x10e3, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x10e2, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x10e3, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x10e2, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x10e3, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x10e2, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x10e3, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x10e2, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x10e3, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x10e2, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x10e3, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x10e2, 4)]
[(stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x10e3, 4), (stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x10e2, 4)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x10e3, 4), (stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x10e2, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x10e3, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x10e2, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x10e3, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x10e2, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x10e3, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x10e2, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x10e3, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x10e2, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x10e3, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x10e2, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x10e3, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x10e2, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x10e3, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x10e2, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x10e3, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x10e2, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x10e3, 4), (stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x10e2, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x10e3, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x10e2, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x10e3, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x10e2, 4)]
[(stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0x10e3, 4), (stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0x10e2, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x10e3, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x10e2, 4)]
[ ---  CBRANCH (ram, 0x268c71, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x1000235e, 8), (unique, 0x1000235e, 8) CALL (ram, 0x121110, 8) , (unique, 0x10002356, 8) , (const, 0x5c, 4), (unique, 0x10002356, 8) CAST (unique, 0x10001aab, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10002366, 8) , (const, 0x268ecb, 8), (unique, 0x10002366, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x10f2, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x10f2, 4)]
[(stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x10f2, 4), (stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x10f1, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x10f2, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x10f1, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x10f2, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x10f1, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x10f2, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x10f1, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x10f2, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x10f1, 4)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x10f2, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x10f1, 4)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x10f2, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x10f1, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x10f2, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x10f1, 4)]
[(stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x10f2, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x10f1, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x10f2, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x10f1, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x10f2, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x10f1, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x10f2, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x10f1, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x10f2, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x10f1, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x10f2, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x10f1, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x10f2, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x10f1, 4)]
[(stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x10f2, 4), (stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x10f1, 4)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x10f2, 4), (stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x10f1, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x10f2, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x10f1, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x10f2, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x10f1, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x10f2, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x10f1, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x10f2, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x10f1, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x10f2, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x10f1, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x10f2, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x10f1, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x10f2, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x10f1, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x10f2, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x10f1, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x10f2, 4), (stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x10f1, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x10f2, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x10f1, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x10f2, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x10f1, 4)]
[(stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0x10f2, 4), (stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0x10f1, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x10f2, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x10f1, 4)]
[(stack, 0xfffffffffffffb00, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10002386, 8), (unique, 0x10002386, 8) INT_ADD (unique, 0x1000237e, 8) , (unique, 0x10001680, 8), (unique, 0x1000237e, 8) CAST (unique, 0x10001688, 8), (unique, 0x10001688, 8) PTRSUB (register, 0x0, 8) , (const, 0x78, 8), (unique, 0x10001680, 8) INT_ADD (unique, 0x10002376, 8) , (register, 0x0, 8), (unique, 0x10002376, 8) CAST (unique, 0x1000182c, 8), (unique, 0x1000182c, 8) PTRSUB (const, 0x0, 8) , (const, 0xffffffffffffff88, 8), (register, 0x0, 8) CALL (ram, 0x121100, 8) , (unique, 0x1000236e, 8), (unique, 0x1000236e, 8) CAST (register, 0x0, 8)]
[ ---  BRANCH (ram, 0x267dd9, 1)]
[(register, 0xb8, 8) COPY (const, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000238e, 8) , (const, 0x267dd2, 8), (unique, 0x1000238e, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xd89, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xd89, 4)]
[(stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0xd89, 4), (stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0xd88, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0xd89, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0xd88, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0xd89, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0xd88, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0xd89, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0xd88, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0xd89, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0xd88, 4)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0xd89, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0xd88, 4)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0xd89, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0xd88, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0xd89, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0xd88, 4)]
[(stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0xd89, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0xd88, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0xd89, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0xd88, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0xd89, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0xd88, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0xd89, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0xd88, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0xd89, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0xd88, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0xd89, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0xd88, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0xd89, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0xd88, 4)]
[(stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0xd89, 4), (stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0xd88, 4)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0xd89, 4), (stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0xd88, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0xd89, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0xd88, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0xd89, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0xd88, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0xd89, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0xd88, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0xd89, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0xd88, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0xd89, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0xd88, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0xd89, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0xd88, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0xd89, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0xd88, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0xd89, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0xd88, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0xd89, 4), (stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0xd88, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0xd89, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0xd88, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0xd89, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0xd88, 4)]
[(stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0xd89, 4), (stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0xd88, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xd89, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xd88, 4)]
[(stack, 0xfffffffffffffb00, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x1000239e, 8), (unique, 0x1000239e, 8) CALL (ram, 0x121110, 8) , (unique, 0x10002396, 8) , (const, 0x2f, 4), (unique, 0x10002396, 8) CAST (unique, 0x10001a93, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbc0, 4) MULTIEQUAL (stack, 0xfffffffffffffbc0, 4) , (stack, 0xfffffffffffffbc0, 4)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb98, 8) MULTIEQUAL (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8)]
[(stack, 0xfffffffffffffb94, 4) MULTIEQUAL (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4)]
[(stack, 0xfffffffffffffb90, 4) MULTIEQUAL (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4)]
[(stack, 0xfffffffffffffb8c, 4) MULTIEQUAL (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4)]
[(stack, 0xfffffffffffffb88, 4) MULTIEQUAL (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4)]
[(stack, 0xfffffffffffffb84, 4) MULTIEQUAL (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4)]
[(stack, 0xfffffffffffffb80, 4) MULTIEQUAL (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4)]
[(stack, 0xfffffffffffffb7c, 4) MULTIEQUAL (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb60, 8) MULTIEQUAL (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8)]
[(stack, 0xfffffffffffffb58, 8) MULTIEQUAL (stack, 0xfffffffffffffb58, 8) , (stack, 0xfffffffffffffb58, 8)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb20, 8) MULTIEQUAL (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae0, 8) MULTIEQUAL (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb8, 8) MULTIEQUAL (register, 0xb8, 8) , (register, 0x0, 8)]
[(stack, 0xfffffffffffffb08, 8) COPY (register, 0x30, 8), (register, 0x30, 8) CAST (unique, 0x100023b6, 8), (unique, 0x100023b6, 8) INT_SUB (unique, 0x100023a6, 8) , (unique, 0x100023ae, 8), (unique, 0x100023ae, 8) CAST (stack, 0xfffffffffffffb30, 8), (unique, 0x100023a6, 8) CAST (register, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8), (stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[ ---  CBRANCH (ram, 0x268c71, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbc0, 4) MULTIEQUAL (stack, 0xfffffffffffffbc0, 4) , (stack, 0xfffffffffffffbc0, 4)]
[(stack, 0xfffffffffffffb98, 8) MULTIEQUAL (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8)]
[(stack, 0xfffffffffffffb94, 4) MULTIEQUAL (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4)]
[(stack, 0xfffffffffffffb90, 4) MULTIEQUAL (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4)]
[(stack, 0xfffffffffffffb8c, 4) MULTIEQUAL (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4)]
[(stack, 0xfffffffffffffb88, 4) MULTIEQUAL (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4)]
[(stack, 0xfffffffffffffb84, 4) MULTIEQUAL (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4)]
[(stack, 0xfffffffffffffb80, 4) MULTIEQUAL (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4)]
[(stack, 0xfffffffffffffb7c, 4) MULTIEQUAL (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb60, 8) MULTIEQUAL (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8)]
[(stack, 0xfffffffffffffb58, 8) MULTIEQUAL (stack, 0xfffffffffffffb58, 8) , (stack, 0xfffffffffffffb58, 8)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb20, 8) MULTIEQUAL (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(stack, 0xfffffffffffffaf0, 8) CAST (unique, 0x100023c6, 8), (unique, 0x100023c6, 8) INT_AND (unique, 0x100023be, 8) , (const, 0xffffffff00000000, 8), (unique, 0x100023be, 8) CAST (stack, 0xfffffffffffffaf0, 8), (stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffb00, 8) COPY (const, 0x0, 8)]
[(stack, 0xfffffffffffffaf8, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x100023d6, 8), (unique, 0x100023d6, 8) INT_ADD (unique, 0x100023ce, 8) , (const, 0x1, 8), (unique, 0x100023ce, 8) CAST (unique, 0x10001570, 8), (unique, 0x10001570, 8) PTRSUB (stack, 0xfffffffffffffb30, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[ ---  BRANCH (ram, 0x268844, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbc0, 4) MULTIEQUAL (stack, 0xfffffffffffffbc0, 4) , (stack, 0xfffffffffffffbc0, 4)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb98, 8) MULTIEQUAL (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8)]
[(stack, 0xfffffffffffffb94, 4) MULTIEQUAL (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4)]
[(stack, 0xfffffffffffffb90, 4) MULTIEQUAL (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4)]
[(stack, 0xfffffffffffffb8c, 4) MULTIEQUAL (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4)]
[(stack, 0xfffffffffffffb88, 4) MULTIEQUAL (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4)]
[(stack, 0xfffffffffffffb84, 4) MULTIEQUAL (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4)]
[(stack, 0xfffffffffffffb80, 4) MULTIEQUAL (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4)]
[(stack, 0xfffffffffffffb7c, 4) MULTIEQUAL (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb60, 8) MULTIEQUAL (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8)]
[(stack, 0xfffffffffffffb58, 8) MULTIEQUAL (stack, 0xfffffffffffffb58, 8) , (stack, 0xfffffffffffffb58, 8)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb20, 8) MULTIEQUAL (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (register, 0x0, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae0, 8) MULTIEQUAL (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb8, 8) MULTIEQUAL (register, 0xb8, 8) , (register, 0x0, 8)]
[(register, 0x10, 8) CAST (unique, 0x100023f6, 8), (unique, 0x100023f6, 8) INT_ADD (unique, 0x100023ee, 8) , (unique, 0x10001148, 8), (unique, 0x100023ee, 8) CAST (unique, 0x10001150, 8), (unique, 0x10001150, 8) PTRSUB (stack, 0xfffffffffffffb08, 8) , (const, 0x78, 8), (unique, 0x10001148, 8) INT_ADD (unique, 0x100023e6, 8) , (stack, 0xfffffffffffffb28, 8), (unique, 0x100023e6, 8) CAST (unique, 0x1000181c, 8), (unique, 0x1000181c, 8) PTRSUB (const, 0x0, 8) , (const, 0xffffffffffffff88, 8), (stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8), (stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[ ---  CBRANCH (ram, 0x268bf6, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_CARRY (stack, 0xfffffffffffffb28, 8) , (unique, 0x100023de, 8), (unique, 0x100023de, 8) CAST (stack, 0xfffffffffffffb08, 8), (stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8), (stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100023fe, 8) , (const, 0x267e16, 8), (unique, 0x100023fe, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xdbf, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xdbf, 4)]
[(stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0xdbf, 4), (stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0xdbe, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0xdbf, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0xdbe, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0xdbf, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0xdbe, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0xdbf, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0xdbe, 4)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0xdbf, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0xdbe, 4)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0xdbf, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0xdbe, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0xdbf, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0xdbe, 4)]
[(stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0xdbf, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0xdbe, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0xdbf, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0xdbe, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0xdbf, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0xdbe, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0xdbf, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0xdbe, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0xdbf, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0xdbe, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0xdbf, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0xdbe, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0xdbf, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0xdbe, 4)]
[(stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0xdbf, 4), (stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0xdbe, 4)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0xdbf, 4), (stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0xdbe, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0xdbf, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0xdbe, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0xdbf, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0xdbe, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0xdbf, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0xdbe, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0xdbf, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0xdbe, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0xdbf, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0xdbe, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0xdbf, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0xdbe, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0xdbf, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0xdbe, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0xdbf, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0xdbe, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0xdbf, 4), (stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0xdbe, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0xdbf, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0xdbe, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0xdbf, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0xdbe, 4)]
[(stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0xdbf, 4), (stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0xdbe, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xdbf, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xdbe, 4)]
[(register, 0x0, 4) CALL (ram, 0x2300b0, 8) , (register, 0x10, 8)]
[ ---  CBRANCH (ram, 0x267e2e, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (const, 0x1000, 8) , (stack, 0xfffffffffffffaf8, 8), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0xdbf, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0xdbe, 4), (stack, 0xfffffffffffffaf8, 8) COPY (register, 0x10, 8)]
[ ---  CBRANCH (ram, 0x268bf6, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4)]
[(stack, 0xfffffffffffffaf8, 8) COPY (register, 0x10, 8), (register, 0x10, 8) CAST (unique, 0x10002416, 8), (unique, 0x10002416, 8) INT_AND (unique, 0x1000240e, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x1000240e, 8) CAST (unique, 0x3800, 8), (unique, 0x3800, 8) PTRADD (register, 0x20, 8) , (unique, 0x10001178, 8) , (const, 0x1, 8), (unique, 0x10001178, 8) INT_ADD (unique, 0x1000051c, 8) , (const, 0xf, 8), (unique, 0x1000051c, 8) INT_2COMP (register, 0x10, 8), (register, 0x10, 8) INT_AND (unique, 0x3100, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3100, 8) INT_ADD (unique, 0x10002406, 8) , (const, 0x2, 8), (unique, 0x10002406, 8) CAST (unique, 0x10001168, 8), (unique, 0x10001168, 8) PTRSUB (stack, 0xfffffffffffffb08, 8) , (const, 0x1c, 8)]
[(stack, 0xfffffffffffffb28, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) INT_ADD (stack, 0xfffffffffffffb28, 8) , (register, 0x10, 8), (register, 0x10, 8) INT_AND (unique, 0x3100, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3100, 8) INT_ADD (unique, 0x10002406, 8) , (const, 0x2, 8), (unique, 0x10002406, 8) CAST (unique, 0x10001168, 8), (unique, 0x10001168, 8) PTRSUB (stack, 0xfffffffffffffb08, 8) , (const, 0x1c, 8)]
[(stack, 0xfffffffffffffaf0, 8) CAST (unique, 0x10002426, 8), (unique, 0x10002426, 8) INT_AND (unique, 0x1000241e, 8) , (const, 0xffffffff00000000, 8), (unique, 0x1000241e, 8) CAST (stack, 0xfffffffffffffaf0, 8)]
[(unique, 0x10001c7f, 8) COPY (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (unique, 0x1000051c, 8) , (const, 0x1, 8), (unique, 0x1000051c, 8) INT_2COMP (register, 0x10, 8), (register, 0x10, 8) INT_AND (unique, 0x3100, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3100, 8) INT_ADD (unique, 0x10002406, 8) , (const, 0x2, 8), (unique, 0x10002406, 8) CAST (unique, 0x10001168, 8), (unique, 0x10001168, 8) PTRSUB (stack, 0xfffffffffffffb08, 8) , (const, 0x1c, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000242e, 8) , (const, 0x268c02, 8), (unique, 0x1000242e, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1081, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x1081, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x1081, 4), (stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x1080, 4), (stack, 0xfffffffffffffae0, 8) MULTIEQUAL (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x1081, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x1080, 4), (stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x1081, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x1080, 4), (stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x1081, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x1080, 4), (stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x1081, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x1080, 4), (stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x1081, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x1080, 4), (stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x1081, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x1080, 4), (stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x1081, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x1080, 4), (stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x1081, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x1080, 4), (stack, 0xfffffffffffffb20, 8) MULTIEQUAL (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x1081, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x1080, 4), (stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x1081, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x1080, 4), (stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x1081, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x1080, 4), (stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x1081, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x1080, 4), (stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x1081, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x1080, 4), (stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x1081, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x1080, 4), (stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x1081, 4), (stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x1080, 4), (stack, 0xfffffffffffffb58, 8) MULTIEQUAL (stack, 0xfffffffffffffb58, 8) , (stack, 0xfffffffffffffb58, 8)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x1081, 4), (stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x1080, 4), (stack, 0xfffffffffffffb60, 8) MULTIEQUAL (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x1081, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x1080, 4), (stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x1081, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x1080, 4), (stack, 0xfffffffffffffb7c, 4) MULTIEQUAL (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x1081, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x1080, 4), (stack, 0xfffffffffffffb80, 4) MULTIEQUAL (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x1081, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x1080, 4), (stack, 0xfffffffffffffb84, 4) MULTIEQUAL (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x1081, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x1080, 4), (stack, 0xfffffffffffffb88, 4) MULTIEQUAL (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x1081, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x1080, 4), (stack, 0xfffffffffffffb8c, 4) MULTIEQUAL (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x1081, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x1080, 4), (stack, 0xfffffffffffffb90, 4) MULTIEQUAL (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x1081, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x1080, 4), (stack, 0xfffffffffffffb94, 4) MULTIEQUAL (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x1081, 4), (stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x1080, 4), (stack, 0xfffffffffffffb98, 8) MULTIEQUAL (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x1081, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x1080, 4), (stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x1081, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x1080, 4), (stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0x1081, 4), (stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0x1080, 4), (stack, 0xfffffffffffffbc0, 4) MULTIEQUAL (stack, 0xfffffffffffffbc0, 4) , (stack, 0xfffffffffffffbc0, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1081, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1080, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffaf8, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x1000243e, 8), (unique, 0x1000243e, 8) CALL (ram, 0x1212c0, 8) , (unique, 0x10002436, 8), (unique, 0x10002436, 8) CAST (unique, 0x10001a03, 8), (unique, 0x10001a03, 8) COPY (stack, 0xfffffffffffffb08, 8), (stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[ ---  CBRANCH (ram, 0x26849f, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x1000243e, 8), (unique, 0x1000243e, 8) CALL (ram, 0x1212c0, 8) , (unique, 0x10002436, 8), (unique, 0x10002436, 8) CAST (unique, 0x10001a03, 8), (unique, 0x10001a03, 8) COPY (stack, 0xfffffffffffffb08, 8), (stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffaf0, 8) CAST (unique, 0x1000244a, 8), (unique, 0x1000244a, 8) INT_ADD (unique, 0x100018f3, 8) , (const, 0x1, 4), (unique, 0x100018f3, 8) INT_LEFT (unique, 0x100018eb, 8) , (const, 0x20, 8), (unique, 0x100018eb, 8) INT_SEXT (unique, 0x10002446, 4), (unique, 0x10002446, 4) CAST (stack, 0xfffffffffffffaf4, 4), (stack, 0xfffffffffffffaf4, 4) SUBPIECE (stack, 0xfffffffffffffaf0, 8) , (const, 0x4, 8)]
[ ---  BRANCH (ram, 0x267e67, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbc0, 4) MULTIEQUAL (stack, 0xfffffffffffffbc0, 4) , (stack, 0xfffffffffffffbc0, 4)]
[(stack, 0xfffffffffffffb98, 8) MULTIEQUAL (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8)]
[(stack, 0xfffffffffffffb94, 4) MULTIEQUAL (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4)]
[(stack, 0xfffffffffffffb90, 4) MULTIEQUAL (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4)]
[(stack, 0xfffffffffffffb8c, 4) MULTIEQUAL (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4)]
[(stack, 0xfffffffffffffb88, 4) MULTIEQUAL (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4)]
[(stack, 0xfffffffffffffb84, 4) MULTIEQUAL (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4)]
[(stack, 0xfffffffffffffb80, 4) MULTIEQUAL (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4)]
[(stack, 0xfffffffffffffb7c, 4) MULTIEQUAL (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb60, 8) MULTIEQUAL (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8)]
[(stack, 0xfffffffffffffb58, 8) MULTIEQUAL (stack, 0xfffffffffffffb58, 8) , (stack, 0xfffffffffffffb58, 8)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb20, 8) MULTIEQUAL (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x20, 8) MULTIEQUAL (unique, 0x10001c7f, 8) , (register, 0x20, 8)]
[(unique, 0x10001953, 8) COPY (stack, 0xfffffffffffffaf8, 8), (stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(unique, 0x3100, 8) CAST (unique, 0x1000245a, 8), (unique, 0x1000245a, 8) INT_ADD (unique, 0x10002452, 8) , (const, 0x1, 8), (unique, 0x10002452, 8) CAST (unique, 0x10001180, 8), (unique, 0x10001180, 8) PTRSUB (stack, 0xfffffffffffffb30, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[ ---  CBRANCH (ram, 0x268e60, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xb8, 8) , (const, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000246a, 8) , (const, 0x268e77, 8), (unique, 0x1000246a, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x107a, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x107a, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x107a, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x1079, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x107a, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x1079, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x107a, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x1079, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x107a, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x1079, 4)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x107a, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x1079, 4)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x107a, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x1079, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x107a, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x1079, 4)]
[(stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x107a, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x1079, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x107a, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x1079, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x107a, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x1079, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x107a, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x1079, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x107a, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x1079, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x107a, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x1079, 4)]
[(stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x107a, 4), (stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x1079, 4)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x107a, 4), (stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x1079, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x107a, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x1079, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x107a, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x1079, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x107a, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x1079, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x107a, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x1079, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x107a, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x1079, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x107a, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x1079, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x107a, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x1079, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x107a, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x1079, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x107a, 4), (stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x1079, 4)]
[(stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0x107a, 4), (stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0x1079, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x107a, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1079, 4)]
[(register, 0x0, 8) CAST (unique, 0x10002472, 8), (unique, 0x10002472, 8) CALL (ram, 0x121230, 8) , (unique, 0x10001953, 8) , (unique, 0x3100, 8) , (register, 0x10, 8), (register, 0x10, 8) INT_ADD (unique, 0x10002462, 8) , (const, 0x17, 8), (unique, 0x10002462, 8) CAST (unique, 0x10001670, 8), (unique, 0x10001670, 8) PTRSUB (unique, 0x10001668, 8) , (const, 0x78, 8), (unique, 0x10001668, 8) PTRADD (stack, 0xfffffffffffffb08, 8) , (const, 0xffffffffffffffff, 8) , (const, 0x90, 8)]
[ ---  BRANCH (ram, 0x268841, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000248a, 8) , (const, 0x267e91, 8), (unique, 0x1000248a, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xe42, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xe42, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0xe42, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0xe41, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0xe42, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0xe41, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0xe42, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0xe41, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0xe42, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0xe41, 4)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0xe42, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0xe41, 4)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0xe42, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0xe41, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0xe42, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0xe41, 4)]
[(stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0xe42, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0xe41, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0xe42, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0xe41, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0xe42, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0xe41, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0xe42, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0xe41, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0xe42, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0xe41, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0xe42, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0xe41, 4)]
[(stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0xe42, 4), (stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0xe41, 4)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0xe42, 4), (stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0xe41, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0xe42, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0xe41, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0xe42, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0xe41, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0xe42, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0xe41, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0xe42, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0xe41, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0xe42, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0xe41, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0xe42, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0xe41, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0xe42, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0xe41, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0xe42, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0xe41, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0xe42, 4), (stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0xe41, 4)]
[(stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0xe42, 4), (stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0xe41, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xe42, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xe41, 4)]
[(unique, 0x10001dc2, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10002492, 8), (unique, 0x10002492, 8) CALL (ram, 0x121230, 8) , (unique, 0x10001953, 8) , (unique, 0x3100, 8) , (register, 0x10, 8), (register, 0x10, 8) INT_ADD (unique, 0x10002482, 8) , (unique, 0x10001190, 8), (unique, 0x10002482, 8) CAST (register, 0xb8, 8), (unique, 0x10001190, 8) INT_SUB (const, 0xffffffffffffffff, 8) , (unique, 0x1000247a, 8), (unique, 0x1000247a, 8) CAST (stack, 0xfffffffffffffb30, 8)]
[(unique, 0x10001dd2, 8) COPY (register, 0xb8, 8)]
[(unique, 0x10001719, 8) MULTIEQUAL (unique, 0x10001dc2, 8) , (unique, 0x10001dca, 8)]
[(unique, 0x10001729, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[ ---  CBRANCH (ram, 0x267ebb, 1) , (unique, 0x10001718, 1), (unique, 0x10001718, 1) INT_NOTEQUAL (stack, 0xfffffffffffffb00, 8) , (unique, 0x10001721, 8), (unique, 0x10001721, 8) MULTIEQUAL (unique, 0x10001dd2, 8) , (unique, 0x10001dda, 8)]
[(unique, 0x3100, 8) CAST (unique, 0x100024aa, 8), (unique, 0x100024aa, 8) INT_ADD (unique, 0x100024a2, 8) , (const, 0x1, 8), (unique, 0x100024a2, 8) CAST (unique, 0x100011a0, 8), (unique, 0x100011a0, 8) PTRSUB (unique, 0x10001721, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x267ea8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x5c, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x1000249a, 8), (unique, 0x1000249a, 8) CAST (unique, 0x10001198, 8), (unique, 0x10001198, 8) PTRSUB (unique, 0x10001721, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x268835, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xfffffffffffffb00, 8) , (unique, 0x3100, 8)]
[ ---  CBRANCH (ram, 0x268841, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xb0, 8) , (const, 0x0, 8)]
[(ram, 0x4eae68, 8) INDIRECT (unique, 0x10001729, 8) , (const, 0x105f, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001719, 8) , (const, 0x5c, 1)]
[(register, 0x0, 8) PTRADD (unique, 0x10001719, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[(unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100024ba, 8), (unique, 0x100024ba, 8) INT_ADD (unique, 0x100024b2, 8) , (const, 0x1, 8), (unique, 0x100024b2, 8) CAST (unique, 0x100011b0, 8), (unique, 0x100011b0, 8) PTRSUB (unique, 0x10001721, 8) , (const, 0x0, 8)]
[(unique, 0x3100, 8) CAST (unique, 0x100024ca, 8), (unique, 0x100024ca, 8) INT_ADD (unique, 0x100024c2, 8) , (const, 0x2, 8), (unique, 0x100024c2, 8) CAST (unique, 0x100011c0, 8), (unique, 0x100011c0, 8) PTRSUB (unique, 0x10001721, 8) , (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x267ea8, 1)]
[(ram, 0x4eae68, 8) INDIRECT (unique, 0x10001729, 8) , (const, 0x1050, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001719, 8) , (register, 0x10, 1), (register, 0x10, 1) MULTIEQUAL (unique, 0xbb00, 1) , (unique, 0xbb00, 1)]
[(unique, 0x10001dca, 8) COPY (register, 0x0, 8), (register, 0x0, 8) PTRADD (unique, 0x10001719, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[(unique, 0x10001dda, 8) COPY (register, 0x8, 8), (register, 0x8, 8) MULTIEQUAL (unique, 0x3100, 8) , (unique, 0x3100, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbc0, 4) MULTIEQUAL (stack, 0xfffffffffffffbc0, 4) , (stack, 0xfffffffffffffbc0, 4) , (stack, 0xfffffffffffffbc0, 4) , (stack, 0xfffffffffffffbc0, 4)]
[(stack, 0xfffffffffffffb98, 8) MULTIEQUAL (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8)]
[(stack, 0xfffffffffffffb94, 4) MULTIEQUAL (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4)]
[(stack, 0xfffffffffffffb90, 4) MULTIEQUAL (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4)]
[(stack, 0xfffffffffffffb8c, 4) MULTIEQUAL (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4)]
[(stack, 0xfffffffffffffb88, 4) MULTIEQUAL (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4)]
[(stack, 0xfffffffffffffb84, 4) MULTIEQUAL (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4)]
[(stack, 0xfffffffffffffb80, 4) MULTIEQUAL (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4)]
[(stack, 0xfffffffffffffb7c, 4) MULTIEQUAL (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb60, 8) MULTIEQUAL (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8)]
[(stack, 0xfffffffffffffb58, 8) MULTIEQUAL (stack, 0xfffffffffffffb58, 8) , (stack, 0xfffffffffffffb58, 8) , (stack, 0xfffffffffffffb58, 8) , (stack, 0xfffffffffffffb58, 8)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb20, 8) MULTIEQUAL (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xe53, 4), (ram, 0x4eae68, 8) MULTIEQUAL (unique, 0x10001729, 8) , (unique, 0x10001729, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x0, 8) , (const, 0x0, 1), (register, 0x0, 8) MULTIEQUAL (unique, 0x10001719, 8) , (unique, 0x10001719, 8) , (register, 0x0, 8) , (register, 0x0, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbc0, 4) MULTIEQUAL (stack, 0xfffffffffffffbc0, 4) , (stack, 0xfffffffffffffbc0, 4)]
[(stack, 0xfffffffffffffb98, 8) MULTIEQUAL (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8)]
[(stack, 0xfffffffffffffb94, 4) MULTIEQUAL (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4)]
[(stack, 0xfffffffffffffb90, 4) MULTIEQUAL (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4)]
[(stack, 0xfffffffffffffb8c, 4) MULTIEQUAL (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4)]
[(stack, 0xfffffffffffffb88, 4) MULTIEQUAL (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4)]
[(stack, 0xfffffffffffffb84, 4) MULTIEQUAL (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4)]
[(stack, 0xfffffffffffffb80, 4) MULTIEQUAL (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4)]
[(stack, 0xfffffffffffffb7c, 4) MULTIEQUAL (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb60, 8) MULTIEQUAL (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8)]
[(stack, 0xfffffffffffffb58, 8) MULTIEQUAL (stack, 0xfffffffffffffb58, 8) , (stack, 0xfffffffffffffb58, 8)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb20, 8) MULTIEQUAL (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8)]
[(unique, 0x1000196b, 8) COPY (stack, 0xfffffffffffffaf8, 8), (stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(unique, 0x3200, 8) CAST (unique, 0x100024d2, 8), (unique, 0x100024d2, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffb58, 8)]
[(stack, 0xfffffffffffffae8, 8) COPY (register, 0xb0, 8)]
[(stack, 0xfffffffffffffb40, 4) COPY (register, 0xa0, 4)]
[(stack, 0xfffffffffffffae0, 8) COPY (register, 0x8, 8)]
[(stack, 0xfffffffffffffb08, 8) COPY (unique, 0x3200, 8), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffbb0, 8) COPY (const, 0x400, 8)]
[(unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffba8, 8) COPY (unique, 0x100024da, 8), (unique, 0x100024da, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (unique, 0x1000183c, 8) , (const, 0x10, 8), (unique, 0x1000183c, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffba8, 8)]
[ ---  BRANCH (ram, 0x2688be, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100024ea, 8) , (const, 0x2688cc, 8), (unique, 0x100024ea, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xe7a, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xe7a, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0xe7a, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0xe79, 4), (stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0xe7a, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0xe79, 4), (stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0xe7a, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0xe79, 4), (stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0xe7a, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0xe79, 4), (stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0xe7a, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0xe79, 4), (stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0xe7a, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0xe79, 4), (stack, 0xfffffffffffffb20, 8) MULTIEQUAL (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0xe7a, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0xe79, 4), (stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0xe7a, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0xe79, 4), (stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0xe7a, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0xe79, 4), (stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0xe7a, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0xe79, 4), (stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0xe7a, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0xe79, 4), (stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0xe7a, 4), (stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0xe79, 4), (stack, 0xfffffffffffffb58, 8) MULTIEQUAL (stack, 0xfffffffffffffb58, 8) , (stack, 0xfffffffffffffb58, 8)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0xe7a, 4), (stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0xe79, 4), (stack, 0xfffffffffffffb60, 8) MULTIEQUAL (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0xe7a, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0xe79, 4), (stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0xe7a, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0xe79, 4), (stack, 0xfffffffffffffb7c, 4) MULTIEQUAL (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0xe7a, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0xe79, 4), (stack, 0xfffffffffffffb80, 4) MULTIEQUAL (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0xe7a, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0xe79, 4), (stack, 0xfffffffffffffb84, 4) MULTIEQUAL (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0xe7a, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0xe79, 4), (stack, 0xfffffffffffffb88, 4) MULTIEQUAL (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0xe7a, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0xe79, 4), (stack, 0xfffffffffffffb8c, 4) MULTIEQUAL (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0xe7a, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0xe79, 4), (stack, 0xfffffffffffffb90, 4) MULTIEQUAL (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0xe7a, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0xe79, 4), (stack, 0xfffffffffffffb94, 4) MULTIEQUAL (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0xe7a, 4), (stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0xe79, 4), (stack, 0xfffffffffffffb98, 8) MULTIEQUAL (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0xe7a, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0xe79, 4), (stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0xe7a, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0xe79, 4), (stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0xe7a, 4), (stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0xe79, 4), (stack, 0xfffffffffffffbc0, 4) MULTIEQUAL (stack, 0xfffffffffffffbc0, 4) , (stack, 0xfffffffffffffbc0, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xe7a, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xe79, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(unique, 0x10001b1b, 4) COPY (stack, 0xfffffffffffffb40, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0xe7a, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0xe79, 4), (stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(unique, 0x10001973, 8) COPY (stack, 0xfffffffffffffaf8, 8), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0xe7a, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0xe79, 4), (stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(unique, 0x10001923, 8) COPY (stack, 0xfffffffffffffae8, 8), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0xe7a, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0xe79, 4), (stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(unique, 0x1000191b, 8) COPY (stack, 0xfffffffffffffae0, 8), (stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0xe7a, 4), (stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0xe79, 4), (stack, 0xfffffffffffffae0, 8) MULTIEQUAL (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8)]
[ ---  CBRANCH (ram, 0x2688a0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x22, 4), (register, 0x0, 4) CALL (ram, 0x1e3810, 8) , (unique, 0x100024f2, 8) , (unique, 0x3200, 8) , (unique, 0x100024fa, 8) , (unique, 0x10001b47, 8) , (unique, 0x3200, 8), (unique, 0x100024fa, 8) CAST (unique, 0x10001b27, 8), (unique, 0x100024f2, 8) CAST (unique, 0x1000196b, 8), (unique, 0x10001b27, 8) COPY (unique, 0x100024e2, 8), (unique, 0x100024e2, 8) CAST (stack, 0xfffffffffffffba8, 8), (unique, 0x10001b47, 8) COPY (stack, 0xfffffffffffffbb0, 8), (stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8), (stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[ ---  CBRANCH (ram, 0x269148, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xfffffffffffffaf0, 4) , (const, 0x0, 4), (stack, 0xfffffffffffffaf0, 4) SUBPIECE (stack, 0xfffffffffffffaf0, 8) , (const, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10002502, 8) , (const, 0x269154, 8), (unique, 0x10002502, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1005, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x1005, 4)]
[(stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x1005, 4), (stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x1004, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x1005, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x1004, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x1005, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x1004, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x1005, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x1004, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x1005, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x1004, 4)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x1005, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x1004, 4)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x1005, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x1004, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x1005, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x1004, 4)]
[(stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x1005, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x1004, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x1005, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x1004, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x1005, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x1004, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x1005, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x1004, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x1005, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x1004, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x1005, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x1004, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x1005, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x1004, 4)]
[(stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x1005, 4), (stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x1004, 4)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x1005, 4), (stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x1004, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x1005, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x1004, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x1005, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x1004, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x1005, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x1004, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x1005, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x1004, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x1005, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x1004, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x1005, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x1004, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x1005, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x1004, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x1005, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x1004, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x1005, 4), (stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x1004, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x1005, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x1004, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x1005, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x1004, 4)]
[(stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0x1005, 4), (stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0x1004, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1005, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1004, 4)]
[ ---  CALL (ram, 0x1212c8, 8) , (unique, 0x10001973, 8)]
[ ---  BRANCH (ram, 0x2688f6, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbc0, 4) MULTIEQUAL (stack, 0xfffffffffffffbc0, 4) , (stack, 0xfffffffffffffbc0, 4)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb98, 8) MULTIEQUAL (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8)]
[(stack, 0xfffffffffffffb94, 4) MULTIEQUAL (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4)]
[(stack, 0xfffffffffffffb90, 4) MULTIEQUAL (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4)]
[(stack, 0xfffffffffffffb8c, 4) MULTIEQUAL (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4)]
[(stack, 0xfffffffffffffb88, 4) MULTIEQUAL (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4)]
[(stack, 0xfffffffffffffb84, 4) MULTIEQUAL (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4)]
[(stack, 0xfffffffffffffb80, 4) MULTIEQUAL (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4)]
[(stack, 0xfffffffffffffb7c, 4) MULTIEQUAL (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb60, 8) MULTIEQUAL (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8)]
[(stack, 0xfffffffffffffb58, 8) MULTIEQUAL (stack, 0xfffffffffffffb58, 8) , (stack, 0xfffffffffffffb58, 8)]
[(stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb20, 8) MULTIEQUAL (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae0, 8) MULTIEQUAL (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x10001b1f, 8) COPY (stack, 0xfffffffffffffb50, 8), (stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[ ---  CBRANCH (ram, 0x268ee9, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xfffffffffffffb50, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000250a, 8) , (const, 0x26890f, 8), (unique, 0x1000250a, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xeb0, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xeb0, 4)]
[(stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0xeb0, 4), (stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0xeaf, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0xeb0, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0xeaf, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0xeb0, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0xeaf, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0xeb0, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0xeaf, 4)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0xeb0, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0xeaf, 4)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0xeb0, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0xeaf, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0xeb0, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0xeaf, 4)]
[(stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0xeb0, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0xeaf, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0xeb0, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0xeaf, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0xeb0, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0xeaf, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0xeb0, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0xeaf, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0xeb0, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0xeaf, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0xeb0, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0xeaf, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0xeb0, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0xeaf, 4)]
[(stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0xeb0, 4), (stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0xeaf, 4)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0xeb0, 4), (stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0xeaf, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0xeb0, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0xeaf, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0xeb0, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0xeaf, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0xeb0, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0xeaf, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0xeb0, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0xeaf, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0xeb0, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0xeaf, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0xeb0, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0xeaf, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0xeb0, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0xeaf, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0xeb0, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0xeaf, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0xeb0, 4), (stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0xeaf, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0xeb0, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0xeaf, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0xeb0, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0xeaf, 4)]
[(stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0xeb0, 4), (stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0xeaf, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xeb0, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xeaf, 4)]
[(unique, 0x1000199b, 8) COPY (stack, 0xfffffffffffffb00, 8), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0xeb0, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0xeaf, 4)]
[(stack, 0xfffffffffffffaf0, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10002512, 8), (unique, 0x10002512, 8) CALL (ram, 0x121100, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (stack, 0xfffffffffffffb50, 8) , (const, 0x20, 8)]
[ ---  CBRANCH (ram, 0x268f0f, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xfffffffffffffb00, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0xeb0, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0xeaf, 4)]
[(stack, 0xfffffffffffffb18, 8) COPY (register, 0x0, 8)]
[(stack, 0xfffffffffffffae8, 8) COPY (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x268943, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000251a, 8) , (const, 0x26892b, 8), (unique, 0x1000251a, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xec3, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xec3, 4)]
[(stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0xec3, 4), (stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0xec2, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0xec3, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0xec2, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0xec3, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0xec2, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0xec3, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0xec2, 4)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0xec3, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0xec2, 4)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0xec3, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0xec2, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0xec3, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0xec2, 4)]
[(stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0xec3, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0xec2, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0xec3, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0xec2, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0xec3, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0xec2, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0xec3, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0xec2, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0xec3, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0xec2, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0xec3, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0xec2, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0xec3, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0xec2, 4)]
[(stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0xec3, 4), (stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0xec2, 4)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0xec3, 4), (stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0xec2, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0xec3, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0xec2, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0xec3, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0xec2, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0xec3, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0xec2, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0xec3, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0xec2, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0xec3, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0xec2, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0xec3, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0xec2, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0xec3, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0xec2, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0xec3, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0xec2, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0xec3, 4), (stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0xec2, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0xec3, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0xec2, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0xec3, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0xec2, 4)]
[(stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0xec3, 4), (stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0xec2, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xec3, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xec2, 4)]
[(stack, 0xfffffffffffffae8, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x1000252a, 8), (unique, 0x1000252a, 8) CALL (ram, 0x121100, 8) , (unique, 0x10002522, 8), (unique, 0x10002522, 8) CAST (unique, 0x1000199b, 8)]
[(stack, 0xfffffffffffffb18, 8) COPY (register, 0x30, 8), (register, 0x30, 8) CAST (unique, 0x10002542, 8), (unique, 0x10002542, 8) INT_ADD (unique, 0x10002532, 8) , (unique, 0x1000253a, 8), (unique, 0x1000253a, 8) CAST (unique, 0x100014b8, 8), (unique, 0x10002532, 8) CAST (unique, 0x100014c8, 8), (unique, 0x100014c8, 8) PTRSUB (register, 0x0, 8) , (const, 0x0, 8), (unique, 0x100014b8, 8) PTRSUB (stack, 0xfffffffffffffaf0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x1000252a, 8), (unique, 0x1000252a, 8) CALL (ram, 0x121100, 8) , (unique, 0x10002522, 8), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0xec3, 4), (unique, 0x10002522, 8) CAST (unique, 0x1000199b, 8), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0xec2, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbc0, 4) MULTIEQUAL (stack, 0xfffffffffffffbc0, 4) , (stack, 0xfffffffffffffbc0, 4)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb98, 8) MULTIEQUAL (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8)]
[(stack, 0xfffffffffffffb94, 4) MULTIEQUAL (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4)]
[(stack, 0xfffffffffffffb90, 4) MULTIEQUAL (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4)]
[(stack, 0xfffffffffffffb8c, 4) MULTIEQUAL (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4)]
[(stack, 0xfffffffffffffb88, 4) MULTIEQUAL (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4)]
[(stack, 0xfffffffffffffb84, 4) MULTIEQUAL (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4)]
[(stack, 0xfffffffffffffb80, 4) MULTIEQUAL (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4)]
[(stack, 0xfffffffffffffb7c, 4) MULTIEQUAL (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb60, 8) MULTIEQUAL (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8)]
[(stack, 0xfffffffffffffb58, 8) MULTIEQUAL (stack, 0xfffffffffffffb58, 8) , (stack, 0xfffffffffffffb58, 8)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae0, 8) MULTIEQUAL (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x10001ac3, 8) COPY (stack, 0xfffffffffffffb30, 8), (stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[ ---  CBRANCH (ram, 0x2691d0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xfffffffffffffb20, 4) , (const, 0x0, 4), (stack, 0xfffffffffffffb20, 4) SUBPIECE (stack, 0xfffffffffffffb20, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffb20, 8) MULTIEQUAL (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000254a, 8) , (const, 0x2691dc, 8), (unique, 0x1000254a, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xfe1, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xfe1, 4)]
[(stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0xfe1, 4), (stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0xfe0, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0xfe1, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0xfe0, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0xfe1, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0xfe0, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0xfe1, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0xfe0, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0xfe1, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0xfe0, 4)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0xfe1, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0xfe0, 4)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0xfe1, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0xfe0, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0xfe1, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0xfe0, 4)]
[(stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0xfe1, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0xfe0, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0xfe1, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0xfe0, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0xfe1, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0xfe0, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0xfe1, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0xfe0, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0xfe1, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0xfe0, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0xfe1, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0xfe0, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0xfe1, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0xfe0, 4)]
[(stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0xfe1, 4), (stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0xfe0, 4)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0xfe1, 4), (stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0xfe0, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0xfe1, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0xfe0, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0xfe1, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0xfe0, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0xfe1, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0xfe0, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0xfe1, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0xfe0, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0xfe1, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0xfe0, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0xfe1, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0xfe0, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0xfe1, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0xfe0, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0xfe1, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0xfe0, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0xfe1, 4), (stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0xfe0, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0xfe1, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0xfe0, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0xfe1, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0xfe0, 4)]
[(stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0xfe1, 4), (stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0xfe0, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xfe1, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xfe0, 4)]
[ ---  CALL (ram, 0x1212c8, 8) , (unique, 0x10001ac3, 8)]
[ ---  BRANCH (ram, 0x268953, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbc0, 4) MULTIEQUAL (stack, 0xfffffffffffffbc0, 4) , (stack, 0xfffffffffffffbc0, 4)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffb98, 8) MULTIEQUAL (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8)]
[(stack, 0xfffffffffffffb94, 4) MULTIEQUAL (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4)]
[(stack, 0xfffffffffffffb90, 4) MULTIEQUAL (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4)]
[(stack, 0xfffffffffffffb8c, 4) MULTIEQUAL (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4)]
[(stack, 0xfffffffffffffb88, 4) MULTIEQUAL (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4)]
[(stack, 0xfffffffffffffb84, 4) MULTIEQUAL (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4)]
[(stack, 0xfffffffffffffb80, 4) MULTIEQUAL (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4)]
[(stack, 0xfffffffffffffb7c, 4) MULTIEQUAL (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb60, 8) MULTIEQUAL (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8)]
[(stack, 0xfffffffffffffb58, 8) MULTIEQUAL (stack, 0xfffffffffffffb58, 8) , (stack, 0xfffffffffffffb58, 8)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb20, 8) MULTIEQUAL (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8)]
[(stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae0, 8) MULTIEQUAL (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x8, 8) CAST (unique, 0x1000255a, 8), (unique, 0x1000255a, 8) INT_ADD (stack, 0xfffffffffffffb28, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) INT_ADD (unique, 0x10002552, 8) , (const, 0x1, 8), (unique, 0x10002552, 8) CAST (unique, 0x100014d8, 8), (unique, 0x100014d8, 8) PTRSUB (stack, 0xfffffffffffffb18, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8), (stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffaf8, 8) COPY (unique, 0x10002562, 8), (unique, 0x10002562, 8) CAST (stack, 0xfffffffffffffba8, 8), (stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(unique, 0x10001b87, 8) COPY (unique, 0x3100, 8), (unique, 0x3100, 8) INT_ADD (unique, 0x10002552, 8) , (const, 0x1, 8), (unique, 0x10002552, 8) CAST (unique, 0x100014d8, 8), (unique, 0x100014d8, 8) PTRSUB (stack, 0xfffffffffffffb18, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[ ---  CBRANCH (ram, 0x268e7c, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_CARRY (stack, 0xfffffffffffffb28, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) INT_ADD (unique, 0x10002552, 8) , (const, 0x1, 8), (unique, 0x10002552, 8) CAST (unique, 0x100014d8, 8), (unique, 0x100014d8, 8) PTRSUB (stack, 0xfffffffffffffb18, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8), (stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000256a, 8) , (const, 0x268992, 8), (unique, 0x1000256a, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xf06, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xf06, 4)]
[(stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0xf06, 4), (stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0xf05, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0xf06, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0xf05, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0xf06, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0xf05, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0xf06, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0xf05, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0xf06, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0xf05, 4)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0xf06, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0xf05, 4)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0xf06, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0xf05, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0xf06, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0xf05, 4)]
[(stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0xf06, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0xf05, 4), (stack, 0xfffffffffffffb20, 8) COPY (unique, 0x3100, 8)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0xf06, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0xf05, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0xf06, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0xf05, 4), (stack, 0xfffffffffffffb30, 8) COPY (register, 0x8, 8)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0xf06, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0xf05, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0xf06, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0xf05, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0xf06, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0xf05, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0xf06, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0xf05, 4)]
[(stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0xf06, 4), (stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0xf05, 4)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0xf06, 4), (stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0xf05, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0xf06, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0xf05, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0xf06, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0xf05, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0xf06, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0xf05, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0xf06, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0xf05, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0xf06, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0xf05, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0xf06, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0xf05, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0xf06, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0xf05, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0xf06, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0xf05, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0xf06, 4), (stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0xf05, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0xf06, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0xf05, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0xf06, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0xf05, 4)]
[(stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0xf06, 4), (stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0xf05, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xf06, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xf05, 4)]
[ ---  CBRANCH (ram, 0x2689b1, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x2300b0, 8) , (register, 0x8, 8)]
[(unique, 0x10001b8f, 8) COPY (stack, 0xfffffffffffffb20, 8)]
[ ---  CBRANCH (ram, 0x268e7c, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (const, 0x1000, 8) , (stack, 0xfffffffffffffb30, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10002572, 8) , (const, 0x268e84, 8), (unique, 0x10002572, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xfa8, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xfa8, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0xfa8, 4), (stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0xfa7, 4), (stack, 0xfffffffffffffae0, 8) MULTIEQUAL (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0xfa8, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0xfa7, 4), (stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0xfa8, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0xfa7, 4), (stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0xfa8, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0xfa7, 4), (stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0xfa8, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0xfa7, 4), (stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0xfa8, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0xfa7, 4), (stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0xfa8, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0xfa7, 4), (stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0xfa8, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0xfa7, 4), (stack, 0xfffffffffffffb20, 8) MULTIEQUAL (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0xfa8, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0xfa7, 4), (stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0xfa8, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0xfa7, 4), (stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0xfa8, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0xfa7, 4), (stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0xfa8, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0xfa7, 4), (stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0xfa8, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0xfa7, 4), (stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0xfa8, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0xfa7, 4), (stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0xfa8, 4), (stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0xfa7, 4), (stack, 0xfffffffffffffb58, 8) MULTIEQUAL (stack, 0xfffffffffffffb58, 8) , (stack, 0xfffffffffffffb58, 8)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0xfa8, 4), (stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0xfa7, 4), (stack, 0xfffffffffffffb60, 8) MULTIEQUAL (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0xfa8, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0xfa7, 4), (stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0xfa8, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0xfa7, 4), (stack, 0xfffffffffffffb7c, 4) MULTIEQUAL (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0xfa8, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0xfa7, 4), (stack, 0xfffffffffffffb80, 4) MULTIEQUAL (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0xfa8, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0xfa7, 4), (stack, 0xfffffffffffffb84, 4) MULTIEQUAL (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0xfa8, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0xfa7, 4), (stack, 0xfffffffffffffb88, 4) MULTIEQUAL (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0xfa8, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0xfa7, 4), (stack, 0xfffffffffffffb8c, 4) MULTIEQUAL (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0xfa8, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0xfa7, 4), (stack, 0xfffffffffffffb90, 4) MULTIEQUAL (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0xfa8, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0xfa7, 4), (stack, 0xfffffffffffffb94, 4) MULTIEQUAL (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0xfa8, 4), (stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0xfa7, 4), (stack, 0xfffffffffffffb98, 8) MULTIEQUAL (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0xfa8, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0xfa7, 4), (stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0xfa8, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0xfa7, 4), (stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0xfa8, 4), (stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0xfa7, 4), (stack, 0xfffffffffffffbc0, 4) MULTIEQUAL (stack, 0xfffffffffffffbc0, 4) , (stack, 0xfffffffffffffbc0, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xfa8, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xfa7, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(unique, 0x1000198b, 8) COPY (stack, 0xfffffffffffffaf8, 8), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0xfa8, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0xfa7, 4), (stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffb30, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x1000257a, 8), (unique, 0x1000257a, 8) CALL (ram, 0x1212c0, 8) , (register, 0x10, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0x10001b87, 8) , (unique, 0x10001b8f, 8)]
[ ---  CBRANCH (ram, 0x26919a, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x1000257a, 8), (unique, 0x1000257a, 8) CALL (ram, 0x1212c0, 8) , (register, 0x10, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0x10001b87, 8) , (unique, 0x10001b8f, 8)]
[(stack, 0xfffffffffffffb44, 4) COPY (const, 0x1, 4)]
[ ---  CBRANCH (ram, 0x267926, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xfffffffffffffaf8, 8) , (unique, 0x10002582, 8), (unique, 0x10002582, 8) CAST (register, 0x0, 8), (register, 0x0, 8) PTRSUB (stack, 0xfffffffffffffb08, 8) , (const, 0x10, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000258a, 8) , (const, 0x2691c7, 8), (unique, 0x1000258a, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xfda, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xfda, 4)]
[(stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0xfda, 4), (stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0xfd9, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0xfda, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0xfd9, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0xfda, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0xfd9, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0xfda, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0xfd9, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0xfda, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0xfd9, 4)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0xfda, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0xfd9, 4)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0xfda, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0xfd9, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0xfda, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0xfd9, 4)]
[(stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0xfda, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0xfd9, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0xfda, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0xfd9, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0xfda, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0xfd9, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0xfda, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0xfd9, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0xfda, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0xfd9, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0xfda, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0xfd9, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0xfda, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0xfd9, 4)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0xfda, 4), (stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0xfd9, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0xfda, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0xfd9, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0xfda, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0xfd9, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0xfda, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0xfd9, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0xfda, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0xfd9, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0xfda, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0xfd9, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0xfda, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0xfd9, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0xfda, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0xfd9, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0xfda, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0xfd9, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0xfda, 4), (stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0xfd9, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0xfda, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0xfd9, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0xfda, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0xfd9, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xfda, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xfd9, 4)]
[ ---  CALL (ram, 0x1212c8, 8) , (unique, 0x1000198b, 8)]
[ ---  BRANCH (ram, 0x267926, 1)]
[(stack, 0xfffffffffffffb20, 8) INT_ADD (unique, 0x10001903, 8) , (const, 0x1, 4), (unique, 0x10001903, 8) INT_LEFT (unique, 0x100018fb, 8) , (const, 0x20, 8), (unique, 0x100018fb, 8) INT_SEXT (unique, 0x10002592, 4), (unique, 0x10002592, 4) CAST (stack, 0xfffffffffffffb24, 4), (stack, 0xfffffffffffffb24, 4) SUBPIECE (stack, 0xfffffffffffffb20, 8) , (const, 0x4, 8)]
[ ---  BRANCH (ram, 0x2689ed, 1)]
[(stack, 0xfffffffffffffb30, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x1000259e, 8), (unique, 0x1000259e, 8) INT_AND (unique, 0x10002596, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x10002596, 8) CAST (unique, 0x3800, 8), (unique, 0x3800, 8) PTRADD (register, 0x20, 8) , (unique, 0x100014e8, 8) , (const, 0x1, 8), (unique, 0x100014e8, 8) INT_ADD (unique, 0x100007c4, 8) , (const, 0xf, 8), (unique, 0x100007c4, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (unique, 0x3100, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3100, 8) INT_ADD (stack, 0xfffffffffffffb20, 8) , (const, 0x1e, 8)]
[(stack, 0xfffffffffffffb28, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) INT_ADD (stack, 0xfffffffffffffb28, 8) , (register, 0x0, 8), (register, 0x0, 8) INT_AND (unique, 0x3100, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3100, 8) INT_ADD (stack, 0xfffffffffffffb20, 8) , (const, 0x1e, 8)]
[(stack, 0xfffffffffffffb20, 8) INT_AND (stack, 0xfffffffffffffb20, 8) , (const, 0xffffffff00000000, 8)]
[(unique, 0x10001baf, 8) COPY (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (unique, 0x100007c4, 8) , (const, 0x1, 8), (unique, 0x100007c4, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (unique, 0x3100, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3100, 8) INT_ADD (stack, 0xfffffffffffffb20, 8) , (const, 0x1e, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100025a6, 8) , (const, 0x2689fd, 8), (unique, 0x100025a6, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8), (register, 0x20, 8) MULTIEQUAL (unique, 0x10001baf, 8) , (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xf70, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xf70, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0xf70, 4), (stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0xf6f, 4), (stack, 0xfffffffffffffae0, 8) MULTIEQUAL (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0xf70, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0xf6f, 4), (stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0xf70, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0xf6f, 4), (stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0xf70, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0xf6f, 4), (stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0xf70, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0xf6f, 4), (stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0xf70, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0xf6f, 4), (stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0xf70, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0xf6f, 4), (stack, 0xfffffffffffffb20, 8) MULTIEQUAL (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0xf70, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0xf6f, 4), (stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0xf70, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (unique, 0x10001db2, 8) , (const, 0xf6f, 4), (unique, 0x10001db2, 8) COPY (register, 0x38, 8), (register, 0x38, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0xf70, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0xf6f, 4), (stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0xf70, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0xf6f, 4), (stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0xf70, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0xf6f, 4), (stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0xf70, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0xf6f, 4), (stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0xf70, 4), (stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0xf6f, 4), (stack, 0xfffffffffffffb58, 8) MULTIEQUAL (stack, 0xfffffffffffffb58, 8) , (stack, 0xfffffffffffffb58, 8)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0xf70, 4), (stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0xf6f, 4), (stack, 0xfffffffffffffb60, 8) MULTIEQUAL (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0xf70, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0xf6f, 4), (stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0xf70, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0xf6f, 4), (stack, 0xfffffffffffffb7c, 4) MULTIEQUAL (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0xf70, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0xf6f, 4), (stack, 0xfffffffffffffb80, 4) MULTIEQUAL (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0xf70, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0xf6f, 4), (stack, 0xfffffffffffffb84, 4) MULTIEQUAL (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0xf70, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0xf6f, 4), (stack, 0xfffffffffffffb88, 4) MULTIEQUAL (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0xf70, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0xf6f, 4), (stack, 0xfffffffffffffb8c, 4) MULTIEQUAL (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0xf70, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0xf6f, 4), (stack, 0xfffffffffffffb90, 4) MULTIEQUAL (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0xf70, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0xf6f, 4), (stack, 0xfffffffffffffb94, 4) MULTIEQUAL (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0xf70, 4), (stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0xf6f, 4), (stack, 0xfffffffffffffb98, 8) MULTIEQUAL (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0xf70, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0xf6f, 4), (stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0xf70, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0xf6f, 4), (stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0xf70, 4), (stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0xf6f, 4), (stack, 0xfffffffffffffbc0, 4) MULTIEQUAL (stack, 0xfffffffffffffbc0, 4) , (stack, 0xfffffffffffffbc0, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xf70, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xf6f, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(register, 0x0, 8) CAST (unique, 0x100025b6, 8), (unique, 0x100025b6, 8) CALL (ram, 0x121230, 8) , (register, 0x38, 8) , (unique, 0xbd80, 8) , (unique, 0x100025ae, 8), (unique, 0x100025ae, 8) CAST (unique, 0x10001943, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (unique, 0x10001b1f, 8) , (const, 0x20, 8), (unique, 0x10001943, 8) COPY (stack, 0xfffffffffffffaf0, 8), (register, 0x38, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8), (stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(unique, 0x100019a3, 8) COPY (stack, 0xfffffffffffffb00, 8), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0xf70, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0xf6f, 4), (stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(unique, 0x1000192b, 8) COPY (stack, 0xfffffffffffffae8, 8), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0xf70, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0xf6f, 4), (stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[ ---  CBRANCH (ram, 0x268a18, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xfffffffffffffb00, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0xf70, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0xf6f, 4), (stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100025be, 8) , (const, 0x268a18, 8), (unique, 0x100025be, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xf84, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xf84, 4)]
[(stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0xf84, 4), (stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0xf83, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0xf84, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0xf83, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0xf84, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0xf83, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0xf84, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0xf83, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0xf84, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0xf83, 4)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0xf84, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0xf83, 4)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0xf84, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0xf83, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0xf84, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0xf83, 4)]
[(stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0xf84, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0xf83, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0xf84, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0xf83, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0xf84, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0xf83, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0xf84, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0xf83, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0xf84, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0xf83, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0xf84, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0xf83, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0xf84, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0xf83, 4)]
[(stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0xf84, 4), (stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0xf83, 4)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0xf84, 4), (stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0xf83, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0xf84, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0xf83, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0xf84, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0xf83, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0xf84, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0xf83, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0xf84, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0xf83, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0xf84, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0xf83, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0xf84, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0xf83, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0xf84, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0xf83, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0xf84, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0xf83, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0xf84, 4), (stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0xf83, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0xf84, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0xf83, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0xf84, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0xf83, 4)]
[(stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0xf84, 4), (stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0xf83, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xf84, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xf83, 4)]
[(register, 0x0, 8) CAST (unique, 0x100025ce, 8), (unique, 0x100025ce, 8) CALL (ram, 0x121230, 8) , (register, 0x0, 8) , (unique, 0x100019a3, 8) , (unique, 0x100025c6, 8), (unique, 0x100025c6, 8) CAST (unique, 0x1000192b, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbc0, 4) MULTIEQUAL (stack, 0xfffffffffffffbc0, 4) , (stack, 0xfffffffffffffbc0, 4)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb98, 8) MULTIEQUAL (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8)]
[(stack, 0xfffffffffffffb94, 4) MULTIEQUAL (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4)]
[(stack, 0xfffffffffffffb90, 4) MULTIEQUAL (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4)]
[(stack, 0xfffffffffffffb8c, 4) MULTIEQUAL (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4)]
[(stack, 0xfffffffffffffb88, 4) MULTIEQUAL (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4)]
[(stack, 0xfffffffffffffb84, 4) MULTIEQUAL (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4)]
[(stack, 0xfffffffffffffb80, 4) MULTIEQUAL (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4)]
[(stack, 0xfffffffffffffb7c, 4) MULTIEQUAL (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb60, 8) MULTIEQUAL (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8)]
[(stack, 0xfffffffffffffb58, 8) MULTIEQUAL (stack, 0xfffffffffffffb58, 8) , (stack, 0xfffffffffffffb58, 8)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb20, 8) MULTIEQUAL (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae0, 8) MULTIEQUAL (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xf89, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x0, 8) , (const, 0x0, 1), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[(register, 0xb8, 4) COPY (const, 0x1, 4)]
[ ---  CBRANCH (ram, 0x26843c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xb8, 4) , (const, 0x0, 4), (register, 0xb8, 4) INT_AND (unique, 0x10001b1b, 4) , (const, 0x4000, 4)]
[(stack, 0xfffffffffffffaf8, 8) COPY (unique, 0x100025d6, 8), (unique, 0x100025d6, 8) CAST (stack, 0xfffffffffffffba8, 8)]
[ ---  BRANCH (ram, 0x268a28, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbc0, 4) MULTIEQUAL (stack, 0xfffffffffffffbc0, 4) , (stack, 0xfffffffffffffbc0, 4)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb98, 8) MULTIEQUAL (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8)]
[(stack, 0xfffffffffffffb94, 4) MULTIEQUAL (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4)]
[(stack, 0xfffffffffffffb90, 4) MULTIEQUAL (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4)]
[(stack, 0xfffffffffffffb8c, 4) MULTIEQUAL (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4)]
[(stack, 0xfffffffffffffb88, 4) MULTIEQUAL (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4)]
[(stack, 0xfffffffffffffb84, 4) MULTIEQUAL (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4)]
[(stack, 0xfffffffffffffb80, 4) MULTIEQUAL (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4)]
[(stack, 0xfffffffffffffb7c, 4) MULTIEQUAL (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb60, 8) MULTIEQUAL (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8)]
[(stack, 0xfffffffffffffb58, 8) MULTIEQUAL (stack, 0xfffffffffffffb58, 8) , (stack, 0xfffffffffffffb58, 8)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb20, 8) MULTIEQUAL (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae0, 8) MULTIEQUAL (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb8, 4) MULTIEQUAL (register, 0xb8, 4) , (register, 0xb8, 4)]
[(unique, 0x1000197b, 8) COPY (stack, 0xfffffffffffffaf8, 8), (stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(unique, 0x10001c27, 8) COPY (register, 0x20, 8), (register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x267b84, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xfffffffffffffaf8, 8) , (unique, 0x100025de, 8), (unique, 0x100025de, 8) CAST (register, 0x0, 8), (register, 0x0, 8) PTRSUB (stack, 0xfffffffffffffb08, 8) , (const, 0x10, 8), (stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8), (stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100025e6, 8) , (const, 0x268a41, 8), (unique, 0x100025e6, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xfa3, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xfa3, 4)]
[(stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0xfa3, 4), (stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0xfa2, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0xfa3, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0xfa2, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0xfa3, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0xfa2, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0xfa3, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0xfa2, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0xfa3, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0xfa2, 4)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0xfa3, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0xfa2, 4)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0xfa3, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0xfa2, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0xfa3, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0xfa2, 4)]
[(stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0xfa3, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0xfa2, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0xfa3, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0xfa2, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0xfa3, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0xfa2, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0xfa3, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0xfa2, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0xfa3, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0xfa2, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0xfa3, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0xfa2, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0xfa3, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0xfa2, 4)]
[(stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0xfa3, 4), (stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0xfa2, 4)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0xfa3, 4), (stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0xfa2, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0xfa3, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0xfa2, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0xfa3, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0xfa2, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0xfa3, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0xfa2, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0xfa3, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0xfa2, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0xfa3, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0xfa2, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0xfa3, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0xfa2, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0xfa3, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0xfa2, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0xfa3, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0xfa2, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0xfa3, 4), (stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0xfa2, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0xfa3, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0xfa2, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0xfa3, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0xfa2, 4)]
[(stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0xfa3, 4), (stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0xfa2, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xfa3, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xfa2, 4)]
[ ---  CALL (ram, 0x1212c8, 8) , (unique, 0x1000197b, 8)]
[(unique, 0x10001c2f, 8) COPY (register, 0x20, 8)]
[ ---  BRANCH (ram, 0x267b84, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100025ee, 8) , (const, 0x2688a8, 8), (unique, 0x100025ee, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x100a, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x100a, 4)]
[(stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x100a, 4), (stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x1009, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x100a, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x1009, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x100a, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x1009, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x100a, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x1009, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x100a, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x1009, 4)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x100a, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x1009, 4)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x100a, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x1009, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x100a, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x1009, 4)]
[(stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x100a, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x1009, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x100a, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x1009, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x100a, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x1009, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x100a, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x1009, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x100a, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x1009, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x100a, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x1009, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x100a, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x1009, 4)]
[(stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x100a, 4), (stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0x1009, 4)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x100a, 4), (stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x1009, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x100a, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x1009, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x100a, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x1009, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x100a, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x1009, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x100a, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x1009, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x100a, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x1009, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x100a, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x1009, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x100a, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x1009, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x100a, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x1009, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x100a, 4), (stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x1009, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x100a, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x1009, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x100a, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x1009, 4)]
[(stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0x100a, 4), (stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0x1009, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x100a, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1009, 4)]
[ ---  CBRANCH (ram, 0x26849f, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 1) , (const, 0x0, 1), (register, 0x0, 1) CALL (ram, 0x19d0c0, 8) , (unique, 0x3200, 8)]
[(register, 0xb8, 4) COPY (const, 0x0, 4)]
[ ---  BRANCH (ram, 0x267b84, 1)]
[ ---  CBRANCH (ram, 0x267edc, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x10000442, 4) , (const, 0x0, 4), (unique, 0x10000442, 4) INT_AND (register, 0xa0, 4) , (const, 0x40, 4)]
[ ---  CBRANCH (ram, 0x267edc, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x5c, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x1000260e, 8), (unique, 0x1000260e, 8) CAST (unique, 0x10000f98, 8), (unique, 0x10000f98, 8) PTRSUB (unique, 0x3a00, 8) , (const, 0x0, 8), (unique, 0x3a00, 8) CAST (unique, 0x10002606, 8), (unique, 0x10002606, 8) INT_ADD (unique, 0x3880, 8) , (unique, 0x100025fe, 8), (unique, 0x100025fe, 8) CAST (unique, 0x10001a23, 8), (unique, 0x3880, 8) INT_ADD (unique, 0x100025f6, 8) , (const, 0xffffffffffffffff, 8), (unique, 0x100025f6, 8) CAST (stack, 0xfffffffffffffb30, 8)]
[(unique, 0x10001b57, 8) COPY (unique, 0x3a00, 8)]
[ ---  CBRANCH (ram, 0x269075, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (stack, 0xfffffffffffffb30, 8) , (unique, 0x3a00, 8)]
[(unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000261e, 8), (unique, 0x1000261e, 8) INT_ADD (unique, 0x10002616, 8) , (const, 0x17, 8), (unique, 0x10002616, 8) CAST (unique, 0x10000fb0, 8), (unique, 0x10000fb0, 8) PTRSUB (unique, 0x10000fa8, 8) , (const, 0x78, 8), (unique, 0x10000fa8, 8) PTRADD (unique, 0x3a00, 8) , (const, 0xffffffffffffffff, 8) , (const, 0x90, 8)]
[(unique, 0x10001df2, 8) COPY (unique, 0x3a00, 8)]
[(unique, 0x10001b5f, 8) COPY (unique, 0x10001864, 8), (unique, 0x10001864, 8) MULTIEQUAL (unique, 0x10001df2, 8) , (unique, 0x10001dfa, 8)]
[ ---  CBRANCH (ram, 0x267aca, 1) , (unique, 0x1000186c, 1), (unique, 0x1000186c, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x5c, 1), (unique, 0xbb00, 1) MULTIEQUAL (unique, 0xbb00, 1) , (unique, 0xbb00, 1)]
[(unique, 0x10001b67, 8) COPY (stack, 0xfffffffffffffb30, 8)]
[ ---  CBRANCH (ram, 0x267ac0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xfffffffffffffb30, 8) , (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x1000262e, 8), (unique, 0x1000262e, 8) INT_ADD (unique, 0x10002626, 8) , (const, 0x17, 8), (unique, 0x10002626, 8) CAST (unique, 0x10000ff0, 8), (unique, 0x10000ff0, 8) PTRSUB (unique, 0x10000fe8, 8) , (const, 0x78, 8), (unique, 0x10000fe8, 8) PTRADD (unique, 0x10001864, 8) , (const, 0xffffffffffffffff, 8) , (const, 0x90, 8)]
[(unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000263e, 8), (unique, 0x1000263e, 8) INT_ADD (unique, 0x10002636, 8) , (const, 0x16, 8), (unique, 0x10002636, 8) CAST (unique, 0x10000fd0, 8), (unique, 0x10000fd0, 8) PTRSUB (unique, 0x10000fc8, 8) , (const, 0x78, 8), (unique, 0x10000fc8, 8) PTRADD (unique, 0x10001864, 8) , (const, 0xffffffffffffffff, 8) , (const, 0x90, 8)]
[(unique, 0x10001dfa, 8) COPY (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x267edc, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x10000469, 8) , (const, 0x0, 8), (unique, 0x10000469, 8) INT_AND (register, 0x8, 8) , (const, 0x1, 8), (register, 0x8, 8) INT_SUB (register, 0x8, 8) , (unique, 0x10002656, 8), (unique, 0x10002656, 8) CAST (register, 0x0, 8), (register, 0x8, 8) INT_ADD (unique, 0x10002646, 8) , (unique, 0x1000264e, 8), (unique, 0x1000264e, 8) CAST (stack, 0xfffffffffffffb30, 8), (unique, 0x10002646, 8) CAST (stack, 0xfffffffffffffb18, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x10001b57, 8) , (unique, 0x10001b5f, 8) , (unique, 0x10001b67, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000265e, 8) , (const, 0x267ef8, 8), (unique, 0x1000265e, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x704, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x704, 4)]
[(stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x704, 4), (stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x703, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x704, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x703, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x704, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x703, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x704, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x703, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x704, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x703, 4)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x704, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x703, 4)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x704, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x703, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x704, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x703, 4)]
[(stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x704, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x703, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x704, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x703, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x704, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x703, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x704, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x703, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x704, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x703, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x704, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x703, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x704, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x703, 4)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x704, 4), (stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x703, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x704, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x703, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x704, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x703, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x704, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x703, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x704, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x703, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x704, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x703, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x704, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x703, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x704, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x703, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x704, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x703, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x704, 4), (stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x703, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x704, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x703, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x704, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x703, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x704, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x703, 4)]
[(unique, 0x10001d7f, 4) COPY (register, 0xa0, 4)]
[ ---  CBRANCH (ram, 0x2681c1, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x267730, 8) , (unique, 0x10002666, 8) , (register, 0x30, 4) , (unique, 0x1000266e, 8) , (register, 0x8, 8), (unique, 0x1000266e, 8) CAST (unique, 0x10001aeb, 8), (unique, 0x10002666, 8) CAST (unique, 0x10001a6b, 8), (register, 0x30, 4) INT_OR (register, 0xa0, 4) , (const, 0x2, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10002676, 8) , (const, 0x0, 1), (unique, 0x10002676, 8) CAST (unique, 0x10001000, 8), (unique, 0x10001000, 8) PTRSUB (unique, 0x3a00, 8) , (const, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000267e, 8) , (const, 0x267b17, 8), (unique, 0x1000267e, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x4a5, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x4a5, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x488, 4)]
[(stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x4a5, 4), (stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x4a4, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x4a5, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x4a4, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x4a5, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x4a4, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x4a5, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x4a4, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x4a5, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x4a4, 4)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x4a5, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x4a4, 4)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x4a5, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x4a4, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x4a5, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x4a4, 4)]
[(stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x4a5, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x4a4, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x4a5, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x4a4, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x4a5, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x4a4, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x4a5, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x4a4, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x4a5, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x4a4, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x4a5, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x4a4, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x4a5, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x4a4, 4)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x4a5, 4), (stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x4a4, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x4a5, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x4a4, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x4a5, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x4a4, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x4a5, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x4a4, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x4a5, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x4a4, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x4a5, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x4a4, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x4a5, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x4a4, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x4a5, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x4a4, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x4a5, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x4a4, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x4a5, 4), (stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x4a4, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x4a5, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x4a4, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x4a5, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x4a4, 4)]
[(stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0x4a5, 4), (stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0x4a4, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x4a5, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x4a4, 4)]
[ ---  CBRANCH (ram, 0x2691ee, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x267730, 8) , (unique, 0x10002686, 8) , (register, 0x30, 4) , (unique, 0x1000268e, 8) , (register, 0x8, 8), (unique, 0x1000268e, 8) CAST (unique, 0x10001aeb, 8), (unique, 0x10002686, 8) CAST (unique, 0x10001a6b, 8), (register, 0x30, 4) INT_OR (register, 0xb0, 4) , (const, 0x2, 4), (register, 0xb0, 4) INT_AND (register, 0xa0, 4) , (const, 0xfffff7ef, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb98, 8) MULTIEQUAL (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8)]
[(stack, 0xfffffffffffffb94, 4) MULTIEQUAL (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4)]
[(stack, 0xfffffffffffffb90, 4) MULTIEQUAL (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4)]
[(stack, 0xfffffffffffffb8c, 4) MULTIEQUAL (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4)]
[(stack, 0xfffffffffffffb88, 4) MULTIEQUAL (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4)]
[(stack, 0xfffffffffffffb84, 4) MULTIEQUAL (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4)]
[(stack, 0xfffffffffffffb80, 4) MULTIEQUAL (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4)]
[(stack, 0xfffffffffffffb7c, 4) MULTIEQUAL (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb60, 8) MULTIEQUAL (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb20, 8) MULTIEQUAL (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae0, 8) MULTIEQUAL (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x6ed, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (register, 0xa0, 4), (unique, 0x3100, 8) PTRSUB (register, 0x8, 8) , (const, 0x18, 8), (register, 0xa0, 4) INT_OR (register, 0xa0, 4) , (register, 0x0, 4), (register, 0x0, 4) INT_AND (unique, 0xbc80, 4) , (const, 0xfffffffd, 4), (register, 0xa0, 4) INT_AND (register, 0xa0, 4) , (const, 0x2, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0x8, 8) , (const, 0x18, 8), (register, 0xa0, 4) MULTIEQUAL (unique, 0x10001d7f, 4) , (register, 0xb0, 4)]
[ ---  BRANCH (ram, 0x267d4d, 1)]
[ ---  CBRANCH (ram, 0x2681c1, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x3, 4)]
[ ---  CBRANCH (ram, 0x2681c1, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xa0, 4) , (register, 0xb0, 4)]
[(stack, 0xfffffffffffffb60, 8) COPY (const, 0x0, 8)]
[(stack, 0xfffffffffffffb08, 8) COPY (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x1000269e, 8), (unique, 0x1000269e, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffb58, 8)]
[(stack, 0xfffffffffffffb10, 8) COPY (unique, 0x3400, 8), (unique, 0x3400, 8) INT_ADD (unique, 0x100026a6, 8) , (unique, 0xbd80, 8), (unique, 0x100026a6, 8) CAST (unique, 0x10001020, 8), (unique, 0x10001020, 8) PTRSUB (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0x8, 8) , (const, 0x10, 8), (unique, 0xbd80, 8) CAST (unique, 0x10002696, 8), (unique, 0x10002696, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10001008, 8), (unique, 0x10001008, 8) PTRSUB (register, 0x8, 8) , (const, 0x0, 8)]
[(register, 0x0, 4) INT_AND (register, 0xa0, 4) , (const, 0x10, 4)]
[ ---  BRANCH (ram, 0x26814b, 1)]
[(register, 0xb0, 8) CAST (unique, 0x100026b6, 8), (unique, 0x100026b6, 8) INT_ADD (unique, 0x100026ae, 8) , (const, 0x1, 8), (unique, 0x100026ae, 8) CAST (unique, 0x100011e8, 8), (unique, 0x100011e8, 8) PTRSUB (register, 0x0, 8) , (const, 0x0, 8)]
[(stack, 0xfffffffffffffb20, 8) INT_LEFT (unique, 0x10000b2f, 8) , (const, 0x20, 4), (unique, 0x10000b2f, 8) INT_ZEXT (stack, 0xfffffffffffffb24, 4)]
[(register, 0xb8, 4) COPY (const, 0x0, 4)]
[(stack, 0xfffffffffffffb18, 8) COPY (const, 0x1, 8)]
[(stack, 0xfffffffffffffb30, 8) CAST (unique, 0x100026be, 8), (unique, 0x100026be, 8) PTRSUB (const, 0x0, 8) , (const, 0x2b525a, 8)]
[ ---  BRANCH (ram, 0x267b84, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbc0, 4) MULTIEQUAL (stack, 0xfffffffffffffbc0, 4) , (stack, 0xfffffffffffffbc0, 4) , (stack, 0xfffffffffffffbc0, 4) , (stack, 0xfffffffffffffbc0, 4) , (stack, 0xfffffffffffffbc0, 4) , (stack, 0xfffffffffffffbc0, 4) , (stack, 0xfffffffffffffbc0, 4) , (stack, 0xfffffffffffffbc0, 4)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb98, 8) MULTIEQUAL (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8)]
[(stack, 0xfffffffffffffb94, 4) MULTIEQUAL (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4)]
[(stack, 0xfffffffffffffb90, 4) MULTIEQUAL (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4)]
[(stack, 0xfffffffffffffb8c, 4) MULTIEQUAL (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4)]
[(stack, 0xfffffffffffffb88, 4) MULTIEQUAL (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4)]
[(stack, 0xfffffffffffffb84, 4) MULTIEQUAL (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4)]
[(stack, 0xfffffffffffffb80, 4) MULTIEQUAL (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4)]
[(stack, 0xfffffffffffffb7c, 4) MULTIEQUAL (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb60, 8) MULTIEQUAL (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8)]
[(stack, 0xfffffffffffffb58, 8) MULTIEQUAL (stack, 0xfffffffffffffb58, 8) , (stack, 0xfffffffffffffb58, 8) , (stack, 0xfffffffffffffb58, 8) , (stack, 0xfffffffffffffb58, 8) , (stack, 0xfffffffffffffb58, 8) , (stack, 0xfffffffffffffb58, 8) , (stack, 0xfffffffffffffb58, 8) , (stack, 0xfffffffffffffb58, 8)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb20, 8) MULTIEQUAL (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae0, 8) MULTIEQUAL (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb8, 4) MULTIEQUAL (register, 0xb8, 4) , (register, 0xb8, 4) , (register, 0xb8, 4) , (register, 0xb8, 4) , (register, 0xb8, 4) , (register, 0xb8, 4) , (register, 0xb8, 4) , (register, 0xb8, 4)]
[(register, 0xa0, 4) MULTIEQUAL (register, 0xa0, 4) , (unique, 0x10001b1b, 4) , (unique, 0x10001b1b, 4) , (register, 0xa0, 4) , (register, 0xa0, 4) , (register, 0xa0, 4) , (register, 0xa0, 4) , (register, 0xa0, 4)]
[(register, 0x18, 8) MULTIEQUAL (register, 0x8, 8) , (unique, 0x1000191b, 8) , (unique, 0x1000191b, 8) , (register, 0x18, 8) , (register, 0x18, 8) , (register, 0x18, 8) , (register, 0x8, 8) , (register, 0x8, 8)]
[(unique, 0x10001ccf, 8) COPY (register, 0x20, 8), (register, 0x20, 8) MULTIEQUAL (unique, 0x10001e0a, 8) , (unique, 0x10001c27, 8) , (unique, 0x10001c2f, 8) , (unique, 0x10001c37, 8) , (unique, 0x10001c3f, 8) , (unique, 0x10001c47, 8) , (unique, 0x10001e0a, 8) , (unique, 0x10001e02, 8)]
[(unique, 0x10001d27, 8) COPY (register, 0xb0, 8), (register, 0xb0, 8) MULTIEQUAL (register, 0xb0, 8) , (unique, 0x10001923, 8) , (unique, 0x10001923, 8) , (register, 0xb0, 8) , (register, 0xb0, 8) , (register, 0xb0, 8) , (register, 0xb0, 8) , (register, 0xb0, 8)]
[ ---  CBRANCH (ram, 0x267c7f, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xb0, 8) , (const, 0x0, 8), (register, 0xb0, 8) MULTIEQUAL (register, 0xb0, 8) , (unique, 0x10001923, 8) , (unique, 0x10001923, 8) , (register, 0xb0, 8) , (register, 0xb0, 8) , (register, 0xb0, 8) , (register, 0xb0, 8) , (register, 0xb0, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbc0, 4) MULTIEQUAL (stack, 0xfffffffffffffbc0, 4) , (stack, 0xfffffffffffffbc0, 4)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb98, 8) MULTIEQUAL (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8)]
[(stack, 0xfffffffffffffb94, 4) MULTIEQUAL (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4)]
[(stack, 0xfffffffffffffb90, 4) MULTIEQUAL (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4)]
[(stack, 0xfffffffffffffb8c, 4) MULTIEQUAL (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4)]
[(stack, 0xfffffffffffffb88, 4) MULTIEQUAL (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4)]
[(stack, 0xfffffffffffffb84, 4) MULTIEQUAL (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4)]
[(stack, 0xfffffffffffffb80, 4) MULTIEQUAL (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4)]
[(stack, 0xfffffffffffffb7c, 4) MULTIEQUAL (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb60, 8) MULTIEQUAL (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8)]
[(stack, 0xfffffffffffffb58, 8) MULTIEQUAL (stack, 0xfffffffffffffb58, 8) , (stack, 0xfffffffffffffb58, 8)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb20, 8) MULTIEQUAL (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae0, 8) MULTIEQUAL (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0xb8, 4) MULTIEQUAL (register, 0xb8, 4) , (register, 0xb8, 4)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb0, 8) MULTIEQUAL (unique, 0x10001d27, 8) , (unique, 0x10001d2f, 8)]
[(register, 0x18, 8) MULTIEQUAL (register, 0x18, 8) , (register, 0x8, 8)]
[(unique, 0x10001af3, 8) COPY (stack, 0xfffffffffffffb38, 8), (stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(unique, 0x10001a83, 8) COPY (stack, 0xfffffffffffffb30, 8), (stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(unique, 0x10001a43, 8) COPY (stack, 0xfffffffffffffb28, 8), (stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(register, 0x30, 4) INT_AND (register, 0xa0, 4) , (const, 0x40, 4), (register, 0xa0, 4) MULTIEQUAL (register, 0xa0, 4) , (register, 0xa0, 4)]
[(unique, 0x10001e1a, 8) COPY (register, 0x20, 8), (register, 0x20, 8) MULTIEQUAL (unique, 0x10001ccf, 8) , (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x268183, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x100026c6, 8), (unique, 0x100026c6, 8) CAST (unique, 0x100010b8, 8), (unique, 0x100010b8, 8) PTRSUB (stack, 0xfffffffffffffb30, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[ ---  CBRANCH (ram, 0x267ce3, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x30, 4) , (const, 0x0, 4)]
[(unique, 0x10000af3, 1) COPY (const, 0x0, 1)]
[(unique, 0x1000067d, 1) COPY (const, 0x0, 1)]
[(unique, 0x27900, 1) INT_ADD (unique, 0xbb00, 1) , (const, 0xa5, 1)]
[(unique, 0x3100, 8) CAST (unique, 0x100026d6, 8), (unique, 0x100026d6, 8) INT_ADD (unique, 0x100026ce, 8) , (const, 0x1, 8), (unique, 0x100026ce, 8) CAST (unique, 0x100010c0, 8), (unique, 0x100010c0, 8) PTRSUB (stack, 0xfffffffffffffb30, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x267ccf, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x5b, 1)]
[(register, 0x10, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0x10, 8)]
[(unique, 0x10000add, 1) MULTIEQUAL (unique, 0x10000af3, 1) , (unique, 0x10000ade, 1)]
[ ---  CBRANCH (ram, 0x267ff3, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) BOOL_OR (register, 0x206, 1) , (unique, 0xcd80, 1), (unique, 0xcd80, 1) INT_NOTEQUAL (register, 0x20b, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (unique, 0x27900, 1) , (const, 0x0, 1), (register, 0x20b, 1) INT_SBORROW (register, 0x0, 1) , (const, 0x5b, 1), (register, 0x0, 1) MULTIEQUAL (unique, 0xbb00, 1) , (register, 0x0, 1), (register, 0x206, 1) MULTIEQUAL (register, 0x206, 1) , (register, 0x206, 1), (unique, 0x27900, 1) MULTIEQUAL (unique, 0x27900, 1) , (unique, 0x27900, 1)]
[ ---  CBRANCH (ram, 0x267fff, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 1) , (const, 0x2a, 1)]
[ ---  CBRANCH (ram, 0x267cbc, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 1) , (const, 0x3f, 1)]
[ ---  CBRANCH (ram, 0x267cbc, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 1) , (const, 0x5c, 1)]
[ ---  CBRANCH (ram, 0x267cbc, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 1) , (const, 0x5d, 1)]
[ ---  CBRANCH (ram, 0x268013, 1) , (unique, 0x10000add, 1)]
[(unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0x10, 8)]
[(unique, 0x10000ade, 1) MULTIEQUAL (unique, 0x10000add, 1) , (unique, 0x10000af2, 1)]
[(register, 0x10, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x1, 8), (register, 0x10, 8) MULTIEQUAL (register, 0x10, 8) , (register, 0x10, 8)]
[ ---  CBRANCH (ram, 0x268363, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 1) , (const, 0x0, 1), (register, 0x0, 1) MULTIEQUAL (unique, 0xbb00, 1) , (unique, 0xbb00, 1)]
[ ---  CBRANCH (ram, 0x267ca5, 1) , (unique, 0xc680, 1), (unique, 0xc680, 1) BOOL_NEGATE (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x27900, 1) , (const, 0x0, 1), (unique, 0x27900, 1) INT_ADD (register, 0x0, 1) , (const, 0xa5, 1)]
[(unique, 0x10000af2, 1) COPY (const, 0x1, 1)]
[(unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0x10, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0x10, 8)]
[ ---  BRANCH (ram, 0x267cbf, 1)]
[(unique, 0x10000d58, 1) COPY (const, 0x0, 1)]
[(unique, 0x1000066b, 1) COPY (const, 0x0, 1)]
[(unique, 0x27900, 1) INT_ADD (unique, 0xbb00, 1) , (const, 0xa5, 1)]
[(unique, 0x10001b9f, 8) COPY (stack, 0xfffffffffffffb30, 8)]
[(unique, 0x10001d8f, 1) COPY (unique, 0x1000066c, 1), (unique, 0x1000066c, 1) COPY (const, 0x0, 1)]
[ ---  CBRANCH (ram, 0x267d1b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x5b, 1)]
[(register, 0x10, 8) MULTIEQUAL (unique, 0x10001b9f, 8) , (register, 0x10, 8)]
[(unique, 0x10000d54, 1) MULTIEQUAL (unique, 0x10000d58, 1) , (unique, 0x10000d56, 1)]
[(unique, 0x10000672, 1) COPY (unique, 0x10001d91, 1), (unique, 0x10001d91, 1) MULTIEQUAL (unique, 0x10001d8f, 1) , (unique, 0x10001d90, 1)]
[ ---  CBRANCH (ram, 0x26816e, 1) , (unique, 0x10000d92, 1), (unique, 0x10000d92, 1) BOOL_AND (unique, 0x10000d93, 1) , (unique, 0xcd80, 1), (unique, 0x10000d93, 1) BOOL_NEGATE (register, 0x206, 1), (unique, 0xcd80, 1) INT_EQUAL (register, 0x20b, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (unique, 0x27900, 1) , (const, 0x0, 1), (register, 0x20b, 1) INT_SBORROW (register, 0x0, 1) , (const, 0x5b, 1), (register, 0x0, 1) MULTIEQUAL (unique, 0xbb00, 1) , (register, 0x0, 1), (register, 0x206, 1) MULTIEQUAL (register, 0x206, 1) , (register, 0x206, 1), (unique, 0x27900, 1) MULTIEQUAL (unique, 0x27900, 1) , (unique, 0x27900, 1)]
[ ---  CBRANCH (ram, 0x2681cc, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 1) , (const, 0x5c, 1)]
[ ---  CBRANCH (ram, 0x267d07, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 1) , (const, 0x5d, 1)]
[ ---  CBRANCH (ram, 0x267fff, 1) , (unique, 0x10000d53, 1), (unique, 0x10000d53, 1) BOOL_NEGATE (unique, 0x10000d54, 1)]
[ ---  CBRANCH (ram, 0x268360, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100026e6, 8), (unique, 0x100026e6, 8) INT_ADD (unique, 0x100026de, 8) , (const, 0x1, 8), (unique, 0x100026de, 8) CAST (unique, 0x10001260, 8), (unique, 0x10001260, 8) PTRSUB (register, 0x10, 8) , (const, 0x0, 8)]
[(unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100026f6, 8), (unique, 0x100026f6, 8) INT_ADD (unique, 0x100026ee, 8) , (const, 0x2, 8), (unique, 0x100026ee, 8) CAST (unique, 0x10001270, 8), (unique, 0x10001270, 8) PTRSUB (register, 0x10, 8) , (const, 0x0, 8)]
[(unique, 0x1000066e, 1) COPY (const, 0x1, 1)]
[(register, 0x10, 8) CAST (unique, 0x10002706, 8), (unique, 0x10002706, 8) INT_ADD (unique, 0x100026fe, 8) , (const, 0x2, 8), (unique, 0x100026fe, 8) CAST (unique, 0x10001280, 8), (unique, 0x10001280, 8) PTRSUB (register, 0x10, 8) , (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x267d0f, 1)]
[(unique, 0x10000661, 1) COPY (const, 0x1, 1)]
[ ---  CBRANCH (ram, 0x267fff, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 1) , (const, 0x2a, 1)]
[ ---  CBRANCH (ram, 0x267fff, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 1) , (const, 0x3f, 1)]
[(unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10002716, 8), (unique, 0x10002716, 8) INT_ADD (unique, 0x1000270e, 8) , (const, 0x1, 8), (unique, 0x1000270e, 8) CAST (unique, 0x100010d0, 8), (unique, 0x100010d0, 8) PTRSUB (register, 0x10, 8) , (const, 0x0, 8)]
[(register, 0x10, 8) CAST (unique, 0x10002726, 8), (unique, 0x10002726, 8) INT_ADD (unique, 0x1000271e, 8) , (const, 0x1, 8), (unique, 0x1000271e, 8) CAST (unique, 0x100010e0, 8), (unique, 0x100010e0, 8) PTRSUB (register, 0x10, 8) , (const, 0x0, 8)]
[(register, 0x10, 8) MULTIEQUAL (register, 0x10, 8) , (register, 0x10, 8) , (register, 0x10, 8)]
[(unique, 0x10000d56, 1) MULTIEQUAL (unique, 0x10000d54, 1) , (unique, 0x10000d57, 1) , (unique, 0x10000d54, 1)]
[(unique, 0x10000664, 1) MULTIEQUAL (unique, 0x10000672, 1) , (unique, 0x10000667, 1) , (unique, 0x1000066e, 1)]
[ ---  CBRANCH (ram, 0x268363, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 1) , (const, 0x0, 1), (register, 0x0, 1) MULTIEQUAL (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1)]
[(unique, 0x1000065f, 1) MULTIEQUAL (unique, 0x1000067d, 1) , (unique, 0x10000664, 1) , (unique, 0x10000661, 1)]
[ ---  CBRANCH (ram, 0x267fff, 1) , (unique, 0x10000da0, 1), (unique, 0x10000da0, 1) BOOL_NEGATE (unique, 0x10000adf, 1), (unique, 0x10000adf, 1) MULTIEQUAL (unique, 0x10000ade, 1) , (unique, 0x10000d56, 1) , (unique, 0x10000d54, 1)]
[(stack, 0xfffffffffffffb08, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) CAST (unique, 0x10002736, 8), (unique, 0x10002736, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10001358, 8), (unique, 0x10001358, 8) PTRSUB (unique, 0x1000272e, 8) , (const, 0x0, 8), (unique, 0x1000272e, 8) CAST (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x26818d, 1) , (unique, 0x10000659, 1), (unique, 0x10000659, 1) BOOL_NEGATE (unique, 0x1000065f, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000273e, 8) , (const, 0x268390, 8), (unique, 0x1000273e, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x94a, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x94a, 4)]
[(stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x94a, 4), (stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x949, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x94a, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x949, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x94a, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x949, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x94a, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x949, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x94a, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x949, 4)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x94a, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x949, 4)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x94a, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x949, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x94a, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x949, 4)]
[(stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x94a, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x949, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x94a, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x949, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x94a, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x949, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x94a, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x949, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x94a, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x949, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x94a, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x949, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x94a, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x949, 4)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x94a, 4), (stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x949, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x94a, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x949, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x94a, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x949, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x94a, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x949, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x94a, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x949, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x94a, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x949, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x94a, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x949, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x94a, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x949, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x94a, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x949, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x94a, 4), (stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x949, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x94a, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x949, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x94a, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x949, 4)]
[(stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0x94a, 4), (stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0x949, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x94a, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x949, 4)]
[(unique, 0x10001b97, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x121110, 8) , (unique, 0x10002746, 8) , (const, 0x5c, 4), (unique, 0x10002746, 8) CAST (unique, 0x10001a83, 8)]
[ ---  BRANCH (ram, 0x2683ae, 1)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x38, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (register, 0x38, 8)]
[(register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[(unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x1, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0x10001b97, 8) , (register, 0x30, 8)]
[ ---  CBRANCH (ram, 0x2683a0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x5c, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0x10, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0x10001b97, 8) , (register, 0x30, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xa3c, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x0, 8) , (unique, 0xbb00, 1)]
[(unique, 0x10001cdf, 8) COPY (unique, 0x3100, 8)]
[ ---  CBRANCH (ram, 0x2683d3, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0x10, 8)]
[(register, 0x38, 8) CAST (unique, 0x10002756, 8), (unique, 0x10002756, 8) INT_ADD (unique, 0x1000274e, 8) , (const, 0x7, 8), (unique, 0x1000274e, 8) CAST (unique, 0x10001370, 8), (unique, 0x10001370, 8) PTRSUB (unique, 0x10001368, 8) , (const, 0x40, 8), (unique, 0x10001368, 8) PTRADD (register, 0x38, 8) , (const, 0xffffffffffffffff, 8) , (const, 0x48, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x97a, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x0, 8) , (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[(unique, 0x10001cd7, 8) COPY (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x2, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x2683ab, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(stack, 0xfffffffffffffb18, 8) COPY (register, 0x38, 8), (register, 0x38, 8) MULTIEQUAL (register, 0x38, 8) , (register, 0x38, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x38, 8) MULTIEQUAL (register, 0x38, 8) , (register, 0x38, 8)]
[(register, 0x30, 8) MULTIEQUAL (unique, 0x10001cd7, 8) , (unique, 0x10001cdf, 8)]
[(register, 0x0, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x268013, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x30, 4) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x26851c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xfffffffffffffb18, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x268013, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x5c, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x10002776, 8), (unique, 0x10002776, 8) CAST (unique, 0x10001400, 8), (unique, 0x10001400, 8) PTRSUB (unique, 0x3a00, 8) , (const, 0x0, 8), (unique, 0x3a00, 8) CAST (unique, 0x1000276e, 8), (unique, 0x1000276e, 8) INT_ADD (unique, 0x3880, 8) , (unique, 0x10002766, 8), (unique, 0x10002766, 8) CAST (stack, 0xfffffffffffffb18, 8), (unique, 0x3880, 8) INT_ADD (unique, 0x1000275e, 8) , (const, 0xffffffffffffffff, 8), (unique, 0x1000275e, 8) CAST (stack, 0xfffffffffffffb30, 8)]
[(unique, 0x10001b6f, 8) COPY (unique, 0x3a00, 8)]
[ ---  CBRANCH (ram, 0x268557, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (stack, 0xfffffffffffffb30, 8) , (unique, 0x3a00, 8)]
[(unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10002786, 8), (unique, 0x10002786, 8) INT_ADD (unique, 0x1000277e, 8) , (const, 0x17, 8), (unique, 0x1000277e, 8) CAST (unique, 0x10001418, 8), (unique, 0x10001418, 8) PTRSUB (unique, 0x10001410, 8) , (const, 0x78, 8), (unique, 0x10001410, 8) PTRADD (unique, 0x3a00, 8) , (const, 0xffffffffffffffff, 8) , (const, 0x90, 8)]
[(unique, 0x10001de2, 8) COPY (unique, 0x3a00, 8)]
[(unique, 0x10001b7f, 8) COPY (unique, 0x10001731, 8), (unique, 0x10001731, 8) MULTIEQUAL (unique, 0x10001de2, 8) , (unique, 0x10001dea, 8)]
[ ---  CBRANCH (ram, 0x26854e, 1) , (unique, 0x10001739, 1), (unique, 0x10001739, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x5c, 1), (unique, 0xbb00, 1) MULTIEQUAL (unique, 0xbb00, 1) , (unique, 0xbb00, 1)]
[(unique, 0x10001b77, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10002796, 8), (unique, 0x10002796, 8) INT_ADD (unique, 0x1000278e, 8) , (const, 0x17, 8), (unique, 0x1000278e, 8) CAST (unique, 0x10001458, 8), (unique, 0x10001458, 8) PTRSUB (unique, 0x10001450, 8) , (const, 0x78, 8), (unique, 0x10001450, 8) PTRADD (unique, 0x10001731, 8) , (const, 0xffffffffffffffff, 8) , (const, 0x90, 8)]
[ ---  CBRANCH (ram, 0x268548, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (stack, 0xfffffffffffffb30, 8), (register, 0x0, 8) CAST (unique, 0x10002796, 8), (unique, 0x10002796, 8) INT_ADD (unique, 0x1000278e, 8) , (const, 0x17, 8), (unique, 0x1000278e, 8) CAST (unique, 0x10001458, 8), (unique, 0x10001458, 8) PTRSUB (unique, 0x10001450, 8) , (const, 0x78, 8), (unique, 0x10001450, 8) PTRADD (unique, 0x10001731, 8) , (const, 0xffffffffffffffff, 8) , (const, 0x90, 8)]
[(unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100027a6, 8), (unique, 0x100027a6, 8) INT_ADD (unique, 0x1000279e, 8) , (const, 0x16, 8), (unique, 0x1000279e, 8) CAST (unique, 0x10001438, 8), (unique, 0x10001438, 8) PTRSUB (unique, 0x10001430, 8) , (const, 0x78, 8), (unique, 0x10001430, 8) PTRADD (unique, 0x10001731, 8) , (const, 0xffffffffffffffff, 8) , (const, 0x90, 8)]
[(unique, 0x10001dea, 8) COPY (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x268013, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x10000707, 8) , (const, 0x0, 8), (unique, 0x10000707, 8) INT_AND (register, 0x8, 8) , (const, 0x1, 8), (register, 0x8, 8) INT_SUB (register, 0x8, 8) , (unique, 0x100027be, 8), (unique, 0x100027be, 8) CAST (register, 0x0, 8), (register, 0x8, 8) INT_ADD (unique, 0x100027ae, 8) , (unique, 0x100027b6, 8), (unique, 0x100027b6, 8) CAST (stack, 0xfffffffffffffb30, 8), (unique, 0x100027ae, 8) CAST (stack, 0xfffffffffffffb18, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x10001b6f, 8) , (unique, 0x10001b77, 8) , (unique, 0x10001b7f, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xc50, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100027c6, 8) , (const, 0x0, 1), (unique, 0x100027c6, 8) CAST (unique, 0x10001468, 8), (unique, 0x10001468, 8) PTRSUB (unique, 0x3a00, 8) , (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x268013, 1)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[ ---  CBRANCH (ram, 0x268d80, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x58e00, 4) , (const, 0x0, 4), (unique, 0x58e00, 4) INT_AND (register, 0xa0, 4) , (const, 0x200, 4)]
[(stack, 0xfffffffffffffb98, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (unique, 0x100027ce, 8) , (const, 0x40, 8), (unique, 0x100027ce, 8) CAST (register, 0x18, 8)]
[(stack, 0xfffffffffffffb78, 4) COPY (unique, 0x10000a0d, 4), (unique, 0x10000a0d, 4) LOAD (const, 0x1b1, 4) , (unique, 0x1000282e, 8), (unique, 0x1000282e, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (unique, 0x10002826, 8) , (const, 0x20, 8), (unique, 0x10002826, 8) CAST (register, 0x18, 8)]
[(stack, 0xfffffffffffffb7c, 4) COPY (unique, 0x10000a11, 4), (unique, 0x10000a11, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000a15, 8), (unique, 0x10000a15, 8) CAST (unique, 0x10002846, 8), (unique, 0x10002846, 8) INT_ADD (unique, 0x1000283e, 8) , (const, 0x4, 8), (unique, 0x1000283e, 8) CAST (unique, 0x10001620, 8), (unique, 0x10001620, 8) PTRSUB (unique, 0x10002836, 8) , (const, 0x20, 8), (unique, 0x10002836, 8) CAST (register, 0x18, 8)]
[(stack, 0xfffffffffffffb80, 4) COPY (unique, 0x10000a1d, 4), (unique, 0x10000a1d, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10002856, 8), (unique, 0x10002856, 8) CAST (unique, 0x10000a21, 8), (unique, 0x10000a21, 8) PTRSUB (unique, 0x1000284e, 8) , (const, 0x28, 8), (unique, 0x1000284e, 8) CAST (register, 0x18, 8)]
[(stack, 0xfffffffffffffb84, 4) COPY (unique, 0x10000a29, 4), (unique, 0x10000a29, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000a2d, 8), (unique, 0x10000a2d, 8) CAST (unique, 0x1000286e, 8), (unique, 0x1000286e, 8) INT_ADD (unique, 0x10002866, 8) , (const, 0x4, 8), (unique, 0x10002866, 8) CAST (unique, 0x10001640, 8), (unique, 0x10001640, 8) PTRSUB (unique, 0x1000285e, 8) , (const, 0x28, 8), (unique, 0x1000285e, 8) CAST (register, 0x18, 8)]
[(stack, 0xfffffffffffffb88, 4) COPY (unique, 0x100009cd, 4), (unique, 0x100009cd, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100027de, 8), (unique, 0x100027de, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (unique, 0x100027d6, 8) , (const, 0x30, 8), (unique, 0x100027d6, 8) CAST (register, 0x18, 8)]
[(stack, 0xfffffffffffffb8c, 4) COPY (unique, 0x100009d1, 4), (unique, 0x100009d1, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100009d5, 8), (unique, 0x100009d5, 8) CAST (unique, 0x100027f6, 8), (unique, 0x100027f6, 8) INT_ADD (unique, 0x100027ee, 8) , (const, 0x4, 8), (unique, 0x100027ee, 8) CAST (unique, 0x100015e0, 8), (unique, 0x100015e0, 8) PTRSUB (unique, 0x100027e6, 8) , (const, 0x30, 8), (unique, 0x100027e6, 8) CAST (register, 0x18, 8)]
[(stack, 0xfffffffffffffb90, 4) COPY (unique, 0x100009dd, 4), (unique, 0x100009dd, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10002806, 8), (unique, 0x10002806, 8) CAST (unique, 0x100009e1, 8), (unique, 0x100009e1, 8) PTRSUB (unique, 0x100027fe, 8) , (const, 0x38, 8), (unique, 0x100027fe, 8) CAST (register, 0x18, 8)]
[(stack, 0xfffffffffffffb94, 4) COPY (unique, 0x100009e9, 4), (unique, 0x100009e9, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100009ed, 8), (unique, 0x100009ed, 8) CAST (unique, 0x1000281e, 8), (unique, 0x1000281e, 8) INT_ADD (unique, 0x10002816, 8) , (const, 0x4, 8), (unique, 0x10002816, 8) CAST (unique, 0x10001600, 8), (unique, 0x10001600, 8) PTRSUB (unique, 0x1000280e, 8) , (const, 0x38, 8), (unique, 0x1000280e, 8) CAST (register, 0x18, 8)]
[ ---  BRANCH (ram, 0x268020, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000287e, 8) , (const, 0x268050, 8), (unique, 0x1000287e, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xac2, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xac2, 4)]
[(stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0xac2, 4), (stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0xac1, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0xac2, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0xac1, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0xac2, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0xac1, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0xac2, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0xac1, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0xac2, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0xac1, 4)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0xac2, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0xac1, 4), (stack, 0xfffffffffffffb08, 8) COPY (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x10002876, 8), (unique, 0x10002876, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffb58, 8)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0xac2, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0xac1, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0xac2, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0xac1, 4)]
[(stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0xac2, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0xac1, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0xac2, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0xac1, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0xac2, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0xac1, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0xac2, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0xac1, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0xac2, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0xac1, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0xac2, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0xac1, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0xac2, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0xac1, 4)]
[(stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0xac2, 4), (stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0xac1, 4)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0xac2, 4), (stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0xac1, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0xac2, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0xac1, 4), (stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0xac2, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0xac1, 4), (stack, 0xfffffffffffffb7c, 4) MULTIEQUAL (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0xac2, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0xac1, 4), (stack, 0xfffffffffffffb80, 4) MULTIEQUAL (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0xac2, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0xac1, 4), (stack, 0xfffffffffffffb84, 4) MULTIEQUAL (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0xac2, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0xac1, 4), (stack, 0xfffffffffffffb88, 4) MULTIEQUAL (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0xac2, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0xac1, 4), (stack, 0xfffffffffffffb8c, 4) MULTIEQUAL (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0xac2, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0xac1, 4), (stack, 0xfffffffffffffb90, 4) MULTIEQUAL (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0xac2, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0xac1, 4), (stack, 0xfffffffffffffb94, 4) MULTIEQUAL (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0xac2, 4), (stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0xac1, 4), (stack, 0xfffffffffffffb98, 8) MULTIEQUAL (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0xac2, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0xac1, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0xac2, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0xac1, 4)]
[(stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0xac2, 4), (stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0xac1, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xac2, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xac1, 4)]
[ ---  CBRANCH (ram, 0x2681e6, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x267730, 8) , (unique, 0x10002886, 8) , (register, 0x30, 4) , (unique, 0x1000288e, 8) , (unique, 0x10002896, 8), (unique, 0x10002896, 8) CAST (unique, 0x3200, 8), (unique, 0x1000288e, 8) CAST (unique, 0x10001af3, 8), (unique, 0x10002886, 8) CAST (unique, 0x10001a83, 8), (register, 0x30, 4) INT_OR (register, 0x30, 4) , (const, 0x2004, 4), (register, 0x30, 4) INT_AND (register, 0xa0, 4) , (const, 0x241, 4), (unique, 0x3200, 8) CAST (unique, 0x10002876, 8), (unique, 0x10002876, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffb58, 8)]
[ ---  CBRANCH (ram, 0x2681c1, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x100005f8, 4) , (const, 0x0, 4), (unique, 0x100005f8, 4) INT_AND (register, 0xa0, 4) , (const, 0x10, 4)]
[ ---  CBRANCH (ram, 0x2681c1, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x3, 4)]
[(unique, 0xbd80, 8) CAST (unique, 0x100028a6, 8), (unique, 0x100028a6, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10001290, 8), (unique, 0x10001290, 8) PTRSUB (unique, 0x1000289e, 8) , (const, 0x0, 8), (unique, 0x1000289e, 8) CAST (register, 0x18, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (unique, 0x100028ae, 8) , (const, 0x10, 8), (unique, 0x100028ae, 8) CAST (register, 0x18, 8)]
[(unique, 0x10001d87, 4) COPY (register, 0xa0, 4)]
[ ---  CBRANCH (ram, 0x26811a, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xfffffffffffffb58, 8) , (const, 0x0, 8)]
[(register, 0xb8, 8) COPY (const, 0x0, 8)]
[(stack, 0xfffffffffffffb00, 8) COPY (unique, 0x100028b6, 8), (unique, 0x100028b6, 8) CAST (register, 0x38, 8)]
[(stack, 0xfffffffffffffaf8, 8) CAST (unique, 0x100028c6, 8), (unique, 0x100028c6, 8) INT_OR (unique, 0x10000b3a, 8) , (unique, 0x10000b42, 8), (unique, 0x10000b42, 8) INT_ZEXT (register, 0xa0, 4), (unique, 0x10000b3a, 8) INT_AND (unique, 0x100028be, 8) , (const, 0xffffffff00000000, 8), (unique, 0x100028be, 8) CAST (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffb18, 8) CAST (unique, 0x100028d6, 8), (unique, 0x100028d6, 8) INT_OR (unique, 0x10000b4a, 8) , (const, 0x20, 8), (unique, 0x10000b4a, 8) INT_OR (unique, 0x10000b5a, 8) , (unique, 0x10000d61, 8), (unique, 0x10000d61, 8) INT_AND (unique, 0x10000b62, 8) , (const, 0xfffffffffffff7cf, 8), (unique, 0x10000b62, 8) INT_ZEXT (register, 0xa0, 4), (unique, 0x10000b5a, 8) INT_AND (unique, 0x100028ce, 8) , (const, 0xffffffff00000000, 8), (unique, 0x100028ce, 8) CAST (stack, 0xfffffffffffffb18, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10001200, 8), (unique, 0x10001200, 8) PTRSUB (unique, 0x100028e6, 8) , (const, 0x0, 8), (unique, 0x100028e6, 8) CAST (register, 0x18, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100028f6, 8) , (const, 0x2680c5, 8), (unique, 0x100028f6, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xb20, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xb20, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0xb20, 4), (stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0xb1f, 4), (stack, 0xfffffffffffffae0, 8) MULTIEQUAL (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0xb20, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0xb1f, 4), (stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0xb20, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0xb1f, 4), (stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0xb20, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0xb1f, 4), (stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0xb20, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0xb1f, 4), (stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0xb20, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0xb1f, 4), (stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0xb20, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0xb1f, 4), (stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0xb20, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0xb1f, 4), (stack, 0xfffffffffffffb20, 8) MULTIEQUAL (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0xb20, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0xb1f, 4), (stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0xb20, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0xb1f, 4), (stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0xb20, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0xb1f, 4), (stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0xb20, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0xb1f, 4), (stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0xb20, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0xb1f, 4), (stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0xb20, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0xb1f, 4), (stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0xb20, 4), (stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0xb1f, 4), (stack, 0xfffffffffffffb58, 8) MULTIEQUAL (stack, 0xfffffffffffffb58, 8) , (stack, 0xfffffffffffffb58, 8)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0xb20, 4), (stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0xb1f, 4), (stack, 0xfffffffffffffb60, 8) MULTIEQUAL (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0xb20, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0xb1f, 4), (stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0xb20, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0xb1f, 4), (stack, 0xfffffffffffffb7c, 4) MULTIEQUAL (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0xb20, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0xb1f, 4), (stack, 0xfffffffffffffb80, 4) MULTIEQUAL (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0xb20, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0xb1f, 4), (stack, 0xfffffffffffffb84, 4) MULTIEQUAL (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0xb20, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0xb1f, 4), (stack, 0xfffffffffffffb88, 4) MULTIEQUAL (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0xb20, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0xb1f, 4), (stack, 0xfffffffffffffb8c, 4) MULTIEQUAL (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0xb20, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0xb1f, 4), (stack, 0xfffffffffffffb90, 4) MULTIEQUAL (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0xb20, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0xb1f, 4), (stack, 0xfffffffffffffb94, 4) MULTIEQUAL (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0xb20, 4), (stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0xb1f, 4), (stack, 0xfffffffffffffb98, 8) MULTIEQUAL (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0xb20, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0xb1f, 4), (stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0xb20, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0xb1f, 4), (stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0xb20, 4), (stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0xb1f, 4), (stack, 0xfffffffffffffbc0, 4) MULTIEQUAL (stack, 0xfffffffffffffbc0, 4) , (stack, 0xfffffffffffffbc0, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xb20, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xb1f, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(unique, 0x100019db, 8) COPY (stack, 0xfffffffffffffb08, 8), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0xb20, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0xb1f, 4), (stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[ ---  CBRANCH (ram, 0x2680ff, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x3, 4), (register, 0x0, 4) CALL (ram, 0x201c40, 8) , (register, 0xb0, 8) , (unique, 0xbd80, 8) , (register, 0x10, 8) , (unique, 0x10001afb, 8) , (register, 0x18, 8) , (unique, 0x10001a4b, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (stack, 0xfffffffffffffb60, 8) , (unique, 0x100028ee, 8) , (const, 0x8, 8), (unique, 0x100028ee, 8) CAST (register, 0xb8, 8), (register, 0x10, 8) INT_AND (unique, 0x100028de, 8) , (const, 0xffffffff, 8), (unique, 0x100028de, 8) CAST (stack, 0xfffffffffffffb18, 8), (unique, 0x10001a4b, 8) COPY (stack, 0xfffffffffffffb28, 8), (unique, 0x10001afb, 8) COPY (stack, 0xfffffffffffffb38, 8), (register, 0xb8, 8) MULTIEQUAL (register, 0xb8, 8) , (register, 0xb8, 8), (stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8), (stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8), (stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8), (stack, 0xfffffffffffffb60, 8) MULTIEQUAL (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8)]
[ ---  CBRANCH (ram, 0x268c4b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000291e, 8) , (const, 0x2680f7, 8), (unique, 0x1000291e, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xb5c, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xb5c, 4)]
[(stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0xb5c, 4), (stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0xb5b, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0xb5c, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0xb5b, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0xb5c, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0xb5b, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0xb5c, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0xb5b, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0xb5c, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0xb5b, 4)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0xb5c, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0xb5b, 4)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0xb5c, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0xb5b, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0xb5c, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0xb5b, 4)]
[(stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0xb5c, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0xb5b, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0xb5c, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0xb5b, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0xb5c, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0xb5b, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0xb5c, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0xb5b, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0xb5c, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0xb5b, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0xb5c, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0xb5b, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0xb5c, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0xb5b, 4)]
[(stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0xb5c, 4), (stack, 0xfffffffffffffb58, 8) INDIRECT (stack, 0xfffffffffffffb58, 8) , (const, 0xb5b, 4)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0xb5c, 4), (stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0xb5b, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0xb5c, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0xb5b, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0xb5c, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0xb5b, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0xb5c, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0xb5b, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0xb5c, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0xb5b, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0xb5c, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0xb5b, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0xb5c, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0xb5b, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0xb5c, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0xb5b, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0xb5c, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0xb5b, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0xb5c, 4), (stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0xb5b, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0xb5c, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0xb5b, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0xb5c, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0xb5b, 4)]
[(stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0xb5c, 4), (stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0xb5b, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xb5c, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xb5b, 4)]
[ ---  CBRANCH (ram, 0x268c21, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x201af0, 8) , (unique, 0xbd80, 8) , (unique, 0x3400, 8) , (register, 0x10, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (stack, 0xfffffffffffffb60, 8) , (unique, 0x10002916, 8) , (const, 0x8, 8), (unique, 0x10002916, 8) CAST (register, 0xb8, 8), (register, 0x10, 8) INT_SUB (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (unique, 0x3400, 8) PTRADD (unique, 0xbd80, 8) , (register, 0x98, 8) , (const, 0x8, 8), (register, 0x98, 8) INT_ADD (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10001220, 8), (unique, 0x10001220, 8) PTRSUB (unique, 0x1000290e, 8) , (const, 0x0, 8), (unique, 0x1000290e, 8) CAST (register, 0x18, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (unique, 0x10002906, 8) , (const, 0x8, 8), (unique, 0x10002906, 8) CAST (register, 0x18, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (unique, 0x100028fe, 8) , (const, 0x10, 8), (unique, 0x100028fe, 8) CAST (register, 0x18, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10002926, 8) , (const, 0x268c5d, 8), (unique, 0x10002926, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[ ---  CALL (ram, 0x1e9620, 8) , (unique, 0x1000292e, 8), (unique, 0x1000292e, 8) CAST (unique, 0x100019db, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10002936, 8) , (const, 0x268c65, 8), (unique, 0x10002936, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xbc9, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xbc5, 4)]
[(stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0xbc9, 4), (stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0xbc8, 4), (stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0xbc5, 4), (stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0xbc4, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0xbc9, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0xbc8, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0xbc5, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0xbc4, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0xbc9, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0xbc8, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0xbc5, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0xbc4, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0xbc9, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0xbc8, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0xbc5, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0xbc4, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0xbc9, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0xbc8, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0xbc5, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0xbc4, 4)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0xbc9, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0xbc8, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0xbc5, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0xbc4, 4)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0xbc9, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0xbc8, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0xbc5, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0xbc4, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0xbc9, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0xbc8, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0xbc5, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0xbc4, 4)]
[(stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0xbc9, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0xbc8, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0xbc5, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0xbc4, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0xbc9, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0xbc8, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0xbc5, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0xbc4, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0xbc9, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0xbc8, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0xbc5, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0xbc4, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0xbc9, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0xbc8, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0xbc5, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0xbc4, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0xbc9, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0xbc8, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0xbc5, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0xbc4, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0xbc9, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0xbc8, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0xbc5, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0xbc4, 4), (stack, 0xfffffffffffffb44, 4) COPY (register, 0x0, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0xbc9, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0xbc8, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0xbc5, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0xbc4, 4)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0xbc9, 4), (stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0xbc8, 4), (stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0xbc5, 4), (stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0xbc4, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0xbc9, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0xbc8, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0xbc5, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0xbc4, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0xbc9, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0xbc8, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0xbc5, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0xbc4, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0xbc9, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0xbc8, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0xbc5, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0xbc4, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0xbc9, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0xbc8, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0xbc5, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0xbc4, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0xbc9, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0xbc8, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0xbc5, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0xbc4, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0xbc9, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0xbc8, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0xbc5, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0xbc4, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0xbc9, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0xbc8, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0xbc5, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0xbc4, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0xbc9, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0xbc8, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0xbc5, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0xbc4, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0xbc9, 4), (stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0xbc8, 4), (stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0xbc5, 4), (stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0xbc4, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0xbc9, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0xbc8, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0xbc5, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0xbc4, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0xbc9, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0xbc8, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0xbc5, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0xbc4, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xbc9, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xbc8, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xbc5, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xbc4, 4)]
[ ---  CALL (ram, 0x1e9620, 8) , (unique, 0x1000293e, 8), (unique, 0x1000293e, 8) CAST (register, 0x18, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xbcb, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xbc9, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xbc5, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001568, 8) , (const, 0x0, 8), (unique, 0x10001568, 8) PTRSUB (unique, 0x10002946, 8) , (const, 0x0, 8), (unique, 0x10002946, 8) CAST (register, 0x18, 8)]
[ ---  BRANCH (ram, 0x267d4d, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbc0, 4) MULTIEQUAL (stack, 0xfffffffffffffbc0, 4) , (stack, 0xfffffffffffffbc0, 4)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb98, 8) MULTIEQUAL (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8)]
[(stack, 0xfffffffffffffb94, 4) MULTIEQUAL (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4)]
[(stack, 0xfffffffffffffb90, 4) MULTIEQUAL (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4)]
[(stack, 0xfffffffffffffb8c, 4) MULTIEQUAL (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4)]
[(stack, 0xfffffffffffffb88, 4) MULTIEQUAL (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4)]
[(stack, 0xfffffffffffffb84, 4) MULTIEQUAL (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4)]
[(stack, 0xfffffffffffffb80, 4) MULTIEQUAL (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4)]
[(stack, 0xfffffffffffffb7c, 4) MULTIEQUAL (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb60, 8) MULTIEQUAL (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb20, 8) MULTIEQUAL (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae0, 8) MULTIEQUAL (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x268090, 1) , (unique, 0xc900, 1), (unique, 0xc900, 1) INT_LESSEQUAL (stack, 0xfffffffffffffb58, 8) , (register, 0xb8, 8), (register, 0xb8, 8) PTRADD (register, 0xb8, 8) , (const, 0x1, 8) , (const, 0x1, 8), (stack, 0xfffffffffffffb58, 8) MULTIEQUAL (stack, 0xfffffffffffffb58, 8) , (stack, 0xfffffffffffffb58, 8)]
[(unique, 0x10001cef, 8) COPY (unique, 0x1000294e, 8), (unique, 0x1000294e, 8) CAST (stack, 0xfffffffffffffb00, 8)]
[(unique, 0x10001d83, 4) COPY (stack, 0xfffffffffffffaf8, 4), (stack, 0xfffffffffffffaf8, 4) SUBPIECE (stack, 0xfffffffffffffaf8, 8) , (const, 0x0, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbc0, 4) MULTIEQUAL (stack, 0xfffffffffffffbc0, 4) , (stack, 0xfffffffffffffbc0, 4)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb98, 8) MULTIEQUAL (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8)]
[(stack, 0xfffffffffffffb94, 4) MULTIEQUAL (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4)]
[(stack, 0xfffffffffffffb90, 4) MULTIEQUAL (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4)]
[(stack, 0xfffffffffffffb8c, 4) MULTIEQUAL (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4)]
[(stack, 0xfffffffffffffb88, 4) MULTIEQUAL (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4)]
[(stack, 0xfffffffffffffb84, 4) MULTIEQUAL (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4)]
[(stack, 0xfffffffffffffb80, 4) MULTIEQUAL (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4)]
[(stack, 0xfffffffffffffb7c, 4) MULTIEQUAL (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb60, 8) MULTIEQUAL (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb20, 8) MULTIEQUAL (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae0, 8) MULTIEQUAL (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xa8, 8) MULTIEQUAL (register, 0x38, 8) , (unique, 0x10001cef, 8)]
[(stack, 0xfffffffffffffb00, 8) CAST (unique, 0x10002976, 8), (unique, 0x10002976, 8) INT_OR (unique, 0x10000b6b, 8) , (const, 0x100, 8), (unique, 0x10000b6b, 8) INT_OR (unique, 0x10000b73, 8) , (unique, 0x10000b7b, 8), (unique, 0x10000b7b, 8) INT_ZEXT (register, 0xa0, 4), (unique, 0x10000b73, 8) INT_AND (unique, 0x1000296e, 8) , (const, 0xffffffff00000000, 8), (unique, 0x1000296e, 8) CAST (stack, 0xfffffffffffffb00, 8), (register, 0xa0, 4) MULTIEQUAL (unique, 0x10001d87, 4) , (unique, 0x10001d83, 4), (stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[ ---  CBRANCH (ram, 0x268267, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x3400, 8) , (stack, 0xfffffffffffffb10, 8), (unique, 0x3400, 8) INT_ADD (unique, 0x1000297e, 8) , (unique, 0xbd80, 8), (unique, 0x1000297e, 8) CAST (unique, 0x10001248, 8), (unique, 0x10001248, 8) PTRSUB (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (unique, 0x10002966, 8) , (const, 0x10, 8), (unique, 0x10002966, 8) CAST (register, 0x18, 8), (unique, 0xbd80, 8) CAST (unique, 0x1000295e, 8), (unique, 0x1000295e, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10001238, 8), (unique, 0x10001238, 8) PTRSUB (unique, 0x10002956, 8) , (const, 0x0, 8), (unique, 0x10002956, 8) CAST (register, 0x18, 8), (stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb00, 4) SUBPIECE (stack, 0xfffffffffffffb00, 8) , (const, 0x0, 8)]
[(register, 0x0, 4) INT_AND (register, 0xa0, 4) , (const, 0x10, 4)]
[(unique, 0x10001d90, 1) COPY (unique, 0x10000664, 1)]
[ ---  CBRANCH (ram, 0x267cec, 1) , (unique, 0xc680, 1), (unique, 0xc680, 1) BOOL_NEGATE (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x27900, 1) , (const, 0x0, 1), (unique, 0x27900, 1) INT_ADD (register, 0x0, 1) , (const, 0xa5, 1)]
[(unique, 0x10000667, 1) MULTIEQUAL (unique, 0x1000066b, 1) , (unique, 0x10000664, 1)]
[(unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000298e, 8), (unique, 0x1000298e, 8) INT_ADD (unique, 0x10002986, 8) , (const, 0x1, 8), (unique, 0x10002986, 8) CAST (unique, 0x100010f0, 8), (unique, 0x100010f0, 8) PTRSUB (register, 0x10, 8) , (const, 0x0, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0x10001b9f, 8) , (register, 0x10, 8)]
[(unique, 0x10000d57, 1) COPY (const, 0x1, 1)]
[(register, 0x10, 8) CAST (unique, 0x1000299e, 8), (unique, 0x1000299e, 8) INT_ADD (unique, 0x10002996, 8) , (const, 0x1, 8), (unique, 0x10002996, 8) CAST (unique, 0x10001100, 8), (unique, 0x10001100, 8) PTRSUB (register, 0x10, 8) , (const, 0x0, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0x10001b9f, 8) , (register, 0x10, 8)]
[ ---  BRANCH (ram, 0x267d0f, 1)]
[(stack, 0xfffffffffffffb08, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) CAST (unique, 0x100029ae, 8), (unique, 0x100029ae, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10001258, 8), (unique, 0x10001258, 8) PTRSUB (unique, 0x100029a6, 8) , (const, 0x0, 8), (unique, 0x100029a6, 8) CAST (register, 0x18, 8)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[ ---  CBRANCH (ram, 0x2683da, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xb8, 4) , (const, 0x0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100029c6, 8) , (const, 0x26840e, 8), (unique, 0x100029c6, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x9ab, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x9ab, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x9ab, 4), (stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x9aa, 4), (stack, 0xfffffffffffffae0, 8) MULTIEQUAL (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x9ab, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x9aa, 4), (stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x9ab, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x9aa, 4), (stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x9ab, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x9aa, 4), (stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x9ab, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x9aa, 4), (stack, 0xfffffffffffffb00, 8) CAST (unique, 0x100029be, 8), (unique, 0x100029be, 8) INT_OR (unique, 0x10000bae, 8) , (unique, 0x10000d71, 8), (unique, 0x10000d71, 8) INT_AND (unique, 0x10000bb6, 8) , (const, 0xfffffffffffff7ef, 8), (unique, 0x10000bb6, 8) INT_ZEXT (register, 0xa0, 4), (unique, 0x10000bae, 8) INT_AND (unique, 0x100029b6, 8) , (const, 0xffffffff00000000, 8), (unique, 0x100029b6, 8) CAST (stack, 0xfffffffffffffb00, 8), (stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x9ab, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x9aa, 4), (stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x9ab, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x9aa, 4), (stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x9ab, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x9aa, 4), (stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x9ab, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x9aa, 4), (stack, 0xfffffffffffffb20, 8) MULTIEQUAL (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x9ab, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x9aa, 4), (stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x9ab, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x9aa, 4), (stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x9ab, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x9aa, 4), (stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x9ab, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x9aa, 4), (stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x9ab, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x9aa, 4), (stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x9ab, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x9aa, 4), (stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x9ab, 4), (stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x9aa, 4), (stack, 0xfffffffffffffb60, 8) MULTIEQUAL (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x9ab, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x9aa, 4), (stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x9ab, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x9aa, 4), (stack, 0xfffffffffffffb7c, 4) MULTIEQUAL (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x9ab, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x9aa, 4), (stack, 0xfffffffffffffb80, 4) MULTIEQUAL (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x9ab, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x9aa, 4), (stack, 0xfffffffffffffb84, 4) MULTIEQUAL (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x9ab, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x9aa, 4), (stack, 0xfffffffffffffb88, 4) MULTIEQUAL (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x9ab, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x9aa, 4), (stack, 0xfffffffffffffb8c, 4) MULTIEQUAL (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x9ab, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x9aa, 4), (stack, 0xfffffffffffffb90, 4) MULTIEQUAL (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x9ab, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x9aa, 4), (stack, 0xfffffffffffffb94, 4) MULTIEQUAL (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x9ab, 4), (stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x9aa, 4), (stack, 0xfffffffffffffb98, 8) MULTIEQUAL (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x9ab, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x9aa, 4), (stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x9ab, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x9aa, 4), (stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0x9ab, 4), (stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0x9aa, 4), (stack, 0xfffffffffffffbc0, 4) MULTIEQUAL (stack, 0xfffffffffffffbc0, 4) , (stack, 0xfffffffffffffbc0, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x9ab, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x9aa, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CBRANCH (ram, 0x268452, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x201c40, 8) , (register, 0xb0, 8) , (unique, 0x10001a9b, 8) , (register, 0xb8, 4) , (unique, 0x10001b0b, 8) , (register, 0x18, 8) , (unique, 0x10001a53, 8), (register, 0xb8, 4) INT_AND (register, 0xa0, 4) , (const, 0xfffff7ef, 4), (unique, 0x10001a53, 8) COPY (stack, 0xfffffffffffffb28, 8), (unique, 0x10001a9b, 8) COPY (stack, 0xfffffffffffffb30, 8), (unique, 0x10001b0b, 8) COPY (stack, 0xfffffffffffffb38, 8), (stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8), (stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8), (stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[ ---  CBRANCH (ram, 0x2681c1, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x3, 4)]
[ ---  CBRANCH (ram, 0x2681c1, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xa0, 4) , (register, 0xb8, 4)]
[ ---  CBRANCH (ram, 0x268da8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x3400, 8) , (stack, 0xfffffffffffffb10, 8), (unique, 0x3400, 8) INT_ADD (unique, 0x100029e6, 8) , (unique, 0xbd80, 8), (unique, 0x100029e6, 8) CAST (unique, 0x10001390, 8), (unique, 0x10001390, 8) PTRSUB (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (unique, 0x100029de, 8) , (const, 0x10, 8), (unique, 0x100029de, 8) CAST (register, 0x18, 8), (unique, 0xbd80, 8) CAST (unique, 0x100029d6, 8), (unique, 0x100029d6, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10001380, 8), (unique, 0x10001380, 8) PTRSUB (unique, 0x100029ce, 8) , (const, 0x0, 8), (unique, 0x100029ce, 8) CAST (register, 0x18, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb98, 8) MULTIEQUAL (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8)]
[(stack, 0xfffffffffffffb94, 4) MULTIEQUAL (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4)]
[(stack, 0xfffffffffffffb90, 4) MULTIEQUAL (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4)]
[(stack, 0xfffffffffffffb8c, 4) MULTIEQUAL (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4)]
[(stack, 0xfffffffffffffb88, 4) MULTIEQUAL (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4)]
[(stack, 0xfffffffffffffb84, 4) MULTIEQUAL (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4)]
[(stack, 0xfffffffffffffb80, 4) MULTIEQUAL (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4)]
[(stack, 0xfffffffffffffb7c, 4) MULTIEQUAL (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb60, 8) MULTIEQUAL (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb20, 8) MULTIEQUAL (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae0, 8) MULTIEQUAL (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(stack, 0xfffffffffffffb44, 4) COPY (const, 0x3, 4)]
[(unique, 0x10001c0f, 8) COPY (register, 0x20, 8), (register, 0x20, 8) MULTIEQUAL (unique, 0x10001e1a, 8) , (register, 0x20, 8) , (register, 0x20, 8)]
[ ---  BRANCH (ram, 0x267d4d, 1)]
[(stack, 0xfffffffffffffb60, 8) COPY (const, 0x0, 8)]
[(register, 0x0, 4) INT_AND (register, 0xa0, 4) , (const, 0x10, 4)]
[(stack, 0xfffffffffffffb08, 8) COPY (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x100029ee, 8), (unique, 0x100029ee, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffb58, 8)]
[ ---  BRANCH (ram, 0x26814b, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbc0, 4) MULTIEQUAL (stack, 0xfffffffffffffbc0, 4) , (stack, 0xfffffffffffffbc0, 4) , (stack, 0xfffffffffffffbc0, 4) , (stack, 0xfffffffffffffbc0, 4)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb98, 8) MULTIEQUAL (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8)]
[(stack, 0xfffffffffffffb94, 4) MULTIEQUAL (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4)]
[(stack, 0xfffffffffffffb90, 4) MULTIEQUAL (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4)]
[(stack, 0xfffffffffffffb8c, 4) MULTIEQUAL (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4)]
[(stack, 0xfffffffffffffb88, 4) MULTIEQUAL (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4)]
[(stack, 0xfffffffffffffb84, 4) MULTIEQUAL (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4)]
[(stack, 0xfffffffffffffb80, 4) MULTIEQUAL (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4)]
[(stack, 0xfffffffffffffb7c, 4) MULTIEQUAL (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb60, 8) MULTIEQUAL (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb20, 8) MULTIEQUAL (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae0, 8) MULTIEQUAL (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb8, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8) , (unique, 0xbd80, 8) , (unique, 0xbd80, 8)]
[(register, 0xa8, 8) MULTIEQUAL (register, 0x38, 8) , (register, 0x38, 8) , (register, 0xa8, 8) , (register, 0x38, 8)]
[(register, 0xa0, 4) MULTIEQUAL (register, 0xa0, 4) , (register, 0xa0, 4) , (stack, 0xfffffffffffffb00, 4) , (register, 0xa0, 4)]
[(register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8)]
[(register, 0x18, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x18, 8) , (register, 0x18, 8) , (register, 0x8, 8)]
[(register, 0x10, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8) , (unique, 0xbd80, 8) , (unique, 0x10001a63, 8)]
[(unique, 0x100019e3, 8) COPY (stack, 0xfffffffffffffb08, 8), (stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[ ---  CBRANCH (ram, 0x2681f8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) MULTIEQUAL (register, 0x0, 4) , (register, 0x0, 4) , (register, 0x0, 4) , (register, 0x0, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbc0, 4) MULTIEQUAL (stack, 0xfffffffffffffbc0, 4) , (stack, 0xfffffffffffffbc0, 4)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb98, 8) MULTIEQUAL (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8)]
[(stack, 0xfffffffffffffb94, 4) MULTIEQUAL (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4)]
[(stack, 0xfffffffffffffb90, 4) MULTIEQUAL (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4)]
[(stack, 0xfffffffffffffb8c, 4) MULTIEQUAL (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4)]
[(stack, 0xfffffffffffffb88, 4) MULTIEQUAL (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4)]
[(stack, 0xfffffffffffffb84, 4) MULTIEQUAL (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4)]
[(stack, 0xfffffffffffffb80, 4) MULTIEQUAL (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4)]
[(stack, 0xfffffffffffffb7c, 4) MULTIEQUAL (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb60, 8) MULTIEQUAL (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb20, 8) MULTIEQUAL (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae0, 8) MULTIEQUAL (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xa8, 8) MULTIEQUAL (register, 0xa8, 8) , (register, 0x38, 8)]
[(register, 0xa0, 4) MULTIEQUAL (register, 0xa0, 4) , (register, 0xa0, 4)]
[(register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8)]
[(register, 0x18, 8) MULTIEQUAL (register, 0x18, 8) , (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x268ad7, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (register, 0x10, 8) , (const, 0x1ffffffffffffffe, 8), (register, 0x10, 8) INT_ADD (unique, 0x100029f6, 8) , (register, 0xb8, 8), (unique, 0x100029f6, 8) CAST (unique, 0x100012a0, 8), (unique, 0x100012a0, 8) PTRSUB (register, 0x10, 8) , (const, 0x0, 8), (register, 0x10, 8) MULTIEQUAL (register, 0x10, 8) , (unique, 0xbd80, 8), (register, 0xb8, 8) MULTIEQUAL (register, 0xb8, 8) , (unique, 0xbd80, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100029fe, 8) , (const, 0x268222, 8), (unique, 0x100029fe, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x52e, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x52e, 4)]
[(stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x52e, 4), (stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x52d, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x52e, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x52d, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x52e, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x52d, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x52e, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x52d, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x52e, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x52d, 4)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x52e, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x52d, 4)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x52e, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x52d, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x52e, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x52d, 4)]
[(stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x52e, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x52d, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x52e, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x52d, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x52e, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x52d, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x52e, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x52d, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x52e, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x52d, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x52e, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x52d, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x52e, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x52d, 4)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x52e, 4), (stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x52d, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x52e, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x52d, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x52e, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x52d, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x52e, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x52d, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x52e, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x52d, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x52e, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x52d, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x52e, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x52d, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x52e, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x52d, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x52e, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x52d, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x52e, 4), (stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x52d, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x52e, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x52d, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x52e, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x52d, 4)]
[(stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0x52e, 4), (stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0x52d, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x52e, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x52d, 4)]
[ ---  CBRANCH (ram, 0x268ad7, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10002a06, 8), (unique, 0x10002a06, 8) CALL (ram, 0x121020, 8) , (unique, 0xbd80, 8) , (unique, 0x3580, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0x18, 8) , (const, 0x8, 8), (unique, 0x3580, 8) INT_ADD (unique, 0x3480, 8) , (const, 0x10, 8), (unique, 0x3480, 8) INT_MULT (register, 0x10, 8) , (const, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (register, 0x0, 8), (unique, 0x3100, 8) PTRSUB (register, 0x18, 8) , (const, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10002a0e, 8) , (const, 0x26823c, 8), (unique, 0x10002a0e, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x543, 4)]
[(stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x543, 4), (stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x542, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x543, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x542, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x543, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x542, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x543, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x542, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x543, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x542, 4)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x543, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x542, 4)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x543, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x542, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x543, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x542, 4)]
[(stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x543, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x542, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x543, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x542, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x543, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x542, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x543, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x542, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x543, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x542, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x543, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x542, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x543, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x542, 4)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x543, 4), (stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x542, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x543, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x542, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x543, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x542, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x543, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x542, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x543, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x542, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x543, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x542, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x543, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x542, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x543, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x542, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x543, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x542, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x543, 4), (stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x542, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x543, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x542, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x543, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x542, 4)]
[(stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0x543, 4), (stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0x542, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x543, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x542, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x545, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x543, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x53f, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3a00, 8) , (register, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x19d9a0, 8) , (register, 0xa8, 8), (unique, 0x3a00, 8) PTRADD (register, 0x0, 8) , (register, 0x10, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x268c21, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbe00, 8) , (const, 0x0, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) PTRADD (unique, 0xbd80, 8) , (register, 0x10, 8) , (const, 0x8, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0x18, 8) , (const, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10002a16, 8) , (const, 0x268c2d, 8), (unique, 0x10002a16, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8), (register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8)]
[ ---  CALL (ram, 0x1e9620, 8) , (unique, 0x10002a1e, 8), (unique, 0x10002a1e, 8) CAST (unique, 0x10001a0b, 8), (unique, 0x10001a0b, 8) COPY (stack, 0xfffffffffffffb08, 8), (stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10002a26, 8) , (const, 0x268c35, 8), (unique, 0x10002a26, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8), (register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x6b1, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x6ad, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x6b1, 4), (stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x6b0, 4), (stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x6ad, 4), (stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x6ac, 4), (stack, 0xfffffffffffffae0, 8) MULTIEQUAL (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x6b1, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x6b0, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x6ad, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x6ac, 4), (stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x6b1, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x6b0, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x6ad, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x6ac, 4), (stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x6b1, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x6b0, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x6ad, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x6ac, 4), (stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x6b1, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x6b0, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x6ad, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x6ac, 4), (stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x6b1, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x6b0, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x6ad, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x6ac, 4), (stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x6b1, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x6b0, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x6ad, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x6ac, 4), (stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x6b1, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x6b0, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x6ad, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x6ac, 4), (stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x6b1, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x6b0, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x6ad, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x6ac, 4), (stack, 0xfffffffffffffb20, 8) MULTIEQUAL (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x6b1, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x6b0, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x6ad, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x6ac, 4), (stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x6b1, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x6b0, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x6ad, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x6ac, 4), (stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x6b1, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x6b0, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x6ad, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x6ac, 4), (stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x6b1, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x6b0, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x6ad, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x6ac, 4), (stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x6b1, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x6b0, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x6ad, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x6ac, 4), (stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x6b1, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x6b0, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x6ad, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x6ac, 4), (stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x6b1, 4), (stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x6b0, 4), (stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x6ad, 4), (stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x6ac, 4), (stack, 0xfffffffffffffb60, 8) MULTIEQUAL (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x6b1, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x6b0, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x6ad, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x6ac, 4), (stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x6b1, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x6b0, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x6ad, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x6ac, 4), (stack, 0xfffffffffffffb7c, 4) MULTIEQUAL (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x6b1, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x6b0, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x6ad, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x6ac, 4), (stack, 0xfffffffffffffb80, 4) MULTIEQUAL (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x6b1, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x6b0, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x6ad, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x6ac, 4), (stack, 0xfffffffffffffb84, 4) MULTIEQUAL (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x6b1, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x6b0, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x6ad, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x6ac, 4), (stack, 0xfffffffffffffb88, 4) MULTIEQUAL (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x6b1, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x6b0, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x6ad, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x6ac, 4), (stack, 0xfffffffffffffb8c, 4) MULTIEQUAL (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x6b1, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x6b0, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x6ad, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x6ac, 4), (stack, 0xfffffffffffffb90, 4) MULTIEQUAL (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x6b1, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x6b0, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x6ad, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x6ac, 4), (stack, 0xfffffffffffffb94, 4) MULTIEQUAL (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x6b1, 4), (stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x6b0, 4), (stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x6ad, 4), (stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x6ac, 4), (stack, 0xfffffffffffffb98, 8) MULTIEQUAL (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x6b1, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x6b0, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x6ad, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x6ac, 4), (stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x6b1, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x6b0, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x6ad, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x6ac, 4), (stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x6b1, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x6b0, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x6ad, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x6ac, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CALL (ram, 0x1e9620, 8) , (unique, 0x10002a2e, 8), (unique, 0x10002a2e, 8) CAST (register, 0x18, 8), (register, 0x18, 8) MULTIEQUAL (register, 0x18, 8) , (register, 0x18, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x6b3, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x6b1, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x6ad, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001560, 8) , (const, 0x0, 8), (unique, 0x10001560, 8) PTRSUB (unique, 0x10002a36, 8) , (const, 0x0, 8), (unique, 0x10002a36, 8) CAST (register, 0x18, 8), (register, 0x18, 8) MULTIEQUAL (register, 0x18, 8) , (register, 0x18, 8)]
[(stack, 0xfffffffffffffb44, 4) COPY (const, 0x1, 4)]
[(unique, 0x10001be7, 8) COPY (register, 0x20, 8), (register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8)]
[ ---  BRANCH (ram, 0x267d4d, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100012f0, 8) , (unique, 0xbe00, 8), (unique, 0x100012f0, 8) PTRSUB (register, 0x18, 8) , (const, 0x0, 8), (unique, 0xbe00, 8) INT_ADD (unique, 0xbe00, 8) , (const, 0x1, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x100012e8, 8), (unique, 0x100012e8, 8) PTRSUB (register, 0x18, 8) , (const, 0x0, 8)]
[(stack, 0xfffffffffffffb00, 8) CAST (unique, 0x10002a46, 8), (unique, 0x10002a46, 8) INT_OR (unique, 0x10000b87, 8) , (unique, 0x10000b8f, 8), (unique, 0x10000b8f, 8) INT_ZEXT (register, 0xa0, 4), (unique, 0x10000b87, 8) INT_AND (unique, 0x10002a3e, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10002a3e, 8) CAST (stack, 0xfffffffffffffb00, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3a00, 8) , (const, 0x0, 8), (unique, 0x3a00, 8) PTRADD (unique, 0xbd80, 8) , (unique, 0x10001300, 8) , (const, 0x8, 8), (unique, 0x10001300, 8) INT_ADD (register, 0x10, 8) , (const, 0x1, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x573, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x570, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x55f, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (register, 0xa0, 4), (unique, 0x3100, 8) PTRSUB (register, 0x18, 8) , (const, 0x18, 8)]
[(register, 0x18, 8) MULTIEQUAL (register, 0x18, 8) , (register, 0x18, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10002a4e, 8) , (const, 0x268273, 8), (unique, 0x10002a4e, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8), (register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x579, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x579, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x579, 4), (stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x578, 4), (stack, 0xfffffffffffffae0, 8) MULTIEQUAL (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x579, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x578, 4), (stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x579, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x578, 4), (stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x579, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x578, 4), (stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x579, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x578, 4), (stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x579, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x578, 4), (stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x579, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x578, 4), (stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x579, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x578, 4), (stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x579, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x578, 4), (stack, 0xfffffffffffffb20, 8) MULTIEQUAL (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x579, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x578, 4), (stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x579, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x578, 4), (stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x579, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x578, 4), (stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x579, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x578, 4), (stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x579, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x578, 4), (stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x579, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x578, 4), (stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x579, 4), (stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x578, 4), (stack, 0xfffffffffffffb60, 8) MULTIEQUAL (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x579, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x578, 4), (stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x579, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x578, 4), (stack, 0xfffffffffffffb7c, 4) MULTIEQUAL (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x579, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x578, 4), (stack, 0xfffffffffffffb80, 4) MULTIEQUAL (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x579, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x578, 4), (stack, 0xfffffffffffffb84, 4) MULTIEQUAL (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x579, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x578, 4), (stack, 0xfffffffffffffb88, 4) MULTIEQUAL (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x579, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x578, 4), (stack, 0xfffffffffffffb8c, 4) MULTIEQUAL (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x579, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x578, 4), (stack, 0xfffffffffffffb90, 4) MULTIEQUAL (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x579, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x578, 4), (stack, 0xfffffffffffffb94, 4) MULTIEQUAL (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x579, 4), (stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x578, 4), (stack, 0xfffffffffffffb98, 8) MULTIEQUAL (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x579, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x578, 4), (stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x579, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x578, 4), (stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0x579, 4), (stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0x578, 4), (stack, 0xfffffffffffffbc0, 4) MULTIEQUAL (stack, 0xfffffffffffffbc0, 4) , (stack, 0xfffffffffffffbc0, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x579, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x578, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CALL (ram, 0x1e9620, 8) , (unique, 0x10002a56, 8), (unique, 0x10002a56, 8) CAST (unique, 0x100019eb, 8), (unique, 0x100019eb, 8) COPY (stack, 0xfffffffffffffb08, 8), (stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10002a5e, 8) , (const, 0x268ae3, 8), (unique, 0x10002a5e, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x6bd, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x6bd, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x6bd, 4), (stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x6bc, 4), (stack, 0xfffffffffffffae0, 8) MULTIEQUAL (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x6bd, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x6bc, 4), (stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x6bd, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x6bc, 4), (stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x6bd, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x6bc, 4), (stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x6bd, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x6bc, 4), (stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x6bd, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x6bc, 4), (stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x6bd, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x6bc, 4), (stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x6bd, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x6bc, 4), (stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x6bd, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x6bc, 4), (stack, 0xfffffffffffffb20, 8) MULTIEQUAL (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x6bd, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x6bc, 4), (stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x6bd, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x6bc, 4), (stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x6bd, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x6bc, 4), (stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x6bd, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x6bc, 4), (stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x6bd, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x6bc, 4), (stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x6bd, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x6bc, 4), (stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x6bd, 4), (stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x6bc, 4), (stack, 0xfffffffffffffb60, 8) MULTIEQUAL (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x6bd, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x6bc, 4), (stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x6bd, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x6bc, 4), (stack, 0xfffffffffffffb7c, 4) MULTIEQUAL (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x6bd, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x6bc, 4), (stack, 0xfffffffffffffb80, 4) MULTIEQUAL (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x6bd, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x6bc, 4), (stack, 0xfffffffffffffb84, 4) MULTIEQUAL (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x6bd, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x6bc, 4), (stack, 0xfffffffffffffb88, 4) MULTIEQUAL (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x6bd, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x6bc, 4), (stack, 0xfffffffffffffb8c, 4) MULTIEQUAL (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x6bd, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x6bc, 4), (stack, 0xfffffffffffffb90, 4) MULTIEQUAL (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x6bd, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x6bc, 4), (stack, 0xfffffffffffffb94, 4) MULTIEQUAL (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x6bd, 4), (stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x6bc, 4), (stack, 0xfffffffffffffb98, 8) MULTIEQUAL (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x6bd, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x6bc, 4), (stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x6bd, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x6bc, 4), (stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x6bd, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x6bc, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CALL (ram, 0x1e9620, 8) , (unique, 0x10002a66, 8), (unique, 0x10002a66, 8) CAST (unique, 0x100019fb, 8), (unique, 0x100019fb, 8) COPY (stack, 0xfffffffffffffb08, 8), (stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb44, 4) COPY (const, 0x1, 4)]
[(unique, 0x10001bef, 8) COPY (register, 0x20, 8)]
[ ---  BRANCH (ram, 0x267d4d, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10002a6e, 8) , (const, 0x26815f, 8), (unique, 0x10002a6e, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x4f5, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x4f5, 4)]
[(stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x4f5, 4), (stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x4f4, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x4f5, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x4f4, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x4f5, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x4f4, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x4f5, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x4f4, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x4f5, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x4f4, 4)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x4f5, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x4f4, 4)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x4f5, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x4f4, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x4f5, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x4f4, 4)]
[(stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x4f5, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x4f4, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x4f5, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x4f4, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x4f5, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x4f4, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x4f5, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x4f4, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x4f5, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x4f4, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x4f5, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x4f4, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x4f5, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x4f4, 4)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x4f5, 4), (stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x4f4, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x4f5, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x4f4, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x4f5, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x4f4, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x4f5, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x4f4, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x4f5, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x4f4, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x4f5, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x4f4, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x4f5, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x4f4, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x4f5, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x4f4, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x4f5, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x4f4, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x4f5, 4), (stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x4f4, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x4f5, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x4f4, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x4f5, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x4f4, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x4f5, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x4f4, 4)]
[ ---  CALL (ram, 0x1e9620, 8) , (unique, 0x10002a76, 8), (unique, 0x10002a76, 8) CAST (unique, 0x100019e3, 8)]
[(stack, 0xfffffffffffffb44, 4) COPY (const, 0x3, 4)]
[(unique, 0x10001bc7, 8) COPY (register, 0x20, 8)]
[ ---  BRANCH (ram, 0x267d4d, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10002a7e, 8) , (const, 0x2681b9, 8), (unique, 0x10002a7e, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xa6d, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xa6d, 4)]
[(stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0xa6d, 4), (stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0xa6c, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0xa6d, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0xa6c, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0xa6d, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0xa6c, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0xa6d, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0xa6c, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0xa6d, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0xa6c, 4)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0xa6d, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0xa6c, 4)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0xa6d, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0xa6c, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0xa6d, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0xa6c, 4)]
[(stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0xa6d, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0xa6c, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0xa6d, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0xa6c, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0xa6d, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0xa6c, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0xa6d, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0xa6c, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0xa6d, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0xa6c, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0xa6d, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0xa6c, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0xa6d, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0xa6c, 4)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0xa6d, 4), (stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0xa6c, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0xa6d, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0xa6c, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0xa6d, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0xa6c, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0xa6d, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0xa6c, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0xa6d, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0xa6c, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0xa6d, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0xa6c, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0xa6d, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0xa6c, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0xa6d, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0xa6c, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0xa6d, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0xa6c, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0xa6d, 4), (stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0xa6c, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0xa6d, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0xa6c, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0xa6d, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0xa6c, 4)]
[(stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0xa6d, 4), (stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0xa6c, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xa6d, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xa6c, 4)]
[ ---  CBRANCH (ram, 0x26844b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x201c40, 8) , (register, 0xb0, 8) , (unique, 0x10001a83, 8) , (register, 0xa0, 4) , (unique, 0x10001af3, 8) , (register, 0x18, 8) , (unique, 0x10001a43, 8)]
[(stack, 0xfffffffffffffb00, 8) CAST (unique, 0x10002a8e, 8), (unique, 0x10002a8e, 8) INT_OR (unique, 0x10000bc0, 8) , (unique, 0x10000bc8, 8), (unique, 0x10000bc8, 8) INT_ZEXT (register, 0xa0, 4), (unique, 0x10000bc0, 8) INT_AND (unique, 0x10002a86, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10002a86, 8) CAST (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbc0, 4) MULTIEQUAL (stack, 0xfffffffffffffbc0, 4) , (stack, 0xfffffffffffffbc0, 4)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb98, 8) MULTIEQUAL (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8)]
[(stack, 0xfffffffffffffb94, 4) MULTIEQUAL (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4)]
[(stack, 0xfffffffffffffb90, 4) MULTIEQUAL (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4)]
[(stack, 0xfffffffffffffb8c, 4) MULTIEQUAL (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4)]
[(stack, 0xfffffffffffffb88, 4) MULTIEQUAL (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4)]
[(stack, 0xfffffffffffffb84, 4) MULTIEQUAL (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4)]
[(stack, 0xfffffffffffffb80, 4) MULTIEQUAL (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4)]
[(stack, 0xfffffffffffffb7c, 4) MULTIEQUAL (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb60, 8) MULTIEQUAL (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb20, 8) MULTIEQUAL (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8)]
[(stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae0, 8) MULTIEQUAL (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x10001aa3, 8) COPY (stack, 0xfffffffffffffb30, 8), (stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[ ---  CBRANCH (ram, 0x268273, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xfffffffffffffb18, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10002ace, 8) , (const, 0x268488, 8), (unique, 0x10002ace, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xa2f, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xa2f, 4)]
[(stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0xa2f, 4), (stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0xa2e, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0xa2f, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0xa2e, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0xa2f, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0xa2e, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0xa2f, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0xa2e, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0xa2f, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0xa2e, 4)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0xa2f, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0xa2e, 4)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0xa2f, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0xa2e, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0xa2f, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0xa2e, 4)]
[(stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0xa2f, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0xa2e, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0xa2f, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0xa2e, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0xa2f, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0xa2e, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0xa2f, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0xa2e, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0xa2f, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0xa2e, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0xa2f, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0xa2e, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0xa2f, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0xa2e, 4)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0xa2f, 4), (stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0xa2e, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0xa2f, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0xa2e, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0xa2f, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0xa2e, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0xa2f, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0xa2e, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0xa2f, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0xa2e, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0xa2f, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0xa2e, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0xa2f, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0xa2e, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0xa2f, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0xa2e, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0xa2f, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0xa2e, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0xa2f, 4), (stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0xa2e, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0xa2f, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0xa2e, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0xa2f, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0xa2e, 4)]
[(stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0xa2f, 4), (stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0xa2e, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xa2f, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xa2e, 4)]
[ ---  CBRANCH (ram, 0x268273, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x201af0, 8) , (unique, 0x10001aa3, 8) , (unique, 0x3400, 8) , (register, 0x10, 8), (unique, 0x3400, 8) PTRADD (unique, 0xbd80, 8) , (register, 0x0, 8) , (const, 0x8, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (unique, 0x10002ac6, 8) , (const, 0x8, 8), (unique, 0x10002ac6, 8) CAST (register, 0x18, 8), (register, 0x0, 8) INT_ADD (unique, 0x10002abe, 8) , (unique, 0x100013b0, 8), (unique, 0x10002abe, 8) CAST (unique, 0x100013b8, 8), (unique, 0x100013b8, 8) CAST (unique, 0x10002ab6, 8), (unique, 0x10002ab6, 8) PTRSUB (stack, 0xfffffffffffffb08, 8) , (const, 0x78, 8), (unique, 0x100013b0, 8) INT_ADD (unique, 0x10002aae, 8) , (unique, 0xbd80, 8), (unique, 0x10002aae, 8) CAST (unique, 0x10001824, 8), (unique, 0x10001824, 8) PTRSUB (const, 0x0, 8) , (const, 0xffffffffffffff88, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (unique, 0x10002aa6, 8) , (const, 0x10, 8), (unique, 0x10002aa6, 8) CAST (register, 0x18, 8), (register, 0x10, 8) INT_SUB (unique, 0xbd80, 8) , (unique, 0x10002a9e, 8), (unique, 0x10002a9e, 8) CAST (stack, 0xfffffffffffffb08, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x100013a0, 8), (unique, 0x100013a0, 8) PTRSUB (unique, 0x10002a96, 8) , (const, 0x0, 8), (unique, 0x10002a96, 8) CAST (register, 0x18, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbc0, 4) MULTIEQUAL (stack, 0xfffffffffffffbc0, 4) , (stack, 0xfffffffffffffbc0, 4) , (stack, 0xfffffffffffffbc0, 4)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb98, 8) MULTIEQUAL (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8)]
[(stack, 0xfffffffffffffb94, 4) MULTIEQUAL (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4)]
[(stack, 0xfffffffffffffb90, 4) MULTIEQUAL (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4)]
[(stack, 0xfffffffffffffb8c, 4) MULTIEQUAL (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4)]
[(stack, 0xfffffffffffffb88, 4) MULTIEQUAL (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4)]
[(stack, 0xfffffffffffffb84, 4) MULTIEQUAL (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4)]
[(stack, 0xfffffffffffffb80, 4) MULTIEQUAL (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4)]
[(stack, 0xfffffffffffffb7c, 4) MULTIEQUAL (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb60, 8) MULTIEQUAL (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb20, 8) MULTIEQUAL (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae0, 8) MULTIEQUAL (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x18, 8) MULTIEQUAL (register, 0x18, 8) , (register, 0x18, 8) , (register, 0x18, 8)]
[(unique, 0x10001e12, 8) COPY (register, 0x20, 8), (register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x2684ae, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x10000d06, 8) , (const, 0x0, 8), (unique, 0x10000d06, 8) INT_AND (unique, 0x10002ad6, 8) , (const, 0x2, 8), (unique, 0x10002ad6, 8) CAST (stack, 0xfffffffffffffb00, 8), (stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[ ---  CBRANCH (ram, 0x2684ae, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (stack, 0xfffffffffffffb10, 8) , (register, 0x0, 8), (register, 0x0, 8) INT_ADD (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10001320, 8), (unique, 0x10001320, 8) PTRSUB (register, 0x18, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0x18, 8) , (const, 0x10, 8)]
[(unique, 0x10000b9a, 8) INT_AND (unique, 0x10002ade, 8) , (const, 0x200, 8), (unique, 0x10002ade, 8) CAST (stack, 0xfffffffffffffb00, 8)]
[(unique, 0x3680, 8) INT_MULT (stack, 0xfffffffffffffb10, 8) , (const, 0x8, 8)]
[(stack, 0xfffffffffffffb08, 8) COPY (unique, 0x3200, 8), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffba8, 8)]
[(unique, 0x10001ce7, 8) COPY (stack, 0xfffffffffffffb10, 8)]
[ ---  BRANCH (ram, 0x2682d8, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbc0, 4) MULTIEQUAL (stack, 0xfffffffffffffbc0, 4) , (stack, 0xfffffffffffffbc0, 4)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb98, 8) MULTIEQUAL (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8)]
[(stack, 0xfffffffffffffb94, 4) MULTIEQUAL (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4)]
[(stack, 0xfffffffffffffb90, 4) MULTIEQUAL (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4)]
[(stack, 0xfffffffffffffb8c, 4) MULTIEQUAL (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4)]
[(stack, 0xfffffffffffffb88, 4) MULTIEQUAL (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4)]
[(stack, 0xfffffffffffffb84, 4) MULTIEQUAL (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4)]
[(stack, 0xfffffffffffffb80, 4) MULTIEQUAL (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4)]
[(stack, 0xfffffffffffffb7c, 4) MULTIEQUAL (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb60, 8) MULTIEQUAL (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb20, 8) MULTIEQUAL (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae0, 8) MULTIEQUAL (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xa0, 8) MULTIEQUAL (unique, 0x10001ce7, 8) , (register, 0xa0, 8)]
[(unique, 0x100019f3, 8) COPY (stack, 0xfffffffffffffb08, 8), (stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) CAST (unique, 0x10002aee, 8), (unique, 0x10002aee, 8) INT_ADD (unique, 0x10002ae6, 8) , (register, 0xb8, 8), (unique, 0x10002ae6, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0x18, 8) , (const, 0x8, 8), (register, 0xb8, 8) MULTIEQUAL (unique, 0x3680, 8) , (register, 0xb8, 8)]
[ ---  CBRANCH (ram, 0x26881e, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x10000b9a, 8) , (const, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10002af6, 8) , (const, 0x268828, 8), (unique, 0x10002af6, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x69b, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x69b, 4)]
[(stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x69b, 4), (stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x699, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x69b, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x699, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x69b, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x699, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x69b, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x699, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x69b, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x699, 4)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x69b, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x699, 4)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x69b, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x699, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x69b, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x699, 4)]
[(stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x69b, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x699, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x69b, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x699, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x69b, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x699, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x69b, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x699, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x69b, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x699, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x69b, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x699, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x69b, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x699, 4)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x69b, 4), (stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x699, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x69b, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x699, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x69b, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x699, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x69b, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x699, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x69b, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x699, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x69b, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x699, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x69b, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x699, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x69b, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x699, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x69b, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x699, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x69b, 4), (stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x699, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x69b, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x699, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x69b, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x699, 4)]
[(stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0x69b, 4), (stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0x699, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x69b, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x699, 4)]
[(register, 0x0, 4) CALLIND (unique, 0xbd80, 8) , (unique, 0xbd80, 8) , (unique, 0x100019f3, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0x18, 8) , (const, 0x40, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10002afe, 8) , (const, 0x2682fd, 8), (unique, 0x10002afe, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x5d3, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x5d3, 4)]
[(stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x5d3, 4), (stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x5d2, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x5d3, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x5d2, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x5d3, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x5d2, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x5d3, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x5d2, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x5d3, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x5d2, 4)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x5d3, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x5d2, 4)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x5d3, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x5d2, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x5d3, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x5d2, 4)]
[(stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x5d3, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x5d2, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x5d3, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x5d2, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x5d3, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x5d2, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x5d3, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x5d2, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x5d3, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x5d2, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x5d3, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x5d2, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x5d3, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x5d2, 4)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x5d3, 4), (stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x5d2, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x5d3, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x5d2, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x5d3, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x5d2, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x5d3, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x5d2, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x5d3, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x5d2, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x5d3, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x5d2, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x5d3, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x5d2, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x5d3, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x5d2, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x5d3, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x5d2, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x5d3, 4), (stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x5d2, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x5d3, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x5d2, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x5d3, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x5d2, 4)]
[(stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0x5d3, 4), (stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0x5d2, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x5d3, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x5d2, 4)]
[(register, 0x0, 4) CALL (ram, 0x20f760, 8) , (const, 0x1, 4) , (unique, 0xbd80, 8) , (unique, 0x100019f3, 8)]
[(unique, 0x1000173b, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x10001743, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(unique, 0x1000174b, 8) MULTIEQUAL (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8)]
[(unique, 0x10001753, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(unique, 0x1000175b, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(unique, 0x10001763, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(unique, 0x1000176b, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(unique, 0x10001773, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(unique, 0x1000177b, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(unique, 0x10001783, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(unique, 0x1000178b, 8) MULTIEQUAL (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8)]
[(unique, 0x10001793, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(unique, 0x1000179b, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(unique, 0x100017a3, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(unique, 0x100017ab, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(unique, 0x100017af, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(unique, 0x100017b3, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(unique, 0x100017bb, 8) MULTIEQUAL (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8)]
[(unique, 0x100017c3, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(unique, 0x100017c7, 4) MULTIEQUAL (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4)]
[(unique, 0x100017cb, 4) MULTIEQUAL (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4)]
[(unique, 0x100017cf, 4) MULTIEQUAL (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4)]
[(unique, 0x100017d3, 4) MULTIEQUAL (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4)]
[(unique, 0x100017d7, 4) MULTIEQUAL (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4)]
[(unique, 0x100017db, 4) MULTIEQUAL (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4)]
[(unique, 0x100017df, 4) MULTIEQUAL (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4)]
[(unique, 0x100017e3, 8) MULTIEQUAL (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8)]
[(unique, 0x100017eb, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(unique, 0x100017f3, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(unique, 0x100017fb, 4) MULTIEQUAL (stack, 0xfffffffffffffbc0, 4) , (stack, 0xfffffffffffffbc0, 4)]
[(unique, 0x100017ff, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CBRANCH (ram, 0x2682c0, 1) , (unique, 0x1000173a, 1), (unique, 0x1000173a, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) MULTIEQUAL (register, 0x0, 4) , (register, 0x0, 4)]
[ ---  CBRANCH (ram, 0x2682c0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x4000, 4), (register, 0x0, 4) INT_AND (unique, 0x100017fb, 4) , (const, 0xf000, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10002b16, 8) , (const, 0x26832a, 8), (unique, 0x10002b16, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10002b26, 8) , (const, 0x268340, 8), (unique, 0x10002b26, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x60f, 4), (register, 0x110, 8) INDIRECT (unique, 0x1000173b, 8) , (const, 0x605, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x60f, 4), (ram, 0x4eae68, 8) INDIRECT (unique, 0x10001743, 8) , (const, 0x605, 4)]
[(stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x60f, 4), (stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x60e, 4), (stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x605, 4), (stack, 0xfffffffffffffae0, 8) INDIRECT (unique, 0x1000174b, 8) , (const, 0x604, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x60f, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x60e, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x605, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (unique, 0x10001753, 8) , (const, 0x604, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x60f, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x60e, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x605, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (unique, 0x1000175b, 8) , (const, 0x604, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x60f, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x60e, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x605, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (unique, 0x10001763, 8) , (const, 0x604, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x60f, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x60e, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x605, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (unique, 0x1000176b, 8) , (const, 0x604, 4)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x60f, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x60e, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x605, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (unique, 0x10001773, 8) , (const, 0x604, 4)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x60f, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x60e, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x605, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (unique, 0x1000177b, 8) , (const, 0x604, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x60f, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x60e, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x605, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (unique, 0x10001783, 8) , (const, 0x604, 4)]
[(stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x60f, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x60e, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x605, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (unique, 0x1000178b, 8) , (const, 0x604, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x60f, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x60e, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x605, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (unique, 0x10001793, 8) , (const, 0x604, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x60f, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x60e, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x605, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (unique, 0x1000179b, 8) , (const, 0x604, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x60f, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x60e, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x605, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x604, 4), (stack, 0xfffffffffffffb38, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) CAST (unique, 0x10002b0e, 8), (unique, 0x10002b0e, 8) INT_ADD (unique, 0x10002b06, 8) , (register, 0xb8, 8), (unique, 0x10002b06, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0x18, 8) , (const, 0x8, 8)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x60f, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x60e, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x605, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (unique, 0x100017ab, 4) , (const, 0x604, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x60f, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x60e, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x605, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (unique, 0x100017af, 4) , (const, 0x604, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x60f, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x60e, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x605, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (unique, 0x100017b3, 8) , (const, 0x604, 4)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x60f, 4), (stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x60e, 4), (stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x605, 4), (stack, 0xfffffffffffffb60, 8) INDIRECT (unique, 0x100017bb, 8) , (const, 0x604, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x60f, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x60e, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x605, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (unique, 0x100017c3, 4) , (const, 0x604, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x60f, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x60e, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x605, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (unique, 0x100017c7, 4) , (const, 0x604, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x60f, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x60e, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x605, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (unique, 0x100017cb, 4) , (const, 0x604, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x60f, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x60e, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x605, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (unique, 0x100017cf, 4) , (const, 0x604, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x60f, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x60e, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x605, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (unique, 0x100017d3, 4) , (const, 0x604, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x60f, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x60e, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x605, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (unique, 0x100017d7, 4) , (const, 0x604, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x60f, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x60e, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x605, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (unique, 0x100017db, 4) , (const, 0x604, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x60f, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x60e, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x605, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (unique, 0x100017df, 4) , (const, 0x604, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x60f, 4), (stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x60e, 4), (stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x605, 4), (stack, 0xfffffffffffffb98, 8) INDIRECT (unique, 0x100017e3, 8) , (const, 0x604, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x60f, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x60e, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x605, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (unique, 0x100017eb, 8) , (const, 0x604, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x60f, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x60e, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x605, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (unique, 0x100017f3, 8) , (const, 0x604, 4)]
[(stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0x60f, 4), (stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0x60e, 4), (stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0x605, 4), (stack, 0xfffffffffffffbc0, 4) INDIRECT (unique, 0x100017fb, 4) , (const, 0x604, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x60f, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x60e, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x605, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (unique, 0x100017ff, 8) , (const, 0x604, 4)]
[ ---  CBRANCH (ram, 0x268490, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x121020, 8) , (unique, 0x10001b03, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) INT_ADD (register, 0x0, 8) , (const, 0x2, 8), (unique, 0x10001b03, 8) COPY (stack, 0xfffffffffffffb38, 8), (register, 0x0, 8) CALL (ram, 0x121100, 8) , (unique, 0x10002b1e, 8), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x605, 4), (unique, 0x10002b1e, 8) CAST (unique, 0xbd80, 8), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x604, 4), (stack, 0xfffffffffffffb38, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) CAST (unique, 0x10002b0e, 8), (unique, 0x10002b0e, 8) INT_ADD (unique, 0x10002b06, 8) , (register, 0xb8, 8), (unique, 0x10002b06, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0x18, 8) , (const, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10002b2e, 8) , (const, 0x268498, 8), (unique, 0x10002b2e, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8), (register, 0x20, 8) MULTIEQUAL (unique, 0x10001e12, 8) , (unique, 0x10001e1a, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x68d, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x68d, 4), (stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x68c, 4), (stack, 0xfffffffffffffae0, 8) MULTIEQUAL (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x68d, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x68c, 4), (stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x68d, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x68c, 4), (stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x68d, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x68c, 4), (stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x68d, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x68c, 4), (stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x68d, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x68c, 4), (stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x68d, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x68c, 4), (stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x68d, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x68c, 4), (stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x68d, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x68c, 4), (stack, 0xfffffffffffffb20, 8) MULTIEQUAL (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x68d, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x68c, 4), (stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x68d, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x68c, 4), (stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x68d, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x68c, 4), (stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x68d, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x68c, 4), (stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x68d, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x68c, 4), (stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x68d, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x68c, 4), (stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x68d, 4), (stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x68c, 4), (stack, 0xfffffffffffffb60, 8) MULTIEQUAL (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x68d, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x68c, 4), (stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x68d, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x68c, 4), (stack, 0xfffffffffffffb7c, 4) MULTIEQUAL (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x68d, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x68c, 4), (stack, 0xfffffffffffffb80, 4) MULTIEQUAL (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x68d, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x68c, 4), (stack, 0xfffffffffffffb84, 4) MULTIEQUAL (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x68d, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x68c, 4), (stack, 0xfffffffffffffb88, 4) MULTIEQUAL (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x68d, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x68c, 4), (stack, 0xfffffffffffffb8c, 4) MULTIEQUAL (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x68d, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x68c, 4), (stack, 0xfffffffffffffb90, 4) MULTIEQUAL (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x68d, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x68c, 4), (stack, 0xfffffffffffffb94, 4) MULTIEQUAL (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x68d, 4), (stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x68c, 4), (stack, 0xfffffffffffffb98, 8) MULTIEQUAL (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x68d, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x68c, 4), (stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x68d, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x68c, 4), (stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x68d, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x68c, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CALL (ram, 0x1e9620, 8) , (unique, 0x10002b36, 8), (unique, 0x10002b36, 8) CAST (register, 0x18, 8), (register, 0x18, 8) MULTIEQUAL (register, 0x18, 8) , (register, 0x18, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x68f, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x68d, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100013d8, 8) , (const, 0x0, 8), (unique, 0x100013d8, 8) PTRSUB (unique, 0x10002b3e, 8) , (const, 0x0, 8), (unique, 0x10002b3e, 8) CAST (register, 0x18, 8), (register, 0x18, 8) MULTIEQUAL (register, 0x18, 8) , (register, 0x18, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb98, 8) MULTIEQUAL (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8)]
[(stack, 0xfffffffffffffb94, 4) MULTIEQUAL (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4)]
[(stack, 0xfffffffffffffb90, 4) MULTIEQUAL (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4)]
[(stack, 0xfffffffffffffb8c, 4) MULTIEQUAL (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4)]
[(stack, 0xfffffffffffffb88, 4) MULTIEQUAL (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4)]
[(stack, 0xfffffffffffffb84, 4) MULTIEQUAL (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4)]
[(stack, 0xfffffffffffffb80, 4) MULTIEQUAL (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4)]
[(stack, 0xfffffffffffffb7c, 4) MULTIEQUAL (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb60, 8) MULTIEQUAL (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb20, 8) MULTIEQUAL (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae0, 8) MULTIEQUAL (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(stack, 0xfffffffffffffb44, 4) COPY (const, 0x1, 4)]
[(unique, 0x10001bdf, 8) COPY (register, 0x20, 8), (register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8)]
[ ---  BRANCH (ram, 0x267d4d, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3400, 8) , (const, 0x2f, 2), (unique, 0x3400, 8) CAST (unique, 0x10002b4e, 8), (unique, 0x10002b4e, 8) INT_ADD (unique, 0x10002b46, 8) , (register, 0x0, 8), (unique, 0x10002b46, 8) CAST (register, 0x0, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x625, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x61e, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3400, 8) , (register, 0x0, 8), (unique, 0x3400, 8) CAST (unique, 0x10002b5e, 8), (unique, 0x10002b5e, 8) INT_ADD (unique, 0x10002b56, 8) , (register, 0xb8, 8), (unique, 0x10002b56, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0x18, 8) , (const, 0x8, 8)]
[ ---  BRANCH (ram, 0x2682c0, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (unique, 0x100017ff, 8) , (unique, 0x100017ff, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbc0, 4) MULTIEQUAL (unique, 0x100017fb, 4) , (unique, 0x100017fb, 4) , (stack, 0xfffffffffffffbc0, 4)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (unique, 0x100017f3, 8) , (unique, 0x100017f3, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (unique, 0x100017eb, 8) , (unique, 0x100017eb, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb98, 8) MULTIEQUAL (unique, 0x100017e3, 8) , (unique, 0x100017e3, 8) , (stack, 0xfffffffffffffb98, 8)]
[(stack, 0xfffffffffffffb94, 4) MULTIEQUAL (unique, 0x100017df, 4) , (unique, 0x100017df, 4) , (stack, 0xfffffffffffffb94, 4)]
[(stack, 0xfffffffffffffb90, 4) MULTIEQUAL (unique, 0x100017db, 4) , (unique, 0x100017db, 4) , (stack, 0xfffffffffffffb90, 4)]
[(stack, 0xfffffffffffffb8c, 4) MULTIEQUAL (unique, 0x100017d7, 4) , (unique, 0x100017d7, 4) , (stack, 0xfffffffffffffb8c, 4)]
[(stack, 0xfffffffffffffb88, 4) MULTIEQUAL (unique, 0x100017d3, 4) , (unique, 0x100017d3, 4) , (stack, 0xfffffffffffffb88, 4)]
[(stack, 0xfffffffffffffb84, 4) MULTIEQUAL (unique, 0x100017cf, 4) , (unique, 0x100017cf, 4) , (stack, 0xfffffffffffffb84, 4)]
[(stack, 0xfffffffffffffb80, 4) MULTIEQUAL (unique, 0x100017cb, 4) , (unique, 0x100017cb, 4) , (stack, 0xfffffffffffffb80, 4)]
[(stack, 0xfffffffffffffb7c, 4) MULTIEQUAL (unique, 0x100017c7, 4) , (unique, 0x100017c7, 4) , (stack, 0xfffffffffffffb7c, 4)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (unique, 0x100017c3, 4) , (unique, 0x100017c3, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb60, 8) MULTIEQUAL (unique, 0x100017bb, 8) , (unique, 0x100017bb, 8) , (stack, 0xfffffffffffffb60, 8)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (unique, 0x100017b3, 8) , (unique, 0x100017b3, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb44, 4) MULTIEQUAL (unique, 0x100017af, 4) , (unique, 0x100017af, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb40, 4) MULTIEQUAL (unique, 0x100017ab, 4) , (unique, 0x100017ab, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb38, 8) MULTIEQUAL (unique, 0x100017a3, 8) , (unique, 0x100017a3, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (unique, 0x1000179b, 8) , (unique, 0x1000179b, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (unique, 0x10001793, 8) , (unique, 0x10001793, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb20, 8) MULTIEQUAL (unique, 0x1000178b, 8) , (unique, 0x1000178b, 8) , (stack, 0xfffffffffffffb20, 8)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (unique, 0x10001783, 8) , (unique, 0x10001783, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb10, 8) MULTIEQUAL (unique, 0x1000177b, 8) , (unique, 0x1000177b, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (unique, 0x10001773, 8) , (unique, 0x10001773, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (unique, 0x1000176b, 8) , (unique, 0x1000176b, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (unique, 0x10001763, 8) , (unique, 0x10001763, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (unique, 0x1000175b, 8) , (unique, 0x1000175b, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (unique, 0x10001753, 8) , (unique, 0x10001753, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae0, 8) MULTIEQUAL (unique, 0x1000174b, 8) , (unique, 0x1000174b, 8) , (stack, 0xfffffffffffffae0, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (unique, 0x10001743, 8) , (unique, 0x10001743, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (unique, 0x1000173b, 8) , (unique, 0x1000173b, 8) , (register, 0x110, 8)]
[(register, 0xb8, 8) INT_ADD (register, 0xb8, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x2684ae, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (register, 0xa0, 8) , (register, 0x0, 8), (register, 0xa0, 8) INT_ADD (register, 0xa0, 8) , (const, 0x1, 8), (register, 0x0, 8) INT_ADD (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10001338, 8), (unique, 0x10001338, 8) PTRSUB (register, 0x18, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0x18, 8) , (const, 0x10, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb98, 8) MULTIEQUAL (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8)]
[(stack, 0xfffffffffffffb94, 4) MULTIEQUAL (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4)]
[(stack, 0xfffffffffffffb90, 4) MULTIEQUAL (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4)]
[(stack, 0xfffffffffffffb8c, 4) MULTIEQUAL (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4)]
[(stack, 0xfffffffffffffb88, 4) MULTIEQUAL (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4)]
[(stack, 0xfffffffffffffb84, 4) MULTIEQUAL (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4)]
[(stack, 0xfffffffffffffb80, 4) MULTIEQUAL (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4)]
[(stack, 0xfffffffffffffb7c, 4) MULTIEQUAL (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb60, 8) MULTIEQUAL (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb20, 8) MULTIEQUAL (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae0, 8) MULTIEQUAL (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x267d4d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x10000bd2, 8) , (const, 0x0, 8), (unique, 0x10000bd2, 8) INT_AND (unique, 0x10002b66, 8) , (const, 0x4, 8), (unique, 0x10002b66, 8) CAST (stack, 0xfffffffffffffb00, 8), (stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10002b6e, 8) , (const, 0x2684e5, 8), (unique, 0x10002b6e, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x685, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x685, 4)]
[(stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x685, 4), (stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x684, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x685, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x684, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x685, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x684, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x685, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x684, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x685, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x684, 4)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x685, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x684, 4)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x685, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x684, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x685, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x684, 4)]
[(stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x685, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x684, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x685, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x684, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x685, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x684, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x685, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x684, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x685, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x684, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x685, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x684, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x685, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x684, 4)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x685, 4), (stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x684, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x685, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x684, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x685, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x684, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x685, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x684, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x685, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x684, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x685, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x684, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x685, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x684, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x685, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x684, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x685, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x684, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x685, 4), (stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x684, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x685, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x684, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x685, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x684, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x685, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x684, 4)]
[ ---  CALL (ram, 0x1426d0, 8) , (unique, 0x3400, 8) , (register, 0x30, 8) , (const, 0x8, 8) , (unique, 0x10000e90, 8), (unique, 0x10000e90, 8) PTRSUB (const, 0x0, 8) , (const, 0x201c00, 8), (unique, 0x3400, 8) PTRADD (unique, 0xbd80, 8) , (stack, 0xfffffffffffffb10, 8) , (const, 0x8, 8), (register, 0x30, 8) INT_SUB (register, 0x30, 8) , (stack, 0xfffffffffffffb10, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0x18, 8) , (const, 0x8, 8), (register, 0x30, 8) INT_ADD (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x100013e8, 8), (unique, 0x100013e8, 8) PTRSUB (register, 0x18, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0x18, 8) , (const, 0x10, 8)]
[(stack, 0xfffffffffffffb44, 4) COPY (const, 0x0, 4)]
[ ---  BRANCH (ram, 0x267d4d, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb98, 8) MULTIEQUAL (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8)]
[(stack, 0xfffffffffffffb94, 4) MULTIEQUAL (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4)]
[(stack, 0xfffffffffffffb90, 4) MULTIEQUAL (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4)]
[(stack, 0xfffffffffffffb8c, 4) MULTIEQUAL (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4)]
[(stack, 0xfffffffffffffb88, 4) MULTIEQUAL (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4)]
[(stack, 0xfffffffffffffb84, 4) MULTIEQUAL (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4)]
[(stack, 0xfffffffffffffb80, 4) MULTIEQUAL (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4)]
[(stack, 0xfffffffffffffb7c, 4) MULTIEQUAL (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb60, 8) MULTIEQUAL (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb20, 8) MULTIEQUAL (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae0, 8) MULTIEQUAL (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(stack, 0xfffffffffffffb44, 4) COPY (register, 0x0, 4), (register, 0x0, 4) MULTIEQUAL (register, 0x0, 4) , (register, 0x0, 4) , (register, 0x0, 4) , (register, 0x0, 4) , (register, 0x0, 4) , (register, 0x0, 4) , (register, 0x0, 4) , (register, 0x0, 4)]
[(unique, 0x10001bf7, 8) COPY (register, 0x20, 8), (register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8)]
[ ---  BRANCH (ram, 0x267d4d, 1)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0x18, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x267d2c, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (register, 0x0, 8) , (const, 0x1ffffffffffffffe, 8), (register, 0x0, 8) INT_ADD (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10001048, 8), (unique, 0x10001048, 8) PTRSUB (register, 0x18, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0x18, 8) , (const, 0x10, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10002b76, 8) , (const, 0x267bbe, 8), (unique, 0x10002b76, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x783, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x783, 4)]
[(stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x783, 4), (stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x782, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x783, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x782, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x783, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x782, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x783, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x782, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x783, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x782, 4)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x783, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x782, 4)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x783, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x782, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x783, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x782, 4)]
[(stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x783, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x782, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x783, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x782, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x783, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x782, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x783, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x782, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x783, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x782, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x783, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x782, 4)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x783, 4), (stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x782, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x783, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x782, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x783, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x782, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x783, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x782, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x783, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x782, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x783, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x782, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x783, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x782, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x783, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x782, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x783, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x782, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x783, 4), (stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x782, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x783, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x782, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x783, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x782, 4)]
[(stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0x783, 4), (stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0x782, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x783, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x782, 4)]
[(unique, 0x10001a73, 8) COPY (stack, 0xfffffffffffffb30, 8), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x783, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x782, 4)]
[ ---  CBRANCH (ram, 0x267d28, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10002b7e, 8), (unique, 0x10002b7e, 8) CALL (ram, 0x121020, 8) , (unique, 0xbd80, 8) , (unique, 0x3580, 8), (unique, 0x3580, 8) INT_ADD (unique, 0x3480, 8) , (const, 0x10, 8), (unique, 0x3480, 8) INT_MULT (register, 0x0, 8) , (const, 0x8, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x79c, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (register, 0x0, 8), (unique, 0x3100, 8) PTRSUB (register, 0x18, 8) , (const, 0x8, 8)]
[(unique, 0x3400, 8) CAST (unique, 0x10002b86, 8), (unique, 0x10002b86, 8) PTRADD (register, 0x0, 8) , (register, 0x0, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x268af2, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x10000491, 4) , (const, 0x0, 4), (unique, 0x10000491, 4) INT_AND (register, 0xa0, 4) , (const, 0x2, 4)]
[ ---  CBRANCH (ram, 0x268ce7, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x58e00, 4) , (const, 0x0, 4), (unique, 0x58e00, 4) INT_AND (register, 0xa0, 4) , (const, 0x200, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10002b8e, 8) , (const, 0x268cf8, 8), (unique, 0x10002b8e, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x88c, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x88c, 4)]
[(stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x88c, 4), (stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x88a, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x88c, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x88a, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x88c, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x88a, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x88c, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x88a, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x88c, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x88a, 4)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x88c, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x88a, 4)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x88c, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x88a, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x88c, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x88a, 4)]
[(stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x88c, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x88a, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x88c, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x88a, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x88c, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x88a, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x88c, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x88a, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x88c, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x88a, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x88c, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x88a, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x88c, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x88a, 4)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x88c, 4), (stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x88a, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x88c, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x88a, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x88c, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x88a, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x88c, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x88a, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x88c, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x88a, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x88c, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x88a, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x88c, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x88a, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x88c, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x88a, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x88c, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x88a, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x88c, 4), (stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x88a, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x88c, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x88a, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x88c, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x88a, 4)]
[(stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0x88c, 4), (stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0x88a, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x88c, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x88a, 4)]
[(register, 0x0, 4) CALLIND (unique, 0xbd80, 8) , (unique, 0x10002b96, 8) , (unique, 0x3200, 8), (unique, 0x10002b96, 8) CAST (unique, 0x10001a73, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0x18, 8) , (const, 0x40, 8), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffba8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10002b9e, 8) , (const, 0x268b17, 8), (unique, 0x10002b9e, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x810, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x810, 4)]
[(stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x810, 4), (stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x80f, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x810, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x80f, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x810, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x80f, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x810, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x80f, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x810, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x80f, 4)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x810, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x80f, 4)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x810, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x80f, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x810, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x80f, 4)]
[(stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x810, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x80f, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x810, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x80f, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x810, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x80f, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x810, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x80f, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x810, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x80f, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x810, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x80f, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x810, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x80f, 4)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x810, 4), (stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x80f, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x810, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x80f, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x810, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x80f, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x810, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x80f, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x810, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x80f, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x810, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x80f, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x810, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x80f, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x810, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x80f, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x810, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x80f, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x810, 4), (stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x80f, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x810, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x80f, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x810, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x80f, 4)]
[(stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0x810, 4), (stack, 0xfffffffffffffbc0, 4) INDIRECT (stack, 0xfffffffffffffbc0, 4) , (const, 0x80f, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x810, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x80f, 4)]
[(register, 0x0, 4) CALL (ram, 0x20f760, 8) , (const, 0x1, 4) , (unique, 0x10002ba6, 8) , (unique, 0x3200, 8), (unique, 0x10002ba6, 8) CAST (unique, 0x10001a73, 8), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffba8, 8)]
[(unique, 0x10000db5, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x10000dbd, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(unique, 0x10000dc5, 8) MULTIEQUAL (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8)]
[(unique, 0x10000dcd, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(unique, 0x10000dd5, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(unique, 0x10000ddd, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(unique, 0x10000de5, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(unique, 0x10000ded, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(unique, 0x10000df5, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(unique, 0x10000dfd, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(unique, 0x10000e05, 8) MULTIEQUAL (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8)]
[(unique, 0x10000e0d, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(unique, 0x10000e15, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(unique, 0x10000e1d, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(unique, 0x10000e25, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(unique, 0x10000e29, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(unique, 0x10000e2d, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(unique, 0x10000e35, 8) MULTIEQUAL (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8)]
[(unique, 0x10000e3d, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(unique, 0x10000e41, 4) MULTIEQUAL (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4)]
[(unique, 0x10000e45, 4) MULTIEQUAL (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4)]
[(unique, 0x10000e49, 4) MULTIEQUAL (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4)]
[(unique, 0x10000e4d, 4) MULTIEQUAL (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4)]
[(unique, 0x10000e51, 4) MULTIEQUAL (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4)]
[(unique, 0x10000e55, 4) MULTIEQUAL (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4)]
[(unique, 0x10000e59, 4) MULTIEQUAL (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4)]
[(unique, 0x10000e5d, 8) MULTIEQUAL (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8)]
[(unique, 0x10000e65, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(unique, 0x10000e6d, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(unique, 0x10000e75, 4) MULTIEQUAL (stack, 0xfffffffffffffbc0, 4) , (stack, 0xfffffffffffffbc0, 4)]
[(unique, 0x10000e79, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CBRANCH (ram, 0x268b1f, 1) , (unique, 0x10000db4, 1), (unique, 0x10000db4, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) MULTIEQUAL (register, 0x0, 4) , (register, 0x0, 4)]
[(unique, 0x3400, 8) CAST (unique, 0x10002bae, 8), (unique, 0x10002bae, 8) PTRADD (unique, 0xbd80, 8) , (register, 0x0, 8) , (const, 0x8, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0x18, 8) , (const, 0x8, 8)]
[ ---  BRANCH (ram, 0x267be0, 1)]
[(unique, 0x3400, 8) CAST (unique, 0x10002bb6, 8), (unique, 0x10002bb6, 8) PTRADD (unique, 0xbd80, 8) , (register, 0x0, 8) , (const, 0x8, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0x18, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x267be0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x4000, 4), (register, 0x0, 4) INT_AND (unique, 0x10000e75, 4) , (const, 0xf000, 4)]
[(register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10002bc6, 8) , (const, 0x268d31, 8), (unique, 0x10002bc6, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (unique, 0x10000db5, 8) , (const, 0x851, 4)]
[(stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x851, 4), (stack, 0xfffffffffffffae0, 8) INDIRECT (unique, 0x10000dc5, 8) , (const, 0x850, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x851, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (unique, 0x10000dcd, 8) , (const, 0x850, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x851, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (unique, 0x10000dd5, 8) , (const, 0x850, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x851, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (unique, 0x10000ddd, 8) , (const, 0x850, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x851, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (unique, 0x10000de5, 8) , (const, 0x850, 4)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x851, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (unique, 0x10000ded, 8) , (const, 0x850, 4)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x851, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (unique, 0x10000df5, 8) , (const, 0x850, 4)]
[(stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x851, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (unique, 0x10000e05, 8) , (const, 0x850, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x851, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (unique, 0x10000e0d, 8) , (const, 0x850, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x851, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (unique, 0x10000e1d, 8) , (const, 0x850, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x851, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (unique, 0x10000e25, 4) , (const, 0x850, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x851, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (unique, 0x10000e29, 4) , (const, 0x850, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x851, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (unique, 0x10000e2d, 8) , (const, 0x850, 4)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x851, 4), (stack, 0xfffffffffffffb60, 8) INDIRECT (unique, 0x10000e35, 8) , (const, 0x850, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x851, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (unique, 0x10000e3d, 4) , (const, 0x850, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x851, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (unique, 0x10000e41, 4) , (const, 0x850, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x851, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (unique, 0x10000e45, 4) , (const, 0x850, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x851, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (unique, 0x10000e49, 4) , (const, 0x850, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x851, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (unique, 0x10000e4d, 4) , (const, 0x850, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x851, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (unique, 0x10000e51, 4) , (const, 0x850, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x851, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (unique, 0x10000e55, 4) , (const, 0x850, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x851, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (unique, 0x10000e59, 4) , (const, 0x850, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x851, 4), (stack, 0xfffffffffffffb98, 8) INDIRECT (unique, 0x10000e5d, 8) , (const, 0x850, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x851, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (unique, 0x10000e65, 8) , (const, 0x850, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x851, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (unique, 0x10000e6d, 8) , (const, 0x850, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x851, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (unique, 0x10000e79, 8) , (const, 0x850, 4)]
[(unique, 0x10001ad3, 8) COPY (stack, 0xfffffffffffffb30, 8), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x851, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (unique, 0x10000e15, 8) , (const, 0x850, 4)]
[(unique, 0x10001a33, 8) COPY (stack, 0xfffffffffffffb18, 8), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x851, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (unique, 0x10000dfd, 8) , (const, 0x850, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x85c, 4), (ram, 0x4eae68, 8) INDIRECT (unique, 0x10000dbd, 8) , (const, 0x851, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0xb8, 8) , (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10002bce, 8), (unique, 0x10002bce, 8) CALL (ram, 0x1212c0, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) INT_ADD (unique, 0x10002bbe, 8) , (const, 0x2, 8), (unique, 0x10002bbe, 8) CAST (unique, 0x100015b0, 8), (unique, 0x100015b0, 8) PTRSUB (unique, 0x10000dfd, 8) , (const, 0x0, 8), (register, 0xb8, 8) PTRADD (unique, 0xbd80, 8) , (register, 0x0, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x267d2c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10002bce, 8), (unique, 0x10002bce, 8) CALL (ram, 0x1212c0, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) INT_ADD (unique, 0x10002bbe, 8) , (const, 0x2, 8), (unique, 0x10002bbe, 8) CAST (unique, 0x100015b0, 8), (unique, 0x100015b0, 8) PTRSUB (unique, 0x10000dfd, 8) , (const, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10002bd6, 8) , (const, 0x268d53, 8), (unique, 0x10002bd6, 8) CAST (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x867, 4)]
[(stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x867, 4), (stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x866, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x867, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x866, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x867, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x866, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x867, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x866, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x867, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x866, 4)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x867, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x866, 4)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x867, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x866, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x867, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x866, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x867, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x866, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x867, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x866, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x867, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x866, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x867, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x866, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x867, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x866, 4)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x867, 4), (stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x866, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x867, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x866, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x867, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x866, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x867, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x866, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x867, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x866, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x867, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x866, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x867, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x866, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x867, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x866, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x867, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x866, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x867, 4), (stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x866, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x867, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x866, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x867, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x866, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x867, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x866, 4)]
[(unique, 0x10001adb, 8) COPY (stack, 0xfffffffffffffb30, 8), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x867, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x866, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x86e, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x867, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x0, 8) , (const, 0x2f, 2), (register, 0x0, 8) CAST (unique, 0x10002be6, 8), (unique, 0x10002be6, 8) CALL (ram, 0x121230, 8) , (register, 0x0, 8) , (unique, 0x10001ad3, 8) , (unique, 0x10002bde, 8), (unique, 0x10002bde, 8) CAST (unique, 0x10001a33, 8)]
[ ---  CBRANCH (ram, 0x267c1b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xfffffffffffffb20, 4) , (const, 0x0, 4), (stack, 0xfffffffffffffb20, 4) SUBPIECE (stack, 0xfffffffffffffb20, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x867, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x866, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10002bee, 8) , (const, 0x268d77, 8), (unique, 0x10002bee, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x87e, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x87e, 4)]
[(stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x87e, 4), (stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x87d, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x87e, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x87d, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x87e, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x87d, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x87e, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x87d, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x87e, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x87d, 4)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x87e, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x87d, 4)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x87e, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x87d, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x87e, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x87d, 4)]
[(stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x87e, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x87d, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x87e, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x87d, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x87e, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x87d, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x87e, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x87d, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x87e, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x87d, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x87e, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x87d, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x87e, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x87d, 4)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x87e, 4), (stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x87d, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x87e, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x87d, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x87e, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x87d, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x87e, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x87d, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x87e, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x87d, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x87e, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x87d, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x87e, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x87d, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x87e, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x87d, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x87e, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x87d, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x87e, 4), (stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x87d, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x87e, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x87d, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x87e, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x87d, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x87e, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x87d, 4)]
[ ---  CALL (ram, 0x1212c8, 8) , (unique, 0x10001adb, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0x18, 8) , (const, 0x8, 8)]
[ ---  BRANCH (ram, 0x267c1b, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (unique, 0x10000e79, 8) , (unique, 0x10000e79, 8)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (unique, 0x10000e6d, 8) , (unique, 0x10000e6d, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (unique, 0x10000e65, 8) , (unique, 0x10000e65, 8)]
[(stack, 0xfffffffffffffb98, 8) MULTIEQUAL (stack, 0xfffffffffffffb98, 8) , (unique, 0x10000e5d, 8) , (unique, 0x10000e5d, 8)]
[(stack, 0xfffffffffffffb94, 4) MULTIEQUAL (stack, 0xfffffffffffffb94, 4) , (unique, 0x10000e59, 4) , (unique, 0x10000e59, 4)]
[(stack, 0xfffffffffffffb90, 4) MULTIEQUAL (stack, 0xfffffffffffffb90, 4) , (unique, 0x10000e55, 4) , (unique, 0x10000e55, 4)]
[(stack, 0xfffffffffffffb8c, 4) MULTIEQUAL (stack, 0xfffffffffffffb8c, 4) , (unique, 0x10000e51, 4) , (unique, 0x10000e51, 4)]
[(stack, 0xfffffffffffffb88, 4) MULTIEQUAL (stack, 0xfffffffffffffb88, 4) , (unique, 0x10000e4d, 4) , (unique, 0x10000e4d, 4)]
[(stack, 0xfffffffffffffb84, 4) MULTIEQUAL (stack, 0xfffffffffffffb84, 4) , (unique, 0x10000e49, 4) , (unique, 0x10000e49, 4)]
[(stack, 0xfffffffffffffb80, 4) MULTIEQUAL (stack, 0xfffffffffffffb80, 4) , (unique, 0x10000e45, 4) , (unique, 0x10000e45, 4)]
[(stack, 0xfffffffffffffb7c, 4) MULTIEQUAL (stack, 0xfffffffffffffb7c, 4) , (unique, 0x10000e41, 4) , (unique, 0x10000e41, 4)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (unique, 0x10000e3d, 4) , (unique, 0x10000e3d, 4)]
[(stack, 0xfffffffffffffb60, 8) MULTIEQUAL (stack, 0xfffffffffffffb60, 8) , (unique, 0x10000e35, 8) , (unique, 0x10000e35, 8)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (unique, 0x10000e2d, 8) , (unique, 0x10000e2d, 8)]
[(stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (unique, 0x10000e29, 4) , (unique, 0x10000e29, 4)]
[(stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (unique, 0x10000e25, 4) , (unique, 0x10000e25, 4)]
[(stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (unique, 0x10000e1d, 8) , (unique, 0x10000e1d, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (unique, 0x10000e0d, 8) , (unique, 0x10000e0d, 8)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (unique, 0x10000dfd, 8) , (unique, 0x10000dfd, 8)]
[(stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (unique, 0x10000df5, 8) , (unique, 0x10000df5, 8)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (unique, 0x10000ded, 8) , (unique, 0x10000ded, 8)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (unique, 0x10000de5, 8) , (unique, 0x10000de5, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (unique, 0x10000ddd, 8) , (unique, 0x10000ddd, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (unique, 0x10000dd5, 8) , (unique, 0x10000dd5, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (unique, 0x10000dcd, 8) , (unique, 0x10000dcd, 8)]
[(stack, 0xfffffffffffffae0, 8) MULTIEQUAL (stack, 0xfffffffffffffae0, 8) , (unique, 0x10000dc5, 8) , (unique, 0x10000dc5, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (unique, 0x10000dbd, 8) , (unique, 0x10000dbd, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (unique, 0x10000db5, 8) , (unique, 0x10000db5, 8)]
[(register, 0xb0, 8) MULTIEQUAL (register, 0x0, 8) , (unique, 0xbd80, 8) , (unique, 0xbd80, 8)]
[(register, 0x10, 8) MULTIEQUAL (unique, 0x3400, 8) , (unique, 0x3400, 8) , (unique, 0x3400, 8)]
[(unique, 0x10001a7b, 8) COPY (stack, 0xfffffffffffffb30, 8), (stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (unique, 0x10000e15, 8) , (unique, 0x10000e15, 8)]
[ ---  CBRANCH (ram, 0x268eda, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xfffffffffffffb20, 4) , (const, 0x0, 4), (stack, 0xfffffffffffffb20, 4) SUBPIECE (stack, 0xfffffffffffffb20, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffb20, 8) MULTIEQUAL (stack, 0xfffffffffffffb20, 8) , (unique, 0x10000e05, 8) , (unique, 0x10000e05, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x7fb, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100018b3, 8) , (unique, 0x10002bf6, 8), (unique, 0x10002bf6, 8) CAST (stack, 0xfffffffffffffb30, 8), (unique, 0x100018b3, 8) PTRSUB (register, 0x10, 8) , (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x267c1b, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10002bfe, 8) , (const, 0x267c01, 8), (unique, 0x10002bfe, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x7b9, 4)]
[(stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x7b9, 4), (stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x7b8, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x7b9, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x7b8, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x7b9, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x7b8, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x7b9, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x7b8, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x7b9, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x7b8, 4)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x7b9, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x7b8, 4)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x7b9, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x7b8, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x7b9, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x7b8, 4)]
[(stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x7b9, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x7b8, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x7b9, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x7b8, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x7b9, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x7b8, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x7b9, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x7b8, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x7b9, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x7b8, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x7b9, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x7b8, 4)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x7b9, 4), (stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x7b8, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x7b9, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x7b8, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x7b9, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x7b8, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x7b9, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x7b8, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x7b9, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x7b8, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x7b9, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x7b8, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x7b9, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x7b8, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x7b9, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x7b8, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x7b9, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x7b8, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x7b9, 4), (stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x7b8, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x7b9, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x7b8, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x7b9, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x7b8, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x7b9, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x7b8, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x7c1, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x7b9, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100018ab, 8) , (unique, 0x10002c16, 8), (unique, 0x10002c16, 8) CAST (register, 0x0, 8), (unique, 0x100018ab, 8) PTRSUB (stack, 0xfffffffffffffb38, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10002c0e, 8), (unique, 0x10002c0e, 8) CALL (ram, 0x19d9a0, 8) , (unique, 0x10002c06, 8), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x7b9, 4), (unique, 0x10002c06, 8) CAST (unique, 0x10001a7b, 8), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x7b8, 4), (stack, 0xfffffffffffffb38, 8) COPY (register, 0x10, 8)]
[ ---  CBRANCH (ram, 0x267d2c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbe00, 8) , (const, 0x0, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) PTRADD (unique, 0xbd80, 8) , (register, 0x0, 8) , (const, 0x8, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0x18, 8) , (const, 0x8, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb98, 8) MULTIEQUAL (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8)]
[(stack, 0xfffffffffffffb94, 4) MULTIEQUAL (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4)]
[(stack, 0xfffffffffffffb90, 4) MULTIEQUAL (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4)]
[(stack, 0xfffffffffffffb8c, 4) MULTIEQUAL (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4)]
[(stack, 0xfffffffffffffb88, 4) MULTIEQUAL (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4)]
[(stack, 0xfffffffffffffb84, 4) MULTIEQUAL (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4)]
[(stack, 0xfffffffffffffb80, 4) MULTIEQUAL (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4)]
[(stack, 0xfffffffffffffb7c, 4) MULTIEQUAL (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb60, 8) MULTIEQUAL (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb20, 8) MULTIEQUAL (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae0, 8) MULTIEQUAL (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3a00, 8) , (const, 0x0, 8), (unique, 0x3a00, 8) PTRADD (register, 0xb0, 8) , (unique, 0x10001090, 8) , (const, 0x8, 8), (unique, 0x10001090, 8) INT_ADD (register, 0x0, 8) , (const, 0x1, 8), (register, 0xb0, 8) MULTIEQUAL (unique, 0xbd80, 8) , (register, 0xb0, 8) , (unique, 0xbd80, 8) , (unique, 0xbd80, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100010a8, 8) , (unique, 0xbe00, 8), (unique, 0x100010a8, 8) PTRSUB (register, 0x18, 8) , (const, 0x0, 8), (unique, 0xbe00, 8) INT_ADD (unique, 0xbe00, 8) , (const, 0x1, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x100010a0, 8), (unique, 0x100010a0, 8) PTRSUB (register, 0x18, 8) , (const, 0x0, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x7e9, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x7dd, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x7d6, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (register, 0xa0, 4), (unique, 0x3100, 8) PTRSUB (register, 0x18, 8) , (const, 0x18, 8)]
[ ---  BRANCH (ram, 0x267926, 1)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0x18, 8) , (const, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10002c1e, 8) , (const, 0x267d34, 8), (unique, 0x10002c1e, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x7ee, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x7ee, 4), (stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x7ed, 4), (stack, 0xfffffffffffffae0, 8) MULTIEQUAL (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x7ee, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x7ed, 4), (stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x7ee, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x7ed, 4), (stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x7ee, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x7ed, 4), (stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x7ee, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x7ed, 4), (stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x7ee, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x7ed, 4), (stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x7ee, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x7ed, 4), (stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x7ee, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x7ed, 4), (stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x7ee, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x7ed, 4), (stack, 0xfffffffffffffb20, 8) MULTIEQUAL (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x7ee, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x7ed, 4), (stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x7ee, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x7ed, 4), (stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x7ee, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x7ed, 4), (stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x7ee, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x7ed, 4), (stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x7ee, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x7ed, 4), (stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x7ee, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x7ed, 4), (stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x7ee, 4), (stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x7ed, 4), (stack, 0xfffffffffffffb60, 8) MULTIEQUAL (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x7ee, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x7ed, 4), (stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x7ee, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x7ed, 4), (stack, 0xfffffffffffffb7c, 4) MULTIEQUAL (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x7ee, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x7ed, 4), (stack, 0xfffffffffffffb80, 4) MULTIEQUAL (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x7ee, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x7ed, 4), (stack, 0xfffffffffffffb84, 4) MULTIEQUAL (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x7ee, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x7ed, 4), (stack, 0xfffffffffffffb88, 4) MULTIEQUAL (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x7ee, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x7ed, 4), (stack, 0xfffffffffffffb8c, 4) MULTIEQUAL (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x7ee, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x7ed, 4), (stack, 0xfffffffffffffb90, 4) MULTIEQUAL (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x7ee, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x7ed, 4), (stack, 0xfffffffffffffb94, 4) MULTIEQUAL (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x7ee, 4), (stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x7ed, 4), (stack, 0xfffffffffffffb98, 8) MULTIEQUAL (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x7ee, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x7ed, 4), (stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x7ee, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x7ed, 4), (stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x7ee, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x7ed, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CALL (ram, 0x1212c8, 8) , (register, 0xb0, 8), (register, 0xb0, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8) , (unique, 0xbd80, 8) , (unique, 0xbd80, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (const, 0x0, 8), (unique, 0x3100, 8) PTRSUB (register, 0x18, 8) , (const, 0x8, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x7f3, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x7f1, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x7ee, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001120, 8) , (const, 0x0, 8), (unique, 0x10001120, 8) PTRSUB (register, 0x18, 8) , (const, 0x0, 8)]
[(stack, 0xfffffffffffffb44, 4) COPY (const, 0x1, 4)]
[(unique, 0x10001c07, 8) COPY (register, 0x20, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb98, 8) MULTIEQUAL (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8)]
[(stack, 0xfffffffffffffb94, 4) MULTIEQUAL (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4)]
[(stack, 0xfffffffffffffb90, 4) MULTIEQUAL (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4)]
[(stack, 0xfffffffffffffb8c, 4) MULTIEQUAL (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4)]
[(stack, 0xfffffffffffffb88, 4) MULTIEQUAL (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4)]
[(stack, 0xfffffffffffffb84, 4) MULTIEQUAL (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4)]
[(stack, 0xfffffffffffffb80, 4) MULTIEQUAL (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4)]
[(stack, 0xfffffffffffffb7c, 4) MULTIEQUAL (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb60, 8) MULTIEQUAL (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae0, 8) MULTIEQUAL (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x20, 8) MULTIEQUAL (unique, 0x10001bc7, 8) , (unique, 0x10001e12, 8) , (unique, 0x10001e12, 8) , (unique, 0x10001bdf, 8) , (unique, 0x10001be7, 8) , (unique, 0x10001bef, 8) , (unique, 0x10001bf7, 8) , (unique, 0x10001e0a, 8) , (unique, 0x10001c07, 8) , (unique, 0x10001c0f, 8) , (unique, 0x10001e1a, 8) , (register, 0x20, 8) , (register, 0x20, 8)]
[(unique, 0x10001a8b, 8) COPY (stack, 0xfffffffffffffb30, 8), (stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[ ---  CBRANCH (ram, 0x267926, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xfffffffffffffb20, 4) , (const, 0x0, 4), (stack, 0xfffffffffffffb20, 4) SUBPIECE (stack, 0xfffffffffffffb20, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffb20, 8) MULTIEQUAL (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10002c26, 8) , (const, 0x267d67, 8), (unique, 0x10002c26, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x50d, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x50d, 4)]
[(stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x50d, 4), (stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x50c, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x50d, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x50c, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x50d, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x50c, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x50d, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x50c, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x50d, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x50c, 4)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x50d, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x50c, 4)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x50d, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x50c, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x50d, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x50c, 4)]
[(stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x50d, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x50c, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x50d, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x50c, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x50d, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x50c, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x50d, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x50c, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x50d, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x50c, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x50d, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x50c, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x50d, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x50c, 4)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x50d, 4), (stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x50c, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x50d, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x50c, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x50d, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x50c, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x50d, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x50c, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x50d, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x50c, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x50d, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x50c, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x50d, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x50c, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x50d, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x50c, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x50d, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x50c, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x50d, 4), (stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x50c, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x50d, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x50c, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x50d, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x50c, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x50d, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x50c, 4)]
[ ---  CALL (ram, 0x1212c8, 8) , (unique, 0x10001a8b, 8)]
[ ---  BRANCH (ram, 0x267926, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb98, 8) MULTIEQUAL (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8)]
[(stack, 0xfffffffffffffb94, 4) MULTIEQUAL (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4)]
[(stack, 0xfffffffffffffb90, 4) MULTIEQUAL (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4)]
[(stack, 0xfffffffffffffb8c, 4) MULTIEQUAL (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4)]
[(stack, 0xfffffffffffffb88, 4) MULTIEQUAL (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4)]
[(stack, 0xfffffffffffffb84, 4) MULTIEQUAL (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4)]
[(stack, 0xfffffffffffffb80, 4) MULTIEQUAL (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4)]
[(stack, 0xfffffffffffffb7c, 4) MULTIEQUAL (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb60, 8) MULTIEQUAL (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb20, 8) MULTIEQUAL (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae0, 8) MULTIEQUAL (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x20, 8) MULTIEQUAL (unique, 0x10001e02, 8) , (unique, 0x10001c97, 8) , (unique, 0x10001c9f, 8) , (unique, 0x10001ca7, 8)]
[(stack, 0xfffffffffffffb44, 4) COPY (const, 0x1, 4)]
[(stack, 0xfffffffffffffbb0, 8) MULTIEQUAL (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8) , (stack, 0xfffffffffffffbb0, 8)]
[(stack, 0xfffffffffffffba8, 8) MULTIEQUAL (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8) , (stack, 0xfffffffffffffba8, 8)]
[(stack, 0xfffffffffffffb98, 8) MULTIEQUAL (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8) , (stack, 0xfffffffffffffb98, 8)]
[(stack, 0xfffffffffffffb94, 4) MULTIEQUAL (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4) , (stack, 0xfffffffffffffb94, 4)]
[(stack, 0xfffffffffffffb90, 4) MULTIEQUAL (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4) , (stack, 0xfffffffffffffb90, 4)]
[(stack, 0xfffffffffffffb8c, 4) MULTIEQUAL (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4) , (stack, 0xfffffffffffffb8c, 4)]
[(stack, 0xfffffffffffffb88, 4) MULTIEQUAL (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4) , (stack, 0xfffffffffffffb88, 4)]
[(stack, 0xfffffffffffffb84, 4) MULTIEQUAL (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4) , (stack, 0xfffffffffffffb84, 4)]
[(stack, 0xfffffffffffffb80, 4) MULTIEQUAL (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4) , (stack, 0xfffffffffffffb80, 4)]
[(stack, 0xfffffffffffffb7c, 4) MULTIEQUAL (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4) , (stack, 0xfffffffffffffb7c, 4)]
[(stack, 0xfffffffffffffb78, 4) MULTIEQUAL (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4) , (stack, 0xfffffffffffffb78, 4)]
[(stack, 0xfffffffffffffb60, 8) MULTIEQUAL (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8) , (stack, 0xfffffffffffffb60, 8)]
[(stack, 0xfffffffffffffb50, 8) MULTIEQUAL (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8) , (stack, 0xfffffffffffffb50, 8)]
[(stack, 0xfffffffffffffb44, 4) MULTIEQUAL (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4) , (stack, 0xfffffffffffffb44, 4)]
[(stack, 0xfffffffffffffb40, 4) MULTIEQUAL (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4) , (stack, 0xfffffffffffffb40, 4)]
[(stack, 0xfffffffffffffb38, 8) MULTIEQUAL (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8) , (stack, 0xfffffffffffffb38, 8)]
[(stack, 0xfffffffffffffb30, 8) MULTIEQUAL (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8) , (stack, 0xfffffffffffffb30, 8)]
[(stack, 0xfffffffffffffb28, 8) MULTIEQUAL (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8) , (stack, 0xfffffffffffffb28, 8)]
[(stack, 0xfffffffffffffb20, 8) MULTIEQUAL (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8) , (stack, 0xfffffffffffffb20, 8)]
[(stack, 0xfffffffffffffb18, 8) MULTIEQUAL (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8) , (stack, 0xfffffffffffffb18, 8)]
[(stack, 0xfffffffffffffb10, 8) MULTIEQUAL (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8) , (stack, 0xfffffffffffffb10, 8)]
[(stack, 0xfffffffffffffb08, 8) MULTIEQUAL (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8) , (stack, 0xfffffffffffffb08, 8)]
[(stack, 0xfffffffffffffb00, 8) MULTIEQUAL (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8) , (stack, 0xfffffffffffffb00, 8)]
[(stack, 0xfffffffffffffaf8, 8) MULTIEQUAL (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8) , (stack, 0xfffffffffffffaf8, 8)]
[(stack, 0xfffffffffffffaf0, 8) MULTIEQUAL (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8) , (stack, 0xfffffffffffffaf0, 8)]
[(stack, 0xfffffffffffffae8, 8) MULTIEQUAL (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8) , (stack, 0xfffffffffffffae8, 8)]
[(stack, 0xfffffffffffffae0, 8) MULTIEQUAL (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8) , (stack, 0xfffffffffffffae0, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x269232, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffffc0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10002c2e, 8), (unique, 0x10002c2e, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(ram, 0x4eae68, 8) COPY (ram, 0x4eae68, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 4), (register, 0x0, 4) CAST (unique, 0x10002c36, 4), (unique, 0x10002c36, 4) COPY (stack, 0xfffffffffffffb44, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10002c3a, 8) , (const, 0x269237, 8), (unique, 0x10002c3a, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x345, 4), (stack, 0xfffffffffffffae0, 8) INDIRECT (stack, 0xfffffffffffffae0, 8) , (const, 0x344, 4)]
[(stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x345, 4), (stack, 0xfffffffffffffae8, 8) INDIRECT (stack, 0xfffffffffffffae8, 8) , (const, 0x344, 4)]
[(stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x345, 4), (stack, 0xfffffffffffffaf0, 8) INDIRECT (stack, 0xfffffffffffffaf0, 8) , (const, 0x344, 4)]
[(stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x345, 4), (stack, 0xfffffffffffffaf8, 8) INDIRECT (stack, 0xfffffffffffffaf8, 8) , (const, 0x344, 4)]
[(stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x345, 4), (stack, 0xfffffffffffffb00, 8) INDIRECT (stack, 0xfffffffffffffb00, 8) , (const, 0x344, 4)]
[(stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x345, 4), (stack, 0xfffffffffffffb08, 8) INDIRECT (stack, 0xfffffffffffffb08, 8) , (const, 0x344, 4)]
[(stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x345, 4), (stack, 0xfffffffffffffb10, 8) INDIRECT (stack, 0xfffffffffffffb10, 8) , (const, 0x344, 4)]
[(stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x345, 4), (stack, 0xfffffffffffffb18, 8) INDIRECT (stack, 0xfffffffffffffb18, 8) , (const, 0x344, 4)]
[(stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x345, 4), (stack, 0xfffffffffffffb20, 8) INDIRECT (stack, 0xfffffffffffffb20, 8) , (const, 0x344, 4)]
[(stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x345, 4), (stack, 0xfffffffffffffb28, 8) INDIRECT (stack, 0xfffffffffffffb28, 8) , (const, 0x344, 4)]
[(stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x345, 4), (stack, 0xfffffffffffffb30, 8) INDIRECT (stack, 0xfffffffffffffb30, 8) , (const, 0x344, 4)]
[(stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x345, 4), (stack, 0xfffffffffffffb38, 8) INDIRECT (stack, 0xfffffffffffffb38, 8) , (const, 0x344, 4)]
[(stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x345, 4), (stack, 0xfffffffffffffb40, 4) INDIRECT (stack, 0xfffffffffffffb40, 4) , (const, 0x344, 4)]
[(stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x345, 4), (stack, 0xfffffffffffffb44, 4) INDIRECT (stack, 0xfffffffffffffb44, 4) , (const, 0x344, 4)]
[(stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x345, 4), (stack, 0xfffffffffffffb50, 8) INDIRECT (stack, 0xfffffffffffffb50, 8) , (const, 0x344, 4)]
[(stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x345, 4), (stack, 0xfffffffffffffb60, 8) INDIRECT (stack, 0xfffffffffffffb60, 8) , (const, 0x344, 4)]
[(stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x345, 4), (stack, 0xfffffffffffffb78, 4) INDIRECT (stack, 0xfffffffffffffb78, 4) , (const, 0x344, 4)]
[(stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x345, 4), (stack, 0xfffffffffffffb7c, 4) INDIRECT (stack, 0xfffffffffffffb7c, 4) , (const, 0x344, 4)]
[(stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x345, 4), (stack, 0xfffffffffffffb80, 4) INDIRECT (stack, 0xfffffffffffffb80, 4) , (const, 0x344, 4)]
[(stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x345, 4), (stack, 0xfffffffffffffb84, 4) INDIRECT (stack, 0xfffffffffffffb84, 4) , (const, 0x344, 4)]
[(stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x345, 4), (stack, 0xfffffffffffffb88, 4) INDIRECT (stack, 0xfffffffffffffb88, 4) , (const, 0x344, 4)]
[(stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x345, 4), (stack, 0xfffffffffffffb8c, 4) INDIRECT (stack, 0xfffffffffffffb8c, 4) , (const, 0x344, 4)]
[(stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x345, 4), (stack, 0xfffffffffffffb90, 4) INDIRECT (stack, 0xfffffffffffffb90, 4) , (const, 0x344, 4)]
[(stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x345, 4), (stack, 0xfffffffffffffb94, 4) INDIRECT (stack, 0xfffffffffffffb94, 4) , (const, 0x344, 4)]
[(stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x345, 4), (stack, 0xfffffffffffffb98, 8) INDIRECT (stack, 0xfffffffffffffb98, 8) , (const, 0x344, 4)]
[(stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x345, 4), (stack, 0xfffffffffffffba8, 8) INDIRECT (stack, 0xfffffffffffffba8, 8) , (const, 0x344, 4)]
[(stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x345, 4), (stack, 0xfffffffffffffbb0, 8) INDIRECT (stack, 0xfffffffffffffbb0, 8) , (const, 0x344, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x345, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x344, 4)]
[ ---  CALL (ram, 0x234c80, 8)]
[(ram, 0x4eae68, 8) COPY (ram, 0x4eae68, 8), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x345, 4)]
[ ---  RETURN (const, 0x1, 4)]
