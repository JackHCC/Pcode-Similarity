[(stack, 0xffffffffffffffc0, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10000a14, 8), (unique, 0x10000a14, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8)]
[(unique, 0x3100, 8) INT_ADD (register, 0x38, 8) , (const, 0x68, 8)]
[(stack, 0xffffffffffffff68, 8) COPY (const, 0x0, 8)]
[(unique, 0x3100, 8) PTRADD (register, 0x30, 8) , (const, 0x6, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x462098, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x1000046a, 4) , (const, 0x0, 4), (unique, 0x1000046a, 4) INT_AND (unique, 0xbc80, 4) , (const, 0x1, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000a0c, 8), (unique, 0x10000a0c, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x30, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x10000a1c, 8), (unique, 0x10000a1c, 8) INT_ADD (register, 0x38, 8) , (const, 0x90, 8)]
[ ---  CBRANCH (ram, 0x462098, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbe00, 8) , (const, 0x0, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000a24, 8), (unique, 0x10000a24, 8) INT_ADD (register, 0x38, 8) , (const, 0x68, 8)]
[(register, 0x0, 8) CAST (unique, 0x10000a44, 8), (unique, 0x10000a44, 8) INT_XOR (register, 0x0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10000a3c, 8), (unique, 0x10000a3c, 8) INT_ADD (register, 0x110, 8) , (const, 0x30, 8), (register, 0x0, 8) INT_OR (unique, 0x4ff00, 8) , (unique, 0x50000, 8), (unique, 0x50000, 8) INT_LEFT (unique, 0x10000a34, 8) , (const, 0x2f, 4), (unique, 0x10000a34, 8) CAST (unique, 0xbd80, 8), (unique, 0x4ff00, 8) INT_RIGHT (unique, 0x10000a2c, 8) , (const, 0x11, 4), (unique, 0x10000a2c, 8) CAST (unique, 0xbd80, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (unique, 0xbd80, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x46286f, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0x8, 4) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x462e10, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x80, 8) , (const, 0x0, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x141f, 4)]
[ ---  CALL (ram, 0x403170, 8) , (unique, 0x100005ed, 8) , (unique, 0x100005cd, 8) , (const, 0x1a4, 4) , (unique, 0x1000065d, 8), (unique, 0x1000065d, 8) COPY (const, 0x49f740, 8), (unique, 0x100005ed, 8) COPY (const, 0x49f46e, 8), (unique, 0x100005cd, 8) COPY (const, 0x49f45a, 8)]
[ ---  RETURN (const, 0x1, 4)]
[(register, 0xb8, 4) COPY (const, 0x0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000a4c, 8) , (const, 0x0, 8), (unique, 0x10000a4c, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRADD (register, 0x30, 8) , (const, 0x4, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x462337, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x58c00, 1) , (const, 0x0, 1), (unique, 0x58c00, 1) INT_AND (unique, 0xbb00, 1) , (const, 0x1, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x10000a54, 8), (unique, 0x10000a54, 8) CAST (unique, 0x3800, 8), (unique, 0x3800, 8) PTRADD (register, 0x30, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[ ---  CALL (ram, 0x45a730, 8) , (stack, 0xffffffffffffff68, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1411, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x13dd, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x1411, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x13dd, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x1411, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x13dd, 4)]
[(stack, 0xffffffffffffffba, 1) INDIRECT (stack, 0xffffffffffffffba, 1) , (const, 0x1411, 4), (stack, 0xffffffffffffffba, 1) INDIRECT (stack, 0xffffffffffffffba, 1) , (const, 0x13dd, 4)]
[(stack, 0xffffffffffffffbf, 1) INDIRECT (stack, 0xffffffffffffffbf, 1) , (const, 0x1411, 4), (stack, 0xffffffffffffffbf, 1) INDIRECT (stack, 0xffffffffffffffbf, 1) , (const, 0x13dd, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1411, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x13dd, 4)]
[(register, 0x0, 4) CALLIND (stack, 0xffffffffffffff68, 8) , (unique, 0x3100, 8) , (unique, 0x3100, 8) , (const, 0x0, 8) , (const, 0x0, 8) , (const, 0x0, 8) , (register, 0x88, 8) , (stack, 0x8, 4) , (stack, 0x10, 4)]
[ ---  BRANCH (ram, 0x462337, 1)]
[(unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffa8, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRADD (register, 0x30, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x10, 8)]
[(unique, 0x100008d4, 8) COPY (register, 0x80, 8)]
[ ---  CBRANCH (ram, 0x4620c9, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x80, 8) , (const, 0x0, 8)]
[(unique, 0x100008dc, 8) COPY (register, 0x30, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x100008d4, 8) , (unique, 0x100008dc, 8)]
[(stack, 0xffffffffffffffa8, 8) COPY (const, 0x0, 8)]
[(unique, 0x100008c4, 8) COPY (register, 0x0, 8), (register, 0x0, 8) COPY (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x4620e4, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x88, 8) , (const, 0x0, 8)]
[(unique, 0x100008cc, 8) COPY (unique, 0x3800, 8)]
[(register, 0x0, 8) MULTIEQUAL (unique, 0x100008c4, 8) , (unique, 0x100008cc, 8)]
[ ---  CBRANCH (ram, 0x4624d0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0x10, 4) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x4620f2, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) INT_AND (unique, 0xbc80, 4) , (const, 0x7, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRADD (register, 0x30, 8) , (const, 0x4, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x462eda, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x80, 8) , (const, 0x0, 8)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x13a9, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x13a9, 4)]
[ ---  CALL (ram, 0x403170, 8) , (unique, 0x100005f5, 8) , (unique, 0x100005e5, 8) , (const, 0x234, 4) , (unique, 0x10000675, 8), (unique, 0x10000675, 8) COPY (const, 0x49f740, 8), (unique, 0x100005f5, 8) COPY (const, 0x49f46e, 8), (unique, 0x100005e5, 8) COPY (const, 0x49f45a, 8)]
[ ---  RETURN (const, 0x1, 4)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x1, 8) , (const, 0x4, 8)]
[(register, 0x30, 8) INT_ZEXT (register, 0x30, 4), (register, 0x30, 4) INT_AND (unique, 0xbc80, 4) , (const, 0xff, 4)]
[(unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) PTRADD (unique, 0x1000062d, 8) , (unique, 0x100006fd, 8) , (const, 0x1, 8), (unique, 0x100006fd, 8) INT_ADD (register, 0x8, 8) , (const, 0x17, 8), (unique, 0x1000062d, 8) COPY (const, 0x49f4dc, 8), (register, 0x8, 8) INT_SEXT (register, 0x8, 4), (register, 0x8, 4) INT_SRIGHT (unique, 0x10000a5c, 4) , (const, 0x8, 4), (unique, 0x10000a5c, 4) CAST (unique, 0xbc80, 4)]
[(unique, 0x100008e4, 8) COPY (register, 0x8, 8), (register, 0x8, 8) INT_SEXT (register, 0x8, 4), (register, 0x8, 4) INT_SRIGHT (unique, 0x10000a5c, 4) , (const, 0x8, 4), (unique, 0x10000a5c, 4) CAST (unique, 0xbc80, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffbf, 1) MULTIEQUAL (stack, 0xffffffffffffffbf, 1) , (stack, 0xffffffffffffffbf, 1)]
[(stack, 0xffffffffffffffbe, 1) MULTIEQUAL (stack, 0xffffffffffffffbe, 1) , (stack, 0xffffffffffffffbe, 1)]
[(stack, 0xffffffffffffffbd, 1) MULTIEQUAL (stack, 0xffffffffffffffbd, 1) , (stack, 0xffffffffffffffbd, 1)]
[(stack, 0xffffffffffffffbc, 1) MULTIEQUAL (stack, 0xffffffffffffffbc, 1) , (stack, 0xffffffffffffffbc, 1)]
[(stack, 0xffffffffffffffbb, 1) MULTIEQUAL (stack, 0xffffffffffffffbb, 1) , (stack, 0xffffffffffffffbb, 1)]
[(stack, 0xffffffffffffffba, 1) MULTIEQUAL (unique, 0xbb00, 1) , (stack, 0xffffffffffffffba, 1)]
[(register, 0x38, 4) MULTIEQUAL (unique, 0xbc80, 4) , (register, 0x38, 4)]
[ ---  CBRANCH (ram, 0x462529, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (register, 0x8, 8) , (register, 0x30, 8), (register, 0x8, 8) INT_SUB (register, 0x8, 8) , (const, 0x1, 8), (register, 0x8, 8) MULTIEQUAL (unique, 0x100008e4, 8) , (unique, 0x100008ec, 8)]
[(stack, 0xffffffffffffffba, 1) INDIRECT (stack, 0xffffffffffffffba, 1) , (const, 0xc96, 4)]
[(stack, 0xffffffffffffffbb, 1) INDIRECT (stack, 0xffffffffffffffbb, 1) , (const, 0xc96, 4)]
[(stack, 0xffffffffffffffbc, 1) INDIRECT (stack, 0xffffffffffffffbc, 1) , (const, 0xc96, 4)]
[(stack, 0xffffffffffffffbd, 1) INDIRECT (stack, 0xffffffffffffffbd, 1) , (const, 0xc96, 4)]
[(stack, 0xffffffffffffffbe, 1) INDIRECT (stack, 0xffffffffffffffbe, 1) , (const, 0xc96, 4)]
[(stack, 0xffffffffffffffbf, 1) INDIRECT (stack, 0xffffffffffffffbf, 1) , (const, 0xc96, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xc96, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3a00, 8) , (register, 0x80, 1), (unique, 0x3a00, 8) PTRADD (unique, 0x10000715, 8) , (register, 0x8, 8) , (const, 0x1, 8), (unique, 0x10000715, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffb9, 8), (register, 0x80, 1) INT_OR (unique, 0x10000476, 1) , (const, 0x80, 1), (unique, 0x10000476, 1) INT_AND (unique, 0x100004b4, 1) , (const, 0x3f, 1), (unique, 0x100004b4, 1) SUBPIECE (register, 0x38, 4) , (const, 0x0, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffbf, 1) MULTIEQUAL (stack, 0xffffffffffffffbf, 1) , (stack, 0xffffffffffffffbf, 1)]
[(stack, 0xffffffffffffffbe, 1) MULTIEQUAL (stack, 0xffffffffffffffbe, 1) , (stack, 0xffffffffffffffbe, 1)]
[(stack, 0xffffffffffffffbd, 1) MULTIEQUAL (stack, 0xffffffffffffffbd, 1) , (stack, 0xffffffffffffffbd, 1)]
[(stack, 0xffffffffffffffbc, 1) MULTIEQUAL (stack, 0xffffffffffffffbc, 1) , (stack, 0xffffffffffffffbc, 1)]
[(stack, 0xffffffffffffffbb, 1) MULTIEQUAL (stack, 0xffffffffffffffbb, 1) , (stack, 0xffffffffffffffbb, 1)]
[(stack, 0xffffffffffffffba, 1) MULTIEQUAL (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1)]
[(register, 0x38, 4) INT_RIGHT (register, 0x38, 4) , (const, 0x6, 4)]
[(unique, 0x100008ec, 8) COPY (register, 0x8, 8)]
[ ---  CBRANCH (ram, 0x462510, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (const, 0x1, 8) , (register, 0x8, 8)]
[(register, 0x8, 1) INT_OR (stack, 0xffffffffffffffba, 1) , (unique, 0x10000479, 1), (unique, 0x10000479, 1) SUBPIECE (register, 0x38, 4) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x462931, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (unique, 0xbd80, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x1, 8) , (const, 0x4, 8)]
[(register, 0xb8, 4) COPY (const, 0x5, 4)]
[ ---  BRANCH (ram, 0x462337, 1)]
[(unique, 0x3100, 8) INT_ADD (register, 0x30, 8) , (const, 0x1, 8)]
[(stack, 0xffffffffffffffba, 1) INDIRECT (stack, 0xffffffffffffffba, 1) , (const, 0xcef, 4), (stack, 0xffffffffffffffba, 1) COPY (register, 0x8, 1)]
[(stack, 0xffffffffffffffbb, 1) INDIRECT (stack, 0xffffffffffffffbb, 1) , (const, 0xcef, 4)]
[(stack, 0xffffffffffffffbc, 1) INDIRECT (stack, 0xffffffffffffffbc, 1) , (const, 0xcef, 4)]
[(stack, 0xffffffffffffffbd, 1) INDIRECT (stack, 0xffffffffffffffbd, 1) , (const, 0xcef, 4)]
[(stack, 0xffffffffffffffbe, 1) INDIRECT (stack, 0xffffffffffffffbe, 1) , (const, 0xcef, 4)]
[(stack, 0xffffffffffffffbf, 1) INDIRECT (stack, 0xffffffffffffffbf, 1) , (const, 0xcef, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xcef, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3a00, 8) , (unique, 0xbb00, 1), (unique, 0x3a00, 8) PTRADD (unique, 0x1000073d, 8) , (unique, 0x10000735, 8) , (const, 0x1, 8), (unique, 0x1000073d, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffb9, 8), (unique, 0x10000735, 8) INT_ADD (register, 0x30, 8) , (const, 0x1, 8), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0xbd80, 8)]
[ ---  CBRANCH (ram, 0x462600, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (unique, 0x3100, 8) , (register, 0x8, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x462600, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (unique, 0x3100, 8) , (const, 0x6, 8)]
[(stack, 0xffffffffffffffba, 1) INDIRECT (stack, 0xffffffffffffffba, 1) , (const, 0xd13, 4)]
[(stack, 0xffffffffffffffbb, 1) INDIRECT (stack, 0xffffffffffffffbb, 1) , (const, 0xd13, 4)]
[(stack, 0xffffffffffffffbc, 1) INDIRECT (stack, 0xffffffffffffffbc, 1) , (const, 0xd13, 4)]
[(stack, 0xffffffffffffffbd, 1) INDIRECT (stack, 0xffffffffffffffbd, 1) , (const, 0xd13, 4)]
[(stack, 0xffffffffffffffbe, 1) INDIRECT (stack, 0xffffffffffffffbe, 1) , (const, 0xd13, 4)]
[(stack, 0xffffffffffffffbf, 1) INDIRECT (stack, 0xffffffffffffffbf, 1) , (const, 0xd13, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xd13, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3a00, 8) , (unique, 0xbb00, 1), (unique, 0x3a00, 8) PTRADD (unique, 0x1000075d, 8) , (unique, 0x10000755, 8) , (const, 0x1, 8), (unique, 0x1000075d, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffb9, 8), (unique, 0x10000755, 8) INT_ADD (register, 0x30, 8) , (const, 0x2, 8), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x462948, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (unique, 0x3100, 8) , (const, 0x6, 8), (unique, 0x3100, 8) INT_ADD (register, 0x30, 8) , (const, 0x2, 8)]
[ ---  CBRANCH (ram, 0x462948, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (unique, 0x3100, 8) , (register, 0x8, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x2, 8) , (const, 0x1, 8)]
[(stack, 0xffffffffffffffbc, 1) INDIRECT (stack, 0xffffffffffffffbc, 1) , (const, 0xd37, 4)]
[(stack, 0xffffffffffffffbd, 1) INDIRECT (stack, 0xffffffffffffffbd, 1) , (const, 0xd37, 4)]
[(stack, 0xffffffffffffffbe, 1) INDIRECT (stack, 0xffffffffffffffbe, 1) , (const, 0xd37, 4)]
[(stack, 0xffffffffffffffbf, 1) INDIRECT (stack, 0xffffffffffffffbf, 1) , (const, 0xd37, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xd37, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3a00, 8) , (unique, 0xbb00, 1), (unique, 0x3a00, 8) PTRADD (unique, 0x1000077d, 8) , (unique, 0x10000775, 8) , (const, 0x1, 8), (unique, 0x1000077d, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffb9, 8), (unique, 0x10000775, 8) INT_ADD (register, 0x30, 8) , (const, 0x3, 8), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x2, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x462600, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (unique, 0x3100, 8) , (const, 0x6, 8), (unique, 0x3100, 8) INT_ADD (register, 0x30, 8) , (const, 0x3, 8)]
[ ---  CBRANCH (ram, 0x462600, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (unique, 0x3100, 8) , (register, 0x8, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x3, 8) , (const, 0x1, 8)]
[(stack, 0xffffffffffffffbd, 1) INDIRECT (stack, 0xffffffffffffffbd, 1) , (const, 0xd5b, 4)]
[(stack, 0xffffffffffffffbe, 1) INDIRECT (stack, 0xffffffffffffffbe, 1) , (const, 0xd5b, 4)]
[(stack, 0xffffffffffffffbf, 1) INDIRECT (stack, 0xffffffffffffffbf, 1) , (const, 0xd5b, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xd5b, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3a00, 8) , (unique, 0xbb00, 1), (unique, 0x3a00, 8) PTRADD (unique, 0x1000079d, 8) , (unique, 0x10000795, 8) , (const, 0x1, 8), (unique, 0x1000079d, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffb9, 8), (unique, 0x10000795, 8) INT_ADD (register, 0x30, 8) , (const, 0x4, 8), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x3, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x462948, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (unique, 0x3100, 8) , (const, 0x6, 8), (unique, 0x3100, 8) INT_ADD (register, 0x30, 8) , (const, 0x4, 8)]
[ ---  CBRANCH (ram, 0x462948, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (unique, 0x3100, 8) , (register, 0x8, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x4, 8) , (const, 0x1, 8)]
[(stack, 0xffffffffffffffbe, 1) INDIRECT (stack, 0xffffffffffffffbe, 1) , (const, 0xd7f, 4)]
[(stack, 0xffffffffffffffbf, 1) INDIRECT (stack, 0xffffffffffffffbf, 1) , (const, 0xd7f, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xd7f, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3a00, 8) , (unique, 0xbb00, 1), (unique, 0x3a00, 8) PTRADD (unique, 0x100007bd, 8) , (unique, 0x100007b5, 8) , (const, 0x1, 8), (unique, 0x100007bd, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffb9, 8), (unique, 0x100007b5, 8) INT_ADD (register, 0x30, 8) , (const, 0x5, 8), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x4, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x462600, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (unique, 0x3100, 8) , (const, 0x6, 8), (unique, 0x3100, 8) INT_ADD (register, 0x30, 8) , (const, 0x5, 8)]
[ ---  CBRANCH (ram, 0x462600, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (unique, 0x3100, 8) , (register, 0x8, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x5, 8) , (const, 0x1, 8)]
[(stack, 0xffffffffffffffbf, 1) COPY (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x5, 8) , (const, 0x1, 8)]
[(register, 0x8, 8) COPY (const, 0x6, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffbf, 1) MULTIEQUAL (stack, 0xffffffffffffffbf, 1) , (stack, 0xffffffffffffffbf, 1) , (stack, 0xffffffffffffffbf, 1) , (stack, 0xffffffffffffffbf, 1) , (stack, 0xffffffffffffffbf, 1) , (stack, 0xffffffffffffffbf, 1) , (stack, 0xffffffffffffffbf, 1) , (stack, 0xffffffffffffffbf, 1) , (stack, 0xffffffffffffffbf, 1) , (stack, 0xffffffffffffffbf, 1) , (stack, 0xffffffffffffffbf, 1)]
[(stack, 0xffffffffffffffbe, 1) MULTIEQUAL (stack, 0xffffffffffffffbe, 1) , (stack, 0xffffffffffffffbe, 1) , (stack, 0xffffffffffffffbe, 1) , (stack, 0xffffffffffffffbe, 1) , (stack, 0xffffffffffffffbe, 1) , (stack, 0xffffffffffffffbe, 1) , (stack, 0xffffffffffffffbe, 1) , (stack, 0xffffffffffffffbe, 1) , (stack, 0xffffffffffffffbe, 1) , (stack, 0xffffffffffffffbe, 1) , (stack, 0xffffffffffffffbe, 1)]
[(stack, 0xffffffffffffffbd, 1) MULTIEQUAL (stack, 0xffffffffffffffbd, 1) , (stack, 0xffffffffffffffbd, 1) , (stack, 0xffffffffffffffbd, 1) , (stack, 0xffffffffffffffbd, 1) , (stack, 0xffffffffffffffbd, 1) , (stack, 0xffffffffffffffbd, 1) , (stack, 0xffffffffffffffbd, 1) , (stack, 0xffffffffffffffbd, 1) , (stack, 0xffffffffffffffbd, 1) , (stack, 0xffffffffffffffbd, 1) , (stack, 0xffffffffffffffbd, 1)]
[(stack, 0xffffffffffffffbc, 1) MULTIEQUAL (stack, 0xffffffffffffffbc, 1) , (stack, 0xffffffffffffffbc, 1) , (stack, 0xffffffffffffffbc, 1) , (stack, 0xffffffffffffffbc, 1) , (stack, 0xffffffffffffffbc, 1) , (stack, 0xffffffffffffffbc, 1) , (stack, 0xffffffffffffffbc, 1) , (stack, 0xffffffffffffffbc, 1) , (stack, 0xffffffffffffffbc, 1) , (stack, 0xffffffffffffffbc, 1) , (stack, 0xffffffffffffffbc, 1)]
[(stack, 0xffffffffffffffbb, 1) MULTIEQUAL (stack, 0xffffffffffffffbb, 1) , (stack, 0xffffffffffffffbb, 1) , (stack, 0xffffffffffffffbb, 1) , (stack, 0xffffffffffffffbb, 1) , (stack, 0xffffffffffffffbb, 1) , (stack, 0xffffffffffffffbb, 1) , (stack, 0xffffffffffffffbb, 1) , (stack, 0xffffffffffffffbb, 1) , (stack, 0xffffffffffffffbb, 1) , (stack, 0xffffffffffffffbb, 1) , (stack, 0xffffffffffffffbb, 1)]
[(register, 0x8, 8) MULTIEQUAL (unique, 0x3100, 8) , (unique, 0x3100, 8) , (unique, 0x3100, 8) , (unique, 0x3100, 8) , (unique, 0x3100, 8) , (unique, 0x3100, 8) , (register, 0x8, 8) , (unique, 0x3100, 8) , (unique, 0x3100, 8) , (unique, 0x3100, 8) , (unique, 0x3100, 8)]
[(register, 0xb8, 4) INT_ZEXT (stack, 0xffffffffffffffba, 1), (stack, 0xffffffffffffffba, 1) MULTIEQUAL (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1)]
[(register, 0xb8, 4) INT_ZEXT (stack, 0xffffffffffffffba, 1), (stack, 0xffffffffffffffba, 1) MULTIEQUAL (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1)]
[ ---  CBRANCH (ram, 0x462950, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (unique, 0x10000a60, 1) , (const, 0x0, 1), (unique, 0x10000a60, 1) CAST (stack, 0xffffffffffffffba, 1), (stack, 0xffffffffffffffba, 1) MULTIEQUAL (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1)]
[(register, 0x18, 8) CAST (unique, 0x10000a61, 8), (unique, 0x10000a61, 8) PTRADD (unique, 0x3800, 8) , (register, 0x8, 8) , (const, 0x1, 8), (unique, 0x3800, 8) PTRADD (unique, 0x10000805, 8) , (const, 0x1, 8) , (const, 0x1, 8), (unique, 0x10000805, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffb9, 8)]
[ ---  CBRANCH (ram, 0x462b49, 1) , (unique, 0xc900, 1), (unique, 0xc900, 1) INT_LESS (register, 0x18, 4) , (const, 0x1e, 4), (register, 0x18, 4) INT_SUB (unique, 0x100002ff, 4) , (const, 0xc2, 4), (unique, 0x100002ff, 4) INT_ZEXT (stack, 0xffffffffffffffba, 1)]
[ ---  CBRANCH (ram, 0x462f18, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x80, 1) , (const, 0xe0, 1), (register, 0x80, 1) INT_AND (stack, 0xffffffffffffffba, 1) , (const, 0xf0, 1)]
[(stack, 0xffffffffffffffa0, 1) COPY (const, 0xb, 1)]
[(register, 0x18, 8) COPY (const, 0x3, 8)]
[(register, 0x88, 4) INT_AND (register, 0xb8, 4) , (const, 0xf, 4)]
[ ---  BRANCH (ram, 0x462989, 1)]
[ ---  CBRANCH (ram, 0x462f64, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x80, 1) , (const, 0xf0, 1), (register, 0x80, 1) INT_AND (stack, 0xffffffffffffffba, 1) , (const, 0xf8, 1)]
[(stack, 0xffffffffffffffa0, 1) COPY (const, 0x10, 1)]
[(register, 0x18, 8) COPY (const, 0x4, 8)]
[(register, 0x88, 4) INT_AND (register, 0xb8, 4) , (const, 0x7, 4)]
[ ---  BRANCH (ram, 0x462989, 1)]
[ ---  CBRANCH (ram, 0x462fba, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x80, 1) , (const, 0xf8, 1), (register, 0x80, 1) INT_AND (stack, 0xffffffffffffffba, 1) , (const, 0xfc, 1)]
[(stack, 0xffffffffffffffa0, 1) COPY (const, 0x15, 1)]
[(register, 0x18, 8) COPY (const, 0x5, 8)]
[(register, 0x88, 4) INT_AND (register, 0xb8, 4) , (const, 0x3, 4)]
[ ---  BRANCH (ram, 0x462989, 1)]
[ ---  CBRANCH (ram, 0x462fe0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x80, 1) , (const, 0xfc, 1), (register, 0x80, 1) INT_AND (stack, 0xffffffffffffffba, 1) , (const, 0xfe, 1)]
[(stack, 0xffffffffffffffa0, 1) COPY (const, 0x1a, 1)]
[(register, 0x18, 8) COPY (const, 0x6, 8)]
[(register, 0x88, 4) INT_AND (register, 0xb8, 4) , (const, 0x1, 4)]
[ ---  BRANCH (ram, 0x462989, 1)]
[(register, 0x88, 8) COPY (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x462b06, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESSEQUAL (register, 0x18, 8) , (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (unique, 0x3800, 8) , (register, 0x88, 8) , (const, 0x1, 8), (register, 0x88, 8) INT_ADD (register, 0x88, 8) , (const, 0x1, 8), (register, 0x88, 8) MULTIEQUAL (register, 0x88, 8) , (register, 0x88, 8)]
[ ---  CBRANCH (ram, 0x462b06, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x8, 1) , (const, 0x80, 1), (register, 0x8, 1) INT_AND (unique, 0xbb00, 1) , (const, 0xc0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (unique, 0x3800, 8) , (register, 0x88, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x462fe8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x88, 8) , (const, 0x5, 8)]
[(stack, 0xffffffffffffffa0, 1) COPY (const, 0x6, 1)]
[(register, 0x18, 8) COPY (const, 0x2, 8)]
[(register, 0x88, 4) INT_AND (register, 0xb8, 4) , (const, 0x1f, 4)]
[(stack, 0xffffffffffffffa0, 1) MULTIEQUAL (stack, 0xffffffffffffffa0, 1) , (stack, 0xffffffffffffffa0, 1) , (stack, 0xffffffffffffffa0, 1) , (stack, 0xffffffffffffffa0, 1) , (stack, 0xffffffffffffffa0, 1)]
[(register, 0x88, 4) MULTIEQUAL (register, 0x88, 4) , (register, 0x88, 4) , (register, 0x88, 4) , (register, 0x88, 4) , (register, 0x88, 4)]
[ ---  CBRANCH (ram, 0x462bdd, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (register, 0x18, 8) , (register, 0x80, 8), (register, 0x80, 8) PTRADD (unique, 0x3800, 8) , (register, 0x18, 8) , (const, 0x1, 8), (register, 0x18, 8) MULTIEQUAL (register, 0x18, 8) , (register, 0x18, 8) , (register, 0x18, 8) , (register, 0x18, 8) , (register, 0x18, 8)]
[(register, 0x206, 1) INT_NOTEQUAL (register, 0x18, 8) , (unique, 0x3800, 8), (unique, 0x3800, 8) CAST (unique, 0x10000a69, 8), (unique, 0x10000a69, 8) PTRADD (unique, 0x1000081d, 8) , (const, 0x2, 8) , (const, 0x1, 8), (unique, 0x1000081d, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffb9, 8)]
[ ---  CBRANCH (ram, 0x462afa, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (unique, 0x3800, 8) , (register, 0x18, 8), (unique, 0x3800, 8) CAST (unique, 0x10000a69, 8), (unique, 0x10000a69, 8) PTRADD (unique, 0x1000081d, 8) , (const, 0x2, 8) , (const, 0x1, 8), (unique, 0x1000081d, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffb9, 8)]
[ ---  CBRANCH (ram, 0x462c2c, 1) , (register, 0x206, 1)]
[(register, 0x88, 8) COPY (const, 0x1, 8)]
[(unique, 0x1000094c, 8) COPY (unique, 0x3800, 8)]
[ ---  BRANCH (ram, 0x462c05, 1)]
[(register, 0x88, 8) MULTIEQUAL (register, 0x88, 8) , (register, 0x88, 8)]
[ ---  CBRANCH (ram, 0x462bf7, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x80, 1) , (const, 0x80, 1), (register, 0x80, 1) INT_AND (unique, 0xbb00, 1) , (const, 0xc0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x10000a71, 8), (unique, 0x10000a71, 8) CAST (register, 0x38, 8), (register, 0x38, 8) MULTIEQUAL (unique, 0x1000094c, 8) , (register, 0x38, 8)]
[(register, 0x88, 8) INT_ADD (register, 0x88, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x462c13, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (register, 0x38, 8) , (register, 0x18, 8), (register, 0x38, 8) CAST (unique, 0x10000a81, 8), (unique, 0x10000a81, 8) INT_ADD (unique, 0x10000a79, 8) , (const, 0x1, 8), (unique, 0x10000a79, 8) CAST (register, 0x38, 8)]
[(register, 0x88, 8) MULTIEQUAL (register, 0x88, 8) , (register, 0x88, 8)]
[ ---  CBRANCH (ram, 0x462b06, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x18, 8) , (register, 0x38, 8), (register, 0x38, 8) MULTIEQUAL (register, 0x38, 8) , (register, 0x38, 8)]
[ ---  CBRANCH (ram, 0x462d1d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x18, 8) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x128e, 4)]
[(stack, 0xffffffffffffffba, 1) INDIRECT (stack, 0xffffffffffffffba, 1) , (const, 0x128e, 4)]
[(stack, 0xffffffffffffffbf, 1) INDIRECT (stack, 0xffffffffffffffbf, 1) , (const, 0x128e, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x128e, 4)]
[ ---  CALL (ram, 0x403170, 8) , (unique, 0x1000064d, 8) , (unique, 0x1000060d, 8) , (const, 0x1db, 4) , (unique, 0x10000685, 8), (unique, 0x10000685, 8) COPY (const, 0x49f900, 8), (unique, 0x1000064d, 8) COPY (const, 0x49f578, 8), (unique, 0x1000060d, 8) COPY (const, 0x49f4cc, 8)]
[ ---  RETURN (const, 0x1, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x10, 8) , (register, 0xb0, 8), (register, 0xb0, 8) PTRADD (unique, 0xbd80, 8) , (register, 0x38, 8) , (const, 0x1, 8), (register, 0x38, 8) INT_SUB (register, 0x8, 8) , (register, 0x0, 8), (register, 0x0, 8) INT_SEXT (unique, 0x10000a89, 4), (unique, 0x10000a89, 4) CAST (register, 0x0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0xbd80, 8) , (register, 0x8, 4), (register, 0x8, 4) SUBPIECE (register, 0x8, 8) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x462cbf, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (register, 0x98, 4) , (const, 0x2, 4), (register, 0x98, 4) INT_SUB (unique, 0x1000038c, 4) , (const, 0xc0, 4), (unique, 0x1000038c, 4) INT_ZEXT (stack, 0xffffffffffffffba, 1)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x1285, 4)]
[(stack, 0xffffffffffffffba, 1) INDIRECT (stack, 0xffffffffffffffba, 1) , (const, 0x1285, 4)]
[(stack, 0xffffffffffffffbf, 1) INDIRECT (stack, 0xffffffffffffffbf, 1) , (const, 0x1285, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1285, 4)]
[ ---  CALL (ram, 0x403170, 8) , (unique, 0x1000061d, 8) , (unique, 0x10000605, 8) , (const, 0x1e1, 4) , (unique, 0x1000067d, 8), (unique, 0x1000067d, 8) COPY (const, 0x49f900, 8), (unique, 0x1000061d, 8) COPY (const, 0x49f4dc, 8), (unique, 0x10000605, 8) COPY (const, 0x49f4cc, 8)]
[ ---  RETURN (const, 0x1, 4)]
[ ---  CBRANCH (ram, 0x462ca3, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (register, 0x18, 4) , (const, 0x1e, 4)]
[ ---  CBRANCH (ram, 0x462d3c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 1) , (const, 0xe0, 1), (register, 0x0, 1) INT_AND (stack, 0xffffffffffffffba, 1) , (const, 0xf0, 1)]
[ ---  CBRANCH (ram, 0x462da9, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 1) , (const, 0xf0, 1), (register, 0x0, 1) INT_AND (stack, 0xffffffffffffffba, 1) , (const, 0xf8, 1)]
[ ---  CBRANCH (ram, 0x462de6, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 1) , (const, 0xf8, 1), (register, 0x0, 1) INT_AND (stack, 0xffffffffffffffba, 1) , (const, 0xfc, 1)]
[(register, 0x30, 4) INT_AND (register, 0xb8, 4) , (const, 0x1, 4)]
[(register, 0x38, 4) COPY (const, 0x600, 4)]
[(register, 0x0, 1) COPY (const, 0x5, 1)]
[ ---  BRANCH (ram, 0x462c62, 1)]
[(register, 0x30, 4) INT_AND (register, 0xb8, 4) , (const, 0x3, 4)]
[(register, 0x38, 4) COPY (const, 0x500, 4)]
[(register, 0x0, 1) COPY (const, 0x4, 1)]
[ ---  BRANCH (ram, 0x462c62, 1)]
[(register, 0x30, 4) INT_AND (register, 0xb8, 4) , (const, 0x7, 4)]
[(register, 0x38, 4) COPY (const, 0x400, 4)]
[(register, 0x0, 1) COPY (const, 0x3, 1)]
[ ---  BRANCH (ram, 0x462c62, 1)]
[(register, 0x30, 4) INT_AND (register, 0xb8, 4) , (const, 0xf, 4)]
[(register, 0x38, 4) COPY (const, 0x300, 4)]
[(register, 0x0, 1) COPY (const, 0x2, 1)]
[ ---  BRANCH (ram, 0x462c62, 1)]
[(register, 0x30, 4) INT_AND (register, 0xb8, 4) , (const, 0x1f, 4)]
[(register, 0x38, 4) COPY (const, 0x200, 4)]
[(register, 0x0, 1) COPY (const, 0x1, 1)]
[(register, 0x0, 1) MULTIEQUAL (register, 0x0, 1) , (register, 0x0, 1) , (register, 0x0, 1) , (register, 0x0, 1) , (register, 0x0, 1)]
[(register, 0x38, 4) MULTIEQUAL (register, 0x38, 4) , (register, 0x38, 4) , (register, 0x38, 4) , (register, 0x38, 4) , (register, 0x38, 4)]
[(register, 0x30, 4) MULTIEQUAL (register, 0x30, 4) , (register, 0x30, 4) , (register, 0x30, 4) , (register, 0x30, 4) , (register, 0x30, 4)]
[(unique, 0x1000097c, 8) COPY (unique, 0x3800, 8)]
[ ---  CBRANCH (ram, 0x462c8a, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (unique, 0x3800, 8) , (register, 0x18, 8)]
[(register, 0x30, 4) INT_OR (register, 0x30, 4) , (register, 0x88, 4), (register, 0x88, 4) INT_AND (register, 0x88, 4) , (const, 0x3f, 4), (register, 0x88, 4) INT_ZEXT (unique, 0xbb00, 1), (register, 0x30, 4) INT_LEFT (register, 0x30, 4) , (const, 0x6, 4), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x10000a8d, 8), (unique, 0x10000a8d, 8) CAST (register, 0x80, 8), (register, 0x30, 4) MULTIEQUAL (register, 0x30, 4) , (register, 0x30, 4), (register, 0x80, 8) MULTIEQUAL (unique, 0x10000974, 8) , (unique, 0x1000097c, 8)]
[(unique, 0x10000974, 8) COPY (register, 0x80, 8), (register, 0x80, 8) CAST (unique, 0x10000a9d, 8), (unique, 0x10000a9d, 8) INT_ADD (unique, 0x10000a95, 8) , (const, 0x1, 8), (unique, 0x10000a95, 8) CAST (register, 0x80, 8), (register, 0x80, 8) MULTIEQUAL (unique, 0x10000974, 8) , (unique, 0x1000097c, 8)]
[ ---  CBRANCH (ram, 0x462c6b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x18, 8) , (register, 0x80, 8), (register, 0x80, 8) CAST (unique, 0x10000a9d, 8), (unique, 0x10000a9d, 8) INT_ADD (unique, 0x10000a95, 8) , (const, 0x1, 8), (unique, 0x10000a95, 8) CAST (register, 0x80, 8), (register, 0x80, 8) MULTIEQUAL (unique, 0x10000974, 8) , (unique, 0x1000097c, 8)]
[(register, 0x0, 1) INT_ADD (register, 0x0, 1) , (unique, 0x10000560, 1), (unique, 0x10000560, 1) INT_SUB (unique, 0x10000561, 1) , (unique, 0x10000563, 1), (unique, 0x10000561, 1) SUBPIECE (unique, 0x3800, 8) , (const, 0x0, 4), (unique, 0x10000563, 1) SUBPIECE (register, 0x18, 8) , (const, 0x0, 4)]
[(register, 0xb8, 4) COPY (const, 0x7, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0xbd80, 8) , (register, 0x8, 4), (register, 0x8, 4) INT_OR (register, 0x8, 4) , (register, 0x38, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (register, 0x30, 4), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x1, 8) , (const, 0x4, 8), (register, 0x30, 4) INT_LEFT (register, 0x30, 4) , (unique, 0x53100, 1), (unique, 0x53100, 1) INT_AND (unique, 0x10000554, 1) , (const, 0x1f, 1), (unique, 0x10000554, 1) INT_MULT (register, 0x0, 1) , (const, 0x6, 1), (register, 0x30, 4) MULTIEQUAL (register, 0x30, 4) , (register, 0x30, 4), (register, 0x0, 1) MULTIEQUAL (register, 0x0, 1) , (register, 0x0, 1)]
[ ---  BRANCH (ram, 0x462337, 1)]
[(register, 0x8, 4) INT_ZEXT (stack, 0xffffffffffffffbb, 1)]
[ ---  CBRANCH (ram, 0x462b00, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x30, 1) , (const, 0x80, 1), (register, 0x30, 1) INT_AND (stack, 0xffffffffffffffbb, 1) , (const, 0xc0, 1)]
[(register, 0x88, 8) COPY (const, 0x1, 8)]
[(register, 0x8, 4) INT_OR (register, 0x8, 4) , (register, 0x30, 4), (register, 0x30, 4) INT_LEFT (register, 0x88, 4) , (const, 0x6, 4), (register, 0x8, 4) INT_AND (register, 0x8, 4) , (const, 0x3f, 4)]
[ ---  CBRANCH (ram, 0x462e2f, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x18, 8) , (const, 0x2, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0xbd80, 8) , (register, 0x8, 4)]
[(register, 0x88, 8) COPY (const, 0x2, 8)]
[(register, 0x0, 4) INT_AND (unique, 0xbc80, 4) , (const, 0x7, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0xbd80, 8)]
[ ---  BRANCH (ram, 0x462620, 1)]
[(register, 0x8, 4) INT_ZEXT (stack, 0xffffffffffffffbc, 1)]
[ ---  CBRANCH (ram, 0x462e82, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x30, 1) , (const, 0x80, 1), (register, 0x30, 1) INT_AND (stack, 0xffffffffffffffbc, 1) , (const, 0xc0, 1)]
[(register, 0x88, 8) COPY (const, 0x2, 8)]
[ ---  BRANCH (ram, 0x462b06, 1)]
[(register, 0x80, 4) INT_OR (register, 0x80, 4) , (register, 0x8, 4), (register, 0x8, 4) INT_AND (register, 0x8, 4) , (const, 0x3f, 4), (register, 0x80, 4) INT_LEFT (register, 0x8, 4) , (const, 0x6, 4)]
[ ---  CBRANCH (ram, 0x462e77, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x18, 8) , (const, 0x3, 8)]
[(register, 0x88, 8) COPY (const, 0x3, 8)]
[ ---  BRANCH (ram, 0x462a63, 1)]
[(register, 0x8, 4) INT_ZEXT (stack, 0xffffffffffffffbd, 1)]
[ ---  CBRANCH (ram, 0x462e6c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x30, 1) , (const, 0x80, 1), (register, 0x30, 1) INT_AND (stack, 0xffffffffffffffbd, 1) , (const, 0xc0, 1)]
[(register, 0x88, 8) COPY (const, 0x3, 8)]
[ ---  BRANCH (ram, 0x462b06, 1)]
[(register, 0x80, 4) INT_OR (register, 0x80, 4) , (register, 0x8, 4), (register, 0x8, 4) INT_AND (register, 0x8, 4) , (const, 0x3f, 4), (register, 0x80, 4) INT_LEFT (register, 0x80, 4) , (const, 0x6, 4)]
[ ---  CBRANCH (ram, 0x462e61, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x18, 8) , (const, 0x4, 8)]
[(register, 0x88, 8) COPY (const, 0x4, 8)]
[ ---  BRANCH (ram, 0x462a63, 1)]
[(register, 0x8, 4) INT_ZEXT (stack, 0xffffffffffffffbe, 1)]
[ ---  CBRANCH (ram, 0x462ce9, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x30, 1) , (const, 0x80, 1), (register, 0x30, 1) INT_AND (stack, 0xffffffffffffffbe, 1) , (const, 0xc0, 1)]
[(register, 0x88, 8) COPY (const, 0x4, 8)]
[ ---  BRANCH (ram, 0x462b06, 1)]
[(register, 0x80, 4) INT_OR (register, 0x80, 4) , (register, 0x8, 4), (register, 0x8, 4) INT_AND (register, 0x8, 4) , (const, 0x3f, 4), (register, 0x80, 4) INT_LEFT (register, 0x80, 4) , (const, 0x6, 4)]
[ ---  CBRANCH (ram, 0x462cde, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x18, 8) , (const, 0x6, 8)]
[(register, 0x88, 8) COPY (const, 0x5, 8)]
[ ---  BRANCH (ram, 0x462a63, 1)]
[(register, 0x8, 4) INT_ZEXT (stack, 0xffffffffffffffbf, 1)]
[ ---  CBRANCH (ram, 0x462cf4, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x30, 1) , (const, 0x80, 1), (register, 0x30, 1) INT_AND (stack, 0xffffffffffffffbf, 1) , (const, 0xc0, 1)]
[(register, 0x88, 8) COPY (const, 0x5, 8)]
[ ---  BRANCH (ram, 0x462b06, 1)]
[(register, 0x88, 8) COPY (const, 0x6, 8)]
[(register, 0x80, 4) INT_OR (register, 0x80, 4) , (register, 0x8, 4), (register, 0x8, 4) INT_AND (register, 0x8, 4) , (const, 0x3f, 4), (register, 0x80, 4) INT_LEFT (register, 0x80, 4) , (const, 0x6, 4)]
[(register, 0x88, 8) MULTIEQUAL (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8)]
[ ---  CBRANCH (ram, 0x462b06, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x59200, 4) , (const, 0x0, 4), (unique, 0x59200, 4) INT_RIGHT (register, 0x80, 4) , (stack, 0xffffffffffffffa0, 1), (register, 0x80, 4) MULTIEQUAL (register, 0x80, 4) , (register, 0x80, 4) , (register, 0x80, 4) , (register, 0x80, 4)]
[ ---  CBRANCH (ram, 0x462b06, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (const, 0x7ff, 4) , (register, 0x8, 4), (register, 0x8, 4) INT_SUB (register, 0x80, 4) , (const, 0xd800, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0xbd80, 8) , (register, 0x80, 4)]
[(register, 0x0, 4) INT_AND (unique, 0xbc80, 4) , (const, 0x7, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0xbd80, 8)]
[(unique, 0x10000964, 8) COPY (unique, 0x3100, 8)]
[(unique, 0x100009ac, 8) COPY (register, 0x18, 8)]
[ ---  BRANCH (ram, 0x462620, 1)]
[(register, 0x88, 8) MULTIEQUAL (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8) , (register, 0x88, 8)]
[ ---  CBRANCH (ram, 0x462b18, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x462bb6, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x90, 4) , (const, 0x0, 4), (register, 0x90, 4) INT_AND (unique, 0xbc80, 4) , (const, 0x2, 4)]
[(register, 0xb8, 4) COPY (const, 0x6, 4)]
[ ---  BRANCH (ram, 0x462337, 1)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x1091, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x1091, 4)]
[(stack, 0xffffffffffffffba, 1) INDIRECT (stack, 0xffffffffffffffba, 1) , (const, 0x1091, 4)]
[(stack, 0xffffffffffffffbf, 1) INDIRECT (stack, 0xffffffffffffffbf, 1) , (const, 0x1091, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1091, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x0, 8) , (unique, 0xbe00, 8), (unique, 0xbe00, 8) INT_ADD (unique, 0xbe00, 8) , (const, 0x1, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (register, 0x0, 8)]
[(unique, 0x1000096c, 8) COPY (unique, 0xbd80, 8)]
[ ---  BRANCH (ram, 0x462620, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0xbd80, 8) , (register, 0xb8, 4)]
[(register, 0x0, 4) INT_AND (unique, 0xbc80, 4) , (const, 0x7, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0xbd80, 8)]
[(unique, 0x1000095c, 8) COPY (unique, 0x3100, 8)]
[(unique, 0x100009a4, 8) COPY (register, 0x88, 8), (register, 0x88, 8) COPY (const, 0x1, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffbf, 1) MULTIEQUAL (stack, 0xffffffffffffffbf, 1) , (stack, 0xffffffffffffffbf, 1) , (stack, 0xffffffffffffffbf, 1) , (stack, 0xffffffffffffffbf, 1)]
[(stack, 0xffffffffffffffba, 1) MULTIEQUAL (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(register, 0x38, 8) MULTIEQUAL (unique, 0x1000095c, 8) , (unique, 0x10000964, 8) , (unique, 0x1000096c, 8) , (unique, 0x3100, 8)]
[ ---  CBRANCH (ram, 0x462ef9, 1) , (unique, 0xcd00, 1), (unique, 0xcd00, 1) INT_SLESSEQUAL (register, 0x88, 8) , (register, 0x0, 8), (register, 0x0, 8) INT_SEXT (unique, 0x10000aa5, 4), (unique, 0x10000aa5, 4) CAST (register, 0x0, 4), (register, 0x0, 4) MULTIEQUAL (register, 0x0, 4) , (register, 0x0, 4) , (register, 0x0, 4) , (register, 0x0, 4), (register, 0x88, 8) MULTIEQUAL (unique, 0x100009a4, 8) , (unique, 0x100009ac, 8) , (register, 0x88, 8) , (register, 0x88, 8)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0xdf2, 4)]
[(stack, 0xffffffffffffffba, 1) INDIRECT (stack, 0xffffffffffffffba, 1) , (const, 0xdf2, 4)]
[(stack, 0xffffffffffffffbf, 1) INDIRECT (stack, 0xffffffffffffffbf, 1) , (const, 0xdf2, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xdf2, 4)]
[ ---  CALL (ram, 0x403170, 8) , (unique, 0x10000645, 8) , (unique, 0x10000615, 8) , (const, 0x1c9, 4) , (unique, 0x1000068d, 8), (unique, 0x1000068d, 8) COPY (const, 0x49f900, 8), (unique, 0x10000645, 8) COPY (const, 0x49f550, 8), (unique, 0x10000615, 8) COPY (const, 0x49f4cc, 8)]
[ ---  RETURN (const, 0x1, 4)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000aa9, 8), (unique, 0x10000aa9, 8) CAST (unique, 0x3800, 8), (unique, 0x3800, 8) PTRADD (register, 0x30, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x10, 8) , (register, 0xb0, 8), (register, 0xb0, 8) PTRADD (unique, 0xbd80, 8) , (register, 0x88, 8) , (const, 0x1, 8), (register, 0x88, 8) INT_SUB (register, 0x88, 8) , (register, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0xbd80, 8) , (const, 0x0, 4)]
[(unique, 0x100009e4, 8) COPY (register, 0x38, 8)]
[ ---  BRANCH (ram, 0x4620f8, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffbf, 1) MULTIEQUAL (stack, 0xffffffffffffffbf, 1) , (stack, 0xffffffffffffffbf, 1) , (stack, 0xffffffffffffffbf, 1) , (stack, 0xffffffffffffffbf, 1)]
[(stack, 0xffffffffffffffba, 1) MULTIEQUAL (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x90, 4) MULTIEQUAL (unique, 0xbc80, 4) , (unique, 0xbc80, 4) , (unique, 0xbc80, 4) , (unique, 0xbc80, 4)]
[(unique, 0x10000a04, 8) COPY (register, 0xb8, 8), (register, 0xb8, 8) MULTIEQUAL (unique, 0x100009dc, 8) , (unique, 0x100009e4, 8) , (unique, 0xbd80, 8) , (unique, 0xbd80, 8)]
[ ---  CBRANCH (ram, 0x4628dc, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x8, 8) , (register, 0xb0, 8), (register, 0xb0, 8) MULTIEQUAL (unique, 0xbd80, 8) , (register, 0xb0, 8) , (unique, 0xbd80, 8) , (unique, 0xbd80, 8)]
[(unique, 0x100009fc, 8) COPY (register, 0xb0, 8)]
[ ---  CBRANCH (ram, 0x462650, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (unique, 0xbd80, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb8, 8) , (const, 0x1, 8) , (const, 0x4, 8)]
[(unique, 0x10000575, 4) COPY (const, 0x5, 4)]
[ ---  BRANCH (ram, 0x462268, 1)]
[(unique, 0x1000058d, 4) COPY (const, 0x4, 4)]
[(unique, 0x100004ac, 4) INT_AND (register, 0x90, 4) , (const, 0x2, 4)]
[ ---  BRANCH (ram, 0x462146, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffbf, 1) MULTIEQUAL (stack, 0xffffffffffffffbf, 1) , (stack, 0xffffffffffffffbf, 1)]
[(stack, 0xffffffffffffffba, 1) MULTIEQUAL (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(unique, 0x10000589, 4) MULTIEQUAL (unique, 0x1000058d, 4) , (unique, 0x10000581, 4)]
[(register, 0x38, 8) MULTIEQUAL (unique, 0x3100, 8) , (unique, 0x3100, 8)]
[(register, 0x18, 8) MULTIEQUAL (unique, 0x10000a04, 8) , (register, 0x18, 8)]
[(register, 0x10, 4) INT_ZEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x100009fc, 8) , (register, 0x0, 8)]
[(register, 0x10, 4) INT_ZEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x100009fc, 8) , (register, 0x0, 8)]
[(unique, 0x1000092c, 8) COPY (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x1, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x100009fc, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x462128, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (unique, 0x10000ab1, 1) , (const, 0x0, 1), (unique, 0x10000ab1, 1) CAST (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x100009fc, 8) , (register, 0x0, 8)]
[(register, 0x8, 4) INT_ZEXT (unique, 0xbb00, 1)]
[ ---  CBRANCH (ram, 0x462398, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (register, 0x10, 4) , (const, 0x1e, 4), (register, 0x10, 4) INT_SUB (register, 0x10, 4) , (const, 0xc2, 4)]
[(register, 0x8, 4) INT_AND (register, 0x8, 4) , (const, 0x1f, 4)]
[(register, 0x98, 1) COPY (const, 0x6, 1)]
[(register, 0x80, 8) COPY (const, 0x2, 8)]
[ ---  CBRANCH (ram, 0x462842, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x10, 1) , (const, 0xe0, 1), (register, 0x10, 1) INT_AND (unique, 0xbb00, 1) , (const, 0xf0, 1)]
[ ---  CBRANCH (ram, 0x462ad8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x10, 1) , (const, 0xf0, 1), (register, 0x10, 1) INT_AND (unique, 0xbb00, 1) , (const, 0xf8, 1)]
[(register, 0x8, 4) INT_AND (register, 0x8, 4) , (const, 0x7, 4)]
[(register, 0x98, 1) COPY (const, 0x10, 1)]
[(register, 0x80, 8) COPY (const, 0x4, 8)]
[ ---  BRANCH (ram, 0x462171, 1)]
[ ---  CBRANCH (ram, 0x462cff, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x10, 1) , (const, 0xf8, 1), (register, 0x10, 1) INT_AND (unique, 0xbb00, 1) , (const, 0xfc, 1)]
[(register, 0x8, 4) INT_AND (register, 0x8, 4) , (const, 0x3, 4)]
[(register, 0x98, 1) COPY (const, 0x15, 1)]
[(register, 0x80, 8) COPY (const, 0x5, 8)]
[ ---  BRANCH (ram, 0x462171, 1)]
[ ---  CBRANCH (ram, 0x462d79, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x10, 1) , (const, 0xfc, 1), (register, 0x10, 1) INT_AND (unique, 0xbb00, 1) , (const, 0xfe, 1)]
[(register, 0x8, 4) INT_AND (register, 0x8, 4) , (const, 0x1, 4)]
[(register, 0x98, 1) COPY (const, 0x1a, 1)]
[(register, 0x80, 8) PTRSUB (const, 0x0, 8) , (const, 0x6, 8)]
[ ---  BRANCH (ram, 0x462171, 1)]
[(register, 0x98, 1) MULTIEQUAL (register, 0x98, 1) , (register, 0x98, 1) , (register, 0x98, 1) , (register, 0x98, 1)]
[(register, 0x8, 4) MULTIEQUAL (register, 0x8, 4) , (register, 0x8, 4) , (register, 0x8, 4) , (register, 0x8, 4)]
[(unique, 0x3400, 8) PTRADD (register, 0x0, 8) , (unique, 0x10000ab2, 8) , (const, 0x1, 8), (unique, 0x10000ab2, 8) CAST (register, 0x80, 8), (register, 0x80, 8) MULTIEQUAL (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8)]
[(register, 0x80, 8) COPY (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x462368, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESSEQUAL (register, 0x8, 8) , (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (register, 0x0, 8) , (unique, 0x10000aba, 8) , (const, 0x1, 8), (unique, 0x10000aba, 8) CAST (register, 0x80, 8), (register, 0x80, 8) PTRADD (register, 0x80, 8) , (const, 0x1, 8) , (const, 0x1, 8), (register, 0x80, 8) MULTIEQUAL (register, 0x80, 8) , (register, 0x80, 8)]
[ ---  CBRANCH (ram, 0x462368, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x10, 1) , (const, 0x80, 1), (register, 0x10, 1) INT_AND (unique, 0xbb00, 1) , (const, 0xc0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (register, 0x0, 8) , (unique, 0x10000ac2, 8) , (const, 0x1, 8), (unique, 0x10000ac2, 8) CAST (register, 0x80, 8)]
[ ---  CBRANCH (ram, 0x462d7c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x80, 8) , (const, 0x5, 8)]
[(register, 0x80, 8) COPY (const, 0x3, 8)]
[(register, 0x8, 4) INT_AND (register, 0x8, 4) , (const, 0xf, 4)]
[(register, 0x98, 1) COPY (const, 0xb, 1)]
[(unique, 0x3400, 8) PTRADD (register, 0x0, 8) , (const, 0x3, 8) , (const, 0x1, 8)]
[(unique, 0x1000087e, 8) MULTIEQUAL (register, 0x80, 8) , (register, 0x80, 8)]
[(unique, 0x10000886, 4) MULTIEQUAL (register, 0x8, 4) , (register, 0x8, 4)]
[(unique, 0x1000088a, 1) MULTIEQUAL (register, 0x98, 1) , (register, 0x98, 1)]
[ ---  CBRANCH (ram, 0x4623c2, 1) , (unique, 0x1000087d, 1), (unique, 0x1000087d, 1) INT_LESS (register, 0x8, 8) , (unique, 0x10000875, 8), (unique, 0x10000875, 8) MULTIEQUAL (unique, 0x3400, 8) , (unique, 0x3400, 8)]
[ ---  CBRANCH (ram, 0x46224f, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (unique, 0x3100, 8) , (register, 0x8, 8)]
[(register, 0x80, 8) COPY (const, 0x1, 8)]
[(register, 0x80, 8) COPY (const, 0x1, 8)]
[(register, 0x8, 8) PTRADD (register, 0x8, 8) , (unique, 0x1000016f, 8) , (const, 0x1, 8), (unique, 0x1000016f, 8) INT_2COMP (unique, 0x10000aca, 8), (unique, 0x10000aca, 8) CAST (register, 0x0, 8)]
[ ---  BRANCH (ram, 0x4623f1, 1)]
[(register, 0x80, 8) MULTIEQUAL (register, 0x80, 8) , (register, 0x80, 8)]
[ ---  CBRANCH (ram, 0x4623e0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x10, 1) , (const, 0x80, 1), (register, 0x10, 1) INT_AND (unique, 0xbb00, 1) , (const, 0xc0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0x30, 8), (register, 0x30, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0x30, 8)]
[(register, 0x30, 8) PTRADD (register, 0x30, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x462255, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x80, 8) , (register, 0x8, 8), (register, 0x80, 8) PTRADD (register, 0x80, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[(register, 0x80, 8) MULTIEQUAL (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8)]
[ ---  CBRANCH (ram, 0x462368, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x8, 8) , (register, 0x30, 8), (register, 0x30, 8) MULTIEQUAL (register, 0x30, 8) , (unique, 0x3100, 8) , (register, 0x30, 8)]
[(unique, 0x10000579, 4) COPY (const, 0x7, 4)]
[(unique, 0x100008a4, 8) COPY (register, 0x0, 8)]
[(unique, 0x1000090c, 8) COPY (register, 0x18, 8)]
[(register, 0x30, 4) INT_ZEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x462864, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x10, 1) , (const, 0x80, 1), (register, 0x10, 1) INT_AND (unique, 0xbb00, 1) , (const, 0xc0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[(register, 0x80, 8) COPY (const, 0x1, 8)]
[ ---  BRANCH (ram, 0x462368, 1)]
[(register, 0x30, 4) INT_OR (register, 0x30, 4) , (register, 0x8, 4), (register, 0x30, 4) INT_AND (register, 0x30, 4) , (const, 0x3f, 4), (register, 0x8, 4) INT_LEFT (unique, 0x10000886, 4) , (const, 0x6, 4)]
[(unique, 0x10000934, 8) COPY (unique, 0x10000875, 8)]
[ ---  CBRANCH (ram, 0x462247, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x1000087e, 8) , (const, 0x2, 8)]
[(register, 0x8, 4) INT_ZEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x2, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x46235d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x30, 1) , (const, 0x80, 1), (register, 0x30, 1) INT_AND (unique, 0xbb00, 1) , (const, 0xc0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x2, 8) , (const, 0x1, 8)]
[(register, 0x80, 8) COPY (const, 0x2, 8)]
[(register, 0x10, 4) INT_OR (register, 0x10, 4) , (register, 0x8, 4), (register, 0x8, 4) INT_AND (register, 0x8, 4) , (const, 0x3f, 4), (register, 0x10, 4) INT_LEFT (register, 0x30, 4) , (const, 0x6, 4)]
[ ---  CBRANCH (ram, 0x462226, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x1000087e, 8) , (const, 0x3, 8)]
[(register, 0x8, 4) INT_ZEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x3, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x4628d1, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x30, 1) , (const, 0x80, 1), (register, 0x30, 1) INT_AND (unique, 0xbb00, 1) , (const, 0xc0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x3, 8) , (const, 0x1, 8)]
[(register, 0x80, 8) COPY (const, 0x3, 8)]
[ ---  BRANCH (ram, 0x462368, 1)]
[(register, 0x10, 4) INT_OR (register, 0x10, 4) , (register, 0x8, 4), (register, 0x8, 4) INT_AND (register, 0x8, 4) , (const, 0x3f, 4), (register, 0x10, 4) INT_LEFT (register, 0x10, 4) , (const, 0x6, 4)]
[ ---  CBRANCH (ram, 0x462226, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x1000087e, 8) , (const, 0x4, 8)]
[(register, 0x8, 4) INT_ZEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x4, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x4628f9, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x30, 1) , (const, 0x80, 1), (register, 0x30, 1) INT_AND (unique, 0xbb00, 1) , (const, 0xc0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x4, 8) , (const, 0x1, 8)]
[(register, 0x80, 8) COPY (const, 0x4, 8)]
[ ---  BRANCH (ram, 0x462368, 1)]
[(register, 0x10, 4) INT_OR (register, 0x10, 4) , (register, 0x8, 4), (register, 0x8, 4) INT_AND (register, 0x8, 4) , (const, 0x3f, 4), (register, 0x10, 4) INT_LEFT (register, 0x10, 4) , (const, 0x6, 4)]
[ ---  CBRANCH (ram, 0x4628ee, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x1000087e, 8) , (unique, 0x100005b5, 8), (unique, 0x100005b5, 8) PTRSUB (const, 0x0, 8) , (const, 0x6, 8)]
[(register, 0x80, 8) COPY (const, 0x5, 8)]
[ ---  BRANCH (ram, 0x462226, 1)]
[(register, 0x8, 4) INT_ZEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x5, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x462904, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x30, 1) , (const, 0x80, 1), (register, 0x30, 1) INT_AND (unique, 0xbb00, 1) , (const, 0xc0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x5, 8) , (const, 0x1, 8)]
[(register, 0x80, 8) COPY (const, 0x5, 8)]
[ ---  BRANCH (ram, 0x462368, 1)]
[(register, 0x10, 4) INT_OR (register, 0x10, 4) , (register, 0x8, 4), (register, 0x8, 4) INT_AND (register, 0x8, 4) , (const, 0x3f, 4), (register, 0x10, 4) INT_LEFT (register, 0x10, 4) , (const, 0x6, 4)]
[(register, 0x80, 8) MULTIEQUAL (unique, 0x1000087e, 8) , (unique, 0x1000087e, 8) , (unique, 0x1000087e, 8) , (register, 0x80, 8)]
[ ---  CBRANCH (ram, 0x462368, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x59200, 4) , (const, 0x0, 4), (unique, 0x59200, 4) INT_RIGHT (register, 0x10, 4) , (unique, 0x1000088a, 1), (register, 0x10, 4) MULTIEQUAL (register, 0x10, 4) , (register, 0x10, 4) , (register, 0x10, 4) , (register, 0x10, 4)]
[ ---  CBRANCH (ram, 0x462368, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (const, 0x7ff, 4) , (register, 0x8, 4), (register, 0x8, 4) INT_SUB (register, 0x10, 4) , (const, 0xd800, 4)]
[(register, 0x30, 8) COPY (unique, 0x10000944, 8), (unique, 0x10000944, 8) MULTIEQUAL (unique, 0x1000092c, 8) , (unique, 0x10000934, 8) , (unique, 0x10000934, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x18, 8) , (register, 0x10, 4), (register, 0x10, 4) MULTIEQUAL (register, 0x10, 4) , (register, 0x30, 4) , (register, 0x10, 4)]
[(unique, 0x100008f4, 8) COPY (register, 0x38, 8)]
[(register, 0x80, 8) MULTIEQUAL (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8)]
[ ---  CBRANCH (ram, 0x4624c0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x4624c0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x100004ac, 4) , (const, 0x0, 4)]
[(unique, 0x1000057d, 4) COPY (const, 0x6, 4)]
[(unique, 0x1000089c, 8) COPY (register, 0x0, 8)]
[(unique, 0x10000904, 8) COPY (register, 0x18, 8)]
[ ---  BRANCH (ram, 0x462268, 1)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0xaa7, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0xaa7, 4)]
[(stack, 0xffffffffffffffba, 1) INDIRECT (stack, 0xffffffffffffffba, 1) , (const, 0xaa7, 4)]
[(stack, 0xffffffffffffffbf, 1) INDIRECT (stack, 0xffffffffffffffbf, 1) , (const, 0xaa7, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xaa7, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x0, 8) , (unique, 0xbe00, 8), (unique, 0xbe00, 8) INT_ADD (unique, 0xbe00, 8) , (const, 0x1, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (register, 0x0, 8)]
[(register, 0x0, 8) PTRADD (register, 0x0, 8) , (unique, 0x10000ad2, 8) , (const, 0x1, 8), (unique, 0x10000ad2, 8) CAST (register, 0x80, 8)]
[(unique, 0x10000585, 4) COPY (const, 0x6, 4)]
[ ---  BRANCH (ram, 0x462130, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffbf, 1) MULTIEQUAL (stack, 0xffffffffffffffbf, 1) , (stack, 0xffffffffffffffbf, 1)]
[(stack, 0xffffffffffffffba, 1) MULTIEQUAL (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(unique, 0x10000581, 4) MULTIEQUAL (unique, 0x10000589, 4) , (unique, 0x10000585, 4)]
[(unique, 0x10000894, 8) COPY (register, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x30, 8) , (register, 0x0, 8)]
[(unique, 0x100008fc, 8) COPY (register, 0x18, 8), (register, 0x18, 8) MULTIEQUAL (unique, 0x100008f4, 8) , (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x462268, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x8, 8) , (register, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x30, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x462310, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESSEQUAL (unique, 0x3100, 8) , (unique, 0xbd80, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x1, 8) , (const, 0x4, 8)]
[(unique, 0x10000591, 4) COPY (const, 0x5, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x10, 8) , (register, 0x0, 8)]
[(unique, 0x10000571, 4) COPY (const, 0x4, 4)]
[(unique, 0x100008b4, 8) COPY (register, 0x8, 8)]
[ ---  BRANCH (ram, 0x462268, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffbf, 1) MULTIEQUAL (stack, 0xffffffffffffffbf, 1) , (stack, 0xffffffffffffffbf, 1) , (stack, 0xffffffffffffffbf, 1) , (stack, 0xffffffffffffffbf, 1) , (stack, 0xffffffffffffffbf, 1)]
[(stack, 0xffffffffffffffba, 1) MULTIEQUAL (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(unique, 0x10000569, 4) MULTIEQUAL (unique, 0x10000581, 4) , (unique, 0x1000057d, 4) , (unique, 0x10000579, 4) , (unique, 0x10000575, 4) , (unique, 0x10000571, 4)]
[(register, 0x18, 8) MULTIEQUAL (unique, 0x100008fc, 8) , (unique, 0x10000904, 8) , (unique, 0x1000090c, 8) , (unique, 0x10000a04, 8) , (unique, 0x10000a04, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x10, 8) , (register, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x10000894, 8) , (unique, 0x1000089c, 8) , (unique, 0x100008a4, 8) , (unique, 0x100009fc, 8) , (unique, 0x100008b4, 8)]
[(unique, 0x1000084c, 8) MULTIEQUAL (register, 0x18, 8) , (register, 0x18, 8)]
[(unique, 0x10000854, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(unique, 0x1000085c, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(unique, 0x10000864, 1) MULTIEQUAL (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1)]
[(unique, 0x10000865, 1) MULTIEQUAL (stack, 0xffffffffffffffbf, 1) , (stack, 0xffffffffffffffbf, 1)]
[(unique, 0x10000866, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(unique, 0x1000086e, 4) MULTIEQUAL (unique, 0x10000591, 4) , (unique, 0x10000569, 4)]
[ ---  CBRANCH (ram, 0x46227c, 1) , (unique, 0x1000084b, 1), (unique, 0x1000084b, 1) INT_NOTEQUAL (register, 0x80, 8) , (const, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x80, 8) , (unique, 0x1000084c, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3800, 8) , (unique, 0xbd00, 4), (unique, 0xbd00, 4) INT_ADD (unique, 0xbd00, 4) , (const, 0x1, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) CAST (unique, 0x10000ae2, 8), (unique, 0x10000ae2, 8) INT_ADD (unique, 0x10000ada, 8) , (const, 0x14, 8), (unique, 0x10000ada, 8) CAST (register, 0x30, 8)]
[ ---  CBRANCH (ram, 0x462668, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x58c00, 1) , (const, 0x0, 1), (unique, 0x58c00, 1) INT_AND (unique, 0xbb00, 1) , (const, 0x1, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x10000aea, 8), (unique, 0x10000aea, 8) CAST (unique, 0x3800, 8), (unique, 0x3800, 8) PTRADD (register, 0x30, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[(unique, 0x100009f0, 4) COPY (unique, 0x1000086e, 4)]
[ ---  CBRANCH (ram, 0x462412, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESSEQUAL (unique, 0x1000084c, 8) , (register, 0xb8, 8)]
[ ---  CALL (ram, 0x45a730, 8) , (stack, 0xffffffffffffff68, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x418, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x3f2, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x418, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (unique, 0x10000854, 8) , (const, 0x3f2, 4)]
[(stack, 0xffffffffffffffba, 1) INDIRECT (stack, 0xffffffffffffffba, 1) , (const, 0x418, 4), (stack, 0xffffffffffffffba, 1) INDIRECT (unique, 0x10000864, 1) , (const, 0x3f2, 4)]
[(stack, 0xffffffffffffffbf, 1) INDIRECT (stack, 0xffffffffffffffbf, 1) , (const, 0x418, 4), (stack, 0xffffffffffffffbf, 1) INDIRECT (unique, 0x10000865, 1) , (const, 0x3f2, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x418, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (unique, 0x10000866, 8) , (const, 0x3f2, 4)]
[(unique, 0x1000088c, 8) COPY (stack, 0xffffffffffffffb0, 8), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x418, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x3f2, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x30, 8)]
[ ---  CBRANCH (ram, 0x462408, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x4, 4), (register, 0x0, 4) CALLIND (stack, 0xffffffffffffff68, 8) , (unique, 0x3100, 8) , (unique, 0x3100, 8) , (unique, 0x3800, 8) , (unique, 0x1000084c, 8) , (const, 0x0, 8) , (register, 0x88, 8) , (const, 0x0, 8) , (stack, 0x10, 4), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffb0, 8)]
[(unique, 0x100009f4, 4) COPY (unique, 0x1000086e, 4)]
[ ---  CBRANCH (ram, 0x4622f6, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x1000086e, 4) , (const, 0x5, 4)]
[ ---  CBRANCH (ram, 0x462682, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x1000084c, 8) , (stack, 0xffffffffffffffb0, 8)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000af2, 8), (unique, 0x10000af2, 8) CAST (unique, 0x3800, 8), (unique, 0x3800, 8) PTRADD (register, 0x30, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x10, 8) , (register, 0xb0, 8)]
[(unique, 0x100009c4, 8) COPY (register, 0xb0, 8)]
[(unique, 0x100009d4, 8) COPY (register, 0xb8, 8)]
[ ---  CBRANCH (ram, 0x4627ee, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x8, 8) , (register, 0xb0, 8)]
[ ---  CBRANCH (ram, 0x46281e, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESSEQUAL (unique, 0x3100, 8) , (stack, 0xffffffffffffffb0, 8), (unique, 0x3100, 8) PTRADD (register, 0xb8, 8) , (const, 0x1, 8) , (const, 0x4, 8)]
[(unique, 0x100005a9, 4) INT_AND (unique, 0xbc80, 4) , (const, 0x2, 4)]
[ ---  BRANCH (ram, 0x4626cf, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffbf, 1) MULTIEQUAL (stack, 0xffffffffffffffbf, 1) , (stack, 0xffffffffffffffbf, 1)]
[(stack, 0xffffffffffffffba, 1) MULTIEQUAL (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(register, 0x88, 8) MULTIEQUAL (unique, 0x3100, 8) , (unique, 0x3100, 8)]
[(register, 0x80, 8) MULTIEQUAL (unique, 0x100009d4, 8) , (register, 0x80, 8)]
[(register, 0x30, 4) INT_ZEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0xb0, 8), (register, 0xb0, 8) MULTIEQUAL (unique, 0x100009c4, 8) , (unique, 0x100009cc, 8)]
[(register, 0x30, 4) INT_ZEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0xb0, 8), (register, 0xb0, 8) MULTIEQUAL (unique, 0x100009c4, 8) , (unique, 0x100009cc, 8)]
[(unique, 0x10000954, 8) COPY (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb0, 8) , (const, 0x1, 8) , (const, 0x1, 8), (register, 0xb0, 8) MULTIEQUAL (unique, 0x100009c4, 8) , (unique, 0x100009cc, 8)]
[ ---  CBRANCH (ram, 0x4626b0, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (unique, 0x10000afa, 1) , (const, 0x0, 1), (unique, 0x10000afa, 1) CAST (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0xb0, 8), (register, 0xb0, 8) MULTIEQUAL (unique, 0x100009c4, 8) , (unique, 0x100009cc, 8)]
[ ---  CBRANCH (ram, 0x46290f, 1) , (unique, 0xc900, 1), (unique, 0xc900, 1) INT_LESS (register, 0x30, 4) , (const, 0x1e, 4), (register, 0x30, 4) INT_SUB (register, 0x30, 4) , (const, 0xc2, 4)]
[ ---  CBRANCH (ram, 0x462b73, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x30, 1) , (const, 0xe0, 1), (register, 0x30, 1) INT_AND (unique, 0xbb00, 1) , (const, 0xf0, 1)]
[(register, 0x8, 4) INT_AND (register, 0x30, 4) , (const, 0xf, 4)]
[(register, 0x18, 1) COPY (const, 0xb, 1)]
[(register, 0x90, 8) COPY (const, 0x3, 8)]
[ ---  BRANCH (ram, 0x4626fb, 1)]
[ ---  CBRANCH (ram, 0x462ebc, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x30, 1) , (const, 0xf0, 1), (register, 0x30, 1) INT_AND (unique, 0xbb00, 1) , (const, 0xf8, 1)]
[(register, 0x8, 4) INT_AND (register, 0x30, 4) , (const, 0x7, 4)]
[(register, 0x18, 1) COPY (const, 0x10, 1)]
[(register, 0x90, 8) COPY (const, 0x4, 8)]
[ ---  BRANCH (ram, 0x4626fb, 1)]
[ ---  CBRANCH (ram, 0x462f46, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x30, 1) , (const, 0xf8, 1), (register, 0x30, 1) INT_AND (unique, 0xbb00, 1) , (const, 0xfc, 1)]
[(register, 0x8, 4) INT_AND (register, 0x30, 4) , (const, 0x3, 4)]
[(register, 0x18, 1) COPY (const, 0x15, 1)]
[(register, 0x90, 8) COPY (const, 0x5, 8)]
[ ---  BRANCH (ram, 0x4626fb, 1)]
[ ---  CBRANCH (ram, 0x462f8a, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x30, 1) , (const, 0xfc, 1), (register, 0x30, 1) INT_AND (unique, 0xbb00, 1) , (const, 0xfe, 1)]
[(register, 0x8, 4) INT_AND (register, 0x30, 4) , (const, 0x1, 4)]
[(register, 0x18, 1) COPY (const, 0x1a, 1)]
[(register, 0x90, 8) PTRSUB (const, 0x0, 8) , (const, 0x6, 8)]
[ ---  BRANCH (ram, 0x4626fb, 1)]
[(register, 0x90, 8) COPY (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x4627d6, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESSEQUAL (register, 0x8, 8) , (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (register, 0xb0, 8) , (unique, 0x10000afb, 8) , (const, 0x1, 8), (unique, 0x10000afb, 8) CAST (register, 0x90, 8), (register, 0x90, 8) PTRADD (register, 0x90, 8) , (const, 0x1, 8) , (const, 0x1, 8), (register, 0x90, 8) MULTIEQUAL (register, 0x90, 8) , (register, 0x90, 8)]
[ ---  CBRANCH (ram, 0x4627d6, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x8, 1) , (const, 0x80, 1), (register, 0x8, 1) INT_AND (unique, 0xbb00, 1) , (const, 0xc0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (register, 0xb0, 8) , (unique, 0x10000b03, 8) , (const, 0x1, 8), (unique, 0x10000b03, 8) CAST (register, 0x90, 8)]
[ ---  CBRANCH (ram, 0x462f8d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x90, 8) , (const, 0x5, 8)]
[(register, 0x8, 4) INT_AND (register, 0x30, 4) , (const, 0x1f, 4)]
[(register, 0x18, 1) COPY (const, 0x6, 1)]
[(register, 0x90, 8) COPY (const, 0x2, 8)]
[(register, 0x18, 1) MULTIEQUAL (register, 0x18, 1) , (register, 0x18, 1) , (register, 0x18, 1) , (register, 0x18, 1) , (register, 0x18, 1)]
[(register, 0x8, 4) MULTIEQUAL (register, 0x8, 4) , (register, 0x8, 4) , (register, 0x8, 4) , (register, 0x8, 4) , (register, 0x8, 4)]
[ ---  CBRANCH (ram, 0x462a98, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (register, 0x8, 8) , (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (register, 0xb0, 8) , (unique, 0x10000b0b, 8) , (const, 0x1, 8), (unique, 0x10000b0b, 8) CAST (register, 0x90, 8), (register, 0x90, 8) MULTIEQUAL (register, 0x90, 8) , (register, 0x90, 8) , (register, 0x90, 8) , (register, 0x90, 8) , (register, 0x90, 8)]
[(register, 0x30, 4) INT_ZEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb0, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x462b95, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x38, 1) , (const, 0x80, 1), (register, 0x38, 1) INT_AND (unique, 0xbb00, 1) , (const, 0xc0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb0, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[(register, 0x90, 8) COPY (const, 0x1, 8)]
[ ---  BRANCH (ram, 0x4627d6, 1)]
[(register, 0x30, 4) INT_OR (register, 0x30, 4) , (register, 0x8, 4), (register, 0x30, 4) INT_AND (register, 0x30, 4) , (const, 0x3f, 4), (register, 0x8, 4) INT_LEFT (register, 0x8, 4) , (const, 0x6, 4)]
[ ---  CBRANCH (ram, 0x4627c8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x90, 8) , (const, 0x2, 8)]
[(register, 0x38, 4) INT_ZEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb0, 8) , (const, 0x2, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x4627d0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x8, 1) , (const, 0x80, 1), (register, 0x8, 1) INT_AND (unique, 0xbb00, 1) , (const, 0xc0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb0, 8) , (const, 0x2, 8) , (const, 0x1, 8)]
[(register, 0x90, 8) COPY (const, 0x2, 8)]
[(register, 0x30, 4) INT_OR (register, 0x30, 4) , (register, 0x38, 4), (register, 0x38, 4) INT_AND (register, 0x38, 4) , (const, 0x3f, 4), (register, 0x30, 4) INT_LEFT (register, 0x30, 4) , (const, 0x6, 4)]
[ ---  CBRANCH (ram, 0x4627b0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x90, 8) , (const, 0x3, 8)]
[(register, 0x38, 4) INT_ZEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb0, 8) , (const, 0x3, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x462bab, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x8, 1) , (const, 0x80, 1), (register, 0x8, 1) INT_AND (unique, 0xbb00, 1) , (const, 0xc0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb0, 8) , (const, 0x3, 8) , (const, 0x1, 8)]
[(register, 0x90, 8) COPY (const, 0x3, 8)]
[ ---  BRANCH (ram, 0x4627d6, 1)]
[(register, 0x30, 4) INT_OR (register, 0x30, 4) , (register, 0x38, 4), (register, 0x38, 4) INT_AND (register, 0x38, 4) , (const, 0x3f, 4), (register, 0x30, 4) INT_LEFT (register, 0x30, 4) , (const, 0x6, 4)]
[ ---  CBRANCH (ram, 0x4627b0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x90, 8) , (const, 0x4, 8)]
[(register, 0x38, 4) INT_ZEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb0, 8) , (const, 0x4, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x462bd2, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x8, 1) , (const, 0x80, 1), (register, 0x8, 1) INT_AND (unique, 0xbb00, 1) , (const, 0xc0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb0, 8) , (const, 0x4, 8) , (const, 0x1, 8)]
[(register, 0x90, 8) COPY (const, 0x4, 8)]
[ ---  BRANCH (ram, 0x4627d6, 1)]
[(register, 0x30, 4) INT_OR (register, 0x30, 4) , (register, 0x38, 4), (register, 0x38, 4) INT_AND (register, 0x38, 4) , (const, 0x3f, 4), (register, 0x30, 4) INT_LEFT (register, 0x30, 4) , (const, 0x6, 4)]
[ ---  CBRANCH (ram, 0x462ba0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x90, 8) , (unique, 0x100005bd, 8), (unique, 0x100005bd, 8) PTRSUB (const, 0x0, 8) , (const, 0x6, 8)]
[(register, 0x90, 8) COPY (const, 0x5, 8)]
[ ---  BRANCH (ram, 0x4627b0, 1)]
[(register, 0x38, 4) INT_ZEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb0, 8) , (const, 0x5, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x462bc7, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x8, 1) , (const, 0x80, 1), (register, 0x8, 1) INT_AND (unique, 0xbb00, 1) , (const, 0xc0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb0, 8) , (const, 0x5, 8) , (const, 0x1, 8)]
[(register, 0x90, 8) COPY (const, 0x5, 8)]
[ ---  BRANCH (ram, 0x4627d6, 1)]
[(register, 0x30, 4) INT_OR (register, 0x30, 4) , (register, 0x38, 4), (register, 0x38, 4) INT_AND (register, 0x38, 4) , (const, 0x3f, 4), (register, 0x30, 4) INT_LEFT (register, 0x30, 4) , (const, 0x6, 4)]
[(register, 0x90, 8) MULTIEQUAL (register, 0x90, 8) , (register, 0x90, 8) , (register, 0x90, 8) , (register, 0x90, 8)]
[ ---  CBRANCH (ram, 0x4627d6, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x59200, 4) , (const, 0x0, 4), (unique, 0x59200, 4) INT_RIGHT (register, 0x30, 4) , (register, 0x18, 1), (register, 0x30, 4) MULTIEQUAL (register, 0x30, 4) , (register, 0x30, 4) , (register, 0x30, 4) , (register, 0x30, 4)]
[ ---  CBRANCH (ram, 0x4627d6, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (const, 0x7ff, 4) , (unique, 0x3200, 4), (unique, 0x3200, 4) INT_SUB (register, 0x30, 4) , (const, 0xd800, 4)]
[ ---  CBRANCH (ram, 0x462eb1, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (unique, 0x3100, 8) , (register, 0x8, 8)]
[(register, 0x90, 8) COPY (const, 0x1, 8)]
[ ---  BRANCH (ram, 0x462ac7, 1)]
[(register, 0x90, 8) COPY (const, 0x1, 8)]
[(register, 0x30, 8) PTRADD (register, 0x8, 8) , (unique, 0x10000346, 8) , (const, 0x1, 8), (unique, 0x10000346, 8) INT_2COMP (unique, 0x10000b13, 8), (unique, 0x10000b13, 8) CAST (register, 0xb0, 8)]
[ ---  BRANCH (ram, 0x462abc, 1)]
[(register, 0x90, 8) MULTIEQUAL (register, 0x90, 8) , (register, 0x90, 8)]
[ ---  CBRANCH (ram, 0x462aaf, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x8, 1) , (const, 0x80, 1), (register, 0x8, 1) INT_AND (unique, 0xbb00, 1) , (const, 0xc0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0x38, 8), (register, 0x38, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0x38, 8)]
[(register, 0x38, 8) PTRADD (register, 0x38, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x462ac7, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x90, 8) , (register, 0x30, 8), (register, 0x90, 8) PTRADD (register, 0x90, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[(register, 0x90, 8) MULTIEQUAL (register, 0x90, 8) , (register, 0x90, 8) , (register, 0x90, 8)]
[ ---  CBRANCH (ram, 0x4627eb, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x8, 8) , (register, 0x38, 8), (register, 0x38, 8) MULTIEQUAL (register, 0x38, 8) , (register, 0x38, 8) , (unique, 0x3100, 8)]
[(register, 0x90, 8) MULTIEQUAL (register, 0x90, 8) , (register, 0x90, 8) , (register, 0x90, 8) , (register, 0x90, 8) , (register, 0x90, 8) , (register, 0x90, 8) , (register, 0x90, 8) , (register, 0x90, 8) , (register, 0x90, 8) , (register, 0x90, 8) , (register, 0x90, 8)]
[ ---  CBRANCH (ram, 0x4627eb, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x46293c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x100005a9, 4) , (const, 0x0, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x8fc, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x8fc, 4)]
[(stack, 0xffffffffffffffba, 1) INDIRECT (stack, 0xffffffffffffffba, 1) , (const, 0x8fc, 4)]
[(stack, 0xffffffffffffffbf, 1) INDIRECT (stack, 0xffffffffffffffbf, 1) , (const, 0x8fc, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x8fc, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x0, 8) , (unique, 0xbe00, 8), (unique, 0xbe00, 8) INT_ADD (unique, 0xbe00, 8) , (const, 0x1, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (register, 0x0, 8)]
[(register, 0xb0, 8) PTRADD (register, 0xb0, 8) , (unique, 0x10000b1b, 8) , (const, 0x1, 8), (unique, 0x10000b1b, 8) CAST (register, 0x90, 8)]
[ ---  BRANCH (ram, 0x4626b9, 1)]
[(register, 0x38, 8) MULTIEQUAL (unique, 0x10000954, 8) , (unique, 0x3400, 8) , (unique, 0x3400, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x80, 8) , (register, 0x30, 4), (register, 0x30, 4) MULTIEQUAL (register, 0x30, 4) , (register, 0x30, 4) , (register, 0x30, 4)]
[(unique, 0x10000984, 8) COPY (register, 0x88, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffbf, 1) MULTIEQUAL (stack, 0xffffffffffffffbf, 1) , (stack, 0xffffffffffffffbf, 1)]
[(stack, 0xffffffffffffffba, 1) MULTIEQUAL (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(register, 0x80, 8) MULTIEQUAL (unique, 0x10000984, 8) , (register, 0x80, 8)]
[(unique, 0x100009cc, 8) COPY (register, 0xb0, 8), (register, 0xb0, 8) MULTIEQUAL (register, 0x38, 8) , (register, 0xb0, 8)]
[ ---  CBRANCH (ram, 0x4627eb, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x8, 8) , (register, 0xb0, 8), (register, 0xb0, 8) MULTIEQUAL (register, 0x38, 8) , (register, 0xb0, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffbf, 1) MULTIEQUAL (stack, 0xffffffffffffffbf, 1) , (stack, 0xffffffffffffffbf, 1) , (stack, 0xffffffffffffffbf, 1) , (stack, 0xffffffffffffffbf, 1) , (stack, 0xffffffffffffffbf, 1)]
[(stack, 0xffffffffffffffba, 1) MULTIEQUAL (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x10, 8) , (register, 0xb0, 8), (register, 0xb0, 8) MULTIEQUAL (unique, 0x100009c4, 8) , (unique, 0x100009cc, 8) , (register, 0xb0, 8) , (register, 0xb0, 8) , (register, 0xb0, 8)]
[ ---  CBRANCH (ram, 0x462e42, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xb8, 8) , (unique, 0x1000088c, 8), (register, 0xb8, 8) MULTIEQUAL (unique, 0x100009d4, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x8d8, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x8d8, 4)]
[(stack, 0xffffffffffffffba, 1) INDIRECT (stack, 0xffffffffffffffba, 1) , (const, 0x8d8, 4)]
[(stack, 0xffffffffffffffbf, 1) INDIRECT (stack, 0xffffffffffffffbf, 1) , (const, 0x8d8, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x8d8, 4)]
[ ---  CALL (ram, 0x403170, 8) , (unique, 0x1000063d, 8) , (unique, 0x100005d5, 8) , (const, 0x2eb, 4) , (unique, 0x10000665, 8), (unique, 0x10000665, 8) COPY (const, 0x49f740, 8), (unique, 0x1000063d, 8) COPY (const, 0x49f500, 8), (unique, 0x100005d5, 8) COPY (const, 0x49f45a, 8)]
[ ---  RETURN (const, 0x1, 4)]
[(unique, 0x1000098c, 8) COPY (register, 0x80, 8)]
[ ---  CBRANCH (ram, 0x462821, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESSEQUAL (unique, 0x3100, 8) , (unique, 0x1000088c, 8), (unique, 0x3100, 8) PTRADD (register, 0x80, 8) , (const, 0x1, 8) , (const, 0x4, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffbf, 1) MULTIEQUAL (stack, 0xffffffffffffffbf, 1) , (stack, 0xffffffffffffffbf, 1)]
[(stack, 0xffffffffffffffba, 1) MULTIEQUAL (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x10, 8) , (register, 0xb0, 8), (register, 0xb0, 8) MULTIEQUAL (register, 0xb0, 8) , (register, 0xb0, 8)]
[ ---  CBRANCH (ram, 0x4627ff, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x80, 8) , (unique, 0x1000088c, 8), (register, 0x80, 8) MULTIEQUAL (unique, 0x1000098c, 8) , (unique, 0x100009d4, 8)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x8bf, 4), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x8bf, 4), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffba, 1) INDIRECT (stack, 0xffffffffffffffba, 1) , (const, 0x8bf, 4), (stack, 0xffffffffffffffba, 1) MULTIEQUAL (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1)]
[(stack, 0xffffffffffffffbf, 1) INDIRECT (stack, 0xffffffffffffffbf, 1) , (const, 0x8bf, 4), (stack, 0xffffffffffffffbf, 1) MULTIEQUAL (stack, 0xffffffffffffffbf, 1) , (stack, 0xffffffffffffffbf, 1)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x8bf, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CALL (ram, 0x403170, 8) , (unique, 0x100005fd, 8) , (unique, 0x100005c5, 8) , (const, 0x2ea, 4) , (unique, 0x10000655, 8), (unique, 0x10000655, 8) COPY (const, 0x49f740, 8), (unique, 0x100005fd, 8) COPY (const, 0x49f482, 8), (unique, 0x100005c5, 8) COPY (const, 0x49f45a, 8)]
[ ---  RETURN (const, 0x1, 4)]
[ ---  CBRANCH (ram, 0x4622ee, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x80, 8) , (register, 0xb8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3800, 8) , (unique, 0xbd00, 4), (unique, 0xbd00, 4) INT_ADD (unique, 0xbd00, 4) , (const, 0xffffffff, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) CAST (unique, 0x10000b2b, 8), (unique, 0x10000b2b, 8) INT_ADD (unique, 0x10000b23, 8) , (const, 0x14, 8), (unique, 0x10000b23, 8) CAST (register, 0x30, 8)]
[ ---  BRANCH (ram, 0x4622ee, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffbf, 1) MULTIEQUAL (stack, 0xffffffffffffffbf, 1) , (stack, 0xffffffffffffffbf, 1) , (stack, 0xffffffffffffffbf, 1)]
[(stack, 0xffffffffffffffba, 1) MULTIEQUAL (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(unique, 0x100009f8, 4) COPY (register, 0x0, 4)]
[ ---  CBRANCH (ram, 0x462f3e, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffbf, 1) MULTIEQUAL (stack, 0xffffffffffffffbf, 1) , (stack, 0xffffffffffffffbf, 1)]
[(stack, 0xffffffffffffffba, 1) MULTIEQUAL (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000b33, 8), (unique, 0x10000b33, 8) CAST (unique, 0x3800, 8), (unique, 0x3800, 8) PTRADD (register, 0x30, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x10, 8)]
[(unique, 0x100009dc, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x30, 8)]
[ ---  BRANCH (ram, 0x4620f8, 1)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x30, 8) , (unique, 0x1000084c, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x88, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) INT_ADD (unique, 0xbd80, 8) , (unique, 0x10000854, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x88, 8)]
[(unique, 0x100009ec, 4) COPY (unique, 0x1000086e, 4)]
[ ---  BRANCH (ram, 0x462416, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (unique, 0x10000866, 8) , (unique, 0x10000866, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffbf, 1) MULTIEQUAL (unique, 0x10000865, 1) , (unique, 0x10000865, 1) , (stack, 0xffffffffffffffbf, 1) , (stack, 0xffffffffffffffbf, 1)]
[(stack, 0xffffffffffffffba, 1) MULTIEQUAL (unique, 0x10000864, 1) , (unique, 0x10000864, 1) , (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (unique, 0x1000085c, 8) , (unique, 0x1000085c, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (unique, 0x10000854, 8) , (unique, 0x10000854, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb8, 4) MULTIEQUAL (unique, 0x100009ec, 4) , (unique, 0x100009f0, 4) , (unique, 0x100009f4, 4) , (unique, 0x100009f8, 4)]
[ ---  CBRANCH (ram, 0x462337, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0x10, 4) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x462337, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xb8, 4) , (const, 0x7, 4)]
[(register, 0x10, 4) INT_ZEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x10, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0xbd80, 8) , (register, 0x88, 4), (register, 0x88, 4) INT_SUB (unique, 0x10000190, 4) , (unique, 0x10000198, 4), (unique, 0x10000190, 4) SUBPIECE (register, 0x8, 8) , (const, 0x0, 4), (unique, 0x10000198, 4) SUBPIECE (unique, 0xbd80, 8) , (const, 0x0, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x10, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRADD (register, 0x30, 8) , (const, 0x4, 8) , (const, 0x8, 8)]
[(register, 0x10, 4) INT_ZEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x10, 8)]
[ ---  CBRANCH (ram, 0x462e92, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (register, 0x8, 4) , (const, 0x2, 4), (register, 0x8, 4) INT_SUB (unique, 0x100001a0, 4) , (const, 0xc0, 4), (unique, 0x100001a0, 4) INT_ZEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x10, 8)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x5eb, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x5eb, 4)]
[(stack, 0xffffffffffffffba, 1) INDIRECT (stack, 0xffffffffffffffba, 1) , (const, 0x5eb, 4)]
[(stack, 0xffffffffffffffbf, 1) INDIRECT (stack, 0xffffffffffffffbf, 1) , (const, 0x5eb, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x5eb, 4)]
[ ---  CALL (ram, 0x403170, 8) , (unique, 0x10000625, 8) , (unique, 0x100005dd, 8) , (const, 0x31a, 4) , (unique, 0x1000066d, 8), (unique, 0x1000066d, 8) COPY (const, 0x49f740, 8), (unique, 0x10000625, 8) COPY (const, 0x49f4dc, 8), (unique, 0x100005dd, 8) COPY (const, 0x49f45a, 8)]
[ ---  RETURN (const, 0x1, 4)]
[ ---  CBRANCH (ram, 0x462b23, 1) , (unique, 0xc900, 1), (unique, 0xc900, 1) INT_LESS (register, 0x10, 4) , (const, 0x1e, 4), (register, 0x10, 4) INT_SUB (register, 0x10, 4) , (const, 0xc2, 4)]
[ ---  CBRANCH (ram, 0x462d57, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x10, 1) , (const, 0xe0, 1), (register, 0x10, 1) INT_AND (unique, 0xbb00, 1) , (const, 0xf0, 1)]
[ ---  CBRANCH (ram, 0x462dc4, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x10, 1) , (const, 0xf0, 1), (register, 0x10, 1) INT_AND (unique, 0xbb00, 1) , (const, 0xf8, 1)]
[ ---  CBRANCH (ram, 0x462df8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x10, 1) , (const, 0xf8, 1), (register, 0x10, 1) INT_AND (unique, 0xbb00, 1) , (const, 0xfc, 1)]
[(register, 0x0, 4) INT_AND (register, 0x10, 4) , (const, 0x1, 4)]
[(register, 0x8, 1) COPY (const, 0x1e, 1)]
[(register, 0x90, 1) COPY (const, 0x5, 1)]
[(register, 0x38, 4) COPY (const, 0x600, 4)]
[ ---  BRANCH (ram, 0x46247c, 1)]
[(register, 0x0, 4) INT_AND (register, 0x10, 4) , (const, 0x3, 4)]
[(register, 0x8, 1) COPY (const, 0x18, 1)]
[(register, 0x90, 1) COPY (const, 0x4, 1)]
[(register, 0x38, 4) COPY (const, 0x500, 4)]
[ ---  BRANCH (ram, 0x46247c, 1)]
[(register, 0x0, 4) INT_AND (register, 0x10, 4) , (const, 0x7, 4)]
[(register, 0x8, 1) COPY (const, 0x12, 1)]
[(register, 0x90, 1) COPY (const, 0x3, 1)]
[(register, 0x38, 4) COPY (const, 0x400, 4)]
[ ---  BRANCH (ram, 0x46247c, 1)]
[(register, 0x0, 4) INT_AND (register, 0x10, 4) , (const, 0xf, 4)]
[(register, 0x8, 1) COPY (const, 0xc, 1)]
[(register, 0x90, 1) COPY (const, 0x2, 1)]
[(register, 0x38, 4) COPY (const, 0x300, 4)]
[ ---  BRANCH (ram, 0x46247c, 1)]
[(register, 0x0, 4) INT_AND (register, 0x10, 4) , (const, 0x1f, 4)]
[(register, 0x8, 1) COPY (const, 0x6, 1)]
[(register, 0x90, 1) COPY (const, 0x1, 1)]
[(register, 0x38, 4) COPY (const, 0x200, 4)]
[(register, 0x90, 1) MULTIEQUAL (register, 0x90, 1) , (register, 0x90, 1) , (register, 0x90, 1) , (register, 0x90, 1) , (register, 0x90, 1)]
[(register, 0x8, 1) MULTIEQUAL (register, 0x8, 1) , (register, 0x8, 1) , (register, 0x8, 1) , (register, 0x8, 1) , (register, 0x8, 1)]
[(register, 0x38, 4) MULTIEQUAL (register, 0x38, 4) , (register, 0x38, 4) , (register, 0x38, 4) , (register, 0x38, 4) , (register, 0x38, 4)]
[(register, 0x0, 4) MULTIEQUAL (register, 0x0, 4) , (register, 0x0, 4) , (register, 0x0, 4) , (register, 0x0, 4) , (register, 0x0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x10, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x4624b1, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (unique, 0x3100, 8) , (register, 0x8, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x10, 8) , (register, 0x10, 8), (register, 0x10, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x1, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0x10, 8)]
[(register, 0x0, 4) INT_OR (register, 0x0, 4) , (register, 0x8, 4), (register, 0x8, 4) INT_AND (register, 0x8, 4) , (const, 0x3f, 4), (register, 0x8, 4) INT_ZEXT (unique, 0xbb00, 1), (register, 0x0, 4) INT_LEFT (register, 0x0, 4) , (const, 0x6, 4), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0x10, 8), (register, 0x0, 4) MULTIEQUAL (register, 0x0, 4) , (register, 0x0, 4), (register, 0x10, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0x10, 8)]
[ ---  CBRANCH (ram, 0x46248d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x10, 8) , (register, 0x8, 8), (register, 0x10, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x1, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0x10, 8)]
[(unique, 0x100004be, 1) INT_MULT (unique, 0x10000555, 1) , (const, 0x6, 1), (unique, 0x10000555, 1) INT_ADD (unique, 0x10000557, 1) , (unique, 0x10000558, 1), (unique, 0x10000557, 1) INT_ADD (register, 0x90, 1) , (const, 0x1, 1), (unique, 0x10000558, 1) INT_SUB (unique, 0x1000055b, 1) , (unique, 0x1000055d, 1), (unique, 0x1000055b, 1) SUBPIECE (unique, 0xbd80, 8) , (const, 0x0, 4), (unique, 0x1000055d, 1) SUBPIECE (register, 0x10, 8) , (const, 0x0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0xbd80, 8) , (register, 0x38, 4), (register, 0x38, 4) INT_OR (register, 0x38, 4) , (register, 0x88, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (register, 0x0, 4), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x1, 8) , (const, 0x4, 8), (register, 0x0, 4) INT_LEFT (register, 0x0, 4) , (unique, 0x53100, 1), (unique, 0x53100, 1) INT_AND (register, 0x8, 1) , (const, 0x1f, 1), (register, 0x0, 4) MULTIEQUAL (register, 0x0, 4) , (register, 0x0, 4), (register, 0x8, 1) MULTIEQUAL (register, 0x8, 1) , (unique, 0x100004be, 1)]
[ ---  BRANCH (ram, 0x462337, 1)]
[(stack, 0xffffffffffffffbf, 1) MULTIEQUAL (unique, 0x10000865, 1) , (stack, 0xffffffffffffffbf, 1) , (stack, 0xffffffffffffffbf, 1) , (stack, 0xffffffffffffffbf, 1) , (stack, 0xffffffffffffffbf, 1) , (stack, 0xffffffffffffffbf, 1) , (stack, 0xffffffffffffffbf, 1) , (stack, 0xffffffffffffffbf, 1) , (stack, 0xffffffffffffffbf, 1)]
[(stack, 0xffffffffffffffba, 1) MULTIEQUAL (unique, 0x10000864, 1) , (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1) , (stack, 0xffffffffffffffba, 1)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (unique, 0x1000085c, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (unique, 0x10000854, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(register, 0xb8, 4) MULTIEQUAL (unique, 0x1000086e, 4) , (register, 0xb8, 4) , (register, 0xb8, 4) , (register, 0xb8, 4) , (register, 0xb8, 4) , (register, 0xb8, 4) , (register, 0xb8, 4) , (register, 0xb8, 4) , (register, 0x0, 4)]
[ ---  CBRANCH (ram, 0x462e8d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffffc0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10000b3b, 8), (unique, 0x10000b3b, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (unique, 0x10000866, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 4), (register, 0x0, 4) COPY (register, 0xb8, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x3bc, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x3bc, 4)]
[(stack, 0xffffffffffffffba, 1) INDIRECT (stack, 0xffffffffffffffba, 1) , (const, 0x3bc, 4)]
[(stack, 0xffffffffffffffbf, 1) INDIRECT (stack, 0xffffffffffffffbf, 1) , (const, 0x3bc, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x3bc, 4)]
[ ---  CALL (ram, 0x458dd0, 8)]
[ ---  RETURN (const, 0x1, 4)]
