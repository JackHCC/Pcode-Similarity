[(unique, 0x100001d5, 8) COPY (unique, 0x100002fd, 8), (unique, 0x100002fd, 8) CAST (ram, 0x4c2fb0, 8)]
[ ---  CBRANCH (ram, 0x16b4df, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 1) , (const, 0x0, 1)]
[(unique, 0x100002dd, 4) COPY (register, 0x1200, 4)]
[(unique, 0x100002e1, 4) COPY (register, 0x1220, 4)]
[(unique, 0x100002e5, 4) COPY (register, 0x1240, 4)]
[(unique, 0x100002e9, 4) COPY (register, 0x1260, 4)]
[(unique, 0x100002ed, 4) COPY (register, 0x1280, 4)]
[(unique, 0x100002f1, 4) COPY (register, 0x12a0, 4)]
[(unique, 0x100002f5, 4) COPY (register, 0x12c0, 4)]
[(unique, 0x100002f9, 4) COPY (register, 0x12e0, 4)]
[(stack, 0xffffffffffffffe8, 4) MULTIEQUAL (stack, 0xffffffffffffffe8, 4) , (unique, 0x100002f9, 4)]
[(stack, 0xffffffffffffffd8, 4) MULTIEQUAL (stack, 0xffffffffffffffd8, 4) , (unique, 0x100002f5, 4)]
[(stack, 0xffffffffffffffc8, 4) MULTIEQUAL (stack, 0xffffffffffffffc8, 4) , (unique, 0x100002f1, 4)]
[(stack, 0xffffffffffffffb8, 4) MULTIEQUAL (stack, 0xffffffffffffffb8, 4) , (unique, 0x100002ed, 4)]
[(stack, 0xffffffffffffffa8, 4) MULTIEQUAL (stack, 0xffffffffffffffa8, 4) , (unique, 0x100002e9, 4)]
[(stack, 0xffffffffffffff98, 4) MULTIEQUAL (stack, 0xffffffffffffff98, 4) , (unique, 0x100002e5, 4)]
[(stack, 0xffffffffffffff88, 4) MULTIEQUAL (stack, 0xffffffffffffff88, 4) , (unique, 0x100002e1, 4)]
[(stack, 0xffffffffffffff78, 4) MULTIEQUAL (stack, 0xffffffffffffff78, 4) , (unique, 0x100002dd, 4)]
[(unique, 0x100001ed, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000305, 8), (unique, 0x10000305, 8) CAST (ram, 0x4c2fb0, 8)]
[(unique, 0x10000235, 8) COPY (register, 0x30, 8)]
[(unique, 0x1000025d, 8) COPY (register, 0x10, 8)]
[(unique, 0x10000285, 8) COPY (register, 0x8, 8)]
[(unique, 0x100002ad, 8) COPY (register, 0x80, 8)]
[(unique, 0x100002d5, 8) COPY (register, 0x88, 8)]
[ ---  CBRANCH (ram, 0x16b552, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) INT_AND (unique, 0xbc80, 4) , (const, 0x8000, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x1000014d, 8), (unique, 0x1000014d, 8) PTRSUB (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000305, 8), (unique, 0x10000305, 8) CAST (ram, 0x4c2fb0, 8)]
[ ---  CBRANCH (ram, 0x16b5f0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x1000031d, 8), (unique, 0x1000031d, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x2, 8) , (const, 0x4, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10000315, 8), (unique, 0x10000315, 8) INT_ADD (register, 0x110, 8) , (const, 0x10, 8), (unique, 0xbd80, 8) CAST (unique, 0x1000030d, 8), (unique, 0x1000030d, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) PTRSUB (unique, 0xbd80, 8) , (const, 0x88, 8)]
[ ---  CBRANCH (ram, 0x16b525, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4c87a0, 4) , (const, 0x0, 4)]
[ ---  CBRANCH (const, 0x5, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0xbd80, 8)]
[(ram, 0x4c2fb0, 8) INDIRECT (ram, 0x4c2fb0, 8) , (const, 0x182, 4)]
[(ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x182, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0xbd80, 8) , (const, 0x1, 4)]
[ ---  CALLOTHER (const, 0x11, 4)]
[ ---  CBRANCH (const, 0x5, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0xbd80, 8)]
[(ram, 0x4c2fb0, 8) INDIRECT (ram, 0x4c2fb0, 8) , (const, 0x84, 4)]
[(ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x84, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0xbd80, 8) , (const, 0x1, 4)]
[ ---  BRANCH (ram, 0x16b540, 1)]
[(register, 0x80, 8) INDIRECT (unique, 0x100001d5, 8) , (const, 0x165, 4)]
[(register, 0x88, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x165, 4)]
[(register, 0x90, 8) INDIRECT (register, 0x38, 8) , (const, 0x165, 4)]
[(ram, 0x4c2fb0, 8) INDIRECT (ram, 0x4c2fb0, 8) , (const, 0x165, 4)]
[(ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x165, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (unique, 0x10000235, 8) , (const, 0x165, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (unique, 0x1000025d, 8) , (const, 0x165, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (unique, 0x10000285, 8) , (const, 0x165, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (unique, 0x100002ad, 8) , (const, 0x165, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (unique, 0x100002d5, 8) , (const, 0x165, 4)]
[(stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0x165, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x165, 4)]
[(stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0x165, 4)]
[(stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0x165, 4)]
[(stack, 0xffffffffffffffb8, 4) INDIRECT (stack, 0xffffffffffffffb8, 4) , (const, 0x165, 4)]
[(stack, 0xffffffffffffffc8, 4) INDIRECT (stack, 0xffffffffffffffc8, 4) , (const, 0x165, 4)]
[(stack, 0xffffffffffffffd8, 4) INDIRECT (stack, 0xffffffffffffffd8, 4) , (const, 0x165, 4)]
[(stack, 0xffffffffffffffe8, 4) INDIRECT (stack, 0xffffffffffffffe8, 4) , (const, 0x165, 4)]
[ ---  CALL (ram, 0x2147c0, 8) , (unique, 0xbd80, 8)]
[(stack, 0xffffffffffffffe8, 4) MULTIEQUAL (stack, 0xffffffffffffffe8, 4) , (stack, 0xffffffffffffffe8, 4) , (stack, 0xffffffffffffffe8, 4)]
[(stack, 0xffffffffffffffd8, 4) MULTIEQUAL (stack, 0xffffffffffffffd8, 4) , (stack, 0xffffffffffffffd8, 4) , (stack, 0xffffffffffffffd8, 4)]
[(stack, 0xffffffffffffffc8, 4) MULTIEQUAL (stack, 0xffffffffffffffc8, 4) , (stack, 0xffffffffffffffc8, 4) , (stack, 0xffffffffffffffc8, 4)]
[(stack, 0xffffffffffffffb8, 4) MULTIEQUAL (stack, 0xffffffffffffffb8, 4) , (stack, 0xffffffffffffffb8, 4) , (stack, 0xffffffffffffffb8, 4)]
[(stack, 0xffffffffffffffa8, 4) MULTIEQUAL (stack, 0xffffffffffffffa8, 4) , (stack, 0xffffffffffffffa8, 4) , (stack, 0xffffffffffffffa8, 4)]
[(stack, 0xffffffffffffff98, 4) MULTIEQUAL (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4)]
[(stack, 0xffffffffffffff88, 4) MULTIEQUAL (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4)]
[(stack, 0xffffffffffffff78, 4) MULTIEQUAL (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (unique, 0x100002d5, 8) , (stack, 0xffffffffffffff70, 8) , (unique, 0x100002d5, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (unique, 0x100002ad, 8) , (stack, 0xffffffffffffff68, 8) , (unique, 0x100002ad, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (unique, 0x10000285, 8) , (stack, 0xffffffffffffff60, 8) , (unique, 0x10000285, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (unique, 0x1000025d, 8) , (stack, 0xffffffffffffff58, 8) , (unique, 0x1000025d, 8)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (unique, 0x10000235, 8) , (stack, 0xffffffffffffff50, 8) , (unique, 0x10000235, 8)]
[(register, 0x90, 8) MULTIEQUAL (register, 0x38, 8) , (register, 0x90, 8) , (register, 0x38, 8)]
[(ram, 0x4c2fb0, 8) INDIRECT (ram, 0x4c2fb0, 8) , (const, 0x8f, 4), (ram, 0x4c2fb0, 8) MULTIEQUAL (ram, 0x4c2fb0, 8) , (ram, 0x4c2fb0, 8) , (ram, 0x4c2fb0, 8)]
[(ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x8f, 4), (ram, 0x4c87a0, 4) MULTIEQUAL (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000032d, 8) , (register, 0x88, 8), (unique, 0x1000032d, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x2, 8) , (const, 0x4, 8), (unique, 0xbd80, 8) CAST (unique, 0x10000325, 8), (unique, 0x10000325, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) PTRSUB (unique, 0xbd80, 8) , (const, 0x88, 8), (register, 0x88, 8) MULTIEQUAL (unique, 0xbd80, 8) , (register, 0x88, 8) , (unique, 0xbd80, 8)]
[(unique, 0x100001dd, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x80, 8), (register, 0x80, 8) MULTIEQUAL (unique, 0x100001d5, 8) , (register, 0x80, 8) , (unique, 0x100001d5, 8)]
[(unique, 0x100001fd, 8) COPY (register, 0x80, 8), (register, 0x80, 8) MULTIEQUAL (unique, 0x100001d5, 8) , (register, 0x80, 8) , (unique, 0x100001d5, 8)]
[(stack, 0xffffffffffffffe8, 4) MULTIEQUAL (stack, 0xffffffffffffffe8, 4) , (stack, 0xffffffffffffffe8, 4)]
[(stack, 0xffffffffffffffd8, 4) MULTIEQUAL (stack, 0xffffffffffffffd8, 4) , (stack, 0xffffffffffffffd8, 4)]
[(stack, 0xffffffffffffffc8, 4) MULTIEQUAL (stack, 0xffffffffffffffc8, 4) , (stack, 0xffffffffffffffc8, 4)]
[(stack, 0xffffffffffffffb8, 4) MULTIEQUAL (stack, 0xffffffffffffffb8, 4) , (stack, 0xffffffffffffffb8, 4)]
[(stack, 0xffffffffffffffa8, 4) MULTIEQUAL (stack, 0xffffffffffffffa8, 4) , (stack, 0xffffffffffffffa8, 4)]
[(stack, 0xffffffffffffff98, 4) MULTIEQUAL (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4)]
[(stack, 0xffffffffffffff88, 4) MULTIEQUAL (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4)]
[(stack, 0xffffffffffffff78, 4) MULTIEQUAL (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (unique, 0x100002d5, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (unique, 0x100002ad, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (unique, 0x10000285, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (unique, 0x1000025d, 8)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (unique, 0x10000235, 8)]
[(register, 0x90, 8) MULTIEQUAL (register, 0x90, 8) , (register, 0x38, 8)]
[(register, 0x80, 8) MULTIEQUAL (unique, 0x100001fd, 8) , (unique, 0x100001d5, 8)]
[(register, 0x8, 8) MULTIEQUAL (unique, 0x100001dd, 8) , (unique, 0x100001ed, 8)]
[(ram, 0x4c2fb0, 8) INDIRECT (ram, 0x4c2fb0, 8) , (const, 0x97, 4), (ram, 0x4c2fb0, 8) MULTIEQUAL (ram, 0x4c2fb0, 8) , (ram, 0x4c2fb0, 8)]
[(ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x97, 4), (ram, 0x4c87a0, 4) MULTIEQUAL (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0xbd00, 4), (unique, 0xbd00, 4) INT_ADD (unique, 0xbd00, 4) , (const, 0x1, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x4, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0xbd00, 4), (unique, 0xbd00, 4) INT_OR (unique, 0xbd00, 4) , (const, 0x10, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0x8, 8) , (const, 0x74, 8), (register, 0x8, 8) MULTIEQUAL (unique, 0x100001ed, 8) , (register, 0x8, 8)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0xd1, 4), (stack, 0xffffffffffffff30, 4) COPY (const, 0x8, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0xd1, 4), (stack, 0xffffffffffffff34, 4) COPY (const, 0x30, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (unique, 0x3c80, 8) , (const, 0xd1, 4), (unique, 0x3c80, 8) PTRSUB (register, 0x20, 8) , (const, 0x8, 8)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (unique, 0x3800, 8) , (const, 0xd1, 4), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0xd1, 4), (stack, 0xffffffffffffff50, 8) MULTIEQUAL (unique, 0x10000235, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0xd1, 4), (stack, 0xffffffffffffff58, 8) MULTIEQUAL (unique, 0x1000025d, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0xd1, 4), (stack, 0xffffffffffffff60, 8) MULTIEQUAL (unique, 0x10000285, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0xd1, 4), (stack, 0xffffffffffffff68, 8) MULTIEQUAL (unique, 0x100002ad, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0xd1, 4), (stack, 0xffffffffffffff70, 8) MULTIEQUAL (unique, 0x100002d5, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0xd1, 4), (stack, 0xffffffffffffff78, 4) MULTIEQUAL (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0xd1, 4), (stack, 0xffffffffffffff88, 4) MULTIEQUAL (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4)]
[(stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0xd1, 4), (stack, 0xffffffffffffff98, 4) MULTIEQUAL (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4)]
[(stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0xd1, 4), (stack, 0xffffffffffffffa8, 4) MULTIEQUAL (stack, 0xffffffffffffffa8, 4) , (stack, 0xffffffffffffffa8, 4)]
[(stack, 0xffffffffffffffb8, 4) INDIRECT (stack, 0xffffffffffffffb8, 4) , (const, 0xd1, 4), (stack, 0xffffffffffffffb8, 4) MULTIEQUAL (stack, 0xffffffffffffffb8, 4) , (stack, 0xffffffffffffffb8, 4)]
[(stack, 0xffffffffffffffc8, 4) INDIRECT (stack, 0xffffffffffffffc8, 4) , (const, 0xd1, 4), (stack, 0xffffffffffffffc8, 4) MULTIEQUAL (stack, 0xffffffffffffffc8, 4) , (stack, 0xffffffffffffffc8, 4)]
[(stack, 0xffffffffffffffd8, 4) INDIRECT (stack, 0xffffffffffffffd8, 4) , (const, 0xd1, 4), (stack, 0xffffffffffffffd8, 4) MULTIEQUAL (stack, 0xffffffffffffffd8, 4) , (stack, 0xffffffffffffffd8, 4)]
[(stack, 0xffffffffffffffe8, 4) INDIRECT (stack, 0xffffffffffffffe8, 4) , (const, 0xd1, 4), (stack, 0xffffffffffffffe8, 4) MULTIEQUAL (stack, 0xffffffffffffffe8, 4) , (stack, 0xffffffffffffffe8, 4)]
[(ram, 0x4c2fb0, 8) INDIRECT (ram, 0x4c2fb0, 8) , (const, 0xd7, 4), (ram, 0x4c2fb0, 8) INDIRECT (ram, 0x4c2fb0, 8) , (const, 0xd1, 4), (ram, 0x4c2fb0, 8) INDIRECT (ram, 0x4c2fb0, 8) , (const, 0xa8, 4), (ram, 0x4c2fb0, 8) MULTIEQUAL (ram, 0x4c2fb0, 8) , (ram, 0x4c2fb0, 8)]
[(ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0xd7, 4), (ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0xd1, 4), (ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0xa8, 4), (ram, 0x4c87a0, 4) MULTIEQUAL (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0xbc80, 4), (unique, 0xbc80, 4) INT_AND (unique, 0xbc80, 4) , (const, 0xffffffeb, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (unique, 0xbd80, 8) , (const, 0x74, 8)]
[(register, 0x30, 8) INT_ZEXT (register, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x15b830, 8) , (unique, 0xbd80, 8) , (register, 0x90, 8) , (unique, 0x3800, 8) , (const, 0x0, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff30, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x80, 8), (register, 0x80, 8) MULTIEQUAL (unique, 0x100001d5, 8) , (register, 0x80, 8), (register, 0x90, 8) MULTIEQUAL (register, 0x38, 8) , (register, 0x90, 8)]
[ ---  CBRANCH (ram, 0x16b5dc, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x58e00, 4) , (const, 0x0, 4), (unique, 0x58e00, 4) INT_AND (unique, 0xbd00, 4) , (const, 0x8000, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100001a5, 8), (unique, 0x100001a5, 8) PTRSUB (unique, 0xbd80, 8) , (const, 0x0, 8)]
[(ram, 0x4c2fb0, 8) INDIRECT (ram, 0x4c2fb0, 8) , (const, 0xf9, 4)]
[(ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0xf9, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0xbd00, 4), (unique, 0xbd00, 4) INT_ADD (unique, 0xbd00, 4) , (const, 0xffffffff, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x1, 8) , (const, 0x4, 8), (unique, 0xbd80, 8) CAST (unique, 0x10000335, 8), (unique, 0x10000335, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) PTRSUB (unique, 0xbd80, 8) , (const, 0x88, 8)]
[ ---  CBRANCH (ram, 0x16b5dc, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd00, 4) , (const, 0x0, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x1, 8) , (const, 0x4, 8), (unique, 0xbd80, 8) CAST (unique, 0x10000335, 8), (unique, 0x10000335, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) PTRSUB (unique, 0xbd80, 8) , (const, 0x88, 8)]
[(ram, 0x4c2fb0, 8) INDIRECT (ram, 0x4c2fb0, 8) , (const, 0x107, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000033d, 8) , (const, 0x0, 8), (unique, 0x1000033d, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x2, 8) , (const, 0x4, 8)]
[ ---  CBRANCH (ram, 0x16b5c2, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4c87a0, 4) , (const, 0x0, 4), (ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x107, 4)]
[(ram, 0x4c2fb0, 8) INDIRECT (ram, 0x4c2fb0, 8) , (const, 0x14e, 4)]
[(ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x14e, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0xbd80, 8) , (unique, 0xbd00, 4), (unique, 0xbd00, 4) INT_ADD (unique, 0xbd00, 4) , (const, 0xffffffff, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0xbd80, 8)]
[(unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0xbd80, 8)]
[ ---  CALLOTHER (const, 0x11, 4)]
[(ram, 0x4c2fb0, 8) INDIRECT (ram, 0x4c2fb0, 8) , (const, 0x117, 4)]
[(ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x117, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0xbd80, 8) , (unique, 0xbd00, 4), (unique, 0xbd00, 4) INT_ADD (unique, 0xbd00, 4) , (const, 0xffffffff, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0xbd80, 8)]
[(unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0xbd80, 8)]
[(unique, 0x100001c6, 8) MULTIEQUAL (ram, 0x4c2fb0, 8) , (ram, 0x4c2fb0, 8)]
[(unique, 0x100001ce, 4) MULTIEQUAL (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4)]
[ ---  CBRANCH (ram, 0x16b5dc, 1) , (unique, 0x100001c5, 1), (unique, 0x100001c5, 1) INT_NOTEQUAL (unique, 0xbd00, 4) , (const, 0x0, 4), (unique, 0xbd00, 4) MULTIEQUAL (unique, 0xbd00, 4) , (unique, 0xbd00, 4)]
[(register, 0x30, 8) INDIRECT (register, 0x30, 8) , (const, 0x140, 4)]
[(ram, 0x4c2fb0, 8) INDIRECT (unique, 0x100001c6, 8) , (const, 0x140, 4)]
[(ram, 0x4c87a0, 4) INDIRECT (unique, 0x100001ce, 4) , (const, 0x140, 4)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x140, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x140, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x140, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x140, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x140, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x140, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x140, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x140, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x140, 4)]
[(stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0x140, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x140, 4)]
[(stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0x140, 4)]
[(stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0x140, 4)]
[(stack, 0xffffffffffffffb8, 4) INDIRECT (stack, 0xffffffffffffffb8, 4) , (const, 0x140, 4)]
[(stack, 0xffffffffffffffc8, 4) INDIRECT (stack, 0xffffffffffffffc8, 4) , (const, 0x140, 4)]
[(stack, 0xffffffffffffffd8, 4) INDIRECT (stack, 0xffffffffffffffd8, 4) , (const, 0x140, 4)]
[(stack, 0xffffffffffffffe8, 4) INDIRECT (stack, 0xffffffffffffffe8, 4) , (const, 0x140, 4)]
[ ---  CALL (ram, 0x2147f0, 8) , (unique, 0xbd80, 8)]
[(ram, 0x4c2fb0, 8) COPY (ram, 0x4c2fb0, 8), (ram, 0x4c2fb0, 8) MULTIEQUAL (ram, 0x4c2fb0, 8) , (ram, 0x4c2fb0, 8) , (ram, 0x4c2fb0, 8) , (unique, 0x100001c6, 8)]
[(ram, 0x4c87a0, 4) COPY (ram, 0x4c87a0, 4), (ram, 0x4c87a0, 4) MULTIEQUAL (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4) , (unique, 0x100001ce, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) COPY (register, 0x0, 8), (register, 0x0, 8) INT_AND (register, 0x30, 8) , (const, 0xffffffff, 8), (register, 0x30, 8) MULTIEQUAL (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8)]
