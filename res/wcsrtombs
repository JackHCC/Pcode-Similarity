[ ---  CBRANCH (ram, 0x1ac7c8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x8, 8) , (const, 0x0, 8)]
[(register, 0x8, 8) CAST (unique, 0x100002b9, 8), (unique, 0x100002b9, 8) PTRSUB (const, 0x0, 8) , (const, 0x4c59f8, 8)]
[(stack, 0xfffffffffffffeac, 4) COPY (const, 0x0, 4)]
[(stack, 0xfffffffffffffeb0, 4) COPY (const, 0x1, 4)]
[(stack, 0xfffffffffffffea8, 4) COPY (const, 0x1, 4)]
[(unique, 0x100002a9, 8) COPY (register, 0x8, 8), (register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8)]
[ ---  CBRANCH (ram, 0x1ac9d8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) CAST (unique, 0x100002d1, 8), (unique, 0x100002d1, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x5, 8) , (const, 0x8, 8), (unique, 0xbd80, 8) CAST (unique, 0x100002c9, 8), (unique, 0x100002c9, 8) LOAD (const, 0x1b1, 4) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x100002c1, 8), (unique, 0x100002c1, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (ram, 0x4c2dd8, 8) , (register, 0x110, 8) , (const, 0x1, 8)]
[(register, 0x0, 8) PTRSUB (const, 0x0, 8) , (const, 0x4c1200, 8)]
[ ---  CBRANCH (ram, 0x1ac800, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (unique, 0x100001f1, 8), (unique, 0x100001f1, 8) PTRSUB (const, 0x0, 8) , (const, 0x4bf9a0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x243, 4)]
[(ram, 0x4c2dd8, 8) INDIRECT (ram, 0x4c2dd8, 8) , (const, 0x243, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x243, 4)]
[(stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0x243, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x243, 4)]
[(stack, 0xfffffffffffffea8, 4) INDIRECT (stack, 0xfffffffffffffea8, 4) , (const, 0x243, 4)]
[(stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0x243, 4)]
[(stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0x243, 4)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (unique, 0x100002a9, 8) , (const, 0x243, 4)]
[ ---  CALL (ram, 0x1b95f0, 8) , (unique, 0xbd80, 8)]
[(unique, 0xbd80, 8) CAST (unique, 0x100002d9, 8), (unique, 0x100002d9, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x5, 8) , (const, 0x8, 8)]
[ ---  BRANCH (ram, 0x1ac800, 1)]
[(stack, 0xfffffffffffffeb8, 8) MULTIEQUAL (unique, 0x100002a9, 8) , (unique, 0x100002a9, 8) , (stack, 0xfffffffffffffeb8, 8)]
[(stack, 0xfffffffffffffeb0, 4) MULTIEQUAL (stack, 0xfffffffffffffeb0, 4) , (stack, 0xfffffffffffffeb0, 4) , (stack, 0xfffffffffffffeb0, 4)]
[(stack, 0xfffffffffffffeac, 4) MULTIEQUAL (stack, 0xfffffffffffffeac, 4) , (stack, 0xfffffffffffffeac, 4) , (stack, 0xfffffffffffffeac, 4)]
[(stack, 0xfffffffffffffea8, 4) MULTIEQUAL (stack, 0xfffffffffffffea8, 4) , (stack, 0xfffffffffffffea8, 4) , (stack, 0xfffffffffffffea8, 4)]
[(stack, 0xfffffffffffffe88, 8) MULTIEQUAL (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8)]
[(stack, 0xfffffffffffffe78, 8) MULTIEQUAL (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8)]
[(ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(ram, 0x4c2dd8, 8) MULTIEQUAL (ram, 0x4c2dd8, 8) , (ram, 0x4c2dd8, 8) , (ram, 0x4c2dd8, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0xbd80, 8) CAST (unique, 0x100002e9, 8), (unique, 0x100002e9, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x5, 8) , (const, 0x8, 8), (unique, 0xbd80, 8) CAST (unique, 0x100002e1, 8), (unique, 0x100002e1, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x2, 8) , (const, 0x8, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0xbd80, 8) , (register, 0x0, 8) , (unique, 0xbd80, 8)]
[ ---  CBRANCH (ram, 0x1ac81c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbe00, 8) , (const, 0x0, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) CAST (unique, 0x100002e1, 8), (unique, 0x100002e1, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x2, 8) , (const, 0x8, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0xbd80, 8) , (register, 0x0, 8) , (unique, 0xbd80, 8)]
[(register, 0x18, 8) CAST (unique, 0x10000309, 8), (unique, 0x10000309, 8) INT_XOR (register, 0x18, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10000301, 8), (unique, 0x10000301, 8) INT_ADD (register, 0x110, 8) , (const, 0x30, 8), (register, 0x18, 8) INT_OR (unique, 0x4ff00, 8) , (unique, 0x50000, 8), (unique, 0x50000, 8) INT_LEFT (unique, 0x100002f9, 8) , (const, 0x2f, 4), (unique, 0x100002f9, 8) CAST (unique, 0xbd80, 8), (unique, 0x4ff00, 8) INT_RIGHT (unique, 0x100002f1, 8) , (const, 0x11, 4), (unique, 0x100002f1, 8) CAST (unique, 0xbd80, 8)]
[(register, 0x18, 8) MULTIEQUAL (unique, 0xbd80, 8) , (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x1ac900, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x38, 8) , (const, 0x0, 8)]
[(unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffe88, 8)]
[(register, 0xb0, 8) COPY (const, 0x0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1a4, 4)]
[(ram, 0x4c2dd8, 8) INDIRECT (ram, 0x4c2dd8, 8) , (const, 0x1a4, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x1a4, 4)]
[(stack, 0xfffffffffffffea8, 4) INDIRECT (stack, 0xfffffffffffffea8, 4) , (const, 0x1a4, 4)]
[(stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0x1a4, 4)]
[(stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0x1a4, 4)]
[(unique, 0x3a00, 8) PTRADD (unique, 0xbd80, 8) , (unique, 0x10000241, 8) , (const, 0x4, 8), (unique, 0x10000241, 8) INT_ADD (register, 0x0, 8) , (const, 0x1, 8), (register, 0x0, 8) CALL (ram, 0x1ab310, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x30, 8)]
[(unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffec8, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (stack, 0xfffffffffffffeb8, 8), (stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x1a4, 4)]
[(unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffe78, 8)]
[(unique, 0x3c80, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffc8, 8)]
[(unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffe90, 8)]
[(unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffe98, 8)]
[ ---  CALL (ram, 0x242d60, 8) , (register, 0x18, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1ed, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1d1, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4c2dd8, 8) INDIRECT (ram, 0x4c2dd8, 8) , (const, 0x1ed, 4), (ram, 0x4c2dd8, 8) INDIRECT (ram, 0x4c2dd8, 8) , (const, 0x1d1, 4), (ram, 0x4c2dd8, 8) MULTIEQUAL (ram, 0x4c2dd8, 8) , (ram, 0x4c2dd8, 8)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x1ed, 4), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x1d1, 4), (ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0x1ed, 4), (stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0x1d1, 4), (stack, 0xfffffffffffffe78, 8) MULTIEQUAL (unique, 0xbd80, 8) , (stack, 0xfffffffffffffe78, 8)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x1ed, 4), (stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x1d1, 4), (stack, 0xfffffffffffffe88, 8) MULTIEQUAL (unique, 0xbd80, 8) , (stack, 0xfffffffffffffe88, 8)]
[(stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x1ed, 4), (stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x1d1, 4), (stack, 0xfffffffffffffea0, 8) MULTIEQUAL (unique, 0x3c80, 8) , (stack, 0xfffffffffffffea0, 8)]
[(stack, 0xfffffffffffffea8, 4) INDIRECT (stack, 0xfffffffffffffea8, 4) , (const, 0x1ed, 4), (stack, 0xfffffffffffffea8, 4) INDIRECT (stack, 0xfffffffffffffea8, 4) , (const, 0x1d1, 4), (stack, 0xfffffffffffffea8, 4) MULTIEQUAL (stack, 0xfffffffffffffea8, 4) , (stack, 0xfffffffffffffea8, 4)]
[(stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0x1ed, 4), (stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0x1d1, 4), (stack, 0xfffffffffffffeac, 4) MULTIEQUAL (stack, 0xfffffffffffffeac, 4) , (stack, 0xfffffffffffffeac, 4)]
[(stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0x1ed, 4), (stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0x1d1, 4), (stack, 0xfffffffffffffeb0, 4) MULTIEQUAL (stack, 0xfffffffffffffeb0, 4) , (stack, 0xfffffffffffffeb0, 4)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x1ed, 4), (stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x1d1, 4), (stack, 0xfffffffffffffeb8, 8) MULTIEQUAL (unique, 0x3800, 8) , (stack, 0xfffffffffffffeb8, 8)]
[(register, 0xb0, 8) PTRADD (register, 0xb0, 8) , (unique, 0x10000319, 8) , (const, 0x1, 8), (unique, 0x10000319, 8) CAST (register, 0x8, 8), (register, 0x8, 8) PTRADD (stack, 0xfffffffffffffe98, 8) , (unique, 0x1000013c, 8) , (const, 0x1, 8), (unique, 0x1000013c, 8) INT_2COMP (unique, 0x10000311, 8), (unique, 0x10000311, 8) CAST (unique, 0x3800, 8), (stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x1ed, 4), (stack, 0xfffffffffffffe98, 8) INDIRECT (unique, 0x10000291, 8) , (const, 0x1d1, 4), (unique, 0x10000291, 8) COPY (unique, 0x3800, 8), (register, 0xb0, 8) MULTIEQUAL (register, 0xb0, 8) , (register, 0xb0, 8)]
[ ---  CBRANCH (ram, 0x1ac960, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x5, 4), (register, 0x0, 4) CALLIND (register, 0x18, 8) , (unique, 0xbd80, 8) , (unique, 0x3800, 8) , (unique, 0x3800, 8) , (unique, 0x3a00, 8) , (const, 0x0, 8) , (unique, 0x3800, 8) , (const, 0x0, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x1ac87e, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x10000148, 4) , (const, 0x0, 4), (unique, 0x10000148, 4) INT_AND (register, 0x0, 4) , (const, 0xfffffffb, 4)]
[ ---  CBRANCH (ram, 0x1ac8f6, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (stack, 0xfffffffffffffe98, 8) , (const, 0xffffffffffffffff, 8) , (const, 0x1, 8)]
[(stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0x231, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x231, 4)]
[(stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x231, 4)]
[(stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x231, 4)]
[(stack, 0xfffffffffffffea8, 4) INDIRECT (stack, 0xfffffffffffffea8, 4) , (const, 0x231, 4)]
[(stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0x231, 4)]
[(stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0x231, 4)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x231, 4)]
[ ---  CALL (ram, 0x12dc40, 8) , (unique, 0x100001b9, 8) , (unique, 0x10000199, 8) , (const, 0x5e, 4) , (unique, 0x100001d1, 8), (unique, 0x100001d1, 8) COPY (const, 0x291550, 8), (unique, 0x100001b9, 8) COPY (const, 0x28d854, 8), (unique, 0x10000199, 8) COPY (const, 0x28d848, 8)]
[(ram, 0x4c2dd8, 8) COPY (ram, 0x4c2dd8, 8), (ram, 0x4c2dd8, 8) INDIRECT (ram, 0x4c2dd8, 8) , (const, 0x231, 4)]
[(ram, 0x4c2e78, 8) COPY (ram, 0x4c2e78, 8), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x231, 4)]
[ ---  RETURN (const, 0x1, 4)]
[ ---  CALL (ram, 0x242d60, 8) , (register, 0x18, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xbd, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xa3, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x95, 4)]
[(ram, 0x4c2dd8, 8) INDIRECT (ram, 0x4c2dd8, 8) , (const, 0xbd, 4), (ram, 0x4c2dd8, 8) INDIRECT (ram, 0x4c2dd8, 8) , (const, 0xa3, 4), (ram, 0x4c2dd8, 8) INDIRECT (ram, 0x4c2dd8, 8) , (const, 0x95, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0xbd, 4), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0xa3, 4), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x95, 4)]
[(stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0xbd, 4), (stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0xa3, 4), (stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0x95, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0xbd, 4), (stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0xa3, 4), (stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x95, 4)]
[(stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0xbd, 4), (stack, 0xfffffffffffffea0, 8) INDIRECT (register, 0xb0, 8) , (const, 0xa3, 4), (register, 0xb0, 8) PTRADD (register, 0x38, 8) , (register, 0x10, 8) , (const, 0x1, 8)]
[(stack, 0xfffffffffffffea8, 4) INDIRECT (stack, 0xfffffffffffffea8, 4) , (const, 0xbd, 4), (stack, 0xfffffffffffffea8, 4) INDIRECT (stack, 0xfffffffffffffea8, 4) , (const, 0xa3, 4), (stack, 0xfffffffffffffea8, 4) INDIRECT (stack, 0xfffffffffffffea8, 4) , (const, 0x95, 4)]
[(stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0xbd, 4), (stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0xa3, 4), (stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0x95, 4)]
[(stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0xbd, 4), (stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0xa3, 4), (stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0x95, 4)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0xbd, 4), (stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0xa3, 4), (stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x95, 4)]
[(register, 0xb0, 8) PTRADD (stack, 0xfffffffffffffe98, 8) , (unique, 0x100000d7, 8) , (const, 0x1, 8), (unique, 0x100000d7, 8) INT_2COMP (unique, 0x10000321, 8), (unique, 0x10000321, 8) CAST (register, 0x38, 8), (stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0xbd, 4), (stack, 0xfffffffffffffe98, 8) INDIRECT (unique, 0x10000299, 8) , (const, 0xa3, 4), (unique, 0x10000299, 8) COPY (register, 0x38, 8)]
[ ---  CBRANCH (ram, 0x1ac8d0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x100000df, 4) , (const, 0x0, 4), (unique, 0x100000df, 4) INT_AND (register, 0x0, 4) , (const, 0xfffffffb, 4), (register, 0x0, 4) CALLIND (register, 0x18, 8) , (unique, 0xbd80, 8) , (unique, 0x3800, 8) , (register, 0x30, 8) , (unique, 0x3a00, 8) , (const, 0x0, 8) , (unique, 0x3800, 8) , (const, 0x0, 8) , (const, 0x1, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffec8, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffe98, 8), (unique, 0x3a00, 8) PTRADD (unique, 0xbd80, 8) , (unique, 0x10000209, 8) , (const, 0x4, 8), (unique, 0x10000209, 8) INT_ADD (register, 0x0, 8) , (const, 0x1, 8), (register, 0x0, 8) CALL (ram, 0x1acfe0, 8) , (unique, 0xbd80, 8) , (register, 0x10, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x30, 8)]
[ ---  CBRANCH (ram, 0x1ac87e, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (stack, 0xfffffffffffffe98, 8) , (const, 0xffffffffffffffff, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x1aca3e, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x38, 8) , (stack, 0xfffffffffffffe98, 8)]
[(stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x190, 4)]
[(stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x190, 4)]
[(stack, 0xfffffffffffffea8, 4) INDIRECT (stack, 0xfffffffffffffea8, 4) , (const, 0x190, 4)]
[(stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0x190, 4)]
[(stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0x190, 4)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x190, 4)]
[ ---  CALL (ram, 0x12dc40, 8) , (unique, 0x100001c9, 8) , (unique, 0x100001b1, 8) , (const, 0x7a, 4) , (unique, 0x100001e9, 8), (unique, 0x100001e9, 8) COPY (const, 0x291550, 8), (unique, 0x100001c9, 8) COPY (const, 0x291528, 8), (unique, 0x100001b1, 8) COPY (const, 0x28d848, 8)]
[(ram, 0x4c2dd8, 8) COPY (ram, 0x4c2dd8, 8), (ram, 0x4c2dd8, 8) INDIRECT (ram, 0x4c2dd8, 8) , (const, 0x190, 4)]
[(ram, 0x4c2e78, 8) COPY (ram, 0x4c2e78, 8), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x190, 4)]
[ ---  RETURN (const, 0x1, 4)]
[ ---  CBRANCH (ram, 0x1aca1f, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000229, 8), (unique, 0x10000229, 8) PTRSUB (stack, 0xfffffffffffffeb8, 8) , (const, 0x0, 8)]
[(stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x187, 4)]
[(stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x187, 4)]
[(stack, 0xfffffffffffffea8, 4) INDIRECT (stack, 0xfffffffffffffea8, 4) , (const, 0x187, 4)]
[(stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0x187, 4)]
[(stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0x187, 4)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x187, 4)]
[ ---  CALL (ram, 0x12dc40, 8) , (unique, 0x10000191, 8) , (unique, 0x100001a9, 8) , (const, 0x7b, 4) , (unique, 0x100001e1, 8), (unique, 0x100001e1, 8) COPY (const, 0x291550, 8), (unique, 0x100001a9, 8) COPY (const, 0x28d848, 8), (unique, 0x10000191, 8) COPY (const, 0x28d824, 8)]
[(ram, 0x4c2dd8, 8) COPY (ram, 0x4c2dd8, 8), (ram, 0x4c2dd8, 8) INDIRECT (ram, 0x4c2dd8, 8) , (const, 0x187, 4)]
[(ram, 0x4c2e78, 8) COPY (ram, 0x4c2e78, 8), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x187, 4)]
[ ---  RETURN (const, 0x1, 4)]
[(ram, 0x4c2dd8, 8) INDIRECT (ram, 0x4c2dd8, 8) , (const, 0x176, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x176, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x30, 8) , (const, 0x0, 8)]
[(stack, 0xfffffffffffffeb8, 8) MULTIEQUAL (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8)]
[(stack, 0xfffffffffffffeb0, 4) MULTIEQUAL (stack, 0xfffffffffffffeb0, 4) , (stack, 0xfffffffffffffeb0, 4)]
[(stack, 0xfffffffffffffeac, 4) MULTIEQUAL (stack, 0xfffffffffffffeac, 4) , (stack, 0xfffffffffffffeac, 4)]
[(stack, 0xfffffffffffffea8, 4) MULTIEQUAL (stack, 0xfffffffffffffea8, 4) , (stack, 0xfffffffffffffea8, 4)]
[(stack, 0xfffffffffffffea0, 8) MULTIEQUAL (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8)]
[(stack, 0xfffffffffffffe98, 8) MULTIEQUAL (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8)]
[(stack, 0xfffffffffffffe88, 8) MULTIEQUAL (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8)]
[(stack, 0xfffffffffffffe78, 8) MULTIEQUAL (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8)]
[(ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(ram, 0x4c2dd8, 8) MULTIEQUAL (ram, 0x4c2dd8, 8) , (ram, 0x4c2dd8, 8)]
[(register, 0x0, 4) MULTIEQUAL (register, 0x0, 4) , (register, 0x0, 4)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb0, 8) PTRADD (register, 0xb0, 8) , (const, 0xffffffffffffffff, 8) , (const, 0x1, 8), (register, 0xb0, 8) MULTIEQUAL (register, 0xb0, 8) , (register, 0xb0, 8)]
[ ---  BRANCH (ram, 0x1ac87e, 1)]
[(stack, 0xfffffffffffffeb8, 8) MULTIEQUAL (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8)]
[(stack, 0xfffffffffffffeb0, 4) MULTIEQUAL (stack, 0xfffffffffffffeb0, 4) , (stack, 0xfffffffffffffeb0, 4) , (stack, 0xfffffffffffffeb0, 4) , (stack, 0xfffffffffffffeb0, 4)]
[(stack, 0xfffffffffffffeac, 4) MULTIEQUAL (stack, 0xfffffffffffffeac, 4) , (stack, 0xfffffffffffffeac, 4) , (stack, 0xfffffffffffffeac, 4) , (stack, 0xfffffffffffffeac, 4)]
[(stack, 0xfffffffffffffea8, 4) MULTIEQUAL (stack, 0xfffffffffffffea8, 4) , (stack, 0xfffffffffffffea8, 4) , (stack, 0xfffffffffffffea8, 4) , (stack, 0xfffffffffffffea8, 4)]
[(stack, 0xfffffffffffffea0, 8) MULTIEQUAL (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8)]
[(stack, 0xfffffffffffffe98, 8) MULTIEQUAL (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8)]
[(stack, 0xfffffffffffffe88, 8) MULTIEQUAL (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8)]
[(stack, 0xfffffffffffffe78, 8) MULTIEQUAL (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8)]
[(ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(ram, 0x4c2dd8, 8) MULTIEQUAL (ram, 0x4c2dd8, 8) , (ram, 0x4c2dd8, 8) , (ram, 0x4c2dd8, 8) , (ram, 0x4c2dd8, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb0, 8) MULTIEQUAL (register, 0xb0, 8) , (register, 0xb0, 8) , (register, 0xb0, 8) , (register, 0xb0, 8)]
[(register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) MULTIEQUAL (register, 0x0, 4) , (register, 0x0, 4) , (register, 0x0, 4) , (register, 0x0, 4)]
[(unique, 0xc800, 1) INT_LESS (const, 0x1, 4) , (register, 0x0, 4), (register, 0x0, 4) INT_SUB (register, 0x0, 4) , (const, 0x4, 4), (register, 0x0, 4) MULTIEQUAL (register, 0x0, 4) , (register, 0x0, 4) , (register, 0x0, 4) , (register, 0x0, 4)]
[ ---  CBRANCH (ram, 0x1ac899, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (const, 0x3, 4) , (register, 0x0, 4), (register, 0x0, 4) INT_SUB (register, 0x0, 4) , (const, 0x4, 4), (register, 0x0, 4) MULTIEQUAL (register, 0x0, 4) , (register, 0x0, 4) , (register, 0x0, 4) , (register, 0x0, 4)]
[ ---  CBRANCH (ram, 0x1aca00, 1) , (register, 0x206, 1)]
[(stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0x148, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x148, 4)]
[(stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x148, 4)]
[(stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x148, 4)]
[(stack, 0xfffffffffffffea8, 4) INDIRECT (stack, 0xfffffffffffffea8, 4) , (const, 0x148, 4)]
[(stack, 0xfffffffffffffeac, 4) INDIRECT (stack, 0xfffffffffffffeac, 4) , (const, 0x148, 4)]
[(stack, 0xfffffffffffffeb0, 4) INDIRECT (stack, 0xfffffffffffffeb0, 4) , (const, 0x148, 4)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x148, 4)]
[ ---  CALL (ram, 0x12dc40, 8) , (unique, 0x100001c1, 8) , (unique, 0x100001a1, 8) , (const, 0x86, 4) , (unique, 0x100001d9, 8), (unique, 0x100001d9, 8) COPY (const, 0x291550, 8), (unique, 0x100001c1, 8) COPY (const, 0x291468, 8), (unique, 0x100001a1, 8) COPY (const, 0x28d848, 8)]
[(ram, 0x4c2dd8, 8) COPY (ram, 0x4c2dd8, 8), (ram, 0x4c2dd8, 8) INDIRECT (ram, 0x4c2dd8, 8) , (const, 0x148, 4)]
[(ram, 0x4c2e78, 8) COPY (ram, 0x4c2e78, 8), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x148, 4)]
[ ---  RETURN (const, 0x1, 4)]
[ ---  CBRANCH (ram, 0x1ac8b6, 1) , (unique, 0xc800, 1)]
[ ---  CBRANCH (ram, 0x1ac8b6, 1) , (register, 0x206, 1)]
[(register, 0xb0, 8) COPY (const, 0xffffffffffffffff, 8)]
[(ram, 0x4c2dd8, 8) INDIRECT (ram, 0x4c2dd8, 8) , (const, 0x128, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x128, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000329, 8) , (const, 0x54, 4), (unique, 0x10000329, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (ram, 0x4c2e78, 8) , (register, 0x110, 8) , (const, 0x1, 8)]
[(ram, 0x4c2dd8, 8) COPY (ram, 0x4c2dd8, 8), (ram, 0x4c2dd8, 8) MULTIEQUAL (ram, 0x4c2dd8, 8) , (ram, 0x4c2dd8, 8) , (ram, 0x4c2dd8, 8)]
[(ram, 0x4c2e78, 8) COPY (ram, 0x4c2e78, 8), (ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[ ---  RETURN (const, 0x0, 8) , (unique, 0x10000331, 8), (unique, 0x10000331, 8) CAST (register, 0x0, 8), (register, 0x0, 8) COPY (register, 0xb0, 8), (register, 0xb0, 8) MULTIEQUAL (register, 0xb0, 8) , (register, 0xb0, 8) , (register, 0xb0, 8)]
