[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x62, 4)]
[(stack, 0xffffffffffffffa8, 4) INDIRECT (unique, 0x100001f3, 4) , (const, 0x62, 4), (unique, 0x100001f3, 4) COPY (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x30, 8) , (const, 0x1, 8) , (const, 0x4, 8)]
[(stack, 0xffffffffffffffac, 4) INDIRECT (stack, 0xffffffffffffffac, 4) , (const, 0x62, 4), (stack, 0xffffffffffffffac, 4) COPY (const, 0x0, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x62, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x1000021b, 8), (unique, 0x1000021b, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8)]
[ ---  CBRANCH (ram, 0x1f5c31, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x1212c0, 8) , (register, 0x38, 8), (register, 0x38, 8) INT_LEFT (register, 0x38, 8) , (const, 0x2, 4), (register, 0x38, 8) INT_SEXT (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x30, 8) , (const, 0x1, 8) , (const, 0x4, 8)]
[(register, 0x0, 4) COPY (const, 0xc, 4)]
[ ---  BRANCH (ram, 0x1f5bd9, 1)]
[ ---  CBRANCH (ram, 0x1f5c38, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (unique, 0xbc80, 4) , (const, 0x1, 4)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000223, 8), (unique, 0x10000223, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x30, 8) , (const, 0x2, 8) , (const, 0x4, 8)]
[ ---  BRANCH (ram, 0x1f5b90, 1)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x1000022b, 8), (unique, 0x1000022b, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x30, 8) , (const, 0x2, 8) , (const, 0x4, 8)]
[(unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffa8, 8)]
[(register, 0xb0, 8) COPY (const, 0x0, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (register, 0x0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffac, 4) MULTIEQUAL (stack, 0xffffffffffffffac, 4) , (stack, 0xffffffffffffffac, 4)]
[(stack, 0xffffffffffffffa8, 4) MULTIEQUAL (stack, 0xffffffffffffffa8, 4) , (stack, 0xffffffffffffffa8, 4)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x206, 1) INT_NOTEQUAL (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000243, 8), (unique, 0x10000243, 8) INT_ADD (register, 0x80, 8) , (const, 0x4, 8), (register, 0x80, 8) INT_ADD (register, 0x80, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x38, 8) , (const, 0x6, 8) , (const, 0x8, 8), (register, 0x80, 8) INT_MULT (register, 0x80, 8) , (const, 0x10, 8), (register, 0x80, 8) INT_SEXT (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) CAST (unique, 0x1000023b, 8), (unique, 0x1000023b, 8) INT_ADD (unique, 0x10000233, 8) , (unique, 0x3300, 8), (unique, 0x10000233, 8) CAST (register, 0x38, 8), (unique, 0x3300, 8) INT_MULT (register, 0xb0, 8) , (const, 0x4, 8), (register, 0x38, 8) MULTIEQUAL (unique, 0xbd80, 8) , (register, 0x38, 8), (register, 0xb0, 8) MULTIEQUAL (register, 0xb0, 8) , (register, 0xb0, 8)]
[ ---  CBRANCH (ram, 0x1f5ba3, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (const, 0x0, 4) , (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000243, 8), (unique, 0x10000243, 8) INT_ADD (register, 0x80, 8) , (const, 0x4, 8), (register, 0x80, 8) INT_ADD (register, 0x80, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x38, 8) , (const, 0x6, 8) , (const, 0x8, 8), (register, 0x80, 8) INT_MULT (register, 0x80, 8) , (const, 0x10, 8), (register, 0x80, 8) INT_SEXT (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) CAST (unique, 0x1000023b, 8), (unique, 0x1000023b, 8) INT_ADD (unique, 0x10000233, 8) , (unique, 0x3300, 8), (unique, 0x10000233, 8) CAST (register, 0x38, 8), (unique, 0x3300, 8) INT_MULT (register, 0xb0, 8) , (const, 0x4, 8), (register, 0x38, 8) MULTIEQUAL (unique, 0xbd80, 8) , (register, 0x38, 8), (register, 0xb0, 8) MULTIEQUAL (register, 0xb0, 8) , (register, 0xb0, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x38, 8)]
[(unique, 0x3a00, 8) PTRADD (unique, 0xbd80, 8) , (unique, 0x100001a2, 8) , (const, 0x4, 8), (unique, 0x100001a2, 8) INT_ADD (register, 0x0, 8) , (const, 0x1, 8), (register, 0x0, 8) INT_ZEXT (unique, 0x3100, 4), (unique, 0x3100, 4) INT_SUB (unique, 0xbc80, 4) , (const, 0x1, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000024b, 8), (unique, 0x1000024b, 8) INT_ADD (register, 0x80, 8) , (const, 0x8, 8)]
[ ---  BRANCH (ram, 0x1f5b49, 1)]
[ ---  CBRANCH (ram, 0x1f5b40, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x8, 4) , (register, 0x98, 4), (register, 0x98, 4) INT_ZEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x1000025b, 8), (unique, 0x1000025b, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x2, 8) , (const, 0x4, 8), (register, 0x0, 8) CAST (unique, 0x10000253, 8), (unique, 0x10000253, 8) INT_ADD (register, 0x0, 8) , (unique, 0xbd80, 8), (register, 0x0, 8) INT_MULT (register, 0x0, 8) , (const, 0x10, 8), (register, 0x0, 8) INT_SEXT (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (register, 0x8, 8), (register, 0x8, 8) MULTIEQUAL (unique, 0xbd80, 8) , (register, 0x8, 8)]
[ ---  CBRANCH (ram, 0x1f5b40, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x10, 4) , (unique, 0x5200, 4), (unique, 0x5200, 4) LOAD (const, 0x1b1, 4) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x1f5ba8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbc80, 4) , (const, 0xffffffff, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x141, 4)]
[(stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0x141, 4)]
[(stack, 0xffffffffffffffac, 4) INDIRECT (stack, 0xffffffffffffffac, 4) , (const, 0x141, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x141, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x141, 4)]
[(register, 0x0, 4) CALL (ram, 0x1f5860, 8) , (register, 0x38, 8) , (unique, 0x3800, 8) , (register, 0x80, 8) , (register, 0x10, 4) , (register, 0x8, 4)]
[ ---  CBRANCH (ram, 0x1f5ba8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x3a00, 8) , (register, 0x8, 8), (register, 0x8, 8) PTRADD (register, 0x8, 8) , (const, 0x1, 8) , (const, 0x4, 8)]
[ ---  CBRANCH (ram, 0x1f5b83, 1) , (register, 0x206, 1)]
[(unique, 0x100001f7, 4) COPY (stack, 0xffffffffffffffa8, 4)]
[(unique, 0x10000203, 8) COPY (stack, 0xffffffffffffffb0, 8)]
[ ---  CBRANCH (ram, 0x1f5bf8, 1) , (unique, 0xcc00, 1), (unique, 0xcc00, 1) INT_SLESS (stack, 0xffffffffffffffa8, 4) , (unique, 0x3400, 4), (unique, 0x3400, 4) INT_ADD (stack, 0xffffffffffffffac, 4) , (unique, 0x3300, 4), (unique, 0x3300, 4) INT_MULT (unique, 0xbc80, 4) , (const, 0x2, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x21f, 4)]
[(stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0x21f, 4)]
[(stack, 0xffffffffffffffac, 4) INDIRECT (stack, 0xffffffffffffffac, 4) , (const, 0x21f, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x21f, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x21f, 4)]
[(unique, 0x100001fb, 4) COPY (unique, 0x100000fb, 4), (unique, 0x100000fb, 4) INT_MULT (register, 0x0, 4) , (const, 0x2, 4), (register, 0x0, 4) INT_ADD (stack, 0xffffffffffffffa8, 4) , (unique, 0xbc80, 4)]
[(unique, 0x1000020b, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x121020, 8) , (stack, 0xffffffffffffffb0, 8) , (register, 0x30, 8), (register, 0x30, 8) INT_LEFT (register, 0x30, 8) , (const, 0x2, 4), (register, 0x30, 8) INT_SEXT (unique, 0x100000fb, 4), (unique, 0x100000fb, 4) INT_MULT (register, 0x0, 4) , (const, 0x2, 4), (register, 0x0, 4) INT_ADD (stack, 0xffffffffffffffa8, 4) , (unique, 0xbc80, 4)]
[ ---  CBRANCH (ram, 0x1f5c41, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x121020, 8) , (stack, 0xffffffffffffffb0, 8) , (register, 0x30, 8), (register, 0x30, 8) INT_LEFT (register, 0x30, 8) , (const, 0x2, 4), (register, 0x30, 8) INT_SEXT (unique, 0x100000fb, 4), (unique, 0x100000fb, 4) INT_MULT (register, 0x0, 4) , (const, 0x2, 4), (register, 0x0, 4) INT_ADD (stack, 0xffffffffffffffa8, 4) , (unique, 0xbc80, 4)]
[(register, 0x0, 4) COPY (const, 0xc, 4)]
[ ---  BRANCH (ram, 0x1f5bc7, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1d5, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0x1d5, 4), (stack, 0xffffffffffffffa8, 4) COPY (unique, 0x100001ff, 4), (unique, 0x100001ff, 4) MULTIEQUAL (unique, 0x100001f7, 4) , (unique, 0x100001fb, 4)]
[(stack, 0xffffffffffffffac, 4) INDIRECT (stack, 0xffffffffffffffac, 4) , (const, 0x1d5, 4), (stack, 0xffffffffffffffac, 4) MULTIEQUAL (stack, 0xffffffffffffffac, 4) , (stack, 0xffffffffffffffac, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x1d5, 4), (stack, 0xffffffffffffffb0, 8) COPY (unique, 0x10000213, 8), (unique, 0x10000213, 8) MULTIEQUAL (unique, 0x10000203, 8) , (unique, 0x1000020b, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1d5, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(register, 0x0, 4) CALL (ram, 0x1efb10, 8) , (unique, 0x3800, 8) , (register, 0x80, 8)]
[(unique, 0x10000149, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x10000161, 4) MULTIEQUAL (stack, 0xffffffffffffffa8, 4) , (stack, 0xffffffffffffffa8, 4)]
[(unique, 0x10000165, 4) MULTIEQUAL (stack, 0xffffffffffffffac, 4) , (stack, 0xffffffffffffffac, 4)]
[(unique, 0x10000169, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(unique, 0x10000171, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CBRANCH (ram, 0x1f5b7f, 1) , (unique, 0x10000148, 1), (unique, 0x10000148, 1) INT_EQUAL (unique, 0x10000151, 4) , (const, 0x0, 4), (unique, 0x10000151, 4) MULTIEQUAL (register, 0x0, 4) , (register, 0x0, 4)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000263, 8), (unique, 0x10000263, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x30, 8) , (const, 0x2, 8) , (const, 0x4, 8)]
[(register, 0x0, 4) MULTIEQUAL (unique, 0x10000151, 4) , (register, 0x0, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1b5, 4), (register, 0x110, 8) MULTIEQUAL (unique, 0x10000149, 8) , (register, 0x110, 8)]
[(stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0x1b5, 4), (stack, 0xffffffffffffffa8, 4) MULTIEQUAL (unique, 0x10000161, 4) , (stack, 0xffffffffffffffa8, 4)]
[(stack, 0xffffffffffffffac, 4) INDIRECT (stack, 0xffffffffffffffac, 4) , (const, 0x1b5, 4), (stack, 0xffffffffffffffac, 4) MULTIEQUAL (unique, 0x10000165, 4) , (stack, 0xffffffffffffffac, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x1b5, 4), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (unique, 0x10000169, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1b5, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (unique, 0x10000171, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CALL (ram, 0x1212c8, 8) , (stack, 0xffffffffffffffb0, 8), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (unique, 0x10000169, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (unique, 0x10000171, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (unique, 0x10000169, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffac, 4) MULTIEQUAL (unique, 0x10000165, 4) , (stack, 0xffffffffffffffac, 4)]
[(stack, 0xffffffffffffffa8, 4) MULTIEQUAL (unique, 0x10000161, 4) , (stack, 0xffffffffffffffa8, 4)]
[(register, 0x110, 8) MULTIEQUAL (unique, 0x10000149, 8) , (register, 0x110, 8)]
[(register, 0x38, 8) MULTIEQUAL (unique, 0xbd80, 8) , (register, 0x38, 8)]
[(register, 0xb0, 8) INT_ADD (register, 0xb0, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x1f5b10, 1) , (unique, 0xd080, 1), (unique, 0xd080, 1) BOOL_AND (register, 0x206, 1) , (unique, 0xcf80, 1), (unique, 0xcf80, 1) INT_SLESSEQUAL (register, 0x0, 4) , (unique, 0xbc80, 4), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbc80, 4) , (register, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x30, 8) , (const, 0x1, 8) , (const, 0x4, 8), (register, 0x0, 4) INT_ADD (unique, 0x100000b7, 4) , (const, 0x1, 4), (unique, 0x100000b7, 4) SUBPIECE (register, 0xb0, 8) , (const, 0x0, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x16f, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x16f, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CALL (ram, 0x1212c8, 8) , (register, 0x38, 8), (register, 0x38, 8) MULTIEQUAL (register, 0x38, 8) , (unique, 0xbd80, 8)]
[(register, 0x0, 4) COPY (const, 0x0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x30, 8) , (stack, 0xffffffffffffffa8, 4), (stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0x16f, 4), (stack, 0xffffffffffffffa8, 4) MULTIEQUAL (stack, 0xffffffffffffffa8, 4) , (stack, 0xffffffffffffffa8, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000127, 8) , (stack, 0xffffffffffffffac, 4), (unique, 0x10000127, 8) PTRADD (register, 0x30, 8) , (const, 0x1, 8) , (const, 0x4, 8), (stack, 0xffffffffffffffac, 4) INDIRECT (stack, 0xffffffffffffffac, 4) , (const, 0x16f, 4), (stack, 0xffffffffffffffac, 4) MULTIEQUAL (stack, 0xffffffffffffffac, 4) , (stack, 0xffffffffffffffac, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000012f, 8) , (stack, 0xffffffffffffffb0, 4), (unique, 0x1000012f, 8) PTRADD (register, 0x30, 8) , (const, 0x2, 8) , (const, 0x4, 8), (stack, 0xffffffffffffffb0, 4) SUBPIECE (stack, 0xffffffffffffffb0, 8) , (const, 0x0, 8), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x16f, 4), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (register, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000137, 8) , (stack, 0xffffffffffffffb4, 4), (unique, 0x10000137, 8) PTRADD (register, 0x30, 8) , (const, 0x3, 8) , (const, 0x4, 8), (stack, 0xffffffffffffffb4, 4) SUBPIECE (stack, 0xffffffffffffffb0, 8) , (const, 0x4, 8), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x16f, 4), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (register, 0x0, 8)]
[ ---  BRANCH (ram, 0x1f5bd9, 1)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (register, 0x0, 8)]
[(stack, 0xffffffffffffffac, 4) MULTIEQUAL (stack, 0xffffffffffffffac, 4) , (stack, 0xffffffffffffffac, 4) , (stack, 0xffffffffffffffac, 4)]
[(stack, 0xffffffffffffffa8, 4) MULTIEQUAL (stack, 0xffffffffffffffa8, 4) , (stack, 0xffffffffffffffa8, 4) , (stack, 0xffffffffffffffa8, 4)]
[(register, 0x0, 4) MULTIEQUAL (register, 0x0, 4) , (register, 0x0, 4) , (register, 0x0, 4)]
[ ---  CBRANCH (ram, 0x1f5c4b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffffc0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x1000026b, 8), (unique, 0x1000026b, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0x1aa, 4)]
[(stack, 0xffffffffffffffac, 4) INDIRECT (stack, 0xffffffffffffffac, 4) , (const, 0x1aa, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x1aa, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1aa, 4)]
[ ---  CALL (ram, 0x234c80, 8)]
[ ---  RETURN (const, 0x1, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 4)]
