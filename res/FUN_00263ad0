[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x2f, 4)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x2f, 4), (register, 0x20a, 1) COPY (const, 0x0, 1)]
[(stack, 0xfffffffffffffe68, 2) INDIRECT (stack, 0xfffffffffffffe68, 2) , (const, 0x2f, 4)]
[(stack, 0xfffffffffffffe6a, 16) INDIRECT (stack, 0xfffffffffffffe6a, 16) , (const, 0x2f, 4)]
[(stack, 0xfffffffffffffe7a, 8) INDIRECT (stack, 0xfffffffffffffe7a, 8) , (const, 0x2f, 4)]
[(stack, 0xfffffffffffffe82, 4) INDIRECT (stack, 0xfffffffffffffe82, 4) , (const, 0x2f, 4)]
[(stack, 0xfffffffffffffe86, 2) INDIRECT (stack, 0xfffffffffffffe86, 2) , (const, 0x2f, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x2f, 4)]
[(stack, 0xffffffffffffff10, 4) INDIRECT (stack, 0xffffffffffffff10, 4) , (const, 0x2f, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x2f, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10000223, 8), (unique, 0x10000223, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8)]
[ ---  CBRANCH (ram, 0x263cd0, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x20fd70, 8) , (register, 0x38, 8) , (const, 0x1, 8)]
[(register, 0xb8, 8) COPY (const, 0xffffffff, 8)]
[ ---  BRANCH (ram, 0x263bcf, 1)]
[(unique, 0x3c80, 8) CAST (unique, 0x1000022b, 8), (unique, 0x1000022b, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff28, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x4a, 4)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x4a, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x4a, 4)]
[(register, 0x0, 4) CALL (ram, 0x1e4840, 8) , (const, 0x0, 4)]
[(unique, 0x3800, 8) CAST (unique, 0x10000233, 8), (unique, 0x10000233, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffe88, 8)]
[(stack, 0xffffffffffffff10, 4) COPY (const, 0x0, 4)]
[(unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffe68, 8)]
[(stack, 0xfffffffffffffe88, 8) PTRSUB (const, 0x0, 8) , (const, 0x263ac0, 8)]
[(register, 0xb8, 8) COPY (const, 0xffffffff, 8)]
[(unique, 0x10000213, 8) COPY (unique, 0x1000023b, 8), (unique, 0x1000023b, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0x10000203, 8) , (const, 0x8, 8) , (const, 0x1, 8), (unique, 0x10000203, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffe88, 8)]
[(register, 0x8, 8) COPY (const, 0x10, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff10, 4) MULTIEQUAL (stack, 0xffffffffffffff10, 4) , (stack, 0xffffffffffffff10, 4)]
[(register, 0x38, 8) MULTIEQUAL (unique, 0x10000213, 8) , (unique, 0x1000021b, 8)]
[ ---  CBRANCH (ram, 0x263b58, 1) , (unique, 0xd300, 1), (unique, 0xd300, 1) INT_NOTEQUAL (register, 0x8, 8) , (const, 0x0, 8), (register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8)]
[ ---  CALL (ram, 0x13f110, 8) , (const, 0xe, 4) , (unique, 0x3800, 8) , (unique, 0x3c80, 8)]
[ ---  CALL (ram, 0x1e4840, 8) , (const, 0xa, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xa6, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x7a, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x76, 4)]
[(stack, 0xfffffffffffffe68, 2) INDIRECT (stack, 0xfffffffffffffe68, 2) , (const, 0xa6, 4), (stack, 0xfffffffffffffe68, 2) COPY (const, 0x1, 2)]
[(stack, 0xfffffffffffffe6a, 16) INDIRECT (stack, 0xfffffffffffffe6a, 16) , (const, 0xa6, 4), (stack, 0xfffffffffffffe6a, 16) COPY (const, 0x0, 16)]
[(stack, 0xfffffffffffffe7a, 8) INDIRECT (stack, 0xfffffffffffffe7a, 8) , (const, 0xa6, 4), (stack, 0xfffffffffffffe7a, 8) COPY (const, 0x0, 8)]
[(stack, 0xfffffffffffffe82, 4) INDIRECT (stack, 0xfffffffffffffe82, 4) , (const, 0xa6, 4), (stack, 0xfffffffffffffe82, 4) COPY (const, 0x0, 4)]
[(stack, 0xfffffffffffffe86, 2) INDIRECT (stack, 0xfffffffffffffe86, 2) , (const, 0xa6, 4), (stack, 0xfffffffffffffe86, 2) COPY (const, 0x0, 2)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0xa6, 4), (stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x7a, 4), (stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x76, 4)]
[(stack, 0xffffffffffffff10, 4) INDIRECT (stack, 0xffffffffffffff10, 4) , (const, 0xa6, 4), (stack, 0xffffffffffffff10, 4) INDIRECT (stack, 0xffffffffffffff10, 4) , (const, 0x7a, 4), (stack, 0xffffffffffffff10, 4) INDIRECT (stack, 0xffffffffffffff10, 4) , (const, 0x76, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xa6, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x7a, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x76, 4)]
[ ---  CBRANCH (ram, 0x263c00, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (const, 0xffffffff, 4) , (register, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x2106c0, 8) , (const, 0x0, 8) , (register, 0x0, 4) , (const, 0x7, 8) , (unique, 0x3800, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x122, 4)]
[(stack, 0xfffffffffffffe68, 2) INDIRECT (stack, 0xfffffffffffffe68, 2) , (const, 0x122, 4)]
[(stack, 0xfffffffffffffe6a, 16) INDIRECT (stack, 0xfffffffffffffe6a, 16) , (const, 0x122, 4)]
[(stack, 0xfffffffffffffe7a, 8) INDIRECT (stack, 0xfffffffffffffe7a, 8) , (const, 0x122, 4)]
[(stack, 0xfffffffffffffe82, 4) INDIRECT (stack, 0xfffffffffffffe82, 4) , (const, 0x122, 4)]
[(stack, 0xfffffffffffffe86, 2) INDIRECT (stack, 0xfffffffffffffe86, 2) , (const, 0x122, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x122, 4)]
[(stack, 0xffffffffffffff10, 4) INDIRECT (stack, 0xffffffffffffff10, 4) , (const, 0x122, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x122, 4)]
[ ---  CBRANCH (ram, 0x263c5c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x10, 8) , (const, 0x0, 8), (register, 0x10, 8) INT_REM (register, 0x0, 8) , (const, 0x180, 8), (register, 0x0, 8) CALL (ram, 0x210210, 8) , (register, 0x0, 4) , (const, 0x0, 8) , (const, 0x2, 4)]
[ ---  CALL (ram, 0x218c90, 8) , (register, 0x0, 4) , (register, 0x8, 8), (register, 0x8, 8) INT_SUB (register, 0x0, 8) , (register, 0x10, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1a5, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x195, 4)]
[(stack, 0xfffffffffffffe68, 2) INDIRECT (stack, 0xfffffffffffffe68, 2) , (const, 0x1a5, 4), (stack, 0xfffffffffffffe68, 2) INDIRECT (stack, 0xfffffffffffffe68, 2) , (const, 0x195, 4)]
[(stack, 0xfffffffffffffe6a, 16) INDIRECT (stack, 0xfffffffffffffe6a, 16) , (const, 0x1a5, 4), (stack, 0xfffffffffffffe6a, 16) INDIRECT (stack, 0xfffffffffffffe6a, 16) , (const, 0x195, 4)]
[(stack, 0xfffffffffffffe7a, 8) INDIRECT (stack, 0xfffffffffffffe7a, 8) , (const, 0x1a5, 4), (stack, 0xfffffffffffffe7a, 8) INDIRECT (stack, 0xfffffffffffffe7a, 8) , (const, 0x195, 4)]
[(stack, 0xfffffffffffffe82, 4) INDIRECT (stack, 0xfffffffffffffe82, 4) , (const, 0x1a5, 4), (stack, 0xfffffffffffffe82, 4) INDIRECT (stack, 0xfffffffffffffe82, 4) , (const, 0x195, 4)]
[(stack, 0xfffffffffffffe86, 2) INDIRECT (stack, 0xfffffffffffffe86, 2) , (const, 0x1a5, 4), (stack, 0xfffffffffffffe86, 2) INDIRECT (stack, 0xfffffffffffffe86, 2) , (const, 0x195, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x1a5, 4), (stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x195, 4)]
[(stack, 0xffffffffffffff10, 4) INDIRECT (stack, 0xffffffffffffff10, 4) , (const, 0x1a5, 4), (stack, 0xffffffffffffff10, 4) INDIRECT (stack, 0xffffffffffffff10, 4) , (const, 0x195, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1a5, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x195, 4)]
[ ---  CBRANCH (ram, 0x263c7b, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (const, 0xffffffffffffffff, 8) , (register, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x210210, 8) , (register, 0x0, 4) , (const, 0x0, 8) , (const, 0x2, 4)]
[(register, 0x8, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x8, 8)]
[(register, 0xb8, 8) COPY (const, 0x0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1c6, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(stack, 0xfffffffffffffe68, 2) INDIRECT (stack, 0xfffffffffffffe68, 2) , (const, 0x1c6, 4), (stack, 0xfffffffffffffe68, 2) MULTIEQUAL (stack, 0xfffffffffffffe68, 2) , (stack, 0xfffffffffffffe68, 2)]
[(stack, 0xfffffffffffffe6a, 16) INDIRECT (stack, 0xfffffffffffffe6a, 16) , (const, 0x1c6, 4), (stack, 0xfffffffffffffe6a, 16) MULTIEQUAL (stack, 0xfffffffffffffe6a, 16) , (stack, 0xfffffffffffffe6a, 16)]
[(stack, 0xfffffffffffffe7a, 8) INDIRECT (stack, 0xfffffffffffffe7a, 8) , (const, 0x1c6, 4), (stack, 0xfffffffffffffe7a, 8) MULTIEQUAL (stack, 0xfffffffffffffe7a, 8) , (stack, 0xfffffffffffffe7a, 8)]
[(stack, 0xfffffffffffffe82, 4) INDIRECT (stack, 0xfffffffffffffe82, 4) , (const, 0x1c6, 4), (stack, 0xfffffffffffffe82, 4) MULTIEQUAL (stack, 0xfffffffffffffe82, 4) , (stack, 0xfffffffffffffe82, 4)]
[(stack, 0xfffffffffffffe86, 2) INDIRECT (stack, 0xfffffffffffffe86, 2) , (const, 0x1c6, 4), (stack, 0xfffffffffffffe86, 2) MULTIEQUAL (stack, 0xfffffffffffffe86, 2) , (stack, 0xfffffffffffffe86, 2)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x1c6, 4), (stack, 0xfffffffffffffe88, 8) MULTIEQUAL (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8)]
[(stack, 0xffffffffffffff10, 4) INDIRECT (stack, 0xffffffffffffff10, 4) , (const, 0x1c6, 4), (stack, 0xffffffffffffff10, 4) MULTIEQUAL (stack, 0xffffffffffffff10, 4) , (stack, 0xffffffffffffff10, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1c6, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CBRANCH (ram, 0x263cb0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x180, 8), (register, 0x0, 8) CALL (ram, 0x2101e0, 8) , (register, 0x0, 4) , (register, 0x30, 8) , (const, 0x180, 8)]
[(register, 0xb8, 8) COPY (const, 0xffffffff, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1f1, 4)]
[(stack, 0xfffffffffffffe68, 2) INDIRECT (stack, 0xfffffffffffffe68, 2) , (const, 0x1f1, 4)]
[(stack, 0xfffffffffffffe6a, 16) INDIRECT (stack, 0xfffffffffffffe6a, 16) , (const, 0x1f1, 4)]
[(stack, 0xfffffffffffffe7a, 8) INDIRECT (stack, 0xfffffffffffffe7a, 8) , (const, 0x1f1, 4)]
[(stack, 0xfffffffffffffe82, 4) INDIRECT (stack, 0xfffffffffffffe82, 4) , (const, 0x1f1, 4)]
[(stack, 0xfffffffffffffe86, 2) INDIRECT (stack, 0xfffffffffffffe86, 2) , (const, 0x1f1, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x1f1, 4)]
[(stack, 0xffffffffffffff10, 4) INDIRECT (stack, 0xffffffffffffff10, 4) , (const, 0x1f1, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1f1, 4)]
[ ---  CALL (ram, 0x218c90, 8) , (register, 0x0, 4) , (register, 0x8, 8)]
[ ---  BRANCH (ram, 0x263c7b, 1)]
[(register, 0xb8, 8) MULTIEQUAL (register, 0xb8, 8) , (register, 0xb8, 8) , (register, 0xb8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1e6, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(stack, 0xfffffffffffffe68, 2) INDIRECT (stack, 0xfffffffffffffe68, 2) , (const, 0x1e6, 4), (stack, 0xfffffffffffffe68, 2) COPY (const, 0x2, 2)]
[(stack, 0xfffffffffffffe6a, 16) INDIRECT (stack, 0xfffffffffffffe6a, 16) , (const, 0x1e6, 4), (stack, 0xfffffffffffffe6a, 16) MULTIEQUAL (stack, 0xfffffffffffffe6a, 16) , (stack, 0xfffffffffffffe6a, 16) , (stack, 0xfffffffffffffe6a, 16)]
[(stack, 0xfffffffffffffe7a, 8) INDIRECT (stack, 0xfffffffffffffe7a, 8) , (const, 0x1e6, 4), (stack, 0xfffffffffffffe7a, 8) MULTIEQUAL (stack, 0xfffffffffffffe7a, 8) , (stack, 0xfffffffffffffe7a, 8) , (stack, 0xfffffffffffffe7a, 8)]
[(stack, 0xfffffffffffffe82, 4) INDIRECT (stack, 0xfffffffffffffe82, 4) , (const, 0x1e6, 4), (stack, 0xfffffffffffffe82, 4) MULTIEQUAL (stack, 0xfffffffffffffe82, 4) , (stack, 0xfffffffffffffe82, 4) , (stack, 0xfffffffffffffe82, 4)]
[(stack, 0xfffffffffffffe86, 2) INDIRECT (stack, 0xfffffffffffffe86, 2) , (const, 0x1e6, 4), (stack, 0xfffffffffffffe86, 2) MULTIEQUAL (stack, 0xfffffffffffffe86, 2) , (stack, 0xfffffffffffffe86, 2) , (stack, 0xfffffffffffffe86, 2)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x1e6, 4), (stack, 0xfffffffffffffe88, 8) MULTIEQUAL (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8)]
[(stack, 0xffffffffffffff10, 4) INDIRECT (stack, 0xffffffffffffff10, 4) , (const, 0x1e6, 4), (stack, 0xffffffffffffff10, 4) MULTIEQUAL (stack, 0xffffffffffffff10, 4) , (stack, 0xffffffffffffff10, 4) , (stack, 0xffffffffffffff10, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1e6, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CALL (ram, 0x2106c0, 8) , (register, 0x0, 4) , (const, 0x7, 8) , (unique, 0x3800, 8)]
[ ---  BRANCH (ram, 0x263ba9, 1)]
[(register, 0xb8, 8) MULTIEQUAL (register, 0xb8, 8) , (register, 0xb8, 8)]
[ ---  CALL (ram, 0x1e4840, 8) , (const, 0x0, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xcd, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xbe, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(stack, 0xfffffffffffffe68, 2) INDIRECT (stack, 0xfffffffffffffe68, 2) , (const, 0xcd, 4), (stack, 0xfffffffffffffe68, 2) INDIRECT (stack, 0xfffffffffffffe68, 2) , (const, 0xbe, 4), (stack, 0xfffffffffffffe68, 2) MULTIEQUAL (stack, 0xfffffffffffffe68, 2) , (stack, 0xfffffffffffffe68, 2)]
[(stack, 0xfffffffffffffe6a, 16) INDIRECT (stack, 0xfffffffffffffe6a, 16) , (const, 0xcd, 4), (stack, 0xfffffffffffffe6a, 16) INDIRECT (stack, 0xfffffffffffffe6a, 16) , (const, 0xbe, 4), (stack, 0xfffffffffffffe6a, 16) MULTIEQUAL (stack, 0xfffffffffffffe6a, 16) , (stack, 0xfffffffffffffe6a, 16)]
[(stack, 0xfffffffffffffe7a, 8) INDIRECT (stack, 0xfffffffffffffe7a, 8) , (const, 0xcd, 4), (stack, 0xfffffffffffffe7a, 8) INDIRECT (stack, 0xfffffffffffffe7a, 8) , (const, 0xbe, 4), (stack, 0xfffffffffffffe7a, 8) MULTIEQUAL (stack, 0xfffffffffffffe7a, 8) , (stack, 0xfffffffffffffe7a, 8)]
[(stack, 0xfffffffffffffe82, 4) INDIRECT (stack, 0xfffffffffffffe82, 4) , (const, 0xcd, 4), (stack, 0xfffffffffffffe82, 4) INDIRECT (stack, 0xfffffffffffffe82, 4) , (const, 0xbe, 4), (stack, 0xfffffffffffffe82, 4) MULTIEQUAL (stack, 0xfffffffffffffe82, 4) , (stack, 0xfffffffffffffe82, 4)]
[(stack, 0xfffffffffffffe86, 2) INDIRECT (stack, 0xfffffffffffffe86, 2) , (const, 0xcd, 4), (stack, 0xfffffffffffffe86, 2) INDIRECT (stack, 0xfffffffffffffe86, 2) , (const, 0xbe, 4), (stack, 0xfffffffffffffe86, 2) MULTIEQUAL (stack, 0xfffffffffffffe86, 2) , (stack, 0xfffffffffffffe86, 2)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0xcd, 4), (stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0xbe, 4), (stack, 0xfffffffffffffe88, 8) MULTIEQUAL (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8)]
[(stack, 0xffffffffffffff10, 4) INDIRECT (stack, 0xffffffffffffff10, 4) , (const, 0xcd, 4), (stack, 0xffffffffffffff10, 4) INDIRECT (stack, 0xffffffffffffff10, 4) , (const, 0xbe, 4), (stack, 0xffffffffffffff10, 4) MULTIEQUAL (stack, 0xffffffffffffff10, 4) , (stack, 0xffffffffffffff10, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xcd, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xbe, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CALL (ram, 0x13f110, 8) , (const, 0xe, 4) , (unique, 0x3c80, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x263ca0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x111, 4)]
[(stack, 0xfffffffffffffe68, 2) INDIRECT (stack, 0xfffffffffffffe68, 2) , (const, 0x111, 4)]
[(stack, 0xfffffffffffffe6a, 16) INDIRECT (stack, 0xfffffffffffffe6a, 16) , (const, 0x111, 4)]
[(stack, 0xfffffffffffffe7a, 8) INDIRECT (stack, 0xfffffffffffffe7a, 8) , (const, 0x111, 4)]
[(stack, 0xfffffffffffffe82, 4) INDIRECT (stack, 0xfffffffffffffe82, 4) , (const, 0x111, 4)]
[(stack, 0xfffffffffffffe86, 2) INDIRECT (stack, 0xfffffffffffffe86, 2) , (const, 0x111, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x111, 4)]
[(stack, 0xffffffffffffff10, 4) INDIRECT (stack, 0xffffffffffffff10, 4) , (const, 0x111, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x111, 4)]
[ ---  CALL (ram, 0x1e4840, 8) , (register, 0x0, 4)]
[ ---  BRANCH (ram, 0x263bc8, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xdd, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(stack, 0xfffffffffffffe68, 2) INDIRECT (stack, 0xfffffffffffffe68, 2) , (const, 0xdd, 4), (stack, 0xfffffffffffffe68, 2) MULTIEQUAL (stack, 0xfffffffffffffe68, 2) , (stack, 0xfffffffffffffe68, 2)]
[(stack, 0xfffffffffffffe6a, 16) INDIRECT (stack, 0xfffffffffffffe6a, 16) , (const, 0xdd, 4), (stack, 0xfffffffffffffe6a, 16) MULTIEQUAL (stack, 0xfffffffffffffe6a, 16) , (stack, 0xfffffffffffffe6a, 16)]
[(stack, 0xfffffffffffffe7a, 8) INDIRECT (stack, 0xfffffffffffffe7a, 8) , (const, 0xdd, 4), (stack, 0xfffffffffffffe7a, 8) MULTIEQUAL (stack, 0xfffffffffffffe7a, 8) , (stack, 0xfffffffffffffe7a, 8)]
[(stack, 0xfffffffffffffe82, 4) INDIRECT (stack, 0xfffffffffffffe82, 4) , (const, 0xdd, 4), (stack, 0xfffffffffffffe82, 4) MULTIEQUAL (stack, 0xfffffffffffffe82, 4) , (stack, 0xfffffffffffffe82, 4)]
[(stack, 0xfffffffffffffe86, 2) INDIRECT (stack, 0xfffffffffffffe86, 2) , (const, 0xdd, 4), (stack, 0xfffffffffffffe86, 2) MULTIEQUAL (stack, 0xfffffffffffffe86, 2) , (stack, 0xfffffffffffffe86, 2)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0xdd, 4), (stack, 0xfffffffffffffe88, 8) MULTIEQUAL (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8)]
[(stack, 0xffffffffffffff10, 4) INDIRECT (stack, 0xffffffffffffff10, 4) , (const, 0xdd, 4), (stack, 0xffffffffffffff10, 4) MULTIEQUAL (stack, 0xffffffffffffff10, 4) , (stack, 0xffffffffffffff10, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xdd, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CALL (ram, 0x210940, 8) , (register, 0x0, 4)]
[(stack, 0xffffffffffffff10, 4) MULTIEQUAL (stack, 0xffffffffffffff10, 4) , (stack, 0xffffffffffffff10, 4)]
[(stack, 0xfffffffffffffe88, 8) MULTIEQUAL (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8)]
[(stack, 0xfffffffffffffe86, 2) MULTIEQUAL (stack, 0xfffffffffffffe86, 2) , (stack, 0xfffffffffffffe86, 2)]
[(stack, 0xfffffffffffffe82, 4) MULTIEQUAL (stack, 0xfffffffffffffe82, 4) , (stack, 0xfffffffffffffe82, 4)]
[(stack, 0xfffffffffffffe7a, 8) MULTIEQUAL (stack, 0xfffffffffffffe7a, 8) , (stack, 0xfffffffffffffe7a, 8)]
[(stack, 0xfffffffffffffe6a, 16) MULTIEQUAL (stack, 0xfffffffffffffe6a, 16) , (stack, 0xfffffffffffffe6a, 16)]
[(stack, 0xfffffffffffffe68, 2) MULTIEQUAL (stack, 0xfffffffffffffe68, 2) , (stack, 0xfffffffffffffe68, 2)]
[(register, 0x0, 8) COPY (register, 0xb8, 8), (register, 0xb8, 8) MULTIEQUAL (register, 0xb8, 8) , (register, 0xb8, 8)]
[ ---  CBRANCH (ram, 0x263cdb, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffffc0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10000243, 8), (unique, 0x10000243, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffe68, 2) INDIRECT (stack, 0xfffffffffffffe68, 2) , (const, 0x10a, 4)]
[(stack, 0xfffffffffffffe6a, 16) INDIRECT (stack, 0xfffffffffffffe6a, 16) , (const, 0x10a, 4)]
[(stack, 0xfffffffffffffe7a, 8) INDIRECT (stack, 0xfffffffffffffe7a, 8) , (const, 0x10a, 4)]
[(stack, 0xfffffffffffffe82, 4) INDIRECT (stack, 0xfffffffffffffe82, 4) , (const, 0x10a, 4)]
[(stack, 0xfffffffffffffe86, 2) INDIRECT (stack, 0xfffffffffffffe86, 2) , (const, 0x10a, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x10a, 4)]
[(stack, 0xffffffffffffff10, 4) INDIRECT (stack, 0xffffffffffffff10, 4) , (const, 0x10a, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x10a, 4)]
[ ---  CALL (ram, 0x234c80, 8)]
[ ---  RETURN (const, 0x1, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8)]
[(stack, 0xffffffffffffff10, 4) INDIRECT (stack, 0xffffffffffffff10, 4) , (const, 0x71, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x71, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x38, 8) , (const, 0x0, 8)]
[(unique, 0x1000021b, 8) COPY (register, 0x38, 8), (register, 0x38, 8) PTRADD (register, 0x38, 8) , (unique, 0x100001eb, 8) , (const, 0x8, 8), (unique, 0x100001eb, 8) INT_ADD (unique, 0x100001e3, 8) , (const, 0x1, 8), (unique, 0x100001e3, 8) INT_MULT (unique, 0xb880, 8) , (const, 0xfffffffffffffffe, 8), (unique, 0xb880, 8) INT_ZEXT (register, 0x20a, 1)]
[(register, 0x8, 8) INT_ADD (register, 0x8, 8) , (const, 0xffffffffffffffff, 8)]
[ ---  BRANCH (ram, 0x263b55, 1)]
