[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x34, 4)]
[(ram, 0x4eade8, 8) INDIRECT (ram, 0x4eade8, 8) , (const, 0x34, 4)]
[(ram, 0x4eae58, 8) INDIRECT (ram, 0x4eae58, 8) , (const, 0x34, 4)]
[(stack, 0x0, 8) INDIRECT (stack, 0x0, 8) , (const, 0x34, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x34, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x34, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x34, 4)]
[(stack, 0xffffffffffffff90, 2) INDIRECT (stack, 0xffffffffffffff90, 2) , (const, 0x34, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x34, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x34, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x34, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x34, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x34, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x100001f8, 8), (unique, 0x100001f8, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8)]
[ ---  CALLIND (unique, 0xbd80, 8) , (unique, 0x3c80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000200, 8), (unique, 0x10000200, 8) CAST (unique, 0x3c80, 8), (unique, 0x3c80, 8) PTRADD (ram, 0x4eade8, 8) , (const, 0xf00, 8) , (const, 0x1, 8), (unique, 0x3c80, 8) PTRADD (ram, 0x4eade8, 8) , (const, 0x930, 8) , (const, 0x1, 8)]
[(register, 0x28, 8) INT_ZEXT (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000210, 8), (unique, 0x10000210, 8) CAST (unique, 0x3800, 8), (unique, 0x3800, 8) PTRADD (unique, 0x100001b8, 8) , (const, 0x8, 8) , (const, 0x1, 8), (unique, 0x100001b8, 8) COPY (ram, 0x4eade8, 8)]
[ ---  CBRANCH (ram, 0x265f9c, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (unique, 0x3100, 8) , (const, 0x1, 8), (unique, 0x3100, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0xffffffffffffffff, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000208, 8), (unique, 0x10000208, 8) CAST (unique, 0x3c80, 8), (unique, 0x3c80, 8) PTRADD (unique, 0x100001b8, 8) , (const, 0x900, 8) , (const, 0x1, 8), (unique, 0x100001b8, 8) COPY (ram, 0x4eade8, 8)]
[(register, 0x80, 8) COPY (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x265e76, 1)]
[(register, 0x80, 8) COPY (const, 0x0, 8)]
[(unique, 0x3e80, 8) CAST (unique, 0x10000220, 8), (unique, 0x10000220, 8) PTRADD (unique, 0x100001b8, 8) , (unique, 0x10000218, 8) , (const, 0x1, 8), (unique, 0x10000218, 8) CAST (unique, 0x100000fb, 8), (unique, 0x100000fb, 8) PTRADD (unique, 0x100001af, 8) , (register, 0x0, 8) , (const, 0x1, 8), (unique, 0x100001af, 8) PTRSUB (const, 0x0, 8) , (const, 0xffffffffffffff70, 8), (register, 0x0, 8) INT_MULT (unique, 0xbd80, 8) , (const, 0x90, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (unique, 0x100001a6, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (unique, 0x1000019e, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (unique, 0x10000196, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (unique, 0x1000018e, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (unique, 0x10000186, 8)]
[(stack, 0xffffffffffffff90, 2) MULTIEQUAL (stack, 0xffffffffffffff90, 2) , (unique, 0x10000184, 2)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (unique, 0x1000017c, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (unique, 0x10000174, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (unique, 0x1000016c, 8)]
[(ram, 0x4eae58, 8) MULTIEQUAL (ram, 0x4eae58, 8) , (unique, 0x10000164, 8)]
[(ram, 0x4eade8, 8) MULTIEQUAL (ram, 0x4eade8, 8) , (unique, 0x1000015c, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (unique, 0x10000154, 8)]
[(register, 0x28, 8) MULTIEQUAL (register, 0x28, 8) , (unique, 0x10000144, 8)]
[(register, 0x8, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0x8, 8)]
[(unique, 0x100001e8, 8) COPY (register, 0x80, 8), (register, 0x80, 8) MULTIEQUAL (register, 0x80, 8) , (unique, 0x1000014c, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x10, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0x3e80, 8) , (register, 0x10, 8)]
[(unique, 0x10000144, 8) MULTIEQUAL (register, 0x28, 8) , (register, 0x28, 8)]
[(unique, 0x1000014c, 8) MULTIEQUAL (unique, 0x100001e8, 8) , (unique, 0x100001f0, 8)]
[(unique, 0x10000154, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x1000015c, 8) MULTIEQUAL (ram, 0x4eade8, 8) , (ram, 0x4eade8, 8)]
[(unique, 0x10000164, 8) MULTIEQUAL (ram, 0x4eae58, 8) , (ram, 0x4eae58, 8)]
[(unique, 0x1000016c, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(unique, 0x10000174, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(unique, 0x1000017c, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(unique, 0x10000184, 2) MULTIEQUAL (stack, 0xffffffffffffff90, 2) , (stack, 0xffffffffffffff90, 2)]
[(unique, 0x10000186, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(unique, 0x1000018e, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(unique, 0x10000196, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(unique, 0x1000019e, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(unique, 0x100001a6, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CBRANCH (ram, 0x265e69, 1) , (unique, 0x10000143, 1), (unique, 0x10000143, 1) INT_NOTEQUAL (unique, 0x1000013b, 8) , (const, 0x0, 8), (unique, 0x1000013b, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8)]
[(register, 0x28, 8) INT_ADD (unique, 0x10000144, 8) , (register, 0x0, 8), (register, 0x0, 8) INT_ZEXT (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000228, 8), (unique, 0x10000228, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[(unique, 0x100001c0, 8) COPY (unique, 0x1000014c, 8)]
[ ---  CBRANCH (ram, 0x265e60, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESSEQUAL (unique, 0xbd80, 8) , (stack, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x10000230, 8), (unique, 0x10000230, 8) INT_ADD (unique, 0x1000013b, 8) , (const, 0x340, 8)]
[ ---  CBRANCH (ram, 0x265e60, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (stack, 0x0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x10000238, 8), (unique, 0x10000238, 8) INT_ADD (unique, 0x1000013b, 8) , (const, 0x348, 8)]
[(unique, 0x100001e0, 8) COPY (register, 0x8, 8)]
[ ---  CBRANCH (ram, 0x265f60, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x58c00, 1) , (const, 0x0, 1), (unique, 0x58c00, 1) INT_AND (unique, 0xbb00, 1) , (const, 0x40, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x10000240, 8), (unique, 0x10000240, 8) INT_ADD (unique, 0x1000013b, 8) , (const, 0x315, 8)]
[(register, 0x110, 8) INDIRECT (unique, 0x10000154, 8) , (const, 0x1de, 4)]
[(ram, 0x4eade8, 8) INDIRECT (unique, 0x1000015c, 8) , (const, 0x1de, 4)]
[(ram, 0x4eae58, 8) INDIRECT (unique, 0x10000164, 8) , (const, 0x1de, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (unique, 0x1000016c, 8) , (const, 0x1de, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (unique, 0x10000174, 8) , (const, 0x1de, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (unique, 0x1000017c, 8) , (const, 0x1de, 4)]
[(stack, 0xffffffffffffff90, 2) INDIRECT (unique, 0x10000184, 2) , (const, 0x1de, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (unique, 0x10000186, 8) , (const, 0x1de, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (unique, 0x1000018e, 8) , (const, 0x1de, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (unique, 0x10000196, 8) , (const, 0x1de, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (unique, 0x1000019e, 8) , (const, 0x1de, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (unique, 0x100001a6, 8) , (const, 0x1de, 4)]
[(unique, 0x100001d0, 8) COPY (unique, 0x1000014c, 8)]
[ ---  CBRANCH (ram, 0x265f8f, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x2662b0, 8) , (unique, 0x1000013b, 8) , (stack, 0x0, 8)]
[(unique, 0x100001d8, 8) COPY (register, 0x8, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (unique, 0x100001a6, 8) , (unique, 0x100001a6, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (unique, 0x100001a6, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (unique, 0x1000019e, 8) , (unique, 0x1000019e, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (unique, 0x1000019e, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (unique, 0x10000196, 8) , (unique, 0x10000196, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (unique, 0x10000196, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (unique, 0x1000018e, 8) , (unique, 0x1000018e, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (unique, 0x1000018e, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (unique, 0x10000186, 8) , (unique, 0x10000186, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (unique, 0x10000186, 8)]
[(stack, 0xffffffffffffff90, 2) MULTIEQUAL (unique, 0x10000184, 2) , (unique, 0x10000184, 2) , (stack, 0xffffffffffffff90, 2) , (stack, 0xffffffffffffff90, 2) , (unique, 0x10000184, 2)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (unique, 0x1000017c, 8) , (unique, 0x1000017c, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (unique, 0x1000017c, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (unique, 0x10000174, 8) , (unique, 0x10000174, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (unique, 0x10000174, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (unique, 0x1000016c, 8) , (unique, 0x1000016c, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (unique, 0x1000016c, 8)]
[(ram, 0x4eae58, 8) MULTIEQUAL (unique, 0x10000164, 8) , (unique, 0x10000164, 8) , (ram, 0x4eae58, 8) , (ram, 0x4eae58, 8) , (unique, 0x10000164, 8)]
[(ram, 0x4eade8, 8) MULTIEQUAL (unique, 0x1000015c, 8) , (unique, 0x1000015c, 8) , (ram, 0x4eade8, 8) , (ram, 0x4eade8, 8) , (unique, 0x1000015c, 8)]
[(register, 0x110, 8) MULTIEQUAL (unique, 0x10000154, 8) , (unique, 0x10000154, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (unique, 0x10000154, 8)]
[(unique, 0x100001f0, 8) COPY (register, 0x80, 8), (register, 0x80, 8) MULTIEQUAL (unique, 0x100001c0, 8) , (unique, 0x100001c0, 8) , (unique, 0x100001d0, 8) , (unique, 0x100001d8, 8) , (unique, 0x100001e0, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000248, 8), (unique, 0x10000248, 8) INT_ADD (unique, 0x1000013b, 8) , (const, 0x18, 8)]
[(register, 0x10, 8) PTRADD (register, 0x10, 8) , (const, 0xffffffffffffffee, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x265e20, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x8, 8) , (const, 0x0, 8), (register, 0x8, 8) INT_ADD (register, 0x8, 8) , (const, 0xffffffffffffffff, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (unique, 0x100001a6, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (unique, 0x1000019e, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (unique, 0x10000196, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (unique, 0x1000018e, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (unique, 0x10000186, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 2) MULTIEQUAL (unique, 0x10000184, 2) , (stack, 0xffffffffffffff90, 2)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (unique, 0x1000017c, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (unique, 0x10000174, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (unique, 0x1000016c, 8) , (stack, 0xffffffffffffff78, 8)]
[(ram, 0x4eae58, 8) MULTIEQUAL (unique, 0x10000164, 8) , (ram, 0x4eae58, 8)]
[(ram, 0x4eade8, 8) MULTIEQUAL (unique, 0x1000015c, 8) , (ram, 0x4eade8, 8)]
[(register, 0x110, 8) MULTIEQUAL (unique, 0x10000154, 8) , (register, 0x110, 8)]
[(register, 0x28, 8) MULTIEQUAL (unique, 0x10000144, 8) , (register, 0x28, 8)]
[ ---  CBRANCH (ram, 0x265f98, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000250, 8), (unique, 0x10000250, 8) CAST (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (unique, 0x100001b8, 8) , (register, 0x0, 8) , (const, 0x1, 8), (register, 0x0, 8) INT_MULT (register, 0x80, 8) , (const, 0x90, 8), (register, 0x80, 8) MULTIEQUAL (unique, 0x1000014c, 8) , (register, 0x80, 8)]
[(unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff78, 8)]
[ ---  BRANCH (ram, 0x265ea5, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(ram, 0x4eae58, 8) MULTIEQUAL (ram, 0x4eae58, 8) , (ram, 0x4eae58, 8)]
[(ram, 0x4eade8, 8) MULTIEQUAL (ram, 0x4eade8, 8) , (ram, 0x4eade8, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000258, 8), (unique, 0x10000258, 8) INT_ADD (register, 0xb8, 8) , (const, 0x28, 8), (register, 0xb8, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x1, 8) , (const, 0x8, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000258, 8), (unique, 0x10000258, 8) INT_ADD (register, 0xb8, 8) , (const, 0x28, 8), (register, 0xb8, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8)]
[(stack, 0xffffffffffffffb0, 8) COPY (const, 0x0, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x54, 8) , (const, 0x8, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000258, 8), (unique, 0x10000258, 8) INT_ADD (register, 0xb8, 8) , (const, 0x28, 8), (register, 0xb8, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8)]
[(unique, 0xbc00, 2) LOAD (const, 0x1b1, 4) , (unique, 0x10000260, 8), (unique, 0x10000260, 8) CAST (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x56, 8) , (const, 0x8, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000258, 8), (unique, 0x10000258, 8) INT_ADD (register, 0xb8, 8) , (const, 0x28, 8), (register, 0xb8, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8)]
[(register, 0x0, 8) INT_SUB (unique, 0xbd80, 8) , (register, 0x28, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000268, 8), (unique, 0x10000268, 8) CAST (unique, 0x3c80, 8), (unique, 0x3c80, 8) PTRADD (unique, 0x100001b8, 8) , (const, 0x958, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x265f13, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x89, 8) , (const, 0x8, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000258, 8), (unique, 0x10000258, 8) INT_ADD (register, 0xb8, 8) , (const, 0x28, 8), (register, 0xb8, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x16a, 4)]
[(ram, 0x4eade8, 8) INDIRECT (ram, 0x4eade8, 8) , (const, 0x16a, 4)]
[(ram, 0x4eae58, 8) INDIRECT (ram, 0x4eae58, 8) , (const, 0x16a, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x16a, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x16a, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x16a, 4)]
[(stack, 0xffffffffffffff90, 2) INDIRECT (unique, 0xbc00, 2) , (const, 0x16a, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x16a, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (register, 0x0, 8) , (const, 0x16a, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x16a, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x16a, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x16a, 4)]
[(register, 0x0, 8) CALLIND (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000270, 8), (unique, 0x10000270, 8) CAST (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (ram, 0x4eae58, 8) , (const, 0x198, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x173, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eade8, 8) INDIRECT (ram, 0x4eade8, 8) , (const, 0x173, 4), (ram, 0x4eade8, 8) MULTIEQUAL (ram, 0x4eade8, 8) , (ram, 0x4eade8, 8)]
[(ram, 0x4eae58, 8) INDIRECT (ram, 0x4eae58, 8) , (const, 0x173, 4), (ram, 0x4eae58, 8) MULTIEQUAL (ram, 0x4eae58, 8) , (ram, 0x4eae58, 8)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x173, 4), (stack, 0xffffffffffffff78, 8) MULTIEQUAL (unique, 0xbd80, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x173, 4), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (unique, 0xbd80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x173, 4), (stack, 0xffffffffffffff88, 8) MULTIEQUAL (unique, 0xbd80, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff90, 2) INDIRECT (stack, 0xffffffffffffff90, 2) , (const, 0x173, 4), (stack, 0xffffffffffffff90, 2) MULTIEQUAL (unique, 0xbc00, 2) , (stack, 0xffffffffffffff90, 2)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x173, 4), (stack, 0xffffffffffffff98, 8) MULTIEQUAL (unique, 0xbd80, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x173, 4), (stack, 0xffffffffffffffa0, 8) MULTIEQUAL (register, 0x0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x173, 4), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (unique, 0xbd80, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x173, 4), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (register, 0x0, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x173, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CBRANCH (ram, 0x265e98, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALLIND (register, 0x38, 8) , (unique, 0x3800, 8) , (const, 0x40, 8) , (register, 0x30, 8)]
[ ---  CBRANCH (ram, 0x265f98, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000278, 8), (unique, 0x10000278, 8) INT_ADD (register, 0xb8, 8) , (const, 0x18, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 2) MULTIEQUAL (stack, 0xffffffffffffff90, 2) , (stack, 0xffffffffffffff90, 2)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(ram, 0x4eae58, 8) MULTIEQUAL (ram, 0x4eae58, 8) , (ram, 0x4eae58, 8)]
[(ram, 0x4eade8, 8) MULTIEQUAL (ram, 0x4eade8, 8) , (ram, 0x4eade8, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x0, 4) COPY (const, 0x0, 4)]
[ ---  BRANCH (ram, 0x265f29, 1)]
[(ram, 0x4eade8, 8) INDIRECT (ram, 0x4eade8, 8) , (const, 0x187, 4), (ram, 0x4eade8, 8) MULTIEQUAL (ram, 0x4eade8, 8) , (ram, 0x4eade8, 8)]
[(ram, 0x4eae58, 8) INDIRECT (ram, 0x4eae58, 8) , (const, 0x187, 4), (ram, 0x4eae58, 8) MULTIEQUAL (ram, 0x4eae58, 8) , (ram, 0x4eae58, 8)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x187, 4), (stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x187, 4), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x187, 4), (stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff90, 2) INDIRECT (stack, 0xffffffffffffff90, 2) , (const, 0x187, 4), (stack, 0xffffffffffffff90, 2) MULTIEQUAL (stack, 0xffffffffffffff90, 2) , (stack, 0xffffffffffffff90, 2)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x187, 4), (stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x187, 4), (stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x187, 4), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x187, 4), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[ ---  CALLIND (unique, 0xbd80, 8) , (unique, 0x3c80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000280, 8), (unique, 0x10000280, 8) CAST (unique, 0x3c80, 8), (unique, 0x3c80, 8) PTRADD (unique, 0x100001b8, 8) , (const, 0xf08, 8) , (const, 0x1, 8), (unique, 0x3c80, 8) PTRADD (unique, 0x100001b8, 8) , (const, 0x930, 8) , (const, 0x1, 8)]
[(register, 0x0, 4) COPY (register, 0x0, 4), (register, 0x0, 4) MULTIEQUAL (register, 0x0, 4) , (register, 0x0, 4)]
[ ---  CBRANCH (ram, 0x265fa4, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffffc0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10000288, 8), (unique, 0x10000288, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x187, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x187, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x1b6, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x1b6, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x1b6, 4)]
[(stack, 0xffffffffffffff90, 2) INDIRECT (stack, 0xffffffffffffff90, 2) , (const, 0x1b6, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x1b6, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x1b6, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x1b6, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x1b6, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1b6, 4)]
[ ---  CALL (ram, 0x234c80, 8)]
[(ram, 0x4eade8, 8) COPY (ram, 0x4eade8, 8), (ram, 0x4eade8, 8) INDIRECT (ram, 0x4eade8, 8) , (const, 0x1b6, 4)]
[(ram, 0x4eae58, 8) COPY (ram, 0x4eae58, 8), (ram, 0x4eae58, 8) INDIRECT (ram, 0x4eae58, 8) , (const, 0x1b6, 4)]
[ ---  RETURN (const, 0x1, 4)]
[(ram, 0x4eade8, 8) COPY (ram, 0x4eade8, 8)]
[(ram, 0x4eae58, 8) COPY (ram, 0x4eae58, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 4)]
