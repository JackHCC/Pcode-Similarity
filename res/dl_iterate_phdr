[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff78, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x1000017c, 8), (unique, 0x1000017c, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8)]
[ ---  CBRANCH (ram, 0x49754e, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4c4f08, 8) , (const, 0x0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x3a, 4)]
[(ram, 0x4c4f08, 8) INDIRECT (ram, 0x4c4f08, 8) , (const, 0x3a, 4)]
[(ram, 0x4c4f70, 8) INDIRECT (ram, 0x4c4f70, 8) , (const, 0x3a, 4)]
[(ram, 0x4c6120, 8) INDIRECT (ram, 0x4c6120, 8) , (const, 0x3a, 4)]
[(ram, 0x4c6180, 8) INDIRECT (ram, 0x4c6180, 8) , (const, 0x3a, 4)]
[(ram, 0x4c6188, 4) INDIRECT (ram, 0x4c6188, 4) , (const, 0x3a, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x3a, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x3a, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x3a, 4)]
[(stack, 0xffffffffffffff90, 2) INDIRECT (stack, 0xffffffffffffff90, 2) , (const, 0x3a, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x3a, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x3a, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x3a, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x3a, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x3a, 4)]
[ ---  CALL (ram, 0x0, 8) , (unique, 0x100000b3, 8), (unique, 0x100000b3, 8) PTRSUB (const, 0x0, 8) , (const, 0x4c60a0, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (unique, 0xbd80, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 2) MULTIEQUAL (stack, 0xffffffffffffff90, 2) , (stack, 0xffffffffffffff90, 2)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(ram, 0x4c6120, 8) MULTIEQUAL (ram, 0x4c6120, 8) , (ram, 0x4c6120, 8)]
[(ram, 0x4c4f70, 8) MULTIEQUAL (ram, 0x4c4f70, 8) , (ram, 0x4c4f70, 8)]
[(ram, 0x4c4f08, 8) MULTIEQUAL (ram, 0x4c4f08, 8) , (ram, 0x4c4f08, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xa0, 8) INT_ZEXT (ram, 0x4c6188, 4), (ram, 0x4c6188, 4) MULTIEQUAL (ram, 0x4c6188, 4) , (ram, 0x4c6188, 4)]
[(unique, 0x10000174, 8) COPY (ram, 0x4c6180, 8), (ram, 0x4c6180, 8) MULTIEQUAL (ram, 0x4c6180, 8) , (ram, 0x4c6180, 8)]
[(unique, 0x100000ec, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x100000f4, 8) MULTIEQUAL (ram, 0x4c4f08, 8) , (ram, 0x4c4f08, 8)]
[(unique, 0x100000fc, 8) MULTIEQUAL (ram, 0x4c4f70, 8) , (ram, 0x4c4f70, 8)]
[(unique, 0x10000104, 8) MULTIEQUAL (ram, 0x4c6120, 8) , (ram, 0x4c6120, 8)]
[(unique, 0x10000114, 8) MULTIEQUAL (ram, 0x4c6180, 8) , (ram, 0x4c6180, 8)]
[(unique, 0x1000011c, 4) MULTIEQUAL (ram, 0x4c6188, 4) , (ram, 0x4c6188, 4)]
[(unique, 0x10000120, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(unique, 0x10000128, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(unique, 0x10000130, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(unique, 0x10000138, 2) MULTIEQUAL (stack, 0xffffffffffffff90, 2) , (stack, 0xffffffffffffff90, 2)]
[(unique, 0x1000013a, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(unique, 0x10000142, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(unique, 0x1000014a, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(unique, 0x10000152, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(unique, 0x1000015a, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CBRANCH (ram, 0x497600, 1) , (unique, 0x100000eb, 1), (unique, 0x100000eb, 1) INT_NOTEQUAL (unique, 0x1000010c, 8) , (const, 0x0, 8), (unique, 0x1000010c, 8) MULTIEQUAL (unique, 0x10000174, 8) , (unique, 0xbd80, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000184, 8), (unique, 0x10000184, 8) INT_ADD (unique, 0x1000010c, 8) , (const, 0x28, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x1, 8) , (const, 0x8, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000184, 8), (unique, 0x10000184, 8) INT_ADD (unique, 0x1000010c, 8) , (const, 0x28, 8)]
[(stack, 0xffffffffffffffb0, 8) COPY (const, 0x0, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x55, 8) , (const, 0x8, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000184, 8), (unique, 0x10000184, 8) INT_ADD (unique, 0x1000010c, 8) , (const, 0x28, 8)]
[(unique, 0xbc00, 2) LOAD (const, 0x1b1, 4) , (unique, 0x1000018c, 8), (unique, 0x1000018c, 8) CAST (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x57, 8) , (const, 0x8, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000184, 8), (unique, 0x10000184, 8) INT_ADD (unique, 0x1000010c, 8) , (const, 0x28, 8)]
[(register, 0x0, 8) INT_SUB (unique, 0x10000104, 8) , (register, 0xa0, 8)]
[(unique, 0x1000016c, 8) COPY (unique, 0x10000104, 8)]
[ ---  CBRANCH (ram, 0x497570, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x8b, 8) , (const, 0x8, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000184, 8), (unique, 0x10000184, 8) INT_ADD (unique, 0x1000010c, 8) , (const, 0x28, 8)]
[(register, 0x110, 8) INDIRECT (unique, 0x100000ec, 8) , (const, 0x89, 4)]
[(ram, 0x4c4f08, 8) INDIRECT (unique, 0x100000f4, 8) , (const, 0x89, 4)]
[(ram, 0x4c4f70, 8) INDIRECT (unique, 0x100000fc, 8) , (const, 0x89, 4)]
[(ram, 0x4c6120, 8) INDIRECT (unique, 0x10000104, 8) , (const, 0x89, 4)]
[(ram, 0x4c6180, 8) INDIRECT (unique, 0x10000114, 8) , (const, 0x89, 4)]
[(ram, 0x4c6188, 4) INDIRECT (unique, 0x1000011c, 4) , (const, 0x89, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x89, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x89, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x89, 4)]
[(stack, 0xffffffffffffff90, 2) INDIRECT (unique, 0xbc00, 2) , (const, 0x89, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (unique, 0x1000016c, 8) , (const, 0x89, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (register, 0x0, 8) , (const, 0x89, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x89, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x89, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (unique, 0x1000015a, 8) , (const, 0x89, 4)]
[(register, 0x0, 8) CALL (ram, 0x486870, 8)]
[ ---  BRANCH (ram, 0x497570, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x93, 4), (register, 0x110, 8) MULTIEQUAL (unique, 0x100000ec, 8) , (register, 0x110, 8)]
[(ram, 0x4c4f08, 8) INDIRECT (ram, 0x4c4f08, 8) , (const, 0x93, 4), (ram, 0x4c4f08, 8) MULTIEQUAL (unique, 0x100000f4, 8) , (ram, 0x4c4f08, 8)]
[(ram, 0x4c4f70, 8) INDIRECT (ram, 0x4c4f70, 8) , (const, 0x93, 4), (ram, 0x4c4f70, 8) MULTIEQUAL (unique, 0x100000fc, 8) , (ram, 0x4c4f70, 8)]
[(ram, 0x4c6120, 8) INDIRECT (ram, 0x4c6120, 8) , (const, 0x93, 4), (ram, 0x4c6120, 8) MULTIEQUAL (unique, 0x10000104, 8) , (ram, 0x4c6120, 8)]
[(ram, 0x4c6180, 8) INDIRECT (ram, 0x4c6180, 8) , (const, 0x93, 4), (ram, 0x4c6180, 8) MULTIEQUAL (unique, 0x10000114, 8) , (ram, 0x4c6180, 8)]
[(ram, 0x4c6188, 4) INDIRECT (ram, 0x4c6188, 4) , (const, 0x93, 4), (ram, 0x4c6188, 4) MULTIEQUAL (unique, 0x1000011c, 4) , (ram, 0x4c6188, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x93, 4), (stack, 0xffffffffffffff78, 8) MULTIEQUAL (unique, 0xbd80, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x93, 4), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (unique, 0xbd80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x93, 4), (stack, 0xffffffffffffff88, 8) MULTIEQUAL (unique, 0xbd80, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff90, 2) INDIRECT (stack, 0xffffffffffffff90, 2) , (const, 0x93, 4), (stack, 0xffffffffffffff90, 2) MULTIEQUAL (unique, 0xbc00, 2) , (stack, 0xffffffffffffff90, 2)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x93, 4), (stack, 0xffffffffffffff98, 8) MULTIEQUAL (unique, 0x1000016c, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x93, 4), (stack, 0xffffffffffffffa0, 8) MULTIEQUAL (register, 0x0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x93, 4), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (unique, 0xbd80, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x93, 4), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (register, 0x0, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x93, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (unique, 0x1000015a, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CBRANCH (ram, 0x497603, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALLIND (register, 0x38, 8) , (register, 0x20, 8) , (const, 0x40, 8) , (register, 0x30, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000194, 8), (unique, 0x10000194, 8) INT_ADD (unique, 0x1000010c, 8) , (const, 0x18, 8)]
[(register, 0xb0, 4) COPY (const, 0x0, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (unique, 0x1000015a, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (unique, 0x10000152, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (unique, 0x1000014a, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (unique, 0x10000142, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (unique, 0x1000013a, 8)]
[(stack, 0xffffffffffffff90, 2) MULTIEQUAL (stack, 0xffffffffffffff90, 2) , (unique, 0x10000138, 2)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (unique, 0x10000130, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (unique, 0x10000128, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (unique, 0x10000120, 8)]
[(ram, 0x4c6188, 4) MULTIEQUAL (ram, 0x4c6188, 4) , (unique, 0x1000011c, 4)]
[(ram, 0x4c6180, 8) MULTIEQUAL (ram, 0x4c6180, 8) , (unique, 0x10000114, 8)]
[(ram, 0x4c6120, 8) MULTIEQUAL (ram, 0x4c6120, 8) , (unique, 0x10000104, 8)]
[(ram, 0x4c4f08, 8) MULTIEQUAL (ram, 0x4c4f08, 8) , (unique, 0x100000f4, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (unique, 0x100000ec, 8)]
[(register, 0xb0, 4) MULTIEQUAL (register, 0x0, 4) , (register, 0xb0, 4)]
[ ---  CBRANCH (ram, 0x497619, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4c4f70, 8) , (const, 0x0, 8), (ram, 0x4c4f70, 8) MULTIEQUAL (ram, 0x4c4f70, 8) , (unique, 0x100000fc, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xc5, 4)]
[(ram, 0x4c4f08, 8) INDIRECT (ram, 0x4c4f08, 8) , (const, 0xc5, 4)]
[(ram, 0x4c4f70, 8) INDIRECT (ram, 0x4c4f70, 8) , (const, 0xc5, 4)]
[(ram, 0x4c6120, 8) INDIRECT (ram, 0x4c6120, 8) , (const, 0xc5, 4)]
[(ram, 0x4c6180, 8) INDIRECT (ram, 0x4c6180, 8) , (const, 0xc5, 4)]
[(ram, 0x4c6188, 4) INDIRECT (ram, 0x4c6188, 4) , (const, 0xc5, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0xc5, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0xc5, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0xc5, 4)]
[(stack, 0xffffffffffffff90, 2) INDIRECT (stack, 0xffffffffffffff90, 2) , (const, 0xc5, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0xc5, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0xc5, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0xc5, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0xc5, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xc5, 4)]
[ ---  CALL (ram, 0x0, 8) , (unique, 0x100000bb, 8), (unique, 0x100000bb, 8) PTRSUB (const, 0x0, 8) , (const, 0x4c60a0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 2) MULTIEQUAL (stack, 0xffffffffffffff90, 2) , (stack, 0xffffffffffffff90, 2)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(ram, 0x4c6188, 4) MULTIEQUAL (ram, 0x4c6188, 4) , (ram, 0x4c6188, 4)]
[(ram, 0x4c6180, 8) MULTIEQUAL (ram, 0x4c6180, 8) , (ram, 0x4c6180, 8)]
[(ram, 0x4c6120, 8) MULTIEQUAL (ram, 0x4c6120, 8) , (ram, 0x4c6120, 8)]
[(ram, 0x4c4f70, 8) MULTIEQUAL (ram, 0x4c4f70, 8) , (ram, 0x4c4f70, 8)]
[(ram, 0x4c4f08, 8) MULTIEQUAL (ram, 0x4c4f08, 8) , (ram, 0x4c4f08, 8)]
[ ---  CBRANCH (ram, 0x49763b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffffc0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x1000019c, 8), (unique, 0x1000019c, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0xf2, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0xf2, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0xf2, 4)]
[(stack, 0xffffffffffffff90, 2) INDIRECT (stack, 0xffffffffffffff90, 2) , (const, 0xf2, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0xf2, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0xf2, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0xf2, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0xf2, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xf2, 4)]
[ ---  CALL (ram, 0x458dd0, 8)]
[(ram, 0x4c4f08, 8) COPY (ram, 0x4c4f08, 8), (ram, 0x4c4f08, 8) INDIRECT (ram, 0x4c4f08, 8) , (const, 0xf2, 4)]
[(ram, 0x4c4f70, 8) COPY (ram, 0x4c4f70, 8), (ram, 0x4c4f70, 8) INDIRECT (ram, 0x4c4f70, 8) , (const, 0xf2, 4)]
[(ram, 0x4c6120, 8) COPY (ram, 0x4c6120, 8), (ram, 0x4c6120, 8) INDIRECT (ram, 0x4c6120, 8) , (const, 0xf2, 4)]
[(ram, 0x4c6180, 8) COPY (ram, 0x4c6180, 8), (ram, 0x4c6180, 8) INDIRECT (ram, 0x4c6180, 8) , (const, 0xf2, 4)]
[(ram, 0x4c6188, 4) COPY (ram, 0x4c6188, 4), (ram, 0x4c6188, 4) INDIRECT (ram, 0x4c6188, 4) , (const, 0xf2, 4)]
[ ---  RETURN (const, 0x1, 4)]
[(ram, 0x4c4f08, 8) COPY (ram, 0x4c4f08, 8)]
[(ram, 0x4c4f70, 8) COPY (ram, 0x4c4f70, 8)]
[(ram, 0x4c6120, 8) COPY (ram, 0x4c6120, 8)]
[(ram, 0x4c6180, 8) COPY (ram, 0x4c6180, 8)]
[(ram, 0x4c6188, 4) COPY (ram, 0x4c6188, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 4), (register, 0x0, 4) COPY (register, 0xb0, 4)]
