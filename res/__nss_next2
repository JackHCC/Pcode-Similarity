[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff78, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff78, 8)]
[(register, 0x20, 8) CAST (unique, 0x100003de, 8), (unique, 0x100003de, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff78, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffffb0, 8) COPY (register, 0x30, 8)]
[(stack, 0xffffffffffffffa0, 8) COPY (register, 0x10, 8)]
[(stack, 0xffffffffffffffc0, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x100003e6, 8), (unique, 0x100003e6, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8)]
[ ---  CBRANCH (ram, 0x249730, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x88, 4) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x249794, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (const, 0x4, 4) , (register, 0x80, 4), (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x2, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x30a, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x30a, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x30a, 4)]
[ ---  CALL (ram, 0x189910, 8) , (unique, 0x10000215, 8), (unique, 0x10000215, 8) COPY (const, 0x2b6ffc, 8)]
[(ram, 0x4efeb0, 4) COPY (ram, 0x4efeb0, 4), (ram, 0x4efeb0, 4) INDIRECT (ram, 0x4efeb0, 4) , (const, 0x30a, 4)]
[(ram, 0x4f08f8, 4) COPY (ram, 0x4f08f8, 4), (ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x30a, 4)]
[ ---  RETURN (const, 0x1, 4)]
[(register, 0x0, 8) COPY (const, 0x1, 8)]
[(unique, 0x100003c2, 8) COPY (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x2494de, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd00, 4) , (const, 0x1, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) CAST (unique, 0x100003fa, 8), (unique, 0x100003fa, 8) INT_ADD (unique, 0x100003f2, 8) , (unique, 0x100002dd, 8), (unique, 0x100003f2, 8) CAST (unique, 0xbd80, 8), (unique, 0x100002dd, 8) INT_ADD (unique, 0x3900, 8) , (const, 0x8, 8), (unique, 0x3900, 8) INT_MULT (register, 0x80, 8) , (const, 0x4, 8), (register, 0x80, 8) INT_SEXT (unique, 0x100003ee, 4), (unique, 0x100003ee, 4) CAST (register, 0x80, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x38, 8)]
[ ---  CBRANCH (ram, 0x249780, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (const, 0x100000001, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x1, 8) , (const, 0x8, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x38, 8)]
[(register, 0x0, 8) COPY (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x2494de, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (const, 0x100000001, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x249768, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) CAST (unique, 0x10000402, 8), (unique, 0x10000402, 8) LOAD (const, 0x1b1, 4) , (register, 0x10, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8) , (unique, 0xbd80, 8)]
[(unique, 0x3100, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffaf, 1) COPY (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x10, 8) , (const, 0x0, 8)]
[(unique, 0x100003ca, 8) COPY (unique, 0x1000040a, 8), (unique, 0x1000040a, 8) CAST (register, 0x20, 8)]
[ ---  BRANCH (ram, 0x249583, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (unique, 0x1000034c, 8)]
[(stack, 0xffffffffffffffaf, 1) MULTIEQUAL (stack, 0xffffffffffffffaf, 1) , (unique, 0x1000033b, 1)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (unique, 0x10000333, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (unique, 0x1000032b, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (unique, 0x10000323, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (unique, 0x1000031b, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (unique, 0x10000313, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (unique, 0x10000303, 8)]
[(register, 0x20, 8) MULTIEQUAL (unique, 0x100003ca, 8) , (register, 0x20, 8)]
[(ram, 0x4efeb0, 4) INDIRECT (ram, 0x4efeb0, 4) , (const, 0x73, 4), (ram, 0x4efeb0, 4) MULTIEQUAL (ram, 0x4efeb0, 4) , (unique, 0x1000030b, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x38, 8) , (register, 0xb8, 8), (register, 0xb8, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8)]
[(stack, 0xffffffffffffffb8, 8) COPY (stack, 0xffffffffffffffb0, 8), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (unique, 0x1000033c, 8)]
[ ---  CBRANCH (ram, 0x2495aa, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4f08f8, 4) , (const, 0x0, 4), (ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x73, 4), (ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (unique, 0x1000030f, 4)]
[ ---  CBRANCH (const, 0x4, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4efeb0, 4) , (const, 0x0, 4)]
[(ram, 0x4efeb0, 4) COPY (const, 0x1, 4)]
[ ---  CALLOTHER (const, 0x11, 4)]
[ ---  CBRANCH (const, 0x4, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4efeb0, 4) , (const, 0x0, 4)]
[(ram, 0x4efeb0, 4) COPY (const, 0x1, 4)]
[ ---  BRANCH (ram, 0x2495cd, 1)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x2495c6, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xffffffffffffffef, 8) , (const, 0x8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x2b0, 4)]
[(ram, 0x4efeb0, 4) INDIRECT (ram, 0x4efeb0, 4) , (const, 0x2b0, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x2b0, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x2b0, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x2af, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x2b0, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x2af, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x2b0, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x2af, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x2b0, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x2af, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x2b0, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x2af, 4)]
[(stack, 0xffffffffffffffaf, 1) INDIRECT (stack, 0xffffffffffffffaf, 1) , (const, 0x2b0, 4), (stack, 0xffffffffffffffaf, 1) INDIRECT (stack, 0xffffffffffffffaf, 1) , (const, 0x2af, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x2b0, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x2af, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x2b0, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x2af, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2b0, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2af, 4)]
[ ---  CALL (ram, 0x230690, 8) , (unique, 0x10000225, 8), (unique, 0x10000225, 8) PTRSUB (const, 0x0, 8) , (const, 0x4efeb0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x2495e3, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xffffffffffffffff, 8) , (const, 0x8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xa6, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4efeb0, 4) INDIRECT (ram, 0x4efeb0, 4) , (const, 0xa6, 4), (ram, 0x4efeb0, 4) MULTIEQUAL (ram, 0x4efeb0, 4) , (ram, 0x4efeb0, 4) , (ram, 0x4efeb0, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0xa6, 4), (ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0xa6, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0xa5, 4), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0xa6, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0xa5, 4), (stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0xa6, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0xa5, 4), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0xa6, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0xa5, 4), (stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0xa6, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0xa5, 4), (stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffffaf, 1) INDIRECT (stack, 0xffffffffffffffaf, 1) , (const, 0xa6, 4), (stack, 0xffffffffffffffaf, 1) INDIRECT (stack, 0xffffffffffffffaf, 1) , (const, 0xa5, 4), (stack, 0xffffffffffffffaf, 1) MULTIEQUAL (stack, 0xffffffffffffffaf, 1) , (stack, 0xffffffffffffffaf, 1) , (stack, 0xffffffffffffffaf, 1)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0xa6, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0xa5, 4), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0xa6, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0xa5, 4), (stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xa6, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xa5, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CBRANCH (ram, 0x249770, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x1000041a, 8), (unique, 0x1000041a, 8) CALL (ram, 0x21d2e0, 8) , (unique, 0x3100, 8) , (unique, 0x10000412, 8) , (unique, 0x100001fd, 8), (unique, 0x10000412, 8) CAST (unique, 0x3100, 8), (unique, 0x100001fd, 8) PTRSUB (const, 0x0, 8) , (const, 0x2482f0, 8), (unique, 0x3100, 8) PTRADD (register, 0xb8, 8) , (const, 0x5, 8) , (const, 0x8, 8)]
[(register, 0x30, 1) COPY (const, 0x1, 1)]
[(register, 0x10, 8) COPY (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x249518, 1)]
[ ---  CBRANCH (ram, 0x249500, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x10000422, 8) , (unique, 0x3100, 8), (unique, 0x10000422, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x0, 8)]
[(register, 0x206, 1) INT_EQUAL (register, 0x10, 8) , (const, 0x0, 8), (register, 0x10, 8) INT_XOR (register, 0x10, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x1000044a, 8), (unique, 0x1000044a, 8) INT_ADD (register, 0x110, 8) , (const, 0x30, 8), (register, 0x10, 8) INT_OR (unique, 0x4ff00, 8) , (unique, 0x50000, 8), (unique, 0x50000, 8) INT_LEFT (unique, 0x10000442, 8) , (const, 0x2f, 4), (unique, 0x10000442, 8) CAST (unique, 0xbd80, 8), (unique, 0x4ff00, 8) INT_RIGHT (unique, 0x1000043a, 8) , (const, 0x11, 4), (unique, 0x1000043a, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000432, 8), (unique, 0x10000432, 8) INT_ADD (unique, 0x1000042a, 8) , (const, 0x8, 8), (unique, 0x1000042a, 8) CAST (unique, 0xbd80, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x249609, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xffffffffffffffff, 8) , (const, 0x8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xc5, 4)]
[(ram, 0x4efeb0, 4) INDIRECT (ram, 0x4efeb0, 4) , (const, 0xc5, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0xc5, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0xc5, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0xc4, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0xc5, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0xc4, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0xc5, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0xc4, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0xc5, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0xc4, 4), (stack, 0xffffffffffffff98, 8) COPY (register, 0x0, 8)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0xc5, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0xc4, 4)]
[(stack, 0xffffffffffffffaf, 1) INDIRECT (stack, 0xffffffffffffffaf, 1) , (const, 0xc5, 4), (stack, 0xffffffffffffffaf, 1) INDIRECT (stack, 0xffffffffffffffaf, 1) , (const, 0xc4, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0xc5, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0xc4, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0xc5, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0xc4, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xc5, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xc4, 4)]
[(unique, 0x10000392, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10000452, 8), (unique, 0x10000452, 8) CALL (ram, 0x1212c0, 8) , (const, 0x10, 8)]
[ ---  CBRANCH (ram, 0x2497a0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10000452, 8), (unique, 0x10000452, 8) CALL (ram, 0x1212c0, 8) , (const, 0x10, 8)]
[ ---  STORE (const, 0x1b1, 4) , (stack, 0xffffffffffffff98, 8) , (unique, 0x1000045a, 8), (unique, 0x1000045a, 8) CAST (register, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x0, 8) , (stack, 0xffffffffffffffb8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x24962f, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xffffffffffffffff, 8) , (const, 0x8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xe1, 4)]
[(ram, 0x4efeb0, 4) INDIRECT (ram, 0x4efeb0, 4) , (const, 0xe1, 4), (ram, 0x4efeb0, 4) INDIRECT (ram, 0x4efeb0, 4) , (const, 0xde, 4), (ram, 0x4efeb0, 4) INDIRECT (ram, 0x4efeb0, 4) , (const, 0xd5, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0xe1, 4), (ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0xde, 4), (ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0xd5, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0xe1, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0xe0, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0xe1, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0xe0, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0xe1, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0xe0, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0xe1, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0xe0, 4)]
[(stack, 0xffffffffffffffaf, 1) INDIRECT (stack, 0xffffffffffffffaf, 1) , (const, 0xe1, 4), (stack, 0xffffffffffffffaf, 1) INDIRECT (stack, 0xffffffffffffffaf, 1) , (const, 0xe0, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0xe1, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0xe0, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0xe1, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0xe0, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xe1, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xe0, 4)]
[(unique, 0x1000039a, 8) COPY (stack, 0xffffffffffffff98, 8), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0xe1, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0xe0, 4), (stack, 0xffffffffffffff98, 8) COPY (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x2497a0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x248760, 8) , (register, 0xb8, 8)]
[ ---  CBRANCH (ram, 0x249758, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbe00, 8) , (const, 0xffffffffffffffff, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000462, 8), (unique, 0x10000462, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x8, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb8, 8) , (const, 0x4, 8) , (const, 0x8, 8)]
[(register, 0x30, 1) COPY (const, 0x1, 1)]
[(register, 0x10, 8) COPY (const, 0x0, 8)]
[(unique, 0x10000382, 8) COPY (stack, 0xffffffffffffff98, 8)]
[ ---  BRANCH (ram, 0x2496c9, 1)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x249662, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xffffffffffffffff, 8) , (const, 0x8, 8)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x10f, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x10e, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x249672, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xffffffffffffffff, 8) , (const, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x73736e5f, 4), (register, 0x20, 8) CAST (unique, 0x1000047a, 8), (unique, 0x1000047a, 8) INT_ADD (unique, 0x10000472, 8) , (unique, 0x1000015c, 8), (unique, 0x10000472, 8) CAST (register, 0x20, 8), (unique, 0x1000015c, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (unique, 0x3a00, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3a00, 8) INT_ADD (unique, 0x3880, 8) , (register, 0x0, 8), (unique, 0x3880, 8) INT_ADD (stack, 0xffffffffffffff90, 8) , (const, 0x16, 8), (register, 0x0, 8) CALL (ram, 0x121100, 8) , (unique, 0x1000037a, 8), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x119, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x118, 4), (stack, 0xffffffffffffff90, 8) COPY (register, 0x0, 8), (unique, 0x1000037a, 8) COPY (stack, 0xffffffffffffffb8, 8), (register, 0x0, 8) CALL (ram, 0x121100, 8) , (unique, 0x1000046a, 8), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x10f, 4), (unique, 0x1000046a, 8) CAST (unique, 0x3100, 8), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x10e, 4), (unique, 0x3100, 8) PTRADD (register, 0xb8, 8) , (const, 0x6, 8) , (const, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3800, 8) , (const, 0x5f, 1), (unique, 0x3800, 8) CAST (unique, 0x1000049a, 8), (unique, 0x1000049a, 8) INT_ADD (unique, 0x10000492, 8) , (unique, 0x100002b5, 8), (unique, 0x10000492, 8) CAST (register, 0x20, 8), (unique, 0x100002b5, 8) INT_ADD (unique, 0x1000015c, 8) , (const, 0x4, 8), (unique, 0x1000015c, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (unique, 0x3a00, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3a00, 8) INT_ADD (unique, 0x3880, 8) , (register, 0x0, 8), (unique, 0x3880, 8) INT_ADD (stack, 0xffffffffffffff90, 8) , (const, 0x16, 8), (register, 0x0, 8) CALL (ram, 0x121100, 8) , (unique, 0x1000037a, 8), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x119, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x118, 4), (stack, 0xffffffffffffff90, 8) COPY (register, 0x0, 8), (unique, 0x1000037a, 8) COPY (stack, 0xffffffffffffffb8, 8), (register, 0x0, 8) CALL (ram, 0x121100, 8) , (unique, 0x1000046a, 8), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x10f, 4), (unique, 0x1000046a, 8) CAST (unique, 0x3100, 8), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x10e, 4), (unique, 0x3100, 8) PTRADD (register, 0xb8, 8) , (const, 0x6, 8) , (const, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x24969c, 8), (register, 0x20, 8) CAST (unique, 0x100004aa, 8), (unique, 0x100004aa, 8) INT_ADD (unique, 0x100004a2, 8) , (unique, 0x100002bd, 8), (unique, 0x100004a2, 8) CAST (register, 0x20, 8), (unique, 0x100002bd, 8) INT_ADD (unique, 0x1000015c, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x1000015c, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (unique, 0x3a00, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3a00, 8) INT_ADD (unique, 0x3880, 8) , (register, 0x0, 8), (unique, 0x3880, 8) INT_ADD (stack, 0xffffffffffffff90, 8) , (const, 0x16, 8), (register, 0x0, 8) CALL (ram, 0x121100, 8) , (unique, 0x1000037a, 8), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x119, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x118, 4), (stack, 0xffffffffffffff90, 8) COPY (register, 0x0, 8), (unique, 0x1000037a, 8) COPY (stack, 0xffffffffffffffb8, 8), (register, 0x0, 8) CALL (ram, 0x121100, 8) , (unique, 0x1000046a, 8), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x10f, 4), (unique, 0x1000046a, 8) CAST (unique, 0x3100, 8), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x10e, 4), (unique, 0x3100, 8) PTRADD (register, 0xb8, 8) , (const, 0x6, 8) , (const, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x0, 8) , (const, 0x5f, 1), (register, 0x0, 8) CALL (ram, 0x121050, 8) , (unique, 0x3800, 8) , (unique, 0x100004b2, 8), (unique, 0x100004b2, 8) CAST (unique, 0x10000362, 8), (unique, 0x3800, 8) CAST (unique, 0x1000048a, 8), (unique, 0x1000048a, 8) INT_ADD (unique, 0x10000482, 8) , (unique, 0x100002ad, 8), (unique, 0x10000482, 8) CAST (register, 0x20, 8), (unique, 0x100002ad, 8) INT_ADD (unique, 0x1000015c, 8) , (const, 0x5, 8), (unique, 0x1000015c, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (unique, 0x3a00, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3a00, 8) INT_ADD (unique, 0x3880, 8) , (register, 0x0, 8), (unique, 0x3880, 8) INT_ADD (stack, 0xffffffffffffff90, 8) , (const, 0x16, 8), (unique, 0x10000362, 8) COPY (stack, 0xffffffffffffff88, 8), (register, 0x0, 8) CALL (ram, 0x121100, 8) , (unique, 0x1000037a, 8), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x119, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x119, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x118, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x118, 4), (stack, 0xffffffffffffff90, 8) COPY (register, 0x0, 8), (unique, 0x1000037a, 8) COPY (stack, 0xffffffffffffffb8, 8), (register, 0x0, 8) CALL (ram, 0x121100, 8) , (unique, 0x1000046a, 8), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x10f, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x10f, 4), (unique, 0x1000046a, 8) CAST (unique, 0x3100, 8), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x10e, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x10e, 4), (stack, 0xffffffffffffff88, 8) COPY (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb8, 8) , (const, 0x6, 8) , (const, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x2496ab, 8), (register, 0x20, 8) CAST (unique, 0x100004c2, 8), (unique, 0x100004c2, 8) INT_ADD (unique, 0x100004ba, 8) , (unique, 0x100002c5, 8), (unique, 0x100004ba, 8) CAST (register, 0x20, 8), (unique, 0x100002c5, 8) INT_ADD (unique, 0x1000015c, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x1000015c, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (unique, 0x3a00, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3a00, 8) INT_ADD (unique, 0x3880, 8) , (register, 0x0, 8), (unique, 0x3880, 8) INT_ADD (stack, 0xffffffffffffff90, 8) , (const, 0x16, 8), (register, 0x0, 8) CALL (ram, 0x121100, 8) , (unique, 0x1000037a, 8), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x119, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x118, 4), (stack, 0xffffffffffffff90, 8) COPY (register, 0x0, 8), (unique, 0x1000037a, 8) COPY (stack, 0xffffffffffffffb8, 8), (register, 0x0, 8) CALL (ram, 0x121100, 8) , (unique, 0x1000046a, 8), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x10f, 4), (unique, 0x1000046a, 8) CAST (unique, 0x3100, 8), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x10e, 4), (unique, 0x3100, 8) PTRADD (register, 0xb8, 8) , (const, 0x6, 8) , (const, 0x8, 8)]
[ ---  CALL (ram, 0x121170, 8) , (unique, 0x3100, 8) , (unique, 0x1000037a, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x1, 8), (register, 0x0, 8) CALL (ram, 0x121050, 8) , (unique, 0x3800, 8) , (unique, 0x100004b2, 8), (unique, 0x100004b2, 8) CAST (unique, 0x10000362, 8), (unique, 0x3800, 8) CAST (unique, 0x1000048a, 8), (unique, 0x1000048a, 8) INT_ADD (unique, 0x10000482, 8) , (unique, 0x100002ad, 8), (unique, 0x10000482, 8) CAST (register, 0x20, 8), (unique, 0x100002ad, 8) INT_ADD (unique, 0x1000015c, 8) , (const, 0x5, 8), (unique, 0x1000015c, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (unique, 0x3a00, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3a00, 8) INT_ADD (unique, 0x3880, 8) , (register, 0x0, 8), (unique, 0x3880, 8) INT_ADD (stack, 0xffffffffffffff90, 8) , (const, 0x16, 8), (unique, 0x10000362, 8) COPY (stack, 0xffffffffffffff88, 8), (register, 0x0, 8) CALL (ram, 0x121100, 8) , (unique, 0x1000037a, 8), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x119, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x119, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x118, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x118, 4), (stack, 0xffffffffffffff90, 8) COPY (register, 0x0, 8), (unique, 0x1000037a, 8) COPY (stack, 0xffffffffffffffb8, 8), (register, 0x0, 8) CALL (ram, 0x121100, 8) , (unique, 0x1000046a, 8), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x10f, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x10f, 4), (unique, 0x1000046a, 8) CAST (unique, 0x3100, 8), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x10e, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x10e, 4), (stack, 0xffffffffffffff88, 8) COPY (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb8, 8) , (const, 0x6, 8) , (const, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x2496b7, 8), (register, 0x20, 8) CAST (unique, 0x100004da, 8), (unique, 0x100004da, 8) INT_ADD (unique, 0x100004d2, 8) , (unique, 0x100002cd, 8), (unique, 0x100004d2, 8) CAST (register, 0x20, 8), (unique, 0x100002cd, 8) INT_ADD (unique, 0x1000015c, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x1000015c, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (unique, 0x3a00, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3a00, 8) INT_ADD (unique, 0x3880, 8) , (register, 0x0, 8), (unique, 0x3880, 8) INT_ADD (stack, 0xffffffffffffff90, 8) , (const, 0x16, 8), (register, 0x0, 8) CALL (ram, 0x121100, 8) , (unique, 0x1000037a, 8), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x119, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x118, 4), (stack, 0xffffffffffffff90, 8) COPY (register, 0x0, 8), (unique, 0x1000037a, 8) COPY (stack, 0xffffffffffffffb8, 8), (register, 0x0, 8) CALL (ram, 0x121100, 8) , (unique, 0x1000046a, 8), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x10f, 4), (unique, 0x1000046a, 8) CAST (unique, 0x3100, 8), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x10e, 4), (unique, 0x3100, 8) PTRADD (register, 0xb8, 8) , (const, 0x6, 8) , (const, 0x8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x14e, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x147, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x13f, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x119, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x10f, 4)]
[(ram, 0x4efeb0, 4) INDIRECT (ram, 0x4efeb0, 4) , (const, 0x14e, 4), (ram, 0x4efeb0, 4) INDIRECT (ram, 0x4efeb0, 4) , (const, 0x147, 4), (ram, 0x4efeb0, 4) INDIRECT (ram, 0x4efeb0, 4) , (const, 0x144, 4), (ram, 0x4efeb0, 4) INDIRECT (ram, 0x4efeb0, 4) , (const, 0x13f, 4), (ram, 0x4efeb0, 4) INDIRECT (ram, 0x4efeb0, 4) , (const, 0x119, 4), (ram, 0x4efeb0, 4) INDIRECT (ram, 0x4efeb0, 4) , (const, 0x10f, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x14e, 4), (ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x147, 4), (ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x144, 4), (ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x13f, 4), (ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x119, 4), (ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x10f, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x14e, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x14d, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x147, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x146, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x13f, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x13e, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x13c, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x139, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x119, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x118, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x10f, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x10e, 4), (stack, 0xffffffffffffff88, 8) COPY (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb8, 8) , (const, 0x6, 8) , (const, 0x8, 8)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x14e, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x14d, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x147, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x146, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x13f, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x13e, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x13c, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x139, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x119, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x118, 4), (stack, 0xffffffffffffff90, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x121100, 8) , (unique, 0x1000046a, 8), (unique, 0x1000046a, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb8, 8) , (const, 0x6, 8) , (const, 0x8, 8)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x14e, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x14d, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x147, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x146, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x13f, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x13e, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x13c, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x139, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x119, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x118, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x10f, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x10e, 4)]
[(stack, 0xffffffffffffffaf, 1) INDIRECT (stack, 0xffffffffffffffaf, 1) , (const, 0x14e, 4), (stack, 0xffffffffffffffaf, 1) INDIRECT (stack, 0xffffffffffffffaf, 1) , (const, 0x14d, 4), (stack, 0xffffffffffffffaf, 1) INDIRECT (stack, 0xffffffffffffffaf, 1) , (const, 0x147, 4), (stack, 0xffffffffffffffaf, 1) INDIRECT (stack, 0xffffffffffffffaf, 1) , (const, 0x146, 4), (stack, 0xffffffffffffffaf, 1) INDIRECT (stack, 0xffffffffffffffaf, 1) , (const, 0x13f, 4), (stack, 0xffffffffffffffaf, 1) INDIRECT (stack, 0xffffffffffffffaf, 1) , (const, 0x13e, 4), (stack, 0xffffffffffffffaf, 1) INDIRECT (stack, 0xffffffffffffffaf, 1) , (const, 0x13c, 4), (stack, 0xffffffffffffffaf, 1) INDIRECT (stack, 0xffffffffffffffaf, 1) , (const, 0x139, 4), (stack, 0xffffffffffffffaf, 1) INDIRECT (stack, 0xffffffffffffffaf, 1) , (const, 0x119, 4), (stack, 0xffffffffffffffaf, 1) INDIRECT (stack, 0xffffffffffffffaf, 1) , (const, 0x118, 4), (stack, 0xffffffffffffffaf, 1) INDIRECT (stack, 0xffffffffffffffaf, 1) , (const, 0x10f, 4), (stack, 0xffffffffffffffaf, 1) INDIRECT (stack, 0xffffffffffffffaf, 1) , (const, 0x10e, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x14e, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x14d, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x147, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x146, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x13f, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x13e, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x13c, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x139, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x119, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x118, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x10f, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x10e, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x14e, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x14d, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x147, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x146, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x13f, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x13e, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x13c, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x139, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x119, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x118, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x10f, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x10e, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x14e, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x14d, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x147, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x146, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x13f, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x13e, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x13c, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x139, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x119, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x118, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x10f, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x10e, 4)]
[(register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x266520, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100004ca, 8), (unique, 0x100004ca, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x8, 8)]
[(unique, 0x1000038a, 8) COPY (stack, 0xffffffffffffff80, 8), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x14e, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x14d, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x147, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x146, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x13f, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x13e, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x13c, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x139, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x119, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x118, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x10f, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x10e, 4), (stack, 0xffffffffffffff80, 8) COPY (stack, 0xffffffffffffff98, 8)]
[(unique, 0x100003aa, 8) COPY (stack, 0xffffffffffffff98, 8), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x14e, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x14d, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x147, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x146, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x13f, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x13e, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x13c, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x139, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x119, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x118, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x10f, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x10e, 4), (stack, 0xffffffffffffff98, 8) COPY (register, 0x20, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffaf, 1) MULTIEQUAL (stack, 0xffffffffffffffaf, 1) , (stack, 0xffffffffffffffaf, 1)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(register, 0x30, 1) MULTIEQUAL (register, 0x206, 1) , (register, 0x30, 1)]
[(register, 0x20, 8) MULTIEQUAL (unique, 0x100003aa, 8) , (register, 0x20, 8)]
[(ram, 0x4efeb0, 4) INDIRECT (ram, 0x4efeb0, 4) , (const, 0x181, 4), (ram, 0x4efeb0, 4) MULTIEQUAL (ram, 0x4efeb0, 4) , (ram, 0x4efeb0, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x181, 4), (ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (register, 0x0, 8), (unique, 0x3100, 8) PTRADD (register, 0x8, 8) , (const, 0x1, 8) , (const, 0x8, 8), (register, 0x0, 8) CAST (unique, 0x100004ea, 8), (unique, 0x100004ea, 8) INT_OR (unique, 0x4d100, 8) , (unique, 0x4d200, 8), (unique, 0x4d200, 8) INT_RIGHT (register, 0x0, 8) , (const, 0x2f, 4), (unique, 0x4d100, 8) INT_LEFT (register, 0x0, 8) , (const, 0x11, 4), (register, 0x0, 8) INT_XOR (register, 0x10, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x100004e2, 8), (unique, 0x100004e2, 8) INT_ADD (register, 0x110, 8) , (const, 0x30, 8), (register, 0x8, 8) MULTIEQUAL (unique, 0x1000038a, 8) , (unique, 0x10000382, 8), (register, 0x10, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x10, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  BRANCH (ram, 0x249518, 1)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x2497b6, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xffffffffffffffff, 8) , (const, 0x8, 8)]
[ ---  CALL (ram, 0x21d720, 8) , (unique, 0x3100, 8) , (unique, 0x100004f2, 8) , (unique, 0x10000205, 8), (unique, 0x100004f2, 8) CAST (unique, 0x3100, 8), (unique, 0x10000205, 8) PTRSUB (const, 0x0, 8) , (const, 0x2482f0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x2497c2, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xffffffffffffffff, 8) , (const, 0x8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x25f, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x258, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4efeb0, 4) INDIRECT (ram, 0x4efeb0, 4) , (const, 0x25f, 4), (ram, 0x4efeb0, 4) INDIRECT (ram, 0x4efeb0, 4) , (const, 0x258, 4), (ram, 0x4efeb0, 4) MULTIEQUAL (ram, 0x4efeb0, 4) , (ram, 0x4efeb0, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x25f, 4), (ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x258, 4), (ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x25f, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x25e, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x258, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x257, 4), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x25f, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x25e, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x258, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x257, 4), (stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x25f, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x25e, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x258, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x257, 4), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x25f, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x25e, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x258, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x257, 4), (stack, 0xffffffffffffff98, 8) COPY (register, 0x8, 8), (register, 0x8, 8) MULTIEQUAL (unique, 0x10000392, 8) , (unique, 0x1000039a, 8)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x25f, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x25e, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x258, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x257, 4), (stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffffaf, 1) INDIRECT (stack, 0xffffffffffffffaf, 1) , (const, 0x25f, 4), (stack, 0xffffffffffffffaf, 1) INDIRECT (stack, 0xffffffffffffffaf, 1) , (const, 0x25e, 4), (stack, 0xffffffffffffffaf, 1) INDIRECT (stack, 0xffffffffffffffaf, 1) , (const, 0x258, 4), (stack, 0xffffffffffffffaf, 1) INDIRECT (stack, 0xffffffffffffffaf, 1) , (const, 0x257, 4), (stack, 0xffffffffffffffaf, 1) MULTIEQUAL (stack, 0xffffffffffffffaf, 1) , (stack, 0xffffffffffffffaf, 1)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x25f, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x25e, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x258, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x257, 4), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x25f, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x25e, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x258, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x257, 4), (stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x25f, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x25e, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x258, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x257, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CALL (ram, 0x1212c8, 8) , (unique, 0x1000036a, 8), (unique, 0x1000036a, 8) COPY (stack, 0xffffffffffffff98, 8), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x258, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x257, 4), (stack, 0xffffffffffffff98, 8) COPY (register, 0x8, 8), (register, 0x8, 8) MULTIEQUAL (unique, 0x10000392, 8) , (unique, 0x1000039a, 8)]
[(register, 0x30, 1) COPY (const, 0x1, 1)]
[(register, 0x10, 8) COPY (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x249518, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffaf, 1) MULTIEQUAL (stack, 0xffffffffffffffaf, 1) , (stack, 0xffffffffffffffaf, 1) , (stack, 0xffffffffffffffaf, 1) , (stack, 0xffffffffffffffaf, 1)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(ram, 0x4efeb0, 4) MULTIEQUAL (ram, 0x4efeb0, 4) , (ram, 0x4efeb0, 4) , (ram, 0x4efeb0, 4) , (ram, 0x4efeb0, 4)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x30, 1) MULTIEQUAL (register, 0x30, 1) , (register, 0x30, 1) , (register, 0x206, 1) , (register, 0x30, 1)]
[(register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8)]
[(register, 0x10, 8) MULTIEQUAL (register, 0x10, 8) , (register, 0x10, 8) , (register, 0x10, 8) , (register, 0x10, 8)]
[ ---  CBRANCH (ram, 0x24952c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4f08f8, 4) , (const, 0x0, 4), (ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[ ---  CALLOTHER (const, 0x11, 4)]
[(unique, 0x100003d6, 4) COPY (unique, 0x100002fd, 4), (unique, 0x100002fd, 4) INT_ADD (ram, 0x4efeb0, 4) , (const, 0xffffffff, 4)]
[ ---  CBRANCH (ram, 0x24954e, 1) , (unique, 0x10000301, 1), (unique, 0x10000301, 1) INT_NOTEQUAL (unique, 0x100002fd, 4) , (const, 0x0, 4), (unique, 0x100002fd, 4) INT_ADD (ram, 0x4efeb0, 4) , (const, 0xffffffff, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x249547, 8), (register, 0x20, 8) CAST (unique, 0x10000502, 8), (unique, 0x10000502, 8) INT_ADD (unique, 0x100004fa, 8) , (const, 0xffffffffffffff78, 8), (unique, 0x100004fa, 8) CAST (register, 0x20, 8)]
[(register, 0x30, 1) INDIRECT (register, 0x30, 1) , (const, 0x231, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x231, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x231, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x231, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x230, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x231, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x230, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x231, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x230, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x231, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x230, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x231, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x230, 4)]
[(stack, 0xffffffffffffffaf, 1) INDIRECT (stack, 0xffffffffffffffaf, 1) , (const, 0x231, 4), (stack, 0xffffffffffffffaf, 1) INDIRECT (stack, 0xffffffffffffffaf, 1) , (const, 0x230, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x231, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x230, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x231, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x230, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x231, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x230, 4)]
[ ---  CALL (ram, 0x2306c0, 8) , (unique, 0x1000021d, 8), (unique, 0x1000021d, 8) PTRSUB (const, 0x0, 8) , (const, 0x4efeb0, 8)]
[(unique, 0x100003a2, 8) COPY (register, 0x10, 8), (register, 0x10, 8) INDIRECT (const, 0x0, 8) , (const, 0x231, 4)]
[(unique, 0x100003d2, 4) COPY (ram, 0x4efeb0, 4), (ram, 0x4efeb0, 4) INDIRECT (ram, 0x4efeb0, 4) , (const, 0x231, 4), (ram, 0x4efeb0, 4) INT_ADD (ram, 0x4efeb0, 4) , (const, 0xffffffff, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffaf, 1) MULTIEQUAL (stack, 0xffffffffffffffaf, 1) , (stack, 0xffffffffffffffaf, 1)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x10000372, 8) COPY (stack, 0xffffffffffffffa0, 8), (stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(ram, 0x4efeb0, 4) INDIRECT (ram, 0x4efeb0, 4) , (const, 0x1a3, 4), (ram, 0x4efeb0, 4) COPY (unique, 0x100003da, 4), (unique, 0x100003da, 4) MULTIEQUAL (unique, 0x100003d2, 4) , (unique, 0x100003d6, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x1a3, 4), (ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x8, 8) , (register, 0x10, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0x100003a2, 8) , (register, 0x10, 8)]
[ ---  CBRANCH (ram, 0x249560, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x30, 1) , (const, 0x0, 1), (register, 0x30, 1) MULTIEQUAL (register, 0x30, 1) , (register, 0x30, 1)]
[ ---  CBRANCH (ram, 0x2496e8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffffaf, 1) , (const, 0x0, 1)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x2496f4, 8), (register, 0x20, 8) CAST (unique, 0x10000512, 8), (unique, 0x10000512, 8) INT_ADD (unique, 0x1000050a, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x1000050a, 8) CAST (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x215, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x215, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x214, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x215, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x214, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x215, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x214, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x215, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x214, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x215, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x214, 4)]
[(stack, 0xffffffffffffffaf, 1) INDIRECT (stack, 0xffffffffffffffaf, 1) , (const, 0x215, 4), (stack, 0xffffffffffffffaf, 1) INDIRECT (stack, 0xffffffffffffffaf, 1) , (const, 0x214, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x215, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x214, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x215, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x214, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x215, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x214, 4)]
[(ram, 0x4efeb0, 4) INDIRECT (ram, 0x4efeb0, 4) , (const, 0x218, 4), (ram, 0x4efeb0, 4) INDIRECT (ram, 0x4efeb0, 4) , (const, 0x215, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x218, 4), (ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x215, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x8, 8) , (register, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x248f60, 8) , (unique, 0xbd80, 8) , (unique, 0x10000372, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x38, 8)]
[(unique, 0x10000303, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x1000030b, 4) MULTIEQUAL (ram, 0x4efeb0, 4) , (ram, 0x4efeb0, 4) , (ram, 0x4efeb0, 4)]
[(unique, 0x1000030f, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(unique, 0x10000313, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(unique, 0x1000031b, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(unique, 0x10000323, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(unique, 0x1000032b, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(unique, 0x10000333, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(unique, 0x1000033b, 1) MULTIEQUAL (stack, 0xffffffffffffffaf, 1) , (stack, 0xffffffffffffffaf, 1) , (stack, 0xffffffffffffffaf, 1)]
[(unique, 0x1000033c, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(unique, 0x10000344, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(unique, 0x1000034c, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CBRANCH (ram, 0x249708, 1) , (unique, 0x10000302, 1), (unique, 0x10000302, 1) INT_NOTEQUAL (unique, 0x10000354, 8) , (const, 0x0, 8), (unique, 0x10000354, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x10, 8) , (register, 0x10, 8)]
[(register, 0x0, 8) COPY (const, 0x0, 8)]
[(unique, 0x100003ba, 8) COPY (unique, 0x1000051a, 8), (unique, 0x1000051a, 8) CAST (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x249768, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000052a, 8), (unique, 0x1000052a, 8) INT_ADD (unique, 0x10000522, 8) , (const, 0xc, 8), (unique, 0x10000522, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x38, 8)]
[ ---  CBRANCH (ram, 0x249768, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) CAST (unique, 0x10000532, 8), (unique, 0x10000532, 8) LOAD (const, 0x1b1, 4) , (unique, 0xbd80, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (unique, 0x1000034c, 8) , (unique, 0x1000034c, 8)]
[(stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (unique, 0x10000344, 8) , (unique, 0x10000344, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (unique, 0x1000033c, 8) , (unique, 0x1000033c, 8)]
[(stack, 0xffffffffffffffaf, 1) MULTIEQUAL (stack, 0xffffffffffffffaf, 1) , (unique, 0x1000033b, 1) , (unique, 0x1000033b, 1)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (unique, 0x10000333, 8) , (unique, 0x10000333, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (unique, 0x1000032b, 8) , (unique, 0x1000032b, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (unique, 0x10000323, 8) , (unique, 0x10000323, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (unique, 0x1000031b, 8) , (unique, 0x1000031b, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (unique, 0x10000313, 8) , (unique, 0x10000313, 8)]
[(ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (unique, 0x1000030f, 4) , (unique, 0x1000030f, 4)]
[(ram, 0x4efeb0, 4) MULTIEQUAL (ram, 0x4efeb0, 4) , (unique, 0x1000030b, 4) , (unique, 0x1000030b, 4)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (unique, 0x10000303, 8) , (unique, 0x10000303, 8)]
[(register, 0x0, 8) COPY (const, 0xffffffff, 8)]
[(unique, 0x100003b2, 8) COPY (unique, 0x1000053a, 8), (unique, 0x1000053a, 8) CAST (register, 0x20, 8), (register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8)]
[ ---  BRANCH (ram, 0x24970a, 1)]
[(stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (unique, 0x10000344, 8) , (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (unique, 0x1000033c, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffaf, 1) MULTIEQUAL (stack, 0xffffffffffffffaf, 1) , (unique, 0x1000033b, 1) , (stack, 0xffffffffffffffaf, 1) , (stack, 0xffffffffffffffaf, 1)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (unique, 0x10000333, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (unique, 0x1000032b, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (unique, 0x10000323, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (unique, 0x1000031b, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (unique, 0x10000313, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (unique, 0x1000030f, 4) , (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(ram, 0x4efeb0, 4) MULTIEQUAL (ram, 0x4efeb0, 4) , (unique, 0x1000030b, 4) , (ram, 0x4efeb0, 4) , (ram, 0x4efeb0, 4)]
[(register, 0x20, 8) MULTIEQUAL (unique, 0x100003b2, 8) , (unique, 0x100003ba, 8) , (unique, 0x100003c2, 8) , (register, 0x20, 8)]
[(register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8) , (register, 0x0, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x2497ce, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffffc0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10000542, 8), (unique, 0x10000542, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (unique, 0x10000303, 8) , (register, 0x110, 8) , (register, 0x110, 8), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (unique, 0x1000034c, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000054a, 8) , (unique, 0x1000020d, 8), (unique, 0x1000054a, 8) CAST (register, 0x20, 8), (unique, 0x1000020d, 8) PTRSUB (const, 0x0, 8) , (const, 0x2497d3, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x201, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x200, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x201, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x200, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x201, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x200, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x201, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x200, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x201, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x200, 4)]
[(stack, 0xffffffffffffffaf, 1) INDIRECT (stack, 0xffffffffffffffaf, 1) , (const, 0x201, 4), (stack, 0xffffffffffffffaf, 1) INDIRECT (stack, 0xffffffffffffffaf, 1) , (const, 0x200, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x201, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x200, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x201, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x200, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x201, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x200, 4)]
[ ---  CALL (ram, 0x234c80, 8)]
[(ram, 0x4efeb0, 4) COPY (ram, 0x4efeb0, 4), (ram, 0x4efeb0, 4) INDIRECT (ram, 0x4efeb0, 4) , (const, 0x201, 4)]
[(ram, 0x4f08f8, 4) COPY (ram, 0x4f08f8, 4), (ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x201, 4)]
[ ---  RETURN (const, 0x1, 4)]
[(ram, 0x4efeb0, 4) COPY (ram, 0x4efeb0, 4)]
[(ram, 0x4f08f8, 4) COPY (ram, 0x4f08f8, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8)]
