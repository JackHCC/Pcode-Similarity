[(register, 0x20a, 1) COPY (const, 0x0, 1)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10001260, 8), (unique, 0x10001260, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8)]
[(unique, 0x1000110c, 8) COPY (ram, 0x4c7788, 8)]
[(unique, 0x1000119c, 8) COPY (register, 0x30, 8)]
[ ---  CBRANCH (ram, 0x404d85, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4c7788, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10001258, 8), (unique, 0x10001258, 8) INT_ADD (register, 0x110, 8) , (const, 0x10, 8)]
[ ---  CBRANCH (ram, 0x4052a8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10001268, 8), (unique, 0x10001268, 8) INT_ADD (register, 0x110, 8) , (const, 0x18, 8)]
[ ---  CALLOTHER (const, 0x11, 4)]
[ ---  CBRANCH (const, 0x4, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4c7780, 4) , (const, 0x0, 4)]
[(ram, 0x4c7780, 4) COPY (const, 0x1, 4)]
[(unique, 0x1000111c, 8) COPY (unique, 0xbd80, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1a26, 4)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x1a26, 4)]
[(ram, 0x4c4f18, 8) INDIRECT (ram, 0x4c4f18, 8) , (const, 0x1a26, 4)]
[(ram, 0x4c4fb8, 8) INDIRECT (ram, 0x4c4fb8, 8) , (const, 0x1a26, 4)]
[(ram, 0x4c7780, 4) INDIRECT (ram, 0x4c7780, 4) , (const, 0x1a26, 4)]
[(ram, 0x4c7784, 4) INDIRECT (ram, 0x4c7784, 4) , (const, 0x1a26, 4)]
[(ram, 0x4c7788, 8) INDIRECT (ram, 0x4c7788, 8) , (const, 0x1a26, 4)]
[(ram, 0x4c77d0, 4) INDIRECT (ram, 0x4c77d0, 4) , (const, 0x1a26, 4)]
[(ram, 0x4c77d4, 4) INDIRECT (ram, 0x4c77d4, 4) , (const, 0x1a26, 4)]
[(ram, 0x4c77d8, 8) INDIRECT (ram, 0x4c77d8, 8) , (const, 0x1a26, 4)]
[(ram, 0x4c77e0, 4) INDIRECT (ram, 0x4c77e0, 4) , (const, 0x1a26, 4)]
[(stack, 0xfffffffffffffd28, 8) INDIRECT (stack, 0xfffffffffffffd28, 8) , (const, 0x1a26, 4)]
[(stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x1a26, 4)]
[(stack, 0xfffffffffffffe30, 4) INDIRECT (stack, 0xfffffffffffffe30, 4) , (const, 0x1a26, 4)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x1a26, 4), (stack, 0xfffffffffffffe50, 8) COPY (const, 0x4052c9, 8)]
[(stack, 0xfffffffffffffe60, 8) INDIRECT (unique, 0x1000119c, 8) , (const, 0x1a26, 4)]
[(stack, 0xfffffffffffffe6c, 4) INDIRECT (stack, 0xfffffffffffffe6c, 4) , (const, 0x1a26, 4)]
[(stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0x1a26, 4)]
[(stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0x1a26, 4)]
[(stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x1a26, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x1a26, 4)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x1a26, 4)]
[(stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x1a26, 4)]
[(stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x1a26, 4)]
[(stack, 0xfffffffffffffea4, 4) INDIRECT (stack, 0xfffffffffffffea4, 4) , (const, 0x1a26, 4)]
[(stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x1a26, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x1a26, 4)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x1a26, 4)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x1a26, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x1a26, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x1a26, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x1a26, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x1a26, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x1a26, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x1a26, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x1a26, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x1a26, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x1a26, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x1a26, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x1a26, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x1a26, 4)]
[ ---  CALL (ram, 0x421390, 8) , (unique, 0x10000a50, 8), (unique, 0x10000a50, 8) PTRSUB (const, 0x0, 8) , (const, 0x4c7780, 8)]
[(unique, 0x10001124, 8) COPY (unique, 0xbd80, 8)]
[ ---  BRANCH (ram, 0x404d7e, 1)]
[(unique, 0x1000112c, 8) COPY (unique, 0xbd80, 8)]
[ ---  CBRANCH (const, 0x4, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4c7780, 4) , (const, 0x0, 4)]
[(ram, 0x4c7780, 4) COPY (const, 0x1, 4)]
[(unique, 0x10001114, 8) COPY (unique, 0xbd80, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8) , (unique, 0xbd80, 8) , (stack, 0xffffffffffffffc0, 8) , (unique, 0xbd80, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffec0, 8) MULTIEQUAL (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8)]
[(stack, 0xfffffffffffffeb8, 8) MULTIEQUAL (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(stack, 0xfffffffffffffea8, 8) MULTIEQUAL (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8)]
[(stack, 0xfffffffffffffea4, 4) MULTIEQUAL (stack, 0xfffffffffffffea4, 4) , (stack, 0xfffffffffffffea4, 4) , (stack, 0xfffffffffffffea4, 4) , (stack, 0xfffffffffffffea4, 4) , (stack, 0xfffffffffffffea4, 4)]
[(stack, 0xfffffffffffffea0, 4) MULTIEQUAL (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4)]
[(stack, 0xfffffffffffffe98, 8) MULTIEQUAL (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8)]
[(stack, 0xfffffffffffffe90, 8) MULTIEQUAL (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8)]
[(stack, 0xfffffffffffffe88, 8) MULTIEQUAL (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8)]
[(stack, 0xfffffffffffffe80, 8) MULTIEQUAL (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8)]
[(stack, 0xfffffffffffffe78, 8) MULTIEQUAL (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8)]
[(stack, 0xfffffffffffffe70, 8) MULTIEQUAL (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8)]
[(stack, 0xfffffffffffffe6c, 4) MULTIEQUAL (stack, 0xfffffffffffffe6c, 4) , (stack, 0xfffffffffffffe6c, 4) , (stack, 0xfffffffffffffe6c, 4) , (stack, 0xfffffffffffffe6c, 4) , (stack, 0xfffffffffffffe6c, 4)]
[(stack, 0xfffffffffffffe60, 8) MULTIEQUAL (unique, 0x1000119c, 8) , (unique, 0x1000119c, 8) , (unique, 0x1000119c, 8) , (stack, 0xfffffffffffffe60, 8) , (unique, 0x1000119c, 8)]
[(stack, 0xfffffffffffffe30, 4) MULTIEQUAL (stack, 0xfffffffffffffe30, 4) , (stack, 0xfffffffffffffe30, 4) , (stack, 0xfffffffffffffe30, 4) , (stack, 0xfffffffffffffe30, 4) , (stack, 0xfffffffffffffe30, 4)]
[(stack, 0xfffffffffffffda8, 8) MULTIEQUAL (stack, 0xfffffffffffffda8, 8) , (stack, 0xfffffffffffffda8, 8) , (stack, 0xfffffffffffffda8, 8) , (stack, 0xfffffffffffffda8, 8) , (stack, 0xfffffffffffffda8, 8)]
[(stack, 0xfffffffffffffd28, 8) MULTIEQUAL (stack, 0xfffffffffffffd28, 8) , (stack, 0xfffffffffffffd28, 8) , (stack, 0xfffffffffffffd28, 8) , (stack, 0xfffffffffffffd28, 8) , (stack, 0xfffffffffffffd28, 8)]
[(ram, 0x4c77e0, 4) MULTIEQUAL (ram, 0x4c77e0, 4) , (ram, 0x4c77e0, 4) , (ram, 0x4c77e0, 4) , (ram, 0x4c77e0, 4) , (ram, 0x4c77e0, 4)]
[(ram, 0x4c77d8, 8) MULTIEQUAL (ram, 0x4c77d8, 8) , (ram, 0x4c77d8, 8) , (ram, 0x4c77d8, 8) , (ram, 0x4c77d8, 8) , (ram, 0x4c77d8, 8)]
[(ram, 0x4c77d4, 4) MULTIEQUAL (ram, 0x4c77d4, 4) , (ram, 0x4c77d4, 4) , (ram, 0x4c77d4, 4) , (ram, 0x4c77d4, 4) , (ram, 0x4c77d4, 4)]
[(ram, 0x4c77d0, 4) MULTIEQUAL (ram, 0x4c77d0, 4) , (ram, 0x4c77d0, 4) , (ram, 0x4c77d0, 4) , (ram, 0x4c77d0, 4) , (ram, 0x4c77d0, 4)]
[(ram, 0x4c7788, 8) MULTIEQUAL (unique, 0x1000110c, 8) , (unique, 0x10001114, 8) , (unique, 0x1000111c, 8) , (unique, 0x10001124, 8) , (unique, 0x1000112c, 8)]
[(ram, 0x4c7780, 4) MULTIEQUAL (ram, 0x4c7780, 4) , (ram, 0x4c7780, 4) , (ram, 0x4c7780, 4) , (ram, 0x4c7780, 4) , (ram, 0x4c7780, 4)]
[(ram, 0x4c4fb8, 8) MULTIEQUAL (ram, 0x4c4fb8, 8) , (ram, 0x4c4fb8, 8) , (ram, 0x4c4fb8, 8) , (ram, 0x4c4fb8, 8) , (ram, 0x4c4fb8, 8)]
[(ram, 0x4c4f18, 8) MULTIEQUAL (ram, 0x4c4f18, 8) , (ram, 0x4c4f18, 8) , (ram, 0x4c4f18, 8) , (ram, 0x4c4f18, 8) , (ram, 0x4c4f18, 8)]
[(register, 0x20a, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1) , (register, 0x20a, 1) , (register, 0x20a, 1) , (register, 0x20a, 1)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x10000ea8, 4) COPY (ram, 0x4c7784, 4), (ram, 0x4c7784, 4) MULTIEQUAL (ram, 0x4c7784, 4) , (ram, 0x4c7784, 4) , (ram, 0x4c7784, 4) , (ram, 0x4c7784, 4) , (ram, 0x4c7784, 4)]
[(unique, 0x3100, 4) INT_ADD (ram, 0x4c7784, 4) , (const, 0x1, 4), (ram, 0x4c7784, 4) MULTIEQUAL (ram, 0x4c7784, 4) , (ram, 0x4c7784, 4) , (ram, 0x4c7784, 4) , (ram, 0x4c7784, 4) , (ram, 0x4c7784, 4)]
[ ---  CBRANCH (ram, 0x4051bf, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10001270, 8), (unique, 0x10001270, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x38, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001278, 8) , (const, 0xffffffff, 4), (unique, 0x10001278, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x38, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[(ram, 0x4c4f18, 8) INDIRECT (ram, 0x4c4f18, 8) , (const, 0x78, 4), (ram, 0x4c4f18, 8) INDIRECT (ram, 0x4c4f18, 8) , (const, 0x75, 4)]
[(ram, 0x4c4fb8, 8) INDIRECT (ram, 0x4c4fb8, 8) , (const, 0x78, 4), (ram, 0x4c4fb8, 8) INDIRECT (ram, 0x4c4fb8, 8) , (const, 0x75, 4)]
[(ram, 0x4c7780, 4) INDIRECT (ram, 0x4c7780, 4) , (const, 0x78, 4), (ram, 0x4c7780, 4) INDIRECT (ram, 0x4c7780, 4) , (const, 0x75, 4)]
[(ram, 0x4c7784, 4) INDIRECT (ram, 0x4c7784, 4) , (const, 0x78, 4), (ram, 0x4c7784, 4) INDIRECT (unique, 0x10001108, 4) , (const, 0x75, 4), (unique, 0x10001108, 4) COPY (unique, 0x3100, 4)]
[(ram, 0x4c7788, 8) INDIRECT (ram, 0x4c7788, 8) , (const, 0x78, 4), (ram, 0x4c7788, 8) INDIRECT (ram, 0x4c7788, 8) , (const, 0x75, 4)]
[(ram, 0x4c77d0, 4) INDIRECT (ram, 0x4c77d0, 4) , (const, 0x78, 4), (ram, 0x4c77d0, 4) INDIRECT (ram, 0x4c77d0, 4) , (const, 0x75, 4)]
[(ram, 0x4c77d4, 4) INDIRECT (ram, 0x4c77d4, 4) , (const, 0x78, 4), (ram, 0x4c77d4, 4) INDIRECT (ram, 0x4c77d4, 4) , (const, 0x75, 4)]
[(ram, 0x4c77d8, 8) INDIRECT (ram, 0x4c77d8, 8) , (const, 0x78, 4), (ram, 0x4c77d8, 8) INDIRECT (ram, 0x4c77d8, 8) , (const, 0x75, 4)]
[(ram, 0x4c77e0, 4) INDIRECT (ram, 0x4c77e0, 4) , (const, 0x78, 4), (ram, 0x4c77e0, 4) INDIRECT (ram, 0x4c77e0, 4) , (const, 0x75, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (const, 0x0, 8), (unique, 0x3100, 8) PTRADD (register, 0x38, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[(unique, 0x100010e4, 4) COPY (unique, 0x10000ea8, 4)]
[ ---  CBRANCH (ram, 0x4051b8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x38, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x99, 4)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x99, 4)]
[(ram, 0x4c4f18, 8) INDIRECT (ram, 0x4c4f18, 8) , (const, 0x99, 4)]
[(ram, 0x4c4fb8, 8) INDIRECT (ram, 0x4c4fb8, 8) , (const, 0x99, 4)]
[(ram, 0x4c7780, 4) INDIRECT (ram, 0x4c7780, 4) , (const, 0x99, 4)]
[(ram, 0x4c7784, 4) INDIRECT (ram, 0x4c7784, 4) , (const, 0x99, 4)]
[(ram, 0x4c7788, 8) INDIRECT (ram, 0x4c7788, 8) , (const, 0x99, 4)]
[(ram, 0x4c77d0, 4) INDIRECT (ram, 0x4c77d0, 4) , (const, 0x99, 4)]
[(ram, 0x4c77d4, 4) INDIRECT (ram, 0x4c77d4, 4) , (const, 0x99, 4)]
[(ram, 0x4c77d8, 8) INDIRECT (ram, 0x4c77d8, 8) , (const, 0x99, 4)]
[(ram, 0x4c77e0, 4) INDIRECT (ram, 0x4c77e0, 4) , (const, 0x99, 4)]
[(stack, 0xfffffffffffffd28, 8) INDIRECT (stack, 0xfffffffffffffd28, 8) , (const, 0x99, 4)]
[(stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x99, 4)]
[(stack, 0xfffffffffffffe30, 4) INDIRECT (stack, 0xfffffffffffffe30, 4) , (const, 0x99, 4)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x99, 4), (stack, 0xfffffffffffffe50, 8) COPY (const, 0x404dc3, 8)]
[(stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x99, 4)]
[(stack, 0xfffffffffffffe6c, 4) INDIRECT (stack, 0xfffffffffffffe6c, 4) , (const, 0x99, 4)]
[(stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0x99, 4)]
[(stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0x99, 4)]
[(stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x99, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x99, 4)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x99, 4)]
[(stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x99, 4)]
[(stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x99, 4)]
[(stack, 0xfffffffffffffea4, 4) INDIRECT (stack, 0xfffffffffffffea4, 4) , (const, 0x99, 4)]
[(stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x99, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x99, 4)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x99, 4)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x99, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x99, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x99, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x99, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x99, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x99, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x99, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x99, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x99, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x99, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x99, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x99, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x99, 4)]
[ ---  CBRANCH (ram, 0x40522e, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0xffffffff, 4), (register, 0x0, 4) CALL (ram, 0x455ed0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xad, 4)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0xad, 4)]
[(ram, 0x4c4f18, 8) INDIRECT (ram, 0x4c4f18, 8) , (const, 0xad, 4)]
[(ram, 0x4c4fb8, 8) INDIRECT (ram, 0x4c4fb8, 8) , (const, 0xad, 4)]
[(ram, 0x4c7780, 4) INDIRECT (ram, 0x4c7780, 4) , (const, 0xad, 4)]
[(ram, 0x4c7784, 4) INDIRECT (ram, 0x4c7784, 4) , (const, 0xad, 4)]
[(ram, 0x4c7788, 8) INDIRECT (ram, 0x4c7788, 8) , (const, 0xad, 4)]
[(ram, 0x4c77d0, 4) INDIRECT (ram, 0x4c77d0, 4) , (const, 0xad, 4)]
[(ram, 0x4c77d4, 4) INDIRECT (ram, 0x4c77d4, 4) , (const, 0xad, 4)]
[(ram, 0x4c77d8, 8) INDIRECT (ram, 0x4c77d8, 8) , (const, 0xad, 4)]
[(ram, 0x4c77e0, 4) INDIRECT (ram, 0x4c77e0, 4) , (const, 0xad, 4)]
[(stack, 0xfffffffffffffd28, 8) INDIRECT (stack, 0xfffffffffffffd28, 8) , (const, 0xad, 4)]
[(stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0xad, 4)]
[(stack, 0xfffffffffffffe30, 4) INDIRECT (stack, 0xfffffffffffffe30, 4) , (const, 0xad, 4)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0xad, 4), (stack, 0xfffffffffffffe50, 8) COPY (const, 0x404de2, 8)]
[(stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0xad, 4)]
[(stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0xad, 4)]
[(stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0xad, 4)]
[(stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0xad, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0xad, 4)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0xad, 4)]
[(stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0xad, 4)]
[(stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0xad, 4)]
[(stack, 0xfffffffffffffea4, 4) INDIRECT (stack, 0xfffffffffffffea4, 4) , (const, 0xad, 4)]
[(stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0xad, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0xad, 4)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0xad, 4)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0xad, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0xad, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0xad, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0xad, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0xad, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0xad, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0xad, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0xad, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0xad, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0xad, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0xad, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0xad, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xad, 4)]
[ ---  CBRANCH (ram, 0x405227, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x455300, 8) , (const, 0x1, 4) , (register, 0x0, 4) , (unique, 0x3c80, 8), (unique, 0x3c80, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff28, 8)]
[ ---  CBRANCH (ram, 0x405227, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (unique, 0x10001280, 8) , (unique, 0x10000e28, 8), (unique, 0x10001280, 8) CAST (stack, 0xffffffffffffff58, 8), (unique, 0x10000e28, 8) PTRSUB (const, 0x0, 8) , (const, 0x30, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xe5, 4)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0xe5, 4)]
[(ram, 0x4c4f18, 8) INDIRECT (ram, 0x4c4f18, 8) , (const, 0xe5, 4)]
[(ram, 0x4c4fb8, 8) INDIRECT (ram, 0x4c4fb8, 8) , (const, 0xe5, 4)]
[(ram, 0x4c7780, 4) INDIRECT (ram, 0x4c7780, 4) , (const, 0xe5, 4)]
[(ram, 0x4c7784, 4) INDIRECT (ram, 0x4c7784, 4) , (const, 0xe5, 4)]
[(ram, 0x4c7788, 8) INDIRECT (ram, 0x4c7788, 8) , (const, 0xe5, 4)]
[(ram, 0x4c77d0, 4) INDIRECT (ram, 0x4c77d0, 4) , (const, 0xe5, 4)]
[(ram, 0x4c77d4, 4) INDIRECT (ram, 0x4c77d4, 4) , (const, 0xe5, 4)]
[(ram, 0x4c77d8, 8) INDIRECT (ram, 0x4c77d8, 8) , (const, 0xe5, 4)]
[(ram, 0x4c77e0, 4) INDIRECT (ram, 0x4c77e0, 4) , (const, 0xe5, 4)]
[(stack, 0xfffffffffffffd28, 8) INDIRECT (stack, 0xfffffffffffffd28, 8) , (const, 0xe5, 4)]
[(stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0xe5, 4)]
[(stack, 0xfffffffffffffe30, 4) INDIRECT (stack, 0xfffffffffffffe30, 4) , (const, 0xe5, 4)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0xe5, 4), (stack, 0xfffffffffffffe50, 8) COPY (const, 0x404e1a, 8)]
[(stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0xe5, 4)]
[(stack, 0xfffffffffffffe6c, 4) INDIRECT (register, 0x0, 4) , (const, 0xe5, 4)]
[(stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0xe5, 4)]
[(stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0xe5, 4)]
[(stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0xe5, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0xe5, 4)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0xe5, 4)]
[(stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0xe5, 4)]
[(stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0xe5, 4)]
[(stack, 0xfffffffffffffea4, 4) INDIRECT (stack, 0xfffffffffffffea4, 4) , (const, 0xe5, 4)]
[(stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0xe5, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0xe5, 4)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0xe5, 4)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0xe5, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0xe5, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0xe5, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0xe5, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0xe5, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0xe5, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0xe5, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0xe5, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0xe5, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0xe5, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0xe5, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xe5, 4)]
[ ---  CBRANCH (ram, 0x405320, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0xffffffffffffffff, 8), (register, 0x0, 8) CAST (unique, 0x10001288, 8), (unique, 0x10001288, 8) CALL (ram, 0x4561f0, 8) , (const, 0x0, 8) , (stack, 0xffffffffffffff58, 8) , (const, 0x1, 4) , (const, 0x2, 4) , (register, 0x0, 4) , (const, 0x0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xf5, 4)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0xf5, 4)]
[(ram, 0x4c4f18, 8) INDIRECT (ram, 0x4c4f18, 8) , (const, 0xf5, 4)]
[(ram, 0x4c4fb8, 8) INDIRECT (ram, 0x4c4fb8, 8) , (const, 0xf5, 4)]
[(ram, 0x4c7780, 4) INDIRECT (ram, 0x4c7780, 4) , (const, 0xf5, 4)]
[(ram, 0x4c7784, 4) INDIRECT (ram, 0x4c7784, 4) , (const, 0xf5, 4)]
[(ram, 0x4c7788, 8) INDIRECT (ram, 0x4c7788, 8) , (const, 0xf5, 4)]
[(ram, 0x4c77d0, 4) INDIRECT (ram, 0x4c77d0, 4) , (const, 0xf5, 4)]
[(ram, 0x4c77d4, 4) INDIRECT (ram, 0x4c77d4, 4) , (const, 0xf5, 4)]
[(ram, 0x4c77d8, 8) INDIRECT (ram, 0x4c77d8, 8) , (const, 0xf5, 4)]
[(ram, 0x4c77e0, 4) INDIRECT (ram, 0x4c77e0, 4) , (const, 0xf5, 4)]
[(stack, 0xfffffffffffffd28, 8) INDIRECT (stack, 0xfffffffffffffd28, 8) , (const, 0xf5, 4)]
[(stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0xf5, 4)]
[(stack, 0xfffffffffffffe30, 4) INDIRECT (stack, 0xfffffffffffffe30, 4) , (const, 0xf5, 4)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0xf5, 4), (stack, 0xfffffffffffffe50, 8) COPY (const, 0x404e2e, 8)]
[(stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0xf5, 4)]
[(stack, 0xfffffffffffffe6c, 4) INDIRECT (stack, 0xfffffffffffffe6c, 4) , (const, 0xf5, 4)]
[(stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0xf5, 4)]
[(stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0xf5, 4)]
[(stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0xf5, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0xf5, 4)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0xf5, 4)]
[(stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0xf5, 4)]
[(stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0xf5, 4)]
[(stack, 0xfffffffffffffea4, 4) INDIRECT (stack, 0xfffffffffffffea4, 4) , (const, 0xf5, 4)]
[(stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0xf5, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0xf5, 4)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0xf5, 4)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0xf5, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0xf5, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0xf5, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0xf5, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0xf5, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0xf5, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0xf5, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0xf5, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0xf5, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0xf5, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0xf5, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xf5, 4)]
[ ---  CALL (ram, 0x455d60, 8) , (register, 0x0, 4)]
[(register, 0x206, 1) INT_NOTEQUAL (unique, 0xbc80, 4) , (const, 0x950412de, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10001290, 8), (unique, 0x10001290, 8) CAST (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x404e4e, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbc80, 4) , (const, 0xde120495, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10001290, 8), (unique, 0x10001290, 8) CAST (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x405440, 1) , (register, 0x206, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1968, 4)]
[(ram, 0x4c4f18, 8) INDIRECT (ram, 0x4c4f18, 8) , (const, 0x1968, 4)]
[(ram, 0x4c4fb8, 8) INDIRECT (ram, 0x4c4fb8, 8) , (const, 0x1968, 4)]
[(ram, 0x4c7780, 4) INDIRECT (ram, 0x4c7780, 4) , (const, 0x1968, 4)]
[(ram, 0x4c7788, 8) INDIRECT (ram, 0x4c7788, 8) , (const, 0x1968, 4)]
[(ram, 0x4c77d0, 4) INDIRECT (ram, 0x4c77d0, 4) , (const, 0x1968, 4)]
[(ram, 0x4c77d4, 4) INDIRECT (ram, 0x4c77d4, 4) , (const, 0x1968, 4)]
[(ram, 0x4c77d8, 8) INDIRECT (ram, 0x4c77d8, 8) , (const, 0x1968, 4)]
[(ram, 0x4c77e0, 4) INDIRECT (ram, 0x4c77e0, 4) , (const, 0x1968, 4)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x1968, 4), (stack, 0xfffffffffffffe50, 8) COPY (const, 0x40544b, 8)]
[(stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x1968, 4)]
[(stack, 0xfffffffffffffe6c, 4) INDIRECT (stack, 0xfffffffffffffe6c, 4) , (const, 0x1968, 4)]
[(stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0x1968, 4)]
[(stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0x1968, 4)]
[(stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x1968, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x1968, 4)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x1968, 4)]
[(stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x1968, 4)]
[(stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x1968, 4)]
[(stack, 0xfffffffffffffea4, 4) INDIRECT (stack, 0xfffffffffffffea4, 4) , (const, 0x1968, 4)]
[(stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x1968, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x1968, 4)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x1968, 4)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x1968, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x1968, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x1968, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x1968, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x1968, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x1968, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x1968, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x1968, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x1968, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1968, 4)]
[ ---  CALL (ram, 0x4562a0, 8) , (register, 0x0, 8) , (stack, 0xffffffffffffff58, 8)]
[(unique, 0x100010f4, 4) COPY (register, 0x0, 4), (register, 0x0, 4) INT_ADD (ram, 0x4c7784, 4) , (const, 0xffffffff, 4), (ram, 0x4c7784, 4) INDIRECT (ram, 0x4c7784, 4) , (const, 0x1968, 4)]
[ ---  BRANCH (ram, 0x4051b8, 1)]
[(stack, 0xfffffffffffffe6c, 4) COPY (const, 0x1, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1979, 4)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x1979, 4)]
[(ram, 0x4c4f18, 8) INDIRECT (ram, 0x4c4f18, 8) , (const, 0x1979, 4)]
[(ram, 0x4c4fb8, 8) INDIRECT (ram, 0x4c4fb8, 8) , (const, 0x1979, 4)]
[(ram, 0x4c7780, 4) INDIRECT (ram, 0x4c7780, 4) , (const, 0x1979, 4)]
[(ram, 0x4c7784, 4) INDIRECT (ram, 0x4c7784, 4) , (const, 0x1979, 4)]
[(ram, 0x4c7788, 8) INDIRECT (ram, 0x4c7788, 8) , (const, 0x1979, 4)]
[(ram, 0x4c77d0, 4) INDIRECT (ram, 0x4c77d0, 4) , (const, 0x1979, 4)]
[(ram, 0x4c77d4, 4) INDIRECT (ram, 0x4c77d4, 4) , (const, 0x1979, 4)]
[(ram, 0x4c77d8, 8) INDIRECT (ram, 0x4c77d8, 8) , (const, 0x1979, 4)]
[(ram, 0x4c77e0, 4) INDIRECT (ram, 0x4c77e0, 4) , (const, 0x1979, 4)]
[(stack, 0xfffffffffffffd28, 8) INDIRECT (stack, 0xfffffffffffffd28, 8) , (const, 0x1979, 4)]
[(stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x1979, 4)]
[(stack, 0xfffffffffffffe30, 4) INDIRECT (stack, 0xfffffffffffffe30, 4) , (const, 0x1979, 4)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x1979, 4), (stack, 0xfffffffffffffe50, 8) COPY (const, 0x405328, 8)]
[(stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x1979, 4)]
[(stack, 0xfffffffffffffe6c, 4) INDIRECT (stack, 0xfffffffffffffe6c, 4) , (const, 0x1979, 4)]
[(stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0x1979, 4)]
[(stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0x1979, 4)]
[(stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x1979, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x1979, 4)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x1979, 4)]
[(stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x1979, 4)]
[(stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x1979, 4)]
[(stack, 0xfffffffffffffea4, 4) INDIRECT (stack, 0xfffffffffffffea4, 4) , (const, 0x1979, 4)]
[(stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x1979, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x1979, 4)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x1979, 4)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x1979, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x1979, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x1979, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x1979, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x1979, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x1979, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x1979, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x1979, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x1979, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x1979, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x1979, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1979, 4)]
[(unique, 0x10000fec, 8) COPY (unique, 0x100012a0, 8), (unique, 0x100012a0, 8) CAST (stack, 0xffffffffffffff58, 8)]
[(unique, 0x10001074, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10001298, 8), (unique, 0x10001298, 8) CALL (ram, 0x426550, 8) , (stack, 0xffffffffffffff58, 8)]
[ ---  CBRANCH (ram, 0x405227, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10001298, 8), (unique, 0x10001298, 8) CALL (ram, 0x426550, 8) , (stack, 0xffffffffffffff58, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x198d, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x198d, 4), (register, 0x20a, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1) , (register, 0x20a, 1)]
[(ram, 0x4c4f18, 8) INDIRECT (ram, 0x4c4f18, 8) , (const, 0x198d, 4), (ram, 0x4c4f18, 8) MULTIEQUAL (ram, 0x4c4f18, 8) , (ram, 0x4c4f18, 8) , (ram, 0x4c4f18, 8)]
[(ram, 0x4c4fb8, 8) INDIRECT (ram, 0x4c4fb8, 8) , (const, 0x198d, 4), (ram, 0x4c4fb8, 8) MULTIEQUAL (ram, 0x4c4fb8, 8) , (ram, 0x4c4fb8, 8) , (ram, 0x4c4fb8, 8)]
[(ram, 0x4c7780, 4) INDIRECT (ram, 0x4c7780, 4) , (const, 0x198d, 4), (ram, 0x4c7780, 4) MULTIEQUAL (ram, 0x4c7780, 4) , (ram, 0x4c7780, 4) , (ram, 0x4c7780, 4)]
[(ram, 0x4c7784, 4) INDIRECT (ram, 0x4c7784, 4) , (const, 0x198d, 4), (ram, 0x4c7784, 4) MULTIEQUAL (ram, 0x4c7784, 4) , (ram, 0x4c7784, 4) , (ram, 0x4c7784, 4)]
[(ram, 0x4c7788, 8) INDIRECT (ram, 0x4c7788, 8) , (const, 0x198d, 4), (ram, 0x4c7788, 8) MULTIEQUAL (ram, 0x4c7788, 8) , (ram, 0x4c7788, 8) , (ram, 0x4c7788, 8)]
[(ram, 0x4c77d0, 4) INDIRECT (ram, 0x4c77d0, 4) , (const, 0x198d, 4), (ram, 0x4c77d0, 4) MULTIEQUAL (ram, 0x4c77d0, 4) , (ram, 0x4c77d0, 4) , (ram, 0x4c77d0, 4)]
[(ram, 0x4c77d4, 4) INDIRECT (ram, 0x4c77d4, 4) , (const, 0x198d, 4), (ram, 0x4c77d4, 4) MULTIEQUAL (ram, 0x4c77d4, 4) , (ram, 0x4c77d4, 4) , (ram, 0x4c77d4, 4)]
[(ram, 0x4c77d8, 8) INDIRECT (ram, 0x4c77d8, 8) , (const, 0x198d, 4), (ram, 0x4c77d8, 8) MULTIEQUAL (ram, 0x4c77d8, 8) , (ram, 0x4c77d8, 8) , (ram, 0x4c77d8, 8)]
[(ram, 0x4c77e0, 4) INDIRECT (ram, 0x4c77e0, 4) , (const, 0x198d, 4), (ram, 0x4c77e0, 4) MULTIEQUAL (ram, 0x4c77e0, 4) , (ram, 0x4c77e0, 4) , (ram, 0x4c77e0, 4)]
[(stack, 0xfffffffffffffd28, 8) INDIRECT (stack, 0xfffffffffffffd28, 8) , (const, 0x198d, 4), (stack, 0xfffffffffffffd28, 8) MULTIEQUAL (stack, 0xfffffffffffffd28, 8) , (stack, 0xfffffffffffffd28, 8) , (stack, 0xfffffffffffffd28, 8)]
[(stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x198d, 4), (stack, 0xfffffffffffffda8, 8) MULTIEQUAL (stack, 0xfffffffffffffda8, 8) , (stack, 0xfffffffffffffda8, 8) , (stack, 0xfffffffffffffda8, 8)]
[(stack, 0xfffffffffffffe30, 4) INDIRECT (stack, 0xfffffffffffffe30, 4) , (const, 0x198d, 4), (stack, 0xfffffffffffffe30, 4) MULTIEQUAL (stack, 0xfffffffffffffe30, 4) , (stack, 0xfffffffffffffe30, 4) , (stack, 0xfffffffffffffe30, 4)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x198d, 4), (stack, 0xfffffffffffffe50, 8) COPY (const, 0x405347, 8)]
[(stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x198d, 4), (stack, 0xfffffffffffffe60, 8) MULTIEQUAL (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8)]
[(stack, 0xfffffffffffffe6c, 4) INDIRECT (stack, 0xfffffffffffffe6c, 4) , (const, 0x198d, 4), (stack, 0xfffffffffffffe6c, 4) MULTIEQUAL (stack, 0xfffffffffffffe6c, 4) , (stack, 0xfffffffffffffe6c, 4) , (stack, 0xfffffffffffffe6c, 4)]
[(stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0x198d, 4), (stack, 0xfffffffffffffe70, 8) MULTIEQUAL (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8)]
[(stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0x198d, 4), (stack, 0xfffffffffffffe78, 8) MULTIEQUAL (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8)]
[(stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x198d, 4), (stack, 0xfffffffffffffe80, 8) MULTIEQUAL (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x198d, 4), (stack, 0xfffffffffffffe88, 8) MULTIEQUAL (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x198d, 4), (stack, 0xfffffffffffffe90, 8) MULTIEQUAL (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8)]
[(stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x198d, 4), (stack, 0xfffffffffffffe98, 8) MULTIEQUAL (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8)]
[(stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x198d, 4), (stack, 0xfffffffffffffea0, 4) MULTIEQUAL (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4)]
[(stack, 0xfffffffffffffea4, 4) INDIRECT (stack, 0xfffffffffffffea4, 4) , (const, 0x198d, 4), (stack, 0xfffffffffffffea4, 4) MULTIEQUAL (stack, 0xfffffffffffffea4, 4) , (stack, 0xfffffffffffffea4, 4) , (stack, 0xfffffffffffffea4, 4)]
[(stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x198d, 4), (stack, 0xfffffffffffffea8, 8) MULTIEQUAL (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x198d, 4), (stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x198d, 4), (stack, 0xfffffffffffffeb8, 8) MULTIEQUAL (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x198d, 4), (stack, 0xfffffffffffffec0, 8) MULTIEQUAL (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x198d, 4), (stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x198d, 4), (stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x198d, 4), (stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x198d, 4), (stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x198d, 4), (stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x198d, 4), (stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x198d, 4), (stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x198d, 4), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x198d, 4), (stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x198d, 4), (stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x198d, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CBRANCH (ram, 0x405210, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (register, 0x0, 8) , (const, 0x1, 8), (register, 0x0, 8) CALL (ram, 0x456020, 8) , (register, 0x0, 4) , (register, 0xa8, 8) , (register, 0xa0, 8), (register, 0xa0, 8) MULTIEQUAL (unique, 0x10000fdc, 8) , (unique, 0x10000fe4, 8) , (unique, 0x10000fec, 8), (register, 0xa8, 8) MULTIEQUAL (unique, 0x10001064, 8) , (unique, 0x1000106c, 8) , (unique, 0x10001074, 8)]
[ ---  CBRANCH (ram, 0x405227, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0xffffffffffffffff, 8)]
[(unique, 0x10000fe4, 8) COPY (register, 0xa0, 8)]
[(unique, 0x1000106c, 8) COPY (register, 0xa8, 8)]
[ ---  CBRANCH (ram, 0x40533a, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd00, 4) , (const, 0x4, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x100012a8, 8), (unique, 0x100012a8, 8) INT_ADD (register, 0x110, 8) , (const, 0xffffffffffffffc0, 8)]
[(unique, 0x10000fdc, 8) COPY (register, 0xa0, 8), (register, 0xa0, 8) CAST (unique, 0x100012c8, 8), (unique, 0x100012c8, 8) INT_SUB (unique, 0x100012c0, 8) , (register, 0x0, 8), (unique, 0x100012c0, 8) CAST (register, 0xa0, 8)]
[(unique, 0x10001064, 8) COPY (register, 0xa8, 8), (register, 0xa8, 8) CAST (unique, 0x100012b8, 8), (unique, 0x100012b8, 8) INT_ADD (unique, 0x100012b0, 8) , (register, 0x0, 8), (unique, 0x100012b0, 8) CAST (register, 0xa8, 8)]
[ ---  CBRANCH (ram, 0x40533a, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xa0, 8) , (const, 0x0, 8), (register, 0xa0, 8) CAST (unique, 0x100012c8, 8), (unique, 0x100012c8, 8) INT_SUB (unique, 0x100012c0, 8) , (register, 0x0, 8), (unique, 0x100012c0, 8) CAST (register, 0xa0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x19b2, 4)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x19b2, 4)]
[(ram, 0x4c4f18, 8) INDIRECT (ram, 0x4c4f18, 8) , (const, 0x19b2, 4)]
[(ram, 0x4c4fb8, 8) INDIRECT (ram, 0x4c4fb8, 8) , (const, 0x19b2, 4)]
[(ram, 0x4c7780, 4) INDIRECT (ram, 0x4c7780, 4) , (const, 0x19b2, 4)]
[(ram, 0x4c7784, 4) INDIRECT (ram, 0x4c7784, 4) , (const, 0x19b2, 4)]
[(ram, 0x4c7788, 8) INDIRECT (ram, 0x4c7788, 8) , (const, 0x19b2, 4)]
[(ram, 0x4c77d0, 4) INDIRECT (ram, 0x4c77d0, 4) , (const, 0x19b2, 4)]
[(ram, 0x4c77d4, 4) INDIRECT (ram, 0x4c77d4, 4) , (const, 0x19b2, 4)]
[(ram, 0x4c77d8, 8) INDIRECT (ram, 0x4c77d8, 8) , (const, 0x19b2, 4)]
[(ram, 0x4c77e0, 4) INDIRECT (ram, 0x4c77e0, 4) , (const, 0x19b2, 4)]
[(stack, 0xfffffffffffffd28, 8) INDIRECT (stack, 0xfffffffffffffd28, 8) , (const, 0x19b2, 4)]
[(stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x19b2, 4)]
[(stack, 0xfffffffffffffe30, 4) INDIRECT (stack, 0xfffffffffffffe30, 4) , (const, 0x19b2, 4)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x19b2, 4), (stack, 0xfffffffffffffe50, 8) COPY (const, 0x40535f, 8)]
[(stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x19b2, 4)]
[(stack, 0xfffffffffffffe6c, 4) INDIRECT (stack, 0xfffffffffffffe6c, 4) , (const, 0x19b2, 4)]
[(stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0x19b2, 4)]
[(stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0x19b2, 4)]
[(stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x19b2, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x19b2, 4)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x19b2, 4)]
[(stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x19b2, 4)]
[(stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x19b2, 4)]
[(stack, 0xfffffffffffffea4, 4) INDIRECT (stack, 0xfffffffffffffea4, 4) , (const, 0x19b2, 4)]
[(stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x19b2, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x19b2, 4)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x19b2, 4)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x19b2, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x19b2, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x19b2, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x19b2, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x19b2, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x19b2, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x19b2, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x19b2, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x19b2, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x19b2, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x19b2, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x19b2, 4)]
[ ---  CALL (ram, 0x455d60, 8) , (register, 0x0, 4)]
[(register, 0x206, 1) INT_NOTEQUAL (unique, 0xbc80, 4) , (const, 0x950412de, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100012d0, 8), (unique, 0x100012d0, 8) CAST (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x404e56, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0xde120495, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100012d0, 8), (unique, 0x100012d0, 8) CAST (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x404e56, 1) , (unique, 0x10000746, 1), (unique, 0x10000746, 1) BOOL_NEGATE (register, 0x206, 1)]
[(register, 0xb8, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8) , (register, 0x0, 8)]
[(register, 0xa0, 4) MULTIEQUAL (unique, 0xbc80, 4) , (unique, 0xbc80, 4) , (unique, 0xbc80, 4)]
[(register, 0x28, 1) MULTIEQUAL (register, 0x206, 1) , (register, 0x206, 1) , (register, 0x206, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x121, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x121, 4), (register, 0x20a, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1) , (register, 0x20a, 1)]
[(ram, 0x4c4f18, 8) INDIRECT (ram, 0x4c4f18, 8) , (const, 0x121, 4), (ram, 0x4c4f18, 8) MULTIEQUAL (ram, 0x4c4f18, 8) , (ram, 0x4c4f18, 8) , (ram, 0x4c4f18, 8)]
[(ram, 0x4c4fb8, 8) INDIRECT (ram, 0x4c4fb8, 8) , (const, 0x121, 4), (ram, 0x4c4fb8, 8) MULTIEQUAL (ram, 0x4c4fb8, 8) , (ram, 0x4c4fb8, 8) , (ram, 0x4c4fb8, 8)]
[(ram, 0x4c7780, 4) INDIRECT (ram, 0x4c7780, 4) , (const, 0x121, 4), (ram, 0x4c7780, 4) MULTIEQUAL (ram, 0x4c7780, 4) , (ram, 0x4c7780, 4) , (ram, 0x4c7780, 4)]
[(ram, 0x4c7784, 4) INDIRECT (ram, 0x4c7784, 4) , (const, 0x121, 4), (ram, 0x4c7784, 4) MULTIEQUAL (ram, 0x4c7784, 4) , (ram, 0x4c7784, 4) , (ram, 0x4c7784, 4)]
[(ram, 0x4c7788, 8) INDIRECT (ram, 0x4c7788, 8) , (const, 0x121, 4), (ram, 0x4c7788, 8) MULTIEQUAL (ram, 0x4c7788, 8) , (ram, 0x4c7788, 8) , (ram, 0x4c7788, 8)]
[(ram, 0x4c77d0, 4) INDIRECT (ram, 0x4c77d0, 4) , (const, 0x121, 4), (ram, 0x4c77d0, 4) MULTIEQUAL (ram, 0x4c77d0, 4) , (ram, 0x4c77d0, 4) , (ram, 0x4c77d0, 4)]
[(ram, 0x4c77d4, 4) INDIRECT (ram, 0x4c77d4, 4) , (const, 0x121, 4), (ram, 0x4c77d4, 4) MULTIEQUAL (ram, 0x4c77d4, 4) , (ram, 0x4c77d4, 4) , (ram, 0x4c77d4, 4)]
[(ram, 0x4c77d8, 8) INDIRECT (ram, 0x4c77d8, 8) , (const, 0x121, 4), (ram, 0x4c77d8, 8) MULTIEQUAL (ram, 0x4c77d8, 8) , (ram, 0x4c77d8, 8) , (ram, 0x4c77d8, 8)]
[(ram, 0x4c77e0, 4) INDIRECT (ram, 0x4c77e0, 4) , (const, 0x121, 4), (ram, 0x4c77e0, 4) MULTIEQUAL (ram, 0x4c77e0, 4) , (ram, 0x4c77e0, 4) , (ram, 0x4c77e0, 4)]
[(stack, 0xfffffffffffffd28, 8) INDIRECT (stack, 0xfffffffffffffd28, 8) , (const, 0x121, 4), (stack, 0xfffffffffffffd28, 8) MULTIEQUAL (stack, 0xfffffffffffffd28, 8) , (stack, 0xfffffffffffffd28, 8) , (stack, 0xfffffffffffffd28, 8)]
[(stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x121, 4), (stack, 0xfffffffffffffda8, 8) MULTIEQUAL (stack, 0xfffffffffffffda8, 8) , (stack, 0xfffffffffffffda8, 8) , (stack, 0xfffffffffffffda8, 8)]
[(stack, 0xfffffffffffffe30, 4) INDIRECT (stack, 0xfffffffffffffe30, 4) , (const, 0x121, 4), (stack, 0xfffffffffffffe30, 4) MULTIEQUAL (stack, 0xfffffffffffffe30, 4) , (stack, 0xfffffffffffffe30, 4) , (stack, 0xfffffffffffffe30, 4)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x121, 4), (stack, 0xfffffffffffffe50, 8) COPY (const, 0x404e60, 8)]
[(stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x121, 4), (stack, 0xfffffffffffffe60, 8) MULTIEQUAL (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8)]
[(stack, 0xfffffffffffffe6c, 4) INDIRECT (stack, 0xfffffffffffffe6c, 4) , (const, 0x121, 4), (stack, 0xfffffffffffffe6c, 4) MULTIEQUAL (stack, 0xfffffffffffffe6c, 4) , (stack, 0xfffffffffffffe6c, 4) , (stack, 0xfffffffffffffe6c, 4)]
[(stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0x121, 4), (stack, 0xfffffffffffffe70, 8) MULTIEQUAL (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8)]
[(stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0x121, 4), (stack, 0xfffffffffffffe78, 8) MULTIEQUAL (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8)]
[(stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x121, 4), (stack, 0xfffffffffffffe80, 8) MULTIEQUAL (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x121, 4), (stack, 0xfffffffffffffe88, 8) MULTIEQUAL (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x121, 4), (stack, 0xfffffffffffffe90, 8) MULTIEQUAL (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8)]
[(stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x121, 4), (stack, 0xfffffffffffffe98, 8) MULTIEQUAL (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8)]
[(stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x121, 4), (stack, 0xfffffffffffffea0, 4) MULTIEQUAL (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4)]
[(stack, 0xfffffffffffffea4, 4) INDIRECT (stack, 0xfffffffffffffea4, 4) , (const, 0x121, 4), (stack, 0xfffffffffffffea4, 4) MULTIEQUAL (stack, 0xfffffffffffffea4, 4) , (stack, 0xfffffffffffffea4, 4) , (stack, 0xfffffffffffffea4, 4)]
[(stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x121, 4), (stack, 0xfffffffffffffea8, 8) MULTIEQUAL (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x121, 4), (stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x121, 4), (stack, 0xfffffffffffffeb8, 8) MULTIEQUAL (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x121, 4), (stack, 0xfffffffffffffec0, 8) MULTIEQUAL (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x121, 4), (stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x121, 4), (stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x121, 4), (stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x121, 4), (stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x121, 4), (stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x121, 4), (stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x121, 4), (stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x121, 4), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x121, 4), (stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x121, 4), (stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x121, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CBRANCH (ram, 0x40522e, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x100012d8, 8), (unique, 0x100012d8, 8) CALL (ram, 0x426550, 8) , (const, 0xc8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x0, 8) , (unique, 0x100012e0, 8), (unique, 0x100012e0, 8) CAST (register, 0xb8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0x100012e8, 8), (unique, 0x100012e8, 8) CAST (register, 0x0, 8), (unique, 0x3100, 8) PTRADD (register, 0x38, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0x100012f0, 8), (unique, 0x100012f0, 8) CAST (stack, 0xffffffffffffff58, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100012f8, 8) , (stack, 0xfffffffffffffe6c, 4), (unique, 0x100012f8, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10001308, 8), (unique, 0x10001308, 8) INT_ADD (unique, 0x10001300, 8) , (const, 0x4, 8), (unique, 0x10001300, 8) CAST (register, 0xb8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001310, 8) , (register, 0x10, 4), (unique, 0x10001310, 8) CAST (unique, 0x3100, 8), (register, 0x10, 4) INT_ZEXT (register, 0x28, 1), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x3, 8) , (const, 0x8, 8)]
[(ram, 0x4c4f18, 8) INDIRECT (ram, 0x4c4f18, 8) , (const, 0x147, 4), (ram, 0x4c4f18, 8) INDIRECT (ram, 0x4c4f18, 8) , (const, 0x144, 4), (ram, 0x4c4f18, 8) INDIRECT (ram, 0x4c4f18, 8) , (const, 0x13d, 4), (ram, 0x4c4f18, 8) INDIRECT (ram, 0x4c4f18, 8) , (const, 0x13a, 4), (ram, 0x4c4f18, 8) INDIRECT (ram, 0x4c4f18, 8) , (const, 0x133, 4), (ram, 0x4c4f18, 8) INDIRECT (ram, 0x4c4f18, 8) , (const, 0x12e, 4)]
[(ram, 0x4c4fb8, 8) INDIRECT (ram, 0x4c4fb8, 8) , (const, 0x147, 4), (ram, 0x4c4fb8, 8) INDIRECT (ram, 0x4c4fb8, 8) , (const, 0x144, 4), (ram, 0x4c4fb8, 8) INDIRECT (ram, 0x4c4fb8, 8) , (const, 0x13d, 4), (ram, 0x4c4fb8, 8) INDIRECT (ram, 0x4c4fb8, 8) , (const, 0x13a, 4), (ram, 0x4c4fb8, 8) INDIRECT (ram, 0x4c4fb8, 8) , (const, 0x133, 4), (ram, 0x4c4fb8, 8) INDIRECT (ram, 0x4c4fb8, 8) , (const, 0x12e, 4)]
[(ram, 0x4c7780, 4) INDIRECT (ram, 0x4c7780, 4) , (const, 0x147, 4), (ram, 0x4c7780, 4) INDIRECT (ram, 0x4c7780, 4) , (const, 0x144, 4), (ram, 0x4c7780, 4) INDIRECT (ram, 0x4c7780, 4) , (const, 0x13d, 4), (ram, 0x4c7780, 4) INDIRECT (ram, 0x4c7780, 4) , (const, 0x13a, 4), (ram, 0x4c7780, 4) INDIRECT (ram, 0x4c7780, 4) , (const, 0x133, 4), (ram, 0x4c7780, 4) INDIRECT (ram, 0x4c7780, 4) , (const, 0x12e, 4)]
[(ram, 0x4c7784, 4) INDIRECT (ram, 0x4c7784, 4) , (const, 0x147, 4), (ram, 0x4c7784, 4) INDIRECT (ram, 0x4c7784, 4) , (const, 0x144, 4), (ram, 0x4c7784, 4) INDIRECT (ram, 0x4c7784, 4) , (const, 0x13d, 4), (ram, 0x4c7784, 4) INDIRECT (ram, 0x4c7784, 4) , (const, 0x13a, 4), (ram, 0x4c7784, 4) INDIRECT (ram, 0x4c7784, 4) , (const, 0x133, 4), (ram, 0x4c7784, 4) INDIRECT (ram, 0x4c7784, 4) , (const, 0x12e, 4)]
[(ram, 0x4c7788, 8) INDIRECT (ram, 0x4c7788, 8) , (const, 0x147, 4), (ram, 0x4c7788, 8) INDIRECT (ram, 0x4c7788, 8) , (const, 0x144, 4), (ram, 0x4c7788, 8) INDIRECT (ram, 0x4c7788, 8) , (const, 0x13d, 4), (ram, 0x4c7788, 8) INDIRECT (ram, 0x4c7788, 8) , (const, 0x13a, 4), (ram, 0x4c7788, 8) INDIRECT (ram, 0x4c7788, 8) , (const, 0x133, 4), (ram, 0x4c7788, 8) INDIRECT (ram, 0x4c7788, 8) , (const, 0x12e, 4)]
[(ram, 0x4c77d0, 4) INDIRECT (ram, 0x4c77d0, 4) , (const, 0x147, 4), (ram, 0x4c77d0, 4) INDIRECT (ram, 0x4c77d0, 4) , (const, 0x144, 4), (ram, 0x4c77d0, 4) INDIRECT (ram, 0x4c77d0, 4) , (const, 0x13d, 4), (ram, 0x4c77d0, 4) INDIRECT (ram, 0x4c77d0, 4) , (const, 0x13a, 4), (ram, 0x4c77d0, 4) INDIRECT (ram, 0x4c77d0, 4) , (const, 0x133, 4), (ram, 0x4c77d0, 4) INDIRECT (ram, 0x4c77d0, 4) , (const, 0x12e, 4)]
[(ram, 0x4c77d4, 4) INDIRECT (ram, 0x4c77d4, 4) , (const, 0x147, 4), (ram, 0x4c77d4, 4) INDIRECT (ram, 0x4c77d4, 4) , (const, 0x144, 4), (ram, 0x4c77d4, 4) INDIRECT (ram, 0x4c77d4, 4) , (const, 0x13d, 4), (ram, 0x4c77d4, 4) INDIRECT (ram, 0x4c77d4, 4) , (const, 0x13a, 4), (ram, 0x4c77d4, 4) INDIRECT (ram, 0x4c77d4, 4) , (const, 0x133, 4), (ram, 0x4c77d4, 4) INDIRECT (ram, 0x4c77d4, 4) , (const, 0x12e, 4)]
[(ram, 0x4c77d8, 8) INDIRECT (ram, 0x4c77d8, 8) , (const, 0x147, 4), (ram, 0x4c77d8, 8) INDIRECT (ram, 0x4c77d8, 8) , (const, 0x144, 4), (ram, 0x4c77d8, 8) INDIRECT (ram, 0x4c77d8, 8) , (const, 0x13d, 4), (ram, 0x4c77d8, 8) INDIRECT (ram, 0x4c77d8, 8) , (const, 0x13a, 4), (ram, 0x4c77d8, 8) INDIRECT (ram, 0x4c77d8, 8) , (const, 0x133, 4), (ram, 0x4c77d8, 8) INDIRECT (ram, 0x4c77d8, 8) , (const, 0x12e, 4)]
[(ram, 0x4c77e0, 4) INDIRECT (ram, 0x4c77e0, 4) , (const, 0x147, 4), (ram, 0x4c77e0, 4) INDIRECT (ram, 0x4c77e0, 4) , (const, 0x144, 4), (ram, 0x4c77e0, 4) INDIRECT (ram, 0x4c77e0, 4) , (const, 0x13d, 4), (ram, 0x4c77e0, 4) INDIRECT (ram, 0x4c77e0, 4) , (const, 0x13a, 4), (ram, 0x4c77e0, 4) INDIRECT (ram, 0x4c77e0, 4) , (const, 0x133, 4), (ram, 0x4c77e0, 4) INDIRECT (ram, 0x4c77e0, 4) , (const, 0x12e, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (const, 0x0, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x4, 8) , (const, 0x8, 8)]
[(register, 0x10, 4) INT_ZEXT (register, 0x28, 1)]
[ ---  CBRANCH (ram, 0x4050d0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xa0, 4) , (const, 0x950412de, 4)]
[ ---  CBRANCH (ram, 0x405270, 1) , (unique, 0xc900, 1), (unique, 0xc900, 1) INT_LESS (unique, 0xbc80, 4) , (const, 0x20000, 4)]
[(register, 0x0, 4) INT_AND (unique, 0xbc80, 4) , (const, 0xffff, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001320, 8) , (unique, 0xbc80, 4), (unique, 0x10001320, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x5, 8) , (const, 0x8, 8), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10001318, 8), (unique, 0x10001318, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb8, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[(stack, 0xfffffffffffffe70, 8) CAST (unique, 0x10001378, 8), (unique, 0x10001378, 8) INT_OR (unique, 0x10000853, 8) , (unique, 0x1000085b, 8), (unique, 0x1000085b, 8) INT_ZEXT (unique, 0xbc80, 4), (unique, 0x10000853, 8) INT_AND (unique, 0x10001370, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10001370, 8) CAST (stack, 0xfffffffffffffe70, 8), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10001358, 8), (unique, 0x10001358, 8) INT_ADD (unique, 0x10001350, 8) , (const, 0x14, 8), (unique, 0x10001350, 8) CAST (register, 0xb8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001380, 8) , (unique, 0xbc80, 4), (unique, 0x10001380, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0xb, 8) , (const, 0x8, 8), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10001358, 8), (unique, 0x10001358, 8) INT_ADD (unique, 0x10001350, 8) , (const, 0x14, 8), (unique, 0x10001350, 8) CAST (register, 0xb8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0x3400, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x6, 8) , (const, 0x8, 8), (unique, 0x3400, 8) CAST (unique, 0x10001340, 8), (unique, 0x10001340, 8) INT_ADD (unique, 0x10001338, 8) , (register, 0x30, 8), (unique, 0x10001338, 8) CAST (register, 0xb8, 8), (register, 0x30, 8) INT_ZEXT (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10001330, 8), (unique, 0x10001330, 8) INT_ADD (unique, 0x10001328, 8) , (const, 0xc, 8), (unique, 0x10001328, 8) CAST (register, 0xb8, 8)]
[(ram, 0x4c4f18, 8) INDIRECT (ram, 0x4c4f18, 8) , (const, 0x391c, 4), (ram, 0x4c4f18, 8) INDIRECT (ram, 0x4c4f18, 8) , (const, 0x391b, 4), (ram, 0x4c4f18, 8) INDIRECT (ram, 0x4c4f18, 8) , (const, 0x1910, 4), (ram, 0x4c4f18, 8) INDIRECT (ram, 0x4c4f18, 8) , (const, 0x18ef, 4)]
[(ram, 0x4c4fb8, 8) INDIRECT (ram, 0x4c4fb8, 8) , (const, 0x391c, 4), (ram, 0x4c4fb8, 8) INDIRECT (ram, 0x4c4fb8, 8) , (const, 0x391b, 4), (ram, 0x4c4fb8, 8) INDIRECT (ram, 0x4c4fb8, 8) , (const, 0x1910, 4), (ram, 0x4c4fb8, 8) INDIRECT (ram, 0x4c4fb8, 8) , (const, 0x18ef, 4)]
[(ram, 0x4c7780, 4) INDIRECT (ram, 0x4c7780, 4) , (const, 0x391c, 4), (ram, 0x4c7780, 4) INDIRECT (ram, 0x4c7780, 4) , (const, 0x391b, 4), (ram, 0x4c7780, 4) INDIRECT (ram, 0x4c7780, 4) , (const, 0x1910, 4), (ram, 0x4c7780, 4) INDIRECT (ram, 0x4c7780, 4) , (const, 0x18ef, 4)]
[(ram, 0x4c7784, 4) INDIRECT (ram, 0x4c7784, 4) , (const, 0x391c, 4), (ram, 0x4c7784, 4) INDIRECT (ram, 0x4c7784, 4) , (const, 0x391b, 4), (ram, 0x4c7784, 4) INDIRECT (ram, 0x4c7784, 4) , (const, 0x1910, 4), (ram, 0x4c7784, 4) INDIRECT (ram, 0x4c7784, 4) , (const, 0x18ef, 4)]
[(ram, 0x4c7788, 8) INDIRECT (ram, 0x4c7788, 8) , (const, 0x391c, 4), (ram, 0x4c7788, 8) INDIRECT (ram, 0x4c7788, 8) , (const, 0x391b, 4), (ram, 0x4c7788, 8) INDIRECT (ram, 0x4c7788, 8) , (const, 0x1910, 4), (ram, 0x4c7788, 8) INDIRECT (ram, 0x4c7788, 8) , (const, 0x18ef, 4)]
[(ram, 0x4c77d0, 4) INDIRECT (ram, 0x4c77d0, 4) , (const, 0x391c, 4), (ram, 0x4c77d0, 4) INDIRECT (ram, 0x4c77d0, 4) , (const, 0x391b, 4), (ram, 0x4c77d0, 4) INDIRECT (ram, 0x4c77d0, 4) , (const, 0x1910, 4), (ram, 0x4c77d0, 4) INDIRECT (ram, 0x4c77d0, 4) , (const, 0x18ef, 4)]
[(ram, 0x4c77d4, 4) INDIRECT (ram, 0x4c77d4, 4) , (const, 0x391c, 4), (ram, 0x4c77d4, 4) INDIRECT (ram, 0x4c77d4, 4) , (const, 0x391b, 4), (ram, 0x4c77d4, 4) INDIRECT (ram, 0x4c77d4, 4) , (const, 0x1910, 4), (ram, 0x4c77d4, 4) INDIRECT (ram, 0x4c77d4, 4) , (const, 0x18ef, 4)]
[(ram, 0x4c77d8, 8) INDIRECT (ram, 0x4c77d8, 8) , (const, 0x391c, 4), (ram, 0x4c77d8, 8) INDIRECT (ram, 0x4c77d8, 8) , (const, 0x391b, 4), (ram, 0x4c77d8, 8) INDIRECT (ram, 0x4c77d8, 8) , (const, 0x1910, 4), (ram, 0x4c77d8, 8) INDIRECT (ram, 0x4c77d8, 8) , (const, 0x18ef, 4)]
[(ram, 0x4c77e0, 4) INDIRECT (ram, 0x4c77e0, 4) , (const, 0x391c, 4), (ram, 0x4c77e0, 4) INDIRECT (ram, 0x4c77e0, 4) , (const, 0x391b, 4), (ram, 0x4c77e0, 4) INDIRECT (ram, 0x4c77e0, 4) , (const, 0x1910, 4), (ram, 0x4c77e0, 4) INDIRECT (ram, 0x4c77e0, 4) , (const, 0x18ef, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000798, 8) , (register, 0x30, 8), (unique, 0x10000798, 8) PTRADD (register, 0x0, 8) , (const, 0x7, 8) , (const, 0x8, 8), (register, 0x30, 8) CAST (unique, 0x10001368, 8), (unique, 0x10001368, 8) INT_ADD (register, 0x30, 8) , (unique, 0x10001360, 8), (unique, 0x10001360, 8) CAST (register, 0xb8, 8), (register, 0x30, 8) INT_ZEXT (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10001348, 8), (unique, 0x10001348, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb8, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x4052e0, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (unique, 0xbc80, 4) , (const, 0x3, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10001358, 8), (unique, 0x10001358, 8) INT_ADD (unique, 0x10001350, 8) , (const, 0x14, 8), (unique, 0x10001350, 8) CAST (register, 0xb8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001390, 8) , (register, 0x10, 4), (unique, 0x10001390, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0xd, 8) , (const, 0x8, 8)]
[(ram, 0x4c4f18, 8) INDIRECT (ram, 0x4c4f18, 8) , (const, 0x192f, 4), (ram, 0x4c4f18, 8) INDIRECT (ram, 0x4c4f18, 8) , (const, 0x1926, 4)]
[(ram, 0x4c4fb8, 8) INDIRECT (ram, 0x4c4fb8, 8) , (const, 0x192f, 4), (ram, 0x4c4fb8, 8) INDIRECT (ram, 0x4c4fb8, 8) , (const, 0x1926, 4)]
[(ram, 0x4c7780, 4) INDIRECT (ram, 0x4c7780, 4) , (const, 0x192f, 4), (ram, 0x4c7780, 4) INDIRECT (ram, 0x4c7780, 4) , (const, 0x1926, 4)]
[(ram, 0x4c7784, 4) INDIRECT (ram, 0x4c7784, 4) , (const, 0x192f, 4), (ram, 0x4c7784, 4) INDIRECT (ram, 0x4c7784, 4) , (const, 0x1926, 4)]
[(ram, 0x4c7788, 8) INDIRECT (ram, 0x4c7788, 8) , (const, 0x192f, 4), (ram, 0x4c7788, 8) INDIRECT (ram, 0x4c7788, 8) , (const, 0x1926, 4)]
[(ram, 0x4c77d0, 4) INDIRECT (ram, 0x4c77d0, 4) , (const, 0x192f, 4), (ram, 0x4c77d0, 4) INDIRECT (ram, 0x4c77d0, 4) , (const, 0x1926, 4)]
[(ram, 0x4c77d4, 4) INDIRECT (ram, 0x4c77d4, 4) , (const, 0x192f, 4), (ram, 0x4c77d4, 4) INDIRECT (ram, 0x4c77d4, 4) , (const, 0x1926, 4)]
[(ram, 0x4c77d8, 8) INDIRECT (ram, 0x4c77d8, 8) , (const, 0x192f, 4), (ram, 0x4c77d8, 8) INDIRECT (ram, 0x4c77d8, 8) , (const, 0x1926, 4)]
[(ram, 0x4c77e0, 4) INDIRECT (ram, 0x4c77e0, 4) , (const, 0x192f, 4), (ram, 0x4c77e0, 4) INDIRECT (ram, 0x4c77e0, 4) , (const, 0x1926, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0x100013a8, 8), (unique, 0x100013a8, 8) CAST (unique, 0x3400, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0xc, 8) , (const, 0x8, 8), (unique, 0x3400, 8) CAST (unique, 0x100013a0, 8), (unique, 0x100013a0, 8) INT_ADD (unique, 0x10001398, 8) , (register, 0x30, 8), (unique, 0x10001398, 8) CAST (register, 0xb8, 8), (register, 0x30, 8) INT_ZEXT (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10001388, 8), (unique, 0x10001388, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb8, 8) , (const, 0x3, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x405131, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4)]
[(stack, 0xfffffffffffffe78, 8) CAST (unique, 0x100013c8, 8), (unique, 0x100013c8, 8) INT_OR (unique, 0x10000869, 8) , (unique, 0x10000871, 8), (unique, 0x10000871, 8) INT_ZEXT (unique, 0xbc80, 4), (unique, 0x10000869, 8) INT_AND (unique, 0x100013c0, 8) , (const, 0xffffffff00000000, 8), (unique, 0x100013c0, 8) CAST (stack, 0xfffffffffffffe78, 8), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100013b8, 8), (unique, 0x100013b8, 8) INT_ADD (unique, 0x100013b0, 8) , (const, 0x24, 8), (unique, 0x100013b0, 8) CAST (register, 0xb8, 8)]
[ ---  CBRANCH (ram, 0x405131, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100013b8, 8), (unique, 0x100013b8, 8) INT_ADD (unique, 0x100013b0, 8) , (const, 0x24, 8), (unique, 0x100013b0, 8) CAST (register, 0xb8, 8)]
[(stack, 0xfffffffffffffe88, 8) CAST (unique, 0x100013e8, 8), (unique, 0x100013e8, 8) INT_OR (unique, 0x10000879, 8) , (unique, 0x10000881, 8), (unique, 0x10000881, 8) INT_ZEXT (unique, 0xbc80, 4), (unique, 0x10000879, 8) INT_AND (unique, 0x100013e0, 8) , (const, 0xffffffff00000000, 8), (unique, 0x100013e0, 8) CAST (stack, 0xfffffffffffffe88, 8), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100013d8, 8), (unique, 0x100013d8, 8) INT_ADD (unique, 0x100013d0, 8) , (const, 0x1c, 8), (unique, 0x100013d0, 8) CAST (register, 0xb8, 8)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100013f0, 8), (unique, 0x100013f0, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb8, 8) , (const, 0x4, 8) , (const, 0x8, 8)]
[ ---  BRANCH (ram, 0x404f40, 1)]
[ ---  CBRANCH (ram, 0x405270, 1) , (unique, 0xc900, 1), (unique, 0xc900, 1) INT_LESS (const, 0x1ffff, 4) , (register, 0x0, 4), (register, 0x0, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1bb80, 4), (unique, 0x1bb80, 4) INT_LEFT (unique, 0xbc80, 4) , (const, 0x18, 4), (unique, 0x1b780, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1ba00, 4), (unique, 0x1ba00, 4) INT_LEFT (unique, 0x1b980, 4) , (const, 0x8, 4), (unique, 0x1b980, 4) INT_AND (unique, 0xbc80, 4) , (const, 0xff00, 4), (unique, 0x1b780, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1b880, 4), (unique, 0x1b880, 4) INT_RIGHT (unique, 0x1b800, 4) , (const, 0x8, 4), (unique, 0x1b800, 4) INT_AND (unique, 0xbc80, 4) , (const, 0xff0000, 4), (unique, 0x1b780, 4) INT_RIGHT (unique, 0xbc80, 4) , (const, 0x18, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001408, 8) , (register, 0x30, 4), (unique, 0x10001408, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x5, 8) , (const, 0x8, 8), (register, 0x30, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1bb80, 4), (unique, 0x1bb80, 4) INT_LEFT (unique, 0xbc80, 4) , (const, 0x18, 4), (unique, 0x1b780, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1ba00, 4), (unique, 0x1ba00, 4) INT_LEFT (unique, 0x1b980, 4) , (const, 0x8, 4), (unique, 0x1b980, 4) INT_AND (unique, 0xbc80, 4) , (const, 0xff00, 4), (unique, 0x1b780, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1b880, 4), (unique, 0x1b880, 4) INT_RIGHT (unique, 0x1b800, 4) , (const, 0x8, 4), (unique, 0x1b800, 4) INT_AND (unique, 0xbc80, 4) , (const, 0xff0000, 4), (unique, 0x1b780, 4) INT_RIGHT (unique, 0xbc80, 4) , (const, 0x18, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100013f8, 8), (unique, 0x100013f8, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb8, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0x3400, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x6, 8) , (const, 0x8, 8), (unique, 0x3400, 8) CAST (unique, 0x10001428, 8), (unique, 0x10001428, 8) INT_ADD (unique, 0x10001420, 8) , (register, 0x30, 8), (unique, 0x10001420, 8) CAST (register, 0xb8, 8), (register, 0x30, 8) INT_ZEXT (register, 0x30, 4), (register, 0x30, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1bb80, 4), (unique, 0x1bb80, 4) INT_LEFT (unique, 0xbc80, 4) , (const, 0x18, 4), (unique, 0x1b780, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1ba00, 4), (unique, 0x1ba00, 4) INT_LEFT (unique, 0x1b980, 4) , (const, 0x8, 4), (unique, 0x1b980, 4) INT_AND (unique, 0xbc80, 4) , (const, 0xff00, 4), (unique, 0x1b780, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1b880, 4), (unique, 0x1b880, 4) INT_RIGHT (unique, 0x1b800, 4) , (const, 0x8, 4), (unique, 0x1b800, 4) INT_AND (unique, 0xbc80, 4) , (const, 0xff0000, 4), (unique, 0x1b780, 4) INT_RIGHT (unique, 0xbc80, 4) , (const, 0x18, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10001418, 8), (unique, 0x10001418, 8) INT_ADD (unique, 0x10001410, 8) , (const, 0xc, 8), (unique, 0x10001410, 8) CAST (register, 0xb8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000790, 8) , (register, 0x30, 8), (unique, 0x10000790, 8) PTRADD (register, 0x0, 8) , (const, 0x7, 8) , (const, 0x8, 8), (register, 0x30, 8) CAST (unique, 0x10001438, 8), (unique, 0x10001438, 8) INT_ADD (register, 0x38, 8) , (unique, 0x10001430, 8), (unique, 0x10001430, 8) CAST (register, 0xb8, 8), (register, 0x38, 8) INT_ZEXT (register, 0x38, 4), (register, 0x38, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1bb80, 4), (unique, 0x1bb80, 4) INT_LEFT (unique, 0xbc80, 4) , (const, 0x18, 4), (unique, 0x1b780, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1ba00, 4), (unique, 0x1ba00, 4) INT_LEFT (unique, 0x1b980, 4) , (const, 0x8, 4), (unique, 0x1b980, 4) INT_AND (unique, 0xbc80, 4) , (const, 0xff00, 4), (unique, 0x1b780, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1b880, 4), (unique, 0x1b880, 4) INT_RIGHT (unique, 0x1b800, 4) , (const, 0x8, 4), (unique, 0x1b800, 4) INT_AND (unique, 0xbc80, 4) , (const, 0xff0000, 4), (unique, 0x1b780, 4) INT_RIGHT (unique, 0xbc80, 4) , (const, 0x18, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10001400, 8), (unique, 0x10001400, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb8, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[(stack, 0xfffffffffffffe70, 8) CAST (unique, 0x10001458, 8), (unique, 0x10001458, 8) INT_OR (unique, 0x100007fa, 8) , (unique, 0x10000802, 8), (unique, 0x10000802, 8) INT_ZEXT (register, 0x30, 4), (unique, 0x100007fa, 8) INT_AND (unique, 0x10001450, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10001450, 8) CAST (stack, 0xfffffffffffffe70, 8), (register, 0x30, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1bb80, 4), (unique, 0x1bb80, 4) INT_LEFT (unique, 0xbc80, 4) , (const, 0x18, 4), (unique, 0x1b780, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1ba00, 4), (unique, 0x1ba00, 4) INT_LEFT (unique, 0x1b980, 4) , (const, 0x8, 4), (unique, 0x1b980, 4) INT_AND (unique, 0xbc80, 4) , (const, 0xff00, 4), (unique, 0x1b780, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1b880, 4), (unique, 0x1b880, 4) INT_RIGHT (unique, 0x1b800, 4) , (const, 0x8, 4), (unique, 0x1b800, 4) INT_AND (unique, 0xbc80, 4) , (const, 0xff0000, 4), (unique, 0x1b780, 4) INT_RIGHT (unique, 0xbc80, 4) , (const, 0x18, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10001448, 8), (unique, 0x10001448, 8) INT_ADD (unique, 0x10001440, 8) , (const, 0x14, 8), (unique, 0x10001440, 8) CAST (register, 0xb8, 8)]
[(ram, 0x4c4f18, 8) INDIRECT (ram, 0x4c4f18, 8) , (const, 0x1ca, 4), (ram, 0x4c4f18, 8) INDIRECT (ram, 0x4c4f18, 8) , (const, 0x3917, 4), (ram, 0x4c4f18, 8) INDIRECT (ram, 0x4c4f18, 8) , (const, 0x3916, 4), (ram, 0x4c4f18, 8) INDIRECT (ram, 0x4c4f18, 8) , (const, 0x182, 4)]
[(ram, 0x4c4fb8, 8) INDIRECT (ram, 0x4c4fb8, 8) , (const, 0x1ca, 4), (ram, 0x4c4fb8, 8) INDIRECT (ram, 0x4c4fb8, 8) , (const, 0x3917, 4), (ram, 0x4c4fb8, 8) INDIRECT (ram, 0x4c4fb8, 8) , (const, 0x3916, 4), (ram, 0x4c4fb8, 8) INDIRECT (ram, 0x4c4fb8, 8) , (const, 0x182, 4)]
[(ram, 0x4c7780, 4) INDIRECT (ram, 0x4c7780, 4) , (const, 0x1ca, 4), (ram, 0x4c7780, 4) INDIRECT (ram, 0x4c7780, 4) , (const, 0x3917, 4), (ram, 0x4c7780, 4) INDIRECT (ram, 0x4c7780, 4) , (const, 0x3916, 4), (ram, 0x4c7780, 4) INDIRECT (ram, 0x4c7780, 4) , (const, 0x182, 4)]
[(ram, 0x4c7784, 4) INDIRECT (ram, 0x4c7784, 4) , (const, 0x1ca, 4), (ram, 0x4c7784, 4) INDIRECT (ram, 0x4c7784, 4) , (const, 0x3917, 4), (ram, 0x4c7784, 4) INDIRECT (ram, 0x4c7784, 4) , (const, 0x3916, 4), (ram, 0x4c7784, 4) INDIRECT (ram, 0x4c7784, 4) , (const, 0x182, 4)]
[(ram, 0x4c7788, 8) INDIRECT (ram, 0x4c7788, 8) , (const, 0x1ca, 4), (ram, 0x4c7788, 8) INDIRECT (ram, 0x4c7788, 8) , (const, 0x3917, 4), (ram, 0x4c7788, 8) INDIRECT (ram, 0x4c7788, 8) , (const, 0x3916, 4), (ram, 0x4c7788, 8) INDIRECT (ram, 0x4c7788, 8) , (const, 0x182, 4)]
[(ram, 0x4c77d0, 4) INDIRECT (ram, 0x4c77d0, 4) , (const, 0x1ca, 4), (ram, 0x4c77d0, 4) INDIRECT (ram, 0x4c77d0, 4) , (const, 0x3917, 4), (ram, 0x4c77d0, 4) INDIRECT (ram, 0x4c77d0, 4) , (const, 0x3916, 4), (ram, 0x4c77d0, 4) INDIRECT (ram, 0x4c77d0, 4) , (const, 0x182, 4)]
[(ram, 0x4c77d4, 4) INDIRECT (ram, 0x4c77d4, 4) , (const, 0x1ca, 4), (ram, 0x4c77d4, 4) INDIRECT (ram, 0x4c77d4, 4) , (const, 0x3917, 4), (ram, 0x4c77d4, 4) INDIRECT (ram, 0x4c77d4, 4) , (const, 0x3916, 4), (ram, 0x4c77d4, 4) INDIRECT (ram, 0x4c77d4, 4) , (const, 0x182, 4)]
[(ram, 0x4c77d8, 8) INDIRECT (ram, 0x4c77d8, 8) , (const, 0x1ca, 4), (ram, 0x4c77d8, 8) INDIRECT (ram, 0x4c77d8, 8) , (const, 0x3917, 4), (ram, 0x4c77d8, 8) INDIRECT (ram, 0x4c77d8, 8) , (const, 0x3916, 4), (ram, 0x4c77d8, 8) INDIRECT (ram, 0x4c77d8, 8) , (const, 0x182, 4)]
[(ram, 0x4c77e0, 4) INDIRECT (ram, 0x4c77e0, 4) , (const, 0x1ca, 4), (ram, 0x4c77e0, 4) INDIRECT (ram, 0x4c77e0, 4) , (const, 0x3917, 4), (ram, 0x4c77e0, 4) INDIRECT (ram, 0x4c77e0, 4) , (const, 0x3916, 4), (ram, 0x4c77e0, 4) INDIRECT (ram, 0x4c77e0, 4) , (const, 0x182, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001460, 8) , (register, 0x30, 4), (unique, 0x10001460, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0xb, 8) , (const, 0x8, 8), (register, 0x30, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1bb80, 4), (unique, 0x1bb80, 4) INT_LEFT (unique, 0xbc80, 4) , (const, 0x18, 4), (unique, 0x1b780, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1ba00, 4), (unique, 0x1ba00, 4) INT_LEFT (unique, 0x1b980, 4) , (const, 0x8, 4), (unique, 0x1b980, 4) INT_AND (unique, 0xbc80, 4) , (const, 0xff00, 4), (unique, 0x1b780, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1b880, 4), (unique, 0x1b880, 4) INT_RIGHT (unique, 0x1b800, 4) , (const, 0x8, 4), (unique, 0x1b800, 4) INT_AND (unique, 0xbc80, 4) , (const, 0xff0000, 4), (unique, 0x1b780, 4) INT_RIGHT (unique, 0xbc80, 4) , (const, 0x18, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10001448, 8), (unique, 0x10001448, 8) INT_ADD (unique, 0x10001440, 8) , (const, 0x14, 8), (unique, 0x10001440, 8) CAST (register, 0xb8, 8)]
[ ---  CBRANCH (ram, 0x40511d, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (register, 0x30, 4) , (const, 0x3, 4), (register, 0x30, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1bb80, 4), (unique, 0x1bb80, 4) INT_LEFT (unique, 0xbc80, 4) , (const, 0x18, 4), (unique, 0x1b780, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1ba00, 4), (unique, 0x1ba00, 4) INT_LEFT (unique, 0x1b980, 4) , (const, 0x8, 4), (unique, 0x1b980, 4) INT_AND (unique, 0xbc80, 4) , (const, 0xff00, 4), (unique, 0x1b780, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1b880, 4), (unique, 0x1b880, 4) INT_RIGHT (unique, 0x1b800, 4) , (const, 0x8, 4), (unique, 0x1b800, 4) INT_AND (unique, 0xbc80, 4) , (const, 0xff0000, 4), (unique, 0x1b780, 4) INT_RIGHT (unique, 0xbc80, 4) , (const, 0x18, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10001448, 8), (unique, 0x10001448, 8) INT_ADD (unique, 0x10001440, 8) , (const, 0x14, 8), (unique, 0x10001440, 8) CAST (register, 0xb8, 8)]
[(stack, 0xfffffffffffffe70, 8) MULTIEQUAL (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (const, 0x0, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0xc, 8) , (const, 0x8, 8)]
[(ram, 0x4c4f18, 8) INDIRECT (ram, 0x4c4f18, 8) , (const, 0x18cf, 4), (ram, 0x4c4f18, 8) INDIRECT (ram, 0x4c4f18, 8) , (const, 0x18cc, 4), (ram, 0x4c4f18, 8) MULTIEQUAL (ram, 0x4c4f18, 8) , (ram, 0x4c4f18, 8)]
[(ram, 0x4c4fb8, 8) INDIRECT (ram, 0x4c4fb8, 8) , (const, 0x18cf, 4), (ram, 0x4c4fb8, 8) INDIRECT (ram, 0x4c4fb8, 8) , (const, 0x18cc, 4), (ram, 0x4c4fb8, 8) MULTIEQUAL (ram, 0x4c4fb8, 8) , (ram, 0x4c4fb8, 8)]
[(ram, 0x4c7780, 4) INDIRECT (ram, 0x4c7780, 4) , (const, 0x18cf, 4), (ram, 0x4c7780, 4) INDIRECT (ram, 0x4c7780, 4) , (const, 0x18cc, 4), (ram, 0x4c7780, 4) MULTIEQUAL (ram, 0x4c7780, 4) , (ram, 0x4c7780, 4)]
[(ram, 0x4c7784, 4) INDIRECT (ram, 0x4c7784, 4) , (const, 0x18cf, 4), (ram, 0x4c7784, 4) INDIRECT (ram, 0x4c7784, 4) , (const, 0x18cc, 4), (ram, 0x4c7784, 4) MULTIEQUAL (ram, 0x4c7784, 4) , (ram, 0x4c7784, 4)]
[(ram, 0x4c7788, 8) INDIRECT (ram, 0x4c7788, 8) , (const, 0x18cf, 4), (ram, 0x4c7788, 8) INDIRECT (ram, 0x4c7788, 8) , (const, 0x18cc, 4), (ram, 0x4c7788, 8) MULTIEQUAL (ram, 0x4c7788, 8) , (ram, 0x4c7788, 8)]
[(ram, 0x4c77d0, 4) INDIRECT (ram, 0x4c77d0, 4) , (const, 0x18cf, 4), (ram, 0x4c77d0, 4) INDIRECT (ram, 0x4c77d0, 4) , (const, 0x18cc, 4), (ram, 0x4c77d0, 4) MULTIEQUAL (ram, 0x4c77d0, 4) , (ram, 0x4c77d0, 4)]
[(ram, 0x4c77d4, 4) INDIRECT (ram, 0x4c77d4, 4) , (const, 0x18cf, 4), (ram, 0x4c77d4, 4) INDIRECT (ram, 0x4c77d4, 4) , (const, 0x18cc, 4), (ram, 0x4c77d4, 4) MULTIEQUAL (ram, 0x4c77d4, 4) , (ram, 0x4c77d4, 4)]
[(ram, 0x4c77d8, 8) INDIRECT (ram, 0x4c77d8, 8) , (const, 0x18cf, 4), (ram, 0x4c77d8, 8) INDIRECT (ram, 0x4c77d8, 8) , (const, 0x18cc, 4), (ram, 0x4c77d8, 8) MULTIEQUAL (ram, 0x4c77d8, 8) , (ram, 0x4c77d8, 8)]
[(ram, 0x4c77e0, 4) INDIRECT (ram, 0x4c77e0, 4) , (const, 0x18cf, 4), (ram, 0x4c77e0, 4) INDIRECT (ram, 0x4c77e0, 4) , (const, 0x18cc, 4), (ram, 0x4c77e0, 4) MULTIEQUAL (ram, 0x4c77e0, 4) , (ram, 0x4c77e0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001468, 8) , (register, 0x10, 4), (unique, 0x10001468, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0xd, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x405270, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) MULTIEQUAL (unique, 0x1b780, 4) , (register, 0x0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001478, 8) , (register, 0x10, 4), (unique, 0x10001478, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0xd, 8) , (const, 0x8, 8)]
[(ram, 0x4c4f18, 8) INDIRECT (ram, 0x4c4f18, 8) , (const, 0x1f3, 4), (ram, 0x4c4f18, 8) INDIRECT (ram, 0x4c4f18, 8) , (const, 0x1dc, 4)]
[(ram, 0x4c4fb8, 8) INDIRECT (ram, 0x4c4fb8, 8) , (const, 0x1f3, 4), (ram, 0x4c4fb8, 8) INDIRECT (ram, 0x4c4fb8, 8) , (const, 0x1dc, 4)]
[(ram, 0x4c7780, 4) INDIRECT (ram, 0x4c7780, 4) , (const, 0x1f3, 4), (ram, 0x4c7780, 4) INDIRECT (ram, 0x4c7780, 4) , (const, 0x1dc, 4)]
[(ram, 0x4c7784, 4) INDIRECT (ram, 0x4c7784, 4) , (const, 0x1f3, 4), (ram, 0x4c7784, 4) INDIRECT (ram, 0x4c7784, 4) , (const, 0x1dc, 4)]
[(ram, 0x4c7788, 8) INDIRECT (ram, 0x4c7788, 8) , (const, 0x1f3, 4), (ram, 0x4c7788, 8) INDIRECT (ram, 0x4c7788, 8) , (const, 0x1dc, 4)]
[(ram, 0x4c77d0, 4) INDIRECT (ram, 0x4c77d0, 4) , (const, 0x1f3, 4), (ram, 0x4c77d0, 4) INDIRECT (ram, 0x4c77d0, 4) , (const, 0x1dc, 4)]
[(ram, 0x4c77d4, 4) INDIRECT (ram, 0x4c77d4, 4) , (const, 0x1f3, 4), (ram, 0x4c77d4, 4) INDIRECT (ram, 0x4c77d4, 4) , (const, 0x1dc, 4)]
[(ram, 0x4c77d8, 8) INDIRECT (ram, 0x4c77d8, 8) , (const, 0x1f3, 4), (ram, 0x4c77d8, 8) INDIRECT (ram, 0x4c77d8, 8) , (const, 0x1dc, 4)]
[(ram, 0x4c77e0, 4) INDIRECT (ram, 0x4c77e0, 4) , (const, 0x1f3, 4), (ram, 0x4c77e0, 4) INDIRECT (ram, 0x4c77e0, 4) , (const, 0x1dc, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0x10001490, 8), (unique, 0x10001490, 8) CAST (unique, 0x3400, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0xc, 8) , (const, 0x8, 8), (unique, 0x3400, 8) CAST (unique, 0x10001488, 8), (unique, 0x10001488, 8) INT_ADD (unique, 0x10001480, 8) , (register, 0x30, 8), (unique, 0x10001480, 8) CAST (register, 0xb8, 8), (register, 0x30, 8) INT_ZEXT (register, 0x30, 4), (register, 0x30, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1bb80, 4), (unique, 0x1bb80, 4) INT_LEFT (unique, 0xbc80, 4) , (const, 0x18, 4), (unique, 0x1b780, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1ba00, 4), (unique, 0x1ba00, 4) INT_LEFT (unique, 0x1b980, 4) , (const, 0x8, 4), (unique, 0x1b980, 4) INT_AND (unique, 0xbc80, 4) , (const, 0xff00, 4), (unique, 0x1b780, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1b880, 4), (unique, 0x1b880, 4) INT_RIGHT (unique, 0x1b800, 4) , (const, 0x8, 4), (unique, 0x1b800, 4) INT_AND (unique, 0xbc80, 4) , (const, 0xff0000, 4), (unique, 0x1b780, 4) INT_RIGHT (unique, 0xbc80, 4) , (const, 0x18, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10001470, 8), (unique, 0x10001470, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb8, 8) , (const, 0x3, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x405131, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x1b780, 4) , (const, 0x0, 4)]
[(stack, 0xfffffffffffffe78, 8) CAST (unique, 0x100014b0, 8), (unique, 0x100014b0, 8) INT_OR (unique, 0x1000080b, 8) , (unique, 0x10000813, 8), (unique, 0x10000813, 8) INT_ZEXT (register, 0x0, 4), (unique, 0x1000080b, 8) INT_AND (unique, 0x100014a8, 8) , (const, 0xffffffff00000000, 8), (unique, 0x100014a8, 8) CAST (stack, 0xfffffffffffffe78, 8), (register, 0x0, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1bb80, 4), (unique, 0x1bb80, 4) INT_LEFT (unique, 0xbc80, 4) , (const, 0x18, 4), (unique, 0x1b780, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1ba00, 4), (unique, 0x1ba00, 4) INT_LEFT (unique, 0x1b980, 4) , (const, 0x8, 4), (unique, 0x1b980, 4) INT_AND (unique, 0xbc80, 4) , (const, 0xff00, 4), (unique, 0x1b780, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1b880, 4), (unique, 0x1b880, 4) INT_RIGHT (unique, 0x1b800, 4) , (const, 0x8, 4), (unique, 0x1b800, 4) INT_AND (unique, 0xbc80, 4) , (const, 0xff0000, 4), (unique, 0x1b780, 4) INT_RIGHT (unique, 0xbc80, 4) , (const, 0x18, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100014a0, 8), (unique, 0x100014a0, 8) INT_ADD (unique, 0x10001498, 8) , (const, 0x24, 8), (unique, 0x10001498, 8) CAST (register, 0xb8, 8)]
[ ---  CBRANCH (ram, 0x405131, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1bb80, 4), (unique, 0x1bb80, 4) INT_LEFT (unique, 0xbc80, 4) , (const, 0x18, 4), (unique, 0x1b780, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1ba00, 4), (unique, 0x1ba00, 4) INT_LEFT (unique, 0x1b980, 4) , (const, 0x8, 4), (unique, 0x1b980, 4) INT_AND (unique, 0xbc80, 4) , (const, 0xff00, 4), (unique, 0x1b780, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1b880, 4), (unique, 0x1b880, 4) INT_RIGHT (unique, 0x1b800, 4) , (const, 0x8, 4), (unique, 0x1b800, 4) INT_AND (unique, 0xbc80, 4) , (const, 0xff0000, 4), (unique, 0x1b780, 4) INT_RIGHT (unique, 0xbc80, 4) , (const, 0x18, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100014a0, 8), (unique, 0x100014a0, 8) INT_ADD (unique, 0x10001498, 8) , (const, 0x24, 8), (unique, 0x10001498, 8) CAST (register, 0xb8, 8)]
[(stack, 0xfffffffffffffe88, 8) CAST (unique, 0x100014d0, 8), (unique, 0x100014d0, 8) INT_OR (unique, 0x1000081c, 8) , (unique, 0x10000824, 8), (unique, 0x10000824, 8) INT_ZEXT (register, 0x0, 4), (unique, 0x1000081c, 8) INT_AND (unique, 0x100014c8, 8) , (const, 0xffffffff00000000, 8), (unique, 0x100014c8, 8) CAST (stack, 0xfffffffffffffe88, 8), (register, 0x0, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1bb80, 4), (unique, 0x1bb80, 4) INT_LEFT (unique, 0xbc80, 4) , (const, 0x18, 4), (unique, 0x1b780, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1ba00, 4), (unique, 0x1ba00, 4) INT_LEFT (unique, 0x1b980, 4) , (const, 0x8, 4), (unique, 0x1b980, 4) INT_AND (unique, 0xbc80, 4) , (const, 0xff00, 4), (unique, 0x1b780, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1b880, 4), (unique, 0x1b880, 4) INT_RIGHT (unique, 0x1b800, 4) , (const, 0x8, 4), (unique, 0x1b800, 4) INT_AND (unique, 0xbc80, 4) , (const, 0xff0000, 4), (unique, 0x1b780, 4) INT_RIGHT (unique, 0xbc80, 4) , (const, 0x18, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100014c0, 8), (unique, 0x100014c0, 8) INT_ADD (unique, 0x100014b8, 8) , (const, 0x1c, 8), (unique, 0x100014b8, 8) CAST (register, 0xb8, 8)]
[(register, 0x0, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1bb80, 4), (unique, 0x1bb80, 4) INT_LEFT (unique, 0xbc80, 4) , (const, 0x18, 4), (unique, 0x1b780, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1ba00, 4), (unique, 0x1ba00, 4) INT_LEFT (unique, 0x1b980, 4) , (const, 0x8, 4), (unique, 0x1b980, 4) INT_AND (unique, 0xbc80, 4) , (const, 0xff00, 4), (unique, 0x1b780, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1b880, 4), (unique, 0x1b880, 4) INT_RIGHT (unique, 0x1b800, 4) , (const, 0x8, 4), (unique, 0x1b800, 4) INT_AND (unique, 0xbc80, 4) , (const, 0xff0000, 4), (unique, 0x1b780, 4) INT_RIGHT (unique, 0xbc80, 4) , (const, 0x18, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100014d8, 8), (unique, 0x100014d8, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb8, 8) , (const, 0x4, 8) , (const, 0x8, 8)]
[(unique, 0x3400, 8) INT_ADD (unique, 0x100014e8, 8) , (register, 0x0, 8), (unique, 0x100014e8, 8) CAST (register, 0xb8, 8), (register, 0x0, 8) INT_ZEXT (unique, 0x10000758, 4), (unique, 0x10000758, 4) MULTIEQUAL (register, 0x0, 4) , (unique, 0xbc80, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x24a, 4)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x24a, 4)]
[(ram, 0x4c4f18, 8) INDIRECT (ram, 0x4c4f18, 8) , (const, 0x24a, 4), (ram, 0x4c4f18, 8) MULTIEQUAL (ram, 0x4c4f18, 8) , (ram, 0x4c4f18, 8)]
[(ram, 0x4c4fb8, 8) INDIRECT (ram, 0x4c4fb8, 8) , (const, 0x24a, 4), (ram, 0x4c4fb8, 8) MULTIEQUAL (ram, 0x4c4fb8, 8) , (ram, 0x4c4fb8, 8)]
[(ram, 0x4c7780, 4) INDIRECT (ram, 0x4c7780, 4) , (const, 0x24a, 4), (ram, 0x4c7780, 4) MULTIEQUAL (ram, 0x4c7780, 4) , (ram, 0x4c7780, 4)]
[(ram, 0x4c7784, 4) INDIRECT (ram, 0x4c7784, 4) , (const, 0x24a, 4), (ram, 0x4c7784, 4) MULTIEQUAL (ram, 0x4c7784, 4) , (ram, 0x4c7784, 4)]
[(ram, 0x4c7788, 8) INDIRECT (ram, 0x4c7788, 8) , (const, 0x24a, 4), (ram, 0x4c7788, 8) MULTIEQUAL (ram, 0x4c7788, 8) , (ram, 0x4c7788, 8)]
[(ram, 0x4c77d0, 4) INDIRECT (ram, 0x4c77d0, 4) , (const, 0x24a, 4), (ram, 0x4c77d0, 4) MULTIEQUAL (ram, 0x4c77d0, 4) , (ram, 0x4c77d0, 4)]
[(ram, 0x4c77d4, 4) INDIRECT (ram, 0x4c77d4, 4) , (const, 0x24a, 4), (ram, 0x4c77d4, 4) MULTIEQUAL (ram, 0x4c77d4, 4) , (ram, 0x4c77d4, 4)]
[(ram, 0x4c77d8, 8) INDIRECT (ram, 0x4c77d8, 8) , (const, 0x24a, 4), (ram, 0x4c77d8, 8) MULTIEQUAL (ram, 0x4c77d8, 8) , (ram, 0x4c77d8, 8)]
[(ram, 0x4c77e0, 4) INDIRECT (ram, 0x4c77e0, 4) , (const, 0x24a, 4), (ram, 0x4c77e0, 4) MULTIEQUAL (ram, 0x4c77e0, 4) , (ram, 0x4c77e0, 4)]
[(stack, 0xfffffffffffffd28, 8) INDIRECT (stack, 0xfffffffffffffd28, 8) , (const, 0x24a, 4)]
[(stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x24a, 4)]
[(stack, 0xfffffffffffffe30, 4) INDIRECT (stack, 0xfffffffffffffe30, 4) , (const, 0x24a, 4)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x24a, 4), (stack, 0xfffffffffffffe50, 8) COPY (const, 0x404f52, 8)]
[(stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x24a, 4)]
[(stack, 0xfffffffffffffe6c, 4) INDIRECT (stack, 0xfffffffffffffe6c, 4) , (const, 0x24a, 4)]
[(stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0x24a, 4), (stack, 0xfffffffffffffe70, 8) MULTIEQUAL (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8)]
[(stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0x24a, 4), (stack, 0xfffffffffffffe78, 8) MULTIEQUAL (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8)]
[(stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x24a, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x24a, 4), (stack, 0xfffffffffffffe88, 8) MULTIEQUAL (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x24a, 4), (stack, 0xfffffffffffffe90, 8) MULTIEQUAL (unique, 0x3400, 8) , (unique, 0x3400, 8)]
[(stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x24a, 4)]
[(stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x24a, 4)]
[(stack, 0xfffffffffffffea4, 4) INDIRECT (stack, 0xfffffffffffffea4, 4) , (const, 0x24a, 4)]
[(stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x24a, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x24a, 4)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x24a, 4)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x24a, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x24a, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x24a, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x24a, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x24a, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x24a, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x24a, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x24a, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x24a, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x24a, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x24a, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x24a, 4)]
[ ---  CBRANCH (ram, 0x405270, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x100014f0, 8), (unique, 0x100014f0, 8) CALL (ram, 0x427e50, 8) , (register, 0x38, 8) , (const, 0x8, 8), (register, 0x38, 8) INT_AND (unique, 0x100014e0, 8) , (const, 0xffffffff, 8), (unique, 0x100014e0, 8) CAST (stack, 0xfffffffffffffe88, 8), (stack, 0xfffffffffffffe88, 8) MULTIEQUAL (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8)]
[(register, 0x90, 8) INT_ZEXT (unique, 0x3100, 4), (unique, 0x3100, 4) INT_SUB (stack, 0xfffffffffffffe88, 4) , (const, 0x1, 4), (stack, 0xfffffffffffffe88, 4) SUBPIECE (stack, 0xfffffffffffffe88, 8) , (const, 0x0, 8)]
[(unique, 0x10000f24, 8) COPY (register, 0x10, 8), (register, 0x10, 8) COPY (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x404fab, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xfffffffffffffe88, 4) , (const, 0x0, 4), (stack, 0xfffffffffffffe88, 4) SUBPIECE (stack, 0xfffffffffffffe88, 8) , (const, 0x0, 8)]
[(stack, 0xfffffffffffffea0, 4) MULTIEQUAL (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4)]
[(stack, 0xfffffffffffffe80, 8) MULTIEQUAL (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8)]
[(ram, 0x4c77e0, 4) MULTIEQUAL (ram, 0x4c77e0, 4) , (ram, 0x4c77e0, 4)]
[(ram, 0x4c77d8, 8) MULTIEQUAL (ram, 0x4c77d8, 8) , (ram, 0x4c77d8, 8)]
[(ram, 0x4c77d4, 4) MULTIEQUAL (ram, 0x4c77d4, 4) , (ram, 0x4c77d4, 4)]
[(ram, 0x4c77d0, 4) MULTIEQUAL (ram, 0x4c77d0, 4) , (ram, 0x4c77d0, 4)]
[(ram, 0x4c7788, 8) MULTIEQUAL (ram, 0x4c7788, 8) , (ram, 0x4c7788, 8)]
[(ram, 0x4c7784, 4) MULTIEQUAL (ram, 0x4c7784, 4) , (ram, 0x4c7784, 4)]
[(ram, 0x4c7780, 4) MULTIEQUAL (ram, 0x4c7780, 4) , (ram, 0x4c7780, 4)]
[(ram, 0x4c4fb8, 8) MULTIEQUAL (ram, 0x4c4fb8, 8) , (ram, 0x4c4fb8, 8)]
[(ram, 0x4c4f18, 8) MULTIEQUAL (ram, 0x4c4f18, 8) , (ram, 0x4c4f18, 8)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) CAST (unique, 0x100014f8, 8), (unique, 0x100014f8, 8) INT_ADD (unique, 0x3880, 8) , (unique, 0x3900, 8), (unique, 0x3900, 8) INT_MULT (register, 0x10, 8) , (const, 0x8, 8), (unique, 0x3880, 8) INT_ADD (unique, 0x3400, 8) , (const, 0x4, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0x10000f24, 8) , (unique, 0x10000f2c, 8)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3b80, 8), (unique, 0x3b80, 8) CAST (unique, 0x10001500, 8), (unique, 0x10001500, 8) INT_ADD (unique, 0x3400, 8) , (unique, 0x3a80, 8), (unique, 0x3a80, 8) INT_MULT (register, 0x10, 8) , (const, 0x8, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0x10000f24, 8) , (unique, 0x10000f2c, 8)]
[ ---  CBRANCH (ram, 0x404fcb, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xa0, 4) , (const, 0x950412de, 4)]
[(register, 0x30, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1bb80, 4), (unique, 0x1bb80, 4) INT_LEFT (unique, 0xbc80, 4) , (const, 0x18, 4), (unique, 0x1b780, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1ba00, 4), (unique, 0x1ba00, 4) INT_LEFT (unique, 0x1b980, 4) , (const, 0x8, 4), (unique, 0x1b980, 4) INT_AND (unique, 0xbc80, 4) , (const, 0xff00, 4), (unique, 0x1b780, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1b880, 4), (unique, 0x1b880, 4) INT_RIGHT (unique, 0x1b800, 4) , (const, 0x8, 4), (unique, 0x1b800, 4) INT_AND (unique, 0xbc80, 4) , (const, 0xff0000, 4), (unique, 0x1b780, 4) INT_RIGHT (unique, 0xbc80, 4) , (const, 0x18, 4)]
[(register, 0x38, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1bb80, 4), (unique, 0x1bb80, 4) INT_LEFT (unique, 0xbc80, 4) , (const, 0x18, 4), (unique, 0x1b780, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1ba00, 4), (unique, 0x1ba00, 4) INT_LEFT (unique, 0x1b980, 4) , (const, 0x8, 4), (unique, 0x1b980, 4) INT_AND (unique, 0xbc80, 4) , (const, 0xff00, 4), (unique, 0x1b780, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1b880, 4), (unique, 0x1b880, 4) INT_RIGHT (unique, 0x1b800, 4) , (const, 0x8, 4), (unique, 0x1b800, 4) INT_AND (unique, 0xbc80, 4) , (const, 0xff0000, 4), (unique, 0x1b780, 4) INT_RIGHT (unique, 0xbc80, 4) , (const, 0x18, 4)]
[(register, 0x0, 8) CAST (unique, 0x10001510, 8), (unique, 0x10001510, 8) INT_ADD (register, 0x0, 8) , (unique, 0x10001508, 8), (unique, 0x10001508, 8) CAST (register, 0xb8, 8), (register, 0x0, 8) INT_ZEXT (unique, 0x1000073f, 4), (unique, 0x1000073f, 4) MULTIEQUAL (unique, 0xbc80, 4) , (register, 0x30, 4)]
[(unique, 0x10001044, 8) COPY (register, 0x0, 8)]
[(unique, 0x100010c4, 8) COPY (register, 0xb8, 8)]
[ ---  CBRANCH (ram, 0x405417, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x38, 4) , (const, 0x0, 4), (register, 0x38, 4) MULTIEQUAL (unique, 0xbc80, 4) , (register, 0x38, 4)]
[(unique, 0x1000104c, 8) COPY (register, 0x0, 8)]
[(unique, 0x100010cc, 8) COPY (register, 0xb8, 8)]
[ ---  CBRANCH (ram, 0x405417, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (register, 0x0, 8) , (register, 0x30, 8) , (const, 0x1, 8), (register, 0x30, 8) INT_ZEXT (unique, 0x3100, 4), (unique, 0x3100, 4) INT_SUB (register, 0x38, 4) , (const, 0x1, 4)]
[ ---  CBRANCH (ram, 0x404f80, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x50, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x405430, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x49, 1)]
[(register, 0x30, 8) COPY (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x404f97, 1)]
[(register, 0x30, 8) COPY (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x404f97, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[(register, 0x30, 8) CAST (unique, 0x10001518, 8), (unique, 0x10001518, 8) PTRSUB (const, 0x0, 8) , (const, 0x49a470, 8)]
[(register, 0x30, 8) COPY (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x404f97, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x52, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x404f97, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x49, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x2, 8) , (const, 0x1, 8)]
[(stack, 0xfffffffffffffe80, 8) CAST (unique, 0x10001528, 8), (unique, 0x10001528, 8) INT_OR (unique, 0x10000831, 8) , (unique, 0x10000839, 8), (unique, 0x10000839, 8) INT_ZEXT (register, 0x80, 1), (unique, 0x10000831, 8) INT_AND (unique, 0x10001520, 8) , (const, 0xffffffffffffff00, 8), (unique, 0x10001520, 8) CAST (stack, 0xfffffffffffffe80, 8), (register, 0x80, 1) BOOL_OR (register, 0x206, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x69, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x64, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x3, 8) , (const, 0x1, 8)]
[(stack, 0xfffffffffffffea0, 4) INT_OR (unique, 0x10000841, 4) , (unique, 0x10000845, 4), (unique, 0x10000845, 4) INT_ZEXT (register, 0x98, 1), (unique, 0x10000841, 4) INT_AND (stack, 0xfffffffffffffea0, 4) , (const, 0xffffff00, 4), (register, 0x98, 1) BOOL_OR (register, 0x206, 1) , (register, 0x80, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x6f, 1), (register, 0x80, 1) BOOL_OR (register, 0x206, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x69, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x64, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x3, 8) , (const, 0x1, 8)]
[(register, 0x98, 1) BOOL_OR (register, 0x206, 1) , (register, 0x98, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x75, 1), (register, 0x98, 1) BOOL_OR (register, 0x206, 1) , (register, 0x80, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x6f, 1), (register, 0x80, 1) BOOL_OR (register, 0x206, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x69, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x64, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x3, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x405047, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x80, 1) , (const, 0x58, 1), (register, 0x80, 1) INT_AND (unique, 0xbb00, 1) , (const, 0xdf, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x3, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x404f97, 1) , (unique, 0x10000849, 1), (unique, 0x10000849, 1) BOOL_OR (register, 0x206, 1) , (unique, 0x1000084b, 1), (unique, 0x1000084b, 1) BOOL_OR (register, 0x206, 1) , (unique, 0x1000084d, 1), (unique, 0x1000084d, 1) BOOL_OR (register, 0x206, 1) , (register, 0x206, 1)]
[ ---  CBRANCH (ram, 0x405890, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x38, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x4, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x4059c0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x5, 8) , (const, 0x1, 8)]
[(register, 0x30, 8) COPY (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x404f97, 1)]
[ ---  CBRANCH (ram, 0x405f3b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x64, 1)]
[(register, 0x30, 8) COPY (const, 0x49ec40, 8)]
[ ---  BRANCH (ram, 0x404f97, 1)]
[ ---  CBRANCH (ram, 0x405f53, 1) , (register, 0x80, 1)]
[(register, 0x30, 8) COPY (const, 0x49a14d, 8)]
[ ---  BRANCH (ram, 0x404f97, 1)]
[ ---  CBRANCH (ram, 0x405f47, 1) , (register, 0x98, 1)]
[(register, 0x30, 8) COPY (const, 0x49e28c, 8)]
[ ---  BRANCH (ram, 0x404f97, 1)]
[ ---  CBRANCH (ram, 0x405f6b, 1) , (register, 0x98, 1)]
[(register, 0x30, 8) CAST (unique, 0x10001530, 8), (unique, 0x10001530, 8) PTRSUB (const, 0x0, 8) , (const, 0x4b0b12, 8)]
[ ---  BRANCH (ram, 0x404f97, 1)]
[ ---  CBRANCH (ram, 0x405f5f, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x78, 1)]
[(register, 0x30, 8) COPY (const, 0x49dd1c, 8)]
[ ---  BRANCH (ram, 0x404f97, 1)]
[(unique, 0x10000f64, 8) COPY (register, 0x38, 8)]
[ ---  CBRANCH (ram, 0x4011bf, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x58, 1)]
[(register, 0x30, 8) COPY (const, 0x4b0547, 8)]
[ ---  BRANCH (ram, 0x404f97, 1)]
[ ---  CBRANCH (ram, 0x4058e3, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x31, 1)]
[(register, 0x30, 8) COPY (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x404f97, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x36, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x5, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x404f97, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x6, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x405ff6, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x64, 1)]
[(register, 0x30, 8) COPY (const, 0x49ec40, 8)]
[ ---  BRANCH (ram, 0x404f97, 1)]
[ ---  CBRANCH (ram, 0x405fea, 1) , (register, 0x80, 1)]
[(register, 0x30, 8) COPY (const, 0x49a14d, 8)]
[ ---  BRANCH (ram, 0x404f97, 1)]
[ ---  CBRANCH (ram, 0x405fde, 1) , (register, 0x98, 1)]
[(register, 0x30, 8) COPY (const, 0x49e28c, 8)]
[ ---  BRANCH (ram, 0x404f97, 1)]
[ ---  CBRANCH (ram, 0x406002, 1) , (register, 0x98, 1)]
[(register, 0x30, 8) CAST (unique, 0x10001538, 8), (unique, 0x10001538, 8) PTRSUB (const, 0x0, 8) , (const, 0x4b0b12, 8)]
[ ---  BRANCH (ram, 0x404f97, 1)]
[ ---  CBRANCH (ram, 0x405fd2, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x78, 1)]
[(register, 0x30, 8) COPY (const, 0x49dd1c, 8)]
[ ---  BRANCH (ram, 0x404f97, 1)]
[ ---  CBRANCH (ram, 0x4064e8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x58, 1)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x1821, 4)]
[(stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x1821, 4)]
[(stack, 0xfffffffffffffe6c, 4) INDIRECT (stack, 0xfffffffffffffe6c, 4) , (const, 0x1821, 4)]
[(stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0x1821, 4)]
[(stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0x1821, 4)]
[(stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x1821, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x1821, 4)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x1821, 4)]
[(stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x1821, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1821, 4)]
[ ---  CALL (ram, 0x4011bf, 8)]
[(ram, 0x4c4f18, 8) COPY (ram, 0x4c4f18, 8), (ram, 0x4c4f18, 8) INDIRECT (ram, 0x4c4f18, 8) , (const, 0x1821, 4)]
[(ram, 0x4c4fb8, 8) COPY (ram, 0x4c4fb8, 8), (ram, 0x4c4fb8, 8) INDIRECT (ram, 0x4c4fb8, 8) , (const, 0x1821, 4)]
[(ram, 0x4c7780, 4) COPY (ram, 0x4c7780, 4), (ram, 0x4c7780, 4) INDIRECT (ram, 0x4c7780, 4) , (const, 0x1821, 4)]
[(ram, 0x4c7784, 4) COPY (ram, 0x4c7784, 4), (ram, 0x4c7784, 4) INDIRECT (ram, 0x4c7784, 4) , (const, 0x1821, 4)]
[(ram, 0x4c7788, 8) COPY (ram, 0x4c7788, 8), (ram, 0x4c7788, 8) INDIRECT (ram, 0x4c7788, 8) , (const, 0x1821, 4)]
[(ram, 0x4c77d0, 4) COPY (ram, 0x4c77d0, 4), (ram, 0x4c77d0, 4) INDIRECT (ram, 0x4c77d0, 4) , (const, 0x1821, 4)]
[(ram, 0x4c77d4, 4) COPY (ram, 0x4c77d4, 4), (ram, 0x4c77d4, 4) INDIRECT (ram, 0x4c77d4, 4) , (const, 0x1821, 4)]
[(ram, 0x4c77d8, 8) COPY (ram, 0x4c77d8, 8), (ram, 0x4c77d8, 8) INDIRECT (ram, 0x4c77d8, 8) , (const, 0x1821, 4)]
[(ram, 0x4c77e0, 4) COPY (ram, 0x4c77e0, 4), (ram, 0x4c77e0, 4) INDIRECT (ram, 0x4c77e0, 4) , (const, 0x1821, 4)]
[ ---  RETURN (const, 0x1, 4)]
[(register, 0x30, 8) COPY (const, 0x4b0547, 8)]
[ ---  BRANCH (ram, 0x404f97, 1)]
[ ---  CBRANCH (ram, 0x405637, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x33, 1)]
[ ---  CBRANCH (ram, 0x4056a0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x36, 1)]
[ ---  CBRANCH (ram, 0x405760, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x4c, 1)]
[ ---  CBRANCH (ram, 0x405818, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x46, 1)]
[ ---  CBRANCH (ram, 0x405948, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x4d, 1)]
[(register, 0x30, 8) COPY (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x404f97, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x50, 1)]
[ ---  CBRANCH (ram, 0x404f97, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x54, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x5, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x404f97, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x52, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x6, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x405f8a, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x7, 8) , (const, 0x1, 8)]
[(register, 0x30, 8) COPY (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x404f97, 1)]
[ ---  CBRANCH (ram, 0x406032, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x64, 1)]
[(register, 0x30, 8) COPY (const, 0x49e341, 8)]
[ ---  BRANCH (ram, 0x404f97, 1)]
[ ---  CBRANCH (ram, 0x40607a, 1) , (register, 0x80, 1)]
[(register, 0x30, 8) CAST (unique, 0x10001540, 8), (unique, 0x10001540, 8) PTRSUB (const, 0x0, 8) , (const, 0x49a467, 8)]
[ ---  BRANCH (ram, 0x404f97, 1)]
[ ---  CBRANCH (ram, 0x40606e, 1) , (register, 0x98, 1)]
[(register, 0x30, 8) CAST (unique, 0x10001548, 8), (unique, 0x10001548, 8) PTRSUB (const, 0x0, 8) , (const, 0x49a464, 8)]
[ ---  BRANCH (ram, 0x404f97, 1)]
[ ---  CBRANCH (ram, 0x406092, 1) , (register, 0x98, 1)]
[(register, 0x30, 8) CAST (unique, 0x10001550, 8), (unique, 0x10001550, 8) PTRSUB (const, 0x0, 8) , (const, 0x49a461, 8)]
[ ---  BRANCH (ram, 0x404f97, 1)]
[ ---  CBRANCH (ram, 0x406086, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x78, 1)]
[(register, 0x30, 8) CAST (unique, 0x10001558, 8), (unique, 0x10001558, 8) PTRSUB (const, 0x0, 8) , (const, 0x49a46d, 8)]
[ ---  BRANCH (ram, 0x404f97, 1)]
[ ---  CBRANCH (ram, 0x4064f2, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x58, 1)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x1797, 4)]
[(stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x1797, 4)]
[(stack, 0xfffffffffffffe6c, 4) INDIRECT (stack, 0xfffffffffffffe6c, 4) , (const, 0x1797, 4)]
[(stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0x1797, 4)]
[(stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0x1797, 4)]
[(stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x1797, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x1797, 4)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x1797, 4)]
[(stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x1797, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1797, 4)]
[ ---  CALL (ram, 0x4011bf, 8)]
[(ram, 0x4c4f18, 8) COPY (ram, 0x4c4f18, 8), (ram, 0x4c4f18, 8) INDIRECT (ram, 0x4c4f18, 8) , (const, 0x1797, 4)]
[(ram, 0x4c4fb8, 8) COPY (ram, 0x4c4fb8, 8), (ram, 0x4c4fb8, 8) INDIRECT (ram, 0x4c4fb8, 8) , (const, 0x1797, 4)]
[(ram, 0x4c7780, 4) COPY (ram, 0x4c7780, 4), (ram, 0x4c7780, 4) INDIRECT (ram, 0x4c7780, 4) , (const, 0x1797, 4)]
[(ram, 0x4c7784, 4) COPY (ram, 0x4c7784, 4), (ram, 0x4c7784, 4) INDIRECT (ram, 0x4c7784, 4) , (const, 0x1797, 4)]
[(ram, 0x4c7788, 8) COPY (ram, 0x4c7788, 8), (ram, 0x4c7788, 8) INDIRECT (ram, 0x4c7788, 8) , (const, 0x1797, 4)]
[(ram, 0x4c77d0, 4) COPY (ram, 0x4c77d0, 4), (ram, 0x4c77d0, 4) INDIRECT (ram, 0x4c77d0, 4) , (const, 0x1797, 4)]
[(ram, 0x4c77d4, 4) COPY (ram, 0x4c77d4, 4), (ram, 0x4c77d4, 4) INDIRECT (ram, 0x4c77d4, 4) , (const, 0x1797, 4)]
[(ram, 0x4c77d8, 8) COPY (ram, 0x4c77d8, 8), (ram, 0x4c77d8, 8) INDIRECT (ram, 0x4c77d8, 8) , (const, 0x1797, 4)]
[(ram, 0x4c77e0, 4) COPY (ram, 0x4c77e0, 4), (ram, 0x4c77e0, 4) INDIRECT (ram, 0x4c77e0, 4) , (const, 0x1797, 4)]
[ ---  RETURN (const, 0x1, 4)]
[(register, 0x30, 8) CAST (unique, 0x10001560, 8), (unique, 0x10001560, 8) PTRSUB (const, 0x0, 8) , (const, 0x49a46a, 8)]
[ ---  BRANCH (ram, 0x404f97, 1)]
[(register, 0x30, 8) COPY (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x404f97, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x41, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x5, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x404f97, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x58, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x6, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x405f83, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x7, 8) , (const, 0x1, 8)]
[(register, 0x30, 8) COPY (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x404f97, 1)]
[ ---  CBRANCH (ram, 0x40604a, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x64, 1)]
[(register, 0x30, 8) COPY (const, 0x49e341, 8)]
[ ---  BRANCH (ram, 0x404f97, 1)]
[ ---  CBRANCH (ram, 0x40603e, 1) , (register, 0x80, 1)]
[(register, 0x30, 8) CAST (unique, 0x10001568, 8), (unique, 0x10001568, 8) PTRSUB (const, 0x0, 8) , (const, 0x49a467, 8)]
[ ---  BRANCH (ram, 0x404f97, 1)]
[ ---  CBRANCH (ram, 0x4060c2, 1) , (register, 0x98, 1)]
[(register, 0x30, 8) CAST (unique, 0x10001570, 8), (unique, 0x10001570, 8) PTRSUB (const, 0x0, 8) , (const, 0x49a464, 8)]
[ ---  BRANCH (ram, 0x404f97, 1)]
[ ---  CBRANCH (ram, 0x4060b6, 1) , (register, 0x98, 1)]
[(register, 0x30, 8) CAST (unique, 0x10001578, 8), (unique, 0x10001578, 8) PTRSUB (const, 0x0, 8) , (const, 0x49a461, 8)]
[ ---  BRANCH (ram, 0x404f97, 1)]
[ ---  CBRANCH (ram, 0x4060aa, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x78, 1)]
[(register, 0x30, 8) CAST (unique, 0x10001580, 8), (unique, 0x10001580, 8) PTRSUB (const, 0x0, 8) , (const, 0x49a46d, 8)]
[ ---  BRANCH (ram, 0x404f97, 1)]
[ ---  CBRANCH (ram, 0x4064de, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x58, 1)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x16fc, 4)]
[(stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x16fc, 4)]
[(stack, 0xfffffffffffffe6c, 4) INDIRECT (stack, 0xfffffffffffffe6c, 4) , (const, 0x16fc, 4)]
[(stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0x16fc, 4)]
[(stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0x16fc, 4)]
[(stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x16fc, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x16fc, 4)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x16fc, 4)]
[(stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x16fc, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x16fc, 4)]
[ ---  CALL (ram, 0x4011bf, 8)]
[(ram, 0x4c4f18, 8) COPY (ram, 0x4c4f18, 8), (ram, 0x4c4f18, 8) INDIRECT (ram, 0x4c4f18, 8) , (const, 0x16fc, 4)]
[(ram, 0x4c4fb8, 8) COPY (ram, 0x4c4fb8, 8), (ram, 0x4c4fb8, 8) INDIRECT (ram, 0x4c4fb8, 8) , (const, 0x16fc, 4)]
[(ram, 0x4c7780, 4) COPY (ram, 0x4c7780, 4), (ram, 0x4c7780, 4) INDIRECT (ram, 0x4c7780, 4) , (const, 0x16fc, 4)]
[(ram, 0x4c7784, 4) COPY (ram, 0x4c7784, 4), (ram, 0x4c7784, 4) INDIRECT (ram, 0x4c7784, 4) , (const, 0x16fc, 4)]
[(ram, 0x4c7788, 8) COPY (ram, 0x4c7788, 8), (ram, 0x4c7788, 8) INDIRECT (ram, 0x4c7788, 8) , (const, 0x16fc, 4)]
[(ram, 0x4c77d0, 4) COPY (ram, 0x4c77d0, 4), (ram, 0x4c77d0, 4) INDIRECT (ram, 0x4c77d0, 4) , (const, 0x16fc, 4)]
[(ram, 0x4c77d4, 4) COPY (ram, 0x4c77d4, 4), (ram, 0x4c77d4, 4) INDIRECT (ram, 0x4c77d4, 4) , (const, 0x16fc, 4)]
[(ram, 0x4c77d8, 8) COPY (ram, 0x4c77d8, 8), (ram, 0x4c77d8, 8) INDIRECT (ram, 0x4c77d8, 8) , (const, 0x16fc, 4)]
[(ram, 0x4c77e0, 4) COPY (ram, 0x4c77e0, 4), (ram, 0x4c77e0, 4) INDIRECT (ram, 0x4c77e0, 4) , (const, 0x16fc, 4)]
[ ---  RETURN (const, 0x1, 4)]
[(register, 0x30, 8) CAST (unique, 0x10001588, 8), (unique, 0x10001588, 8) PTRSUB (const, 0x0, 8) , (const, 0x49a46a, 8)]
[ ---  BRANCH (ram, 0x404f97, 1)]
[(register, 0x30, 8) COPY (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x404f97, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x41, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x5, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x404f97, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x53, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x6, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x404f97, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x54, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x7, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x4063c0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x38, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x8, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x406443, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x9, 8) , (const, 0x1, 8)]
[(register, 0x30, 8) COPY (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x404f97, 1)]
[ ---  CBRANCH (ram, 0x406437, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x64, 1)]
[(register, 0x30, 8) COPY (const, 0x49ec40, 8)]
[ ---  BRANCH (ram, 0x404f97, 1)]
[ ---  CBRANCH (ram, 0x40642b, 1) , (register, 0x80, 1)]
[(register, 0x30, 8) COPY (const, 0x49a14d, 8)]
[ ---  BRANCH (ram, 0x404f97, 1)]
[ ---  CBRANCH (ram, 0x40641f, 1) , (register, 0x98, 1)]
[(register, 0x30, 8) COPY (const, 0x49e28c, 8)]
[ ---  BRANCH (ram, 0x404f97, 1)]
[ ---  CBRANCH (ram, 0x406413, 1) , (register, 0x98, 1)]
[(register, 0x30, 8) CAST (unique, 0x10001590, 8), (unique, 0x10001590, 8) PTRSUB (const, 0x0, 8) , (const, 0x4b0b12, 8)]
[ ---  BRANCH (ram, 0x404f97, 1)]
[ ---  CBRANCH (ram, 0x406407, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x78, 1)]
[(register, 0x30, 8) COPY (const, 0x49dd1c, 8)]
[ ---  BRANCH (ram, 0x404f97, 1)]
[ ---  CBRANCH (ram, 0x4064bb, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x58, 1)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x1658, 4)]
[(stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x1658, 4)]
[(stack, 0xfffffffffffffe6c, 4) INDIRECT (stack, 0xfffffffffffffe6c, 4) , (const, 0x1658, 4)]
[(stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0x1658, 4)]
[(stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0x1658, 4)]
[(stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x1658, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x1658, 4)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x1658, 4)]
[(stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x1658, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1658, 4)]
[ ---  CALL (ram, 0x4011bf, 8)]
[(ram, 0x4c4f18, 8) COPY (ram, 0x4c4f18, 8), (ram, 0x4c4f18, 8) INDIRECT (ram, 0x4c4f18, 8) , (const, 0x1658, 4)]
[(ram, 0x4c4fb8, 8) COPY (ram, 0x4c4fb8, 8), (ram, 0x4c4fb8, 8) INDIRECT (ram, 0x4c4fb8, 8) , (const, 0x1658, 4)]
[(ram, 0x4c7780, 4) COPY (ram, 0x4c7780, 4), (ram, 0x4c7780, 4) INDIRECT (ram, 0x4c7780, 4) , (const, 0x1658, 4)]
[(ram, 0x4c7784, 4) COPY (ram, 0x4c7784, 4), (ram, 0x4c7784, 4) INDIRECT (ram, 0x4c7784, 4) , (const, 0x1658, 4)]
[(ram, 0x4c7788, 8) COPY (ram, 0x4c7788, 8), (ram, 0x4c7788, 8) INDIRECT (ram, 0x4c7788, 8) , (const, 0x1658, 4)]
[(ram, 0x4c77d0, 4) COPY (ram, 0x4c77d0, 4), (ram, 0x4c77d0, 4) INDIRECT (ram, 0x4c77d0, 4) , (const, 0x1658, 4)]
[(ram, 0x4c77d4, 4) COPY (ram, 0x4c77d4, 4), (ram, 0x4c77d4, 4) INDIRECT (ram, 0x4c77d4, 4) , (const, 0x1658, 4)]
[(ram, 0x4c77d8, 8) COPY (ram, 0x4c77d8, 8), (ram, 0x4c77d8, 8) INDIRECT (ram, 0x4c77d8, 8) , (const, 0x1658, 4)]
[(ram, 0x4c77e0, 4) COPY (ram, 0x4c77e0, 4), (ram, 0x4c77e0, 4) INDIRECT (ram, 0x4c77e0, 4) , (const, 0x1658, 4)]
[ ---  RETURN (const, 0x1, 4)]
[(register, 0x30, 8) COPY (const, 0x4b0547, 8)]
[ ---  BRANCH (ram, 0x404f97, 1)]
[ ---  CBRANCH (ram, 0x406365, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x31, 1)]
[(register, 0x30, 8) COPY (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x404f97, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x36, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x9, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x404f97, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0xa, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x40646e, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x64, 1)]
[(register, 0x30, 8) COPY (const, 0x49e341, 8)]
[ ---  BRANCH (ram, 0x404f97, 1)]
[ ---  CBRANCH (ram, 0x406462, 1) , (register, 0x80, 1)]
[(register, 0x30, 8) CAST (unique, 0x10001598, 8), (unique, 0x10001598, 8) PTRSUB (const, 0x0, 8) , (const, 0x49a467, 8)]
[ ---  BRANCH (ram, 0x404f97, 1)]
[ ---  CBRANCH (ram, 0x406456, 1) , (register, 0x98, 1)]
[(register, 0x30, 8) CAST (unique, 0x100015a0, 8), (unique, 0x100015a0, 8) PTRSUB (const, 0x0, 8) , (const, 0x49a464, 8)]
[ ---  BRANCH (ram, 0x404f97, 1)]
[ ---  CBRANCH (ram, 0x40644a, 1) , (register, 0x98, 1)]
[(register, 0x30, 8) CAST (unique, 0x100015a8, 8), (unique, 0x100015a8, 8) PTRSUB (const, 0x0, 8) , (const, 0x49a461, 8)]
[ ---  BRANCH (ram, 0x404f97, 1)]
[ ---  CBRANCH (ram, 0x4063fb, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x78, 1)]
[(register, 0x30, 8) CAST (unique, 0x100015b0, 8), (unique, 0x100015b0, 8) PTRSUB (const, 0x0, 8) , (const, 0x49a46d, 8)]
[ ---  BRANCH (ram, 0x404f97, 1)]
[ ---  CBRANCH (ram, 0x4064b6, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x58, 1)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x15f2, 4)]
[(stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x15f2, 4)]
[(stack, 0xfffffffffffffe6c, 4) INDIRECT (stack, 0xfffffffffffffe6c, 4) , (const, 0x15f2, 4)]
[(stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0x15f2, 4)]
[(stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0x15f2, 4)]
[(stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x15f2, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x15f2, 4)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x15f2, 4)]
[(stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x15f2, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x15f2, 4)]
[ ---  CALL (ram, 0x4011bf, 8)]
[(ram, 0x4c4f18, 8) COPY (ram, 0x4c4f18, 8), (ram, 0x4c4f18, 8) INDIRECT (ram, 0x4c4f18, 8) , (const, 0x15f2, 4)]
[(ram, 0x4c4fb8, 8) COPY (ram, 0x4c4fb8, 8), (ram, 0x4c4fb8, 8) INDIRECT (ram, 0x4c4fb8, 8) , (const, 0x15f2, 4)]
[(ram, 0x4c7780, 4) COPY (ram, 0x4c7780, 4), (ram, 0x4c7780, 4) INDIRECT (ram, 0x4c7780, 4) , (const, 0x15f2, 4)]
[(ram, 0x4c7784, 4) COPY (ram, 0x4c7784, 4), (ram, 0x4c7784, 4) INDIRECT (ram, 0x4c7784, 4) , (const, 0x15f2, 4)]
[(ram, 0x4c7788, 8) COPY (ram, 0x4c7788, 8), (ram, 0x4c7788, 8) INDIRECT (ram, 0x4c7788, 8) , (const, 0x15f2, 4)]
[(ram, 0x4c77d0, 4) COPY (ram, 0x4c77d0, 4), (ram, 0x4c77d0, 4) INDIRECT (ram, 0x4c77d0, 4) , (const, 0x15f2, 4)]
[(ram, 0x4c77d4, 4) COPY (ram, 0x4c77d4, 4), (ram, 0x4c77d4, 4) INDIRECT (ram, 0x4c77d4, 4) , (const, 0x15f2, 4)]
[(ram, 0x4c77d8, 8) COPY (ram, 0x4c77d8, 8), (ram, 0x4c77d8, 8) INDIRECT (ram, 0x4c77d8, 8) , (const, 0x15f2, 4)]
[(ram, 0x4c77e0, 4) COPY (ram, 0x4c77e0, 4), (ram, 0x4c77e0, 4) INDIRECT (ram, 0x4c77e0, 4) , (const, 0x15f2, 4)]
[ ---  RETURN (const, 0x1, 4)]
[(register, 0x30, 8) CAST (unique, 0x100015b8, 8), (unique, 0x100015b8, 8) PTRSUB (const, 0x0, 8) , (const, 0x49a46a, 8)]
[ ---  BRANCH (ram, 0x404f97, 1)]
[(register, 0x30, 8) COPY (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x4062fe, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x33, 1)]
[ ---  CBRANCH (ram, 0x404f97, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x36, 1)]
[ ---  CBRANCH (ram, 0x404f97, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x34, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x9, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x404f97, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0xa, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x4064aa, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x64, 1)]
[(register, 0x30, 8) COPY (const, 0x49e341, 8)]
[ ---  BRANCH (ram, 0x404f97, 1)]
[ ---  CBRANCH (ram, 0x40649e, 1) , (register, 0x80, 1)]
[(register, 0x30, 8) CAST (unique, 0x100015c0, 8), (unique, 0x100015c0, 8) PTRSUB (const, 0x0, 8) , (const, 0x49a467, 8)]
[ ---  BRANCH (ram, 0x404f97, 1)]
[ ---  CBRANCH (ram, 0x406492, 1) , (register, 0x98, 1)]
[(register, 0x30, 8) CAST (unique, 0x100015c8, 8), (unique, 0x100015c8, 8) PTRSUB (const, 0x0, 8) , (const, 0x49a464, 8)]
[ ---  BRANCH (ram, 0x404f97, 1)]
[ ---  CBRANCH (ram, 0x406486, 1) , (register, 0x98, 1)]
[(register, 0x30, 8) CAST (unique, 0x100015d0, 8), (unique, 0x100015d0, 8) PTRSUB (const, 0x0, 8) , (const, 0x49a461, 8)]
[ ---  BRANCH (ram, 0x404f97, 1)]
[ ---  CBRANCH (ram, 0x40647a, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x78, 1)]
[(register, 0x30, 8) CAST (unique, 0x100015d8, 8), (unique, 0x100015d8, 8) PTRSUB (const, 0x0, 8) , (const, 0x49a46d, 8)]
[ ---  BRANCH (ram, 0x404f97, 1)]
[ ---  CBRANCH (ram, 0x4064c5, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x58, 1)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x1573, 4)]
[(stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x1573, 4)]
[(stack, 0xfffffffffffffe6c, 4) INDIRECT (stack, 0xfffffffffffffe6c, 4) , (const, 0x1573, 4)]
[(stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0x1573, 4)]
[(stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0x1573, 4)]
[(stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x1573, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x1573, 4)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x1573, 4)]
[(stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x1573, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1573, 4)]
[ ---  CALL (ram, 0x4011bf, 8)]
[(ram, 0x4c4f18, 8) COPY (ram, 0x4c4f18, 8), (ram, 0x4c4f18, 8) INDIRECT (ram, 0x4c4f18, 8) , (const, 0x1573, 4)]
[(ram, 0x4c4fb8, 8) COPY (ram, 0x4c4fb8, 8), (ram, 0x4c4fb8, 8) INDIRECT (ram, 0x4c4fb8, 8) , (const, 0x1573, 4)]
[(ram, 0x4c7780, 4) COPY (ram, 0x4c7780, 4), (ram, 0x4c7780, 4) INDIRECT (ram, 0x4c7780, 4) , (const, 0x1573, 4)]
[(ram, 0x4c7784, 4) COPY (ram, 0x4c7784, 4), (ram, 0x4c7784, 4) INDIRECT (ram, 0x4c7784, 4) , (const, 0x1573, 4)]
[(ram, 0x4c7788, 8) COPY (ram, 0x4c7788, 8), (ram, 0x4c7788, 8) INDIRECT (ram, 0x4c7788, 8) , (const, 0x1573, 4)]
[(ram, 0x4c77d0, 4) COPY (ram, 0x4c77d0, 4), (ram, 0x4c77d0, 4) INDIRECT (ram, 0x4c77d0, 4) , (const, 0x1573, 4)]
[(ram, 0x4c77d4, 4) COPY (ram, 0x4c77d4, 4), (ram, 0x4c77d4, 4) INDIRECT (ram, 0x4c77d4, 4) , (const, 0x1573, 4)]
[(ram, 0x4c77d8, 8) COPY (ram, 0x4c77d8, 8), (ram, 0x4c77d8, 8) INDIRECT (ram, 0x4c77d8, 8) , (const, 0x1573, 4)]
[(ram, 0x4c77e0, 4) COPY (ram, 0x4c77e0, 4), (ram, 0x4c77e0, 4) INDIRECT (ram, 0x4c77e0, 4) , (const, 0x1573, 4)]
[ ---  RETURN (const, 0x1, 4)]
[(register, 0x30, 8) CAST (unique, 0x100015e0, 8), (unique, 0x100015e0, 8) PTRSUB (const, 0x0, 8) , (const, 0x49a46a, 8)]
[ ---  BRANCH (ram, 0x404f97, 1)]
[ ---  CBRANCH (ram, 0x404f97, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x32, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x9, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x404f97, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0xa, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x4062f2, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x64, 1)]
[(register, 0x30, 8) COPY (const, 0x49e341, 8)]
[ ---  BRANCH (ram, 0x404f97, 1)]
[ ---  CBRANCH (ram, 0x4062e6, 1) , (register, 0x80, 1)]
[(register, 0x30, 8) CAST (unique, 0x100015e8, 8), (unique, 0x100015e8, 8) PTRSUB (const, 0x0, 8) , (const, 0x49a467, 8)]
[ ---  BRANCH (ram, 0x404f97, 1)]
[ ---  CBRANCH (ram, 0x4062da, 1) , (register, 0x98, 1)]
[(register, 0x30, 8) CAST (unique, 0x100015f0, 8), (unique, 0x100015f0, 8) PTRSUB (const, 0x0, 8) , (const, 0x49a464, 8)]
[ ---  BRANCH (ram, 0x404f97, 1)]
[ ---  CBRANCH (ram, 0x4062ce, 1) , (register, 0x98, 1)]
[(register, 0x30, 8) CAST (unique, 0x100015f8, 8), (unique, 0x100015f8, 8) PTRSUB (const, 0x0, 8) , (const, 0x49a461, 8)]
[ ---  BRANCH (ram, 0x404f97, 1)]
[ ---  CBRANCH (ram, 0x4062c2, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x78, 1)]
[(register, 0x30, 8) CAST (unique, 0x10001600, 8), (unique, 0x10001600, 8) PTRSUB (const, 0x0, 8) , (const, 0x49a46d, 8)]
[ ---  BRANCH (ram, 0x404f97, 1)]
[ ---  CBRANCH (ram, 0x4064d9, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x58, 1)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x14f3, 4)]
[(stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x14f3, 4)]
[(stack, 0xfffffffffffffe6c, 4) INDIRECT (stack, 0xfffffffffffffe6c, 4) , (const, 0x14f3, 4)]
[(stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0x14f3, 4)]
[(stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0x14f3, 4)]
[(stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x14f3, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x14f3, 4)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x14f3, 4)]
[(stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x14f3, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x14f3, 4)]
[ ---  CALL (ram, 0x4011bf, 8)]
[(ram, 0x4c4f18, 8) COPY (ram, 0x4c4f18, 8), (ram, 0x4c4f18, 8) INDIRECT (ram, 0x4c4f18, 8) , (const, 0x14f3, 4)]
[(ram, 0x4c4fb8, 8) COPY (ram, 0x4c4fb8, 8), (ram, 0x4c4fb8, 8) INDIRECT (ram, 0x4c4fb8, 8) , (const, 0x14f3, 4)]
[(ram, 0x4c7780, 4) COPY (ram, 0x4c7780, 4), (ram, 0x4c7780, 4) INDIRECT (ram, 0x4c7780, 4) , (const, 0x14f3, 4)]
[(ram, 0x4c7784, 4) COPY (ram, 0x4c7784, 4), (ram, 0x4c7784, 4) INDIRECT (ram, 0x4c7784, 4) , (const, 0x14f3, 4)]
[(ram, 0x4c7788, 8) COPY (ram, 0x4c7788, 8), (ram, 0x4c7788, 8) INDIRECT (ram, 0x4c7788, 8) , (const, 0x14f3, 4)]
[(ram, 0x4c77d0, 4) COPY (ram, 0x4c77d0, 4), (ram, 0x4c77d0, 4) INDIRECT (ram, 0x4c77d0, 4) , (const, 0x14f3, 4)]
[(ram, 0x4c77d4, 4) COPY (ram, 0x4c77d4, 4), (ram, 0x4c77d4, 4) INDIRECT (ram, 0x4c77d4, 4) , (const, 0x14f3, 4)]
[(ram, 0x4c77d8, 8) COPY (ram, 0x4c77d8, 8), (ram, 0x4c77d8, 8) INDIRECT (ram, 0x4c77d8, 8) , (const, 0x14f3, 4)]
[(ram, 0x4c77e0, 4) COPY (ram, 0x4c77e0, 4), (ram, 0x4c77e0, 4) INDIRECT (ram, 0x4c77e0, 4) , (const, 0x14f3, 4)]
[ ---  RETURN (const, 0x1, 4)]
[(register, 0x30, 8) CAST (unique, 0x10001608, 8), (unique, 0x10001608, 8) PTRSUB (const, 0x0, 8) , (const, 0x49a46a, 8)]
[ ---  BRANCH (ram, 0x404f97, 1)]
[(register, 0x30, 8) COPY (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x404f97, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x45, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x5, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x404f97, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x41, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x6, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x404f97, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x53, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x7, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x404f97, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x54, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x8, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x4061c4, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x38, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x9, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x406267, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0xa, 8) , (const, 0x1, 8)]
[(register, 0x30, 8) COPY (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x404f97, 1)]
[ ---  CBRANCH (ram, 0x40625b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x64, 1)]
[(register, 0x30, 8) COPY (const, 0x49ec40, 8)]
[ ---  BRANCH (ram, 0x404f97, 1)]
[ ---  CBRANCH (ram, 0x40624f, 1) , (register, 0x80, 1)]
[(register, 0x30, 8) COPY (const, 0x49a14d, 8)]
[ ---  BRANCH (ram, 0x404f97, 1)]
[ ---  CBRANCH (ram, 0x406243, 1) , (register, 0x98, 1)]
[(register, 0x30, 8) COPY (const, 0x49e28c, 8)]
[ ---  BRANCH (ram, 0x404f97, 1)]
[ ---  CBRANCH (ram, 0x406237, 1) , (register, 0x98, 1)]
[(register, 0x30, 8) CAST (unique, 0x10001610, 8), (unique, 0x10001610, 8) PTRSUB (const, 0x0, 8) , (const, 0x4b0b12, 8)]
[ ---  BRANCH (ram, 0x404f97, 1)]
[ ---  CBRANCH (ram, 0x40622b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x78, 1)]
[(register, 0x30, 8) COPY (const, 0x49dd1c, 8)]
[ ---  BRANCH (ram, 0x404f97, 1)]
[ ---  CBRANCH (ram, 0x4064cf, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x58, 1)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x140b, 4)]
[(stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x140b, 4)]
[(stack, 0xfffffffffffffe6c, 4) INDIRECT (stack, 0xfffffffffffffe6c, 4) , (const, 0x140b, 4)]
[(stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0x140b, 4)]
[(stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0x140b, 4)]
[(stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x140b, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x140b, 4)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x140b, 4)]
[(stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x140b, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x140b, 4)]
[ ---  CALL (ram, 0x4011bf, 8)]
[(ram, 0x4c4f18, 8) COPY (ram, 0x4c4f18, 8), (ram, 0x4c4f18, 8) INDIRECT (ram, 0x4c4f18, 8) , (const, 0x140b, 4)]
[(ram, 0x4c4fb8, 8) COPY (ram, 0x4c4fb8, 8), (ram, 0x4c4fb8, 8) INDIRECT (ram, 0x4c4fb8, 8) , (const, 0x140b, 4)]
[(ram, 0x4c7780, 4) COPY (ram, 0x4c7780, 4), (ram, 0x4c7780, 4) INDIRECT (ram, 0x4c7780, 4) , (const, 0x140b, 4)]
[(ram, 0x4c7784, 4) COPY (ram, 0x4c7784, 4), (ram, 0x4c7784, 4) INDIRECT (ram, 0x4c7784, 4) , (const, 0x140b, 4)]
[(ram, 0x4c7788, 8) COPY (ram, 0x4c7788, 8), (ram, 0x4c7788, 8) INDIRECT (ram, 0x4c7788, 8) , (const, 0x140b, 4)]
[(ram, 0x4c77d0, 4) COPY (ram, 0x4c77d0, 4), (ram, 0x4c77d0, 4) INDIRECT (ram, 0x4c77d0, 4) , (const, 0x140b, 4)]
[(ram, 0x4c77d4, 4) COPY (ram, 0x4c77d4, 4), (ram, 0x4c77d4, 4) INDIRECT (ram, 0x4c77d4, 4) , (const, 0x140b, 4)]
[(ram, 0x4c77d8, 8) COPY (ram, 0x4c77d8, 8), (ram, 0x4c77d8, 8) INDIRECT (ram, 0x4c77d8, 8) , (const, 0x140b, 4)]
[(ram, 0x4c77e0, 4) COPY (ram, 0x4c77e0, 4), (ram, 0x4c77e0, 4) INDIRECT (ram, 0x4c77e0, 4) , (const, 0x140b, 4)]
[ ---  RETURN (const, 0x1, 4)]
[(register, 0x30, 8) COPY (const, 0x4b0547, 8)]
[ ---  BRANCH (ram, 0x404f97, 1)]
[ ---  CBRANCH (ram, 0x406171, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x31, 1)]
[(register, 0x30, 8) COPY (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x404f97, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x36, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0xa, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x404f97, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0xb, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x40627a, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x64, 1)]
[(register, 0x30, 8) COPY (const, 0x49ec40, 8)]
[ ---  BRANCH (ram, 0x404f97, 1)]
[ ---  CBRANCH (ram, 0x40626e, 1) , (register, 0x80, 1)]
[(register, 0x30, 8) COPY (const, 0x49a14d, 8)]
[ ---  BRANCH (ram, 0x404f97, 1)]
[ ---  CBRANCH (ram, 0x40621f, 1) , (register, 0x98, 1)]
[(register, 0x30, 8) COPY (const, 0x49e28c, 8)]
[ ---  BRANCH (ram, 0x404f97, 1)]
[ ---  CBRANCH (ram, 0x406213, 1) , (register, 0x98, 1)]
[(register, 0x30, 8) CAST (unique, 0x10001618, 8), (unique, 0x10001618, 8) PTRSUB (const, 0x0, 8) , (const, 0x4b0b12, 8)]
[ ---  BRANCH (ram, 0x404f97, 1)]
[ ---  CBRANCH (ram, 0x406207, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x78, 1)]
[(register, 0x30, 8) COPY (const, 0x49dd1c, 8)]
[ ---  BRANCH (ram, 0x404f97, 1)]
[ ---  CBRANCH (ram, 0x4064ca, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x58, 1)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x13a5, 4)]
[(stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x13a5, 4)]
[(stack, 0xfffffffffffffe6c, 4) INDIRECT (stack, 0xfffffffffffffe6c, 4) , (const, 0x13a5, 4)]
[(stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0x13a5, 4)]
[(stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0x13a5, 4)]
[(stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x13a5, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x13a5, 4)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x13a5, 4)]
[(stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x13a5, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x13a5, 4)]
[ ---  CALL (ram, 0x4011bf, 8)]
[(ram, 0x4c4f18, 8) COPY (ram, 0x4c4f18, 8), (ram, 0x4c4f18, 8) INDIRECT (ram, 0x4c4f18, 8) , (const, 0x13a5, 4)]
[(ram, 0x4c4fb8, 8) COPY (ram, 0x4c4fb8, 8), (ram, 0x4c4fb8, 8) INDIRECT (ram, 0x4c4fb8, 8) , (const, 0x13a5, 4)]
[(ram, 0x4c7780, 4) COPY (ram, 0x4c7780, 4), (ram, 0x4c7780, 4) INDIRECT (ram, 0x4c7780, 4) , (const, 0x13a5, 4)]
[(ram, 0x4c7784, 4) COPY (ram, 0x4c7784, 4), (ram, 0x4c7784, 4) INDIRECT (ram, 0x4c7784, 4) , (const, 0x13a5, 4)]
[(ram, 0x4c7788, 8) COPY (ram, 0x4c7788, 8), (ram, 0x4c7788, 8) INDIRECT (ram, 0x4c7788, 8) , (const, 0x13a5, 4)]
[(ram, 0x4c77d0, 4) COPY (ram, 0x4c77d0, 4), (ram, 0x4c77d0, 4) INDIRECT (ram, 0x4c77d0, 4) , (const, 0x13a5, 4)]
[(ram, 0x4c77d4, 4) COPY (ram, 0x4c77d4, 4), (ram, 0x4c77d4, 4) INDIRECT (ram, 0x4c77d4, 4) , (const, 0x13a5, 4)]
[(ram, 0x4c77d8, 8) COPY (ram, 0x4c77d8, 8), (ram, 0x4c77d8, 8) INDIRECT (ram, 0x4c77d8, 8) , (const, 0x13a5, 4)]
[(ram, 0x4c77e0, 4) COPY (ram, 0x4c77e0, 4), (ram, 0x4c77e0, 4) INDIRECT (ram, 0x4c77e0, 4) , (const, 0x13a5, 4)]
[ ---  RETURN (const, 0x1, 4)]
[(register, 0x30, 8) COPY (const, 0x4b0547, 8)]
[ ---  BRANCH (ram, 0x404f97, 1)]
[(register, 0x30, 8) COPY (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x40610a, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x33, 1)]
[ ---  CBRANCH (ram, 0x404f97, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x36, 1)]
[ ---  CBRANCH (ram, 0x404f97, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x34, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0xa, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x404f97, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0xb, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x4062b6, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x64, 1)]
[(register, 0x30, 8) COPY (const, 0x49e341, 8)]
[ ---  BRANCH (ram, 0x404f97, 1)]
[ ---  CBRANCH (ram, 0x4062aa, 1) , (register, 0x80, 1)]
[(register, 0x30, 8) CAST (unique, 0x10001620, 8), (unique, 0x10001620, 8) PTRSUB (const, 0x0, 8) , (const, 0x49a467, 8)]
[ ---  BRANCH (ram, 0x404f97, 1)]
[ ---  CBRANCH (ram, 0x40629e, 1) , (register, 0x98, 1)]
[(register, 0x30, 8) CAST (unique, 0x10001628, 8), (unique, 0x10001628, 8) PTRSUB (const, 0x0, 8) , (const, 0x49a464, 8)]
[ ---  BRANCH (ram, 0x404f97, 1)]
[ ---  CBRANCH (ram, 0x406292, 1) , (register, 0x98, 1)]
[(register, 0x30, 8) CAST (unique, 0x10001630, 8), (unique, 0x10001630, 8) PTRSUB (const, 0x0, 8) , (const, 0x49a461, 8)]
[ ---  BRANCH (ram, 0x404f97, 1)]
[ ---  CBRANCH (ram, 0x406286, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x78, 1)]
[(register, 0x30, 8) CAST (unique, 0x10001638, 8), (unique, 0x10001638, 8) PTRSUB (const, 0x0, 8) , (const, 0x49a46d, 8)]
[ ---  BRANCH (ram, 0x404f97, 1)]
[ ---  CBRANCH (ram, 0x4064c0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x58, 1)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x1326, 4)]
[(stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x1326, 4)]
[(stack, 0xfffffffffffffe6c, 4) INDIRECT (stack, 0xfffffffffffffe6c, 4) , (const, 0x1326, 4)]
[(stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0x1326, 4)]
[(stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0x1326, 4)]
[(stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x1326, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x1326, 4)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x1326, 4)]
[(stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x1326, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1326, 4)]
[ ---  CALL (ram, 0x4011bf, 8)]
[(ram, 0x4c4f18, 8) COPY (ram, 0x4c4f18, 8), (ram, 0x4c4f18, 8) INDIRECT (ram, 0x4c4f18, 8) , (const, 0x1326, 4)]
[(ram, 0x4c4fb8, 8) COPY (ram, 0x4c4fb8, 8), (ram, 0x4c4fb8, 8) INDIRECT (ram, 0x4c4fb8, 8) , (const, 0x1326, 4)]
[(ram, 0x4c7780, 4) COPY (ram, 0x4c7780, 4), (ram, 0x4c7780, 4) INDIRECT (ram, 0x4c7780, 4) , (const, 0x1326, 4)]
[(ram, 0x4c7784, 4) COPY (ram, 0x4c7784, 4), (ram, 0x4c7784, 4) INDIRECT (ram, 0x4c7784, 4) , (const, 0x1326, 4)]
[(ram, 0x4c7788, 8) COPY (ram, 0x4c7788, 8), (ram, 0x4c7788, 8) INDIRECT (ram, 0x4c7788, 8) , (const, 0x1326, 4)]
[(ram, 0x4c77d0, 4) COPY (ram, 0x4c77d0, 4), (ram, 0x4c77d0, 4) INDIRECT (ram, 0x4c77d0, 4) , (const, 0x1326, 4)]
[(ram, 0x4c77d4, 4) COPY (ram, 0x4c77d4, 4), (ram, 0x4c77d4, 4) INDIRECT (ram, 0x4c77d4, 4) , (const, 0x1326, 4)]
[(ram, 0x4c77d8, 8) COPY (ram, 0x4c77d8, 8), (ram, 0x4c77d8, 8) INDIRECT (ram, 0x4c77d8, 8) , (const, 0x1326, 4)]
[(ram, 0x4c77e0, 4) COPY (ram, 0x4c77e0, 4), (ram, 0x4c77e0, 4) INDIRECT (ram, 0x4c77e0, 4) , (const, 0x1326, 4)]
[ ---  RETURN (const, 0x1, 4)]
[(register, 0x30, 8) CAST (unique, 0x10001640, 8), (unique, 0x10001640, 8) PTRSUB (const, 0x0, 8) , (const, 0x49a46a, 8)]
[ ---  BRANCH (ram, 0x404f97, 1)]
[ ---  CBRANCH (ram, 0x404f97, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x32, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0xa, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x404f97, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0xb, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x4060fe, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x64, 1)]
[(register, 0x30, 8) COPY (const, 0x49ec40, 8)]
[ ---  BRANCH (ram, 0x404f97, 1)]
[ ---  CBRANCH (ram, 0x4060f2, 1) , (register, 0x80, 1)]
[(register, 0x30, 8) COPY (const, 0x49a14d, 8)]
[ ---  BRANCH (ram, 0x404f97, 1)]
[ ---  CBRANCH (ram, 0x4060e6, 1) , (register, 0x98, 1)]
[(register, 0x30, 8) COPY (const, 0x49e28c, 8)]
[ ---  BRANCH (ram, 0x404f97, 1)]
[ ---  CBRANCH (ram, 0x4060da, 1) , (register, 0x98, 1)]
[(register, 0x30, 8) CAST (unique, 0x10001648, 8), (unique, 0x10001648, 8) PTRSUB (const, 0x0, 8) , (const, 0x4b0b12, 8)]
[ ---  BRANCH (ram, 0x404f97, 1)]
[ ---  CBRANCH (ram, 0x4060ce, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x78, 1)]
[(register, 0x30, 8) COPY (const, 0x49dd1c, 8)]
[ ---  BRANCH (ram, 0x404f97, 1)]
[ ---  CBRANCH (ram, 0x4064d4, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x58, 1)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x12a6, 4)]
[(stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x12a6, 4)]
[(stack, 0xfffffffffffffe6c, 4) INDIRECT (stack, 0xfffffffffffffe6c, 4) , (const, 0x12a6, 4)]
[(stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0x12a6, 4)]
[(stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0x12a6, 4)]
[(stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x12a6, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x12a6, 4)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x12a6, 4)]
[(stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x12a6, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x12a6, 4)]
[ ---  CALL (ram, 0x4011bf, 8)]
[(ram, 0x4c4f18, 8) COPY (ram, 0x4c4f18, 8), (ram, 0x4c4f18, 8) INDIRECT (ram, 0x4c4f18, 8) , (const, 0x12a6, 4)]
[(ram, 0x4c4fb8, 8) COPY (ram, 0x4c4fb8, 8), (ram, 0x4c4fb8, 8) INDIRECT (ram, 0x4c4fb8, 8) , (const, 0x12a6, 4)]
[(ram, 0x4c7780, 4) COPY (ram, 0x4c7780, 4), (ram, 0x4c7780, 4) INDIRECT (ram, 0x4c7780, 4) , (const, 0x12a6, 4)]
[(ram, 0x4c7784, 4) COPY (ram, 0x4c7784, 4), (ram, 0x4c7784, 4) INDIRECT (ram, 0x4c7784, 4) , (const, 0x12a6, 4)]
[(ram, 0x4c7788, 8) COPY (ram, 0x4c7788, 8), (ram, 0x4c7788, 8) INDIRECT (ram, 0x4c7788, 8) , (const, 0x12a6, 4)]
[(ram, 0x4c77d0, 4) COPY (ram, 0x4c77d0, 4), (ram, 0x4c77d0, 4) INDIRECT (ram, 0x4c77d0, 4) , (const, 0x12a6, 4)]
[(ram, 0x4c77d4, 4) COPY (ram, 0x4c77d4, 4), (ram, 0x4c77d4, 4) INDIRECT (ram, 0x4c77d4, 4) , (const, 0x12a6, 4)]
[(ram, 0x4c77d8, 8) COPY (ram, 0x4c77d8, 8), (ram, 0x4c77d8, 8) INDIRECT (ram, 0x4c77d8, 8) , (const, 0x12a6, 4)]
[(ram, 0x4c77e0, 4) COPY (ram, 0x4c77e0, 4), (ram, 0x4c77e0, 4) INDIRECT (ram, 0x4c77e0, 4) , (const, 0x12a6, 4)]
[ ---  RETURN (const, 0x1, 4)]
[(register, 0x30, 8) COPY (const, 0x4b0547, 8)]
[ ---  BRANCH (ram, 0x404f97, 1)]
[(register, 0x30, 8) COPY (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x404f97, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x34, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x5, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x404f97, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x6, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x405fc6, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x64, 1)]
[(register, 0x30, 8) COPY (const, 0x49e341, 8)]
[ ---  BRANCH (ram, 0x404f97, 1)]
[ ---  CBRANCH (ram, 0x405fba, 1) , (register, 0x80, 1)]
[(register, 0x30, 8) CAST (unique, 0x10001650, 8), (unique, 0x10001650, 8) PTRSUB (const, 0x0, 8) , (const, 0x49a467, 8)]
[ ---  BRANCH (ram, 0x404f97, 1)]
[ ---  CBRANCH (ram, 0x406026, 1) , (register, 0x98, 1)]
[(register, 0x30, 8) CAST (unique, 0x10001658, 8), (unique, 0x10001658, 8) PTRSUB (const, 0x0, 8) , (const, 0x49a464, 8)]
[ ---  BRANCH (ram, 0x404f97, 1)]
[ ---  CBRANCH (ram, 0x40601a, 1) , (register, 0x98, 1)]
[(register, 0x30, 8) CAST (unique, 0x10001660, 8), (unique, 0x10001660, 8) PTRSUB (const, 0x0, 8) , (const, 0x49a461, 8)]
[ ---  BRANCH (ram, 0x404f97, 1)]
[ ---  CBRANCH (ram, 0x40600e, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x78, 1)]
[(register, 0x30, 8) CAST (unique, 0x10001668, 8), (unique, 0x10001668, 8) PTRSUB (const, 0x0, 8) , (const, 0x49a46d, 8)]
[ ---  BRANCH (ram, 0x404f97, 1)]
[ ---  CBRANCH (ram, 0x4064e3, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x58, 1)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x11ba, 4)]
[(stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x11ba, 4)]
[(stack, 0xfffffffffffffe6c, 4) INDIRECT (stack, 0xfffffffffffffe6c, 4) , (const, 0x11ba, 4)]
[(stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0x11ba, 4)]
[(stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0x11ba, 4)]
[(stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x11ba, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x11ba, 4)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x11ba, 4)]
[(stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x11ba, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x11ba, 4)]
[ ---  CALL (ram, 0x4011bf, 8)]
[(ram, 0x4c4f18, 8) COPY (ram, 0x4c4f18, 8), (ram, 0x4c4f18, 8) INDIRECT (ram, 0x4c4f18, 8) , (const, 0x11ba, 4)]
[(ram, 0x4c4fb8, 8) COPY (ram, 0x4c4fb8, 8), (ram, 0x4c4fb8, 8) INDIRECT (ram, 0x4c4fb8, 8) , (const, 0x11ba, 4)]
[(ram, 0x4c7780, 4) COPY (ram, 0x4c7780, 4), (ram, 0x4c7780, 4) INDIRECT (ram, 0x4c7780, 4) , (const, 0x11ba, 4)]
[(ram, 0x4c7784, 4) COPY (ram, 0x4c7784, 4), (ram, 0x4c7784, 4) INDIRECT (ram, 0x4c7784, 4) , (const, 0x11ba, 4)]
[(ram, 0x4c7788, 8) COPY (ram, 0x4c7788, 8), (ram, 0x4c7788, 8) INDIRECT (ram, 0x4c7788, 8) , (const, 0x11ba, 4)]
[(ram, 0x4c77d0, 4) COPY (ram, 0x4c77d0, 4), (ram, 0x4c77d0, 4) INDIRECT (ram, 0x4c77d0, 4) , (const, 0x11ba, 4)]
[(ram, 0x4c77d4, 4) COPY (ram, 0x4c77d4, 4), (ram, 0x4c77d4, 4) INDIRECT (ram, 0x4c77d4, 4) , (const, 0x11ba, 4)]
[(ram, 0x4c77d8, 8) COPY (ram, 0x4c77d8, 8), (ram, 0x4c77d8, 8) INDIRECT (ram, 0x4c77d8, 8) , (const, 0x11ba, 4)]
[(ram, 0x4c77e0, 4) COPY (ram, 0x4c77e0, 4), (ram, 0x4c77e0, 4) INDIRECT (ram, 0x4c77e0, 4) , (const, 0x11ba, 4)]
[ ---  RETURN (const, 0x1, 4)]
[(register, 0x30, 8) CAST (unique, 0x10001670, 8), (unique, 0x10001670, 8) PTRSUB (const, 0x0, 8) , (const, 0x49a46a, 8)]
[ ---  BRANCH (ram, 0x404f97, 1)]
[(register, 0x30, 8) COPY (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x404f97, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x32, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x5, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x404f97, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x6, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x405fae, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x64, 1)]
[(register, 0x30, 8) COPY (const, 0x49ec40, 8)]
[ ---  BRANCH (ram, 0x404f97, 1)]
[ ---  CBRANCH (ram, 0x405f77, 1) , (register, 0x80, 1)]
[(register, 0x30, 8) COPY (const, 0x49a14d, 8)]
[ ---  BRANCH (ram, 0x404f97, 1)]
[ ---  CBRANCH (ram, 0x40609e, 1) , (register, 0x98, 1)]
[(register, 0x30, 8) COPY (const, 0x49e28c, 8)]
[ ---  BRANCH (ram, 0x404f97, 1)]
[ ---  CBRANCH (ram, 0x406062, 1) , (register, 0x98, 1)]
[(register, 0x30, 8) CAST (unique, 0x10001678, 8), (unique, 0x10001678, 8) PTRSUB (const, 0x0, 8) , (const, 0x4b0b12, 8)]
[ ---  BRANCH (ram, 0x404f97, 1)]
[ ---  CBRANCH (ram, 0x406056, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x78, 1)]
[(register, 0x30, 8) COPY (const, 0x49dd1c, 8)]
[ ---  BRANCH (ram, 0x404f97, 1)]
[ ---  CBRANCH (ram, 0x4064ed, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x58, 1)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x1130, 4)]
[(stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x1130, 4)]
[(stack, 0xfffffffffffffe6c, 4) INDIRECT (stack, 0xfffffffffffffe6c, 4) , (const, 0x1130, 4)]
[(stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0x1130, 4)]
[(stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0x1130, 4)]
[(stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x1130, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x1130, 4)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x1130, 4)]
[(stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x1130, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1130, 4)]
[ ---  CALL (ram, 0x4011bf, 8)]
[(ram, 0x4c4f18, 8) COPY (ram, 0x4c4f18, 8), (ram, 0x4c4f18, 8) INDIRECT (ram, 0x4c4f18, 8) , (const, 0x1130, 4)]
[(ram, 0x4c4fb8, 8) COPY (ram, 0x4c4fb8, 8), (ram, 0x4c4fb8, 8) INDIRECT (ram, 0x4c4fb8, 8) , (const, 0x1130, 4)]
[(ram, 0x4c7780, 4) COPY (ram, 0x4c7780, 4), (ram, 0x4c7780, 4) INDIRECT (ram, 0x4c7780, 4) , (const, 0x1130, 4)]
[(ram, 0x4c7784, 4) COPY (ram, 0x4c7784, 4), (ram, 0x4c7784, 4) INDIRECT (ram, 0x4c7784, 4) , (const, 0x1130, 4)]
[(ram, 0x4c7788, 8) COPY (ram, 0x4c7788, 8), (ram, 0x4c7788, 8) INDIRECT (ram, 0x4c7788, 8) , (const, 0x1130, 4)]
[(ram, 0x4c77d0, 4) COPY (ram, 0x4c77d0, 4), (ram, 0x4c77d0, 4) INDIRECT (ram, 0x4c77d0, 4) , (const, 0x1130, 4)]
[(ram, 0x4c77d4, 4) COPY (ram, 0x4c77d4, 4), (ram, 0x4c77d4, 4) INDIRECT (ram, 0x4c77d4, 4) , (const, 0x1130, 4)]
[(ram, 0x4c77d8, 8) COPY (ram, 0x4c77d8, 8), (ram, 0x4c77d8, 8) INDIRECT (ram, 0x4c77d8, 8) , (const, 0x1130, 4)]
[(ram, 0x4c77e0, 4) COPY (ram, 0x4c77e0, 4), (ram, 0x4c77e0, 4) INDIRECT (ram, 0x4c77e0, 4) , (const, 0x1130, 4)]
[ ---  RETURN (const, 0x1, 4)]
[(register, 0x30, 8) COPY (const, 0x4b0547, 8)]
[ ---  BRANCH (ram, 0x404f97, 1)]
[(stack, 0xfffffffffffffea0, 4) MULTIEQUAL (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4)]
[(stack, 0xfffffffffffffe80, 8) MULTIEQUAL (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8)]
[(ram, 0x4c4f18, 8) INDIRECT (ram, 0x4c4f18, 8) , (const, 0x1122, 4)]
[(ram, 0x4c4fb8, 8) INDIRECT (ram, 0x4c4fb8, 8) , (const, 0x1122, 4)]
[(ram, 0x4c7780, 4) INDIRECT (ram, 0x4c7780, 4) , (const, 0x1122, 4)]
[(ram, 0x4c7784, 4) INDIRECT (ram, 0x4c7784, 4) , (const, 0x1122, 4)]
[(ram, 0x4c7788, 8) INDIRECT (ram, 0x4c7788, 8) , (const, 0x1122, 4)]
[(ram, 0x4c77d0, 4) INDIRECT (ram, 0x4c77d0, 4) , (const, 0x1122, 4)]
[(ram, 0x4c77d4, 4) INDIRECT (ram, 0x4c77d4, 4) , (const, 0x1122, 4)]
[(ram, 0x4c77d8, 8) INDIRECT (ram, 0x4c77d8, 8) , (const, 0x1122, 4)]
[(ram, 0x4c77e0, 4) INDIRECT (ram, 0x4c77e0, 4) , (const, 0x1122, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3400, 8) , (register, 0x30, 8), (unique, 0x3400, 8) PTRADD (register, 0x0, 8) , (register, 0x10, 8) , (const, 0x8, 8), (register, 0x30, 8) MULTIEQUAL (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8)]
[(unique, 0x10000f2c, 8) COPY (unique, 0x3100, 8), (unique, 0x3100, 8) INT_ADD (register, 0x10, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x405478, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x90, 8) , (register, 0x10, 8)]
[(ram, 0x4c77e0, 4) MULTIEQUAL (ram, 0x4c77e0, 4) , (ram, 0x4c77e0, 4)]
[(ram, 0x4c77d8, 8) MULTIEQUAL (ram, 0x4c77d8, 8) , (ram, 0x4c77d8, 8)]
[(ram, 0x4c77d4, 4) MULTIEQUAL (ram, 0x4c77d4, 4) , (ram, 0x4c77d4, 4)]
[(ram, 0x4c77d0, 4) MULTIEQUAL (ram, 0x4c77d0, 4) , (ram, 0x4c77d0, 4)]
[(ram, 0x4c7788, 8) MULTIEQUAL (ram, 0x4c7788, 8) , (ram, 0x4c7788, 8)]
[(ram, 0x4c7784, 4) MULTIEQUAL (ram, 0x4c7784, 4) , (ram, 0x4c7784, 4)]
[(ram, 0x4c7780, 4) MULTIEQUAL (ram, 0x4c7780, 4) , (ram, 0x4c7780, 4)]
[(ram, 0x4c4fb8, 8) MULTIEQUAL (ram, 0x4c4fb8, 8) , (ram, 0x4c4fb8, 8)]
[(ram, 0x4c4f18, 8) MULTIEQUAL (ram, 0x4c4f18, 8) , (ram, 0x4c4f18, 8)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10001680, 8), (unique, 0x10001680, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb8, 8) , (const, 0x5, 8) , (const, 0x8, 8)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10001690, 8), (unique, 0x10001690, 8) INT_ADD (unique, 0x10001688, 8) , (const, 0x2c, 8), (unique, 0x10001688, 8) CAST (register, 0xb8, 8)]
[ ---  CBRANCH (ram, 0x40562f, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xa0, 4) , (const, 0x950412de, 4)]
[(register, 0x10, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1bb80, 4), (unique, 0x1bb80, 4) INT_LEFT (unique, 0xbc80, 4) , (const, 0x18, 4), (unique, 0x1b780, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1ba00, 4), (unique, 0x1ba00, 4) INT_LEFT (unique, 0x1b980, 4) , (const, 0x8, 4), (unique, 0x1b980, 4) INT_AND (unique, 0xbc80, 4) , (const, 0xff00, 4), (unique, 0x1b780, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1b880, 4), (unique, 0x1b880, 4) INT_RIGHT (unique, 0x1b800, 4) , (const, 0x8, 4), (unique, 0x1b800, 4) INT_AND (unique, 0xbc80, 4) , (const, 0xff0000, 4), (unique, 0x1b780, 4) INT_RIGHT (unique, 0xbc80, 4) , (const, 0x18, 4)]
[(register, 0x0, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1bb80, 4), (unique, 0x1bb80, 4) INT_LEFT (unique, 0xbc80, 4) , (const, 0x18, 4), (unique, 0x1b780, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1ba00, 4), (unique, 0x1ba00, 4) INT_LEFT (unique, 0x1b980, 4) , (const, 0x8, 4), (unique, 0x1b980, 4) INT_AND (unique, 0xbc80, 4) , (const, 0xff00, 4), (unique, 0x1b780, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1b880, 4), (unique, 0x1b880, 4) INT_RIGHT (unique, 0x1b800, 4) , (const, 0x8, 4), (unique, 0x1b800, 4) INT_AND (unique, 0xbc80, 4) , (const, 0xff0000, 4), (unique, 0x1b780, 4) INT_RIGHT (unique, 0xbc80, 4) , (const, 0x18, 4)]
[(stack, 0xfffffffffffffeb0, 8) COPY (unique, 0x100016c0, 8), (unique, 0x100016c0, 8) CAST (stack, 0xffffffffffffff58, 8)]
[(unique, 0x3a00, 8) CAST (unique, 0x100016d8, 8), (unique, 0x100016d8, 8) INT_ADD (unique, 0x100016d0, 8) , (unique, 0x10000c40, 8), (unique, 0x100016d0, 8) CAST (register, 0x10, 8), (unique, 0x10000c40, 8) INT_ADD (unique, 0x3900, 8) , (const, 0x4, 8), (unique, 0x3900, 8) INT_MULT (register, 0x0, 8) , (const, 0x4, 8), (register, 0x0, 8) INT_ZEXT (register, 0x0, 4), (register, 0x0, 4) INT_SUB (stack, 0xfffffffffffffe78, 4) , (const, 0x1, 4), (stack, 0xfffffffffffffe78, 4) SUBPIECE (stack, 0xfffffffffffffe78, 8) , (const, 0x0, 8), (register, 0x10, 8) CAST (unique, 0x100016a0, 8), (unique, 0x100016a0, 8) INT_ADD (register, 0x10, 8) , (unique, 0x10001698, 8), (unique, 0x10001698, 8) CAST (register, 0xb8, 8), (register, 0x10, 8) INT_ZEXT (unique, 0x10000748, 4), (unique, 0x10000748, 4) MULTIEQUAL (register, 0x10, 4) , (unique, 0xbc80, 4)]
[(stack, 0xfffffffffffffea4, 4) COPY (const, 0x0, 4)]
[(unique, 0x100011bc, 8) COPY (unique, 0x3400, 8), (unique, 0x3400, 8) CAST (unique, 0x100016b8, 8), (unique, 0x100016b8, 8) INT_ADD (unique, 0x100016b0, 8) , (register, 0x0, 8), (unique, 0x100016b0, 8) CAST (register, 0xb8, 8), (register, 0x0, 8) INT_ZEXT (unique, 0x10000762, 4), (unique, 0x10000762, 4) MULTIEQUAL (register, 0x0, 4) , (unique, 0xbc80, 4)]
[(unique, 0x100011cc, 8) COPY (register, 0xb8, 8)]
[(unique, 0x100011d4, 8) COPY (register, 0x38, 8)]
[(unique, 0x100011dc, 4) COPY (register, 0xa0, 4)]
[(unique, 0x100011f0, 8) COPY (register, 0x0, 8)]
[(unique, 0x10001208, 8) COPY (register, 0x10, 8), (register, 0x10, 8) CAST (unique, 0x100016a0, 8), (unique, 0x100016a0, 8) INT_ADD (register, 0x10, 8) , (unique, 0x10001698, 8), (unique, 0x10001698, 8) CAST (register, 0xb8, 8), (register, 0x10, 8) INT_ZEXT (unique, 0x10000748, 4), (unique, 0x10000748, 4) MULTIEQUAL (register, 0x10, 4) , (unique, 0xbc80, 4)]
[(unique, 0x10001210, 8) COPY (register, 0x30, 8), (register, 0x30, 8) CAST (unique, 0x100016c8, 8), (unique, 0x100016c8, 8) INT_LEFT (register, 0x30, 8) , (const, 0x2, 4), (register, 0x30, 8) INT_AND (unique, 0x100016a8, 8) , (const, 0xffffffff, 8), (unique, 0x100016a8, 8) CAST (stack, 0xfffffffffffffe70, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (unique, 0x10001210, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (unique, 0x10001208, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffec0, 8) MULTIEQUAL (unique, 0x3400, 8) , (stack, 0xfffffffffffffec0, 8)]
[(stack, 0xfffffffffffffeb8, 8) MULTIEQUAL (unique, 0x100011f0, 8) , (stack, 0xfffffffffffffeb8, 8)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(stack, 0xfffffffffffffea8, 8) MULTIEQUAL (register, 0x30, 8) , (stack, 0xfffffffffffffea8, 8)]
[(stack, 0xfffffffffffffea4, 4) MULTIEQUAL (stack, 0xfffffffffffffea4, 4) , (stack, 0xfffffffffffffea4, 4)]
[(stack, 0xfffffffffffffea0, 4) MULTIEQUAL (unique, 0x100011dc, 4) , (stack, 0xfffffffffffffea0, 4)]
[(stack, 0xfffffffffffffe98, 8) MULTIEQUAL (unique, 0x3a00, 8) , (stack, 0xfffffffffffffe98, 8)]
[(stack, 0xfffffffffffffe90, 8) MULTIEQUAL (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8)]
[(stack, 0xfffffffffffffe88, 8) MULTIEQUAL (unique, 0x100011d4, 8) , (stack, 0xfffffffffffffe88, 8)]
[(stack, 0xfffffffffffffe80, 8) MULTIEQUAL (unique, 0x100011cc, 8) , (stack, 0xfffffffffffffe80, 8)]
[(stack, 0xfffffffffffffe78, 8) MULTIEQUAL (unique, 0x100011bc, 8) , (unique, 0xbe00, 8)]
[(stack, 0xfffffffffffffe70, 8) MULTIEQUAL (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8)]
[(stack, 0xfffffffffffffe6c, 4) MULTIEQUAL (stack, 0xfffffffffffffe6c, 4) , (stack, 0xfffffffffffffe6c, 4)]
[(stack, 0xfffffffffffffe60, 8) MULTIEQUAL (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8)]
[(stack, 0xfffffffffffffe30, 4) MULTIEQUAL (stack, 0xfffffffffffffe30, 4) , (stack, 0xfffffffffffffe30, 4)]
[(stack, 0xfffffffffffffda8, 8) MULTIEQUAL (stack, 0xfffffffffffffda8, 8) , (stack, 0xfffffffffffffda8, 8)]
[(stack, 0xfffffffffffffd28, 8) MULTIEQUAL (stack, 0xfffffffffffffd28, 8) , (stack, 0xfffffffffffffd28, 8)]
[(ram, 0x4c77e0, 4) MULTIEQUAL (ram, 0x4c77e0, 4) , (ram, 0x4c77e0, 4)]
[(ram, 0x4c77d8, 8) MULTIEQUAL (ram, 0x4c77d8, 8) , (ram, 0x4c77d8, 8)]
[(ram, 0x4c77d4, 4) MULTIEQUAL (ram, 0x4c77d4, 4) , (ram, 0x4c77d4, 4)]
[(ram, 0x4c77d0, 4) MULTIEQUAL (ram, 0x4c77d0, 4) , (ram, 0x4c77d0, 4)]
[(ram, 0x4c7788, 8) MULTIEQUAL (ram, 0x4c7788, 8) , (ram, 0x4c7788, 8)]
[(ram, 0x4c7784, 4) MULTIEQUAL (ram, 0x4c7784, 4) , (ram, 0x4c7784, 4)]
[(ram, 0x4c7780, 4) MULTIEQUAL (ram, 0x4c7780, 4) , (ram, 0x4c7780, 4)]
[(ram, 0x4c4fb8, 8) MULTIEQUAL (ram, 0x4c4fb8, 8) , (ram, 0x4c4fb8, 8)]
[(ram, 0x4c4f18, 8) MULTIEQUAL (ram, 0x4c4f18, 8) , (ram, 0x4c4f18, 8)]
[(register, 0x20a, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xa8, 8) MULTIEQUAL (register, 0x10, 8) , (register, 0xa8, 8)]
[(register, 0x18, 8) COPY (const, 0x0, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffec0, 8) MULTIEQUAL (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8)]
[(stack, 0xfffffffffffffeb8, 8) MULTIEQUAL (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(stack, 0xfffffffffffffea8, 8) MULTIEQUAL (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8)]
[(stack, 0xfffffffffffffea4, 4) MULTIEQUAL (stack, 0xfffffffffffffea4, 4) , (stack, 0xfffffffffffffea4, 4)]
[(stack, 0xfffffffffffffe98, 8) MULTIEQUAL (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8)]
[(stack, 0xfffffffffffffe90, 8) MULTIEQUAL (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8)]
[(stack, 0xfffffffffffffe88, 8) MULTIEQUAL (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8)]
[(stack, 0xfffffffffffffe80, 8) MULTIEQUAL (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8)]
[(stack, 0xfffffffffffffe78, 8) MULTIEQUAL (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8)]
[(stack, 0xfffffffffffffe70, 8) MULTIEQUAL (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8)]
[(stack, 0xfffffffffffffe6c, 4) MULTIEQUAL (stack, 0xfffffffffffffe6c, 4) , (stack, 0xfffffffffffffe6c, 4)]
[(stack, 0xfffffffffffffe60, 8) MULTIEQUAL (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8)]
[(stack, 0xfffffffffffffe30, 4) MULTIEQUAL (stack, 0xfffffffffffffe30, 4) , (stack, 0xfffffffffffffe30, 4)]
[(stack, 0xfffffffffffffda8, 8) MULTIEQUAL (stack, 0xfffffffffffffda8, 8) , (stack, 0xfffffffffffffda8, 8)]
[(stack, 0xfffffffffffffd28, 8) MULTIEQUAL (stack, 0xfffffffffffffd28, 8) , (stack, 0xfffffffffffffd28, 8)]
[(ram, 0x4c77e0, 4) MULTIEQUAL (ram, 0x4c77e0, 4) , (ram, 0x4c77e0, 4)]
[(ram, 0x4c77d8, 8) MULTIEQUAL (ram, 0x4c77d8, 8) , (ram, 0x4c77d8, 8)]
[(ram, 0x4c77d4, 4) MULTIEQUAL (ram, 0x4c77d4, 4) , (ram, 0x4c77d4, 4)]
[(ram, 0x4c77d0, 4) MULTIEQUAL (ram, 0x4c77d0, 4) , (ram, 0x4c77d0, 4)]
[(ram, 0x4c7788, 8) MULTIEQUAL (ram, 0x4c7788, 8) , (ram, 0x4c7788, 8)]
[(ram, 0x4c7784, 4) MULTIEQUAL (ram, 0x4c7784, 4) , (ram, 0x4c7784, 4)]
[(ram, 0x4c7780, 4) MULTIEQUAL (ram, 0x4c7780, 4) , (ram, 0x4c7780, 4)]
[(ram, 0x4c4fb8, 8) MULTIEQUAL (ram, 0x4c4fb8, 8) , (ram, 0x4c4fb8, 8)]
[(ram, 0x4c4f18, 8) MULTIEQUAL (ram, 0x4c4f18, 8) , (ram, 0x4c4f18, 8)]
[(register, 0x20a, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x18, 8) MULTIEQUAL (register, 0x18, 8) , (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x4053a0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xfffffffffffffea0, 4) , (const, 0x950412de, 4), (stack, 0xfffffffffffffea0, 4) MULTIEQUAL (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4)]
[ ---  CBRANCH (ram, 0x4055d0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x18, 8) , (const, 0x0, 8)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100016e0, 8), (unique, 0x100016e0, 8) CAST (register, 0xa8, 8)]
[ ---  BRANCH (ram, 0x4053b1, 1)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100016e8, 8), (unique, 0x100016e8, 8) CAST (stack, 0xfffffffffffffe78, 8)]
[ ---  CBRANCH (ram, 0x405535, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd00, 4) , (const, 0xffffffff, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100016f8, 8), (unique, 0x100016f8, 8) INT_ADD (register, 0xb8, 8) , (const, 0x8, 8), (register, 0xb8, 8) INT_ADD (register, 0xb8, 8) , (unique, 0x100016f0, 8), (unique, 0x100016f0, 8) CAST (stack, 0xfffffffffffffe80, 8), (register, 0xb8, 8) INT_ZEXT (unique, 0xbc80, 4), (unique, 0xbc80, 4) MULTIEQUAL (unique, 0xbc80, 4) , (unique, 0xbc80, 4)]
[(register, 0xb8, 8) CAST (unique, 0x10001700, 8), (unique, 0x10001700, 8) INT_ADD (register, 0xb8, 8) , (const, 0x4, 8)]
[(register, 0xb0, 8) COPY (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x4053e9, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffec0, 8) MULTIEQUAL (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8)]
[(stack, 0xfffffffffffffeb8, 8) MULTIEQUAL (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(stack, 0xfffffffffffffea8, 8) MULTIEQUAL (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8)]
[(stack, 0xfffffffffffffea4, 4) MULTIEQUAL (stack, 0xfffffffffffffea4, 4) , (stack, 0xfffffffffffffea4, 4)]
[(stack, 0xfffffffffffffea0, 4) MULTIEQUAL (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4)]
[(stack, 0xfffffffffffffe98, 8) MULTIEQUAL (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8)]
[(stack, 0xfffffffffffffe90, 8) MULTIEQUAL (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8)]
[(stack, 0xfffffffffffffe88, 8) MULTIEQUAL (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8)]
[(stack, 0xfffffffffffffe80, 8) MULTIEQUAL (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8)]
[(stack, 0xfffffffffffffe78, 8) MULTIEQUAL (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8)]
[(stack, 0xfffffffffffffe70, 8) MULTIEQUAL (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8)]
[(stack, 0xfffffffffffffe6c, 4) MULTIEQUAL (stack, 0xfffffffffffffe6c, 4) , (stack, 0xfffffffffffffe6c, 4)]
[(stack, 0xfffffffffffffe60, 8) MULTIEQUAL (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8)]
[(stack, 0xfffffffffffffe30, 4) MULTIEQUAL (stack, 0xfffffffffffffe30, 4) , (stack, 0xfffffffffffffe30, 4)]
[(stack, 0xfffffffffffffda8, 8) MULTIEQUAL (stack, 0xfffffffffffffda8, 8) , (stack, 0xfffffffffffffda8, 8)]
[(stack, 0xfffffffffffffd28, 8) MULTIEQUAL (stack, 0xfffffffffffffd28, 8) , (stack, 0xfffffffffffffd28, 8)]
[(ram, 0x4c77e0, 4) MULTIEQUAL (ram, 0x4c77e0, 4) , (ram, 0x4c77e0, 4)]
[(ram, 0x4c77d8, 8) MULTIEQUAL (ram, 0x4c77d8, 8) , (ram, 0x4c77d8, 8)]
[(ram, 0x4c77d4, 4) MULTIEQUAL (ram, 0x4c77d4, 4) , (ram, 0x4c77d4, 4)]
[(ram, 0x4c77d0, 4) MULTIEQUAL (ram, 0x4c77d0, 4) , (ram, 0x4c77d0, 4)]
[(ram, 0x4c7788, 8) MULTIEQUAL (ram, 0x4c7788, 8) , (ram, 0x4c7788, 8)]
[(ram, 0x4c7784, 4) MULTIEQUAL (ram, 0x4c7784, 4) , (ram, 0x4c7784, 4)]
[(ram, 0x4c7780, 4) MULTIEQUAL (ram, 0x4c7780, 4) , (ram, 0x4c7780, 4)]
[(ram, 0x4c4fb8, 8) MULTIEQUAL (ram, 0x4c4fb8, 8) , (ram, 0x4c4fb8, 8)]
[(ram, 0x4c4f18, 8) MULTIEQUAL (ram, 0x4c4f18, 8) , (ram, 0x4c4f18, 8)]
[(register, 0x20a, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb0, 8) INT_ADD (register, 0xb0, 8) , (register, 0x0, 8), (register, 0x0, 8) INT_ZEXT (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (register, 0xb8, 8), (register, 0xb0, 8) MULTIEQUAL (register, 0xb0, 8) , (register, 0xb0, 8), (register, 0xb8, 8) MULTIEQUAL (register, 0xb8, 8) , (register, 0xb8, 8)]
[(register, 0x0, 8) INT_ZEXT (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb8, 8) , (const, 0x1, 8) , (const, 0x4, 8), (register, 0xb8, 8) MULTIEQUAL (register, 0xb8, 8) , (register, 0xb8, 8)]
[ ---  CBRANCH (ram, 0x405538, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0xffffffff, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb8, 8) , (const, 0x1, 8) , (const, 0x4, 8), (register, 0xb8, 8) MULTIEQUAL (register, 0xb8, 8) , (register, 0xb8, 8)]
[(unique, 0x10000f74, 8) COPY (stack, 0xfffffffffffffe88, 8)]
[(unique, 0x10001054, 8) COPY (stack, 0xfffffffffffffeb8, 8)]
[(unique, 0x1000109c, 8) COPY (unique, 0x10001708, 8), (unique, 0x10001708, 8) CAST (stack, 0xfffffffffffffeb0, 8)]
[(unique, 0x100010d4, 8) COPY (stack, 0xfffffffffffffe80, 8)]
[ ---  CBRANCH (ram, 0x4053d0, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESSEQUAL (stack, 0xfffffffffffffe88, 4) , (unique, 0xbc80, 4)]
[ ---  CBRANCH (ram, 0x405560, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (register, 0x0, 8) , (register, 0x0, 8) , (const, 0x8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xf62, 4)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0xf62, 4)]
[(ram, 0x4c4f18, 8) INDIRECT (ram, 0x4c4f18, 8) , (const, 0xf62, 4)]
[(ram, 0x4c4fb8, 8) INDIRECT (ram, 0x4c4fb8, 8) , (const, 0xf62, 4)]
[(ram, 0x4c7780, 4) INDIRECT (ram, 0x4c7780, 4) , (const, 0xf62, 4)]
[(ram, 0x4c7784, 4) INDIRECT (ram, 0x4c7784, 4) , (const, 0xf62, 4)]
[(ram, 0x4c7788, 8) INDIRECT (ram, 0x4c7788, 8) , (const, 0xf62, 4)]
[(ram, 0x4c77d0, 4) INDIRECT (ram, 0x4c77d0, 4) , (const, 0xf62, 4)]
[(ram, 0x4c77d4, 4) INDIRECT (ram, 0x4c77d4, 4) , (const, 0xf62, 4)]
[(ram, 0x4c77d8, 8) INDIRECT (ram, 0x4c77d8, 8) , (const, 0xf62, 4)]
[(ram, 0x4c77e0, 4) INDIRECT (ram, 0x4c77e0, 4) , (const, 0xf62, 4)]
[(stack, 0xfffffffffffffd28, 8) INDIRECT (stack, 0xfffffffffffffd28, 8) , (const, 0xf62, 4)]
[(stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0xf62, 4)]
[(stack, 0xfffffffffffffe30, 4) INDIRECT (stack, 0xfffffffffffffe30, 4) , (const, 0xf62, 4)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0xf62, 4), (stack, 0xfffffffffffffe50, 8) COPY (const, 0x4053e2, 8)]
[(stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0xf62, 4)]
[(stack, 0xfffffffffffffe6c, 4) INDIRECT (stack, 0xfffffffffffffe6c, 4) , (const, 0xf62, 4)]
[(stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0xf62, 4)]
[(stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0xf62, 4)]
[(stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0xf62, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0xf62, 4)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0xf62, 4)]
[(stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0xf62, 4)]
[(stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0xf62, 4)]
[(stack, 0xfffffffffffffea4, 4) INDIRECT (stack, 0xfffffffffffffea4, 4) , (const, 0xf62, 4)]
[(stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0xf62, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0xf62, 4)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0xf62, 4)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0xf62, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0xf62, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0xf62, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0xf62, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0xf62, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0xf62, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0xf62, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0xf62, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0xf62, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0xf62, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0xf62, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xf62, 4)]
[(register, 0xb8, 8) PTRADD (register, 0xb8, 8) , (const, 0x2, 8) , (const, 0x4, 8)]
[(register, 0xb0, 8) INT_ADD (register, 0xb0, 8) , (register, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x401190, 8)]
[(unique, 0x10000f04, 8) COPY (stack, 0xfffffffffffffe78, 8)]
[ ---  CBRANCH (ram, 0x40551c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x18, 8) , (const, 0x0, 8)]
[(unique, 0x10000f0c, 8) COPY (register, 0xa8, 8)]
[ ---  CBRANCH (ram, 0x4055e0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd00, 4) , (const, 0xffffffff, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10001720, 8), (unique, 0x10001720, 8) INT_ADD (register, 0xb8, 8) , (const, 0x8, 8), (register, 0xb8, 8) INT_ADD (register, 0xb8, 8) , (unique, 0x10001718, 8), (unique, 0x10001718, 8) CAST (stack, 0xfffffffffffffe80, 8), (register, 0xb8, 8) INT_ZEXT (register, 0xb8, 4), (register, 0xb8, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1bb80, 4), (unique, 0x1bb80, 4) INT_LEFT (unique, 0xbc80, 4) , (const, 0x18, 4), (unique, 0x1b780, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1ba00, 4), (unique, 0x1ba00, 4) INT_LEFT (unique, 0x1b980, 4) , (const, 0x8, 4), (unique, 0x1b980, 4) INT_AND (unique, 0xbc80, 4) , (const, 0xff00, 4), (unique, 0x1b780, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1b880, 4), (unique, 0x1b880, 4) INT_RIGHT (unique, 0x1b800, 4) , (const, 0x8, 4), (unique, 0x1b800, 4) INT_AND (unique, 0xbc80, 4) , (const, 0xff0000, 4), (unique, 0x1b780, 4) INT_RIGHT (unique, 0xbc80, 4) , (const, 0x18, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10001710, 8), (unique, 0x10001710, 8) CAST (register, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x10000f04, 8) , (unique, 0x10000f0c, 8)]
[(register, 0xb8, 8) CAST (unique, 0x10001728, 8), (unique, 0x10001728, 8) INT_ADD (register, 0xb8, 8) , (const, 0x4, 8)]
[(register, 0xb0, 8) COPY (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x40560b, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffec0, 8) MULTIEQUAL (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8)]
[(stack, 0xfffffffffffffeb8, 8) MULTIEQUAL (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(stack, 0xfffffffffffffea8, 8) MULTIEQUAL (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8)]
[(stack, 0xfffffffffffffea4, 4) MULTIEQUAL (stack, 0xfffffffffffffea4, 4) , (stack, 0xfffffffffffffea4, 4)]
[(stack, 0xfffffffffffffea0, 4) MULTIEQUAL (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4)]
[(stack, 0xfffffffffffffe98, 8) MULTIEQUAL (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8)]
[(stack, 0xfffffffffffffe90, 8) MULTIEQUAL (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8)]
[(stack, 0xfffffffffffffe88, 8) MULTIEQUAL (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8)]
[(stack, 0xfffffffffffffe80, 8) MULTIEQUAL (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8)]
[(stack, 0xfffffffffffffe78, 8) MULTIEQUAL (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8)]
[(stack, 0xfffffffffffffe70, 8) MULTIEQUAL (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8)]
[(stack, 0xfffffffffffffe6c, 4) MULTIEQUAL (stack, 0xfffffffffffffe6c, 4) , (stack, 0xfffffffffffffe6c, 4)]
[(stack, 0xfffffffffffffe60, 8) MULTIEQUAL (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8)]
[(stack, 0xfffffffffffffe30, 4) MULTIEQUAL (stack, 0xfffffffffffffe30, 4) , (stack, 0xfffffffffffffe30, 4)]
[(stack, 0xfffffffffffffda8, 8) MULTIEQUAL (stack, 0xfffffffffffffda8, 8) , (stack, 0xfffffffffffffda8, 8)]
[(stack, 0xfffffffffffffd28, 8) MULTIEQUAL (stack, 0xfffffffffffffd28, 8) , (stack, 0xfffffffffffffd28, 8)]
[(ram, 0x4c77e0, 4) MULTIEQUAL (ram, 0x4c77e0, 4) , (ram, 0x4c77e0, 4)]
[(ram, 0x4c77d8, 8) MULTIEQUAL (ram, 0x4c77d8, 8) , (ram, 0x4c77d8, 8)]
[(ram, 0x4c77d4, 4) MULTIEQUAL (ram, 0x4c77d4, 4) , (ram, 0x4c77d4, 4)]
[(ram, 0x4c77d0, 4) MULTIEQUAL (ram, 0x4c77d0, 4) , (ram, 0x4c77d0, 4)]
[(ram, 0x4c7788, 8) MULTIEQUAL (ram, 0x4c7788, 8) , (ram, 0x4c7788, 8)]
[(ram, 0x4c7784, 4) MULTIEQUAL (ram, 0x4c7784, 4) , (ram, 0x4c7784, 4)]
[(ram, 0x4c7780, 4) MULTIEQUAL (ram, 0x4c7780, 4) , (ram, 0x4c7780, 4)]
[(ram, 0x4c4fb8, 8) MULTIEQUAL (ram, 0x4c4fb8, 8) , (ram, 0x4c4fb8, 8)]
[(ram, 0x4c4f18, 8) MULTIEQUAL (ram, 0x4c4f18, 8) , (ram, 0x4c4f18, 8)]
[(register, 0x20a, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb0, 8) INT_ADD (register, 0xb0, 8) , (register, 0x10, 8), (register, 0x10, 8) INT_ZEXT (register, 0x10, 4), (register, 0x10, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1bb80, 4), (unique, 0x1bb80, 4) INT_LEFT (unique, 0xbc80, 4) , (const, 0x18, 4), (unique, 0x1b780, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1ba00, 4), (unique, 0x1ba00, 4) INT_LEFT (unique, 0x1b980, 4) , (const, 0x8, 4), (unique, 0x1b980, 4) INT_AND (unique, 0xbc80, 4) , (const, 0xff00, 4), (unique, 0x1b780, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1b880, 4), (unique, 0x1b880, 4) INT_RIGHT (unique, 0x1b800, 4) , (const, 0x8, 4), (unique, 0x1b800, 4) INT_AND (unique, 0xbc80, 4) , (const, 0xff0000, 4), (unique, 0x1b780, 4) INT_RIGHT (unique, 0xbc80, 4) , (const, 0x18, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (register, 0xb8, 8), (register, 0xb0, 8) MULTIEQUAL (register, 0xb0, 8) , (register, 0xb0, 8), (register, 0xb8, 8) MULTIEQUAL (register, 0xb8, 8) , (register, 0xb8, 8)]
[(register, 0x0, 8) INT_ZEXT (register, 0x0, 4), (register, 0x0, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1bb80, 4), (unique, 0x1bb80, 4) INT_LEFT (unique, 0xbc80, 4) , (const, 0x18, 4), (unique, 0x1b780, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1ba00, 4), (unique, 0x1ba00, 4) INT_LEFT (unique, 0x1b980, 4) , (const, 0x8, 4), (unique, 0x1b980, 4) INT_AND (unique, 0xbc80, 4) , (const, 0xff00, 4), (unique, 0x1b780, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1b880, 4), (unique, 0x1b880, 4) INT_RIGHT (unique, 0x1b800, 4) , (const, 0x8, 4), (unique, 0x1b800, 4) INT_AND (unique, 0xbc80, 4) , (const, 0xff0000, 4), (unique, 0x1b780, 4) INT_RIGHT (unique, 0xbc80, 4) , (const, 0x18, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb8, 8) , (const, 0x1, 8) , (const, 0x4, 8), (register, 0xb8, 8) MULTIEQUAL (register, 0xb8, 8) , (register, 0xb8, 8)]
[ ---  CBRANCH (ram, 0x405538, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0xffffffff, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb8, 8) , (const, 0x1, 8) , (const, 0x4, 8), (register, 0xb8, 8) MULTIEQUAL (register, 0xb8, 8) , (register, 0xb8, 8)]
[(unique, 0x10000f7c, 8) COPY (stack, 0xfffffffffffffe88, 8)]
[(unique, 0x1000105c, 8) COPY (stack, 0xfffffffffffffeb8, 8)]
[(unique, 0x100010a4, 8) COPY (unique, 0x10001730, 8), (unique, 0x10001730, 8) CAST (stack, 0xfffffffffffffeb0, 8)]
[(unique, 0x100010dc, 8) COPY (stack, 0xfffffffffffffe80, 8)]
[ ---  CBRANCH (ram, 0x4055f0, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESSEQUAL (stack, 0xfffffffffffffe88, 4) , (register, 0x0, 4)]
[(register, 0xb8, 8) MULTIEQUAL (unique, 0x100010c4, 8) , (unique, 0x100010cc, 8) , (unique, 0x100010d4, 8) , (unique, 0x100010dc, 8)]
[(register, 0xb0, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (unique, 0x1000109c, 8) , (unique, 0x100010a4, 8)]
[(register, 0xa8, 8) MULTIEQUAL (unique, 0x10001044, 8) , (unique, 0x1000104c, 8) , (unique, 0x10001054, 8) , (unique, 0x1000105c, 8)]
[(register, 0x18, 8) MULTIEQUAL (register, 0x38, 8) , (register, 0x38, 8) , (unique, 0x10000f74, 8) , (unique, 0x10000f7c, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xebe, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4c4f18, 8) INDIRECT (ram, 0x4c4f18, 8) , (const, 0xebe, 4), (ram, 0x4c4f18, 8) MULTIEQUAL (ram, 0x4c4f18, 8) , (ram, 0x4c4f18, 8) , (ram, 0x4c4f18, 8) , (ram, 0x4c4f18, 8)]
[(ram, 0x4c4fb8, 8) INDIRECT (ram, 0x4c4fb8, 8) , (const, 0xebe, 4), (ram, 0x4c4fb8, 8) MULTIEQUAL (ram, 0x4c4fb8, 8) , (ram, 0x4c4fb8, 8) , (ram, 0x4c4fb8, 8) , (ram, 0x4c4fb8, 8)]
[(ram, 0x4c7780, 4) INDIRECT (ram, 0x4c7780, 4) , (const, 0xebe, 4), (ram, 0x4c7780, 4) MULTIEQUAL (ram, 0x4c7780, 4) , (ram, 0x4c7780, 4) , (ram, 0x4c7780, 4) , (ram, 0x4c7780, 4)]
[(ram, 0x4c7784, 4) INDIRECT (ram, 0x4c7784, 4) , (const, 0xebe, 4), (ram, 0x4c7784, 4) MULTIEQUAL (ram, 0x4c7784, 4) , (ram, 0x4c7784, 4) , (ram, 0x4c7784, 4) , (ram, 0x4c7784, 4)]
[(ram, 0x4c7788, 8) INDIRECT (ram, 0x4c7788, 8) , (const, 0xebe, 4), (ram, 0x4c7788, 8) MULTIEQUAL (ram, 0x4c7788, 8) , (ram, 0x4c7788, 8) , (ram, 0x4c7788, 8) , (ram, 0x4c7788, 8)]
[(ram, 0x4c77d0, 4) INDIRECT (ram, 0x4c77d0, 4) , (const, 0xebe, 4), (ram, 0x4c77d0, 4) MULTIEQUAL (ram, 0x4c77d0, 4) , (ram, 0x4c77d0, 4) , (ram, 0x4c77d0, 4) , (ram, 0x4c77d0, 4)]
[(ram, 0x4c77d4, 4) INDIRECT (ram, 0x4c77d4, 4) , (const, 0xebe, 4), (ram, 0x4c77d4, 4) MULTIEQUAL (ram, 0x4c77d4, 4) , (ram, 0x4c77d4, 4) , (ram, 0x4c77d4, 4) , (ram, 0x4c77d4, 4)]
[(ram, 0x4c77d8, 8) INDIRECT (ram, 0x4c77d8, 8) , (const, 0xebe, 4), (ram, 0x4c77d8, 8) MULTIEQUAL (ram, 0x4c77d8, 8) , (ram, 0x4c77d8, 8) , (ram, 0x4c77d8, 8) , (ram, 0x4c77d8, 8)]
[(ram, 0x4c77e0, 4) INDIRECT (ram, 0x4c77e0, 4) , (const, 0xebe, 4), (ram, 0x4c77e0, 4) MULTIEQUAL (ram, 0x4c77e0, 4) , (ram, 0x4c77e0, 4) , (ram, 0x4c77e0, 4) , (ram, 0x4c77e0, 4)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0xebe, 4), (stack, 0xfffffffffffffe50, 8) COPY (const, 0x40541f, 8)]
[(stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0xebe, 4), (stack, 0xfffffffffffffe60, 8) MULTIEQUAL (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8)]
[(stack, 0xfffffffffffffe6c, 4) INDIRECT (stack, 0xfffffffffffffe6c, 4) , (const, 0xebe, 4), (stack, 0xfffffffffffffe6c, 4) MULTIEQUAL (stack, 0xfffffffffffffe6c, 4) , (stack, 0xfffffffffffffe6c, 4) , (stack, 0xfffffffffffffe6c, 4) , (stack, 0xfffffffffffffe6c, 4)]
[(stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0xebe, 4), (stack, 0xfffffffffffffe70, 8) MULTIEQUAL (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8)]
[(stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0xebe, 4), (stack, 0xfffffffffffffe78, 8) MULTIEQUAL (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8)]
[(stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0xebe, 4), (stack, 0xfffffffffffffe80, 8) MULTIEQUAL (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0xebe, 4), (stack, 0xfffffffffffffe88, 8) MULTIEQUAL (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0xebe, 4), (stack, 0xfffffffffffffe90, 8) MULTIEQUAL (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8)]
[(stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0xebe, 4), (stack, 0xfffffffffffffe98, 8) MULTIEQUAL (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8)]
[(stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0xebe, 4), (stack, 0xfffffffffffffea0, 4) MULTIEQUAL (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4)]
[(stack, 0xfffffffffffffea4, 4) INDIRECT (stack, 0xfffffffffffffea4, 4) , (const, 0xebe, 4), (stack, 0xfffffffffffffea4, 4) MULTIEQUAL (stack, 0xfffffffffffffea4, 4) , (stack, 0xfffffffffffffea4, 4) , (stack, 0xfffffffffffffea4, 4) , (stack, 0xfffffffffffffea4, 4)]
[(stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0xebe, 4), (stack, 0xfffffffffffffea8, 8) MULTIEQUAL (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0xebe, 4), (stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0xebe, 4), (stack, 0xfffffffffffffeb8, 8) MULTIEQUAL (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0xebe, 4), (stack, 0xfffffffffffffec0, 8) MULTIEQUAL (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0xebe, 4), (stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0xebe, 4), (stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0xebe, 4), (stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0xebe, 4), (stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0xebe, 4), (stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0xebe, 4), (stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0xebe, 4), (stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0xebe, 4), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xebe, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CALL (ram, 0x426b40, 8) , (register, 0x0, 8)]
[(register, 0x38, 8) COPY (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x405272, 1)]
[ ---  CBRANCH (ram, 0x405560, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (register, 0x0, 8) , (register, 0x0, 8) , (const, 0x8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xedc, 4)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0xedc, 4)]
[(ram, 0x4c4f18, 8) INDIRECT (ram, 0x4c4f18, 8) , (const, 0xedc, 4)]
[(ram, 0x4c4fb8, 8) INDIRECT (ram, 0x4c4fb8, 8) , (const, 0xedc, 4)]
[(ram, 0x4c7780, 4) INDIRECT (ram, 0x4c7780, 4) , (const, 0xedc, 4)]
[(ram, 0x4c7784, 4) INDIRECT (ram, 0x4c7784, 4) , (const, 0xedc, 4)]
[(ram, 0x4c7788, 8) INDIRECT (ram, 0x4c7788, 8) , (const, 0xedc, 4)]
[(ram, 0x4c77d0, 4) INDIRECT (ram, 0x4c77d0, 4) , (const, 0xedc, 4)]
[(ram, 0x4c77d4, 4) INDIRECT (ram, 0x4c77d4, 4) , (const, 0xedc, 4)]
[(ram, 0x4c77d8, 8) INDIRECT (ram, 0x4c77d8, 8) , (const, 0xedc, 4)]
[(ram, 0x4c77e0, 4) INDIRECT (ram, 0x4c77e0, 4) , (const, 0xedc, 4)]
[(stack, 0xfffffffffffffd28, 8) INDIRECT (stack, 0xfffffffffffffd28, 8) , (const, 0xedc, 4)]
[(stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0xedc, 4)]
[(stack, 0xfffffffffffffe30, 4) INDIRECT (stack, 0xfffffffffffffe30, 4) , (const, 0xedc, 4)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0xedc, 4), (stack, 0xfffffffffffffe50, 8) COPY (const, 0x405604, 8)]
[(stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0xedc, 4)]
[(stack, 0xfffffffffffffe6c, 4) INDIRECT (stack, 0xfffffffffffffe6c, 4) , (const, 0xedc, 4)]
[(stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0xedc, 4)]
[(stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0xedc, 4)]
[(stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0xedc, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0xedc, 4)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0xedc, 4)]
[(stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0xedc, 4)]
[(stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0xedc, 4)]
[(stack, 0xfffffffffffffea4, 4) INDIRECT (stack, 0xfffffffffffffea4, 4) , (const, 0xedc, 4)]
[(stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0xedc, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0xedc, 4)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0xedc, 4)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0xedc, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0xedc, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0xedc, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0xedc, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0xedc, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0xedc, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0xedc, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0xedc, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0xedc, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0xedc, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0xedc, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xedc, 4)]
[(register, 0xb8, 8) PTRADD (register, 0xb8, 8) , (const, 0x2, 8) , (const, 0x4, 8)]
[(register, 0xb0, 8) INT_ADD (register, 0xb0, 8) , (register, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x401190, 8)]
[(register, 0xb0, 8) COPY (const, 0x0, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffec0, 8) MULTIEQUAL (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8)]
[(stack, 0xfffffffffffffeb8, 8) MULTIEQUAL (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(stack, 0xfffffffffffffea8, 8) MULTIEQUAL (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8)]
[(stack, 0xfffffffffffffea4, 4) MULTIEQUAL (stack, 0xfffffffffffffea4, 4) , (stack, 0xfffffffffffffea4, 4) , (stack, 0xfffffffffffffea4, 4)]
[(stack, 0xfffffffffffffea0, 4) MULTIEQUAL (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4)]
[(stack, 0xfffffffffffffe98, 8) MULTIEQUAL (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8)]
[(stack, 0xfffffffffffffe90, 8) MULTIEQUAL (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8)]
[(stack, 0xfffffffffffffe88, 8) MULTIEQUAL (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8)]
[(stack, 0xfffffffffffffe80, 8) MULTIEQUAL (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8)]
[(stack, 0xfffffffffffffe78, 8) MULTIEQUAL (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8)]
[(stack, 0xfffffffffffffe70, 8) MULTIEQUAL (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8)]
[(stack, 0xfffffffffffffe6c, 4) MULTIEQUAL (stack, 0xfffffffffffffe6c, 4) , (stack, 0xfffffffffffffe6c, 4) , (stack, 0xfffffffffffffe6c, 4)]
[(stack, 0xfffffffffffffe60, 8) MULTIEQUAL (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8)]
[(stack, 0xfffffffffffffe30, 4) MULTIEQUAL (stack, 0xfffffffffffffe30, 4) , (stack, 0xfffffffffffffe30, 4) , (stack, 0xfffffffffffffe30, 4)]
[(stack, 0xfffffffffffffda8, 8) MULTIEQUAL (stack, 0xfffffffffffffda8, 8) , (stack, 0xfffffffffffffda8, 8) , (stack, 0xfffffffffffffda8, 8)]
[(stack, 0xfffffffffffffd28, 8) MULTIEQUAL (stack, 0xfffffffffffffd28, 8) , (stack, 0xfffffffffffffd28, 8) , (stack, 0xfffffffffffffd28, 8)]
[(ram, 0x4c77e0, 4) MULTIEQUAL (ram, 0x4c77e0, 4) , (ram, 0x4c77e0, 4) , (ram, 0x4c77e0, 4)]
[(ram, 0x4c77d8, 8) MULTIEQUAL (ram, 0x4c77d8, 8) , (ram, 0x4c77d8, 8) , (ram, 0x4c77d8, 8)]
[(ram, 0x4c77d4, 4) MULTIEQUAL (ram, 0x4c77d4, 4) , (ram, 0x4c77d4, 4) , (ram, 0x4c77d4, 4)]
[(ram, 0x4c77d0, 4) MULTIEQUAL (ram, 0x4c77d0, 4) , (ram, 0x4c77d0, 4) , (ram, 0x4c77d0, 4)]
[(ram, 0x4c7788, 8) MULTIEQUAL (ram, 0x4c7788, 8) , (ram, 0x4c7788, 8) , (ram, 0x4c7788, 8)]
[(ram, 0x4c7784, 4) MULTIEQUAL (ram, 0x4c7784, 4) , (ram, 0x4c7784, 4) , (ram, 0x4c7784, 4)]
[(ram, 0x4c7780, 4) MULTIEQUAL (ram, 0x4c7780, 4) , (ram, 0x4c7780, 4) , (ram, 0x4c7780, 4)]
[(ram, 0x4c4fb8, 8) MULTIEQUAL (ram, 0x4c4fb8, 8) , (ram, 0x4c4fb8, 8) , (ram, 0x4c4fb8, 8)]
[(ram, 0x4c4f18, 8) MULTIEQUAL (ram, 0x4c4f18, 8) , (ram, 0x4c4f18, 8) , (ram, 0x4c4f18, 8)]
[(register, 0x20a, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1) , (register, 0x20a, 1)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x376, 4), (stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x376, 4), (stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3e80, 8) , (register, 0xb0, 8), (unique, 0x3e80, 8) PTRADD (unique, 0x10000c58, 8) , (register, 0x18, 8) , (const, 0x8, 8), (unique, 0x10000c58, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff18, 8), (register, 0xb0, 8) MULTIEQUAL (register, 0xb0, 8) , (register, 0xb0, 8) , (register, 0xb0, 8)]
[ ---  CBRANCH (ram, 0x4055c0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x18, 8) , (const, 0x1, 8)]
[(unique, 0xbd00, 4) INT_ADD (stack, 0xfffffffffffffea4, 4) , (const, 0x1, 4)]
[(unique, 0xbd80, 8) CAST (unique, 0x10001740, 8), (unique, 0x10001740, 8) INT_ADD (unique, 0x10001738, 8) , (register, 0x0, 8), (unique, 0x10001738, 8) CAST (stack, 0xfffffffffffffea8, 8), (register, 0x0, 8) INT_ADD (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffec0, 8) MULTIEQUAL (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8)]
[(stack, 0xfffffffffffffea8, 8) MULTIEQUAL (unique, 0xbd80, 8) , (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8)]
[(stack, 0xfffffffffffffea4, 4) MULTIEQUAL (unique, 0xbd00, 4) , (stack, 0xfffffffffffffea4, 4) , (stack, 0xfffffffffffffea4, 4)]
[(stack, 0xfffffffffffffe90, 8) MULTIEQUAL (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8)]
[(stack, 0xfffffffffffffe70, 8) MULTIEQUAL (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8)]
[(stack, 0xfffffffffffffe6c, 4) MULTIEQUAL (stack, 0xfffffffffffffe6c, 4) , (stack, 0xfffffffffffffe6c, 4) , (stack, 0xfffffffffffffe6c, 4)]
[(stack, 0xfffffffffffffe60, 8) MULTIEQUAL (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8)]
[(stack, 0xfffffffffffffe30, 4) MULTIEQUAL (stack, 0xfffffffffffffe30, 4) , (stack, 0xfffffffffffffe30, 4) , (stack, 0xfffffffffffffe30, 4)]
[(stack, 0xfffffffffffffda8, 8) MULTIEQUAL (stack, 0xfffffffffffffda8, 8) , (stack, 0xfffffffffffffda8, 8) , (stack, 0xfffffffffffffda8, 8)]
[(stack, 0xfffffffffffffd28, 8) MULTIEQUAL (stack, 0xfffffffffffffd28, 8) , (stack, 0xfffffffffffffd28, 8) , (stack, 0xfffffffffffffd28, 8)]
[(ram, 0x4c77e0, 4) MULTIEQUAL (ram, 0x4c77e0, 4) , (ram, 0x4c77e0, 4) , (ram, 0x4c77e0, 4)]
[(ram, 0x4c77d8, 8) MULTIEQUAL (ram, 0x4c77d8, 8) , (ram, 0x4c77d8, 8) , (ram, 0x4c77d8, 8)]
[(ram, 0x4c77d4, 4) MULTIEQUAL (ram, 0x4c77d4, 4) , (ram, 0x4c77d4, 4) , (ram, 0x4c77d4, 4)]
[(ram, 0x4c77d0, 4) MULTIEQUAL (ram, 0x4c77d0, 4) , (ram, 0x4c77d0, 4) , (ram, 0x4c77d0, 4)]
[(ram, 0x4c7788, 8) MULTIEQUAL (ram, 0x4c7788, 8) , (ram, 0x4c7788, 8) , (ram, 0x4c7788, 8)]
[(ram, 0x4c7784, 4) MULTIEQUAL (ram, 0x4c7784, 4) , (ram, 0x4c7784, 4) , (ram, 0x4c7784, 4)]
[(ram, 0x4c7780, 4) MULTIEQUAL (ram, 0x4c7780, 4) , (ram, 0x4c7780, 4) , (ram, 0x4c7780, 4)]
[(ram, 0x4c4fb8, 8) MULTIEQUAL (ram, 0x4c4fb8, 8) , (ram, 0x4c4fb8, 8) , (ram, 0x4c4fb8, 8)]
[(ram, 0x4c4f18, 8) MULTIEQUAL (ram, 0x4c4f18, 8) , (ram, 0x4c4f18, 8) , (ram, 0x4c4f18, 8)]
[(register, 0x20a, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1) , (register, 0x20a, 1)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x10000ed4, 8) COPY (stack, 0xfffffffffffffeb8, 8), (stack, 0xfffffffffffffeb8, 8) MULTIEQUAL (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8)]
[(unique, 0x10000ecc, 8) COPY (unique, 0x10001748, 8), (unique, 0x10001748, 8) CAST (stack, 0xfffffffffffffeb0, 8), (stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(unique, 0x10000ec4, 4) COPY (stack, 0xfffffffffffffea0, 4), (stack, 0xfffffffffffffea0, 4) MULTIEQUAL (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4)]
[(unique, 0x10000ebc, 8) COPY (stack, 0xfffffffffffffe88, 8), (stack, 0xfffffffffffffe88, 8) MULTIEQUAL (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8)]
[(unique, 0x10000eac, 8) COPY (stack, 0xfffffffffffffe80, 8), (stack, 0xfffffffffffffe80, 8) MULTIEQUAL (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8)]
[(unique, 0xbe00, 8) CAST (unique, 0x10001758, 8), (unique, 0x10001758, 8) INT_ADD (unique, 0x10001750, 8) , (const, 0x4, 8), (unique, 0x10001750, 8) CAST (stack, 0xfffffffffffffe78, 8), (stack, 0xfffffffffffffe78, 8) MULTIEQUAL (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8)]
[ ---  CBRANCH (ram, 0x405500, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xfffffffffffffe98, 8) , (register, 0xa8, 8), (register, 0xa8, 8) CAST (unique, 0x10001768, 8), (unique, 0x10001768, 8) INT_ADD (unique, 0x10001760, 8) , (const, 0x4, 8), (unique, 0x10001760, 8) CAST (register, 0xa8, 8), (stack, 0xfffffffffffffe98, 8) MULTIEQUAL (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8)]
[(register, 0x28, 8) INT_ZEXT (stack, 0xfffffffffffffea4, 4)]
[ ---  CBRANCH (ram, 0x4059c7, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xfffffffffffffea4, 4) , (const, 0x0, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x54d, 4)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x54d, 4)]
[(ram, 0x4c4f18, 8) INDIRECT (ram, 0x4c4f18, 8) , (const, 0x54d, 4)]
[(ram, 0x4c4fb8, 8) INDIRECT (ram, 0x4c4fb8, 8) , (const, 0x54d, 4)]
[(ram, 0x4c7780, 4) INDIRECT (ram, 0x4c7780, 4) , (const, 0x54d, 4)]
[(ram, 0x4c7784, 4) INDIRECT (ram, 0x4c7784, 4) , (const, 0x54d, 4)]
[(ram, 0x4c7788, 8) INDIRECT (ram, 0x4c7788, 8) , (const, 0x54d, 4)]
[(ram, 0x4c77d0, 4) INDIRECT (ram, 0x4c77d0, 4) , (const, 0x54d, 4)]
[(ram, 0x4c77d4, 4) INDIRECT (ram, 0x4c77d4, 4) , (const, 0x54d, 4)]
[(ram, 0x4c77d8, 8) INDIRECT (ram, 0x4c77d8, 8) , (const, 0x54d, 4)]
[(ram, 0x4c77e0, 4) INDIRECT (ram, 0x4c77e0, 4) , (const, 0x54d, 4)]
[(stack, 0xfffffffffffffd28, 8) INDIRECT (stack, 0xfffffffffffffd28, 8) , (const, 0x54d, 4)]
[(stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x54d, 4)]
[(stack, 0xfffffffffffffe30, 4) INDIRECT (stack, 0xfffffffffffffe30, 4) , (const, 0x54d, 4)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x54d, 4), (stack, 0xfffffffffffffe50, 8) COPY (const, 0x4059de, 8)]
[(stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x54d, 4)]
[(stack, 0xfffffffffffffe6c, 4) INDIRECT (stack, 0xfffffffffffffe6c, 4) , (const, 0x54d, 4)]
[(stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0x54d, 4)]
[(stack, 0xfffffffffffffe78, 8) INDIRECT (unique, 0xbe00, 8) , (const, 0x54d, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x54d, 4)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x54d, 4)]
[(stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x54d, 4)]
[(stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x54d, 4)]
[(stack, 0xfffffffffffffea4, 4) INDIRECT (stack, 0xfffffffffffffea4, 4) , (const, 0x54d, 4)]
[(stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x54d, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x54d, 4)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x54d, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x54d, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x54d, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x54d, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x54d, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x54d, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x54d, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x54d, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x54d, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x54d, 4)]
[(unique, 0x10000edc, 8) COPY (stack, 0xfffffffffffffec0, 8), (stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x54d, 4)]
[(unique, 0x10000eb4, 8) COPY (stack, 0xfffffffffffffe80, 8), (stack, 0xfffffffffffffe80, 8) INDIRECT (unique, 0x100011c4, 8) , (const, 0x54d, 4), (unique, 0x100011c4, 8) COPY (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x405270, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10001778, 8), (unique, 0x10001778, 8) CALL (ram, 0x426550, 8) , (unique, 0x10001770, 8), (unique, 0x10001770, 8) CAST (register, 0x38, 8), (register, 0x38, 8) PTRADD (stack, 0xfffffffffffffea8, 8) , (unique, 0x10000c90, 8) , (const, 0x8, 8), (unique, 0x10000c90, 8) INT_MULT (register, 0x38, 8) , (const, 0x2, 8), (register, 0x38, 8) INT_ZEXT (unique, 0x10000782, 4), (unique, 0x10000782, 4) INT_MULT (stack, 0xfffffffffffffea4, 4) , (const, 0x2, 4)]
[(ram, 0x4c4f18, 8) INDIRECT (ram, 0x4c4f18, 8) , (const, 0x55e, 4)]
[(ram, 0x4c4fb8, 8) INDIRECT (ram, 0x4c4fb8, 8) , (const, 0x55e, 4)]
[(ram, 0x4c7780, 4) INDIRECT (ram, 0x4c7780, 4) , (const, 0x55e, 4)]
[(ram, 0x4c7784, 4) INDIRECT (ram, 0x4c7784, 4) , (const, 0x55e, 4)]
[(ram, 0x4c7788, 8) INDIRECT (ram, 0x4c7788, 8) , (const, 0x55e, 4)]
[(ram, 0x4c77d0, 4) INDIRECT (ram, 0x4c77d0, 4) , (const, 0x55e, 4)]
[(ram, 0x4c77d4, 4) INDIRECT (ram, 0x4c77d4, 4) , (const, 0x55e, 4)]
[(ram, 0x4c77d8, 8) INDIRECT (ram, 0x4c77d8, 8) , (const, 0x55e, 4)]
[(ram, 0x4c77e0, 4) INDIRECT (ram, 0x4c77e0, 4) , (const, 0x55e, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0x10001780, 8), (unique, 0x10001780, 8) CAST (register, 0x0, 8), (unique, 0x3100, 8) PTRADD (unique, 0x10000ed4, 8) , (const, 0x4, 8) , (const, 0x8, 8)]
[(stack, 0xfffffffffffffea0, 4) COPY (const, 0x0, 4)]
[(stack, 0xfffffffffffffe78, 8) CAST (unique, 0x10001790, 8), (unique, 0x10001790, 8) INT_OR (unique, 0x100008a8, 8) , (unique, 0x100008b0, 8), (unique, 0x100008b0, 8) INT_ZEXT (unique, 0x10000ec4, 4), (unique, 0x100008a8, 8) INT_AND (unique, 0x10001788, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10001788, 8) CAST (stack, 0xfffffffffffffe78, 8)]
[(register, 0x8, 8) CAST (unique, 0x100017a8, 8), (unique, 0x100017a8, 8) INT_ADD (unique, 0x10001798, 8) , (unique, 0x100017a0, 8), (unique, 0x100017a0, 8) CAST (unique, 0x3400, 8), (unique, 0x10001798, 8) CAST (stack, 0xfffffffffffffed0, 8), (unique, 0x3400, 8) PTRADD (register, 0x8, 8) , (unique, 0x10000cb8, 8) , (const, 0x8, 8), (unique, 0x10000cb8, 8) INT_MULT (register, 0x28, 8) , (const, 0x2, 8), (register, 0x8, 8) PTRADD (register, 0x0, 8) , (unique, 0x10000ca8, 8) , (const, 0x8, 8), (unique, 0x10000ca8, 8) INT_MULT (register, 0x28, 8) , (const, 0x2, 8)]
[(stack, 0xfffffffffffffed0, 8) COPY (unique, 0x100017b0, 8), (unique, 0x100017b0, 8) CAST (unique, 0x10000ecc, 8)]
[(stack, 0xfffffffffffffee8, 8) COPY (unique, 0x10000ed4, 8)]
[(stack, 0xfffffffffffffec0, 8) COPY (unique, 0x10000ebc, 8)]
[(unique, 0x10000fd4, 8) COPY (stack, 0xfffffffffffffec8, 8)]
[(unique, 0x10001218, 8) COPY (register, 0x28, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (unique, 0x3400, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (unique, 0x10001218, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (register, 0x8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffec0, 8) MULTIEQUAL (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8)]
[(stack, 0xfffffffffffffeb8, 8) MULTIEQUAL (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(stack, 0xfffffffffffffea8, 8) MULTIEQUAL (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8)]
[(stack, 0xfffffffffffffea4, 4) MULTIEQUAL (stack, 0xfffffffffffffea4, 4) , (stack, 0xfffffffffffffea4, 4)]
[(stack, 0xfffffffffffffea0, 4) MULTIEQUAL (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4)]
[(stack, 0xfffffffffffffe98, 8) MULTIEQUAL (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8)]
[(stack, 0xfffffffffffffe90, 8) MULTIEQUAL (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8)]
[(stack, 0xfffffffffffffe88, 8) MULTIEQUAL (register, 0x0, 8) , (stack, 0xfffffffffffffe88, 8)]
[(stack, 0xfffffffffffffe80, 8) MULTIEQUAL (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8)]
[(stack, 0xfffffffffffffe78, 8) MULTIEQUAL (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8)]
[(stack, 0xfffffffffffffe70, 8) MULTIEQUAL (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8)]
[(stack, 0xfffffffffffffe6c, 4) MULTIEQUAL (stack, 0xfffffffffffffe6c, 4) , (stack, 0xfffffffffffffe6c, 4)]
[(stack, 0xfffffffffffffe60, 8) MULTIEQUAL (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8)]
[(stack, 0xfffffffffffffe30, 4) MULTIEQUAL (stack, 0xfffffffffffffe30, 4) , (stack, 0xfffffffffffffe30, 4)]
[(stack, 0xfffffffffffffda8, 8) MULTIEQUAL (stack, 0xfffffffffffffda8, 8) , (stack, 0xfffffffffffffda8, 8)]
[(stack, 0xfffffffffffffd28, 8) MULTIEQUAL (stack, 0xfffffffffffffd28, 8) , (stack, 0xfffffffffffffd28, 8)]
[(ram, 0x4c77e0, 4) MULTIEQUAL (ram, 0x4c77e0, 4) , (ram, 0x4c77e0, 4)]
[(ram, 0x4c77d8, 8) MULTIEQUAL (ram, 0x4c77d8, 8) , (ram, 0x4c77d8, 8)]
[(ram, 0x4c77d4, 4) MULTIEQUAL (ram, 0x4c77d4, 4) , (ram, 0x4c77d4, 4)]
[(ram, 0x4c77d0, 4) MULTIEQUAL (ram, 0x4c77d0, 4) , (ram, 0x4c77d0, 4)]
[(ram, 0x4c7788, 8) MULTIEQUAL (ram, 0x4c7788, 8) , (ram, 0x4c7788, 8)]
[(ram, 0x4c7784, 4) MULTIEQUAL (ram, 0x4c7784, 4) , (ram, 0x4c7784, 4)]
[(ram, 0x4c7780, 4) MULTIEQUAL (ram, 0x4c7780, 4) , (ram, 0x4c7780, 4)]
[(ram, 0x4c4fb8, 8) MULTIEQUAL (ram, 0x4c4fb8, 8) , (ram, 0x4c4fb8, 8)]
[(ram, 0x4c4f18, 8) MULTIEQUAL (ram, 0x4c4f18, 8) , (ram, 0x4c4f18, 8)]
[(register, 0x20a, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb8, 8) MULTIEQUAL (unique, 0x10000eac, 8) , (register, 0xb8, 8)]
[(register, 0xb0, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0xb0, 8)]
[(register, 0xa8, 8) MULTIEQUAL (unique, 0x10000edc, 8) , (register, 0xa8, 8)]
[(register, 0xa0, 8) MULTIEQUAL (unique, 0x10000fd4, 8) , (register, 0xa0, 8)]
[(unique, 0x100008f0, 1) COPY (const, 0x0, 1)]
[(unique, 0x100008ec, 1) MULTIEQUAL (unique, 0x100008f0, 1) , (unique, 0x100008ef, 1)]
[ ---  CBRANCH (ram, 0x405bc8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xfffffffffffffe78, 4) , (const, 0x950412de, 4), (stack, 0xfffffffffffffe78, 4) SUBPIECE (stack, 0xfffffffffffffe78, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x405dfa, 1) , (unique, 0x100008ec, 1)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100017b8, 8), (unique, 0x100017b8, 8) CAST (register, 0xa0, 8)]
[ ---  BRANCH (ram, 0x405bd4, 1)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100017c0, 8), (unique, 0x100017c0, 8) CAST (register, 0xa8, 8)]
[ ---  CBRANCH (ram, 0x405a80, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd00, 4) , (const, 0xffffffff, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100017d0, 8), (unique, 0x100017d0, 8) INT_ADD (register, 0x8, 8) , (const, 0x8, 8), (register, 0x8, 8) INT_ADD (register, 0x8, 8) , (unique, 0x100017c8, 8), (unique, 0x100017c8, 8) CAST (register, 0xb8, 8), (register, 0x8, 8) INT_ZEXT (unique, 0xbc80, 4), (unique, 0xbc80, 4) MULTIEQUAL (unique, 0xbc80, 4) , (unique, 0xbc80, 4)]
[(register, 0x8, 8) INT_ADD (register, 0x8, 8) , (const, 0x4, 8)]
[ ---  BRANCH (ram, 0x405bf4, 1)]
[(register, 0x0, 8) INT_ZEXT (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100017d8, 8), (unique, 0x100017d8, 8) INT_ADD (register, 0x8, 8) , (const, 0x4, 8), (register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8)]
[ ---  CBRANCH (ram, 0x405a80, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbc80, 4) , (const, 0xffffffff, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100017d8, 8), (unique, 0x100017d8, 8) INT_ADD (register, 0x8, 8) , (const, 0x4, 8), (register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8)]
[ ---  CBRANCH (ram, 0x405bf0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbe00, 8) , (const, 0x0, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (unique, 0x10000eb4, 8) , (register, 0x0, 8) , (const, 0x8, 8)]
[(register, 0x8, 8) INT_ADD (register, 0x8, 8) , (const, 0x8, 8)]
[(unique, 0x10000ef4, 8) COPY (register, 0xa8, 8)]
[ ---  CBRANCH (ram, 0x405a6d, 1) , (unique, 0x100008ed, 1), (unique, 0x100008ed, 1) BOOL_NEGATE (unique, 0x100008ec, 1)]
[(unique, 0x10000efc, 8) COPY (register, 0xa0, 8)]
[ ---  CBRANCH (ram, 0x405e1b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd00, 4) , (const, 0xffffffff, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100017f0, 8), (unique, 0x100017f0, 8) INT_ADD (register, 0x0, 8) , (const, 0x8, 8), (register, 0x0, 8) INT_ADD (register, 0x0, 8) , (unique, 0x100017e8, 8), (unique, 0x100017e8, 8) CAST (register, 0xb8, 8), (register, 0x0, 8) INT_ZEXT (register, 0x0, 4), (register, 0x0, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1bb80, 4), (unique, 0x1bb80, 4) INT_LEFT (unique, 0xbc80, 4) , (const, 0x18, 4), (unique, 0x1b780, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1ba00, 4), (unique, 0x1ba00, 4) INT_LEFT (unique, 0x1b980, 4) , (const, 0x8, 4), (unique, 0x1b980, 4) INT_AND (unique, 0xbc80, 4) , (const, 0xff00, 4), (unique, 0x1b780, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1b880, 4), (unique, 0x1b880, 4) INT_RIGHT (unique, 0x1b800, 4) , (const, 0x8, 4), (unique, 0x1b800, 4) INT_AND (unique, 0xbc80, 4) , (const, 0xff0000, 4), (unique, 0x1b780, 4) INT_RIGHT (unique, 0xbc80, 4) , (const, 0x18, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100017e0, 8), (unique, 0x100017e0, 8) CAST (register, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x10000ef4, 8) , (unique, 0x10000efc, 8)]
[(register, 0x0, 8) INT_ADD (register, 0x0, 8) , (const, 0x4, 8)]
[ ---  BRANCH (ram, 0x405e2c, 1)]
[(register, 0x8, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1bb80, 4), (unique, 0x1bb80, 4) INT_LEFT (unique, 0xbc80, 4) , (const, 0x18, 4), (unique, 0x1b780, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1ba00, 4), (unique, 0x1ba00, 4) INT_LEFT (unique, 0x1b980, 4) , (const, 0x8, 4), (unique, 0x1b980, 4) INT_AND (unique, 0xbc80, 4) , (const, 0xff00, 4), (unique, 0x1b780, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1b880, 4), (unique, 0x1b880, 4) INT_RIGHT (unique, 0x1b800, 4) , (const, 0x8, 4), (unique, 0x1b800, 4) INT_AND (unique, 0xbc80, 4) , (const, 0xff0000, 4), (unique, 0x1b780, 4) INT_RIGHT (unique, 0xbc80, 4) , (const, 0x18, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100017f8, 8), (unique, 0x100017f8, 8) INT_ADD (register, 0x0, 8) , (const, 0x4, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x405a80, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0xffffffff, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100017f8, 8), (unique, 0x100017f8, 8) INT_ADD (register, 0x0, 8) , (const, 0x4, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x405df0, 1) , (unique, 0x100008ec, 1)]
[(stack, 0xfffffffffffffe80, 8) CAST (unique, 0x10001808, 8), (unique, 0x10001808, 8) INT_AND (unique, 0x10001800, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10001800, 8) CAST (stack, 0xfffffffffffffe80, 8)]
[(register, 0x8, 8) PTRADD (stack, 0xfffffffffffffe88, 8) , (unique, 0x10000cc8, 8) , (const, 0x8, 8), (unique, 0x10000cc8, 8) INT_MULT (register, 0x0, 8) , (const, 0x2, 8), (register, 0x0, 8) INT_ZEXT (stack, 0xfffffffffffffea0, 4)]
[(register, 0x0, 8) PTRADD (stack, 0xfffffffffffffed8, 8) , (unique, 0x10000cd8, 8) , (const, 0x8, 8), (unique, 0x10000cd8, 8) INT_MULT (register, 0x0, 8) , (const, 0x2, 8), (register, 0x0, 8) INT_ZEXT (stack, 0xfffffffffffffea0, 4)]
[(unique, 0x10001024, 8) COPY (unique, 0x10001014, 8), (unique, 0x10001014, 8) COPY (register, 0xb0, 8)]
[(unique, 0x100011e0, 8) COPY (register, 0xa8, 8)]
[ ---  CBRANCH (ram, 0x405b2a, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xfffffffffffffe78, 4) , (const, 0x950412de, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffec0, 8) MULTIEQUAL (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8)]
[(stack, 0xfffffffffffffeb8, 8) MULTIEQUAL (register, 0x8, 8) , (stack, 0xfffffffffffffeb8, 8)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (register, 0x0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(stack, 0xfffffffffffffea8, 8) MULTIEQUAL (unique, 0x100011e0, 8) , (stack, 0xfffffffffffffea8, 8)]
[(stack, 0xfffffffffffffea4, 4) MULTIEQUAL (stack, 0xfffffffffffffea4, 4) , (stack, 0xfffffffffffffea4, 4)]
[(stack, 0xfffffffffffffea0, 4) MULTIEQUAL (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4)]
[(stack, 0xfffffffffffffe98, 8) MULTIEQUAL (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8)]
[(stack, 0xfffffffffffffe90, 8) MULTIEQUAL (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8)]
[(stack, 0xfffffffffffffe88, 8) MULTIEQUAL (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8)]
[(stack, 0xfffffffffffffe78, 8) MULTIEQUAL (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8)]
[(stack, 0xfffffffffffffe70, 8) MULTIEQUAL (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8)]
[(stack, 0xfffffffffffffe6c, 4) MULTIEQUAL (stack, 0xfffffffffffffe6c, 4) , (stack, 0xfffffffffffffe6c, 4)]
[(stack, 0xfffffffffffffe60, 8) MULTIEQUAL (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8)]
[(stack, 0xfffffffffffffe30, 4) MULTIEQUAL (stack, 0xfffffffffffffe30, 4) , (stack, 0xfffffffffffffe30, 4)]
[(stack, 0xfffffffffffffda8, 8) MULTIEQUAL (stack, 0xfffffffffffffda8, 8) , (stack, 0xfffffffffffffda8, 8)]
[(stack, 0xfffffffffffffd28, 8) MULTIEQUAL (stack, 0xfffffffffffffd28, 8) , (stack, 0xfffffffffffffd28, 8)]
[(ram, 0x4c77e0, 4) MULTIEQUAL (ram, 0x4c77e0, 4) , (ram, 0x4c77e0, 4)]
[(ram, 0x4c77d8, 8) MULTIEQUAL (ram, 0x4c77d8, 8) , (ram, 0x4c77d8, 8)]
[(ram, 0x4c77d4, 4) MULTIEQUAL (ram, 0x4c77d4, 4) , (ram, 0x4c77d4, 4)]
[(ram, 0x4c77d0, 4) MULTIEQUAL (ram, 0x4c77d0, 4) , (ram, 0x4c77d0, 4)]
[(ram, 0x4c7788, 8) MULTIEQUAL (ram, 0x4c7788, 8) , (ram, 0x4c7788, 8)]
[(ram, 0x4c7784, 4) MULTIEQUAL (ram, 0x4c7784, 4) , (ram, 0x4c7784, 4)]
[(ram, 0x4c7780, 4) MULTIEQUAL (ram, 0x4c7780, 4) , (ram, 0x4c7780, 4)]
[(ram, 0x4c4fb8, 8) MULTIEQUAL (ram, 0x4c4fb8, 8) , (ram, 0x4c4fb8, 8)]
[(ram, 0x4c4f18, 8) MULTIEQUAL (ram, 0x4c4f18, 8) , (ram, 0x4c4f18, 8)]
[(register, 0x20a, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb8, 8) MULTIEQUAL (register, 0xb8, 8) , (register, 0xb8, 8)]
[(register, 0xb0, 8) MULTIEQUAL (register, 0xa0, 8) , (register, 0xb0, 8)]
[(register, 0xa8, 8) MULTIEQUAL (unique, 0x10001014, 8) , (unique, 0x1000101c, 8)]
[ ---  CBRANCH (ram, 0x405e83, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xfffffffffffffe80, 4) , (const, 0x0, 4), (stack, 0xfffffffffffffe80, 4) SUBPIECE (stack, 0xfffffffffffffe80, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffe80, 8) MULTIEQUAL (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8)]
[(register, 0x28, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1bb80, 4), (unique, 0x1bb80, 4) INT_LEFT (unique, 0xbc80, 4) , (const, 0x18, 4), (unique, 0x1b780, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1ba00, 4), (unique, 0x1ba00, 4) INT_LEFT (unique, 0x1b980, 4) , (const, 0x8, 4), (unique, 0x1b980, 4) INT_AND (unique, 0xbc80, 4) , (const, 0xff00, 4), (unique, 0x1b780, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1b880, 4), (unique, 0x1b880, 4) INT_RIGHT (unique, 0x1b800, 4) , (const, 0x8, 4), (unique, 0x1b800, 4) INT_AND (unique, 0xbc80, 4) , (const, 0xff0000, 4), (unique, 0x1b780, 4) INT_RIGHT (unique, 0xbc80, 4) , (const, 0x18, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (register, 0x8, 8), (register, 0x8, 8) CAST (unique, 0x10001820, 8), (unique, 0x10001820, 8) INT_ADD (register, 0x8, 8) , (unique, 0x10001818, 8), (unique, 0x10001818, 8) CAST (register, 0xb8, 8), (register, 0x8, 8) INT_ZEXT (register, 0x8, 4), (register, 0x8, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1bb80, 4), (unique, 0x1bb80, 4) INT_LEFT (unique, 0xbc80, 4) , (const, 0x18, 4), (unique, 0x1b780, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1ba00, 4), (unique, 0x1ba00, 4) INT_LEFT (unique, 0x1b980, 4) , (const, 0x8, 4), (unique, 0x1b980, 4) INT_AND (unique, 0xbc80, 4) , (const, 0xff00, 4), (unique, 0x1b780, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1b880, 4), (unique, 0x1b880, 4) INT_RIGHT (unique, 0x1b800, 4) , (const, 0x8, 4), (unique, 0x1b800, 4) INT_AND (unique, 0xbc80, 4) , (const, 0xff0000, 4), (unique, 0x1b780, 4) INT_RIGHT (unique, 0xbc80, 4) , (const, 0x18, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10001810, 8), (unique, 0x10001810, 8) CAST (register, 0xb0, 8)]
[(unique, 0x10000f44, 8) COPY (stack, 0xfffffffffffffeb8, 8)]
[ ---  BRANCH (ram, 0x405af5, 1)]
[(register, 0x28, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1bb80, 4), (unique, 0x1bb80, 4) INT_LEFT (unique, 0xbc80, 4) , (const, 0x18, 4), (unique, 0x1b780, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1ba00, 4), (unique, 0x1ba00, 4) INT_LEFT (unique, 0x1b980, 4) , (const, 0x8, 4), (unique, 0x1b980, 4) INT_AND (unique, 0xbc80, 4) , (const, 0xff00, 4), (unique, 0x1b780, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1b880, 4), (unique, 0x1b880, 4) INT_RIGHT (unique, 0x1b800, 4) , (const, 0x8, 4), (unique, 0x1b800, 4) INT_AND (unique, 0xbc80, 4) , (const, 0xff0000, 4), (unique, 0x1b780, 4) INT_RIGHT (unique, 0xbc80, 4) , (const, 0x18, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (register, 0x8, 8), (register, 0x8, 8) CAST (unique, 0x10001838, 8), (unique, 0x10001838, 8) INT_ADD (register, 0x8, 8) , (unique, 0x10001830, 8), (unique, 0x10001830, 8) CAST (register, 0xb8, 8), (register, 0x8, 8) INT_ZEXT (register, 0x8, 4), (register, 0x8, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1bb80, 4), (unique, 0x1bb80, 4) INT_LEFT (unique, 0xbc80, 4) , (const, 0x18, 4), (unique, 0x1b780, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1ba00, 4), (unique, 0x1ba00, 4) INT_LEFT (unique, 0x1b980, 4) , (const, 0x8, 4), (unique, 0x1b980, 4) INT_AND (unique, 0xbc80, 4) , (const, 0xff00, 4), (unique, 0x1b780, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1b880, 4), (unique, 0x1b880, 4) INT_RIGHT (unique, 0x1b800, 4) , (const, 0x8, 4), (unique, 0x1b800, 4) INT_AND (unique, 0xbc80, 4) , (const, 0xff0000, 4), (unique, 0x1b780, 4) INT_RIGHT (unique, 0xbc80, 4) , (const, 0x18, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10001828, 8), (unique, 0x10001828, 8) CAST (stack, 0xfffffffffffffea8, 8)]
[(unique, 0x10000f4c, 8) COPY (stack, 0xfffffffffffffeb0, 8)]
[(register, 0x18, 8) MULTIEQUAL (unique, 0x10000f4c, 8) , (unique, 0x10000f44, 8)]
[(register, 0x28, 8) CAST (unique, 0x10001848, 8), (unique, 0x10001848, 8) INT_ADD (register, 0x28, 8) , (unique, 0x10001840, 8), (unique, 0x10001840, 8) CAST (register, 0xb8, 8), (register, 0x28, 8) INT_ZEXT (register, 0x28, 4), (register, 0x28, 4) MULTIEQUAL (register, 0x28, 4) , (register, 0x28, 4)]
[(register, 0x0, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1bb80, 4), (unique, 0x1bb80, 4) INT_LEFT (unique, 0xbc80, 4) , (const, 0x18, 4), (unique, 0x1b780, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1ba00, 4), (unique, 0x1ba00, 4) INT_LEFT (unique, 0x1b980, 4) , (const, 0x8, 4), (unique, 0x1b980, 4) INT_AND (unique, 0xbc80, 4) , (const, 0xff00, 4), (unique, 0x1b780, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1b880, 4), (unique, 0x1b880, 4) INT_RIGHT (unique, 0x1b800, 4) , (const, 0x8, 4), (unique, 0x1b800, 4) INT_AND (unique, 0xbc80, 4) , (const, 0xff0000, 4), (unique, 0x1b780, 4) INT_RIGHT (unique, 0xbc80, 4) , (const, 0x18, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x8, 8) , (const, 0x1, 8) , (const, 0x4, 8), (register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8)]
[(unique, 0x10001034, 8) COPY (register, 0xa8, 8)]
[ ---  CBRANCH (ram, 0x405ea0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd00, 4) , (const, 0xffffffff, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x8, 8) , (const, 0x2, 8) , (const, 0x4, 8), (register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8)]
[(register, 0x8, 8) PTRADD (register, 0x8, 8) , (const, 0x1, 8) , (const, 0x4, 8)]
[(ram, 0x4c4f18, 8) INDIRECT (ram, 0x4c4f18, 8) , (const, 0xcfe, 4)]
[(ram, 0x4c4fb8, 8) INDIRECT (ram, 0x4c4fb8, 8) , (const, 0xcfe, 4)]
[(ram, 0x4c7780, 4) INDIRECT (ram, 0x4c7780, 4) , (const, 0xcfe, 4)]
[(ram, 0x4c7784, 4) INDIRECT (ram, 0x4c7784, 4) , (const, 0xcfe, 4)]
[(ram, 0x4c7788, 8) INDIRECT (ram, 0x4c7788, 8) , (const, 0xcfe, 4)]
[(ram, 0x4c77d0, 4) INDIRECT (ram, 0x4c77d0, 4) , (const, 0xcfe, 4)]
[(ram, 0x4c77d4, 4) INDIRECT (ram, 0x4c77d4, 4) , (const, 0xcfe, 4)]
[(ram, 0x4c77d8, 8) INDIRECT (ram, 0x4c77d8, 8) , (const, 0xcfe, 4)]
[(ram, 0x4c77e0, 4) INDIRECT (ram, 0x4c77e0, 4) , (const, 0xcfe, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (register, 0xa8, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[(unique, 0x10000f8c, 8) COPY (register, 0x28, 8)]
[(unique, 0x10001200, 8) COPY (register, 0xb8, 8)]
[(unique, 0x10001228, 8) COPY (register, 0xb0, 8)]
[(unique, 0x10001238, 8) COPY (register, 0x18, 8)]
[ ---  BRANCH (ram, 0x405eed, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (unique, 0x10001238, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (unique, 0x10001228, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (unique, 0x10001200, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffec0, 8) MULTIEQUAL (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8)]
[(stack, 0xfffffffffffffeb8, 8) MULTIEQUAL (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(stack, 0xfffffffffffffea8, 8) MULTIEQUAL (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8)]
[(stack, 0xfffffffffffffea4, 4) MULTIEQUAL (stack, 0xfffffffffffffea4, 4) , (stack, 0xfffffffffffffea4, 4)]
[(stack, 0xfffffffffffffea0, 4) MULTIEQUAL (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4)]
[(stack, 0xfffffffffffffe98, 8) MULTIEQUAL (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8)]
[(stack, 0xfffffffffffffe90, 8) MULTIEQUAL (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8)]
[(stack, 0xfffffffffffffe88, 8) MULTIEQUAL (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8)]
[(stack, 0xfffffffffffffe80, 8) MULTIEQUAL (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8)]
[(stack, 0xfffffffffffffe78, 8) MULTIEQUAL (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8)]
[(stack, 0xfffffffffffffe70, 8) MULTIEQUAL (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8)]
[(stack, 0xfffffffffffffe6c, 4) MULTIEQUAL (stack, 0xfffffffffffffe6c, 4) , (stack, 0xfffffffffffffe6c, 4)]
[(stack, 0xfffffffffffffe60, 8) MULTIEQUAL (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8)]
[(stack, 0xfffffffffffffe30, 4) MULTIEQUAL (stack, 0xfffffffffffffe30, 4) , (stack, 0xfffffffffffffe30, 4)]
[(stack, 0xfffffffffffffda8, 8) MULTIEQUAL (stack, 0xfffffffffffffda8, 8) , (stack, 0xfffffffffffffda8, 8)]
[(stack, 0xfffffffffffffd28, 8) MULTIEQUAL (stack, 0xfffffffffffffd28, 8) , (stack, 0xfffffffffffffd28, 8)]
[(ram, 0x4c77e0, 4) MULTIEQUAL (ram, 0x4c77e0, 4) , (ram, 0x4c77e0, 4)]
[(ram, 0x4c77d8, 8) MULTIEQUAL (ram, 0x4c77d8, 8) , (ram, 0x4c77d8, 8)]
[(ram, 0x4c77d4, 4) MULTIEQUAL (ram, 0x4c77d4, 4) , (ram, 0x4c77d4, 4)]
[(ram, 0x4c77d0, 4) MULTIEQUAL (ram, 0x4c77d0, 4) , (ram, 0x4c77d0, 4)]
[(ram, 0x4c7788, 8) MULTIEQUAL (ram, 0x4c7788, 8) , (ram, 0x4c7788, 8)]
[(ram, 0x4c7784, 4) MULTIEQUAL (ram, 0x4c7784, 4) , (ram, 0x4c7784, 4)]
[(ram, 0x4c7780, 4) MULTIEQUAL (ram, 0x4c7780, 4) , (ram, 0x4c7780, 4)]
[(ram, 0x4c4fb8, 8) MULTIEQUAL (ram, 0x4c4fb8, 8) , (ram, 0x4c4fb8, 8)]
[(ram, 0x4c4f18, 8) MULTIEQUAL (ram, 0x4c4f18, 8) , (ram, 0x4c4f18, 8)]
[(register, 0x20a, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x18, 8) INT_ZEXT (register, 0x18, 4), (register, 0x18, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1bb80, 4), (unique, 0x1bb80, 4) INT_LEFT (unique, 0xbc80, 4) , (const, 0x18, 4), (unique, 0x1b780, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1ba00, 4), (unique, 0x1ba00, 4) INT_LEFT (unique, 0x1b980, 4) , (const, 0x8, 4), (unique, 0x1b980, 4) INT_AND (unique, 0xbc80, 4) , (const, 0xff00, 4), (unique, 0x1b780, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1b880, 4), (unique, 0x1b880, 4) INT_RIGHT (unique, 0x1b800, 4) , (const, 0x8, 4), (unique, 0x1b800, 4) INT_AND (unique, 0xbc80, 4) , (const, 0xff0000, 4), (unique, 0x1b780, 4) INT_RIGHT (unique, 0xbc80, 4) , (const, 0x18, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb0, 8) , (const, 0x1, 8) , (const, 0x4, 8), (register, 0xb0, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0xb0, 8)]
[(unique, 0x10000f84, 8) COPY (register, 0x28, 8), (register, 0x28, 8) MULTIEQUAL (unique, 0x10000f8c, 8) , (unique, 0x10000f94, 8)]
[(unique, 0x10000ff4, 8) COPY (register, 0xa8, 8), (register, 0xa8, 8) MULTIEQUAL (register, 0xa8, 8) , (register, 0xa8, 8)]
[ ---  CBRANCH (ram, 0x405ec2, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1bb80, 4), (unique, 0x1bb80, 4) INT_LEFT (unique, 0xbc80, 4) , (const, 0x18, 4), (unique, 0x1b780, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1ba00, 4), (unique, 0x1ba00, 4) INT_LEFT (unique, 0x1b980, 4) , (const, 0x8, 4), (unique, 0x1b980, 4) INT_AND (unique, 0xbc80, 4) , (const, 0xff00, 4), (unique, 0x1b780, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1b880, 4), (unique, 0x1b880, 4) INT_RIGHT (unique, 0x1b800, 4) , (const, 0x8, 4), (unique, 0x1b800, 4) INT_AND (unique, 0xbc80, 4) , (const, 0xff0000, 4), (unique, 0x1b780, 4) INT_RIGHT (unique, 0xbc80, 4) , (const, 0x18, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (register, 0xb0, 8), (register, 0xb0, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0xb0, 8)]
[(register, 0xa8, 8) CAST (unique, 0x10001858, 8), (unique, 0x10001858, 8) INT_ADD (unique, 0x10001850, 8) , (register, 0xb8, 8), (unique, 0x10001850, 8) CAST (register, 0xa8, 8), (register, 0xb8, 8) INT_ZEXT (register, 0x0, 4)]
[(register, 0x28, 8) CAST (unique, 0x10001868, 8), (unique, 0x10001868, 8) INT_ADD (unique, 0x10001860, 8) , (register, 0xb8, 8), (unique, 0x10001860, 8) CAST (register, 0x28, 8), (register, 0xb8, 8) INT_ZEXT (register, 0x0, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xd49, 4)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0xd49, 4)]
[(ram, 0x4c4f18, 8) INDIRECT (ram, 0x4c4f18, 8) , (const, 0xd49, 4)]
[(ram, 0x4c4fb8, 8) INDIRECT (ram, 0x4c4fb8, 8) , (const, 0xd49, 4)]
[(ram, 0x4c7780, 4) INDIRECT (ram, 0x4c7780, 4) , (const, 0xd49, 4)]
[(ram, 0x4c7784, 4) INDIRECT (ram, 0x4c7784, 4) , (const, 0xd49, 4)]
[(ram, 0x4c7788, 8) INDIRECT (ram, 0x4c7788, 8) , (const, 0xd49, 4)]
[(ram, 0x4c77d0, 4) INDIRECT (ram, 0x4c77d0, 4) , (const, 0xd49, 4)]
[(ram, 0x4c77d4, 4) INDIRECT (ram, 0x4c77d4, 4) , (const, 0xd49, 4)]
[(ram, 0x4c77d8, 8) INDIRECT (ram, 0x4c77d8, 8) , (const, 0xd49, 4)]
[(ram, 0x4c77e0, 4) INDIRECT (ram, 0x4c77e0, 4) , (const, 0xd49, 4)]
[(stack, 0xfffffffffffffd28, 8) INDIRECT (stack, 0xfffffffffffffd28, 8) , (const, 0xd49, 4)]
[(stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0xd49, 4)]
[(stack, 0xfffffffffffffe30, 4) INDIRECT (stack, 0xfffffffffffffe30, 4) , (const, 0xd49, 4)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0xd49, 4), (stack, 0xfffffffffffffe50, 8) COPY (const, 0x405f13, 8)]
[(stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0xd49, 4)]
[(stack, 0xfffffffffffffe6c, 4) INDIRECT (stack, 0xfffffffffffffe6c, 4) , (const, 0xd49, 4)]
[(stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0xd49, 4)]
[(stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0xd49, 4)]
[(stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0xd49, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0xd49, 4)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0xd49, 4)]
[(stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0xd49, 4)]
[(stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0xd49, 4)]
[(stack, 0xfffffffffffffea4, 4) INDIRECT (stack, 0xfffffffffffffea4, 4) , (const, 0xd49, 4)]
[(stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0xd49, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0xd49, 4)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0xd49, 4)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0xd49, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0xd49, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0xd49, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0xd49, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0xd49, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0xd49, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0xd49, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0xd49, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0xd49, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xd49, 4)]
[ ---  CALL (ram, 0x401060, 8) , (register, 0xa8, 8) , (register, 0x28, 8) , (register, 0xb8, 8), (register, 0xb8, 8) INT_ZEXT (register, 0x0, 4)]
[ ---  BRANCH (ram, 0x405ec2, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffec0, 8) MULTIEQUAL (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8)]
[(stack, 0xfffffffffffffeb8, 8) MULTIEQUAL (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(stack, 0xfffffffffffffea8, 8) MULTIEQUAL (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8)]
[(stack, 0xfffffffffffffea4, 4) MULTIEQUAL (stack, 0xfffffffffffffea4, 4) , (stack, 0xfffffffffffffea4, 4)]
[(stack, 0xfffffffffffffea0, 4) MULTIEQUAL (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4)]
[(stack, 0xfffffffffffffe98, 8) MULTIEQUAL (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8)]
[(stack, 0xfffffffffffffe90, 8) MULTIEQUAL (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8)]
[(stack, 0xfffffffffffffe88, 8) MULTIEQUAL (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8)]
[(stack, 0xfffffffffffffe80, 8) MULTIEQUAL (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8)]
[(stack, 0xfffffffffffffe78, 8) MULTIEQUAL (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8)]
[(stack, 0xfffffffffffffe70, 8) MULTIEQUAL (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8)]
[(stack, 0xfffffffffffffe6c, 4) MULTIEQUAL (stack, 0xfffffffffffffe6c, 4) , (stack, 0xfffffffffffffe6c, 4)]
[(stack, 0xfffffffffffffe60, 8) MULTIEQUAL (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8)]
[(stack, 0xfffffffffffffe30, 4) MULTIEQUAL (stack, 0xfffffffffffffe30, 4) , (stack, 0xfffffffffffffe30, 4)]
[(stack, 0xfffffffffffffda8, 8) MULTIEQUAL (stack, 0xfffffffffffffda8, 8) , (stack, 0xfffffffffffffda8, 8)]
[(stack, 0xfffffffffffffd28, 8) MULTIEQUAL (stack, 0xfffffffffffffd28, 8) , (stack, 0xfffffffffffffd28, 8)]
[(ram, 0x4c77e0, 4) MULTIEQUAL (ram, 0x4c77e0, 4) , (ram, 0x4c77e0, 4)]
[(ram, 0x4c77d8, 8) MULTIEQUAL (ram, 0x4c77d8, 8) , (ram, 0x4c77d8, 8)]
[(ram, 0x4c77d4, 4) MULTIEQUAL (ram, 0x4c77d4, 4) , (ram, 0x4c77d4, 4)]
[(ram, 0x4c77d0, 4) MULTIEQUAL (ram, 0x4c77d0, 4) , (ram, 0x4c77d0, 4)]
[(ram, 0x4c7788, 8) MULTIEQUAL (ram, 0x4c7788, 8) , (ram, 0x4c7788, 8)]
[(ram, 0x4c7784, 4) MULTIEQUAL (ram, 0x4c7784, 4) , (ram, 0x4c7784, 4)]
[(ram, 0x4c7780, 4) MULTIEQUAL (ram, 0x4c7780, 4) , (ram, 0x4c7780, 4)]
[(ram, 0x4c4fb8, 8) MULTIEQUAL (ram, 0x4c4fb8, 8) , (ram, 0x4c4fb8, 8)]
[(ram, 0x4c4f18, 8) MULTIEQUAL (ram, 0x4c4f18, 8) , (ram, 0x4c4f18, 8)]
[(register, 0x20a, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xa8, 8) MULTIEQUAL (unique, 0x10000ff4, 8) , (register, 0xa8, 8)]
[(register, 0x28, 8) MULTIEQUAL (unique, 0x10000f84, 8) , (register, 0x28, 8)]
[ ---  CBRANCH (ram, 0x405e4a, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x18, 4) , (const, 0xffffffff, 4)]
[(register, 0xb0, 8) PTRADD (register, 0xb0, 8) , (const, 0x2, 8) , (const, 0x4, 8)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0xd67, 4), (stack, 0xfffffffffffffe50, 8) COPY (const, 0x405ed9, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xd6e, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xd67, 4)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0xd6e, 4), (register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0xd67, 4)]
[(ram, 0x4c4f18, 8) INDIRECT (ram, 0x4c4f18, 8) , (const, 0xd6e, 4), (ram, 0x4c4f18, 8) INDIRECT (ram, 0x4c4f18, 8) , (const, 0xd67, 4)]
[(ram, 0x4c4fb8, 8) INDIRECT (ram, 0x4c4fb8, 8) , (const, 0xd6e, 4), (ram, 0x4c4fb8, 8) INDIRECT (ram, 0x4c4fb8, 8) , (const, 0xd67, 4)]
[(ram, 0x4c7780, 4) INDIRECT (ram, 0x4c7780, 4) , (const, 0xd6e, 4), (ram, 0x4c7780, 4) INDIRECT (ram, 0x4c7780, 4) , (const, 0xd67, 4)]
[(ram, 0x4c7784, 4) INDIRECT (ram, 0x4c7784, 4) , (const, 0xd6e, 4), (ram, 0x4c7784, 4) INDIRECT (ram, 0x4c7784, 4) , (const, 0xd67, 4)]
[(ram, 0x4c7788, 8) INDIRECT (ram, 0x4c7788, 8) , (const, 0xd6e, 4), (ram, 0x4c7788, 8) INDIRECT (ram, 0x4c7788, 8) , (const, 0xd67, 4)]
[(ram, 0x4c77d0, 4) INDIRECT (ram, 0x4c77d0, 4) , (const, 0xd6e, 4), (ram, 0x4c77d0, 4) INDIRECT (ram, 0x4c77d0, 4) , (const, 0xd67, 4)]
[(ram, 0x4c77d4, 4) INDIRECT (ram, 0x4c77d4, 4) , (const, 0xd6e, 4), (ram, 0x4c77d4, 4) INDIRECT (ram, 0x4c77d4, 4) , (const, 0xd67, 4)]
[(ram, 0x4c77d8, 8) INDIRECT (ram, 0x4c77d8, 8) , (const, 0xd6e, 4), (ram, 0x4c77d8, 8) INDIRECT (ram, 0x4c77d8, 8) , (const, 0xd67, 4)]
[(ram, 0x4c77e0, 4) INDIRECT (ram, 0x4c77e0, 4) , (const, 0xd6e, 4), (ram, 0x4c77e0, 4) INDIRECT (ram, 0x4c77e0, 4) , (const, 0xd67, 4)]
[(stack, 0xfffffffffffffd28, 8) INDIRECT (stack, 0xfffffffffffffd28, 8) , (const, 0xd6e, 4), (stack, 0xfffffffffffffd28, 8) INDIRECT (stack, 0xfffffffffffffd28, 8) , (const, 0xd67, 4)]
[(stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0xd6e, 4), (stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0xd67, 4)]
[(stack, 0xfffffffffffffe30, 4) INDIRECT (stack, 0xfffffffffffffe30, 4) , (const, 0xd6e, 4), (stack, 0xfffffffffffffe30, 4) INDIRECT (stack, 0xfffffffffffffe30, 4) , (const, 0xd67, 4)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0xd6e, 4), (stack, 0xfffffffffffffe50, 8) COPY (const, 0x405eea, 8)]
[(stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0xd6e, 4), (stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0xd67, 4)]
[(stack, 0xfffffffffffffe6c, 4) INDIRECT (stack, 0xfffffffffffffe6c, 4) , (const, 0xd6e, 4), (stack, 0xfffffffffffffe6c, 4) INDIRECT (stack, 0xfffffffffffffe6c, 4) , (const, 0xd67, 4)]
[(stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0xd6e, 4), (stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0xd67, 4)]
[(stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0xd6e, 4), (stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0xd67, 4)]
[(stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0xd6e, 4), (stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0xd67, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0xd6e, 4), (stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0xd67, 4)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0xd6e, 4), (stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0xd67, 4)]
[(stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0xd6e, 4), (stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0xd67, 4)]
[(stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0xd6e, 4), (stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0xd67, 4)]
[(stack, 0xfffffffffffffea4, 4) INDIRECT (stack, 0xfffffffffffffea4, 4) , (const, 0xd6e, 4), (stack, 0xfffffffffffffea4, 4) INDIRECT (stack, 0xfffffffffffffea4, 4) , (const, 0xd67, 4)]
[(stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0xd6e, 4), (stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0xd67, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0xd6e, 4), (stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0xd67, 4)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0xd6e, 4), (stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0xd67, 4)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0xd6e, 4), (stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0xd67, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0xd6e, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0xd67, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0xd6e, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0xd67, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0xd6e, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0xd67, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0xd6e, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0xd67, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0xd6e, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0xd67, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0xd6e, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0xd67, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0xd6e, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0xd67, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0xd6e, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0xd67, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xd6e, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xd67, 4)]
[ ---  CALL (ram, 0x401060, 8) , (register, 0xa8, 8) , (unique, 0xbd80, 8) , (register, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x401190, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (unique, 0x10000eb4, 8) , (register, 0x18, 8) , (const, 0x8, 8)]
[(register, 0xa8, 8) CAST (unique, 0x10001878, 8), (unique, 0x10001878, 8) INT_ADD (unique, 0x10001870, 8) , (register, 0x0, 8), (unique, 0x10001870, 8) CAST (register, 0xa8, 8), (register, 0x0, 8) CALL (ram, 0x401190, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (unique, 0x10000eb4, 8) , (register, 0x18, 8) , (const, 0x8, 8)]
[(unique, 0x10000f94, 8) COPY (register, 0x28, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffec0, 8) MULTIEQUAL (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8)]
[(stack, 0xfffffffffffffeb8, 8) MULTIEQUAL (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(stack, 0xfffffffffffffea8, 8) MULTIEQUAL (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8)]
[(stack, 0xfffffffffffffea4, 4) MULTIEQUAL (stack, 0xfffffffffffffea4, 4) , (stack, 0xfffffffffffffea4, 4)]
[(stack, 0xfffffffffffffea0, 4) MULTIEQUAL (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4)]
[(stack, 0xfffffffffffffe98, 8) MULTIEQUAL (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8)]
[(stack, 0xfffffffffffffe90, 8) MULTIEQUAL (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8)]
[(stack, 0xfffffffffffffe88, 8) MULTIEQUAL (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8)]
[(stack, 0xfffffffffffffe80, 8) MULTIEQUAL (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8)]
[(stack, 0xfffffffffffffe78, 8) MULTIEQUAL (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8)]
[(stack, 0xfffffffffffffe70, 8) MULTIEQUAL (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8)]
[(stack, 0xfffffffffffffe6c, 4) MULTIEQUAL (stack, 0xfffffffffffffe6c, 4) , (stack, 0xfffffffffffffe6c, 4)]
[(stack, 0xfffffffffffffe60, 8) MULTIEQUAL (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8)]
[(stack, 0xfffffffffffffe30, 4) MULTIEQUAL (stack, 0xfffffffffffffe30, 4) , (stack, 0xfffffffffffffe30, 4)]
[(stack, 0xfffffffffffffda8, 8) MULTIEQUAL (stack, 0xfffffffffffffda8, 8) , (stack, 0xfffffffffffffda8, 8)]
[(stack, 0xfffffffffffffd28, 8) MULTIEQUAL (stack, 0xfffffffffffffd28, 8) , (stack, 0xfffffffffffffd28, 8)]
[(register, 0x20a, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xa8, 8) MULTIEQUAL (unique, 0x10001034, 8) , (unique, 0x1000103c, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x18, 8) , (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10001880, 8), (unique, 0x10001880, 8) INT_ZEXT (unique, 0x10000766, 4), (register, 0x18, 8) MULTIEQUAL (register, 0x18, 8) , (register, 0x18, 8), (unique, 0x10000766, 4) MULTIEQUAL (register, 0x0, 4) , (unique, 0xbc80, 4)]
[(ram, 0x4c4f18, 8) INDIRECT (ram, 0x4c4f18, 8) , (const, 0x6e6, 4), (ram, 0x4c4f18, 8) INDIRECT (ram, 0x4c4f18, 8) , (const, 0x6e3, 4), (ram, 0x4c4f18, 8) MULTIEQUAL (ram, 0x4c4f18, 8) , (ram, 0x4c4f18, 8)]
[(ram, 0x4c4fb8, 8) INDIRECT (ram, 0x4c4fb8, 8) , (const, 0x6e6, 4), (ram, 0x4c4fb8, 8) INDIRECT (ram, 0x4c4fb8, 8) , (const, 0x6e3, 4), (ram, 0x4c4fb8, 8) MULTIEQUAL (ram, 0x4c4fb8, 8) , (ram, 0x4c4fb8, 8)]
[(ram, 0x4c7780, 4) INDIRECT (ram, 0x4c7780, 4) , (const, 0x6e6, 4), (ram, 0x4c7780, 4) INDIRECT (ram, 0x4c7780, 4) , (const, 0x6e3, 4), (ram, 0x4c7780, 4) MULTIEQUAL (ram, 0x4c7780, 4) , (ram, 0x4c7780, 4)]
[(ram, 0x4c7784, 4) INDIRECT (ram, 0x4c7784, 4) , (const, 0x6e6, 4), (ram, 0x4c7784, 4) INDIRECT (ram, 0x4c7784, 4) , (const, 0x6e3, 4), (ram, 0x4c7784, 4) MULTIEQUAL (ram, 0x4c7784, 4) , (ram, 0x4c7784, 4)]
[(ram, 0x4c7788, 8) INDIRECT (ram, 0x4c7788, 8) , (const, 0x6e6, 4), (ram, 0x4c7788, 8) INDIRECT (ram, 0x4c7788, 8) , (const, 0x6e3, 4), (ram, 0x4c7788, 8) MULTIEQUAL (ram, 0x4c7788, 8) , (ram, 0x4c7788, 8)]
[(ram, 0x4c77d0, 4) INDIRECT (ram, 0x4c77d0, 4) , (const, 0x6e6, 4), (ram, 0x4c77d0, 4) INDIRECT (ram, 0x4c77d0, 4) , (const, 0x6e3, 4), (ram, 0x4c77d0, 4) MULTIEQUAL (ram, 0x4c77d0, 4) , (ram, 0x4c77d0, 4)]
[(ram, 0x4c77d4, 4) INDIRECT (ram, 0x4c77d4, 4) , (const, 0x6e6, 4), (ram, 0x4c77d4, 4) INDIRECT (ram, 0x4c77d4, 4) , (const, 0x6e3, 4), (ram, 0x4c77d4, 4) MULTIEQUAL (ram, 0x4c77d4, 4) , (ram, 0x4c77d4, 4)]
[(ram, 0x4c77d8, 8) INDIRECT (ram, 0x4c77d8, 8) , (const, 0x6e6, 4), (ram, 0x4c77d8, 8) INDIRECT (ram, 0x4c77d8, 8) , (const, 0x6e3, 4), (ram, 0x4c77d8, 8) MULTIEQUAL (ram, 0x4c77d8, 8) , (ram, 0x4c77d8, 8)]
[(ram, 0x4c77e0, 4) INDIRECT (ram, 0x4c77e0, 4) , (const, 0x6e6, 4), (ram, 0x4c77e0, 4) INDIRECT (ram, 0x4c77e0, 4) , (const, 0x6e3, 4), (ram, 0x4c77e0, 4) MULTIEQUAL (ram, 0x4c77e0, 4) , (ram, 0x4c77e0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (register, 0x28, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x1, 8) , (const, 0x8, 8), (register, 0x18, 8) MULTIEQUAL (register, 0x18, 8) , (register, 0x18, 8), (register, 0x28, 8) MULTIEQUAL (register, 0x28, 8) , (register, 0x28, 8)]
[(unique, 0x1000108c, 8) COPY (register, 0xb0, 8), (register, 0xb0, 8) MULTIEQUAL (register, 0xb0, 8) , (register, 0xb0, 8)]
[(unique, 0x100010ac, 8) COPY (register, 0xb8, 8), (register, 0xb8, 8) MULTIEQUAL (register, 0xb8, 8) , (register, 0xb8, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffec0, 8) MULTIEQUAL (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8)]
[(stack, 0xfffffffffffffeb8, 8) MULTIEQUAL (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(stack, 0xfffffffffffffea8, 8) MULTIEQUAL (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8)]
[(stack, 0xfffffffffffffea4, 4) MULTIEQUAL (stack, 0xfffffffffffffea4, 4) , (stack, 0xfffffffffffffea4, 4)]
[(stack, 0xfffffffffffffea0, 4) MULTIEQUAL (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4)]
[(stack, 0xfffffffffffffe98, 8) MULTIEQUAL (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8)]
[(stack, 0xfffffffffffffe90, 8) MULTIEQUAL (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8)]
[(stack, 0xfffffffffffffe88, 8) MULTIEQUAL (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8)]
[(stack, 0xfffffffffffffe78, 8) MULTIEQUAL (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8)]
[(stack, 0xfffffffffffffe70, 8) MULTIEQUAL (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8)]
[(stack, 0xfffffffffffffe6c, 4) MULTIEQUAL (stack, 0xfffffffffffffe6c, 4) , (stack, 0xfffffffffffffe6c, 4)]
[(stack, 0xfffffffffffffe60, 8) MULTIEQUAL (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8)]
[(stack, 0xfffffffffffffe30, 4) MULTIEQUAL (stack, 0xfffffffffffffe30, 4) , (stack, 0xfffffffffffffe30, 4)]
[(stack, 0xfffffffffffffda8, 8) MULTIEQUAL (stack, 0xfffffffffffffda8, 8) , (stack, 0xfffffffffffffda8, 8)]
[(stack, 0xfffffffffffffd28, 8) MULTIEQUAL (stack, 0xfffffffffffffd28, 8) , (stack, 0xfffffffffffffd28, 8)]
[(ram, 0x4c77e0, 4) MULTIEQUAL (ram, 0x4c77e0, 4) , (ram, 0x4c77e0, 4)]
[(ram, 0x4c77d8, 8) MULTIEQUAL (ram, 0x4c77d8, 8) , (ram, 0x4c77d8, 8)]
[(ram, 0x4c77d4, 4) MULTIEQUAL (ram, 0x4c77d4, 4) , (ram, 0x4c77d4, 4)]
[(ram, 0x4c77d0, 4) MULTIEQUAL (ram, 0x4c77d0, 4) , (ram, 0x4c77d0, 4)]
[(ram, 0x4c7788, 8) MULTIEQUAL (ram, 0x4c7788, 8) , (ram, 0x4c7788, 8)]
[(ram, 0x4c7784, 4) MULTIEQUAL (ram, 0x4c7784, 4) , (ram, 0x4c7784, 4)]
[(ram, 0x4c7780, 4) MULTIEQUAL (ram, 0x4c7780, 4) , (ram, 0x4c7780, 4)]
[(ram, 0x4c4fb8, 8) MULTIEQUAL (ram, 0x4c4fb8, 8) , (ram, 0x4c4fb8, 8)]
[(ram, 0x4c4f18, 8) MULTIEQUAL (ram, 0x4c4f18, 8) , (ram, 0x4c4f18, 8)]
[(register, 0x20a, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb8, 8) MULTIEQUAL (unique, 0x100010ac, 8) , (unique, 0x100010b4, 8)]
[(register, 0xb0, 8) MULTIEQUAL (unique, 0x1000108c, 8) , (unique, 0x10001094, 8)]
[(register, 0xa8, 8) MULTIEQUAL (register, 0xa8, 8) , (register, 0xa8, 8)]
[ ---  CBRANCH (ram, 0x405e03, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xfffffffffffffe80, 4) , (const, 0x1, 4), (stack, 0xfffffffffffffe80, 4) SUBPIECE (stack, 0xfffffffffffffe80, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffe80, 8) MULTIEQUAL (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8)]
[(unique, 0xbd00, 4) INT_ADD (stack, 0xfffffffffffffea0, 4) , (const, 0x1, 4)]
[(unique, 0x1000100c, 8) COPY (stack, 0xfffffffffffffea8, 8)]
[ ---  BRANCH (ram, 0x405c07, 1)]
[(stack, 0xfffffffffffffe80, 8) CAST (unique, 0x1000188c, 8), (unique, 0x1000188c, 8) INT_ADD (unique, 0x10000ea0, 8) , (const, 0x1, 4), (unique, 0x10000ea0, 8) INT_LEFT (unique, 0x10000e98, 8) , (const, 0x20, 8), (unique, 0x10000e98, 8) INT_SEXT (unique, 0x10001888, 4), (unique, 0x10001888, 4) CAST (stack, 0xfffffffffffffe84, 4), (stack, 0xfffffffffffffe84, 4) SUBPIECE (stack, 0xfffffffffffffe80, 8) , (const, 0x4, 8)]
[(unique, 0x1000102c, 8) COPY (unique, 0x1000101c, 8), (unique, 0x1000101c, 8) COPY (register, 0xa8, 8)]
[ ---  CBRANCH (ram, 0x405acb, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xfffffffffffffe78, 4) , (const, 0x950412de, 4), (stack, 0xfffffffffffffe78, 4) SUBPIECE (stack, 0xfffffffffffffe78, 8) , (const, 0x0, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffec0, 8) MULTIEQUAL (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8)]
[(stack, 0xfffffffffffffeb8, 8) MULTIEQUAL (register, 0x8, 8) , (stack, 0xfffffffffffffeb8, 8)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (register, 0x0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(stack, 0xfffffffffffffea8, 8) MULTIEQUAL (unique, 0x100011e0, 8) , (stack, 0xfffffffffffffea8, 8)]
[(stack, 0xfffffffffffffea4, 4) MULTIEQUAL (stack, 0xfffffffffffffea4, 4) , (stack, 0xfffffffffffffea4, 4)]
[(stack, 0xfffffffffffffea0, 4) MULTIEQUAL (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4)]
[(stack, 0xfffffffffffffe98, 8) MULTIEQUAL (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8)]
[(stack, 0xfffffffffffffe90, 8) MULTIEQUAL (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8)]
[(stack, 0xfffffffffffffe88, 8) MULTIEQUAL (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8)]
[(stack, 0xfffffffffffffe78, 8) MULTIEQUAL (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8)]
[(stack, 0xfffffffffffffe70, 8) MULTIEQUAL (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8)]
[(stack, 0xfffffffffffffe6c, 4) MULTIEQUAL (stack, 0xfffffffffffffe6c, 4) , (stack, 0xfffffffffffffe6c, 4)]
[(stack, 0xfffffffffffffe60, 8) MULTIEQUAL (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8)]
[(stack, 0xfffffffffffffe30, 4) MULTIEQUAL (stack, 0xfffffffffffffe30, 4) , (stack, 0xfffffffffffffe30, 4)]
[(stack, 0xfffffffffffffda8, 8) MULTIEQUAL (stack, 0xfffffffffffffda8, 8) , (stack, 0xfffffffffffffda8, 8)]
[(stack, 0xfffffffffffffd28, 8) MULTIEQUAL (stack, 0xfffffffffffffd28, 8) , (stack, 0xfffffffffffffd28, 8)]
[(ram, 0x4c77e0, 4) MULTIEQUAL (ram, 0x4c77e0, 4) , (ram, 0x4c77e0, 4)]
[(ram, 0x4c77d8, 8) MULTIEQUAL (ram, 0x4c77d8, 8) , (ram, 0x4c77d8, 8)]
[(ram, 0x4c77d4, 4) MULTIEQUAL (ram, 0x4c77d4, 4) , (ram, 0x4c77d4, 4)]
[(ram, 0x4c77d0, 4) MULTIEQUAL (ram, 0x4c77d0, 4) , (ram, 0x4c77d0, 4)]
[(ram, 0x4c7788, 8) MULTIEQUAL (ram, 0x4c7788, 8) , (ram, 0x4c7788, 8)]
[(ram, 0x4c7784, 4) MULTIEQUAL (ram, 0x4c7784, 4) , (ram, 0x4c7784, 4)]
[(ram, 0x4c7780, 4) MULTIEQUAL (ram, 0x4c7780, 4) , (ram, 0x4c7780, 4)]
[(ram, 0x4c4fb8, 8) MULTIEQUAL (ram, 0x4c4fb8, 8) , (ram, 0x4c4fb8, 8)]
[(ram, 0x4c4f18, 8) MULTIEQUAL (ram, 0x4c4f18, 8) , (ram, 0x4c4f18, 8)]
[(register, 0x20a, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb8, 8) MULTIEQUAL (register, 0xb8, 8) , (register, 0xb8, 8)]
[(register, 0xb0, 8) MULTIEQUAL (register, 0xa0, 8) , (register, 0xb0, 8)]
[(register, 0xa8, 8) MULTIEQUAL (unique, 0x10001024, 8) , (unique, 0x1000102c, 8)]
[ ---  CBRANCH (ram, 0x405e6e, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xfffffffffffffe80, 4) , (const, 0x0, 4), (stack, 0xfffffffffffffe80, 4) SUBPIECE (stack, 0xfffffffffffffe80, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffe80, 8) MULTIEQUAL (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (register, 0x8, 8), (register, 0x8, 8) CAST (unique, 0x100018a4, 8), (unique, 0x100018a4, 8) INT_ADD (register, 0x8, 8) , (unique, 0x1000189c, 8), (unique, 0x1000189c, 8) CAST (register, 0xb8, 8), (register, 0x8, 8) INT_ZEXT (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10001894, 8), (unique, 0x10001894, 8) CAST (register, 0xb0, 8)]
[(unique, 0x10000f54, 8) COPY (stack, 0xfffffffffffffeb8, 8)]
[ ---  BRANCH (ram, 0x405b4c, 1)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (register, 0x8, 8), (register, 0x8, 8) CAST (unique, 0x100018bc, 8), (unique, 0x100018bc, 8) INT_ADD (register, 0x8, 8) , (unique, 0x100018b4, 8), (unique, 0x100018b4, 8) CAST (register, 0xb8, 8), (register, 0x8, 8) INT_ZEXT (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100018ac, 8), (unique, 0x100018ac, 8) CAST (stack, 0xfffffffffffffea8, 8)]
[(unique, 0x10000f5c, 8) COPY (stack, 0xfffffffffffffeb0, 8)]
[(register, 0x18, 8) MULTIEQUAL (unique, 0x10000f5c, 8) , (unique, 0x10000f54, 8)]
[(register, 0x28, 8) CAST (unique, 0x100018cc, 8), (unique, 0x100018cc, 8) INT_ADD (register, 0x28, 8) , (unique, 0x100018c4, 8), (unique, 0x100018c4, 8) CAST (register, 0xb8, 8), (register, 0x28, 8) INT_ZEXT (unique, 0xbc80, 4), (unique, 0xbc80, 4) MULTIEQUAL (unique, 0xbc80, 4) , (unique, 0xbc80, 4)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x8, 8) , (const, 0x1, 8) , (const, 0x4, 8), (register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8)]
[(unique, 0x1000103c, 8) COPY (register, 0xa8, 8)]
[ ---  CBRANCH (ram, 0x405b06, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd00, 4) , (const, 0xffffffff, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x8, 8) , (const, 0x2, 8) , (const, 0x4, 8), (register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8)]
[(register, 0x8, 8) PTRADD (register, 0x8, 8) , (const, 0x1, 8) , (const, 0x4, 8)]
[(ram, 0x4c4f18, 8) INDIRECT (ram, 0x4c4f18, 8) , (const, 0x753, 4)]
[(ram, 0x4c4fb8, 8) INDIRECT (ram, 0x4c4fb8, 8) , (const, 0x753, 4)]
[(ram, 0x4c7780, 4) INDIRECT (ram, 0x4c7780, 4) , (const, 0x753, 4)]
[(ram, 0x4c7784, 4) INDIRECT (ram, 0x4c7784, 4) , (const, 0x753, 4)]
[(ram, 0x4c7788, 8) INDIRECT (ram, 0x4c7788, 8) , (const, 0x753, 4)]
[(ram, 0x4c77d0, 4) INDIRECT (ram, 0x4c77d0, 4) , (const, 0x753, 4)]
[(ram, 0x4c77d4, 4) INDIRECT (ram, 0x4c77d4, 4) , (const, 0x753, 4)]
[(ram, 0x4c77d8, 8) INDIRECT (ram, 0x4c77d8, 8) , (const, 0x753, 4)]
[(ram, 0x4c77e0, 4) INDIRECT (ram, 0x4c77e0, 4) , (const, 0x753, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (register, 0xa8, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[(unique, 0x10000fa4, 8) COPY (register, 0x28, 8)]
[(unique, 0x100011f8, 8) COPY (register, 0xb8, 8)]
[(unique, 0x10001220, 8) COPY (register, 0xb0, 8)]
[(unique, 0x10001230, 8) COPY (register, 0x18, 8)]
[ ---  BRANCH (ram, 0x405ba4, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (unique, 0x10001230, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (unique, 0x10001220, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (unique, 0x100011f8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffec0, 8) MULTIEQUAL (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8)]
[(stack, 0xfffffffffffffeb8, 8) MULTIEQUAL (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(stack, 0xfffffffffffffea8, 8) MULTIEQUAL (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8)]
[(stack, 0xfffffffffffffea4, 4) MULTIEQUAL (stack, 0xfffffffffffffea4, 4) , (stack, 0xfffffffffffffea4, 4)]
[(stack, 0xfffffffffffffea0, 4) MULTIEQUAL (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4)]
[(stack, 0xfffffffffffffe98, 8) MULTIEQUAL (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8)]
[(stack, 0xfffffffffffffe90, 8) MULTIEQUAL (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8)]
[(stack, 0xfffffffffffffe88, 8) MULTIEQUAL (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8)]
[(stack, 0xfffffffffffffe80, 8) MULTIEQUAL (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8)]
[(stack, 0xfffffffffffffe78, 8) MULTIEQUAL (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8)]
[(stack, 0xfffffffffffffe70, 8) MULTIEQUAL (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8)]
[(stack, 0xfffffffffffffe6c, 4) MULTIEQUAL (stack, 0xfffffffffffffe6c, 4) , (stack, 0xfffffffffffffe6c, 4)]
[(stack, 0xfffffffffffffe60, 8) MULTIEQUAL (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8)]
[(stack, 0xfffffffffffffe30, 4) MULTIEQUAL (stack, 0xfffffffffffffe30, 4) , (stack, 0xfffffffffffffe30, 4)]
[(stack, 0xfffffffffffffda8, 8) MULTIEQUAL (stack, 0xfffffffffffffda8, 8) , (stack, 0xfffffffffffffda8, 8)]
[(stack, 0xfffffffffffffd28, 8) MULTIEQUAL (stack, 0xfffffffffffffd28, 8) , (stack, 0xfffffffffffffd28, 8)]
[(ram, 0x4c77e0, 4) MULTIEQUAL (ram, 0x4c77e0, 4) , (ram, 0x4c77e0, 4)]
[(ram, 0x4c77d8, 8) MULTIEQUAL (ram, 0x4c77d8, 8) , (ram, 0x4c77d8, 8)]
[(ram, 0x4c77d4, 4) MULTIEQUAL (ram, 0x4c77d4, 4) , (ram, 0x4c77d4, 4)]
[(ram, 0x4c77d0, 4) MULTIEQUAL (ram, 0x4c77d0, 4) , (ram, 0x4c77d0, 4)]
[(ram, 0x4c7788, 8) MULTIEQUAL (ram, 0x4c7788, 8) , (ram, 0x4c7788, 8)]
[(ram, 0x4c7784, 4) MULTIEQUAL (ram, 0x4c7784, 4) , (ram, 0x4c7784, 4)]
[(ram, 0x4c7780, 4) MULTIEQUAL (ram, 0x4c7780, 4) , (ram, 0x4c7780, 4)]
[(ram, 0x4c4fb8, 8) MULTIEQUAL (ram, 0x4c4fb8, 8) , (ram, 0x4c4fb8, 8)]
[(ram, 0x4c4f18, 8) MULTIEQUAL (ram, 0x4c4f18, 8) , (ram, 0x4c4f18, 8)]
[(register, 0x20a, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x18, 8) INT_ZEXT (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb0, 8) , (const, 0x1, 8) , (const, 0x4, 8), (register, 0xb0, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0xb0, 8)]
[(unique, 0x10000f9c, 8) COPY (register, 0x28, 8), (register, 0x28, 8) MULTIEQUAL (unique, 0x10000fa4, 8) , (unique, 0x10000fac, 8)]
[(unique, 0x10001004, 8) COPY (register, 0xa8, 8), (register, 0xa8, 8) MULTIEQUAL (register, 0xa8, 8) , (register, 0xa8, 8)]
[ ---  CBRANCH (ram, 0x405b77, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (register, 0xb0, 8), (register, 0xb0, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0xb0, 8)]
[(register, 0xa8, 8) CAST (unique, 0x100018dc, 8), (unique, 0x100018dc, 8) INT_ADD (unique, 0x100018d4, 8) , (register, 0xb8, 8), (unique, 0x100018d4, 8) CAST (register, 0xa8, 8), (register, 0xb8, 8) INT_ZEXT (unique, 0xbc80, 4)]
[(register, 0x28, 8) CAST (unique, 0x100018ec, 8), (unique, 0x100018ec, 8) INT_ADD (unique, 0x100018e4, 8) , (register, 0xb8, 8), (unique, 0x100018e4, 8) CAST (register, 0x28, 8), (register, 0xb8, 8) INT_ZEXT (unique, 0xbc80, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x786, 4)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x786, 4)]
[(ram, 0x4c4f18, 8) INDIRECT (ram, 0x4c4f18, 8) , (const, 0x786, 4)]
[(ram, 0x4c4fb8, 8) INDIRECT (ram, 0x4c4fb8, 8) , (const, 0x786, 4)]
[(ram, 0x4c7780, 4) INDIRECT (ram, 0x4c7780, 4) , (const, 0x786, 4)]
[(ram, 0x4c7784, 4) INDIRECT (ram, 0x4c7784, 4) , (const, 0x786, 4)]
[(ram, 0x4c7788, 8) INDIRECT (ram, 0x4c7788, 8) , (const, 0x786, 4)]
[(ram, 0x4c77d0, 4) INDIRECT (ram, 0x4c77d0, 4) , (const, 0x786, 4)]
[(ram, 0x4c77d4, 4) INDIRECT (ram, 0x4c77d4, 4) , (const, 0x786, 4)]
[(ram, 0x4c77d8, 8) INDIRECT (ram, 0x4c77d8, 8) , (const, 0x786, 4)]
[(ram, 0x4c77e0, 4) INDIRECT (ram, 0x4c77e0, 4) , (const, 0x786, 4)]
[(stack, 0xfffffffffffffd28, 8) INDIRECT (stack, 0xfffffffffffffd28, 8) , (const, 0x786, 4)]
[(stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x786, 4)]
[(stack, 0xfffffffffffffe30, 4) INDIRECT (stack, 0xfffffffffffffe30, 4) , (const, 0x786, 4)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x786, 4), (stack, 0xfffffffffffffe50, 8) COPY (const, 0x405bc6, 8)]
[(stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x786, 4)]
[(stack, 0xfffffffffffffe6c, 4) INDIRECT (stack, 0xfffffffffffffe6c, 4) , (const, 0x786, 4)]
[(stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0x786, 4)]
[(stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0x786, 4)]
[(stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x786, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x786, 4)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x786, 4)]
[(stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x786, 4)]
[(stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x786, 4)]
[(stack, 0xfffffffffffffea4, 4) INDIRECT (stack, 0xfffffffffffffea4, 4) , (const, 0x786, 4)]
[(stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x786, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x786, 4)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x786, 4)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x786, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x786, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x786, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x786, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x786, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x786, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x786, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x786, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x786, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x786, 4)]
[ ---  CALL (ram, 0x401060, 8) , (register, 0xa8, 8) , (register, 0x28, 8) , (register, 0xb8, 8), (register, 0xb8, 8) INT_ZEXT (unique, 0xbc80, 4)]
[ ---  BRANCH (ram, 0x405b77, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffec0, 8) MULTIEQUAL (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8)]
[(stack, 0xfffffffffffffeb8, 8) MULTIEQUAL (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(stack, 0xfffffffffffffea8, 8) MULTIEQUAL (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8)]
[(stack, 0xfffffffffffffea4, 4) MULTIEQUAL (stack, 0xfffffffffffffea4, 4) , (stack, 0xfffffffffffffea4, 4)]
[(stack, 0xfffffffffffffea0, 4) MULTIEQUAL (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4)]
[(stack, 0xfffffffffffffe98, 8) MULTIEQUAL (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8)]
[(stack, 0xfffffffffffffe90, 8) MULTIEQUAL (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8)]
[(stack, 0xfffffffffffffe88, 8) MULTIEQUAL (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8)]
[(stack, 0xfffffffffffffe80, 8) MULTIEQUAL (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8)]
[(stack, 0xfffffffffffffe78, 8) MULTIEQUAL (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8)]
[(stack, 0xfffffffffffffe70, 8) MULTIEQUAL (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8)]
[(stack, 0xfffffffffffffe6c, 4) MULTIEQUAL (stack, 0xfffffffffffffe6c, 4) , (stack, 0xfffffffffffffe6c, 4)]
[(stack, 0xfffffffffffffe60, 8) MULTIEQUAL (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8)]
[(stack, 0xfffffffffffffe30, 4) MULTIEQUAL (stack, 0xfffffffffffffe30, 4) , (stack, 0xfffffffffffffe30, 4)]
[(stack, 0xfffffffffffffda8, 8) MULTIEQUAL (stack, 0xfffffffffffffda8, 8) , (stack, 0xfffffffffffffda8, 8)]
[(stack, 0xfffffffffffffd28, 8) MULTIEQUAL (stack, 0xfffffffffffffd28, 8) , (stack, 0xfffffffffffffd28, 8)]
[(ram, 0x4c77e0, 4) MULTIEQUAL (ram, 0x4c77e0, 4) , (ram, 0x4c77e0, 4)]
[(ram, 0x4c77d8, 8) MULTIEQUAL (ram, 0x4c77d8, 8) , (ram, 0x4c77d8, 8)]
[(ram, 0x4c77d4, 4) MULTIEQUAL (ram, 0x4c77d4, 4) , (ram, 0x4c77d4, 4)]
[(ram, 0x4c77d0, 4) MULTIEQUAL (ram, 0x4c77d0, 4) , (ram, 0x4c77d0, 4)]
[(ram, 0x4c7788, 8) MULTIEQUAL (ram, 0x4c7788, 8) , (ram, 0x4c7788, 8)]
[(ram, 0x4c7784, 4) MULTIEQUAL (ram, 0x4c7784, 4) , (ram, 0x4c7784, 4)]
[(ram, 0x4c7780, 4) MULTIEQUAL (ram, 0x4c7780, 4) , (ram, 0x4c7780, 4)]
[(ram, 0x4c4fb8, 8) MULTIEQUAL (ram, 0x4c4fb8, 8) , (ram, 0x4c4fb8, 8)]
[(ram, 0x4c4f18, 8) MULTIEQUAL (ram, 0x4c4f18, 8) , (ram, 0x4c4f18, 8)]
[(register, 0x20a, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xa8, 8) MULTIEQUAL (unique, 0x10001004, 8) , (register, 0xa8, 8)]
[(register, 0x28, 8) MULTIEQUAL (unique, 0x10000f9c, 8) , (register, 0x28, 8)]
[ ---  CBRANCH (ram, 0x405e4a, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0xffffffff, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffec0, 8) MULTIEQUAL (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8)]
[(stack, 0xfffffffffffffeb8, 8) MULTIEQUAL (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(stack, 0xfffffffffffffea8, 8) MULTIEQUAL (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8)]
[(stack, 0xfffffffffffffea4, 4) MULTIEQUAL (stack, 0xfffffffffffffea4, 4) , (stack, 0xfffffffffffffea4, 4)]
[(stack, 0xfffffffffffffea0, 4) MULTIEQUAL (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4)]
[(stack, 0xfffffffffffffe98, 8) MULTIEQUAL (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8)]
[(stack, 0xfffffffffffffe90, 8) MULTIEQUAL (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8)]
[(stack, 0xfffffffffffffe88, 8) MULTIEQUAL (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8)]
[(stack, 0xfffffffffffffe80, 8) MULTIEQUAL (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8)]
[(stack, 0xfffffffffffffe78, 8) MULTIEQUAL (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8)]
[(stack, 0xfffffffffffffe70, 8) MULTIEQUAL (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8)]
[(stack, 0xfffffffffffffe6c, 4) MULTIEQUAL (stack, 0xfffffffffffffe6c, 4) , (stack, 0xfffffffffffffe6c, 4)]
[(stack, 0xfffffffffffffe60, 8) MULTIEQUAL (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8)]
[(stack, 0xfffffffffffffe30, 4) MULTIEQUAL (stack, 0xfffffffffffffe30, 4) , (stack, 0xfffffffffffffe30, 4)]
[(stack, 0xfffffffffffffda8, 8) MULTIEQUAL (stack, 0xfffffffffffffda8, 8) , (stack, 0xfffffffffffffda8, 8)]
[(stack, 0xfffffffffffffd28, 8) MULTIEQUAL (stack, 0xfffffffffffffd28, 8) , (stack, 0xfffffffffffffd28, 8)]
[(register, 0x20a, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4c4f18, 8) INDIRECT (ram, 0x4c4f18, 8) , (const, 0x7cb, 4), (ram, 0x4c4f18, 8) MULTIEQUAL (ram, 0x4c4f18, 8) , (ram, 0x4c4f18, 8)]
[(ram, 0x4c4fb8, 8) INDIRECT (ram, 0x4c4fb8, 8) , (const, 0x7cb, 4), (ram, 0x4c4fb8, 8) MULTIEQUAL (ram, 0x4c4fb8, 8) , (ram, 0x4c4fb8, 8)]
[(ram, 0x4c7780, 4) INDIRECT (ram, 0x4c7780, 4) , (const, 0x7cb, 4), (ram, 0x4c7780, 4) MULTIEQUAL (ram, 0x4c7780, 4) , (ram, 0x4c7780, 4)]
[(ram, 0x4c7784, 4) INDIRECT (ram, 0x4c7784, 4) , (const, 0x7cb, 4), (ram, 0x4c7784, 4) MULTIEQUAL (ram, 0x4c7784, 4) , (ram, 0x4c7784, 4)]
[(ram, 0x4c7788, 8) INDIRECT (ram, 0x4c7788, 8) , (const, 0x7cb, 4), (ram, 0x4c7788, 8) MULTIEQUAL (ram, 0x4c7788, 8) , (ram, 0x4c7788, 8)]
[(ram, 0x4c77d0, 4) INDIRECT (ram, 0x4c77d0, 4) , (const, 0x7cb, 4), (ram, 0x4c77d0, 4) MULTIEQUAL (ram, 0x4c77d0, 4) , (ram, 0x4c77d0, 4)]
[(ram, 0x4c77d4, 4) INDIRECT (ram, 0x4c77d4, 4) , (const, 0x7cb, 4), (ram, 0x4c77d4, 4) MULTIEQUAL (ram, 0x4c77d4, 4) , (ram, 0x4c77d4, 4)]
[(ram, 0x4c77d8, 8) INDIRECT (ram, 0x4c77d8, 8) , (const, 0x7cb, 4), (ram, 0x4c77d8, 8) MULTIEQUAL (ram, 0x4c77d8, 8) , (ram, 0x4c77d8, 8)]
[(ram, 0x4c77e0, 4) INDIRECT (ram, 0x4c77e0, 4) , (const, 0x7cb, 4), (ram, 0x4c77e0, 4) MULTIEQUAL (ram, 0x4c77e0, 4) , (ram, 0x4c77e0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (stack, 0xffffffffffffff00, 8) , (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10001904, 8), (unique, 0x10001904, 8) INT_SUB (unique, 0x100018f4, 8) , (unique, 0x100018fc, 8), (unique, 0x100018fc, 8) CAST (unique, 0xbd80, 8), (unique, 0x100018f4, 8) CAST (register, 0xa8, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (stack, 0xffffffffffffff00, 8) , (const, 0x1, 8) , (const, 0x8, 8), (register, 0xa8, 8) MULTIEQUAL (register, 0xa8, 8) , (register, 0xa8, 8), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(unique, 0x10001094, 8) COPY (stack, 0xfffffffffffffef8, 8), (stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(unique, 0x100010b4, 8) COPY (stack, 0xfffffffffffffec8, 8), (stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[ ---  BRANCH (ram, 0x405b0d, 1)]
[(register, 0xb0, 8) PTRADD (register, 0xb0, 8) , (const, 0x2, 8) , (const, 0x4, 8)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x7a2, 4), (stack, 0xfffffffffffffe50, 8) COPY (const, 0x405b90, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x7a9, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x7a2, 4)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x7a9, 4), (register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x7a2, 4)]
[(ram, 0x4c4f18, 8) INDIRECT (ram, 0x4c4f18, 8) , (const, 0x7a9, 4), (ram, 0x4c4f18, 8) INDIRECT (ram, 0x4c4f18, 8) , (const, 0x7a2, 4)]
[(ram, 0x4c4fb8, 8) INDIRECT (ram, 0x4c4fb8, 8) , (const, 0x7a9, 4), (ram, 0x4c4fb8, 8) INDIRECT (ram, 0x4c4fb8, 8) , (const, 0x7a2, 4)]
[(ram, 0x4c7780, 4) INDIRECT (ram, 0x4c7780, 4) , (const, 0x7a9, 4), (ram, 0x4c7780, 4) INDIRECT (ram, 0x4c7780, 4) , (const, 0x7a2, 4)]
[(ram, 0x4c7784, 4) INDIRECT (ram, 0x4c7784, 4) , (const, 0x7a9, 4), (ram, 0x4c7784, 4) INDIRECT (ram, 0x4c7784, 4) , (const, 0x7a2, 4)]
[(ram, 0x4c7788, 8) INDIRECT (ram, 0x4c7788, 8) , (const, 0x7a9, 4), (ram, 0x4c7788, 8) INDIRECT (ram, 0x4c7788, 8) , (const, 0x7a2, 4)]
[(ram, 0x4c77d0, 4) INDIRECT (ram, 0x4c77d0, 4) , (const, 0x7a9, 4), (ram, 0x4c77d0, 4) INDIRECT (ram, 0x4c77d0, 4) , (const, 0x7a2, 4)]
[(ram, 0x4c77d4, 4) INDIRECT (ram, 0x4c77d4, 4) , (const, 0x7a9, 4), (ram, 0x4c77d4, 4) INDIRECT (ram, 0x4c77d4, 4) , (const, 0x7a2, 4)]
[(ram, 0x4c77d8, 8) INDIRECT (ram, 0x4c77d8, 8) , (const, 0x7a9, 4), (ram, 0x4c77d8, 8) INDIRECT (ram, 0x4c77d8, 8) , (const, 0x7a2, 4)]
[(ram, 0x4c77e0, 4) INDIRECT (ram, 0x4c77e0, 4) , (const, 0x7a9, 4), (ram, 0x4c77e0, 4) INDIRECT (ram, 0x4c77e0, 4) , (const, 0x7a2, 4)]
[(stack, 0xfffffffffffffd28, 8) INDIRECT (stack, 0xfffffffffffffd28, 8) , (const, 0x7a9, 4), (stack, 0xfffffffffffffd28, 8) INDIRECT (stack, 0xfffffffffffffd28, 8) , (const, 0x7a2, 4)]
[(stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x7a9, 4), (stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x7a2, 4)]
[(stack, 0xfffffffffffffe30, 4) INDIRECT (stack, 0xfffffffffffffe30, 4) , (const, 0x7a9, 4), (stack, 0xfffffffffffffe30, 4) INDIRECT (stack, 0xfffffffffffffe30, 4) , (const, 0x7a2, 4)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x7a9, 4), (stack, 0xfffffffffffffe50, 8) COPY (const, 0x405ba1, 8)]
[(stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x7a9, 4), (stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x7a2, 4)]
[(stack, 0xfffffffffffffe6c, 4) INDIRECT (stack, 0xfffffffffffffe6c, 4) , (const, 0x7a9, 4), (stack, 0xfffffffffffffe6c, 4) INDIRECT (stack, 0xfffffffffffffe6c, 4) , (const, 0x7a2, 4)]
[(stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0x7a9, 4), (stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0x7a2, 4)]
[(stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0x7a9, 4), (stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0x7a2, 4)]
[(stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x7a9, 4), (stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x7a2, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x7a9, 4), (stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x7a2, 4)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x7a9, 4), (stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x7a2, 4)]
[(stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x7a9, 4), (stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x7a2, 4)]
[(stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x7a9, 4), (stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x7a2, 4)]
[(stack, 0xfffffffffffffea4, 4) INDIRECT (stack, 0xfffffffffffffea4, 4) , (const, 0x7a9, 4), (stack, 0xfffffffffffffea4, 4) INDIRECT (stack, 0xfffffffffffffea4, 4) , (const, 0x7a2, 4)]
[(stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x7a9, 4), (stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x7a2, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x7a9, 4), (stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x7a2, 4)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x7a9, 4), (stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x7a2, 4)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x7a9, 4), (stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x7a2, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x7a9, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x7a2, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x7a9, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x7a2, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x7a9, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x7a2, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x7a9, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x7a2, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x7a9, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x7a2, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x7a9, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x7a2, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x7a9, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x7a2, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x7a9, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x7a2, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x7a9, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x7a2, 4)]
[ ---  CALL (ram, 0x401060, 8) , (register, 0xa8, 8) , (unique, 0xbd80, 8) , (register, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x401190, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (unique, 0x10000eb4, 8) , (register, 0x18, 8) , (const, 0x8, 8)]
[(register, 0xa8, 8) CAST (unique, 0x10001914, 8), (unique, 0x10001914, 8) INT_ADD (unique, 0x1000190c, 8) , (register, 0x0, 8), (unique, 0x1000190c, 8) CAST (register, 0xa8, 8), (register, 0x0, 8) CALL (ram, 0x401190, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (unique, 0x10000eb4, 8) , (register, 0x18, 8) , (const, 0x8, 8)]
[(unique, 0x10000fac, 8) COPY (register, 0x28, 8)]
[(unique, 0x100008ef, 1) COPY (const, 0x1, 1)]
[ ---  BRANCH (ram, 0x405a56, 1)]
[ ---  CBRANCH (ram, 0x405e28, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbe00, 8) , (const, 0x0, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (unique, 0x10000eb4, 8) , (register, 0x8, 8) , (const, 0x8, 8), (register, 0x8, 8) INT_ZEXT (register, 0x8, 4)]
[(register, 0x0, 8) INT_ADD (register, 0x0, 8) , (const, 0x8, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffec0, 8) MULTIEQUAL (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8)]
[(stack, 0xfffffffffffffeb8, 8) MULTIEQUAL (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(stack, 0xfffffffffffffea8, 8) MULTIEQUAL (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8)]
[(stack, 0xfffffffffffffea0, 4) MULTIEQUAL (unique, 0xbd00, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4)]
[(stack, 0xfffffffffffffe90, 8) MULTIEQUAL (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8)]
[(stack, 0xfffffffffffffe88, 8) MULTIEQUAL (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8)]
[(stack, 0xfffffffffffffe80, 8) MULTIEQUAL (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8)]
[(stack, 0xfffffffffffffe78, 8) MULTIEQUAL (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8)]
[(stack, 0xfffffffffffffe70, 8) MULTIEQUAL (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8)]
[(stack, 0xfffffffffffffe6c, 4) MULTIEQUAL (stack, 0xfffffffffffffe6c, 4) , (stack, 0xfffffffffffffe6c, 4) , (stack, 0xfffffffffffffe6c, 4)]
[(stack, 0xfffffffffffffe60, 8) MULTIEQUAL (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8)]
[(stack, 0xfffffffffffffe30, 4) MULTIEQUAL (stack, 0xfffffffffffffe30, 4) , (stack, 0xfffffffffffffe30, 4) , (stack, 0xfffffffffffffe30, 4)]
[(stack, 0xfffffffffffffda8, 8) MULTIEQUAL (stack, 0xfffffffffffffda8, 8) , (stack, 0xfffffffffffffda8, 8) , (stack, 0xfffffffffffffda8, 8)]
[(stack, 0xfffffffffffffd28, 8) MULTIEQUAL (stack, 0xfffffffffffffd28, 8) , (stack, 0xfffffffffffffd28, 8) , (stack, 0xfffffffffffffd28, 8)]
[(ram, 0x4c77e0, 4) MULTIEQUAL (ram, 0x4c77e0, 4) , (ram, 0x4c77e0, 4) , (ram, 0x4c77e0, 4)]
[(ram, 0x4c77d8, 8) MULTIEQUAL (ram, 0x4c77d8, 8) , (ram, 0x4c77d8, 8) , (ram, 0x4c77d8, 8)]
[(ram, 0x4c77d4, 4) MULTIEQUAL (ram, 0x4c77d4, 4) , (ram, 0x4c77d4, 4) , (ram, 0x4c77d4, 4)]
[(ram, 0x4c77d0, 4) MULTIEQUAL (ram, 0x4c77d0, 4) , (ram, 0x4c77d0, 4) , (ram, 0x4c77d0, 4)]
[(ram, 0x4c7788, 8) MULTIEQUAL (ram, 0x4c7788, 8) , (ram, 0x4c7788, 8) , (ram, 0x4c7788, 8)]
[(ram, 0x4c7784, 4) MULTIEQUAL (ram, 0x4c7784, 4) , (ram, 0x4c7784, 4) , (ram, 0x4c7784, 4)]
[(ram, 0x4c7780, 4) MULTIEQUAL (ram, 0x4c7780, 4) , (ram, 0x4c7780, 4) , (ram, 0x4c7780, 4)]
[(ram, 0x4c4fb8, 8) MULTIEQUAL (ram, 0x4c4fb8, 8) , (ram, 0x4c4fb8, 8) , (ram, 0x4c4fb8, 8)]
[(ram, 0x4c4f18, 8) MULTIEQUAL (ram, 0x4c4f18, 8) , (ram, 0x4c4f18, 8) , (ram, 0x4c4f18, 8)]
[(register, 0x20a, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1) , (register, 0x20a, 1)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb8, 8) MULTIEQUAL (register, 0xb8, 8) , (register, 0xb8, 8) , (register, 0xb8, 8)]
[(register, 0xb0, 8) MULTIEQUAL (register, 0xa8, 8) , (register, 0xb0, 8) , (register, 0xb0, 8)]
[(unique, 0x10000eec, 8) COPY (stack, 0xfffffffffffffef0, 8), (stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(unique, 0x10000ee4, 8) COPY (stack, 0xfffffffffffffee8, 8), (stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(unique, 0x10000ec8, 4) COPY (stack, 0xfffffffffffffea4, 4), (stack, 0xfffffffffffffea4, 4) MULTIEQUAL (stack, 0xfffffffffffffea4, 4) , (stack, 0xfffffffffffffea4, 4) , (stack, 0xfffffffffffffea4, 4)]
[(register, 0xa8, 8) CAST (unique, 0x10001934, 8), (unique, 0x10001934, 8) INT_ADD (unique, 0x1000192c, 8) , (const, 0x4, 8), (unique, 0x1000192c, 8) CAST (register, 0xa8, 8), (register, 0xa8, 8) MULTIEQUAL (unique, 0x1000100c, 8) , (register, 0xa8, 8) , (register, 0xa8, 8)]
[ ---  CBRANCH (ram, 0x405a54, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xfffffffffffffe98, 8) , (register, 0xa0, 8), (register, 0xa0, 8) CAST (unique, 0x10001924, 8), (unique, 0x10001924, 8) INT_ADD (unique, 0x1000191c, 8) , (const, 0x4, 8), (unique, 0x1000191c, 8) CAST (register, 0xa0, 8), (register, 0xa0, 8) MULTIEQUAL (register, 0xb0, 8) , (register, 0xa0, 8) , (register, 0xa0, 8), (stack, 0xfffffffffffffe98, 8) MULTIEQUAL (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8)]
[(stack, 0xfffffffffffffe78, 4) SUBPIECE (stack, 0xfffffffffffffe78, 8) , (const, 0x0, 8)]
[(unique, 0x10000f6c, 8) COPY (stack, 0xfffffffffffffec0, 8)]
[ ---  CBRANCH (ram, 0x4011bf, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xfffffffffffffea4, 4) , (stack, 0xfffffffffffffea0, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffec0, 8) MULTIEQUAL (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8)]
[(stack, 0xfffffffffffffeb8, 8) MULTIEQUAL (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(stack, 0xfffffffffffffea8, 8) MULTIEQUAL (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8)]
[(stack, 0xfffffffffffffea4, 4) MULTIEQUAL (stack, 0xfffffffffffffea4, 4) , (stack, 0xfffffffffffffea4, 4)]
[(stack, 0xfffffffffffffea0, 4) MULTIEQUAL (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4)]
[(stack, 0xfffffffffffffe98, 8) MULTIEQUAL (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8)]
[(stack, 0xfffffffffffffe90, 8) MULTIEQUAL (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8)]
[(stack, 0xfffffffffffffe88, 8) MULTIEQUAL (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8)]
[(stack, 0xfffffffffffffe80, 8) MULTIEQUAL (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8)]
[(stack, 0xfffffffffffffe78, 8) MULTIEQUAL (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8)]
[(stack, 0xfffffffffffffe70, 8) MULTIEQUAL (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8)]
[(stack, 0xfffffffffffffe6c, 4) MULTIEQUAL (stack, 0xfffffffffffffe6c, 4) , (stack, 0xfffffffffffffe6c, 4)]
[(stack, 0xfffffffffffffe60, 8) MULTIEQUAL (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8)]
[(stack, 0xfffffffffffffe30, 4) MULTIEQUAL (stack, 0xfffffffffffffe30, 4) , (stack, 0xfffffffffffffe30, 4)]
[(stack, 0xfffffffffffffda8, 8) MULTIEQUAL (stack, 0xfffffffffffffda8, 8) , (stack, 0xfffffffffffffda8, 8)]
[(stack, 0xfffffffffffffd28, 8) MULTIEQUAL (stack, 0xfffffffffffffd28, 8) , (stack, 0xfffffffffffffd28, 8)]
[(ram, 0x4c77e0, 4) MULTIEQUAL (ram, 0x4c77e0, 4) , (ram, 0x4c77e0, 4)]
[(ram, 0x4c77d4, 4) MULTIEQUAL (ram, 0x4c77d4, 4) , (ram, 0x4c77d4, 4)]
[(ram, 0x4c77d0, 4) MULTIEQUAL (ram, 0x4c77d0, 4) , (ram, 0x4c77d0, 4)]
[(ram, 0x4c7788, 8) MULTIEQUAL (ram, 0x4c7788, 8) , (ram, 0x4c7788, 8)]
[(ram, 0x4c7784, 4) MULTIEQUAL (ram, 0x4c7784, 4) , (ram, 0x4c7784, 4)]
[(ram, 0x4c7780, 4) MULTIEQUAL (ram, 0x4c7780, 4) , (ram, 0x4c7780, 4)]
[(ram, 0x4c4fb8, 8) MULTIEQUAL (ram, 0x4c4fb8, 8) , (ram, 0x4c4fb8, 8)]
[(ram, 0x4c4f18, 8) MULTIEQUAL (ram, 0x4c4f18, 8) , (ram, 0x4c4f18, 8)]
[(register, 0x20a, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1)]
[(register, 0x18, 8) MULTIEQUAL (unique, 0x10000f6c, 8) , (unique, 0x10000f64, 8)]
[(stack, 0xfffffffffffffe50, 8) PTRSUB (const, 0x0, 8) , (const, 0x4011c4, 8)]
[(register, 0x20, 8) CAST (unique, 0x10001944, 8), (unique, 0x10001944, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffd28, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x1000194c, 8), (unique, 0x1000194c, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x1000116c, 8) COPY (ram, 0x4c77d8, 8), (ram, 0x4c77d8, 8) MULTIEQUAL (ram, 0x4c77d8, 8) , (ram, 0x4c77d8, 8)]
[ ---  CBRANCH (ram, 0x401233, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4c77d8, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x1000193c, 8), (unique, 0x1000193c, 8) INT_ADD (register, 0x110, 8) , (const, 0x10, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8), (ram, 0x4c77d8, 8) MULTIEQUAL (ram, 0x4c77d8, 8) , (ram, 0x4c77d8, 8)]
[ ---  CBRANCH (ram, 0x40120f, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10001954, 8), (unique, 0x10001954, 8) INT_ADD (register, 0x110, 8) , (const, 0x18, 8)]
[ ---  CALLOTHER (const, 0x11, 4)]
[ ---  CBRANCH (const, 0x4, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4c77d0, 4) , (const, 0x0, 4)]
[(ram, 0x4c77d0, 4) COPY (const, 0x1, 4)]
[(unique, 0x10001174, 8) COPY (unique, 0xbd80, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xcef, 4)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0xcef, 4)]
[(ram, 0x4c4f18, 8) INDIRECT (ram, 0x4c4f18, 8) , (const, 0xcef, 4)]
[(ram, 0x4c4fb8, 8) INDIRECT (ram, 0x4c4fb8, 8) , (const, 0xcef, 4)]
[(ram, 0x4c7780, 4) INDIRECT (ram, 0x4c7780, 4) , (const, 0xcef, 4)]
[(ram, 0x4c7784, 4) INDIRECT (ram, 0x4c7784, 4) , (const, 0xcef, 4)]
[(ram, 0x4c7788, 8) INDIRECT (ram, 0x4c7788, 8) , (const, 0xcef, 4)]
[(ram, 0x4c77d0, 4) INDIRECT (ram, 0x4c77d0, 4) , (const, 0xcef, 4)]
[(ram, 0x4c77d4, 4) INDIRECT (ram, 0x4c77d4, 4) , (const, 0xcef, 4)]
[(ram, 0x4c77d8, 8) INDIRECT (ram, 0x4c77d8, 8) , (const, 0xcef, 4)]
[(ram, 0x4c77e0, 4) INDIRECT (ram, 0x4c77e0, 4) , (const, 0xcef, 4)]
[(stack, 0xfffffffffffffd28, 8) INDIRECT (stack, 0xfffffffffffffd28, 8) , (const, 0xcef, 4)]
[(stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0xcef, 4)]
[(stack, 0xfffffffffffffe30, 4) INDIRECT (stack, 0xfffffffffffffe30, 4) , (const, 0xcef, 4)]
[(stack, 0xfffffffffffffe40, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0xcef, 4)]
[(stack, 0xfffffffffffffe48, 8) INDIRECT (register, 0x18, 8) , (const, 0xcef, 4)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0xcef, 4)]
[(stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0xcef, 4)]
[(stack, 0xfffffffffffffe6c, 4) INDIRECT (stack, 0xfffffffffffffe6c, 4) , (const, 0xcef, 4)]
[(stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0xcef, 4)]
[(stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0xcef, 4)]
[(stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0xcef, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0xcef, 4)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0xcef, 4)]
[(stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0xcef, 4)]
[(stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0xcef, 4)]
[(stack, 0xfffffffffffffea4, 4) INDIRECT (stack, 0xfffffffffffffea4, 4) , (const, 0xcef, 4)]
[(stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0xcef, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0xcef, 4)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0xcef, 4)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0xcef, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0xcef, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0xcef, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0xcef, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0xcef, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0xcef, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0xcef, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0xcef, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0xcef, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xcef, 4)]
[ ---  CALL (ram, 0x421390, 8) , (unique, 0x10000a58, 8), (unique, 0x10000a58, 8) PTRSUB (const, 0x0, 8) , (const, 0x4c77d0, 8)]
[(unique, 0x1000117c, 8) COPY (unique, 0xbd80, 8)]
[(unique, 0x1000118c, 8) COPY (unique, 0xbd80, 8)]
[ ---  CBRANCH (const, 0x4, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4c77d0, 4) , (const, 0x0, 4)]
[(ram, 0x4c77d0, 4) COPY (const, 0x1, 4)]
[(unique, 0x10001184, 8) COPY (unique, 0xbd80, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffec0, 8) MULTIEQUAL (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8)]
[(stack, 0xfffffffffffffeb8, 8) MULTIEQUAL (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(stack, 0xfffffffffffffea8, 8) MULTIEQUAL (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8)]
[(stack, 0xfffffffffffffea4, 4) MULTIEQUAL (stack, 0xfffffffffffffea4, 4) , (stack, 0xfffffffffffffea4, 4) , (stack, 0xfffffffffffffea4, 4) , (stack, 0xfffffffffffffea4, 4) , (stack, 0xfffffffffffffea4, 4)]
[(stack, 0xfffffffffffffea0, 4) MULTIEQUAL (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4)]
[(stack, 0xfffffffffffffe98, 8) MULTIEQUAL (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8)]
[(stack, 0xfffffffffffffe90, 8) MULTIEQUAL (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8)]
[(stack, 0xfffffffffffffe88, 8) MULTIEQUAL (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8)]
[(stack, 0xfffffffffffffe80, 8) MULTIEQUAL (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8)]
[(stack, 0xfffffffffffffe78, 8) MULTIEQUAL (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8)]
[(stack, 0xfffffffffffffe70, 8) MULTIEQUAL (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8)]
[(stack, 0xfffffffffffffe6c, 4) MULTIEQUAL (stack, 0xfffffffffffffe6c, 4) , (stack, 0xfffffffffffffe6c, 4) , (stack, 0xfffffffffffffe6c, 4) , (stack, 0xfffffffffffffe6c, 4) , (stack, 0xfffffffffffffe6c, 4)]
[(stack, 0xfffffffffffffe60, 8) MULTIEQUAL (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8)]
[(stack, 0xfffffffffffffe50, 8) MULTIEQUAL (stack, 0xfffffffffffffe50, 8) , (stack, 0xfffffffffffffe50, 8) , (stack, 0xfffffffffffffe50, 8) , (stack, 0xfffffffffffffe50, 8) , (stack, 0xfffffffffffffe50, 8)]
[(stack, 0xfffffffffffffe48, 8) MULTIEQUAL (register, 0x18, 8) , (register, 0x18, 8) , (stack, 0xfffffffffffffe48, 8) , (register, 0x18, 8) , (register, 0x18, 8)]
[(stack, 0xfffffffffffffe40, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8) , (stack, 0xfffffffffffffe40, 8) , (unique, 0xbd80, 8) , (unique, 0xbd80, 8)]
[(stack, 0xfffffffffffffe30, 4) MULTIEQUAL (stack, 0xfffffffffffffe30, 4) , (stack, 0xfffffffffffffe30, 4) , (stack, 0xfffffffffffffe30, 4) , (stack, 0xfffffffffffffe30, 4) , (stack, 0xfffffffffffffe30, 4)]
[(stack, 0xfffffffffffffda8, 8) MULTIEQUAL (stack, 0xfffffffffffffda8, 8) , (stack, 0xfffffffffffffda8, 8) , (stack, 0xfffffffffffffda8, 8) , (stack, 0xfffffffffffffda8, 8) , (stack, 0xfffffffffffffda8, 8)]
[(stack, 0xfffffffffffffd28, 8) MULTIEQUAL (stack, 0xfffffffffffffd28, 8) , (stack, 0xfffffffffffffd28, 8) , (stack, 0xfffffffffffffd28, 8) , (stack, 0xfffffffffffffd28, 8) , (stack, 0xfffffffffffffd28, 8)]
[(ram, 0x4c77d8, 8) MULTIEQUAL (unique, 0x1000116c, 8) , (unique, 0x10001174, 8) , (unique, 0x1000117c, 8) , (unique, 0x10001184, 8) , (unique, 0x1000118c, 8)]
[(ram, 0x4c77d0, 4) MULTIEQUAL (ram, 0x4c77d0, 4) , (ram, 0x4c77d0, 4) , (ram, 0x4c77d0, 4) , (ram, 0x4c77d0, 4) , (ram, 0x4c77d0, 4)]
[(ram, 0x4c7788, 8) MULTIEQUAL (ram, 0x4c7788, 8) , (ram, 0x4c7788, 8) , (ram, 0x4c7788, 8) , (ram, 0x4c7788, 8) , (ram, 0x4c7788, 8)]
[(ram, 0x4c7784, 4) MULTIEQUAL (ram, 0x4c7784, 4) , (ram, 0x4c7784, 4) , (ram, 0x4c7784, 4) , (ram, 0x4c7784, 4) , (ram, 0x4c7784, 4)]
[(ram, 0x4c7780, 4) MULTIEQUAL (ram, 0x4c7780, 4) , (ram, 0x4c7780, 4) , (ram, 0x4c7780, 4) , (ram, 0x4c7780, 4) , (ram, 0x4c7780, 4)]
[(ram, 0x4c4fb8, 8) MULTIEQUAL (ram, 0x4c4fb8, 8) , (ram, 0x4c4fb8, 8) , (ram, 0x4c4fb8, 8) , (ram, 0x4c4fb8, 8) , (ram, 0x4c4fb8, 8)]
[(ram, 0x4c4f18, 8) MULTIEQUAL (ram, 0x4c4f18, 8) , (ram, 0x4c4f18, 8) , (ram, 0x4c4f18, 8) , (ram, 0x4c4f18, 8) , (ram, 0x4c4f18, 8)]
[(register, 0x20a, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1) , (register, 0x20a, 1) , (register, 0x20a, 1) , (register, 0x20a, 1)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4c77d4, 4) INT_ADD (ram, 0x4c77d4, 4) , (const, 0x1, 4), (ram, 0x4c77d4, 4) MULTIEQUAL (ram, 0x4c77d4, 4) , (ram, 0x4c77d4, 4) , (ram, 0x4c77d4, 4) , (ram, 0x4c77d4, 4) , (ram, 0x4c77d4, 4)]
[ ---  CBRANCH (ram, 0x401278, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4c77e0, 4) , (const, 0x0, 4), (ram, 0x4c77e0, 4) MULTIEQUAL (ram, 0x4c77e0, 4) , (ram, 0x4c77e0, 4) , (ram, 0x4c77e0, 4) , (ram, 0x4c77e0, 4) , (ram, 0x4c77e0, 4)]
[(ram, 0x4c77e0, 4) COPY (const, 0x1, 4)]
[(register, 0x0, 8) COPY (const, 0x10, 8)]
[(stack, 0xfffffffffffffd28, 8) MULTIEQUAL (stack, 0xfffffffffffffd28, 8) , (stack, 0xfffffffffffffd28, 8)]
[ ---  CBRANCH (ram, 0x401267, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0xffffffffffffffff, 8), (register, 0x0, 8) INT_ADD (register, 0x0, 8) , (const, 0xffffffffffffffff, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[(stack, 0xfffffffffffffd28, 8) INDIRECT (stack, 0xfffffffffffffd28, 8) , (const, 0xb89, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000195c, 8) , (const, 0x0, 8), (unique, 0x1000195c, 8) CAST (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (unique, 0x10000a80, 8) , (unique, 0x3300, 8) , (const, 0x1, 8), (unique, 0x10000a80, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffd28, 8), (unique, 0x3300, 8) INT_MULT (register, 0x0, 8) , (const, 0x8, 8)]
[ ---  BRANCH (ram, 0x401251, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xba6, 4)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0xba6, 4)]
[(ram, 0x4c4f18, 8) INDIRECT (ram, 0x4c4f18, 8) , (const, 0xba6, 4)]
[(ram, 0x4c4fb8, 8) INDIRECT (ram, 0x4c4fb8, 8) , (const, 0xba6, 4)]
[(ram, 0x4c7780, 4) INDIRECT (ram, 0x4c7780, 4) , (const, 0xba6, 4)]
[(ram, 0x4c7784, 4) INDIRECT (ram, 0x4c7784, 4) , (const, 0xba6, 4)]
[(ram, 0x4c7788, 8) INDIRECT (ram, 0x4c7788, 8) , (const, 0xba6, 4)]
[(ram, 0x4c77d0, 4) INDIRECT (ram, 0x4c77d0, 4) , (const, 0xba6, 4)]
[(ram, 0x4c77d4, 4) INDIRECT (ram, 0x4c77d4, 4) , (const, 0xba6, 4)]
[(ram, 0x4c77d8, 8) INDIRECT (ram, 0x4c77d8, 8) , (const, 0xba6, 4)]
[(ram, 0x4c77e0, 4) INDIRECT (ram, 0x4c77e0, 4) , (const, 0xba6, 4)]
[(stack, 0xfffffffffffffd28, 8) INDIRECT (unique, 0xbe00, 8) , (const, 0xba6, 4), (unique, 0xbe00, 8) INT_OR (stack, 0xfffffffffffffd28, 8) , (const, 0x20, 8)]
[(stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0xba6, 4)]
[(stack, 0xfffffffffffffe30, 4) INDIRECT (stack, 0xfffffffffffffe30, 4) , (const, 0xba6, 4)]
[(stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0xba6, 4)]
[(stack, 0xfffffffffffffe48, 8) INDIRECT (stack, 0xfffffffffffffe48, 8) , (const, 0xba6, 4)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0xba6, 4)]
[(stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0xba6, 4)]
[(stack, 0xfffffffffffffe6c, 4) INDIRECT (stack, 0xfffffffffffffe6c, 4) , (const, 0xba6, 4)]
[(stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0xba6, 4)]
[(stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0xba6, 4)]
[(stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0xba6, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0xba6, 4)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0xba6, 4)]
[(stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0xba6, 4)]
[(stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0xba6, 4)]
[(stack, 0xfffffffffffffea4, 4) INDIRECT (stack, 0xfffffffffffffea4, 4) , (const, 0xba6, 4)]
[(stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0xba6, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0xba6, 4)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0xba6, 4)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0xba6, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0xba6, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0xba6, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0xba6, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0xba6, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0xba6, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0xba6, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0xba6, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0xba6, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xba6, 4)]
[ ---  CALL (ram, 0x469590, 8) , (const, 0x1, 4) , (register, 0x20, 8) , (const, 0x0, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffec0, 8) MULTIEQUAL (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8)]
[(stack, 0xfffffffffffffeb8, 8) MULTIEQUAL (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(stack, 0xfffffffffffffea8, 8) MULTIEQUAL (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8)]
[(stack, 0xfffffffffffffea4, 4) MULTIEQUAL (stack, 0xfffffffffffffea4, 4) , (stack, 0xfffffffffffffea4, 4)]
[(stack, 0xfffffffffffffea0, 4) MULTIEQUAL (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4)]
[(stack, 0xfffffffffffffe98, 8) MULTIEQUAL (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8)]
[(stack, 0xfffffffffffffe90, 8) MULTIEQUAL (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8)]
[(stack, 0xfffffffffffffe88, 8) MULTIEQUAL (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8)]
[(stack, 0xfffffffffffffe80, 8) MULTIEQUAL (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8)]
[(stack, 0xfffffffffffffe78, 8) MULTIEQUAL (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8)]
[(stack, 0xfffffffffffffe70, 8) MULTIEQUAL (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8)]
[(stack, 0xfffffffffffffe6c, 4) MULTIEQUAL (stack, 0xfffffffffffffe6c, 4) , (stack, 0xfffffffffffffe6c, 4)]
[(stack, 0xfffffffffffffe60, 8) MULTIEQUAL (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8)]
[(stack, 0xfffffffffffffe50, 8) MULTIEQUAL (stack, 0xfffffffffffffe50, 8) , (stack, 0xfffffffffffffe50, 8)]
[(stack, 0xfffffffffffffe48, 8) MULTIEQUAL (stack, 0xfffffffffffffe48, 8) , (stack, 0xfffffffffffffe48, 8)]
[(stack, 0xfffffffffffffe40, 8) MULTIEQUAL (stack, 0xfffffffffffffe40, 8) , (stack, 0xfffffffffffffe40, 8)]
[(stack, 0xfffffffffffffe30, 4) MULTIEQUAL (stack, 0xfffffffffffffe30, 4) , (stack, 0xfffffffffffffe30, 4)]
[(stack, 0xfffffffffffffda8, 8) MULTIEQUAL (stack, 0xfffffffffffffda8, 8) , (stack, 0xfffffffffffffda8, 8)]
[(stack, 0xfffffffffffffd28, 8) MULTIEQUAL (stack, 0xfffffffffffffd28, 8) , (stack, 0xfffffffffffffd28, 8)]
[(ram, 0x4c77d8, 8) MULTIEQUAL (ram, 0x4c77d8, 8) , (ram, 0x4c77d8, 8)]
[(ram, 0x4c77d4, 4) MULTIEQUAL (ram, 0x4c77d4, 4) , (ram, 0x4c77d4, 4)]
[(ram, 0x4c77d0, 4) MULTIEQUAL (ram, 0x4c77d0, 4) , (ram, 0x4c77d0, 4)]
[(ram, 0x4c7788, 8) MULTIEQUAL (ram, 0x4c7788, 8) , (ram, 0x4c7788, 8)]
[(ram, 0x4c7784, 4) MULTIEQUAL (ram, 0x4c7784, 4) , (ram, 0x4c7784, 4)]
[(ram, 0x4c7780, 4) MULTIEQUAL (ram, 0x4c7780, 4) , (ram, 0x4c7780, 4)]
[(ram, 0x4c4fb8, 8) MULTIEQUAL (ram, 0x4c4fb8, 8) , (ram, 0x4c4fb8, 8)]
[(ram, 0x4c4f18, 8) MULTIEQUAL (ram, 0x4c4f18, 8) , (ram, 0x4c4f18, 8)]
[(register, 0x20a, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x401347, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4c77e0, 4) , (const, 0x1, 4), (ram, 0x4c77e0, 4) MULTIEQUAL (ram, 0x4c77e0, 4) , (ram, 0x4c77e0, 4)]
[ ---  CBRANCH (ram, 0x4013a7, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4c77e0, 4) , (const, 0x2, 4)]
[(ram, 0x4c77e0, 4) COPY (const, 0x0, 4)]
[(unique, 0x10001134, 4) COPY (ram, 0x4c77d0, 4)]
[ ---  CBRANCH (ram, 0x4012e5, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) INT_ADD (ram, 0x4c77d4, 4) , (const, 0xffffffff, 4)]
[(ram, 0x4c77d8, 8) COPY (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x4012c0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10001964, 8), (unique, 0x10001964, 8) INT_ADD (register, 0x110, 8) , (const, 0x18, 8)]
[(unique, 0x1000113c, 4) COPY (register, 0x0, 4)]
[ ---  CBRANCH (ram, 0x4012e5, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (const, 0x1, 4) , (ram, 0x4c77d0, 4)]
[ ---  CALLOTHER (const, 0x5, 4)]
[(unique, 0x10001138, 4) COPY (ram, 0x4c77d0, 4), (ram, 0x4c77d0, 4) INT_ADD (ram, 0x4c77d0, 4) , (const, 0xffffffff, 4)]
[ ---  BRANCH (ram, 0x4012e5, 1)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0xbdf, 4)]
[(ram, 0x4c4f18, 8) INDIRECT (ram, 0x4c4f18, 8) , (const, 0xbdf, 4)]
[(ram, 0x4c4fb8, 8) INDIRECT (ram, 0x4c4fb8, 8) , (const, 0xbdf, 4)]
[(ram, 0x4c7780, 4) INDIRECT (ram, 0x4c7780, 4) , (const, 0xbdf, 4)]
[(ram, 0x4c7784, 4) INDIRECT (ram, 0x4c7784, 4) , (const, 0xbdf, 4)]
[(ram, 0x4c7788, 8) INDIRECT (ram, 0x4c7788, 8) , (const, 0xbdf, 4)]
[(ram, 0x4c77d0, 4) INDIRECT (ram, 0x4c77d0, 4) , (const, 0xbdf, 4), (ram, 0x4c77d0, 4) MULTIEQUAL (unique, 0x10001134, 4) , (unique, 0x10001138, 4) , (unique, 0x1000113c, 4) , (unique, 0x1000113c, 4)]
[(ram, 0x4c77d4, 4) INDIRECT (register, 0x0, 4) , (const, 0xbdf, 4)]
[(ram, 0x4c77e0, 4) INDIRECT (ram, 0x4c77e0, 4) , (const, 0xbdf, 4)]
[(stack, 0xfffffffffffffd28, 8) INDIRECT (stack, 0xfffffffffffffd28, 8) , (const, 0xbdf, 4)]
[(stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0xbdf, 4)]
[(stack, 0xfffffffffffffe48, 8) INDIRECT (stack, 0xfffffffffffffe48, 8) , (const, 0xbdf, 4)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0xbdf, 4)]
[(stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0xbdf, 4)]
[(stack, 0xfffffffffffffe6c, 4) INDIRECT (stack, 0xfffffffffffffe6c, 4) , (const, 0xbdf, 4)]
[(stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0xbdf, 4)]
[(stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0xbdf, 4)]
[(stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0xbdf, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0xbdf, 4)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0xbdf, 4)]
[(stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0xbdf, 4)]
[(stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0xbdf, 4)]
[(stack, 0xfffffffffffffea4, 4) INDIRECT (stack, 0xfffffffffffffea4, 4) , (const, 0xbdf, 4)]
[(stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0xbdf, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0xbdf, 4)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0xbdf, 4)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0xbdf, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0xbdf, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0xbdf, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0xbdf, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0xbdf, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0xbdf, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0xbdf, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0xbdf, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0xbdf, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xbdf, 4)]
[ ---  CALL (ram, 0x40f5f0, 8) , (const, 0x6, 4)]
[(unique, 0x10001144, 8) COPY (ram, 0x4c77d8, 8), (ram, 0x4c77d8, 8) INDIRECT (ram, 0x4c77d8, 8) , (const, 0xbdf, 4), (ram, 0x4c77d8, 8) MULTIEQUAL (ram, 0x4c77d8, 8) , (ram, 0x4c77d8, 8) , (ram, 0x4c77d8, 8) , (ram, 0x4c77d8, 8)]
[ ---  CBRANCH (ram, 0x40133f, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4c77d8, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x1000196c, 8), (unique, 0x1000196c, 8) INT_ADD (register, 0x110, 8) , (const, 0x10, 8), (ram, 0x4c77d8, 8) INDIRECT (ram, 0x4c77d8, 8) , (const, 0xbdf, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xbdf, 4), (ram, 0x4c77d8, 8) MULTIEQUAL (ram, 0x4c77d8, 8) , (ram, 0x4c77d8, 8) , (ram, 0x4c77d8, 8) , (ram, 0x4c77d8, 8)]
[ ---  CBRANCH (ram, 0x40131b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10001974, 8), (unique, 0x10001974, 8) INT_ADD (register, 0x110, 8) , (const, 0x18, 8)]
[ ---  CALLOTHER (const, 0x11, 4)]
[ ---  CBRANCH (const, 0x4, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4c77d0, 4) , (const, 0x0, 4)]
[(ram, 0x4c77d0, 4) COPY (const, 0x1, 4)]
[(unique, 0x1000114c, 8) COPY (unique, 0xbd80, 8)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0xca5, 4)]
[(ram, 0x4c4f18, 8) INDIRECT (ram, 0x4c4f18, 8) , (const, 0xca5, 4)]
[(ram, 0x4c4fb8, 8) INDIRECT (ram, 0x4c4fb8, 8) , (const, 0xca5, 4)]
[(ram, 0x4c7780, 4) INDIRECT (ram, 0x4c7780, 4) , (const, 0xca5, 4)]
[(ram, 0x4c7784, 4) INDIRECT (ram, 0x4c7784, 4) , (const, 0xca5, 4)]
[(ram, 0x4c7788, 8) INDIRECT (ram, 0x4c7788, 8) , (const, 0xca5, 4)]
[(ram, 0x4c77d0, 4) INDIRECT (ram, 0x4c77d0, 4) , (const, 0xca5, 4)]
[(ram, 0x4c77d4, 4) INDIRECT (ram, 0x4c77d4, 4) , (const, 0xca5, 4)]
[(ram, 0x4c77d8, 8) INDIRECT (ram, 0x4c77d8, 8) , (const, 0xca5, 4)]
[(ram, 0x4c77e0, 4) INDIRECT (ram, 0x4c77e0, 4) , (const, 0xca5, 4)]
[(stack, 0xfffffffffffffd28, 8) INDIRECT (stack, 0xfffffffffffffd28, 8) , (const, 0xca5, 4)]
[(stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0xca5, 4)]
[(stack, 0xfffffffffffffe48, 8) INDIRECT (stack, 0xfffffffffffffe48, 8) , (const, 0xca5, 4)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0xca5, 4)]
[(stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0xca5, 4)]
[(stack, 0xfffffffffffffe6c, 4) INDIRECT (stack, 0xfffffffffffffe6c, 4) , (const, 0xca5, 4)]
[(stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0xca5, 4)]
[(stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0xca5, 4)]
[(stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0xca5, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0xca5, 4)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0xca5, 4)]
[(stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0xca5, 4)]
[(stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0xca5, 4)]
[(stack, 0xfffffffffffffea4, 4) INDIRECT (stack, 0xfffffffffffffea4, 4) , (const, 0xca5, 4)]
[(stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0xca5, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0xca5, 4)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0xca5, 4)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0xca5, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0xca5, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0xca5, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0xca5, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0xca5, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0xca5, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0xca5, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0xca5, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0xca5, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xca5, 4)]
[ ---  CALL (ram, 0x421390, 8) , (unique, 0x10000a60, 8), (unique, 0x10000a60, 8) PTRSUB (const, 0x0, 8) , (const, 0x4c77d0, 8)]
[(unique, 0x10001154, 8) COPY (unique, 0xbd80, 8)]
[(unique, 0x10001164, 8) COPY (unique, 0xbd80, 8)]
[ ---  CBRANCH (const, 0x4, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4c77d0, 4) , (const, 0x0, 4)]
[(ram, 0x4c77d0, 4) COPY (const, 0x1, 4)]
[(unique, 0x1000115c, 8) COPY (unique, 0xbd80, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffec0, 8) MULTIEQUAL (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8)]
[(stack, 0xfffffffffffffeb8, 8) MULTIEQUAL (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(stack, 0xfffffffffffffea8, 8) MULTIEQUAL (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8)]
[(stack, 0xfffffffffffffea4, 4) MULTIEQUAL (stack, 0xfffffffffffffea4, 4) , (stack, 0xfffffffffffffea4, 4) , (stack, 0xfffffffffffffea4, 4) , (stack, 0xfffffffffffffea4, 4) , (stack, 0xfffffffffffffea4, 4)]
[(stack, 0xfffffffffffffea0, 4) MULTIEQUAL (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4)]
[(stack, 0xfffffffffffffe98, 8) MULTIEQUAL (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8)]
[(stack, 0xfffffffffffffe90, 8) MULTIEQUAL (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8)]
[(stack, 0xfffffffffffffe88, 8) MULTIEQUAL (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8)]
[(stack, 0xfffffffffffffe80, 8) MULTIEQUAL (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8)]
[(stack, 0xfffffffffffffe78, 8) MULTIEQUAL (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8)]
[(stack, 0xfffffffffffffe70, 8) MULTIEQUAL (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8)]
[(stack, 0xfffffffffffffe6c, 4) MULTIEQUAL (stack, 0xfffffffffffffe6c, 4) , (stack, 0xfffffffffffffe6c, 4) , (stack, 0xfffffffffffffe6c, 4) , (stack, 0xfffffffffffffe6c, 4) , (stack, 0xfffffffffffffe6c, 4)]
[(stack, 0xfffffffffffffe60, 8) MULTIEQUAL (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8)]
[(stack, 0xfffffffffffffe50, 8) MULTIEQUAL (stack, 0xfffffffffffffe50, 8) , (stack, 0xfffffffffffffe50, 8) , (stack, 0xfffffffffffffe50, 8) , (stack, 0xfffffffffffffe50, 8) , (stack, 0xfffffffffffffe50, 8)]
[(stack, 0xfffffffffffffe48, 8) MULTIEQUAL (stack, 0xfffffffffffffe48, 8) , (stack, 0xfffffffffffffe48, 8) , (stack, 0xfffffffffffffe48, 8) , (stack, 0xfffffffffffffe48, 8) , (stack, 0xfffffffffffffe48, 8)]
[(stack, 0xfffffffffffffe40, 8) MULTIEQUAL (stack, 0xfffffffffffffe40, 8) , (stack, 0xfffffffffffffe40, 8) , (stack, 0xfffffffffffffe40, 8) , (stack, 0xfffffffffffffe40, 8) , (stack, 0xfffffffffffffe40, 8)]
[(stack, 0xfffffffffffffd28, 8) MULTIEQUAL (stack, 0xfffffffffffffd28, 8) , (stack, 0xfffffffffffffd28, 8) , (stack, 0xfffffffffffffd28, 8) , (stack, 0xfffffffffffffd28, 8) , (stack, 0xfffffffffffffd28, 8)]
[(ram, 0x4c77d8, 8) MULTIEQUAL (unique, 0x10001144, 8) , (unique, 0x1000114c, 8) , (unique, 0x10001154, 8) , (unique, 0x1000115c, 8) , (unique, 0x10001164, 8)]
[(ram, 0x4c77d0, 4) MULTIEQUAL (ram, 0x4c77d0, 4) , (ram, 0x4c77d0, 4) , (ram, 0x4c77d0, 4) , (ram, 0x4c77d0, 4) , (ram, 0x4c77d0, 4)]
[(ram, 0x4c7788, 8) MULTIEQUAL (ram, 0x4c7788, 8) , (ram, 0x4c7788, 8) , (ram, 0x4c7788, 8) , (ram, 0x4c7788, 8) , (ram, 0x4c7788, 8)]
[(ram, 0x4c7784, 4) MULTIEQUAL (ram, 0x4c7784, 4) , (ram, 0x4c7784, 4) , (ram, 0x4c7784, 4) , (ram, 0x4c7784, 4) , (ram, 0x4c7784, 4)]
[(ram, 0x4c7780, 4) MULTIEQUAL (ram, 0x4c7780, 4) , (ram, 0x4c7780, 4) , (ram, 0x4c7780, 4) , (ram, 0x4c7780, 4) , (ram, 0x4c7780, 4)]
[(ram, 0x4c4fb8, 8) MULTIEQUAL (ram, 0x4c4fb8, 8) , (ram, 0x4c4fb8, 8) , (ram, 0x4c4fb8, 8) , (ram, 0x4c4fb8, 8) , (ram, 0x4c4fb8, 8)]
[(ram, 0x4c4f18, 8) MULTIEQUAL (ram, 0x4c4f18, 8) , (ram, 0x4c4f18, 8) , (ram, 0x4c4f18, 8) , (ram, 0x4c4f18, 8) , (ram, 0x4c4f18, 8)]
[(register, 0x20a, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1) , (register, 0x20a, 1) , (register, 0x20a, 1) , (register, 0x20a, 1)]
[(ram, 0x4c77d4, 4) INT_ADD (ram, 0x4c77d4, 4) , (const, 0x1, 4), (ram, 0x4c77d4, 4) MULTIEQUAL (ram, 0x4c77d4, 4) , (ram, 0x4c77d4, 4) , (ram, 0x4c77d4, 4) , (ram, 0x4c77d4, 4) , (ram, 0x4c77d4, 4)]
[ ---  BRANCH (ram, 0x40134c, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffec0, 8) MULTIEQUAL (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8)]
[(stack, 0xfffffffffffffeb8, 8) MULTIEQUAL (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(stack, 0xfffffffffffffea8, 8) MULTIEQUAL (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8)]
[(stack, 0xfffffffffffffea4, 4) MULTIEQUAL (stack, 0xfffffffffffffea4, 4) , (stack, 0xfffffffffffffea4, 4)]
[(stack, 0xfffffffffffffea0, 4) MULTIEQUAL (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4)]
[(stack, 0xfffffffffffffe98, 8) MULTIEQUAL (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8)]
[(stack, 0xfffffffffffffe90, 8) MULTIEQUAL (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8)]
[(stack, 0xfffffffffffffe88, 8) MULTIEQUAL (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8)]
[(stack, 0xfffffffffffffe80, 8) MULTIEQUAL (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8)]
[(stack, 0xfffffffffffffe78, 8) MULTIEQUAL (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8)]
[(stack, 0xfffffffffffffe70, 8) MULTIEQUAL (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8)]
[(stack, 0xfffffffffffffe6c, 4) MULTIEQUAL (stack, 0xfffffffffffffe6c, 4) , (stack, 0xfffffffffffffe6c, 4)]
[(stack, 0xfffffffffffffe60, 8) MULTIEQUAL (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8)]
[(stack, 0xfffffffffffffe50, 8) MULTIEQUAL (stack, 0xfffffffffffffe50, 8) , (stack, 0xfffffffffffffe50, 8)]
[(stack, 0xfffffffffffffe48, 8) MULTIEQUAL (stack, 0xfffffffffffffe48, 8) , (stack, 0xfffffffffffffe48, 8)]
[(stack, 0xfffffffffffffe40, 8) MULTIEQUAL (stack, 0xfffffffffffffe40, 8) , (stack, 0xfffffffffffffe40, 8)]
[(stack, 0xfffffffffffffd28, 8) MULTIEQUAL (stack, 0xfffffffffffffd28, 8) , (stack, 0xfffffffffffffd28, 8)]
[(ram, 0x4c77d8, 8) MULTIEQUAL (ram, 0x4c77d8, 8) , (ram, 0x4c77d8, 8)]
[(ram, 0x4c77d4, 4) MULTIEQUAL (ram, 0x4c77d4, 4) , (ram, 0x4c77d4, 4)]
[(ram, 0x4c77d0, 4) MULTIEQUAL (ram, 0x4c77d0, 4) , (ram, 0x4c77d0, 4)]
[(ram, 0x4c7788, 8) MULTIEQUAL (ram, 0x4c7788, 8) , (ram, 0x4c7788, 8)]
[(ram, 0x4c7784, 4) MULTIEQUAL (ram, 0x4c7784, 4) , (ram, 0x4c7784, 4)]
[(ram, 0x4c7780, 4) MULTIEQUAL (ram, 0x4c7780, 4) , (ram, 0x4c7780, 4)]
[(ram, 0x4c4fb8, 8) MULTIEQUAL (ram, 0x4c4fb8, 8) , (ram, 0x4c4fb8, 8)]
[(ram, 0x4c4f18, 8) MULTIEQUAL (ram, 0x4c4f18, 8) , (ram, 0x4c4f18, 8)]
[(register, 0x20a, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1)]
[(ram, 0x4c77e0, 4) COPY (const, 0x3, 4)]
[(stack, 0xfffffffffffffda8, 8) COPY (const, 0x0, 8)]
[(unique, 0x10000fb4, 8) COPY (unique, 0x3c80, 8), (unique, 0x3c80, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffdb0, 8)]
[(register, 0x8, 8) COPY (const, 0x24, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffec0, 8) MULTIEQUAL (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8)]
[(stack, 0xfffffffffffffeb8, 8) MULTIEQUAL (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(stack, 0xfffffffffffffea8, 8) MULTIEQUAL (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8)]
[(stack, 0xfffffffffffffea4, 4) MULTIEQUAL (stack, 0xfffffffffffffea4, 4) , (stack, 0xfffffffffffffea4, 4)]
[(stack, 0xfffffffffffffea0, 4) MULTIEQUAL (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4)]
[(stack, 0xfffffffffffffe98, 8) MULTIEQUAL (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8)]
[(stack, 0xfffffffffffffe90, 8) MULTIEQUAL (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8)]
[(stack, 0xfffffffffffffe88, 8) MULTIEQUAL (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8)]
[(stack, 0xfffffffffffffe80, 8) MULTIEQUAL (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8)]
[(stack, 0xfffffffffffffe78, 8) MULTIEQUAL (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8)]
[(stack, 0xfffffffffffffe70, 8) MULTIEQUAL (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8)]
[(stack, 0xfffffffffffffe6c, 4) MULTIEQUAL (stack, 0xfffffffffffffe6c, 4) , (stack, 0xfffffffffffffe6c, 4)]
[(stack, 0xfffffffffffffe60, 8) MULTIEQUAL (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8)]
[(stack, 0xfffffffffffffe50, 8) MULTIEQUAL (stack, 0xfffffffffffffe50, 8) , (stack, 0xfffffffffffffe50, 8)]
[(stack, 0xfffffffffffffe48, 8) MULTIEQUAL (stack, 0xfffffffffffffe48, 8) , (stack, 0xfffffffffffffe48, 8)]
[(stack, 0xfffffffffffffe40, 8) MULTIEQUAL (stack, 0xfffffffffffffe40, 8) , (stack, 0xfffffffffffffe40, 8)]
[(register, 0x38, 8) MULTIEQUAL (unique, 0x10000fb4, 8) , (unique, 0x10000fbc, 8)]
[ ---  CBRANCH (ram, 0x401376, 1) , (unique, 0xd300, 1), (unique, 0xd300, 1) INT_NOTEQUAL (register, 0x8, 8) , (const, 0x0, 8), (register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8)]
[(stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0xc32, 4)]
[(stack, 0xfffffffffffffe48, 8) INDIRECT (stack, 0xfffffffffffffe48, 8) , (const, 0xc32, 4)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0xc32, 4)]
[(stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0xc32, 4)]
[(stack, 0xfffffffffffffe6c, 4) INDIRECT (stack, 0xfffffffffffffe6c, 4) , (const, 0xc32, 4)]
[(stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0xc32, 4)]
[(stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0xc32, 4)]
[(stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0xc32, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0xc32, 4)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0xc32, 4)]
[(stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0xc32, 4)]
[(stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0xc32, 4)]
[(stack, 0xfffffffffffffea4, 4) INDIRECT (stack, 0xfffffffffffffea4, 4) , (const, 0xc32, 4)]
[(stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0xc32, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0xc32, 4)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0xc32, 4)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0xc32, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0xc32, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0xc32, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0xc32, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0xc32, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0xc32, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0xc32, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0xc32, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0xc32, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xc32, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000198c, 8) , (const, 0x0, 4), (unique, 0x1000198c, 8) CAST (register, 0x38, 8)]
[(unique, 0x10000fbc, 8) COPY (register, 0x38, 8), (register, 0x38, 8) CAST (unique, 0x10001984, 8), (unique, 0x10001984, 8) INT_ADD (unique, 0x1000197c, 8) , (unique, 0x10000e90, 8), (unique, 0x1000197c, 8) CAST (register, 0x38, 8), (unique, 0x10000e90, 8) INT_MULT (unique, 0x10000e50, 8) , (const, 0x4, 8), (unique, 0x10000e50, 8) INT_ADD (unique, 0x10000e48, 8) , (const, 0x1, 8), (unique, 0x10000e48, 8) INT_MULT (unique, 0xb580, 8) , (const, 0xfffffffffffffffe, 8), (unique, 0xb580, 8) INT_ZEXT (register, 0x20a, 1)]
[(register, 0x8, 8) INT_ADD (register, 0x8, 8) , (const, 0xffffffffffffffff, 8)]
[ ---  BRANCH (ram, 0x401374, 1)]
[(register, 0x0, 8) COPY (const, 0x10, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3400, 8) , (const, 0xffffffffffffffff, 8), (unique, 0x3400, 8) PTRADD (unique, 0x10000aa8, 8) , (register, 0x0, 8) , (const, 0x8, 8), (unique, 0x10000aa8, 8) PTRSUB (unique, 0x3c80, 8) , (const, 0x0, 8), (unique, 0x3c80, 8) CAST (unique, 0x10001994, 8), (unique, 0x10001994, 8) PTRADD (unique, 0x10000e80, 8) , (const, 0x80, 8) , (const, 0x1, 8), (unique, 0x10000e80, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffd28, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x40137b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) INT_ADD (register, 0x0, 8) , (const, 0xffffffffffffffff, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[(ram, 0x4c4f18, 8) INDIRECT (ram, 0x4c4f18, 8) , (const, 0xc55, 4)]
[(ram, 0x4c4fb8, 8) INDIRECT (ram, 0x4c4fb8, 8) , (const, 0xc55, 4)]
[(ram, 0x4c7780, 4) INDIRECT (ram, 0x4c7780, 4) , (const, 0xc55, 4)]
[(ram, 0x4c7784, 4) INDIRECT (ram, 0x4c7784, 4) , (const, 0xc55, 4)]
[(ram, 0x4c7788, 8) INDIRECT (ram, 0x4c7788, 8) , (const, 0xc55, 4)]
[(ram, 0x4c77d0, 4) INDIRECT (ram, 0x4c77d0, 4) , (const, 0xc55, 4)]
[(ram, 0x4c77d4, 4) INDIRECT (ram, 0x4c77d4, 4) , (const, 0xc55, 4)]
[(ram, 0x4c77d8, 8) INDIRECT (ram, 0x4c77d8, 8) , (const, 0xc55, 4)]
[(ram, 0x4c77e0, 4) INDIRECT (ram, 0x4c77e0, 4) , (const, 0xc55, 4)]
[(stack, 0xfffffffffffffd28, 8) INDIRECT (stack, 0xfffffffffffffd28, 8) , (const, 0xc55, 4)]
[(stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0xc55, 4)]
[(stack, 0xfffffffffffffe30, 4) INDIRECT (stack, 0xfffffffffffffe30, 4) , (const, 0xc55, 4), (stack, 0xfffffffffffffe30, 4) COPY (const, 0x0, 4)]
[(stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0xc55, 4)]
[(stack, 0xfffffffffffffe48, 8) INDIRECT (stack, 0xfffffffffffffe48, 8) , (const, 0xc55, 4)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0xc55, 4)]
[(stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0xc55, 4)]
[(stack, 0xfffffffffffffe6c, 4) INDIRECT (stack, 0xfffffffffffffe6c, 4) , (const, 0xc55, 4)]
[(stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0xc55, 4)]
[(stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0xc55, 4)]
[(stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0xc55, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0xc55, 4)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0xc55, 4)]
[(stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0xc55, 4)]
[(stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0xc55, 4)]
[(stack, 0xfffffffffffffea4, 4) INDIRECT (stack, 0xfffffffffffffea4, 4) , (const, 0xc55, 4)]
[(stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0xc55, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0xc55, 4)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0xc55, 4)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0xc55, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0xc55, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0xc55, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0xc55, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0xc55, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0xc55, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0xc55, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0xc55, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0xc55, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xc55, 4)]
[ ---  CALL (ram, 0x469550, 8) , (const, 0x6, 4) , (unique, 0x3c80, 8) , (const, 0x0, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffec0, 8) MULTIEQUAL (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8)]
[(stack, 0xfffffffffffffeb8, 8) MULTIEQUAL (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(stack, 0xfffffffffffffea8, 8) MULTIEQUAL (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8)]
[(stack, 0xfffffffffffffea4, 4) MULTIEQUAL (stack, 0xfffffffffffffea4, 4) , (stack, 0xfffffffffffffea4, 4)]
[(stack, 0xfffffffffffffea0, 4) MULTIEQUAL (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4)]
[(stack, 0xfffffffffffffe98, 8) MULTIEQUAL (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8)]
[(stack, 0xfffffffffffffe90, 8) MULTIEQUAL (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8)]
[(stack, 0xfffffffffffffe88, 8) MULTIEQUAL (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8)]
[(stack, 0xfffffffffffffe80, 8) MULTIEQUAL (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8)]
[(stack, 0xfffffffffffffe78, 8) MULTIEQUAL (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8)]
[(stack, 0xfffffffffffffe70, 8) MULTIEQUAL (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8)]
[(stack, 0xfffffffffffffe6c, 4) MULTIEQUAL (stack, 0xfffffffffffffe6c, 4) , (stack, 0xfffffffffffffe6c, 4)]
[(stack, 0xfffffffffffffe60, 8) MULTIEQUAL (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8)]
[(stack, 0xfffffffffffffe50, 8) MULTIEQUAL (stack, 0xfffffffffffffe50, 8) , (stack, 0xfffffffffffffe50, 8)]
[(stack, 0xfffffffffffffe48, 8) MULTIEQUAL (stack, 0xfffffffffffffe48, 8) , (stack, 0xfffffffffffffe48, 8)]
[(stack, 0xfffffffffffffe40, 8) MULTIEQUAL (stack, 0xfffffffffffffe40, 8) , (stack, 0xfffffffffffffe40, 8)]
[(stack, 0xfffffffffffffe30, 4) MULTIEQUAL (stack, 0xfffffffffffffe30, 4) , (stack, 0xfffffffffffffe30, 4)]
[(stack, 0xfffffffffffffda8, 8) MULTIEQUAL (stack, 0xfffffffffffffda8, 8) , (stack, 0xfffffffffffffda8, 8)]
[(stack, 0xfffffffffffffd28, 8) MULTIEQUAL (stack, 0xfffffffffffffd28, 8) , (stack, 0xfffffffffffffd28, 8)]
[(ram, 0x4c77d8, 8) MULTIEQUAL (ram, 0x4c77d8, 8) , (ram, 0x4c77d8, 8)]
[(ram, 0x4c77d4, 4) MULTIEQUAL (ram, 0x4c77d4, 4) , (ram, 0x4c77d4, 4)]
[(ram, 0x4c77d0, 4) MULTIEQUAL (ram, 0x4c77d0, 4) , (ram, 0x4c77d0, 4)]
[(ram, 0x4c7788, 8) MULTIEQUAL (ram, 0x4c7788, 8) , (ram, 0x4c7788, 8)]
[(ram, 0x4c7784, 4) MULTIEQUAL (ram, 0x4c7784, 4) , (ram, 0x4c7784, 4)]
[(ram, 0x4c7780, 4) MULTIEQUAL (ram, 0x4c7780, 4) , (ram, 0x4c7780, 4)]
[(ram, 0x4c4fb8, 8) MULTIEQUAL (ram, 0x4c4fb8, 8) , (ram, 0x4c4fb8, 8)]
[(ram, 0x4c4f18, 8) MULTIEQUAL (ram, 0x4c4f18, 8) , (ram, 0x4c4f18, 8)]
[ ---  CBRANCH (ram, 0x4013c4, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4c77e0, 4) , (const, 0x3, 4), (ram, 0x4c77e0, 4) MULTIEQUAL (ram, 0x4c77e0, 4) , (ram, 0x4c77e0, 4)]
[(ram, 0x4c4f18, 8) INDIRECT (ram, 0x4c4f18, 8) , (const, 0xc65, 4)]
[(ram, 0x4c4fb8, 8) INDIRECT (ram, 0x4c4fb8, 8) , (const, 0xc65, 4)]
[(ram, 0x4c7780, 4) INDIRECT (ram, 0x4c7780, 4) , (const, 0xc65, 4)]
[(ram, 0x4c7784, 4) INDIRECT (ram, 0x4c7784, 4) , (const, 0xc65, 4)]
[(ram, 0x4c7788, 8) INDIRECT (ram, 0x4c7788, 8) , (const, 0xc65, 4)]
[(ram, 0x4c77d0, 4) INDIRECT (ram, 0x4c77d0, 4) , (const, 0xc65, 4)]
[(ram, 0x4c77d4, 4) INDIRECT (ram, 0x4c77d4, 4) , (const, 0xc65, 4)]
[(ram, 0x4c77d8, 8) INDIRECT (ram, 0x4c77d8, 8) , (const, 0xc65, 4)]
[(ram, 0x4c77e0, 4) INDIRECT (ram, 0x4c77e0, 4) , (const, 0xc65, 4), (ram, 0x4c77e0, 4) COPY (const, 0x4, 4)]
[(stack, 0xfffffffffffffd28, 8) INDIRECT (stack, 0xfffffffffffffd28, 8) , (const, 0xc65, 4)]
[(stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0xc65, 4)]
[(stack, 0xfffffffffffffe30, 4) INDIRECT (stack, 0xfffffffffffffe30, 4) , (const, 0xc65, 4)]
[(stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0xc65, 4)]
[(stack, 0xfffffffffffffe48, 8) INDIRECT (stack, 0xfffffffffffffe48, 8) , (const, 0xc65, 4)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0xc65, 4)]
[(stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0xc65, 4)]
[(stack, 0xfffffffffffffe6c, 4) INDIRECT (stack, 0xfffffffffffffe6c, 4) , (const, 0xc65, 4)]
[(stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0xc65, 4)]
[(stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0xc65, 4)]
[(stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0xc65, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0xc65, 4)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0xc65, 4)]
[(stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0xc65, 4)]
[(stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0xc65, 4)]
[(stack, 0xfffffffffffffea4, 4) INDIRECT (stack, 0xfffffffffffffea4, 4) , (const, 0xc65, 4)]
[(stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0xc65, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0xc65, 4)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0xc65, 4)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0xc65, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0xc65, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0xc65, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0xc65, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0xc65, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0xc65, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0xc65, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0xc65, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0xc65, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xc65, 4)]
[ ---  CALL (ram, 0x40f5f0, 8) , (const, 0x6, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffec0, 8) MULTIEQUAL (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8)]
[(stack, 0xfffffffffffffeb8, 8) MULTIEQUAL (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(stack, 0xfffffffffffffea8, 8) MULTIEQUAL (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8)]
[(stack, 0xfffffffffffffea4, 4) MULTIEQUAL (stack, 0xfffffffffffffea4, 4) , (stack, 0xfffffffffffffea4, 4)]
[(stack, 0xfffffffffffffea0, 4) MULTIEQUAL (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4)]
[(stack, 0xfffffffffffffe98, 8) MULTIEQUAL (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8)]
[(stack, 0xfffffffffffffe90, 8) MULTIEQUAL (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8)]
[(stack, 0xfffffffffffffe88, 8) MULTIEQUAL (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8)]
[(stack, 0xfffffffffffffe80, 8) MULTIEQUAL (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8)]
[(stack, 0xfffffffffffffe78, 8) MULTIEQUAL (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8)]
[(stack, 0xfffffffffffffe70, 8) MULTIEQUAL (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8)]
[(stack, 0xfffffffffffffe6c, 4) MULTIEQUAL (stack, 0xfffffffffffffe6c, 4) , (stack, 0xfffffffffffffe6c, 4)]
[(stack, 0xfffffffffffffe60, 8) MULTIEQUAL (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8)]
[(stack, 0xfffffffffffffe50, 8) MULTIEQUAL (stack, 0xfffffffffffffe50, 8) , (stack, 0xfffffffffffffe50, 8)]
[(stack, 0xfffffffffffffe48, 8) MULTIEQUAL (stack, 0xfffffffffffffe48, 8) , (stack, 0xfffffffffffffe48, 8)]
[(stack, 0xfffffffffffffe40, 8) MULTIEQUAL (stack, 0xfffffffffffffe40, 8) , (stack, 0xfffffffffffffe40, 8)]
[(stack, 0xfffffffffffffe30, 4) MULTIEQUAL (stack, 0xfffffffffffffe30, 4) , (stack, 0xfffffffffffffe30, 4)]
[(stack, 0xfffffffffffffda8, 8) MULTIEQUAL (stack, 0xfffffffffffffda8, 8) , (stack, 0xfffffffffffffda8, 8)]
[(stack, 0xfffffffffffffd28, 8) MULTIEQUAL (stack, 0xfffffffffffffd28, 8) , (stack, 0xfffffffffffffd28, 8)]
[(ram, 0x4c77d8, 8) MULTIEQUAL (ram, 0x4c77d8, 8) , (ram, 0x4c77d8, 8)]
[(ram, 0x4c77d4, 4) MULTIEQUAL (ram, 0x4c77d4, 4) , (ram, 0x4c77d4, 4)]
[(ram, 0x4c77d0, 4) MULTIEQUAL (ram, 0x4c77d0, 4) , (ram, 0x4c77d0, 4)]
[(ram, 0x4c7788, 8) MULTIEQUAL (ram, 0x4c7788, 8) , (ram, 0x4c7788, 8)]
[(ram, 0x4c7784, 4) MULTIEQUAL (ram, 0x4c7784, 4) , (ram, 0x4c7784, 4)]
[(ram, 0x4c7780, 4) MULTIEQUAL (ram, 0x4c7780, 4) , (ram, 0x4c7780, 4)]
[(ram, 0x4c4fb8, 8) MULTIEQUAL (ram, 0x4c4fb8, 8) , (ram, 0x4c4fb8, 8)]
[(ram, 0x4c4f18, 8) MULTIEQUAL (ram, 0x4c4f18, 8) , (ram, 0x4c4f18, 8)]
[ ---  CBRANCH (ram, 0x4013d8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4c77e0, 4) , (const, 0x4, 4), (ram, 0x4c77e0, 4) MULTIEQUAL (ram, 0x4c77e0, 4) , (ram, 0x4c77e0, 4)]
[ ---  CBRANCH (ram, 0x4013f5, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4c77e0, 4) , (const, 0x5, 4)]
[ ---  BRANCH (ram, 0x4013f5, 1)]
[(stack, 0xfffffffffffffd28, 8) INDIRECT (stack, 0xfffffffffffffd28, 8) , (const, 0xc82, 4)]
[(stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0xc82, 4)]
[(stack, 0xfffffffffffffe30, 4) INDIRECT (stack, 0xfffffffffffffe30, 4) , (const, 0xc82, 4)]
[(stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0xc82, 4)]
[(stack, 0xfffffffffffffe48, 8) INDIRECT (stack, 0xfffffffffffffe48, 8) , (const, 0xc82, 4)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0xc82, 4)]
[(stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0xc82, 4)]
[(stack, 0xfffffffffffffe6c, 4) INDIRECT (stack, 0xfffffffffffffe6c, 4) , (const, 0xc82, 4)]
[(stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0xc82, 4)]
[(stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0xc82, 4)]
[(stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0xc82, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0xc82, 4)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0xc82, 4)]
[(stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0xc82, 4)]
[(stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0xc82, 4)]
[(stack, 0xfffffffffffffea4, 4) INDIRECT (stack, 0xfffffffffffffea4, 4) , (const, 0xc82, 4)]
[(stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0xc82, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0xc82, 4)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0xc82, 4)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0xc82, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0xc82, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0xc82, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0xc82, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0xc82, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0xc82, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0xc82, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0xc82, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0xc82, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xc82, 4)]
[ ---  CALL (ram, 0x454cb0, 8) , (const, 0x7f, 4)]
[(ram, 0x4c4f18, 8) COPY (ram, 0x4c4f18, 8), (ram, 0x4c4f18, 8) INDIRECT (ram, 0x4c4f18, 8) , (const, 0xc82, 4)]
[(ram, 0x4c4fb8, 8) COPY (ram, 0x4c4fb8, 8), (ram, 0x4c4fb8, 8) INDIRECT (ram, 0x4c4fb8, 8) , (const, 0xc82, 4)]
[(ram, 0x4c7780, 4) COPY (ram, 0x4c7780, 4), (ram, 0x4c7780, 4) INDIRECT (ram, 0x4c7780, 4) , (const, 0xc82, 4)]
[(ram, 0x4c7784, 4) COPY (ram, 0x4c7784, 4), (ram, 0x4c7784, 4) INDIRECT (ram, 0x4c7784, 4) , (const, 0xc82, 4)]
[(ram, 0x4c7788, 8) COPY (ram, 0x4c7788, 8), (ram, 0x4c7788, 8) INDIRECT (ram, 0x4c7788, 8) , (const, 0xc82, 4)]
[(ram, 0x4c77d0, 4) COPY (ram, 0x4c77d0, 4), (ram, 0x4c77d0, 4) INDIRECT (ram, 0x4c77d0, 4) , (const, 0xc82, 4)]
[(ram, 0x4c77d4, 4) COPY (ram, 0x4c77d4, 4), (ram, 0x4c77d4, 4) INDIRECT (ram, 0x4c77d4, 4) , (const, 0xc82, 4)]
[(ram, 0x4c77d8, 8) COPY (ram, 0x4c77d8, 8), (ram, 0x4c77d8, 8) INDIRECT (ram, 0x4c77d8, 8) , (const, 0xc82, 4)]
[(ram, 0x4c77e0, 4) COPY (ram, 0x4c77e0, 4), (ram, 0x4c77e0, 4) INDIRECT (ram, 0x4c77e0, 4) , (const, 0xc82, 4), (ram, 0x4c77e0, 4) COPY (const, 0x6, 4)]
[ ---  RETURN (const, 0x1, 4)]
[ ---  BRANCH (ram, 0x4013d7, 1)]
[(stack, 0xfffffffffffffe70, 4) SUBPIECE (stack, 0xfffffffffffffe70, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x405f15, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xfffffffffffffe78, 4) , (const, 0x950412de, 4)]
[(register, 0x0, 8) COPY (const, 0x0, 8)]
[(ram, 0x4c4f18, 8) INDIRECT (ram, 0x4c4f18, 8) , (const, 0xafa, 4), (ram, 0x4c4f18, 8) MULTIEQUAL (ram, 0x4c4f18, 8) , (ram, 0x4c4f18, 8)]
[(ram, 0x4c4fb8, 8) INDIRECT (ram, 0x4c4fb8, 8) , (const, 0xafa, 4), (ram, 0x4c4fb8, 8) MULTIEQUAL (ram, 0x4c4fb8, 8) , (ram, 0x4c4fb8, 8)]
[(ram, 0x4c7780, 4) INDIRECT (ram, 0x4c7780, 4) , (const, 0xafa, 4), (ram, 0x4c7780, 4) MULTIEQUAL (ram, 0x4c7780, 4) , (ram, 0x4c7780, 4)]
[(ram, 0x4c7784, 4) INDIRECT (ram, 0x4c7784, 4) , (const, 0xafa, 4), (ram, 0x4c7784, 4) MULTIEQUAL (ram, 0x4c7784, 4) , (ram, 0x4c7784, 4)]
[(ram, 0x4c7788, 8) INDIRECT (ram, 0x4c7788, 8) , (const, 0xafa, 4), (ram, 0x4c7788, 8) MULTIEQUAL (ram, 0x4c7788, 8) , (ram, 0x4c7788, 8)]
[(ram, 0x4c77d0, 4) INDIRECT (ram, 0x4c77d0, 4) , (const, 0xafa, 4), (ram, 0x4c77d0, 4) MULTIEQUAL (ram, 0x4c77d0, 4) , (ram, 0x4c77d0, 4)]
[(ram, 0x4c77d4, 4) INDIRECT (ram, 0x4c77d4, 4) , (const, 0xafa, 4), (ram, 0x4c77d4, 4) MULTIEQUAL (ram, 0x4c77d4, 4) , (ram, 0x4c77d4, 4)]
[(ram, 0x4c77d8, 8) INDIRECT (ram, 0x4c77d8, 8) , (const, 0xafa, 4), (ram, 0x4c77d8, 8) MULTIEQUAL (ram, 0x4c77d8, 8) , (ram, 0x4c77d8, 8)]
[(ram, 0x4c77e0, 4) INDIRECT (ram, 0x4c77e0, 4) , (const, 0xafa, 4), (ram, 0x4c77e0, 4) MULTIEQUAL (ram, 0x4c77e0, 4) , (ram, 0x4c77e0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3400, 8) , (register, 0x10, 4), (unique, 0x3400, 8) CAST (unique, 0x100019b4, 8), (unique, 0x100019b4, 8) INT_ADD (unique, 0x100019ac, 8) , (unique, 0x3300, 8), (unique, 0x100019ac, 8) CAST (stack, 0xfffffffffffffef0, 8), (unique, 0x3300, 8) INT_MULT (register, 0x0, 8) , (const, 0x4, 8), (register, 0x10, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1bb80, 4), (unique, 0x1bb80, 4) INT_LEFT (unique, 0xbc80, 4) , (const, 0x18, 4), (unique, 0x1b780, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1ba00, 4), (unique, 0x1ba00, 4) INT_LEFT (unique, 0x1b980, 4) , (const, 0x8, 4), (unique, 0x1b980, 4) INT_AND (unique, 0xbc80, 4) , (const, 0xff00, 4), (unique, 0x1b780, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1b880, 4), (unique, 0x1b880, 4) INT_RIGHT (unique, 0x1b800, 4) , (const, 0x8, 4), (unique, 0x1b800, 4) INT_AND (unique, 0xbc80, 4) , (const, 0xff0000, 4), (unique, 0x1b780, 4) INT_RIGHT (unique, 0xbc80, 4) , (const, 0x18, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) CAST (unique, 0x100019a4, 8), (unique, 0x100019a4, 8) INT_ADD (unique, 0x1000199c, 8) , (unique, 0x3300, 8), (unique, 0x1000199c, 8) CAST (stack, 0xfffffffffffffe90, 8), (unique, 0x3300, 8) INT_MULT (register, 0x0, 8) , (const, 0x4, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x405f20, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (register, 0x0, 4) , (stack, 0xfffffffffffffe70, 4), (register, 0x0, 4) SUBPIECE (register, 0x0, 8) , (const, 0x0, 4), (register, 0x0, 8) INT_ADD (register, 0x0, 8) , (const, 0x1, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x405f91, 1) , (unique, 0x100008f1, 1), (unique, 0x100008f1, 1) BOOL_AND (register, 0x200, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (unique, 0x3400, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (stack, 0xfffffffffffffe90, 8) , (const, 0x2, 8) , (const, 0x8, 8), (register, 0x200, 1) INT_LESS (stack, 0xfffffffffffffe90, 8) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) PTRADD (stack, 0xfffffffffffffe88, 8) , (unique, 0x10000d60, 8) , (const, 0x8, 8), (unique, 0x10000d60, 8) INT_ADD (unique, 0x10000d58, 8) , (const, 0x2, 8), (unique, 0x10000d58, 8) INT_MULT (stack, 0xfffffffffffffee0, 8) , (const, 0x4, 8), (unique, 0x3400, 8) PTRADD (stack, 0xfffffffffffffe88, 8) , (unique, 0x10000d40, 8) , (const, 0x8, 8), (unique, 0x10000d40, 8) INT_MULT (stack, 0xfffffffffffffee0, 8) , (const, 0x4, 8)]
[(register, 0x0, 8) INT_AND (unique, 0x100019bc, 8) , (const, 0xffffffff, 8), (unique, 0x100019bc, 8) CAST (stack, 0xfffffffffffffe70, 8)]
[ ---  CBRANCH (ram, 0x405f91, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (stack, 0xfffffffffffffe70, 4) , (const, 0x5, 4)]
[(register, 0x0, 8) COPY (const, 0x0, 8)]
[(ram, 0x4c4f18, 8) INDIRECT (ram, 0x4c4f18, 8) , (const, 0xaba, 4), (ram, 0x4c4f18, 8) MULTIEQUAL (ram, 0x4c4f18, 8) , (ram, 0x4c4f18, 8)]
[(ram, 0x4c4fb8, 8) INDIRECT (ram, 0x4c4fb8, 8) , (const, 0xaba, 4), (ram, 0x4c4fb8, 8) MULTIEQUAL (ram, 0x4c4fb8, 8) , (ram, 0x4c4fb8, 8)]
[(ram, 0x4c7780, 4) INDIRECT (ram, 0x4c7780, 4) , (const, 0xaba, 4), (ram, 0x4c7780, 4) MULTIEQUAL (ram, 0x4c7780, 4) , (ram, 0x4c7780, 4)]
[(ram, 0x4c7784, 4) INDIRECT (ram, 0x4c7784, 4) , (const, 0xaba, 4), (ram, 0x4c7784, 4) MULTIEQUAL (ram, 0x4c7784, 4) , (ram, 0x4c7784, 4)]
[(ram, 0x4c7788, 8) INDIRECT (ram, 0x4c7788, 8) , (const, 0xaba, 4), (ram, 0x4c7788, 8) MULTIEQUAL (ram, 0x4c7788, 8) , (ram, 0x4c7788, 8)]
[(ram, 0x4c77d0, 4) INDIRECT (ram, 0x4c77d0, 4) , (const, 0xaba, 4), (ram, 0x4c77d0, 4) MULTIEQUAL (ram, 0x4c77d0, 4) , (ram, 0x4c77d0, 4)]
[(ram, 0x4c77d4, 4) INDIRECT (ram, 0x4c77d4, 4) , (const, 0xaba, 4), (ram, 0x4c77d4, 4) MULTIEQUAL (ram, 0x4c77d4, 4) , (ram, 0x4c77d4, 4)]
[(ram, 0x4c77d8, 8) INDIRECT (ram, 0x4c77d8, 8) , (const, 0xaba, 4), (ram, 0x4c77d8, 8) MULTIEQUAL (ram, 0x4c77d8, 8) , (ram, 0x4c77d8, 8)]
[(ram, 0x4c77e0, 4) INDIRECT (ram, 0x4c77e0, 4) , (const, 0xaba, 4), (ram, 0x4c77e0, 4) MULTIEQUAL (ram, 0x4c77e0, 4) , (ram, 0x4c77e0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3400, 8) , (unique, 0xbc80, 4), (unique, 0x3400, 8) CAST (unique, 0x100019dc, 8), (unique, 0x100019dc, 8) INT_ADD (unique, 0x100019d4, 8) , (unique, 0x3300, 8), (unique, 0x100019d4, 8) CAST (stack, 0xfffffffffffffef0, 8), (unique, 0x3300, 8) INT_MULT (register, 0x0, 8) , (const, 0x4, 8), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) CAST (unique, 0x100019cc, 8), (unique, 0x100019cc, 8) INT_ADD (unique, 0x100019c4, 8) , (unique, 0x3300, 8), (unique, 0x100019c4, 8) CAST (stack, 0xfffffffffffffe90, 8), (unique, 0x3300, 8) INT_MULT (register, 0x0, 8) , (const, 0x4, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x405f98, 1) , (unique, 0xc900, 1), (unique, 0xc900, 1) INT_LESS (register, 0x0, 4) , (stack, 0xfffffffffffffe70, 4), (register, 0x0, 4) SUBPIECE (register, 0x0, 8) , (const, 0x0, 4), (register, 0x0, 8) INT_ADD (register, 0x0, 8) , (const, 0x1, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[(unique, 0x10000f14, 8) COPY (register, 0x8, 8), (register, 0x8, 8) COPY (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x405ca5, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xfffffffffffffe70, 4) , (const, 0x0, 4)]
[(unique, 0x10000f1c, 8) COPY (register, 0x0, 8)]
[(register, 0x0, 8) COPY (const, 0x0, 8)]
[(register, 0x8, 4) SUBPIECE (register, 0x8, 8) , (const, 0x0, 4), (register, 0x8, 8) MULTIEQUAL (unique, 0x10000f14, 8) , (unique, 0x10000f1c, 8)]
[(register, 0x10, 8) INT_LEFT (unique, 0x1000062f, 8) , (const, 0x4, 4), (unique, 0x1000062f, 8) INT_RIGHT (register, 0x8, 8) , (const, 0x2, 4), (register, 0x8, 8) MULTIEQUAL (unique, 0x10000f14, 8) , (unique, 0x10000f1c, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3400, 8) , (unique, 0x100007a8, 4), (unique, 0x3400, 8) CAST (unique, 0x100019fc, 8), (unique, 0x100019fc, 8) INT_ADD (unique, 0x100019f4, 8) , (register, 0x0, 8), (unique, 0x100019f4, 8) CAST (unique, 0x3400, 8), (unique, 0x100007a8, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) CAST (unique, 0x100019ec, 8), (unique, 0x100019ec, 8) INT_ADD (unique, 0x100019e4, 8) , (register, 0x0, 8), (unique, 0x100019e4, 8) CAST (stack, 0xfffffffffffffe90, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100007d0, 8) , (unique, 0x100007ac, 4), (unique, 0x100007d0, 8) PTRADD (unique, 0x3400, 8) , (const, 0x1, 8) , (const, 0x4, 8), (unique, 0x3400, 8) CAST (unique, 0x100019fc, 8), (unique, 0x100019fc, 8) INT_ADD (unique, 0x100019f4, 8) , (register, 0x0, 8), (unique, 0x100019f4, 8) CAST (unique, 0x3400, 8), (unique, 0x100007ac, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100007b0, 8), (unique, 0x100007b0, 8) PTRADD (unique, 0x3400, 8) , (const, 0x1, 8) , (const, 0x4, 8), (unique, 0x3400, 8) CAST (unique, 0x100019ec, 8), (unique, 0x100019ec, 8) INT_ADD (unique, 0x100019e4, 8) , (register, 0x0, 8), (unique, 0x100019e4, 8) CAST (stack, 0xfffffffffffffe90, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100007d8, 8) , (unique, 0x100007b8, 4), (unique, 0x100007d8, 8) PTRADD (unique, 0x3400, 8) , (const, 0x2, 8) , (const, 0x4, 8), (unique, 0x3400, 8) CAST (unique, 0x100019fc, 8), (unique, 0x100019fc, 8) INT_ADD (unique, 0x100019f4, 8) , (register, 0x0, 8), (unique, 0x100019f4, 8) CAST (unique, 0x3400, 8), (unique, 0x100007b8, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100007bc, 8), (unique, 0x100007bc, 8) PTRADD (unique, 0x3400, 8) , (const, 0x2, 8) , (const, 0x4, 8), (unique, 0x3400, 8) CAST (unique, 0x100019ec, 8), (unique, 0x100019ec, 8) INT_ADD (unique, 0x100019e4, 8) , (register, 0x0, 8), (unique, 0x100019e4, 8) CAST (stack, 0xfffffffffffffe90, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[(ram, 0x4c4f18, 8) INDIRECT (ram, 0x4c4f18, 8) , (const, 0x392f, 4), (ram, 0x4c4f18, 8) INDIRECT (ram, 0x4c4f18, 8) , (const, 0x392d, 4), (ram, 0x4c4f18, 8) INDIRECT (ram, 0x4c4f18, 8) , (const, 0x392b, 4), (ram, 0x4c4f18, 8) INDIRECT (ram, 0x4c4f18, 8) , (const, 0x392a, 4), (ram, 0x4c4f18, 8) MULTIEQUAL (ram, 0x4c4f18, 8) , (ram, 0x4c4f18, 8)]
[(ram, 0x4c4fb8, 8) INDIRECT (ram, 0x4c4fb8, 8) , (const, 0x392f, 4), (ram, 0x4c4fb8, 8) INDIRECT (ram, 0x4c4fb8, 8) , (const, 0x392d, 4), (ram, 0x4c4fb8, 8) INDIRECT (ram, 0x4c4fb8, 8) , (const, 0x392b, 4), (ram, 0x4c4fb8, 8) INDIRECT (ram, 0x4c4fb8, 8) , (const, 0x392a, 4), (ram, 0x4c4fb8, 8) MULTIEQUAL (ram, 0x4c4fb8, 8) , (ram, 0x4c4fb8, 8)]
[(ram, 0x4c7780, 4) INDIRECT (ram, 0x4c7780, 4) , (const, 0x392f, 4), (ram, 0x4c7780, 4) INDIRECT (ram, 0x4c7780, 4) , (const, 0x392d, 4), (ram, 0x4c7780, 4) INDIRECT (ram, 0x4c7780, 4) , (const, 0x392b, 4), (ram, 0x4c7780, 4) INDIRECT (ram, 0x4c7780, 4) , (const, 0x392a, 4), (ram, 0x4c7780, 4) MULTIEQUAL (ram, 0x4c7780, 4) , (ram, 0x4c7780, 4)]
[(ram, 0x4c7784, 4) INDIRECT (ram, 0x4c7784, 4) , (const, 0x392f, 4), (ram, 0x4c7784, 4) INDIRECT (ram, 0x4c7784, 4) , (const, 0x392d, 4), (ram, 0x4c7784, 4) INDIRECT (ram, 0x4c7784, 4) , (const, 0x392b, 4), (ram, 0x4c7784, 4) INDIRECT (ram, 0x4c7784, 4) , (const, 0x392a, 4), (ram, 0x4c7784, 4) MULTIEQUAL (ram, 0x4c7784, 4) , (ram, 0x4c7784, 4)]
[(ram, 0x4c7788, 8) INDIRECT (ram, 0x4c7788, 8) , (const, 0x392f, 4), (ram, 0x4c7788, 8) INDIRECT (ram, 0x4c7788, 8) , (const, 0x392d, 4), (ram, 0x4c7788, 8) INDIRECT (ram, 0x4c7788, 8) , (const, 0x392b, 4), (ram, 0x4c7788, 8) INDIRECT (ram, 0x4c7788, 8) , (const, 0x392a, 4), (ram, 0x4c7788, 8) MULTIEQUAL (ram, 0x4c7788, 8) , (ram, 0x4c7788, 8)]
[(ram, 0x4c77d0, 4) INDIRECT (ram, 0x4c77d0, 4) , (const, 0x392f, 4), (ram, 0x4c77d0, 4) INDIRECT (ram, 0x4c77d0, 4) , (const, 0x392d, 4), (ram, 0x4c77d0, 4) INDIRECT (ram, 0x4c77d0, 4) , (const, 0x392b, 4), (ram, 0x4c77d0, 4) INDIRECT (ram, 0x4c77d0, 4) , (const, 0x392a, 4), (ram, 0x4c77d0, 4) MULTIEQUAL (ram, 0x4c77d0, 4) , (ram, 0x4c77d0, 4)]
[(ram, 0x4c77d4, 4) INDIRECT (ram, 0x4c77d4, 4) , (const, 0x392f, 4), (ram, 0x4c77d4, 4) INDIRECT (ram, 0x4c77d4, 4) , (const, 0x392d, 4), (ram, 0x4c77d4, 4) INDIRECT (ram, 0x4c77d4, 4) , (const, 0x392b, 4), (ram, 0x4c77d4, 4) INDIRECT (ram, 0x4c77d4, 4) , (const, 0x392a, 4), (ram, 0x4c77d4, 4) MULTIEQUAL (ram, 0x4c77d4, 4) , (ram, 0x4c77d4, 4)]
[(ram, 0x4c77d8, 8) INDIRECT (ram, 0x4c77d8, 8) , (const, 0x392f, 4), (ram, 0x4c77d8, 8) INDIRECT (ram, 0x4c77d8, 8) , (const, 0x392d, 4), (ram, 0x4c77d8, 8) INDIRECT (ram, 0x4c77d8, 8) , (const, 0x392b, 4), (ram, 0x4c77d8, 8) INDIRECT (ram, 0x4c77d8, 8) , (const, 0x392a, 4), (ram, 0x4c77d8, 8) MULTIEQUAL (ram, 0x4c77d8, 8) , (ram, 0x4c77d8, 8)]
[(ram, 0x4c77e0, 4) INDIRECT (ram, 0x4c77e0, 4) , (const, 0x392f, 4), (ram, 0x4c77e0, 4) INDIRECT (ram, 0x4c77e0, 4) , (const, 0x392d, 4), (ram, 0x4c77e0, 4) INDIRECT (ram, 0x4c77e0, 4) , (const, 0x392b, 4), (ram, 0x4c77e0, 4) INDIRECT (ram, 0x4c77e0, 4) , (const, 0x392a, 4), (ram, 0x4c77e0, 4) MULTIEQUAL (ram, 0x4c77e0, 4) , (ram, 0x4c77e0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100007e0, 8) , (unique, 0x100007c4, 4), (unique, 0x100007e0, 8) PTRADD (unique, 0x3400, 8) , (const, 0x3, 8) , (const, 0x4, 8), (unique, 0x3400, 8) CAST (unique, 0x100019fc, 8), (unique, 0x100019fc, 8) INT_ADD (unique, 0x100019f4, 8) , (register, 0x0, 8), (unique, 0x100019f4, 8) CAST (unique, 0x3400, 8), (unique, 0x100007c4, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100007c8, 8), (unique, 0x100007c8, 8) PTRADD (unique, 0x3400, 8) , (const, 0x3, 8) , (const, 0x4, 8), (unique, 0x3400, 8) CAST (unique, 0x100019ec, 8), (unique, 0x100019ec, 8) INT_ADD (unique, 0x100019e4, 8) , (register, 0x0, 8), (unique, 0x100019e4, 8) CAST (stack, 0xfffffffffffffe90, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x405cb0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x10, 8) , (register, 0x0, 8), (register, 0x0, 8) INT_ADD (register, 0x0, 8) , (const, 0x10, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[(register, 0x0, 4) INT_AND (register, 0x8, 4) , (const, 0xfffffffc, 4)]
[ ---  CBRANCH (ram, 0x405cfa, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x10000772, 8) , (const, 0x0, 8), (unique, 0x10000772, 8) INT_AND (register, 0x8, 8) , (const, 0x3, 8)]
[(ram, 0x4c4f18, 8) INDIRECT (ram, 0x4c4f18, 8) , (const, 0x960, 4)]
[(ram, 0x4c4fb8, 8) INDIRECT (ram, 0x4c4fb8, 8) , (const, 0x960, 4)]
[(ram, 0x4c7780, 4) INDIRECT (ram, 0x4c7780, 4) , (const, 0x960, 4)]
[(ram, 0x4c7784, 4) INDIRECT (ram, 0x4c7784, 4) , (const, 0x960, 4)]
[(ram, 0x4c7788, 8) INDIRECT (ram, 0x4c7788, 8) , (const, 0x960, 4)]
[(ram, 0x4c77d0, 4) INDIRECT (ram, 0x4c77d0, 4) , (const, 0x960, 4)]
[(ram, 0x4c77d4, 4) INDIRECT (ram, 0x4c77d4, 4) , (const, 0x960, 4)]
[(ram, 0x4c77d8, 8) INDIRECT (ram, 0x4c77d8, 8) , (const, 0x960, 4)]
[(ram, 0x4c77e0, 4) INDIRECT (ram, 0x4c77e0, 4) , (const, 0x960, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3400, 8) , (unique, 0xbc80, 4), (unique, 0x3400, 8) CAST (unique, 0x10001a1c, 8), (unique, 0x10001a1c, 8) INT_ADD (unique, 0x10001a14, 8) , (unique, 0x3300, 8), (unique, 0x10001a14, 8) CAST (stack, 0xfffffffffffffef0, 8), (unique, 0x3300, 8) INT_MULT (register, 0x10, 8) , (const, 0x4, 8), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) CAST (unique, 0x10001a0c, 8), (unique, 0x10001a0c, 8) INT_ADD (unique, 0x10001a04, 8) , (unique, 0x3300, 8), (unique, 0x10001a04, 8) CAST (stack, 0xfffffffffffffe90, 8), (unique, 0x3300, 8) INT_MULT (register, 0x10, 8) , (const, 0x4, 8), (register, 0x10, 8) INT_ZEXT (register, 0x0, 4)]
[(register, 0x10, 8) INT_ZEXT (unique, 0x3100, 4), (unique, 0x3100, 4) INT_ADD (register, 0x0, 4) , (const, 0x1, 4)]
[ ---  CBRANCH (ram, 0x405cfa, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (unique, 0x3100, 4) , (stack, 0xfffffffffffffe70, 4), (unique, 0x3100, 4) INT_ADD (register, 0x0, 4) , (const, 0x1, 4)]
[(register, 0x0, 8) INT_ZEXT (register, 0x0, 4), (register, 0x0, 4) INT_ADD (register, 0x0, 4) , (const, 0x2, 4)]
[(ram, 0x4c4f18, 8) INDIRECT (ram, 0x4c4f18, 8) , (const, 0x981, 4)]
[(ram, 0x4c4fb8, 8) INDIRECT (ram, 0x4c4fb8, 8) , (const, 0x981, 4)]
[(ram, 0x4c7780, 4) INDIRECT (ram, 0x4c7780, 4) , (const, 0x981, 4)]
[(ram, 0x4c7784, 4) INDIRECT (ram, 0x4c7784, 4) , (const, 0x981, 4)]
[(ram, 0x4c7788, 8) INDIRECT (ram, 0x4c7788, 8) , (const, 0x981, 4)]
[(ram, 0x4c77d0, 4) INDIRECT (ram, 0x4c77d0, 4) , (const, 0x981, 4)]
[(ram, 0x4c77d4, 4) INDIRECT (ram, 0x4c77d4, 4) , (const, 0x981, 4)]
[(ram, 0x4c77d8, 8) INDIRECT (ram, 0x4c77d8, 8) , (const, 0x981, 4)]
[(ram, 0x4c77e0, 4) INDIRECT (ram, 0x4c77e0, 4) , (const, 0x981, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3400, 8) , (unique, 0xbc80, 4), (unique, 0x3400, 8) CAST (unique, 0x10001a3c, 8), (unique, 0x10001a3c, 8) INT_ADD (unique, 0x10001a34, 8) , (unique, 0x3300, 8), (unique, 0x10001a34, 8) CAST (stack, 0xfffffffffffffef0, 8), (unique, 0x3300, 8) INT_MULT (register, 0x10, 8) , (const, 0x4, 8), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) CAST (unique, 0x10001a2c, 8), (unique, 0x10001a2c, 8) INT_ADD (unique, 0x10001a24, 8) , (unique, 0x3300, 8), (unique, 0x10001a24, 8) CAST (stack, 0xfffffffffffffe90, 8), (unique, 0x3300, 8) INT_MULT (register, 0x10, 8) , (const, 0x4, 8)]
[ ---  CBRANCH (ram, 0x405cfa, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (register, 0x0, 4) , (stack, 0xfffffffffffffe70, 4), (register, 0x0, 4) INT_ADD (register, 0x0, 4) , (const, 0x2, 4)]
[(ram, 0x4c4f18, 8) INDIRECT (ram, 0x4c4f18, 8) , (const, 0x995, 4)]
[(ram, 0x4c4fb8, 8) INDIRECT (ram, 0x4c4fb8, 8) , (const, 0x995, 4)]
[(ram, 0x4c7780, 4) INDIRECT (ram, 0x4c7780, 4) , (const, 0x995, 4)]
[(ram, 0x4c7784, 4) INDIRECT (ram, 0x4c7784, 4) , (const, 0x995, 4)]
[(ram, 0x4c7788, 8) INDIRECT (ram, 0x4c7788, 8) , (const, 0x995, 4)]
[(ram, 0x4c77d0, 4) INDIRECT (ram, 0x4c77d0, 4) , (const, 0x995, 4)]
[(ram, 0x4c77d4, 4) INDIRECT (ram, 0x4c77d4, 4) , (const, 0x995, 4)]
[(ram, 0x4c77d8, 8) INDIRECT (ram, 0x4c77d8, 8) , (const, 0x995, 4)]
[(ram, 0x4c77e0, 4) INDIRECT (ram, 0x4c77e0, 4) , (const, 0x995, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3400, 8) , (unique, 0xbc80, 4), (unique, 0x3400, 8) CAST (unique, 0x10001a5c, 8), (unique, 0x10001a5c, 8) INT_ADD (unique, 0x10001a54, 8) , (unique, 0x3300, 8), (unique, 0x10001a54, 8) CAST (stack, 0xfffffffffffffef0, 8), (unique, 0x3300, 8) INT_MULT (register, 0x0, 8) , (const, 0x4, 8), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) CAST (unique, 0x10001a4c, 8), (unique, 0x10001a4c, 8) INT_ADD (unique, 0x10001a44, 8) , (unique, 0x3300, 8), (unique, 0x10001a44, 8) CAST (stack, 0xfffffffffffffe90, 8), (unique, 0x3300, 8) INT_MULT (register, 0x0, 8) , (const, 0x4, 8)]
[(ram, 0x4c77e0, 4) MULTIEQUAL (ram, 0x4c77e0, 4) , (ram, 0x4c77e0, 4) , (ram, 0x4c77e0, 4) , (ram, 0x4c77e0, 4) , (ram, 0x4c77e0, 4) , (ram, 0x4c77e0, 4)]
[(ram, 0x4c77d8, 8) MULTIEQUAL (ram, 0x4c77d8, 8) , (ram, 0x4c77d8, 8) , (ram, 0x4c77d8, 8) , (ram, 0x4c77d8, 8) , (ram, 0x4c77d8, 8) , (ram, 0x4c77d8, 8)]
[(ram, 0x4c77d4, 4) MULTIEQUAL (ram, 0x4c77d4, 4) , (ram, 0x4c77d4, 4) , (ram, 0x4c77d4, 4) , (ram, 0x4c77d4, 4) , (ram, 0x4c77d4, 4) , (ram, 0x4c77d4, 4)]
[(ram, 0x4c77d0, 4) MULTIEQUAL (ram, 0x4c77d0, 4) , (ram, 0x4c77d0, 4) , (ram, 0x4c77d0, 4) , (ram, 0x4c77d0, 4) , (ram, 0x4c77d0, 4) , (ram, 0x4c77d0, 4)]
[(ram, 0x4c7788, 8) MULTIEQUAL (ram, 0x4c7788, 8) , (ram, 0x4c7788, 8) , (ram, 0x4c7788, 8) , (ram, 0x4c7788, 8) , (ram, 0x4c7788, 8) , (ram, 0x4c7788, 8)]
[(ram, 0x4c7784, 4) MULTIEQUAL (ram, 0x4c7784, 4) , (ram, 0x4c7784, 4) , (ram, 0x4c7784, 4) , (ram, 0x4c7784, 4) , (ram, 0x4c7784, 4) , (ram, 0x4c7784, 4)]
[(ram, 0x4c7780, 4) MULTIEQUAL (ram, 0x4c7780, 4) , (ram, 0x4c7780, 4) , (ram, 0x4c7780, 4) , (ram, 0x4c7780, 4) , (ram, 0x4c7780, 4) , (ram, 0x4c7780, 4)]
[(ram, 0x4c4fb8, 8) MULTIEQUAL (ram, 0x4c4fb8, 8) , (ram, 0x4c4fb8, 8) , (ram, 0x4c4fb8, 8) , (ram, 0x4c4fb8, 8) , (ram, 0x4c4fb8, 8) , (ram, 0x4c4fb8, 8)]
[(ram, 0x4c4f18, 8) MULTIEQUAL (ram, 0x4c4f18, 8) , (ram, 0x4c4f18, 8) , (ram, 0x4c4f18, 8) , (ram, 0x4c4f18, 8) , (ram, 0x4c4f18, 8) , (ram, 0x4c4f18, 8)]
[(stack, 0xfffffffffffffe78, 8) COPY (unique, 0x10000eb4, 8)]
[(stack, 0xfffffffffffffe80, 8) COPY (stack, 0xfffffffffffffec0, 8)]
[(stack, 0xfffffffffffffe70, 8) COPY (stack, 0xfffffffffffffed0, 8)]
[(register, 0xb0, 4) COPY (const, 0x0, 4)]
[(register, 0xb0, 4) MULTIEQUAL (register, 0xb0, 4) , (register, 0xb0, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x9ba, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4c4f18, 8) INDIRECT (ram, 0x4c4f18, 8) , (const, 0x9ba, 4), (ram, 0x4c4f18, 8) MULTIEQUAL (ram, 0x4c4f18, 8) , (ram, 0x4c4f18, 8)]
[(ram, 0x4c4fb8, 8) INDIRECT (ram, 0x4c4fb8, 8) , (const, 0x9ba, 4), (ram, 0x4c4fb8, 8) MULTIEQUAL (ram, 0x4c4fb8, 8) , (ram, 0x4c4fb8, 8)]
[(ram, 0x4c7780, 4) INDIRECT (ram, 0x4c7780, 4) , (const, 0x9ba, 4), (ram, 0x4c7780, 4) MULTIEQUAL (ram, 0x4c7780, 4) , (ram, 0x4c7780, 4)]
[(ram, 0x4c7784, 4) INDIRECT (ram, 0x4c7784, 4) , (const, 0x9ba, 4), (ram, 0x4c7784, 4) MULTIEQUAL (ram, 0x4c7784, 4) , (ram, 0x4c7784, 4)]
[(ram, 0x4c7788, 8) INDIRECT (ram, 0x4c7788, 8) , (const, 0x9ba, 4), (ram, 0x4c7788, 8) MULTIEQUAL (ram, 0x4c7788, 8) , (ram, 0x4c7788, 8)]
[(ram, 0x4c77d0, 4) INDIRECT (ram, 0x4c77d0, 4) , (const, 0x9ba, 4), (ram, 0x4c77d0, 4) MULTIEQUAL (ram, 0x4c77d0, 4) , (ram, 0x4c77d0, 4)]
[(ram, 0x4c77d4, 4) INDIRECT (ram, 0x4c77d4, 4) , (const, 0x9ba, 4), (ram, 0x4c77d4, 4) MULTIEQUAL (ram, 0x4c77d4, 4) , (ram, 0x4c77d4, 4)]
[(ram, 0x4c77d8, 8) INDIRECT (ram, 0x4c77d8, 8) , (const, 0x9ba, 4), (ram, 0x4c77d8, 8) MULTIEQUAL (ram, 0x4c77d8, 8) , (ram, 0x4c77d8, 8)]
[(ram, 0x4c77e0, 4) INDIRECT (ram, 0x4c77e0, 4) , (const, 0x9ba, 4), (ram, 0x4c77e0, 4) MULTIEQUAL (ram, 0x4c77e0, 4) , (ram, 0x4c77e0, 4)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x9ba, 4), (stack, 0xfffffffffffffe50, 8) COPY (const, 0x405d2a, 8)]
[(stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x9ba, 4), (stack, 0xfffffffffffffe60, 8) MULTIEQUAL (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8)]
[(stack, 0xfffffffffffffe6c, 4) INDIRECT (stack, 0xfffffffffffffe6c, 4) , (const, 0x9ba, 4), (stack, 0xfffffffffffffe6c, 4) MULTIEQUAL (stack, 0xfffffffffffffe6c, 4) , (stack, 0xfffffffffffffe6c, 4)]
[(stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0x9ba, 4), (stack, 0xfffffffffffffe70, 8) MULTIEQUAL (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8)]
[(stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0x9ba, 4), (stack, 0xfffffffffffffe78, 8) MULTIEQUAL (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8)]
[(stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x9ba, 4), (stack, 0xfffffffffffffe80, 8) MULTIEQUAL (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x9ba, 4), (stack, 0xfffffffffffffe88, 8) MULTIEQUAL (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x9ba, 4), (stack, 0xfffffffffffffe90, 8) MULTIEQUAL (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8)]
[(stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x9ba, 4), (stack, 0xfffffffffffffe98, 8) MULTIEQUAL (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8)]
[(stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x9ba, 4), (stack, 0xfffffffffffffea0, 4) MULTIEQUAL (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4)]
[(stack, 0xfffffffffffffea4, 4) INDIRECT (stack, 0xfffffffffffffea4, 4) , (const, 0x9ba, 4), (stack, 0xfffffffffffffea4, 4) MULTIEQUAL (stack, 0xfffffffffffffea4, 4) , (stack, 0xfffffffffffffea4, 4)]
[(stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x9ba, 4), (stack, 0xfffffffffffffea8, 8) MULTIEQUAL (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x9ba, 4), (stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x9ba, 4), (stack, 0xfffffffffffffeb8, 8) MULTIEQUAL (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x9ba, 4), (stack, 0xfffffffffffffec0, 8) MULTIEQUAL (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x9ba, 4), (stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x9ba, 4), (stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x9ba, 4), (stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x9ba, 4), (stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x9ba, 4), (stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x9ba, 4), (stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x9ba, 4), (stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x9ba, 4), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x9ba, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(register, 0x90, 4) INT_ADD (unique, 0x1000065f, 4) , (const, 0x1, 4), (unique, 0x1000065f, 4) INT_REM (register, 0x0, 4) , (unique, 0x3100, 4), (unique, 0x3100, 4) INT_SUB (unique, 0xbc80, 4) , (const, 0x2, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10001a64, 8), (unique, 0x10001a64, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0x10000ee4, 8) , (const, 0xb, 8) , (const, 0x8, 8), (register, 0x0, 4) CALL (ram, 0x40f580, 8)]
[ ---  CBRANCH (ram, 0x405d7f, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10001a7c, 8), (unique, 0x10001a7c, 8) CAST (unique, 0x3b80, 8), (unique, 0x3b80, 8) CAST (unique, 0x10001a74, 8), (unique, 0x10001a74, 8) INT_ADD (unique, 0x10001a6c, 8) , (unique, 0x3a80, 8), (unique, 0x10001a6c, 8) CAST (unique, 0x10000eec, 8), (unique, 0x3a80, 8) INT_MULT (unique, 0x2e680, 8) , (const, 0x4, 8), (unique, 0x2e680, 8) INT_REM (unique, 0x2e300, 8) , (unique, 0x2e180, 8), (unique, 0x2e300, 8) INT_ZEXT (register, 0x0, 4), (unique, 0x2e180, 8) INT_ZEXT (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10001a64, 8), (unique, 0x10001a64, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0x10000ee4, 8) , (const, 0xb, 8) , (const, 0x8, 8), (register, 0x0, 4) CALL (ram, 0x40f580, 8)]
[(register, 0x0, 4) INT_SUB (register, 0x90, 4) , (unique, 0xbc80, 4)]
[(register, 0x10, 4) INT_SUB (unique, 0xbc80, 4) , (register, 0x90, 4)]
[ ---  CBRANCH (ram, 0x405dd8, 1) , (unique, 0xc900, 1), (unique, 0xc900, 1) INT_LESSEQUAL (register, 0x10, 4) , (register, 0x8, 4), (register, 0x8, 4) SUBPIECE (register, 0x8, 8) , (const, 0x0, 4), (register, 0x8, 8) MULTIEQUAL (unique, 0x2e680, 8) , (register, 0x0, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x405d68, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10001a94, 8), (unique, 0x10001a94, 8) CAST (unique, 0x3b80, 8), (unique, 0x3b80, 8) CAST (unique, 0x10001a8c, 8), (unique, 0x10001a8c, 8) INT_ADD (unique, 0x10001a84, 8) , (unique, 0x3a80, 8), (unique, 0x10001a84, 8) CAST (unique, 0x10000eec, 8), (unique, 0x3a80, 8) INT_MULT (register, 0x0, 8) , (const, 0x4, 8), (register, 0x0, 8) INT_ZEXT (register, 0x0, 4), (register, 0x0, 4) INT_ADD (register, 0x8, 4) , (register, 0x90, 4)]
[ ---  CBRANCH (ram, 0x405d68, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10001aac, 8), (unique, 0x10001aac, 8) CAST (unique, 0x3b80, 8), (unique, 0x3b80, 8) CAST (unique, 0x10001aa4, 8), (unique, 0x10001aa4, 8) INT_ADD (unique, 0x10001a9c, 8) , (unique, 0x3a80, 8), (unique, 0x10001a9c, 8) CAST (unique, 0x10000eec, 8), (unique, 0x3a80, 8) INT_MULT (register, 0x0, 8) , (const, 0x4, 8), (register, 0x0, 8) INT_ZEXT (register, 0x0, 4), (register, 0x0, 4) INT_ADD (register, 0x8, 4) , (register, 0x0, 4)]
[(ram, 0x4c4f18, 8) INDIRECT (ram, 0x4c4f18, 8) , (const, 0xa60, 4)]
[(ram, 0x4c4fb8, 8) INDIRECT (ram, 0x4c4fb8, 8) , (const, 0xa60, 4)]
[(ram, 0x4c7780, 4) INDIRECT (ram, 0x4c7780, 4) , (const, 0xa60, 4)]
[(ram, 0x4c7784, 4) INDIRECT (ram, 0x4c7784, 4) , (const, 0xa60, 4)]
[(ram, 0x4c7788, 8) INDIRECT (ram, 0x4c7788, 8) , (const, 0xa60, 4)]
[(ram, 0x4c77d0, 4) INDIRECT (ram, 0x4c77d0, 4) , (const, 0xa60, 4)]
[(ram, 0x4c77d4, 4) INDIRECT (ram, 0x4c77d4, 4) , (const, 0xa60, 4)]
[(ram, 0x4c77d8, 8) INDIRECT (ram, 0x4c77d8, 8) , (const, 0xa60, 4)]
[(ram, 0x4c77e0, 4) INDIRECT (ram, 0x4c77e0, 4) , (const, 0xa60, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001abc, 8) , (unique, 0x3a00, 4), (unique, 0x10001abc, 8) CAST (register, 0x0, 8), (unique, 0x3a00, 4) INT_ADD (unique, 0x3880, 4) , (unique, 0xbc80, 4), (unique, 0x3880, 4) INT_ADD (register, 0xb0, 4) , (const, 0x1, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10001ab4, 8), (unique, 0x10001ab4, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0x10000ee4, 8) , (const, 0x5, 8) , (const, 0x8, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x3b80, 8) , (unique, 0x3b80, 8) , (unique, 0x3b80, 8)]
[ ---  CBRANCH (ram, 0x405d21, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x10000ec8, 4) , (register, 0xb0, 4), (register, 0xb0, 4) INT_ADD (register, 0xb0, 4) , (const, 0x1, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001ac4, 8) , (const, 0x0, 4), (unique, 0x10001ac4, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0x10000ee4, 8) , (const, 0xd, 8) , (const, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0x10001acc, 8), (unique, 0x10001acc, 8) CAST (unique, 0x10000eec, 8), (unique, 0x3100, 8) PTRADD (unique, 0x10000ee4, 8) , (const, 0xc, 8) , (const, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001ad4, 8) , (stack, 0xfffffffffffffea4, 4), (unique, 0x10001ad4, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0x10000ee4, 8) , (const, 0x8, 8) , (const, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0x10001adc, 8), (unique, 0x10001adc, 8) CAST (stack, 0xfffffffffffffe88, 8), (unique, 0x3100, 8) PTRADD (unique, 0x10000ee4, 8) , (const, 0x9, 8) , (const, 0x8, 8)]
[(ram, 0x4c4f18, 8) INDIRECT (ram, 0x4c4f18, 8) , (const, 0x3921, 4), (ram, 0x4c4f18, 8) INDIRECT (ram, 0x4c4f18, 8) , (const, 0x3920, 4), (ram, 0x4c4f18, 8) INDIRECT (ram, 0x4c4f18, 8) , (const, 0xa83, 4), (ram, 0x4c4f18, 8) INDIRECT (ram, 0x4c4f18, 8) , (const, 0xa79, 4), (ram, 0x4c4f18, 8) INDIRECT (ram, 0x4c4f18, 8) , (const, 0xa76, 4)]
[(ram, 0x4c4fb8, 8) INDIRECT (ram, 0x4c4fb8, 8) , (const, 0x3921, 4), (ram, 0x4c4fb8, 8) INDIRECT (ram, 0x4c4fb8, 8) , (const, 0x3920, 4), (ram, 0x4c4fb8, 8) INDIRECT (ram, 0x4c4fb8, 8) , (const, 0xa83, 4), (ram, 0x4c4fb8, 8) INDIRECT (ram, 0x4c4fb8, 8) , (const, 0xa79, 4), (ram, 0x4c4fb8, 8) INDIRECT (ram, 0x4c4fb8, 8) , (const, 0xa76, 4)]
[(ram, 0x4c7780, 4) INDIRECT (ram, 0x4c7780, 4) , (const, 0x3921, 4), (ram, 0x4c7780, 4) INDIRECT (ram, 0x4c7780, 4) , (const, 0x3920, 4), (ram, 0x4c7780, 4) INDIRECT (ram, 0x4c7780, 4) , (const, 0xa83, 4), (ram, 0x4c7780, 4) INDIRECT (ram, 0x4c7780, 4) , (const, 0xa79, 4), (ram, 0x4c7780, 4) INDIRECT (ram, 0x4c7780, 4) , (const, 0xa76, 4)]
[(ram, 0x4c7784, 4) INDIRECT (ram, 0x4c7784, 4) , (const, 0x3921, 4), (ram, 0x4c7784, 4) INDIRECT (ram, 0x4c7784, 4) , (const, 0x3920, 4), (ram, 0x4c7784, 4) INDIRECT (ram, 0x4c7784, 4) , (const, 0xa83, 4), (ram, 0x4c7784, 4) INDIRECT (ram, 0x4c7784, 4) , (const, 0xa79, 4), (ram, 0x4c7784, 4) INDIRECT (ram, 0x4c7784, 4) , (const, 0xa76, 4)]
[(ram, 0x4c7788, 8) INDIRECT (ram, 0x4c7788, 8) , (const, 0x3921, 4), (ram, 0x4c7788, 8) INDIRECT (ram, 0x4c7788, 8) , (const, 0x3920, 4), (ram, 0x4c7788, 8) INDIRECT (ram, 0x4c7788, 8) , (const, 0xa83, 4), (ram, 0x4c7788, 8) INDIRECT (ram, 0x4c7788, 8) , (const, 0xa79, 4), (ram, 0x4c7788, 8) INDIRECT (ram, 0x4c7788, 8) , (const, 0xa76, 4)]
[(ram, 0x4c77d0, 4) INDIRECT (ram, 0x4c77d0, 4) , (const, 0x3921, 4), (ram, 0x4c77d0, 4) INDIRECT (ram, 0x4c77d0, 4) , (const, 0x3920, 4), (ram, 0x4c77d0, 4) INDIRECT (ram, 0x4c77d0, 4) , (const, 0xa83, 4), (ram, 0x4c77d0, 4) INDIRECT (ram, 0x4c77d0, 4) , (const, 0xa79, 4), (ram, 0x4c77d0, 4) INDIRECT (ram, 0x4c77d0, 4) , (const, 0xa76, 4)]
[(ram, 0x4c77d4, 4) INDIRECT (ram, 0x4c77d4, 4) , (const, 0x3921, 4), (ram, 0x4c77d4, 4) INDIRECT (ram, 0x4c77d4, 4) , (const, 0x3920, 4), (ram, 0x4c77d4, 4) INDIRECT (ram, 0x4c77d4, 4) , (const, 0xa83, 4), (ram, 0x4c77d4, 4) INDIRECT (ram, 0x4c77d4, 4) , (const, 0xa79, 4), (ram, 0x4c77d4, 4) INDIRECT (ram, 0x4c77d4, 4) , (const, 0xa76, 4)]
[(ram, 0x4c77d8, 8) INDIRECT (ram, 0x4c77d8, 8) , (const, 0x3921, 4), (ram, 0x4c77d8, 8) INDIRECT (ram, 0x4c77d8, 8) , (const, 0x3920, 4), (ram, 0x4c77d8, 8) INDIRECT (ram, 0x4c77d8, 8) , (const, 0xa83, 4), (ram, 0x4c77d8, 8) INDIRECT (ram, 0x4c77d8, 8) , (const, 0xa79, 4), (ram, 0x4c77d8, 8) INDIRECT (ram, 0x4c77d8, 8) , (const, 0xa76, 4)]
[(ram, 0x4c77e0, 4) INDIRECT (ram, 0x4c77e0, 4) , (const, 0x3921, 4), (ram, 0x4c77e0, 4) INDIRECT (ram, 0x4c77e0, 4) , (const, 0x3920, 4), (ram, 0x4c77e0, 4) INDIRECT (ram, 0x4c77e0, 4) , (const, 0xa83, 4), (ram, 0x4c77e0, 4) INDIRECT (ram, 0x4c77e0, 4) , (const, 0xa79, 4), (ram, 0x4c77e0, 4) INDIRECT (ram, 0x4c77e0, 4) , (const, 0xa76, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100007a0, 8) , (unique, 0x10001ae4, 8), (unique, 0x10001ae4, 8) CAST (stack, 0xfffffffffffffed8, 8), (unique, 0x100007a0, 8) PTRADD (unique, 0x10000ee4, 8) , (const, 0xa, 8) , (const, 0x8, 8)]
[(unique, 0x10000f34, 8) COPY (stack, 0xfffffffffffffe80, 8)]
[(unique, 0x10000fcc, 8) COPY (stack, 0xfffffffffffffe78, 8)]
[(unique, 0x1000107c, 8) COPY (unique, 0x10001aec, 8), (unique, 0x10001aec, 8) CAST (stack, 0xfffffffffffffe70, 8)]
[ ---  BRANCH (ram, 0x4055aa, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001af4, 8) , (const, 0x0, 4), (unique, 0x10001af4, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (stack, 0xfffffffffffffeb8, 8) , (const, 0x8, 8) , (const, 0x8, 8)]
[(ram, 0x4c4f18, 8) INDIRECT (ram, 0x4c4f18, 8) , (const, 0x403, 4), (ram, 0x4c4f18, 8) INDIRECT (ram, 0x4c4f18, 8) , (const, 0x3ff, 4)]
[(ram, 0x4c4fb8, 8) INDIRECT (ram, 0x4c4fb8, 8) , (const, 0x403, 4), (ram, 0x4c4fb8, 8) INDIRECT (ram, 0x4c4fb8, 8) , (const, 0x3ff, 4)]
[(ram, 0x4c7780, 4) INDIRECT (ram, 0x4c7780, 4) , (const, 0x403, 4), (ram, 0x4c7780, 4) INDIRECT (ram, 0x4c7780, 4) , (const, 0x3ff, 4)]
[(ram, 0x4c7784, 4) INDIRECT (ram, 0x4c7784, 4) , (const, 0x403, 4), (ram, 0x4c7784, 4) INDIRECT (ram, 0x4c7784, 4) , (const, 0x3ff, 4)]
[(ram, 0x4c7788, 8) INDIRECT (ram, 0x4c7788, 8) , (const, 0x403, 4), (ram, 0x4c7788, 8) INDIRECT (ram, 0x4c7788, 8) , (const, 0x3ff, 4)]
[(ram, 0x4c77d0, 4) INDIRECT (ram, 0x4c77d0, 4) , (const, 0x403, 4), (ram, 0x4c77d0, 4) INDIRECT (ram, 0x4c77d0, 4) , (const, 0x3ff, 4)]
[(ram, 0x4c77d4, 4) INDIRECT (ram, 0x4c77d4, 4) , (const, 0x403, 4), (ram, 0x4c77d4, 4) INDIRECT (ram, 0x4c77d4, 4) , (const, 0x3ff, 4)]
[(ram, 0x4c77d8, 8) INDIRECT (ram, 0x4c77d8, 8) , (const, 0x403, 4), (ram, 0x4c77d8, 8) INDIRECT (ram, 0x4c77d8, 8) , (const, 0x3ff, 4)]
[(ram, 0x4c77e0, 4) INDIRECT (ram, 0x4c77e0, 4) , (const, 0x403, 4), (ram, 0x4c77e0, 4) INDIRECT (ram, 0x4c77e0, 4) , (const, 0x3ff, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (const, 0x0, 16), (unique, 0x3100, 8) CAST (unique, 0x10001afc, 8), (unique, 0x10001afc, 8) PTRADD (stack, 0xfffffffffffffeb8, 8) , (const, 0x9, 8) , (const, 0x8, 8)]
[(unique, 0x10000fc4, 8) COPY (register, 0x0, 8)]
[(register, 0xb8, 8) MULTIEQUAL (unique, 0x10000eac, 8) , (register, 0xb8, 8)]
[(register, 0xb0, 8) MULTIEQUAL (unique, 0x10000ecc, 8) , (unique, 0x1000107c, 8)]
[(register, 0xa8, 8) MULTIEQUAL (unique, 0x10000ed4, 8) , (unique, 0x10000ee4, 8)]
[(register, 0x18, 8) MULTIEQUAL (unique, 0x10000ebc, 8) , (unique, 0x10000f34, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x407, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4c4f18, 8) INDIRECT (ram, 0x4c4f18, 8) , (const, 0x407, 4), (ram, 0x4c4f18, 8) MULTIEQUAL (ram, 0x4c4f18, 8) , (ram, 0x4c4f18, 8)]
[(ram, 0x4c4fb8, 8) INDIRECT (ram, 0x4c4fb8, 8) , (const, 0x407, 4), (ram, 0x4c4fb8, 8) MULTIEQUAL (ram, 0x4c4fb8, 8) , (ram, 0x4c4fb8, 8)]
[(ram, 0x4c7780, 4) INDIRECT (ram, 0x4c7780, 4) , (const, 0x407, 4), (ram, 0x4c7780, 4) MULTIEQUAL (ram, 0x4c7780, 4) , (ram, 0x4c7780, 4)]
[(ram, 0x4c7784, 4) INDIRECT (ram, 0x4c7784, 4) , (const, 0x407, 4), (ram, 0x4c7784, 4) MULTIEQUAL (ram, 0x4c7784, 4) , (ram, 0x4c7784, 4)]
[(ram, 0x4c7788, 8) INDIRECT (ram, 0x4c7788, 8) , (const, 0x407, 4), (ram, 0x4c7788, 8) MULTIEQUAL (ram, 0x4c7788, 8) , (ram, 0x4c7788, 8)]
[(ram, 0x4c77d0, 4) INDIRECT (ram, 0x4c77d0, 4) , (const, 0x407, 4), (ram, 0x4c77d0, 4) MULTIEQUAL (ram, 0x4c77d0, 4) , (ram, 0x4c77d0, 4)]
[(ram, 0x4c77d4, 4) INDIRECT (ram, 0x4c77d4, 4) , (const, 0x407, 4), (ram, 0x4c77d4, 4) MULTIEQUAL (ram, 0x4c77d4, 4) , (ram, 0x4c77d4, 4)]
[(ram, 0x4c77d8, 8) INDIRECT (ram, 0x4c77d8, 8) , (const, 0x407, 4), (ram, 0x4c77d8, 8) MULTIEQUAL (ram, 0x4c77d8, 8) , (ram, 0x4c77d8, 8)]
[(ram, 0x4c77e0, 4) INDIRECT (ram, 0x4c77e0, 4) , (const, 0x407, 4), (ram, 0x4c77e0, 4) MULTIEQUAL (ram, 0x4c77e0, 4) , (ram, 0x4c77e0, 4)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x407, 4), (stack, 0xfffffffffffffe50, 8) COPY (const, 0x4055b2, 8)]
[(stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x407, 4), (stack, 0xfffffffffffffe60, 8) MULTIEQUAL (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8)]
[(stack, 0xfffffffffffffe6c, 4) INDIRECT (stack, 0xfffffffffffffe6c, 4) , (const, 0x407, 4), (stack, 0xfffffffffffffe6c, 4) MULTIEQUAL (stack, 0xfffffffffffffe6c, 4) , (stack, 0xfffffffffffffe6c, 4)]
[(stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0x407, 4), (stack, 0xfffffffffffffe70, 8) MULTIEQUAL (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8)]
[(stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0x407, 4), (stack, 0xfffffffffffffe78, 8) MULTIEQUAL (unique, 0xbe00, 8) , (stack, 0xfffffffffffffe78, 8)]
[(stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x407, 4), (stack, 0xfffffffffffffe80, 8) MULTIEQUAL (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x407, 4), (stack, 0xfffffffffffffe88, 8) MULTIEQUAL (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x407, 4), (stack, 0xfffffffffffffe90, 8) MULTIEQUAL (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8)]
[(stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x407, 4), (stack, 0xfffffffffffffe98, 8) MULTIEQUAL (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8)]
[(stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x407, 4), (stack, 0xfffffffffffffea0, 4) MULTIEQUAL (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4)]
[(stack, 0xfffffffffffffea4, 4) INDIRECT (stack, 0xfffffffffffffea4, 4) , (const, 0x407, 4), (stack, 0xfffffffffffffea4, 4) MULTIEQUAL (stack, 0xfffffffffffffea4, 4) , (stack, 0xfffffffffffffea4, 4)]
[(stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x407, 4), (stack, 0xfffffffffffffea8, 8) MULTIEQUAL (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x407, 4), (stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x407, 4), (stack, 0xfffffffffffffeb8, 8) MULTIEQUAL (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x407, 4), (stack, 0xfffffffffffffec0, 8) MULTIEQUAL (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x407, 4), (stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x407, 4), (stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x407, 4), (stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x407, 4), (stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x407, 4), (stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x407, 4), (stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x407, 4), (stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x407, 4), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x407, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CALL (ram, 0x426b40, 8) , (register, 0x88, 8), (register, 0x88, 8) MULTIEQUAL (unique, 0x10000fc4, 8) , (unique, 0x10000fcc, 8)]
[ ---  BRANCH (ram, 0x405142, 1)]
[(register, 0x18, 8) COPY (const, 0x1, 8)]
[ ---  BRANCH (ram, 0x405502, 1)]
[(stack, 0xfffffffffffffe90, 8) MULTIEQUAL (unique, 0x3400, 8) , (unique, 0x3400, 8) , (stack, 0xfffffffffffffe90, 8) , (unique, 0x3400, 8) , (unique, 0x3400, 8)]
[(stack, 0xfffffffffffffe78, 8) MULTIEQUAL (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8)]
[(stack, 0xfffffffffffffe70, 8) MULTIEQUAL (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001b04, 8) , (const, 0x0, 4), (unique, 0x10001b04, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x8, 8) , (const, 0x8, 8)]
[(ram, 0x4c4f18, 8) INDIRECT (ram, 0x4c4f18, 8) , (const, 0x18c9, 4), (ram, 0x4c4f18, 8) INDIRECT (ram, 0x4c4f18, 8) , (const, 0x18c5, 4), (ram, 0x4c4f18, 8) MULTIEQUAL (ram, 0x4c4f18, 8) , (ram, 0x4c4f18, 8) , (ram, 0x4c4f18, 8) , (ram, 0x4c4f18, 8) , (ram, 0x4c4f18, 8)]
[(ram, 0x4c4fb8, 8) INDIRECT (ram, 0x4c4fb8, 8) , (const, 0x18c9, 4), (ram, 0x4c4fb8, 8) INDIRECT (ram, 0x4c4fb8, 8) , (const, 0x18c5, 4), (ram, 0x4c4fb8, 8) MULTIEQUAL (ram, 0x4c4fb8, 8) , (ram, 0x4c4fb8, 8) , (ram, 0x4c4fb8, 8) , (ram, 0x4c4fb8, 8) , (ram, 0x4c4fb8, 8)]
[(ram, 0x4c7780, 4) INDIRECT (ram, 0x4c7780, 4) , (const, 0x18c9, 4), (ram, 0x4c7780, 4) INDIRECT (ram, 0x4c7780, 4) , (const, 0x18c5, 4), (ram, 0x4c7780, 4) MULTIEQUAL (ram, 0x4c7780, 4) , (ram, 0x4c7780, 4) , (ram, 0x4c7780, 4) , (ram, 0x4c7780, 4) , (ram, 0x4c7780, 4)]
[(ram, 0x4c7784, 4) INDIRECT (ram, 0x4c7784, 4) , (const, 0x18c9, 4), (ram, 0x4c7784, 4) INDIRECT (ram, 0x4c7784, 4) , (const, 0x18c5, 4), (ram, 0x4c7784, 4) MULTIEQUAL (ram, 0x4c7784, 4) , (ram, 0x4c7784, 4) , (ram, 0x4c7784, 4) , (ram, 0x4c7784, 4) , (ram, 0x4c7784, 4)]
[(ram, 0x4c7788, 8) INDIRECT (ram, 0x4c7788, 8) , (const, 0x18c9, 4), (ram, 0x4c7788, 8) INDIRECT (ram, 0x4c7788, 8) , (const, 0x18c5, 4), (ram, 0x4c7788, 8) MULTIEQUAL (ram, 0x4c7788, 8) , (ram, 0x4c7788, 8) , (ram, 0x4c7788, 8) , (ram, 0x4c7788, 8) , (ram, 0x4c7788, 8)]
[(ram, 0x4c77d0, 4) INDIRECT (ram, 0x4c77d0, 4) , (const, 0x18c9, 4), (ram, 0x4c77d0, 4) INDIRECT (ram, 0x4c77d0, 4) , (const, 0x18c5, 4), (ram, 0x4c77d0, 4) MULTIEQUAL (ram, 0x4c77d0, 4) , (ram, 0x4c77d0, 4) , (ram, 0x4c77d0, 4) , (ram, 0x4c77d0, 4) , (ram, 0x4c77d0, 4)]
[(ram, 0x4c77d4, 4) INDIRECT (ram, 0x4c77d4, 4) , (const, 0x18c9, 4), (ram, 0x4c77d4, 4) INDIRECT (ram, 0x4c77d4, 4) , (const, 0x18c5, 4), (ram, 0x4c77d4, 4) MULTIEQUAL (ram, 0x4c77d4, 4) , (ram, 0x4c77d4, 4) , (ram, 0x4c77d4, 4) , (ram, 0x4c77d4, 4) , (ram, 0x4c77d4, 4)]
[(ram, 0x4c77d8, 8) INDIRECT (ram, 0x4c77d8, 8) , (const, 0x18c9, 4), (ram, 0x4c77d8, 8) INDIRECT (ram, 0x4c77d8, 8) , (const, 0x18c5, 4), (ram, 0x4c77d8, 8) MULTIEQUAL (ram, 0x4c77d8, 8) , (ram, 0x4c77d8, 8) , (ram, 0x4c77d8, 8) , (ram, 0x4c77d8, 8) , (ram, 0x4c77d8, 8)]
[(ram, 0x4c77e0, 4) INDIRECT (ram, 0x4c77e0, 4) , (const, 0x18c9, 4), (ram, 0x4c77e0, 4) INDIRECT (ram, 0x4c77e0, 4) , (const, 0x18c5, 4), (ram, 0x4c77e0, 4) MULTIEQUAL (ram, 0x4c77e0, 4) , (ram, 0x4c77e0, 4) , (ram, 0x4c77e0, 4) , (ram, 0x4c77e0, 4) , (ram, 0x4c77e0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (const, 0x0, 16), (unique, 0x3100, 8) CAST (unique, 0x10001b0c, 8), (unique, 0x10001b0c, 8) PTRADD (register, 0x0, 8) , (const, 0x9, 8) , (const, 0x8, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffec0, 8) MULTIEQUAL (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8)]
[(stack, 0xfffffffffffffeb8, 8) MULTIEQUAL (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(stack, 0xfffffffffffffea8, 8) MULTIEQUAL (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8)]
[(stack, 0xfffffffffffffea4, 4) MULTIEQUAL (stack, 0xfffffffffffffea4, 4) , (stack, 0xfffffffffffffea4, 4)]
[(stack, 0xfffffffffffffea0, 4) MULTIEQUAL (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4)]
[(stack, 0xfffffffffffffe98, 8) MULTIEQUAL (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8)]
[(stack, 0xfffffffffffffe90, 8) MULTIEQUAL (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8)]
[(stack, 0xfffffffffffffe88, 8) MULTIEQUAL (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8)]
[(stack, 0xfffffffffffffe80, 8) MULTIEQUAL (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8)]
[(stack, 0xfffffffffffffe78, 8) MULTIEQUAL (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8)]
[(stack, 0xfffffffffffffe70, 8) MULTIEQUAL (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8)]
[(stack, 0xfffffffffffffe6c, 4) MULTIEQUAL (stack, 0xfffffffffffffe6c, 4) , (stack, 0xfffffffffffffe6c, 4)]
[(stack, 0xfffffffffffffe60, 8) MULTIEQUAL (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb8, 8) MULTIEQUAL (register, 0xb8, 8) , (register, 0xb8, 8)]
[(register, 0xb0, 8) MULTIEQUAL (register, 0xb0, 8) , (stack, 0xffffffffffffff58, 8)]
[(register, 0x18, 8) MULTIEQUAL (register, 0x18, 8) , (register, 0x38, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (const, 0x0, 8), (unique, 0x3100, 8) PTRADD (register, 0xa8, 8) , (const, 0xe, 8) , (const, 0x8, 8), (register, 0xa8, 8) MULTIEQUAL (register, 0xa8, 8) , (register, 0x0, 8)]
[(ram, 0x4c4f18, 8) INDIRECT (ram, 0x4c4f18, 8) , (const, 0x417, 4), (ram, 0x4c4f18, 8) INDIRECT (ram, 0x4c4f18, 8) , (const, 0x414, 4), (ram, 0x4c4f18, 8) MULTIEQUAL (ram, 0x4c4f18, 8) , (ram, 0x4c4f18, 8)]
[(ram, 0x4c4fb8, 8) INDIRECT (ram, 0x4c4fb8, 8) , (const, 0x417, 4), (ram, 0x4c4fb8, 8) INDIRECT (ram, 0x4c4fb8, 8) , (const, 0x414, 4), (ram, 0x4c4fb8, 8) MULTIEQUAL (ram, 0x4c4fb8, 8) , (ram, 0x4c4fb8, 8)]
[(ram, 0x4c7780, 4) INDIRECT (ram, 0x4c7780, 4) , (const, 0x417, 4), (ram, 0x4c7780, 4) INDIRECT (ram, 0x4c7780, 4) , (const, 0x414, 4), (ram, 0x4c7780, 4) MULTIEQUAL (ram, 0x4c7780, 4) , (ram, 0x4c7780, 4)]
[(ram, 0x4c7784, 4) INDIRECT (ram, 0x4c7784, 4) , (const, 0x417, 4), (ram, 0x4c7784, 4) INDIRECT (ram, 0x4c7784, 4) , (const, 0x414, 4), (ram, 0x4c7784, 4) MULTIEQUAL (ram, 0x4c7784, 4) , (ram, 0x4c7784, 4)]
[(ram, 0x4c7788, 8) INDIRECT (ram, 0x4c7788, 8) , (const, 0x417, 4), (ram, 0x4c7788, 8) INDIRECT (ram, 0x4c7788, 8) , (const, 0x414, 4), (ram, 0x4c7788, 8) MULTIEQUAL (ram, 0x4c7788, 8) , (ram, 0x4c7788, 8)]
[(ram, 0x4c77d0, 4) INDIRECT (ram, 0x4c77d0, 4) , (const, 0x417, 4), (ram, 0x4c77d0, 4) INDIRECT (ram, 0x4c77d0, 4) , (const, 0x414, 4), (ram, 0x4c77d0, 4) MULTIEQUAL (ram, 0x4c77d0, 4) , (ram, 0x4c77d0, 4)]
[(ram, 0x4c77d4, 4) INDIRECT (ram, 0x4c77d4, 4) , (const, 0x417, 4), (ram, 0x4c77d4, 4) INDIRECT (ram, 0x4c77d4, 4) , (const, 0x414, 4), (ram, 0x4c77d4, 4) MULTIEQUAL (ram, 0x4c77d4, 4) , (ram, 0x4c77d4, 4)]
[(ram, 0x4c77d8, 8) INDIRECT (ram, 0x4c77d8, 8) , (const, 0x417, 4), (ram, 0x4c77d8, 8) INDIRECT (ram, 0x4c77d8, 8) , (const, 0x414, 4), (ram, 0x4c77d8, 8) MULTIEQUAL (ram, 0x4c77d8, 8) , (ram, 0x4c77d8, 8)]
[(ram, 0x4c77e0, 4) INDIRECT (ram, 0x4c77e0, 4) , (const, 0x417, 4), (ram, 0x4c77e0, 4) INDIRECT (ram, 0x4c77e0, 4) , (const, 0x414, 4), (ram, 0x4c77e0, 4) MULTIEQUAL (ram, 0x4c77e0, 4) , (ram, 0x4c77e0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (const, 0x0, 8), (unique, 0x3100, 8) PTRADD (register, 0xa8, 8) , (const, 0xf, 8) , (const, 0x8, 8), (register, 0xa8, 8) MULTIEQUAL (register, 0xa8, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x40516a, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4c4f18, 8) , (const, 0x0, 8), (ram, 0x4c4f18, 8) MULTIEQUAL (ram, 0x4c4f18, 8) , (ram, 0x4c4f18, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x427, 4)]
[(ram, 0x4c4f18, 8) INDIRECT (ram, 0x4c4f18, 8) , (const, 0x427, 4)]
[(ram, 0x4c4fb8, 8) INDIRECT (ram, 0x4c4fb8, 8) , (const, 0x427, 4)]
[(ram, 0x4c7780, 4) INDIRECT (ram, 0x4c7780, 4) , (const, 0x427, 4)]
[(ram, 0x4c7784, 4) INDIRECT (ram, 0x4c7784, 4) , (const, 0x427, 4)]
[(ram, 0x4c7788, 8) INDIRECT (ram, 0x4c7788, 8) , (const, 0x427, 4)]
[(ram, 0x4c77d0, 4) INDIRECT (ram, 0x4c77d0, 4) , (const, 0x427, 4)]
[(ram, 0x4c77d4, 4) INDIRECT (ram, 0x4c77d4, 4) , (const, 0x427, 4)]
[(ram, 0x4c77d8, 8) INDIRECT (ram, 0x4c77d8, 8) , (const, 0x427, 4)]
[(ram, 0x4c77e0, 4) INDIRECT (ram, 0x4c77e0, 4) , (const, 0x427, 4)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x427, 4), (stack, 0xfffffffffffffe50, 8) COPY (const, 0x40516a, 8)]
[(stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x427, 4)]
[(stack, 0xfffffffffffffe6c, 4) INDIRECT (stack, 0xfffffffffffffe6c, 4) , (const, 0x427, 4)]
[(stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0x427, 4)]
[(stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0x427, 4)]
[(stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x427, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x427, 4)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x427, 4)]
[(stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x427, 4)]
[(stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x427, 4)]
[(stack, 0xfffffffffffffea4, 4) INDIRECT (stack, 0xfffffffffffffea4, 4) , (const, 0x427, 4)]
[(stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x427, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x427, 4)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x427, 4)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x427, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x427, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x427, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x427, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x427, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x427, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x427, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x427, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x427, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x427, 4)]
[ ---  CALL (ram, 0x0, 8) , (unique, 0x3200, 8) , (const, 0x0, 8), (unique, 0x3200, 8) PTRADD (register, 0xa8, 8) , (const, 0x10, 8) , (const, 0x8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x43b, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4c4f18, 8) INDIRECT (ram, 0x4c4f18, 8) , (const, 0x43b, 4), (ram, 0x4c4f18, 8) MULTIEQUAL (ram, 0x4c4f18, 8) , (ram, 0x4c4f18, 8)]
[(ram, 0x4c4fb8, 8) INDIRECT (ram, 0x4c4fb8, 8) , (const, 0x43b, 4), (ram, 0x4c4fb8, 8) MULTIEQUAL (ram, 0x4c4fb8, 8) , (ram, 0x4c4fb8, 8)]
[(ram, 0x4c7780, 4) INDIRECT (ram, 0x4c7780, 4) , (const, 0x43b, 4), (ram, 0x4c7780, 4) MULTIEQUAL (ram, 0x4c7780, 4) , (ram, 0x4c7780, 4)]
[(ram, 0x4c7784, 4) INDIRECT (ram, 0x4c7784, 4) , (const, 0x43b, 4), (ram, 0x4c7784, 4) MULTIEQUAL (ram, 0x4c7784, 4) , (ram, 0x4c7784, 4)]
[(ram, 0x4c7788, 8) INDIRECT (ram, 0x4c7788, 8) , (const, 0x43b, 4), (ram, 0x4c7788, 8) MULTIEQUAL (ram, 0x4c7788, 8) , (ram, 0x4c7788, 8)]
[(ram, 0x4c77d0, 4) INDIRECT (ram, 0x4c77d0, 4) , (const, 0x43b, 4), (ram, 0x4c77d0, 4) MULTIEQUAL (ram, 0x4c77d0, 4) , (ram, 0x4c77d0, 4)]
[(ram, 0x4c77d4, 4) INDIRECT (ram, 0x4c77d4, 4) , (const, 0x43b, 4), (ram, 0x4c77d4, 4) MULTIEQUAL (ram, 0x4c77d4, 4) , (ram, 0x4c77d4, 4)]
[(ram, 0x4c77d8, 8) INDIRECT (ram, 0x4c77d8, 8) , (const, 0x43b, 4), (ram, 0x4c77d8, 8) MULTIEQUAL (ram, 0x4c77d8, 8) , (ram, 0x4c77d8, 8)]
[(ram, 0x4c77e0, 4) INDIRECT (ram, 0x4c77e0, 4) , (const, 0x43b, 4), (ram, 0x4c77e0, 4) MULTIEQUAL (ram, 0x4c77e0, 4) , (ram, 0x4c77e0, 4)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x43b, 4), (stack, 0xfffffffffffffe50, 8) COPY (const, 0x405188, 8)]
[(stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x43b, 4), (stack, 0xfffffffffffffe60, 8) MULTIEQUAL (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8)]
[(stack, 0xfffffffffffffe6c, 4) INDIRECT (stack, 0xfffffffffffffe6c, 4) , (const, 0x43b, 4), (stack, 0xfffffffffffffe6c, 4) MULTIEQUAL (stack, 0xfffffffffffffe6c, 4) , (stack, 0xfffffffffffffe6c, 4)]
[(stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0x43b, 4), (stack, 0xfffffffffffffe70, 8) MULTIEQUAL (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8)]
[(stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0x43b, 4), (stack, 0xfffffffffffffe78, 8) MULTIEQUAL (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8)]
[(stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x43b, 4), (stack, 0xfffffffffffffe80, 8) MULTIEQUAL (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x43b, 4), (stack, 0xfffffffffffffe88, 8) MULTIEQUAL (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x43b, 4), (stack, 0xfffffffffffffe90, 8) MULTIEQUAL (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8)]
[(stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x43b, 4), (stack, 0xfffffffffffffe98, 8) MULTIEQUAL (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8)]
[(stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x43b, 4), (stack, 0xfffffffffffffea0, 4) MULTIEQUAL (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4)]
[(stack, 0xfffffffffffffea4, 4) INDIRECT (stack, 0xfffffffffffffea4, 4) , (const, 0x43b, 4), (stack, 0xfffffffffffffea4, 4) MULTIEQUAL (stack, 0xfffffffffffffea4, 4) , (stack, 0xfffffffffffffea4, 4)]
[(stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x43b, 4), (stack, 0xfffffffffffffea8, 8) MULTIEQUAL (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x43b, 4), (stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x43b, 4), (stack, 0xfffffffffffffeb8, 8) MULTIEQUAL (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x43b, 4), (stack, 0xfffffffffffffec0, 8) MULTIEQUAL (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x43b, 4), (stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x43b, 4), (stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x43b, 4), (stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x43b, 4), (stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x43b, 4), (stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x43b, 4), (stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x43b, 4), (stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x43b, 4), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x43b, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CBRANCH (ram, 0x405459, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0xffffffffffffffff, 8), (register, 0x0, 8) CALL (ram, 0x403450, 8) , (register, 0x18, 8) , (stack, 0xfffffffffffffe60, 8) , (unique, 0x10000a48, 8) , (const, 0x0, 8) , (unique, 0x3c80, 8), (unique, 0x10000a48, 8) PTRSUB (const, 0x0, 8) , (const, 0x4b0c15, 8), (unique, 0x3c80, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff10, 8), (stack, 0xfffffffffffffe60, 8) MULTIEQUAL (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8)]
[ ---  CBRANCH (ram, 0x40546f, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4c4fb8, 8) , (const, 0x0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x4dd, 4)]
[(ram, 0x4c4f18, 8) INDIRECT (ram, 0x4c4f18, 8) , (const, 0x4dd, 4)]
[(ram, 0x4c4fb8, 8) INDIRECT (ram, 0x4c4fb8, 8) , (const, 0x4dd, 4)]
[(ram, 0x4c7780, 4) INDIRECT (ram, 0x4c7780, 4) , (const, 0x4dd, 4)]
[(ram, 0x4c7784, 4) INDIRECT (ram, 0x4c7784, 4) , (const, 0x4dd, 4)]
[(ram, 0x4c7788, 8) INDIRECT (ram, 0x4c7788, 8) , (const, 0x4dd, 4)]
[(ram, 0x4c77d0, 4) INDIRECT (ram, 0x4c77d0, 4) , (const, 0x4dd, 4)]
[(ram, 0x4c77d4, 4) INDIRECT (ram, 0x4c77d4, 4) , (const, 0x4dd, 4)]
[(ram, 0x4c77d8, 8) INDIRECT (ram, 0x4c77d8, 8) , (const, 0x4dd, 4)]
[(ram, 0x4c77e0, 4) INDIRECT (ram, 0x4c77e0, 4) , (const, 0x4dd, 4)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x4dd, 4), (stack, 0xfffffffffffffe50, 8) COPY (const, 0x40546f, 8)]
[(stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x4dd, 4)]
[(stack, 0xfffffffffffffe6c, 4) INDIRECT (stack, 0xfffffffffffffe6c, 4) , (const, 0x4dd, 4)]
[(stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0x4dd, 4)]
[(stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0x4dd, 4)]
[(stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x4dd, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x4dd, 4)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x4dd, 4)]
[(stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x4dd, 4)]
[(stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x4dd, 4)]
[(stack, 0xfffffffffffffea4, 4) INDIRECT (stack, 0xfffffffffffffea4, 4) , (const, 0x4dd, 4)]
[(stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x4dd, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x4dd, 4)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x4dd, 4)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x4dd, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x4dd, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x4dd, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x4dd, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x4dd, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x4dd, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x4dd, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x4dd, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x4dd, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x4dd, 4)]
[ ---  CALL (ram, 0x0, 8) , (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (register, 0xa8, 8) , (const, 0x10, 8) , (const, 0x8, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffec0, 8) MULTIEQUAL (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8)]
[(stack, 0xfffffffffffffeb8, 8) MULTIEQUAL (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(stack, 0xfffffffffffffea8, 8) MULTIEQUAL (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8)]
[(stack, 0xfffffffffffffea4, 4) MULTIEQUAL (stack, 0xfffffffffffffea4, 4) , (stack, 0xfffffffffffffea4, 4)]
[(stack, 0xfffffffffffffea0, 4) MULTIEQUAL (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4)]
[(stack, 0xfffffffffffffe98, 8) MULTIEQUAL (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8)]
[(stack, 0xfffffffffffffe90, 8) MULTIEQUAL (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8)]
[(stack, 0xfffffffffffffe88, 8) MULTIEQUAL (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8)]
[(stack, 0xfffffffffffffe80, 8) MULTIEQUAL (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8)]
[(stack, 0xfffffffffffffe78, 8) MULTIEQUAL (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8)]
[(stack, 0xfffffffffffffe70, 8) MULTIEQUAL (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8)]
[(stack, 0xfffffffffffffe6c, 4) MULTIEQUAL (stack, 0xfffffffffffffe6c, 4) , (stack, 0xfffffffffffffe6c, 4)]
[(stack, 0xfffffffffffffe60, 8) MULTIEQUAL (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8)]
[(ram, 0x4c77e0, 4) MULTIEQUAL (ram, 0x4c77e0, 4) , (ram, 0x4c77e0, 4)]
[(ram, 0x4c77d8, 8) MULTIEQUAL (ram, 0x4c77d8, 8) , (ram, 0x4c77d8, 8)]
[(ram, 0x4c77d4, 4) MULTIEQUAL (ram, 0x4c77d4, 4) , (ram, 0x4c77d4, 4)]
[(ram, 0x4c77d0, 4) MULTIEQUAL (ram, 0x4c77d0, 4) , (ram, 0x4c77d0, 4)]
[(ram, 0x4c7788, 8) MULTIEQUAL (ram, 0x4c7788, 8) , (ram, 0x4c7788, 8)]
[(ram, 0x4c7784, 4) MULTIEQUAL (ram, 0x4c7784, 4) , (ram, 0x4c7784, 4)]
[(ram, 0x4c7780, 4) MULTIEQUAL (ram, 0x4c7780, 4) , (ram, 0x4c7780, 4)]
[(ram, 0x4c4fb8, 8) MULTIEQUAL (ram, 0x4c4fb8, 8) , (ram, 0x4c4fb8, 8)]
[(ram, 0x4c4f18, 8) MULTIEQUAL (ram, 0x4c4f18, 8) , (ram, 0x4c4f18, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xa8, 8) , (const, 0x4, 8) , (const, 0x8, 8)]
[ ---  BRANCH (ram, 0x405272, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x44d, 4)]
[(ram, 0x4c4f18, 8) INDIRECT (ram, 0x4c4f18, 8) , (const, 0x44d, 4)]
[(ram, 0x4c4fb8, 8) INDIRECT (ram, 0x4c4fb8, 8) , (const, 0x44d, 4)]
[(ram, 0x4c7780, 4) INDIRECT (ram, 0x4c7780, 4) , (const, 0x44d, 4)]
[(ram, 0x4c7788, 8) INDIRECT (ram, 0x4c7788, 8) , (const, 0x44d, 4)]
[(ram, 0x4c77d0, 4) INDIRECT (ram, 0x4c77d0, 4) , (const, 0x44d, 4)]
[(ram, 0x4c77d4, 4) INDIRECT (ram, 0x4c77d4, 4) , (const, 0x44d, 4)]
[(ram, 0x4c77d8, 8) INDIRECT (ram, 0x4c77d8, 8) , (const, 0x44d, 4)]
[(ram, 0x4c77e0, 4) INDIRECT (ram, 0x4c77e0, 4) , (const, 0x44d, 4)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x44d, 4), (stack, 0xfffffffffffffe50, 8) COPY (const, 0x4051a8, 8)]
[(stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x44d, 4)]
[(stack, 0xfffffffffffffe6c, 4) INDIRECT (stack, 0xfffffffffffffe6c, 4) , (const, 0x44d, 4)]
[(stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0x44d, 4)]
[(stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0x44d, 4)]
[(stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x44d, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x44d, 4)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x44d, 4)]
[(stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x44d, 4)]
[(stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x44d, 4)]
[(stack, 0xfffffffffffffea4, 4) INDIRECT (stack, 0xfffffffffffffea4, 4) , (const, 0x44d, 4)]
[(stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x44d, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x44d, 4)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x44d, 4)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x44d, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x44d, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x44d, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x44d, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x44d, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x44d, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x44d, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x44d, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x44d, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x44d, 4)]
[ ---  CALL (ram, 0x40f460, 8) , (register, 0x0, 8) , (unique, 0x3200, 8) , (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (register, 0xa8, 8) , (const, 0x17, 8) , (const, 0x8, 8), (unique, 0x3200, 8) PTRADD (register, 0xa8, 8) , (const, 0x18, 8) , (const, 0x8, 8)]
[(unique, 0x100010e8, 4) COPY (register, 0x0, 4), (register, 0x0, 4) INT_ADD (ram, 0x4c7784, 4) , (const, 0xffffffff, 4), (ram, 0x4c7784, 4) INDIRECT (ram, 0x4c7784, 4) , (const, 0x44d, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffec0, 8) MULTIEQUAL (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8)]
[(stack, 0xfffffffffffffeb8, 8) MULTIEQUAL (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(stack, 0xfffffffffffffea8, 8) MULTIEQUAL (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8)]
[(stack, 0xfffffffffffffea4, 4) MULTIEQUAL (stack, 0xfffffffffffffea4, 4) , (stack, 0xfffffffffffffea4, 4) , (stack, 0xfffffffffffffea4, 4) , (stack, 0xfffffffffffffea4, 4) , (stack, 0xfffffffffffffea4, 4)]
[(stack, 0xfffffffffffffea0, 4) MULTIEQUAL (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4)]
[(stack, 0xfffffffffffffe98, 8) MULTIEQUAL (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8)]
[(stack, 0xfffffffffffffe90, 8) MULTIEQUAL (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8)]
[(stack, 0xfffffffffffffe88, 8) MULTIEQUAL (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8) , (register, 0x0, 8) , (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8)]
[(stack, 0xfffffffffffffe80, 8) MULTIEQUAL (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8)]
[(stack, 0xfffffffffffffe78, 8) MULTIEQUAL (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8)]
[(stack, 0xfffffffffffffe70, 8) MULTIEQUAL (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8)]
[(stack, 0xfffffffffffffe6c, 4) MULTIEQUAL (stack, 0xfffffffffffffe6c, 4) , (stack, 0xfffffffffffffe6c, 4) , (stack, 0xfffffffffffffe6c, 4) , (stack, 0xfffffffffffffe6c, 4) , (stack, 0xfffffffffffffe6c, 4)]
[(stack, 0xfffffffffffffe60, 8) MULTIEQUAL (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8)]
[(ram, 0x4c77e0, 4) MULTIEQUAL (ram, 0x4c77e0, 4) , (ram, 0x4c77e0, 4) , (ram, 0x4c77e0, 4) , (ram, 0x4c77e0, 4) , (ram, 0x4c77e0, 4)]
[(ram, 0x4c77d8, 8) MULTIEQUAL (ram, 0x4c77d8, 8) , (ram, 0x4c77d8, 8) , (ram, 0x4c77d8, 8) , (ram, 0x4c77d8, 8) , (ram, 0x4c77d8, 8)]
[(ram, 0x4c77d4, 4) MULTIEQUAL (ram, 0x4c77d4, 4) , (ram, 0x4c77d4, 4) , (ram, 0x4c77d4, 4) , (ram, 0x4c77d4, 4) , (ram, 0x4c77d4, 4)]
[(ram, 0x4c77d0, 4) MULTIEQUAL (ram, 0x4c77d0, 4) , (ram, 0x4c77d0, 4) , (ram, 0x4c77d0, 4) , (ram, 0x4c77d0, 4) , (ram, 0x4c77d0, 4)]
[(ram, 0x4c7788, 8) MULTIEQUAL (ram, 0x4c7788, 8) , (ram, 0x4c7788, 8) , (ram, 0x4c7788, 8) , (ram, 0x4c7788, 8) , (ram, 0x4c7788, 8)]
[(ram, 0x4c7784, 4) MULTIEQUAL (ram, 0x4c7784, 4) , (ram, 0x4c7784, 4) , (ram, 0x4c7784, 4) , (ram, 0x4c7784, 4) , (ram, 0x4c7784, 4)]
[(ram, 0x4c7780, 4) MULTIEQUAL (ram, 0x4c7780, 4) , (ram, 0x4c7780, 4) , (ram, 0x4c7780, 4) , (ram, 0x4c7780, 4) , (ram, 0x4c7780, 4)]
[(ram, 0x4c4fb8, 8) MULTIEQUAL (ram, 0x4c4fb8, 8) , (ram, 0x4c4fb8, 8) , (ram, 0x4c4fb8, 8) , (ram, 0x4c4fb8, 8) , (ram, 0x4c4fb8, 8)]
[(ram, 0x4c4f18, 8) MULTIEQUAL (ram, 0x4c4f18, 8) , (ram, 0x4c4f18, 8) , (ram, 0x4c4f18, 8) , (ram, 0x4c4f18, 8) , (ram, 0x4c4f18, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb8, 8) MULTIEQUAL (register, 0xb8, 8) , (register, 0xb8, 8) , (unique, 0x10000eac, 8) , (register, 0xb8, 8) , (register, 0xb8, 8)]
[(register, 0xb0, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (unique, 0x10000ecc, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(register, 0xa8, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8) , (unique, 0x10000ed4, 8) , (register, 0x0, 8) , (register, 0x0, 8)]
[(register, 0x18, 8) MULTIEQUAL (register, 0x38, 8) , (register, 0x38, 8) , (unique, 0x10000ebc, 8) , (register, 0x38, 8) , (register, 0x38, 8)]
[(register, 0x38, 8) COPY (const, 0x0, 8)]
[(register, 0xb8, 8) MULTIEQUAL (register, 0xb8, 8) , (register, 0xb8, 8) , (register, 0xb8, 8)]
[(register, 0xb0, 8) MULTIEQUAL (register, 0xb0, 8) , (register, 0xb0, 8) , (register, 0xb0, 8)]
[(register, 0xa8, 8) MULTIEQUAL (register, 0xa8, 8) , (register, 0xa8, 8) , (register, 0xa8, 8)]
[(register, 0x18, 8) MULTIEQUAL (register, 0x18, 8) , (register, 0x18, 8) , (register, 0x18, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x4e4, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4c4f18, 8) INDIRECT (ram, 0x4c4f18, 8) , (const, 0x4e4, 4), (ram, 0x4c4f18, 8) MULTIEQUAL (ram, 0x4c4f18, 8) , (ram, 0x4c4f18, 8) , (ram, 0x4c4f18, 8)]
[(ram, 0x4c4fb8, 8) INDIRECT (ram, 0x4c4fb8, 8) , (const, 0x4e4, 4), (ram, 0x4c4fb8, 8) MULTIEQUAL (ram, 0x4c4fb8, 8) , (ram, 0x4c4fb8, 8) , (ram, 0x4c4fb8, 8)]
[(ram, 0x4c7780, 4) INDIRECT (ram, 0x4c7780, 4) , (const, 0x4e4, 4), (ram, 0x4c7780, 4) MULTIEQUAL (ram, 0x4c7780, 4) , (ram, 0x4c7780, 4) , (ram, 0x4c7780, 4)]
[(ram, 0x4c7784, 4) INDIRECT (ram, 0x4c7784, 4) , (const, 0x4e4, 4), (ram, 0x4c7784, 4) MULTIEQUAL (ram, 0x4c7784, 4) , (ram, 0x4c7784, 4) , (ram, 0x4c7784, 4)]
[(ram, 0x4c7788, 8) INDIRECT (ram, 0x4c7788, 8) , (const, 0x4e4, 4), (ram, 0x4c7788, 8) MULTIEQUAL (ram, 0x4c7788, 8) , (ram, 0x4c7788, 8) , (ram, 0x4c7788, 8)]
[(ram, 0x4c77d0, 4) INDIRECT (ram, 0x4c77d0, 4) , (const, 0x4e4, 4), (ram, 0x4c77d0, 4) MULTIEQUAL (ram, 0x4c77d0, 4) , (ram, 0x4c77d0, 4) , (ram, 0x4c77d0, 4)]
[(ram, 0x4c77d4, 4) INDIRECT (ram, 0x4c77d4, 4) , (const, 0x4e4, 4), (ram, 0x4c77d4, 4) MULTIEQUAL (ram, 0x4c77d4, 4) , (ram, 0x4c77d4, 4) , (ram, 0x4c77d4, 4)]
[(ram, 0x4c77d8, 8) INDIRECT (ram, 0x4c77d8, 8) , (const, 0x4e4, 4), (ram, 0x4c77d8, 8) MULTIEQUAL (ram, 0x4c77d8, 8) , (ram, 0x4c77d8, 8) , (ram, 0x4c77d8, 8)]
[(ram, 0x4c77e0, 4) INDIRECT (ram, 0x4c77e0, 4) , (const, 0x4e4, 4), (ram, 0x4c77e0, 4) MULTIEQUAL (ram, 0x4c77e0, 4) , (ram, 0x4c77e0, 4) , (ram, 0x4c77e0, 4)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x4e4, 4), (stack, 0xfffffffffffffe50, 8) COPY (const, 0x405277, 8)]
[(stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x4e4, 4), (stack, 0xfffffffffffffe60, 8) MULTIEQUAL (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8)]
[(stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0x4e4, 4), (stack, 0xfffffffffffffe70, 8) MULTIEQUAL (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8)]
[(stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0x4e4, 4), (stack, 0xfffffffffffffe78, 8) MULTIEQUAL (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8)]
[(stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x4e4, 4), (stack, 0xfffffffffffffe80, 8) MULTIEQUAL (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x4e4, 4), (stack, 0xfffffffffffffe88, 8) MULTIEQUAL (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x4e4, 4), (stack, 0xfffffffffffffe90, 8) MULTIEQUAL (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8)]
[(stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x4e4, 4), (stack, 0xfffffffffffffe98, 8) MULTIEQUAL (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8)]
[(stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x4e4, 4), (stack, 0xfffffffffffffea0, 4) MULTIEQUAL (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4)]
[(stack, 0xfffffffffffffea4, 4) INDIRECT (stack, 0xfffffffffffffea4, 4) , (const, 0x4e4, 4), (stack, 0xfffffffffffffea4, 4) MULTIEQUAL (stack, 0xfffffffffffffea4, 4) , (stack, 0xfffffffffffffea4, 4) , (stack, 0xfffffffffffffea4, 4)]
[(stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x4e4, 4), (stack, 0xfffffffffffffea8, 8) MULTIEQUAL (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x4e4, 4), (stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x4e4, 4), (stack, 0xfffffffffffffeb8, 8) MULTIEQUAL (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x4e4, 4), (stack, 0xfffffffffffffec0, 8) MULTIEQUAL (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x4e4, 4), (stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x4e4, 4), (stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x4e4, 4), (stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x4e4, 4), (stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x4e4, 4), (stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x4e4, 4), (stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x4e4, 4), (stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x4e4, 4), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x4e4, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CALL (ram, 0x426b40, 8) , (register, 0x38, 8), (register, 0x38, 8) MULTIEQUAL (unique, 0xbd80, 8) , (register, 0x38, 8) , (register, 0x38, 8)]
[ ---  CBRANCH (ram, 0x4052d0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xfffffffffffffe6c, 4) , (const, 0x0, 4), (stack, 0xfffffffffffffe6c, 4) INDIRECT (stack, 0xfffffffffffffe6c, 4) , (const, 0x4e4, 4), (stack, 0xfffffffffffffe6c, 4) MULTIEQUAL (stack, 0xfffffffffffffe6c, 4) , (stack, 0xfffffffffffffe6c, 4) , (stack, 0xfffffffffffffe6c, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x510, 4)]
[(ram, 0x4c4f18, 8) INDIRECT (ram, 0x4c4f18, 8) , (const, 0x510, 4)]
[(ram, 0x4c4fb8, 8) INDIRECT (ram, 0x4c4fb8, 8) , (const, 0x510, 4)]
[(ram, 0x4c7780, 4) INDIRECT (ram, 0x4c7780, 4) , (const, 0x510, 4)]
[(ram, 0x4c7784, 4) INDIRECT (ram, 0x4c7784, 4) , (const, 0x510, 4)]
[(ram, 0x4c7788, 8) INDIRECT (ram, 0x4c7788, 8) , (const, 0x510, 4)]
[(ram, 0x4c77d0, 4) INDIRECT (ram, 0x4c77d0, 4) , (const, 0x510, 4)]
[(ram, 0x4c77d4, 4) INDIRECT (ram, 0x4c77d4, 4) , (const, 0x510, 4)]
[(ram, 0x4c77d8, 8) INDIRECT (ram, 0x4c77d8, 8) , (const, 0x510, 4)]
[(ram, 0x4c77e0, 4) INDIRECT (ram, 0x4c77e0, 4) , (const, 0x510, 4)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x510, 4), (stack, 0xfffffffffffffe50, 8) COPY (const, 0x4052db, 8)]
[(stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x510, 4)]
[(stack, 0xfffffffffffffe6c, 4) INDIRECT (stack, 0xfffffffffffffe6c, 4) , (const, 0x510, 4)]
[(stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0x510, 4)]
[(stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0x510, 4)]
[(stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x510, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x510, 4)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x510, 4)]
[(stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x510, 4)]
[(stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x510, 4)]
[(stack, 0xfffffffffffffea4, 4) INDIRECT (stack, 0xfffffffffffffea4, 4) , (const, 0x510, 4)]
[(stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x510, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x510, 4)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x510, 4)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x510, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x510, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x510, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x510, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x510, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x510, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x510, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x510, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x510, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x510, 4)]
[ ---  CALL (ram, 0x4562a0, 8) , (register, 0xb8, 8) , (register, 0xb0, 8)]
[ ---  BRANCH (ram, 0x405287, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x4f7, 4)]
[(ram, 0x4c4f18, 8) INDIRECT (ram, 0x4c4f18, 8) , (const, 0x4f7, 4)]
[(ram, 0x4c4fb8, 8) INDIRECT (ram, 0x4c4fb8, 8) , (const, 0x4f7, 4)]
[(ram, 0x4c7780, 4) INDIRECT (ram, 0x4c7780, 4) , (const, 0x4f7, 4)]
[(ram, 0x4c7784, 4) INDIRECT (ram, 0x4c7784, 4) , (const, 0x4f7, 4)]
[(ram, 0x4c7788, 8) INDIRECT (ram, 0x4c7788, 8) , (const, 0x4f7, 4)]
[(ram, 0x4c77d0, 4) INDIRECT (ram, 0x4c77d0, 4) , (const, 0x4f7, 4)]
[(ram, 0x4c77d4, 4) INDIRECT (ram, 0x4c77d4, 4) , (const, 0x4f7, 4)]
[(ram, 0x4c77d8, 8) INDIRECT (ram, 0x4c77d8, 8) , (const, 0x4f7, 4)]
[(ram, 0x4c77e0, 4) INDIRECT (ram, 0x4c77e0, 4) , (const, 0x4f7, 4)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x4f7, 4), (stack, 0xfffffffffffffe50, 8) COPY (const, 0x405287, 8)]
[(stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x4f7, 4)]
[(stack, 0xfffffffffffffe6c, 4) INDIRECT (stack, 0xfffffffffffffe6c, 4) , (const, 0x4f7, 4)]
[(stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0x4f7, 4)]
[(stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0x4f7, 4)]
[(stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x4f7, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x4f7, 4)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x4f7, 4)]
[(stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x4f7, 4)]
[(stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x4f7, 4)]
[(stack, 0xfffffffffffffea4, 4) INDIRECT (stack, 0xfffffffffffffea4, 4) , (const, 0x4f7, 4)]
[(stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x4f7, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x4f7, 4)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x4f7, 4)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x4f7, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x4f7, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x4f7, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x4f7, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x4f7, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x4f7, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x4f7, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x4f7, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x4f7, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x4f7, 4)]
[ ---  CALL (ram, 0x426b40, 8) , (register, 0xb8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x4fb, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x4fb, 4), (stack, 0xfffffffffffffe50, 8) COPY (const, 0x40528f, 8)]
[(stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x4fb, 4), (stack, 0xfffffffffffffe60, 8) MULTIEQUAL (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8)]
[(stack, 0xfffffffffffffe6c, 4) INDIRECT (stack, 0xfffffffffffffe6c, 4) , (const, 0x4fb, 4), (stack, 0xfffffffffffffe6c, 4) MULTIEQUAL (stack, 0xfffffffffffffe6c, 4) , (stack, 0xfffffffffffffe6c, 4)]
[(stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0x4fb, 4), (stack, 0xfffffffffffffe70, 8) MULTIEQUAL (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8)]
[(stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0x4fb, 4), (stack, 0xfffffffffffffe78, 8) MULTIEQUAL (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8)]
[(stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x4fb, 4), (stack, 0xfffffffffffffe80, 8) MULTIEQUAL (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x4fb, 4), (stack, 0xfffffffffffffe88, 8) MULTIEQUAL (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x4fb, 4), (stack, 0xfffffffffffffe90, 8) MULTIEQUAL (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8)]
[(stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x4fb, 4), (stack, 0xfffffffffffffe98, 8) MULTIEQUAL (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8)]
[(stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x4fb, 4), (stack, 0xfffffffffffffea0, 4) MULTIEQUAL (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4)]
[(stack, 0xfffffffffffffea4, 4) INDIRECT (stack, 0xfffffffffffffea4, 4) , (const, 0x4fb, 4), (stack, 0xfffffffffffffea4, 4) MULTIEQUAL (stack, 0xfffffffffffffea4, 4) , (stack, 0xfffffffffffffea4, 4)]
[(stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x4fb, 4), (stack, 0xfffffffffffffea8, 8) MULTIEQUAL (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x4fb, 4), (stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x4fb, 4), (stack, 0xfffffffffffffeb8, 8) MULTIEQUAL (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x4fb, 4), (stack, 0xfffffffffffffec0, 8) MULTIEQUAL (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x4fb, 4), (stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x4fb, 4), (stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x4fb, 4), (stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x4fb, 4), (stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x4fb, 4), (stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x4fb, 4), (stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x4fb, 4), (stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x4fb, 4), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x4fb, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CALL (ram, 0x426b40, 8) , (register, 0xa8, 8)]
[(ram, 0x4c4f18, 8) INDIRECT (ram, 0x4c4f18, 8) , (const, 0x500, 4), (ram, 0x4c4f18, 8) INDIRECT (ram, 0x4c4f18, 8) , (const, 0x4fb, 4), (ram, 0x4c4f18, 8) MULTIEQUAL (ram, 0x4c4f18, 8) , (ram, 0x4c4f18, 8)]
[(ram, 0x4c4fb8, 8) INDIRECT (ram, 0x4c4fb8, 8) , (const, 0x500, 4), (ram, 0x4c4fb8, 8) INDIRECT (ram, 0x4c4fb8, 8) , (const, 0x4fb, 4), (ram, 0x4c4fb8, 8) MULTIEQUAL (ram, 0x4c4fb8, 8) , (ram, 0x4c4fb8, 8)]
[(ram, 0x4c7780, 4) INDIRECT (ram, 0x4c7780, 4) , (const, 0x500, 4), (ram, 0x4c7780, 4) INDIRECT (ram, 0x4c7780, 4) , (const, 0x4fb, 4), (ram, 0x4c7780, 4) MULTIEQUAL (ram, 0x4c7780, 4) , (ram, 0x4c7780, 4)]
[(ram, 0x4c7788, 8) INDIRECT (ram, 0x4c7788, 8) , (const, 0x500, 4), (ram, 0x4c7788, 8) INDIRECT (ram, 0x4c7788, 8) , (const, 0x4fb, 4), (ram, 0x4c7788, 8) MULTIEQUAL (ram, 0x4c7788, 8) , (ram, 0x4c7788, 8)]
[(ram, 0x4c77d0, 4) INDIRECT (ram, 0x4c77d0, 4) , (const, 0x500, 4), (ram, 0x4c77d0, 4) INDIRECT (ram, 0x4c77d0, 4) , (const, 0x4fb, 4), (ram, 0x4c77d0, 4) MULTIEQUAL (ram, 0x4c77d0, 4) , (ram, 0x4c77d0, 4)]
[(ram, 0x4c77d4, 4) INDIRECT (ram, 0x4c77d4, 4) , (const, 0x500, 4), (ram, 0x4c77d4, 4) INDIRECT (ram, 0x4c77d4, 4) , (const, 0x4fb, 4), (ram, 0x4c77d4, 4) MULTIEQUAL (ram, 0x4c77d4, 4) , (ram, 0x4c77d4, 4)]
[(ram, 0x4c77d8, 8) INDIRECT (ram, 0x4c77d8, 8) , (const, 0x500, 4), (ram, 0x4c77d8, 8) INDIRECT (ram, 0x4c77d8, 8) , (const, 0x4fb, 4), (ram, 0x4c77d8, 8) MULTIEQUAL (ram, 0x4c77d8, 8) , (ram, 0x4c77d8, 8)]
[(ram, 0x4c77e0, 4) INDIRECT (ram, 0x4c77e0, 4) , (const, 0x500, 4), (ram, 0x4c77e0, 4) INDIRECT (ram, 0x4c77e0, 4) , (const, 0x4fb, 4), (ram, 0x4c77e0, 4) MULTIEQUAL (ram, 0x4c77e0, 4) , (ram, 0x4c77e0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (const, 0x0, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[(unique, 0x100010ec, 4) COPY (register, 0x0, 4), (register, 0x0, 4) INT_ADD (ram, 0x4c7784, 4) , (const, 0xffffffff, 4), (ram, 0x4c7784, 4) INDIRECT (ram, 0x4c7784, 4) , (const, 0x4fb, 4), (ram, 0x4c7784, 4) MULTIEQUAL (ram, 0x4c7784, 4) , (ram, 0x4c7784, 4)]
[ ---  BRANCH (ram, 0x4051b8, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x19da, 4)]
[(ram, 0x4c4f18, 8) INDIRECT (ram, 0x4c4f18, 8) , (const, 0x19da, 4)]
[(ram, 0x4c4fb8, 8) INDIRECT (ram, 0x4c4fb8, 8) , (const, 0x19da, 4)]
[(ram, 0x4c7780, 4) INDIRECT (ram, 0x4c7780, 4) , (const, 0x19da, 4)]
[(ram, 0x4c7788, 8) INDIRECT (ram, 0x4c7788, 8) , (const, 0x19da, 4)]
[(ram, 0x4c77d0, 4) INDIRECT (ram, 0x4c77d0, 4) , (const, 0x19da, 4)]
[(ram, 0x4c77d4, 4) INDIRECT (ram, 0x4c77d4, 4) , (const, 0x19da, 4)]
[(ram, 0x4c77d8, 8) INDIRECT (ram, 0x4c77d8, 8) , (const, 0x19da, 4)]
[(ram, 0x4c77e0, 4) INDIRECT (ram, 0x4c77e0, 4) , (const, 0x19da, 4)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x19da, 4), (stack, 0xfffffffffffffe50, 8) COPY (const, 0x40538b, 8)]
[(stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x19da, 4)]
[(stack, 0xfffffffffffffe6c, 4) INDIRECT (stack, 0xfffffffffffffe6c, 4) , (const, 0x19da, 4)]
[(stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0x19da, 4)]
[(stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0x19da, 4)]
[(stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x19da, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x19da, 4)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x19da, 4)]
[(stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x19da, 4)]
[(stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x19da, 4)]
[(stack, 0xfffffffffffffea4, 4) INDIRECT (stack, 0xfffffffffffffea4, 4) , (const, 0x19da, 4)]
[(stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x19da, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x19da, 4)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x19da, 4)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x19da, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x19da, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x19da, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x19da, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x19da, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x19da, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x19da, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x19da, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x19da, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x19da, 4)]
[ ---  CALL (ram, 0x426b40, 8) , (register, 0x0, 8)]
[(unique, 0x100010f8, 4) COPY (register, 0x0, 4), (register, 0x0, 4) INT_ADD (ram, 0x4c7784, 4) , (const, 0xffffffff, 4), (ram, 0x4c7784, 4) INDIRECT (ram, 0x4c7784, 4) , (const, 0x19da, 4)]
[ ---  BRANCH (ram, 0x4051b8, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1a06, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4c4f18, 8) INDIRECT (ram, 0x4c4f18, 8) , (const, 0x1a06, 4), (ram, 0x4c4f18, 8) MULTIEQUAL (ram, 0x4c4f18, 8) , (ram, 0x4c4f18, 8) , (ram, 0x4c4f18, 8) , (ram, 0x4c4f18, 8) , (ram, 0x4c4f18, 8)]
[(ram, 0x4c4fb8, 8) INDIRECT (ram, 0x4c4fb8, 8) , (const, 0x1a06, 4), (ram, 0x4c4fb8, 8) MULTIEQUAL (ram, 0x4c4fb8, 8) , (ram, 0x4c4fb8, 8) , (ram, 0x4c4fb8, 8) , (ram, 0x4c4fb8, 8) , (ram, 0x4c4fb8, 8)]
[(ram, 0x4c7780, 4) INDIRECT (ram, 0x4c7780, 4) , (const, 0x1a06, 4), (ram, 0x4c7780, 4) MULTIEQUAL (ram, 0x4c7780, 4) , (ram, 0x4c7780, 4) , (ram, 0x4c7780, 4) , (ram, 0x4c7780, 4) , (ram, 0x4c7780, 4)]
[(ram, 0x4c7784, 4) INDIRECT (ram, 0x4c7784, 4) , (const, 0x1a06, 4), (ram, 0x4c7784, 4) MULTIEQUAL (ram, 0x4c7784, 4) , (ram, 0x4c7784, 4) , (ram, 0x4c7784, 4) , (ram, 0x4c7784, 4) , (ram, 0x4c7784, 4)]
[(ram, 0x4c7788, 8) INDIRECT (ram, 0x4c7788, 8) , (const, 0x1a06, 4), (ram, 0x4c7788, 8) MULTIEQUAL (ram, 0x4c7788, 8) , (ram, 0x4c7788, 8) , (ram, 0x4c7788, 8) , (ram, 0x4c7788, 8) , (ram, 0x4c7788, 8)]
[(ram, 0x4c77d0, 4) INDIRECT (ram, 0x4c77d0, 4) , (const, 0x1a06, 4), (ram, 0x4c77d0, 4) MULTIEQUAL (ram, 0x4c77d0, 4) , (ram, 0x4c77d0, 4) , (ram, 0x4c77d0, 4) , (ram, 0x4c77d0, 4) , (ram, 0x4c77d0, 4)]
[(ram, 0x4c77d4, 4) INDIRECT (ram, 0x4c77d4, 4) , (const, 0x1a06, 4), (ram, 0x4c77d4, 4) MULTIEQUAL (ram, 0x4c77d4, 4) , (ram, 0x4c77d4, 4) , (ram, 0x4c77d4, 4) , (ram, 0x4c77d4, 4) , (ram, 0x4c77d4, 4)]
[(ram, 0x4c77d8, 8) INDIRECT (ram, 0x4c77d8, 8) , (const, 0x1a06, 4), (ram, 0x4c77d8, 8) MULTIEQUAL (ram, 0x4c77d8, 8) , (ram, 0x4c77d8, 8) , (ram, 0x4c77d8, 8) , (ram, 0x4c77d8, 8) , (ram, 0x4c77d8, 8)]
[(ram, 0x4c77e0, 4) INDIRECT (ram, 0x4c77e0, 4) , (const, 0x1a06, 4), (ram, 0x4c77e0, 4) MULTIEQUAL (ram, 0x4c77e0, 4) , (ram, 0x4c77e0, 4) , (ram, 0x4c77e0, 4) , (ram, 0x4c77e0, 4) , (ram, 0x4c77e0, 4)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x1a06, 4), (stack, 0xfffffffffffffe50, 8) COPY (const, 0x40522e, 8)]
[(stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x1a06, 4), (stack, 0xfffffffffffffe60, 8) MULTIEQUAL (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8)]
[(stack, 0xfffffffffffffe6c, 4) INDIRECT (stack, 0xfffffffffffffe6c, 4) , (const, 0x1a06, 4), (stack, 0xfffffffffffffe6c, 4) MULTIEQUAL (register, 0x0, 4) , (register, 0x0, 4) , (stack, 0xfffffffffffffe6c, 4) , (stack, 0xfffffffffffffe6c, 4) , (stack, 0xfffffffffffffe6c, 4)]
[(stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0x1a06, 4), (stack, 0xfffffffffffffe70, 8) MULTIEQUAL (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8)]
[(stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0x1a06, 4), (stack, 0xfffffffffffffe78, 8) MULTIEQUAL (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8)]
[(stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x1a06, 4), (stack, 0xfffffffffffffe80, 8) MULTIEQUAL (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x1a06, 4), (stack, 0xfffffffffffffe88, 8) MULTIEQUAL (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x1a06, 4), (stack, 0xfffffffffffffe90, 8) MULTIEQUAL (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8)]
[(stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x1a06, 4), (stack, 0xfffffffffffffe98, 8) MULTIEQUAL (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8)]
[(stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x1a06, 4), (stack, 0xfffffffffffffea0, 4) MULTIEQUAL (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4)]
[(stack, 0xfffffffffffffea4, 4) INDIRECT (stack, 0xfffffffffffffea4, 4) , (const, 0x1a06, 4), (stack, 0xfffffffffffffea4, 4) MULTIEQUAL (stack, 0xfffffffffffffea4, 4) , (stack, 0xfffffffffffffea4, 4) , (stack, 0xfffffffffffffea4, 4) , (stack, 0xfffffffffffffea4, 4) , (stack, 0xfffffffffffffea4, 4)]
[(stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x1a06, 4), (stack, 0xfffffffffffffea8, 8) MULTIEQUAL (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x1a06, 4), (stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x1a06, 4), (stack, 0xfffffffffffffeb8, 8) MULTIEQUAL (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x1a06, 4), (stack, 0xfffffffffffffec0, 8) MULTIEQUAL (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x1a06, 4), (stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x1a06, 4), (stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x1a06, 4), (stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x1a06, 4), (stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x1a06, 4), (stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x1a06, 4), (stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x1a06, 4), (stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x1a06, 4), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1a06, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CALL (ram, 0x455d60, 8) , (register, 0x0, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffec0, 8) MULTIEQUAL (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8)]
[(stack, 0xfffffffffffffeb8, 8) MULTIEQUAL (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(stack, 0xfffffffffffffea8, 8) MULTIEQUAL (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8)]
[(stack, 0xfffffffffffffea4, 4) MULTIEQUAL (stack, 0xfffffffffffffea4, 4) , (stack, 0xfffffffffffffea4, 4) , (stack, 0xfffffffffffffea4, 4)]
[(stack, 0xfffffffffffffea0, 4) MULTIEQUAL (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4)]
[(stack, 0xfffffffffffffe98, 8) MULTIEQUAL (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8)]
[(stack, 0xfffffffffffffe90, 8) MULTIEQUAL (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8)]
[(stack, 0xfffffffffffffe88, 8) MULTIEQUAL (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8)]
[(stack, 0xfffffffffffffe80, 8) MULTIEQUAL (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8)]
[(stack, 0xfffffffffffffe78, 8) MULTIEQUAL (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8)]
[(stack, 0xfffffffffffffe70, 8) MULTIEQUAL (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8)]
[(stack, 0xfffffffffffffe6c, 4) MULTIEQUAL (stack, 0xfffffffffffffe6c, 4) , (stack, 0xfffffffffffffe6c, 4) , (stack, 0xfffffffffffffe6c, 4)]
[(stack, 0xfffffffffffffe60, 8) MULTIEQUAL (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8)]
[(ram, 0x4c77e0, 4) MULTIEQUAL (ram, 0x4c77e0, 4) , (ram, 0x4c77e0, 4) , (ram, 0x4c77e0, 4)]
[(ram, 0x4c77d8, 8) MULTIEQUAL (ram, 0x4c77d8, 8) , (ram, 0x4c77d8, 8) , (ram, 0x4c77d8, 8)]
[(ram, 0x4c77d4, 4) MULTIEQUAL (ram, 0x4c77d4, 4) , (ram, 0x4c77d4, 4) , (ram, 0x4c77d4, 4)]
[(ram, 0x4c77d0, 4) MULTIEQUAL (ram, 0x4c77d0, 4) , (ram, 0x4c77d0, 4) , (ram, 0x4c77d0, 4)]
[(ram, 0x4c7788, 8) MULTIEQUAL (ram, 0x4c7788, 8) , (ram, 0x4c7788, 8) , (ram, 0x4c7788, 8)]
[(ram, 0x4c7780, 4) MULTIEQUAL (ram, 0x4c7780, 4) , (ram, 0x4c7780, 4) , (ram, 0x4c7780, 4)]
[(ram, 0x4c4fb8, 8) MULTIEQUAL (ram, 0x4c4fb8, 8) , (ram, 0x4c4fb8, 8) , (ram, 0x4c4fb8, 8)]
[(ram, 0x4c4f18, 8) MULTIEQUAL (ram, 0x4c4f18, 8) , (ram, 0x4c4f18, 8) , (ram, 0x4c4f18, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x100010f0, 4) COPY (register, 0x0, 4), (register, 0x0, 4) INT_ADD (ram, 0x4c7784, 4) , (const, 0xffffffff, 4), (ram, 0x4c7784, 4) MULTIEQUAL (ram, 0x4c7784, 4) , (ram, 0x4c7784, 4) , (ram, 0x4c7784, 4)]
[ ---  BRANCH (ram, 0x4051b8, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffec0, 8) MULTIEQUAL (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8)]
[(stack, 0xfffffffffffffeb8, 8) MULTIEQUAL (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(stack, 0xfffffffffffffea8, 8) MULTIEQUAL (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8)]
[(stack, 0xfffffffffffffea4, 4) MULTIEQUAL (stack, 0xfffffffffffffea4, 4) , (stack, 0xfffffffffffffea4, 4) , (stack, 0xfffffffffffffea4, 4) , (stack, 0xfffffffffffffea4, 4) , (stack, 0xfffffffffffffea4, 4) , (stack, 0xfffffffffffffea4, 4)]
[(stack, 0xfffffffffffffea0, 4) MULTIEQUAL (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4)]
[(stack, 0xfffffffffffffe98, 8) MULTIEQUAL (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8)]
[(stack, 0xfffffffffffffe90, 8) MULTIEQUAL (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8)]
[(stack, 0xfffffffffffffe88, 8) MULTIEQUAL (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8)]
[(stack, 0xfffffffffffffe80, 8) MULTIEQUAL (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8)]
[(stack, 0xfffffffffffffe78, 8) MULTIEQUAL (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8)]
[(stack, 0xfffffffffffffe70, 8) MULTIEQUAL (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8)]
[(stack, 0xfffffffffffffe6c, 4) MULTIEQUAL (stack, 0xfffffffffffffe6c, 4) , (stack, 0xfffffffffffffe6c, 4) , (stack, 0xfffffffffffffe6c, 4) , (stack, 0xfffffffffffffe6c, 4) , (stack, 0xfffffffffffffe6c, 4) , (stack, 0xfffffffffffffe6c, 4)]
[(stack, 0xfffffffffffffe60, 8) MULTIEQUAL (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x0, 4) COPY (unique, 0x100010fc, 4), (unique, 0x100010fc, 4) MULTIEQUAL (unique, 0x100010e4, 4) , (unique, 0x100010e8, 4) , (unique, 0x100010ec, 4) , (unique, 0x100010f0, 4) , (unique, 0x100010f4, 4) , (unique, 0x100010f8, 4)]
[(ram, 0x4c4f18, 8) INDIRECT (ram, 0x4c4f18, 8) , (const, 0x45c, 4), (ram, 0x4c4f18, 8) MULTIEQUAL (ram, 0x4c4f18, 8) , (ram, 0x4c4f18, 8) , (ram, 0x4c4f18, 8) , (ram, 0x4c4f18, 8) , (ram, 0x4c4f18, 8) , (ram, 0x4c4f18, 8)]
[(ram, 0x4c4fb8, 8) INDIRECT (ram, 0x4c4fb8, 8) , (const, 0x45c, 4), (ram, 0x4c4fb8, 8) MULTIEQUAL (ram, 0x4c4fb8, 8) , (ram, 0x4c4fb8, 8) , (ram, 0x4c4fb8, 8) , (ram, 0x4c4fb8, 8) , (ram, 0x4c4fb8, 8) , (ram, 0x4c4fb8, 8)]
[(ram, 0x4c7780, 4) INDIRECT (ram, 0x4c7780, 4) , (const, 0x45c, 4), (ram, 0x4c7780, 4) MULTIEQUAL (ram, 0x4c7780, 4) , (ram, 0x4c7780, 4) , (ram, 0x4c7780, 4) , (ram, 0x4c7780, 4) , (ram, 0x4c7780, 4) , (ram, 0x4c7780, 4)]
[(ram, 0x4c7788, 8) INDIRECT (ram, 0x4c7788, 8) , (const, 0x45c, 4), (ram, 0x4c7788, 8) MULTIEQUAL (ram, 0x4c7788, 8) , (ram, 0x4c7788, 8) , (ram, 0x4c7788, 8) , (ram, 0x4c7788, 8) , (ram, 0x4c7788, 8) , (ram, 0x4c7788, 8)]
[(ram, 0x4c77d0, 4) INDIRECT (ram, 0x4c77d0, 4) , (const, 0x45c, 4), (ram, 0x4c77d0, 4) MULTIEQUAL (ram, 0x4c77d0, 4) , (ram, 0x4c77d0, 4) , (ram, 0x4c77d0, 4) , (ram, 0x4c77d0, 4) , (ram, 0x4c77d0, 4) , (ram, 0x4c77d0, 4)]
[(ram, 0x4c77d4, 4) INDIRECT (ram, 0x4c77d4, 4) , (const, 0x45c, 4), (ram, 0x4c77d4, 4) MULTIEQUAL (ram, 0x4c77d4, 4) , (ram, 0x4c77d4, 4) , (ram, 0x4c77d4, 4) , (ram, 0x4c77d4, 4) , (ram, 0x4c77d4, 4) , (ram, 0x4c77d4, 4)]
[(ram, 0x4c77d8, 8) INDIRECT (ram, 0x4c77d8, 8) , (const, 0x45c, 4), (ram, 0x4c77d8, 8) MULTIEQUAL (ram, 0x4c77d8, 8) , (ram, 0x4c77d8, 8) , (ram, 0x4c77d8, 8) , (ram, 0x4c77d8, 8) , (ram, 0x4c77d8, 8) , (ram, 0x4c77d8, 8)]
[(ram, 0x4c77e0, 4) INDIRECT (ram, 0x4c77e0, 4) , (const, 0x45c, 4), (ram, 0x4c77e0, 4) MULTIEQUAL (ram, 0x4c77e0, 4) , (ram, 0x4c77e0, 4) , (ram, 0x4c77e0, 4) , (ram, 0x4c77e0, 4) , (ram, 0x4c77e0, 4) , (ram, 0x4c77e0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001b14, 8) , (const, 0x1, 4), (unique, 0x10001b14, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x1, 8) , (const, 0x8, 8), (register, 0x18, 8) MULTIEQUAL (register, 0x38, 8) , (register, 0x18, 8) , (register, 0x18, 8) , (register, 0x38, 8) , (register, 0x38, 8) , (register, 0x38, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffec0, 8) MULTIEQUAL (stack, 0xfffffffffffffec0, 8) , (stack, 0xfffffffffffffec0, 8)]
[(stack, 0xfffffffffffffeb8, 8) MULTIEQUAL (stack, 0xfffffffffffffeb8, 8) , (stack, 0xfffffffffffffeb8, 8)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(stack, 0xfffffffffffffea8, 8) MULTIEQUAL (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8)]
[(stack, 0xfffffffffffffea4, 4) MULTIEQUAL (stack, 0xfffffffffffffea4, 4) , (stack, 0xfffffffffffffea4, 4)]
[(stack, 0xfffffffffffffea0, 4) MULTIEQUAL (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4)]
[(stack, 0xfffffffffffffe98, 8) MULTIEQUAL (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8)]
[(stack, 0xfffffffffffffe90, 8) MULTIEQUAL (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8)]
[(stack, 0xfffffffffffffe88, 8) MULTIEQUAL (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8)]
[(stack, 0xfffffffffffffe80, 8) MULTIEQUAL (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8)]
[(stack, 0xfffffffffffffe78, 8) MULTIEQUAL (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8)]
[(stack, 0xfffffffffffffe70, 8) MULTIEQUAL (stack, 0xfffffffffffffe70, 8) , (stack, 0xfffffffffffffe70, 8)]
[(stack, 0xfffffffffffffe6c, 4) MULTIEQUAL (stack, 0xfffffffffffffe6c, 4) , (stack, 0xfffffffffffffe6c, 4)]
[(stack, 0xfffffffffffffe60, 8) MULTIEQUAL (stack, 0xfffffffffffffe60, 8) , (stack, 0xfffffffffffffe60, 8)]
[(ram, 0x4c77e0, 4) MULTIEQUAL (ram, 0x4c77e0, 4) , (ram, 0x4c77e0, 4)]
[(ram, 0x4c77d8, 8) MULTIEQUAL (ram, 0x4c77d8, 8) , (ram, 0x4c77d8, 8)]
[(ram, 0x4c77d4, 4) MULTIEQUAL (ram, 0x4c77d4, 4) , (ram, 0x4c77d4, 4)]
[(ram, 0x4c77d0, 4) MULTIEQUAL (ram, 0x4c77d0, 4) , (ram, 0x4c77d0, 4)]
[(ram, 0x4c7788, 8) MULTIEQUAL (ram, 0x4c7788, 8) , (ram, 0x4c7788, 8)]
[(ram, 0x4c7780, 4) MULTIEQUAL (ram, 0x4c7780, 4) , (ram, 0x4c7780, 4)]
[(ram, 0x4c4fb8, 8) MULTIEQUAL (ram, 0x4c4fb8, 8) , (ram, 0x4c4fb8, 8)]
[(ram, 0x4c4f18, 8) MULTIEQUAL (ram, 0x4c4f18, 8) , (ram, 0x4c4f18, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x4051e7, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) MULTIEQUAL (ram, 0x4c7784, 4) , (register, 0x0, 4)]
[(ram, 0x4c7788, 8) COPY (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x405240, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10001b1c, 8), (unique, 0x10001b1c, 8) INT_ADD (register, 0x110, 8) , (const, 0x18, 8)]
[(unique, 0x10001100, 4) COPY (register, 0x0, 4)]
[ ---  CBRANCH (ram, 0x4051e7, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (const, 0x1, 4) , (ram, 0x4c7780, 4)]
[ ---  CALLOTHER (const, 0x5, 4)]
[ ---  BRANCH (ram, 0x4051e7, 1)]
[(ram, 0x4c7780, 4) INT_ADD (ram, 0x4c7780, 4) , (const, 0xffffffff, 4)]
[(ram, 0x4c7788, 8) MULTIEQUAL (ram, 0x4c7788, 8) , (ram, 0x4c7788, 8) , (ram, 0x4c7788, 8) , (ram, 0x4c7788, 8)]
[(ram, 0x4c7780, 4) MULTIEQUAL (ram, 0x4c7780, 4) , (ram, 0x4c7780, 4) , (unique, 0x10001100, 4) , (unique, 0x10001100, 4)]
[ ---  CBRANCH (ram, 0x405f36, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffffc0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10001b24, 8), (unique, 0x10001b24, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8)]
[(stack, 0xfffffffffffffe50, 8) INDIRECT (stack, 0xfffffffffffffe50, 8) , (const, 0x4ac, 4), (stack, 0xfffffffffffffe50, 8) COPY (const, 0x405f3b, 8)]
[(stack, 0xfffffffffffffe60, 8) INDIRECT (stack, 0xfffffffffffffe60, 8) , (const, 0x4ac, 4)]
[(stack, 0xfffffffffffffe6c, 4) INDIRECT (stack, 0xfffffffffffffe6c, 4) , (const, 0x4ac, 4)]
[(stack, 0xfffffffffffffe70, 8) INDIRECT (stack, 0xfffffffffffffe70, 8) , (const, 0x4ac, 4)]
[(stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0x4ac, 4)]
[(stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x4ac, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x4ac, 4)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x4ac, 4)]
[(stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x4ac, 4)]
[(stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x4ac, 4)]
[(stack, 0xfffffffffffffea4, 4) INDIRECT (stack, 0xfffffffffffffea4, 4) , (const, 0x4ac, 4)]
[(stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x4ac, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x4ac, 4)]
[(stack, 0xfffffffffffffeb8, 8) INDIRECT (stack, 0xfffffffffffffeb8, 8) , (const, 0x4ac, 4)]
[(stack, 0xfffffffffffffec0, 8) INDIRECT (stack, 0xfffffffffffffec0, 8) , (const, 0x4ac, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x4ac, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x4ac, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x4ac, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x4ac, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x4ac, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x4ac, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x4ac, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x4ac, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x4ac, 4)]
[ ---  CALL (ram, 0x458dd0, 8)]
[(ram, 0x4c4f18, 8) COPY (ram, 0x4c4f18, 8), (ram, 0x4c4f18, 8) INDIRECT (ram, 0x4c4f18, 8) , (const, 0x4ac, 4)]
[(ram, 0x4c4fb8, 8) COPY (ram, 0x4c4fb8, 8), (ram, 0x4c4fb8, 8) INDIRECT (ram, 0x4c4fb8, 8) , (const, 0x4ac, 4)]
[(ram, 0x4c7780, 4) COPY (ram, 0x4c7780, 4), (ram, 0x4c7780, 4) INDIRECT (ram, 0x4c7780, 4) , (const, 0x4ac, 4)]
[(ram, 0x4c7784, 4) COPY (ram, 0x4c7784, 4), (ram, 0x4c7784, 4) INDIRECT (register, 0x0, 4) , (const, 0x4ac, 4)]
[(ram, 0x4c7788, 8) COPY (ram, 0x4c7788, 8), (ram, 0x4c7788, 8) INDIRECT (ram, 0x4c7788, 8) , (const, 0x4ac, 4)]
[(ram, 0x4c77d0, 4) COPY (ram, 0x4c77d0, 4), (ram, 0x4c77d0, 4) INDIRECT (ram, 0x4c77d0, 4) , (const, 0x4ac, 4)]
[(ram, 0x4c77d4, 4) COPY (ram, 0x4c77d4, 4), (ram, 0x4c77d4, 4) INDIRECT (ram, 0x4c77d4, 4) , (const, 0x4ac, 4)]
[(ram, 0x4c77d8, 8) COPY (ram, 0x4c77d8, 8), (ram, 0x4c77d8, 8) INDIRECT (ram, 0x4c77d8, 8) , (const, 0x4ac, 4)]
[(ram, 0x4c77e0, 4) COPY (ram, 0x4c77e0, 4), (ram, 0x4c77e0, 4) INDIRECT (ram, 0x4c77e0, 4) , (const, 0x4ac, 4)]
[ ---  RETURN (const, 0x1, 4)]
[(ram, 0x4c4f18, 8) COPY (ram, 0x4c4f18, 8)]
[(ram, 0x4c4fb8, 8) COPY (ram, 0x4c4fb8, 8)]
[(ram, 0x4c7780, 4) COPY (ram, 0x4c7780, 4)]
[(ram, 0x4c7784, 4) COPY (register, 0x0, 4)]
[(ram, 0x4c7788, 8) COPY (ram, 0x4c7788, 8)]
[(ram, 0x4c77d0, 4) COPY (ram, 0x4c77d0, 4)]
[(ram, 0x4c77d4, 4) COPY (ram, 0x4c77d4, 4)]
[(ram, 0x4c77d8, 8) COPY (ram, 0x4c77d8, 8)]
[(ram, 0x4c77e0, 4) COPY (ram, 0x4c77e0, 4)]
[ ---  RETURN (const, 0x0, 8)]
