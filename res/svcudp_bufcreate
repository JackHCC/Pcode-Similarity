[(register, 0x20a, 1) COPY (const, 0x0, 1)]
[(unique, 0x100001fa, 1) COPY (const, 0x0, 1)]
[(stack, 0xffffffffffffffb0, 4) COPY (const, 0x10, 4)]
[ ---  CBRANCH (ram, 0x2396b0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x38, 4) , (const, 0xffffffff, 4)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x1dc, 4)]
[(stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0x1dc, 4)]
[ ---  CBRANCH (ram, 0x239729, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x207ce0, 8) , (const, 0x2, 4) , (const, 0x2, 4) , (const, 0x11, 4)]
[(stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0x1fe, 4), (stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0x1fa, 4)]
[ ---  CALL (ram, 0x16a940, 8) , (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10000324, 8), (unique, 0x10000324, 8) CALL (ram, 0x12e620, 8) , (unique, 0x1000021c, 8) , (unique, 0x1000024c, 8) , (const, 0x5, 8), (unique, 0x1000024c, 8) COPY (const, 0x292b00, 8), (unique, 0x1000021c, 8) PTRSUB (const, 0x0, 8) , (const, 0x28c400, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) COPY (const, 0x0, 8)]
[(unique, 0x100001f9, 1) COPY (const, 0x1, 1)]
[ ---  BRANCH (ram, 0x23950a, 1)]
[(unique, 0x100001f7, 1) MULTIEQUAL (unique, 0x100001fa, 1) , (unique, 0x100001f9, 1)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x49, 4), (register, 0x20a, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1)]
[(stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0x49, 4), (stack, 0xffffffffffffffb0, 4) MULTIEQUAL (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x49, 4), (stack, 0xffffffffffffffb8, 8) COPY (const, 0x2, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x49, 4), (stack, 0xffffffffffffffc0, 8) COPY (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x239690, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x22b270, 8) , (register, 0x28, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) CAST (unique, 0x1000032c, 8), (unique, 0x1000032c, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffb8, 8), (register, 0x28, 4) MULTIEQUAL (register, 0x38, 4) , (register, 0x0, 4)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x1d5, 4)]
[(stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0x1d5, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x1d5, 4), (stack, 0xffffffffffffffb8, 8) INT_AND (stack, 0xffffffffffffffb8, 8) , (const, 0xffffffff0000ffff, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1d5, 4)]
[ ---  CALL (ram, 0x207830, 8) , (register, 0x28, 4) , (unique, 0x10000334, 8) , (stack, 0xffffffffffffffb0, 4), (unique, 0x10000334, 8) CAST (unique, 0x3800, 8)]
[ ---  BRANCH (ram, 0x23953d, 1)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x5c, 4), (register, 0x20a, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1)]
[(stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0x5c, 4), (stack, 0xffffffffffffffb0, 4) MULTIEQUAL (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x5c, 4), (stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x5c, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CBRANCH (ram, 0x239660, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x2078f0, 8) , (register, 0x28, 4) , (unique, 0x1000033c, 8) , (unique, 0x3800, 8), (unique, 0x1000033c, 8) CAST (unique, 0x3800, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffb0, 8)]
[(register, 0x18, 8) COPY (const, 0x0, 8)]
[(stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0x1ae, 4), (stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0x1aa, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x1ae, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x1aa, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1ae, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1aa, 4)]
[ ---  CALL (ram, 0x16a940, 8) , (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10000344, 8), (unique, 0x10000344, 8) CALL (ram, 0x12e620, 8) , (unique, 0x1000020c, 8) , (unique, 0x10000254, 8) , (const, 0x5, 8), (unique, 0x10000254, 8) COPY (const, 0x292b28, 8), (unique, 0x1000020c, 8) PTRSUB (const, 0x0, 8) , (const, 0x28c400, 8)]
[ ---  CBRANCH (ram, 0x23964e, 1) , (unique, 0x100001f7, 1)]
[(stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0x1bd, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x1bd, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1bd, 4)]
[ ---  CALL (ram, 0x1f7030, 8) , (register, 0x28, 4)]
[ ---  BRANCH (ram, 0x23964e, 1)]
[(register, 0x0, 8) CAST (unique, 0x1000034c, 8), (unique, 0x1000034c, 8) CALL (ram, 0x11f8a0, 8) , (const, 0x150, 8)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x72, 4), (register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x6d, 4)]
[(stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0x72, 4), (stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0x6d, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x72, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x6d, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x72, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x6d, 4)]
[(register, 0x0, 8) CAST (unique, 0x10000354, 8), (unique, 0x10000354, 8) CALL (ram, 0x11f8a0, 8) , (const, 0x1d8, 8)]
[ ---  CBRANCH (ram, 0x239578, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (register, 0x10, 4) , (register, 0x30, 4)]
[(unique, 0x1000031c, 4) COPY (register, 0x30, 4)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x99, 4)]
[(stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0x99, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x99, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x99, 4)]
[(register, 0x0, 8) CAST (unique, 0x1000035c, 8), (unique, 0x1000035c, 8) CALL (ram, 0x11f8a0, 8) , (register, 0x38, 8), (register, 0x38, 8) INT_ZEXT (register, 0xa0, 4), (register, 0xa0, 4) INT_AND (register, 0xa0, 4) , (const, 0xfffffffc, 4), (register, 0xa0, 4) INT_ADD (register, 0xa0, 4) , (const, 0x3, 4), (register, 0xa0, 4) MULTIEQUAL (register, 0x10, 4) , (unique, 0x1000031c, 4)]
[ ---  CBRANCH (ram, 0x2396d8, 1) , (unique, 0x1000012b, 1), (unique, 0x1000012b, 1) BOOL_OR (register, 0x206, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x2396d8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8)]
[ ---  CALL (ram, 0x16cfd0, 8) , (const, 0x0, 8) , (unique, 0x1000022c, 8) , (unique, 0x10000244, 8) , (register, 0x0, 8), (unique, 0x10000244, 8) COPY (const, 0x28f567, 8), (unique, 0x1000022c, 8) COPY (const, 0x28eb09, 8), (register, 0x0, 8) CALL (ram, 0x12e620, 8) , (unique, 0x10000214, 8) , (unique, 0x1000023c, 8) , (const, 0x5, 8), (unique, 0x1000023c, 8) COPY (const, 0x28f404, 8), (unique, 0x10000214, 8) PTRSUB (const, 0x0, 8) , (const, 0x28c400, 8)]
[(register, 0x18, 8) COPY (const, 0x0, 8)]
[ ---  CALL (ram, 0x11f8a8, 8) , (register, 0x0, 8)]
[ ---  CALL (ram, 0x11f8a8, 8) , (register, 0x0, 8)]
[(stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0x199, 4), (stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0x195, 4), (stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0x191, 4), (stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0x183, 4), (stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0x169, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x199, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x195, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x191, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x183, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x169, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x199, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x195, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x191, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x183, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x169, 4)]
[ ---  CALL (ram, 0x11f8a8, 8) , (register, 0x0, 8)]
[ ---  BRANCH (ram, 0x23964e, 1)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x0, 8) , (register, 0xa0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000036c, 8) , (register, 0x0, 8), (unique, 0x1000036c, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (unique, 0x10000284, 8) , (const, 0x10, 8), (unique, 0x10000284, 8) PTRSUB (register, 0x0, 8) , (const, 0x30, 8)]
[ ---  CALL (ram, 0x23b780, 8) , (unique, 0x3100, 8) , (register, 0x0, 8) , (register, 0xa0, 4) , (const, 0x1, 4), (unique, 0x3100, 8) CAST (unique, 0x10000364, 8), (unique, 0x10000364, 8) PTRADD (register, 0x0, 8) , (const, 0x4, 8) , (const, 0x4, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000374, 8) , (const, 0x0, 8), (unique, 0x10000374, 8) CAST (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (register, 0x0, 8) , (const, 0x74, 8) , (const, 0x4, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0x1000037c, 8), (unique, 0x1000037c, 8) CAST (register, 0x0, 8), (unique, 0x3100, 8) PTRSUB (register, 0x0, 8) , (const, 0x48, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0x10000384, 8), (unique, 0x10000384, 8) CAST (unique, 0x1000025c, 8), (unique, 0x1000025c, 8) PTRSUB (const, 0x0, 8) , (const, 0x4c17e0, 8), (unique, 0x3100, 8) PTRSUB (register, 0x0, 8) , (const, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000038c, 8) , (register, 0xb0, 8), (unique, 0x1000038c, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0x0, 8) , (const, 0x30, 8), (register, 0xb0, 8) PTRADD (register, 0x0, 8) , (const, 0x10, 8) , (const, 0x4, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100002c4, 8) , (register, 0x28, 4), (unique, 0x100002c4, 8) PTRSUB (register, 0x0, 8) , (const, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (register, 0x0, 2), (unique, 0x3100, 8) PTRSUB (register, 0x0, 8) , (const, 0x4, 8), (register, 0x0, 2) INT_OR (unique, 0x4e880, 2) , (unique, 0x4e980, 2), (unique, 0x4e980, 2) INT_LEFT (stack, 0xffffffffffffffba, 2) , (const, 0x8, 4), (unique, 0x4e880, 2) INT_RIGHT (stack, 0xffffffffffffffba, 2) , (const, 0x8, 4), (stack, 0xffffffffffffffba, 2) SUBPIECE (stack, 0xffffffffffffffb8, 8) , (const, 0x2, 8), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0xd1, 4)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x11b, 4), (register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0xd1, 4)]
[(stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0x11b, 4), (stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0xd1, 4)]
[(stack, 0xffffffffffffffb4, 4) INDIRECT (stack, 0xffffffffffffffb4, 4) , (const, 0x11b, 4), (stack, 0xffffffffffffffb4, 4) COPY (const, 0x1, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x11b, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0xd1, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x11b, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xd1, 4)]
[(unique, 0x3100, 8) PTRSUB (register, 0x0, 8) , (const, 0x50, 8)]
[ ---  CBRANCH (ram, 0x239624, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x207c80, 8) , (register, 0x28, 4) , (const, 0x0, 4) , (const, 0x8, 4) , (unique, 0x3800, 8) , (const, 0x4, 4), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffb4, 8)]
[(register, 0x0, 4) COPY (const, 0xff, 4)]
[(register, 0x0, 8) CAST (unique, 0x10000394, 8), (unique, 0x10000394, 8) INT_MULT (register, 0xa8, 8) , (const, 0x101010101010101, 8), (register, 0xa8, 8) INT_ZEXT (register, 0xa8, 1), (register, 0xa8, 1) SUBPIECE (unique, 0x1000014c, 4) , (const, 0x0, 4), (unique, 0x1000014c, 4) MULTIEQUAL (register, 0x0, 4) , (register, 0x0, 4)]
[(unique, 0x1000030c, 8) COPY (unique, 0x3100, 8)]
[(register, 0x8, 8) COPY (const, 0x20, 8)]
[(register, 0x38, 8) MULTIEQUAL (unique, 0x1000030c, 8) , (unique, 0x10000314, 8)]
[ ---  CBRANCH (ram, 0x239646, 1) , (unique, 0xd300, 1), (unique, 0xd300, 1) INT_NOTEQUAL (register, 0x8, 8) , (const, 0x0, 8), (register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x38, 8) , (register, 0x0, 8)]
[(unique, 0x10000314, 8) COPY (register, 0x38, 8), (register, 0x38, 8) PTRADD (register, 0x38, 8) , (unique, 0x100002ec, 8) , (const, 0x8, 8), (unique, 0x100002ec, 8) INT_ADD (unique, 0x100002e4, 8) , (const, 0x1, 8), (unique, 0x100002e4, 8) INT_MULT (unique, 0xb880, 8) , (const, 0xfffffffffffffffe, 8), (unique, 0xb880, 8) INT_ZEXT (register, 0x20a, 1)]
[(register, 0x8, 8) INT_ADD (register, 0x8, 8) , (const, 0xffffffffffffffff, 8)]
[ ---  BRANCH (ram, 0x239643, 1)]
[(stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0x14a, 4)]
[(stack, 0xffffffffffffffb4, 4) INDIRECT (unique, 0x10000320, 4) , (const, 0x14a, 4), (unique, 0x10000320, 4) COPY (unique, 0x1000014c, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x14a, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x14a, 4)]
[ ---  CALL (ram, 0x237bc0, 8) , (register, 0x0, 8)]
[(unique, 0x10000304, 8) COPY (register, 0x0, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) COPY (register, 0x18, 8), (register, 0x18, 8) MULTIEQUAL (unique, 0x10000304, 8) , (register, 0x18, 8) , (register, 0x18, 8) , (register, 0x18, 8)]
