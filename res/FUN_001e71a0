[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffcb8, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffcb8, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffcb8, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffcb8, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffcb8, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffcb8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x39, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x39, 4)]
[(stack, 0xfffffffffffffcc0, 8) INDIRECT (stack, 0xfffffffffffffcc0, 8) , (const, 0x39, 4)]
[(stack, 0xfffffffffffffcc8, 8) INDIRECT (stack, 0xfffffffffffffcc8, 8) , (const, 0x39, 4)]
[(stack, 0xfffffffffffffcd0, 8) INDIRECT (stack, 0xfffffffffffffcd0, 8) , (const, 0x39, 4)]
[(stack, 0xfffffffffffffcd8, 8) INDIRECT (stack, 0xfffffffffffffcd8, 8) , (const, 0x39, 4)]
[(stack, 0xfffffffffffffce0, 8) INDIRECT (stack, 0xfffffffffffffce0, 8) , (const, 0x39, 4)]
[(stack, 0xfffffffffffffcf0, 4) INDIRECT (stack, 0xfffffffffffffcf0, 4) , (const, 0x39, 4)]
[(stack, 0xfffffffffffffcf4, 4) INDIRECT (stack, 0xfffffffffffffcf4, 4) , (const, 0x39, 4)]
[(stack, 0xfffffffffffffcfc, 4) INDIRECT (stack, 0xfffffffffffffcfc, 4) , (const, 0x39, 4)]
[(stack, 0xfffffffffffffd00, 8) INDIRECT (stack, 0xfffffffffffffd00, 8) , (const, 0x39, 4)]
[(stack, 0xfffffffffffffd08, 8) INDIRECT (stack, 0xfffffffffffffd08, 8) , (const, 0x39, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x39, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x100009fd, 8), (unique, 0x100009fd, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8)]
[(register, 0x0, 8) CALL (ram, 0x121100, 8) , (register, 0x30, 8)]
[(stack, 0xfffffffffffffda8, 8) COPY (const, 0x0, 8)]
[(stack, 0xfffffffffffffce8, 8) COPY (unique, 0x3200, 8), (unique, 0x3200, 8) INT_ADD (register, 0x88, 8) , (const, 0x210, 8)]
[(stack, 0xfffffffffffffdb0, 8) COPY (const, 0x40, 8)]
[(register, 0x8, 4) INT_AND (stack, 0xfffffffffffffcf8, 4) , (const, 0x40, 4), (stack, 0xfffffffffffffcf8, 4) INDIRECT (unique, 0x10000985, 4) , (const, 0x39, 4), (unique, 0x10000985, 4) COPY (register, 0x10, 4)]
[ ---  CBRANCH (ram, 0x1e74f0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x10000a05, 8), (unique, 0x10000a05, 8) CAST (stack, 0xfffffffffffffd10, 8), (stack, 0xfffffffffffffd10, 8) INDIRECT (unique, 0x10000991, 8) , (const, 0x39, 4), (unique, 0x10000991, 8) COPY (register, 0x38, 8)]
[(unique, 0x100008f1, 8) COPY (stack, 0xfffffffffffffd10, 8)]
[ ---  CBRANCH (ram, 0x1e74bd, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x8, 4) , (const, 0x0, 4)]
[(register, 0x30, 8) MULTIEQUAL (unique, 0x100008f1, 8) , (register, 0x30, 8)]
[(register, 0x8, 4) MULTIEQUAL (register, 0x8, 4) , (register, 0x8, 4)]
[ ---  CBRANCH (ram, 0x1e7958, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 1) , (const, 0x5b, 1), (register, 0x0, 1) MULTIEQUAL (unique, 0xbb00, 1) , (register, 0x0, 1)]
[(unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000a15, 8), (unique, 0x10000a15, 8) INT_ADD (unique, 0x10000a0d, 8) , (const, 0x1, 8), (unique, 0x10000a0d, 8) CAST (register, 0x30, 8)]
[(register, 0x8, 4) INT_OR (register, 0x8, 4) , (const, 0x4, 4)]
[(register, 0x30, 8) CAST (unique, 0x10000a25, 8), (unique, 0x10000a25, 8) INT_ADD (unique, 0x10000a1d, 8) , (const, 0x1, 8), (unique, 0x10000a1d, 8) CAST (register, 0x30, 8)]
[ ---  BRANCH (ram, 0x1e74b5, 1)]
[ ---  CBRANCH (ram, 0x1e7940, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (register, 0x0, 1) , (const, 0x5c, 1)]
[ ---  CBRANCH (ram, 0x1e7262, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 1) , (const, 0x2a, 1)]
[ ---  CBRANCH (ram, 0x1e7262, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 1) , (const, 0x3f, 1)]
[ ---  CBRANCH (ram, 0x1e74a0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 1) , (const, 0x5c, 1)]
[ ---  CBRANCH (ram, 0x1e7262, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000a35, 8), (unique, 0x10000a35, 8) INT_ADD (unique, 0x10000a2d, 8) , (const, 0x1, 8), (unique, 0x10000a2d, 8) CAST (register, 0x30, 8)]
[(unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000a45, 8), (unique, 0x10000a45, 8) INT_ADD (unique, 0x10000a3d, 8) , (const, 0x2, 8), (unique, 0x10000a3d, 8) CAST (register, 0x30, 8)]
[(register, 0x8, 4) INT_OR (register, 0x8, 4) , (const, 0x2, 4)]
[(register, 0x30, 8) CAST (unique, 0x10000a55, 8), (unique, 0x10000a55, 8) INT_ADD (unique, 0x10000a4d, 8) , (const, 0x2, 8), (unique, 0x10000a4d, 8) CAST (register, 0x30, 8)]
[ ---  BRANCH (ram, 0x1e74b5, 1)]
[ ---  CBRANCH (ram, 0x1e74ad, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 1) , (const, 0x5d, 1)]
[ ---  CBRANCH (ram, 0x1e7262, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x10000251, 4) , (const, 0x0, 4), (unique, 0x10000251, 4) INT_AND (register, 0x8, 4) , (const, 0x4, 4)]
[(unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000a65, 8), (unique, 0x10000a65, 8) INT_ADD (unique, 0x10000a5d, 8) , (const, 0x1, 8), (unique, 0x10000a5d, 8) CAST (register, 0x30, 8)]
[(register, 0x30, 8) CAST (unique, 0x10000a75, 8), (unique, 0x10000a75, 8) INT_ADD (unique, 0x10000a6d, 8) , (const, 0x1, 8), (unique, 0x10000a6d, 8) CAST (register, 0x30, 8)]
[(register, 0x30, 8) MULTIEQUAL (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8)]
[(register, 0x8, 4) MULTIEQUAL (register, 0x8, 4) , (register, 0x8, 4) , (register, 0x8, 4)]
[ ---  CBRANCH (ram, 0x1e725a, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 1) , (const, 0x0, 1), (register, 0x0, 1) MULTIEQUAL (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1)]
[(register, 0x8, 4) COPY (const, 0x0, 4)]
[(unique, 0x100009c9, 8) COPY (stack, 0xfffffffffffffd10, 8)]
[(register, 0x8, 4) MULTIEQUAL (register, 0x8, 4) , (register, 0x8, 4)]
[(register, 0x30, 8) CAST (unique, 0x10000a85, 8), (unique, 0x10000a85, 8) INT_ADD (unique, 0x10000a7d, 8) , (const, 0x1, 8), (unique, 0x10000a7d, 8) CAST (unique, 0x1000043a, 8), (unique, 0x1000043a, 8) MULTIEQUAL (unique, 0x100009c9, 8) , (register, 0x30, 8)]
[ ---  CBRANCH (ram, 0x1e7970, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 1) , (const, 0x5b, 1), (register, 0x0, 1) MULTIEQUAL (unique, 0xbb00, 1) , (register, 0x0, 1)]
[(register, 0x8, 4) COPY (const, 0x4, 4)]
[(unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x10000a8d, 8), (unique, 0x10000a8d, 8) CAST (register, 0x30, 8)]
[ ---  BRANCH (ram, 0x1e7252, 1)]
[ ---  CBRANCH (ram, 0x1e78b0, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (register, 0x0, 1) , (const, 0x5c, 1)]
[ ---  CBRANCH (ram, 0x1e7262, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 1) , (const, 0x2a, 1)]
[ ---  CBRANCH (ram, 0x1e7262, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 1) , (const, 0x3f, 1)]
[ ---  CBRANCH (ram, 0x1e724f, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 1) , (const, 0x5c, 1)]
[ ---  CBRANCH (ram, 0x1e724f, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 1) , (const, 0x5d, 1)]
[ ---  CBRANCH (ram, 0x1e7262, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x8, 4) , (const, 0x0, 4)]
[(unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x10000a95, 8), (unique, 0x10000a95, 8) CAST (register, 0x30, 8)]
[(register, 0x8, 4) MULTIEQUAL (register, 0x8, 4) , (register, 0x8, 4)]
[ ---  CBRANCH (ram, 0x1e7234, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 1) , (const, 0x0, 1), (register, 0x0, 1) MULTIEQUAL (unique, 0xbb00, 1) , (unique, 0xbb00, 1)]
[ ---  CBRANCH (ram, 0x1e74f0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x8, 4) , (const, 0x0, 4), (register, 0x8, 4) MULTIEQUAL (register, 0x8, 4) , (register, 0x8, 4)]
[(stack, 0xfffffffffffffd08, 8) INT_OR (unique, 0x1000047c, 8) , (unique, 0x1000055b, 8), (unique, 0x1000055b, 8) INT_AND (unique, 0x10000484, 8) , (const, 0xffffffff00000810, 8), (unique, 0x10000484, 8) INT_ZEXT (stack, 0xfffffffffffffcf8, 4), (unique, 0x1000047c, 8) INT_AND (stack, 0xfffffffffffffd08, 8) , (const, 0xffffffff00000000, 8)]
[ ---  CBRANCH (ram, 0x1e7580, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x30, 4) , (const, 0x0, 4), (register, 0x30, 4) INT_AND (stack, 0xfffffffffffffcf8, 4) , (const, 0x810, 4)]
[(unique, 0x100008c9, 8) COPY (register, 0x20, 8)]
[(unique, 0x10000959, 4) COPY (register, 0x0, 4), (register, 0x0, 4) INT_OR (stack, 0xfffffffffffffcf8, 4) , (const, 0x10, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x79f, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x79f, 4)]
[(stack, 0xfffffffffffffcc0, 8) INDIRECT (stack, 0xfffffffffffffcc0, 8) , (const, 0x79f, 4)]
[(stack, 0xfffffffffffffcc8, 8) INDIRECT (stack, 0xfffffffffffffcc8, 8) , (const, 0x79f, 4)]
[(stack, 0xfffffffffffffcd0, 8) INDIRECT (stack, 0xfffffffffffffcd0, 8) , (const, 0x79f, 4)]
[(stack, 0xfffffffffffffcd8, 8) INDIRECT (stack, 0xfffffffffffffcd8, 8) , (const, 0x79f, 4)]
[(stack, 0xfffffffffffffce0, 8) INDIRECT (stack, 0xfffffffffffffce0, 8) , (const, 0x79f, 4)]
[(stack, 0xfffffffffffffcf0, 4) INDIRECT (stack, 0xfffffffffffffcf0, 4) , (const, 0x79f, 4)]
[(stack, 0xfffffffffffffcf4, 4) INDIRECT (stack, 0xfffffffffffffcf4, 4) , (const, 0x79f, 4)]
[(stack, 0xfffffffffffffcf8, 4) INDIRECT (stack, 0xfffffffffffffcf8, 4) , (const, 0x79f, 4)]
[(stack, 0xfffffffffffffcfc, 4) INDIRECT (stack, 0xfffffffffffffcfc, 4) , (const, 0x79f, 4)]
[(stack, 0xfffffffffffffd00, 8) INDIRECT (stack, 0xfffffffffffffd00, 8) , (const, 0x79f, 4)]
[(stack, 0xfffffffffffffd08, 8) INDIRECT (stack, 0xfffffffffffffd08, 8) , (const, 0x79f, 4)]
[(stack, 0xfffffffffffffd10, 8) INDIRECT (stack, 0xfffffffffffffd10, 8) , (const, 0x79f, 4)]
[(stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x79f, 4)]
[(stack, 0xfffffffffffffdb0, 8) INDIRECT (stack, 0xfffffffffffffdb0, 8) , (const, 0x79f, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x79f, 4)]
[(unique, 0x3100, 8) INT_ADD (register, 0x0, 8) , (const, 0x1, 8), (register, 0x0, 8) CALL (ram, 0x121100, 8) , (unique, 0x10000a9d, 8), (unique, 0x10000a9d, 8) CAST (stack, 0xfffffffffffffd10, 8)]
[(register, 0x88, 8) INT_ADD (stack, 0xfffffffffffffce8, 8) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) INT_ADD (unique, 0x3880, 8) , (register, 0x0, 8), (unique, 0x3880, 8) INT_ADD (register, 0x0, 8) , (const, 0x2, 8), (register, 0x0, 8) CALL (ram, 0x121100, 8) , (unique, 0x10000a9d, 8), (stack, 0xfffffffffffffce8, 8) INDIRECT (stack, 0xfffffffffffffce8, 8) , (const, 0x79f, 4), (unique, 0x10000a9d, 8) CAST (stack, 0xfffffffffffffd10, 8)]
[ ---  CBRANCH (ram, 0x1e797b, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_CARRY (stack, 0xfffffffffffffce8, 8) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) INT_ADD (unique, 0x3880, 8) , (register, 0x0, 8), (unique, 0x3880, 8) INT_ADD (register, 0x0, 8) , (const, 0x2, 8), (register, 0x0, 8) CALL (ram, 0x121100, 8) , (unique, 0x10000a9d, 8), (stack, 0xfffffffffffffce8, 8) INDIRECT (stack, 0xfffffffffffffce8, 8) , (const, 0x79f, 4), (unique, 0x10000a9d, 8) CAST (stack, 0xfffffffffffffd10, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x7b9, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x7b9, 4)]
[(stack, 0xfffffffffffffcc0, 8) INDIRECT (stack, 0xfffffffffffffcc0, 8) , (const, 0x7b9, 4)]
[(stack, 0xfffffffffffffcc8, 8) INDIRECT (stack, 0xfffffffffffffcc8, 8) , (const, 0x7b9, 4)]
[(stack, 0xfffffffffffffcd0, 8) INDIRECT (stack, 0xfffffffffffffcd0, 8) , (const, 0x7b9, 4)]
[(stack, 0xfffffffffffffcd8, 8) INDIRECT (stack, 0xfffffffffffffcd8, 8) , (const, 0x7b9, 4)]
[(stack, 0xfffffffffffffce0, 8) INDIRECT (stack, 0xfffffffffffffce0, 8) , (const, 0x7b9, 4)]
[(stack, 0xfffffffffffffce8, 8) INDIRECT (stack, 0xfffffffffffffce8, 8) , (const, 0x7b9, 4)]
[(stack, 0xfffffffffffffcf0, 4) INDIRECT (stack, 0xfffffffffffffcf0, 4) , (const, 0x7b9, 4)]
[(stack, 0xfffffffffffffcf4, 4) INDIRECT (stack, 0xfffffffffffffcf4, 4) , (const, 0x7b9, 4)]
[(stack, 0xfffffffffffffcf8, 4) INDIRECT (stack, 0xfffffffffffffcf8, 4) , (const, 0x7b9, 4)]
[(stack, 0xfffffffffffffcfc, 4) INDIRECT (stack, 0xfffffffffffffcfc, 4) , (const, 0x7b9, 4)]
[(stack, 0xfffffffffffffd08, 8) INDIRECT (stack, 0xfffffffffffffd08, 8) , (const, 0x7b9, 4)]
[(stack, 0xfffffffffffffd10, 8) INDIRECT (stack, 0xfffffffffffffd10, 8) , (const, 0x7b9, 4)]
[(stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x7b9, 4)]
[(stack, 0xfffffffffffffdb0, 8) INDIRECT (stack, 0xfffffffffffffdb0, 8) , (const, 0x7b9, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x7b9, 4)]
[(register, 0x0, 4) CALL (ram, 0x2300b0, 8) , (register, 0x88, 8)]
[ ---  CBRANCH (ram, 0x1e75cc, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (const, 0x1000, 8) , (stack, 0xfffffffffffffd00, 8), (stack, 0xfffffffffffffd00, 8) INDIRECT (unique, 0x10000989, 8) , (const, 0x7b9, 4), (unique, 0x10000989, 8) COPY (register, 0x88, 8)]
[ ---  CBRANCH (ram, 0x1e797b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x8d3, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x8d3, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(stack, 0xfffffffffffffcc0, 8) INDIRECT (stack, 0xfffffffffffffcc0, 8) , (const, 0x8d3, 4), (stack, 0xfffffffffffffcc0, 8) MULTIEQUAL (stack, 0xfffffffffffffcc0, 8) , (stack, 0xfffffffffffffcc0, 8)]
[(stack, 0xfffffffffffffcc8, 8) INDIRECT (stack, 0xfffffffffffffcc8, 8) , (const, 0x8d3, 4), (stack, 0xfffffffffffffcc8, 8) MULTIEQUAL (stack, 0xfffffffffffffcc8, 8) , (stack, 0xfffffffffffffcc8, 8)]
[(stack, 0xfffffffffffffcd0, 8) INDIRECT (stack, 0xfffffffffffffcd0, 8) , (const, 0x8d3, 4), (stack, 0xfffffffffffffcd0, 8) MULTIEQUAL (stack, 0xfffffffffffffcd0, 8) , (stack, 0xfffffffffffffcd0, 8)]
[(stack, 0xfffffffffffffcd8, 8) INDIRECT (stack, 0xfffffffffffffcd8, 8) , (const, 0x8d3, 4), (stack, 0xfffffffffffffcd8, 8) MULTIEQUAL (stack, 0xfffffffffffffcd8, 8) , (stack, 0xfffffffffffffcd8, 8)]
[(stack, 0xfffffffffffffce0, 8) INDIRECT (stack, 0xfffffffffffffce0, 8) , (const, 0x8d3, 4), (stack, 0xfffffffffffffce0, 8) MULTIEQUAL (stack, 0xfffffffffffffce0, 8) , (stack, 0xfffffffffffffce0, 8)]
[(stack, 0xfffffffffffffce8, 8) INDIRECT (stack, 0xfffffffffffffce8, 8) , (const, 0x8d3, 4), (stack, 0xfffffffffffffce8, 8) MULTIEQUAL (stack, 0xfffffffffffffce8, 8) , (stack, 0xfffffffffffffce8, 8)]
[(stack, 0xfffffffffffffcf0, 4) INDIRECT (stack, 0xfffffffffffffcf0, 4) , (const, 0x8d3, 4), (stack, 0xfffffffffffffcf0, 4) MULTIEQUAL (stack, 0xfffffffffffffcf0, 4) , (stack, 0xfffffffffffffcf0, 4)]
[(stack, 0xfffffffffffffcf4, 4) INDIRECT (stack, 0xfffffffffffffcf4, 4) , (const, 0x8d3, 4), (stack, 0xfffffffffffffcf4, 4) MULTIEQUAL (stack, 0xfffffffffffffcf4, 4) , (stack, 0xfffffffffffffcf4, 4)]
[(stack, 0xfffffffffffffcf8, 4) INDIRECT (stack, 0xfffffffffffffcf8, 4) , (const, 0x8d3, 4), (stack, 0xfffffffffffffcf8, 4) MULTIEQUAL (stack, 0xfffffffffffffcf8, 4) , (stack, 0xfffffffffffffcf8, 4)]
[(stack, 0xfffffffffffffcfc, 4) INDIRECT (stack, 0xfffffffffffffcfc, 4) , (const, 0x8d3, 4), (stack, 0xfffffffffffffcfc, 4) MULTIEQUAL (stack, 0xfffffffffffffcfc, 4) , (stack, 0xfffffffffffffcfc, 4)]
[(stack, 0xfffffffffffffd00, 8) INDIRECT (stack, 0xfffffffffffffd00, 8) , (const, 0x8d3, 4), (stack, 0xfffffffffffffd00, 8) MULTIEQUAL (stack, 0xfffffffffffffd00, 8) , (stack, 0xfffffffffffffd00, 8)]
[(stack, 0xfffffffffffffd08, 8) INDIRECT (stack, 0xfffffffffffffd08, 8) , (const, 0x8d3, 4), (stack, 0xfffffffffffffd08, 8) MULTIEQUAL (stack, 0xfffffffffffffd08, 8) , (stack, 0xfffffffffffffd08, 8)]
[(stack, 0xfffffffffffffd10, 8) INDIRECT (stack, 0xfffffffffffffd10, 8) , (const, 0x8d3, 4), (stack, 0xfffffffffffffd10, 8) MULTIEQUAL (stack, 0xfffffffffffffd10, 8) , (stack, 0xfffffffffffffd10, 8)]
[(stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x8d3, 4), (stack, 0xfffffffffffffda8, 8) MULTIEQUAL (stack, 0xfffffffffffffda8, 8) , (stack, 0xfffffffffffffda8, 8)]
[(stack, 0xfffffffffffffdb0, 8) INDIRECT (stack, 0xfffffffffffffdb0, 8) , (const, 0x8d3, 4), (stack, 0xfffffffffffffdb0, 8) MULTIEQUAL (stack, 0xfffffffffffffdb0, 8) , (stack, 0xfffffffffffffdb0, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x8d3, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(unique, 0x100008d9, 8) COPY (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x1e75f0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10000aa5, 8), (unique, 0x10000aa5, 8) CALL (ram, 0x1212c0, 8) , (unique, 0x3a00, 8)]
[(register, 0xa0, 8) COPY (const, 0x1, 8)]
[ ---  BRANCH (ram, 0x1e7911, 1)]
[(unique, 0x3800, 8) CAST (unique, 0x10000ab5, 8), (unique, 0x10000ab5, 8) INT_ADD (unique, 0x10000aad, 8) , (unique, 0x1000029c, 8), (unique, 0x10000aad, 8) CAST (unique, 0x100007bf, 8), (unique, 0x100007bf, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffcc0, 8), (unique, 0x1000029c, 8) INT_2COMP (register, 0xa8, 8), (register, 0xa8, 8) INT_AND (register, 0xa8, 8) , (const, 0xfffffffffffffff0, 8), (register, 0xa8, 8) INT_ADD (unique, 0x3a00, 8) , (const, 0x1e, 8)]
[(stack, 0xfffffffffffffd08, 8) INT_ADD (unique, 0x100007d9, 8) , (const, 0x1, 4), (unique, 0x100007d9, 8) INT_LEFT (unique, 0x100007d1, 8) , (const, 0x20, 8), (unique, 0x100007d1, 8) INT_SEXT (unique, 0x10000abd, 4), (unique, 0x10000abd, 4) CAST (stack, 0xfffffffffffffd0c, 4), (stack, 0xfffffffffffffd0c, 4) SUBPIECE (stack, 0xfffffffffffffd08, 8) , (const, 0x4, 8)]
[(unique, 0x100008d1, 8) COPY (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x10000677, 8) , (unique, 0x1000029c, 8) , (const, 0x1, 8), (unique, 0x10000677, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffcb8, 8), (unique, 0x1000029c, 8) INT_2COMP (register, 0xa8, 8), (register, 0xa8, 8) INT_AND (register, 0xa8, 8) , (const, 0xfffffffffffffff0, 8), (register, 0xa8, 8) INT_ADD (unique, 0x3a00, 8) , (const, 0x1e, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000ac1, 8) , (const, 0x1e75fe, 8), (unique, 0x10000ac1, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8), (register, 0x20, 8) MULTIEQUAL (unique, 0x100008d1, 8) , (unique, 0x100008d9, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x0, 8) , (const, 0x2f, 1), (register, 0x0, 8) CAST (unique, 0x10000ac9, 8), (unique, 0x10000ac9, 8) CALL (ram, 0x121230, 8) , (register, 0xa8, 8) , (register, 0x30, 8) , (register, 0x0, 8), (register, 0xa8, 8) MULTIEQUAL (unique, 0x3800, 8) , (register, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000ad1, 8) , (const, 0x1e7614, 8), (unique, 0x10000ad1, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8), (register, 0x20, 8) MULTIEQUAL (unique, 0x100008d1, 8) , (unique, 0x100008d9, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x815, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x80a, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x815, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x811, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x80a, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(stack, 0xfffffffffffffcc8, 8) INDIRECT (stack, 0xfffffffffffffcc8, 8) , (const, 0x815, 4), (stack, 0xfffffffffffffcc8, 8) INDIRECT (stack, 0xfffffffffffffcc8, 8) , (const, 0x814, 4), (stack, 0xfffffffffffffcc8, 8) INDIRECT (stack, 0xfffffffffffffcc8, 8) , (const, 0x80a, 4), (stack, 0xfffffffffffffcc8, 8) INDIRECT (stack, 0xfffffffffffffcc8, 8) , (const, 0x809, 4), (stack, 0xfffffffffffffcc8, 8) MULTIEQUAL (stack, 0xfffffffffffffcc8, 8) , (stack, 0xfffffffffffffcc8, 8)]
[(stack, 0xfffffffffffffcd0, 8) INDIRECT (stack, 0xfffffffffffffcd0, 8) , (const, 0x815, 4), (stack, 0xfffffffffffffcd0, 8) INDIRECT (stack, 0xfffffffffffffcd0, 8) , (const, 0x814, 4), (stack, 0xfffffffffffffcd0, 8) INDIRECT (stack, 0xfffffffffffffcd0, 8) , (const, 0x80a, 4), (stack, 0xfffffffffffffcd0, 8) INDIRECT (stack, 0xfffffffffffffcd0, 8) , (const, 0x809, 4), (stack, 0xfffffffffffffcd0, 8) MULTIEQUAL (stack, 0xfffffffffffffcd0, 8) , (stack, 0xfffffffffffffcd0, 8)]
[(stack, 0xfffffffffffffcd8, 8) INDIRECT (stack, 0xfffffffffffffcd8, 8) , (const, 0x815, 4), (stack, 0xfffffffffffffcd8, 8) INDIRECT (stack, 0xfffffffffffffcd8, 8) , (const, 0x814, 4), (stack, 0xfffffffffffffcd8, 8) INDIRECT (stack, 0xfffffffffffffcd8, 8) , (const, 0x80a, 4), (stack, 0xfffffffffffffcd8, 8) INDIRECT (stack, 0xfffffffffffffcd8, 8) , (const, 0x809, 4), (stack, 0xfffffffffffffcd8, 8) MULTIEQUAL (stack, 0xfffffffffffffcd8, 8) , (stack, 0xfffffffffffffcd8, 8)]
[(stack, 0xfffffffffffffce8, 8) INDIRECT (stack, 0xfffffffffffffce8, 8) , (const, 0x815, 4), (stack, 0xfffffffffffffce8, 8) INDIRECT (stack, 0xfffffffffffffce8, 8) , (const, 0x814, 4), (stack, 0xfffffffffffffce8, 8) INDIRECT (stack, 0xfffffffffffffce8, 8) , (const, 0x80a, 4), (stack, 0xfffffffffffffce8, 8) INDIRECT (stack, 0xfffffffffffffce8, 8) , (const, 0x809, 4), (stack, 0xfffffffffffffce8, 8) MULTIEQUAL (stack, 0xfffffffffffffce8, 8) , (stack, 0xfffffffffffffce8, 8)]
[(stack, 0xfffffffffffffcf4, 4) INDIRECT (stack, 0xfffffffffffffcf4, 4) , (const, 0x815, 4), (stack, 0xfffffffffffffcf4, 4) INDIRECT (stack, 0xfffffffffffffcf4, 4) , (const, 0x814, 4), (stack, 0xfffffffffffffcf4, 4) INDIRECT (stack, 0xfffffffffffffcf4, 4) , (const, 0x80a, 4), (stack, 0xfffffffffffffcf4, 4) INDIRECT (stack, 0xfffffffffffffcf4, 4) , (const, 0x809, 4), (stack, 0xfffffffffffffcf4, 4) MULTIEQUAL (stack, 0xfffffffffffffcf4, 4) , (stack, 0xfffffffffffffcf4, 4)]
[(stack, 0xfffffffffffffcfc, 4) INDIRECT (stack, 0xfffffffffffffcfc, 4) , (const, 0x815, 4), (stack, 0xfffffffffffffcfc, 4) INDIRECT (stack, 0xfffffffffffffcfc, 4) , (const, 0x814, 4), (stack, 0xfffffffffffffcfc, 4) INDIRECT (stack, 0xfffffffffffffcfc, 4) , (const, 0x80a, 4), (stack, 0xfffffffffffffcfc, 4) INDIRECT (stack, 0xfffffffffffffcfc, 4) , (const, 0x809, 4), (stack, 0xfffffffffffffcfc, 4) MULTIEQUAL (stack, 0xfffffffffffffcfc, 4) , (stack, 0xfffffffffffffcfc, 4)]
[(stack, 0xfffffffffffffd00, 8) INDIRECT (stack, 0xfffffffffffffd00, 8) , (const, 0x815, 4), (stack, 0xfffffffffffffd00, 8) INDIRECT (stack, 0xfffffffffffffd00, 8) , (const, 0x814, 4), (stack, 0xfffffffffffffd00, 8) INDIRECT (stack, 0xfffffffffffffd00, 8) , (const, 0x80a, 4), (stack, 0xfffffffffffffd00, 8) INDIRECT (stack, 0xfffffffffffffd00, 8) , (const, 0x809, 4), (stack, 0xfffffffffffffd00, 8) MULTIEQUAL (stack, 0xfffffffffffffd00, 8) , (stack, 0xfffffffffffffd00, 8)]
[(stack, 0xfffffffffffffd08, 8) INDIRECT (stack, 0xfffffffffffffd08, 8) , (const, 0x815, 4), (stack, 0xfffffffffffffd08, 8) INDIRECT (stack, 0xfffffffffffffd08, 8) , (const, 0x814, 4), (stack, 0xfffffffffffffd08, 8) INDIRECT (stack, 0xfffffffffffffd08, 8) , (const, 0x80a, 4), (stack, 0xfffffffffffffd08, 8) INDIRECT (stack, 0xfffffffffffffd08, 8) , (const, 0x809, 4), (stack, 0xfffffffffffffd08, 8) MULTIEQUAL (stack, 0xfffffffffffffd08, 8) , (stack, 0xfffffffffffffd08, 8)]
[(stack, 0xfffffffffffffd10, 8) INDIRECT (stack, 0xfffffffffffffd10, 8) , (const, 0x815, 4), (stack, 0xfffffffffffffd10, 8) INDIRECT (stack, 0xfffffffffffffd10, 8) , (const, 0x814, 4), (stack, 0xfffffffffffffd10, 8) INDIRECT (stack, 0xfffffffffffffd10, 8) , (const, 0x80a, 4), (stack, 0xfffffffffffffd10, 8) INDIRECT (stack, 0xfffffffffffffd10, 8) , (const, 0x809, 4), (stack, 0xfffffffffffffd10, 8) MULTIEQUAL (stack, 0xfffffffffffffd10, 8) , (stack, 0xfffffffffffffd10, 8)]
[(stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x815, 4), (stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x814, 4), (stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x80a, 4), (stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x809, 4), (stack, 0xfffffffffffffda8, 8) MULTIEQUAL (stack, 0xfffffffffffffda8, 8) , (stack, 0xfffffffffffffda8, 8)]
[(stack, 0xfffffffffffffdb0, 8) INDIRECT (stack, 0xfffffffffffffdb0, 8) , (const, 0x815, 4), (stack, 0xfffffffffffffdb0, 8) INDIRECT (stack, 0xfffffffffffffdb0, 8) , (const, 0x814, 4), (stack, 0xfffffffffffffdb0, 8) INDIRECT (stack, 0xfffffffffffffdb0, 8) , (const, 0x80a, 4), (stack, 0xfffffffffffffdb0, 8) INDIRECT (stack, 0xfffffffffffffdb0, 8) , (const, 0x809, 4), (stack, 0xfffffffffffffdb0, 8) MULTIEQUAL (stack, 0xfffffffffffffdb0, 8) , (stack, 0xfffffffffffffdb0, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x815, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x814, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x80a, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x809, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CALL (ram, 0x121160, 8) , (unique, 0x3100, 8) , (unique, 0x100007f9, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x1, 8), (unique, 0x100007f9, 8) COPY (stack, 0xfffffffffffffd10, 8), (register, 0x0, 8) CAST (unique, 0x10000ac9, 8), (unique, 0x10000ac9, 8) CALL (ram, 0x121230, 8) , (register, 0xa8, 8) , (register, 0x30, 8) , (register, 0x0, 8), (stack, 0xfffffffffffffd10, 8) INDIRECT (stack, 0xfffffffffffffd10, 8) , (const, 0x80a, 4), (stack, 0xfffffffffffffd10, 8) INDIRECT (stack, 0xfffffffffffffd10, 8) , (const, 0x809, 4), (register, 0xa8, 8) MULTIEQUAL (unique, 0x3800, 8) , (register, 0x0, 8), (stack, 0xfffffffffffffd10, 8) MULTIEQUAL (stack, 0xfffffffffffffd10, 8) , (stack, 0xfffffffffffffd10, 8)]
[ ---  CBRANCH (ram, 0x1e7a7d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x58e00, 4) , (const, 0x0, 4), (unique, 0x58e00, 4) INT_AND (stack, 0xfffffffffffffcf8, 4) , (const, 0x200, 4), (stack, 0xfffffffffffffcf8, 4) INDIRECT (stack, 0xfffffffffffffcf8, 4) , (const, 0x815, 4), (stack, 0xfffffffffffffcf8, 4) INDIRECT (stack, 0xfffffffffffffcf8, 4) , (const, 0x814, 4), (stack, 0xfffffffffffffcf8, 4) INDIRECT (stack, 0xfffffffffffffcf8, 4) , (const, 0x80a, 4), (stack, 0xfffffffffffffcf8, 4) INDIRECT (stack, 0xfffffffffffffcf8, 4) , (const, 0x809, 4), (stack, 0xfffffffffffffcf8, 4) MULTIEQUAL (stack, 0xfffffffffffffcf8, 4) , (stack, 0xfffffffffffffcf8, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000ad9, 8) , (const, 0x1e7a8b, 8), (unique, 0x10000ad9, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x8ce, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x8ce, 4)]
[(stack, 0xfffffffffffffcc8, 8) INDIRECT (stack, 0xfffffffffffffcc8, 8) , (const, 0x8ce, 4), (stack, 0xfffffffffffffcc8, 8) INDIRECT (stack, 0xfffffffffffffcc8, 8) , (const, 0x8cc, 4)]
[(stack, 0xfffffffffffffcd0, 8) INDIRECT (stack, 0xfffffffffffffcd0, 8) , (const, 0x8ce, 4), (stack, 0xfffffffffffffcd0, 8) INDIRECT (stack, 0xfffffffffffffcd0, 8) , (const, 0x8cc, 4)]
[(stack, 0xfffffffffffffcd8, 8) INDIRECT (stack, 0xfffffffffffffcd8, 8) , (const, 0x8ce, 4), (stack, 0xfffffffffffffcd8, 8) INDIRECT (stack, 0xfffffffffffffcd8, 8) , (const, 0x8cc, 4)]
[(stack, 0xfffffffffffffce8, 8) INDIRECT (stack, 0xfffffffffffffce8, 8) , (const, 0x8ce, 4), (stack, 0xfffffffffffffce8, 8) INDIRECT (stack, 0xfffffffffffffce8, 8) , (const, 0x8cc, 4)]
[(stack, 0xfffffffffffffcf4, 4) INDIRECT (stack, 0xfffffffffffffcf4, 4) , (const, 0x8ce, 4), (stack, 0xfffffffffffffcf4, 4) INDIRECT (stack, 0xfffffffffffffcf4, 4) , (const, 0x8cc, 4)]
[(stack, 0xfffffffffffffcf8, 4) INDIRECT (stack, 0xfffffffffffffcf8, 4) , (const, 0x8ce, 4), (stack, 0xfffffffffffffcf8, 4) INDIRECT (stack, 0xfffffffffffffcf8, 4) , (const, 0x8cc, 4)]
[(stack, 0xfffffffffffffcfc, 4) INDIRECT (stack, 0xfffffffffffffcfc, 4) , (const, 0x8ce, 4), (stack, 0xfffffffffffffcfc, 4) INDIRECT (stack, 0xfffffffffffffcfc, 4) , (const, 0x8cc, 4)]
[(stack, 0xfffffffffffffd00, 8) INDIRECT (stack, 0xfffffffffffffd00, 8) , (const, 0x8ce, 4), (stack, 0xfffffffffffffd00, 8) INDIRECT (stack, 0xfffffffffffffd00, 8) , (const, 0x8cc, 4)]
[(stack, 0xfffffffffffffd08, 8) INDIRECT (stack, 0xfffffffffffffd08, 8) , (const, 0x8ce, 4), (stack, 0xfffffffffffffd08, 8) INDIRECT (stack, 0xfffffffffffffd08, 8) , (const, 0x8cc, 4)]
[(stack, 0xfffffffffffffd10, 8) INDIRECT (stack, 0xfffffffffffffd10, 8) , (const, 0x8ce, 4), (stack, 0xfffffffffffffd10, 8) INDIRECT (stack, 0xfffffffffffffd10, 8) , (const, 0x8cc, 4)]
[(stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x8ce, 4), (stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x8cc, 4)]
[(stack, 0xfffffffffffffdb0, 8) INDIRECT (stack, 0xfffffffffffffdb0, 8) , (const, 0x8ce, 4), (stack, 0xfffffffffffffdb0, 8) INDIRECT (stack, 0xfffffffffffffdb0, 8) , (const, 0x8cc, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x8ce, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x8cc, 4)]
[(register, 0x0, 4) CALLIND (unique, 0xbd80, 8) , (register, 0xa8, 8), (unique, 0xbd80, 8) CAST (unique, 0x10000ae1, 8), (unique, 0x10000ae1, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x80, 8) , (const, 0x7, 8) , (const, 0x8, 8)]
[ ---  BRANCH (ram, 0x1e7638, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000ae9, 8) , (const, 0x1e7638, 8), (unique, 0x10000ae9, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x829, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x829, 4)]
[(stack, 0xfffffffffffffcc8, 8) INDIRECT (stack, 0xfffffffffffffcc8, 8) , (const, 0x829, 4), (stack, 0xfffffffffffffcc8, 8) INDIRECT (stack, 0xfffffffffffffcc8, 8) , (const, 0x828, 4)]
[(stack, 0xfffffffffffffcd0, 8) INDIRECT (stack, 0xfffffffffffffcd0, 8) , (const, 0x829, 4), (stack, 0xfffffffffffffcd0, 8) INDIRECT (stack, 0xfffffffffffffcd0, 8) , (const, 0x828, 4)]
[(stack, 0xfffffffffffffcd8, 8) INDIRECT (stack, 0xfffffffffffffcd8, 8) , (const, 0x829, 4), (stack, 0xfffffffffffffcd8, 8) INDIRECT (stack, 0xfffffffffffffcd8, 8) , (const, 0x828, 4)]
[(stack, 0xfffffffffffffce8, 8) INDIRECT (stack, 0xfffffffffffffce8, 8) , (const, 0x829, 4), (stack, 0xfffffffffffffce8, 8) INDIRECT (stack, 0xfffffffffffffce8, 8) , (const, 0x828, 4)]
[(stack, 0xfffffffffffffcf4, 4) INDIRECT (stack, 0xfffffffffffffcf4, 4) , (const, 0x829, 4), (stack, 0xfffffffffffffcf4, 4) INDIRECT (stack, 0xfffffffffffffcf4, 4) , (const, 0x828, 4)]
[(stack, 0xfffffffffffffcf8, 4) INDIRECT (stack, 0xfffffffffffffcf8, 4) , (const, 0x829, 4), (stack, 0xfffffffffffffcf8, 4) INDIRECT (stack, 0xfffffffffffffcf8, 4) , (const, 0x828, 4)]
[(stack, 0xfffffffffffffcfc, 4) INDIRECT (stack, 0xfffffffffffffcfc, 4) , (const, 0x829, 4), (stack, 0xfffffffffffffcfc, 4) INDIRECT (stack, 0xfffffffffffffcfc, 4) , (const, 0x828, 4)]
[(stack, 0xfffffffffffffd00, 8) INDIRECT (stack, 0xfffffffffffffd00, 8) , (const, 0x829, 4), (stack, 0xfffffffffffffd00, 8) INDIRECT (stack, 0xfffffffffffffd00, 8) , (const, 0x828, 4)]
[(stack, 0xfffffffffffffd08, 8) INDIRECT (stack, 0xfffffffffffffd08, 8) , (const, 0x829, 4), (stack, 0xfffffffffffffd08, 8) INDIRECT (stack, 0xfffffffffffffd08, 8) , (const, 0x828, 4)]
[(stack, 0xfffffffffffffd10, 8) INDIRECT (stack, 0xfffffffffffffd10, 8) , (const, 0x829, 4), (stack, 0xfffffffffffffd10, 8) INDIRECT (stack, 0xfffffffffffffd10, 8) , (const, 0x828, 4)]
[(stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x829, 4), (stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x828, 4)]
[(stack, 0xfffffffffffffdb0, 8) INDIRECT (stack, 0xfffffffffffffdb0, 8) , (const, 0x829, 4), (stack, 0xfffffffffffffdb0, 8) INDIRECT (stack, 0xfffffffffffffdb0, 8) , (const, 0x828, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x829, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x828, 4)]
[(register, 0x0, 4) CALL (ram, 0x20f800, 8) , (const, 0x1, 4) , (unique, 0x10000af1, 8) , (unique, 0x3200, 8), (unique, 0x10000af1, 8) CAST (register, 0xa8, 8), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffd18, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffdb0, 8) MULTIEQUAL (stack, 0xfffffffffffffdb0, 8) , (stack, 0xfffffffffffffdb0, 8)]
[(stack, 0xfffffffffffffda8, 8) MULTIEQUAL (stack, 0xfffffffffffffda8, 8) , (stack, 0xfffffffffffffda8, 8)]
[(stack, 0xfffffffffffffd10, 8) MULTIEQUAL (stack, 0xfffffffffffffd10, 8) , (stack, 0xfffffffffffffd10, 8)]
[(stack, 0xfffffffffffffd00, 8) MULTIEQUAL (stack, 0xfffffffffffffd00, 8) , (stack, 0xfffffffffffffd00, 8)]
[(stack, 0xfffffffffffffcfc, 4) MULTIEQUAL (stack, 0xfffffffffffffcfc, 4) , (stack, 0xfffffffffffffcfc, 4)]
[(stack, 0xfffffffffffffcf8, 4) MULTIEQUAL (stack, 0xfffffffffffffcf8, 4) , (stack, 0xfffffffffffffcf8, 4)]
[(stack, 0xfffffffffffffcf4, 4) MULTIEQUAL (stack, 0xfffffffffffffcf4, 4) , (stack, 0xfffffffffffffcf4, 4)]
[(stack, 0xfffffffffffffce8, 8) MULTIEQUAL (stack, 0xfffffffffffffce8, 8) , (stack, 0xfffffffffffffce8, 8)]
[(stack, 0xfffffffffffffcd8, 8) MULTIEQUAL (stack, 0xfffffffffffffcd8, 8) , (stack, 0xfffffffffffffcd8, 8)]
[(stack, 0xfffffffffffffcd0, 8) MULTIEQUAL (stack, 0xfffffffffffffcd0, 8) , (stack, 0xfffffffffffffcd0, 8)]
[(stack, 0xfffffffffffffcc8, 8) MULTIEQUAL (stack, 0xfffffffffffffcc8, 8) , (stack, 0xfffffffffffffcc8, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(stack, 0xfffffffffffffd08, 4) SUBPIECE (stack, 0xfffffffffffffd08, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffd08, 8) MULTIEQUAL (stack, 0xfffffffffffffd08, 8) , (stack, 0xfffffffffffffd08, 8)]
[ ---  CBRANCH (ram, 0x1e76a0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) MULTIEQUAL (register, 0x0, 4) , (register, 0x0, 4)]
[ ---  CBRANCH (ram, 0x1e76a0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd00, 4) , (const, 0x4b, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000af9, 8), (unique, 0x10000af9, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (ram, 0x4eae68, 8) , (register, 0x110, 8) , (const, 0x1, 8)]
[(unique, 0x1000095d, 4) COPY (stack, 0xfffffffffffffcf8, 4), (stack, 0xfffffffffffffcf8, 4) COPY (unique, 0xbd00, 4), (unique, 0xbd00, 4) INT_OR (stack, 0xfffffffffffffcf8, 4) , (const, 0x10, 4)]
[ ---  CBRANCH (ram, 0x1e7a90, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xfffffffffffffd08, 4) , (const, 0x0, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffdb0, 8) MULTIEQUAL (stack, 0xfffffffffffffdb0, 8) , (stack, 0xfffffffffffffdb0, 8)]
[(stack, 0xfffffffffffffda8, 8) MULTIEQUAL (stack, 0xfffffffffffffda8, 8) , (stack, 0xfffffffffffffda8, 8)]
[(stack, 0xfffffffffffffd10, 8) MULTIEQUAL (stack, 0xfffffffffffffd10, 8) , (stack, 0xfffffffffffffd10, 8)]
[(stack, 0xfffffffffffffd08, 8) MULTIEQUAL (stack, 0xfffffffffffffd08, 8) , (stack, 0xfffffffffffffd08, 8)]
[(stack, 0xfffffffffffffd00, 8) MULTIEQUAL (stack, 0xfffffffffffffd00, 8) , (stack, 0xfffffffffffffd00, 8)]
[(stack, 0xfffffffffffffcfc, 4) MULTIEQUAL (stack, 0xfffffffffffffcfc, 4) , (stack, 0xfffffffffffffcfc, 4)]
[(stack, 0xfffffffffffffcf8, 4) MULTIEQUAL (stack, 0xfffffffffffffcf8, 4) , (stack, 0xfffffffffffffcf8, 4)]
[(stack, 0xfffffffffffffcf4, 4) MULTIEQUAL (stack, 0xfffffffffffffcf4, 4) , (stack, 0xfffffffffffffcf4, 4)]
[(stack, 0xfffffffffffffce8, 8) MULTIEQUAL (stack, 0xfffffffffffffce8, 8) , (stack, 0xfffffffffffffce8, 8)]
[(stack, 0xfffffffffffffcd8, 8) MULTIEQUAL (stack, 0xfffffffffffffcd8, 8) , (stack, 0xfffffffffffffcd8, 8)]
[(stack, 0xfffffffffffffcd0, 8) MULTIEQUAL (stack, 0xfffffffffffffcd0, 8) , (stack, 0xfffffffffffffcd0, 8)]
[(stack, 0xfffffffffffffcc8, 8) MULTIEQUAL (stack, 0xfffffffffffffcc8, 8) , (stack, 0xfffffffffffffcc8, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(stack, 0xfffffffffffffcf0, 4) COPY (register, 0x0, 4), (register, 0x0, 4) MULTIEQUAL (unique, 0x10000959, 4) , (unique, 0x1000095d, 4)]
[(register, 0xa0, 8) COPY (const, 0x0, 8)]
[(register, 0xb8, 8) COPY (const, 0x0, 8)]
[(stack, 0xfffffffffffffcc0, 8) COPY (unique, 0x3200, 8), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffda8, 8)]
[(stack, 0xfffffffffffffce0, 8) COPY (unique, 0x3200, 8), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffda8, 8)]
[(unique, 0x100008e9, 8) COPY (register, 0x20, 8), (register, 0x20, 8) MULTIEQUAL (unique, 0x100008c9, 8) , (register, 0x20, 8)]
[(register, 0x0, 4) COPY (const, 0x10, 4)]
[(register, 0x0, 4) INT_AND (stack, 0xfffffffffffffcf8, 4) , (const, 0x10, 4)]
[ ---  CBRANCH (ram, 0x1e76ba, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xfffffffffffffd08, 4) , (const, 0x0, 4)]
[(register, 0xa0, 8) COPY (const, 0x0, 8)]
[(register, 0xb8, 8) COPY (const, 0x0, 8)]
[(stack, 0xfffffffffffffcc0, 8) COPY (unique, 0x3200, 8), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffda8, 8)]
[(stack, 0xfffffffffffffce0, 8) COPY (unique, 0x3200, 8), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffda8, 8)]
[(unique, 0x10000969, 4) COPY (register, 0x0, 4)]
[(register, 0xa0, 8) COPY (const, 0x0, 8)]
[(register, 0xb8, 8) COPY (const, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000b01, 8) , (const, 0x1e76d5, 8), (unique, 0x10000b01, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x897, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x897, 4)]
[(stack, 0xfffffffffffffcc8, 8) INDIRECT (stack, 0xfffffffffffffcc8, 8) , (const, 0x897, 4), (stack, 0xfffffffffffffcc8, 8) INDIRECT (stack, 0xfffffffffffffcc8, 8) , (const, 0x896, 4)]
[(stack, 0xfffffffffffffcd0, 8) INDIRECT (stack, 0xfffffffffffffcd0, 8) , (const, 0x897, 4), (stack, 0xfffffffffffffcd0, 8) INDIRECT (stack, 0xfffffffffffffcd0, 8) , (const, 0x896, 4)]
[(stack, 0xfffffffffffffcd8, 8) INDIRECT (stack, 0xfffffffffffffcd8, 8) , (const, 0x897, 4), (stack, 0xfffffffffffffcd8, 8) INDIRECT (stack, 0xfffffffffffffcd8, 8) , (const, 0x896, 4)]
[(stack, 0xfffffffffffffce8, 8) INDIRECT (stack, 0xfffffffffffffce8, 8) , (const, 0x897, 4), (stack, 0xfffffffffffffce8, 8) INDIRECT (stack, 0xfffffffffffffce8, 8) , (const, 0x896, 4)]
[(stack, 0xfffffffffffffcf4, 4) INDIRECT (stack, 0xfffffffffffffcf4, 4) , (const, 0x897, 4), (stack, 0xfffffffffffffcf4, 4) INDIRECT (stack, 0xfffffffffffffcf4, 4) , (const, 0x896, 4)]
[(stack, 0xfffffffffffffcf8, 4) INDIRECT (stack, 0xfffffffffffffcf8, 4) , (const, 0x897, 4), (stack, 0xfffffffffffffcf8, 4) INDIRECT (stack, 0xfffffffffffffcf8, 4) , (const, 0x896, 4), (stack, 0xfffffffffffffcf8, 4) MULTIEQUAL (stack, 0xfffffffffffffcf8, 4) , (stack, 0xfffffffffffffcf8, 4)]
[(stack, 0xfffffffffffffcfc, 4) INDIRECT (stack, 0xfffffffffffffcfc, 4) , (const, 0x897, 4), (stack, 0xfffffffffffffcfc, 4) INDIRECT (stack, 0xfffffffffffffcfc, 4) , (const, 0x896, 4)]
[(stack, 0xfffffffffffffd00, 8) INDIRECT (stack, 0xfffffffffffffd00, 8) , (const, 0x897, 4), (stack, 0xfffffffffffffd00, 8) INDIRECT (stack, 0xfffffffffffffd00, 8) , (const, 0x896, 4)]
[(stack, 0xfffffffffffffd10, 8) INDIRECT (stack, 0xfffffffffffffd10, 8) , (const, 0x897, 4), (stack, 0xfffffffffffffd10, 8) INDIRECT (stack, 0xfffffffffffffd10, 8) , (const, 0x896, 4)]
[(stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x897, 4), (stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x896, 4)]
[(stack, 0xfffffffffffffdb0, 8) INDIRECT (stack, 0xfffffffffffffdb0, 8) , (const, 0x897, 4), (stack, 0xfffffffffffffdb0, 8) INDIRECT (stack, 0xfffffffffffffdb0, 8) , (const, 0x896, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x897, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x896, 4)]
[ ---  CALL (ram, 0x1212c8, 8) , (register, 0xa8, 8)]
[(stack, 0xfffffffffffffcc0, 8) COPY (unique, 0x3200, 8), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffda8, 8)]
[(stack, 0xfffffffffffffce0, 8) COPY (unique, 0x3200, 8), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffda8, 8)]
[(stack, 0xfffffffffffffd08, 4) SUBPIECE (stack, 0xfffffffffffffd08, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffd08, 8) INDIRECT (stack, 0xfffffffffffffd08, 8) , (const, 0x897, 4), (stack, 0xfffffffffffffd08, 8) INDIRECT (stack, 0xfffffffffffffd08, 8) , (const, 0x896, 4), (stack, 0xfffffffffffffd08, 8) INT_OR (unique, 0x10000490, 8) , (unique, 0x10000498, 8), (unique, 0x10000498, 8) INT_ZEXT (register, 0x0, 4), (unique, 0x10000490, 8) INT_AND (stack, 0xfffffffffffffd08, 8) , (const, 0xffffffff00000000, 8), (register, 0x0, 4) MULTIEQUAL (register, 0x0, 4) , (register, 0x0, 4)]
[ ---  BRANCH (ram, 0x1e7677, 1)]
[(stack, 0xfffffffffffffd00, 8) INT_OR (unique, 0x1000044c, 8) , (unique, 0x1000054b, 8), (unique, 0x1000054b, 8) INT_AND (unique, 0x10000454, 8) , (const, 0xffffffff00000200, 8), (unique, 0x10000454, 8) INT_ZEXT (stack, 0xfffffffffffffcf8, 4), (unique, 0x1000044c, 8) INT_AND (stack, 0xfffffffffffffd00, 8) , (const, 0xffffffff00000000, 8)]
[ ---  CBRANCH (ram, 0x1e7a71, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) INT_AND (stack, 0xfffffffffffffcf8, 4) , (const, 0x200, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x75a, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x75a, 4)]
[(stack, 0xfffffffffffffcc0, 8) INDIRECT (stack, 0xfffffffffffffcc0, 8) , (const, 0x75a, 4)]
[(stack, 0xfffffffffffffcc8, 8) INDIRECT (stack, 0xfffffffffffffcc8, 8) , (const, 0x75a, 4)]
[(stack, 0xfffffffffffffcd0, 8) INDIRECT (stack, 0xfffffffffffffcd0, 8) , (const, 0x75a, 4)]
[(stack, 0xfffffffffffffcd8, 8) INDIRECT (stack, 0xfffffffffffffcd8, 8) , (const, 0x75a, 4)]
[(stack, 0xfffffffffffffce0, 8) INDIRECT (stack, 0xfffffffffffffce0, 8) , (const, 0x75a, 4)]
[(stack, 0xfffffffffffffce8, 8) INDIRECT (stack, 0xfffffffffffffce8, 8) , (const, 0x75a, 4)]
[(stack, 0xfffffffffffffcf0, 4) INDIRECT (stack, 0xfffffffffffffcf0, 4) , (const, 0x75a, 4)]
[(stack, 0xfffffffffffffcf4, 4) INDIRECT (stack, 0xfffffffffffffcf4, 4) , (const, 0x75a, 4)]
[(stack, 0xfffffffffffffcf8, 4) INDIRECT (stack, 0xfffffffffffffcf8, 4) , (const, 0x75a, 4)]
[(stack, 0xfffffffffffffcfc, 4) INDIRECT (stack, 0xfffffffffffffcfc, 4) , (const, 0x75a, 4)]
[(stack, 0xfffffffffffffd00, 8) INDIRECT (stack, 0xfffffffffffffd00, 8) , (const, 0x75a, 4)]
[(stack, 0xfffffffffffffd08, 8) INDIRECT (stack, 0xfffffffffffffd08, 8) , (const, 0x75a, 4)]
[(stack, 0xfffffffffffffd10, 8) INDIRECT (stack, 0xfffffffffffffd10, 8) , (const, 0x75a, 4)]
[(stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x75a, 4)]
[(stack, 0xfffffffffffffdb0, 8) INDIRECT (stack, 0xfffffffffffffdb0, 8) , (const, 0x75a, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x75a, 4)]
[(register, 0x0, 8) CAST (unique, 0x10000b11, 8), (unique, 0x10000b11, 8) CALLIND (unique, 0xbd80, 8), (unique, 0xbd80, 8) CAST (unique, 0x10000b09, 8), (unique, 0x10000b09, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x80, 8) , (const, 0x6, 8) , (const, 0x8, 8)]
[ ---  BRANCH (ram, 0x1e7284, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xe5, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xe5, 4)]
[(stack, 0xfffffffffffffcc0, 8) INDIRECT (stack, 0xfffffffffffffcc0, 8) , (const, 0xe5, 4)]
[(stack, 0xfffffffffffffcc8, 8) INDIRECT (stack, 0xfffffffffffffcc8, 8) , (const, 0xe5, 4)]
[(stack, 0xfffffffffffffcd0, 8) INDIRECT (stack, 0xfffffffffffffcd0, 8) , (const, 0xe5, 4)]
[(stack, 0xfffffffffffffcd8, 8) INDIRECT (stack, 0xfffffffffffffcd8, 8) , (const, 0xe5, 4)]
[(stack, 0xfffffffffffffce0, 8) INDIRECT (stack, 0xfffffffffffffce0, 8) , (const, 0xe5, 4)]
[(stack, 0xfffffffffffffce8, 8) INDIRECT (stack, 0xfffffffffffffce8, 8) , (const, 0xe5, 4)]
[(stack, 0xfffffffffffffcf0, 4) INDIRECT (stack, 0xfffffffffffffcf0, 4) , (const, 0xe5, 4)]
[(stack, 0xfffffffffffffcf4, 4) INDIRECT (stack, 0xfffffffffffffcf4, 4) , (const, 0xe5, 4)]
[(stack, 0xfffffffffffffcf8, 4) INDIRECT (stack, 0xfffffffffffffcf8, 4) , (const, 0xe5, 4)]
[(stack, 0xfffffffffffffcfc, 4) INDIRECT (stack, 0xfffffffffffffcfc, 4) , (const, 0xe5, 4)]
[(stack, 0xfffffffffffffd00, 8) INDIRECT (stack, 0xfffffffffffffd00, 8) , (const, 0xe5, 4)]
[(stack, 0xfffffffffffffd08, 8) INDIRECT (stack, 0xfffffffffffffd08, 8) , (const, 0xe5, 4)]
[(stack, 0xfffffffffffffd10, 8) INDIRECT (stack, 0xfffffffffffffd10, 8) , (const, 0xe5, 4)]
[(stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0xe5, 4)]
[(stack, 0xfffffffffffffdb0, 8) INDIRECT (stack, 0xfffffffffffffdb0, 8) , (const, 0xe5, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xe5, 4)]
[(register, 0x0, 8) CAST (unique, 0x10000b19, 8), (unique, 0x10000b19, 8) CALL (ram, 0x1df920, 8) , (register, 0x30, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffdb0, 8) MULTIEQUAL (stack, 0xfffffffffffffdb0, 8) , (stack, 0xfffffffffffffdb0, 8)]
[(stack, 0xfffffffffffffda8, 8) MULTIEQUAL (stack, 0xfffffffffffffda8, 8) , (stack, 0xfffffffffffffda8, 8)]
[(stack, 0xfffffffffffffd10, 8) MULTIEQUAL (stack, 0xfffffffffffffd10, 8) , (stack, 0xfffffffffffffd10, 8)]
[(stack, 0xfffffffffffffd08, 8) MULTIEQUAL (stack, 0xfffffffffffffd08, 8) , (stack, 0xfffffffffffffd08, 8)]
[(stack, 0xfffffffffffffd00, 8) MULTIEQUAL (stack, 0xfffffffffffffd00, 8) , (stack, 0xfffffffffffffd00, 8)]
[(stack, 0xfffffffffffffcfc, 4) MULTIEQUAL (stack, 0xfffffffffffffcfc, 4) , (stack, 0xfffffffffffffcfc, 4)]
[(stack, 0xfffffffffffffcf8, 4) MULTIEQUAL (stack, 0xfffffffffffffcf8, 4) , (stack, 0xfffffffffffffcf8, 4)]
[(stack, 0xfffffffffffffcf4, 4) MULTIEQUAL (stack, 0xfffffffffffffcf4, 4) , (stack, 0xfffffffffffffcf4, 4)]
[(stack, 0xfffffffffffffcf0, 4) MULTIEQUAL (stack, 0xfffffffffffffcf0, 4) , (stack, 0xfffffffffffffcf0, 4)]
[(stack, 0xfffffffffffffce8, 8) MULTIEQUAL (stack, 0xfffffffffffffce8, 8) , (stack, 0xfffffffffffffce8, 8)]
[(stack, 0xfffffffffffffce0, 8) MULTIEQUAL (stack, 0xfffffffffffffce0, 8) , (stack, 0xfffffffffffffce0, 8)]
[(stack, 0xfffffffffffffcd8, 8) MULTIEQUAL (stack, 0xfffffffffffffcd8, 8) , (stack, 0xfffffffffffffcd8, 8)]
[(stack, 0xfffffffffffffcd0, 8) MULTIEQUAL (stack, 0xfffffffffffffcd0, 8) , (stack, 0xfffffffffffffcd0, 8)]
[(stack, 0xfffffffffffffcc8, 8) MULTIEQUAL (stack, 0xfffffffffffffcc8, 8) , (stack, 0xfffffffffffffcc8, 8)]
[(stack, 0xfffffffffffffcc0, 8) MULTIEQUAL (stack, 0xfffffffffffffcc0, 8) , (stack, 0xfffffffffffffcc0, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x1e79b7, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x1e79e6, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbc80, 4) , (const, 0x14, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000b21, 8), (unique, 0x10000b21, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (ram, 0x4eae68, 8) , (register, 0x110, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x1e79d9, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x8, 8) , (const, 0x0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x71a, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x71a, 4)]
[(stack, 0xfffffffffffffcc0, 8) INDIRECT (stack, 0xfffffffffffffcc0, 8) , (const, 0x71a, 4)]
[(stack, 0xfffffffffffffcc8, 8) INDIRECT (stack, 0xfffffffffffffcc8, 8) , (const, 0x71a, 4)]
[(stack, 0xfffffffffffffcd0, 8) INDIRECT (stack, 0xfffffffffffffcd0, 8) , (const, 0x71a, 4)]
[(stack, 0xfffffffffffffcd8, 8) INDIRECT (stack, 0xfffffffffffffcd8, 8) , (const, 0x71a, 4)]
[(stack, 0xfffffffffffffce0, 8) INDIRECT (stack, 0xfffffffffffffce0, 8) , (const, 0x71a, 4)]
[(stack, 0xfffffffffffffce8, 8) INDIRECT (stack, 0xfffffffffffffce8, 8) , (const, 0x71a, 4)]
[(stack, 0xfffffffffffffcf0, 4) INDIRECT (stack, 0xfffffffffffffcf0, 4) , (const, 0x71a, 4)]
[(stack, 0xfffffffffffffcf4, 4) INDIRECT (stack, 0xfffffffffffffcf4, 4) , (const, 0x71a, 4)]
[(stack, 0xfffffffffffffcf8, 4) INDIRECT (stack, 0xfffffffffffffcf8, 4) , (const, 0x71a, 4)]
[(stack, 0xfffffffffffffcfc, 4) INDIRECT (stack, 0xfffffffffffffcfc, 4) , (const, 0x71a, 4)]
[(stack, 0xfffffffffffffd00, 8) INDIRECT (stack, 0xfffffffffffffd00, 8) , (const, 0x71a, 4)]
[(stack, 0xfffffffffffffd08, 8) INDIRECT (stack, 0xfffffffffffffd08, 8) , (const, 0x71a, 4)]
[(stack, 0xfffffffffffffd10, 8) INDIRECT (stack, 0xfffffffffffffd10, 8) , (const, 0x71a, 4)]
[(stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x71a, 4)]
[(stack, 0xfffffffffffffdb0, 8) INDIRECT (stack, 0xfffffffffffffdb0, 8) , (const, 0x71a, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x71a, 4)]
[ ---  CBRANCH (ram, 0x1e7a66, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALLIND (register, 0x8, 8) , (register, 0x30, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffdb0, 8) MULTIEQUAL (stack, 0xfffffffffffffdb0, 8) , (stack, 0xfffffffffffffdb0, 8)]
[(stack, 0xfffffffffffffda8, 8) MULTIEQUAL (stack, 0xfffffffffffffda8, 8) , (stack, 0xfffffffffffffda8, 8)]
[(stack, 0xfffffffffffffd10, 8) MULTIEQUAL (stack, 0xfffffffffffffd10, 8) , (stack, 0xfffffffffffffd10, 8)]
[(stack, 0xfffffffffffffd08, 8) MULTIEQUAL (stack, 0xfffffffffffffd08, 8) , (stack, 0xfffffffffffffd08, 8)]
[(stack, 0xfffffffffffffd00, 8) MULTIEQUAL (stack, 0xfffffffffffffd00, 8) , (stack, 0xfffffffffffffd00, 8)]
[(stack, 0xfffffffffffffcfc, 4) MULTIEQUAL (stack, 0xfffffffffffffcfc, 4) , (stack, 0xfffffffffffffcfc, 4)]
[(stack, 0xfffffffffffffcf4, 4) MULTIEQUAL (stack, 0xfffffffffffffcf4, 4) , (stack, 0xfffffffffffffcf4, 4)]
[(stack, 0xfffffffffffffcf0, 4) MULTIEQUAL (stack, 0xfffffffffffffcf0, 4) , (stack, 0xfffffffffffffcf0, 4)]
[(stack, 0xfffffffffffffce8, 8) MULTIEQUAL (stack, 0xfffffffffffffce8, 8) , (stack, 0xfffffffffffffce8, 8)]
[(stack, 0xfffffffffffffce0, 8) MULTIEQUAL (stack, 0xfffffffffffffce0, 8) , (stack, 0xfffffffffffffce0, 8)]
[(stack, 0xfffffffffffffcd8, 8) MULTIEQUAL (stack, 0xfffffffffffffcd8, 8) , (stack, 0xfffffffffffffcd8, 8)]
[(stack, 0xfffffffffffffcd0, 8) MULTIEQUAL (stack, 0xfffffffffffffcd0, 8) , (stack, 0xfffffffffffffcd0, 8)]
[(stack, 0xfffffffffffffcc8, 8) MULTIEQUAL (stack, 0xfffffffffffffcc8, 8) , (stack, 0xfffffffffffffcc8, 8)]
[(stack, 0xfffffffffffffcc0, 8) MULTIEQUAL (stack, 0xfffffffffffffcc0, 8) , (stack, 0xfffffffffffffcc0, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x1e7a66, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x100004ad, 4) , (const, 0x0, 4), (unique, 0x100004ad, 4) INT_AND (stack, 0xfffffffffffffcf8, 4) , (const, 0x1, 4), (stack, 0xfffffffffffffcf8, 4) MULTIEQUAL (stack, 0xfffffffffffffcf8, 4) , (stack, 0xfffffffffffffcf8, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffdb0, 8) MULTIEQUAL (stack, 0xfffffffffffffdb0, 8) , (stack, 0xfffffffffffffdb0, 8)]
[(stack, 0xfffffffffffffda8, 8) MULTIEQUAL (stack, 0xfffffffffffffda8, 8) , (stack, 0xfffffffffffffda8, 8)]
[(stack, 0xfffffffffffffd10, 8) MULTIEQUAL (stack, 0xfffffffffffffd10, 8) , (stack, 0xfffffffffffffd10, 8)]
[(stack, 0xfffffffffffffd08, 8) MULTIEQUAL (stack, 0xfffffffffffffd08, 8) , (stack, 0xfffffffffffffd08, 8)]
[(stack, 0xfffffffffffffd00, 8) MULTIEQUAL (stack, 0xfffffffffffffd00, 8) , (stack, 0xfffffffffffffd00, 8)]
[(stack, 0xfffffffffffffcfc, 4) MULTIEQUAL (stack, 0xfffffffffffffcfc, 4) , (stack, 0xfffffffffffffcfc, 4)]
[(stack, 0xfffffffffffffcf8, 4) MULTIEQUAL (stack, 0xfffffffffffffcf8, 4) , (stack, 0xfffffffffffffcf8, 4)]
[(stack, 0xfffffffffffffcf4, 4) MULTIEQUAL (stack, 0xfffffffffffffcf4, 4) , (stack, 0xfffffffffffffcf4, 4)]
[(stack, 0xfffffffffffffcf0, 4) MULTIEQUAL (stack, 0xfffffffffffffcf0, 4) , (stack, 0xfffffffffffffcf0, 4)]
[(stack, 0xfffffffffffffce8, 8) MULTIEQUAL (stack, 0xfffffffffffffce8, 8) , (stack, 0xfffffffffffffce8, 8)]
[(stack, 0xfffffffffffffce0, 8) MULTIEQUAL (stack, 0xfffffffffffffce0, 8) , (stack, 0xfffffffffffffce0, 8)]
[(stack, 0xfffffffffffffcd8, 8) MULTIEQUAL (stack, 0xfffffffffffffcd8, 8) , (stack, 0xfffffffffffffcd8, 8)]
[(stack, 0xfffffffffffffcd0, 8) MULTIEQUAL (stack, 0xfffffffffffffcd0, 8) , (stack, 0xfffffffffffffcd0, 8)]
[(stack, 0xfffffffffffffcc8, 8) MULTIEQUAL (stack, 0xfffffffffffffcc8, 8) , (stack, 0xfffffffffffffcc8, 8)]
[(stack, 0xfffffffffffffcc0, 8) MULTIEQUAL (stack, 0xfffffffffffffcc0, 8) , (stack, 0xfffffffffffffcc0, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xa0, 8) COPY (const, 0x2, 8)]
[(unique, 0x100008a9, 8) COPY (register, 0x20, 8)]
[ ---  BRANCH (ram, 0x1e7911, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffdb0, 8) MULTIEQUAL (stack, 0xfffffffffffffdb0, 8) , (stack, 0xfffffffffffffdb0, 8)]
[(stack, 0xfffffffffffffda8, 8) MULTIEQUAL (stack, 0xfffffffffffffda8, 8) , (stack, 0xfffffffffffffda8, 8)]
[(stack, 0xfffffffffffffd10, 8) MULTIEQUAL (stack, 0xfffffffffffffd10, 8) , (stack, 0xfffffffffffffd10, 8)]
[(stack, 0xfffffffffffffd08, 8) MULTIEQUAL (stack, 0xfffffffffffffd08, 8) , (stack, 0xfffffffffffffd08, 8)]
[(stack, 0xfffffffffffffd00, 8) MULTIEQUAL (stack, 0xfffffffffffffd00, 8) , (stack, 0xfffffffffffffd00, 8)]
[(stack, 0xfffffffffffffcfc, 4) MULTIEQUAL (stack, 0xfffffffffffffcfc, 4) , (stack, 0xfffffffffffffcfc, 4)]
[(stack, 0xfffffffffffffcf4, 4) MULTIEQUAL (stack, 0xfffffffffffffcf4, 4) , (stack, 0xfffffffffffffcf4, 4)]
[(stack, 0xfffffffffffffce8, 8) MULTIEQUAL (stack, 0xfffffffffffffce8, 8) , (stack, 0xfffffffffffffce8, 8)]
[(stack, 0xfffffffffffffcd8, 8) MULTIEQUAL (stack, 0xfffffffffffffcd8, 8) , (stack, 0xfffffffffffffcd8, 8)]
[(stack, 0xfffffffffffffcd0, 8) MULTIEQUAL (stack, 0xfffffffffffffcd0, 8) , (stack, 0xfffffffffffffcd0, 8)]
[(stack, 0xfffffffffffffcc8, 8) MULTIEQUAL (stack, 0xfffffffffffffcc8, 8) , (stack, 0xfffffffffffffcc8, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xa0, 8) COPY (const, 0x0, 8)]
[(stack, 0xfffffffffffffcc0, 8) COPY (unique, 0x3200, 8), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffda8, 8)]
[(stack, 0xfffffffffffffce0, 8) COPY (unique, 0x3200, 8), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffda8, 8)]
[(unique, 0x10000965, 4) COPY (register, 0x0, 4), (register, 0x0, 4) INT_AND (stack, 0xfffffffffffffcf8, 4) , (const, 0x10, 4), (stack, 0xfffffffffffffcf8, 4) MULTIEQUAL (stack, 0xfffffffffffffcf8, 4) , (stack, 0xfffffffffffffcf8, 4)]
[ ---  BRANCH (ram, 0x1e7677, 1)]
[(stack, 0xfffffffffffffd08, 8) COPY (const, 0x0, 8)]
[(register, 0xa0, 8) COPY (const, 0x0, 8)]
[(stack, 0xfffffffffffffcfc, 4) COPY (register, 0x18, 4), (register, 0x18, 4) INT_AND (stack, 0xfffffffffffffcf8, 4) , (const, 0x2000, 4)]
[(stack, 0xfffffffffffffcf0, 4) COPY (register, 0x0, 4), (register, 0x0, 4) INT_OR (stack, 0xfffffffffffffcf8, 4) , (const, 0x100, 4)]
[(stack, 0xfffffffffffffcc0, 8) COPY (unique, 0x3200, 8), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffda8, 8)]
[(stack, 0xfffffffffffffce0, 8) COPY (unique, 0x3200, 8), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffda8, 8)]
[(unique, 0x10000831, 8) COPY (unique, 0x3200, 8), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffda8, 8)]
[(unique, 0x10000971, 4) COPY (stack, 0xfffffffffffffcf4, 4), (stack, 0xfffffffffffffcf4, 4) COPY (register, 0x10, 4), (register, 0x10, 4) INT_OR (register, 0x10, 4) , (register, 0x0, 4), (register, 0x10, 4) INT_AND (register, 0x10, 4) , (const, 0x2, 4), (register, 0x0, 4) INT_LEFT (unique, 0x10000199, 4) , (const, 0x2, 4), (register, 0x10, 4) INT_SRIGHT (unique, 0x10000b29, 4) , (const, 0x5, 4), (unique, 0x10000b29, 4) CAST (stack, 0xfffffffffffffcf8, 4), (unique, 0x10000199, 4) INT_ZEXT (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x10000179, 4) , (const, 0x0, 4), (unique, 0x10000179, 4) INT_AND (stack, 0xfffffffffffffcf8, 4) , (const, 0x80, 4)]
[(unique, 0x100009a1, 8) COPY (stack, 0xfffffffffffffd10, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (unique, 0x1000053b, 8) , (unique, 0x1000053b, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffdb0, 8) MULTIEQUAL (stack, 0xfffffffffffffdb0, 8) , (unique, 0x10000533, 8) , (unique, 0x10000533, 8) , (stack, 0xfffffffffffffdb0, 8) , (stack, 0xfffffffffffffdb0, 8)]
[(stack, 0xfffffffffffffda8, 8) MULTIEQUAL (stack, 0xfffffffffffffda8, 8) , (unique, 0x1000052b, 8) , (unique, 0x1000052b, 8) , (stack, 0xfffffffffffffda8, 8) , (stack, 0xfffffffffffffda8, 8)]
[(stack, 0xfffffffffffffd10, 8) MULTIEQUAL (unique, 0x100009a1, 8) , (unique, 0x100009f5, 8) , (unique, 0x100009f5, 8) , (stack, 0xfffffffffffffd10, 8) , (stack, 0xfffffffffffffd10, 8)]
[(stack, 0xfffffffffffffd08, 8) MULTIEQUAL (stack, 0xfffffffffffffd08, 8) , (unique, 0x1000051b, 8) , (unique, 0x1000051b, 8) , (stack, 0xfffffffffffffd08, 8) , (stack, 0xfffffffffffffd08, 8)]
[(stack, 0xfffffffffffffcfc, 4) MULTIEQUAL (stack, 0xfffffffffffffcfc, 4) , (unique, 0x1000050f, 4) , (unique, 0x1000050f, 4) , (stack, 0xfffffffffffffcfc, 4) , (stack, 0xfffffffffffffcfc, 4)]
[(stack, 0xfffffffffffffcf8, 4) MULTIEQUAL (stack, 0xfffffffffffffcf8, 4) , (unique, 0x1000050b, 4) , (unique, 0x1000050b, 4) , (stack, 0xfffffffffffffcf8, 4) , (stack, 0xfffffffffffffcf8, 4)]
[(stack, 0xfffffffffffffcf4, 4) MULTIEQUAL (unique, 0x10000971, 4) , (unique, 0x100009f1, 4) , (unique, 0x100009f1, 4) , (stack, 0xfffffffffffffcf4, 4) , (stack, 0xfffffffffffffcf4, 4)]
[(stack, 0xfffffffffffffcf0, 4) MULTIEQUAL (stack, 0xfffffffffffffcf0, 4) , (unique, 0x10000503, 4) , (unique, 0x10000503, 4) , (stack, 0xfffffffffffffcf0, 4) , (stack, 0xfffffffffffffcf0, 4)]
[(stack, 0xfffffffffffffce8, 8) MULTIEQUAL (stack, 0xfffffffffffffce8, 8) , (unique, 0x100004fb, 8) , (unique, 0x100004fb, 8) , (stack, 0xfffffffffffffce8, 8) , (stack, 0xfffffffffffffce8, 8)]
[(stack, 0xfffffffffffffce0, 8) MULTIEQUAL (stack, 0xfffffffffffffce0, 8) , (unique, 0x100004f3, 8) , (unique, 0x100004f3, 8) , (stack, 0xfffffffffffffce0, 8) , (stack, 0xfffffffffffffce0, 8)]
[(stack, 0xfffffffffffffcd8, 8) MULTIEQUAL (stack, 0xfffffffffffffcd8, 8) , (unique, 0x100004eb, 8) , (unique, 0x100004eb, 8) , (stack, 0xfffffffffffffcd8, 8) , (stack, 0xfffffffffffffcd8, 8)]
[(stack, 0xfffffffffffffcd0, 8) MULTIEQUAL (stack, 0xfffffffffffffcd0, 8) , (unique, 0x100004e3, 8) , (unique, 0x100004e3, 8) , (stack, 0xfffffffffffffcd0, 8) , (stack, 0xfffffffffffffcd0, 8)]
[(stack, 0xfffffffffffffcc8, 8) MULTIEQUAL (stack, 0xfffffffffffffcc8, 8) , (unique, 0x100004db, 8) , (unique, 0x100004db, 8) , (stack, 0xfffffffffffffcc8, 8) , (stack, 0xfffffffffffffcc8, 8)]
[(stack, 0xfffffffffffffcc0, 8) MULTIEQUAL (stack, 0xfffffffffffffcc0, 8) , (unique, 0x100004d3, 8) , (unique, 0x100004d3, 8) , (stack, 0xfffffffffffffcc0, 8) , (stack, 0xfffffffffffffcc0, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (unique, 0x100004c3, 8) , (unique, 0x100004c3, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (unique, 0x100004bb, 8) , (unique, 0x100004bb, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xa0, 8) MULTIEQUAL (register, 0xa0, 8) , (register, 0xa0, 8) , (register, 0xa0, 8) , (register, 0xa0, 8) , (register, 0xa0, 8)]
[(register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8)]
[(register, 0x18, 8) MULTIEQUAL (unique, 0x10000831, 8) , (unique, 0x10000839, 8) , (unique, 0x10000841, 8) , (unique, 0x10000849, 8) , (unique, 0x10000821, 8)]
[ ---  CBRANCH (ram, 0x1e7720, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xfffffffffffffd00, 4) , (const, 0x0, 4), (stack, 0xfffffffffffffd00, 4) SUBPIECE (stack, 0xfffffffffffffd00, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffd00, 8) MULTIEQUAL (stack, 0xfffffffffffffd00, 8) , (unique, 0x10000513, 8) , (unique, 0x10000513, 8) , (stack, 0xfffffffffffffd00, 8) , (stack, 0xfffffffffffffd00, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000b2d, 8) , (const, 0x1e7724, 8), (unique, 0x10000b2d, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x6f2, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x6f2, 4)]
[(stack, 0xfffffffffffffcc0, 8) INDIRECT (stack, 0xfffffffffffffcc0, 8) , (const, 0x6f2, 4), (stack, 0xfffffffffffffcc0, 8) INDIRECT (stack, 0xfffffffffffffcc0, 8) , (const, 0x6f0, 4)]
[(stack, 0xfffffffffffffcc8, 8) INDIRECT (stack, 0xfffffffffffffcc8, 8) , (const, 0x6f2, 4), (stack, 0xfffffffffffffcc8, 8) INDIRECT (stack, 0xfffffffffffffcc8, 8) , (const, 0x6f0, 4)]
[(stack, 0xfffffffffffffcd0, 8) INDIRECT (stack, 0xfffffffffffffcd0, 8) , (const, 0x6f2, 4), (stack, 0xfffffffffffffcd0, 8) INDIRECT (stack, 0xfffffffffffffcd0, 8) , (const, 0x6f0, 4)]
[(stack, 0xfffffffffffffcd8, 8) INDIRECT (stack, 0xfffffffffffffcd8, 8) , (const, 0x6f2, 4), (stack, 0xfffffffffffffcd8, 8) INDIRECT (stack, 0xfffffffffffffcd8, 8) , (const, 0x6f0, 4)]
[(stack, 0xfffffffffffffce0, 8) INDIRECT (stack, 0xfffffffffffffce0, 8) , (const, 0x6f2, 4), (stack, 0xfffffffffffffce0, 8) INDIRECT (stack, 0xfffffffffffffce0, 8) , (const, 0x6f0, 4)]
[(stack, 0xfffffffffffffce8, 8) INDIRECT (stack, 0xfffffffffffffce8, 8) , (const, 0x6f2, 4), (stack, 0xfffffffffffffce8, 8) INDIRECT (stack, 0xfffffffffffffce8, 8) , (const, 0x6f0, 4)]
[(stack, 0xfffffffffffffcf0, 4) INDIRECT (stack, 0xfffffffffffffcf0, 4) , (const, 0x6f2, 4), (stack, 0xfffffffffffffcf0, 4) INDIRECT (stack, 0xfffffffffffffcf0, 4) , (const, 0x6f0, 4)]
[(stack, 0xfffffffffffffcf8, 4) INDIRECT (stack, 0xfffffffffffffcf8, 4) , (const, 0x6f2, 4), (stack, 0xfffffffffffffcf8, 4) INDIRECT (stack, 0xfffffffffffffcf8, 4) , (const, 0x6f0, 4)]
[(stack, 0xfffffffffffffcfc, 4) INDIRECT (stack, 0xfffffffffffffcfc, 4) , (const, 0x6f2, 4), (stack, 0xfffffffffffffcfc, 4) INDIRECT (stack, 0xfffffffffffffcfc, 4) , (const, 0x6f0, 4)]
[(stack, 0xfffffffffffffd00, 8) INDIRECT (stack, 0xfffffffffffffd00, 8) , (const, 0x6f2, 4), (stack, 0xfffffffffffffd00, 8) INDIRECT (stack, 0xfffffffffffffd00, 8) , (const, 0x6f0, 4)]
[(stack, 0xfffffffffffffd08, 8) INDIRECT (stack, 0xfffffffffffffd08, 8) , (const, 0x6f2, 4), (stack, 0xfffffffffffffd08, 8) INDIRECT (stack, 0xfffffffffffffd08, 8) , (const, 0x6f0, 4)]
[(stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x6f2, 4), (stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x6f0, 4)]
[(stack, 0xfffffffffffffdb0, 8) INDIRECT (stack, 0xfffffffffffffdb0, 8) , (const, 0x6f2, 4), (stack, 0xfffffffffffffdb0, 8) INDIRECT (stack, 0xfffffffffffffdb0, 8) , (const, 0x6f0, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x6f2, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x6f0, 4)]
[(register, 0x0, 8) CAST (unique, 0x10000b3d, 8), (unique, 0x10000b3d, 8) CALLIND (unique, 0xbd80, 8), (unique, 0xbd80, 8) CAST (unique, 0x10000b35, 8), (unique, 0x10000b35, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x80, 8) , (const, 0x5, 8) , (const, 0x8, 8)]
[(unique, 0x100009d1, 4) COPY (stack, 0xfffffffffffffcf4, 4), (stack, 0xfffffffffffffcf4, 4) INDIRECT (stack, 0xfffffffffffffcf4, 4) , (const, 0x6f2, 4), (stack, 0xfffffffffffffcf4, 4) INDIRECT (stack, 0xfffffffffffffcf4, 4) , (const, 0x6f0, 4)]
[(unique, 0x100009d9, 8) COPY (stack, 0xfffffffffffffd10, 8), (stack, 0xfffffffffffffd10, 8) INDIRECT (stack, 0xfffffffffffffd10, 8) , (const, 0x6f2, 4), (stack, 0xfffffffffffffd10, 8) INDIRECT (stack, 0xfffffffffffffd10, 8) , (const, 0x6f0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000b45, 8) , (const, 0x1e7306, 8), (unique, 0x10000b45, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1af, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x1af, 4)]
[(stack, 0xfffffffffffffcc0, 8) INDIRECT (stack, 0xfffffffffffffcc0, 8) , (const, 0x1af, 4), (stack, 0xfffffffffffffcc0, 8) INDIRECT (stack, 0xfffffffffffffcc0, 8) , (const, 0x1ae, 4)]
[(stack, 0xfffffffffffffcc8, 8) INDIRECT (stack, 0xfffffffffffffcc8, 8) , (const, 0x1af, 4), (stack, 0xfffffffffffffcc8, 8) INDIRECT (stack, 0xfffffffffffffcc8, 8) , (const, 0x1ae, 4)]
[(stack, 0xfffffffffffffcd0, 8) INDIRECT (stack, 0xfffffffffffffcd0, 8) , (const, 0x1af, 4), (stack, 0xfffffffffffffcd0, 8) INDIRECT (stack, 0xfffffffffffffcd0, 8) , (const, 0x1ae, 4)]
[(stack, 0xfffffffffffffcd8, 8) INDIRECT (stack, 0xfffffffffffffcd8, 8) , (const, 0x1af, 4), (stack, 0xfffffffffffffcd8, 8) INDIRECT (stack, 0xfffffffffffffcd8, 8) , (const, 0x1ae, 4)]
[(stack, 0xfffffffffffffce0, 8) INDIRECT (stack, 0xfffffffffffffce0, 8) , (const, 0x1af, 4), (stack, 0xfffffffffffffce0, 8) INDIRECT (stack, 0xfffffffffffffce0, 8) , (const, 0x1ae, 4)]
[(stack, 0xfffffffffffffce8, 8) INDIRECT (stack, 0xfffffffffffffce8, 8) , (const, 0x1af, 4), (stack, 0xfffffffffffffce8, 8) INDIRECT (stack, 0xfffffffffffffce8, 8) , (const, 0x1ae, 4)]
[(stack, 0xfffffffffffffcf0, 4) INDIRECT (stack, 0xfffffffffffffcf0, 4) , (const, 0x1af, 4), (stack, 0xfffffffffffffcf0, 4) INDIRECT (stack, 0xfffffffffffffcf0, 4) , (const, 0x1ae, 4)]
[(stack, 0xfffffffffffffcf8, 4) INDIRECT (stack, 0xfffffffffffffcf8, 4) , (const, 0x1af, 4), (stack, 0xfffffffffffffcf8, 4) INDIRECT (stack, 0xfffffffffffffcf8, 4) , (const, 0x1ae, 4)]
[(stack, 0xfffffffffffffcfc, 4) INDIRECT (stack, 0xfffffffffffffcfc, 4) , (const, 0x1af, 4), (stack, 0xfffffffffffffcfc, 4) INDIRECT (stack, 0xfffffffffffffcfc, 4) , (const, 0x1ae, 4)]
[(stack, 0xfffffffffffffd00, 8) INDIRECT (stack, 0xfffffffffffffd00, 8) , (const, 0x1af, 4), (stack, 0xfffffffffffffd00, 8) INDIRECT (stack, 0xfffffffffffffd00, 8) , (const, 0x1ae, 4)]
[(stack, 0xfffffffffffffd08, 8) INDIRECT (stack, 0xfffffffffffffd08, 8) , (const, 0x1af, 4), (stack, 0xfffffffffffffd08, 8) INDIRECT (stack, 0xfffffffffffffd08, 8) , (const, 0x1ae, 4)]
[(stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x1af, 4), (stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x1ae, 4)]
[(stack, 0xfffffffffffffdb0, 8) INDIRECT (stack, 0xfffffffffffffdb0, 8) , (const, 0x1af, 4), (stack, 0xfffffffffffffdb0, 8) INDIRECT (stack, 0xfffffffffffffdb0, 8) , (const, 0x1ae, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1af, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1ae, 4)]
[(register, 0x0, 8) CALL (ram, 0x1dfbe0, 8) , (unique, 0x10000b4d, 8), (unique, 0x10000b4d, 8) CAST (register, 0x0, 8)]
[(unique, 0x100009d5, 4) COPY (stack, 0xfffffffffffffcf4, 4), (stack, 0xfffffffffffffcf4, 4) INDIRECT (stack, 0xfffffffffffffcf4, 4) , (const, 0x1af, 4), (stack, 0xfffffffffffffcf4, 4) INDIRECT (stack, 0xfffffffffffffcf4, 4) , (const, 0x1ae, 4)]
[(unique, 0x100009e1, 8) COPY (stack, 0xfffffffffffffd10, 8), (stack, 0xfffffffffffffd10, 8) INDIRECT (stack, 0xfffffffffffffd10, 8) , (const, 0x1af, 4), (stack, 0xfffffffffffffd10, 8) INDIRECT (stack, 0xfffffffffffffd10, 8) , (const, 0x1ae, 4)]
[(unique, 0x100004bb, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x100004c3, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(unique, 0x100004d3, 8) MULTIEQUAL (stack, 0xfffffffffffffcc0, 8) , (stack, 0xfffffffffffffcc0, 8)]
[(unique, 0x100004db, 8) MULTIEQUAL (stack, 0xfffffffffffffcc8, 8) , (stack, 0xfffffffffffffcc8, 8)]
[(unique, 0x100004e3, 8) MULTIEQUAL (stack, 0xfffffffffffffcd0, 8) , (stack, 0xfffffffffffffcd0, 8)]
[(unique, 0x100004eb, 8) MULTIEQUAL (stack, 0xfffffffffffffcd8, 8) , (stack, 0xfffffffffffffcd8, 8)]
[(unique, 0x100004f3, 8) MULTIEQUAL (stack, 0xfffffffffffffce0, 8) , (stack, 0xfffffffffffffce0, 8)]
[(unique, 0x100004fb, 8) MULTIEQUAL (stack, 0xfffffffffffffce8, 8) , (stack, 0xfffffffffffffce8, 8)]
[(unique, 0x10000503, 4) MULTIEQUAL (stack, 0xfffffffffffffcf0, 4) , (stack, 0xfffffffffffffcf0, 4)]
[(unique, 0x1000050b, 4) MULTIEQUAL (stack, 0xfffffffffffffcf8, 4) , (stack, 0xfffffffffffffcf8, 4)]
[(unique, 0x1000050f, 4) MULTIEQUAL (stack, 0xfffffffffffffcfc, 4) , (stack, 0xfffffffffffffcfc, 4)]
[(unique, 0x10000513, 8) MULTIEQUAL (stack, 0xfffffffffffffd00, 8) , (stack, 0xfffffffffffffd00, 8)]
[(unique, 0x1000051b, 8) MULTIEQUAL (stack, 0xfffffffffffffd08, 8) , (stack, 0xfffffffffffffd08, 8)]
[(unique, 0x1000052b, 8) MULTIEQUAL (stack, 0xfffffffffffffda8, 8) , (stack, 0xfffffffffffffda8, 8)]
[(unique, 0x10000533, 8) MULTIEQUAL (stack, 0xfffffffffffffdb0, 8) , (stack, 0xfffffffffffffdb0, 8)]
[(unique, 0x1000053b, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(unique, 0x100009f1, 4) COPY (unique, 0x10000507, 4), (unique, 0x10000507, 4) MULTIEQUAL (unique, 0x100009d1, 4) , (unique, 0x100009d5, 4)]
[(unique, 0x100009f5, 8) COPY (unique, 0x10000523, 8), (unique, 0x10000523, 8) MULTIEQUAL (unique, 0x100009d9, 8) , (unique, 0x100009e1, 8)]
[ ---  CBRANCH (ram, 0x1e730f, 1) , (unique, 0x100004b2, 1), (unique, 0x100004b2, 1) INT_EQUAL (unique, 0x100004b3, 8) , (const, 0x0, 8), (unique, 0x100004b3, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x1e7aba, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x1000051b, 8) , (const, 0x0, 8)]
[(stack, 0xfffffffffffffcf8, 4) COPY (unique, 0x10000503, 4)]
[(unique, 0x100008b1, 8) COPY (register, 0x20, 8)]
[(unique, 0x10000961, 4) COPY (register, 0x0, 4), (register, 0x0, 4) INT_AND (unique, 0x1000050b, 4) , (const, 0x10, 4)]
[ ---  BRANCH (ram, 0x1e7677, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (unique, 0x1000053b, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffdb0, 8) MULTIEQUAL (unique, 0x10000533, 8) , (stack, 0xfffffffffffffdb0, 8) , (stack, 0xfffffffffffffdb0, 8) , (stack, 0xfffffffffffffdb0, 8)]
[(stack, 0xfffffffffffffda8, 8) MULTIEQUAL (unique, 0x1000052b, 8) , (stack, 0xfffffffffffffda8, 8) , (stack, 0xfffffffffffffda8, 8) , (stack, 0xfffffffffffffda8, 8)]
[(stack, 0xfffffffffffffd10, 8) MULTIEQUAL (unique, 0x100009f5, 8) , (stack, 0xfffffffffffffd10, 8) , (stack, 0xfffffffffffffd10, 8) , (stack, 0xfffffffffffffd10, 8)]
[(stack, 0xfffffffffffffd08, 8) MULTIEQUAL (unique, 0x1000051b, 8) , (stack, 0xfffffffffffffd08, 8) , (stack, 0xfffffffffffffd08, 8) , (stack, 0xfffffffffffffd08, 8)]
[(stack, 0xfffffffffffffd00, 8) MULTIEQUAL (unique, 0x10000513, 8) , (stack, 0xfffffffffffffd00, 8) , (stack, 0xfffffffffffffd00, 8) , (stack, 0xfffffffffffffd00, 8)]
[(stack, 0xfffffffffffffcfc, 4) MULTIEQUAL (unique, 0x1000050f, 4) , (stack, 0xfffffffffffffcfc, 4) , (stack, 0xfffffffffffffcfc, 4) , (stack, 0xfffffffffffffcfc, 4)]
[(stack, 0xfffffffffffffcf4, 4) MULTIEQUAL (unique, 0x100009f1, 4) , (stack, 0xfffffffffffffcf4, 4) , (stack, 0xfffffffffffffcf4, 4) , (stack, 0xfffffffffffffcf4, 4)]
[(stack, 0xfffffffffffffce8, 8) MULTIEQUAL (unique, 0x100004fb, 8) , (stack, 0xfffffffffffffce8, 8) , (stack, 0xfffffffffffffce8, 8) , (stack, 0xfffffffffffffce8, 8)]
[(stack, 0xfffffffffffffce0, 8) MULTIEQUAL (unique, 0x100004f3, 8) , (stack, 0xfffffffffffffce0, 8) , (stack, 0xfffffffffffffce0, 8) , (stack, 0xfffffffffffffce0, 8)]
[(stack, 0xfffffffffffffcd8, 8) MULTIEQUAL (unique, 0x100004eb, 8) , (stack, 0xfffffffffffffcd8, 8) , (stack, 0xfffffffffffffcd8, 8) , (stack, 0xfffffffffffffcd8, 8)]
[(stack, 0xfffffffffffffcd0, 8) MULTIEQUAL (unique, 0x100004e3, 8) , (stack, 0xfffffffffffffcd0, 8) , (stack, 0xfffffffffffffcd0, 8) , (stack, 0xfffffffffffffcd0, 8)]
[(stack, 0xfffffffffffffcc8, 8) MULTIEQUAL (unique, 0x100004db, 8) , (stack, 0xfffffffffffffcc8, 8) , (stack, 0xfffffffffffffcc8, 8) , (stack, 0xfffffffffffffcc8, 8)]
[(stack, 0xfffffffffffffcc0, 8) MULTIEQUAL (unique, 0x100004d3, 8) , (stack, 0xfffffffffffffcc0, 8) , (stack, 0xfffffffffffffcc0, 8) , (stack, 0xfffffffffffffcc0, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (unique, 0x100004c3, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (unique, 0x100004bb, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb8, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8) , (register, 0xb8, 8) , (register, 0xb8, 8)]
[(register, 0xa0, 8) MULTIEQUAL (register, 0xa0, 8) , (register, 0xa0, 8) , (register, 0xa0, 8) , (register, 0xa0, 8)]
[(register, 0x18, 8) MULTIEQUAL (register, 0x18, 8) , (unique, 0x3200, 8) , (unique, 0x3200, 8) , (unique, 0x3200, 8)]
[(stack, 0xfffffffffffffcf0, 4) COPY (stack, 0xfffffffffffffcf8, 4), (stack, 0xfffffffffffffcf8, 4) MULTIEQUAL (stack, 0xfffffffffffffcf8, 4) , (stack, 0xfffffffffffffcf8, 4) , (stack, 0xfffffffffffffcf8, 4) , (stack, 0xfffffffffffffcf8, 4)]
[(unique, 0x100008e1, 8) COPY (register, 0x20, 8), (register, 0x20, 8) MULTIEQUAL (unique, 0x100008b1, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x1e752a, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) MULTIEQUAL (unique, 0x10000961, 4) , (unique, 0x10000965, 4) , (unique, 0x10000969, 4) , (stack, 0xfffffffffffffd08, 4)]
[(register, 0xb8, 8) MULTIEQUAL (register, 0xb8, 8) , (register, 0xb8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000b55, 8) , (const, 0x1e7536, 8), (unique, 0x10000b55, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8), (register, 0x20, 8) MULTIEQUAL (unique, 0x100008e1, 8) , (unique, 0x100008e9, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000b65, 8) , (const, 0x1e7542, 8), (unique, 0x10000b65, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8), (register, 0x20, 8) MULTIEQUAL (unique, 0x100008e1, 8) , (unique, 0x100008e9, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x6c7, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x6c1, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x6c7, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x6c1, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(stack, 0xfffffffffffffcc0, 8) INDIRECT (stack, 0xfffffffffffffcc0, 8) , (const, 0x6c7, 4), (stack, 0xfffffffffffffcc0, 8) INDIRECT (stack, 0xfffffffffffffcc0, 8) , (const, 0x6c6, 4), (stack, 0xfffffffffffffcc0, 8) INDIRECT (stack, 0xfffffffffffffcc0, 8) , (const, 0x6c1, 4), (stack, 0xfffffffffffffcc0, 8) INDIRECT (stack, 0xfffffffffffffcc0, 8) , (const, 0x6c0, 4), (stack, 0xfffffffffffffcc0, 8) MULTIEQUAL (stack, 0xfffffffffffffcc0, 8) , (stack, 0xfffffffffffffcc0, 8)]
[(stack, 0xfffffffffffffcc8, 8) INDIRECT (stack, 0xfffffffffffffcc8, 8) , (const, 0x6c7, 4), (stack, 0xfffffffffffffcc8, 8) INDIRECT (stack, 0xfffffffffffffcc8, 8) , (const, 0x6c6, 4), (stack, 0xfffffffffffffcc8, 8) INDIRECT (stack, 0xfffffffffffffcc8, 8) , (const, 0x6c1, 4), (stack, 0xfffffffffffffcc8, 8) INDIRECT (stack, 0xfffffffffffffcc8, 8) , (const, 0x6c0, 4), (stack, 0xfffffffffffffcc8, 8) MULTIEQUAL (stack, 0xfffffffffffffcc8, 8) , (stack, 0xfffffffffffffcc8, 8)]
[(stack, 0xfffffffffffffcd0, 8) INDIRECT (stack, 0xfffffffffffffcd0, 8) , (const, 0x6c7, 4), (stack, 0xfffffffffffffcd0, 8) INDIRECT (stack, 0xfffffffffffffcd0, 8) , (const, 0x6c6, 4), (stack, 0xfffffffffffffcd0, 8) INDIRECT (stack, 0xfffffffffffffcd0, 8) , (const, 0x6c1, 4), (stack, 0xfffffffffffffcd0, 8) INDIRECT (stack, 0xfffffffffffffcd0, 8) , (const, 0x6c0, 4), (stack, 0xfffffffffffffcd0, 8) MULTIEQUAL (stack, 0xfffffffffffffcd0, 8) , (stack, 0xfffffffffffffcd0, 8)]
[(stack, 0xfffffffffffffcd8, 8) INDIRECT (stack, 0xfffffffffffffcd8, 8) , (const, 0x6c7, 4), (stack, 0xfffffffffffffcd8, 8) INDIRECT (stack, 0xfffffffffffffcd8, 8) , (const, 0x6c6, 4), (stack, 0xfffffffffffffcd8, 8) INDIRECT (stack, 0xfffffffffffffcd8, 8) , (const, 0x6c1, 4), (stack, 0xfffffffffffffcd8, 8) INDIRECT (stack, 0xfffffffffffffcd8, 8) , (const, 0x6c0, 4), (stack, 0xfffffffffffffcd8, 8) MULTIEQUAL (stack, 0xfffffffffffffcd8, 8) , (stack, 0xfffffffffffffcd8, 8)]
[(stack, 0xfffffffffffffce0, 8) INDIRECT (stack, 0xfffffffffffffce0, 8) , (const, 0x6c7, 4), (stack, 0xfffffffffffffce0, 8) INDIRECT (stack, 0xfffffffffffffce0, 8) , (const, 0x6c6, 4), (stack, 0xfffffffffffffce0, 8) INDIRECT (stack, 0xfffffffffffffce0, 8) , (const, 0x6c1, 4), (stack, 0xfffffffffffffce0, 8) INDIRECT (stack, 0xfffffffffffffce0, 8) , (const, 0x6c0, 4), (stack, 0xfffffffffffffce0, 8) MULTIEQUAL (stack, 0xfffffffffffffce0, 8) , (stack, 0xfffffffffffffce0, 8)]
[(stack, 0xfffffffffffffce8, 8) INDIRECT (stack, 0xfffffffffffffce8, 8) , (const, 0x6c7, 4), (stack, 0xfffffffffffffce8, 8) INDIRECT (stack, 0xfffffffffffffce8, 8) , (const, 0x6c6, 4), (stack, 0xfffffffffffffce8, 8) INDIRECT (stack, 0xfffffffffffffce8, 8) , (const, 0x6c1, 4), (stack, 0xfffffffffffffce8, 8) INDIRECT (stack, 0xfffffffffffffce8, 8) , (const, 0x6c0, 4), (stack, 0xfffffffffffffce8, 8) MULTIEQUAL (stack, 0xfffffffffffffce8, 8) , (stack, 0xfffffffffffffce8, 8)]
[(stack, 0xfffffffffffffcf0, 4) INDIRECT (stack, 0xfffffffffffffcf0, 4) , (const, 0x6c7, 4), (stack, 0xfffffffffffffcf0, 4) INDIRECT (stack, 0xfffffffffffffcf0, 4) , (const, 0x6c6, 4), (stack, 0xfffffffffffffcf0, 4) INDIRECT (stack, 0xfffffffffffffcf0, 4) , (const, 0x6c1, 4), (stack, 0xfffffffffffffcf0, 4) INDIRECT (stack, 0xfffffffffffffcf0, 4) , (const, 0x6c0, 4), (stack, 0xfffffffffffffcf0, 4) MULTIEQUAL (stack, 0xfffffffffffffcf0, 4) , (stack, 0xfffffffffffffcf0, 4)]
[(stack, 0xfffffffffffffcf4, 4) INDIRECT (stack, 0xfffffffffffffcf4, 4) , (const, 0x6c7, 4), (stack, 0xfffffffffffffcf4, 4) INDIRECT (stack, 0xfffffffffffffcf4, 4) , (const, 0x6c6, 4), (stack, 0xfffffffffffffcf4, 4) INDIRECT (stack, 0xfffffffffffffcf4, 4) , (const, 0x6c1, 4), (stack, 0xfffffffffffffcf4, 4) INDIRECT (stack, 0xfffffffffffffcf4, 4) , (const, 0x6c0, 4), (stack, 0xfffffffffffffcf4, 4) MULTIEQUAL (stack, 0xfffffffffffffcf4, 4) , (stack, 0xfffffffffffffcf4, 4)]
[(stack, 0xfffffffffffffcf8, 4) INDIRECT (stack, 0xfffffffffffffcf8, 4) , (const, 0x6c7, 4), (stack, 0xfffffffffffffcf8, 4) INDIRECT (stack, 0xfffffffffffffcf8, 4) , (const, 0x6c6, 4), (stack, 0xfffffffffffffcf8, 4) INDIRECT (stack, 0xfffffffffffffcf8, 4) , (const, 0x6c1, 4), (stack, 0xfffffffffffffcf8, 4) INDIRECT (stack, 0xfffffffffffffcf8, 4) , (const, 0x6c0, 4), (stack, 0xfffffffffffffcf8, 4) MULTIEQUAL (stack, 0xfffffffffffffcf8, 4) , (stack, 0xfffffffffffffcf8, 4)]
[(stack, 0xfffffffffffffcfc, 4) INDIRECT (stack, 0xfffffffffffffcfc, 4) , (const, 0x6c7, 4), (stack, 0xfffffffffffffcfc, 4) INDIRECT (stack, 0xfffffffffffffcfc, 4) , (const, 0x6c6, 4), (stack, 0xfffffffffffffcfc, 4) INDIRECT (stack, 0xfffffffffffffcfc, 4) , (const, 0x6c1, 4), (stack, 0xfffffffffffffcfc, 4) INDIRECT (stack, 0xfffffffffffffcfc, 4) , (const, 0x6c0, 4), (stack, 0xfffffffffffffcfc, 4) MULTIEQUAL (stack, 0xfffffffffffffcfc, 4) , (stack, 0xfffffffffffffcfc, 4)]
[(stack, 0xfffffffffffffd00, 8) INDIRECT (stack, 0xfffffffffffffd00, 8) , (const, 0x6c7, 4), (stack, 0xfffffffffffffd00, 8) INDIRECT (stack, 0xfffffffffffffd00, 8) , (const, 0x6c6, 4), (stack, 0xfffffffffffffd00, 8) INDIRECT (stack, 0xfffffffffffffd00, 8) , (const, 0x6c1, 4), (stack, 0xfffffffffffffd00, 8) INDIRECT (stack, 0xfffffffffffffd00, 8) , (const, 0x6c0, 4), (stack, 0xfffffffffffffd00, 8) MULTIEQUAL (stack, 0xfffffffffffffd00, 8) , (stack, 0xfffffffffffffd00, 8)]
[(stack, 0xfffffffffffffd08, 8) INDIRECT (stack, 0xfffffffffffffd08, 8) , (const, 0x6c7, 4), (stack, 0xfffffffffffffd08, 8) INDIRECT (stack, 0xfffffffffffffd08, 8) , (const, 0x6c6, 4), (stack, 0xfffffffffffffd08, 8) INDIRECT (stack, 0xfffffffffffffd08, 8) , (const, 0x6c1, 4), (stack, 0xfffffffffffffd08, 8) INDIRECT (stack, 0xfffffffffffffd08, 8) , (const, 0x6c0, 4), (stack, 0xfffffffffffffd08, 8) MULTIEQUAL (stack, 0xfffffffffffffd08, 8) , (stack, 0xfffffffffffffd08, 8)]
[(stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x6c7, 4), (stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x6c6, 4), (stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x6c1, 4), (stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x6c0, 4), (stack, 0xfffffffffffffda8, 8) MULTIEQUAL (stack, 0xfffffffffffffda8, 8) , (stack, 0xfffffffffffffda8, 8)]
[(stack, 0xfffffffffffffdb0, 8) INDIRECT (stack, 0xfffffffffffffdb0, 8) , (const, 0x6c7, 4), (stack, 0xfffffffffffffdb0, 8) INDIRECT (stack, 0xfffffffffffffdb0, 8) , (const, 0x6c6, 4), (stack, 0xfffffffffffffdb0, 8) INDIRECT (stack, 0xfffffffffffffdb0, 8) , (const, 0x6c1, 4), (stack, 0xfffffffffffffdb0, 8) INDIRECT (stack, 0xfffffffffffffdb0, 8) , (const, 0x6c0, 4), (stack, 0xfffffffffffffdb0, 8) MULTIEQUAL (stack, 0xfffffffffffffdb0, 8) , (stack, 0xfffffffffffffdb0, 8)]
[(unique, 0x100007f1, 8) COPY (stack, 0xfffffffffffffd10, 8), (stack, 0xfffffffffffffd10, 8) INDIRECT (stack, 0xfffffffffffffd10, 8) , (const, 0x6c7, 4), (stack, 0xfffffffffffffd10, 8) INDIRECT (stack, 0xfffffffffffffd10, 8) , (const, 0x6c6, 4), (stack, 0xfffffffffffffd10, 8) INDIRECT (stack, 0xfffffffffffffd10, 8) , (const, 0x6c1, 4), (stack, 0xfffffffffffffd10, 8) INDIRECT (stack, 0xfffffffffffffd10, 8) , (const, 0x6c0, 4), (stack, 0xfffffffffffffd10, 8) MULTIEQUAL (stack, 0xfffffffffffffd10, 8) , (stack, 0xfffffffffffffd10, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x6d5, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x6c7, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x6c6, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x6c1, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x6c0, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3a00, 8) , (register, 0x0, 8), (unique, 0x3a00, 8) PTRADD (register, 0x18, 8) , (unique, 0x1000065f, 8) , (const, 0x8, 8), (unique, 0x1000065f, 8) CAST (unique, 0x10000b7d, 8), (unique, 0x10000b7d, 8) INT_ADD (unique, 0x10000b75, 8) , (const, 0x2, 8), (unique, 0x10000b75, 8) CAST (register, 0xa0, 8), (register, 0x0, 8) CAST (unique, 0x10000b6d, 8), (unique, 0x10000b6d, 8) CALL (ram, 0x1212c0, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) INT_ADD (register, 0x0, 8) , (const, 0x1, 8), (register, 0x0, 8) CALL (ram, 0x121100, 8) , (unique, 0x10000b5d, 8), (unique, 0x10000b5d, 8) CAST (unique, 0x100007e9, 8), (unique, 0x100007e9, 8) COPY (stack, 0xfffffffffffffd10, 8), (register, 0x18, 8) MULTIEQUAL (register, 0x18, 8) , (unique, 0x3200, 8), (register, 0xa0, 8) MULTIEQUAL (register, 0xa0, 8) , (register, 0xa0, 8), (stack, 0xfffffffffffffd10, 8) MULTIEQUAL (stack, 0xfffffffffffffd10, 8) , (stack, 0xfffffffffffffd10, 8)]
[ ---  CBRANCH (ram, 0x1e7440, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10000b6d, 8), (unique, 0x10000b6d, 8) CALL (ram, 0x1212c0, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) INT_ADD (register, 0x0, 8) , (const, 0x1, 8), (register, 0x0, 8) CALL (ram, 0x121100, 8) , (unique, 0x10000b5d, 8), (unique, 0x10000b5d, 8) CAST (unique, 0x100007e9, 8), (unique, 0x100007e9, 8) COPY (stack, 0xfffffffffffffd10, 8), (stack, 0xfffffffffffffd10, 8) MULTIEQUAL (stack, 0xfffffffffffffd10, 8) , (stack, 0xfffffffffffffd10, 8)]
[(register, 0xa0, 8) CAST (unique, 0x10000b8d, 8), (unique, 0x10000b8d, 8) INT_ADD (unique, 0x10000b85, 8) , (const, 0x1, 8), (unique, 0x10000b85, 8) CAST (register, 0xa0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000b95, 8) , (const, 0x1e7566, 8), (unique, 0x10000b95, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x6e7, 4)]
[(stack, 0xfffffffffffffcc0, 8) INDIRECT (stack, 0xfffffffffffffcc0, 8) , (const, 0x6e7, 4), (stack, 0xfffffffffffffcc0, 8) INDIRECT (stack, 0xfffffffffffffcc0, 8) , (const, 0x6e6, 4)]
[(stack, 0xfffffffffffffcc8, 8) INDIRECT (stack, 0xfffffffffffffcc8, 8) , (const, 0x6e7, 4), (stack, 0xfffffffffffffcc8, 8) INDIRECT (stack, 0xfffffffffffffcc8, 8) , (const, 0x6e6, 4)]
[(stack, 0xfffffffffffffcd0, 8) INDIRECT (stack, 0xfffffffffffffcd0, 8) , (const, 0x6e7, 4), (stack, 0xfffffffffffffcd0, 8) INDIRECT (stack, 0xfffffffffffffcd0, 8) , (const, 0x6e6, 4)]
[(stack, 0xfffffffffffffcd8, 8) INDIRECT (stack, 0xfffffffffffffcd8, 8) , (const, 0x6e7, 4), (stack, 0xfffffffffffffcd8, 8) INDIRECT (stack, 0xfffffffffffffcd8, 8) , (const, 0x6e6, 4)]
[(stack, 0xfffffffffffffce0, 8) INDIRECT (stack, 0xfffffffffffffce0, 8) , (const, 0x6e7, 4), (stack, 0xfffffffffffffce0, 8) INDIRECT (stack, 0xfffffffffffffce0, 8) , (const, 0x6e6, 4)]
[(stack, 0xfffffffffffffce8, 8) INDIRECT (stack, 0xfffffffffffffce8, 8) , (const, 0x6e7, 4), (stack, 0xfffffffffffffce8, 8) INDIRECT (stack, 0xfffffffffffffce8, 8) , (const, 0x6e6, 4)]
[(stack, 0xfffffffffffffcf0, 4) INDIRECT (stack, 0xfffffffffffffcf0, 4) , (const, 0x6e7, 4), (stack, 0xfffffffffffffcf0, 4) INDIRECT (stack, 0xfffffffffffffcf0, 4) , (const, 0x6e6, 4)]
[(stack, 0xfffffffffffffcf4, 4) INDIRECT (stack, 0xfffffffffffffcf4, 4) , (const, 0x6e7, 4), (stack, 0xfffffffffffffcf4, 4) INDIRECT (stack, 0xfffffffffffffcf4, 4) , (const, 0x6e6, 4)]
[(stack, 0xfffffffffffffcf8, 4) INDIRECT (stack, 0xfffffffffffffcf8, 4) , (const, 0x6e7, 4), (stack, 0xfffffffffffffcf8, 4) INDIRECT (stack, 0xfffffffffffffcf8, 4) , (const, 0x6e6, 4)]
[(stack, 0xfffffffffffffcfc, 4) INDIRECT (stack, 0xfffffffffffffcfc, 4) , (const, 0x6e7, 4), (stack, 0xfffffffffffffcfc, 4) INDIRECT (stack, 0xfffffffffffffcfc, 4) , (const, 0x6e6, 4)]
[(stack, 0xfffffffffffffd00, 8) INDIRECT (stack, 0xfffffffffffffd00, 8) , (const, 0x6e7, 4), (stack, 0xfffffffffffffd00, 8) INDIRECT (stack, 0xfffffffffffffd00, 8) , (const, 0x6e6, 4)]
[(stack, 0xfffffffffffffd08, 8) INDIRECT (stack, 0xfffffffffffffd08, 8) , (const, 0x6e7, 4), (stack, 0xfffffffffffffd08, 8) INDIRECT (stack, 0xfffffffffffffd08, 8) , (const, 0x6e6, 4)]
[(stack, 0xfffffffffffffd10, 8) INDIRECT (stack, 0xfffffffffffffd10, 8) , (const, 0x6e7, 4), (stack, 0xfffffffffffffd10, 8) INDIRECT (stack, 0xfffffffffffffd10, 8) , (const, 0x6e6, 4)]
[(stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x6e7, 4), (stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x6e6, 4)]
[(stack, 0xfffffffffffffdb0, 8) INDIRECT (stack, 0xfffffffffffffdb0, 8) , (const, 0x6e7, 4), (stack, 0xfffffffffffffdb0, 8) INDIRECT (stack, 0xfffffffffffffdb0, 8) , (const, 0x6e6, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x6e7, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x6e6, 4)]
[(stack, 0xfffffffffffffd08, 8) COPY (const, 0x1, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x6ec, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x6e7, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x0, 8) , (const, 0x0, 1), (register, 0x0, 8) CAST (unique, 0x10000b9d, 8), (unique, 0x10000b9d, 8) CALL (ram, 0x121230, 8) , (register, 0x0, 8) , (unique, 0x100007f1, 8) , (register, 0x0, 8)]
[ ---  BRANCH (ram, 0x1e773e, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (unique, 0x1000053b, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffdb0, 8) MULTIEQUAL (unique, 0x10000533, 8) , (stack, 0xfffffffffffffdb0, 8)]
[(stack, 0xfffffffffffffda8, 8) MULTIEQUAL (unique, 0x1000052b, 8) , (stack, 0xfffffffffffffda8, 8)]
[(stack, 0xfffffffffffffd10, 8) MULTIEQUAL (unique, 0x100009f5, 8) , (stack, 0xfffffffffffffd10, 8)]
[(stack, 0xfffffffffffffd00, 8) MULTIEQUAL (unique, 0x10000513, 8) , (stack, 0xfffffffffffffd00, 8)]
[(stack, 0xfffffffffffffcfc, 4) MULTIEQUAL (unique, 0x1000050f, 4) , (stack, 0xfffffffffffffcfc, 4)]
[(stack, 0xfffffffffffffcf8, 4) MULTIEQUAL (unique, 0x1000050b, 4) , (stack, 0xfffffffffffffcf8, 4)]
[(stack, 0xfffffffffffffcf4, 4) MULTIEQUAL (unique, 0x100009f1, 4) , (stack, 0xfffffffffffffcf4, 4)]
[(stack, 0xfffffffffffffcf0, 4) MULTIEQUAL (unique, 0x10000503, 4) , (stack, 0xfffffffffffffcf0, 4)]
[(stack, 0xfffffffffffffce8, 8) MULTIEQUAL (unique, 0x100004fb, 8) , (stack, 0xfffffffffffffce8, 8)]
[(stack, 0xfffffffffffffce0, 8) MULTIEQUAL (unique, 0x100004f3, 8) , (stack, 0xfffffffffffffce0, 8)]
[(stack, 0xfffffffffffffcd8, 8) MULTIEQUAL (unique, 0x100004eb, 8) , (stack, 0xfffffffffffffcd8, 8)]
[(stack, 0xfffffffffffffcd0, 8) MULTIEQUAL (unique, 0x100004e3, 8) , (stack, 0xfffffffffffffcd0, 8)]
[(stack, 0xfffffffffffffcc8, 8) MULTIEQUAL (unique, 0x100004db, 8) , (stack, 0xfffffffffffffcc8, 8)]
[(stack, 0xfffffffffffffcc0, 8) MULTIEQUAL (unique, 0x100004d3, 8) , (stack, 0xfffffffffffffcc0, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (unique, 0x100004c3, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (unique, 0x100004bb, 8) , (register, 0x110, 8)]
[(register, 0xb8, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0xb8, 8)]
[(register, 0xa0, 8) MULTIEQUAL (register, 0xa0, 8) , (register, 0xa0, 8)]
[(register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8)]
[(register, 0x18, 8) MULTIEQUAL (register, 0x18, 8) , (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x1e7440, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESSEQUAL (unique, 0x3a00, 8) , (register, 0x0, 8), (register, 0x0, 8) INT_SUB (const, 0x1fffffffffffffff, 8) , (unique, 0xbd80, 8), (unique, 0x3a00, 8) INT_ADD (unique, 0x3880, 8) , (stack, 0xfffffffffffffd08, 8), (unique, 0x3880, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x1, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x80, 8) , (const, 0x2, 8) , (const, 0x8, 8), (stack, 0xfffffffffffffd08, 8) MULTIEQUAL (unique, 0x1000051b, 8) , (stack, 0xfffffffffffffd08, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000bad, 8) , (const, 0x1e7780, 8), (unique, 0x10000bad, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x472, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x472, 4)]
[(stack, 0xfffffffffffffcc0, 8) INDIRECT (stack, 0xfffffffffffffcc0, 8) , (const, 0x472, 4), (stack, 0xfffffffffffffcc0, 8) INDIRECT (stack, 0xfffffffffffffcc0, 8) , (const, 0x471, 4)]
[(stack, 0xfffffffffffffcc8, 8) INDIRECT (stack, 0xfffffffffffffcc8, 8) , (const, 0x472, 4), (stack, 0xfffffffffffffcc8, 8) INDIRECT (stack, 0xfffffffffffffcc8, 8) , (const, 0x471, 4)]
[(stack, 0xfffffffffffffcd0, 8) INDIRECT (stack, 0xfffffffffffffcd0, 8) , (const, 0x472, 4), (stack, 0xfffffffffffffcd0, 8) INDIRECT (stack, 0xfffffffffffffcd0, 8) , (const, 0x471, 4)]
[(stack, 0xfffffffffffffcd8, 8) INDIRECT (stack, 0xfffffffffffffcd8, 8) , (const, 0x472, 4), (stack, 0xfffffffffffffcd8, 8) INDIRECT (stack, 0xfffffffffffffcd8, 8) , (const, 0x471, 4)]
[(stack, 0xfffffffffffffce0, 8) INDIRECT (stack, 0xfffffffffffffce0, 8) , (const, 0x472, 4), (stack, 0xfffffffffffffce0, 8) INDIRECT (stack, 0xfffffffffffffce0, 8) , (const, 0x471, 4)]
[(stack, 0xfffffffffffffce8, 8) INDIRECT (stack, 0xfffffffffffffce8, 8) , (const, 0x472, 4), (stack, 0xfffffffffffffce8, 8) INDIRECT (stack, 0xfffffffffffffce8, 8) , (const, 0x471, 4)]
[(stack, 0xfffffffffffffcf0, 4) INDIRECT (stack, 0xfffffffffffffcf0, 4) , (const, 0x472, 4), (stack, 0xfffffffffffffcf0, 4) INDIRECT (stack, 0xfffffffffffffcf0, 4) , (const, 0x471, 4)]
[(stack, 0xfffffffffffffcf4, 4) INDIRECT (stack, 0xfffffffffffffcf4, 4) , (const, 0x472, 4), (stack, 0xfffffffffffffcf4, 4) INDIRECT (stack, 0xfffffffffffffcf4, 4) , (const, 0x471, 4)]
[(stack, 0xfffffffffffffcf8, 4) INDIRECT (stack, 0xfffffffffffffcf8, 4) , (const, 0x472, 4), (stack, 0xfffffffffffffcf8, 4) INDIRECT (stack, 0xfffffffffffffcf8, 4) , (const, 0x471, 4)]
[(stack, 0xfffffffffffffcfc, 4) INDIRECT (stack, 0xfffffffffffffcfc, 4) , (const, 0x472, 4), (stack, 0xfffffffffffffcfc, 4) INDIRECT (stack, 0xfffffffffffffcfc, 4) , (const, 0x471, 4)]
[(stack, 0xfffffffffffffd00, 8) INDIRECT (stack, 0xfffffffffffffd00, 8) , (const, 0x472, 4), (stack, 0xfffffffffffffd00, 8) INDIRECT (stack, 0xfffffffffffffd00, 8) , (const, 0x471, 4)]
[(stack, 0xfffffffffffffd08, 8) INDIRECT (stack, 0xfffffffffffffd08, 8) , (const, 0x472, 4), (stack, 0xfffffffffffffd08, 8) INDIRECT (stack, 0xfffffffffffffd08, 8) , (const, 0x471, 4)]
[(stack, 0xfffffffffffffd10, 8) INDIRECT (stack, 0xfffffffffffffd10, 8) , (const, 0x472, 4), (stack, 0xfffffffffffffd10, 8) INDIRECT (stack, 0xfffffffffffffd10, 8) , (const, 0x471, 4)]
[(stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x472, 4), (stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x471, 4)]
[(stack, 0xfffffffffffffdb0, 8) INDIRECT (stack, 0xfffffffffffffdb0, 8) , (const, 0x472, 4), (stack, 0xfffffffffffffdb0, 8) INDIRECT (stack, 0xfffffffffffffdb0, 8) , (const, 0x471, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x472, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x471, 4)]
[ ---  CBRANCH (ram, 0x1e7440, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x121020, 8) , (unique, 0xbd80, 8) , (register, 0x30, 8), (register, 0x30, 8) INT_MULT (register, 0x30, 8) , (const, 0x8, 8), (unique, 0xbd80, 8) CAST (unique, 0x10000ba5, 8), (unique, 0x10000ba5, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x80, 8) , (const, 0x1, 8) , (const, 0x8, 8), (register, 0x30, 8) INT_ADD (unique, 0x3a00, 8) , (stack, 0xfffffffffffffd08, 8), (unique, 0x3a00, 8) INT_ADD (unique, 0x3880, 8) , (unique, 0xbd80, 8), (unique, 0x3880, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x1, 8)]
[(stack, 0xfffffffffffffd10, 8) COPY (register, 0xb8, 8)]
[(unique, 0x10000859, 8) COPY (register, 0x18, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffdb0, 8) MULTIEQUAL (stack, 0xfffffffffffffdb0, 8) , (stack, 0xfffffffffffffdb0, 8) , (stack, 0xfffffffffffffdb0, 8)]
[(stack, 0xfffffffffffffda8, 8) MULTIEQUAL (stack, 0xfffffffffffffda8, 8) , (stack, 0xfffffffffffffda8, 8) , (stack, 0xfffffffffffffda8, 8)]
[(stack, 0xfffffffffffffd10, 8) MULTIEQUAL (stack, 0xfffffffffffffd10, 8) , (stack, 0xfffffffffffffd10, 8) , (stack, 0xfffffffffffffd10, 8)]
[(stack, 0xfffffffffffffd08, 8) MULTIEQUAL (stack, 0xfffffffffffffd08, 8) , (stack, 0xfffffffffffffd08, 8) , (stack, 0xfffffffffffffd08, 8)]
[(stack, 0xfffffffffffffd00, 8) MULTIEQUAL (stack, 0xfffffffffffffd00, 8) , (stack, 0xfffffffffffffd00, 8) , (stack, 0xfffffffffffffd00, 8)]
[(stack, 0xfffffffffffffcfc, 4) MULTIEQUAL (stack, 0xfffffffffffffcfc, 4) , (stack, 0xfffffffffffffcfc, 4) , (stack, 0xfffffffffffffcfc, 4)]
[(stack, 0xfffffffffffffcf8, 4) MULTIEQUAL (stack, 0xfffffffffffffcf8, 4) , (stack, 0xfffffffffffffcf8, 4) , (stack, 0xfffffffffffffcf8, 4)]
[(stack, 0xfffffffffffffcf4, 4) MULTIEQUAL (stack, 0xfffffffffffffcf4, 4) , (stack, 0xfffffffffffffcf4, 4) , (stack, 0xfffffffffffffcf4, 4)]
[(stack, 0xfffffffffffffcf0, 4) MULTIEQUAL (stack, 0xfffffffffffffcf0, 4) , (stack, 0xfffffffffffffcf0, 4) , (stack, 0xfffffffffffffcf0, 4)]
[(stack, 0xfffffffffffffce8, 8) MULTIEQUAL (stack, 0xfffffffffffffce8, 8) , (stack, 0xfffffffffffffce8, 8) , (stack, 0xfffffffffffffce8, 8)]
[(stack, 0xfffffffffffffce0, 8) MULTIEQUAL (stack, 0xfffffffffffffce0, 8) , (stack, 0xfffffffffffffce0, 8) , (stack, 0xfffffffffffffce0, 8)]
[(stack, 0xfffffffffffffcd8, 8) MULTIEQUAL (stack, 0xfffffffffffffcd8, 8) , (stack, 0xfffffffffffffcd8, 8) , (stack, 0xfffffffffffffcd8, 8)]
[(stack, 0xfffffffffffffcd0, 8) MULTIEQUAL (stack, 0xfffffffffffffcd0, 8) , (stack, 0xfffffffffffffcd0, 8) , (stack, 0xfffffffffffffcd0, 8)]
[(stack, 0xfffffffffffffcc8, 8) MULTIEQUAL (stack, 0xfffffffffffffcc8, 8) , (stack, 0xfffffffffffffcc8, 8) , (stack, 0xfffffffffffffcc8, 8)]
[(stack, 0xfffffffffffffcc0, 8) MULTIEQUAL (stack, 0xfffffffffffffcc0, 8) , (stack, 0xfffffffffffffcc0, 8) , (stack, 0xfffffffffffffcc0, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x18, 8) MULTIEQUAL (unique, 0x10000859, 8) , (unique, 0x10000861, 8) , (unique, 0x10000869, 8)]
[ ---  CBRANCH (ram, 0x1e7885, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xa0, 8) , (const, 0x0, 8), (register, 0xa0, 8) MULTIEQUAL (register, 0xa0, 8) , (unique, 0xbd80, 8) , (unique, 0xbd80, 8)]
[ ---  CBRANCH (ram, 0x1e7a0c, 1) , (unique, 0x10000311, 1), (unique, 0x10000311, 1) BOOL_AND (register, 0x200, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (unique, 0x3b80, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x4, 8) , (const, 0x8, 8), (register, 0x200, 1) INT_LESS (unique, 0x3100, 8) , (unique, 0x3a00, 8), (unique, 0x3b80, 8) CAST (unique, 0x10000bcd, 8), (unique, 0x10000bcd, 8) INT_ADD (unique, 0x10000bc5, 8) , (unique, 0x3680, 8), (unique, 0x10000bc5, 8) CAST (register, 0x0, 8), (unique, 0x3a00, 8) CAST (unique, 0x10000bbd, 8), (unique, 0x10000bbd, 8) INT_ADD (unique, 0x10000bb5, 8) , (unique, 0x100006cf, 8), (unique, 0x10000bb5, 8) CAST (register, 0x0, 8), (unique, 0x100006cf, 8) INT_ADD (unique, 0x3900, 8) , (const, 0x10, 8), (unique, 0x3900, 8) INT_MULT (unique, 0x3400, 8) , (const, 0x8, 8), (unique, 0x3680, 8) INT_MULT (unique, 0x3400, 8) , (const, 0x8, 8), (unique, 0x3400, 8) INT_ADD (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x2, 8) , (const, 0x8, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x80, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x1e7a0c, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (register, 0xa0, 8) , (unique, 0x10000567, 8), (unique, 0x10000567, 8) PTRSUB (const, 0x0, 8) , (const, 0x19, 8)]
[(register, 0x0, 8) COPY (const, 0x0, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x67c, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3400, 8) , (unique, 0xbd80, 8), (unique, 0x3400, 8) PTRADD (unique, 0x3b80, 8) , (unique, 0x10000be5, 8) , (const, 0x8, 8), (unique, 0x10000be5, 8) CAST (register, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) PTRADD (register, 0x18, 8) , (unique, 0x1000076f, 8) , (const, 0x8, 8), (unique, 0x1000076f, 8) CAST (unique, 0x10000bdd, 8), (unique, 0x10000bdd, 8) INT_ADD (unique, 0x10000bd5, 8) , (const, 0x2, 8), (unique, 0x10000bd5, 8) CAST (register, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x1e7a10, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (register, 0xa0, 8), (register, 0x0, 8) CAST (unique, 0x10000bf5, 8), (unique, 0x10000bf5, 8) INT_ADD (unique, 0x10000bed, 8) , (const, 0x1, 8), (unique, 0x10000bed, 8) CAST (register, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[(register, 0x0, 8) INT_ZEXT (register, 0x0, 4), (register, 0x0, 4) INT_AND (register, 0x0, 4) , (const, 0x1, 4), (register, 0x0, 4) SUBPIECE (register, 0x0, 8) , (const, 0x0, 4), (register, 0x0, 8) INT_RIGHT (unique, 0x10000bfd, 8) , (const, 0x3, 4), (unique, 0x10000bfd, 8) CAST (unique, 0x3100, 8)]
[ ---  CBRANCH (ram, 0x1e79ac, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x100003f2, 8) , (const, 0x0, 8), (unique, 0x100003f2, 8) INT_AND (register, 0x0, 8) , (const, 0x1, 8), (register, 0x0, 8) INT_RIGHT (unique, 0x10000bfd, 8) , (const, 0x3, 4), (unique, 0x10000bfd, 8) CAST (unique, 0x3100, 8)]
[(register, 0x98, 8) COPY (const, 0x0, 8)]
[(unique, 0x10000901, 8) COPY (unique, 0xbd80, 8)]
[ ---  BRANCH (ram, 0x1e7805, 1)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x505, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3b80, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[(unique, 0x100008f9, 8) COPY (unique, 0x3100, 8), (unique, 0x3100, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x1, 8)]
[(unique, 0x10000909, 8) COPY (register, 0x0, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x98, 8) MULTIEQUAL (unique, 0x10000909, 8) , (register, 0x98, 8)]
[(register, 0x88, 8) MULTIEQUAL (unique, 0x100008f9, 8) , (unique, 0x10000901, 8)]
[(unique, 0x3a00, 8) INT_ADD (unique, 0x3880, 8) , (register, 0x0, 8), (unique, 0x3880, 8) INT_ADD (unique, 0x3680, 8) , (const, 0xfffffffffffffff0, 8), (register, 0x0, 8) INT_MULT (register, 0x0, 8) , (const, 0x8, 8), (register, 0x0, 8) INT_ADD (register, 0x0, 8) , (const, 0x2, 8)]
[(register, 0x80, 8) INT_RIGHT (unique, 0x10000c15, 8) , (const, 0x1, 4), (unique, 0x10000c15, 8) CAST (register, 0xb8, 8), (register, 0xb8, 8) CAST (unique, 0x10000c0d, 8), (unique, 0x10000c0d, 8) INT_SUB (unique, 0x10000c05, 8) , (register, 0x0, 8), (unique, 0x10000c05, 8) CAST (register, 0xa0, 8)]
[(register, 0x0, 8) COPY (const, 0x0, 8)]
[(register, 0x10, 8) COPY (const, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3400, 8) , (unique, 0x100003fa, 4), (unique, 0x3400, 8) CAST (unique, 0x10000c35, 8), (unique, 0x10000c35, 8) INT_ADD (unique, 0x10000c2d, 8) , (unique, 0x100006ef, 8), (unique, 0x10000c2d, 8) CAST (register, 0x0, 8), (unique, 0x100006ef, 8) INT_ADD (register, 0x0, 8) , (unique, 0x3a00, 8), (unique, 0x100003fa, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) CAST (unique, 0x10000c25, 8), (unique, 0x10000c25, 8) INT_ADD (unique, 0x10000c1d, 8) , (unique, 0x100006e7, 8), (unique, 0x10000c1d, 8) CAST (register, 0x18, 8), (unique, 0x100006e7, 8) INT_ADD (register, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000422, 8) , (unique, 0x100003fe, 4), (unique, 0x10000422, 8) PTRADD (unique, 0x3400, 8) , (const, 0x1, 8) , (const, 0x4, 8), (unique, 0x3400, 8) CAST (unique, 0x10000c35, 8), (unique, 0x10000c35, 8) INT_ADD (unique, 0x10000c2d, 8) , (unique, 0x100006ef, 8), (unique, 0x10000c2d, 8) CAST (register, 0x0, 8), (unique, 0x100006ef, 8) INT_ADD (register, 0x0, 8) , (unique, 0x3a00, 8), (unique, 0x100003fe, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000402, 8), (unique, 0x10000402, 8) PTRADD (unique, 0x3400, 8) , (const, 0x1, 8) , (const, 0x4, 8), (unique, 0x3400, 8) CAST (unique, 0x10000c25, 8), (unique, 0x10000c25, 8) INT_ADD (unique, 0x10000c1d, 8) , (unique, 0x100006e7, 8), (unique, 0x10000c1d, 8) CAST (register, 0x18, 8), (unique, 0x100006e7, 8) INT_ADD (register, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000042a, 8) , (unique, 0x1000040a, 4), (unique, 0x1000042a, 8) PTRADD (unique, 0x3400, 8) , (const, 0x2, 8) , (const, 0x4, 8), (unique, 0x3400, 8) CAST (unique, 0x10000c35, 8), (unique, 0x10000c35, 8) INT_ADD (unique, 0x10000c2d, 8) , (unique, 0x100006ef, 8), (unique, 0x10000c2d, 8) CAST (register, 0x0, 8), (unique, 0x100006ef, 8) INT_ADD (register, 0x0, 8) , (unique, 0x3a00, 8), (unique, 0x1000040a, 4) LOAD (const, 0x1b1, 4) , (unique, 0x1000040e, 8), (unique, 0x1000040e, 8) PTRADD (unique, 0x3400, 8) , (const, 0x2, 8) , (const, 0x4, 8), (unique, 0x3400, 8) CAST (unique, 0x10000c25, 8), (unique, 0x10000c25, 8) INT_ADD (unique, 0x10000c1d, 8) , (unique, 0x100006e7, 8), (unique, 0x10000c1d, 8) CAST (register, 0x18, 8), (unique, 0x100006e7, 8) INT_ADD (register, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x16ed, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x16eb, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x16e9, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x16e8, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000432, 8) , (unique, 0x10000416, 4), (unique, 0x10000432, 8) PTRADD (unique, 0x3400, 8) , (const, 0x3, 8) , (const, 0x4, 8), (unique, 0x3400, 8) CAST (unique, 0x10000c35, 8), (unique, 0x10000c35, 8) INT_ADD (unique, 0x10000c2d, 8) , (unique, 0x100006ef, 8), (unique, 0x10000c2d, 8) CAST (register, 0x0, 8), (unique, 0x100006ef, 8) INT_ADD (register, 0x0, 8) , (unique, 0x3a00, 8), (unique, 0x10000416, 4) LOAD (const, 0x1b1, 4) , (unique, 0x1000041a, 8), (unique, 0x1000041a, 8) PTRADD (unique, 0x3400, 8) , (const, 0x3, 8) , (const, 0x4, 8), (unique, 0x3400, 8) CAST (unique, 0x10000c25, 8), (unique, 0x10000c25, 8) INT_ADD (unique, 0x10000c1d, 8) , (unique, 0x100006e7, 8), (unique, 0x10000c1d, 8) CAST (register, 0x18, 8), (unique, 0x100006e7, 8) INT_ADD (register, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[(register, 0x0, 8) INT_ADD (register, 0x0, 8) , (const, 0x10, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x1e7830, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (register, 0x10, 8) , (register, 0x80, 8), (register, 0x10, 8) INT_ADD (register, 0x10, 8) , (const, 0x1, 8), (register, 0x10, 8) MULTIEQUAL (register, 0x10, 8) , (register, 0x10, 8)]
[(register, 0x98, 8) INT_ADD (register, 0x98, 8) , (unique, 0x10000c4d, 8), (unique, 0x10000c4d, 8) CAST (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10000c45, 8), (unique, 0x10000c45, 8) INT_AND (unique, 0x10000c3d, 8) , (const, 0xfffffffffffffffe, 8), (unique, 0x10000c3d, 8) CAST (register, 0xb8, 8)]
[(register, 0x88, 8) INT_ADD (register, 0x88, 8) , (unique, 0x10000c55, 8), (unique, 0x10000c55, 8) CAST (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10000c45, 8), (unique, 0x10000c45, 8) INT_AND (unique, 0x10000c3d, 8) , (const, 0xfffffffffffffffe, 8), (unique, 0x10000c3d, 8) CAST (register, 0xb8, 8)]
[ ---  CBRANCH (ram, 0x1e787f, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xb8, 8) , (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10000c45, 8), (unique, 0x10000c45, 8) INT_AND (unique, 0x10000c3d, 8) , (const, 0xfffffffffffffffe, 8), (unique, 0x10000c3d, 8) CAST (register, 0xb8, 8)]
[(unique, 0x3100, 8) INT_ADD (register, 0x88, 8) , (const, 0x1, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x5cb, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3b80, 8) , (unique, 0xbd80, 8), (unique, 0x3b80, 8) CAST (unique, 0x10000c65, 8), (unique, 0x10000c65, 8) INT_ADD (unique, 0x10000c5d, 8) , (unique, 0x3a80, 8), (unique, 0x10000c5d, 8) CAST (register, 0x0, 8), (unique, 0x3a80, 8) INT_MULT (register, 0x88, 8) , (const, 0x8, 8), (register, 0x88, 8) INT_ADD (register, 0x88, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) PTRADD (register, 0x18, 8) , (unique, 0x1000072f, 8) , (const, 0x8, 8), (unique, 0x1000072f, 8) INT_ADD (register, 0x98, 8) , (const, 0x2, 8)]
[ ---  CBRANCH (ram, 0x1e787f, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (unique, 0x3100, 8) , (register, 0xa0, 8), (unique, 0x3100, 8) CAST (unique, 0x10000c6d, 8), (unique, 0x10000c6d, 8) INT_ADD (register, 0x98, 8) , (const, 0x1, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x5ea, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3b80, 8) , (unique, 0xbd80, 8), (unique, 0x3b80, 8) CAST (unique, 0x10000c7d, 8), (unique, 0x10000c7d, 8) INT_ADD (unique, 0x10000c75, 8) , (unique, 0x3a80, 8), (unique, 0x10000c75, 8) CAST (register, 0x0, 8), (unique, 0x3a80, 8) INT_MULT (register, 0x90, 8) , (const, 0x8, 8), (register, 0x90, 8) INT_ADD (unique, 0xbd80, 8) , (unique, 0x3100, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) PTRADD (register, 0x18, 8) , (unique, 0x10000747, 8) , (const, 0x8, 8), (unique, 0x10000747, 8) INT_ADD (register, 0x98, 8) , (const, 0x3, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x5f5, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x80, 8) , (register, 0x18, 8), (register, 0x18, 8) INT_ADD (unique, 0xbd80, 8) , (unique, 0x10000c85, 8), (unique, 0x10000c85, 8) CAST (register, 0xa0, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[ ---  CBRANCH (ram, 0x1e7a27, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) CAST (unique, 0x10000c8d, 8), (unique, 0x10000c8d, 8) LOAD (const, 0x1b1, 4) , (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x1e7a9b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x18, 8) , (stack, 0xfffffffffffffcc0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000c95, 8) , (const, 0x1e7aba, 8), (unique, 0x10000c95, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(stack, 0xfffffffffffffcc0, 8) INDIRECT (stack, 0xfffffffffffffcc0, 8) , (const, 0x65b, 4), (stack, 0xfffffffffffffcc0, 8) INDIRECT (stack, 0xfffffffffffffcc0, 8) , (const, 0x65a, 4)]
[(stack, 0xfffffffffffffcc8, 8) INDIRECT (stack, 0xfffffffffffffcc8, 8) , (const, 0x65b, 4), (stack, 0xfffffffffffffcc8, 8) INDIRECT (stack, 0xfffffffffffffcc8, 8) , (const, 0x65a, 4)]
[(stack, 0xfffffffffffffcd0, 8) INDIRECT (stack, 0xfffffffffffffcd0, 8) , (const, 0x65b, 4), (stack, 0xfffffffffffffcd0, 8) INDIRECT (stack, 0xfffffffffffffcd0, 8) , (const, 0x65a, 4)]
[(stack, 0xfffffffffffffcd8, 8) INDIRECT (stack, 0xfffffffffffffcd8, 8) , (const, 0x65b, 4), (stack, 0xfffffffffffffcd8, 8) INDIRECT (stack, 0xfffffffffffffcd8, 8) , (const, 0x65a, 4)]
[(stack, 0xfffffffffffffce0, 8) INDIRECT (stack, 0xfffffffffffffce0, 8) , (const, 0x65b, 4), (stack, 0xfffffffffffffce0, 8) INDIRECT (stack, 0xfffffffffffffce0, 8) , (const, 0x65a, 4)]
[(stack, 0xfffffffffffffce8, 8) INDIRECT (stack, 0xfffffffffffffce8, 8) , (const, 0x65b, 4), (stack, 0xfffffffffffffce8, 8) INDIRECT (stack, 0xfffffffffffffce8, 8) , (const, 0x65a, 4)]
[(stack, 0xfffffffffffffcf0, 4) INDIRECT (stack, 0xfffffffffffffcf0, 4) , (const, 0x65b, 4), (stack, 0xfffffffffffffcf0, 4) INDIRECT (stack, 0xfffffffffffffcf0, 4) , (const, 0x65a, 4)]
[(stack, 0xfffffffffffffcf4, 4) INDIRECT (stack, 0xfffffffffffffcf4, 4) , (const, 0x65b, 4), (stack, 0xfffffffffffffcf4, 4) INDIRECT (stack, 0xfffffffffffffcf4, 4) , (const, 0x65a, 4)]
[(stack, 0xfffffffffffffcf8, 4) INDIRECT (stack, 0xfffffffffffffcf8, 4) , (const, 0x65b, 4), (stack, 0xfffffffffffffcf8, 4) INDIRECT (stack, 0xfffffffffffffcf8, 4) , (const, 0x65a, 4)]
[(stack, 0xfffffffffffffcfc, 4) INDIRECT (stack, 0xfffffffffffffcfc, 4) , (const, 0x65b, 4), (stack, 0xfffffffffffffcfc, 4) INDIRECT (stack, 0xfffffffffffffcfc, 4) , (const, 0x65a, 4)]
[(stack, 0xfffffffffffffd00, 8) INDIRECT (stack, 0xfffffffffffffd00, 8) , (const, 0x65b, 4), (stack, 0xfffffffffffffd00, 8) INDIRECT (stack, 0xfffffffffffffd00, 8) , (const, 0x65a, 4)]
[(stack, 0xfffffffffffffd08, 8) INDIRECT (stack, 0xfffffffffffffd08, 8) , (const, 0x65b, 4), (stack, 0xfffffffffffffd08, 8) INDIRECT (stack, 0xfffffffffffffd08, 8) , (const, 0x65a, 4)]
[(stack, 0xfffffffffffffd10, 8) INDIRECT (stack, 0xfffffffffffffd10, 8) , (const, 0x65b, 4), (stack, 0xfffffffffffffd10, 8) INDIRECT (stack, 0xfffffffffffffd10, 8) , (const, 0x65a, 4)]
[(stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x65b, 4), (stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x65a, 4)]
[(stack, 0xfffffffffffffdb0, 8) INDIRECT (stack, 0xfffffffffffffdb0, 8) , (const, 0x65b, 4), (stack, 0xfffffffffffffdb0, 8) INDIRECT (stack, 0xfffffffffffffdb0, 8) , (const, 0x65a, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x65b, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x65a, 4)]
[ ---  CALL (ram, 0x1303d0, 8) , (unique, 0x10000587, 8) , (unique, 0x10000577, 8) , (const, 0x5ae, 4) , (unique, 0x10000597, 8), (unique, 0x10000597, 8) COPY (const, 0x2b97b0, 8), (unique, 0x10000587, 8) COPY (const, 0x2b5483, 8), (unique, 0x10000577, 8) COPY (const, 0x2b5473, 8)]
[(ram, 0x4eae68, 8) COPY (ram, 0x4eae68, 8), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x65b, 4)]
[ ---  RETURN (const, 0x1, 4)]
[(register, 0xa0, 8) COPY (const, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0x10000c9d, 8), (unique, 0x10000c9d, 8) CAST (register, 0x0, 8), (unique, 0x3100, 8) PTRADD (register, 0x80, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3b80, 8) , (const, 0x0, 8), (unique, 0x3b80, 8) CAST (unique, 0x10000cad, 8), (unique, 0x10000cad, 8) INT_ADD (unique, 0x10000ca5, 8) , (unique, 0x3a80, 8), (unique, 0x10000ca5, 8) CAST (register, 0x0, 8), (unique, 0x3a80, 8) INT_MULT (register, 0x0, 8) , (const, 0x8, 8), (register, 0x0, 8) INT_ADD (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x80, 8) , (const, 0x2, 8) , (const, 0x8, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x80, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x653, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x64c, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x648, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000cb5, 8) , (stack, 0xfffffffffffffcf0, 4), (unique, 0x10000cb5, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x80, 8) , (const, 0x3, 8) , (const, 0x8, 8)]
[(unique, 0x100008c1, 8) COPY (register, 0x20, 8)]
[(unique, 0x10000931, 8) COPY (register, 0x80, 8)]
[(unique, 0x10000951, 8) COPY (stack, 0xfffffffffffffd10, 8)]
[ ---  BRANCH (ram, 0x1e78e5, 1)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x1e79a0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x18, 8) , (stack, 0xfffffffffffffce0, 8)]
[(stack, 0xfffffffffffffce0, 8) COPY (unique, 0xbd80, 8)]
[(unique, 0x10000869, 8) COPY (unique, 0xbd80, 8)]
[ ---  BRANCH (ram, 0x1e7798, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000cbd, 8) , (const, 0x1e78a7, 8), (unique, 0x10000cbd, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x615, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x615, 4)]
[(stack, 0xfffffffffffffcc0, 8) INDIRECT (stack, 0xfffffffffffffcc0, 8) , (const, 0x615, 4), (stack, 0xfffffffffffffcc0, 8) INDIRECT (stack, 0xfffffffffffffcc0, 8) , (const, 0x614, 4)]
[(stack, 0xfffffffffffffcc8, 8) INDIRECT (stack, 0xfffffffffffffcc8, 8) , (const, 0x615, 4), (stack, 0xfffffffffffffcc8, 8) INDIRECT (stack, 0xfffffffffffffcc8, 8) , (const, 0x614, 4)]
[(stack, 0xfffffffffffffcd0, 8) INDIRECT (stack, 0xfffffffffffffcd0, 8) , (const, 0x615, 4), (stack, 0xfffffffffffffcd0, 8) INDIRECT (stack, 0xfffffffffffffcd0, 8) , (const, 0x614, 4)]
[(stack, 0xfffffffffffffcd8, 8) INDIRECT (stack, 0xfffffffffffffcd8, 8) , (const, 0x615, 4), (stack, 0xfffffffffffffcd8, 8) INDIRECT (stack, 0xfffffffffffffcd8, 8) , (const, 0x614, 4)]
[(stack, 0xfffffffffffffce0, 8) INDIRECT (stack, 0xfffffffffffffce0, 8) , (const, 0x615, 4), (stack, 0xfffffffffffffce0, 8) INDIRECT (stack, 0xfffffffffffffce0, 8) , (const, 0x614, 4)]
[(stack, 0xfffffffffffffce8, 8) INDIRECT (stack, 0xfffffffffffffce8, 8) , (const, 0x615, 4), (stack, 0xfffffffffffffce8, 8) INDIRECT (stack, 0xfffffffffffffce8, 8) , (const, 0x614, 4)]
[(stack, 0xfffffffffffffcf0, 4) INDIRECT (stack, 0xfffffffffffffcf0, 4) , (const, 0x615, 4), (stack, 0xfffffffffffffcf0, 4) INDIRECT (stack, 0xfffffffffffffcf0, 4) , (const, 0x614, 4)]
[(stack, 0xfffffffffffffcf4, 4) INDIRECT (stack, 0xfffffffffffffcf4, 4) , (const, 0x615, 4), (stack, 0xfffffffffffffcf4, 4) INDIRECT (stack, 0xfffffffffffffcf4, 4) , (const, 0x614, 4)]
[(stack, 0xfffffffffffffcf8, 4) INDIRECT (stack, 0xfffffffffffffcf8, 4) , (const, 0x615, 4), (stack, 0xfffffffffffffcf8, 4) INDIRECT (stack, 0xfffffffffffffcf8, 4) , (const, 0x614, 4)]
[(stack, 0xfffffffffffffcfc, 4) INDIRECT (stack, 0xfffffffffffffcfc, 4) , (const, 0x615, 4), (stack, 0xfffffffffffffcfc, 4) INDIRECT (stack, 0xfffffffffffffcfc, 4) , (const, 0x614, 4)]
[(stack, 0xfffffffffffffd00, 8) INDIRECT (stack, 0xfffffffffffffd00, 8) , (const, 0x615, 4), (stack, 0xfffffffffffffd00, 8) INDIRECT (stack, 0xfffffffffffffd00, 8) , (const, 0x614, 4)]
[(stack, 0xfffffffffffffd08, 8) INDIRECT (stack, 0xfffffffffffffd08, 8) , (const, 0x615, 4), (stack, 0xfffffffffffffd08, 8) INDIRECT (stack, 0xfffffffffffffd08, 8) , (const, 0x614, 4)]
[(stack, 0xfffffffffffffd10, 8) INDIRECT (stack, 0xfffffffffffffd10, 8) , (const, 0x615, 4), (stack, 0xfffffffffffffd10, 8) INDIRECT (stack, 0xfffffffffffffd10, 8) , (const, 0x614, 4)]
[(stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x615, 4), (stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x614, 4)]
[(stack, 0xfffffffffffffdb0, 8) INDIRECT (stack, 0xfffffffffffffdb0, 8) , (const, 0x615, 4), (stack, 0xfffffffffffffdb0, 8) INDIRECT (stack, 0xfffffffffffffdb0, 8) , (const, 0x614, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x615, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x614, 4)]
[ ---  CALL (ram, 0x1212c8, 8) , (register, 0x18, 8)]
[(unique, 0x10000861, 8) COPY (unique, 0xbd80, 8)]
[ ---  BRANCH (ram, 0x1e7798, 1)]
[(register, 0xa0, 8) COPY (const, 0x3, 8)]
[(unique, 0x10000939, 8) COPY (register, 0x80, 8)]
[ ---  BRANCH (ram, 0x1e78e5, 1)]
[(unique, 0x3100, 8) PTRSUB (unique, 0x100004b3, 8) , (const, 0x13, 8)]
[(unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (unique, 0x100004b3, 8) , (const, 0x12, 8)]
[ ---  CBRANCH (ram, 0x1e7335, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x1000050f, 4) , (const, 0x0, 4)]
[(unique, 0x10000839, 8) COPY (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x1e72f0, 1) , (unique, 0xc900, 1), (unique, 0xc900, 1) INT_LESS (const, 0xa, 1) , (unique, 0xbb00, 1)]
[(unique, 0x10000841, 8) COPY (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x1e72f0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x100001d0, 8) , (const, 0x0, 8), (unique, 0x100001d0, 8) INT_AND (register, 0x0, 8) , (const, 0x411, 8), (register, 0x0, 8) INT_LEFT (const, 0x1, 8) , (unique, 0x53700, 1), (unique, 0x53700, 1) INT_AND (unique, 0xbb00, 1) , (const, 0x3f, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000cc5, 8) , (const, 0x1e734a, 8), (unique, 0x10000cc5, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (unique, 0x100004bb, 8) , (const, 0x214, 4)]
[(ram, 0x4eae68, 8) INDIRECT (unique, 0x100004c3, 8) , (const, 0x214, 4)]
[(stack, 0xfffffffffffffcc0, 8) INDIRECT (stack, 0xfffffffffffffcc0, 8) , (const, 0x214, 4), (stack, 0xfffffffffffffcc0, 8) INDIRECT (unique, 0x100004d3, 8) , (const, 0x213, 4)]
[(stack, 0xfffffffffffffcc8, 8) INDIRECT (stack, 0xfffffffffffffcc8, 8) , (const, 0x214, 4), (stack, 0xfffffffffffffcc8, 8) INDIRECT (unique, 0x100004db, 8) , (const, 0x213, 4)]
[(stack, 0xfffffffffffffcd0, 8) INDIRECT (stack, 0xfffffffffffffcd0, 8) , (const, 0x214, 4), (stack, 0xfffffffffffffcd0, 8) INDIRECT (unique, 0x100004e3, 8) , (const, 0x213, 4)]
[(stack, 0xfffffffffffffcd8, 8) INDIRECT (stack, 0xfffffffffffffcd8, 8) , (const, 0x214, 4), (stack, 0xfffffffffffffcd8, 8) INDIRECT (unique, 0x100004eb, 8) , (const, 0x213, 4)]
[(stack, 0xfffffffffffffce0, 8) INDIRECT (stack, 0xfffffffffffffce0, 8) , (const, 0x214, 4), (stack, 0xfffffffffffffce0, 8) INDIRECT (unique, 0x100004f3, 8) , (const, 0x213, 4)]
[(stack, 0xfffffffffffffce8, 8) INDIRECT (stack, 0xfffffffffffffce8, 8) , (const, 0x214, 4), (stack, 0xfffffffffffffce8, 8) INDIRECT (unique, 0x100004fb, 8) , (const, 0x213, 4)]
[(stack, 0xfffffffffffffcf0, 4) INDIRECT (stack, 0xfffffffffffffcf0, 4) , (const, 0x214, 4), (stack, 0xfffffffffffffcf0, 4) INDIRECT (unique, 0x10000503, 4) , (const, 0x213, 4)]
[(stack, 0xfffffffffffffcf4, 4) INDIRECT (stack, 0xfffffffffffffcf4, 4) , (const, 0x214, 4), (stack, 0xfffffffffffffcf4, 4) INDIRECT (unique, 0x100009f1, 4) , (const, 0x213, 4)]
[(stack, 0xfffffffffffffcf8, 4) INDIRECT (stack, 0xfffffffffffffcf8, 4) , (const, 0x214, 4), (stack, 0xfffffffffffffcf8, 4) INDIRECT (unique, 0x1000050b, 4) , (const, 0x213, 4)]
[(stack, 0xfffffffffffffcfc, 4) INDIRECT (stack, 0xfffffffffffffcfc, 4) , (const, 0x214, 4), (stack, 0xfffffffffffffcfc, 4) INDIRECT (unique, 0x1000050f, 4) , (const, 0x213, 4)]
[(stack, 0xfffffffffffffd00, 8) INDIRECT (stack, 0xfffffffffffffd00, 8) , (const, 0x214, 4), (stack, 0xfffffffffffffd00, 8) INDIRECT (unique, 0x10000513, 8) , (const, 0x213, 4)]
[(stack, 0xfffffffffffffd08, 8) INDIRECT (stack, 0xfffffffffffffd08, 8) , (const, 0x214, 4), (stack, 0xfffffffffffffd08, 8) INDIRECT (unique, 0x1000051b, 8) , (const, 0x213, 4)]
[(stack, 0xfffffffffffffd10, 8) INDIRECT (stack, 0xfffffffffffffd10, 8) , (const, 0x214, 4), (stack, 0xfffffffffffffd10, 8) INDIRECT (unique, 0x100009f5, 8) , (const, 0x213, 4)]
[(stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x214, 4), (stack, 0xfffffffffffffda8, 8) INDIRECT (unique, 0x1000052b, 8) , (const, 0x213, 4)]
[(stack, 0xfffffffffffffdb0, 8) INDIRECT (stack, 0xfffffffffffffdb0, 8) , (const, 0x214, 4), (stack, 0xfffffffffffffdb0, 8) INDIRECT (unique, 0x10000533, 8) , (const, 0x213, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x214, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (unique, 0x1000053b, 8) , (const, 0x213, 4)]
[(unique, 0x10000849, 8) COPY (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x1e72f0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x1ed7a0, 8) , (unique, 0x10000ccd, 8) , (unique, 0x3100, 8) , (unique, 0x10000507, 4), (unique, 0x10000ccd, 8) CAST (unique, 0x10000523, 8)]
[(unique, 0x10000811, 8) COPY (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x1e7404, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (register, 0xa0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[(stack, 0xfffffffffffffcd8, 8) COPY (unique, 0x100003e0, 8), (unique, 0x100003e0, 8) CAST (unique, 0x10000cdd, 8), (unique, 0x10000cdd, 8) INT_MULT (unique, 0x10000cd5, 8) , (const, 0x2, 8), (unique, 0x10000cd5, 8) CAST (register, 0xa0, 8)]
[(register, 0x10, 8) INT_ADD (register, 0x10, 8) , (const, 0x10, 8), (register, 0x10, 8) INT_MULT (unique, 0x10000ce5, 8) , (const, 0x10, 8), (unique, 0x10000ce5, 8) CAST (register, 0xa0, 8)]
[(unique, 0x10000819, 8) COPY (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x1e7440, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (const, 0xffffffffffffffe, 8) , (register, 0xa0, 8)]
[(register, 0x8, 8) INT_ADD (stack, 0xfffffffffffffce8, 8) , (register, 0x10, 8)]
[(unique, 0x10000801, 8) COPY (register, 0x10, 8)]
[ ---  CBRANCH (ram, 0x1e76f0, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_CARRY (stack, 0xfffffffffffffce8, 8) , (register, 0x10, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000ced, 8) , (const, 0x1e73a7, 8), (unique, 0x10000ced, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x287, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x287, 4)]
[(stack, 0xfffffffffffffcc0, 8) INDIRECT (stack, 0xfffffffffffffcc0, 8) , (const, 0x287, 4), (stack, 0xfffffffffffffcc0, 8) INDIRECT (stack, 0xfffffffffffffcc0, 8) , (const, 0x286, 4)]
[(stack, 0xfffffffffffffcc8, 8) INDIRECT (stack, 0xfffffffffffffcc8, 8) , (const, 0x287, 4), (stack, 0xfffffffffffffcc8, 8) INDIRECT (stack, 0xfffffffffffffcc8, 8) , (const, 0x286, 4), (stack, 0xfffffffffffffcc8, 8) COPY (register, 0x10, 8)]
[(stack, 0xfffffffffffffcd8, 8) INDIRECT (stack, 0xfffffffffffffcd8, 8) , (const, 0x287, 4), (stack, 0xfffffffffffffcd8, 8) INDIRECT (stack, 0xfffffffffffffcd8, 8) , (const, 0x286, 4)]
[(stack, 0xfffffffffffffce0, 8) INDIRECT (stack, 0xfffffffffffffce0, 8) , (const, 0x287, 4), (stack, 0xfffffffffffffce0, 8) INDIRECT (stack, 0xfffffffffffffce0, 8) , (const, 0x286, 4)]
[(stack, 0xfffffffffffffce8, 8) INDIRECT (stack, 0xfffffffffffffce8, 8) , (const, 0x287, 4), (stack, 0xfffffffffffffce8, 8) INDIRECT (stack, 0xfffffffffffffce8, 8) , (const, 0x286, 4)]
[(stack, 0xfffffffffffffcf0, 4) INDIRECT (stack, 0xfffffffffffffcf0, 4) , (const, 0x287, 4), (stack, 0xfffffffffffffcf0, 4) INDIRECT (stack, 0xfffffffffffffcf0, 4) , (const, 0x286, 4)]
[(stack, 0xfffffffffffffcf4, 4) INDIRECT (stack, 0xfffffffffffffcf4, 4) , (const, 0x287, 4), (stack, 0xfffffffffffffcf4, 4) INDIRECT (stack, 0xfffffffffffffcf4, 4) , (const, 0x286, 4)]
[(stack, 0xfffffffffffffcf8, 4) INDIRECT (stack, 0xfffffffffffffcf8, 4) , (const, 0x287, 4), (stack, 0xfffffffffffffcf8, 4) INDIRECT (stack, 0xfffffffffffffcf8, 4) , (const, 0x286, 4)]
[(stack, 0xfffffffffffffcfc, 4) INDIRECT (stack, 0xfffffffffffffcfc, 4) , (const, 0x287, 4), (stack, 0xfffffffffffffcfc, 4) INDIRECT (stack, 0xfffffffffffffcfc, 4) , (const, 0x286, 4)]
[(stack, 0xfffffffffffffd00, 8) INDIRECT (stack, 0xfffffffffffffd00, 8) , (const, 0x287, 4), (stack, 0xfffffffffffffd00, 8) INDIRECT (stack, 0xfffffffffffffd00, 8) , (const, 0x286, 4)]
[(stack, 0xfffffffffffffd08, 8) INDIRECT (stack, 0xfffffffffffffd08, 8) , (const, 0x287, 4), (stack, 0xfffffffffffffd08, 8) INDIRECT (stack, 0xfffffffffffffd08, 8) , (const, 0x286, 4)]
[(stack, 0xfffffffffffffd10, 8) INDIRECT (stack, 0xfffffffffffffd10, 8) , (const, 0x287, 4), (stack, 0xfffffffffffffd10, 8) INDIRECT (stack, 0xfffffffffffffd10, 8) , (const, 0x286, 4)]
[(stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x287, 4), (stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x286, 4)]
[(stack, 0xfffffffffffffdb0, 8) INDIRECT (stack, 0xfffffffffffffdb0, 8) , (const, 0x287, 4), (stack, 0xfffffffffffffdb0, 8) INDIRECT (stack, 0xfffffffffffffdb0, 8) , (const, 0x286, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x287, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x286, 4)]
[(register, 0x0, 4) CALL (ram, 0x2300b0, 8) , (register, 0x8, 8)]
[ ---  CBRANCH (ram, 0x1e73c6, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (const, 0x1000, 8) , (stack, 0xfffffffffffffcd0, 8), (stack, 0xfffffffffffffcd0, 8) INDIRECT (stack, 0xfffffffffffffcd0, 8) , (const, 0x287, 4), (stack, 0xfffffffffffffcd0, 8) INDIRECT (stack, 0xfffffffffffffcd0, 8) , (const, 0x286, 4), (stack, 0xfffffffffffffcd0, 8) COPY (register, 0x8, 8)]
[(unique, 0x10000809, 8) COPY (stack, 0xfffffffffffffcc8, 8)]
[ ---  CBRANCH (ram, 0x1e76f0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000cf5, 8) , (const, 0x1e76f8, 8), (unique, 0x10000cf5, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x3fc, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x3fc, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(stack, 0xfffffffffffffcc0, 8) INDIRECT (stack, 0xfffffffffffffcc0, 8) , (const, 0x3fc, 4), (stack, 0xfffffffffffffcc0, 8) INDIRECT (stack, 0xfffffffffffffcc0, 8) , (const, 0x3fb, 4), (stack, 0xfffffffffffffcc0, 8) MULTIEQUAL (stack, 0xfffffffffffffcc0, 8) , (stack, 0xfffffffffffffcc0, 8)]
[(stack, 0xfffffffffffffcc8, 8) INDIRECT (stack, 0xfffffffffffffcc8, 8) , (const, 0x3fc, 4), (stack, 0xfffffffffffffcc8, 8) INDIRECT (stack, 0xfffffffffffffcc8, 8) , (const, 0x3fb, 4), (stack, 0xfffffffffffffcc8, 8) MULTIEQUAL (stack, 0xfffffffffffffcc8, 8) , (stack, 0xfffffffffffffcc8, 8)]
[(stack, 0xfffffffffffffcd0, 8) INDIRECT (stack, 0xfffffffffffffcd0, 8) , (const, 0x3fc, 4), (stack, 0xfffffffffffffcd0, 8) INDIRECT (stack, 0xfffffffffffffcd0, 8) , (const, 0x3fb, 4), (stack, 0xfffffffffffffcd0, 8) MULTIEQUAL (stack, 0xfffffffffffffcd0, 8) , (stack, 0xfffffffffffffcd0, 8)]
[(stack, 0xfffffffffffffcd8, 8) INDIRECT (stack, 0xfffffffffffffcd8, 8) , (const, 0x3fc, 4), (stack, 0xfffffffffffffcd8, 8) INDIRECT (stack, 0xfffffffffffffcd8, 8) , (const, 0x3fb, 4), (stack, 0xfffffffffffffcd8, 8) MULTIEQUAL (stack, 0xfffffffffffffcd8, 8) , (stack, 0xfffffffffffffcd8, 8)]
[(stack, 0xfffffffffffffce0, 8) INDIRECT (stack, 0xfffffffffffffce0, 8) , (const, 0x3fc, 4), (stack, 0xfffffffffffffce0, 8) INDIRECT (stack, 0xfffffffffffffce0, 8) , (const, 0x3fb, 4), (stack, 0xfffffffffffffce0, 8) MULTIEQUAL (stack, 0xfffffffffffffce0, 8) , (stack, 0xfffffffffffffce0, 8)]
[(stack, 0xfffffffffffffce8, 8) INDIRECT (stack, 0xfffffffffffffce8, 8) , (const, 0x3fc, 4), (stack, 0xfffffffffffffce8, 8) INDIRECT (stack, 0xfffffffffffffce8, 8) , (const, 0x3fb, 4), (stack, 0xfffffffffffffce8, 8) MULTIEQUAL (stack, 0xfffffffffffffce8, 8) , (stack, 0xfffffffffffffce8, 8)]
[(stack, 0xfffffffffffffcf0, 4) INDIRECT (stack, 0xfffffffffffffcf0, 4) , (const, 0x3fc, 4), (stack, 0xfffffffffffffcf0, 4) INDIRECT (stack, 0xfffffffffffffcf0, 4) , (const, 0x3fb, 4), (stack, 0xfffffffffffffcf0, 4) MULTIEQUAL (stack, 0xfffffffffffffcf0, 4) , (stack, 0xfffffffffffffcf0, 4)]
[(stack, 0xfffffffffffffcf4, 4) INDIRECT (stack, 0xfffffffffffffcf4, 4) , (const, 0x3fc, 4), (stack, 0xfffffffffffffcf4, 4) INDIRECT (stack, 0xfffffffffffffcf4, 4) , (const, 0x3fb, 4), (stack, 0xfffffffffffffcf4, 4) MULTIEQUAL (stack, 0xfffffffffffffcf4, 4) , (stack, 0xfffffffffffffcf4, 4)]
[(stack, 0xfffffffffffffcf8, 4) INDIRECT (stack, 0xfffffffffffffcf8, 4) , (const, 0x3fc, 4), (stack, 0xfffffffffffffcf8, 4) INDIRECT (stack, 0xfffffffffffffcf8, 4) , (const, 0x3fb, 4), (stack, 0xfffffffffffffcf8, 4) MULTIEQUAL (stack, 0xfffffffffffffcf8, 4) , (stack, 0xfffffffffffffcf8, 4)]
[(stack, 0xfffffffffffffcfc, 4) INDIRECT (stack, 0xfffffffffffffcfc, 4) , (const, 0x3fc, 4), (stack, 0xfffffffffffffcfc, 4) INDIRECT (stack, 0xfffffffffffffcfc, 4) , (const, 0x3fb, 4), (stack, 0xfffffffffffffcfc, 4) MULTIEQUAL (stack, 0xfffffffffffffcfc, 4) , (stack, 0xfffffffffffffcfc, 4)]
[(stack, 0xfffffffffffffd00, 8) INDIRECT (stack, 0xfffffffffffffd00, 8) , (const, 0x3fc, 4), (stack, 0xfffffffffffffd00, 8) INDIRECT (stack, 0xfffffffffffffd00, 8) , (const, 0x3fb, 4), (stack, 0xfffffffffffffd00, 8) MULTIEQUAL (stack, 0xfffffffffffffd00, 8) , (stack, 0xfffffffffffffd00, 8)]
[(stack, 0xfffffffffffffd08, 8) INDIRECT (stack, 0xfffffffffffffd08, 8) , (const, 0x3fc, 4), (stack, 0xfffffffffffffd08, 8) INDIRECT (stack, 0xfffffffffffffd08, 8) , (const, 0x3fb, 4), (stack, 0xfffffffffffffd08, 8) MULTIEQUAL (stack, 0xfffffffffffffd08, 8) , (stack, 0xfffffffffffffd08, 8)]
[(stack, 0xfffffffffffffd10, 8) INDIRECT (stack, 0xfffffffffffffd10, 8) , (const, 0x3fc, 4), (stack, 0xfffffffffffffd10, 8) INDIRECT (stack, 0xfffffffffffffd10, 8) , (const, 0x3fb, 4), (stack, 0xfffffffffffffd10, 8) MULTIEQUAL (stack, 0xfffffffffffffd10, 8) , (stack, 0xfffffffffffffd10, 8)]
[(stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x3fc, 4), (stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x3fb, 4), (stack, 0xfffffffffffffda8, 8) MULTIEQUAL (stack, 0xfffffffffffffda8, 8) , (stack, 0xfffffffffffffda8, 8)]
[(stack, 0xfffffffffffffdb0, 8) INDIRECT (stack, 0xfffffffffffffdb0, 8) , (const, 0x3fc, 4), (stack, 0xfffffffffffffdb0, 8) INDIRECT (stack, 0xfffffffffffffdb0, 8) , (const, 0x3fb, 4), (stack, 0xfffffffffffffdb0, 8) MULTIEQUAL (stack, 0xfffffffffffffdb0, 8) , (stack, 0xfffffffffffffdb0, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x3fc, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x3fb, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CBRANCH (ram, 0x1e73f0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10000cfd, 8), (unique, 0x10000cfd, 8) CALL (ram, 0x1212c0, 8) , (register, 0x10, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0x10000801, 8) , (unique, 0x10000809, 8)]
[(stack, 0xfffffffffffffce0, 8) COPY (register, 0x30, 8), (register, 0x30, 8) CAST (unique, 0x10000d0d, 8), (unique, 0x10000d0d, 8) INT_AND (unique, 0x10000d05, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x10000d05, 8) CAST (unique, 0x3800, 8), (unique, 0x3800, 8) PTRADD (register, 0x20, 8) , (unique, 0x100005ff, 8) , (const, 0x1, 8), (unique, 0x100005ff, 8) INT_ADD (unique, 0x10000200, 8) , (const, 0xf, 8), (unique, 0x10000200, 8) INT_2COMP (register, 0x10, 8), (register, 0x10, 8) INT_ADD (stack, 0xfffffffffffffcc8, 8) , (const, 0x10, 8)]
[(stack, 0xfffffffffffffce8, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) INT_ADD (stack, 0xfffffffffffffce8, 8) , (register, 0x10, 8), (register, 0x10, 8) INT_ADD (stack, 0xfffffffffffffcc8, 8) , (const, 0x10, 8)]
[(unique, 0x10000891, 8) COPY (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (unique, 0x10000200, 8) , (const, 0x1, 8), (unique, 0x10000200, 8) INT_2COMP (register, 0x10, 8), (register, 0x10, 8) INT_ADD (stack, 0xfffffffffffffcc8, 8) , (const, 0x10, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffdb0, 8) MULTIEQUAL (stack, 0xfffffffffffffdb0, 8) , (stack, 0xfffffffffffffdb0, 8)]
[(stack, 0xfffffffffffffda8, 8) MULTIEQUAL (stack, 0xfffffffffffffda8, 8) , (stack, 0xfffffffffffffda8, 8)]
[(stack, 0xfffffffffffffd10, 8) MULTIEQUAL (stack, 0xfffffffffffffd10, 8) , (stack, 0xfffffffffffffd10, 8)]
[(stack, 0xfffffffffffffd08, 8) MULTIEQUAL (stack, 0xfffffffffffffd08, 8) , (stack, 0xfffffffffffffd08, 8)]
[(stack, 0xfffffffffffffd00, 8) MULTIEQUAL (stack, 0xfffffffffffffd00, 8) , (stack, 0xfffffffffffffd00, 8)]
[(stack, 0xfffffffffffffcfc, 4) MULTIEQUAL (stack, 0xfffffffffffffcfc, 4) , (stack, 0xfffffffffffffcfc, 4)]
[(stack, 0xfffffffffffffcf8, 4) MULTIEQUAL (stack, 0xfffffffffffffcf8, 4) , (stack, 0xfffffffffffffcf8, 4)]
[(stack, 0xfffffffffffffcf4, 4) MULTIEQUAL (stack, 0xfffffffffffffcf4, 4) , (stack, 0xfffffffffffffcf4, 4)]
[(stack, 0xfffffffffffffcf0, 4) MULTIEQUAL (stack, 0xfffffffffffffcf0, 4) , (stack, 0xfffffffffffffcf0, 4)]
[(stack, 0xfffffffffffffce8, 8) MULTIEQUAL (stack, 0xfffffffffffffce8, 8) , (stack, 0xfffffffffffffce8, 8)]
[(stack, 0xfffffffffffffce0, 8) MULTIEQUAL (stack, 0xfffffffffffffce0, 8) , (stack, 0xfffffffffffffce0, 8)]
[(stack, 0xfffffffffffffcd0, 8) MULTIEQUAL (stack, 0xfffffffffffffcd0, 8) , (stack, 0xfffffffffffffcd0, 8)]
[(stack, 0xfffffffffffffcc8, 8) MULTIEQUAL (stack, 0xfffffffffffffcc8, 8) , (stack, 0xfffffffffffffcc8, 8)]
[(stack, 0xfffffffffffffcc0, 8) MULTIEQUAL (stack, 0xfffffffffffffcc0, 8) , (stack, 0xfffffffffffffcc0, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x20, 8) MULTIEQUAL (unique, 0x10000891, 8) , (register, 0x20, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x0, 8) , (unique, 0x10000d15, 8), (unique, 0x10000d15, 8) CAST (register, 0x18, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x30, 8) , (register, 0x0, 8)]
[(register, 0xa0, 8) COPY (const, 0x0, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x2f2, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x2e4, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (stack, 0xfffffffffffffcd8, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x8, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x30, 8) , (register, 0x0, 8), (stack, 0xfffffffffffffcd8, 8) MULTIEQUAL (stack, 0xfffffffffffffcd8, 8) , (stack, 0xfffffffffffffcd8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000d1d, 8) , (const, 0x1e740c, 8), (unique, 0x10000d1d, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8), (register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x2f6, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x2f6, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(stack, 0xfffffffffffffcc0, 8) INDIRECT (stack, 0xfffffffffffffcc0, 8) , (const, 0x2f6, 4), (stack, 0xfffffffffffffcc0, 8) INDIRECT (stack, 0xfffffffffffffcc0, 8) , (const, 0x2f5, 4), (stack, 0xfffffffffffffcc0, 8) MULTIEQUAL (stack, 0xfffffffffffffcc0, 8) , (stack, 0xfffffffffffffcc0, 8)]
[(stack, 0xfffffffffffffcc8, 8) INDIRECT (stack, 0xfffffffffffffcc8, 8) , (const, 0x2f6, 4), (stack, 0xfffffffffffffcc8, 8) INDIRECT (stack, 0xfffffffffffffcc8, 8) , (const, 0x2f5, 4), (stack, 0xfffffffffffffcc8, 8) MULTIEQUAL (stack, 0xfffffffffffffcc8, 8) , (stack, 0xfffffffffffffcc8, 8)]
[(stack, 0xfffffffffffffcd0, 8) INDIRECT (stack, 0xfffffffffffffcd0, 8) , (const, 0x2f6, 4), (stack, 0xfffffffffffffcd0, 8) INDIRECT (stack, 0xfffffffffffffcd0, 8) , (const, 0x2f5, 4), (stack, 0xfffffffffffffcd0, 8) MULTIEQUAL (stack, 0xfffffffffffffcd0, 8) , (stack, 0xfffffffffffffcd0, 8)]
[(stack, 0xfffffffffffffcd8, 8) INDIRECT (stack, 0xfffffffffffffcd8, 8) , (const, 0x2f6, 4), (stack, 0xfffffffffffffcd8, 8) INDIRECT (stack, 0xfffffffffffffcd8, 8) , (const, 0x2f5, 4), (stack, 0xfffffffffffffcd8, 8) MULTIEQUAL (stack, 0xfffffffffffffcd8, 8) , (stack, 0xfffffffffffffcd8, 8)]
[(stack, 0xfffffffffffffce0, 8) INDIRECT (stack, 0xfffffffffffffce0, 8) , (const, 0x2f6, 4), (stack, 0xfffffffffffffce0, 8) INDIRECT (stack, 0xfffffffffffffce0, 8) , (const, 0x2f5, 4), (stack, 0xfffffffffffffce0, 8) MULTIEQUAL (stack, 0xfffffffffffffce0, 8) , (stack, 0xfffffffffffffce0, 8)]
[(stack, 0xfffffffffffffce8, 8) INDIRECT (stack, 0xfffffffffffffce8, 8) , (const, 0x2f6, 4), (stack, 0xfffffffffffffce8, 8) INDIRECT (stack, 0xfffffffffffffce8, 8) , (const, 0x2f5, 4), (stack, 0xfffffffffffffce8, 8) MULTIEQUAL (stack, 0xfffffffffffffce8, 8) , (stack, 0xfffffffffffffce8, 8)]
[(stack, 0xfffffffffffffcf0, 4) INDIRECT (stack, 0xfffffffffffffcf0, 4) , (const, 0x2f6, 4), (stack, 0xfffffffffffffcf0, 4) INDIRECT (stack, 0xfffffffffffffcf0, 4) , (const, 0x2f5, 4), (stack, 0xfffffffffffffcf0, 4) MULTIEQUAL (stack, 0xfffffffffffffcf0, 4) , (stack, 0xfffffffffffffcf0, 4)]
[(stack, 0xfffffffffffffcf4, 4) INDIRECT (stack, 0xfffffffffffffcf4, 4) , (const, 0x2f6, 4), (stack, 0xfffffffffffffcf4, 4) INDIRECT (stack, 0xfffffffffffffcf4, 4) , (const, 0x2f5, 4), (stack, 0xfffffffffffffcf4, 4) MULTIEQUAL (stack, 0xfffffffffffffcf4, 4) , (stack, 0xfffffffffffffcf4, 4)]
[(stack, 0xfffffffffffffcf8, 4) INDIRECT (stack, 0xfffffffffffffcf8, 4) , (const, 0x2f6, 4), (stack, 0xfffffffffffffcf8, 4) INDIRECT (stack, 0xfffffffffffffcf8, 4) , (const, 0x2f5, 4), (stack, 0xfffffffffffffcf8, 4) MULTIEQUAL (stack, 0xfffffffffffffcf8, 4) , (stack, 0xfffffffffffffcf8, 4)]
[(stack, 0xfffffffffffffcfc, 4) INDIRECT (stack, 0xfffffffffffffcfc, 4) , (const, 0x2f6, 4), (stack, 0xfffffffffffffcfc, 4) INDIRECT (stack, 0xfffffffffffffcfc, 4) , (const, 0x2f5, 4), (stack, 0xfffffffffffffcfc, 4) MULTIEQUAL (stack, 0xfffffffffffffcfc, 4) , (stack, 0xfffffffffffffcfc, 4)]
[(stack, 0xfffffffffffffd00, 8) INDIRECT (stack, 0xfffffffffffffd00, 8) , (const, 0x2f6, 4), (stack, 0xfffffffffffffd00, 8) INDIRECT (stack, 0xfffffffffffffd00, 8) , (const, 0x2f5, 4), (stack, 0xfffffffffffffd00, 8) MULTIEQUAL (stack, 0xfffffffffffffd00, 8) , (stack, 0xfffffffffffffd00, 8)]
[(stack, 0xfffffffffffffd08, 8) INDIRECT (stack, 0xfffffffffffffd08, 8) , (const, 0x2f6, 4), (stack, 0xfffffffffffffd08, 8) INDIRECT (stack, 0xfffffffffffffd08, 8) , (const, 0x2f5, 4), (stack, 0xfffffffffffffd08, 8) MULTIEQUAL (stack, 0xfffffffffffffd08, 8) , (stack, 0xfffffffffffffd08, 8)]
[(stack, 0xfffffffffffffd10, 8) INDIRECT (stack, 0xfffffffffffffd10, 8) , (const, 0x2f6, 4), (stack, 0xfffffffffffffd10, 8) INDIRECT (stack, 0xfffffffffffffd10, 8) , (const, 0x2f5, 4), (stack, 0xfffffffffffffd10, 8) MULTIEQUAL (stack, 0xfffffffffffffd10, 8) , (stack, 0xfffffffffffffd10, 8)]
[(stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x2f6, 4), (stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x2f5, 4), (stack, 0xfffffffffffffda8, 8) MULTIEQUAL (stack, 0xfffffffffffffda8, 8) , (stack, 0xfffffffffffffda8, 8)]
[(stack, 0xfffffffffffffdb0, 8) INDIRECT (stack, 0xfffffffffffffdb0, 8) , (const, 0x2f6, 4), (stack, 0xfffffffffffffdb0, 8) INDIRECT (stack, 0xfffffffffffffdb0, 8) , (const, 0x2f5, 4), (stack, 0xfffffffffffffdb0, 8) MULTIEQUAL (stack, 0xfffffffffffffdb0, 8) , (stack, 0xfffffffffffffdb0, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x304, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2f6, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2f5, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3a00, 8) , (register, 0x0, 8), (unique, 0x3a00, 8) PTRADD (register, 0x18, 8) , (unique, 0x10000617, 8) , (const, 0x8, 8), (unique, 0x10000617, 8) CAST (unique, 0x10000d35, 8), (unique, 0x10000d35, 8) INT_ADD (unique, 0x10000d2d, 8) , (const, 0x2, 8), (unique, 0x10000d2d, 8) CAST (register, 0xa0, 8), (register, 0x0, 8) CAST (unique, 0x10000d25, 8), (unique, 0x10000d25, 8) CALL (ram, 0x19d9a0, 8) , (unique, 0x3100, 8), (register, 0x18, 8) MULTIEQUAL (unique, 0x10000811, 8) , (register, 0x0, 8), (register, 0xa0, 8) MULTIEQUAL (register, 0xa0, 8) , (register, 0xa0, 8)]
[(unique, 0x10000821, 8) COPY (register, 0x18, 8), (register, 0x18, 8) MULTIEQUAL (unique, 0x10000811, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x1e7440, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10000d25, 8), (unique, 0x10000d25, 8) CALL (ram, 0x19d9a0, 8) , (unique, 0x3100, 8)]
[(stack, 0xfffffffffffffd08, 8) COPY (unique, 0xbe00, 8), (unique, 0xbe00, 8) INT_ADD (stack, 0xfffffffffffffd08, 8) , (const, 0x1, 8)]
[(register, 0xa0, 8) CAST (unique, 0x10000d45, 8), (unique, 0x10000d45, 8) INT_ADD (unique, 0x10000d3d, 8) , (const, 0x1, 8), (unique, 0x10000d3d, 8) CAST (register, 0xa0, 8)]
[ ---  CBRANCH (ram, 0x1e72f0, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (unique, 0xbe00, 8) , (unique, 0x10000d4d, 8), (unique, 0x10000d4d, 8) CAST (register, 0x0, 8), (register, 0x0, 8) INT_NEGATE (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x80, 8) , (const, 0x2, 8) , (const, 0x8, 8), (unique, 0xbe00, 8) INT_ADD (stack, 0xfffffffffffffd08, 8) , (const, 0x1, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffdb0, 8) MULTIEQUAL (stack, 0xfffffffffffffdb0, 8) , (stack, 0xfffffffffffffdb0, 8) , (stack, 0xfffffffffffffdb0, 8) , (stack, 0xfffffffffffffdb0, 8) , (stack, 0xfffffffffffffdb0, 8) , (stack, 0xfffffffffffffdb0, 8) , (stack, 0xfffffffffffffdb0, 8)]
[(stack, 0xfffffffffffffda8, 8) MULTIEQUAL (stack, 0xfffffffffffffda8, 8) , (stack, 0xfffffffffffffda8, 8) , (stack, 0xfffffffffffffda8, 8) , (stack, 0xfffffffffffffda8, 8) , (stack, 0xfffffffffffffda8, 8) , (stack, 0xfffffffffffffda8, 8) , (stack, 0xfffffffffffffda8, 8)]
[(stack, 0xfffffffffffffd08, 8) MULTIEQUAL (stack, 0xfffffffffffffd08, 8) , (stack, 0xfffffffffffffd08, 8) , (stack, 0xfffffffffffffd08, 8) , (stack, 0xfffffffffffffd08, 8) , (stack, 0xfffffffffffffd08, 8) , (stack, 0xfffffffffffffd08, 8) , (stack, 0xfffffffffffffd08, 8)]
[(stack, 0xfffffffffffffd00, 8) MULTIEQUAL (stack, 0xfffffffffffffd00, 8) , (stack, 0xfffffffffffffd00, 8) , (stack, 0xfffffffffffffd00, 8) , (stack, 0xfffffffffffffd00, 8) , (stack, 0xfffffffffffffd00, 8) , (stack, 0xfffffffffffffd00, 8) , (stack, 0xfffffffffffffd00, 8)]
[(stack, 0xfffffffffffffcfc, 4) MULTIEQUAL (stack, 0xfffffffffffffcfc, 4) , (stack, 0xfffffffffffffcfc, 4) , (stack, 0xfffffffffffffcfc, 4) , (stack, 0xfffffffffffffcfc, 4) , (stack, 0xfffffffffffffcfc, 4) , (stack, 0xfffffffffffffcfc, 4) , (stack, 0xfffffffffffffcfc, 4)]
[(stack, 0xfffffffffffffcf8, 4) MULTIEQUAL (stack, 0xfffffffffffffcf8, 4) , (stack, 0xfffffffffffffcf8, 4) , (stack, 0xfffffffffffffcf8, 4) , (stack, 0xfffffffffffffcf8, 4) , (stack, 0xfffffffffffffcf8, 4) , (stack, 0xfffffffffffffcf8, 4) , (stack, 0xfffffffffffffcf8, 4)]
[(stack, 0xfffffffffffffcf4, 4) MULTIEQUAL (stack, 0xfffffffffffffcf4, 4) , (stack, 0xfffffffffffffcf4, 4) , (stack, 0xfffffffffffffcf4, 4) , (stack, 0xfffffffffffffcf4, 4) , (stack, 0xfffffffffffffcf4, 4) , (stack, 0xfffffffffffffcf4, 4) , (stack, 0xfffffffffffffcf4, 4)]
[(stack, 0xfffffffffffffcf0, 4) MULTIEQUAL (stack, 0xfffffffffffffcf0, 4) , (stack, 0xfffffffffffffcf0, 4) , (stack, 0xfffffffffffffcf0, 4) , (stack, 0xfffffffffffffcf0, 4) , (stack, 0xfffffffffffffcf0, 4) , (stack, 0xfffffffffffffcf0, 4) , (stack, 0xfffffffffffffcf0, 4)]
[(stack, 0xfffffffffffffce8, 8) MULTIEQUAL (stack, 0xfffffffffffffce8, 8) , (stack, 0xfffffffffffffce8, 8) , (stack, 0xfffffffffffffce8, 8) , (stack, 0xfffffffffffffce8, 8) , (stack, 0xfffffffffffffce8, 8) , (stack, 0xfffffffffffffce8, 8) , (stack, 0xfffffffffffffce8, 8)]
[(stack, 0xfffffffffffffcd8, 8) MULTIEQUAL (stack, 0xfffffffffffffcd8, 8) , (stack, 0xfffffffffffffcd8, 8) , (stack, 0xfffffffffffffcd8, 8) , (stack, 0xfffffffffffffcd8, 8) , (stack, 0xfffffffffffffcd8, 8) , (stack, 0xfffffffffffffcd8, 8) , (stack, 0xfffffffffffffcd8, 8)]
[(stack, 0xfffffffffffffcd0, 8) MULTIEQUAL (stack, 0xfffffffffffffcd0, 8) , (stack, 0xfffffffffffffcd0, 8) , (stack, 0xfffffffffffffcd0, 8) , (stack, 0xfffffffffffffcd0, 8) , (stack, 0xfffffffffffffcd0, 8) , (stack, 0xfffffffffffffcd0, 8) , (stack, 0xfffffffffffffcd0, 8)]
[(stack, 0xfffffffffffffcc8, 8) MULTIEQUAL (stack, 0xfffffffffffffcc8, 8) , (stack, 0xfffffffffffffcc8, 8) , (stack, 0xfffffffffffffcc8, 8) , (stack, 0xfffffffffffffcc8, 8) , (stack, 0xfffffffffffffcc8, 8) , (stack, 0xfffffffffffffcc8, 8) , (stack, 0xfffffffffffffcc8, 8)]
[(stack, 0xfffffffffffffcc0, 8) MULTIEQUAL (stack, 0xfffffffffffffcc0, 8) , (stack, 0xfffffffffffffcc0, 8) , (stack, 0xfffffffffffffcc0, 8) , (stack, 0xfffffffffffffcc0, 8) , (stack, 0xfffffffffffffcc0, 8) , (stack, 0xfffffffffffffcc0, 8) , (stack, 0xfffffffffffffcc0, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb8, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8) , (register, 0x0, 8) , (register, 0xb8, 8) , (register, 0xb8, 8) , (register, 0xb8, 8) , (register, 0x0, 8)]
[(register, 0xa0, 8) MULTIEQUAL (register, 0xa0, 8) , (register, 0xa0, 8) , (register, 0xa0, 8) , (register, 0xa0, 8) , (register, 0xa0, 8) , (register, 0xa0, 8) , (register, 0xa0, 8)]
[(register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8)]
[(stack, 0xfffffffffffffd10, 8) COPY (register, 0x80, 8)]
[(unique, 0x10000871, 8) COPY (stack, 0xfffffffffffffce0, 8), (stack, 0xfffffffffffffce0, 8) MULTIEQUAL (stack, 0xfffffffffffffce0, 8) , (stack, 0xfffffffffffffce0, 8) , (stack, 0xfffffffffffffce0, 8) , (stack, 0xfffffffffffffce0, 8) , (stack, 0xfffffffffffffce0, 8) , (stack, 0xfffffffffffffce0, 8) , (stack, 0xfffffffffffffce0, 8)]
[(unique, 0x10000911, 8) COPY (register, 0x18, 8), (register, 0x18, 8) MULTIEQUAL (unique, 0x10000819, 8) , (unique, 0x10000821, 8) , (unique, 0x10000821, 8) , (register, 0x18, 8) , (register, 0x18, 8) , (register, 0x18, 8) , (register, 0x18, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffdb0, 8) MULTIEQUAL (stack, 0xfffffffffffffdb0, 8) , (stack, 0xfffffffffffffdb0, 8) , (stack, 0xfffffffffffffdb0, 8)]
[(stack, 0xfffffffffffffda8, 8) MULTIEQUAL (stack, 0xfffffffffffffda8, 8) , (stack, 0xfffffffffffffda8, 8) , (stack, 0xfffffffffffffda8, 8)]
[(stack, 0xfffffffffffffd10, 8) MULTIEQUAL (stack, 0xfffffffffffffd10, 8) , (stack, 0xfffffffffffffd10, 8) , (stack, 0xfffffffffffffd10, 8)]
[(stack, 0xfffffffffffffd08, 8) MULTIEQUAL (stack, 0xfffffffffffffd08, 8) , (stack, 0xfffffffffffffd08, 8) , (stack, 0xfffffffffffffd08, 8)]
[(stack, 0xfffffffffffffd00, 8) MULTIEQUAL (stack, 0xfffffffffffffd00, 8) , (stack, 0xfffffffffffffd00, 8) , (stack, 0xfffffffffffffd00, 8)]
[(stack, 0xfffffffffffffcfc, 4) MULTIEQUAL (stack, 0xfffffffffffffcfc, 4) , (stack, 0xfffffffffffffcfc, 4) , (stack, 0xfffffffffffffcfc, 4)]
[(stack, 0xfffffffffffffcf8, 4) MULTIEQUAL (stack, 0xfffffffffffffcf8, 4) , (stack, 0xfffffffffffffcf8, 4) , (stack, 0xfffffffffffffcf8, 4)]
[(stack, 0xfffffffffffffcf4, 4) MULTIEQUAL (stack, 0xfffffffffffffcf4, 4) , (stack, 0xfffffffffffffcf4, 4) , (stack, 0xfffffffffffffcf4, 4)]
[(stack, 0xfffffffffffffcf0, 4) MULTIEQUAL (stack, 0xfffffffffffffcf0, 4) , (stack, 0xfffffffffffffcf0, 4) , (stack, 0xfffffffffffffcf0, 4)]
[(stack, 0xfffffffffffffce8, 8) MULTIEQUAL (stack, 0xfffffffffffffce8, 8) , (stack, 0xfffffffffffffce8, 8) , (stack, 0xfffffffffffffce8, 8)]
[(stack, 0xfffffffffffffce0, 8) MULTIEQUAL (stack, 0xfffffffffffffce0, 8) , (stack, 0xfffffffffffffce0, 8) , (stack, 0xfffffffffffffce0, 8)]
[(stack, 0xfffffffffffffcd8, 8) MULTIEQUAL (stack, 0xfffffffffffffcd8, 8) , (stack, 0xfffffffffffffcd8, 8) , (stack, 0xfffffffffffffcd8, 8)]
[(stack, 0xfffffffffffffcd0, 8) MULTIEQUAL (stack, 0xfffffffffffffcd0, 8) , (stack, 0xfffffffffffffcd0, 8) , (stack, 0xfffffffffffffcd0, 8)]
[(stack, 0xfffffffffffffcc8, 8) MULTIEQUAL (stack, 0xfffffffffffffcc8, 8) , (stack, 0xfffffffffffffcc8, 8) , (stack, 0xfffffffffffffcc8, 8)]
[(stack, 0xfffffffffffffcc0, 8) MULTIEQUAL (stack, 0xfffffffffffffcc0, 8) , (stack, 0xfffffffffffffcc0, 8) , (stack, 0xfffffffffffffcc0, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb0, 8) COPY (unique, 0x10000929, 8), (unique, 0x10000929, 8) MULTIEQUAL (unique, 0x10000911, 8) , (unique, 0x10000919, 8) , (unique, 0x10000921, 8)]
[(register, 0x18, 8) COPY (unique, 0x10000889, 8), (unique, 0x10000889, 8) MULTIEQUAL (unique, 0x10000871, 8) , (unique, 0x10000879, 8) , (unique, 0x10000881, 8)]
[ ---  CBRANCH (ram, 0x1e7473, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xa0, 8) , (const, 0x0, 8), (register, 0xa0, 8) MULTIEQUAL (register, 0xa0, 8) , (unique, 0xbd80, 8) , (unique, 0xbd80, 8)]
[(register, 0xa8, 8) COPY (const, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000d75, 8) , (const, 0x1e746e, 8), (unique, 0x10000d75, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x35e, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x35e, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(stack, 0xfffffffffffffcc0, 8) INDIRECT (stack, 0xfffffffffffffcc0, 8) , (const, 0x35e, 4), (stack, 0xfffffffffffffcc0, 8) INDIRECT (stack, 0xfffffffffffffcc0, 8) , (const, 0x35d, 4), (stack, 0xfffffffffffffcc0, 8) MULTIEQUAL (stack, 0xfffffffffffffcc0, 8) , (stack, 0xfffffffffffffcc0, 8)]
[(stack, 0xfffffffffffffcc8, 8) INDIRECT (stack, 0xfffffffffffffcc8, 8) , (const, 0x35e, 4), (stack, 0xfffffffffffffcc8, 8) INDIRECT (stack, 0xfffffffffffffcc8, 8) , (const, 0x35d, 4), (stack, 0xfffffffffffffcc8, 8) MULTIEQUAL (stack, 0xfffffffffffffcc8, 8) , (stack, 0xfffffffffffffcc8, 8)]
[(stack, 0xfffffffffffffcd0, 8) INDIRECT (stack, 0xfffffffffffffcd0, 8) , (const, 0x35e, 4), (stack, 0xfffffffffffffcd0, 8) INDIRECT (stack, 0xfffffffffffffcd0, 8) , (const, 0x35d, 4), (stack, 0xfffffffffffffcd0, 8) MULTIEQUAL (stack, 0xfffffffffffffcd0, 8) , (stack, 0xfffffffffffffcd0, 8)]
[(stack, 0xfffffffffffffcd8, 8) INDIRECT (stack, 0xfffffffffffffcd8, 8) , (const, 0x35e, 4), (stack, 0xfffffffffffffcd8, 8) INDIRECT (stack, 0xfffffffffffffcd8, 8) , (const, 0x35d, 4), (stack, 0xfffffffffffffcd8, 8) MULTIEQUAL (stack, 0xfffffffffffffcd8, 8) , (stack, 0xfffffffffffffcd8, 8)]
[(stack, 0xfffffffffffffce0, 8) INDIRECT (stack, 0xfffffffffffffce0, 8) , (const, 0x35e, 4), (stack, 0xfffffffffffffce0, 8) INDIRECT (stack, 0xfffffffffffffce0, 8) , (const, 0x35d, 4), (stack, 0xfffffffffffffce0, 8) MULTIEQUAL (stack, 0xfffffffffffffce0, 8) , (stack, 0xfffffffffffffce0, 8)]
[(stack, 0xfffffffffffffce8, 8) INDIRECT (stack, 0xfffffffffffffce8, 8) , (const, 0x35e, 4), (stack, 0xfffffffffffffce8, 8) INDIRECT (stack, 0xfffffffffffffce8, 8) , (const, 0x35d, 4), (stack, 0xfffffffffffffce8, 8) MULTIEQUAL (stack, 0xfffffffffffffce8, 8) , (stack, 0xfffffffffffffce8, 8)]
[(stack, 0xfffffffffffffcf0, 4) INDIRECT (stack, 0xfffffffffffffcf0, 4) , (const, 0x35e, 4), (stack, 0xfffffffffffffcf0, 4) INDIRECT (stack, 0xfffffffffffffcf0, 4) , (const, 0x35d, 4), (stack, 0xfffffffffffffcf0, 4) MULTIEQUAL (stack, 0xfffffffffffffcf0, 4) , (stack, 0xfffffffffffffcf0, 4)]
[(stack, 0xfffffffffffffcf4, 4) INDIRECT (stack, 0xfffffffffffffcf4, 4) , (const, 0x35e, 4), (stack, 0xfffffffffffffcf4, 4) INDIRECT (stack, 0xfffffffffffffcf4, 4) , (const, 0x35d, 4), (stack, 0xfffffffffffffcf4, 4) MULTIEQUAL (stack, 0xfffffffffffffcf4, 4) , (stack, 0xfffffffffffffcf4, 4)]
[(stack, 0xfffffffffffffcf8, 4) INDIRECT (stack, 0xfffffffffffffcf8, 4) , (const, 0x35e, 4), (stack, 0xfffffffffffffcf8, 4) INDIRECT (stack, 0xfffffffffffffcf8, 4) , (const, 0x35d, 4), (stack, 0xfffffffffffffcf8, 4) MULTIEQUAL (stack, 0xfffffffffffffcf8, 4) , (stack, 0xfffffffffffffcf8, 4)]
[(stack, 0xfffffffffffffcfc, 4) INDIRECT (stack, 0xfffffffffffffcfc, 4) , (const, 0x35e, 4), (stack, 0xfffffffffffffcfc, 4) INDIRECT (stack, 0xfffffffffffffcfc, 4) , (const, 0x35d, 4), (stack, 0xfffffffffffffcfc, 4) MULTIEQUAL (stack, 0xfffffffffffffcfc, 4) , (stack, 0xfffffffffffffcfc, 4)]
[(stack, 0xfffffffffffffd00, 8) INDIRECT (stack, 0xfffffffffffffd00, 8) , (const, 0x35e, 4), (stack, 0xfffffffffffffd00, 8) INDIRECT (stack, 0xfffffffffffffd00, 8) , (const, 0x35d, 4), (stack, 0xfffffffffffffd00, 8) MULTIEQUAL (stack, 0xfffffffffffffd00, 8) , (stack, 0xfffffffffffffd00, 8)]
[(stack, 0xfffffffffffffd08, 8) INDIRECT (stack, 0xfffffffffffffd08, 8) , (const, 0x35e, 4), (stack, 0xfffffffffffffd08, 8) INDIRECT (stack, 0xfffffffffffffd08, 8) , (const, 0x35d, 4), (stack, 0xfffffffffffffd08, 8) MULTIEQUAL (stack, 0xfffffffffffffd08, 8) , (stack, 0xfffffffffffffd08, 8)]
[(stack, 0xfffffffffffffd10, 8) INDIRECT (stack, 0xfffffffffffffd10, 8) , (const, 0x35e, 4), (stack, 0xfffffffffffffd10, 8) INDIRECT (stack, 0xfffffffffffffd10, 8) , (const, 0x35d, 4), (stack, 0xfffffffffffffd10, 8) MULTIEQUAL (stack, 0xfffffffffffffd10, 8) , (stack, 0xfffffffffffffd10, 8)]
[(stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x35e, 4), (stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x35d, 4), (stack, 0xfffffffffffffda8, 8) MULTIEQUAL (stack, 0xfffffffffffffda8, 8) , (stack, 0xfffffffffffffda8, 8)]
[(stack, 0xfffffffffffffdb0, 8) INDIRECT (stack, 0xfffffffffffffdb0, 8) , (const, 0x35e, 4), (stack, 0xfffffffffffffdb0, 8) INDIRECT (stack, 0xfffffffffffffdb0, 8) , (const, 0x35d, 4), (stack, 0xfffffffffffffdb0, 8) MULTIEQUAL (stack, 0xfffffffffffffdb0, 8) , (stack, 0xfffffffffffffdb0, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x35e, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x35d, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CALL (ram, 0x1212c8, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) PTRADD (register, 0xb0, 8) , (unique, 0x10000637, 8) , (const, 0x8, 8), (unique, 0x10000637, 8) CAST (unique, 0x10000d5d, 8), (unique, 0x10000d5d, 8) INT_ADD (unique, 0x10000d55, 8) , (const, 0x2, 8), (unique, 0x10000d55, 8) CAST (register, 0xa8, 8), (register, 0xa8, 8) MULTIEQUAL (register, 0xa8, 8) , (register, 0xa8, 8)]
[ ---  CBRANCH (ram, 0x1e7460, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xa0, 8) , (register, 0xa8, 8), (register, 0xa8, 8) CAST (unique, 0x10000d6d, 8), (unique, 0x10000d6d, 8) INT_ADD (unique, 0x10000d65, 8) , (const, 0x1, 8), (unique, 0x10000d65, 8) CAST (register, 0xa8, 8), (register, 0xa8, 8) MULTIEQUAL (register, 0xa8, 8) , (register, 0xa8, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffdb0, 8) MULTIEQUAL (stack, 0xfffffffffffffdb0, 8) , (stack, 0xfffffffffffffdb0, 8)]
[(stack, 0xfffffffffffffda8, 8) MULTIEQUAL (stack, 0xfffffffffffffda8, 8) , (stack, 0xfffffffffffffda8, 8)]
[(stack, 0xfffffffffffffd10, 8) MULTIEQUAL (stack, 0xfffffffffffffd10, 8) , (stack, 0xfffffffffffffd10, 8)]
[(stack, 0xfffffffffffffd08, 8) MULTIEQUAL (stack, 0xfffffffffffffd08, 8) , (stack, 0xfffffffffffffd08, 8)]
[(stack, 0xfffffffffffffd00, 8) MULTIEQUAL (stack, 0xfffffffffffffd00, 8) , (stack, 0xfffffffffffffd00, 8)]
[(stack, 0xfffffffffffffcfc, 4) MULTIEQUAL (stack, 0xfffffffffffffcfc, 4) , (stack, 0xfffffffffffffcfc, 4)]
[(stack, 0xfffffffffffffcf8, 4) MULTIEQUAL (stack, 0xfffffffffffffcf8, 4) , (stack, 0xfffffffffffffcf8, 4)]
[(stack, 0xfffffffffffffcf4, 4) MULTIEQUAL (stack, 0xfffffffffffffcf4, 4) , (stack, 0xfffffffffffffcf4, 4)]
[(stack, 0xfffffffffffffcf0, 4) MULTIEQUAL (stack, 0xfffffffffffffcf0, 4) , (stack, 0xfffffffffffffcf0, 4)]
[(stack, 0xfffffffffffffce8, 8) MULTIEQUAL (stack, 0xfffffffffffffce8, 8) , (stack, 0xfffffffffffffce8, 8)]
[(stack, 0xfffffffffffffce0, 8) MULTIEQUAL (stack, 0xfffffffffffffce0, 8) , (stack, 0xfffffffffffffce0, 8)]
[(stack, 0xfffffffffffffcd8, 8) MULTIEQUAL (stack, 0xfffffffffffffcd8, 8) , (stack, 0xfffffffffffffcd8, 8)]
[(stack, 0xfffffffffffffcd0, 8) MULTIEQUAL (stack, 0xfffffffffffffcd0, 8) , (stack, 0xfffffffffffffcd0, 8)]
[(stack, 0xfffffffffffffcc8, 8) MULTIEQUAL (stack, 0xfffffffffffffcc8, 8) , (stack, 0xfffffffffffffcc8, 8)]
[(stack, 0xfffffffffffffcc0, 8) MULTIEQUAL (stack, 0xfffffffffffffcc0, 8) , (stack, 0xfffffffffffffcc0, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x1e78c8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) CAST (unique, 0x10000d7d, 8), (unique, 0x10000d7d, 8) LOAD (const, 0x1b1, 4) , (register, 0xb0, 8)]
[ ---  CBRANCH (ram, 0x1e7ad9, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xb0, 8) , (stack, 0xfffffffffffffcc0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000d85, 8) , (unique, 0x1000056f, 8), (unique, 0x10000d85, 8) CAST (register, 0x20, 8), (unique, 0x1000056f, 8) PTRSUB (const, 0x0, 8) , (const, 0x1e7af8, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(stack, 0xfffffffffffffcc0, 8) INDIRECT (stack, 0xfffffffffffffcc0, 8) , (const, 0x3f6, 4), (stack, 0xfffffffffffffcc0, 8) INDIRECT (stack, 0xfffffffffffffcc0, 8) , (const, 0x3f5, 4)]
[(stack, 0xfffffffffffffcc8, 8) INDIRECT (stack, 0xfffffffffffffcc8, 8) , (const, 0x3f6, 4), (stack, 0xfffffffffffffcc8, 8) INDIRECT (stack, 0xfffffffffffffcc8, 8) , (const, 0x3f5, 4)]
[(stack, 0xfffffffffffffcd0, 8) INDIRECT (stack, 0xfffffffffffffcd0, 8) , (const, 0x3f6, 4), (stack, 0xfffffffffffffcd0, 8) INDIRECT (stack, 0xfffffffffffffcd0, 8) , (const, 0x3f5, 4)]
[(stack, 0xfffffffffffffcd8, 8) INDIRECT (stack, 0xfffffffffffffcd8, 8) , (const, 0x3f6, 4), (stack, 0xfffffffffffffcd8, 8) INDIRECT (stack, 0xfffffffffffffcd8, 8) , (const, 0x3f5, 4)]
[(stack, 0xfffffffffffffce0, 8) INDIRECT (stack, 0xfffffffffffffce0, 8) , (const, 0x3f6, 4), (stack, 0xfffffffffffffce0, 8) INDIRECT (stack, 0xfffffffffffffce0, 8) , (const, 0x3f5, 4)]
[(stack, 0xfffffffffffffce8, 8) INDIRECT (stack, 0xfffffffffffffce8, 8) , (const, 0x3f6, 4), (stack, 0xfffffffffffffce8, 8) INDIRECT (stack, 0xfffffffffffffce8, 8) , (const, 0x3f5, 4)]
[(stack, 0xfffffffffffffcf0, 4) INDIRECT (stack, 0xfffffffffffffcf0, 4) , (const, 0x3f6, 4), (stack, 0xfffffffffffffcf0, 4) INDIRECT (stack, 0xfffffffffffffcf0, 4) , (const, 0x3f5, 4)]
[(stack, 0xfffffffffffffcf4, 4) INDIRECT (stack, 0xfffffffffffffcf4, 4) , (const, 0x3f6, 4), (stack, 0xfffffffffffffcf4, 4) INDIRECT (stack, 0xfffffffffffffcf4, 4) , (const, 0x3f5, 4)]
[(stack, 0xfffffffffffffcf8, 4) INDIRECT (stack, 0xfffffffffffffcf8, 4) , (const, 0x3f6, 4), (stack, 0xfffffffffffffcf8, 4) INDIRECT (stack, 0xfffffffffffffcf8, 4) , (const, 0x3f5, 4)]
[(stack, 0xfffffffffffffcfc, 4) INDIRECT (stack, 0xfffffffffffffcfc, 4) , (const, 0x3f6, 4), (stack, 0xfffffffffffffcfc, 4) INDIRECT (stack, 0xfffffffffffffcfc, 4) , (const, 0x3f5, 4)]
[(stack, 0xfffffffffffffd00, 8) INDIRECT (stack, 0xfffffffffffffd00, 8) , (const, 0x3f6, 4), (stack, 0xfffffffffffffd00, 8) INDIRECT (stack, 0xfffffffffffffd00, 8) , (const, 0x3f5, 4)]
[(stack, 0xfffffffffffffd08, 8) INDIRECT (stack, 0xfffffffffffffd08, 8) , (const, 0x3f6, 4), (stack, 0xfffffffffffffd08, 8) INDIRECT (stack, 0xfffffffffffffd08, 8) , (const, 0x3f5, 4)]
[(stack, 0xfffffffffffffd10, 8) INDIRECT (stack, 0xfffffffffffffd10, 8) , (const, 0x3f6, 4), (stack, 0xfffffffffffffd10, 8) INDIRECT (stack, 0xfffffffffffffd10, 8) , (const, 0x3f5, 4)]
[(stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x3f6, 4), (stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x3f5, 4)]
[(stack, 0xfffffffffffffdb0, 8) INDIRECT (stack, 0xfffffffffffffdb0, 8) , (const, 0x3f6, 4), (stack, 0xfffffffffffffdb0, 8) INDIRECT (stack, 0xfffffffffffffdb0, 8) , (const, 0x3f5, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x3f6, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x3f5, 4)]
[ ---  CALL (ram, 0x1303d0, 8) , (unique, 0x1000058f, 8) , (unique, 0x1000057f, 8) , (const, 0x594, 4) , (unique, 0x1000059f, 8), (unique, 0x1000059f, 8) COPY (const, 0x2b97b0, 8), (unique, 0x1000058f, 8) COPY (const, 0x2b5483, 8), (unique, 0x1000057f, 8) COPY (const, 0x2b5473, 8)]
[(ram, 0x4eae68, 8) COPY (ram, 0x4eae68, 8), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x3f6, 4)]
[ ---  RETURN (const, 0x1, 4)]
[(register, 0xa0, 8) COPY (const, 0x1, 8)]
[(unique, 0x100008b9, 8) COPY (register, 0x20, 8)]
[(unique, 0x10000941, 8) COPY (stack, 0xfffffffffffffd10, 8)]
[(unique, 0x10000949, 8) COPY (register, 0xb8, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffdb0, 8) MULTIEQUAL (stack, 0xfffffffffffffdb0, 8) , (stack, 0xfffffffffffffdb0, 8) , (stack, 0xfffffffffffffdb0, 8)]
[(stack, 0xfffffffffffffda8, 8) MULTIEQUAL (stack, 0xfffffffffffffda8, 8) , (stack, 0xfffffffffffffda8, 8) , (stack, 0xfffffffffffffda8, 8)]
[(stack, 0xfffffffffffffd10, 8) MULTIEQUAL (stack, 0xfffffffffffffd10, 8) , (stack, 0xfffffffffffffd10, 8) , (stack, 0xfffffffffffffd10, 8)]
[(stack, 0xfffffffffffffd08, 8) MULTIEQUAL (stack, 0xfffffffffffffd08, 8) , (stack, 0xfffffffffffffd08, 8) , (stack, 0xfffffffffffffd08, 8)]
[(stack, 0xfffffffffffffd00, 8) MULTIEQUAL (stack, 0xfffffffffffffd00, 8) , (stack, 0xfffffffffffffd00, 8) , (stack, 0xfffffffffffffd00, 8)]
[(stack, 0xfffffffffffffcfc, 4) MULTIEQUAL (stack, 0xfffffffffffffcfc, 4) , (stack, 0xfffffffffffffcfc, 4) , (stack, 0xfffffffffffffcfc, 4)]
[(stack, 0xfffffffffffffcf8, 4) MULTIEQUAL (stack, 0xfffffffffffffcf8, 4) , (stack, 0xfffffffffffffcf8, 4) , (stack, 0xfffffffffffffcf8, 4)]
[(stack, 0xfffffffffffffcf4, 4) MULTIEQUAL (stack, 0xfffffffffffffcf4, 4) , (stack, 0xfffffffffffffcf4, 4) , (stack, 0xfffffffffffffcf4, 4)]
[(stack, 0xfffffffffffffcf0, 4) MULTIEQUAL (stack, 0xfffffffffffffcf0, 4) , (stack, 0xfffffffffffffcf0, 4) , (stack, 0xfffffffffffffcf0, 4)]
[(stack, 0xfffffffffffffce8, 8) MULTIEQUAL (stack, 0xfffffffffffffce8, 8) , (stack, 0xfffffffffffffce8, 8) , (stack, 0xfffffffffffffce8, 8)]
[(stack, 0xfffffffffffffce0, 8) MULTIEQUAL (stack, 0xfffffffffffffce0, 8) , (stack, 0xfffffffffffffce0, 8) , (stack, 0xfffffffffffffce0, 8)]
[(stack, 0xfffffffffffffcd8, 8) MULTIEQUAL (stack, 0xfffffffffffffcd8, 8) , (stack, 0xfffffffffffffcd8, 8) , (stack, 0xfffffffffffffcd8, 8)]
[(stack, 0xfffffffffffffcd0, 8) MULTIEQUAL (stack, 0xfffffffffffffcd0, 8) , (stack, 0xfffffffffffffcd0, 8) , (stack, 0xfffffffffffffcd0, 8)]
[(stack, 0xfffffffffffffcc8, 8) MULTIEQUAL (stack, 0xfffffffffffffcc8, 8) , (stack, 0xfffffffffffffcc8, 8) , (stack, 0xfffffffffffffcc8, 8)]
[(stack, 0xfffffffffffffcc0, 8) MULTIEQUAL (stack, 0xfffffffffffffcc0, 8) , (stack, 0xfffffffffffffcc0, 8) , (stack, 0xfffffffffffffcc0, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb0, 8) MULTIEQUAL (unique, 0x10000941, 8) , (unique, 0x10000931, 8) , (unique, 0x10000939, 8)]
[(register, 0xa0, 8) MULTIEQUAL (register, 0xa0, 8) , (register, 0xa0, 8) , (register, 0xa0, 8)]
[(unique, 0x100007e1, 8) COPY (ram, 0x4eae68, 8), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(unique, 0x10000899, 8) COPY (register, 0x20, 8), (register, 0x20, 8) MULTIEQUAL (unique, 0x100008b9, 8) , (unique, 0x100008c1, 8) , (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x1e7911, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xb8, 8) , (const, 0x0, 8), (register, 0xb8, 8) MULTIEQUAL (unique, 0x10000949, 8) , (unique, 0x10000951, 8) , (register, 0xb8, 8)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000d8d, 8), (unique, 0x10000d8d, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (ram, 0x4eae68, 8) , (register, 0x110, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x1e7a5d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x58e00, 4) , (const, 0x0, 4), (unique, 0x58e00, 4) INT_AND (stack, 0xfffffffffffffcf0, 4) , (const, 0x200, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000d95, 8) , (const, 0x1e7a61, 8), (unique, 0x10000d95, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x3ee, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x3ee, 4)]
[(stack, 0xfffffffffffffcc0, 8) INDIRECT (stack, 0xfffffffffffffcc0, 8) , (const, 0x3ee, 4), (stack, 0xfffffffffffffcc0, 8) INDIRECT (stack, 0xfffffffffffffcc0, 8) , (const, 0x3ec, 4)]
[(stack, 0xfffffffffffffcc8, 8) INDIRECT (stack, 0xfffffffffffffcc8, 8) , (const, 0x3ee, 4), (stack, 0xfffffffffffffcc8, 8) INDIRECT (stack, 0xfffffffffffffcc8, 8) , (const, 0x3ec, 4)]
[(stack, 0xfffffffffffffcd0, 8) INDIRECT (stack, 0xfffffffffffffcd0, 8) , (const, 0x3ee, 4), (stack, 0xfffffffffffffcd0, 8) INDIRECT (stack, 0xfffffffffffffcd0, 8) , (const, 0x3ec, 4)]
[(stack, 0xfffffffffffffcd8, 8) INDIRECT (stack, 0xfffffffffffffcd8, 8) , (const, 0x3ee, 4), (stack, 0xfffffffffffffcd8, 8) INDIRECT (stack, 0xfffffffffffffcd8, 8) , (const, 0x3ec, 4)]
[(stack, 0xfffffffffffffce0, 8) INDIRECT (stack, 0xfffffffffffffce0, 8) , (const, 0x3ee, 4), (stack, 0xfffffffffffffce0, 8) INDIRECT (stack, 0xfffffffffffffce0, 8) , (const, 0x3ec, 4)]
[(stack, 0xfffffffffffffce8, 8) INDIRECT (stack, 0xfffffffffffffce8, 8) , (const, 0x3ee, 4), (stack, 0xfffffffffffffce8, 8) INDIRECT (stack, 0xfffffffffffffce8, 8) , (const, 0x3ec, 4)]
[(stack, 0xfffffffffffffcf0, 4) INDIRECT (stack, 0xfffffffffffffcf0, 4) , (const, 0x3ee, 4), (stack, 0xfffffffffffffcf0, 4) INDIRECT (stack, 0xfffffffffffffcf0, 4) , (const, 0x3ec, 4)]
[(stack, 0xfffffffffffffcf4, 4) INDIRECT (stack, 0xfffffffffffffcf4, 4) , (const, 0x3ee, 4), (stack, 0xfffffffffffffcf4, 4) INDIRECT (stack, 0xfffffffffffffcf4, 4) , (const, 0x3ec, 4)]
[(stack, 0xfffffffffffffcf8, 4) INDIRECT (stack, 0xfffffffffffffcf8, 4) , (const, 0x3ee, 4), (stack, 0xfffffffffffffcf8, 4) INDIRECT (stack, 0xfffffffffffffcf8, 4) , (const, 0x3ec, 4)]
[(stack, 0xfffffffffffffcfc, 4) INDIRECT (stack, 0xfffffffffffffcfc, 4) , (const, 0x3ee, 4), (stack, 0xfffffffffffffcfc, 4) INDIRECT (stack, 0xfffffffffffffcfc, 4) , (const, 0x3ec, 4)]
[(stack, 0xfffffffffffffd00, 8) INDIRECT (stack, 0xfffffffffffffd00, 8) , (const, 0x3ee, 4), (stack, 0xfffffffffffffd00, 8) INDIRECT (stack, 0xfffffffffffffd00, 8) , (const, 0x3ec, 4)]
[(stack, 0xfffffffffffffd08, 8) INDIRECT (stack, 0xfffffffffffffd08, 8) , (const, 0x3ee, 4), (stack, 0xfffffffffffffd08, 8) INDIRECT (stack, 0xfffffffffffffd08, 8) , (const, 0x3ec, 4)]
[(stack, 0xfffffffffffffd10, 8) INDIRECT (stack, 0xfffffffffffffd10, 8) , (const, 0x3ee, 4), (stack, 0xfffffffffffffd10, 8) INDIRECT (stack, 0xfffffffffffffd10, 8) , (const, 0x3ec, 4)]
[(stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x3ee, 4), (stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x3ec, 4)]
[(stack, 0xfffffffffffffdb0, 8) INDIRECT (stack, 0xfffffffffffffdb0, 8) , (const, 0x3ee, 4), (stack, 0xfffffffffffffdb0, 8) INDIRECT (stack, 0xfffffffffffffdb0, 8) , (const, 0x3ec, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x3ee, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x3ec, 4)]
[ ---  CALLIND (unique, 0xbd80, 8), (unique, 0xbd80, 8) CAST (unique, 0x10000d9d, 8), (unique, 0x10000d9d, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb0, 8) , (const, 0x4, 8) , (const, 0x8, 8)]
[ ---  BRANCH (ram, 0x1e790d, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000da5, 8) , (const, 0x1e790d, 8), (unique, 0x10000da5, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x3be, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x3be, 4)]
[(stack, 0xfffffffffffffcc0, 8) INDIRECT (stack, 0xfffffffffffffcc0, 8) , (const, 0x3be, 4), (stack, 0xfffffffffffffcc0, 8) INDIRECT (stack, 0xfffffffffffffcc0, 8) , (const, 0x3bd, 4)]
[(stack, 0xfffffffffffffcc8, 8) INDIRECT (stack, 0xfffffffffffffcc8, 8) , (const, 0x3be, 4), (stack, 0xfffffffffffffcc8, 8) INDIRECT (stack, 0xfffffffffffffcc8, 8) , (const, 0x3bd, 4)]
[(stack, 0xfffffffffffffcd0, 8) INDIRECT (stack, 0xfffffffffffffcd0, 8) , (const, 0x3be, 4), (stack, 0xfffffffffffffcd0, 8) INDIRECT (stack, 0xfffffffffffffcd0, 8) , (const, 0x3bd, 4)]
[(stack, 0xfffffffffffffcd8, 8) INDIRECT (stack, 0xfffffffffffffcd8, 8) , (const, 0x3be, 4), (stack, 0xfffffffffffffcd8, 8) INDIRECT (stack, 0xfffffffffffffcd8, 8) , (const, 0x3bd, 4)]
[(stack, 0xfffffffffffffce0, 8) INDIRECT (stack, 0xfffffffffffffce0, 8) , (const, 0x3be, 4), (stack, 0xfffffffffffffce0, 8) INDIRECT (stack, 0xfffffffffffffce0, 8) , (const, 0x3bd, 4)]
[(stack, 0xfffffffffffffce8, 8) INDIRECT (stack, 0xfffffffffffffce8, 8) , (const, 0x3be, 4), (stack, 0xfffffffffffffce8, 8) INDIRECT (stack, 0xfffffffffffffce8, 8) , (const, 0x3bd, 4)]
[(stack, 0xfffffffffffffcf0, 4) INDIRECT (stack, 0xfffffffffffffcf0, 4) , (const, 0x3be, 4), (stack, 0xfffffffffffffcf0, 4) INDIRECT (stack, 0xfffffffffffffcf0, 4) , (const, 0x3bd, 4)]
[(stack, 0xfffffffffffffcf4, 4) INDIRECT (stack, 0xfffffffffffffcf4, 4) , (const, 0x3be, 4), (stack, 0xfffffffffffffcf4, 4) INDIRECT (stack, 0xfffffffffffffcf4, 4) , (const, 0x3bd, 4)]
[(stack, 0xfffffffffffffcf8, 4) INDIRECT (stack, 0xfffffffffffffcf8, 4) , (const, 0x3be, 4), (stack, 0xfffffffffffffcf8, 4) INDIRECT (stack, 0xfffffffffffffcf8, 4) , (const, 0x3bd, 4)]
[(stack, 0xfffffffffffffcfc, 4) INDIRECT (stack, 0xfffffffffffffcfc, 4) , (const, 0x3be, 4), (stack, 0xfffffffffffffcfc, 4) INDIRECT (stack, 0xfffffffffffffcfc, 4) , (const, 0x3bd, 4)]
[(stack, 0xfffffffffffffd00, 8) INDIRECT (stack, 0xfffffffffffffd00, 8) , (const, 0x3be, 4), (stack, 0xfffffffffffffd00, 8) INDIRECT (stack, 0xfffffffffffffd00, 8) , (const, 0x3bd, 4)]
[(stack, 0xfffffffffffffd08, 8) INDIRECT (stack, 0xfffffffffffffd08, 8) , (const, 0x3be, 4), (stack, 0xfffffffffffffd08, 8) INDIRECT (stack, 0xfffffffffffffd08, 8) , (const, 0x3bd, 4)]
[(stack, 0xfffffffffffffd10, 8) INDIRECT (stack, 0xfffffffffffffd10, 8) , (const, 0x3be, 4), (stack, 0xfffffffffffffd10, 8) INDIRECT (stack, 0xfffffffffffffd10, 8) , (const, 0x3bd, 4)]
[(stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x3be, 4), (stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x3bd, 4)]
[(stack, 0xfffffffffffffdb0, 8) INDIRECT (stack, 0xfffffffffffffdb0, 8) , (const, 0x3be, 4), (stack, 0xfffffffffffffdb0, 8) INDIRECT (stack, 0xfffffffffffffdb0, 8) , (const, 0x3bd, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x3be, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x3bd, 4)]
[ ---  CALL (ram, 0x1dfbb0, 8) , (unique, 0x10000dad, 8), (unique, 0x10000dad, 8) CAST (register, 0xb8, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffdb0, 8) MULTIEQUAL (stack, 0xfffffffffffffdb0, 8) , (stack, 0xfffffffffffffdb0, 8)]
[(stack, 0xfffffffffffffda8, 8) MULTIEQUAL (stack, 0xfffffffffffffda8, 8) , (stack, 0xfffffffffffffda8, 8)]
[(stack, 0xfffffffffffffd10, 8) MULTIEQUAL (stack, 0xfffffffffffffd10, 8) , (stack, 0xfffffffffffffd10, 8)]
[(stack, 0xfffffffffffffd08, 8) MULTIEQUAL (stack, 0xfffffffffffffd08, 8) , (stack, 0xfffffffffffffd08, 8)]
[(stack, 0xfffffffffffffd00, 8) MULTIEQUAL (stack, 0xfffffffffffffd00, 8) , (stack, 0xfffffffffffffd00, 8)]
[(stack, 0xfffffffffffffcfc, 4) MULTIEQUAL (stack, 0xfffffffffffffcfc, 4) , (stack, 0xfffffffffffffcfc, 4)]
[(stack, 0xfffffffffffffcf8, 4) MULTIEQUAL (stack, 0xfffffffffffffcf8, 4) , (stack, 0xfffffffffffffcf8, 4)]
[(stack, 0xfffffffffffffcf4, 4) MULTIEQUAL (stack, 0xfffffffffffffcf4, 4) , (stack, 0xfffffffffffffcf4, 4)]
[(stack, 0xfffffffffffffcf0, 4) MULTIEQUAL (stack, 0xfffffffffffffcf0, 4) , (stack, 0xfffffffffffffcf0, 4)]
[(stack, 0xfffffffffffffce8, 8) MULTIEQUAL (stack, 0xfffffffffffffce8, 8) , (stack, 0xfffffffffffffce8, 8)]
[(stack, 0xfffffffffffffce0, 8) MULTIEQUAL (stack, 0xfffffffffffffce0, 8) , (stack, 0xfffffffffffffce0, 8)]
[(stack, 0xfffffffffffffcd8, 8) MULTIEQUAL (stack, 0xfffffffffffffcd8, 8) , (stack, 0xfffffffffffffcd8, 8)]
[(stack, 0xfffffffffffffcd0, 8) MULTIEQUAL (stack, 0xfffffffffffffcd0, 8) , (stack, 0xfffffffffffffcd0, 8)]
[(stack, 0xfffffffffffffcc8, 8) MULTIEQUAL (stack, 0xfffffffffffffcc8, 8) , (stack, 0xfffffffffffffcc8, 8)]
[(stack, 0xfffffffffffffcc0, 8) MULTIEQUAL (stack, 0xfffffffffffffcc0, 8) , (stack, 0xfffffffffffffcc0, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x3c1, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000db5, 8) , (unique, 0xbc80, 4), (unique, 0x10000db5, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (unique, 0x100007e1, 8) , (register, 0x110, 8) , (const, 0x1, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(stack, 0xfffffffffffffdb0, 8) MULTIEQUAL (stack, 0xfffffffffffffdb0, 8) , (stack, 0xfffffffffffffdb0, 8) , (stack, 0xfffffffffffffdb0, 8) , (stack, 0xfffffffffffffdb0, 8)]
[(stack, 0xfffffffffffffda8, 8) MULTIEQUAL (stack, 0xfffffffffffffda8, 8) , (stack, 0xfffffffffffffda8, 8) , (stack, 0xfffffffffffffda8, 8) , (stack, 0xfffffffffffffda8, 8)]
[(stack, 0xfffffffffffffd10, 8) MULTIEQUAL (stack, 0xfffffffffffffd10, 8) , (stack, 0xfffffffffffffd10, 8) , (stack, 0xfffffffffffffd10, 8) , (stack, 0xfffffffffffffd10, 8)]
[(stack, 0xfffffffffffffd08, 8) MULTIEQUAL (stack, 0xfffffffffffffd08, 8) , (stack, 0xfffffffffffffd08, 8) , (stack, 0xfffffffffffffd08, 8) , (stack, 0xfffffffffffffd08, 8)]
[(stack, 0xfffffffffffffd00, 8) MULTIEQUAL (stack, 0xfffffffffffffd00, 8) , (stack, 0xfffffffffffffd00, 8) , (stack, 0xfffffffffffffd00, 8) , (stack, 0xfffffffffffffd00, 8)]
[(stack, 0xfffffffffffffcfc, 4) MULTIEQUAL (stack, 0xfffffffffffffcfc, 4) , (stack, 0xfffffffffffffcfc, 4) , (stack, 0xfffffffffffffcfc, 4) , (stack, 0xfffffffffffffcfc, 4)]
[(stack, 0xfffffffffffffcf8, 4) MULTIEQUAL (stack, 0xfffffffffffffcf8, 4) , (stack, 0xfffffffffffffcf8, 4) , (stack, 0xfffffffffffffcf8, 4) , (stack, 0xfffffffffffffcf8, 4)]
[(stack, 0xfffffffffffffcf4, 4) MULTIEQUAL (stack, 0xfffffffffffffcf4, 4) , (stack, 0xfffffffffffffcf4, 4) , (stack, 0xfffffffffffffcf4, 4) , (stack, 0xfffffffffffffcf4, 4)]
[(stack, 0xfffffffffffffcf0, 4) MULTIEQUAL (stack, 0xfffffffffffffcf0, 4) , (stack, 0xfffffffffffffcf0, 4) , (stack, 0xfffffffffffffcf0, 4) , (stack, 0xfffffffffffffcf0, 4)]
[(stack, 0xfffffffffffffce8, 8) MULTIEQUAL (stack, 0xfffffffffffffce8, 8) , (stack, 0xfffffffffffffce8, 8) , (stack, 0xfffffffffffffce8, 8) , (stack, 0xfffffffffffffce8, 8)]
[(stack, 0xfffffffffffffce0, 8) MULTIEQUAL (stack, 0xfffffffffffffce0, 8) , (stack, 0xfffffffffffffce0, 8) , (stack, 0xfffffffffffffce0, 8) , (stack, 0xfffffffffffffce0, 8)]
[(stack, 0xfffffffffffffcd8, 8) MULTIEQUAL (stack, 0xfffffffffffffcd8, 8) , (stack, 0xfffffffffffffcd8, 8) , (stack, 0xfffffffffffffcd8, 8) , (stack, 0xfffffffffffffcd8, 8)]
[(stack, 0xfffffffffffffcd0, 8) MULTIEQUAL (stack, 0xfffffffffffffcd0, 8) , (stack, 0xfffffffffffffcd0, 8) , (stack, 0xfffffffffffffcd0, 8) , (stack, 0xfffffffffffffcd0, 8)]
[(stack, 0xfffffffffffffcc8, 8) MULTIEQUAL (stack, 0xfffffffffffffcc8, 8) , (stack, 0xfffffffffffffcc8, 8) , (stack, 0xfffffffffffffcc8, 8) , (stack, 0xfffffffffffffcc8, 8)]
[(stack, 0xfffffffffffffcc0, 8) MULTIEQUAL (stack, 0xfffffffffffffcc0, 8) , (stack, 0xfffffffffffffcc0, 8) , (stack, 0xfffffffffffffcc0, 8) , (stack, 0xfffffffffffffcc0, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x20, 8) MULTIEQUAL (unique, 0x10000899, 8) , (unique, 0x10000899, 8) , (unique, 0x100008a9, 8) , (register, 0x20, 8)]
[(register, 0x0, 8) COPY (register, 0xa0, 8), (register, 0xa0, 8) MULTIEQUAL (register, 0xa0, 8) , (register, 0xa0, 8) , (register, 0xa0, 8) , (register, 0xa0, 8)]
[ ---  CBRANCH (ram, 0x1e7ad4, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffffc0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10000dbd, 8), (unique, 0x10000dbd, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000dc5, 8) , (const, 0x1e7ad9, 8), (unique, 0x10000dc5, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(stack, 0xfffffffffffffcc0, 8) INDIRECT (stack, 0xfffffffffffffcc0, 8) , (const, 0x3e7, 4), (stack, 0xfffffffffffffcc0, 8) INDIRECT (stack, 0xfffffffffffffcc0, 8) , (const, 0x3e6, 4)]
[(stack, 0xfffffffffffffcc8, 8) INDIRECT (stack, 0xfffffffffffffcc8, 8) , (const, 0x3e7, 4), (stack, 0xfffffffffffffcc8, 8) INDIRECT (stack, 0xfffffffffffffcc8, 8) , (const, 0x3e6, 4)]
[(stack, 0xfffffffffffffcd0, 8) INDIRECT (stack, 0xfffffffffffffcd0, 8) , (const, 0x3e7, 4), (stack, 0xfffffffffffffcd0, 8) INDIRECT (stack, 0xfffffffffffffcd0, 8) , (const, 0x3e6, 4)]
[(stack, 0xfffffffffffffcd8, 8) INDIRECT (stack, 0xfffffffffffffcd8, 8) , (const, 0x3e7, 4), (stack, 0xfffffffffffffcd8, 8) INDIRECT (stack, 0xfffffffffffffcd8, 8) , (const, 0x3e6, 4)]
[(stack, 0xfffffffffffffce0, 8) INDIRECT (stack, 0xfffffffffffffce0, 8) , (const, 0x3e7, 4), (stack, 0xfffffffffffffce0, 8) INDIRECT (stack, 0xfffffffffffffce0, 8) , (const, 0x3e6, 4)]
[(stack, 0xfffffffffffffce8, 8) INDIRECT (stack, 0xfffffffffffffce8, 8) , (const, 0x3e7, 4), (stack, 0xfffffffffffffce8, 8) INDIRECT (stack, 0xfffffffffffffce8, 8) , (const, 0x3e6, 4)]
[(stack, 0xfffffffffffffcf0, 4) INDIRECT (stack, 0xfffffffffffffcf0, 4) , (const, 0x3e7, 4), (stack, 0xfffffffffffffcf0, 4) INDIRECT (stack, 0xfffffffffffffcf0, 4) , (const, 0x3e6, 4)]
[(stack, 0xfffffffffffffcf4, 4) INDIRECT (stack, 0xfffffffffffffcf4, 4) , (const, 0x3e7, 4), (stack, 0xfffffffffffffcf4, 4) INDIRECT (stack, 0xfffffffffffffcf4, 4) , (const, 0x3e6, 4)]
[(stack, 0xfffffffffffffcf8, 4) INDIRECT (stack, 0xfffffffffffffcf8, 4) , (const, 0x3e7, 4), (stack, 0xfffffffffffffcf8, 4) INDIRECT (stack, 0xfffffffffffffcf8, 4) , (const, 0x3e6, 4)]
[(stack, 0xfffffffffffffcfc, 4) INDIRECT (stack, 0xfffffffffffffcfc, 4) , (const, 0x3e7, 4), (stack, 0xfffffffffffffcfc, 4) INDIRECT (stack, 0xfffffffffffffcfc, 4) , (const, 0x3e6, 4)]
[(stack, 0xfffffffffffffd00, 8) INDIRECT (stack, 0xfffffffffffffd00, 8) , (const, 0x3e7, 4), (stack, 0xfffffffffffffd00, 8) INDIRECT (stack, 0xfffffffffffffd00, 8) , (const, 0x3e6, 4)]
[(stack, 0xfffffffffffffd08, 8) INDIRECT (stack, 0xfffffffffffffd08, 8) , (const, 0x3e7, 4), (stack, 0xfffffffffffffd08, 8) INDIRECT (stack, 0xfffffffffffffd08, 8) , (const, 0x3e6, 4)]
[(stack, 0xfffffffffffffd10, 8) INDIRECT (stack, 0xfffffffffffffd10, 8) , (const, 0x3e7, 4), (stack, 0xfffffffffffffd10, 8) INDIRECT (stack, 0xfffffffffffffd10, 8) , (const, 0x3e6, 4)]
[(stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x3e7, 4), (stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x3e6, 4)]
[(stack, 0xfffffffffffffdb0, 8) INDIRECT (stack, 0xfffffffffffffdb0, 8) , (const, 0x3e7, 4), (stack, 0xfffffffffffffdb0, 8) INDIRECT (stack, 0xfffffffffffffdb0, 8) , (const, 0x3e6, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x3e7, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x3e6, 4)]
[ ---  CALL (ram, 0x234c80, 8)]
[(ram, 0x4eae68, 8) COPY (ram, 0x4eae68, 8), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x3e7, 4)]
[ ---  RETURN (const, 0x1, 4)]
[(ram, 0x4eae68, 8) COPY (ram, 0x4eae68, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[(unique, 0x10000881, 8) COPY (unique, 0xbd80, 8)]
[(unique, 0x10000921, 8) COPY (unique, 0xbd80, 8)]
[ ---  CBRANCH (ram, 0x1e7710, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xb0, 8) , (register, 0x18, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000dcd, 8) , (const, 0x1e7494, 8), (unique, 0x10000dcd, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x386, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x386, 4)]
[(stack, 0xfffffffffffffcc0, 8) INDIRECT (stack, 0xfffffffffffffcc0, 8) , (const, 0x386, 4), (stack, 0xfffffffffffffcc0, 8) INDIRECT (stack, 0xfffffffffffffcc0, 8) , (const, 0x385, 4)]
[(stack, 0xfffffffffffffcc8, 8) INDIRECT (stack, 0xfffffffffffffcc8, 8) , (const, 0x386, 4), (stack, 0xfffffffffffffcc8, 8) INDIRECT (stack, 0xfffffffffffffcc8, 8) , (const, 0x385, 4)]
[(stack, 0xfffffffffffffcd0, 8) INDIRECT (stack, 0xfffffffffffffcd0, 8) , (const, 0x386, 4), (stack, 0xfffffffffffffcd0, 8) INDIRECT (stack, 0xfffffffffffffcd0, 8) , (const, 0x385, 4)]
[(stack, 0xfffffffffffffcd8, 8) INDIRECT (stack, 0xfffffffffffffcd8, 8) , (const, 0x386, 4), (stack, 0xfffffffffffffcd8, 8) INDIRECT (stack, 0xfffffffffffffcd8, 8) , (const, 0x385, 4)]
[(stack, 0xfffffffffffffce0, 8) INDIRECT (stack, 0xfffffffffffffce0, 8) , (const, 0x386, 4), (stack, 0xfffffffffffffce0, 8) INDIRECT (stack, 0xfffffffffffffce0, 8) , (const, 0x385, 4)]
[(stack, 0xfffffffffffffce8, 8) INDIRECT (stack, 0xfffffffffffffce8, 8) , (const, 0x386, 4), (stack, 0xfffffffffffffce8, 8) INDIRECT (stack, 0xfffffffffffffce8, 8) , (const, 0x385, 4)]
[(stack, 0xfffffffffffffcf0, 4) INDIRECT (stack, 0xfffffffffffffcf0, 4) , (const, 0x386, 4), (stack, 0xfffffffffffffcf0, 4) INDIRECT (stack, 0xfffffffffffffcf0, 4) , (const, 0x385, 4)]
[(stack, 0xfffffffffffffcf4, 4) INDIRECT (stack, 0xfffffffffffffcf4, 4) , (const, 0x386, 4), (stack, 0xfffffffffffffcf4, 4) INDIRECT (stack, 0xfffffffffffffcf4, 4) , (const, 0x385, 4)]
[(stack, 0xfffffffffffffcf8, 4) INDIRECT (stack, 0xfffffffffffffcf8, 4) , (const, 0x386, 4), (stack, 0xfffffffffffffcf8, 4) INDIRECT (stack, 0xfffffffffffffcf8, 4) , (const, 0x385, 4)]
[(stack, 0xfffffffffffffcfc, 4) INDIRECT (stack, 0xfffffffffffffcfc, 4) , (const, 0x386, 4), (stack, 0xfffffffffffffcfc, 4) INDIRECT (stack, 0xfffffffffffffcfc, 4) , (const, 0x385, 4)]
[(stack, 0xfffffffffffffd00, 8) INDIRECT (stack, 0xfffffffffffffd00, 8) , (const, 0x386, 4), (stack, 0xfffffffffffffd00, 8) INDIRECT (stack, 0xfffffffffffffd00, 8) , (const, 0x385, 4)]
[(stack, 0xfffffffffffffd08, 8) INDIRECT (stack, 0xfffffffffffffd08, 8) , (const, 0x386, 4), (stack, 0xfffffffffffffd08, 8) INDIRECT (stack, 0xfffffffffffffd08, 8) , (const, 0x385, 4)]
[(stack, 0xfffffffffffffd10, 8) INDIRECT (stack, 0xfffffffffffffd10, 8) , (const, 0x386, 4), (stack, 0xfffffffffffffd10, 8) INDIRECT (stack, 0xfffffffffffffd10, 8) , (const, 0x385, 4)]
[(stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x386, 4), (stack, 0xfffffffffffffda8, 8) INDIRECT (stack, 0xfffffffffffffda8, 8) , (const, 0x385, 4)]
[(stack, 0xfffffffffffffdb0, 8) INDIRECT (stack, 0xfffffffffffffdb0, 8) , (const, 0x386, 4), (stack, 0xfffffffffffffdb0, 8) INDIRECT (stack, 0xfffffffffffffdb0, 8) , (const, 0x385, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x386, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x385, 4)]
[ ---  CALL (ram, 0x1212c8, 8) , (register, 0xb0, 8)]
[(unique, 0x10000879, 8) COPY (register, 0x18, 8)]
[(unique, 0x10000919, 8) COPY (unique, 0xbd80, 8)]
