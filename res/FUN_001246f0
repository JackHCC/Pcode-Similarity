[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff58, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff58, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x36, 4)]
[(ram, 0x4ea9c8, 8) INDIRECT (ram, 0x4ea9c8, 8) , (const, 0x36, 4)]
[(ram, 0x4ea9d8, 8) INDIRECT (ram, 0x4ea9d8, 8) , (const, 0x36, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x36, 4)]
[(ram, 0x4eca18, 4) INDIRECT (ram, 0x4eca18, 4) , (const, 0x36, 4)]
[(ram, 0x4f04e8, 8) INDIRECT (ram, 0x4f04e8, 8) , (const, 0x36, 4)]
[(ram, 0x4f0500, 8) INDIRECT (ram, 0x4f0500, 8) , (const, 0x36, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x36, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x36, 4)]
[(stack, 0xffffffffffffff74, 4) INDIRECT (unique, 0x1000073b, 4) , (const, 0x36, 4), (unique, 0x1000073b, 4) COPY (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100007af, 8), (unique, 0x100007af, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (ram, 0x4eae68, 8) , (register, 0x110, 8) , (const, 0x1, 8)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x36, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x36, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x36, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x36, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x36, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x36, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x36, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x100007a7, 8), (unique, 0x100007a7, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8)]
[ ---  CBRANCH (ram, 0x124c94, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x12bdd0, 8)]
[(ram, 0x4ea9c8, 8) INDIRECT (ram, 0x4ea9c8, 8) , (const, 0x508, 4)]
[(ram, 0x4ea9d8, 8) INDIRECT (ram, 0x4ea9d8, 8) , (const, 0x508, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x508, 4)]
[(ram, 0x4eca18, 4) INDIRECT (ram, 0x4eca18, 4) , (const, 0x508, 4)]
[(ram, 0x4f04e8, 8) INDIRECT (ram, 0x4f04e8, 8) , (const, 0x508, 4)]
[(ram, 0x4f0500, 8) INDIRECT (ram, 0x4f0500, 8) , (const, 0x508, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100007b7, 8) , (unique, 0xbc80, 4), (unique, 0x100007b7, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (ram, 0x4eae68, 8) , (register, 0x110, 8) , (const, 0x1, 8)]
[ ---  BRANCH (ram, 0x124a1e, 1)]
[ ---  CBRANCH (ram, 0x124ca3, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4f0500, 8) , (const, 0x0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x4f0, 4)]
[(ram, 0x4ea9d8, 8) INDIRECT (ram, 0x4ea9d8, 8) , (const, 0x4f0, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x4f0, 4)]
[(ram, 0x4eca18, 4) INDIRECT (ram, 0x4eca18, 4) , (const, 0x4f0, 4)]
[(ram, 0x4f04e8, 8) INDIRECT (ram, 0x4f04e8, 8) , (const, 0x4f0, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x4f0, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x4f0, 4)]
[(stack, 0xffffffffffffff74, 4) INDIRECT (stack, 0xffffffffffffff74, 4) , (const, 0x4f0, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x4f0, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x4f0, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x4f0, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x4f0, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x4f0, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x4f0, 4)]
[ ---  CALL (ram, 0x124300, 8)]
[(stack, 0xffffffffffffff88, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (ram, 0x4f0500, 8), (ram, 0x4f0500, 8) INDIRECT (ram, 0x4f0500, 8) , (const, 0x4f0, 4)]
[(unique, 0x1000074f, 8) COPY (ram, 0x4ea9c8, 8), (ram, 0x4ea9c8, 8) INDIRECT (ram, 0x4ea9c8, 8) , (const, 0x4f0, 4)]
[(unique, 0x1000075f, 8) COPY (ram, 0x4f0500, 8), (ram, 0x4f0500, 8) INDIRECT (ram, 0x4f0500, 8) , (const, 0x4f0, 4)]
[(stack, 0xffffffffffffff88, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (ram, 0x4f0500, 8)]
[(unique, 0x10000757, 8) COPY (ram, 0x4ea9c8, 8)]
[(unique, 0x10000767, 8) COPY (ram, 0x4f0500, 8)]
[(unique, 0x100004d2, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x100004ea, 8) MULTIEQUAL (ram, 0x4ea9d8, 8) , (ram, 0x4ea9d8, 8)]
[(unique, 0x100004f2, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(unique, 0x100004fa, 4) MULTIEQUAL (ram, 0x4eca18, 4) , (ram, 0x4eca18, 4)]
[(unique, 0x100004fe, 8) MULTIEQUAL (ram, 0x4f04e8, 8) , (ram, 0x4f04e8, 8)]
[(unique, 0x1000050e, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(unique, 0x10000516, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(unique, 0x1000051e, 4) MULTIEQUAL (stack, 0xffffffffffffff74, 4) , (stack, 0xffffffffffffff74, 4)]
[(unique, 0x10000522, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(unique, 0x1000052a, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(unique, 0x10000532, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(unique, 0x1000053a, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(unique, 0x10000542, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(unique, 0x1000054a, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(unique, 0x10000552, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff58, 8)]
[(unique, 0x1000070b, 8) COPY (unique, 0x100004c9, 8), (unique, 0x100004c9, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffa8, 8)]
[(unique, 0x10000723, 8) COPY (unique, 0x100004e2, 8), (unique, 0x100004e2, 8) MULTIEQUAL (unique, 0x1000074f, 8) , (unique, 0x10000757, 8)]
[(unique, 0x10000733, 8) COPY (unique, 0x10000506, 8), (unique, 0x10000506, 8) MULTIEQUAL (unique, 0x1000075f, 8) , (unique, 0x10000767, 8)]
[ ---  CBRANCH (ram, 0x124751, 1) , (unique, 0x100004d1, 1), (unique, 0x100004d1, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8)]
[(stack, 0xffffffffffffff80, 8) COPY (const, 0x10, 8)]
[(stack, 0xffffffffffffff90, 8) COPY (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffa8, 8)]
[(unique, 0x1000066b, 8) COPY (register, 0x20, 8)]
[(register, 0x20, 8) PTRADD (register, 0x20, 8) , (unique, 0x10000118, 8) , (const, 0x1, 8), (unique, 0x10000118, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (unique, 0x3100, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3100, 8) INT_ADD (unique, 0x100007bf, 8) , (const, 0x2c, 8), (unique, 0x100007bf, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x8, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x10000506, 8) , (register, 0x0, 8), (register, 0x20, 8) MULTIEQUAL (unique, 0x1000066b, 8) , (unique, 0x10000673, 8)]
[(register, 0x20, 8) PTRADD (register, 0x20, 8) , (unique, 0x10000118, 8) , (const, 0x1, 8), (unique, 0x10000118, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (unique, 0x3100, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3100, 8) INT_ADD (unique, 0x100007bf, 8) , (const, 0x2c, 8), (unique, 0x100007bf, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x8, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x10000506, 8) , (register, 0x0, 8), (register, 0x20, 8) MULTIEQUAL (unique, 0x1000066b, 8) , (unique, 0x10000673, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100007d7, 8) , (const, 0x124798, 8), (unique, 0x100007d7, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (unique, 0x10000369, 8) , (const, 0x1, 8), (unique, 0x10000369, 8) INT_ADD (unique, 0x10000118, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x10000118, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (unique, 0x3100, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3100, 8) INT_ADD (unique, 0x100007bf, 8) , (const, 0x2c, 8), (unique, 0x100007bf, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x8, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x10000506, 8) , (register, 0x0, 8), (register, 0x20, 8) MULTIEQUAL (unique, 0x1000066b, 8) , (unique, 0x10000673, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x0, 8) , (const, 0x6f6d2d766e6f6367, 8), (register, 0x0, 8) CAST (unique, 0x100007e7, 8), (unique, 0x100007e7, 8) CALL (ram, 0x121230, 8) , (register, 0x18, 8) , (unique, 0x10000633, 8) , (unique, 0x100007df, 8), (unique, 0x100007df, 8) CAST (unique, 0xbd80, 8), (register, 0x18, 8) CAST (unique, 0x100007cf, 8), (unique, 0x100007cf, 8) INT_AND (unique, 0x100007c7, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x100007c7, 8) CAST (unique, 0x3800, 8), (unique, 0x3800, 8) PTRADD (register, 0x20, 8) , (unique, 0x10000361, 8) , (const, 0x1, 8), (unique, 0x10000361, 8) INT_ADD (unique, 0x10000118, 8) , (const, 0xf, 8), (unique, 0x10000118, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (unique, 0x3100, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3100, 8) INT_ADD (unique, 0x100007bf, 8) , (const, 0x2c, 8), (unique, 0x100007bf, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x8, 8), (unique, 0x10000633, 8) COPY (stack, 0xffffffffffffff88, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x10000506, 8) , (register, 0x0, 8), (register, 0x20, 8) MULTIEQUAL (unique, 0x1000066b, 8) , (unique, 0x10000673, 8), (stack, 0xffffffffffffff88, 8) MULTIEQUAL (unique, 0xbd80, 8) , (stack, 0xffffffffffffff88, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100007ef, 8) , (const, 0x656c7564, 4), (unique, 0x100007ef, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x8, 8), (register, 0x0, 8) CAST (unique, 0x100007e7, 8), (unique, 0x100007e7, 8) CALL (ram, 0x121230, 8) , (register, 0x18, 8) , (unique, 0x10000633, 8) , (unique, 0x100007df, 8), (unique, 0x100007df, 8) CAST (unique, 0xbd80, 8), (register, 0x18, 8) CAST (unique, 0x100007cf, 8), (unique, 0x100007cf, 8) INT_AND (unique, 0x100007c7, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x100007c7, 8) CAST (unique, 0x3800, 8), (unique, 0x3800, 8) PTRADD (register, 0x20, 8) , (unique, 0x10000361, 8) , (const, 0x1, 8), (unique, 0x10000361, 8) INT_ADD (unique, 0x10000118, 8) , (const, 0xf, 8), (unique, 0x10000118, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (unique, 0x3100, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3100, 8) INT_ADD (unique, 0x100007bf, 8) , (const, 0x2c, 8), (unique, 0x100007bf, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x8, 8), (unique, 0x10000633, 8) COPY (stack, 0xffffffffffffff88, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x10000506, 8) , (register, 0x0, 8), (register, 0x20, 8) MULTIEQUAL (unique, 0x1000066b, 8) , (unique, 0x10000673, 8), (stack, 0xffffffffffffff88, 8) MULTIEQUAL (unique, 0xbd80, 8) , (stack, 0xffffffffffffff88, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (const, 0x73, 2), (unique, 0x3100, 8) CAST (unique, 0x100007ff, 8), (unique, 0x100007ff, 8) INT_ADD (unique, 0x100007f7, 8) , (const, 0xc, 8), (unique, 0x100007f7, 8) CAST (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x100007e7, 8), (unique, 0x100007e7, 8) CALL (ram, 0x121230, 8) , (register, 0x18, 8) , (unique, 0x10000633, 8) , (unique, 0x100007df, 8), (unique, 0x100007df, 8) CAST (unique, 0xbd80, 8), (register, 0x18, 8) CAST (unique, 0x100007cf, 8), (unique, 0x100007cf, 8) INT_AND (unique, 0x100007c7, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x100007c7, 8) CAST (unique, 0x3800, 8), (unique, 0x3800, 8) PTRADD (register, 0x20, 8) , (unique, 0x10000361, 8) , (const, 0x1, 8), (unique, 0x10000361, 8) INT_ADD (unique, 0x10000118, 8) , (const, 0xf, 8), (unique, 0x10000118, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (unique, 0x3100, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3100, 8) INT_ADD (unique, 0x100007bf, 8) , (const, 0x2c, 8), (unique, 0x100007bf, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x8, 8), (unique, 0x10000633, 8) COPY (stack, 0xffffffffffffff88, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x10000506, 8) , (register, 0x0, 8), (register, 0x20, 8) MULTIEQUAL (unique, 0x1000066b, 8) , (unique, 0x10000673, 8), (stack, 0xffffffffffffff88, 8) MULTIEQUAL (unique, 0xbd80, 8) , (stack, 0xffffffffffffff88, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000807, 8) , (const, 0x1247c4, 8), (unique, 0x10000807, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (unique, 0x10000371, 8) , (const, 0x1, 8), (unique, 0x10000371, 8) INT_ADD (unique, 0x10000118, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x10000118, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (unique, 0x3100, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3100, 8) INT_ADD (unique, 0x100007bf, 8) , (const, 0x2c, 8), (unique, 0x100007bf, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x8, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x10000506, 8) , (register, 0x0, 8), (register, 0x20, 8) MULTIEQUAL (unique, 0x1000066b, 8) , (unique, 0x10000673, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xa2, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x93, 4), (register, 0x110, 8) MULTIEQUAL (unique, 0x100004d2, 8) , (register, 0x110, 8)]
[(ram, 0x4ea9c8, 8) INDIRECT (ram, 0x4ea9c8, 8) , (const, 0xa2, 4), (ram, 0x4ea9c8, 8) INDIRECT (ram, 0x4ea9c8, 8) , (const, 0x9f, 4), (ram, 0x4ea9c8, 8) INDIRECT (ram, 0x4ea9c8, 8) , (const, 0x9c, 4), (ram, 0x4ea9c8, 8) INDIRECT (ram, 0x4ea9c8, 8) , (const, 0x98, 4), (ram, 0x4ea9c8, 8) INDIRECT (ram, 0x4ea9c8, 8) , (const, 0x93, 4), (ram, 0x4ea9c8, 8) MULTIEQUAL (unique, 0x10000723, 8) , (ram, 0x4ea9c8, 8)]
[(ram, 0x4ea9d8, 8) INDIRECT (ram, 0x4ea9d8, 8) , (const, 0xa2, 4), (ram, 0x4ea9d8, 8) INDIRECT (ram, 0x4ea9d8, 8) , (const, 0x9f, 4), (ram, 0x4ea9d8, 8) INDIRECT (ram, 0x4ea9d8, 8) , (const, 0x9c, 4), (ram, 0x4ea9d8, 8) INDIRECT (ram, 0x4ea9d8, 8) , (const, 0x98, 4), (ram, 0x4ea9d8, 8) INDIRECT (ram, 0x4ea9d8, 8) , (const, 0x93, 4), (ram, 0x4ea9d8, 8) MULTIEQUAL (unique, 0x100004ea, 8) , (ram, 0x4ea9d8, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xa2, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x9f, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x9c, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x98, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x93, 4), (ram, 0x4eae68, 8) MULTIEQUAL (unique, 0x100004f2, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4eca18, 4) INDIRECT (ram, 0x4eca18, 4) , (const, 0xa2, 4), (ram, 0x4eca18, 4) INDIRECT (ram, 0x4eca18, 4) , (const, 0x9f, 4), (ram, 0x4eca18, 4) INDIRECT (ram, 0x4eca18, 4) , (const, 0x9c, 4), (ram, 0x4eca18, 4) INDIRECT (ram, 0x4eca18, 4) , (const, 0x98, 4), (ram, 0x4eca18, 4) INDIRECT (ram, 0x4eca18, 4) , (const, 0x93, 4), (ram, 0x4eca18, 4) MULTIEQUAL (unique, 0x100004fa, 4) , (ram, 0x4eca18, 4)]
[(ram, 0x4f04e8, 8) INDIRECT (ram, 0x4f04e8, 8) , (const, 0xa2, 4), (ram, 0x4f04e8, 8) INDIRECT (ram, 0x4f04e8, 8) , (const, 0x9f, 4), (ram, 0x4f04e8, 8) INDIRECT (ram, 0x4f04e8, 8) , (const, 0x9c, 4), (ram, 0x4f04e8, 8) INDIRECT (ram, 0x4f04e8, 8) , (const, 0x98, 4), (ram, 0x4f04e8, 8) INDIRECT (ram, 0x4f04e8, 8) , (const, 0x93, 4), (ram, 0x4f04e8, 8) MULTIEQUAL (unique, 0x100004fe, 8) , (ram, 0x4f04e8, 8)]
[(ram, 0x4f0500, 8) INDIRECT (ram, 0x4f0500, 8) , (const, 0xa2, 4), (ram, 0x4f0500, 8) INDIRECT (ram, 0x4f0500, 8) , (const, 0x9f, 4), (ram, 0x4f0500, 8) INDIRECT (ram, 0x4f0500, 8) , (const, 0x9c, 4), (ram, 0x4f0500, 8) INDIRECT (ram, 0x4f0500, 8) , (const, 0x98, 4), (ram, 0x4f0500, 8) INDIRECT (ram, 0x4f0500, 8) , (const, 0x93, 4), (ram, 0x4f0500, 8) MULTIEQUAL (unique, 0x10000733, 8) , (ram, 0x4f0500, 8)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0xa2, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0xa1, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x93, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x92, 4), (stack, 0xffffffffffffff60, 8) MULTIEQUAL (unique, 0x1000050e, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0xa2, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0xa1, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x93, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x92, 4), (stack, 0xffffffffffffff68, 8) MULTIEQUAL (unique, 0x10000516, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff74, 4) INDIRECT (stack, 0xffffffffffffff74, 4) , (const, 0xa2, 4), (stack, 0xffffffffffffff74, 4) INDIRECT (stack, 0xffffffffffffff74, 4) , (const, 0xa1, 4), (stack, 0xffffffffffffff74, 4) INDIRECT (stack, 0xffffffffffffff74, 4) , (const, 0x93, 4), (stack, 0xffffffffffffff74, 4) INDIRECT (stack, 0xffffffffffffff74, 4) , (const, 0x92, 4), (stack, 0xffffffffffffff74, 4) MULTIEQUAL (unique, 0x1000051e, 4) , (stack, 0xffffffffffffff74, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0xa2, 4), (stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0xa1, 4), (stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x93, 4), (stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x92, 4), (stack, 0xffffffffffffff78, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x8, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x10000506, 8) , (register, 0x0, 8)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0xa2, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0xa1, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x93, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x92, 4), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0xa2, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0xa1, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x93, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x92, 4), (stack, 0xffffffffffffff88, 8) MULTIEQUAL (unique, 0xbd80, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0xa2, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0xa1, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x93, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x92, 4), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0xa2, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0xa1, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x93, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x92, 4), (stack, 0xffffffffffffffa0, 8) MULTIEQUAL (unique, 0x1000053a, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0xa2, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0xa1, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x93, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x92, 4), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (unique, 0x10000542, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xa2, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xa1, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x93, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x92, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (unique, 0x1000054a, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffa0, 8) COPY (const, 0x0, 8)]
[(stack, 0xffffffffffffffa8, 8) COPY (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x1248bb, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x17ee30, 8) , (register, 0x18, 8) , (unique, 0x100002f9, 8), (unique, 0x100002f9, 8) COPY (const, 0x2b3893, 8), (register, 0x18, 8) CAST (unique, 0x100007cf, 8), (unique, 0x100007cf, 8) INT_AND (unique, 0x100007c7, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x100007c7, 8) CAST (unique, 0x3800, 8), (unique, 0x3800, 8) PTRADD (register, 0x20, 8) , (unique, 0x10000361, 8) , (const, 0x1, 8), (unique, 0x10000361, 8) INT_ADD (unique, 0x10000118, 8) , (const, 0xf, 8), (unique, 0x10000118, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (unique, 0x3100, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3100, 8) INT_ADD (unique, 0x100007bf, 8) , (const, 0x2c, 8), (unique, 0x100007bf, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x8, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x10000506, 8) , (register, 0x0, 8), (register, 0x20, 8) MULTIEQUAL (unique, 0x1000066b, 8) , (unique, 0x10000673, 8)]
[(unique, 0x3100, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffa0, 8)]
[(ram, 0x4ea9c8, 8) INDIRECT (ram, 0x4ea9c8, 8) , (const, 0xcc, 4)]
[(ram, 0x4ea9d8, 8) INDIRECT (ram, 0x4ea9d8, 8) , (const, 0xcc, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xcc, 4)]
[(ram, 0x4eca18, 4) INDIRECT (ram, 0x4eca18, 4) , (const, 0xcc, 4)]
[(ram, 0x4f04e8, 8) INDIRECT (ram, 0x4f04e8, 8) , (const, 0xcc, 4)]
[(ram, 0x4f0500, 8) INDIRECT (ram, 0x4f0500, 8) , (const, 0xcc, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100003e1, 8) , (register, 0x0, 4), (unique, 0x100003e1, 8) PTRSUB (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 4) INT_OR (unique, 0xbc80, 4) , (const, 0x8000, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100003d1, 8), (unique, 0x100003d1, 8) PTRSUB (register, 0x0, 8) , (const, 0x0, 8)]
[(unique, 0x10000777, 8) COPY (stack, 0xffffffffffffff90, 8)]
[(unique, 0x10000588, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x10000590, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(unique, 0x10000598, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(unique, 0x100005a0, 8) MULTIEQUAL (ram, 0x4ea9c8, 8) , (ram, 0x4ea9c8, 8) , (ram, 0x4ea9c8, 8) , (ram, 0x4ea9c8, 8)]
[(unique, 0x100005a8, 8) MULTIEQUAL (ram, 0x4ea9d8, 8) , (ram, 0x4ea9d8, 8) , (ram, 0x4ea9d8, 8) , (ram, 0x4ea9d8, 8)]
[(unique, 0x100005b0, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(unique, 0x100005b8, 4) MULTIEQUAL (ram, 0x4eca18, 4) , (ram, 0x4eca18, 4) , (ram, 0x4eca18, 4) , (ram, 0x4eca18, 4)]
[(unique, 0x100005bc, 8) MULTIEQUAL (ram, 0x4f04e8, 8) , (ram, 0x4f04e8, 8) , (ram, 0x4f04e8, 8) , (ram, 0x4f04e8, 8)]
[(unique, 0x100005c4, 8) MULTIEQUAL (ram, 0x4f0500, 8) , (ram, 0x4f0500, 8) , (ram, 0x4f0500, 8) , (ram, 0x4f0500, 8)]
[(unique, 0x100005cc, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(unique, 0x100005d4, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(unique, 0x100005dc, 4) MULTIEQUAL (stack, 0xffffffffffffff74, 4) , (stack, 0xffffffffffffff74, 4) , (stack, 0xffffffffffffff74, 4) , (stack, 0xffffffffffffff74, 4)]
[(unique, 0x100005e0, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(unique, 0x100005e8, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(unique, 0x100005f0, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(unique, 0x10000600, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(unique, 0x10000747, 8) COPY (unique, 0x100005f8, 8), (unique, 0x100005f8, 8) MULTIEQUAL (unique, 0x10000777, 8) , (unique, 0x1000077f, 8) , (unique, 0x10000787, 8) , (unique, 0x1000078f, 8)]
[ ---  CBRANCH (ram, 0x1248aa, 1) , (unique, 0x10000587, 1), (unique, 0x10000587, 1) INT_EQUAL (unique, 0x10000608, 4) , (const, 0x0, 4), (unique, 0x10000608, 4) INT_AND (unique, 0x1000060c, 4) , (const, 0x10, 4), (unique, 0x1000060c, 4) MULTIEQUAL (unique, 0xbc80, 4) , (unique, 0xbc80, 4) , (unique, 0xbc80, 4) , (unique, 0xbc80, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000080f, 8) , (const, 0x12480c, 8), (unique, 0x1000080f, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (unique, 0x10000389, 8) , (const, 0x1, 8), (unique, 0x10000389, 8) INT_ADD (unique, 0x10000118, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (unique, 0x10000588, 8) , (const, 0xd9, 4)]
[(ram, 0x4ea9c8, 8) INDIRECT (unique, 0x100005a0, 8) , (const, 0xd9, 4)]
[(ram, 0x4ea9d8, 8) INDIRECT (unique, 0x100005a8, 8) , (const, 0xd9, 4)]
[(ram, 0x4eae68, 8) INDIRECT (unique, 0x100005b0, 8) , (const, 0xd9, 4)]
[(ram, 0x4eca18, 4) INDIRECT (unique, 0x100005b8, 4) , (const, 0xd9, 4)]
[(ram, 0x4f04e8, 8) INDIRECT (unique, 0x100005bc, 8) , (const, 0xd9, 4)]
[(ram, 0x4f0500, 8) INDIRECT (unique, 0x100005c4, 8) , (const, 0xd9, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0xd9, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (unique, 0x100005cc, 8) , (const, 0xd8, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0xd9, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (unique, 0x100005d4, 8) , (const, 0xd8, 4)]
[(stack, 0xffffffffffffff74, 4) INDIRECT (stack, 0xffffffffffffff74, 4) , (const, 0xd9, 4), (stack, 0xffffffffffffff74, 4) INDIRECT (unique, 0x100005dc, 4) , (const, 0xd8, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0xd9, 4), (stack, 0xffffffffffffff78, 8) INDIRECT (unique, 0x100005e0, 8) , (const, 0xd8, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0xd9, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (unique, 0x100005e8, 8) , (const, 0xd8, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0xd9, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (unique, 0x100005f0, 8) , (const, 0xd8, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0xd9, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (unique, 0x10000747, 8) , (const, 0xd8, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0xd9, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (unique, 0x10000598, 8) , (const, 0xd8, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xd9, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (unique, 0x10000600, 8) , (const, 0xd8, 4)]
[(unique, 0x1000064b, 8) COPY (stack, 0xffffffffffffffa0, 8), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0xd9, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (unique, 0x10000590, 8) , (const, 0xd8, 4)]
[ ---  CBRANCH (ram, 0x1248aa, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x17faa0, 8) , (unique, 0x10000817, 8) , (unique, 0x1000081f, 8) , (const, 0xa, 4) , (register, 0x0, 8), (unique, 0x1000081f, 8) CAST (unique, 0x100005f8, 8), (unique, 0x10000817, 8) CAST (unique, 0x3100, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000827, 8) , (const, 0x124829, 8), (unique, 0x10000827, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (unique, 0x10000391, 8) , (const, 0x1, 8), (unique, 0x10000391, 8) INT_ADD (unique, 0x10000118, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xec, 4)]
[(ram, 0x4ea9c8, 8) INDIRECT (ram, 0x4ea9c8, 8) , (const, 0xec, 4)]
[(ram, 0x4ea9d8, 8) INDIRECT (ram, 0x4ea9d8, 8) , (const, 0xec, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xec, 4)]
[(ram, 0x4eca18, 4) INDIRECT (ram, 0x4eca18, 4) , (const, 0xec, 4)]
[(ram, 0x4f04e8, 8) INDIRECT (ram, 0x4f04e8, 8) , (const, 0xec, 4)]
[(ram, 0x4f0500, 8) INDIRECT (ram, 0x4f0500, 8) , (const, 0xec, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0xec, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0xeb, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0xec, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0xeb, 4)]
[(stack, 0xffffffffffffff74, 4) INDIRECT (stack, 0xffffffffffffff74, 4) , (const, 0xec, 4), (stack, 0xffffffffffffff74, 4) INDIRECT (stack, 0xffffffffffffff74, 4) , (const, 0xeb, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0xec, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0xeb, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0xec, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0xeb, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0xec, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0xeb, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0xec, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0xeb, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xec, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xeb, 4)]
[(unique, 0x1000063b, 8) COPY (stack, 0xffffffffffffff88, 8), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0xec, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0xeb, 4)]
[(unique, 0x1000062b, 8) COPY (stack, 0xffffffffffffff78, 8), (stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0xec, 4), (stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0xeb, 4)]
[ ---  CBRANCH (ram, 0x124a88, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10000837, 8), (unique, 0x10000837, 8) CALL (ram, 0x121110, 8) , (unique, 0x1000082f, 8) , (const, 0x23, 4), (unique, 0x1000082f, 8) CAST (unique, 0x1000064b, 8)]
[ ---  CBRANCH (ram, 0x124844, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0xa, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) CAST (unique, 0x10000847, 8), (unique, 0x10000847, 8) INT_ADD (unique, 0x1000083f, 8) , (unique, 0x10000449, 8), (unique, 0x1000083f, 8) CAST (unique, 0x1000064b, 8), (unique, 0x10000449, 8) INT_ADD (register, 0x0, 8) , (const, 0xffffffffffffffff, 8)]
[(ram, 0x4ea9c8, 8) INDIRECT (ram, 0x4ea9c8, 8) , (const, 0x4ec, 4)]
[(ram, 0x4ea9d8, 8) INDIRECT (ram, 0x4ea9d8, 8) , (const, 0x4ec, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x4ec, 4)]
[(ram, 0x4eca18, 4) INDIRECT (ram, 0x4eca18, 4) , (const, 0x4ec, 4)]
[(ram, 0x4f04e8, 8) INDIRECT (ram, 0x4f04e8, 8) , (const, 0x4ec, 4)]
[(ram, 0x4f0500, 8) INDIRECT (ram, 0x4f0500, 8) , (const, 0x4ec, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3a00, 8) , (const, 0x0, 1)]
[ ---  BRANCH (ram, 0x124844, 1)]
[(ram, 0x4ea9c8, 8) INDIRECT (ram, 0x4ea9c8, 8) , (const, 0xf8, 4)]
[(ram, 0x4ea9d8, 8) INDIRECT (ram, 0x4ea9d8, 8) , (const, 0xf8, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xf8, 4)]
[(ram, 0x4eca18, 4) INDIRECT (ram, 0x4eca18, 4) , (const, 0xf8, 4)]
[(ram, 0x4f04e8, 8) INDIRECT (ram, 0x4f04e8, 8) , (const, 0xf8, 4)]
[(ram, 0x4f0500, 8) INDIRECT (ram, 0x4f0500, 8) , (const, 0xf8, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000084f, 8) , (const, 0x0, 1), (unique, 0x1000084f, 8) CAST (register, 0x0, 8)]
[ ---  BRANCH (ram, 0x124844, 1)]
[(ram, 0x4f0500, 8) MULTIEQUAL (ram, 0x4f0500, 8) , (ram, 0x4f0500, 8) , (ram, 0x4f0500, 8) , (ram, 0x4f0500, 8)]
[(ram, 0x4f04e8, 8) MULTIEQUAL (ram, 0x4f04e8, 8) , (ram, 0x4f04e8, 8) , (ram, 0x4f04e8, 8) , (ram, 0x4f04e8, 8)]
[(ram, 0x4eca18, 4) MULTIEQUAL (ram, 0x4eca18, 4) , (ram, 0x4eca18, 4) , (ram, 0x4eca18, 4) , (ram, 0x4eca18, 4)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4ea9d8, 8) MULTIEQUAL (ram, 0x4ea9d8, 8) , (ram, 0x4ea9d8, 8) , (ram, 0x4ea9d8, 8) , (ram, 0x4ea9d8, 8)]
[(ram, 0x4ea9c8, 8) MULTIEQUAL (ram, 0x4ea9c8, 8) , (ram, 0x4ea9c8, 8) , (ram, 0x4ea9c8, 8) , (ram, 0x4ea9c8, 8)]
[ ---  CBRANCH (ram, 0x124840, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x58c00, 1) , (const, 0x0, 1), (unique, 0x58c00, 1) INT_AND (unique, 0xbb00, 1) , (const, 0x20, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) PTRADD (unique, 0x100004e2, 8) , (unique, 0x100003e9, 8) , (const, 0x1, 8), (unique, 0x100003e9, 8) INT_ADD (unique, 0x3900, 8) , (const, 0x1, 8), (unique, 0x3900, 8) INT_MULT (register, 0x8, 8) , (const, 0x2, 8), (register, 0x8, 8) INT_SEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x10000857, 8), (unique, 0x10000857, 8) CAST (register, 0xa0, 8), (register, 0xa0, 8) MULTIEQUAL (unique, 0x1000064b, 8) , (register, 0xa0, 8) , (unique, 0x1000064b, 8) , (unique, 0x1000064b, 8)]
[(register, 0xa0, 8) CAST (unique, 0x10000867, 8), (unique, 0x10000867, 8) INT_ADD (unique, 0x1000085f, 8) , (const, 0x1, 8), (unique, 0x1000085f, 8) CAST (register, 0xa0, 8)]
[ ---  CBRANCH (ram, 0x1248a0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (register, 0xa0, 8)]
[(unique, 0x10000683, 8) COPY (register, 0xa0, 8)]
[ ---  CBRANCH (ram, 0x1248a0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x0, 1)]
[ ---  CBRANCH (ram, 0x124860, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x1000087f, 8), (unique, 0x1000087f, 8) CAST (register, 0x80, 8), (register, 0x80, 8) CAST (unique, 0x10000877, 8), (unique, 0x10000877, 8) INT_ADD (unique, 0x1000086f, 8) , (const, 0x1, 8), (unique, 0x1000086f, 8) CAST (register, 0x80, 8), (register, 0x80, 8) MULTIEQUAL (unique, 0x1000067b, 8) , (unique, 0x10000683, 8)]
[(unique, 0x1000067b, 8) COPY (register, 0x80, 8)]
[ ---  CBRANCH (ram, 0x124878, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x58c00, 1) , (const, 0x0, 1), (unique, 0x58c00, 1) INT_AND (unique, 0xbb00, 1) , (const, 0x20, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) PTRADD (unique, 0x100004e2, 8) , (unique, 0x100003f1, 8) , (const, 0x1, 8), (unique, 0x100003f1, 8) INT_ADD (unique, 0x3900, 8) , (const, 0x1, 8), (unique, 0x3900, 8) INT_MULT (register, 0x10, 8) , (const, 0x2, 8), (register, 0x10, 8) INT_SEXT (unique, 0xbb00, 1)]
[ ---  CBRANCH (ram, 0x124aa0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x10, 8) , (unique, 0x1000089f, 8), (unique, 0x1000089f, 8) CAST (unique, 0x100002c9, 8), (unique, 0x100002c9, 8) PTRSUB (const, 0x0, 8) , (const, 0x5, 8), (register, 0x10, 8) CAST (unique, 0x10000897, 8), (unique, 0x10000897, 8) INT_SUB (unique, 0x10000887, 8) , (unique, 0x1000088f, 8), (unique, 0x1000088f, 8) CAST (register, 0xa0, 8), (unique, 0x10000887, 8) CAST (register, 0x80, 8)]
[ ---  CBRANCH (ram, 0x1248a0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd00, 4) , (const, 0x61696c61, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (register, 0xa0, 8)]
[ ---  CBRANCH (ram, 0x1248a0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x73, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x100008a7, 8), (unique, 0x100008a7, 8) CAST (unique, 0x3800, 8), (unique, 0x3800, 8) PTRADD (register, 0xa0, 8) , (const, 0x1, 8) , (const, 0x4, 8)]
[(unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) PTRADD (unique, 0x100004e2, 8) , (unique, 0x10000459, 8) , (const, 0x1, 8), (unique, 0x10000459, 8) INT_ADD (unique, 0x3900, 8) , (const, 0x1, 8), (unique, 0x3900, 8) INT_MULT (register, 0x10, 8) , (const, 0x2, 8), (register, 0x10, 8) INT_SEXT (unique, 0xbb00, 1)]
[(unique, 0x1000055a, 8) MULTIEQUAL (register, 0x80, 8) , (register, 0x80, 8)]
[(unique, 0x10000562, 1) MULTIEQUAL (unique, 0xbb00, 1) , (unique, 0xbb00, 1)]
[(unique, 0x10000563, 8) MULTIEQUAL (register, 0x10, 8) , (register, 0x10, 8)]
[ ---  CBRANCH (ram, 0x124ae3, 1) , (unique, 0x1000056b, 1), (unique, 0x1000056b, 1) INT_NOTEQUAL (unique, 0x58c00, 1) , (const, 0x0, 1), (unique, 0x58c00, 1) INT_AND (unique, 0xbb00, 1) , (const, 0x20, 1), (unique, 0xbb00, 1) MULTIEQUAL (unique, 0xbb00, 1) , (unique, 0xbb00, 1)]
[(unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) PTRADD (unique, 0x100004e2, 8) , (unique, 0x10000461, 8) , (const, 0x1, 8), (unique, 0x10000461, 8) INT_ADD (unique, 0x3900, 8) , (const, 0x1, 8), (unique, 0x3900, 8) INT_MULT (register, 0x10, 8) , (const, 0x2, 8), (register, 0x10, 8) INT_SEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x100008bf, 8), (unique, 0x100008bf, 8) CAST (register, 0x80, 8), (register, 0x80, 8) CAST (unique, 0x100008b7, 8), (unique, 0x100008b7, 8) INT_ADD (unique, 0x100008af, 8) , (const, 0x1, 8), (unique, 0x100008af, 8) CAST (unique, 0x1000055a, 8)]
[(unique, 0x100006c3, 8) COPY (unique, 0x1000055a, 8)]
[ ---  CBRANCH (ram, 0x124afb, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x10000562, 1) , (const, 0x0, 1)]
[(unique, 0x3800, 8) CAST (unique, 0x100008cf, 8), (unique, 0x100008cf, 8) INT_ADD (unique, 0x100008c7, 8) , (const, 0x1, 8), (unique, 0x100008c7, 8) CAST (register, 0xa0, 8), (register, 0xa0, 8) COPY (unique, 0x100006d3, 8), (unique, 0x100006d3, 8) MULTIEQUAL (unique, 0x100006c3, 8) , (unique, 0x100006cb, 8)]
[(ram, 0x4ea9c8, 8) INDIRECT (ram, 0x4ea9c8, 8) , (const, 0x36a, 4), (ram, 0x4ea9c8, 8) MULTIEQUAL (ram, 0x4ea9c8, 8) , (ram, 0x4ea9c8, 8)]
[(ram, 0x4ea9d8, 8) INDIRECT (ram, 0x4ea9d8, 8) , (const, 0x36a, 4), (ram, 0x4ea9d8, 8) MULTIEQUAL (ram, 0x4ea9d8, 8) , (ram, 0x4ea9d8, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x36a, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4eca18, 4) INDIRECT (ram, 0x4eca18, 4) , (const, 0x36a, 4), (ram, 0x4eca18, 4) MULTIEQUAL (ram, 0x4eca18, 4) , (ram, 0x4eca18, 4)]
[(ram, 0x4f04e8, 8) INDIRECT (ram, 0x4f04e8, 8) , (const, 0x36a, 4), (ram, 0x4f04e8, 8) MULTIEQUAL (ram, 0x4f04e8, 8) , (ram, 0x4f04e8, 8)]
[(ram, 0x4f0500, 8) INDIRECT (ram, 0x4f0500, 8) , (const, 0x36a, 4), (ram, 0x4f0500, 8) MULTIEQUAL (ram, 0x4f0500, 8) , (ram, 0x4f0500, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100008df, 8) , (register, 0x10, 1), (unique, 0x100008df, 8) CAST (register, 0xa0, 8), (register, 0x10, 1) SUBPIECE (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100008d7, 8), (unique, 0x100008d7, 8) CAST (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (ram, 0x4ea9d8, 8) , (unique, 0x3300, 8) , (const, 0x1, 8), (unique, 0x3300, 8) INT_MULT (register, 0x10, 8) , (const, 0x4, 8), (register, 0xa0, 8) COPY (unique, 0x100006d3, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0x10000563, 8) , (register, 0x10, 8), (unique, 0x100006d3, 8) MULTIEQUAL (unique, 0x100006c3, 8) , (unique, 0x100006cb, 8), (ram, 0x4ea9d8, 8) MULTIEQUAL (ram, 0x4ea9d8, 8) , (ram, 0x4ea9d8, 8)]
[(register, 0x10, 8) INT_SEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) CAST (unique, 0x100008ef, 8), (unique, 0x100008ef, 8) INT_ADD (unique, 0x100008e7, 8) , (const, 0x1, 8), (unique, 0x100008e7, 8) CAST (register, 0xa0, 8), (register, 0xa0, 8) COPY (unique, 0x100006d3, 8), (unique, 0x100006d3, 8) MULTIEQUAL (unique, 0x100006c3, 8) , (unique, 0x100006cb, 8)]
[ ---  CBRANCH (ram, 0x124af0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) CAST (unique, 0x100008ef, 8), (unique, 0x100008ef, 8) INT_ADD (unique, 0x100008e7, 8) , (const, 0x1, 8), (unique, 0x100008e7, 8) CAST (register, 0xa0, 8), (register, 0xa0, 8) COPY (unique, 0x100006d3, 8), (unique, 0x100006d3, 8) MULTIEQUAL (unique, 0x100006c3, 8) , (unique, 0x100006cb, 8)]
[(unique, 0x100006cb, 8) COPY (unique, 0x3800, 8)]
[ ---  CBRANCH (ram, 0x124b1c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x58c00, 1) , (const, 0x0, 1), (unique, 0x58c00, 1) INT_AND (unique, 0xbb00, 1) , (const, 0x20, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) PTRADD (unique, 0x100004e2, 8) , (unique, 0x10000469, 8) , (const, 0x1, 8), (unique, 0x10000469, 8) INT_ADD (unique, 0x3900, 8) , (const, 0x1, 8), (unique, 0x3900, 8) INT_MULT (register, 0x10, 8) , (const, 0x2, 8)]
[(ram, 0x4ea9c8, 8) INDIRECT (ram, 0x4ea9c8, 8) , (const, 0x38b, 4)]
[(ram, 0x4ea9d8, 8) INDIRECT (ram, 0x4ea9d8, 8) , (const, 0x38b, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x38b, 4)]
[(ram, 0x4eca18, 4) INDIRECT (ram, 0x4eca18, 4) , (const, 0x38b, 4)]
[(ram, 0x4f04e8, 8) INDIRECT (ram, 0x4f04e8, 8) , (const, 0x38b, 4)]
[(ram, 0x4f0500, 8) INDIRECT (ram, 0x4f0500, 8) , (const, 0x38b, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100008f7, 8) , (const, 0x0, 1), (unique, 0x100008f7, 8) CAST (unique, 0x3800, 8)]
[(unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) PTRADD (unique, 0x100004e2, 8) , (unique, 0x10000471, 8) , (const, 0x1, 8), (unique, 0x10000471, 8) INT_ADD (unique, 0x3900, 8) , (const, 0x1, 8), (unique, 0x3900, 8) INT_MULT (register, 0x0, 8) , (const, 0x2, 8), (register, 0x0, 8) INT_SEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000907, 8), (unique, 0x10000907, 8) INT_ADD (unique, 0x100008ff, 8) , (const, 0x2, 8), (unique, 0x100008ff, 8) CAST (register, 0xa0, 8)]
[(unique, 0x1000076f, 8) COPY (unique, 0x3800, 8), (unique, 0x3800, 8) CAST (unique, 0x10000917, 8), (unique, 0x10000917, 8) INT_ADD (unique, 0x1000090f, 8) , (const, 0x2, 8), (unique, 0x1000090f, 8) CAST (register, 0xa0, 8)]
[(unique, 0x1000056c, 1) MULTIEQUAL (unique, 0xbb00, 1) , (unique, 0xbb00, 1)]
[(unique, 0x1000056d, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[(unique, 0x10000575, 8) MULTIEQUAL (unique, 0x1000076f, 8) , (register, 0x10, 8)]
[ ---  CBRANCH (ram, 0x124b53, 1) , (unique, 0x1000057d, 1), (unique, 0x1000057d, 1) INT_NOTEQUAL (unique, 0x58c00, 1) , (const, 0x0, 1), (unique, 0x58c00, 1) INT_AND (unique, 0xbb00, 1) , (const, 0x20, 1), (unique, 0xbb00, 1) MULTIEQUAL (unique, 0xbb00, 1) , (unique, 0xbb00, 1)]
[(unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) PTRADD (unique, 0x100004e2, 8) , (unique, 0x10000479, 8) , (const, 0x1, 8), (unique, 0x10000479, 8) INT_ADD (unique, 0x3900, 8) , (const, 0x1, 8), (unique, 0x3900, 8) INT_MULT (register, 0x0, 8) , (const, 0x2, 8), (register, 0x0, 8) INT_SEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x1000092f, 8), (unique, 0x1000092f, 8) CAST (register, 0x10, 8), (register, 0x10, 8) CAST (unique, 0x10000927, 8), (unique, 0x10000927, 8) INT_ADD (unique, 0x1000091f, 8) , (const, 0x1, 8), (unique, 0x1000091f, 8) CAST (unique, 0x10000575, 8)]
[(unique, 0x100006ab, 8) COPY (unique, 0x3800, 8)]
[ ---  CBRANCH (ram, 0x124b6b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x1000056c, 1) , (const, 0x0, 1)]
[(unique, 0x3800, 8) CAST (unique, 0x1000093f, 8), (unique, 0x1000093f, 8) INT_ADD (unique, 0x10000937, 8) , (const, 0x1, 8), (unique, 0x10000937, 8) CAST (register, 0xa0, 8), (register, 0xa0, 8) COPY (unique, 0x100006bb, 8), (unique, 0x100006bb, 8) MULTIEQUAL (unique, 0x100006ab, 8) , (unique, 0x100006b3, 8)]
[(ram, 0x4ea9c8, 8) INDIRECT (ram, 0x4ea9c8, 8) , (const, 0x3de, 4), (ram, 0x4ea9c8, 8) MULTIEQUAL (ram, 0x4ea9c8, 8) , (ram, 0x4ea9c8, 8)]
[(ram, 0x4ea9d8, 8) INDIRECT (ram, 0x4ea9d8, 8) , (const, 0x3de, 4), (ram, 0x4ea9d8, 8) MULTIEQUAL (ram, 0x4ea9d8, 8) , (ram, 0x4ea9d8, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x3de, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4eca18, 4) INDIRECT (ram, 0x4eca18, 4) , (const, 0x3de, 4), (ram, 0x4eca18, 4) MULTIEQUAL (ram, 0x4eca18, 4) , (ram, 0x4eca18, 4)]
[(ram, 0x4f04e8, 8) INDIRECT (ram, 0x4f04e8, 8) , (const, 0x3de, 4), (ram, 0x4f04e8, 8) MULTIEQUAL (ram, 0x4f04e8, 8) , (ram, 0x4f04e8, 8)]
[(ram, 0x4f0500, 8) INDIRECT (ram, 0x4f0500, 8) , (const, 0x3de, 4), (ram, 0x4f0500, 8) MULTIEQUAL (ram, 0x4f0500, 8) , (ram, 0x4f0500, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000095f, 8) , (register, 0x0, 1), (unique, 0x1000095f, 8) CAST (register, 0xa0, 8), (register, 0x0, 1) SUBPIECE (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000957, 8), (unique, 0x10000957, 8) CAST (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (ram, 0x4ea9d8, 8) , (unique, 0x3300, 8) , (const, 0x1, 8), (unique, 0x3300, 8) INT_MULT (register, 0x0, 8) , (const, 0x4, 8), (register, 0xa0, 8) COPY (unique, 0x100006bb, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x1000056d, 8) , (register, 0x0, 8), (unique, 0x100006bb, 8) MULTIEQUAL (unique, 0x100006ab, 8) , (unique, 0x100006b3, 8), (ram, 0x4ea9d8, 8) MULTIEQUAL (ram, 0x4ea9d8, 8) , (ram, 0x4ea9d8, 8)]
[(register, 0x0, 8) INT_SEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x10000967, 8), (unique, 0x10000967, 8) CAST (register, 0x10, 8), (register, 0x10, 8) CAST (unique, 0x1000094f, 8), (unique, 0x1000094f, 8) INT_ADD (unique, 0x10000947, 8) , (const, 0x1, 8), (unique, 0x10000947, 8) CAST (register, 0x10, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0x10000575, 8) , (register, 0x10, 8)]
[ ---  CBRANCH (ram, 0x124b60, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x10000967, 8), (unique, 0x10000967, 8) CAST (register, 0x10, 8), (register, 0x10, 8) CAST (unique, 0x1000094f, 8), (unique, 0x1000094f, 8) INT_ADD (unique, 0x10000947, 8) , (const, 0x1, 8), (unique, 0x10000947, 8) CAST (register, 0x10, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0x10000575, 8) , (register, 0x10, 8)]
[(unique, 0x100006b3, 8) COPY (unique, 0x3800, 8)]
[ ---  CBRANCH (ram, 0x124b89, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x58c00, 1) , (const, 0x0, 1), (unique, 0x58c00, 1) INT_AND (unique, 0xbb00, 1) , (const, 0x20, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) PTRADD (unique, 0x100004e2, 8) , (unique, 0x10000481, 8) , (const, 0x1, 8), (unique, 0x10000481, 8) INT_ADD (unique, 0x3900, 8) , (const, 0x1, 8), (unique, 0x3900, 8) INT_MULT (register, 0x0, 8) , (const, 0x2, 8)]
[ ---  CBRANCH (ram, 0x1248a0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x3800, 8) , (unique, 0x3800, 8)]
[(ram, 0x4ea9c8, 8) INDIRECT (ram, 0x4ea9c8, 8) , (const, 0x3f7, 4)]
[(ram, 0x4ea9d8, 8) INDIRECT (ram, 0x4ea9d8, 8) , (const, 0x3f7, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x3f7, 4)]
[(ram, 0x4eca18, 4) INDIRECT (ram, 0x4eca18, 4) , (const, 0x3f7, 4)]
[(ram, 0x4f0500, 8) INDIRECT (ram, 0x4f0500, 8) , (const, 0x3f7, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000096f, 8) , (const, 0x0, 1), (unique, 0x1000096f, 8) CAST (unique, 0x3800, 8)]
[(unique, 0x1000068b, 8) COPY (register, 0xa0, 8)]
[(unique, 0x100006f3, 8) COPY (unique, 0x3800, 8)]
[ ---  CBRANCH (ram, 0x124bfb, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4f04e8, 8) , (const, 0x0, 8), (ram, 0x4f04e8, 8) INDIRECT (ram, 0x4f04e8, 8) , (const, 0x3f7, 4)]
[(stack, 0xffffffffffffff68, 8) COPY (unique, 0x3800, 8)]
[(stack, 0xffffffffffffff60, 8) COPY (register, 0xa0, 8)]
[(unique, 0x100006a3, 8) COPY (ram, 0x4f04e8, 8)]
[ ---  BRANCH (ram, 0x124bca, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000977, 8) , (const, 0x124bd6, 8), (unique, 0x10000977, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (unique, 0x100003c1, 8) , (const, 0x1, 8), (unique, 0x100003c1, 8) INT_ADD (unique, 0x10000118, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x411, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4ea9c8, 8) INDIRECT (ram, 0x4ea9c8, 8) , (const, 0x411, 4), (ram, 0x4ea9c8, 8) MULTIEQUAL (ram, 0x4ea9c8, 8) , (ram, 0x4ea9c8, 8) , (ram, 0x4ea9c8, 8)]
[(ram, 0x4ea9d8, 8) INDIRECT (ram, 0x4ea9d8, 8) , (const, 0x411, 4), (ram, 0x4ea9d8, 8) MULTIEQUAL (ram, 0x4ea9d8, 8) , (ram, 0x4ea9d8, 8) , (ram, 0x4ea9d8, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x411, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4eca18, 4) INDIRECT (ram, 0x4eca18, 4) , (const, 0x411, 4), (ram, 0x4eca18, 4) MULTIEQUAL (ram, 0x4eca18, 4) , (ram, 0x4eca18, 4) , (ram, 0x4eca18, 4)]
[(ram, 0x4f04e8, 8) INDIRECT (ram, 0x4f04e8, 8) , (const, 0x411, 4), (ram, 0x4f04e8, 8) MULTIEQUAL (ram, 0x4f04e8, 8) , (ram, 0x4f04e8, 8) , (ram, 0x4f04e8, 8)]
[(ram, 0x4f0500, 8) INDIRECT (ram, 0x4f0500, 8) , (const, 0x411, 4), (ram, 0x4f0500, 8) MULTIEQUAL (ram, 0x4f0500, 8) , (ram, 0x4f0500, 8) , (ram, 0x4f0500, 8)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x411, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x410, 4), (stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x411, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x410, 4), (stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff74, 4) INDIRECT (stack, 0xffffffffffffff74, 4) , (const, 0x411, 4), (stack, 0xffffffffffffff74, 4) INDIRECT (stack, 0xffffffffffffff74, 4) , (const, 0x410, 4), (stack, 0xffffffffffffff74, 4) MULTIEQUAL (stack, 0xffffffffffffff74, 4) , (stack, 0xffffffffffffff74, 4) , (stack, 0xffffffffffffff74, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x411, 4), (stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x410, 4), (stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x411, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x410, 4), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x411, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x410, 4), (stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x411, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x410, 4), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x411, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x410, 4), (stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x411, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x410, 4), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x411, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x410, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(register, 0x207, 1) INT_SLESS (const, 0xffffffff, 4) , (register, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x121200, 8) , (unique, 0x1000097f, 8) , (unique, 0xbd80, 8), (unique, 0x1000097f, 8) CAST (unique, 0x1000055a, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0xa0, 8), (register, 0xa0, 8) MULTIEQUAL (unique, 0x100006a3, 8) , (unique, 0xbd80, 8) , (unique, 0xbd80, 8)]
[ ---  CBRANCH (ram, 0x1248a0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x121200, 8) , (unique, 0x1000097f, 8) , (unique, 0xbd80, 8), (unique, 0x1000097f, 8) CAST (unique, 0x1000055a, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0xa0, 8), (register, 0xa0, 8) MULTIEQUAL (unique, 0x100006a3, 8) , (unique, 0xbd80, 8) , (unique, 0xbd80, 8)]
[(unique, 0x10000797, 8) COPY (stack, 0xffffffffffffff60, 8)]
[(unique, 0x1000079f, 8) COPY (stack, 0xffffffffffffff68, 8)]
[ ---  CBRANCH (ram, 0x124bc0, 1) , (register, 0x207, 1)]
[ ---  CBRANCH (ram, 0x124bea, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) CAST (unique, 0x10000987, 8), (unique, 0x10000987, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRADD (register, 0xa0, 8) , (const, 0x6, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x124bca, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) CAST (unique, 0x1000098f, 8), (unique, 0x1000098f, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRADD (register, 0xa0, 8) , (const, 0x4, 8) , (const, 0x8, 8)]
[(register, 0xb8, 8) MULTIEQUAL (unique, 0x100006f3, 8) , (unique, 0x1000079f, 8) , (unique, 0x1000079f, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100009af, 8) , (const, 0x124c1a, 8), (unique, 0x100009af, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (unique, 0x100003a1, 8) , (const, 0x1, 8), (unique, 0x100003a1, 8) INT_ADD (unique, 0x10000118, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x448, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4ea9c8, 8) INDIRECT (ram, 0x4ea9c8, 8) , (const, 0x448, 4), (ram, 0x4ea9c8, 8) MULTIEQUAL (ram, 0x4ea9c8, 8) , (ram, 0x4ea9c8, 8) , (ram, 0x4ea9c8, 8)]
[(ram, 0x4ea9d8, 8) INDIRECT (ram, 0x4ea9d8, 8) , (const, 0x448, 4), (ram, 0x4ea9d8, 8) MULTIEQUAL (ram, 0x4ea9d8, 8) , (ram, 0x4ea9d8, 8) , (ram, 0x4ea9d8, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x448, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4eca18, 4) INDIRECT (ram, 0x4eca18, 4) , (const, 0x448, 4), (ram, 0x4eca18, 4) MULTIEQUAL (ram, 0x4eca18, 4) , (ram, 0x4eca18, 4) , (ram, 0x4eca18, 4)]
[(ram, 0x4f04e8, 8) INDIRECT (ram, 0x4f04e8, 8) , (const, 0x448, 4), (ram, 0x4f04e8, 8) MULTIEQUAL (ram, 0x4f04e8, 8) , (ram, 0x4f04e8, 8) , (ram, 0x4f04e8, 8)]
[(ram, 0x4f0500, 8) INDIRECT (ram, 0x4f0500, 8) , (const, 0x448, 4), (ram, 0x4f0500, 8) MULTIEQUAL (ram, 0x4f0500, 8) , (ram, 0x4f0500, 8) , (ram, 0x4f0500, 8)]
[(stack, 0xffffffffffffff74, 4) INDIRECT (stack, 0xffffffffffffff74, 4) , (const, 0x448, 4), (stack, 0xffffffffffffff74, 4) INDIRECT (stack, 0xffffffffffffff74, 4) , (const, 0x447, 4), (stack, 0xffffffffffffff74, 4) MULTIEQUAL (stack, 0xffffffffffffff74, 4) , (stack, 0xffffffffffffff74, 4) , (stack, 0xffffffffffffff74, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x448, 4), (stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x447, 4), (stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x448, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x447, 4), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x448, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x447, 4), (stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x448, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x447, 4), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x448, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x447, 4), (stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x448, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x447, 4), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x448, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x447, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(unique, 0x10000623, 8) COPY (stack, 0xffffffffffffff68, 8), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x448, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x447, 4), (stack, 0xffffffffffffff68, 8) COPY (register, 0x10, 8), (register, 0x10, 8) CAST (unique, 0x100009a7, 8), (unique, 0x100009a7, 8) INT_ADD (unique, 0x1000099f, 8) , (unique, 0x10000499, 8), (unique, 0x1000099f, 8) CAST (register, 0xa0, 8), (unique, 0x10000499, 8) INT_SUB (const, 0x2, 8) , (unique, 0x10000997, 8), (unique, 0x10000997, 8) CAST (unique, 0x1000055a, 8), (register, 0xa0, 8) MULTIEQUAL (unique, 0x1000068b, 8) , (unique, 0x10000797, 8) , (unique, 0x10000797, 8)]
[(unique, 0x1000061b, 8) COPY (stack, 0xffffffffffffff60, 8), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x448, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x447, 4), (stack, 0xffffffffffffff60, 8) COPY (unique, 0x1000055a, 8)]
[ ---  CBRANCH (ram, 0x1248a0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x100009bf, 8), (unique, 0x100009bf, 8) CALL (ram, 0x1212c0, 8) , (unique, 0x100009b7, 8), (unique, 0x100009b7, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x4, 8) , (const, 0x4, 8), (register, 0x10, 8) CAST (unique, 0x100009a7, 8), (unique, 0x100009a7, 8) INT_ADD (unique, 0x1000099f, 8) , (unique, 0x10000499, 8), (unique, 0x1000099f, 8) CAST (register, 0xa0, 8), (unique, 0x10000499, 8) INT_SUB (const, 0x2, 8) , (unique, 0x10000997, 8), (unique, 0x10000997, 8) CAST (unique, 0x1000055a, 8), (register, 0xa0, 8) MULTIEQUAL (unique, 0x1000068b, 8) , (unique, 0x10000797, 8) , (unique, 0x10000797, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100009c7, 8) , (const, 0x124c48, 8), (unique, 0x100009c7, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (unique, 0x100003a9, 8) , (const, 0x1, 8), (unique, 0x100003a9, 8) INT_ADD (unique, 0x10000118, 8) , (const, 0xfffffffffffffff8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x121160, 8) , (unique, 0x3800, 8) , (unique, 0x1000061b, 8) , (unique, 0x100009cf, 8), (unique, 0x100009cf, 8) CAST (unique, 0x10000623, 8), (unique, 0x3800, 8) PTRADD (register, 0x0, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3800, 8) , (register, 0x0, 8), (unique, 0x3800, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x8, 8), (register, 0x0, 8) CAST (unique, 0x100009f7, 8), (unique, 0x100009f7, 8) INT_ADD (unique, 0x100009ef, 8) , (register, 0x10, 8), (unique, 0x100009ef, 8) CAST (register, 0x0, 8), (register, 0x10, 8) CAST (unique, 0x100009e7, 8), (unique, 0x100009e7, 8) INT_SUB (unique, 0x100009d7, 8) , (unique, 0x100009df, 8), (unique, 0x100009df, 8) CAST (stack, 0xffffffffffffff68, 8), (unique, 0x100009d7, 8) CAST (register, 0xb8, 8), (register, 0x0, 8) CALL (ram, 0x121160, 8) , (unique, 0x3800, 8) , (unique, 0x1000061b, 8) , (unique, 0x100009cf, 8), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x462, 4), (unique, 0x100009cf, 8) CAST (unique, 0x10000623, 8), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x461, 4), (stack, 0xffffffffffffff68, 8) COPY (stack, 0xffffffffffffff60, 8), (unique, 0x3800, 8) PTRADD (register, 0x0, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100009ff, 8) , (const, 0x124c77, 8), (unique, 0x100009ff, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (unique, 0x100003b1, 8) , (const, 0x1, 8), (unique, 0x100003b1, 8) INT_ADD (unique, 0x10000118, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x483, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x462, 4)]
[(ram, 0x4ea9c8, 8) INDIRECT (ram, 0x4ea9c8, 8) , (const, 0x483, 4), (ram, 0x4ea9c8, 8) INDIRECT (ram, 0x4ea9c8, 8) , (const, 0x480, 4), (ram, 0x4ea9c8, 8) INDIRECT (ram, 0x4ea9c8, 8) , (const, 0x468, 4), (ram, 0x4ea9c8, 8) INDIRECT (ram, 0x4ea9c8, 8) , (const, 0x462, 4)]
[(ram, 0x4ea9d8, 8) INDIRECT (ram, 0x4ea9d8, 8) , (const, 0x483, 4), (ram, 0x4ea9d8, 8) INDIRECT (ram, 0x4ea9d8, 8) , (const, 0x480, 4), (ram, 0x4ea9d8, 8) INDIRECT (ram, 0x4ea9d8, 8) , (const, 0x468, 4), (ram, 0x4ea9d8, 8) INDIRECT (ram, 0x4ea9d8, 8) , (const, 0x462, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x483, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x480, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x468, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x462, 4)]
[(ram, 0x4eca18, 4) INDIRECT (ram, 0x4eca18, 4) , (const, 0x483, 4), (ram, 0x4eca18, 4) INDIRECT (ram, 0x4eca18, 4) , (const, 0x480, 4), (ram, 0x4eca18, 4) INDIRECT (ram, 0x4eca18, 4) , (const, 0x468, 4), (ram, 0x4eca18, 4) INDIRECT (ram, 0x4eca18, 4) , (const, 0x462, 4)]
[(ram, 0x4f04e8, 8) INDIRECT (ram, 0x4f04e8, 8) , (const, 0x483, 4), (ram, 0x4f04e8, 8) INDIRECT (ram, 0x4f04e8, 8) , (const, 0x480, 4), (ram, 0x4f04e8, 8) INDIRECT (ram, 0x4f04e8, 8) , (const, 0x468, 4), (ram, 0x4f04e8, 8) INDIRECT (ram, 0x4f04e8, 8) , (const, 0x462, 4)]
[(ram, 0x4f0500, 8) INDIRECT (ram, 0x4f0500, 8) , (const, 0x483, 4), (ram, 0x4f0500, 8) INDIRECT (ram, 0x4f0500, 8) , (const, 0x480, 4), (ram, 0x4f0500, 8) INDIRECT (ram, 0x4f0500, 8) , (const, 0x468, 4), (ram, 0x4f0500, 8) INDIRECT (ram, 0x4f0500, 8) , (const, 0x462, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x483, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x482, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x462, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x461, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x483, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x482, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x462, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x461, 4), (stack, 0xffffffffffffff68, 8) COPY (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff74, 4) INDIRECT (stack, 0xffffffffffffff74, 4) , (const, 0x483, 4), (stack, 0xffffffffffffff74, 4) INDIRECT (stack, 0xffffffffffffff74, 4) , (const, 0x482, 4), (stack, 0xffffffffffffff74, 4) INDIRECT (stack, 0xffffffffffffff74, 4) , (const, 0x462, 4), (stack, 0xffffffffffffff74, 4) INDIRECT (stack, 0xffffffffffffff74, 4) , (const, 0x461, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x483, 4), (stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x482, 4), (stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x462, 4), (stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x461, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x483, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x482, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x462, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x461, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x483, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x482, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x462, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x461, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x483, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x482, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x462, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x461, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x483, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x482, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x462, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x461, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x483, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x482, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x462, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x461, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x483, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x482, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x462, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x461, 4)]
[ ---  CBRANCH (ram, 0x124c85, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10000a0f, 8), (unique, 0x10000a0f, 8) CALL (ram, 0x21d2e0, 8) , (register, 0x0, 8) , (unique, 0x10000a07, 8) , (unique, 0x100002e9, 8), (unique, 0x10000a07, 8) CAST (unique, 0x10000321, 8), (unique, 0x10000321, 8) PTRSUB (const, 0x0, 8) , (const, 0x4f04d8, 8), (unique, 0x100002e9, 8) PTRSUB (const, 0x0, 8) , (const, 0x122d00, 8)]
[ ---  CBRANCH (ram, 0x1248a0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (unique, 0x10000a17, 8), (unique, 0x10000a17, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000a1f, 8) , (const, 0x124c8d, 8), (unique, 0x10000a1f, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (unique, 0x100003b9, 8) , (const, 0x1, 8), (unique, 0x100003b9, 8) INT_ADD (unique, 0x10000118, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x49e, 4)]
[(ram, 0x4ea9c8, 8) INDIRECT (ram, 0x4ea9c8, 8) , (const, 0x49e, 4)]
[(ram, 0x4ea9d8, 8) INDIRECT (ram, 0x4ea9d8, 8) , (const, 0x49e, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x49e, 4)]
[(ram, 0x4eca18, 4) INDIRECT (ram, 0x4eca18, 4) , (const, 0x49e, 4)]
[(ram, 0x4f04e8, 8) INDIRECT (ram, 0x4f04e8, 8) , (const, 0x49e, 4)]
[(ram, 0x4f0500, 8) INDIRECT (ram, 0x4f0500, 8) , (const, 0x49e, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x49e, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x49d, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x49e, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x49d, 4)]
[(stack, 0xffffffffffffff74, 4) INDIRECT (stack, 0xffffffffffffff74, 4) , (const, 0x49e, 4), (stack, 0xffffffffffffff74, 4) INDIRECT (stack, 0xffffffffffffff74, 4) , (const, 0x49d, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x49e, 4), (stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x49d, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x49e, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x49d, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x49e, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x49d, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x49e, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x49d, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x49e, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x49d, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x49e, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x49d, 4)]
[ ---  CALL (ram, 0x1212c8, 8) , (register, 0x0, 8)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100004b9, 8), (unique, 0x100004b9, 8) PTRSUB (register, 0x0, 8) , (const, 0x0, 8)]
[(unique, 0x1000078f, 8) COPY (stack, 0xffffffffffffff90, 8), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x49e, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x49d, 4)]
[ ---  BRANCH (ram, 0x1248a2, 1)]
[ ---  CBRANCH (ram, 0x1248a0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x10, 8) , (unique, 0x10000a27, 8), (unique, 0x10000a27, 8) CAST (unique, 0x100002d1, 8), (unique, 0x100002d1, 8) PTRSUB (const, 0x0, 8) , (const, 0x6, 8)]
[ ---  CBRANCH (ram, 0x124a50, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd00, 4) , (const, 0x75646f6d, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (register, 0xa0, 8)]
[ ---  CBRANCH (ram, 0x1248a0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbc00, 2) , (const, 0x656c, 2), (unique, 0xbc00, 2) LOAD (const, 0x1b1, 4) , (unique, 0x10000a2f, 8), (unique, 0x10000a2f, 8) CAST (unique, 0x3800, 8), (unique, 0x3800, 8) PTRADD (register, 0xa0, 8) , (const, 0x1, 8) , (const, 0x4, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff74, 4) MULTIEQUAL (stack, 0xffffffffffffff74, 4) , (stack, 0xffffffffffffff74, 4) , (stack, 0xffffffffffffff74, 4) , (stack, 0xffffffffffffff74, 4) , (stack, 0xffffffffffffff74, 4) , (stack, 0xffffffffffffff74, 4) , (stack, 0xffffffffffffff74, 4) , (stack, 0xffffffffffffff74, 4) , (stack, 0xffffffffffffff74, 4) , (stack, 0xffffffffffffff74, 4) , (stack, 0xffffffffffffff74, 4) , (stack, 0xffffffffffffff74, 4) , (stack, 0xffffffffffffff74, 4) , (stack, 0xffffffffffffff74, 4)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(ram, 0x4f0500, 8) MULTIEQUAL (ram, 0x4f0500, 8) , (ram, 0x4f0500, 8) , (ram, 0x4f0500, 8) , (ram, 0x4f0500, 8) , (ram, 0x4f0500, 8) , (ram, 0x4f0500, 8) , (ram, 0x4f0500, 8) , (ram, 0x4f0500, 8) , (ram, 0x4f0500, 8) , (ram, 0x4f0500, 8) , (ram, 0x4f0500, 8) , (ram, 0x4f0500, 8) , (ram, 0x4f0500, 8) , (ram, 0x4f0500, 8)]
[(ram, 0x4f04e8, 8) MULTIEQUAL (ram, 0x4f04e8, 8) , (ram, 0x4f04e8, 8) , (ram, 0x4f04e8, 8) , (ram, 0x4f04e8, 8) , (ram, 0x4f04e8, 8) , (ram, 0x4f04e8, 8) , (ram, 0x4f04e8, 8) , (ram, 0x4f04e8, 8) , (ram, 0x4f04e8, 8) , (ram, 0x4f04e8, 8) , (ram, 0x4f04e8, 8) , (ram, 0x4f04e8, 8) , (ram, 0x4f04e8, 8) , (ram, 0x4f04e8, 8)]
[(ram, 0x4eca18, 4) MULTIEQUAL (ram, 0x4eca18, 4) , (ram, 0x4eca18, 4) , (ram, 0x4eca18, 4) , (ram, 0x4eca18, 4) , (ram, 0x4eca18, 4) , (ram, 0x4eca18, 4) , (ram, 0x4eca18, 4) , (ram, 0x4eca18, 4) , (ram, 0x4eca18, 4) , (ram, 0x4eca18, 4) , (ram, 0x4eca18, 4) , (ram, 0x4eca18, 4) , (ram, 0x4eca18, 4) , (ram, 0x4eca18, 4)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4ea9d8, 8) MULTIEQUAL (ram, 0x4ea9d8, 8) , (ram, 0x4ea9d8, 8) , (ram, 0x4ea9d8, 8) , (ram, 0x4ea9d8, 8) , (ram, 0x4ea9d8, 8) , (ram, 0x4ea9d8, 8) , (ram, 0x4ea9d8, 8) , (ram, 0x4ea9d8, 8) , (ram, 0x4ea9d8, 8) , (ram, 0x4ea9d8, 8) , (ram, 0x4ea9d8, 8) , (ram, 0x4ea9d8, 8) , (ram, 0x4ea9d8, 8) , (ram, 0x4ea9d8, 8)]
[(ram, 0x4ea9c8, 8) MULTIEQUAL (ram, 0x4ea9c8, 8) , (ram, 0x4ea9c8, 8) , (ram, 0x4ea9c8, 8) , (ram, 0x4ea9c8, 8) , (ram, 0x4ea9c8, 8) , (ram, 0x4ea9c8, 8) , (ram, 0x4ea9c8, 8) , (ram, 0x4ea9c8, 8) , (ram, 0x4ea9c8, 8) , (ram, 0x4ea9c8, 8) , (ram, 0x4ea9c8, 8) , (ram, 0x4ea9c8, 8) , (ram, 0x4ea9c8, 8) , (ram, 0x4ea9c8, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100003f9, 8), (unique, 0x100003f9, 8) PTRSUB (register, 0x0, 8) , (const, 0x0, 8)]
[(unique, 0x1000077f, 8) COPY (stack, 0xffffffffffffff90, 8), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000a37, 8) , (const, 0x124a7d, 8), (unique, 0x10000a37, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (unique, 0x10000399, 8) , (const, 0x1, 8), (unique, 0x10000399, 8) INT_ADD (unique, 0x10000118, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x305, 4)]
[(ram, 0x4ea9c8, 8) INDIRECT (ram, 0x4ea9c8, 8) , (const, 0x305, 4)]
[(ram, 0x4ea9d8, 8) INDIRECT (ram, 0x4ea9d8, 8) , (const, 0x305, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x305, 4)]
[(ram, 0x4eca18, 4) INDIRECT (register, 0x0, 4) , (const, 0x305, 4), (register, 0x0, 4) INT_ADD (ram, 0x4eca18, 4) , (const, 0x1, 4)]
[(ram, 0x4f04e8, 8) INDIRECT (ram, 0x4f04e8, 8) , (const, 0x305, 4)]
[(ram, 0x4f0500, 8) INDIRECT (ram, 0x4f0500, 8) , (const, 0x305, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x305, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x304, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x305, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x304, 4)]
[(stack, 0xffffffffffffff74, 4) INDIRECT (stack, 0xffffffffffffff74, 4) , (const, 0x305, 4), (stack, 0xffffffffffffff74, 4) INDIRECT (stack, 0xffffffffffffff74, 4) , (const, 0x304, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x305, 4), (stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x304, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x305, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x304, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x305, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x304, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x305, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x304, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x305, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x304, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x305, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x304, 4)]
[ ---  CALL (ram, 0x123f70, 8) , (register, 0x80, 8) , (unique, 0x1000063b, 8) , (unique, 0x1000062b, 8)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000441, 8), (unique, 0x10000441, 8) PTRSUB (register, 0x0, 8) , (const, 0x0, 8)]
[(unique, 0x10000787, 8) COPY (stack, 0xffffffffffffff90, 8), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x305, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x304, 4)]
[ ---  BRANCH (ram, 0x1248a2, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000a3f, 8) , (const, 0x1248b3, 8), (unique, 0x10000a3f, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (unique, 0x10000379, 8) , (const, 0x1, 8), (unique, 0x10000379, 8) INT_ADD (unique, 0x10000118, 8) , (const, 0xfffffffffffffff8, 8)]
[ ---  CALL (ram, 0x1212c8, 8) , (unique, 0x10000653, 8), (unique, 0x10000653, 8) COPY (stack, 0xffffffffffffffa0, 8), (stack, 0xffffffffffffffa0, 8) MULTIEQUAL (unique, 0x10000590, 8) , (stack, 0xffffffffffffffa0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000a47, 8) , (const, 0x1248bb, 8), (unique, 0x10000a47, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (unique, 0x10000381, 8) , (const, 0x1, 8), (unique, 0x10000381, 8) INT_ADD (unique, 0x10000118, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x17a, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x176, 4), (register, 0x110, 8) MULTIEQUAL (unique, 0x10000588, 8) , (register, 0x110, 8)]
[(ram, 0x4ea9c8, 8) INDIRECT (ram, 0x4ea9c8, 8) , (const, 0x17a, 4), (ram, 0x4ea9c8, 8) INDIRECT (ram, 0x4ea9c8, 8) , (const, 0x176, 4), (ram, 0x4ea9c8, 8) MULTIEQUAL (unique, 0x100005a0, 8) , (ram, 0x4ea9c8, 8)]
[(ram, 0x4ea9d8, 8) INDIRECT (ram, 0x4ea9d8, 8) , (const, 0x17a, 4), (ram, 0x4ea9d8, 8) INDIRECT (ram, 0x4ea9d8, 8) , (const, 0x176, 4), (ram, 0x4ea9d8, 8) MULTIEQUAL (unique, 0x100005a8, 8) , (ram, 0x4ea9d8, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x17a, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x176, 4), (ram, 0x4eae68, 8) MULTIEQUAL (unique, 0x100005b0, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4eca18, 4) INDIRECT (ram, 0x4eca18, 4) , (const, 0x17a, 4), (ram, 0x4eca18, 4) INDIRECT (ram, 0x4eca18, 4) , (const, 0x176, 4), (ram, 0x4eca18, 4) MULTIEQUAL (unique, 0x100005b8, 4) , (ram, 0x4eca18, 4)]
[(ram, 0x4f04e8, 8) INDIRECT (ram, 0x4f04e8, 8) , (const, 0x17a, 4), (ram, 0x4f04e8, 8) INDIRECT (ram, 0x4f04e8, 8) , (const, 0x176, 4), (ram, 0x4f04e8, 8) MULTIEQUAL (unique, 0x100005bc, 8) , (ram, 0x4f04e8, 8)]
[(ram, 0x4f0500, 8) INDIRECT (ram, 0x4f0500, 8) , (const, 0x17a, 4), (ram, 0x4f0500, 8) INDIRECT (ram, 0x4f0500, 8) , (const, 0x176, 4), (ram, 0x4f0500, 8) MULTIEQUAL (unique, 0x100005c4, 8) , (ram, 0x4f0500, 8)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x17a, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x179, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x176, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x175, 4), (stack, 0xffffffffffffff60, 8) MULTIEQUAL (unique, 0x100005cc, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x17a, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x179, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x176, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x175, 4), (stack, 0xffffffffffffff68, 8) MULTIEQUAL (unique, 0x100005d4, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff74, 4) INDIRECT (stack, 0xffffffffffffff74, 4) , (const, 0x17a, 4), (stack, 0xffffffffffffff74, 4) INDIRECT (stack, 0xffffffffffffff74, 4) , (const, 0x179, 4), (stack, 0xffffffffffffff74, 4) INDIRECT (stack, 0xffffffffffffff74, 4) , (const, 0x176, 4), (stack, 0xffffffffffffff74, 4) INDIRECT (stack, 0xffffffffffffff74, 4) , (const, 0x175, 4), (stack, 0xffffffffffffff74, 4) MULTIEQUAL (unique, 0x100005dc, 4) , (stack, 0xffffffffffffff74, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x17a, 4), (stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x179, 4), (stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x176, 4), (stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x175, 4), (stack, 0xffffffffffffff78, 8) MULTIEQUAL (unique, 0x100005e0, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x17a, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x179, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x176, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x175, 4), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (unique, 0x100005e8, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x17a, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x179, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x176, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x175, 4), (stack, 0xffffffffffffff88, 8) MULTIEQUAL (unique, 0x100005f0, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x17a, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x179, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x176, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x175, 4), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (unique, 0x10000747, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x17a, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x179, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x176, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x175, 4), (stack, 0xffffffffffffffa0, 8) MULTIEQUAL (unique, 0x10000590, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x17a, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x179, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x176, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x175, 4), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (unique, 0x10000598, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x17a, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x179, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x176, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x175, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (unique, 0x10000600, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CALL (ram, 0x17e250, 8) , (register, 0x0, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff74, 4) MULTIEQUAL (stack, 0xffffffffffffff74, 4) , (stack, 0xffffffffffffff74, 4)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(ram, 0x4f04e8, 8) MULTIEQUAL (ram, 0x4f04e8, 8) , (ram, 0x4f04e8, 8)]
[(ram, 0x4eca18, 4) MULTIEQUAL (ram, 0x4eca18, 4) , (ram, 0x4eca18, 4)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4ea9d8, 8) MULTIEQUAL (ram, 0x4ea9d8, 8) , (ram, 0x4ea9d8, 8)]
[(ram, 0x4ea9c8, 8) MULTIEQUAL (ram, 0x4ea9c8, 8) , (ram, 0x4ea9c8, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(stack, 0xffffffffffffff80, 8) COPY (register, 0x30, 8), (register, 0x30, 8) INT_ADD (stack, 0xffffffffffffff80, 8) , (const, 0x10, 8), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff88, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10000a57, 8), (unique, 0x10000a57, 8) INT_ADD (unique, 0x10000a4f, 8) , (stack, 0xffffffffffffff80, 8), (unique, 0x10000a4f, 8) CAST (ram, 0x4f0500, 8), (ram, 0x4f0500, 8) MULTIEQUAL (ram, 0x4f0500, 8) , (ram, 0x4f0500, 8), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(unique, 0x10000673, 8) COPY (register, 0x20, 8)]
[(unique, 0x10000713, 8) COPY (stack, 0xffffffffffffff90, 8), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[ ---  CBRANCH (ram, 0x124770, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10000a57, 8), (unique, 0x10000a57, 8) INT_ADD (unique, 0x10000a4f, 8) , (stack, 0xffffffffffffff80, 8), (unique, 0x10000a4f, 8) CAST (ram, 0x4f0500, 8), (ram, 0x4f0500, 8) MULTIEQUAL (ram, 0x4f0500, 8) , (ram, 0x4f0500, 8), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (unique, 0x1000054a, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (unique, 0x1000053a, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (unique, 0x10000532, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (unique, 0xbd80, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (unique, 0x1000052a, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (unique, 0x10000522, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff74, 4) MULTIEQUAL (unique, 0x1000051e, 4) , (stack, 0xffffffffffffff74, 4)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (unique, 0x10000516, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (unique, 0x1000050e, 8) , (stack, 0xffffffffffffff60, 8)]
[(ram, 0x4f0500, 8) MULTIEQUAL (unique, 0x10000733, 8) , (ram, 0x4f0500, 8)]
[(ram, 0x4f04e8, 8) MULTIEQUAL (unique, 0x100004fe, 8) , (ram, 0x4f04e8, 8)]
[(ram, 0x4eca18, 4) MULTIEQUAL (unique, 0x100004fa, 4) , (ram, 0x4eca18, 4)]
[(ram, 0x4eae68, 8) MULTIEQUAL (unique, 0x100004f2, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4ea9d8, 8) MULTIEQUAL (unique, 0x100004ea, 8) , (ram, 0x4ea9d8, 8)]
[(ram, 0x4ea9c8, 8) MULTIEQUAL (unique, 0x10000723, 8) , (ram, 0x4ea9c8, 8)]
[(register, 0x110, 8) MULTIEQUAL (unique, 0x100004d2, 8) , (register, 0x110, 8)]
[(register, 0xb8, 8) MULTIEQUAL (unique, 0x1000070b, 8) , (unique, 0x10000713, 8)]
[(register, 0x20, 8) MULTIEQUAL (unique, 0x10000552, 8) , (register, 0x20, 8)]
[(unique, 0x100006e3, 8) COPY (register, 0xa8, 8), (register, 0xa8, 8) PTRSUB (const, 0x0, 8) , (const, 0x4eb440, 8)]
[ ---  BRANCH (ram, 0x124909, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000a5f, 8) , (const, 0x124923, 8), (unique, 0x10000a5f, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1b6, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4ea9c8, 8) INDIRECT (ram, 0x4ea9c8, 8) , (const, 0x1b6, 4), (ram, 0x4ea9c8, 8) MULTIEQUAL (ram, 0x4ea9c8, 8) , (ram, 0x4ea9c8, 8) , (ram, 0x4ea9c8, 8)]
[(ram, 0x4ea9d8, 8) INDIRECT (ram, 0x4ea9d8, 8) , (const, 0x1b6, 4), (ram, 0x4ea9d8, 8) MULTIEQUAL (ram, 0x4ea9d8, 8) , (ram, 0x4ea9d8, 8) , (ram, 0x4ea9d8, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x1b6, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4eca18, 4) INDIRECT (ram, 0x4eca18, 4) , (const, 0x1b6, 4), (ram, 0x4eca18, 4) MULTIEQUAL (ram, 0x4eca18, 4) , (ram, 0x4eca18, 4) , (ram, 0x4eca18, 4)]
[(ram, 0x4f04e8, 8) INDIRECT (ram, 0x4f04e8, 8) , (const, 0x1b6, 4), (ram, 0x4f04e8, 8) MULTIEQUAL (ram, 0x4f04e8, 8) , (ram, 0x4f04e8, 8) , (ram, 0x4f04e8, 8)]
[(ram, 0x4f0500, 8) INDIRECT (ram, 0x4f0500, 8) , (const, 0x1b6, 4), (ram, 0x4f0500, 8) MULTIEQUAL (ram, 0x4f0500, 8) , (ram, 0x4f0500, 8) , (ram, 0x4f0500, 8)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x1b6, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x1b5, 4), (stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x1b6, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x1b5, 4), (stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff74, 4) INDIRECT (stack, 0xffffffffffffff74, 4) , (const, 0x1b6, 4), (stack, 0xffffffffffffff74, 4) INDIRECT (stack, 0xffffffffffffff74, 4) , (const, 0x1b5, 4), (stack, 0xffffffffffffff74, 4) MULTIEQUAL (stack, 0xffffffffffffff74, 4) , (stack, 0xffffffffffffff74, 4) , (stack, 0xffffffffffffff74, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x1b6, 4), (stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x1b5, 4), (stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x1b6, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x1b5, 4), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x1b6, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x1b5, 4), (stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x1b6, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x1b5, 4), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x1b6, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x1b5, 4), (stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x1b6, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x1b5, 4), (stack, 0xffffffffffffffa8, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0xa8, 8), (register, 0xa8, 8) MULTIEQUAL (unique, 0x100006e3, 8) , (unique, 0x100006eb, 8) , (register, 0xa8, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1b6, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1b5, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CBRANCH (ram, 0x124900, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x21d6c0, 8) , (register, 0xb8, 8) , (unique, 0x10000a67, 8) , (unique, 0x100002d9, 8), (unique, 0x10000a67, 8) CAST (unique, 0x10000311, 8), (unique, 0x10000311, 8) PTRSUB (const, 0x0, 8) , (const, 0x4f04d8, 8), (unique, 0x100002d9, 8) PTRSUB (const, 0x0, 8) , (const, 0x122d00, 8)]
[ ---  CBRANCH (ram, 0x12493b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xa8, 8) , (unique, 0x10000301, 8), (unique, 0x10000301, 8) PTRSUB (const, 0x0, 8) , (const, 0x4eb6e0, 8), (register, 0xa8, 8) PTRADD (register, 0xa8, 8) , (const, 0x7, 8) , (const, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000a6f, 8) , (const, 0x124936, 8), (unique, 0x10000a6f, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1d8, 4)]
[(ram, 0x4ea9c8, 8) INDIRECT (ram, 0x4ea9c8, 8) , (const, 0x1d8, 4)]
[(ram, 0x4ea9d8, 8) INDIRECT (ram, 0x4ea9d8, 8) , (const, 0x1d8, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x1d8, 4)]
[(ram, 0x4eca18, 4) INDIRECT (ram, 0x4eca18, 4) , (const, 0x1d8, 4)]
[(ram, 0x4f04e8, 8) INDIRECT (ram, 0x4f04e8, 8) , (const, 0x1d8, 4)]
[(ram, 0x4f0500, 8) INDIRECT (ram, 0x4f0500, 8) , (const, 0x1d8, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x1d8, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x1d7, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x1d8, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x1d7, 4)]
[(stack, 0xffffffffffffff74, 4) INDIRECT (stack, 0xffffffffffffff74, 4) , (const, 0x1d8, 4), (stack, 0xffffffffffffff74, 4) INDIRECT (stack, 0xffffffffffffff74, 4) , (const, 0x1d7, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x1d8, 4), (stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x1d7, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x1d8, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x1d7, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x1d8, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x1d7, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x1d8, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x1d7, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x1d8, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x1d7, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x1d8, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x1d7, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1d8, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1d7, 4)]
[ ---  CALL (ram, 0x123e70, 8) , (register, 0xa8, 8)]
[(unique, 0x100006eb, 8) COPY (register, 0xa8, 8), (register, 0xa8, 8) PTRADD (register, 0xa8, 8) , (const, 0x7, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x124909, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xa8, 8) , (unique, 0x10000309, 8), (unique, 0x10000309, 8) PTRSUB (const, 0x0, 8) , (const, 0x4eb6e0, 8), (register, 0xa8, 8) PTRADD (register, 0xa8, 8) , (const, 0x7, 8) , (const, 0x8, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff74, 4) MULTIEQUAL (stack, 0xffffffffffffff74, 4) , (stack, 0xffffffffffffff74, 4)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(ram, 0x4f0500, 8) MULTIEQUAL (ram, 0x4f0500, 8) , (ram, 0x4f0500, 8)]
[(ram, 0x4f04e8, 8) MULTIEQUAL (ram, 0x4f04e8, 8) , (ram, 0x4f04e8, 8)]
[(ram, 0x4eca18, 4) MULTIEQUAL (ram, 0x4eca18, 4) , (ram, 0x4eca18, 4)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4ea9d8, 8) MULTIEQUAL (ram, 0x4ea9d8, 8) , (ram, 0x4ea9d8, 8)]
[(ram, 0x4ea9c8, 8) MULTIEQUAL (ram, 0x4ea9c8, 8) , (ram, 0x4ea9c8, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x1000065b, 8) COPY (register, 0x18, 8), (register, 0x18, 8) COPY (const, 0x29c8e0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000a77, 8) , (const, 0x124952, 8), (unique, 0x10000a77, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000a8f, 8) , (const, 0x124960, 8), (unique, 0x10000a8f, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x204, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1f4, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4ea9c8, 8) INDIRECT (ram, 0x4ea9c8, 8) , (const, 0x204, 4), (ram, 0x4ea9c8, 8) INDIRECT (ram, 0x4ea9c8, 8) , (const, 0x1f4, 4), (ram, 0x4ea9c8, 8) MULTIEQUAL (ram, 0x4ea9c8, 8) , (ram, 0x4ea9c8, 8)]
[(ram, 0x4ea9d8, 8) INDIRECT (ram, 0x4ea9d8, 8) , (const, 0x204, 4), (ram, 0x4ea9d8, 8) INDIRECT (ram, 0x4ea9d8, 8) , (const, 0x1f4, 4), (ram, 0x4ea9d8, 8) MULTIEQUAL (ram, 0x4ea9d8, 8) , (ram, 0x4ea9d8, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x204, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x1f4, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4eca18, 4) INDIRECT (ram, 0x4eca18, 4) , (const, 0x204, 4), (ram, 0x4eca18, 4) INDIRECT (ram, 0x4eca18, 4) , (const, 0x1f4, 4), (ram, 0x4eca18, 4) MULTIEQUAL (ram, 0x4eca18, 4) , (ram, 0x4eca18, 4)]
[(ram, 0x4f0500, 8) INDIRECT (ram, 0x4f0500, 8) , (const, 0x204, 4), (ram, 0x4f0500, 8) INDIRECT (ram, 0x4f0500, 8) , (const, 0x1f4, 4), (ram, 0x4f0500, 8) MULTIEQUAL (ram, 0x4f0500, 8) , (ram, 0x4f0500, 8)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x204, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x203, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x1f4, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x1f3, 4), (stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x204, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x203, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x1f4, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x1f3, 4), (stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff74, 4) INDIRECT (stack, 0xffffffffffffff74, 4) , (const, 0x204, 4), (stack, 0xffffffffffffff74, 4) INDIRECT (stack, 0xffffffffffffff74, 4) , (const, 0x203, 4), (stack, 0xffffffffffffff74, 4) INDIRECT (stack, 0xffffffffffffff74, 4) , (const, 0x1f4, 4), (stack, 0xffffffffffffff74, 4) INDIRECT (stack, 0xffffffffffffff74, 4) , (const, 0x1f3, 4), (stack, 0xffffffffffffff74, 4) MULTIEQUAL (stack, 0xffffffffffffff74, 4) , (stack, 0xffffffffffffff74, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x204, 4), (stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x203, 4), (stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x1f4, 4), (stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x1f3, 4), (stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x204, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x203, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x1f4, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x1f3, 4), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x204, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x203, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x1f4, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x1f3, 4), (stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x204, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x203, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x1f4, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x1f3, 4), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x204, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x203, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x1f4, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x1f3, 4), (stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x204, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x203, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x1f4, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x1f3, 4), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x204, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x203, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1f4, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1f3, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(unique, 0x3100, 8) CAST (unique, 0x10000a9f, 8), (unique, 0x10000a9f, 8) INT_ADD (unique, 0x10000a97, 8) , (const, 0x1, 8), (unique, 0x10000a97, 8) CAST (register, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x121250, 8) , (unique, 0x3100, 8) , (const, 0x0, 4), (unique, 0x3100, 8) CAST (unique, 0x10000a87, 8), (unique, 0x10000a87, 8) INT_ADD (unique, 0x10000a7f, 8) , (const, 0x1, 8), (unique, 0x10000a7f, 8) CAST (register, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x121250, 8) , (register, 0x18, 8) , (const, 0x0, 4), (register, 0x18, 8) MULTIEQUAL (unique, 0x1000065b, 8) , (unique, 0x10000663, 8)]
[(unique, 0x100006db, 8) COPY (ram, 0x4f04e8, 8), (ram, 0x4f04e8, 8) INDIRECT (ram, 0x4f04e8, 8) , (const, 0x204, 4), (ram, 0x4f04e8, 8) INDIRECT (ram, 0x4f04e8, 8) , (const, 0x1f4, 4), (ram, 0x4f04e8, 8) MULTIEQUAL (ram, 0x4f04e8, 8) , (ram, 0x4f04e8, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff74, 4) MULTIEQUAL (stack, 0xffffffffffffff74, 4) , (stack, 0xffffffffffffff74, 4)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(ram, 0x4f0500, 8) MULTIEQUAL (ram, 0x4f0500, 8) , (ram, 0x4f0500, 8)]
[(ram, 0x4f04e8, 8) MULTIEQUAL (ram, 0x4f04e8, 8) , (ram, 0x4f04e8, 8)]
[(ram, 0x4eca18, 4) MULTIEQUAL (ram, 0x4eca18, 4) , (ram, 0x4eca18, 4)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4ea9d8, 8) MULTIEQUAL (ram, 0x4ea9d8, 8) , (ram, 0x4ea9d8, 8)]
[(ram, 0x4ea9c8, 8) MULTIEQUAL (ram, 0x4ea9c8, 8) , (ram, 0x4ea9c8, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x124993, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xa0, 8) , (const, 0x0, 8), (register, 0xa0, 8) MULTIEQUAL (unique, 0x100006db, 8) , (unique, 0xbd80, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000aa7, 8) , (const, 0x12497f, 8), (unique, 0x10000aa7, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x218, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4ea9c8, 8) INDIRECT (ram, 0x4ea9c8, 8) , (const, 0x218, 4), (ram, 0x4ea9c8, 8) MULTIEQUAL (ram, 0x4ea9c8, 8) , (ram, 0x4ea9c8, 8)]
[(ram, 0x4ea9d8, 8) INDIRECT (ram, 0x4ea9d8, 8) , (const, 0x218, 4), (ram, 0x4ea9d8, 8) MULTIEQUAL (ram, 0x4ea9d8, 8) , (ram, 0x4ea9d8, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x218, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4eca18, 4) INDIRECT (ram, 0x4eca18, 4) , (const, 0x218, 4), (ram, 0x4eca18, 4) MULTIEQUAL (ram, 0x4eca18, 4) , (ram, 0x4eca18, 4)]
[(ram, 0x4f04e8, 8) INDIRECT (ram, 0x4f04e8, 8) , (const, 0x218, 4), (ram, 0x4f04e8, 8) MULTIEQUAL (ram, 0x4f04e8, 8) , (ram, 0x4f04e8, 8)]
[(ram, 0x4f0500, 8) INDIRECT (ram, 0x4f0500, 8) , (const, 0x218, 4), (ram, 0x4f0500, 8) MULTIEQUAL (ram, 0x4f0500, 8) , (ram, 0x4f0500, 8)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x218, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x217, 4), (stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x218, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x217, 4), (stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff74, 4) INDIRECT (stack, 0xffffffffffffff74, 4) , (const, 0x218, 4), (stack, 0xffffffffffffff74, 4) INDIRECT (stack, 0xffffffffffffff74, 4) , (const, 0x217, 4), (stack, 0xffffffffffffff74, 4) MULTIEQUAL (stack, 0xffffffffffffff74, 4) , (stack, 0xffffffffffffff74, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x218, 4), (stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x217, 4), (stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x218, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x217, 4), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x218, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x217, 4), (stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x218, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x217, 4), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x218, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x217, 4), (stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x218, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x217, 4), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x218, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x217, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(register, 0x207, 1) INT_SLESS (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x121200, 8) , (register, 0x18, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0xa0, 8), (register, 0xa0, 8) MULTIEQUAL (register, 0xa0, 8) , (unique, 0xbd80, 8)]
[ ---  CBRANCH (ram, 0x124a00, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x121200, 8) , (register, 0x18, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0xa0, 8), (register, 0xa0, 8) MULTIEQUAL (register, 0xa0, 8) , (unique, 0xbd80, 8)]
[ ---  CBRANCH (ram, 0x124a40, 1) , (register, 0x207, 1)]
[(unique, 0xbd80, 8) CAST (unique, 0x10000aaf, 8), (unique, 0x10000aaf, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRADD (register, 0xa0, 8) , (const, 0x4, 8) , (const, 0x8, 8)]
[ ---  BRANCH (ram, 0x12496e, 1)]
[ ---  CBRANCH (ram, 0x124973, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) CAST (unique, 0x10000ab7, 8), (unique, 0x10000ab7, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRADD (register, 0xa0, 8) , (const, 0x6, 8) , (const, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000acf, 8) , (const, 0x1249a6, 8), (unique, 0x10000acf, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x243, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4ea9c8, 8) INDIRECT (ram, 0x4ea9c8, 8) , (const, 0x243, 4), (ram, 0x4ea9c8, 8) MULTIEQUAL (ram, 0x4ea9c8, 8) , (ram, 0x4ea9c8, 8)]
[(ram, 0x4ea9d8, 8) INDIRECT (ram, 0x4ea9d8, 8) , (const, 0x243, 4), (ram, 0x4ea9d8, 8) MULTIEQUAL (ram, 0x4ea9d8, 8) , (ram, 0x4ea9d8, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x243, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4eca18, 4) INDIRECT (ram, 0x4eca18, 4) , (const, 0x243, 4), (ram, 0x4eca18, 4) MULTIEQUAL (ram, 0x4eca18, 4) , (ram, 0x4eca18, 4)]
[(ram, 0x4f04e8, 8) INDIRECT (ram, 0x4f04e8, 8) , (const, 0x243, 4), (ram, 0x4f04e8, 8) MULTIEQUAL (ram, 0x4f04e8, 8) , (ram, 0x4f04e8, 8)]
[(ram, 0x4f0500, 8) INDIRECT (ram, 0x4f0500, 8) , (const, 0x243, 4), (ram, 0x4f0500, 8) MULTIEQUAL (ram, 0x4f0500, 8) , (ram, 0x4f0500, 8)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x243, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x242, 4), (stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x243, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x242, 4), (stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff74, 4) INDIRECT (stack, 0xffffffffffffff74, 4) , (const, 0x243, 4), (stack, 0xffffffffffffff74, 4) INDIRECT (stack, 0xffffffffffffff74, 4) , (const, 0x242, 4), (stack, 0xffffffffffffff74, 4) MULTIEQUAL (stack, 0xffffffffffffff74, 4) , (stack, 0xffffffffffffff74, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x243, 4), (stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x242, 4), (stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x243, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x242, 4), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x243, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x242, 4), (stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x243, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x242, 4), (stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x243, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x242, 4), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x243, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x242, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(unique, 0x10000643, 8) COPY (stack, 0xffffffffffffff90, 8), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x243, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x242, 4), (stack, 0xffffffffffffff90, 8) COPY (register, 0x10, 8), (register, 0x10, 8) CAST (unique, 0x10000ac7, 8), (unique, 0x10000ac7, 8) PTRADD (unique, 0x3100, 8) , (unique, 0x10000200, 8) , (const, 0x1, 8), (unique, 0x10000200, 8) INT_2COMP (unique, 0x10000abf, 8), (unique, 0x10000abf, 8) CAST (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x124a00, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10000adf, 8), (unique, 0x10000adf, 8) CALL (ram, 0x1212c0, 8) , (unique, 0x10000ad7, 8), (unique, 0x10000ad7, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x2, 8) , (const, 0x8, 8), (register, 0x10, 8) CAST (unique, 0x10000ac7, 8), (unique, 0x10000ac7, 8) PTRADD (unique, 0x3100, 8) , (unique, 0x10000200, 8) , (const, 0x1, 8), (unique, 0x10000200, 8) INT_2COMP (unique, 0x10000abf, 8), (unique, 0x10000abf, 8) CAST (register, 0x18, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000aff, 8) , (const, 0x1249c2, 8), (unique, 0x10000aff, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x121160, 8) , (unique, 0x3800, 8) , (register, 0x18, 8) , (unique, 0x10000b07, 8), (unique, 0x10000b07, 8) CAST (unique, 0x10000643, 8), (unique, 0x3800, 8) PTRADD (register, 0x0, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3800, 8) , (register, 0x0, 8), (unique, 0x3800, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x8, 8), (register, 0x0, 8) CAST (unique, 0x10000b17, 8), (unique, 0x10000b17, 8) INT_ADD (unique, 0x10000b0f, 8) , (register, 0xa8, 8), (unique, 0x10000b0f, 8) CAST (register, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x121160, 8) , (unique, 0x3800, 8) , (register, 0x18, 8) , (unique, 0x10000b07, 8), (unique, 0x10000b07, 8) CAST (unique, 0x10000643, 8), (register, 0xa8, 8) CAST (unique, 0x10000af7, 8), (unique, 0x10000af7, 8) INT_SUB (unique, 0x10000ae7, 8) , (unique, 0x10000aef, 8), (unique, 0x10000aef, 8) CAST (register, 0x18, 8), (unique, 0x10000ae7, 8) CAST (unique, 0x3100, 8), (unique, 0x3800, 8) PTRADD (register, 0x0, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000b1f, 8) , (const, 0x1249e4, 8), (unique, 0x10000b1f, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x274, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x260, 4)]
[(ram, 0x4ea9c8, 8) INDIRECT (ram, 0x4ea9c8, 8) , (const, 0x274, 4), (ram, 0x4ea9c8, 8) INDIRECT (ram, 0x4ea9c8, 8) , (const, 0x271, 4), (ram, 0x4ea9c8, 8) INDIRECT (ram, 0x4ea9c8, 8) , (const, 0x263, 4), (ram, 0x4ea9c8, 8) INDIRECT (ram, 0x4ea9c8, 8) , (const, 0x260, 4)]
[(ram, 0x4ea9d8, 8) INDIRECT (ram, 0x4ea9d8, 8) , (const, 0x274, 4), (ram, 0x4ea9d8, 8) INDIRECT (ram, 0x4ea9d8, 8) , (const, 0x271, 4), (ram, 0x4ea9d8, 8) INDIRECT (ram, 0x4ea9d8, 8) , (const, 0x263, 4), (ram, 0x4ea9d8, 8) INDIRECT (ram, 0x4ea9d8, 8) , (const, 0x260, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x274, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x271, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x263, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x260, 4)]
[(ram, 0x4eca18, 4) INDIRECT (ram, 0x4eca18, 4) , (const, 0x274, 4), (ram, 0x4eca18, 4) INDIRECT (ram, 0x4eca18, 4) , (const, 0x271, 4), (ram, 0x4eca18, 4) INDIRECT (ram, 0x4eca18, 4) , (const, 0x263, 4), (ram, 0x4eca18, 4) INDIRECT (ram, 0x4eca18, 4) , (const, 0x260, 4)]
[(ram, 0x4f04e8, 8) INDIRECT (ram, 0x4f04e8, 8) , (const, 0x274, 4), (ram, 0x4f04e8, 8) INDIRECT (ram, 0x4f04e8, 8) , (const, 0x271, 4), (ram, 0x4f04e8, 8) INDIRECT (ram, 0x4f04e8, 8) , (const, 0x263, 4), (ram, 0x4f04e8, 8) INDIRECT (ram, 0x4f04e8, 8) , (const, 0x260, 4)]
[(ram, 0x4f0500, 8) INDIRECT (ram, 0x4f0500, 8) , (const, 0x274, 4), (ram, 0x4f0500, 8) INDIRECT (ram, 0x4f0500, 8) , (const, 0x271, 4), (ram, 0x4f0500, 8) INDIRECT (ram, 0x4f0500, 8) , (const, 0x263, 4), (ram, 0x4f0500, 8) INDIRECT (ram, 0x4f0500, 8) , (const, 0x260, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x274, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x273, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x260, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x25f, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x274, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x273, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x260, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x25f, 4)]
[(stack, 0xffffffffffffff74, 4) INDIRECT (stack, 0xffffffffffffff74, 4) , (const, 0x274, 4), (stack, 0xffffffffffffff74, 4) INDIRECT (stack, 0xffffffffffffff74, 4) , (const, 0x273, 4), (stack, 0xffffffffffffff74, 4) INDIRECT (stack, 0xffffffffffffff74, 4) , (const, 0x260, 4), (stack, 0xffffffffffffff74, 4) INDIRECT (stack, 0xffffffffffffff74, 4) , (const, 0x25f, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x274, 4), (stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x273, 4), (stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x260, 4), (stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x25f, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x274, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x273, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x260, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x25f, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x274, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x273, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x260, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x25f, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x274, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x273, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x260, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x25f, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x274, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x273, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x260, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x25f, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x274, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x273, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x260, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x25f, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x274, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x273, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x260, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x25f, 4)]
[ ---  CBRANCH (ram, 0x1249ee, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10000b2f, 8), (unique, 0x10000b2f, 8) CALL (ram, 0x21d2e0, 8) , (register, 0x0, 8) , (unique, 0x10000b27, 8) , (unique, 0x100002e1, 8), (unique, 0x10000b27, 8) CAST (unique, 0x10000319, 8), (unique, 0x10000319, 8) PTRSUB (const, 0x0, 8) , (const, 0x4f04d8, 8), (unique, 0x100002e1, 8) PTRSUB (const, 0x0, 8) , (const, 0x122d00, 8)]
[ ---  CBRANCH (ram, 0x124a00, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (unique, 0x10000b37, 8), (unique, 0x10000b37, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000b3f, 8) , (const, 0x1249f6, 8), (unique, 0x10000b3f, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x28f, 4)]
[(ram, 0x4ea9c8, 8) INDIRECT (ram, 0x4ea9c8, 8) , (const, 0x28f, 4)]
[(ram, 0x4ea9d8, 8) INDIRECT (ram, 0x4ea9d8, 8) , (const, 0x28f, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x28f, 4)]
[(ram, 0x4eca18, 4) INDIRECT (ram, 0x4eca18, 4) , (const, 0x28f, 4)]
[(ram, 0x4f04e8, 8) INDIRECT (ram, 0x4f04e8, 8) , (const, 0x28f, 4)]
[(ram, 0x4f0500, 8) INDIRECT (ram, 0x4f0500, 8) , (const, 0x28f, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x28f, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x28e, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x28f, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x28e, 4)]
[(stack, 0xffffffffffffff74, 4) INDIRECT (stack, 0xffffffffffffff74, 4) , (const, 0x28f, 4), (stack, 0xffffffffffffff74, 4) INDIRECT (stack, 0xffffffffffffff74, 4) , (const, 0x28e, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x28f, 4), (stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x28e, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x28f, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x28e, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x28f, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x28e, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x28f, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x28e, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x28f, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x28e, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x28f, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x28e, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x28f, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x28e, 4)]
[ ---  CALL (ram, 0x1212c8, 8) , (register, 0x0, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff74, 4) MULTIEQUAL (stack, 0xffffffffffffff74, 4) , (stack, 0xffffffffffffff74, 4) , (stack, 0xffffffffffffff74, 4) , (stack, 0xffffffffffffff74, 4)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(ram, 0x4f0500, 8) MULTIEQUAL (ram, 0x4f0500, 8) , (ram, 0x4f0500, 8) , (ram, 0x4f0500, 8) , (ram, 0x4f0500, 8)]
[(ram, 0x4f04e8, 8) MULTIEQUAL (ram, 0x4f04e8, 8) , (ram, 0x4f04e8, 8) , (ram, 0x4f04e8, 8) , (ram, 0x4f04e8, 8)]
[(ram, 0x4eca18, 4) MULTIEQUAL (ram, 0x4eca18, 4) , (ram, 0x4eca18, 4) , (ram, 0x4eca18, 4) , (ram, 0x4eca18, 4)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4ea9d8, 8) MULTIEQUAL (ram, 0x4ea9d8, 8) , (ram, 0x4ea9d8, 8) , (ram, 0x4ea9d8, 8) , (ram, 0x4ea9d8, 8)]
[(ram, 0x4ea9c8, 8) MULTIEQUAL (ram, 0x4ea9c8, 8) , (ram, 0x4ea9c8, 8) , (ram, 0x4ea9c8, 8) , (ram, 0x4ea9c8, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x10000663, 8) COPY (unique, 0x3100, 8)]
[ ---  CBRANCH (ram, 0x124948, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000b4f, 8), (unique, 0x10000b4f, 8) INT_ADD (unique, 0x10000b47, 8) , (const, 0x1, 8), (unique, 0x10000b47, 8) CAST (register, 0x0, 8)]
[(ram, 0x4ea9c8, 8) INDIRECT (ram, 0x4ea9c8, 8) , (const, 0x2a9, 4)]
[(ram, 0x4ea9d8, 8) INDIRECT (ram, 0x4ea9d8, 8) , (const, 0x2a9, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x2a9, 4)]
[(ram, 0x4eca18, 4) INDIRECT (ram, 0x4eca18, 4) , (const, 0x2a9, 4)]
[(ram, 0x4f04e8, 8) INDIRECT (ram, 0x4f04e8, 8) , (const, 0x2a9, 4)]
[(ram, 0x4f0500, 8) INDIRECT (ram, 0x4f0500, 8) , (const, 0x2a9, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000b57, 8) , (stack, 0xffffffffffffff74, 4), (unique, 0x10000b57, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (ram, 0x4eae68, 8) , (register, 0x110, 8) , (const, 0x1, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff74, 4) MULTIEQUAL (stack, 0xffffffffffffff74, 4) , (stack, 0xffffffffffffff74, 4)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(ram, 0x4f0500, 8) MULTIEQUAL (ram, 0x4f0500, 8) , (ram, 0x4f0500, 8)]
[(ram, 0x4f04e8, 8) MULTIEQUAL (ram, 0x4f04e8, 8) , (ram, 0x4f04e8, 8)]
[(ram, 0x4eca18, 4) MULTIEQUAL (ram, 0x4eca18, 4) , (ram, 0x4eca18, 4)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4ea9d8, 8) MULTIEQUAL (ram, 0x4ea9d8, 8) , (ram, 0x4ea9d8, 8)]
[(ram, 0x4ea9c8, 8) MULTIEQUAL (ram, 0x4ea9c8, 8) , (ram, 0x4ea9c8, 8)]
[(register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x124cc8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffffc0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10000b5f, 8), (unique, 0x10000b5f, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000b67, 8) , (unique, 0x100002f1, 8), (unique, 0x10000b67, 8) CAST (register, 0x20, 8), (unique, 0x100002f1, 8) PTRSUB (const, 0x0, 8) , (const, 0x124ccd, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x2cd, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x2cc, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x2cd, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x2cc, 4)]
[(stack, 0xffffffffffffff74, 4) INDIRECT (stack, 0xffffffffffffff74, 4) , (const, 0x2cd, 4), (stack, 0xffffffffffffff74, 4) INDIRECT (stack, 0xffffffffffffff74, 4) , (const, 0x2cc, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x2cd, 4), (stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x2cc, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x2cd, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x2cc, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x2cd, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x2cc, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x2cd, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x2cc, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x2cd, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x2cc, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x2cd, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x2cc, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2cd, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2cc, 4)]
[ ---  CALL (ram, 0x234c80, 8)]
[(ram, 0x4ea9c8, 8) COPY (ram, 0x4ea9c8, 8), (ram, 0x4ea9c8, 8) INDIRECT (ram, 0x4ea9c8, 8) , (const, 0x2cd, 4)]
[(ram, 0x4ea9d8, 8) COPY (ram, 0x4ea9d8, 8), (ram, 0x4ea9d8, 8) INDIRECT (ram, 0x4ea9d8, 8) , (const, 0x2cd, 4)]
[(ram, 0x4eae68, 8) COPY (ram, 0x4eae68, 8), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x2cd, 4)]
[(ram, 0x4eca18, 4) COPY (ram, 0x4eca18, 4), (ram, 0x4eca18, 4) INDIRECT (ram, 0x4eca18, 4) , (const, 0x2cd, 4)]
[(ram, 0x4f04e8, 8) COPY (ram, 0x4f04e8, 8), (ram, 0x4f04e8, 8) INDIRECT (ram, 0x4f04e8, 8) , (const, 0x2cd, 4)]
[(ram, 0x4f0500, 8) COPY (ram, 0x4f0500, 8), (ram, 0x4f0500, 8) INDIRECT (ram, 0x4f0500, 8) , (const, 0x2cd, 4)]
[ ---  RETURN (const, 0x1, 4)]
[(ram, 0x4ea9c8, 8) COPY (ram, 0x4ea9c8, 8)]
[(ram, 0x4ea9d8, 8) COPY (ram, 0x4ea9d8, 8)]
[(ram, 0x4eae68, 8) COPY (ram, 0x4eae68, 8)]
[(ram, 0x4eca18, 4) COPY (ram, 0x4eca18, 4)]
[(ram, 0x4f04e8, 8) COPY (ram, 0x4f04e8, 8)]
[(ram, 0x4f0500, 8) COPY (ram, 0x4f0500, 8)]
[ ---  RETURN (const, 0x0, 8)]
