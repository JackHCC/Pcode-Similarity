[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x2f, 4)]
[(ram, 0x2bc230, 8) INDIRECT (ram, 0x2bc230, 8) , (const, 0x2f, 4)]
[(ram, 0x2bc238, 8) INDIRECT (ram, 0x2bc238, 8) , (const, 0x2f, 4)]
[(ram, 0x2bc240, 8) INDIRECT (ram, 0x2bc240, 8) , (const, 0x2f, 4)]
[(ram, 0x2bc248, 8) INDIRECT (ram, 0x2bc248, 8) , (const, 0x2f, 4)]
[(stack, 0xffffffffffffff94, 4) INDIRECT (stack, 0xffffffffffffff94, 4) , (const, 0x2f, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x2f, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x2f, 4)]
[(stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0x2f, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x2f, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2f, 4)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x2f, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x100002ec, 8), (unique, 0x100002ec, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8)]
[ ---  CBRANCH (ram, 0x24cbfa, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x2401a0, 8) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff98, 8)]
[ ---  CALL (ram, 0x17b270, 8) , (unique, 0x100001f0, 8), (unique, 0x100001f0, 8) COPY (const, 0x2b70a9, 8)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0x15b, 4), (stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0x157, 4)]
[ ---  CALL (ram, 0x143120, 8) , (const, 0x1, 4)]
[(ram, 0x2bc230, 8) COPY (ram, 0x2bc230, 8), (ram, 0x2bc230, 8) INDIRECT (ram, 0x2bc230, 8) , (const, 0x15b, 4), (ram, 0x2bc230, 8) INDIRECT (ram, 0x2bc230, 8) , (const, 0x157, 4)]
[(ram, 0x2bc238, 8) COPY (ram, 0x2bc238, 8), (ram, 0x2bc238, 8) INDIRECT (ram, 0x2bc238, 8) , (const, 0x15b, 4), (ram, 0x2bc238, 8) INDIRECT (ram, 0x2bc238, 8) , (const, 0x157, 4)]
[(ram, 0x2bc240, 8) COPY (ram, 0x2bc240, 8), (ram, 0x2bc240, 8) INDIRECT (ram, 0x2bc240, 8) , (const, 0x15b, 4), (ram, 0x2bc240, 8) INDIRECT (ram, 0x2bc240, 8) , (const, 0x157, 4)]
[(ram, 0x2bc248, 8) COPY (ram, 0x2bc248, 8), (ram, 0x2bc248, 8) INDIRECT (ram, 0x2bc248, 8) , (const, 0x15b, 4), (ram, 0x2bc248, 8) INDIRECT (ram, 0x2bc248, 8) , (const, 0x157, 4)]
[ ---  RETURN (const, 0x1, 4)]
[ ---  CBRANCH (ram, 0x24cbd8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffff98, 8) , (const, 0x0, 8)]
[(unique, 0x100001df, 1) COPY (const, 0x1, 1)]
[(unique, 0x100002cc, 8) COPY (stack, 0xffffffffffffff98, 8)]
[(unique, 0x100001dc, 1) MULTIEQUAL (unique, 0x100001dc, 1) , (unique, 0x100001df, 1) , (unique, 0x100001de, 1)]
[ ---  CBRANCH (ram, 0x24caf7, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x10000115, 4) , (const, 0x0, 4), (unique, 0x10000115, 4) INT_AND (unique, 0xbc80, 4) , (const, 0x1, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100002f4, 8), (unique, 0x100002f4, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x2, 8) , (const, 0x8, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x100002c4, 8) , (unique, 0x100002cc, 8) , (unique, 0x100002d4, 8)]
[ ---  CBRANCH (ram, 0x24caf7, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) CAST (unique, 0x100002fc, 8), (unique, 0x100002fc, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x3, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x24cb10, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbc00, 2) , (const, 0x2, 2), (unique, 0xbc00, 2) LOAD (const, 0x1b1, 4) , (unique, 0x10000304, 8), (unique, 0x10000304, 8) CAST (unique, 0xbd80, 8)]
[ ---  CBRANCH (ram, 0x24cb1a, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x10, 4) , (const, 0x0, 4), (register, 0x10, 4) INT_AND (unique, 0xbc80, 4) , (const, 0x8, 4)]
[ ---  CBRANCH (ram, 0x24caf7, 1) , (unique, 0x100001dc, 1)]
[ ---  CALL (ram, 0x2401c0, 8) , (unique, 0x10000121, 8), (unique, 0x10000121, 8) LOAD (const, 0x1b1, 4) , (unique, 0xbd80, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x10b, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xfa, 4)]
[(ram, 0x2bc230, 8) INDIRECT (ram, 0x2bc230, 8) , (const, 0x10b, 4), (ram, 0x2bc230, 8) INDIRECT (ram, 0x2bc230, 8) , (const, 0xfa, 4)]
[(ram, 0x2bc238, 8) INDIRECT (ram, 0x2bc238, 8) , (const, 0x10b, 4), (ram, 0x2bc238, 8) INDIRECT (ram, 0x2bc238, 8) , (const, 0xfa, 4)]
[(ram, 0x2bc240, 8) INDIRECT (ram, 0x2bc240, 8) , (const, 0x10b, 4), (ram, 0x2bc240, 8) INDIRECT (ram, 0x2bc240, 8) , (const, 0xfa, 4)]
[(ram, 0x2bc248, 8) INDIRECT (ram, 0x2bc248, 8) , (const, 0x10b, 4), (ram, 0x2bc248, 8) INDIRECT (ram, 0x2bc248, 8) , (const, 0xfa, 4)]
[(stack, 0xffffffffffffff94, 4) INDIRECT (stack, 0xffffffffffffff94, 4) , (const, 0x10b, 4), (stack, 0xffffffffffffff94, 4) INDIRECT (stack, 0xffffffffffffff94, 4) , (const, 0xfa, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x10b, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0xfa, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x10b, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0xfa, 4)]
[(stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0x10b, 4), (stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0xfa, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x10b, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0xfa, 4), (stack, 0xffffffffffffffb8, 8) INT_OR (unique, 0x100001c3, 8) , (unique, 0x100001cb, 8), (unique, 0x100001cb, 8) INT_ZEXT (stack, 0xffffffffffffffb8, 4), (unique, 0x100001c3, 8) INT_AND (unique, 0x10000121, 8) , (const, 0xffffffff00000000, 8), (stack, 0xffffffffffffffb8, 4) INT_ADD (unique, 0x10000254, 4) , (stack, 0xffffffffffffffb8, 2), (unique, 0x10000254, 4) INT_LEFT (unique, 0x10000250, 4) , (const, 0x10, 4), (unique, 0x10000250, 4) INT_SEXT (const, 0x6f00, 2), (stack, 0xffffffffffffffb8, 2) SUBPIECE (unique, 0x10000121, 8) , (const, 0x0, 8), (unique, 0x10000121, 8) LOAD (const, 0x1b1, 4) , (unique, 0xbd80, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x10b, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (unique, 0x10000129, 8) , (const, 0xfa, 4), (unique, 0x10000129, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000131, 8), (unique, 0x10000131, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0x10b, 4), (stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0xfa, 4)]
[ ---  CBRANCH (ram, 0x24cbdd, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x257520, 8) , (unique, 0x3800, 8) , (const, 0x186a0, 8) , (const, 0x2, 8) , (unique, 0x10000314, 16) , (ram, 0x2bc240, 8) , (register, 0x80, 4) , (register, 0x88, 4), (unique, 0x10000314, 16) CAST (unique, 0x10000149, 16), (register, 0x80, 4) SUBPIECE (ram, 0x2bc248, 8) , (const, 0x0, 4), (unique, 0x10000149, 16) INT_ADD (unique, 0x1000027a, 16) , (unique, 0x10000159, 9), (unique, 0x1000027a, 16) INT_LEFT (unique, 0x1000026a, 16) , (const, 0x48, 16), (unique, 0x1000026a, 16) INT_SEXT (const, 0x1, 7), (unique, 0x10000159, 9) INT_ADD (unique, 0x10000261, 9) , (const, 0x190, 8), (unique, 0x10000261, 9) INT_LEFT (unique, 0x10000258, 9) , (const, 0x40, 9), (unique, 0x10000258, 9) INT_SEXT (const, 0x90, 1), (register, 0x88, 4) INT_SUB (unique, 0x100001d3, 4) , (const, 0x70, 4), (unique, 0x100001d3, 4) SUBPIECE (register, 0x20, 8) , (const, 0x0, 4), (unique, 0x3800, 8) CAST (unique, 0x1000030c, 8), (unique, 0x1000030c, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffb8, 8), (ram, 0x2bc248, 8) INDIRECT (ram, 0x2bc248, 8) , (const, 0xfa, 4), (ram, 0x2bc240, 8) INDIRECT (ram, 0x2bc240, 8) , (const, 0xfa, 4)]
[ ---  CALLIND (unique, 0xbd80, 8) , (register, 0x0, 8) , (const, 0x2, 8) , (unique, 0x100001e0, 8) , (unique, 0x10000334, 8) , (unique, 0x100001e8, 8) , (unique, 0x1000033c, 8) , (unique, 0x10000344, 16), (unique, 0x10000344, 16) CAST (unique, 0x10000162, 16), (unique, 0x1000033c, 8) CAST (unique, 0x3800, 8), (unique, 0x10000334, 8) CAST (unique, 0x3800, 8), (unique, 0x100001e8, 8) PTRSUB (const, 0x0, 8) , (const, 0x25cc60, 8), (unique, 0x100001e0, 8) PTRSUB (const, 0x0, 8) , (const, 0x24cdc0, 8), (unique, 0x10000162, 16) INT_ADD (unique, 0x100002b4, 16) , (unique, 0x10000172, 9), (unique, 0x100002b4, 16) INT_LEFT (unique, 0x100002a4, 16) , (const, 0x48, 16), (unique, 0x100002a4, 16) INT_SEXT (stack, 0xffffffffffffff71, 7), (unique, 0x10000172, 9) INT_ADD (unique, 0x1000029b, 9) , (ram, 0x2bc230, 8), (unique, 0x1000029b, 9) INT_LEFT (unique, 0x10000292, 9) , (const, 0x40, 9), (unique, 0x10000292, 9) INT_SEXT (stack, 0xffffffffffffff70, 1), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000230, 8), (unique, 0x10000230, 8) PTRSUB (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff94, 8), (stack, 0xffffffffffffff71, 7) SUBPIECE (unique, 0x1000028a, 8) , (const, 0x0, 4), (unique, 0x1000028a, 8) INT_RIGHT (unique, 0x10000324, 8) , (const, 0x8, 4), (unique, 0x10000324, 8) CAST (ram, 0x2bc238, 8), (stack, 0xffffffffffffff70, 1) SUBPIECE (ram, 0x2bc238, 8) , (const, 0x0, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0x0, 8) , (const, 0x8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x14a, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x141, 4)]
[(ram, 0x2bc230, 8) INDIRECT (ram, 0x2bc230, 8) , (const, 0x14a, 4), (ram, 0x2bc230, 8) INDIRECT (ram, 0x2bc230, 8) , (const, 0x141, 4)]
[(ram, 0x2bc238, 8) INDIRECT (ram, 0x2bc238, 8) , (const, 0x14a, 4), (ram, 0x2bc238, 8) INDIRECT (ram, 0x2bc238, 8) , (const, 0x141, 4)]
[(ram, 0x2bc240, 8) INDIRECT (ram, 0x2bc240, 8) , (const, 0x14a, 4), (ram, 0x2bc240, 8) INDIRECT (ram, 0x2bc240, 8) , (const, 0x141, 4)]
[(ram, 0x2bc248, 8) INDIRECT (ram, 0x2bc248, 8) , (const, 0x14a, 4), (ram, 0x2bc248, 8) INDIRECT (ram, 0x2bc248, 8) , (const, 0x141, 4)]
[(stack, 0xffffffffffffff94, 4) INDIRECT (stack, 0xffffffffffffff94, 4) , (const, 0x14a, 4), (stack, 0xffffffffffffff94, 4) INDIRECT (stack, 0xffffffffffffff94, 4) , (const, 0x141, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x14a, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (unique, 0x100002dc, 8) , (const, 0x141, 4), (unique, 0x100002dc, 8) COPY (unique, 0x1000032c, 8), (unique, 0x1000032c, 8) CAST (register, 0x38, 8)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x14a, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (unique, 0x100002e4, 8) , (const, 0x141, 4), (unique, 0x100002e4, 8) COPY (register, 0x30, 8)]
[(stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0x14a, 4), (stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0x141, 4), (stack, 0xffffffffffffffa8, 16) COPY (const, 0x0, 16)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x14a, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x141, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x14a, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x141, 4)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0x14a, 4), (stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0x141, 4)]
[ ---  CALLIND (unique, 0xbd80, 8) , (register, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (unique, 0xbd80, 8) , (const, 0x20, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0x0, 8) , (const, 0x8, 8)]
[ ---  BRANCH (ram, 0x24cbdf, 1)]
[(unique, 0x100002c4, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) CAST (unique, 0x10000354, 8), (unique, 0x10000354, 8) LOAD (const, 0x1b1, 4) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x24cae0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) CAST (unique, 0x10000354, 8), (unique, 0x10000354, 8) LOAD (const, 0x1b1, 4) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x24cbd8, 1) , (unique, 0x100001bf, 1), (unique, 0x100001bf, 1) BOOL_NEGATE (unique, 0x100001dc, 1)]
[(unique, 0x100001de, 1) COPY (const, 0x0, 1)]
[(unique, 0x100002d4, 8) COPY (stack, 0xffffffffffffff98, 8)]
[ ---  BRANCH (ram, 0x24cad0, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xa5, 4)]
[(ram, 0x2bc230, 8) INDIRECT (ram, 0x2bc230, 8) , (const, 0xa5, 4)]
[(ram, 0x2bc238, 8) INDIRECT (ram, 0x2bc238, 8) , (const, 0xa5, 4)]
[(ram, 0x2bc240, 8) INDIRECT (ram, 0x2bc240, 8) , (const, 0xa5, 4)]
[(ram, 0x2bc248, 8) INDIRECT (ram, 0x2bc248, 8) , (const, 0xa5, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0xa5, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0xa5, 4)]
[(stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0xa5, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0xa5, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xa5, 4)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0xa5, 4)]
[ ---  CALL (ram, 0x2401c0, 8)]
[(stack, 0xffffffffffffffd0, 8) MULTIEQUAL (stack, 0xffffffffffffffd0, 8) , (stack, 0xffffffffffffffd0, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffa8, 16) MULTIEQUAL (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(ram, 0x2bc248, 8) MULTIEQUAL (ram, 0x2bc248, 8) , (ram, 0x2bc248, 8)]
[(ram, 0x2bc240, 8) MULTIEQUAL (ram, 0x2bc240, 8) , (ram, 0x2bc240, 8)]
[(ram, 0x2bc238, 8) MULTIEQUAL (ram, 0x2bc238, 8) , (ram, 0x2bc238, 8)]
[(ram, 0x2bc230, 8) MULTIEQUAL (ram, 0x2bc230, 8) , (ram, 0x2bc230, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x0, 4) COPY (const, 0x0, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffa8, 16) MULTIEQUAL (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(ram, 0x2bc248, 8) MULTIEQUAL (ram, 0x2bc248, 8) , (ram, 0x2bc248, 8)]
[(ram, 0x2bc240, 8) MULTIEQUAL (ram, 0x2bc240, 8) , (ram, 0x2bc240, 8)]
[(ram, 0x2bc238, 8) MULTIEQUAL (ram, 0x2bc238, 8) , (ram, 0x2bc238, 8)]
[(ram, 0x2bc230, 8) MULTIEQUAL (ram, 0x2bc230, 8) , (ram, 0x2bc230, 8)]
[(register, 0x0, 4) MULTIEQUAL (register, 0x0, 4) , (stack, 0xffffffffffffff94, 4)]
[ ---  CBRANCH (ram, 0x24cc10, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffffd0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x1000035c, 8), (unique, 0x1000035c, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8), (stack, 0xffffffffffffffd0, 8) MULTIEQUAL (stack, 0xffffffffffffffd0, 8) , (stack, 0xffffffffffffffd0, 8)]
[(ram, 0x2bc230, 8) COPY (ram, 0x2bc230, 8)]
[(ram, 0x2bc238, 8) COPY (ram, 0x2bc238, 8)]
[(ram, 0x2bc240, 8) COPY (ram, 0x2bc240, 8)]
[(ram, 0x2bc248, 8) COPY (ram, 0x2bc248, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 4), (register, 0x0, 4) COPY (register, 0x0, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0xd6, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0xd6, 4)]
[(stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0xd6, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0xd6, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xd6, 4)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0xd6, 4)]
[ ---  CALL (ram, 0x234c80, 8)]
[(ram, 0x2bc230, 8) COPY (ram, 0x2bc230, 8), (ram, 0x2bc230, 8) INDIRECT (ram, 0x2bc230, 8) , (const, 0xd6, 4)]
[(ram, 0x2bc238, 8) COPY (ram, 0x2bc238, 8), (ram, 0x2bc238, 8) INDIRECT (ram, 0x2bc238, 8) , (const, 0xd6, 4)]
[(ram, 0x2bc240, 8) COPY (ram, 0x2bc240, 8), (ram, 0x2bc240, 8) INDIRECT (ram, 0x2bc240, 8) , (const, 0xd6, 4)]
[(ram, 0x2bc248, 8) COPY (ram, 0x2bc248, 8), (ram, 0x2bc248, 8) INDIRECT (ram, 0x2bc248, 8) , (const, 0xd6, 4)]
[ ---  RETURN (const, 0x1, 4)]
