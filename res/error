[ ---  CBRANCH (ram, 0x21ea9f, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 1) , (const, 0x0, 1)]
[(unique, 0x100001eb, 4) COPY (register, 0x1200, 4)]
[(unique, 0x100001ef, 4) COPY (register, 0x1220, 4)]
[(unique, 0x100001f3, 4) COPY (register, 0x1240, 4)]
[(unique, 0x100001f7, 4) COPY (register, 0x1260, 4)]
[(unique, 0x100001fb, 4) COPY (register, 0x1280, 4)]
[(unique, 0x100001ff, 4) COPY (register, 0x12a0, 4)]
[(unique, 0x10000203, 4) COPY (register, 0x12c0, 4)]
[(unique, 0x10000207, 4) COPY (register, 0x12e0, 4)]
[(stack, 0xffffffffffffffd8, 4) MULTIEQUAL (stack, 0xffffffffffffffd8, 4) , (unique, 0x10000207, 4)]
[(stack, 0xffffffffffffffc8, 4) MULTIEQUAL (stack, 0xffffffffffffffc8, 4) , (unique, 0x10000203, 4)]
[(stack, 0xffffffffffffffb8, 4) MULTIEQUAL (stack, 0xffffffffffffffb8, 4) , (unique, 0x100001ff, 4)]
[(stack, 0xffffffffffffffa8, 4) MULTIEQUAL (stack, 0xffffffffffffffa8, 4) , (unique, 0x100001fb, 4)]
[(stack, 0xffffffffffffff98, 4) MULTIEQUAL (stack, 0xffffffffffffff98, 4) , (unique, 0x100001f7, 4)]
[(stack, 0xffffffffffffff88, 4) MULTIEQUAL (stack, 0xffffffffffffff88, 4) , (unique, 0x100001f3, 4)]
[(stack, 0xffffffffffffff78, 4) MULTIEQUAL (stack, 0xffffffffffffff78, 4) , (unique, 0x100001ef, 4)]
[(stack, 0xffffffffffffff68, 4) MULTIEQUAL (stack, 0xffffffffffffff68, 4) , (unique, 0x100001eb, 4)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x1000020b, 8), (unique, 0x1000020b, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8)]
[(stack, 0xffffffffffffff14, 4) COPY (const, 0x0, 4)]
[(unique, 0x100001c3, 8) COPY (register, 0x8, 8)]
[(unique, 0x100001d3, 8) COPY (register, 0x80, 8)]
[(unique, 0x100001e3, 8) COPY (register, 0x88, 8)]
[ ---  CBRANCH (ram, 0x21eae1, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4f08e8, 4) , (const, 0x0, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x86, 4)]
[(ram, 0x4eaf40, 8) INDIRECT (ram, 0x4eaf40, 8) , (const, 0x86, 4)]
[(ram, 0x4eaf50, 8) INDIRECT (ram, 0x4eaf50, 8) , (const, 0x86, 4)]
[(ram, 0x4eaf90, 8) INDIRECT (ram, 0x4eaf90, 8) , (const, 0x86, 4)]
[(ram, 0x4f0858, 8) INDIRECT (ram, 0x4f0858, 8) , (const, 0x86, 4)]
[(ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x86, 4)]
[(stack, 0xffffffffffffff14, 4) INDIRECT (stack, 0xffffffffffffff14, 4) , (const, 0x86, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x86, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (unique, 0x100001c3, 8) , (const, 0x86, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (unique, 0x100001d3, 8) , (const, 0x86, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (unique, 0x100001e3, 8) , (const, 0x86, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x86, 4)]
[(stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0x86, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x86, 4)]
[(stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0x86, 4)]
[(stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0x86, 4)]
[(stack, 0xffffffffffffffb8, 4) INDIRECT (stack, 0xffffffffffffffb8, 4) , (const, 0x86, 4)]
[(stack, 0xffffffffffffffc8, 4) INDIRECT (stack, 0xffffffffffffffc8, 4) , (const, 0x86, 4)]
[(stack, 0xffffffffffffffd8, 4) INDIRECT (stack, 0xffffffffffffffd8, 4) , (const, 0x86, 4)]
[ ---  CALLIND (register, 0x0, 8) , (const, 0x1, 8) , (unique, 0x3800, 8), (register, 0x0, 8) CAST (unique, 0x1000021b, 8), (unique, 0x1000021b, 8) INT_XOR (register, 0x0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10000213, 8), (unique, 0x10000213, 8) INT_ADD (register, 0x110, 8) , (const, 0x30, 8), (register, 0x0, 8) INT_OR (unique, 0x4ff00, 8) , (unique, 0x50000, 8), (unique, 0x50000, 8) INT_LEFT (ram, 0x4f0858, 8) , (const, 0x2f, 4), (unique, 0x4ff00, 8) INT_RIGHT (ram, 0x4f0858, 8) , (const, 0x11, 4), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff14, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x8c, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eaf40, 8) INDIRECT (ram, 0x4eaf40, 8) , (const, 0x8c, 4), (ram, 0x4eaf40, 8) MULTIEQUAL (ram, 0x4eaf40, 8) , (ram, 0x4eaf40, 8)]
[(ram, 0x4eaf90, 8) INDIRECT (ram, 0x4eaf90, 8) , (const, 0x8c, 4), (ram, 0x4eaf90, 8) MULTIEQUAL (ram, 0x4eaf90, 8) , (ram, 0x4eaf90, 8)]
[(ram, 0x4f0858, 8) INDIRECT (ram, 0x4f0858, 8) , (const, 0x8c, 4), (ram, 0x4f0858, 8) MULTIEQUAL (ram, 0x4f0858, 8) , (ram, 0x4f0858, 8)]
[(ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x8c, 4), (ram, 0x4f08e8, 4) MULTIEQUAL (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4)]
[(stack, 0xffffffffffffff14, 4) INDIRECT (stack, 0xffffffffffffff14, 4) , (const, 0x8c, 4), (stack, 0xffffffffffffff14, 4) MULTIEQUAL (stack, 0xffffffffffffff14, 4) , (stack, 0xffffffffffffff14, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x8c, 4), (stack, 0xffffffffffffff30, 8) MULTIEQUAL (unique, 0xbd80, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x8c, 4), (stack, 0xffffffffffffff50, 8) MULTIEQUAL (unique, 0x100001c3, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x8c, 4), (stack, 0xffffffffffffff58, 8) MULTIEQUAL (unique, 0x100001d3, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x8c, 4), (stack, 0xffffffffffffff60, 8) MULTIEQUAL (unique, 0x100001e3, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x8c, 4), (stack, 0xffffffffffffff68, 4) MULTIEQUAL (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4)]
[(stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0x8c, 4), (stack, 0xffffffffffffff78, 4) MULTIEQUAL (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x8c, 4), (stack, 0xffffffffffffff88, 4) MULTIEQUAL (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4)]
[(stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0x8c, 4), (stack, 0xffffffffffffff98, 4) MULTIEQUAL (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4)]
[(stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0x8c, 4), (stack, 0xffffffffffffffa8, 4) MULTIEQUAL (stack, 0xffffffffffffffa8, 4) , (stack, 0xffffffffffffffa8, 4)]
[(stack, 0xffffffffffffffb8, 4) INDIRECT (stack, 0xffffffffffffffb8, 4) , (const, 0x8c, 4), (stack, 0xffffffffffffffb8, 4) MULTIEQUAL (stack, 0xffffffffffffffb8, 4) , (stack, 0xffffffffffffffb8, 4)]
[(stack, 0xffffffffffffffc8, 4) INDIRECT (stack, 0xffffffffffffffc8, 4) , (const, 0x8c, 4), (stack, 0xffffffffffffffc8, 4) MULTIEQUAL (stack, 0xffffffffffffffc8, 4) , (stack, 0xffffffffffffffc8, 4)]
[(stack, 0xffffffffffffffd8, 4) INDIRECT (stack, 0xffffffffffffffd8, 4) , (const, 0x8c, 4), (stack, 0xffffffffffffffd8, 4) MULTIEQUAL (stack, 0xffffffffffffffd8, 4) , (stack, 0xffffffffffffffd8, 4)]
[ ---  CALL (ram, 0x17e7e0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000223, 8), (unique, 0x10000223, 8) CAST (ram, 0x4eaf40, 8), (ram, 0x4eaf40, 8) MULTIEQUAL (ram, 0x4eaf40, 8) , (ram, 0x4eaf40, 8)]
[ ---  CBRANCH (ram, 0x21eb80, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x1000022b, 8), (unique, 0x1000022b, 8) CAST (ram, 0x4eaf50, 8), (ram, 0x4eaf50, 8) INDIRECT (ram, 0x4eaf50, 8) , (const, 0x8c, 4), (ram, 0x4eaf50, 8) MULTIEQUAL (ram, 0x4eaf50, 8) , (ram, 0x4eaf50, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x135, 4)]
[(ram, 0x4eaf40, 8) INDIRECT (ram, 0x4eaf40, 8) , (const, 0x135, 4)]
[(ram, 0x4eaf50, 8) INDIRECT (ram, 0x4eaf50, 8) , (const, 0x135, 4)]
[(ram, 0x4eaf90, 8) INDIRECT (ram, 0x4eaf90, 8) , (const, 0x135, 4)]
[(ram, 0x4f0858, 8) INDIRECT (ram, 0x4f0858, 8) , (const, 0x135, 4)]
[(ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x135, 4)]
[(stack, 0xffffffffffffff14, 4) INDIRECT (stack, 0xffffffffffffff14, 4) , (const, 0x135, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x135, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x135, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x135, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x135, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x135, 4)]
[(stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0x135, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x135, 4)]
[(stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0x135, 4)]
[(stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0x135, 4)]
[(stack, 0xffffffffffffffb8, 4) INDIRECT (stack, 0xffffffffffffffb8, 4) , (const, 0x135, 4)]
[(stack, 0xffffffffffffffc8, 4) INDIRECT (stack, 0xffffffffffffffc8, 4) , (const, 0x135, 4)]
[(stack, 0xffffffffffffffd8, 4) INDIRECT (stack, 0xffffffffffffffd8, 4) , (const, 0x135, 4)]
[ ---  CALL (ram, 0x17ddd0, 8) , (const, 0x0, 8) , (unique, 0x10000193, 8) , (unique, 0xbd80, 8), (unique, 0x10000193, 8) COPY (const, 0x2b6be1, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000233, 8), (unique, 0x10000233, 8) CAST (ram, 0x4eaf90, 8)]
[ ---  BRANCH (ram, 0x21eb05, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x9c, 4)]
[(ram, 0x4eaf40, 8) INDIRECT (ram, 0x4eaf40, 8) , (const, 0x9c, 4)]
[(ram, 0x4eaf50, 8) INDIRECT (ram, 0x4eaf50, 8) , (const, 0x9c, 4)]
[(ram, 0x4eaf90, 8) INDIRECT (ram, 0x4eaf90, 8) , (const, 0x9c, 4)]
[(ram, 0x4f0858, 8) INDIRECT (ram, 0x4f0858, 8) , (const, 0x9c, 4)]
[(ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x9c, 4)]
[(stack, 0xffffffffffffff14, 4) INDIRECT (stack, 0xffffffffffffff14, 4) , (const, 0x9c, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x9c, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x9c, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x9c, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x9c, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x9c, 4)]
[(stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0x9c, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x9c, 4)]
[(stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0x9c, 4)]
[(stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0x9c, 4)]
[(stack, 0xffffffffffffffb8, 4) INDIRECT (stack, 0xffffffffffffffb8, 4) , (const, 0x9c, 4)]
[(stack, 0xffffffffffffffc8, 4) INDIRECT (stack, 0xffffffffffffffc8, 4) , (const, 0x9c, 4)]
[(stack, 0xffffffffffffffd8, 4) INDIRECT (stack, 0xffffffffffffffd8, 4) , (const, 0x9c, 4)]
[ ---  CALLIND (unique, 0xbd80, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xb6, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eaf40, 8) INDIRECT (ram, 0x4eaf40, 8) , (const, 0xb6, 4), (ram, 0x4eaf40, 8) MULTIEQUAL (ram, 0x4eaf40, 8) , (ram, 0x4eaf40, 8)]
[(ram, 0x4eaf50, 8) INDIRECT (ram, 0x4eaf50, 8) , (const, 0xb6, 4), (ram, 0x4eaf50, 8) MULTIEQUAL (ram, 0x4eaf50, 8) , (ram, 0x4eaf50, 8)]
[(ram, 0x4eaf90, 8) INDIRECT (ram, 0x4eaf90, 8) , (const, 0xb6, 4), (ram, 0x4eaf90, 8) MULTIEQUAL (ram, 0x4eaf90, 8) , (ram, 0x4eaf90, 8)]
[(ram, 0x4f0858, 8) INDIRECT (ram, 0x4f0858, 8) , (const, 0xb6, 4), (ram, 0x4f0858, 8) MULTIEQUAL (ram, 0x4f0858, 8) , (ram, 0x4f0858, 8)]
[(stack, 0xffffffffffffff14, 4) INDIRECT (stack, 0xffffffffffffff14, 4) , (const, 0xb6, 4), (stack, 0xffffffffffffff14, 4) MULTIEQUAL (stack, 0xffffffffffffff14, 4) , (stack, 0xffffffffffffff14, 4)]
[(stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0xb6, 4), (stack, 0xffffffffffffff18, 4) COPY (const, 0x18, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0xb6, 4), (stack, 0xffffffffffffff1c, 4) COPY (const, 0x30, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (unique, 0x3c80, 8) , (const, 0xb6, 4), (unique, 0x3c80, 8) PTRSUB (register, 0x20, 8) , (const, 0x8, 8)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (unique, 0x3800, 8) , (const, 0xb6, 4), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0xb6, 4), (stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0xb6, 4), (stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0xb6, 4), (stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0xb6, 4), (stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0xb6, 4), (stack, 0xffffffffffffff68, 4) MULTIEQUAL (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4)]
[(stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0xb6, 4), (stack, 0xffffffffffffff78, 4) MULTIEQUAL (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0xb6, 4), (stack, 0xffffffffffffff88, 4) MULTIEQUAL (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4)]
[(stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0xb6, 4), (stack, 0xffffffffffffff98, 4) MULTIEQUAL (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4)]
[(stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0xb6, 4), (stack, 0xffffffffffffffa8, 4) MULTIEQUAL (stack, 0xffffffffffffffa8, 4) , (stack, 0xffffffffffffffa8, 4)]
[(stack, 0xffffffffffffffb8, 4) INDIRECT (stack, 0xffffffffffffffb8, 4) , (const, 0xb6, 4), (stack, 0xffffffffffffffb8, 4) MULTIEQUAL (stack, 0xffffffffffffffb8, 4) , (stack, 0xffffffffffffffb8, 4)]
[(stack, 0xffffffffffffffc8, 4) INDIRECT (stack, 0xffffffffffffffc8, 4) , (const, 0xb6, 4), (stack, 0xffffffffffffffc8, 4) MULTIEQUAL (stack, 0xffffffffffffffc8, 4) , (stack, 0xffffffffffffffc8, 4)]
[(stack, 0xffffffffffffffd8, 4) INDIRECT (stack, 0xffffffffffffffd8, 4) , (const, 0xb6, 4), (stack, 0xffffffffffffffd8, 4) MULTIEQUAL (stack, 0xffffffffffffffd8, 4) , (stack, 0xffffffffffffffd8, 4)]
[ ---  CALL (ram, 0x21e810, 8) , (register, 0x38, 4) , (register, 0x30, 4) , (register, 0x10, 8) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff18, 8)]
[ ---  CBRANCH (ram, 0x21eb63, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4f08e8, 4) , (const, 0x0, 4), (ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0xb6, 4), (ram, 0x4f08e8, 4) MULTIEQUAL (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xf3, 4)]
[(ram, 0x4eaf40, 8) INDIRECT (ram, 0x4eaf40, 8) , (const, 0xf3, 4)]
[(ram, 0x4eaf50, 8) INDIRECT (ram, 0x4eaf50, 8) , (const, 0xf3, 4)]
[(ram, 0x4eaf90, 8) INDIRECT (ram, 0x4eaf90, 8) , (const, 0xf3, 4)]
[(ram, 0x4f0858, 8) INDIRECT (ram, 0x4f0858, 8) , (const, 0xf3, 4)]
[(ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0xf3, 4)]
[(stack, 0xffffffffffffff14, 4) INDIRECT (stack, 0xffffffffffffff14, 4) , (const, 0xf3, 4)]
[(stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0xf3, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0xf3, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0xf3, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0xf3, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0xf3, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0xf3, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0xf3, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0xf3, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0xf3, 4)]
[(stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0xf3, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0xf3, 4)]
[(stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0xf3, 4)]
[(stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0xf3, 4)]
[(stack, 0xffffffffffffffb8, 4) INDIRECT (stack, 0xffffffffffffffb8, 4) , (const, 0xf3, 4)]
[(stack, 0xffffffffffffffc8, 4) INDIRECT (stack, 0xffffffffffffffc8, 4) , (const, 0xf3, 4)]
[(stack, 0xffffffffffffffd8, 4) INDIRECT (stack, 0xffffffffffffffd8, 4) , (const, 0xf3, 4)]
[ ---  CALLIND (register, 0x0, 8) , (stack, 0xffffffffffffff14, 4) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10000243, 8), (unique, 0x10000243, 8) INT_XOR (register, 0x0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x1000023b, 8), (unique, 0x1000023b, 8) INT_ADD (register, 0x110, 8) , (const, 0x30, 8), (register, 0x0, 8) INT_OR (unique, 0x4ff00, 8) , (unique, 0x50000, 8), (unique, 0x50000, 8) INT_LEFT (ram, 0x4f0858, 8) , (const, 0x2f, 4), (unique, 0x4ff00, 8) INT_RIGHT (ram, 0x4f0858, 8) , (const, 0x11, 4)]
[(stack, 0xffffffffffffffd8, 4) MULTIEQUAL (stack, 0xffffffffffffffd8, 4) , (stack, 0xffffffffffffffd8, 4)]
[(stack, 0xffffffffffffffc8, 4) MULTIEQUAL (stack, 0xffffffffffffffc8, 4) , (stack, 0xffffffffffffffc8, 4)]
[(stack, 0xffffffffffffffb8, 4) MULTIEQUAL (stack, 0xffffffffffffffb8, 4) , (stack, 0xffffffffffffffb8, 4)]
[(stack, 0xffffffffffffffa8, 4) MULTIEQUAL (stack, 0xffffffffffffffa8, 4) , (stack, 0xffffffffffffffa8, 4)]
[(stack, 0xffffffffffffff98, 4) MULTIEQUAL (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4)]
[(stack, 0xffffffffffffff88, 4) MULTIEQUAL (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4)]
[(stack, 0xffffffffffffff78, 4) MULTIEQUAL (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4)]
[(stack, 0xffffffffffffff68, 4) MULTIEQUAL (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff1c, 4) MULTIEQUAL (stack, 0xffffffffffffff1c, 4) , (stack, 0xffffffffffffff1c, 4)]
[(stack, 0xffffffffffffff18, 4) MULTIEQUAL (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4)]
[(stack, 0xffffffffffffff14, 4) MULTIEQUAL (stack, 0xffffffffffffff14, 4) , (stack, 0xffffffffffffff14, 4)]
[(ram, 0x4f08e8, 4) MULTIEQUAL (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4)]
[(ram, 0x4f0858, 8) MULTIEQUAL (ram, 0x4f0858, 8) , (ram, 0x4f0858, 8)]
[(ram, 0x4eaf90, 8) MULTIEQUAL (ram, 0x4eaf90, 8) , (ram, 0x4eaf90, 8)]
[(ram, 0x4eaf50, 8) MULTIEQUAL (ram, 0x4eaf50, 8) , (ram, 0x4eaf50, 8)]
[(ram, 0x4eaf40, 8) MULTIEQUAL (ram, 0x4eaf40, 8) , (ram, 0x4eaf40, 8)]
[ ---  CBRANCH (ram, 0x21eb9f, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffff30, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x1000024b, 8), (unique, 0x1000024b, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8), (stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff14, 4) INDIRECT (stack, 0xffffffffffffff14, 4) , (const, 0x118, 4)]
[(stack, 0xffffffffffffff18, 4) INDIRECT (stack, 0xffffffffffffff18, 4) , (const, 0x118, 4)]
[(stack, 0xffffffffffffff1c, 4) INDIRECT (stack, 0xffffffffffffff1c, 4) , (const, 0x118, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x118, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x118, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x118, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x118, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x118, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x118, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x118, 4)]
[(stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0x118, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x118, 4)]
[(stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0x118, 4)]
[(stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0x118, 4)]
[(stack, 0xffffffffffffffb8, 4) INDIRECT (stack, 0xffffffffffffffb8, 4) , (const, 0x118, 4)]
[(stack, 0xffffffffffffffc8, 4) INDIRECT (stack, 0xffffffffffffffc8, 4) , (const, 0x118, 4)]
[(stack, 0xffffffffffffffd8, 4) INDIRECT (stack, 0xffffffffffffffd8, 4) , (const, 0x118, 4)]
[ ---  CALL (ram, 0x234c80, 8)]
[(ram, 0x4eaf40, 8) COPY (ram, 0x4eaf40, 8), (ram, 0x4eaf40, 8) INDIRECT (ram, 0x4eaf40, 8) , (const, 0x118, 4)]
[(ram, 0x4eaf50, 8) COPY (ram, 0x4eaf50, 8), (ram, 0x4eaf50, 8) INDIRECT (ram, 0x4eaf50, 8) , (const, 0x118, 4)]
[(ram, 0x4eaf90, 8) COPY (ram, 0x4eaf90, 8), (ram, 0x4eaf90, 8) INDIRECT (ram, 0x4eaf90, 8) , (const, 0x118, 4)]
[(ram, 0x4f0858, 8) COPY (ram, 0x4f0858, 8), (ram, 0x4f0858, 8) INDIRECT (ram, 0x4f0858, 8) , (const, 0x118, 4)]
[(ram, 0x4f08e8, 4) COPY (ram, 0x4f08e8, 4), (ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x118, 4)]
[ ---  RETURN (const, 0x1, 4)]
[(ram, 0x4eaf40, 8) COPY (ram, 0x4eaf40, 8)]
[(ram, 0x4eaf50, 8) COPY (ram, 0x4eaf50, 8)]
[(ram, 0x4eaf90, 8) COPY (ram, 0x4eaf90, 8)]
[(ram, 0x4f0858, 8) COPY (ram, 0x4f0858, 8)]
[(ram, 0x4f08e8, 4) COPY (ram, 0x4f08e8, 4)]
[ ---  RETURN (const, 0x0, 8)]
