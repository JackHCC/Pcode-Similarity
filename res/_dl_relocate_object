[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffef8, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffef8, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffef8, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffef8, 8)]
[(stack, 0xffffffffffffff40, 8) COPY (register, 0x30, 8)]
[(stack, 0xffffffffffffff30, 4) COPY (register, 0x8, 4)]
[ ---  CBRANCH (ram, 0x482d38, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x58c00, 1) , (const, 0x0, 1), (unique, 0x58c00, 1) INT_AND (unique, 0xbb00, 1) , (const, 0x4, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x10001674, 8), (unique, 0x10001674, 8) INT_ADD (unique, 0x1000166c, 8) , (const, 0x31c, 8), (unique, 0x1000166c, 8) CAST (register, 0x38, 8)]
[(register, 0xa0, 8) INT_AND (register, 0x10, 8) , (const, 0xffffffff, 8)]
[(register, 0x0, 4) INT_AND (ram, 0x4c87c0, 4) , (const, 0x20, 4)]
[(unique, 0x1000165c, 8) COPY (register, 0x38, 8)]
[ ---  CBRANCH (ram, 0x482d50, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x8, 4) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x482a99, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbe00, 8) , (const, 0x0, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (register, 0x38, 8) , (const, 0x20, 8) , (const, 0x8, 8)]
[(unique, 0x100007be, 8) INT_AND (register, 0x10, 8) , (const, 0x1, 8)]
[(register, 0xa8, 8) CAST (unique, 0x1000167c, 8), (unique, 0x1000167c, 8) INT_ZEXT (register, 0xa8, 4), (register, 0xa8, 4) INT_AND (register, 0xa8, 4) , (const, 0x1, 4), (register, 0xa8, 4) SUBPIECE (register, 0xa0, 8) , (const, 0x0, 4)]
[(unique, 0x1000136c, 8) COPY (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x48403a, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4)]
[(register, 0x10, 8) COPY (const, 0x4b0266, 8)]
[ ---  CBRANCH (ram, 0x48404f, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x100007be, 8) , (const, 0x0, 8)]
[(register, 0x10, 8) COPY (const, 0x4b0c15, 8)]
[(register, 0xa8, 8) COPY (const, 0x0, 8)]
[(unique, 0x1000137c, 8) COPY (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x482aa8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4)]
[(register, 0x10, 8) COPY (const, 0x4b0c15, 8)]
[ ---  BRANCH (ram, 0x48404f, 1)]
[(register, 0xa8, 8) MULTIEQUAL (register, 0xa8, 8) , (register, 0xa8, 8) , (register, 0xa8, 8)]
[(register, 0x10, 8) MULTIEQUAL (register, 0x10, 8) , (register, 0x10, 8) , (register, 0x10, 8)]
[(unique, 0x10001354, 8) COPY (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x484158, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x1000168c, 1) , (const, 0x0, 1), (unique, 0x1000168c, 1) CAST (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) CAST (unique, 0x10001684, 8), (unique, 0x10001684, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x38, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[(stack, 0xffffffffffffffb8, 16) MULTIEQUAL (stack, 0xffffffffffffffb8, 16) , (stack, 0xffffffffffffffb8, 16) , (stack, 0xffffffffffffffb8, 16)]
[(stack, 0xffffffffffffffa8, 16) MULTIEQUAL (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16)]
[(stack, 0xffffffffffffff98, 16) MULTIEQUAL (stack, 0xffffffffffffff98, 16) , (stack, 0xffffffffffffff98, 16) , (stack, 0xffffffffffffff98, 16)]
[(stack, 0xffffffffffffff88, 16) MULTIEQUAL (stack, 0xffffffffffffff88, 16) , (stack, 0xffffffffffffff88, 16) , (stack, 0xffffffffffffff88, 16)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(ram, 0x4c8850, 8) MULTIEQUAL (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8)]
[(ram, 0x4c8840, 4) MULTIEQUAL (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4)]
[(ram, 0x4c87d0, 8) MULTIEQUAL (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8)]
[(ram, 0x4c87c0, 4) MULTIEQUAL (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4)]
[(ram, 0x4c7da0, 8) MULTIEQUAL (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8)]
[(ram, 0x4c7d80, 4) MULTIEQUAL (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4)]
[(ram, 0x4c6118, 8) MULTIEQUAL (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8)]
[(ram, 0x4c4a68, 8) MULTIEQUAL (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xa0, 4) SUBPIECE (register, 0xa0, 8) , (const, 0x0, 4), (register, 0xa0, 8) MULTIEQUAL (register, 0xa0, 8) , (register, 0xa0, 8) , (register, 0xa0, 8)]
[(register, 0xa8, 4) SUBPIECE (register, 0xa8, 8) , (const, 0x0, 4), (register, 0xa8, 8) MULTIEQUAL (register, 0xa8, 8) , (register, 0xa8, 8) , (register, 0xa8, 8)]
[(stack, 0xffffffffffffff10, 8) COPY (unique, 0x1000168d, 8), (unique, 0x1000168d, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (register, 0xb8, 8) , (const, 0x1e, 8) , (const, 0x8, 8), (register, 0xb8, 8) MULTIEQUAL (unique, 0x1000165c, 8) , (unique, 0x100015dc, 8) , (unique, 0x1000165c, 8)]
[(unique, 0x10001344, 8) COPY (register, 0x20, 8), (register, 0x20, 8) COPY (unique, 0x10001384, 8), (unique, 0x10001384, 8) MULTIEQUAL (unique, 0x1000136c, 8) , (unique, 0x10001374, 8) , (unique, 0x1000137c, 8)]
[ ---  CBRANCH (ram, 0x483ece, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x10001695, 8) , (const, 0x0, 8), (unique, 0x10001695, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (register, 0xb8, 8) , (const, 0x1e, 8) , (const, 0x8, 8), (register, 0xb8, 8) MULTIEQUAL (unique, 0x1000165c, 8) , (unique, 0x100015dc, 8) , (unique, 0x1000165c, 8)]
[ ---  CBRANCH (ram, 0x484341, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (unique, 0xbd80, 8) , (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (unique, 0xbd80, 8) , (unique, 0x10000eb8, 8) , (const, 0x8, 8), (unique, 0x10000eb8, 8) INT_MULT (register, 0x10, 8) , (const, 0x7, 8), (unique, 0xbd80, 8) CAST (unique, 0x100016a5, 8), (unique, 0x100016a5, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (register, 0xb8, 8) , (const, 0x55, 8) , (const, 0x8, 8), (register, 0x10, 8) INT_ZEXT (unique, 0xbc00, 2), (unique, 0xbc00, 2) LOAD (const, 0x1b1, 4) , (unique, 0x1000169d, 8), (unique, 0x1000169d, 8) CAST (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (register, 0xb8, 8) , (const, 0x57, 8) , (const, 0x8, 8)]
[(stack, 0xffffffffffffff10, 8) COPY (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x482abf, 1)]
[(stack, 0xffffffffffffff70, 8) CAST (unique, 0x100016bd, 8), (unique, 0x100016bd, 8) INT_OR (unique, 0x10000855, 8) , (unique, 0x1000085d, 8), (unique, 0x1000085d, 8) INT_AND (unique, 0x100016b5, 8) , (const, 0xffffffff, 8), (unique, 0x100016b5, 8) CAST (register, 0xa8, 8), (unique, 0x10000855, 8) INT_AND (unique, 0x100016ad, 8) , (const, 0xffffffff00000000, 8), (unique, 0x100016ad, 8) CAST (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) CAST (unique, 0x100016cd, 8), (unique, 0x100016cd, 8) INT_OR (unique, 0x10000865, 8) , (register, 0xa0, 8), (unique, 0x10000865, 8) INT_AND (unique, 0x100016c5, 8) , (const, 0xffffffff00000000, 8), (unique, 0x100016c5, 8) CAST (stack, 0xffffffffffffff68, 8)]
[(unique, 0x10001324, 8) COPY (unique, 0xbd80, 8)]
[(unique, 0x10001334, 8) COPY (register, 0x20, 8)]
[(unique, 0x100015c4, 8) COPY (register, 0x0, 8), (register, 0x0, 8) COPY (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x483f3c, 1)]
[(stack, 0xffffffffffffffb8, 16) MULTIEQUAL (stack, 0xffffffffffffffb8, 16) , (stack, 0xffffffffffffffb8, 16)]
[(stack, 0xffffffffffffffa8, 16) MULTIEQUAL (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16)]
[(stack, 0xffffffffffffff98, 16) MULTIEQUAL (stack, 0xffffffffffffff98, 16) , (stack, 0xffffffffffffff98, 16)]
[(stack, 0xffffffffffffff88, 16) MULTIEQUAL (stack, 0xffffffffffffff88, 16) , (stack, 0xffffffffffffff88, 16)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(ram, 0x4c8850, 8) MULTIEQUAL (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8)]
[(ram, 0x4c8840, 4) MULTIEQUAL (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4)]
[(ram, 0x4c87d0, 8) MULTIEQUAL (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8)]
[(ram, 0x4c87c0, 4) MULTIEQUAL (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4)]
[(ram, 0x4c7da0, 8) MULTIEQUAL (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8)]
[(ram, 0x4c7d80, 4) MULTIEQUAL (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4)]
[(ram, 0x4c6118, 8) MULTIEQUAL (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8)]
[(ram, 0x4c4a68, 8) MULTIEQUAL (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x10, 8) MULTIEQUAL (register, 0x10, 8) , (register, 0x10, 8)]
[(register, 0x8, 8) MULTIEQUAL (unique, 0xbd80, 8) , (register, 0x8, 8)]
[(unique, 0x1000132c, 8) COPY (register, 0x20, 8), (register, 0x20, 8) MULTIEQUAL (unique, 0x10001334, 8) , (unique, 0x1000133c, 8)]
[(unique, 0x10001594, 8) COPY (register, 0xa0, 8), (register, 0xa0, 8) MULTIEQUAL (unique, 0x100015c4, 8) , (unique, 0x100015cc, 8)]
[ ---  CBRANCH (ram, 0x483f20, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x1, 8), (register, 0x0, 8) INT_AND (unique, 0xbd80, 8) , (const, 0x2ffffffff, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x18, 8), (register, 0x18, 8) MULTIEQUAL (unique, 0x10001324, 8) , (register, 0x18, 8)]
[(register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xffffffffffffffd0, 8) , (const, 0x1, 8)]
[(register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xffffffffffffffd0, 8) , (const, 0x1, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100016dd, 8) , (unique, 0xbe00, 8), (unique, 0x100016dd, 8) CAST (unique, 0x3800, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x100016d5, 8), (unique, 0x100016d5, 8) CAST (unique, 0x3800, 8), (unique, 0x3800, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100016fd, 8) , (const, 0x0, 4), (unique, 0x100016fd, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x88, 8) , (const, 0x2, 8) , (const, 0x8, 8), (register, 0x88, 8) CAST (unique, 0x100016ed, 8), (unique, 0x100016ed, 8) INT_AND (unique, 0x100016e5, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x100016e5, 8) CAST (unique, 0x3800, 8), (unique, 0x3800, 8) PTRADD (register, 0x20, 8) , (const, 0xffffffffffffffdf, 8) , (const, 0x1, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (register, 0x30, 8), (unique, 0x3100, 8) PTRADD (register, 0x88, 8) , (const, 0x1, 8) , (const, 0x8, 8), (register, 0x30, 8) CAST (unique, 0x100016f5, 8), (unique, 0x100016f5, 8) INT_SUB (register, 0x30, 8) , (register, 0x38, 8), (register, 0x88, 8) CAST (unique, 0x100016ed, 8), (unique, 0x100016ed, 8) INT_AND (unique, 0x100016e5, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x100016e5, 8) CAST (unique, 0x3800, 8), (register, 0x30, 8) INT_AND (register, 0x0, 8) , (register, 0x10, 8), (unique, 0x3800, 8) PTRADD (register, 0x20, 8) , (const, 0xffffffffffffffdf, 8) , (const, 0x1, 8), (register, 0x38, 8) INT_AND (unique, 0xbd80, 8) , (register, 0x10, 8), (register, 0x0, 8) INT_ADD (unique, 0x3a00, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x5, 8) , (const, 0x8, 8), (unique, 0x3a00, 8) INT_ADD (unique, 0x3880, 8) , (ram, 0x4c6118, 8), (unique, 0x3880, 8) INT_SUB (unique, 0xbd80, 8) , (const, 0x1, 8), (register, 0x10, 8) INT_2COMP (ram, 0x4c6118, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[(ram, 0x4c4a68, 8) INDIRECT (ram, 0x4c4a68, 8) , (const, 0x14fd, 4), (ram, 0x4c4a68, 8) INDIRECT (ram, 0x4c4a68, 8) , (const, 0x14fb, 4), (ram, 0x4c4a68, 8) INDIRECT (ram, 0x4c4a68, 8) , (const, 0x14f3, 4)]
[(ram, 0x4c6118, 8) INDIRECT (ram, 0x4c6118, 8) , (const, 0x14fd, 4), (ram, 0x4c6118, 8) INDIRECT (ram, 0x4c6118, 8) , (const, 0x14fb, 4), (ram, 0x4c6118, 8) INDIRECT (ram, 0x4c6118, 8) , (const, 0x14f3, 4)]
[(ram, 0x4c7d80, 4) INDIRECT (ram, 0x4c7d80, 4) , (const, 0x14fd, 4), (ram, 0x4c7d80, 4) INDIRECT (ram, 0x4c7d80, 4) , (const, 0x14fb, 4), (ram, 0x4c7d80, 4) INDIRECT (ram, 0x4c7d80, 4) , (const, 0x14f3, 4)]
[(ram, 0x4c7da0, 8) INDIRECT (ram, 0x4c7da0, 8) , (const, 0x14fd, 4), (ram, 0x4c7da0, 8) INDIRECT (ram, 0x4c7da0, 8) , (const, 0x14fb, 4), (ram, 0x4c7da0, 8) INDIRECT (ram, 0x4c7da0, 8) , (const, 0x14f3, 4)]
[(ram, 0x4c87c0, 4) INDIRECT (ram, 0x4c87c0, 4) , (const, 0x14fd, 4), (ram, 0x4c87c0, 4) INDIRECT (ram, 0x4c87c0, 4) , (const, 0x14fb, 4), (ram, 0x4c87c0, 4) INDIRECT (ram, 0x4c87c0, 4) , (const, 0x14f3, 4)]
[(ram, 0x4c87d0, 8) INDIRECT (ram, 0x4c87d0, 8) , (const, 0x14fd, 4), (ram, 0x4c87d0, 8) INDIRECT (ram, 0x4c87d0, 8) , (const, 0x14fb, 4), (ram, 0x4c87d0, 8) INDIRECT (ram, 0x4c87d0, 8) , (const, 0x14f3, 4)]
[(ram, 0x4c8840, 4) INDIRECT (ram, 0x4c8840, 4) , (const, 0x14fd, 4), (ram, 0x4c8840, 4) INDIRECT (ram, 0x4c8840, 4) , (const, 0x14fb, 4), (ram, 0x4c8840, 4) INDIRECT (ram, 0x4c8840, 4) , (const, 0x14f3, 4)]
[(ram, 0x4c8850, 8) INDIRECT (ram, 0x4c8850, 8) , (const, 0x14fd, 4), (ram, 0x4c8850, 8) INDIRECT (ram, 0x4c8850, 8) , (const, 0x14fb, 4), (ram, 0x4c8850, 8) INDIRECT (ram, 0x4c8850, 8) , (const, 0x14f3, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x88, 8) , (register, 0x38, 8), (register, 0x38, 8) PTRADD (unique, 0xbd80, 8) , (register, 0x38, 8) , (const, 0x1, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0xb8, 8), (register, 0x88, 8) CAST (unique, 0x100016ed, 8), (unique, 0x100016ed, 8) INT_AND (unique, 0x100016e5, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x100016e5, 8) CAST (unique, 0x3800, 8), (unique, 0x3800, 8) PTRADD (register, 0x20, 8) , (const, 0xffffffffffffffdf, 8) , (const, 0x1, 8), (register, 0x38, 8) INT_AND (unique, 0xbd80, 8) , (register, 0x10, 8), (register, 0x10, 8) INT_2COMP (ram, 0x4c6118, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x484014, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x1000068b, 4) , (const, 0x0, 4), (unique, 0x1000068b, 4) INT_AND (unique, 0xbc80, 4) , (const, 0x4, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000170d, 8), (unique, 0x1000170d, 8) INT_ADD (unique, 0x10001705, 8) , (const, 0x4, 8), (unique, 0x10001705, 8) CAST (register, 0x18, 8)]
[(register, 0x10, 4) COPY (const, 0x2, 4)]
[ ---  BRANCH (ram, 0x483fd0, 1)]
[(ram, 0x4c4a68, 8) INDIRECT (ram, 0x4c4a68, 8) , (const, 0x150a, 4)]
[(ram, 0x4c6118, 8) INDIRECT (ram, 0x4c6118, 8) , (const, 0x150a, 4)]
[(ram, 0x4c7d80, 4) INDIRECT (ram, 0x4c7d80, 4) , (const, 0x150a, 4)]
[(ram, 0x4c7da0, 8) INDIRECT (ram, 0x4c7da0, 8) , (const, 0x150a, 4)]
[(ram, 0x4c87c0, 4) INDIRECT (ram, 0x4c87c0, 4) , (const, 0x150a, 4)]
[(ram, 0x4c87d0, 8) INDIRECT (ram, 0x4c87d0, 8) , (const, 0x150a, 4)]
[(ram, 0x4c8840, 4) INDIRECT (ram, 0x4c8840, 4) , (const, 0x150a, 4)]
[(ram, 0x4c8850, 8) INDIRECT (ram, 0x4c8850, 8) , (const, 0x150a, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001715, 8) , (const, 0x1, 4), (unique, 0x10001715, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x88, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[(register, 0x10, 4) COPY (const, 0x3, 4)]
[(ram, 0x4c8850, 8) MULTIEQUAL (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8)]
[(ram, 0x4c8840, 4) MULTIEQUAL (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4)]
[(ram, 0x4c87d0, 8) MULTIEQUAL (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8)]
[(ram, 0x4c87c0, 4) MULTIEQUAL (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4)]
[(ram, 0x4c7da0, 8) MULTIEQUAL (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8)]
[(ram, 0x4c7d80, 4) MULTIEQUAL (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4)]
[(ram, 0x4c6118, 8) MULTIEQUAL (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8)]
[(ram, 0x4c4a68, 8) MULTIEQUAL (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8)]
[(register, 0x10, 4) MULTIEQUAL (register, 0x10, 4) , (register, 0x10, 4)]
[(unique, 0x100015ec, 4) COPY (register, 0x8, 4), (register, 0x8, 4) INT_ZEXT (unique, 0x100007d6, 1), (unique, 0x100007d6, 1) BOOL_NEGATE (register, 0x206, 1)]
[ ---  CBRANCH (ram, 0x483fda, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x1000068f, 4) , (const, 0x0, 4), (unique, 0x1000068f, 4) INT_AND (unique, 0xbc80, 4) , (const, 0x2, 4)]
[(ram, 0x4c4a68, 8) INDIRECT (ram, 0x4c4a68, 8) , (const, 0x1519, 4)]
[(ram, 0x4c6118, 8) INDIRECT (ram, 0x4c6118, 8) , (const, 0x1519, 4)]
[(ram, 0x4c7d80, 4) INDIRECT (ram, 0x4c7d80, 4) , (const, 0x1519, 4)]
[(ram, 0x4c7da0, 8) INDIRECT (ram, 0x4c7da0, 8) , (const, 0x1519, 4)]
[(ram, 0x4c87c0, 4) INDIRECT (ram, 0x4c87c0, 4) , (const, 0x1519, 4)]
[(ram, 0x4c87d0, 8) INDIRECT (ram, 0x4c87d0, 8) , (const, 0x1519, 4)]
[(ram, 0x4c8840, 4) INDIRECT (ram, 0x4c8840, 4) , (const, 0x1519, 4)]
[(ram, 0x4c8850, 8) INDIRECT (ram, 0x4c8850, 8) , (const, 0x1519, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000171d, 8) , (register, 0x10, 4), (unique, 0x1000171d, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x88, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[(unique, 0x100015f0, 4) COPY (register, 0x10, 4)]
[(ram, 0x4c8850, 8) MULTIEQUAL (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8)]
[(ram, 0x4c8840, 4) MULTIEQUAL (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4)]
[(ram, 0x4c87d0, 8) MULTIEQUAL (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8)]
[(ram, 0x4c87c0, 4) MULTIEQUAL (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4)]
[(ram, 0x4c7da0, 8) MULTIEQUAL (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8)]
[(ram, 0x4c7d80, 4) MULTIEQUAL (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4)]
[(ram, 0x4c6118, 8) MULTIEQUAL (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8)]
[(ram, 0x4c4a68, 8) MULTIEQUAL (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8)]
[(register, 0x8, 4) MULTIEQUAL (unique, 0x100015ec, 4) , (unique, 0x100015f0, 4)]
[ ---  CBRANCH (ram, 0x483fec, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x10000693, 4) , (const, 0x0, 4), (unique, 0x10000693, 4) INT_AND (unique, 0xbc80, 4) , (const, 0x1, 4)]
[(register, 0x8, 4) INT_OR (register, 0x8, 4) , (const, 0x6, 4)]
[(ram, 0x4c4a68, 8) INDIRECT (ram, 0x4c4a68, 8) , (const, 0x1540, 4)]
[(ram, 0x4c6118, 8) INDIRECT (ram, 0x4c6118, 8) , (const, 0x1540, 4)]
[(ram, 0x4c7d80, 4) INDIRECT (ram, 0x4c7d80, 4) , (const, 0x1540, 4)]
[(ram, 0x4c7da0, 8) INDIRECT (ram, 0x4c7da0, 8) , (const, 0x1540, 4)]
[(ram, 0x4c87c0, 4) INDIRECT (ram, 0x4c87c0, 4) , (const, 0x1540, 4)]
[(ram, 0x4c87d0, 8) INDIRECT (ram, 0x4c87d0, 8) , (const, 0x1540, 4)]
[(ram, 0x4c8840, 4) INDIRECT (ram, 0x4c8840, 4) , (const, 0x1540, 4)]
[(ram, 0x4c8850, 8) INDIRECT (ram, 0x4c8850, 8) , (const, 0x1540, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001725, 8) , (register, 0x0, 4), (unique, 0x10001725, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x88, 8) , (const, 0x2, 8) , (const, 0x8, 8), (register, 0x0, 4) INT_OR (register, 0x8, 4) , (const, 0x4, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000172d, 8) , (const, 0x483ff1, 8), (unique, 0x1000172d, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xffffffffffffffc8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1543, 4)]
[(ram, 0x4c4a68, 8) INDIRECT (ram, 0x4c4a68, 8) , (const, 0x1543, 4), (ram, 0x4c4a68, 8) MULTIEQUAL (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8)]
[(ram, 0x4c6118, 8) INDIRECT (ram, 0x4c6118, 8) , (const, 0x1543, 4), (ram, 0x4c6118, 8) MULTIEQUAL (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8)]
[(ram, 0x4c7d80, 4) INDIRECT (ram, 0x4c7d80, 4) , (const, 0x1543, 4), (ram, 0x4c7d80, 4) MULTIEQUAL (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4)]
[(ram, 0x4c7da0, 8) INDIRECT (ram, 0x4c7da0, 8) , (const, 0x1543, 4), (ram, 0x4c7da0, 8) MULTIEQUAL (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8)]
[(ram, 0x4c87c0, 4) INDIRECT (ram, 0x4c87c0, 4) , (const, 0x1543, 4), (ram, 0x4c87c0, 4) MULTIEQUAL (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4)]
[(ram, 0x4c87d0, 8) INDIRECT (ram, 0x4c87d0, 8) , (const, 0x1543, 4), (ram, 0x4c87d0, 8) MULTIEQUAL (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8)]
[(ram, 0x4c8840, 4) INDIRECT (ram, 0x4c8840, 4) , (const, 0x1543, 4), (ram, 0x4c8840, 4) MULTIEQUAL (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4)]
[(ram, 0x4c8850, 8) INDIRECT (ram, 0x4c8850, 8) , (const, 0x1543, 4), (ram, 0x4c8850, 8) MULTIEQUAL (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x1543, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x1543, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x1543, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x1543, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x1543, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x1543, 4)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x1543, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x1543, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x1543, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x1543, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x1543, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x1543, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x1543, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x1543, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x1543, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x1543, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x1543, 4)]
[(stack, 0xffffffffffffff88, 16) INDIRECT (stack, 0xffffffffffffff88, 16) , (const, 0x1543, 4)]
[(stack, 0xffffffffffffff98, 16) INDIRECT (stack, 0xffffffffffffff98, 16) , (const, 0x1543, 4)]
[(stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0x1543, 4)]
[(stack, 0xffffffffffffffb8, 16) INDIRECT (stack, 0xffffffffffffffb8, 16) , (const, 0x1543, 4)]
[ ---  CBRANCH (ram, 0x484388, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x4562d0, 8) , (register, 0x38, 8) , (unique, 0x10001735, 8) , (register, 0x10, 4), (unique, 0x10001735, 8) CAST (register, 0x30, 8), (register, 0x10, 4) MULTIEQUAL (register, 0x10, 4) , (register, 0x8, 4)]
[(register, 0x8, 8) COPY (const, 0x4b0078, 8)]
[(ram, 0x4c4a68, 8) INDIRECT (ram, 0x4c4a68, 8) , (const, 0x1550, 4)]
[(ram, 0x4c6118, 8) INDIRECT (ram, 0x4c6118, 8) , (const, 0x1550, 4)]
[(ram, 0x4c7d80, 4) INDIRECT (ram, 0x4c7d80, 4) , (const, 0x1550, 4)]
[(ram, 0x4c7da0, 8) INDIRECT (ram, 0x4c7da0, 8) , (const, 0x1550, 4)]
[(ram, 0x4c87c0, 4) INDIRECT (ram, 0x4c87c0, 4) , (const, 0x1550, 4)]
[(ram, 0x4c87d0, 8) INDIRECT (ram, 0x4c87d0, 8) , (const, 0x1550, 4)]
[(ram, 0x4c8840, 4) INDIRECT (ram, 0x4c8840, 4) , (const, 0x1550, 4)]
[(ram, 0x4c8850, 8) INDIRECT (ram, 0x4c8850, 8) , (const, 0x1550, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0x1000173d, 8), (unique, 0x1000173d, 8) CAST (register, 0xa0, 8), (unique, 0x3100, 8) PTRADD (register, 0x88, 8) , (const, 0x3, 8) , (const, 0x8, 8)]
[(unique, 0xbd80, 8) CAST (unique, 0x10001745, 8), (unique, 0x10001745, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (register, 0xb8, 8) , (const, 0x55, 8) , (const, 0x8, 8)]
[(register, 0x10, 8) INT_ZEXT (unique, 0xbc00, 2), (unique, 0xbc00, 2) LOAD (const, 0x1b1, 4) , (unique, 0x1000174d, 8), (unique, 0x1000174d, 8) CAST (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (register, 0xb8, 8) , (const, 0x57, 8) , (const, 0x8, 8)]
[ ---  BRANCH (ram, 0x483f20, 1)]
[(stack, 0xffffffffffffffb8, 16) MULTIEQUAL (stack, 0xffffffffffffffb8, 16) , (stack, 0xffffffffffffffb8, 16)]
[(stack, 0xffffffffffffffa8, 16) MULTIEQUAL (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16)]
[(stack, 0xffffffffffffff98, 16) MULTIEQUAL (stack, 0xffffffffffffff98, 16) , (stack, 0xffffffffffffff98, 16)]
[(stack, 0xffffffffffffff88, 16) MULTIEQUAL (stack, 0xffffffffffffff88, 16) , (stack, 0xffffffffffffff88, 16)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(ram, 0x4c8850, 8) MULTIEQUAL (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8)]
[(ram, 0x4c8840, 4) MULTIEQUAL (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4)]
[(ram, 0x4c87d0, 8) MULTIEQUAL (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8)]
[(ram, 0x4c87c0, 4) MULTIEQUAL (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4)]
[(ram, 0x4c7da0, 8) MULTIEQUAL (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8)]
[(ram, 0x4c7d80, 4) MULTIEQUAL (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4)]
[(ram, 0x4c6118, 8) MULTIEQUAL (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8)]
[(ram, 0x4c4a68, 8) MULTIEQUAL (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x1000133c, 8) COPY (register, 0x20, 8), (register, 0x20, 8) MULTIEQUAL (unique, 0x1000132c, 8) , (register, 0x20, 8)]
[(unique, 0x100015cc, 8) COPY (register, 0xa0, 8), (register, 0xa0, 8) MULTIEQUAL (unique, 0x10001594, 8) , (register, 0x88, 8)]
[ ---  CBRANCH (ram, 0x48401d, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (register, 0x18, 8) , (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (register, 0x8, 8) , (unique, 0x10000ed0, 8) , (const, 0x8, 8), (unique, 0x10000ed0, 8) INT_MULT (register, 0x10, 8) , (const, 0x7, 8), (register, 0x18, 8) PTRADD (register, 0x18, 8) , (const, 0x7, 8) , (const, 0x8, 8), (register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (unique, 0xbd80, 8), (register, 0x10, 8) MULTIEQUAL (register, 0x10, 8) , (register, 0x10, 8)]
[(stack, 0xffffffffffffff10, 8) COPY (register, 0xa0, 8)]
[(stack, 0xffffffffffffff68, 4) SUBPIECE (stack, 0xffffffffffffff68, 8) , (const, 0x0, 8)]
[(stack, 0xffffffffffffff70, 4) SUBPIECE (stack, 0xffffffffffffff70, 8) , (const, 0x0, 8)]
[(unique, 0x1000134c, 8) COPY (register, 0x20, 8)]
[ ---  BRANCH (ram, 0x482abf, 1)]
[(stack, 0xffffffffffffffb8, 16) MULTIEQUAL (stack, 0xffffffffffffffb8, 16) , (stack, 0xffffffffffffffb8, 16) , (stack, 0xffffffffffffffb8, 16)]
[(stack, 0xffffffffffffffa8, 16) MULTIEQUAL (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16)]
[(stack, 0xffffffffffffff98, 16) MULTIEQUAL (stack, 0xffffffffffffff98, 16) , (stack, 0xffffffffffffff98, 16) , (stack, 0xffffffffffffff98, 16)]
[(stack, 0xffffffffffffff88, 16) MULTIEQUAL (stack, 0xffffffffffffff88, 16) , (stack, 0xffffffffffffff88, 16) , (stack, 0xffffffffffffff88, 16)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(ram, 0x4c8850, 8) MULTIEQUAL (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8)]
[(ram, 0x4c8840, 4) MULTIEQUAL (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4)]
[(ram, 0x4c87d0, 8) MULTIEQUAL (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8)]
[(ram, 0x4c87c0, 4) MULTIEQUAL (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4)]
[(ram, 0x4c7da0, 8) MULTIEQUAL (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8)]
[(ram, 0x4c7d80, 4) MULTIEQUAL (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4)]
[(ram, 0x4c6118, 8) MULTIEQUAL (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8)]
[(ram, 0x4c4a68, 8) MULTIEQUAL (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8)]
[(register, 0xa0, 4) MULTIEQUAL (register, 0xa0, 4) , (stack, 0xffffffffffffff68, 4) , (register, 0xa0, 4)]
[(register, 0xa8, 4) MULTIEQUAL (register, 0xa8, 4) , (stack, 0xffffffffffffff70, 4) , (register, 0xa8, 4)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x20, 8) MULTIEQUAL (unique, 0x10001344, 8) , (unique, 0x1000134c, 8) , (register, 0x20, 8)]
[(stack, 0xffffffffffffff38, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10001755, 8), (unique, 0x10001755, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x8, 8) , (const, 0x1, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb8, 8) , (const, 0xd, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x483748, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbe00, 8) , (const, 0x0, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (register, 0xb8, 8) , (const, 0x1f, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x482b38, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (register, 0xb8, 8) , (const, 0x52, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x482b38, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xa8, 4) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x482b38, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xa8, 4) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x4837e0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10001765, 8), (unique, 0x10001765, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x8, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x1000175d, 8), (unique, 0x1000175d, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x8, 8) , (const, 0x1, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb8, 8) , (const, 0xb, 8) , (const, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3200, 8) , (register, 0x10, 8), (unique, 0x3200, 8) PTRADD (register, 0xb8, 8) , (const, 0x7e, 8) , (const, 0x8, 8), (register, 0x10, 8) PTRADD (unique, 0xbd80, 8) , (unique, 0xbd80, 8) , (const, 0x1, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0xb8, 8)]
[(ram, 0x4c4a68, 8) INDIRECT (ram, 0x4c4a68, 8) , (const, 0x13f4, 4), (ram, 0x4c4a68, 8) INDIRECT (ram, 0x4c4a68, 8) , (const, 0x13ef, 4)]
[(ram, 0x4c6118, 8) INDIRECT (ram, 0x4c6118, 8) , (const, 0x13f4, 4), (ram, 0x4c6118, 8) INDIRECT (ram, 0x4c6118, 8) , (const, 0x13ef, 4)]
[(ram, 0x4c7d80, 4) INDIRECT (ram, 0x4c7d80, 4) , (const, 0x13f4, 4), (ram, 0x4c7d80, 4) INDIRECT (ram, 0x4c7d80, 4) , (const, 0x13ef, 4)]
[(ram, 0x4c7da0, 8) INDIRECT (ram, 0x4c7da0, 8) , (const, 0x13f4, 4), (ram, 0x4c7da0, 8) INDIRECT (ram, 0x4c7da0, 8) , (const, 0x13ef, 4)]
[(ram, 0x4c87c0, 4) INDIRECT (ram, 0x4c87c0, 4) , (const, 0x13f4, 4), (ram, 0x4c87c0, 4) INDIRECT (ram, 0x4c87c0, 4) , (const, 0x13ef, 4)]
[(ram, 0x4c87d0, 8) INDIRECT (ram, 0x4c87d0, 8) , (const, 0x13f4, 4), (ram, 0x4c87d0, 8) INDIRECT (ram, 0x4c87d0, 8) , (const, 0x13ef, 4)]
[(ram, 0x4c8840, 4) INDIRECT (ram, 0x4c8840, 4) , (const, 0x13f4, 4), (ram, 0x4c8840, 4) INDIRECT (ram, 0x4c8840, 4) , (const, 0x13ef, 4)]
[(ram, 0x4c8850, 8) INDIRECT (ram, 0x4c8850, 8) , (const, 0x13f4, 4), (ram, 0x4c8850, 8) INDIRECT (ram, 0x4c8850, 8) , (const, 0x13ef, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3200, 8) , (unique, 0x3100, 8), (unique, 0x3200, 8) PTRADD (register, 0xb8, 8) , (const, 0x7f, 8) , (const, 0x8, 8), (unique, 0x3100, 8) CAST (unique, 0x1000176d, 8), (unique, 0x1000176d, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x18, 8)]
[ ---  BRANCH (ram, 0x482af6, 1)]
[(ram, 0x4c4a68, 8) INDIRECT (ram, 0x4c4a68, 8) , (const, 0xab, 4), (ram, 0x4c4a68, 8) MULTIEQUAL (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8)]
[(ram, 0x4c6118, 8) INDIRECT (ram, 0x4c6118, 8) , (const, 0xab, 4), (ram, 0x4c6118, 8) MULTIEQUAL (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8)]
[(ram, 0x4c7d80, 4) INDIRECT (ram, 0x4c7d80, 4) , (const, 0xab, 4), (ram, 0x4c7d80, 4) MULTIEQUAL (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4)]
[(ram, 0x4c7da0, 8) INDIRECT (ram, 0x4c7da0, 8) , (const, 0xab, 4), (ram, 0x4c7da0, 8) MULTIEQUAL (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8)]
[(ram, 0x4c87c0, 4) INDIRECT (ram, 0x4c87c0, 4) , (const, 0xab, 4), (ram, 0x4c87c0, 4) MULTIEQUAL (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4)]
[(ram, 0x4c87d0, 8) INDIRECT (ram, 0x4c87d0, 8) , (const, 0xab, 4), (ram, 0x4c87d0, 8) MULTIEQUAL (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8)]
[(ram, 0x4c8840, 4) INDIRECT (ram, 0x4c8840, 4) , (const, 0xab, 4), (ram, 0x4c8840, 4) MULTIEQUAL (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4)]
[(ram, 0x4c8850, 8) INDIRECT (ram, 0x4c8850, 8) , (const, 0xab, 4), (ram, 0x4c8850, 8) MULTIEQUAL (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (register, 0xb8, 8), (unique, 0x3100, 8) CAST (unique, 0x10001775, 8), (unique, 0x10001775, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x484248, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffff30, 4) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x4842be, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x100007b8, 4) , (const, 0x0, 4), (unique, 0x100007b8, 4) INT_AND (ram, 0x4c7d80, 4) , (const, 0x4, 4)]
[(register, 0x10, 8) PTRSUB (const, 0x0, 8) , (const, 0x487100, 8)]
[ ---  CBRANCH (ram, 0x4842d3, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x10, 4) , (const, 0x0, 4), (register, 0x10, 4) INT_AND (ram, 0x4c7d80, 4) , (const, 0x1, 4)]
[(register, 0x10, 8) PTRSUB (const, 0x0, 8) , (const, 0x487580, 8)]
[(ram, 0x4c4a68, 8) INDIRECT (ram, 0x4c4a68, 8) , (const, 0x13df, 4)]
[(ram, 0x4c6118, 8) INDIRECT (ram, 0x4c6118, 8) , (const, 0x13df, 4)]
[(ram, 0x4c7d80, 4) INDIRECT (ram, 0x4c7d80, 4) , (const, 0x13df, 4)]
[(ram, 0x4c7da0, 8) INDIRECT (ram, 0x4c7da0, 8) , (const, 0x13df, 4)]
[(ram, 0x4c87c0, 4) INDIRECT (ram, 0x4c87c0, 4) , (const, 0x13df, 4)]
[(ram, 0x4c87d0, 8) INDIRECT (ram, 0x4c87d0, 8) , (const, 0x13df, 4)]
[(ram, 0x4c8840, 4) INDIRECT (ram, 0x4c8840, 4) , (const, 0x13df, 4)]
[(ram, 0x4c8850, 8) INDIRECT (ram, 0x4c8850, 8) , (const, 0x13df, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (register, 0x10, 8), (unique, 0x3100, 8) CAST (unique, 0x1000177d, 8), (unique, 0x1000177d, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x10, 8), (register, 0x10, 8) MULTIEQUAL (register, 0x10, 8) , (register, 0x10, 8)]
[ ---  BRANCH (ram, 0x48425e, 1)]
[(ram, 0x4c4a68, 8) INDIRECT (ram, 0x4c4a68, 8) , (const, 0x13b2, 4)]
[(ram, 0x4c6118, 8) INDIRECT (ram, 0x4c6118, 8) , (const, 0x13b2, 4)]
[(ram, 0x4c7d80, 4) INDIRECT (ram, 0x4c7d80, 4) , (const, 0x13b2, 4)]
[(ram, 0x4c7da0, 8) INDIRECT (ram, 0x4c7da0, 8) , (const, 0x13b2, 4)]
[(ram, 0x4c87c0, 4) INDIRECT (ram, 0x4c87c0, 4) , (const, 0x13b2, 4)]
[(ram, 0x4c87d0, 8) INDIRECT (ram, 0x4c87d0, 8) , (const, 0x13b2, 4)]
[(ram, 0x4c8840, 4) INDIRECT (ram, 0x4c8840, 4) , (const, 0x13b2, 4)]
[(ram, 0x4c8850, 8) INDIRECT (ram, 0x4c8850, 8) , (const, 0x13b2, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0x100009c8, 8), (unique, 0x100009c8, 8) PTRSUB (const, 0x0, 8) , (const, 0x486c80, 8), (unique, 0x3100, 8) CAST (unique, 0x10001785, 8), (unique, 0x10001785, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x10, 8)]
[(ram, 0x4c8840, 4) MULTIEQUAL (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4)]
[(ram, 0x4c87c0, 4) MULTIEQUAL (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4)]
[(ram, 0x4c7da0, 8) MULTIEQUAL (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8)]
[(ram, 0x4c7d80, 4) MULTIEQUAL (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4)]
[(ram, 0x4c6118, 8) MULTIEQUAL (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8)]
[(ram, 0x4c4a68, 8) MULTIEQUAL (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8)]
[(unique, 0x10001604, 8) COPY (ram, 0x4c8850, 8), (ram, 0x4c8850, 8) MULTIEQUAL (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8)]
[ ---  CBRANCH (ram, 0x482b23, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4c87d0, 8) , (const, 0x0, 8), (ram, 0x4c87d0, 8) MULTIEQUAL (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000178d, 8) , (const, 0x484276, 8), (unique, 0x1000178d, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x13c1, 4)]
[(ram, 0x4c4a68, 8) INDIRECT (ram, 0x4c4a68, 8) , (const, 0x13c1, 4)]
[(ram, 0x4c6118, 8) INDIRECT (ram, 0x4c6118, 8) , (const, 0x13c1, 4)]
[(ram, 0x4c7d80, 4) INDIRECT (ram, 0x4c7d80, 4) , (const, 0x13c1, 4)]
[(ram, 0x4c7da0, 8) INDIRECT (ram, 0x4c7da0, 8) , (const, 0x13c1, 4)]
[(ram, 0x4c87c0, 4) INDIRECT (ram, 0x4c87c0, 4) , (const, 0x13c1, 4)]
[(ram, 0x4c87d0, 8) INDIRECT (ram, 0x4c87d0, 8) , (const, 0x13c1, 4)]
[(ram, 0x4c8840, 4) INDIRECT (ram, 0x4c8840, 4) , (const, 0x13c1, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x13c1, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x13c0, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x13c1, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x13c0, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x13c1, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x13c0, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x13c1, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x13c0, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x13c1, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x13c0, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x13c1, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x13c0, 4)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x13c1, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x13c0, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x13c1, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x13c0, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x13c1, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x13c0, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x13c1, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x13c0, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x13c1, 4), (stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x13c0, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x13c1, 4), (stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x13c0, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x13c1, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x13c0, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x13c1, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x13c0, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x13c1, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x13c0, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x13c1, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x13c0, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x13c1, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x13c0, 4)]
[(stack, 0xffffffffffffff88, 16) INDIRECT (stack, 0xffffffffffffff88, 16) , (const, 0x13c1, 4), (stack, 0xffffffffffffff88, 16) INDIRECT (stack, 0xffffffffffffff88, 16) , (const, 0x13c0, 4)]
[(stack, 0xffffffffffffff98, 16) INDIRECT (stack, 0xffffffffffffff98, 16) , (const, 0x13c1, 4), (stack, 0xffffffffffffff98, 16) INDIRECT (stack, 0xffffffffffffff98, 16) , (const, 0x13c0, 4)]
[(stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0x13c1, 4), (stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0x13c0, 4)]
[(stack, 0xffffffffffffffb8, 16) INDIRECT (stack, 0xffffffffffffffb8, 16) , (const, 0x13c1, 4), (stack, 0xffffffffffffffb8, 16) INDIRECT (stack, 0xffffffffffffffb8, 16) , (const, 0x13c0, 4)]
[(unique, 0x1000160c, 8) COPY (ram, 0x4c8850, 8), (ram, 0x4c8850, 8) INDIRECT (ram, 0x4c8850, 8) , (const, 0x13c1, 4)]
[ ---  CBRANCH (ram, 0x482b23, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x485520, 8) , (ram, 0x4c87d0, 8) , (register, 0xb8, 8)]
[(unique, 0x10001614, 8) COPY (register, 0xb8, 8)]
[ ---  BRANCH (ram, 0x482b23, 1)]
[ ---  CBRANCH (ram, 0x483800, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4c7da0, 8) , (const, 0x0, 8)]
[(register, 0x10, 8) PTRSUB (const, 0x0, 8) , (const, 0x487800, 8)]
[ ---  CBRANCH (ram, 0x483819, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x10000829, 4) , (const, 0x0, 4), (unique, 0x10000829, 4) INT_AND (ram, 0x4c7d80, 4) , (const, 0x400000, 4)]
[(register, 0x10, 8) PTRSUB (const, 0x0, 8) , (const, 0x4878d0, 8)]
[(ram, 0x4c4a68, 8) INDIRECT (ram, 0x4c4a68, 8) , (const, 0x13a1, 4)]
[(ram, 0x4c6118, 8) INDIRECT (ram, 0x4c6118, 8) , (const, 0x13a1, 4)]
[(ram, 0x4c7d80, 4) INDIRECT (ram, 0x4c7d80, 4) , (const, 0x13a1, 4)]
[(ram, 0x4c7da0, 8) INDIRECT (ram, 0x4c7da0, 8) , (const, 0x13a1, 4)]
[(ram, 0x4c87c0, 4) INDIRECT (ram, 0x4c87c0, 4) , (const, 0x13a1, 4)]
[(ram, 0x4c87d0, 8) INDIRECT (ram, 0x4c87d0, 8) , (const, 0x13a1, 4)]
[(ram, 0x4c8840, 4) INDIRECT (ram, 0x4c8840, 4) , (const, 0x13a1, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (register, 0x10, 8), (unique, 0x3100, 8) CAST (unique, 0x10001795, 8), (unique, 0x10001795, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x10, 8), (register, 0x10, 8) MULTIEQUAL (register, 0x10, 8) , (register, 0x10, 8)]
[(unique, 0x100015fc, 8) COPY (ram, 0x4c8850, 8), (ram, 0x4c8850, 8) INDIRECT (ram, 0x4c8850, 8) , (const, 0x13a1, 4)]
[ ---  BRANCH (ram, 0x482b23, 1)]
[(ram, 0x4c4a68, 8) INDIRECT (ram, 0x4c4a68, 8) , (const, 0xc5, 4)]
[(ram, 0x4c6118, 8) INDIRECT (ram, 0x4c6118, 8) , (const, 0xc5, 4)]
[(ram, 0x4c7d80, 4) INDIRECT (ram, 0x4c7d80, 4) , (const, 0xc5, 4)]
[(ram, 0x4c7da0, 8) INDIRECT (ram, 0x4c7da0, 8) , (const, 0xc5, 4)]
[(ram, 0x4c87c0, 4) INDIRECT (ram, 0x4c87c0, 4) , (const, 0xc5, 4)]
[(ram, 0x4c87d0, 8) INDIRECT (ram, 0x4c87d0, 8) , (const, 0xc5, 4)]
[(ram, 0x4c8840, 4) INDIRECT (ram, 0x4c8840, 4) , (const, 0xc5, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0x100009d0, 8), (unique, 0x100009d0, 8) PTRSUB (const, 0x0, 8) , (const, 0x487780, 8), (unique, 0x3100, 8) CAST (unique, 0x1000179d, 8), (unique, 0x1000179d, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x10, 8)]
[(unique, 0x100015f4, 8) COPY (ram, 0x4c8850, 8), (ram, 0x4c8850, 8) INDIRECT (ram, 0x4c8850, 8) , (const, 0xc5, 4)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(ram, 0x4c8850, 8) MULTIEQUAL (unique, 0x100015f4, 8) , (unique, 0x100015fc, 8) , (unique, 0x10001604, 8) , (unique, 0x1000160c, 8) , (unique, 0x10001614, 8)]
[(ram, 0x4c8840, 4) MULTIEQUAL (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4)]
[(ram, 0x4c87d0, 8) MULTIEQUAL (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8)]
[(ram, 0x4c87c0, 4) MULTIEQUAL (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4)]
[(ram, 0x4c7da0, 8) MULTIEQUAL (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8)]
[(ram, 0x4c7d80, 4) MULTIEQUAL (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4)]
[(ram, 0x4c6118, 8) MULTIEQUAL (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8)]
[(ram, 0x4c4a68, 8) MULTIEQUAL (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x483761, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (register, 0xb8, 8) , (const, 0x52, 8) , (const, 0x8, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4c4a68, 8) INDIRECT (ram, 0x4c4a68, 8) , (const, 0x138e, 4), (ram, 0x4c4a68, 8) MULTIEQUAL (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8)]
[(ram, 0x4c6118, 8) INDIRECT (ram, 0x4c6118, 8) , (const, 0x138e, 4), (ram, 0x4c6118, 8) MULTIEQUAL (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8)]
[(ram, 0x4c7d80, 4) INDIRECT (ram, 0x4c7d80, 4) , (const, 0x138e, 4), (ram, 0x4c7d80, 4) MULTIEQUAL (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4)]
[(ram, 0x4c7da0, 8) INDIRECT (ram, 0x4c7da0, 8) , (const, 0x138e, 4), (ram, 0x4c7da0, 8) MULTIEQUAL (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8)]
[(ram, 0x4c87c0, 4) INDIRECT (ram, 0x4c87c0, 4) , (const, 0x138e, 4), (ram, 0x4c87c0, 4) MULTIEQUAL (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4)]
[(ram, 0x4c87d0, 8) INDIRECT (ram, 0x4c87d0, 8) , (const, 0x138e, 4), (ram, 0x4c87d0, 8) MULTIEQUAL (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8)]
[(ram, 0x4c8840, 4) INDIRECT (ram, 0x4c8840, 4) , (const, 0x138e, 4), (ram, 0x4c8840, 4) MULTIEQUAL (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4)]
[(ram, 0x4c8850, 8) INDIRECT (ram, 0x4c8850, 8) , (const, 0x138e, 4), (ram, 0x4c8850, 8) MULTIEQUAL (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100017ad, 8) , (unique, 0x100009e8, 8), (unique, 0x100017ad, 8) CAST (unique, 0x3400, 8), (unique, 0x100009e8, 8) PTRSUB (const, 0x0, 8) , (const, 0x488920, 8), (unique, 0x3400, 8) PTRADD (unique, 0xbd80, 8) , (unique, 0xbd80, 8) , (const, 0x1, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0xb8, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x100017a5, 8), (unique, 0x100017a5, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x8, 8) , (const, 0x1, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8)]
[ ---  BRANCH (ram, 0x482b38, 1)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(ram, 0x4c8850, 8) MULTIEQUAL (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8)]
[(ram, 0x4c8840, 4) MULTIEQUAL (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4)]
[(ram, 0x4c87d0, 8) MULTIEQUAL (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8)]
[(ram, 0x4c87c0, 4) MULTIEQUAL (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4)]
[(ram, 0x4c7da0, 8) MULTIEQUAL (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8)]
[(ram, 0x4c7d80, 4) MULTIEQUAL (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4)]
[(ram, 0x4c6118, 8) MULTIEQUAL (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8)]
[(ram, 0x4c4a68, 8) MULTIEQUAL (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(stack, 0xffffffffffffff88, 16) COPY (const, 0x0, 16)]
[(stack, 0xffffffffffffff98, 16) COPY (const, 0x0, 16)]
[(stack, 0xffffffffffffffa8, 16) COPY (const, 0x0, 16)]
[(stack, 0xffffffffffffffb8, 16) COPY (const, 0x0, 16)]
[ ---  CBRANCH (ram, 0x483830, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb8, 8) , (const, 0xf, 8) , (const, 0x8, 8)]
[(register, 0x38, 8) COPY (const, 0x0, 8)]
[(register, 0x10, 8) COPY (const, 0x0, 8)]
[(register, 0x8, 8) COPY (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x482b92, 1)]
[(unique, 0x3400, 8) INT_ADD (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x100017bd, 8), (unique, 0x100017bd, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x8, 8) , (const, 0x1, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (register, 0xb8, 8) , (const, 0x10, 8) , (const, 0x8, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x100017b5, 8), (unique, 0x100017b5, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x8, 8) , (const, 0x1, 8)]
[(stack, 0xffffffffffffff88, 16) INT_ADD (unique, 0x100011cc, 16) , (unique, 0xbd80, 8), (unique, 0x100011cc, 16) INT_LEFT (unique, 0x100011bc, 16) , (const, 0x40, 16), (unique, 0x100011bc, 16) INT_SEXT (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x100017bd, 8), (unique, 0x100017bd, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x8, 8) , (const, 0x1, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (register, 0xb8, 8) , (const, 0x10, 8) , (const, 0x8, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x100017b5, 8), (unique, 0x100017b5, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x8, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x482b92, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (register, 0xb8, 8) , (const, 0x31, 8) , (const, 0x8, 8)]
[(stack, 0xffffffffffffff98, 16) INT_ZEXT (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x100017c5, 8), (unique, 0x100017c5, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x8, 8) , (const, 0x1, 8)]
[(stack, 0xffffffffffffff98, 16) MULTIEQUAL (stack, 0xffffffffffffff98, 16) , (stack, 0xffffffffffffff98, 16) , (stack, 0xffffffffffffff98, 16)]
[(stack, 0xffffffffffffff88, 16) MULTIEQUAL (stack, 0xffffffffffffff88, 16) , (stack, 0xffffffffffffff88, 16) , (stack, 0xffffffffffffff88, 16)]
[(register, 0x38, 8) MULTIEQUAL (unique, 0x3400, 8) , (unique, 0x3400, 8) , (register, 0x38, 8)]
[(register, 0x10, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8) , (register, 0x10, 8)]
[(register, 0x8, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8) , (register, 0x8, 8)]
[ ---  CBRANCH (ram, 0x482be7, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbe00, 8) , (const, 0x0, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (register, 0xb8, 8) , (const, 0x1c, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x482bc3, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x3400, 8) , (register, 0x38, 8), (unique, 0x3400, 8) INT_ADD (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x100017d5, 8), (unique, 0x100017d5, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x8, 8) , (const, 0x1, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x100017cd, 8), (unique, 0x100017cd, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x8, 8) , (const, 0x1, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb8, 8) , (const, 0xa, 8) , (const, 0x8, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (register, 0xb8, 8) , (const, 0x1f, 8) , (const, 0x8, 8)]
[(stack, 0xffffffffffffff88, 16) INT_ADD (unique, 0x100011ec, 16) , (unique, 0x100017dd, 8), (unique, 0x100017dd, 8) CAST (stack, 0xffffffffffffff88, 8), (unique, 0x100011ec, 16) INT_LEFT (unique, 0x100011dc, 16) , (const, 0x40, 16), (unique, 0x100011dc, 16) INT_SEXT (register, 0x10, 8), (stack, 0xffffffffffffff88, 8) SUBPIECE (stack, 0xffffffffffffff88, 16) , (const, 0x0, 8), (register, 0x10, 8) INT_SUB (register, 0x10, 8) , (unique, 0xbd80, 8)]
[(unique, 0x3400, 8) INT_ADD (register, 0x10, 8) , (register, 0x8, 8), (register, 0x10, 8) INT_SUB (register, 0x10, 8) , (unique, 0xbd80, 8)]
[(stack, 0xffffffffffffff88, 16) MULTIEQUAL (stack, 0xffffffffffffff88, 16) , (stack, 0xffffffffffffff88, 16)]
[(register, 0x38, 8) MULTIEQUAL (register, 0x38, 8) , (unique, 0x3400, 8)]
[(register, 0x10, 8) MULTIEQUAL (register, 0x10, 8) , (register, 0x10, 8)]
[ ---  CBRANCH (ram, 0x482bd1, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xa8, 4) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x483822, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (register, 0x38, 8)]
[(stack, 0xffffffffffffffb8, 16) INT_LEFT (unique, 0x1000088f, 16) , (const, 0x40, 4), (unique, 0x1000088f, 16) INT_ZEXT (register, 0xa8, 4)]
[(stack, 0xffffffffffffffa8, 16) INT_ADD (unique, 0x1000120c, 16) , (unique, 0xbd80, 8), (unique, 0x1000120c, 16) INT_LEFT (unique, 0x100011fc, 16) , (const, 0x40, 16), (unique, 0x100011fc, 16) INT_SEXT (unique, 0xbd80, 8)]
[(stack, 0xffffffffffffff88, 16) INT_ADD (unique, 0x1000122c, 16) , (unique, 0x100017e5, 8), (unique, 0x100017e5, 8) CAST (stack, 0xffffffffffffff88, 8), (unique, 0x1000122c, 16) INT_LEFT (unique, 0x1000121c, 16) , (const, 0x40, 16), (unique, 0x1000121c, 16) INT_SEXT (register, 0x10, 8), (stack, 0xffffffffffffff88, 8) SUBPIECE (stack, 0xffffffffffffff88, 16) , (const, 0x0, 8), (register, 0x10, 8) INT_ADD (register, 0x10, 8) , (unique, 0xbd80, 8)]
[ ---  BRANCH (ram, 0x482be7, 1)]
[(stack, 0xffffffffffffffb8, 16) MULTIEQUAL (stack, 0xffffffffffffffb8, 16) , (stack, 0xffffffffffffffb8, 16) , (stack, 0xffffffffffffffb8, 16)]
[(stack, 0xffffffffffffffa8, 16) MULTIEQUAL (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16)]
[(stack, 0xffffffffffffff88, 16) MULTIEQUAL (stack, 0xffffffffffffff88, 16) , (stack, 0xffffffffffffff88, 16) , (stack, 0xffffffffffffff88, 16)]
[(stack, 0xffffffffffffff48, 8) COPY (unique, 0x100017ed, 8), (unique, 0x100017ed, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff34, 4) COPY (register, 0xa0, 4), (register, 0xa0, 4) INT_AND (register, 0xa0, 4) , (const, 0x2000000, 4)]
[(stack, 0xffffffffffffff18, 8) COPY (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffc8, 8)]
[(stack, 0xffffffffffffffb8, 16) MULTIEQUAL (stack, 0xffffffffffffffb8, 16) , (stack, 0xffffffffffffffb8, 16)]
[(stack, 0xffffffffffffffa8, 16) MULTIEQUAL (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16)]
[(stack, 0xffffffffffffff98, 16) MULTIEQUAL (stack, 0xffffffffffffff98, 16) , (stack, 0xffffffffffffff98, 16)]
[(stack, 0xffffffffffffff88, 16) MULTIEQUAL (stack, 0xffffffffffffff88, 16) , (stack, 0xffffffffffffff88, 16)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(ram, 0x4c8850, 8) MULTIEQUAL (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8)]
[(ram, 0x4c8840, 4) MULTIEQUAL (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4)]
[(ram, 0x4c87d0, 8) MULTIEQUAL (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8)]
[(ram, 0x4c87c0, 4) MULTIEQUAL (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4)]
[(ram, 0x4c7da0, 8) MULTIEQUAL (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8)]
[(ram, 0x4c7d80, 4) MULTIEQUAL (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4)]
[(ram, 0x4c6118, 8) MULTIEQUAL (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8)]
[(ram, 0x4c4a68, 8) MULTIEQUAL (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0xbd80, 8) CAST (unique, 0x100017f5, 8), (unique, 0x100017f5, 8) LOAD (const, 0x1b1, 4) , (register, 0x98, 8), (register, 0x98, 8) MULTIEQUAL (register, 0xb8, 8) , (register, 0x98, 8)]
[(stack, 0xffffffffffffff70, 8) COPY (register, 0x30, 8), (register, 0x30, 8) CAST (unique, 0x1000181d, 8), (unique, 0x1000181d, 8) INT_ADD (unique, 0x1000180d, 8) , (unique, 0x10001815, 8), (unique, 0x10001815, 8) CAST (unique, 0xbd80, 8), (unique, 0x1000180d, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (stack, 0xffffffffffffff48, 8) , (const, 0x1, 8) , (const, 0x8, 8), (unique, 0xbd80, 8) CAST (unique, 0x100017fd, 8), (unique, 0x100017fd, 8) LOAD (const, 0x1b1, 4) , (stack, 0xffffffffffffff48, 8), (stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[ ---  CBRANCH (ram, 0x482da0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10001805, 8), (unique, 0x10001805, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (stack, 0xffffffffffffff48, 8) , (const, 0x3, 8) , (const, 0x8, 8), (stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(unique, 0x100012ac, 8) COPY (unique, 0xbd80, 8)]
[(unique, 0x100012fc, 8) COPY (register, 0x18, 8), (register, 0x18, 8) COPY (const, 0x0, 8)]
[(unique, 0x100015a4, 8) COPY (register, 0xa0, 8), (register, 0xa0, 8) COPY (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x482c7c, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (unique, 0xbd80, 8) , (register, 0x30, 8)]
[(ram, 0x4c8850, 8) MULTIEQUAL (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8)]
[(ram, 0x4c8840, 4) MULTIEQUAL (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4)]
[(ram, 0x4c87d0, 8) MULTIEQUAL (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8)]
[(ram, 0x4c87c0, 4) MULTIEQUAL (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4)]
[(ram, 0x4c7da0, 8) MULTIEQUAL (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8)]
[(ram, 0x4c7d80, 4) MULTIEQUAL (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4)]
[(ram, 0x4c6118, 8) MULTIEQUAL (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8)]
[(ram, 0x4c4a68, 8) MULTIEQUAL (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8)]
[(register, 0xa0, 8) MULTIEQUAL (unique, 0x100015a4, 8) , (unique, 0x1000159c, 8) , (register, 0xa0, 8)]
[(register, 0x18, 8) MULTIEQUAL (unique, 0x100012fc, 8) , (unique, 0x10001304, 8) , (register, 0x18, 8)]
[(register, 0x8, 8) INT_AND (unique, 0x10001825, 8) , (const, 0xffffffff, 8), (unique, 0x10001825, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x8, 8), (register, 0x0, 8) COPY (unique, 0x100012c4, 8), (unique, 0x100012c4, 8) MULTIEQUAL (unique, 0x100012ac, 8) , (unique, 0x100012b4, 8) , (unique, 0x100012bc, 8)]
[ ---  CBRANCH (ram, 0x482c50, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x30, 4) , (const, 0x25, 4), (register, 0x30, 4) SUBPIECE (unique, 0xbd80, 8) , (const, 0x0, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x8, 8), (register, 0x0, 8) COPY (unique, 0x100012c4, 8), (unique, 0x100012c4, 8) MULTIEQUAL (unique, 0x100012ac, 8) , (unique, 0x100012b4, 8) , (unique, 0x100012bc, 8)]
[(unique, 0x1000159c, 8) COPY (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x482c73, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x18, 8) , (const, 0x0, 8)]
[(unique, 0x100012b4, 8) COPY (register, 0x0, 8), (register, 0x0, 8) PTRADD (register, 0x0, 8) , (const, 0x3, 8) , (const, 0x8, 8)]
[(unique, 0x10001304, 8) COPY (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x482c7c, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (register, 0x0, 8) , (register, 0x30, 8), (register, 0x0, 8) PTRADD (register, 0x0, 8) , (const, 0x3, 8) , (const, 0x8, 8)]
[(register, 0x10, 8) CAST (unique, 0x10001835, 8), (unique, 0x10001835, 8) PTRADD (unique, 0xbd80, 8) , (unique, 0x1000182d, 8) , (const, 0x1, 8), (unique, 0x1000182d, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x482d78, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x8, 8) , (const, 0x7, 8)]
[ ---  CBRANCH (ram, 0x48406f, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x8, 8) , (const, 0x24, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000183d, 8) , (const, 0x48407c, 8), (unique, 0x1000183d, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x4ce, 4)]
[(ram, 0x4c4a68, 8) INDIRECT (ram, 0x4c4a68, 8) , (const, 0x4ce, 4)]
[(ram, 0x4c6118, 8) INDIRECT (ram, 0x4c6118, 8) , (const, 0x4ce, 4)]
[(ram, 0x4c7d80, 4) INDIRECT (ram, 0x4c7d80, 4) , (const, 0x4ce, 4)]
[(ram, 0x4c7da0, 8) INDIRECT (ram, 0x4c7da0, 8) , (const, 0x4ce, 4)]
[(ram, 0x4c87c0, 4) INDIRECT (ram, 0x4c87c0, 4) , (const, 0x4ce, 4)]
[(ram, 0x4c87d0, 8) INDIRECT (ram, 0x4c87d0, 8) , (const, 0x4ce, 4)]
[(ram, 0x4c8840, 4) INDIRECT (ram, 0x4c8840, 4) , (const, 0x4ce, 4)]
[(ram, 0x4c8850, 8) INDIRECT (ram, 0x4c8850, 8) , (const, 0x4ce, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x4ce, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x4cd, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x4ce, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x4cd, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x4ce, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x4cd, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x4ce, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x4cd, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x4ce, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x4cd, 4)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x4ce, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x4cd, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x4ce, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x4cd, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x4ce, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x4cd, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x4ce, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x4cd, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x4ce, 4), (stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x4cd, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x4ce, 4), (stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x4cd, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x4ce, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x4cd, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x4ce, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x4cd, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x4ce, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x4cd, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x4ce, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x4cd, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x4ce, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x4cd, 4)]
[(stack, 0xffffffffffffff88, 16) INDIRECT (stack, 0xffffffffffffff88, 16) , (const, 0x4ce, 4), (stack, 0xffffffffffffff88, 16) INDIRECT (stack, 0xffffffffffffff88, 16) , (const, 0x4cd, 4)]
[(stack, 0xffffffffffffff98, 16) INDIRECT (stack, 0xffffffffffffff98, 16) , (const, 0x4ce, 4), (stack, 0xffffffffffffff98, 16) INDIRECT (stack, 0xffffffffffffff98, 16) , (const, 0x4cd, 4)]
[(stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0x4ce, 4), (stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0x4cd, 4)]
[(stack, 0xffffffffffffffb8, 16) INDIRECT (stack, 0xffffffffffffffb8, 16) , (const, 0x4ce, 4), (stack, 0xffffffffffffffb8, 16) INDIRECT (stack, 0xffffffffffffffb8, 16) , (const, 0x4cd, 4)]
[ ---  CALL (ram, 0x482980, 8) , (register, 0x98, 8) , (unique, 0xbd80, 8) , (const, 0x1, 8)]
[(unique, 0x1000131c, 8) COPY (stack, 0xffffffffffffff10, 8), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x4ce, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x4cd, 4)]
[(unique, 0x10001634, 8) COPY (unique, 0xbd80, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0x10001845, 8), (unique, 0x10001845, 8) CAST (register, 0x0, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[(ram, 0x4c4a68, 8) INDIRECT (ram, 0x4c4a68, 8) , (const, 0x4c8, 4), (ram, 0x4c4a68, 8) INDIRECT (ram, 0x4c4a68, 8) , (const, 0x4b9, 4)]
[(ram, 0x4c6118, 8) INDIRECT (ram, 0x4c6118, 8) , (const, 0x4c8, 4), (ram, 0x4c6118, 8) INDIRECT (ram, 0x4c6118, 8) , (const, 0x4b9, 4)]
[(ram, 0x4c7d80, 4) INDIRECT (ram, 0x4c7d80, 4) , (const, 0x4c8, 4), (ram, 0x4c7d80, 4) INDIRECT (ram, 0x4c7d80, 4) , (const, 0x4b9, 4)]
[(ram, 0x4c7da0, 8) INDIRECT (ram, 0x4c7da0, 8) , (const, 0x4c8, 4), (ram, 0x4c7da0, 8) INDIRECT (ram, 0x4c7da0, 8) , (const, 0x4b9, 4)]
[(ram, 0x4c87c0, 4) INDIRECT (ram, 0x4c87c0, 4) , (const, 0x4c8, 4), (ram, 0x4c87c0, 4) INDIRECT (ram, 0x4c87c0, 4) , (const, 0x4b9, 4)]
[(ram, 0x4c87d0, 8) INDIRECT (ram, 0x4c87d0, 8) , (const, 0x4c8, 4), (ram, 0x4c87d0, 8) INDIRECT (ram, 0x4c87d0, 8) , (const, 0x4b9, 4)]
[(ram, 0x4c8840, 4) INDIRECT (ram, 0x4c8840, 4) , (const, 0x4c8, 4), (ram, 0x4c8840, 4) INDIRECT (ram, 0x4c8840, 4) , (const, 0x4b9, 4)]
[(ram, 0x4c8850, 8) INDIRECT (ram, 0x4c8850, 8) , (const, 0x4c8, 4), (ram, 0x4c8850, 8) INDIRECT (ram, 0x4c8850, 8) , (const, 0x4b9, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x10, 8) , (register, 0x8, 8), (register, 0x8, 8) PTRADD (unique, 0xbd80, 8) , (unique, 0xbd80, 8) , (const, 0x1, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x1000184d, 8), (unique, 0x1000184d, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x8, 8) , (const, 0x1, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x98, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (register, 0x98, 8) , (const, 0x53, 8) , (const, 0x8, 8)]
[ ---  BRANCH (ram, 0x482c73, 1)]
[ ---  CBRANCH (ram, 0x483640, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (register, 0x98, 8) , (const, 0x7e, 8) , (const, 0x8, 8)]
[(ram, 0x4c4a68, 8) INDIRECT (ram, 0x4c4a68, 8) , (const, 0x4a5, 4)]
[(ram, 0x4c6118, 8) INDIRECT (ram, 0x4c6118, 8) , (const, 0x4a5, 4)]
[(ram, 0x4c7d80, 4) INDIRECT (ram, 0x4c7d80, 4) , (const, 0x4a5, 4)]
[(ram, 0x4c7da0, 8) INDIRECT (ram, 0x4c7da0, 8) , (const, 0x4a5, 4)]
[(ram, 0x4c87c0, 4) INDIRECT (ram, 0x4c87c0, 4) , (const, 0x4a5, 4)]
[(ram, 0x4c87d0, 8) INDIRECT (ram, 0x4c87d0, 8) , (const, 0x4a5, 4)]
[(ram, 0x4c8840, 4) INDIRECT (ram, 0x4c8840, 4) , (const, 0x4a5, 4)]
[(ram, 0x4c8850, 8) INDIRECT (ram, 0x4c8850, 8) , (const, 0x4a5, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x10, 8) , (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (unique, 0xbd80, 8) , (unique, 0x3300, 8) , (const, 0x1, 8), (unique, 0x3300, 8) INT_MULT (register, 0x30, 8) , (const, 0x2, 8), (register, 0x30, 8) CAST (unique, 0x10001865, 8), (unique, 0x10001865, 8) INT_SUB (unique, 0x10001855, 8) , (unique, 0x1000185d, 8), (unique, 0x1000185d, 8) CAST (unique, 0xbd80, 8), (unique, 0x10001855, 8) CAST (register, 0x10, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (register, 0x98, 8) , (const, 0x7f, 8) , (const, 0x8, 8)]
[ ---  BRANCH (ram, 0x482c73, 1)]
[(ram, 0x4c4a68, 8) INDIRECT (ram, 0x4c4a68, 8) , (const, 0x489, 4)]
[(ram, 0x4c6118, 8) INDIRECT (ram, 0x4c6118, 8) , (const, 0x489, 4)]
[(ram, 0x4c7d80, 4) INDIRECT (ram, 0x4c7d80, 4) , (const, 0x489, 4)]
[(ram, 0x4c7da0, 8) INDIRECT (ram, 0x4c7da0, 8) , (const, 0x489, 4)]
[(ram, 0x4c87c0, 4) INDIRECT (ram, 0x4c87c0, 4) , (const, 0x489, 4)]
[(ram, 0x4c87d0, 8) INDIRECT (ram, 0x4c87d0, 8) , (const, 0x489, 4)]
[(ram, 0x4c8840, 4) INDIRECT (ram, 0x4c8840, 4) , (const, 0x489, 4)]
[(ram, 0x4c8850, 8) INDIRECT (ram, 0x4c8850, 8) , (const, 0x489, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x10, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) PTRADD (unique, 0xbd80, 8) , (unique, 0x1000186d, 8) , (const, 0x1, 8), (unique, 0x1000186d, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x10, 8)]
[(ram, 0x4c8850, 8) MULTIEQUAL (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8)]
[(ram, 0x4c8840, 4) MULTIEQUAL (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4)]
[(ram, 0x4c87d0, 8) MULTIEQUAL (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8)]
[(ram, 0x4c87c0, 4) MULTIEQUAL (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4)]
[(ram, 0x4c7da0, 8) MULTIEQUAL (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8)]
[(ram, 0x4c7d80, 4) MULTIEQUAL (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4)]
[(ram, 0x4c6118, 8) MULTIEQUAL (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8)]
[(ram, 0x4c4a68, 8) MULTIEQUAL (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8)]
[(unique, 0x100012bc, 8) COPY (register, 0x0, 8), (register, 0x0, 8) PTRADD (register, 0x0, 8) , (const, 0x3, 8) , (const, 0x8, 8)]
[(unique, 0x1000130c, 8) COPY (register, 0x18, 8)]
[(unique, 0x100015b4, 8) COPY (register, 0xa0, 8), (register, 0xa0, 8) MULTIEQUAL (unique, 0x1000159c, 8) , (register, 0xa0, 8) , (register, 0xa0, 8) , (register, 0xa0, 8)]
[ ---  CBRANCH (ram, 0x482ca0, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESSEQUAL (register, 0x30, 8) , (register, 0x0, 8), (register, 0x0, 8) PTRADD (register, 0x0, 8) , (const, 0x3, 8) , (const, 0x8, 8)]
[(ram, 0x4c8850, 8) MULTIEQUAL (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8)]
[(ram, 0x4c8840, 4) MULTIEQUAL (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4)]
[(ram, 0x4c87d0, 8) MULTIEQUAL (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8)]
[(ram, 0x4c87c0, 4) MULTIEQUAL (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4)]
[(ram, 0x4c7da0, 8) MULTIEQUAL (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8)]
[(ram, 0x4c7d80, 4) MULTIEQUAL (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4)]
[(ram, 0x4c6118, 8) MULTIEQUAL (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8)]
[(ram, 0x4c4a68, 8) MULTIEQUAL (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8)]
[(register, 0xa0, 8) MULTIEQUAL (unique, 0x100015b4, 8) , (unique, 0x1000159c, 8)]
[ ---  CBRANCH (ram, 0x482ce5, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x18, 8) , (const, 0x0, 8), (register, 0x18, 8) MULTIEQUAL (unique, 0x1000130c, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x482ce5, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESSEQUAL (register, 0x18, 8) , (register, 0xa0, 8)]
[(unique, 0x100012e4, 8) COPY (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x48367b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffff34, 4) , (const, 0x0, 4)]
[(ram, 0x4c8850, 8) MULTIEQUAL (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8)]
[(ram, 0x4c8840, 4) MULTIEQUAL (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4)]
[(ram, 0x4c87d0, 8) MULTIEQUAL (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8)]
[(ram, 0x4c87c0, 4) MULTIEQUAL (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4)]
[(ram, 0x4c7da0, 8) MULTIEQUAL (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8)]
[(ram, 0x4c7d80, 4) MULTIEQUAL (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4)]
[(ram, 0x4c6118, 8) MULTIEQUAL (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8)]
[(ram, 0x4c4a68, 8) MULTIEQUAL (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8)]
[ ---  CBRANCH (ram, 0x483660, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd00, 4) , (const, 0x25, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10001875, 8), (unique, 0x10001875, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x1, 8) , (const, 0x8, 8), (register, 0x18, 8) MULTIEQUAL (unique, 0x100012e4, 8) , (unique, 0x100012ec, 8) , (unique, 0x100012f4, 8)]
[(ram, 0x4c4a68, 8) INDIRECT (ram, 0x4c4a68, 8) , (const, 0x440, 4)]
[(ram, 0x4c6118, 8) INDIRECT (ram, 0x4c6118, 8) , (const, 0x440, 4)]
[(ram, 0x4c7d80, 4) INDIRECT (ram, 0x4c7d80, 4) , (const, 0x440, 4)]
[(ram, 0x4c7da0, 8) INDIRECT (ram, 0x4c7da0, 8) , (const, 0x440, 4)]
[(ram, 0x4c87c0, 4) INDIRECT (ram, 0x4c87c0, 4) , (const, 0x440, 4)]
[(ram, 0x4c87d0, 8) INDIRECT (ram, 0x4c87d0, 8) , (const, 0x440, 4)]
[(ram, 0x4c8840, 4) INDIRECT (ram, 0x4c8840, 4) , (const, 0x440, 4)]
[(ram, 0x4c8850, 8) INDIRECT (ram, 0x4c8850, 8) , (const, 0x440, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000188d, 8) , (register, 0x0, 8), (unique, 0x1000188d, 8) CAST (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (unique, 0xbd80, 8) , (unique, 0x10001885, 8) , (const, 0x1, 8), (unique, 0x10001885, 8) CAST (unique, 0xbd80, 8), (register, 0x0, 8) PTRADD (unique, 0xbd80, 8) , (unique, 0x1000187d, 8) , (const, 0x1, 8), (unique, 0x1000187d, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x2, 8) , (const, 0x8, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x98, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x18, 8)]
[(unique, 0x100012f4, 8) COPY (register, 0x18, 8), (register, 0x18, 8) PTRADD (register, 0x18, 8) , (const, 0x3, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x482ce5, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESSEQUAL (register, 0x18, 8) , (register, 0xa0, 8), (register, 0x18, 8) PTRADD (register, 0x18, 8) , (const, 0x3, 8) , (const, 0x8, 8)]
[(unique, 0x100012ec, 8) COPY (register, 0x18, 8), (register, 0x18, 8) PTRADD (register, 0x18, 8) , (const, 0x3, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x48367b, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (register, 0xa0, 8) , (register, 0x18, 8), (register, 0x18, 8) PTRADD (register, 0x18, 8) , (const, 0x3, 8) , (const, 0x8, 8)]
[(stack, 0xffffffffffffffb8, 16) MULTIEQUAL (stack, 0xffffffffffffffb8, 16) , (stack, 0xffffffffffffffb8, 16)]
[(stack, 0xffffffffffffffa8, 16) MULTIEQUAL (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16)]
[(stack, 0xffffffffffffff98, 16) MULTIEQUAL (stack, 0xffffffffffffff98, 16) , (stack, 0xffffffffffffff98, 16)]
[(stack, 0xffffffffffffff88, 16) MULTIEQUAL (stack, 0xffffffffffffff88, 16) , (stack, 0xffffffffffffff88, 16)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(ram, 0x4c8850, 8) MULTIEQUAL (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8)]
[(ram, 0x4c8840, 4) MULTIEQUAL (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4)]
[(ram, 0x4c87d0, 8) MULTIEQUAL (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8)]
[(ram, 0x4c87c0, 4) MULTIEQUAL (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4)]
[(ram, 0x4c7da0, 8) MULTIEQUAL (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8)]
[(ram, 0x4c7d80, 4) MULTIEQUAL (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4)]
[(ram, 0x4c6118, 8) MULTIEQUAL (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8)]
[(ram, 0x4c4a68, 8) MULTIEQUAL (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x482cd9, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd00, 4) , (const, 0x25, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10001895, 8), (unique, 0x10001895, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x1, 8) , (const, 0x8, 8), (register, 0x18, 8) MULTIEQUAL (register, 0x18, 8) , (register, 0x18, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100018a5, 8) , (const, 0x482cd3, 8), (unique, 0x100018a5, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x3df, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x3df, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x3de, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x3df, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x3de, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x3df, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x3de, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x3df, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x3de, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x3df, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x3de, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x3df, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x3de, 4)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x3df, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x3de, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x3df, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x3de, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x3df, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x3de, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x3df, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x3de, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x3df, 4), (stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x3de, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x3df, 4), (stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x3de, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x3df, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x3de, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x3df, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x3de, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x3df, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x3de, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x3df, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x3de, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x3df, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x3de, 4)]
[(stack, 0xffffffffffffff88, 16) INDIRECT (stack, 0xffffffffffffff88, 16) , (const, 0x3df, 4), (stack, 0xffffffffffffff88, 16) INDIRECT (stack, 0xffffffffffffff88, 16) , (const, 0x3de, 4)]
[(stack, 0xffffffffffffff98, 16) INDIRECT (stack, 0xffffffffffffff98, 16) , (const, 0x3df, 4), (stack, 0xffffffffffffff98, 16) INDIRECT (stack, 0xffffffffffffff98, 16) , (const, 0x3de, 4)]
[(stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0x3df, 4), (stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0x3de, 4)]
[(stack, 0xffffffffffffffb8, 16) INDIRECT (stack, 0xffffffffffffffb8, 16) , (const, 0x3df, 4), (stack, 0xffffffffffffffb8, 16) INDIRECT (stack, 0xffffffffffffffb8, 16) , (const, 0x3de, 4)]
[(ram, 0x4c4a68, 8) INDIRECT (ram, 0x4c4a68, 8) , (const, 0x3ea, 4), (ram, 0x4c4a68, 8) INDIRECT (ram, 0x4c4a68, 8) , (const, 0x3df, 4)]
[(ram, 0x4c6118, 8) INDIRECT (ram, 0x4c6118, 8) , (const, 0x3ea, 4), (ram, 0x4c6118, 8) INDIRECT (ram, 0x4c6118, 8) , (const, 0x3df, 4)]
[(ram, 0x4c7d80, 4) INDIRECT (ram, 0x4c7d80, 4) , (const, 0x3ea, 4), (ram, 0x4c7d80, 4) INDIRECT (ram, 0x4c7d80, 4) , (const, 0x3df, 4)]
[(ram, 0x4c7da0, 8) INDIRECT (ram, 0x4c7da0, 8) , (const, 0x3ea, 4), (ram, 0x4c7da0, 8) INDIRECT (ram, 0x4c7da0, 8) , (const, 0x3df, 4)]
[(ram, 0x4c87c0, 4) INDIRECT (ram, 0x4c87c0, 4) , (const, 0x3ea, 4), (ram, 0x4c87c0, 4) INDIRECT (ram, 0x4c87c0, 4) , (const, 0x3df, 4)]
[(ram, 0x4c87d0, 8) INDIRECT (ram, 0x4c87d0, 8) , (const, 0x3ea, 4), (ram, 0x4c87d0, 8) INDIRECT (ram, 0x4c87d0, 8) , (const, 0x3df, 4)]
[(ram, 0x4c8840, 4) INDIRECT (ram, 0x4c8840, 4) , (const, 0x3ea, 4), (ram, 0x4c8840, 4) INDIRECT (ram, 0x4c8840, 4) , (const, 0x3df, 4)]
[(ram, 0x4c8850, 8) INDIRECT (ram, 0x4c8850, 8) , (const, 0x3ea, 4), (ram, 0x4c8850, 8) INDIRECT (ram, 0x4c8850, 8) , (const, 0x3df, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100018b5, 8) , (register, 0x0, 8), (unique, 0x100018b5, 8) CAST (register, 0xb0, 8), (register, 0xb0, 8) PTRADD (unique, 0xbd80, 8) , (unique, 0x100018ad, 8) , (const, 0x1, 8), (unique, 0x100018ad, 8) CAST (unique, 0xbd80, 8), (register, 0x0, 8) CALLIND (register, 0x0, 8), (register, 0x0, 8) PTRADD (unique, 0xbd80, 8) , (unique, 0x1000189d, 8) , (const, 0x1, 8), (unique, 0x1000189d, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x98, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x2, 8) , (const, 0x8, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x18, 8)]
[(stack, 0xffffffffffffffb8, 16) MULTIEQUAL (stack, 0xffffffffffffffb8, 16) , (stack, 0xffffffffffffffb8, 16)]
[(stack, 0xffffffffffffffa8, 16) MULTIEQUAL (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16)]
[(stack, 0xffffffffffffff98, 16) MULTIEQUAL (stack, 0xffffffffffffff98, 16) , (stack, 0xffffffffffffff98, 16)]
[(stack, 0xffffffffffffff88, 16) MULTIEQUAL (stack, 0xffffffffffffff88, 16) , (stack, 0xffffffffffffff88, 16)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(ram, 0x4c8850, 8) MULTIEQUAL (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8)]
[(ram, 0x4c8840, 4) MULTIEQUAL (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4)]
[(ram, 0x4c87d0, 8) MULTIEQUAL (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8)]
[(ram, 0x4c87c0, 4) MULTIEQUAL (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4)]
[(ram, 0x4c7da0, 8) MULTIEQUAL (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8)]
[(ram, 0x4c7d80, 4) MULTIEQUAL (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4)]
[(ram, 0x4c6118, 8) MULTIEQUAL (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8)]
[(ram, 0x4c4a68, 8) MULTIEQUAL (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x482cc0, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESSEQUAL (register, 0x18, 8) , (register, 0xa0, 8), (register, 0x18, 8) PTRADD (register, 0x18, 8) , (const, 0x3, 8) , (const, 0x8, 8)]
[(stack, 0xffffffffffffff60, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x100018bd, 8), (unique, 0x100018bd, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x8, 8) , (const, 0x1, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x98, 8) , (const, 0xe, 8) , (const, 0x8, 8)]
[(unique, 0x3400, 8) PTRADD (unique, 0xbd80, 8) , (unique, 0x10000ba0, 8) , (const, 0x8, 8), (unique, 0x10000ba0, 8) INT_MULT (unique, 0x100018c5, 8) , (const, 0x3, 8), (unique, 0x100018c5, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (stack, 0xffffffffffffff48, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x482ddb, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x98, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x483310, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x483310, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbe00, 8) , (const, 0x0, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (register, 0x98, 8) , (const, 0x48, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x482ddb, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESSEQUAL (unique, 0x3400, 8) , (unique, 0xbd80, 8)]
[(unique, 0xbd80, 8) CAST (unique, 0x100018cd, 8), (unique, 0x100018cd, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (register, 0x98, 8) , (const, 0x3a, 8) , (const, 0x8, 8)]
[(ram, 0x4c8850, 8) MULTIEQUAL (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8)]
[(ram, 0x4c8840, 4) MULTIEQUAL (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4)]
[(ram, 0x4c87d0, 8) MULTIEQUAL (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8)]
[(ram, 0x4c87c0, 4) MULTIEQUAL (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4)]
[(ram, 0x4c7da0, 8) MULTIEQUAL (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8)]
[(ram, 0x4c7d80, 4) MULTIEQUAL (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4)]
[(ram, 0x4c6118, 8) MULTIEQUAL (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8)]
[(ram, 0x4c4a68, 8) MULTIEQUAL (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8)]
[(register, 0x8, 8) PTRADD (unique, 0xbd80, 8) , (unique, 0x100018dd, 8) , (const, 0x1, 8), (unique, 0x100018dd, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0xbd80, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x483339, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbc80, 4) , (const, 0x26, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100018d5, 8), (unique, 0x100018d5, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x8, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0xbd80, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x48435d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbc80, 4) , (const, 0x8, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100018e5, 8) , (const, 0x48437c, 8), (unique, 0x100018e5, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x1356, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x1355, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x1356, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x1355, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x1356, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x1355, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x1356, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x1355, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x1356, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x1355, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x1356, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x1355, 4)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x1356, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x1355, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x1356, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x1355, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x1356, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x1355, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x1356, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x1355, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x1356, 4), (stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x1355, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x1356, 4), (stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x1355, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x1356, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x1355, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x1356, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x1355, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x1356, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x1355, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x1356, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x1355, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x1356, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x1355, 4)]
[(stack, 0xffffffffffffff88, 16) INDIRECT (stack, 0xffffffffffffff88, 16) , (const, 0x1356, 4), (stack, 0xffffffffffffff88, 16) INDIRECT (stack, 0xffffffffffffff88, 16) , (const, 0x1355, 4)]
[(stack, 0xffffffffffffff98, 16) INDIRECT (stack, 0xffffffffffffff98, 16) , (const, 0x1356, 4), (stack, 0xffffffffffffff98, 16) INDIRECT (stack, 0xffffffffffffff98, 16) , (const, 0x1355, 4)]
[(stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0x1356, 4), (stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0x1355, 4)]
[(stack, 0xffffffffffffffb8, 16) INDIRECT (stack, 0xffffffffffffffb8, 16) , (const, 0x1356, 4), (stack, 0xffffffffffffffb8, 16) INDIRECT (stack, 0xffffffffffffffb8, 16) , (const, 0x1355, 4)]
[ ---  CALL (ram, 0x403170, 8) , (unique, 0x100009f8, 8) , (unique, 0x100009f0, 8) , (const, 0x21d, 4) , (unique, 0x10000a48, 8), (unique, 0x10000a48, 8) COPY (const, 0x4b04a0, 8), (unique, 0x100009f8, 8) COPY (const, 0x4b01c0, 8), (unique, 0x100009f0, 8) COPY (const, 0x4b01a0, 8)]
[(ram, 0x4c4a68, 8) COPY (ram, 0x4c4a68, 8), (ram, 0x4c4a68, 8) INDIRECT (ram, 0x4c4a68, 8) , (const, 0x1356, 4)]
[(ram, 0x4c6118, 8) COPY (ram, 0x4c6118, 8), (ram, 0x4c6118, 8) INDIRECT (ram, 0x4c6118, 8) , (const, 0x1356, 4)]
[(ram, 0x4c7d80, 4) COPY (ram, 0x4c7d80, 4), (ram, 0x4c7d80, 4) INDIRECT (ram, 0x4c7d80, 4) , (const, 0x1356, 4)]
[(ram, 0x4c7da0, 8) COPY (ram, 0x4c7da0, 8), (ram, 0x4c7da0, 8) INDIRECT (ram, 0x4c7da0, 8) , (const, 0x1356, 4)]
[(ram, 0x4c87c0, 4) COPY (ram, 0x4c87c0, 4), (ram, 0x4c87c0, 4) INDIRECT (ram, 0x4c87c0, 4) , (const, 0x1356, 4)]
[(ram, 0x4c87d0, 8) COPY (ram, 0x4c87d0, 8), (ram, 0x4c87d0, 8) INDIRECT (ram, 0x4c87d0, 8) , (const, 0x1356, 4)]
[(ram, 0x4c8840, 4) COPY (ram, 0x4c8840, 4), (ram, 0x4c8840, 4) INDIRECT (ram, 0x4c8840, 4) , (const, 0x1356, 4)]
[(ram, 0x4c8850, 8) COPY (ram, 0x4c8850, 8), (ram, 0x4c8850, 8) INDIRECT (ram, 0x4c8850, 8) , (const, 0x1356, 4)]
[ ---  RETURN (const, 0x1, 4)]
[(ram, 0x4c4a68, 8) INDIRECT (ram, 0x4c4a68, 8) , (const, 0x1335, 4)]
[(ram, 0x4c6118, 8) INDIRECT (ram, 0x4c6118, 8) , (const, 0x1335, 4)]
[(ram, 0x4c7d80, 4) INDIRECT (ram, 0x4c7d80, 4) , (const, 0x1335, 4)]
[(ram, 0x4c7da0, 8) INDIRECT (ram, 0x4c7da0, 8) , (const, 0x1335, 4)]
[(ram, 0x4c87c0, 4) INDIRECT (ram, 0x4c87c0, 4) , (const, 0x1335, 4)]
[(ram, 0x4c87d0, 8) INDIRECT (ram, 0x4c87d0, 8) , (const, 0x1335, 4)]
[(ram, 0x4c8840, 4) INDIRECT (ram, 0x4c8840, 4) , (const, 0x1335, 4)]
[(ram, 0x4c8850, 8) INDIRECT (ram, 0x4c8850, 8) , (const, 0x1335, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100018f5, 8) , (register, 0x10, 8), (unique, 0x100018f5, 8) CAST (register, 0x8, 8), (register, 0x10, 8) PTRADD (unique, 0xbd80, 8) , (unique, 0x100018ed, 8) , (const, 0x1, 8), (unique, 0x100018ed, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x483320, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (register, 0x0, 8) , (unique, 0x3400, 8), (register, 0x0, 8) PTRADD (register, 0x0, 8) , (const, 0x3, 8) , (const, 0x8, 8)]
[(unique, 0xbd80, 8) CAST (unique, 0x100018fd, 8), (unique, 0x100018fd, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (register, 0x98, 8) , (const, 0x3a, 8) , (const, 0x8, 8)]
[(unique, 0x1000103b, 8) MULTIEQUAL (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8)]
[(unique, 0x10001043, 8) MULTIEQUAL (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8)]
[(unique, 0x1000104b, 4) MULTIEQUAL (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4)]
[(unique, 0x1000104f, 8) MULTIEQUAL (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8)]
[(unique, 0x10001057, 4) MULTIEQUAL (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4)]
[(unique, 0x1000105b, 8) MULTIEQUAL (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8)]
[(unique, 0x10001063, 4) MULTIEQUAL (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4)]
[(unique, 0x10001067, 8) MULTIEQUAL (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8)]
[ ---  CBRANCH (ram, 0x48335c, 1) , (unique, 0x1000103a, 1), (unique, 0x1000103a, 1) INT_NOTEQUAL (unique, 0x10001032, 8) , (const, 0x0, 8), (unique, 0x10001032, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8)]
[(stack, 0xffffffffffffff58, 8) COPY (unique, 0x10001905, 8), (unique, 0x10001905, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0x10001032, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x482ce5, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (unique, 0x3400, 8) , (register, 0x30, 8)]
[(stack, 0xffffffffffffff20, 8) COPY (const, 0x0, 8)]
[(stack, 0xffffffffffffff28, 8) COPY (const, 0x0, 8)]
[(stack, 0xffffffffffffff50, 8) COPY (unique, 0xbd80, 8)]
[(stack, 0xffffffffffffffb8, 16) MULTIEQUAL (stack, 0xffffffffffffffb8, 16) , (stack, 0xffffffffffffffb8, 16)]
[(stack, 0xffffffffffffffa8, 16) MULTIEQUAL (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16)]
[(stack, 0xffffffffffffff98, 16) MULTIEQUAL (stack, 0xffffffffffffff98, 16) , (stack, 0xffffffffffffff98, 16)]
[(stack, 0xffffffffffffff88, 16) MULTIEQUAL (stack, 0xffffffffffffff88, 16) , (stack, 0xffffffffffffff88, 16)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(ram, 0x4c8850, 8) MULTIEQUAL (unique, 0x10001067, 8) , (ram, 0x4c8850, 8)]
[(ram, 0x4c8840, 4) MULTIEQUAL (unique, 0x10001063, 4) , (ram, 0x4c8840, 4)]
[(ram, 0x4c87d0, 8) MULTIEQUAL (unique, 0x1000105b, 8) , (ram, 0x4c87d0, 8)]
[(ram, 0x4c87c0, 4) MULTIEQUAL (unique, 0x10001057, 4) , (ram, 0x4c87c0, 4)]
[(ram, 0x4c7da0, 8) MULTIEQUAL (unique, 0x1000104f, 8) , (ram, 0x4c7da0, 8)]
[(ram, 0x4c7d80, 4) MULTIEQUAL (unique, 0x1000104b, 4) , (ram, 0x4c7d80, 4)]
[(ram, 0x4c6118, 8) MULTIEQUAL (unique, 0x10001043, 8) , (ram, 0x4c6118, 8)]
[(ram, 0x4c4a68, 8) MULTIEQUAL (unique, 0x1000103b, 8) , (ram, 0x4c4a68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xa0, 8) INT_AND (unique, 0x1000190d, 8) , (const, 0xffffffff, 8), (unique, 0x1000190d, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x1, 8) , (const, 0x8, 8), (register, 0x18, 8) MULTIEQUAL (unique, 0x3400, 8) , (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x4835c0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xa8, 4) , (const, 0x25, 4), (register, 0xa8, 4) SUBPIECE (unique, 0xbd80, 8) , (const, 0x0, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x1, 8) , (const, 0x8, 8), (register, 0x18, 8) MULTIEQUAL (unique, 0x3400, 8) , (register, 0x18, 8)]
[(stack, 0xffffffffffffff68, 8) COPY (register, 0x38, 8), (register, 0x38, 8) CAST (unique, 0x10001935, 8), (unique, 0x10001935, 8) INT_ADD (unique, 0x10001925, 8) , (unique, 0x1000192d, 8), (unique, 0x1000192d, 8) CAST (unique, 0xbd80, 8), (unique, 0x10001925, 8) CAST (stack, 0xffffffffffffff50, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x18, 8)]
[(stack, 0xffffffffffffff80, 8) COPY (unique, 0x3400, 8), (unique, 0x3400, 8) CAST (unique, 0x1000191d, 8), (unique, 0x1000191d, 8) INT_ADD (stack, 0xffffffffffffff60, 8) , (unique, 0x3300, 8), (unique, 0x3300, 8) INT_MULT (register, 0x0, 8) , (const, 0x18, 8), (register, 0x0, 8) INT_RIGHT (unique, 0x10001915, 8) , (const, 0x20, 4), (unique, 0x10001915, 8) CAST (unique, 0xbd80, 8)]
[ ---  CBRANCH (ram, 0x4835e8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xa0, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x4835e8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xa0, 8) , (const, 0x26, 8)]
[(ram, 0x4c4a68, 8) INDIRECT (ram, 0x4c4a68, 8) , (const, 0xc27, 4)]
[(ram, 0x4c6118, 8) INDIRECT (ram, 0x4c6118, 8) , (const, 0xc27, 4)]
[(ram, 0x4c7d80, 4) INDIRECT (ram, 0x4c7d80, 4) , (const, 0xc27, 4)]
[(ram, 0x4c7da0, 8) INDIRECT (ram, 0x4c7da0, 8) , (const, 0xc27, 4)]
[(ram, 0x4c87c0, 4) INDIRECT (ram, 0x4c87c0, 4) , (const, 0xc27, 4)]
[(ram, 0x4c87d0, 8) INDIRECT (ram, 0x4c87d0, 8) , (const, 0xc27, 4)]
[(ram, 0x4c8840, 4) INDIRECT (ram, 0x4c8840, 4) , (const, 0xc27, 4)]
[(ram, 0x4c8850, 8) INDIRECT (ram, 0x4c8850, 8) , (const, 0xc27, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x38, 8) , (register, 0x0, 8), (register, 0x0, 8) PTRADD (unique, 0xbd80, 8) , (unique, 0x1000193d, 8) , (const, 0x1, 8), (unique, 0x1000193d, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x98, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[ ---  BRANCH (ram, 0x482fc0, 1)]
[ ---  CBRANCH (ram, 0x482fc0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xa0, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x4834e0, 1) , (unique, 0x13280, 1), (unique, 0x13280, 1) INT_EQUAL (register, 0x0, 1) , (const, 0x0, 1), (register, 0x0, 1) INT_RIGHT (unique, 0xbb00, 1) , (const, 0x4, 4), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000194d, 8), (unique, 0x1000194d, 8) INT_ADD (unique, 0x10001945, 8) , (const, 0x4, 8), (unique, 0x10001945, 8) CAST (unique, 0x3400, 8)]
[ ---  CBRANCH (ram, 0x4834e0, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (register, 0x0, 4) , (const, 0x2, 4), (register, 0x0, 4) INT_SUB (register, 0x0, 4) , (const, 0x1, 4), (register, 0x0, 4) INT_AND (register, 0x0, 4) , (const, 0x3, 4), (register, 0x0, 4) INT_ZEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000195d, 8), (unique, 0x1000195d, 8) INT_ADD (unique, 0x10001955, 8) , (const, 0x5, 8), (unique, 0x10001955, 8) CAST (unique, 0x3400, 8)]
[(unique, 0x1000153c, 8) COPY (register, 0x98, 8)]
[ ---  CBRANCH (ram, 0x483632, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc00, 2) , (const, 0xfff1, 2), (unique, 0xbc00, 2) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000196d, 8), (unique, 0x1000196d, 8) INT_ADD (unique, 0x10001965, 8) , (const, 0x6, 8), (unique, 0x10001965, 8) CAST (unique, 0x3400, 8)]
[ ---  CBRANCH (ram, 0x483840, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x3400, 8) , (unique, 0x10001975, 8), (unique, 0x10001975, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (register, 0x98, 8) , (const, 0x81, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x483e06, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (register, 0xa0, 8) , (const, 0x25, 8)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x1000197d, 8), (unique, 0x1000197d, 8) CAST (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (register, 0x98, 8) , (const, 0x82, 8) , (const, 0x8, 8)]
[(unique, 0x100005cb, 4) INT_ZEXT (register, 0x200, 1), (register, 0x200, 1) INT_EQUAL (register, 0x0, 1) , (const, 0x0, 1), (register, 0x0, 1) SUBPIECE (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) INT_AND (register, 0x0, 4) , (const, 0x1, 4), (register, 0x0, 4) INT_NEGATE (unique, 0x100005bf, 4), (unique, 0x100005bf, 4) SUBPIECE (register, 0x0, 8) , (const, 0x0, 4), (register, 0x0, 8) INT_RIGHT (const, 0x1000070080, 8) , (unique, 0x57680, 1), (unique, 0x57680, 1) INT_AND (unique, 0x10000774, 1) , (const, 0x3f, 1), (unique, 0x10000774, 1) SUBPIECE (unique, 0xbd80, 8) , (const, 0x0, 4)]
[(register, 0x10, 4) INT_ADD (register, 0x10, 4) , (const, 0x5, 4), (register, 0x10, 4) INT_SRIGHT (unique, 0x10001985, 4) , (const, 0x1f, 4), (unique, 0x10001985, 4) CAST (register, 0x10, 4), (register, 0x10, 4) INT_LEFT (register, 0x0, 4) , (const, 0x1f, 4), (register, 0x0, 4) INT_AND (register, 0x0, 4) , (const, 0x1, 4), (register, 0x0, 4) INT_NEGATE (unique, 0x100005bf, 4), (unique, 0x100005bf, 4) SUBPIECE (register, 0x0, 8) , (const, 0x0, 4), (register, 0x0, 8) INT_RIGHT (const, 0x1000070080, 8) , (unique, 0x57680, 1), (unique, 0x57680, 1) INT_AND (unique, 0x10000774, 1) , (const, 0x3f, 1), (unique, 0x10000774, 1) SUBPIECE (unique, 0xbd80, 8) , (const, 0x0, 4)]
[(unique, 0x1000163c, 4) COPY (register, 0x0, 4), (register, 0x0, 4) INT_ADD (register, 0x0, 4) , (const, 0x3, 4), (register, 0x0, 4) INT_SRIGHT (unique, 0x10001989, 4) , (const, 0x1f, 4), (unique, 0x10001989, 4) CAST (register, 0x0, 4), (register, 0x0, 4) INT_LEFT (register, 0x0, 4) , (const, 0x1f, 4), (register, 0x0, 4) INT_AND (register, 0x0, 4) , (const, 0x1, 4), (register, 0x0, 4) INT_NEGATE (unique, 0x100005bf, 4), (unique, 0x100005bf, 4) SUBPIECE (register, 0x0, 8) , (const, 0x0, 4), (register, 0x0, 8) INT_RIGHT (const, 0x1000070080, 8) , (unique, 0x57680, 1), (unique, 0x57680, 1) INT_AND (unique, 0x10000774, 1) , (const, 0x3f, 1), (unique, 0x10000774, 1) SUBPIECE (unique, 0xbd80, 8) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x483e5d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xa0, 8) , (const, 0x5, 8)]
[(unique, 0x10001640, 4) COPY (register, 0x10, 4)]
[ ---  CBRANCH (ram, 0x483854, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xa0, 8) , (const, 0x6, 8)]
[ ---  CBRANCH (ram, 0x482ed8, 1) , (unique, 0x10001000, 1), (unique, 0x10001000, 1) INT_EQUAL (unique, 0x10001029, 4) , (unique, 0xbc80, 4), (unique, 0x10001029, 4) MULTIEQUAL (unique, 0x1000163c, 4) , (unique, 0x10001640, 4)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x1000198d, 8), (unique, 0x1000198d, 8) CAST (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (register, 0x98, 8) , (const, 0x82, 8) , (const, 0x8, 8)]
[(register, 0x80, 4) COPY (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x482ec4, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x80, 4) , (register, 0x8, 4), (register, 0x8, 4) MULTIEQUAL (unique, 0xbc80, 4) , (unique, 0xbc80, 4), (register, 0x80, 4) MULTIEQUAL (register, 0x80, 4) , (unique, 0x100005cb, 4)]
[(unique, 0xbd80, 8) CAST (unique, 0x10001995, 8), (unique, 0x10001995, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (register, 0x98, 8) , (const, 0x83, 8) , (const, 0x8, 8)]
[(stack, 0xffffffffffffff80, 8) COPY (unique, 0x1000199d, 8), (unique, 0x1000199d, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (register, 0x98, 8) , (const, 0x84, 8) , (const, 0x8, 8)]
[ ---  BRANCH (ram, 0x482f73, 1)]
[ ---  CBRANCH (ram, 0x483600, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xa0, 8) , (const, 0x7, 8)]
[ ---  CBRANCH (ram, 0x483600, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xa0, 8) , (const, 0x10, 8)]
[(register, 0x88, 4) COPY (const, 0x1, 4)]
[ ---  CBRANCH (ram, 0x482efd, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xa0, 8) , (const, 0x5, 8)]
[(register, 0x88, 4) INT_ZEXT (register, 0x88, 1), (register, 0x88, 1) BOOL_OR (unique, 0xc780, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xa0, 8) , (const, 0x24, 8), (unique, 0xc780, 1) INT_LESS (unique, 0x3800, 8) , (const, 0x2, 8), (unique, 0x3800, 8) INT_SUB (register, 0xa0, 8) , (const, 0x11, 8)]
[ ---  CBRANCH (ram, 0x483610, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xa0, 8) , (const, 0x5, 8)]
[(register, 0x88, 4) INT_OR (register, 0x88, 4) , (const, 0x2, 4), (register, 0x88, 4) MULTIEQUAL (register, 0x88, 4) , (register, 0x88, 4)]
[ ---  BRANCH (ram, 0x482f0b, 1)]
[(register, 0x0, 4) INT_OR (register, 0x88, 4) , (const, 0x4, 4), (register, 0x88, 4) MULTIEQUAL (register, 0x88, 4) , (register, 0x88, 4)]
[(unique, 0x1000161c, 4) COPY (register, 0x88, 4), (register, 0x88, 4) MULTIEQUAL (register, 0x88, 4) , (register, 0x88, 4)]
[ ---  CBRANCH (ram, 0x482f0b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xa0, 8) , (const, 0x6, 8)]
[(unique, 0x10001620, 4) COPY (register, 0x0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100019a5, 8) , (register, 0x88, 4), (unique, 0x100019a5, 8) CAST (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (register, 0x98, 8) , (const, 0x82, 8) , (const, 0x8, 8), (register, 0x88, 4) MULTIEQUAL (unique, 0x1000161c, 4) , (unique, 0x10001620, 4) , (register, 0x88, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3200, 8) , (unique, 0x100019ad, 8), (unique, 0x100019ad, 8) CAST (unique, 0x3400, 8), (unique, 0x3200, 8) PTRADD (register, 0x98, 8) , (const, 0x81, 8) , (const, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100019bd, 8) , (const, 0x0, 8), (unique, 0x100019bd, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100019c5, 8) , (const, 0x9, 8), (unique, 0x100019c5, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff0, 8) , (const, 0x1, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100019cd, 8) , (const, 0x482f5c, 8), (unique, 0x100019cd, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xffffffffffffffe8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x6b4, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x6b4, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x6b3, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x6b1, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x69b, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x6b4, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x6b3, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x6b1, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x69b, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x6b4, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x6b3, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x6b1, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x69b, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x6b4, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x6b3, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x6b1, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x69b, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x6b4, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x6b3, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x6b1, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x69b, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x6b4, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x6b3, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x6b1, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x69b, 4)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x6b4, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x6b3, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x6b1, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x69b, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x6b4, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x6b3, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x6b1, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x69b, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x6b4, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x6b3, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x6b1, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x69b, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x6b4, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x6b3, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x6b1, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x69b, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x6b4, 4), (stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x6b3, 4), (stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x6b1, 4), (stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x69b, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x6b4, 4), (stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x6b3, 4), (stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x6b1, 4), (stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x69b, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x6b4, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x6b3, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x6b1, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x69b, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x6b4, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x6b3, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x6b1, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x69b, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x6b4, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x6b3, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x6b1, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x69b, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x6b4, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x6b3, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x6b1, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x69b, 4)]
[(stack, 0xffffffffffffff88, 16) INDIRECT (stack, 0xffffffffffffff88, 16) , (const, 0x6b4, 4), (stack, 0xffffffffffffff88, 16) INDIRECT (stack, 0xffffffffffffff88, 16) , (const, 0x6b3, 4), (stack, 0xffffffffffffff88, 16) INDIRECT (stack, 0xffffffffffffff88, 16) , (const, 0x6b1, 4), (stack, 0xffffffffffffff88, 16) INDIRECT (stack, 0xffffffffffffff88, 16) , (const, 0x69b, 4)]
[(stack, 0xffffffffffffff98, 16) INDIRECT (stack, 0xffffffffffffff98, 16) , (const, 0x6b4, 4), (stack, 0xffffffffffffff98, 16) INDIRECT (stack, 0xffffffffffffff98, 16) , (const, 0x6b3, 4), (stack, 0xffffffffffffff98, 16) INDIRECT (stack, 0xffffffffffffff98, 16) , (const, 0x6b1, 4), (stack, 0xffffffffffffff98, 16) INDIRECT (stack, 0xffffffffffffff98, 16) , (const, 0x69b, 4)]
[(stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0x6b4, 4), (stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0x6b3, 4), (stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0x6b1, 4), (stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0x69b, 4)]
[(stack, 0xffffffffffffffb8, 16) INDIRECT (stack, 0xffffffffffffffb8, 16) , (const, 0x6b4, 4), (stack, 0xffffffffffffffb8, 16) INDIRECT (stack, 0xffffffffffffffb8, 16) , (const, 0x6b3, 4), (stack, 0xffffffffffffffb8, 16) INDIRECT (stack, 0xffffffffffffffb8, 16) , (const, 0x6b1, 4), (stack, 0xffffffffffffffb8, 16) INDIRECT (stack, 0xffffffffffffffb8, 16) , (const, 0x69b, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3200, 8) , (unique, 0x100019dd, 8), (unique, 0x100019dd, 8) CAST (register, 0x0, 8), (unique, 0x3200, 8) PTRADD (register, 0x98, 8) , (const, 0x83, 8) , (const, 0x8, 8), (register, 0x0, 8) CAST (unique, 0x100019d5, 8), (unique, 0x100019d5, 8) CALL (ram, 0x481760, 8) , (register, 0x38, 8) , (register, 0x98, 8) , (unique, 0x3100, 8) , (unique, 0x1000124c, 8), (register, 0x38, 8) INT_ADD (register, 0x38, 8) , (stack, 0xffffffffffffff38, 8), (unique, 0x3100, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff80, 8), (unique, 0x1000124c, 8) COPY (stack, 0xffffffffffffff40, 8), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x69b, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x69b, 4), (register, 0x38, 8) INT_ZEXT (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100019b5, 8), (unique, 0x100019b5, 8) CAST (unique, 0x3400, 8)]
[(ram, 0x4c4a68, 8) INDIRECT (ram, 0x4c4a68, 8) , (const, 0x6be, 4), (ram, 0x4c4a68, 8) INDIRECT (ram, 0x4c4a68, 8) , (const, 0x6ba, 4), (ram, 0x4c4a68, 8) INDIRECT (ram, 0x4c4a68, 8) , (const, 0x6b4, 4), (ram, 0x4c4a68, 8) INDIRECT (ram, 0x4c4a68, 8) , (const, 0x677, 4), (ram, 0x4c4a68, 8) INDIRECT (ram, 0x4c4a68, 8) , (const, 0x671, 4)]
[(ram, 0x4c6118, 8) INDIRECT (ram, 0x4c6118, 8) , (const, 0x6be, 4), (ram, 0x4c6118, 8) INDIRECT (ram, 0x4c6118, 8) , (const, 0x6ba, 4), (ram, 0x4c6118, 8) INDIRECT (ram, 0x4c6118, 8) , (const, 0x6b4, 4), (ram, 0x4c6118, 8) INDIRECT (ram, 0x4c6118, 8) , (const, 0x677, 4), (ram, 0x4c6118, 8) INDIRECT (ram, 0x4c6118, 8) , (const, 0x671, 4)]
[(ram, 0x4c7d80, 4) INDIRECT (ram, 0x4c7d80, 4) , (const, 0x6be, 4), (ram, 0x4c7d80, 4) INDIRECT (ram, 0x4c7d80, 4) , (const, 0x6ba, 4), (ram, 0x4c7d80, 4) INDIRECT (ram, 0x4c7d80, 4) , (const, 0x6b4, 4), (ram, 0x4c7d80, 4) INDIRECT (ram, 0x4c7d80, 4) , (const, 0x677, 4), (ram, 0x4c7d80, 4) INDIRECT (ram, 0x4c7d80, 4) , (const, 0x671, 4)]
[(ram, 0x4c7da0, 8) INDIRECT (ram, 0x4c7da0, 8) , (const, 0x6be, 4), (ram, 0x4c7da0, 8) INDIRECT (ram, 0x4c7da0, 8) , (const, 0x6ba, 4), (ram, 0x4c7da0, 8) INDIRECT (ram, 0x4c7da0, 8) , (const, 0x6b4, 4), (ram, 0x4c7da0, 8) INDIRECT (ram, 0x4c7da0, 8) , (const, 0x677, 4), (ram, 0x4c7da0, 8) INDIRECT (ram, 0x4c7da0, 8) , (const, 0x671, 4)]
[(ram, 0x4c87c0, 4) INDIRECT (ram, 0x4c87c0, 4) , (const, 0x6be, 4), (ram, 0x4c87c0, 4) INDIRECT (ram, 0x4c87c0, 4) , (const, 0x6ba, 4), (ram, 0x4c87c0, 4) INDIRECT (ram, 0x4c87c0, 4) , (const, 0x6b4, 4), (ram, 0x4c87c0, 4) INDIRECT (ram, 0x4c87c0, 4) , (const, 0x677, 4), (ram, 0x4c87c0, 4) INDIRECT (ram, 0x4c87c0, 4) , (const, 0x671, 4)]
[(ram, 0x4c87d0, 8) INDIRECT (ram, 0x4c87d0, 8) , (const, 0x6be, 4), (ram, 0x4c87d0, 8) INDIRECT (ram, 0x4c87d0, 8) , (const, 0x6ba, 4), (ram, 0x4c87d0, 8) INDIRECT (ram, 0x4c87d0, 8) , (const, 0x6b4, 4), (ram, 0x4c87d0, 8) INDIRECT (ram, 0x4c87d0, 8) , (const, 0x677, 4), (ram, 0x4c87d0, 8) INDIRECT (ram, 0x4c87d0, 8) , (const, 0x671, 4)]
[(ram, 0x4c8840, 4) INDIRECT (ram, 0x4c8840, 4) , (const, 0x6be, 4), (ram, 0x4c8840, 4) INDIRECT (ram, 0x4c8840, 4) , (const, 0x6ba, 4), (ram, 0x4c8840, 4) INDIRECT (ram, 0x4c8840, 4) , (const, 0x6b4, 4), (ram, 0x4c8840, 4) INDIRECT (ram, 0x4c8840, 4) , (const, 0x677, 4), (ram, 0x4c8840, 4) INDIRECT (ram, 0x4c8840, 4) , (const, 0x671, 4)]
[(ram, 0x4c8850, 8) INDIRECT (ram, 0x4c8850, 8) , (const, 0x6be, 4), (ram, 0x4c8850, 8) INDIRECT (ram, 0x4c8850, 8) , (const, 0x6ba, 4), (ram, 0x4c8850, 8) INDIRECT (ram, 0x4c8850, 8) , (const, 0x6b4, 4), (ram, 0x4c8850, 8) INDIRECT (ram, 0x4c8850, 8) , (const, 0x677, 4), (ram, 0x4c8850, 8) INDIRECT (ram, 0x4c8850, 8) , (const, 0x671, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3200, 8) , (unique, 0x100019e5, 8), (unique, 0x100019e5, 8) CAST (stack, 0xffffffffffffff80, 8), (unique, 0x3200, 8) PTRADD (register, 0x98, 8) , (const, 0x84, 8) , (const, 0x8, 8), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x6b4, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x6b3, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x6b1, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x69b, 4)]
[(stack, 0xffffffffffffffb8, 16) MULTIEQUAL (stack, 0xffffffffffffffb8, 16) , (stack, 0xffffffffffffffb8, 16)]
[(stack, 0xffffffffffffffa8, 16) MULTIEQUAL (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16)]
[(stack, 0xffffffffffffff98, 16) MULTIEQUAL (stack, 0xffffffffffffff98, 16) , (stack, 0xffffffffffffff98, 16)]
[(stack, 0xffffffffffffff88, 16) MULTIEQUAL (stack, 0xffffffffffffff88, 16) , (stack, 0xffffffffffffff88, 16)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(ram, 0x4c8850, 8) MULTIEQUAL (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8)]
[(ram, 0x4c8840, 4) MULTIEQUAL (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4)]
[(ram, 0x4c87d0, 8) MULTIEQUAL (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8)]
[(ram, 0x4c87c0, 4) MULTIEQUAL (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4)]
[(ram, 0x4c7da0, 8) MULTIEQUAL (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8)]
[(ram, 0x4c7d80, 4) MULTIEQUAL (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4)]
[(ram, 0x4c6118, 8) MULTIEQUAL (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8)]
[(ram, 0x4c4a68, 8) MULTIEQUAL (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x98, 8) MULTIEQUAL (register, 0x0, 8) , (unique, 0xbd80, 8)]
[ ---  CBRANCH (ram, 0x483620, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffff80, 8) , (const, 0x0, 8), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10001a05, 8), (unique, 0x10001a05, 8) INT_ADD (unique, 0x100019fd, 8) , (const, 0x4, 8), (unique, 0x100019fd, 8) CAST (stack, 0xffffffffffffff80, 8)]
[(unique, 0x10001534, 8) COPY (register, 0x98, 8)]
[(unique, 0x10001544, 8) COPY (register, 0x98, 8)]
[ ---  CBRANCH (ram, 0x4834f4, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbc00, 2) , (const, 0xfff1, 2), (unique, 0xbc00, 2) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100019f5, 8), (unique, 0x100019f5, 8) INT_ADD (unique, 0x100019ed, 8) , (const, 0x6, 8), (unique, 0x100019ed, 8) CAST (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffffb8, 16) MULTIEQUAL (stack, 0xffffffffffffffb8, 16) , (stack, 0xffffffffffffffb8, 16)]
[(stack, 0xffffffffffffffa8, 16) MULTIEQUAL (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16)]
[(stack, 0xffffffffffffff98, 16) MULTIEQUAL (stack, 0xffffffffffffff98, 16) , (stack, 0xffffffffffffff98, 16)]
[(stack, 0xffffffffffffff88, 16) MULTIEQUAL (stack, 0xffffffffffffff88, 16) , (stack, 0xffffffffffffff88, 16)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(ram, 0x4c8850, 8) MULTIEQUAL (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8)]
[(ram, 0x4c8840, 4) MULTIEQUAL (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4)]
[(ram, 0x4c87d0, 8) MULTIEQUAL (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8)]
[(ram, 0x4c87c0, 4) MULTIEQUAL (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4)]
[(ram, 0x4c7da0, 8) MULTIEQUAL (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8)]
[(ram, 0x4c7d80, 4) MULTIEQUAL (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4)]
[(ram, 0x4c6118, 8) MULTIEQUAL (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8)]
[(ram, 0x4c4a68, 8) MULTIEQUAL (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8)]
[(register, 0x10, 1) MULTIEQUAL (unique, 0xbb00, 1) , (unique, 0xbb00, 1)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x30, 2) MULTIEQUAL (unique, 0xbc00, 2) , (unique, 0xbc00, 2)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x98, 8), (register, 0x98, 8) MULTIEQUAL (unique, 0x10001534, 8) , (unique, 0x1000153c, 8)]
[(stack, 0xffffffffffffffb8, 16) MULTIEQUAL (stack, 0xffffffffffffffb8, 16) , (stack, 0xffffffffffffffb8, 16)]
[(stack, 0xffffffffffffffa8, 16) MULTIEQUAL (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16)]
[(stack, 0xffffffffffffff98, 16) MULTIEQUAL (stack, 0xffffffffffffff98, 16) , (stack, 0xffffffffffffff98, 16)]
[(stack, 0xffffffffffffff88, 16) MULTIEQUAL (stack, 0xffffffffffffff88, 16) , (stack, 0xffffffffffffff88, 16)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(ram, 0x4c8850, 8) MULTIEQUAL (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8)]
[(ram, 0x4c8840, 4) MULTIEQUAL (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4)]
[(ram, 0x4c87d0, 8) MULTIEQUAL (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8)]
[(ram, 0x4c87c0, 4) MULTIEQUAL (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4)]
[(ram, 0x4c7da0, 8) MULTIEQUAL (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8)]
[(ram, 0x4c7d80, 4) MULTIEQUAL (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4)]
[(ram, 0x4c6118, 8) MULTIEQUAL (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8)]
[(ram, 0x4c4a68, 8) MULTIEQUAL (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8)]
[(register, 0x10, 1) MULTIEQUAL (unique, 0xbb00, 1) , (unique, 0xbb00, 1)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x98, 8) MULTIEQUAL (unique, 0x10001544, 8) , (unique, 0x1000153c, 8)]
[(register, 0x30, 2) MULTIEQUAL (unique, 0xbc00, 2) , (unique, 0xbc00, 2)]
[(register, 0x90, 8) COPY (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x4834f7, 1)]
[(stack, 0xffffffffffffffb8, 16) MULTIEQUAL (stack, 0xffffffffffffffb8, 16) , (stack, 0xffffffffffffffb8, 16)]
[(stack, 0xffffffffffffffa8, 16) MULTIEQUAL (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16)]
[(stack, 0xffffffffffffff98, 16) MULTIEQUAL (stack, 0xffffffffffffff98, 16) , (stack, 0xffffffffffffff98, 16)]
[(stack, 0xffffffffffffff88, 16) MULTIEQUAL (stack, 0xffffffffffffff88, 16) , (stack, 0xffffffffffffff88, 16)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(ram, 0x4c8850, 8) MULTIEQUAL (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8)]
[(ram, 0x4c8840, 4) MULTIEQUAL (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4)]
[(ram, 0x4c87d0, 8) MULTIEQUAL (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8)]
[(ram, 0x4c87c0, 4) MULTIEQUAL (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4)]
[(ram, 0x4c7da0, 8) MULTIEQUAL (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8)]
[(ram, 0x4c7d80, 4) MULTIEQUAL (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4)]
[(ram, 0x4c6118, 8) MULTIEQUAL (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8)]
[(ram, 0x4c4a68, 8) MULTIEQUAL (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x98, 8) MULTIEQUAL (register, 0x98, 8) , (register, 0x98, 8)]
[(register, 0x30, 2) MULTIEQUAL (register, 0x30, 2) , (register, 0x30, 2)]
[(register, 0x90, 8) PTRADD (register, 0x90, 8) , (unique, 0xbd80, 8) , (const, 0x1, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (stack, 0xffffffffffffff80, 8) , (const, 0x1, 8) , (const, 0x8, 8), (register, 0x90, 8) MULTIEQUAL (register, 0x90, 8) , (unique, 0xbd80, 8), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[ ---  CBRANCH (ram, 0x482f7f, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x10, 1) , (const, 0xa, 1), (register, 0x10, 1) INT_AND (register, 0x10, 1) , (const, 0xf, 1), (register, 0x10, 1) MULTIEQUAL (register, 0x10, 1) , (register, 0x10, 1)]
[ ---  CBRANCH (ram, 0x482f7f, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x30, 2) , (const, 0x0, 2)]
[ ---  CBRANCH (ram, 0x482f7f, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffff34, 4) , (const, 0x0, 4)]
[(unique, 0x100013e4, 8) COPY (register, 0x90, 8)]
[(unique, 0x10001454, 8) COPY (register, 0x98, 8)]
[ ---  CBRANCH (ram, 0x483590, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x98, 8) , (register, 0x98, 8)]
[(unique, 0x100013ec, 8) COPY (register, 0x90, 8)]
[ ---  CBRANCH (ram, 0x483590, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x58800, 1) , (const, 0x0, 1), (unique, 0x58800, 1) INT_AND (unique, 0xbb00, 1) , (const, 0x3, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x10001a15, 8), (unique, 0x10001a15, 8) INT_ADD (unique, 0x10001a0d, 8) , (const, 0x31c, 8), (unique, 0x10001a0d, 8) CAST (register, 0x98, 8)]
[(unique, 0x100013f4, 8) COPY (register, 0x90, 8)]
[ ---  CBRANCH (ram, 0x483590, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x58800, 1) , (const, 0x0, 1), (unique, 0x58800, 1) INT_AND (unique, 0xbb00, 1) , (const, 0x4, 1)]
[(stack, 0xffffffffffffff00, 8) COPY (register, 0x90, 8)]
[(stack, 0xffffffffffffff08, 8) COPY (register, 0x98, 8)]
[ ---  CBRANCH (ram, 0x48356f, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10001a1d, 8), (unique, 0x10001a1d, 8) CAST (ram, 0x4c4a68, 8)]
[(register, 0x10, 8) COPY (const, 0x4b026e, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001a25, 8) , (const, 0x48357f, 8), (unique, 0x10001a25, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xa81, 4)]
[(ram, 0x4c4a68, 8) INDIRECT (ram, 0x4c4a68, 8) , (const, 0xa81, 4)]
[(ram, 0x4c6118, 8) INDIRECT (ram, 0x4c6118, 8) , (const, 0xa81, 4)]
[(ram, 0x4c7d80, 4) INDIRECT (ram, 0x4c7d80, 4) , (const, 0xa81, 4)]
[(ram, 0x4c7da0, 8) INDIRECT (ram, 0x4c7da0, 8) , (const, 0xa81, 4)]
[(ram, 0x4c87c0, 4) INDIRECT (ram, 0x4c87c0, 4) , (const, 0xa81, 4)]
[(ram, 0x4c87d0, 8) INDIRECT (ram, 0x4c87d0, 8) , (const, 0xa81, 4)]
[(ram, 0x4c8840, 4) INDIRECT (ram, 0x4c8840, 4) , (const, 0xa81, 4)]
[(ram, 0x4c8850, 8) INDIRECT (ram, 0x4c8850, 8) , (const, 0xa81, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0xa81, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0xa80, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0xa81, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0xa80, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0xa81, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0xa80, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0xa81, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0xa80, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0xa81, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0xa80, 4)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0xa81, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0xa80, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0xa81, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0xa80, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0xa81, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0xa80, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0xa81, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0xa80, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0xa81, 4), (stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0xa80, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0xa81, 4), (stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0xa80, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0xa81, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0xa80, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0xa81, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0xa80, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0xa81, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0xa80, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0xa81, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0xa80, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0xa81, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0xa80, 4)]
[(stack, 0xffffffffffffff88, 16) INDIRECT (stack, 0xffffffffffffff88, 16) , (const, 0xa81, 4), (stack, 0xffffffffffffff88, 16) INDIRECT (stack, 0xffffffffffffff88, 16) , (const, 0xa80, 4)]
[(stack, 0xffffffffffffff98, 16) INDIRECT (stack, 0xffffffffffffff98, 16) , (const, 0xa81, 4), (stack, 0xffffffffffffff98, 16) INDIRECT (stack, 0xffffffffffffff98, 16) , (const, 0xa80, 4)]
[(stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0xa81, 4), (stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0xa80, 4)]
[(stack, 0xffffffffffffffb8, 16) INDIRECT (stack, 0xffffffffffffffb8, 16) , (const, 0xa81, 4), (stack, 0xffffffffffffffb8, 16) INDIRECT (stack, 0xffffffffffffffb8, 16) , (const, 0xa80, 4)]
[ ---  CALL (ram, 0x485480, 8) , (const, 0x2, 8) , (unique, 0x10000a00, 8) , (register, 0x10, 8), (unique, 0x10000a00, 8) COPY (const, 0x4b01f8, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0xbd80, 8) , (register, 0x10, 8)]
[(unique, 0x100013fc, 8) COPY (stack, 0xffffffffffffff00, 8), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0xa81, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0xa80, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001a2d, 8) , (const, 0x48359a, 8), (unique, 0x10001a2d, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xa8d, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4c4a68, 8) INDIRECT (ram, 0x4c4a68, 8) , (const, 0xa8d, 4), (ram, 0x4c4a68, 8) MULTIEQUAL (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8)]
[(ram, 0x4c6118, 8) INDIRECT (ram, 0x4c6118, 8) , (const, 0xa8d, 4), (ram, 0x4c6118, 8) MULTIEQUAL (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8)]
[(ram, 0x4c7d80, 4) INDIRECT (ram, 0x4c7d80, 4) , (const, 0xa8d, 4), (ram, 0x4c7d80, 4) MULTIEQUAL (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4)]
[(ram, 0x4c7da0, 8) INDIRECT (ram, 0x4c7da0, 8) , (const, 0xa8d, 4), (ram, 0x4c7da0, 8) MULTIEQUAL (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8)]
[(ram, 0x4c87c0, 4) INDIRECT (ram, 0x4c87c0, 4) , (const, 0xa8d, 4), (ram, 0x4c87c0, 4) MULTIEQUAL (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4)]
[(ram, 0x4c87d0, 8) INDIRECT (ram, 0x4c87d0, 8) , (const, 0xa8d, 4), (ram, 0x4c87d0, 8) MULTIEQUAL (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8)]
[(ram, 0x4c8840, 4) INDIRECT (ram, 0x4c8840, 4) , (const, 0xa8d, 4), (ram, 0x4c8840, 4) MULTIEQUAL (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4)]
[(ram, 0x4c8850, 8) INDIRECT (ram, 0x4c8850, 8) , (const, 0xa8d, 4), (ram, 0x4c8850, 8) MULTIEQUAL (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0xa8d, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0xa8c, 4), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0xa8d, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0xa8c, 4), (stack, 0xffffffffffffff08, 8) COPY (register, 0x98, 8), (register, 0x98, 8) MULTIEQUAL (unique, 0x10001454, 8) , (unique, 0x10001454, 8) , (unique, 0x10001454, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0xa8d, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0xa8c, 4), (stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0xa8d, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0xa8c, 4), (stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0xa8d, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0xa8c, 4), (stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0xa8d, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0xa8c, 4), (stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0xa8d, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0xa8c, 4), (stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0xa8d, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0xa8c, 4), (stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0xa8d, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0xa8c, 4), (stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0xa8d, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0xa8c, 4), (stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0xa8d, 4), (stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0xa8c, 4), (stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0xa8d, 4), (stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0xa8c, 4), (stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0xa8d, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0xa8c, 4), (stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0xa8d, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0xa8c, 4), (stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0xa8d, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0xa8c, 4), (stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0xa8d, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0xa8c, 4), (stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0xa8d, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0xa8c, 4), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff88, 16) INDIRECT (stack, 0xffffffffffffff88, 16) , (const, 0xa8d, 4), (stack, 0xffffffffffffff88, 16) INDIRECT (stack, 0xffffffffffffff88, 16) , (const, 0xa8c, 4), (stack, 0xffffffffffffff88, 16) MULTIEQUAL (stack, 0xffffffffffffff88, 16) , (stack, 0xffffffffffffff88, 16) , (stack, 0xffffffffffffff88, 16) , (stack, 0xffffffffffffff88, 16)]
[(stack, 0xffffffffffffff98, 16) INDIRECT (stack, 0xffffffffffffff98, 16) , (const, 0xa8d, 4), (stack, 0xffffffffffffff98, 16) INDIRECT (stack, 0xffffffffffffff98, 16) , (const, 0xa8c, 4), (stack, 0xffffffffffffff98, 16) MULTIEQUAL (stack, 0xffffffffffffff98, 16) , (stack, 0xffffffffffffff98, 16) , (stack, 0xffffffffffffff98, 16) , (stack, 0xffffffffffffff98, 16)]
[(stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0xa8d, 4), (stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0xa8c, 4), (stack, 0xffffffffffffffa8, 16) MULTIEQUAL (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16)]
[(stack, 0xffffffffffffffb8, 16) INDIRECT (stack, 0xffffffffffffffb8, 16) , (const, 0xa8d, 4), (stack, 0xffffffffffffffb8, 16) INDIRECT (stack, 0xffffffffffffffb8, 16) , (const, 0xa8c, 4), (stack, 0xffffffffffffffb8, 16) MULTIEQUAL (stack, 0xffffffffffffffb8, 16) , (stack, 0xffffffffffffffb8, 16) , (stack, 0xffffffffffffffb8, 16) , (stack, 0xffffffffffffffb8, 16)]
[ ---  CALLIND (register, 0x90, 8), (register, 0x90, 8) MULTIEQUAL (unique, 0x100013e4, 8) , (unique, 0x100013ec, 8) , (unique, 0x100013f4, 8) , (unique, 0x100013fc, 8)]
[(unique, 0x100008a0, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x100008a8, 8) MULTIEQUAL (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8)]
[(unique, 0x100008b0, 8) MULTIEQUAL (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8)]
[(unique, 0x100008b8, 4) MULTIEQUAL (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4)]
[(unique, 0x100008bc, 8) MULTIEQUAL (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8)]
[(unique, 0x100008c4, 4) MULTIEQUAL (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4)]
[(unique, 0x100008c8, 8) MULTIEQUAL (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8)]
[(unique, 0x100008d0, 4) MULTIEQUAL (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4)]
[(unique, 0x100008d4, 8) MULTIEQUAL (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8)]
[(unique, 0x100008dc, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(unique, 0x100008e4, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(unique, 0x100008ec, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(unique, 0x100008f4, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(unique, 0x100008fc, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(unique, 0x10000904, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(unique, 0x1000090c, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(unique, 0x10000910, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(unique, 0x10000914, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(unique, 0x1000091c, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(unique, 0x10000924, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(unique, 0x1000092c, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(unique, 0x10000934, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(unique, 0x1000093c, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(unique, 0x10000944, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(unique, 0x1000094c, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(unique, 0x10000954, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(unique, 0x1000095c, 16) MULTIEQUAL (stack, 0xffffffffffffff88, 16) , (stack, 0xffffffffffffff88, 16) , (stack, 0xffffffffffffff88, 16) , (stack, 0xffffffffffffff88, 16) , (stack, 0xffffffffffffff88, 16)]
[(unique, 0x1000096c, 16) MULTIEQUAL (stack, 0xffffffffffffff98, 16) , (stack, 0xffffffffffffff98, 16) , (stack, 0xffffffffffffff98, 16) , (stack, 0xffffffffffffff98, 16) , (stack, 0xffffffffffffff98, 16)]
[(unique, 0x1000097c, 16) MULTIEQUAL (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16)]
[(unique, 0x1000098c, 16) MULTIEQUAL (stack, 0xffffffffffffffb8, 16) , (stack, 0xffffffffffffffb8, 16) , (stack, 0xffffffffffffffb8, 16) , (stack, 0xffffffffffffffb8, 16) , (stack, 0xffffffffffffffb8, 16)]
[ ---  CBRANCH (ram, 0x482f89, 1) , (unique, 0x1000089f, 1), (unique, 0x1000089f, 1) INT_LESS (register, 0xa0, 8) , (const, 0x26, 8)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (unique, 0x100008dc, 8) , (const, 0x6f2, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (unique, 0x100008e4, 8) , (const, 0x6f2, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (unique, 0x100008ec, 8) , (const, 0x6f2, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (unique, 0x100008f4, 8) , (const, 0x6f2, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (unique, 0x100008fc, 8) , (const, 0x6f2, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (unique, 0x10000904, 8) , (const, 0x6f2, 4)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (unique, 0x1000090c, 4) , (const, 0x6f2, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (unique, 0x10000910, 4) , (const, 0x6f2, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (unique, 0x10000914, 8) , (const, 0x6f2, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (unique, 0x1000091c, 8) , (const, 0x6f2, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (unique, 0x10000924, 8) , (const, 0x6f2, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (unique, 0x1000092c, 8) , (const, 0x6f2, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (unique, 0x10000934, 8) , (const, 0x6f2, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (unique, 0x1000093c, 8) , (const, 0x6f2, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (unique, 0x10000944, 8) , (const, 0x6f2, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (unique, 0x1000094c, 8) , (const, 0x6f2, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (unique, 0x10000954, 8) , (const, 0x6f2, 4)]
[(stack, 0xffffffffffffff88, 16) INDIRECT (unique, 0x1000095c, 16) , (const, 0x6f2, 4)]
[(stack, 0xffffffffffffff98, 16) INDIRECT (unique, 0x1000096c, 16) , (const, 0x6f2, 4)]
[(stack, 0xffffffffffffffa8, 16) INDIRECT (unique, 0x1000097c, 16) , (const, 0x6f2, 4)]
[(stack, 0xffffffffffffffb8, 16) INDIRECT (unique, 0x1000098c, 16) , (const, 0x6f2, 4)]
[ ---  CALLIND (unique, 0x10001a3d, 8), (unique, 0x10001a3d, 8) CAST (register, 0x0, 8), (register, 0x0, 8) PTRADD (unique, 0x10000a38, 8) , (register, 0x0, 8) , (const, 0x1, 8), (unique, 0x10000a38, 8) PTRSUB (const, 0x0, 8) , (const, 0x4b02c0, 8), (register, 0x0, 8) INT_SEXT (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10001a35, 8), (unique, 0x10001a35, 8) CAST (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (unique, 0x10000a30, 8) , (unique, 0x3300, 8) , (const, 0x1, 8), (unique, 0x10000a30, 8) PTRSUB (const, 0x0, 8) , (const, 0x4b02c0, 8), (unique, 0x3300, 8) INT_MULT (register, 0xa0, 8) , (const, 0x4, 8)]
[(ram, 0x4c4a68, 8) COPY (ram, 0x4c4a68, 8), (ram, 0x4c4a68, 8) INDIRECT (unique, 0x100008a8, 8) , (const, 0x6f2, 4)]
[(ram, 0x4c6118, 8) COPY (ram, 0x4c6118, 8), (ram, 0x4c6118, 8) INDIRECT (unique, 0x100008b0, 8) , (const, 0x6f2, 4)]
[(ram, 0x4c7d80, 4) COPY (ram, 0x4c7d80, 4), (ram, 0x4c7d80, 4) INDIRECT (unique, 0x100008b8, 4) , (const, 0x6f2, 4)]
[(ram, 0x4c7da0, 8) COPY (ram, 0x4c7da0, 8), (ram, 0x4c7da0, 8) INDIRECT (unique, 0x100008bc, 8) , (const, 0x6f2, 4)]
[(ram, 0x4c87c0, 4) COPY (ram, 0x4c87c0, 4), (ram, 0x4c87c0, 4) INDIRECT (unique, 0x100008c4, 4) , (const, 0x6f2, 4)]
[(ram, 0x4c87d0, 8) COPY (ram, 0x4c87d0, 8), (ram, 0x4c87d0, 8) INDIRECT (unique, 0x100008c8, 8) , (const, 0x6f2, 4)]
[(ram, 0x4c8840, 4) COPY (ram, 0x4c8840, 4), (ram, 0x4c8840, 4) INDIRECT (unique, 0x100008d0, 4) , (const, 0x6f2, 4)]
[(ram, 0x4c8850, 8) COPY (ram, 0x4c8850, 8), (ram, 0x4c8850, 8) INDIRECT (unique, 0x100008d4, 8) , (const, 0x6f2, 4)]
[ ---  RETURN (const, 0x1, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001a4d, 8) , (const, 0x4835bd, 8), (unique, 0x10001a4d, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (unique, 0x100008a0, 8) , (const, 0x702, 4)]
[(ram, 0x4c4a68, 8) INDIRECT (unique, 0x100008a8, 8) , (const, 0x702, 4)]
[(ram, 0x4c6118, 8) INDIRECT (unique, 0x100008b0, 8) , (const, 0x702, 4)]
[(ram, 0x4c7d80, 4) INDIRECT (unique, 0x100008b8, 4) , (const, 0x702, 4)]
[(ram, 0x4c7da0, 8) INDIRECT (unique, 0x100008bc, 8) , (const, 0x702, 4)]
[(ram, 0x4c87c0, 4) INDIRECT (unique, 0x100008c4, 4) , (const, 0x702, 4)]
[(ram, 0x4c87d0, 8) INDIRECT (unique, 0x100008c8, 8) , (const, 0x702, 4)]
[(ram, 0x4c8840, 4) INDIRECT (unique, 0x100008d0, 4) , (const, 0x702, 4)]
[(ram, 0x4c8850, 8) INDIRECT (unique, 0x100008d4, 8) , (const, 0x702, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x702, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (unique, 0x100008dc, 8) , (const, 0x701, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x702, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (unique, 0x100008e4, 8) , (const, 0x701, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x702, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (unique, 0x100008ec, 8) , (const, 0x701, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x702, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (unique, 0x100008f4, 8) , (const, 0x701, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x702, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (unique, 0x100008fc, 8) , (const, 0x701, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x702, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (unique, 0x10000904, 8) , (const, 0x701, 4)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x702, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (unique, 0x1000090c, 4) , (const, 0x701, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x702, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (unique, 0x10000910, 4) , (const, 0x701, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x702, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (unique, 0x10000914, 8) , (const, 0x701, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x702, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (unique, 0x1000091c, 8) , (const, 0x701, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x702, 4), (stack, 0xffffffffffffff48, 8) INDIRECT (unique, 0x10000924, 8) , (const, 0x701, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x702, 4), (stack, 0xffffffffffffff50, 8) INDIRECT (unique, 0x1000092c, 8) , (const, 0x701, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x702, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (unique, 0x10000934, 8) , (const, 0x701, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x702, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (unique, 0x1000093c, 8) , (const, 0x701, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x702, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (unique, 0x10000944, 8) , (const, 0x701, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x702, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (unique, 0x1000094c, 8) , (const, 0x701, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x702, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (unique, 0x10000954, 8) , (const, 0x701, 4)]
[(stack, 0xffffffffffffff88, 16) INDIRECT (stack, 0xffffffffffffff88, 16) , (const, 0x702, 4), (stack, 0xffffffffffffff88, 16) INDIRECT (unique, 0x1000095c, 16) , (const, 0x701, 4)]
[(stack, 0xffffffffffffff98, 16) INDIRECT (stack, 0xffffffffffffff98, 16) , (const, 0x702, 4), (stack, 0xffffffffffffff98, 16) INDIRECT (unique, 0x1000096c, 16) , (const, 0x701, 4)]
[(stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0x702, 4), (stack, 0xffffffffffffffa8, 16) INDIRECT (unique, 0x1000097c, 16) , (const, 0x701, 4)]
[(stack, 0xffffffffffffffb8, 16) INDIRECT (stack, 0xffffffffffffffb8, 16) , (const, 0x702, 4), (stack, 0xffffffffffffffb8, 16) INDIRECT (unique, 0x1000098c, 16) , (const, 0x701, 4)]
[ ---  CALL (ram, 0x482980, 8) , (register, 0x98, 8) , (register, 0x30, 8) , (const, 0x0, 8), (register, 0x30, 8) INT_AND (unique, 0x10001a45, 8) , (const, 0xffffffff, 8), (unique, 0x10001a45, 8) CAST (unique, 0xbd80, 8)]
[(stack, 0xffffffffffffffb8, 16) MULTIEQUAL (stack, 0xffffffffffffffb8, 16) , (stack, 0xffffffffffffffb8, 16)]
[(stack, 0xffffffffffffffa8, 16) MULTIEQUAL (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16)]
[(stack, 0xffffffffffffff98, 16) MULTIEQUAL (stack, 0xffffffffffffff98, 16) , (stack, 0xffffffffffffff98, 16)]
[(stack, 0xffffffffffffff88, 16) MULTIEQUAL (stack, 0xffffffffffffff88, 16) , (stack, 0xffffffffffffff88, 16)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(ram, 0x4c8850, 8) MULTIEQUAL (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8)]
[(ram, 0x4c8840, 4) MULTIEQUAL (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4)]
[(ram, 0x4c87d0, 8) MULTIEQUAL (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8)]
[(ram, 0x4c87c0, 4) MULTIEQUAL (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4)]
[(ram, 0x4c7da0, 8) MULTIEQUAL (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8)]
[(ram, 0x4c7d80, 4) MULTIEQUAL (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4)]
[(ram, 0x4c6118, 8) MULTIEQUAL (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8)]
[(ram, 0x4c4a68, 8) MULTIEQUAL (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(stack, 0xffffffffffffff20, 8) COPY (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x482fc0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffff28, 8) , (const, 0x0, 8), (stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff28, 8) COPY (register, 0x18, 8)]
[ ---  BRANCH (ram, 0x482fc0, 1)]
[(stack, 0xffffffffffffffb8, 16) MULTIEQUAL (stack, 0xffffffffffffffb8, 16) , (stack, 0xffffffffffffffb8, 16) , (stack, 0xffffffffffffffb8, 16) , (stack, 0xffffffffffffffb8, 16)]
[(stack, 0xffffffffffffffa8, 16) MULTIEQUAL (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16)]
[(stack, 0xffffffffffffff98, 16) MULTIEQUAL (stack, 0xffffffffffffff98, 16) , (stack, 0xffffffffffffff98, 16) , (stack, 0xffffffffffffff98, 16) , (stack, 0xffffffffffffff98, 16)]
[(stack, 0xffffffffffffff88, 16) MULTIEQUAL (stack, 0xffffffffffffff88, 16) , (stack, 0xffffffffffffff88, 16) , (stack, 0xffffffffffffff88, 16) , (stack, 0xffffffffffffff88, 16)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(ram, 0x4c8850, 8) MULTIEQUAL (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8)]
[(ram, 0x4c8840, 4) MULTIEQUAL (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4)]
[(ram, 0x4c87d0, 8) MULTIEQUAL (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8)]
[(ram, 0x4c87c0, 4) MULTIEQUAL (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4)]
[(ram, 0x4c7da0, 8) MULTIEQUAL (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8)]
[(ram, 0x4c7d80, 4) MULTIEQUAL (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4)]
[(ram, 0x4c6118, 8) MULTIEQUAL (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8)]
[(ram, 0x4c4a68, 8) MULTIEQUAL (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x1000123c, 8) COPY (stack, 0xffffffffffffff20, 8), (stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[ ---  CBRANCH (ram, 0x482e28, 1) , (unique, 0xc900, 1), (unique, 0xc900, 1) INT_LESS (register, 0x18, 8) , (stack, 0xffffffffffffff70, 8), (register, 0x18, 8) PTRADD (register, 0x18, 8) , (const, 0x3, 8) , (const, 0x8, 8), (stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[ ---  CBRANCH (ram, 0x482ce5, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffff28, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x482ce5, 1) , (unique, 0xc900, 1), (unique, 0xc900, 1) INT_LESSEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff70, 8) COPY (stack, 0xffffffffffffff50, 8)]
[(unique, 0x100012d4, 8) COPY (stack, 0xffffffffffffff28, 8)]
[ ---  BRANCH (ram, 0x48301d, 1)]
[(stack, 0xffffffffffffffb8, 16) MULTIEQUAL (stack, 0xffffffffffffffb8, 16) , (stack, 0xffffffffffffffb8, 16) , (stack, 0xffffffffffffffb8, 16)]
[(stack, 0xffffffffffffffa8, 16) MULTIEQUAL (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16)]
[(stack, 0xffffffffffffff98, 16) MULTIEQUAL (stack, 0xffffffffffffff98, 16) , (stack, 0xffffffffffffff98, 16) , (stack, 0xffffffffffffff98, 16)]
[(stack, 0xffffffffffffff88, 16) MULTIEQUAL (stack, 0xffffffffffffff88, 16) , (stack, 0xffffffffffffff88, 16) , (stack, 0xffffffffffffff88, 16)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(ram, 0x4c8850, 8) MULTIEQUAL (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8)]
[(ram, 0x4c8840, 4) MULTIEQUAL (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4)]
[(ram, 0x4c87d0, 8) MULTIEQUAL (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8)]
[(ram, 0x4c87c0, 4) MULTIEQUAL (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4)]
[(ram, 0x4c7da0, 8) MULTIEQUAL (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8)]
[(ram, 0x4c7d80, 4) MULTIEQUAL (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4)]
[(ram, 0x4c6118, 8) MULTIEQUAL (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8)]
[(ram, 0x4c4a68, 8) MULTIEQUAL (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x483010, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x25, 4), (register, 0x0, 4) SUBPIECE (unique, 0xbd80, 8) , (const, 0x0, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x1, 8) , (const, 0x8, 8), (register, 0x18, 8) MULTIEQUAL (unique, 0x100012d4, 8) , (register, 0x18, 8) , (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x483127, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESSEQUAL (register, 0x18, 8) , (unique, 0x1000123c, 8), (register, 0x18, 8) PTRADD (register, 0x18, 8) , (const, 0x3, 8) , (const, 0x8, 8)]
[(register, 0xb0, 8) CAST (unique, 0x10001a6d, 8), (unique, 0x10001a6d, 8) INT_ADD (unique, 0x10001a5d, 8) , (unique, 0x10001a65, 8), (unique, 0x10001a65, 8) CAST (unique, 0xbd80, 8), (unique, 0x10001a5d, 8) CAST (stack, 0xffffffffffffff70, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x18, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (register, 0x98, 8) , (const, 0x5d, 8) , (const, 0x8, 8)]
[(unique, 0xbc00, 2) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) CAST (unique, 0x10001a7d, 8), (unique, 0x10001a7d, 8) INT_ADD (unique, 0x10001a75, 8) , (unique, 0x3300, 8), (unique, 0x10001a75, 8) CAST (stack, 0xffffffffffffff58, 8), (unique, 0x3300, 8) INT_MULT (register, 0x0, 8) , (const, 0x2, 8), (register, 0x0, 8) INT_RIGHT (unique, 0x10001a55, 8) , (const, 0x20, 4), (unique, 0x10001a55, 8) CAST (unique, 0xbd80, 8)]
[(stack, 0xffffffffffffff80, 8) COPY (unique, 0x3400, 8), (unique, 0x3400, 8) CAST (unique, 0x10001a85, 8), (unique, 0x10001a85, 8) INT_ADD (stack, 0xffffffffffffff60, 8) , (unique, 0x3300, 8), (unique, 0x3300, 8) INT_MULT (register, 0x0, 8) , (const, 0x18, 8), (register, 0x0, 8) INT_RIGHT (unique, 0x10001a55, 8) , (const, 0x20, 4), (unique, 0x10001a55, 8) CAST (unique, 0xbd80, 8)]
[(unique, 0x1000129c, 8) COPY (register, 0x98, 8)]
[ ---  CBRANCH (ram, 0x483690, 1) , (unique, 0x13280, 1), (unique, 0x13280, 1) INT_EQUAL (register, 0x0, 1) , (const, 0x0, 1), (register, 0x0, 1) INT_RIGHT (unique, 0xbb00, 1) , (const, 0x4, 4), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) CAST (unique, 0x10001a95, 8), (unique, 0x10001a95, 8) INT_ADD (unique, 0x10001a8d, 8) , (const, 0x4, 8), (unique, 0x10001a8d, 8) CAST (unique, 0x3400, 8), (unique, 0x3400, 8) CAST (unique, 0x10001a85, 8), (unique, 0x10001a85, 8) INT_ADD (stack, 0xffffffffffffff60, 8) , (unique, 0x3300, 8), (unique, 0x3300, 8) INT_MULT (register, 0x0, 8) , (const, 0x18, 8), (register, 0x0, 8) INT_RIGHT (unique, 0x10001a55, 8) , (const, 0x20, 4), (unique, 0x10001a55, 8) CAST (unique, 0xbd80, 8)]
[ ---  CBRANCH (ram, 0x483690, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (register, 0x0, 4) , (const, 0x2, 4), (register, 0x0, 4) INT_SUB (register, 0x0, 4) , (const, 0x1, 4), (register, 0x0, 4) INT_AND (register, 0x0, 4) , (const, 0x3, 4), (register, 0x0, 4) INT_ZEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) CAST (unique, 0x10001aa5, 8), (unique, 0x10001aa5, 8) INT_ADD (unique, 0x10001a9d, 8) , (const, 0x5, 8), (unique, 0x10001a9d, 8) CAST (unique, 0x3400, 8)]
[ ---  CBRANCH (ram, 0x4841c7, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x3400, 8) , (unique, 0x10001aad, 8), (unique, 0x10001aad, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (register, 0x98, 8) , (const, 0x81, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x48308c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10001ab5, 8), (unique, 0x10001ab5, 8) CAST (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (register, 0x98, 8) , (const, 0x82, 8) , (const, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3200, 8) , (unique, 0x10001abd, 8), (unique, 0x10001abd, 8) CAST (unique, 0x3400, 8), (unique, 0x3200, 8) PTRADD (register, 0x98, 8) , (const, 0x81, 8) , (const, 0x8, 8)]
[(ram, 0x4c4a68, 8) INDIRECT (ram, 0x4c4a68, 8) , (const, 0x81c, 4), (ram, 0x4c4a68, 8) INDIRECT (ram, 0x4c4a68, 8) , (const, 0x819, 4)]
[(ram, 0x4c6118, 8) INDIRECT (ram, 0x4c6118, 8) , (const, 0x81c, 4), (ram, 0x4c6118, 8) INDIRECT (ram, 0x4c6118, 8) , (const, 0x819, 4)]
[(ram, 0x4c7d80, 4) INDIRECT (ram, 0x4c7d80, 4) , (const, 0x81c, 4), (ram, 0x4c7d80, 4) INDIRECT (ram, 0x4c7d80, 4) , (const, 0x819, 4)]
[(ram, 0x4c7da0, 8) INDIRECT (ram, 0x4c7da0, 8) , (const, 0x81c, 4), (ram, 0x4c7da0, 8) INDIRECT (ram, 0x4c7da0, 8) , (const, 0x819, 4)]
[(ram, 0x4c87c0, 4) INDIRECT (ram, 0x4c87c0, 4) , (const, 0x81c, 4), (ram, 0x4c87c0, 4) INDIRECT (ram, 0x4c87c0, 4) , (const, 0x819, 4)]
[(ram, 0x4c87d0, 8) INDIRECT (ram, 0x4c87d0, 8) , (const, 0x81c, 4), (ram, 0x4c87d0, 8) INDIRECT (ram, 0x4c87d0, 8) , (const, 0x819, 4)]
[(ram, 0x4c8840, 4) INDIRECT (ram, 0x4c8840, 4) , (const, 0x81c, 4), (ram, 0x4c8840, 4) INDIRECT (ram, 0x4c8840, 4) , (const, 0x819, 4)]
[(ram, 0x4c8850, 8) INDIRECT (ram, 0x4c8850, 8) , (const, 0x81c, 4), (ram, 0x4c8850, 8) INDIRECT (ram, 0x4c8850, 8) , (const, 0x819, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001ac5, 8) , (const, 0x0, 4), (unique, 0x10001ac5, 8) CAST (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (register, 0x98, 8) , (const, 0x82, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x4830c1, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x3400, 8) , (const, 0x0, 8), (unique, 0x3400, 8) PTRADD (unique, 0xbd80, 8) , (unique, 0x10001015, 8) , (const, 0x1, 8), (unique, 0x10001015, 8) INT_MULT (register, 0x8, 8) , (const, 0x18, 8), (register, 0x8, 8) INT_ZEXT (register, 0x8, 4), (register, 0x8, 4) INT_AND (register, 0x8, 4) , (const, 0x7fff, 4), (register, 0x8, 4) INT_ZEXT (unique, 0xbc00, 2)]
[ ---  CBRANCH (ram, 0x4830c1, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10001acd, 8), (unique, 0x10001acd, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0x3400, 8) , (const, 0x8, 8) , (const, 0x1, 8)]
[(register, 0x80, 8) COPY (const, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001add, 8) , (const, 0x0, 8), (unique, 0x10001add, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001ae5, 8) , (const, 0x9, 8), (unique, 0x10001ae5, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff0, 8) , (const, 0x1, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001aed, 8) , (const, 0x4830e6, 8), (unique, 0x10001aed, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xffffffffffffffe8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x866, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x866, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x865, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x852, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x843, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x866, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x865, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x852, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x843, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x866, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x865, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x852, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x843, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x866, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x865, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x852, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x843, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x866, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x865, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x852, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x843, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x866, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x865, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x852, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x843, 4)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x866, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x865, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x852, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x843, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x866, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x865, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x852, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x843, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x866, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x865, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x852, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x843, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x866, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x865, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x852, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x843, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x866, 4), (stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x865, 4), (stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x852, 4), (stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x843, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x866, 4), (stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x865, 4), (stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x852, 4), (stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x843, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x866, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x865, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x852, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x843, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x866, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x865, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x852, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x843, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x866, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x865, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x852, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x843, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x866, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x865, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x852, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x843, 4)]
[(stack, 0xffffffffffffff88, 16) INDIRECT (stack, 0xffffffffffffff88, 16) , (const, 0x866, 4), (stack, 0xffffffffffffff88, 16) INDIRECT (stack, 0xffffffffffffff88, 16) , (const, 0x865, 4), (stack, 0xffffffffffffff88, 16) INDIRECT (stack, 0xffffffffffffff88, 16) , (const, 0x852, 4), (stack, 0xffffffffffffff88, 16) INDIRECT (stack, 0xffffffffffffff88, 16) , (const, 0x843, 4)]
[(stack, 0xffffffffffffff98, 16) INDIRECT (stack, 0xffffffffffffff98, 16) , (const, 0x866, 4), (stack, 0xffffffffffffff98, 16) INDIRECT (stack, 0xffffffffffffff98, 16) , (const, 0x865, 4), (stack, 0xffffffffffffff98, 16) INDIRECT (stack, 0xffffffffffffff98, 16) , (const, 0x852, 4), (stack, 0xffffffffffffff98, 16) INDIRECT (stack, 0xffffffffffffff98, 16) , (const, 0x843, 4)]
[(stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0x866, 4), (stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0x865, 4), (stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0x852, 4), (stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0x843, 4)]
[(stack, 0xffffffffffffffb8, 16) INDIRECT (stack, 0xffffffffffffffb8, 16) , (const, 0x866, 4), (stack, 0xffffffffffffffb8, 16) INDIRECT (stack, 0xffffffffffffffb8, 16) , (const, 0x865, 4), (stack, 0xffffffffffffffb8, 16) INDIRECT (stack, 0xffffffffffffffb8, 16) , (const, 0x852, 4), (stack, 0xffffffffffffffb8, 16) INDIRECT (stack, 0xffffffffffffffb8, 16) , (const, 0x843, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3200, 8) , (unique, 0x10001afd, 8), (unique, 0x10001afd, 8) CAST (register, 0x0, 8), (unique, 0x3200, 8) PTRADD (register, 0x98, 8) , (const, 0x83, 8) , (const, 0x8, 8), (register, 0x0, 8) CAST (unique, 0x10001af5, 8), (unique, 0x10001af5, 8) CALL (ram, 0x481760, 8) , (register, 0x38, 8) , (register, 0x98, 8) , (unique, 0x3100, 8) , (unique, 0x10001254, 8) , (register, 0x80, 8), (register, 0x38, 8) INT_ADD (register, 0x38, 8) , (stack, 0xffffffffffffff38, 8), (unique, 0x10001254, 8) COPY (stack, 0xffffffffffffff40, 8), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x852, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x852, 4), (unique, 0x3100, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff80, 8), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x843, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x843, 4), (register, 0x38, 8) INT_ZEXT (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10001ad5, 8), (unique, 0x10001ad5, 8) CAST (unique, 0x3400, 8), (register, 0x80, 8) MULTIEQUAL (unique, 0x3400, 8) , (unique, 0x3400, 8) , (register, 0x80, 8)]
[(ram, 0x4c4a68, 8) INDIRECT (ram, 0x4c4a68, 8) , (const, 0x86f, 4), (ram, 0x4c4a68, 8) INDIRECT (ram, 0x4c4a68, 8) , (const, 0x86c, 4), (ram, 0x4c4a68, 8) INDIRECT (ram, 0x4c4a68, 8) , (const, 0x866, 4)]
[(ram, 0x4c6118, 8) INDIRECT (ram, 0x4c6118, 8) , (const, 0x86f, 4), (ram, 0x4c6118, 8) INDIRECT (ram, 0x4c6118, 8) , (const, 0x86c, 4), (ram, 0x4c6118, 8) INDIRECT (ram, 0x4c6118, 8) , (const, 0x866, 4)]
[(ram, 0x4c7d80, 4) INDIRECT (ram, 0x4c7d80, 4) , (const, 0x86f, 4), (ram, 0x4c7d80, 4) INDIRECT (ram, 0x4c7d80, 4) , (const, 0x86c, 4), (ram, 0x4c7d80, 4) INDIRECT (ram, 0x4c7d80, 4) , (const, 0x866, 4)]
[(ram, 0x4c7da0, 8) INDIRECT (ram, 0x4c7da0, 8) , (const, 0x86f, 4), (ram, 0x4c7da0, 8) INDIRECT (ram, 0x4c7da0, 8) , (const, 0x86c, 4), (ram, 0x4c7da0, 8) INDIRECT (ram, 0x4c7da0, 8) , (const, 0x866, 4)]
[(ram, 0x4c87c0, 4) INDIRECT (ram, 0x4c87c0, 4) , (const, 0x86f, 4), (ram, 0x4c87c0, 4) INDIRECT (ram, 0x4c87c0, 4) , (const, 0x86c, 4), (ram, 0x4c87c0, 4) INDIRECT (ram, 0x4c87c0, 4) , (const, 0x866, 4)]
[(ram, 0x4c87d0, 8) INDIRECT (ram, 0x4c87d0, 8) , (const, 0x86f, 4), (ram, 0x4c87d0, 8) INDIRECT (ram, 0x4c87d0, 8) , (const, 0x86c, 4), (ram, 0x4c87d0, 8) INDIRECT (ram, 0x4c87d0, 8) , (const, 0x866, 4)]
[(ram, 0x4c8840, 4) INDIRECT (ram, 0x4c8840, 4) , (const, 0x86f, 4), (ram, 0x4c8840, 4) INDIRECT (ram, 0x4c8840, 4) , (const, 0x86c, 4), (ram, 0x4c8840, 4) INDIRECT (ram, 0x4c8840, 4) , (const, 0x866, 4)]
[(ram, 0x4c8850, 8) INDIRECT (ram, 0x4c8850, 8) , (const, 0x86f, 4), (ram, 0x4c8850, 8) INDIRECT (ram, 0x4c8850, 8) , (const, 0x86c, 4), (ram, 0x4c8850, 8) INDIRECT (ram, 0x4c8850, 8) , (const, 0x866, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3200, 8) , (unique, 0x10001b05, 8), (unique, 0x10001b05, 8) CAST (stack, 0xffffffffffffff80, 8), (unique, 0x3200, 8) PTRADD (register, 0x98, 8) , (const, 0x84, 8) , (const, 0x8, 8), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x866, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x865, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x852, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x843, 4)]
[(unique, 0xbd80, 8) CAST (unique, 0x10001b0d, 8), (unique, 0x10001b0d, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (register, 0x98, 8) , (const, 0x83, 8) , (const, 0x8, 8)]
[(stack, 0xffffffffffffff80, 8) COPY (unique, 0x10001b15, 8), (unique, 0x10001b15, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (register, 0x98, 8) , (const, 0x84, 8) , (const, 0x8, 8)]
[ ---  BRANCH (ram, 0x4830fb, 1)]
[(stack, 0xffffffffffffffb8, 16) MULTIEQUAL (stack, 0xffffffffffffffb8, 16) , (stack, 0xffffffffffffffb8, 16)]
[(stack, 0xffffffffffffffa8, 16) MULTIEQUAL (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16)]
[(stack, 0xffffffffffffff98, 16) MULTIEQUAL (stack, 0xffffffffffffff98, 16) , (stack, 0xffffffffffffff98, 16)]
[(stack, 0xffffffffffffff88, 16) MULTIEQUAL (stack, 0xffffffffffffff88, 16) , (stack, 0xffffffffffffff88, 16)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(ram, 0x4c8850, 8) MULTIEQUAL (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8)]
[(ram, 0x4c8840, 4) MULTIEQUAL (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4)]
[(ram, 0x4c87d0, 8) MULTIEQUAL (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8)]
[(ram, 0x4c87c0, 4) MULTIEQUAL (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4)]
[(ram, 0x4c7da0, 8) MULTIEQUAL (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8)]
[(ram, 0x4c7d80, 4) MULTIEQUAL (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4)]
[(ram, 0x4c6118, 8) MULTIEQUAL (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8)]
[(ram, 0x4c4a68, 8) MULTIEQUAL (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (unique, 0xbd80, 8)]
[ ---  CBRANCH (ram, 0x483dd8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffff80, 8) , (const, 0x0, 8), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10001b25, 8), (unique, 0x10001b25, 8) INT_ADD (unique, 0x10001b1d, 8) , (const, 0x4, 8), (unique, 0x10001b1d, 8) CAST (stack, 0xffffffffffffff80, 8)]
[(unique, 0x10001294, 8) COPY (register, 0x0, 8)]
[ ---  BRANCH (ram, 0x483696, 1)]
[(stack, 0xffffffffffffffb8, 16) MULTIEQUAL (stack, 0xffffffffffffffb8, 16) , (stack, 0xffffffffffffffb8, 16) , (stack, 0xffffffffffffffb8, 16)]
[(stack, 0xffffffffffffffa8, 16) MULTIEQUAL (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16)]
[(stack, 0xffffffffffffff98, 16) MULTIEQUAL (stack, 0xffffffffffffff98, 16) , (stack, 0xffffffffffffff98, 16) , (stack, 0xffffffffffffff98, 16)]
[(stack, 0xffffffffffffff88, 16) MULTIEQUAL (stack, 0xffffffffffffff88, 16) , (stack, 0xffffffffffffff88, 16) , (stack, 0xffffffffffffff88, 16)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(ram, 0x4c8850, 8) MULTIEQUAL (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8)]
[(ram, 0x4c8840, 4) MULTIEQUAL (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4)]
[(ram, 0x4c87d0, 8) MULTIEQUAL (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8)]
[(ram, 0x4c87c0, 4) MULTIEQUAL (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4)]
[(ram, 0x4c7da0, 8) MULTIEQUAL (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8)]
[(ram, 0x4c7d80, 4) MULTIEQUAL (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4)]
[(ram, 0x4c6118, 8) MULTIEQUAL (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8)]
[(ram, 0x4c4a68, 8) MULTIEQUAL (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x0, 8) MULTIEQUAL (unique, 0x10001294, 8) , (unique, 0x1000129c, 8) , (unique, 0x1000129c, 8)]
[(unique, 0xbd80, 8) CAST (unique, 0x10001b3d, 8), (unique, 0x10001b3d, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (stack, 0xffffffffffffff80, 8) , (const, 0x1, 8) , (const, 0x8, 8), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(register, 0x10, 1) INT_AND (unique, 0xbb00, 1) , (const, 0xf, 1), (unique, 0xbb00, 1) MULTIEQUAL (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1)]
[ ---  CBRANCH (ram, 0x484130, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc00, 2) , (const, 0xfff1, 2), (unique, 0xbc00, 2) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10001b35, 8), (unique, 0x10001b35, 8) INT_ADD (unique, 0x10001b2d, 8) , (const, 0x6, 8), (unique, 0x10001b2d, 8) CAST (stack, 0xffffffffffffff80, 8), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[ ---  CBRANCH (ram, 0x483104, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x10, 1) , (const, 0xa, 1)]
[ ---  CBRANCH (ram, 0x483104, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x10, 1) , (const, 0xa, 1)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x483104, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc00, 2) , (const, 0x0, 2)]
[(register, 0x90, 8) CAST (unique, 0x10001b55, 8), (unique, 0x10001b55, 8) INT_ADD (unique, 0x10001b45, 8) , (unique, 0x10001b4d, 8), (unique, 0x10001b4d, 8) CAST (unique, 0xbd80, 8), (unique, 0x10001b45, 8) CAST (unique, 0xbd80, 8)]
[(register, 0x90, 8) MULTIEQUAL (register, 0x90, 8) , (unique, 0xbd80, 8)]
[ ---  CBRANCH (ram, 0x48419d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffff34, 4) , (const, 0x0, 4)]
[(unique, 0x100013ac, 8) COPY (register, 0x90, 8)]
[ ---  CBRANCH (ram, 0x483734, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x98, 8) , (register, 0x0, 8)]
[(unique, 0x100013b4, 8) COPY (register, 0x90, 8)]
[ ---  CBRANCH (ram, 0x483734, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x10000772, 1) , (const, 0x0, 1), (unique, 0x10000772, 1) INT_AND (unique, 0xbb00, 1) , (const, 0x3, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x10001b65, 8), (unique, 0x10001b65, 8) INT_ADD (unique, 0x10001b5d, 8) , (const, 0x31c, 8), (unique, 0x10001b5d, 8) CAST (register, 0x0, 8)]
[(unique, 0x100013bc, 8) COPY (register, 0x90, 8)]
[ ---  CBRANCH (ram, 0x483734, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x100007bc, 1) , (const, 0x0, 1), (unique, 0x100007bc, 1) INT_AND (unique, 0xbb00, 1) , (const, 0x4, 1)]
[(stack, 0xffffffffffffff68, 8) COPY (register, 0x90, 8)]
[ ---  CBRANCH (ram, 0x483716, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10001b6d, 8), (unique, 0x10001b6d, 8) CAST (ram, 0x4c4a68, 8)]
[(register, 0x10, 8) COPY (const, 0x4b026e, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001b75, 8) , (const, 0x48372d, 8), (unique, 0x10001b75, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x965, 4)]
[(ram, 0x4c4a68, 8) INDIRECT (ram, 0x4c4a68, 8) , (const, 0x965, 4)]
[(ram, 0x4c6118, 8) INDIRECT (ram, 0x4c6118, 8) , (const, 0x965, 4)]
[(ram, 0x4c7d80, 4) INDIRECT (ram, 0x4c7d80, 4) , (const, 0x965, 4)]
[(ram, 0x4c7da0, 8) INDIRECT (ram, 0x4c7da0, 8) , (const, 0x965, 4)]
[(ram, 0x4c87c0, 4) INDIRECT (ram, 0x4c87c0, 4) , (const, 0x965, 4)]
[(ram, 0x4c87d0, 8) INDIRECT (ram, 0x4c87d0, 8) , (const, 0x965, 4)]
[(ram, 0x4c8840, 4) INDIRECT (ram, 0x4c8840, 4) , (const, 0x965, 4)]
[(ram, 0x4c8850, 8) INDIRECT (ram, 0x4c8850, 8) , (const, 0x965, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x965, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x964, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x965, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x964, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x965, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x964, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x965, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x964, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x965, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x964, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x965, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x964, 4)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x965, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x964, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x965, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x964, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x965, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x964, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x965, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x964, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x965, 4), (stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x964, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x965, 4), (stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x964, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x965, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x964, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x965, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x964, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x965, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x964, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x965, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x964, 4)]
[(stack, 0xffffffffffffff88, 16) INDIRECT (stack, 0xffffffffffffff88, 16) , (const, 0x965, 4), (stack, 0xffffffffffffff88, 16) INDIRECT (stack, 0xffffffffffffff88, 16) , (const, 0x964, 4)]
[(stack, 0xffffffffffffff98, 16) INDIRECT (stack, 0xffffffffffffff98, 16) , (const, 0x965, 4), (stack, 0xffffffffffffff98, 16) INDIRECT (stack, 0xffffffffffffff98, 16) , (const, 0x964, 4)]
[(stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0x965, 4), (stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0x964, 4)]
[(stack, 0xffffffffffffffb8, 16) INDIRECT (stack, 0xffffffffffffffb8, 16) , (const, 0x965, 4), (stack, 0xffffffffffffffb8, 16) INDIRECT (stack, 0xffffffffffffffb8, 16) , (const, 0x964, 4)]
[ ---  CALL (ram, 0x485480, 8) , (const, 0x2, 8) , (unique, 0x10000a08, 8) , (register, 0x10, 8), (unique, 0x10000a08, 8) COPY (const, 0x4b01f8, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0xbd80, 8) , (register, 0x10, 8)]
[(unique, 0x100013c4, 8) COPY (stack, 0xffffffffffffff68, 8), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x965, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x964, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001b7d, 8) , (const, 0x483737, 8), (unique, 0x10001b7d, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x96b, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4c4a68, 8) INDIRECT (ram, 0x4c4a68, 8) , (const, 0x96b, 4), (ram, 0x4c4a68, 8) MULTIEQUAL (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8)]
[(ram, 0x4c6118, 8) INDIRECT (ram, 0x4c6118, 8) , (const, 0x96b, 4), (ram, 0x4c6118, 8) MULTIEQUAL (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8)]
[(ram, 0x4c7d80, 4) INDIRECT (ram, 0x4c7d80, 4) , (const, 0x96b, 4), (ram, 0x4c7d80, 4) MULTIEQUAL (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4)]
[(ram, 0x4c7da0, 8) INDIRECT (ram, 0x4c7da0, 8) , (const, 0x96b, 4), (ram, 0x4c7da0, 8) MULTIEQUAL (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8)]
[(ram, 0x4c87c0, 4) INDIRECT (ram, 0x4c87c0, 4) , (const, 0x96b, 4), (ram, 0x4c87c0, 4) MULTIEQUAL (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4)]
[(ram, 0x4c87d0, 8) INDIRECT (ram, 0x4c87d0, 8) , (const, 0x96b, 4), (ram, 0x4c87d0, 8) MULTIEQUAL (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8)]
[(ram, 0x4c8840, 4) INDIRECT (ram, 0x4c8840, 4) , (const, 0x96b, 4), (ram, 0x4c8840, 4) MULTIEQUAL (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4)]
[(ram, 0x4c8850, 8) INDIRECT (ram, 0x4c8850, 8) , (const, 0x96b, 4), (ram, 0x4c8850, 8) MULTIEQUAL (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x96b, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x96a, 4), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x96b, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x96a, 4), (stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x96b, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x96a, 4), (stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x96b, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x96a, 4), (stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x96b, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x96a, 4), (stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x96b, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x96a, 4), (stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x96b, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x96a, 4), (stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x96b, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x96a, 4), (stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x96b, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x96a, 4), (stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x96b, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x96a, 4), (stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x96b, 4), (stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x96a, 4), (stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x96b, 4), (stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x96a, 4), (stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x96b, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x96a, 4), (stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x96b, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x96a, 4), (stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x96b, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x96a, 4), (stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x96b, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x96a, 4), (stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x96b, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x96a, 4), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff88, 16) INDIRECT (stack, 0xffffffffffffff88, 16) , (const, 0x96b, 4), (stack, 0xffffffffffffff88, 16) INDIRECT (stack, 0xffffffffffffff88, 16) , (const, 0x96a, 4), (stack, 0xffffffffffffff88, 16) MULTIEQUAL (stack, 0xffffffffffffff88, 16) , (stack, 0xffffffffffffff88, 16) , (stack, 0xffffffffffffff88, 16) , (stack, 0xffffffffffffff88, 16)]
[(stack, 0xffffffffffffff98, 16) INDIRECT (stack, 0xffffffffffffff98, 16) , (const, 0x96b, 4), (stack, 0xffffffffffffff98, 16) INDIRECT (stack, 0xffffffffffffff98, 16) , (const, 0x96a, 4), (stack, 0xffffffffffffff98, 16) MULTIEQUAL (stack, 0xffffffffffffff98, 16) , (stack, 0xffffffffffffff98, 16) , (stack, 0xffffffffffffff98, 16) , (stack, 0xffffffffffffff98, 16)]
[(stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0x96b, 4), (stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0x96a, 4), (stack, 0xffffffffffffffa8, 16) MULTIEQUAL (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16)]
[(stack, 0xffffffffffffffb8, 16) INDIRECT (stack, 0xffffffffffffffb8, 16) , (const, 0x96b, 4), (stack, 0xffffffffffffffb8, 16) INDIRECT (stack, 0xffffffffffffffb8, 16) , (const, 0x96a, 4), (stack, 0xffffffffffffffb8, 16) MULTIEQUAL (stack, 0xffffffffffffffb8, 16) , (stack, 0xffffffffffffffb8, 16) , (stack, 0xffffffffffffffb8, 16) , (stack, 0xffffffffffffffb8, 16)]
[ ---  CALLIND (unique, 0x10001b85, 8), (unique, 0x10001b85, 8) CAST (register, 0x90, 8), (register, 0x90, 8) MULTIEQUAL (unique, 0x100013ac, 8) , (unique, 0x100013b4, 8) , (unique, 0x100013bc, 8) , (unique, 0x100013c4, 8)]
[(register, 0x0, 8) PTRADD (unique, 0xbd80, 8) , (unique, 0x10001b8d, 8) , (const, 0x1, 8), (unique, 0x10001b8d, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x98, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[ ---  BRANCH (ram, 0x483115, 1)]
[(register, 0x0, 8) PTRADD (unique, 0xbd80, 8) , (unique, 0x10001b95, 8) , (const, 0x1, 8), (unique, 0x10001b95, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x98, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[ ---  BRANCH (ram, 0x483117, 1)]
[(stack, 0xffffffffffffffb8, 16) MULTIEQUAL (stack, 0xffffffffffffffb8, 16) , (stack, 0xffffffffffffffb8, 16) , (stack, 0xffffffffffffffb8, 16) , (stack, 0xffffffffffffffb8, 16)]
[(stack, 0xffffffffffffffa8, 16) MULTIEQUAL (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16)]
[(stack, 0xffffffffffffff98, 16) MULTIEQUAL (stack, 0xffffffffffffff98, 16) , (stack, 0xffffffffffffff98, 16) , (stack, 0xffffffffffffff98, 16) , (stack, 0xffffffffffffff98, 16)]
[(stack, 0xffffffffffffff88, 16) MULTIEQUAL (stack, 0xffffffffffffff88, 16) , (stack, 0xffffffffffffff88, 16) , (stack, 0xffffffffffffff88, 16) , (stack, 0xffffffffffffff88, 16)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(ram, 0x4c8850, 8) MULTIEQUAL (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8)]
[(ram, 0x4c8840, 4) MULTIEQUAL (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4)]
[(ram, 0x4c87d0, 8) MULTIEQUAL (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8)]
[(ram, 0x4c87c0, 4) MULTIEQUAL (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4)]
[(ram, 0x4c7da0, 8) MULTIEQUAL (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8)]
[(ram, 0x4c7d80, 4) MULTIEQUAL (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4)]
[(ram, 0x4c6118, 8) MULTIEQUAL (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8)]
[(ram, 0x4c4a68, 8) MULTIEQUAL (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x0, 8) PTRADD (unique, 0xbd80, 8) , (unique, 0x10001b9d, 8) , (const, 0x1, 8), (unique, 0x10001b9d, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x98, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x483117, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffff34, 4) , (const, 0x0, 4), (stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001ba5, 8) , (const, 0x483117, 8), (unique, 0x10001ba5, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x89f, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4c4a68, 8) INDIRECT (ram, 0x4c4a68, 8) , (const, 0x89f, 4), (ram, 0x4c4a68, 8) MULTIEQUAL (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8)]
[(ram, 0x4c6118, 8) INDIRECT (ram, 0x4c6118, 8) , (const, 0x89f, 4), (ram, 0x4c6118, 8) MULTIEQUAL (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8)]
[(ram, 0x4c7d80, 4) INDIRECT (ram, 0x4c7d80, 4) , (const, 0x89f, 4), (ram, 0x4c7d80, 4) MULTIEQUAL (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4)]
[(ram, 0x4c7da0, 8) INDIRECT (ram, 0x4c7da0, 8) , (const, 0x89f, 4), (ram, 0x4c7da0, 8) MULTIEQUAL (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8)]
[(ram, 0x4c87c0, 4) INDIRECT (ram, 0x4c87c0, 4) , (const, 0x89f, 4), (ram, 0x4c87c0, 4) MULTIEQUAL (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4)]
[(ram, 0x4c87d0, 8) INDIRECT (ram, 0x4c87d0, 8) , (const, 0x89f, 4), (ram, 0x4c87d0, 8) MULTIEQUAL (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8)]
[(ram, 0x4c8840, 4) INDIRECT (ram, 0x4c8840, 4) , (const, 0x89f, 4), (ram, 0x4c8840, 4) MULTIEQUAL (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4)]
[(ram, 0x4c8850, 8) INDIRECT (ram, 0x4c8850, 8) , (const, 0x89f, 4), (ram, 0x4c8850, 8) MULTIEQUAL (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x89f, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x89e, 4), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x89f, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x89e, 4), (stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x89f, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x89e, 4), (stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x89f, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x89e, 4), (stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x89f, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x89e, 4), (stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x89f, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x89e, 4), (stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x89f, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x89e, 4), (stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x89f, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x89e, 4), (stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x89f, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x89e, 4), (stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x89f, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x89e, 4), (stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x89f, 4), (stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x89e, 4), (stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x89f, 4), (stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x89e, 4), (stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x89f, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x89e, 4), (stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x89f, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x89e, 4), (stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x89f, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x89e, 4), (stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x89f, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x89e, 4), (stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x89f, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x89e, 4), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff88, 16) INDIRECT (stack, 0xffffffffffffff88, 16) , (const, 0x89f, 4), (stack, 0xffffffffffffff88, 16) INDIRECT (stack, 0xffffffffffffff88, 16) , (const, 0x89e, 4), (stack, 0xffffffffffffff88, 16) MULTIEQUAL (stack, 0xffffffffffffff88, 16) , (stack, 0xffffffffffffff88, 16)]
[(stack, 0xffffffffffffff98, 16) INDIRECT (stack, 0xffffffffffffff98, 16) , (const, 0x89f, 4), (stack, 0xffffffffffffff98, 16) INDIRECT (stack, 0xffffffffffffff98, 16) , (const, 0x89e, 4), (stack, 0xffffffffffffff98, 16) MULTIEQUAL (stack, 0xffffffffffffff98, 16) , (stack, 0xffffffffffffff98, 16)]
[(stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0x89f, 4), (stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0x89e, 4), (stack, 0xffffffffffffffa8, 16) MULTIEQUAL (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16)]
[(stack, 0xffffffffffffffb8, 16) INDIRECT (stack, 0xffffffffffffffb8, 16) , (const, 0x89f, 4), (stack, 0xffffffffffffffb8, 16) INDIRECT (stack, 0xffffffffffffffb8, 16) , (const, 0x89e, 4), (stack, 0xffffffffffffffb8, 16) MULTIEQUAL (stack, 0xffffffffffffffb8, 16) , (stack, 0xffffffffffffffb8, 16)]
[(register, 0x0, 8) CAST (unique, 0x10001bad, 8), (unique, 0x10001bad, 8) CALLIND (register, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[(stack, 0xffffffffffffffb8, 16) MULTIEQUAL (stack, 0xffffffffffffffb8, 16) , (stack, 0xffffffffffffffb8, 16) , (stack, 0xffffffffffffffb8, 16)]
[(stack, 0xffffffffffffffa8, 16) MULTIEQUAL (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16)]
[(stack, 0xffffffffffffff98, 16) MULTIEQUAL (stack, 0xffffffffffffff98, 16) , (stack, 0xffffffffffffff98, 16) , (stack, 0xffffffffffffff98, 16)]
[(stack, 0xffffffffffffff88, 16) MULTIEQUAL (stack, 0xffffffffffffff88, 16) , (stack, 0xffffffffffffff88, 16) , (stack, 0xffffffffffffff88, 16)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4c4a68, 8) INDIRECT (ram, 0x4c4a68, 8) , (const, 0x8aa, 4), (ram, 0x4c4a68, 8) MULTIEQUAL (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8)]
[(ram, 0x4c6118, 8) INDIRECT (ram, 0x4c6118, 8) , (const, 0x8aa, 4), (ram, 0x4c6118, 8) MULTIEQUAL (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8)]
[(ram, 0x4c7d80, 4) INDIRECT (ram, 0x4c7d80, 4) , (const, 0x8aa, 4), (ram, 0x4c7d80, 4) MULTIEQUAL (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4)]
[(ram, 0x4c7da0, 8) INDIRECT (ram, 0x4c7da0, 8) , (const, 0x8aa, 4), (ram, 0x4c7da0, 8) MULTIEQUAL (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8)]
[(ram, 0x4c87c0, 4) INDIRECT (ram, 0x4c87c0, 4) , (const, 0x8aa, 4), (ram, 0x4c87c0, 4) MULTIEQUAL (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4)]
[(ram, 0x4c87d0, 8) INDIRECT (ram, 0x4c87d0, 8) , (const, 0x8aa, 4), (ram, 0x4c87d0, 8) MULTIEQUAL (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8)]
[(ram, 0x4c8840, 4) INDIRECT (ram, 0x4c8840, 4) , (const, 0x8aa, 4), (ram, 0x4c8840, 4) MULTIEQUAL (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4)]
[(ram, 0x4c8850, 8) INDIRECT (ram, 0x4c8850, 8) , (const, 0x8aa, 4), (ram, 0x4c8850, 8) MULTIEQUAL (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0xb0, 8) , (register, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x48301d, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (unique, 0x1000123c, 8) , (register, 0x18, 8), (register, 0x18, 8) PTRADD (register, 0x18, 8) , (const, 0x3, 8) , (const, 0x8, 8)]
[(stack, 0xffffffffffffff28, 8) COPY (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x482ce5, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESSEQUAL (register, 0x30, 8) , (unique, 0x3400, 8)]
[(stack, 0xffffffffffffff58, 8) COPY (unique, 0xbd80, 8)]
[(stack, 0xffffffffffffff50, 8) COPY (unique, 0x10001032, 8)]
[(unique, 0x10001584, 8) COPY (register, 0x98, 8)]
[(stack, 0xffffffffffffffb8, 16) MULTIEQUAL (stack, 0xffffffffffffffb8, 16) , (stack, 0xffffffffffffffb8, 16)]
[(stack, 0xffffffffffffffa8, 16) MULTIEQUAL (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16)]
[(stack, 0xffffffffffffff98, 16) MULTIEQUAL (stack, 0xffffffffffffff98, 16) , (stack, 0xffffffffffffff98, 16)]
[(stack, 0xffffffffffffff88, 16) MULTIEQUAL (stack, 0xffffffffffffff88, 16) , (stack, 0xffffffffffffff88, 16)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(ram, 0x4c8850, 8) MULTIEQUAL (unique, 0x10001067, 8) , (ram, 0x4c8850, 8)]
[(ram, 0x4c8840, 4) MULTIEQUAL (unique, 0x10001063, 4) , (ram, 0x4c8840, 4)]
[(ram, 0x4c87d0, 8) MULTIEQUAL (unique, 0x1000105b, 8) , (ram, 0x4c87d0, 8)]
[(ram, 0x4c87c0, 4) MULTIEQUAL (unique, 0x10001057, 4) , (ram, 0x4c87c0, 4)]
[(ram, 0x4c7da0, 8) MULTIEQUAL (unique, 0x1000104f, 8) , (ram, 0x4c7da0, 8)]
[(ram, 0x4c7d80, 4) MULTIEQUAL (unique, 0x1000104b, 4) , (ram, 0x4c7d80, 4)]
[(ram, 0x4c6118, 8) MULTIEQUAL (unique, 0x10001043, 8) , (ram, 0x4c6118, 8)]
[(ram, 0x4c4a68, 8) MULTIEQUAL (unique, 0x1000103b, 8) , (ram, 0x4c4a68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x1000125c, 8) COPY (stack, 0xffffffffffffff40, 8), (stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(register, 0xa0, 8) INT_AND (unique, 0x10001bb5, 8) , (const, 0xffffffff, 8), (unique, 0x10001bb5, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x1, 8) , (const, 0x8, 8), (register, 0x18, 8) MULTIEQUAL (unique, 0x3400, 8) , (register, 0x18, 8)]
[(unique, 0x10001654, 8) COPY (register, 0x98, 8), (register, 0x98, 8) MULTIEQUAL (unique, 0x10001584, 8) , (unique, 0x1000158c, 8)]
[ ---  CBRANCH (ram, 0x483bc0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xa8, 4) , (const, 0x25, 4), (register, 0xa8, 4) SUBPIECE (unique, 0xbd80, 8) , (const, 0x0, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x1, 8) , (const, 0x8, 8), (register, 0x18, 8) MULTIEQUAL (unique, 0x3400, 8) , (register, 0x18, 8)]
[(stack, 0xffffffffffffff28, 8) COPY (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x483890, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffff50, 8) , (const, 0x0, 8)]
[(stack, 0xffffffffffffff50, 8) COPY (register, 0x18, 8)]
[ ---  BRANCH (ram, 0x483890, 1)]
[(stack, 0xffffffffffffff68, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10001bcd, 8), (unique, 0x10001bcd, 8) INT_ADD (unique, 0x10001bbd, 8) , (unique, 0x10001bc5, 8), (unique, 0x10001bc5, 8) CAST (unique, 0xbd80, 8), (unique, 0x10001bbd, 8) CAST (stack, 0xffffffffffffff58, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x18, 8)]
[(stack, 0xffffffffffffff80, 8) COPY (unique, 0x3400, 8), (unique, 0x3400, 8) CAST (unique, 0x10001bdd, 8), (unique, 0x10001bdd, 8) INT_ADD (stack, 0xffffffffffffff60, 8) , (unique, 0x3300, 8), (unique, 0x3300, 8) INT_MULT (register, 0x0, 8) , (const, 0x18, 8), (register, 0x0, 8) INT_RIGHT (unique, 0x10001bd5, 8) , (const, 0x20, 4), (unique, 0x10001bd5, 8) CAST (unique, 0xbd80, 8)]
[ ---  CBRANCH (ram, 0x483cc0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xa0, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x483cc0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xa0, 8) , (const, 0x26, 8)]
[(ram, 0x4c4a68, 8) INDIRECT (ram, 0x4c4a68, 8) , (const, 0x12d8, 4)]
[(ram, 0x4c6118, 8) INDIRECT (ram, 0x4c6118, 8) , (const, 0x12d8, 4)]
[(ram, 0x4c7d80, 4) INDIRECT (ram, 0x4c7d80, 4) , (const, 0x12d8, 4)]
[(ram, 0x4c7da0, 8) INDIRECT (ram, 0x4c7da0, 8) , (const, 0x12d8, 4)]
[(ram, 0x4c87c0, 4) INDIRECT (ram, 0x4c87c0, 4) , (const, 0x12d8, 4)]
[(ram, 0x4c87d0, 8) INDIRECT (ram, 0x4c87d0, 8) , (const, 0x12d8, 4)]
[(ram, 0x4c8840, 4) INDIRECT (ram, 0x4c8840, 4) , (const, 0x12d8, 4)]
[(ram, 0x4c8850, 8) INDIRECT (ram, 0x4c8850, 8) , (const, 0x12d8, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) PTRADD (unique, 0xbd80, 8) , (unique, 0x10001be5, 8) , (const, 0x1, 8), (unique, 0x10001be5, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x98, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[ ---  BRANCH (ram, 0x483890, 1)]
[ ---  CBRANCH (ram, 0x483890, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xa0, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x483be8, 1) , (unique, 0x13280, 1), (unique, 0x13280, 1) INT_EQUAL (register, 0x0, 1) , (const, 0x0, 1), (register, 0x0, 1) INT_RIGHT (unique, 0xbb00, 1) , (const, 0x4, 4), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10001bf5, 8), (unique, 0x10001bf5, 8) INT_ADD (unique, 0x10001bed, 8) , (const, 0x4, 8), (unique, 0x10001bed, 8) CAST (unique, 0x3400, 8)]
[ ---  CBRANCH (ram, 0x483be8, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (register, 0x0, 4) , (const, 0x2, 4), (register, 0x0, 4) INT_SUB (register, 0x0, 4) , (const, 0x1, 4), (register, 0x0, 4) INT_AND (register, 0x0, 4) , (const, 0x3, 4), (register, 0x0, 4) INT_ZEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10001c05, 8), (unique, 0x10001c05, 8) INT_ADD (unique, 0x10001bfd, 8) , (const, 0x5, 8), (unique, 0x10001bfd, 8) CAST (unique, 0x3400, 8)]
[ ---  CBRANCH (ram, 0x483d12, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc00, 2) , (const, 0xfff1, 2), (unique, 0xbc00, 2) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10001c15, 8), (unique, 0x10001c15, 8) INT_ADD (unique, 0x10001c0d, 8) , (const, 0x6, 8), (unique, 0x10001c0d, 8) CAST (unique, 0x3400, 8)]
[ ---  CBRANCH (ram, 0x483e6a, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x3400, 8) , (unique, 0x10001c1d, 8), (unique, 0x10001c1d, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (register, 0x98, 8) , (const, 0x81, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x484175, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (register, 0xa0, 8) , (const, 0x25, 8)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10001c25, 8), (unique, 0x10001c25, 8) CAST (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (register, 0x98, 8) , (const, 0x82, 8) , (const, 0x8, 8)]
[(unique, 0x10000607, 4) INT_ZEXT (register, 0x200, 1), (register, 0x200, 1) INT_EQUAL (register, 0x0, 1) , (const, 0x0, 1), (register, 0x0, 1) SUBPIECE (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) INT_AND (register, 0x0, 4) , (const, 0x1, 4), (register, 0x0, 4) INT_NEGATE (unique, 0x100005fb, 4), (unique, 0x100005fb, 4) SUBPIECE (register, 0x0, 8) , (const, 0x0, 4), (register, 0x0, 8) INT_RIGHT (const, 0x1000070080, 8) , (unique, 0x57680, 1), (unique, 0x57680, 1) INT_AND (unique, 0x10000786, 1) , (const, 0x3f, 1), (unique, 0x10000786, 1) SUBPIECE (unique, 0xbd80, 8) , (const, 0x0, 4)]
[(register, 0x10, 4) INT_ADD (register, 0x10, 4) , (const, 0x5, 4), (register, 0x10, 4) INT_SRIGHT (unique, 0x10001c2d, 4) , (const, 0x1f, 4), (unique, 0x10001c2d, 4) CAST (register, 0x10, 4), (register, 0x10, 4) INT_LEFT (register, 0x0, 4) , (const, 0x1f, 4), (register, 0x0, 4) INT_AND (register, 0x0, 4) , (const, 0x1, 4), (register, 0x0, 4) INT_NEGATE (unique, 0x100005fb, 4), (unique, 0x100005fb, 4) SUBPIECE (register, 0x0, 8) , (const, 0x0, 4), (register, 0x0, 8) INT_RIGHT (const, 0x1000070080, 8) , (unique, 0x57680, 1), (unique, 0x57680, 1) INT_AND (unique, 0x10000786, 1) , (const, 0x3f, 1), (unique, 0x10000786, 1) SUBPIECE (unique, 0xbd80, 8) , (const, 0x0, 4)]
[(unique, 0x10001644, 4) COPY (register, 0x0, 4), (register, 0x0, 4) INT_ADD (register, 0x0, 4) , (const, 0x3, 4), (register, 0x0, 4) INT_SRIGHT (unique, 0x10001c31, 4) , (const, 0x1f, 4), (unique, 0x10001c31, 4) CAST (register, 0x0, 4), (register, 0x0, 4) INT_LEFT (register, 0x0, 4) , (const, 0x1f, 4), (register, 0x0, 4) INT_AND (register, 0x0, 4) , (const, 0x1, 4), (register, 0x0, 4) INT_NEGATE (unique, 0x100005fb, 4), (unique, 0x100005fb, 4) SUBPIECE (register, 0x0, 8) , (const, 0x0, 4), (register, 0x0, 8) INT_RIGHT (const, 0x1000070080, 8) , (unique, 0x57680, 1), (unique, 0x57680, 1) INT_AND (unique, 0x10000786, 1) , (const, 0x3f, 1), (unique, 0x10000786, 1) SUBPIECE (unique, 0xbd80, 8) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x48428a, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xa0, 8) , (const, 0x5, 8)]
[(unique, 0x10001648, 4) COPY (register, 0x10, 4)]
[ ---  CBRANCH (ram, 0x48417e, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xa0, 8) , (const, 0x6, 8)]
[ ---  CBRANCH (ram, 0x483426, 1) , (unique, 0x10001001, 1), (unique, 0x10001001, 1) INT_EQUAL (unique, 0x1000102e, 4) , (unique, 0xbc80, 4), (unique, 0x1000102e, 4) MULTIEQUAL (unique, 0x10001644, 4) , (unique, 0x10001648, 4)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10001c35, 8), (unique, 0x10001c35, 8) CAST (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (register, 0x98, 8) , (const, 0x82, 8) , (const, 0x8, 8)]
[(register, 0x30, 4) COPY (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x483412, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x30, 4) , (register, 0x8, 4), (register, 0x8, 4) MULTIEQUAL (unique, 0xbc80, 4) , (unique, 0xbc80, 4), (register, 0x30, 4) MULTIEQUAL (unique, 0x10000607, 4) , (register, 0x30, 4)]
[(unique, 0xbd80, 8) CAST (unique, 0x10001c3d, 8), (unique, 0x10001c3d, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (register, 0x98, 8) , (const, 0x83, 8) , (const, 0x8, 8)]
[(stack, 0xffffffffffffff80, 8) COPY (unique, 0x10001c45, 8), (unique, 0x10001c45, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (register, 0x98, 8) , (const, 0x84, 8) , (const, 0x8, 8)]
[ ---  BRANCH (ram, 0x4834b0, 1)]
[ ---  CBRANCH (ram, 0x483ce0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xa0, 8) , (const, 0x7, 8)]
[ ---  CBRANCH (ram, 0x483ce0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xa0, 8) , (const, 0x10, 8)]
[(register, 0x88, 4) COPY (const, 0x1, 4)]
[ ---  CBRANCH (ram, 0x48344b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xa0, 8) , (const, 0x5, 8)]
[(register, 0x88, 4) INT_ZEXT (register, 0x88, 1), (register, 0x88, 1) BOOL_OR (unique, 0xc780, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xa0, 8) , (const, 0x24, 8), (unique, 0xc780, 1) INT_LESS (unique, 0x3800, 8) , (const, 0x2, 8), (unique, 0x3800, 8) INT_SUB (register, 0xa0, 8) , (const, 0x11, 8)]
[ ---  CBRANCH (ram, 0x483cf0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xa0, 8) , (const, 0x5, 8)]
[(register, 0x88, 4) INT_OR (register, 0x88, 4) , (const, 0x2, 4), (register, 0x88, 4) MULTIEQUAL (register, 0x88, 4) , (register, 0x88, 4)]
[ ---  BRANCH (ram, 0x483459, 1)]
[(register, 0x0, 4) INT_OR (register, 0x88, 4) , (const, 0x4, 4), (register, 0x88, 4) MULTIEQUAL (register, 0x88, 4) , (register, 0x88, 4)]
[(unique, 0x10001624, 4) COPY (register, 0x88, 4), (register, 0x88, 4) MULTIEQUAL (register, 0x88, 4) , (register, 0x88, 4)]
[ ---  CBRANCH (ram, 0x483459, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xa0, 8) , (const, 0x6, 8)]
[(unique, 0x10001628, 4) COPY (register, 0x0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001c4d, 8) , (register, 0x88, 4), (unique, 0x10001c4d, 8) CAST (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (register, 0x98, 8) , (const, 0x82, 8) , (const, 0x8, 8), (register, 0x88, 4) MULTIEQUAL (unique, 0x10001624, 4) , (unique, 0x10001628, 4) , (register, 0x88, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3200, 8) , (unique, 0x10001c5d, 8), (unique, 0x10001c5d, 8) CAST (unique, 0x3400, 8), (unique, 0x3200, 8) PTRADD (register, 0x98, 8) , (const, 0x81, 8) , (const, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001c65, 8) , (const, 0x0, 8), (unique, 0x10001c65, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001c6d, 8) , (const, 0x9, 8), (unique, 0x10001c6d, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff0, 8) , (const, 0x1, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001c75, 8) , (const, 0x483492, 8), (unique, 0x10001c75, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xffffffffffffffe8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xd9c, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0xd9c, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0xd9b, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0xd96, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0xd86, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0xd9c, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0xd9b, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0xd96, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0xd86, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0xd9c, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0xd9b, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0xd96, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0xd86, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0xd9c, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0xd9b, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0xd96, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0xd86, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0xd9c, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0xd9b, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0xd96, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0xd86, 4)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0xd9c, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0xd9b, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0xd96, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0xd86, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0xd9c, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0xd9b, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0xd96, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0xd86, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0xd9c, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0xd9b, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0xd96, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0xd86, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0xd9c, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0xd9b, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0xd96, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0xd86, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0xd9c, 4), (stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0xd9b, 4), (stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0xd96, 4), (stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0xd86, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0xd9c, 4), (stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0xd9b, 4), (stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0xd96, 4), (stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0xd86, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0xd9c, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0xd9b, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0xd96, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0xd86, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0xd9c, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0xd9b, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0xd96, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0xd86, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0xd9c, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0xd9b, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0xd96, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0xd86, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0xd9c, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0xd9b, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0xd96, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0xd86, 4)]
[(stack, 0xffffffffffffff88, 16) INDIRECT (stack, 0xffffffffffffff88, 16) , (const, 0xd9c, 4), (stack, 0xffffffffffffff88, 16) INDIRECT (stack, 0xffffffffffffff88, 16) , (const, 0xd9b, 4), (stack, 0xffffffffffffff88, 16) INDIRECT (stack, 0xffffffffffffff88, 16) , (const, 0xd96, 4), (stack, 0xffffffffffffff88, 16) INDIRECT (stack, 0xffffffffffffff88, 16) , (const, 0xd86, 4)]
[(stack, 0xffffffffffffff98, 16) INDIRECT (stack, 0xffffffffffffff98, 16) , (const, 0xd9c, 4), (stack, 0xffffffffffffff98, 16) INDIRECT (stack, 0xffffffffffffff98, 16) , (const, 0xd9b, 4), (stack, 0xffffffffffffff98, 16) INDIRECT (stack, 0xffffffffffffff98, 16) , (const, 0xd96, 4), (stack, 0xffffffffffffff98, 16) INDIRECT (stack, 0xffffffffffffff98, 16) , (const, 0xd86, 4)]
[(stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0xd9c, 4), (stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0xd9b, 4), (stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0xd96, 4), (stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0xd86, 4)]
[(stack, 0xffffffffffffffb8, 16) INDIRECT (stack, 0xffffffffffffffb8, 16) , (const, 0xd9c, 4), (stack, 0xffffffffffffffb8, 16) INDIRECT (stack, 0xffffffffffffffb8, 16) , (const, 0xd9b, 4), (stack, 0xffffffffffffffb8, 16) INDIRECT (stack, 0xffffffffffffffb8, 16) , (const, 0xd96, 4), (stack, 0xffffffffffffffb8, 16) INDIRECT (stack, 0xffffffffffffffb8, 16) , (const, 0xd86, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3200, 8) , (unique, 0x10001c85, 8), (unique, 0x10001c85, 8) CAST (stack, 0xffffffffffffff80, 8), (unique, 0x3200, 8) PTRADD (stack, 0xffffffffffffff20, 8) , (const, 0x84, 8) , (const, 0x8, 8), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0xd9c, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0xd9c, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0xd9b, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0xd9b, 4), (stack, 0xffffffffffffff20, 8) COPY (register, 0x98, 8), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0xd96, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0xd86, 4)]
[(ram, 0x4c4a68, 8) INDIRECT (ram, 0x4c4a68, 8) , (const, 0xda9, 4), (ram, 0x4c4a68, 8) INDIRECT (ram, 0x4c4a68, 8) , (const, 0xda6, 4), (ram, 0x4c4a68, 8) INDIRECT (ram, 0x4c4a68, 8) , (const, 0xd9c, 4), (ram, 0x4c4a68, 8) INDIRECT (ram, 0x4c4a68, 8) , (const, 0xd7e, 4), (ram, 0x4c4a68, 8) INDIRECT (ram, 0x4c4a68, 8) , (const, 0xd6d, 4)]
[(ram, 0x4c6118, 8) INDIRECT (ram, 0x4c6118, 8) , (const, 0xda9, 4), (ram, 0x4c6118, 8) INDIRECT (ram, 0x4c6118, 8) , (const, 0xda6, 4), (ram, 0x4c6118, 8) INDIRECT (ram, 0x4c6118, 8) , (const, 0xd9c, 4), (ram, 0x4c6118, 8) INDIRECT (ram, 0x4c6118, 8) , (const, 0xd7e, 4), (ram, 0x4c6118, 8) INDIRECT (ram, 0x4c6118, 8) , (const, 0xd6d, 4)]
[(ram, 0x4c7d80, 4) INDIRECT (ram, 0x4c7d80, 4) , (const, 0xda9, 4), (ram, 0x4c7d80, 4) INDIRECT (ram, 0x4c7d80, 4) , (const, 0xda6, 4), (ram, 0x4c7d80, 4) INDIRECT (ram, 0x4c7d80, 4) , (const, 0xd9c, 4), (ram, 0x4c7d80, 4) INDIRECT (ram, 0x4c7d80, 4) , (const, 0xd7e, 4), (ram, 0x4c7d80, 4) INDIRECT (ram, 0x4c7d80, 4) , (const, 0xd6d, 4)]
[(ram, 0x4c7da0, 8) INDIRECT (ram, 0x4c7da0, 8) , (const, 0xda9, 4), (ram, 0x4c7da0, 8) INDIRECT (ram, 0x4c7da0, 8) , (const, 0xda6, 4), (ram, 0x4c7da0, 8) INDIRECT (ram, 0x4c7da0, 8) , (const, 0xd9c, 4), (ram, 0x4c7da0, 8) INDIRECT (ram, 0x4c7da0, 8) , (const, 0xd7e, 4), (ram, 0x4c7da0, 8) INDIRECT (ram, 0x4c7da0, 8) , (const, 0xd6d, 4)]
[(ram, 0x4c87c0, 4) INDIRECT (ram, 0x4c87c0, 4) , (const, 0xda9, 4), (ram, 0x4c87c0, 4) INDIRECT (ram, 0x4c87c0, 4) , (const, 0xda6, 4), (ram, 0x4c87c0, 4) INDIRECT (ram, 0x4c87c0, 4) , (const, 0xd9c, 4), (ram, 0x4c87c0, 4) INDIRECT (ram, 0x4c87c0, 4) , (const, 0xd7e, 4), (ram, 0x4c87c0, 4) INDIRECT (ram, 0x4c87c0, 4) , (const, 0xd6d, 4)]
[(ram, 0x4c87d0, 8) INDIRECT (ram, 0x4c87d0, 8) , (const, 0xda9, 4), (ram, 0x4c87d0, 8) INDIRECT (ram, 0x4c87d0, 8) , (const, 0xda6, 4), (ram, 0x4c87d0, 8) INDIRECT (ram, 0x4c87d0, 8) , (const, 0xd9c, 4), (ram, 0x4c87d0, 8) INDIRECT (ram, 0x4c87d0, 8) , (const, 0xd7e, 4), (ram, 0x4c87d0, 8) INDIRECT (ram, 0x4c87d0, 8) , (const, 0xd6d, 4)]
[(ram, 0x4c8840, 4) INDIRECT (ram, 0x4c8840, 4) , (const, 0xda9, 4), (ram, 0x4c8840, 4) INDIRECT (ram, 0x4c8840, 4) , (const, 0xda6, 4), (ram, 0x4c8840, 4) INDIRECT (ram, 0x4c8840, 4) , (const, 0xd9c, 4), (ram, 0x4c8840, 4) INDIRECT (ram, 0x4c8840, 4) , (const, 0xd7e, 4), (ram, 0x4c8840, 4) INDIRECT (ram, 0x4c8840, 4) , (const, 0xd6d, 4)]
[(ram, 0x4c8850, 8) INDIRECT (ram, 0x4c8850, 8) , (const, 0xda9, 4), (ram, 0x4c8850, 8) INDIRECT (ram, 0x4c8850, 8) , (const, 0xda6, 4), (ram, 0x4c8850, 8) INDIRECT (ram, 0x4c8850, 8) , (const, 0xd9c, 4), (ram, 0x4c8850, 8) INDIRECT (ram, 0x4c8850, 8) , (const, 0xd7e, 4), (ram, 0x4c8850, 8) INDIRECT (ram, 0x4c8850, 8) , (const, 0xd6d, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3200, 8) , (unique, 0x10001c8d, 8), (unique, 0x10001c8d, 8) CAST (register, 0x0, 8), (unique, 0x3200, 8) PTRADD (stack, 0xffffffffffffff20, 8) , (const, 0x83, 8) , (const, 0x8, 8), (register, 0x0, 8) CAST (unique, 0x10001c7d, 8), (unique, 0x10001c7d, 8) CALL (ram, 0x481760, 8) , (register, 0x38, 8) , (register, 0x98, 8) , (unique, 0x3100, 8) , (unique, 0x1000125c, 8), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0xd9c, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0xd9b, 4), (stack, 0xffffffffffffff20, 8) COPY (register, 0x98, 8), (register, 0x38, 8) INT_ADD (register, 0x38, 8) , (stack, 0xffffffffffffff38, 8), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0xd86, 4), (unique, 0x3100, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff80, 8), (register, 0x38, 8) INT_ZEXT (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10001c55, 8), (unique, 0x10001c55, 8) CAST (unique, 0x3400, 8)]
[(unique, 0x10001554, 8) COPY (stack, 0xffffffffffffff20, 8), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0xd9c, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0xd9b, 4), (stack, 0xffffffffffffff20, 8) COPY (register, 0x98, 8)]
[(stack, 0xffffffffffffffb8, 16) MULTIEQUAL (stack, 0xffffffffffffffb8, 16) , (stack, 0xffffffffffffffb8, 16)]
[(stack, 0xffffffffffffffa8, 16) MULTIEQUAL (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16)]
[(stack, 0xffffffffffffff98, 16) MULTIEQUAL (stack, 0xffffffffffffff98, 16) , (stack, 0xffffffffffffff98, 16)]
[(stack, 0xffffffffffffff88, 16) MULTIEQUAL (stack, 0xffffffffffffff88, 16) , (stack, 0xffffffffffffff88, 16)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(ram, 0x4c8850, 8) MULTIEQUAL (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8)]
[(ram, 0x4c8840, 4) MULTIEQUAL (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4)]
[(ram, 0x4c87d0, 8) MULTIEQUAL (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8)]
[(ram, 0x4c87c0, 4) MULTIEQUAL (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4)]
[(ram, 0x4c7da0, 8) MULTIEQUAL (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8)]
[(ram, 0x4c7d80, 4) MULTIEQUAL (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4)]
[(ram, 0x4c6118, 8) MULTIEQUAL (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8)]
[(ram, 0x4c4a68, 8) MULTIEQUAL (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb8, 8) COPY (const, 0x0, 8)]
[(unique, 0x10001404, 8) COPY (register, 0x90, 8), (register, 0x90, 8) MULTIEQUAL (register, 0x0, 8) , (unique, 0xbd80, 8)]
[(unique, 0x100014ec, 8) COPY (register, 0x98, 8), (register, 0x98, 8) MULTIEQUAL (unique, 0x10001554, 8) , (unique, 0x10001654, 8)]
[ ---  CBRANCH (ram, 0x483d00, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffff80, 8) , (const, 0x0, 8), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10001cad, 8), (unique, 0x10001cad, 8) INT_ADD (unique, 0x10001ca5, 8) , (const, 0x4, 8), (unique, 0x10001ca5, 8) CAST (stack, 0xffffffffffffff80, 8)]
[(unique, 0x1000142c, 8) COPY (register, 0x90, 8)]
[(unique, 0x10001564, 8) COPY (register, 0x98, 8)]
[(unique, 0x10001574, 8) COPY (register, 0x98, 8)]
[ ---  CBRANCH (ram, 0x483bfc, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbc00, 2) , (const, 0xfff1, 2), (unique, 0xbc00, 2) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10001c9d, 8), (unique, 0x10001c9d, 8) INT_ADD (unique, 0x10001c95, 8) , (const, 0x6, 8), (unique, 0x10001c95, 8) CAST (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffffb8, 16) MULTIEQUAL (stack, 0xffffffffffffffb8, 16) , (stack, 0xffffffffffffffb8, 16)]
[(stack, 0xffffffffffffffa8, 16) MULTIEQUAL (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16)]
[(stack, 0xffffffffffffff98, 16) MULTIEQUAL (stack, 0xffffffffffffff98, 16) , (stack, 0xffffffffffffff98, 16)]
[(stack, 0xffffffffffffff88, 16) MULTIEQUAL (stack, 0xffffffffffffff88, 16) , (stack, 0xffffffffffffff88, 16)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(ram, 0x4c8850, 8) MULTIEQUAL (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8)]
[(ram, 0x4c8840, 4) MULTIEQUAL (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4)]
[(ram, 0x4c87d0, 8) MULTIEQUAL (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8)]
[(ram, 0x4c87c0, 4) MULTIEQUAL (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4)]
[(ram, 0x4c7da0, 8) MULTIEQUAL (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8)]
[(ram, 0x4c7d80, 4) MULTIEQUAL (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4)]
[(ram, 0x4c6118, 8) MULTIEQUAL (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8)]
[(ram, 0x4c4a68, 8) MULTIEQUAL (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8)]
[(register, 0x10, 1) MULTIEQUAL (unique, 0xbb00, 1) , (unique, 0xbb00, 1)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x98, 8) MULTIEQUAL (unique, 0x10001564, 8) , (unique, 0x10001654, 8)]
[(register, 0x30, 2) MULTIEQUAL (unique, 0xbc00, 2) , (unique, 0xbc00, 2)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x90, 8), (register, 0x90, 8) MULTIEQUAL (unique, 0x1000142c, 8) , (register, 0x98, 8)]
[(stack, 0xffffffffffffffb8, 16) MULTIEQUAL (stack, 0xffffffffffffffb8, 16) , (stack, 0xffffffffffffffb8, 16)]
[(stack, 0xffffffffffffffa8, 16) MULTIEQUAL (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16)]
[(stack, 0xffffffffffffff98, 16) MULTIEQUAL (stack, 0xffffffffffffff98, 16) , (stack, 0xffffffffffffff98, 16)]
[(stack, 0xffffffffffffff88, 16) MULTIEQUAL (stack, 0xffffffffffffff88, 16) , (stack, 0xffffffffffffff88, 16)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(ram, 0x4c8850, 8) MULTIEQUAL (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8)]
[(ram, 0x4c8840, 4) MULTIEQUAL (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4)]
[(ram, 0x4c87d0, 8) MULTIEQUAL (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8)]
[(ram, 0x4c87c0, 4) MULTIEQUAL (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4)]
[(ram, 0x4c7da0, 8) MULTIEQUAL (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8)]
[(ram, 0x4c7d80, 4) MULTIEQUAL (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4)]
[(ram, 0x4c6118, 8) MULTIEQUAL (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8)]
[(ram, 0x4c4a68, 8) MULTIEQUAL (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8)]
[(register, 0x10, 1) MULTIEQUAL (unique, 0xbb00, 1) , (unique, 0xbb00, 1)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x98, 8) MULTIEQUAL (unique, 0x10001574, 8) , (unique, 0x10001654, 8)]
[(register, 0x90, 8) MULTIEQUAL (unique, 0x1000142c, 8) , (register, 0x98, 8)]
[(register, 0x30, 2) MULTIEQUAL (unique, 0xbc00, 2) , (unique, 0xbc00, 2)]
[(register, 0xb8, 8) COPY (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x483bff, 1)]
[(stack, 0xffffffffffffffb8, 16) MULTIEQUAL (stack, 0xffffffffffffffb8, 16) , (stack, 0xffffffffffffffb8, 16)]
[(stack, 0xffffffffffffffa8, 16) MULTIEQUAL (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16)]
[(stack, 0xffffffffffffff98, 16) MULTIEQUAL (stack, 0xffffffffffffff98, 16) , (stack, 0xffffffffffffff98, 16)]
[(stack, 0xffffffffffffff88, 16) MULTIEQUAL (stack, 0xffffffffffffff88, 16) , (stack, 0xffffffffffffff88, 16)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(ram, 0x4c8850, 8) MULTIEQUAL (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8)]
[(ram, 0x4c8840, 4) MULTIEQUAL (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4)]
[(ram, 0x4c87d0, 8) MULTIEQUAL (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8)]
[(ram, 0x4c87c0, 4) MULTIEQUAL (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4)]
[(ram, 0x4c7da0, 8) MULTIEQUAL (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8)]
[(ram, 0x4c7d80, 4) MULTIEQUAL (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4)]
[(ram, 0x4c6118, 8) MULTIEQUAL (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8)]
[(ram, 0x4c4a68, 8) MULTIEQUAL (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x30, 2) MULTIEQUAL (register, 0x30, 2) , (register, 0x30, 2)]
[(register, 0xb8, 8) CAST (unique, 0x10001cb5, 8), (unique, 0x10001cb5, 8) PTRADD (register, 0xb8, 8) , (unique, 0xbd80, 8) , (const, 0x1, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (stack, 0xffffffffffffff80, 8) , (const, 0x1, 8) , (const, 0x8, 8), (register, 0xb8, 8) MULTIEQUAL (register, 0xb8, 8) , (unique, 0xbd80, 8), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(unique, 0x1000140c, 8) COPY (register, 0x90, 8), (register, 0x90, 8) MULTIEQUAL (register, 0x90, 8) , (register, 0x90, 8)]
[(unique, 0x100014f4, 8) COPY (register, 0x98, 8), (register, 0x98, 8) MULTIEQUAL (register, 0x98, 8) , (register, 0x98, 8)]
[ ---  CBRANCH (ram, 0x4834bc, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x10, 1) , (const, 0xa, 1), (register, 0x10, 1) INT_AND (register, 0x10, 1) , (const, 0xf, 1), (register, 0x10, 1) MULTIEQUAL (register, 0x10, 1) , (register, 0x10, 1)]
[(unique, 0x100014fc, 8) COPY (register, 0x98, 8)]
[ ---  CBRANCH (ram, 0x4834bc, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffff34, 4) , (const, 0x0, 4)]
[(unique, 0x10001504, 8) COPY (register, 0x98, 8)]
[ ---  CBRANCH (ram, 0x4834bc, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x30, 2) , (const, 0x0, 2)]
[(unique, 0x100013cc, 8) COPY (register, 0x90, 8)]
[(unique, 0x1000143c, 8) COPY (register, 0x98, 8)]
[ ---  CBRANCH (ram, 0x483c95, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x98, 8) , (register, 0x90, 8)]
[ ---  CBRANCH (ram, 0x483c95, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x58800, 1) , (const, 0x0, 1), (unique, 0x58800, 1) INT_AND (unique, 0xbb00, 1) , (const, 0x3, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x10001cc5, 8), (unique, 0x10001cc5, 8) INT_ADD (unique, 0x10001cbd, 8) , (const, 0x31c, 8), (unique, 0x10001cbd, 8) CAST (register, 0x90, 8)]
[ ---  CBRANCH (ram, 0x483c95, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x58800, 1) , (const, 0x0, 1), (unique, 0x58800, 1) INT_AND (unique, 0xbb00, 1) , (const, 0x4, 1)]
[(stack, 0xffffffffffffff08, 8) COPY (register, 0x98, 8)]
[(stack, 0xffffffffffffff20, 8) COPY (register, 0x90, 8)]
[ ---  CBRANCH (ram, 0x483c77, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10001ccd, 8), (unique, 0x10001ccd, 8) CAST (ram, 0x4c4a68, 8)]
[(register, 0x10, 8) COPY (const, 0x4b026e, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001cd5, 8) , (const, 0x483c87, 8), (unique, 0x10001cd5, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xec7, 4)]
[(ram, 0x4c4a68, 8) INDIRECT (ram, 0x4c4a68, 8) , (const, 0xec7, 4)]
[(ram, 0x4c6118, 8) INDIRECT (ram, 0x4c6118, 8) , (const, 0xec7, 4)]
[(ram, 0x4c7d80, 4) INDIRECT (ram, 0x4c7d80, 4) , (const, 0xec7, 4)]
[(ram, 0x4c7da0, 8) INDIRECT (ram, 0x4c7da0, 8) , (const, 0xec7, 4)]
[(ram, 0x4c87c0, 4) INDIRECT (ram, 0x4c87c0, 4) , (const, 0xec7, 4)]
[(ram, 0x4c87d0, 8) INDIRECT (ram, 0x4c87d0, 8) , (const, 0xec7, 4)]
[(ram, 0x4c8840, 4) INDIRECT (ram, 0x4c8840, 4) , (const, 0xec7, 4)]
[(ram, 0x4c8850, 8) INDIRECT (ram, 0x4c8850, 8) , (const, 0xec7, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0xec7, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0xec6, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0xec7, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0xec6, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0xec7, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0xec6, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0xec7, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0xec6, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0xec7, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0xec6, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0xec7, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0xec6, 4)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0xec7, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0xec6, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0xec7, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0xec6, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0xec7, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0xec6, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0xec7, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0xec6, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0xec7, 4), (stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0xec6, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0xec7, 4), (stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0xec6, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0xec7, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0xec6, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0xec7, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0xec6, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0xec7, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0xec6, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0xec7, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0xec6, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0xec7, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0xec6, 4)]
[(stack, 0xffffffffffffff88, 16) INDIRECT (stack, 0xffffffffffffff88, 16) , (const, 0xec7, 4), (stack, 0xffffffffffffff88, 16) INDIRECT (stack, 0xffffffffffffff88, 16) , (const, 0xec6, 4)]
[(stack, 0xffffffffffffff98, 16) INDIRECT (stack, 0xffffffffffffff98, 16) , (const, 0xec7, 4), (stack, 0xffffffffffffff98, 16) INDIRECT (stack, 0xffffffffffffff98, 16) , (const, 0xec6, 4)]
[(stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0xec7, 4), (stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0xec6, 4)]
[(stack, 0xffffffffffffffb8, 16) INDIRECT (stack, 0xffffffffffffffb8, 16) , (const, 0xec7, 4), (stack, 0xffffffffffffffb8, 16) INDIRECT (stack, 0xffffffffffffffb8, 16) , (const, 0xec6, 4)]
[ ---  CALL (ram, 0x485480, 8) , (const, 0x2, 8) , (unique, 0x10000a10, 8) , (register, 0x10, 8), (unique, 0x10000a10, 8) COPY (const, 0x4b01f8, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0xbd80, 8) , (register, 0x10, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001cdd, 8) , (const, 0x483ca6, 8), (unique, 0x10001cdd, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xed6, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4c4a68, 8) INDIRECT (ram, 0x4c4a68, 8) , (const, 0xed6, 4), (ram, 0x4c4a68, 8) MULTIEQUAL (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8)]
[(ram, 0x4c6118, 8) INDIRECT (ram, 0x4c6118, 8) , (const, 0xed6, 4), (ram, 0x4c6118, 8) MULTIEQUAL (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8)]
[(ram, 0x4c7d80, 4) INDIRECT (ram, 0x4c7d80, 4) , (const, 0xed6, 4), (ram, 0x4c7d80, 4) MULTIEQUAL (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4)]
[(ram, 0x4c7da0, 8) INDIRECT (ram, 0x4c7da0, 8) , (const, 0xed6, 4), (ram, 0x4c7da0, 8) MULTIEQUAL (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8)]
[(ram, 0x4c87c0, 4) INDIRECT (ram, 0x4c87c0, 4) , (const, 0xed6, 4), (ram, 0x4c87c0, 4) MULTIEQUAL (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4)]
[(ram, 0x4c87d0, 8) INDIRECT (ram, 0x4c87d0, 8) , (const, 0xed6, 4), (ram, 0x4c87d0, 8) MULTIEQUAL (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8)]
[(ram, 0x4c8840, 4) INDIRECT (ram, 0x4c8840, 4) , (const, 0xed6, 4), (ram, 0x4c8840, 4) MULTIEQUAL (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4)]
[(ram, 0x4c8850, 8) INDIRECT (ram, 0x4c8850, 8) , (const, 0xed6, 4), (ram, 0x4c8850, 8) MULTIEQUAL (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0xed6, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0xed5, 4), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0xed6, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0xed5, 4), (stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0xed6, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0xed5, 4), (stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0xed6, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0xed5, 4), (stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0xed6, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0xed5, 4), (stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0xed6, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0xed5, 4), (stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0xed6, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0xed5, 4), (stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0xed6, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0xed5, 4), (stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0xed6, 4), (stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0xed5, 4), (stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0xed6, 4), (stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0xed5, 4), (stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0xed6, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0xed5, 4), (stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0xed6, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0xed5, 4), (stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0xed6, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0xed5, 4), (stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0xed6, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0xed5, 4), (stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0xed6, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0xed5, 4), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff88, 16) INDIRECT (stack, 0xffffffffffffff88, 16) , (const, 0xed6, 4), (stack, 0xffffffffffffff88, 16) INDIRECT (stack, 0xffffffffffffff88, 16) , (const, 0xed5, 4), (stack, 0xffffffffffffff88, 16) MULTIEQUAL (stack, 0xffffffffffffff88, 16) , (stack, 0xffffffffffffff88, 16) , (stack, 0xffffffffffffff88, 16) , (stack, 0xffffffffffffff88, 16)]
[(stack, 0xffffffffffffff98, 16) INDIRECT (stack, 0xffffffffffffff98, 16) , (const, 0xed6, 4), (stack, 0xffffffffffffff98, 16) INDIRECT (stack, 0xffffffffffffff98, 16) , (const, 0xed5, 4), (stack, 0xffffffffffffff98, 16) MULTIEQUAL (stack, 0xffffffffffffff98, 16) , (stack, 0xffffffffffffff98, 16) , (stack, 0xffffffffffffff98, 16) , (stack, 0xffffffffffffff98, 16)]
[(stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0xed6, 4), (stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0xed5, 4), (stack, 0xffffffffffffffa8, 16) MULTIEQUAL (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16)]
[(stack, 0xffffffffffffffb8, 16) INDIRECT (stack, 0xffffffffffffffb8, 16) , (const, 0xed6, 4), (stack, 0xffffffffffffffb8, 16) INDIRECT (stack, 0xffffffffffffffb8, 16) , (const, 0xed5, 4), (stack, 0xffffffffffffffb8, 16) MULTIEQUAL (stack, 0xffffffffffffffb8, 16) , (stack, 0xffffffffffffffb8, 16) , (stack, 0xffffffffffffffb8, 16) , (stack, 0xffffffffffffffb8, 16)]
[(register, 0x0, 8) CAST (unique, 0x10001ced, 8), (unique, 0x10001ced, 8) CALLIND (unique, 0x10001ce5, 8), (unique, 0x10001ce5, 8) CAST (register, 0xb8, 8)]
[(unique, 0x10001424, 8) COPY (stack, 0xffffffffffffff20, 8), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0xed6, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0xed5, 4), (stack, 0xffffffffffffff20, 8) COPY (register, 0x90, 8), (register, 0x90, 8) MULTIEQUAL (unique, 0x100013cc, 8) , (unique, 0x100013cc, 8) , (unique, 0x100013cc, 8) , (stack, 0xffffffffffffff20, 8)]
[(unique, 0x1000150c, 8) COPY (stack, 0xffffffffffffff08, 8), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0xed6, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0xed5, 4), (stack, 0xffffffffffffff08, 8) COPY (register, 0x98, 8), (register, 0x98, 8) MULTIEQUAL (unique, 0x1000143c, 8) , (unique, 0x1000143c, 8) , (unique, 0x1000143c, 8) , (stack, 0xffffffffffffff08, 8)]
[ ---  BRANCH (ram, 0x4834bc, 1)]
[(stack, 0xffffffffffffffb8, 16) MULTIEQUAL (stack, 0xffffffffffffffb8, 16) , (stack, 0xffffffffffffffb8, 16) , (stack, 0xffffffffffffffb8, 16) , (stack, 0xffffffffffffffb8, 16) , (stack, 0xffffffffffffffb8, 16)]
[(stack, 0xffffffffffffffa8, 16) MULTIEQUAL (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16)]
[(stack, 0xffffffffffffff98, 16) MULTIEQUAL (stack, 0xffffffffffffff98, 16) , (stack, 0xffffffffffffff98, 16) , (stack, 0xffffffffffffff98, 16) , (stack, 0xffffffffffffff98, 16) , (stack, 0xffffffffffffff98, 16)]
[(stack, 0xffffffffffffff88, 16) MULTIEQUAL (stack, 0xffffffffffffff88, 16) , (stack, 0xffffffffffffff88, 16) , (stack, 0xffffffffffffff88, 16) , (stack, 0xffffffffffffff88, 16) , (stack, 0xffffffffffffff88, 16)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(ram, 0x4c8850, 8) MULTIEQUAL (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8)]
[(ram, 0x4c8840, 4) MULTIEQUAL (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4)]
[(ram, 0x4c87d0, 8) MULTIEQUAL (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8)]
[(ram, 0x4c87c0, 4) MULTIEQUAL (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4)]
[(ram, 0x4c7da0, 8) MULTIEQUAL (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8)]
[(ram, 0x4c7d80, 4) MULTIEQUAL (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4)]
[(ram, 0x4c6118, 8) MULTIEQUAL (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8)]
[(ram, 0x4c4a68, 8) MULTIEQUAL (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb8, 8) MULTIEQUAL (register, 0xb8, 8) , (register, 0xb8, 8) , (register, 0xb8, 8) , (register, 0xb8, 8) , (register, 0x0, 8)]
[(register, 0x98, 8) MULTIEQUAL (unique, 0x100014ec, 8) , (unique, 0x100014f4, 8) , (unique, 0x100014fc, 8) , (unique, 0x10001504, 8) , (unique, 0x1000150c, 8)]
[(register, 0x90, 8) MULTIEQUAL (unique, 0x10001404, 8) , (unique, 0x1000140c, 8) , (unique, 0x1000140c, 8) , (unique, 0x1000140c, 8) , (unique, 0x10001424, 8)]
[(unique, 0x10001274, 8) COPY (stack, 0xffffffffffffff80, 8), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(unique, 0x1000126c, 8) COPY (stack, 0xffffffffffffff68, 8), (stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[ ---  BRANCHIND (register, 0xa0, 8)]
[(register, 0x0, 8) PTRADD (unique, 0xbd80, 8) , (unique, 0x10001cf5, 8) , (const, 0x1, 8), (unique, 0x10001cf5, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x98, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[(unique, 0x10001524, 8) COPY (register, 0x98, 8)]
[ ---  CBRANCH (ram, 0x483af7, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffff34, 4) , (const, 0x0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001cfd, 8) , (const, 0x483af0, 8), (unique, 0x10001cfd, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1600, 4)]
[(ram, 0x4c4a68, 8) INDIRECT (ram, 0x4c4a68, 8) , (const, 0x1600, 4)]
[(ram, 0x4c6118, 8) INDIRECT (ram, 0x4c6118, 8) , (const, 0x1600, 4)]
[(ram, 0x4c7d80, 4) INDIRECT (ram, 0x4c7d80, 4) , (const, 0x1600, 4)]
[(ram, 0x4c7da0, 8) INDIRECT (ram, 0x4c7da0, 8) , (const, 0x1600, 4)]
[(ram, 0x4c87c0, 4) INDIRECT (ram, 0x4c87c0, 4) , (const, 0x1600, 4)]
[(ram, 0x4c87d0, 8) INDIRECT (ram, 0x4c87d0, 8) , (const, 0x1600, 4)]
[(ram, 0x4c8840, 4) INDIRECT (ram, 0x4c8840, 4) , (const, 0x1600, 4)]
[(ram, 0x4c8850, 8) INDIRECT (ram, 0x4c8850, 8) , (const, 0x1600, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x1600, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x15ff, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x1600, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x15ff, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x1600, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x15ff, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x1600, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x15ff, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x1600, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x15ff, 4)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x1600, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x15ff, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x1600, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x15ff, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x1600, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x15ff, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x1600, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x15ff, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x1600, 4), (stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x15ff, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x1600, 4), (stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x15ff, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x1600, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x15ff, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x1600, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x15ff, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x1600, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x15ff, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x1600, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x15ff, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x1600, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x15ff, 4)]
[(stack, 0xffffffffffffff88, 16) INDIRECT (stack, 0xffffffffffffff88, 16) , (const, 0x1600, 4), (stack, 0xffffffffffffff88, 16) INDIRECT (stack, 0xffffffffffffff88, 16) , (const, 0x15ff, 4)]
[(stack, 0xffffffffffffff98, 16) INDIRECT (stack, 0xffffffffffffff98, 16) , (const, 0x1600, 4), (stack, 0xffffffffffffff98, 16) INDIRECT (stack, 0xffffffffffffff98, 16) , (const, 0x15ff, 4)]
[(stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0x1600, 4), (stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0x15ff, 4)]
[(stack, 0xffffffffffffffb8, 16) INDIRECT (stack, 0xffffffffffffffb8, 16) , (const, 0x1600, 4), (stack, 0xffffffffffffffb8, 16) INDIRECT (stack, 0xffffffffffffffb8, 16) , (const, 0x15ff, 4)]
[(register, 0x0, 8) CAST (unique, 0x10001d05, 8), (unique, 0x10001d05, 8) CALLIND (register, 0x0, 8)]
[(unique, 0x1000152c, 8) COPY (stack, 0xffffffffffffff20, 8), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x1600, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x15ff, 4), (stack, 0xffffffffffffff20, 8) COPY (register, 0x98, 8)]
[(stack, 0xffffffffffffffb8, 16) MULTIEQUAL (stack, 0xffffffffffffffb8, 16) , (stack, 0xffffffffffffffb8, 16)]
[(stack, 0xffffffffffffffa8, 16) MULTIEQUAL (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16)]
[(stack, 0xffffffffffffff98, 16) MULTIEQUAL (stack, 0xffffffffffffff98, 16) , (stack, 0xffffffffffffff98, 16)]
[(stack, 0xffffffffffffff88, 16) MULTIEQUAL (stack, 0xffffffffffffff88, 16) , (stack, 0xffffffffffffff88, 16)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4c4a68, 8) INDIRECT (ram, 0x4c4a68, 8) , (const, 0x1608, 4), (ram, 0x4c4a68, 8) MULTIEQUAL (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8)]
[(ram, 0x4c6118, 8) INDIRECT (ram, 0x4c6118, 8) , (const, 0x1608, 4), (ram, 0x4c6118, 8) MULTIEQUAL (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8)]
[(ram, 0x4c7d80, 4) INDIRECT (ram, 0x4c7d80, 4) , (const, 0x1608, 4), (ram, 0x4c7d80, 4) MULTIEQUAL (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4)]
[(ram, 0x4c7da0, 8) INDIRECT (ram, 0x4c7da0, 8) , (const, 0x1608, 4), (ram, 0x4c7da0, 8) MULTIEQUAL (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8)]
[(ram, 0x4c87c0, 4) INDIRECT (ram, 0x4c87c0, 4) , (const, 0x1608, 4), (ram, 0x4c87c0, 4) MULTIEQUAL (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4)]
[(ram, 0x4c87d0, 8) INDIRECT (ram, 0x4c87d0, 8) , (const, 0x1608, 4), (ram, 0x4c87d0, 8) MULTIEQUAL (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8)]
[(ram, 0x4c8840, 4) INDIRECT (ram, 0x4c8840, 4) , (const, 0x1608, 4), (ram, 0x4c8840, 4) MULTIEQUAL (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4)]
[(ram, 0x4c8850, 8) INDIRECT (ram, 0x4c8850, 8) , (const, 0x1608, 4), (ram, 0x4c8850, 8) MULTIEQUAL (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8)]
[ ---  STORE (const, 0x1b1, 4) , (stack, 0xffffffffffffff68, 8) , (register, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8), (stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(unique, 0x100014ac, 8) COPY (register, 0x98, 8), (register, 0x98, 8) MULTIEQUAL (unique, 0x10001524, 8) , (unique, 0x1000152c, 8)]
[ ---  BRANCH (ram, 0x483890, 1)]
[ ---  CBRANCH (ram, 0x4841a9, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffff80, 8) , (const, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0xbd80, 8), (unique, 0x3100, 8) PTRADD (stack, 0xffffffffffffff68, 8) , (const, 0x1, 8) , (const, 0x8, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[(ram, 0x4c4a68, 8) INDIRECT (ram, 0x4c4a68, 8) , (const, 0x166c, 4), (ram, 0x4c4a68, 8) INDIRECT (ram, 0x4c4a68, 8) , (const, 0x1669, 4)]
[(ram, 0x4c6118, 8) INDIRECT (ram, 0x4c6118, 8) , (const, 0x166c, 4), (ram, 0x4c6118, 8) INDIRECT (ram, 0x4c6118, 8) , (const, 0x1669, 4)]
[(ram, 0x4c7d80, 4) INDIRECT (ram, 0x4c7d80, 4) , (const, 0x166c, 4), (ram, 0x4c7d80, 4) INDIRECT (ram, 0x4c7d80, 4) , (const, 0x1669, 4)]
[(ram, 0x4c7da0, 8) INDIRECT (ram, 0x4c7da0, 8) , (const, 0x166c, 4), (ram, 0x4c7da0, 8) INDIRECT (ram, 0x4c7da0, 8) , (const, 0x1669, 4)]
[(ram, 0x4c87c0, 4) INDIRECT (ram, 0x4c87c0, 4) , (const, 0x166c, 4), (ram, 0x4c87c0, 4) INDIRECT (ram, 0x4c87c0, 4) , (const, 0x1669, 4)]
[(ram, 0x4c87d0, 8) INDIRECT (ram, 0x4c87d0, 8) , (const, 0x166c, 4), (ram, 0x4c87d0, 8) INDIRECT (ram, 0x4c87d0, 8) , (const, 0x1669, 4)]
[(ram, 0x4c8840, 4) INDIRECT (ram, 0x4c8840, 4) , (const, 0x166c, 4), (ram, 0x4c8840, 4) INDIRECT (ram, 0x4c8840, 4) , (const, 0x1669, 4)]
[(ram, 0x4c8850, 8) INDIRECT (ram, 0x4c8850, 8) , (const, 0x166c, 4), (ram, 0x4c8850, 8) INDIRECT (ram, 0x4c8850, 8) , (const, 0x1669, 4)]
[ ---  STORE (const, 0x1b1, 4) , (stack, 0xffffffffffffff68, 8) , (unique, 0x100009e0, 8), (unique, 0x100009e0, 8) PTRSUB (const, 0x0, 8) , (const, 0x488900, 8)]
[(unique, 0x100014bc, 8) COPY (register, 0x98, 8)]
[ ---  BRANCH (ram, 0x483890, 1)]
[(unique, 0x100014dc, 8) COPY (register, 0x98, 8)]
[ ---  CBRANCH (ram, 0x4842d9, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (unique, 0x3100, 8) , (const, 0x2, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x1, 8) , (const, 0x1, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (register, 0x90, 8) , (const, 0x8a, 8) , (const, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001d0d, 8) , (const, 0x4842ef, 8), (unique, 0x10001d0d, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1653, 4)]
[(ram, 0x4c4a68, 8) INDIRECT (ram, 0x4c4a68, 8) , (const, 0x1653, 4)]
[(ram, 0x4c6118, 8) INDIRECT (ram, 0x4c6118, 8) , (const, 0x1653, 4)]
[(ram, 0x4c7d80, 4) INDIRECT (ram, 0x4c7d80, 4) , (const, 0x1653, 4)]
[(ram, 0x4c7da0, 8) INDIRECT (ram, 0x4c7da0, 8) , (const, 0x1653, 4)]
[(ram, 0x4c87c0, 4) INDIRECT (ram, 0x4c87c0, 4) , (const, 0x1653, 4)]
[(ram, 0x4c87d0, 8) INDIRECT (ram, 0x4c87d0, 8) , (const, 0x1653, 4)]
[(ram, 0x4c8840, 4) INDIRECT (ram, 0x4c8840, 4) , (const, 0x1653, 4)]
[(ram, 0x4c8850, 8) INDIRECT (ram, 0x4c8850, 8) , (const, 0x1653, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x1653, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x1652, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x1653, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x1652, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x1653, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x1652, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x1653, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x1652, 4)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x1653, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x1652, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x1653, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x1652, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x1653, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x1652, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x1653, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x1652, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x1653, 4), (stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x1652, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x1653, 4), (stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x1652, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x1653, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x1652, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x1653, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x1652, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x1653, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x1652, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x1653, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x1652, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x1653, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x1652, 4)]
[(stack, 0xffffffffffffff88, 16) INDIRECT (stack, 0xffffffffffffff88, 16) , (const, 0x1653, 4), (stack, 0xffffffffffffff88, 16) INDIRECT (stack, 0xffffffffffffff88, 16) , (const, 0x1652, 4)]
[(stack, 0xffffffffffffff98, 16) INDIRECT (stack, 0xffffffffffffff98, 16) , (const, 0x1653, 4), (stack, 0xffffffffffffff98, 16) INDIRECT (stack, 0xffffffffffffff98, 16) , (const, 0x1652, 4)]
[(stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0x1653, 4), (stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0x1652, 4)]
[(stack, 0xffffffffffffffb8, 16) INDIRECT (stack, 0xffffffffffffffb8, 16) , (const, 0x1653, 4), (stack, 0xffffffffffffffb8, 16) INDIRECT (stack, 0xffffffffffffffb8, 16) , (const, 0x1652, 4)]
[ ---  CALL (ram, 0x482810, 8) , (register, 0x90, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (stack, 0xffffffffffffff20, 8) , (const, 0x8a, 8) , (const, 0x8, 8), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x1653, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x1652, 4), (stack, 0xffffffffffffff20, 8) COPY (register, 0x90, 8)]
[(unique, 0x100014e4, 8) COPY (stack, 0xffffffffffffff08, 8), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x1653, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x1652, 4), (stack, 0xffffffffffffff08, 8) COPY (register, 0x98, 8)]
[ ---  BRANCH (ram, 0x483b92, 1)]
[(stack, 0xffffffffffffffb8, 16) MULTIEQUAL (stack, 0xffffffffffffffb8, 16) , (stack, 0xffffffffffffffb8, 16)]
[(stack, 0xffffffffffffffa8, 16) MULTIEQUAL (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16)]
[(stack, 0xffffffffffffff98, 16) MULTIEQUAL (stack, 0xffffffffffffff98, 16) , (stack, 0xffffffffffffff98, 16)]
[(stack, 0xffffffffffffff88, 16) MULTIEQUAL (stack, 0xffffffffffffff88, 16) , (stack, 0xffffffffffffff88, 16)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (register, 0x0, 8), (unique, 0x3100, 8) PTRADD (stack, 0xffffffffffffff68, 8) , (const, 0x1, 8) , (const, 0x8, 8), (register, 0x0, 8) PTRADD (unique, 0xbd80, 8) , (register, 0x0, 8) , (const, 0x1, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x2, 8) , (const, 0x8, 8), (register, 0x0, 8) INT_SUB (unique, 0xbd80, 8) , (unique, 0x10001d15, 8), (unique, 0x10001d15, 8) CAST (register, 0x10, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (stack, 0xffffffffffffff80, 8) , (const, 0x1, 8) , (const, 0x8, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(ram, 0x4c4a68, 8) INDIRECT (ram, 0x4c4a68, 8) , (const, 0x1648, 4), (ram, 0x4c4a68, 8) INDIRECT (ram, 0x4c4a68, 8) , (const, 0x1645, 4), (ram, 0x4c4a68, 8) MULTIEQUAL (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8)]
[(ram, 0x4c6118, 8) INDIRECT (ram, 0x4c6118, 8) , (const, 0x1648, 4), (ram, 0x4c6118, 8) INDIRECT (ram, 0x4c6118, 8) , (const, 0x1645, 4), (ram, 0x4c6118, 8) MULTIEQUAL (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8)]
[(ram, 0x4c7d80, 4) INDIRECT (ram, 0x4c7d80, 4) , (const, 0x1648, 4), (ram, 0x4c7d80, 4) INDIRECT (ram, 0x4c7d80, 4) , (const, 0x1645, 4), (ram, 0x4c7d80, 4) MULTIEQUAL (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4)]
[(ram, 0x4c7da0, 8) INDIRECT (ram, 0x4c7da0, 8) , (const, 0x1648, 4), (ram, 0x4c7da0, 8) INDIRECT (ram, 0x4c7da0, 8) , (const, 0x1645, 4), (ram, 0x4c7da0, 8) MULTIEQUAL (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8)]
[(ram, 0x4c87c0, 4) INDIRECT (ram, 0x4c87c0, 4) , (const, 0x1648, 4), (ram, 0x4c87c0, 4) INDIRECT (ram, 0x4c87c0, 4) , (const, 0x1645, 4), (ram, 0x4c87c0, 4) MULTIEQUAL (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4)]
[(ram, 0x4c87d0, 8) INDIRECT (ram, 0x4c87d0, 8) , (const, 0x1648, 4), (ram, 0x4c87d0, 8) INDIRECT (ram, 0x4c87d0, 8) , (const, 0x1645, 4), (ram, 0x4c87d0, 8) MULTIEQUAL (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8)]
[(ram, 0x4c8840, 4) INDIRECT (ram, 0x4c8840, 4) , (const, 0x1648, 4), (ram, 0x4c8840, 4) INDIRECT (ram, 0x4c8840, 4) , (const, 0x1645, 4), (ram, 0x4c8840, 4) MULTIEQUAL (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4)]
[(ram, 0x4c8850, 8) INDIRECT (ram, 0x4c8850, 8) , (const, 0x1648, 4), (ram, 0x4c8850, 8) INDIRECT (ram, 0x4c8850, 8) , (const, 0x1645, 4), (ram, 0x4c8850, 8) MULTIEQUAL (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8)]
[ ---  STORE (const, 0x1b1, 4) , (stack, 0xffffffffffffff68, 8) , (unique, 0x100009d8, 8), (unique, 0x100009d8, 8) PTRSUB (const, 0x0, 8) , (const, 0x4888f0, 8), (stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(unique, 0x100014b4, 8) COPY (register, 0x98, 8), (register, 0x98, 8) MULTIEQUAL (unique, 0x100014dc, 8) , (unique, 0x100014e4, 8)]
[ ---  BRANCH (ram, 0x483890, 1)]
[(unique, 0xbd80, 8) CAST (unique, 0x10001d1d, 8), (unique, 0x10001d1d, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (stack, 0xffffffffffffff80, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[(unique, 0xbd80, 8) CAST (unique, 0x10001d25, 8), (unique, 0x10001d25, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (stack, 0xffffffffffffff80, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x483890, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffff80, 8) , (const, 0x0, 8)]
[(unique, 0x1000146c, 8) COPY (register, 0x98, 8)]
[ ---  CBRANCH (ram, 0x48430d, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (unique, 0x3100, 8) , (const, 0x2, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x1, 8) , (const, 0x1, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (register, 0x90, 8) , (const, 0x8a, 8) , (const, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001d2d, 8) , (const, 0x484323, 8), (unique, 0x10001d2d, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x172a, 4)]
[(ram, 0x4c4a68, 8) INDIRECT (ram, 0x4c4a68, 8) , (const, 0x172a, 4)]
[(ram, 0x4c6118, 8) INDIRECT (ram, 0x4c6118, 8) , (const, 0x172a, 4)]
[(ram, 0x4c7d80, 4) INDIRECT (ram, 0x4c7d80, 4) , (const, 0x172a, 4)]
[(ram, 0x4c7da0, 8) INDIRECT (ram, 0x4c7da0, 8) , (const, 0x172a, 4)]
[(ram, 0x4c87c0, 4) INDIRECT (ram, 0x4c87c0, 4) , (const, 0x172a, 4)]
[(ram, 0x4c87d0, 8) INDIRECT (ram, 0x4c87d0, 8) , (const, 0x172a, 4)]
[(ram, 0x4c8840, 4) INDIRECT (ram, 0x4c8840, 4) , (const, 0x172a, 4)]
[(ram, 0x4c8850, 8) INDIRECT (ram, 0x4c8850, 8) , (const, 0x172a, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x172a, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x1729, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x172a, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x1729, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x172a, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x1729, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x172a, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x1729, 4)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x172a, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x1729, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x172a, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x1729, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x172a, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x1729, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x172a, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x1729, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x172a, 4), (stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x1729, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x172a, 4), (stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x1729, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x172a, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x1729, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x172a, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x1729, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x172a, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x1729, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x172a, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x1729, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x172a, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x1729, 4)]
[(stack, 0xffffffffffffff88, 16) INDIRECT (stack, 0xffffffffffffff88, 16) , (const, 0x172a, 4), (stack, 0xffffffffffffff88, 16) INDIRECT (stack, 0xffffffffffffff88, 16) , (const, 0x1729, 4)]
[(stack, 0xffffffffffffff98, 16) INDIRECT (stack, 0xffffffffffffff98, 16) , (const, 0x172a, 4), (stack, 0xffffffffffffff98, 16) INDIRECT (stack, 0xffffffffffffff98, 16) , (const, 0x1729, 4)]
[(stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0x172a, 4), (stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0x1729, 4)]
[(stack, 0xffffffffffffffb8, 16) INDIRECT (stack, 0xffffffffffffffb8, 16) , (const, 0x172a, 4), (stack, 0xffffffffffffffb8, 16) INDIRECT (stack, 0xffffffffffffffb8, 16) , (const, 0x1729, 4)]
[ ---  CALL (ram, 0x482810, 8) , (register, 0x90, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (stack, 0xffffffffffffff20, 8) , (const, 0x8a, 8) , (const, 0x8, 8), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x172a, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x1729, 4), (stack, 0xffffffffffffff20, 8) COPY (register, 0x90, 8)]
[(unique, 0x10001474, 8) COPY (stack, 0xffffffffffffff08, 8), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x172a, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x1729, 4), (stack, 0xffffffffffffff08, 8) COPY (register, 0x98, 8)]
[ ---  BRANCH (ram, 0x483a6a, 1)]
[(stack, 0xffffffffffffffb8, 16) MULTIEQUAL (stack, 0xffffffffffffffb8, 16) , (stack, 0xffffffffffffffb8, 16)]
[(stack, 0xffffffffffffffa8, 16) MULTIEQUAL (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16)]
[(stack, 0xffffffffffffff98, 16) MULTIEQUAL (stack, 0xffffffffffffff98, 16) , (stack, 0xffffffffffffff98, 16)]
[(stack, 0xffffffffffffff88, 16) MULTIEQUAL (stack, 0xffffffffffffff88, 16) , (stack, 0xffffffffffffff88, 16)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x98, 8) MULTIEQUAL (unique, 0x1000146c, 8) , (unique, 0x10001474, 8)]
[(ram, 0x4c4a68, 8) INDIRECT (ram, 0x4c4a68, 8) , (const, 0x171f, 4), (ram, 0x4c4a68, 8) MULTIEQUAL (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8)]
[(ram, 0x4c6118, 8) INDIRECT (ram, 0x4c6118, 8) , (const, 0x171f, 4), (ram, 0x4c6118, 8) MULTIEQUAL (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8)]
[(ram, 0x4c7d80, 4) INDIRECT (ram, 0x4c7d80, 4) , (const, 0x171f, 4), (ram, 0x4c7d80, 4) MULTIEQUAL (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4)]
[(ram, 0x4c7da0, 8) INDIRECT (ram, 0x4c7da0, 8) , (const, 0x171f, 4), (ram, 0x4c7da0, 8) MULTIEQUAL (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8)]
[(ram, 0x4c87c0, 4) INDIRECT (ram, 0x4c87c0, 4) , (const, 0x171f, 4), (ram, 0x4c87c0, 4) MULTIEQUAL (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4)]
[(ram, 0x4c87d0, 8) INDIRECT (ram, 0x4c87d0, 8) , (const, 0x171f, 4), (ram, 0x4c87d0, 8) MULTIEQUAL (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8)]
[(ram, 0x4c8840, 4) INDIRECT (ram, 0x4c8840, 4) , (const, 0x171f, 4), (ram, 0x4c8840, 4) MULTIEQUAL (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4)]
[(ram, 0x4c8850, 8) INDIRECT (ram, 0x4c8850, 8) , (const, 0x171f, 4), (ram, 0x4c8850, 8) MULTIEQUAL (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8)]
[ ---  STORE (const, 0x1b1, 4) , (stack, 0xffffffffffffff68, 8) , (register, 0x0, 8), (register, 0x0, 8) PTRADD (unique, 0xbd80, 8) , (register, 0x0, 8) , (const, 0x1, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x2, 8) , (const, 0x8, 8), (register, 0x0, 8) INT_SUB (unique, 0xbd80, 8) , (unique, 0x10001d35, 8), (unique, 0x10001d35, 8) CAST (register, 0x10, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (stack, 0xffffffffffffff80, 8) , (const, 0x1, 8) , (const, 0x8, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[ ---  BRANCH (ram, 0x483890, 1)]
[ ---  CBRANCH (ram, 0x483890, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffff80, 8) , (const, 0x0, 8)]
[(ram, 0x4c4a68, 8) INDIRECT (ram, 0x4c4a68, 8) , (const, 0x1759, 4)]
[(ram, 0x4c6118, 8) INDIRECT (ram, 0x4c6118, 8) , (const, 0x1759, 4)]
[(ram, 0x4c7d80, 4) INDIRECT (ram, 0x4c7d80, 4) , (const, 0x1759, 4)]
[(ram, 0x4c7da0, 8) INDIRECT (ram, 0x4c7da0, 8) , (const, 0x1759, 4)]
[(ram, 0x4c87c0, 4) INDIRECT (ram, 0x4c87c0, 4) , (const, 0x1759, 4)]
[(ram, 0x4c87d0, 8) INDIRECT (ram, 0x4c87d0, 8) , (const, 0x1759, 4)]
[(ram, 0x4c8840, 4) INDIRECT (ram, 0x4c8840, 4) , (const, 0x1759, 4)]
[(ram, 0x4c8850, 8) INDIRECT (ram, 0x4c8850, 8) , (const, 0x1759, 4)]
[ ---  STORE (const, 0x1b1, 4) , (stack, 0xffffffffffffff68, 8) , (register, 0x0, 8), (register, 0x0, 8) PTRADD (unique, 0xbd80, 8) , (unique, 0xbd80, 8) , (const, 0x1, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (stack, 0xffffffffffffff80, 8) , (const, 0x1, 8) , (const, 0x8, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[ ---  BRANCH (ram, 0x483890, 1)]
[ ---  CBRANCH (ram, 0x483890, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x90, 8) , (const, 0x0, 8)]
[(ram, 0x4c4a68, 8) INDIRECT (ram, 0x4c4a68, 8) , (const, 0x176c, 4)]
[(ram, 0x4c6118, 8) INDIRECT (ram, 0x4c6118, 8) , (const, 0x176c, 4)]
[(ram, 0x4c7d80, 4) INDIRECT (ram, 0x4c7d80, 4) , (const, 0x176c, 4)]
[(ram, 0x4c7da0, 8) INDIRECT (ram, 0x4c7da0, 8) , (const, 0x176c, 4)]
[(ram, 0x4c87c0, 4) INDIRECT (ram, 0x4c87c0, 4) , (const, 0x176c, 4)]
[(ram, 0x4c87d0, 8) INDIRECT (ram, 0x4c87d0, 8) , (const, 0x176c, 4)]
[(ram, 0x4c8840, 4) INDIRECT (ram, 0x4c8840, 4) , (const, 0x176c, 4)]
[(ram, 0x4c8850, 8) INDIRECT (ram, 0x4c8850, 8) , (const, 0x176c, 4)]
[ ---  STORE (const, 0x1b1, 4) , (stack, 0xffffffffffffff68, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (register, 0x90, 8) , (const, 0x8b, 8) , (const, 0x8, 8)]
[ ---  BRANCH (ram, 0x483890, 1)]
[(register, 0x30, 8) COPY (const, 0x4b00d0, 8)]
[(ram, 0x4c4a68, 8) INDIRECT (ram, 0x4c4a68, 8) , (const, 0x16a0, 4)]
[(ram, 0x4c6118, 8) INDIRECT (ram, 0x4c6118, 8) , (const, 0x16a0, 4)]
[(ram, 0x4c7d80, 4) INDIRECT (ram, 0x4c7d80, 4) , (const, 0x16a0, 4)]
[(ram, 0x4c7da0, 8) INDIRECT (ram, 0x4c7da0, 8) , (const, 0x16a0, 4)]
[(ram, 0x4c87c0, 4) INDIRECT (ram, 0x4c87c0, 4) , (const, 0x16a0, 4)]
[(ram, 0x4c87d0, 8) INDIRECT (ram, 0x4c87d0, 8) , (const, 0x16a0, 4)]
[(ram, 0x4c8840, 4) INDIRECT (ram, 0x4c8840, 4) , (const, 0x16a0, 4)]
[(ram, 0x4c8850, 8) INDIRECT (ram, 0x4c8850, 8) , (const, 0x16a0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001d4d, 8) , (register, 0xb8, 4), (unique, 0x10001d4d, 8) CAST (stack, 0xffffffffffffff68, 8), (register, 0xb8, 4) SUBPIECE (register, 0xb8, 8) , (const, 0x0, 4), (register, 0xb8, 8) INT_ADD (unique, 0x10001d3d, 8) , (unique, 0x10001d45, 8), (unique, 0x10001d45, 8) CAST (unique, 0xbd80, 8), (unique, 0x10001d3d, 8) CAST (register, 0xb8, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x2, 8) , (const, 0x8, 8), (register, 0xb8, 8) MULTIEQUAL (register, 0xb8, 8) , (unique, 0xbd80, 8)]
[(unique, 0x100014cc, 8) COPY (register, 0x98, 8)]
[(unique, 0x10001514, 8) COPY (register, 0x98, 8)]
[ ---  CBRANCH (ram, 0x483890, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (const, 0xffffffff, 8) , (unique, 0x10001d55, 8), (unique, 0x10001d55, 8) CAST (register, 0xb8, 8), (register, 0xb8, 8) INT_ADD (unique, 0x10001d3d, 8) , (unique, 0x10001d45, 8), (unique, 0x10001d45, 8) CAST (unique, 0xbd80, 8), (unique, 0x10001d3d, 8) CAST (register, 0xb8, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x2, 8) , (const, 0x8, 8), (register, 0xb8, 8) MULTIEQUAL (register, 0xb8, 8) , (unique, 0xbd80, 8)]
[ ---  CBRANCH (ram, 0x483890, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffff80, 8) , (const, 0x0, 8)]
[(stack, 0xffffffffffffff20, 8) COPY (register, 0x98, 8)]
[(unique, 0x3100, 8) PTRADD (unique, 0x3400, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x483b2b, 1) , (unique, 0x1000083c, 1), (unique, 0x1000083c, 1) BOOL_OR (register, 0x200, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (register, 0x200, 1) INT_LESS (unique, 0x10001d5d, 8) , (unique, 0xbd80, 8), (unique, 0x10001d5d, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0x3400, 8) , (const, 0x2, 8) , (const, 0x8, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRADD (stack, 0xffffffffffffff80, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001d65, 8) , (const, 0x483b3a, 8), (unique, 0x10001d65, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x179b, 4)]
[(ram, 0x4c4a68, 8) INDIRECT (ram, 0x4c4a68, 8) , (const, 0x179b, 4)]
[(ram, 0x4c6118, 8) INDIRECT (ram, 0x4c6118, 8) , (const, 0x179b, 4)]
[(ram, 0x4c7d80, 4) INDIRECT (ram, 0x4c7d80, 4) , (const, 0x179b, 4)]
[(ram, 0x4c7da0, 8) INDIRECT (ram, 0x4c7da0, 8) , (const, 0x179b, 4)]
[(ram, 0x4c87c0, 4) INDIRECT (ram, 0x4c87c0, 4) , (const, 0x179b, 4)]
[(ram, 0x4c87d0, 8) INDIRECT (ram, 0x4c87d0, 8) , (const, 0x179b, 4)]
[(ram, 0x4c8840, 4) INDIRECT (ram, 0x4c8840, 4) , (const, 0x179b, 4)]
[(ram, 0x4c8850, 8) INDIRECT (ram, 0x4c8850, 8) , (const, 0x179b, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x179b, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x179a, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x179b, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x179a, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x179b, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x179a, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x179b, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x179a, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x179b, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x179a, 4)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x179b, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x179a, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x179b, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x179a, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x179b, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x179a, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x179b, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x179a, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x179b, 4), (stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x179a, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x179b, 4), (stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x179a, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x179b, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x179a, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x179b, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x179a, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x179b, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x179a, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x179b, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x179a, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x179b, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x179a, 4)]
[(stack, 0xffffffffffffff88, 16) INDIRECT (stack, 0xffffffffffffff88, 16) , (const, 0x179b, 4), (stack, 0xffffffffffffff88, 16) INDIRECT (stack, 0xffffffffffffff88, 16) , (const, 0x179a, 4)]
[(stack, 0xffffffffffffff98, 16) INDIRECT (stack, 0xffffffffffffff98, 16) , (const, 0x179b, 4), (stack, 0xffffffffffffff98, 16) INDIRECT (stack, 0xffffffffffffff98, 16) , (const, 0x179a, 4)]
[(stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0x179b, 4), (stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0x179a, 4)]
[(stack, 0xffffffffffffffb8, 16) INDIRECT (stack, 0xffffffffffffffb8, 16) , (const, 0x179b, 4), (stack, 0xffffffffffffffb8, 16) INDIRECT (stack, 0xffffffffffffffb8, 16) , (const, 0x179a, 4)]
[ ---  CALL (ram, 0x401060, 8) , (unique, 0x1000126c, 8) , (register, 0xb8, 8) , (register, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8)]
[(unique, 0x10001664, 8) COPY (stack, 0xffffffffffffff20, 8), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x179b, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x179a, 4)]
[ ---  CBRANCH (ram, 0x483b62, 1) , (unique, 0xc900, 1), (unique, 0xc900, 1) BOOL_AND (register, 0x200, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (register, 0x200, 1) INT_LESSEQUAL (unique, 0xbd80, 8) , (unique, 0x10001d6d, 8), (unique, 0x10001d6d, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRADD (unique, 0x10001274, 8) , (const, 0x2, 8) , (const, 0x8, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0x3400, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x483890, 1) , (unique, 0x1000083f, 1), (unique, 0x1000083f, 1) BOOL_NEGATE (register, 0x200, 1)]
[ ---  CBRANCH (ram, 0x483890, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4c8840, 4) , (const, 0x0, 4)]
[(register, 0x30, 8) COPY (const, 0x4b0150, 8)]
[ ---  BRANCH (ram, 0x4839e7, 1)]
[(ram, 0x4c4a68, 8) INDIRECT (ram, 0x4c4a68, 8) , (const, 0x17dc, 4)]
[(ram, 0x4c6118, 8) INDIRECT (ram, 0x4c6118, 8) , (const, 0x17dc, 4)]
[(ram, 0x4c7d80, 4) INDIRECT (ram, 0x4c7d80, 4) , (const, 0x17dc, 4)]
[(ram, 0x4c7da0, 8) INDIRECT (ram, 0x4c7da0, 8) , (const, 0x17dc, 4)]
[(ram, 0x4c87c0, 4) INDIRECT (ram, 0x4c87c0, 4) , (const, 0x17dc, 4)]
[(ram, 0x4c87d0, 8) INDIRECT (ram, 0x4c87d0, 8) , (const, 0x17dc, 4)]
[(ram, 0x4c8840, 4) INDIRECT (ram, 0x4c8840, 4) , (const, 0x17dc, 4)]
[(ram, 0x4c8850, 8) INDIRECT (ram, 0x4c8850, 8) , (const, 0x17dc, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001d95, 8) , (register, 0xb8, 4), (unique, 0x10001d95, 8) CAST (stack, 0xffffffffffffff68, 8), (register, 0xb8, 4) SUBPIECE (register, 0xb8, 8) , (const, 0x0, 4), (register, 0xb8, 8) INT_ADD (unique, 0x10001d8d, 8) , (register, 0x0, 8), (unique, 0x10001d8d, 8) CAST (register, 0xb8, 8), (register, 0x0, 8) CAST (unique, 0x10001d85, 8), (unique, 0x10001d85, 8) INT_SUB (unique, 0x10001d75, 8) , (unique, 0x10001d7d, 8), (unique, 0x10001d7d, 8) CAST (stack, 0xffffffffffffff68, 8), (unique, 0x10001d75, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x483890, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xb8, 8) , (register, 0x0, 8), (register, 0x0, 8) INT_SEXT (register, 0xb8, 4), (register, 0xb8, 4) SUBPIECE (register, 0xb8, 8) , (const, 0x0, 4), (register, 0xb8, 8) INT_ADD (unique, 0x10001d8d, 8) , (register, 0x0, 8), (unique, 0x10001d8d, 8) CAST (register, 0xb8, 8), (register, 0x0, 8) CAST (unique, 0x10001d85, 8), (unique, 0x10001d85, 8) INT_SUB (unique, 0x10001d75, 8) , (unique, 0x10001d7d, 8), (unique, 0x10001d7d, 8) CAST (stack, 0xffffffffffffff68, 8), (unique, 0x10001d75, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[(register, 0x30, 8) COPY (const, 0x4b0110, 8)]
[ ---  BRANCH (ram, 0x4839e7, 1)]
[(stack, 0xffffffffffffffb8, 16) MULTIEQUAL (stack, 0xffffffffffffffb8, 16) , (stack, 0xffffffffffffffb8, 16) , (stack, 0xffffffffffffffb8, 16)]
[(stack, 0xffffffffffffffa8, 16) MULTIEQUAL (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16)]
[(stack, 0xffffffffffffff98, 16) MULTIEQUAL (stack, 0xffffffffffffff98, 16) , (stack, 0xffffffffffffff98, 16) , (stack, 0xffffffffffffff98, 16)]
[(stack, 0xffffffffffffff88, 16) MULTIEQUAL (stack, 0xffffffffffffff88, 16) , (stack, 0xffffffffffffff88, 16) , (stack, 0xffffffffffffff88, 16)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(ram, 0x4c8850, 8) MULTIEQUAL (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8)]
[(ram, 0x4c8840, 4) MULTIEQUAL (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4)]
[(ram, 0x4c87d0, 8) MULTIEQUAL (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8)]
[(ram, 0x4c87c0, 4) MULTIEQUAL (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4)]
[(ram, 0x4c7da0, 8) MULTIEQUAL (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8)]
[(ram, 0x4c7d80, 4) MULTIEQUAL (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4)]
[(ram, 0x4c6118, 8) MULTIEQUAL (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x30, 8) MULTIEQUAL (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8)]
[(stack, 0xffffffffffffff68, 8) COPY (register, 0x98, 8), (register, 0x98, 8) MULTIEQUAL (unique, 0x10001514, 8) , (unique, 0x10001664, 8) , (register, 0x98, 8)]
[ ---  CBRANCH (ram, 0x483a16, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10001d9d, 8), (unique, 0x10001d9d, 8) CAST (ram, 0x4c4a68, 8), (ram, 0x4c4a68, 8) MULTIEQUAL (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8)]
[(register, 0x10, 8) COPY (const, 0x4b026e, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001da5, 8) , (const, 0x483a1d, 8), (unique, 0x10001da5, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x16e0, 4)]
[(ram, 0x4c4a68, 8) INDIRECT (ram, 0x4c4a68, 8) , (const, 0x16e0, 4)]
[(ram, 0x4c6118, 8) INDIRECT (ram, 0x4c6118, 8) , (const, 0x16e0, 4)]
[(ram, 0x4c7d80, 4) INDIRECT (ram, 0x4c7d80, 4) , (const, 0x16e0, 4)]
[(ram, 0x4c7da0, 8) INDIRECT (ram, 0x4c7da0, 8) , (const, 0x16e0, 4)]
[(ram, 0x4c87c0, 4) INDIRECT (ram, 0x4c87c0, 4) , (const, 0x16e0, 4)]
[(ram, 0x4c87d0, 8) INDIRECT (ram, 0x4c87d0, 8) , (const, 0x16e0, 4)]
[(ram, 0x4c8840, 4) INDIRECT (ram, 0x4c8840, 4) , (const, 0x16e0, 4)]
[(ram, 0x4c8850, 8) INDIRECT (ram, 0x4c8850, 8) , (const, 0x16e0, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x16e0, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x16df, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x16e0, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x16df, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x16e0, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x16df, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x16e0, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x16df, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x16e0, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x16df, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x16e0, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x16df, 4)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x16e0, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x16df, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x16e0, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x16df, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x16e0, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x16df, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x16e0, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x16df, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x16e0, 4), (stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x16df, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x16e0, 4), (stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x16df, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x16e0, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x16df, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x16e0, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x16df, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x16e0, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x16df, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x16e0, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x16df, 4)]
[(stack, 0xffffffffffffff88, 16) INDIRECT (stack, 0xffffffffffffff88, 16) , (const, 0x16e0, 4), (stack, 0xffffffffffffff88, 16) INDIRECT (stack, 0xffffffffffffff88, 16) , (const, 0x16df, 4)]
[(stack, 0xffffffffffffff98, 16) INDIRECT (stack, 0xffffffffffffff98, 16) , (const, 0x16e0, 4), (stack, 0xffffffffffffff98, 16) INDIRECT (stack, 0xffffffffffffff98, 16) , (const, 0x16df, 4)]
[(stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0x16e0, 4), (stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0x16df, 4)]
[(stack, 0xffffffffffffffb8, 16) INDIRECT (stack, 0xffffffffffffffb8, 16) , (const, 0x16e0, 4), (stack, 0xffffffffffffffb8, 16) INDIRECT (stack, 0xffffffffffffffb8, 16) , (const, 0x16df, 4)]
[ ---  CALL (ram, 0x485480, 8) , (const, 0x2, 8) , (register, 0x30, 8) , (register, 0x10, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0xbd80, 8) , (register, 0x10, 8)]
[(unique, 0x100014d4, 8) COPY (stack, 0xffffffffffffff68, 8), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x16e0, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x16df, 4)]
[ ---  BRANCH (ram, 0x483890, 1)]
[(ram, 0x4c4a68, 8) INDIRECT (ram, 0x4c4a68, 8) , (const, 0x1685, 4)]
[(ram, 0x4c6118, 8) INDIRECT (ram, 0x4c6118, 8) , (const, 0x1685, 4)]
[(ram, 0x4c7d80, 4) INDIRECT (ram, 0x4c7d80, 4) , (const, 0x1685, 4)]
[(ram, 0x4c7da0, 8) INDIRECT (ram, 0x4c7da0, 8) , (const, 0x1685, 4)]
[(ram, 0x4c87c0, 4) INDIRECT (ram, 0x4c87c0, 4) , (const, 0x1685, 4)]
[(ram, 0x4c87d0, 8) INDIRECT (ram, 0x4c87d0, 8) , (const, 0x1685, 4)]
[(ram, 0x4c8840, 4) INDIRECT (ram, 0x4c8840, 4) , (const, 0x1685, 4)]
[(ram, 0x4c8850, 8) INDIRECT (ram, 0x4c8850, 8) , (const, 0x1685, 4)]
[ ---  STORE (const, 0x1b1, 4) , (stack, 0xffffffffffffff68, 8) , (register, 0xb8, 8), (register, 0xb8, 8) CAST (unique, 0x10001dbd, 8), (unique, 0x10001dbd, 8) INT_ADD (unique, 0x10001dad, 8) , (unique, 0x10001db5, 8), (unique, 0x10001db5, 8) CAST (unique, 0xbd80, 8), (unique, 0x10001dad, 8) CAST (register, 0xb8, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x2, 8) , (const, 0x8, 8), (register, 0xb8, 8) MULTIEQUAL (register, 0xb8, 8) , (unique, 0xbd80, 8)]
[(unique, 0x100014c4, 8) COPY (register, 0x98, 8)]
[(stack, 0xffffffffffffffb8, 16) MULTIEQUAL (stack, 0xffffffffffffffb8, 16) , (stack, 0xffffffffffffffb8, 16) , (stack, 0xffffffffffffffb8, 16) , (stack, 0xffffffffffffffb8, 16) , (stack, 0xffffffffffffffb8, 16) , (stack, 0xffffffffffffffb8, 16) , (stack, 0xffffffffffffffb8, 16) , (stack, 0xffffffffffffffb8, 16) , (stack, 0xffffffffffffffb8, 16) , (stack, 0xffffffffffffffb8, 16) , (stack, 0xffffffffffffffb8, 16) , (stack, 0xffffffffffffffb8, 16) , (stack, 0xffffffffffffffb8, 16) , (stack, 0xffffffffffffffb8, 16) , (stack, 0xffffffffffffffb8, 16) , (stack, 0xffffffffffffffb8, 16) , (stack, 0xffffffffffffffb8, 16) , (stack, 0xffffffffffffffb8, 16) , (stack, 0xffffffffffffffb8, 16) , (stack, 0xffffffffffffffb8, 16)]
[(stack, 0xffffffffffffffa8, 16) MULTIEQUAL (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16)]
[(stack, 0xffffffffffffff98, 16) MULTIEQUAL (stack, 0xffffffffffffff98, 16) , (stack, 0xffffffffffffff98, 16) , (stack, 0xffffffffffffff98, 16) , (stack, 0xffffffffffffff98, 16) , (stack, 0xffffffffffffff98, 16) , (stack, 0xffffffffffffff98, 16) , (stack, 0xffffffffffffff98, 16) , (stack, 0xffffffffffffff98, 16) , (stack, 0xffffffffffffff98, 16) , (stack, 0xffffffffffffff98, 16) , (stack, 0xffffffffffffff98, 16) , (stack, 0xffffffffffffff98, 16) , (stack, 0xffffffffffffff98, 16) , (stack, 0xffffffffffffff98, 16) , (stack, 0xffffffffffffff98, 16) , (stack, 0xffffffffffffff98, 16) , (stack, 0xffffffffffffff98, 16) , (stack, 0xffffffffffffff98, 16) , (stack, 0xffffffffffffff98, 16) , (stack, 0xffffffffffffff98, 16)]
[(stack, 0xffffffffffffff88, 16) MULTIEQUAL (stack, 0xffffffffffffff88, 16) , (stack, 0xffffffffffffff88, 16) , (stack, 0xffffffffffffff88, 16) , (stack, 0xffffffffffffff88, 16) , (stack, 0xffffffffffffff88, 16) , (stack, 0xffffffffffffff88, 16) , (stack, 0xffffffffffffff88, 16) , (stack, 0xffffffffffffff88, 16) , (stack, 0xffffffffffffff88, 16) , (stack, 0xffffffffffffff88, 16) , (stack, 0xffffffffffffff88, 16) , (stack, 0xffffffffffffff88, 16) , (stack, 0xffffffffffffff88, 16) , (stack, 0xffffffffffffff88, 16) , (stack, 0xffffffffffffff88, 16) , (stack, 0xffffffffffffff88, 16) , (stack, 0xffffffffffffff88, 16) , (stack, 0xffffffffffffff88, 16) , (stack, 0xffffffffffffff88, 16) , (stack, 0xffffffffffffff88, 16)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(ram, 0x4c8850, 8) MULTIEQUAL (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8)]
[(ram, 0x4c8840, 4) MULTIEQUAL (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4)]
[(ram, 0x4c87d0, 8) MULTIEQUAL (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8)]
[(ram, 0x4c87c0, 4) MULTIEQUAL (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4)]
[(ram, 0x4c7da0, 8) MULTIEQUAL (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8)]
[(ram, 0x4c7d80, 4) MULTIEQUAL (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4)]
[(ram, 0x4c6118, 8) MULTIEQUAL (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8)]
[(ram, 0x4c4a68, 8) MULTIEQUAL (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x10001244, 8) COPY (stack, 0xffffffffffffff28, 8), (stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(unique, 0x1000158c, 8) COPY (register, 0x98, 8), (register, 0x98, 8) MULTIEQUAL (unique, 0x10001654, 8) , (unique, 0x10001654, 8) , (unique, 0x10001654, 8) , (unique, 0x10001654, 8) , (unique, 0x100014ac, 8) , (unique, 0x100014b4, 8) , (unique, 0x100014bc, 8) , (unique, 0x100014c4, 8) , (unique, 0x100014cc, 8) , (unique, 0x100014d4, 8) , (register, 0x98, 8) , (register, 0x98, 8) , (register, 0x98, 8) , (register, 0x98, 8) , (register, 0x98, 8) , (register, 0x98, 8) , (register, 0x98, 8) , (unique, 0x10001664, 8) , (unique, 0x10001664, 8) , (register, 0x98, 8)]
[ ---  CBRANCH (ram, 0x483388, 1) , (unique, 0xc900, 1), (unique, 0xc900, 1) INT_LESSEQUAL (stack, 0xffffffffffffff70, 8) , (register, 0x18, 8), (register, 0x18, 8) PTRADD (register, 0x18, 8) , (const, 0x3, 8) , (const, 0x8, 8), (stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[ ---  CBRANCH (ram, 0x482ce5, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffff50, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x482ce5, 1) , (unique, 0xc900, 1), (unique, 0xc900, 1) INT_LESSEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff70, 8) COPY (stack, 0xffffffffffffff58, 8)]
[(unique, 0x100012dc, 8) COPY (stack, 0xffffffffffffff50, 8)]
[ ---  BRANCH (ram, 0x4838ed, 1)]
[(stack, 0xffffffffffffffb8, 16) MULTIEQUAL (stack, 0xffffffffffffffb8, 16) , (stack, 0xffffffffffffffb8, 16)]
[(stack, 0xffffffffffffffa8, 16) MULTIEQUAL (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16)]
[(stack, 0xffffffffffffff98, 16) MULTIEQUAL (stack, 0xffffffffffffff98, 16) , (stack, 0xffffffffffffff98, 16)]
[(stack, 0xffffffffffffff88, 16) MULTIEQUAL (stack, 0xffffffffffffff88, 16) , (stack, 0xffffffffffffff88, 16)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(ram, 0x4c8850, 8) MULTIEQUAL (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8)]
[(ram, 0x4c8840, 4) MULTIEQUAL (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4)]
[(ram, 0x4c87d0, 8) MULTIEQUAL (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8)]
[(ram, 0x4c87c0, 4) MULTIEQUAL (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4)]
[(ram, 0x4c7da0, 8) MULTIEQUAL (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8)]
[(ram, 0x4c7d80, 4) MULTIEQUAL (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4)]
[(ram, 0x4c6118, 8) MULTIEQUAL (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8)]
[(ram, 0x4c4a68, 8) MULTIEQUAL (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x10001264, 8) COPY (stack, 0xffffffffffffff40, 8), (stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[ ---  CBRANCH (ram, 0x4838e0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x25, 4), (register, 0x0, 4) SUBPIECE (unique, 0xbd80, 8) , (const, 0x0, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x1, 8) , (const, 0x8, 8), (register, 0x18, 8) MULTIEQUAL (unique, 0x100012dc, 8) , (register, 0x18, 8)]
[(register, 0xb0, 8) CAST (unique, 0x10001ddd, 8), (unique, 0x10001ddd, 8) INT_ADD (unique, 0x10001dcd, 8) , (unique, 0x10001dd5, 8), (unique, 0x10001dd5, 8) CAST (unique, 0xbd80, 8), (unique, 0x10001dcd, 8) CAST (stack, 0xffffffffffffff70, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x18, 8)]
[(stack, 0xffffffffffffff80, 8) COPY (unique, 0x3400, 8), (unique, 0x3400, 8) CAST (unique, 0x10001de5, 8), (unique, 0x10001de5, 8) INT_ADD (stack, 0xffffffffffffff60, 8) , (unique, 0x3300, 8), (unique, 0x3300, 8) INT_MULT (register, 0x0, 8) , (const, 0x18, 8), (register, 0x0, 8) INT_RIGHT (unique, 0x10001dc5, 8) , (const, 0x20, 4), (unique, 0x10001dc5, 8) CAST (unique, 0xbd80, 8)]
[(unique, 0x10001284, 8) COPY (register, 0x98, 8)]
[ ---  CBRANCH (ram, 0x483d20, 1) , (unique, 0x13280, 1), (unique, 0x13280, 1) INT_EQUAL (register, 0x0, 1) , (const, 0x0, 1), (register, 0x0, 1) INT_RIGHT (unique, 0xbb00, 1) , (const, 0x4, 4), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) CAST (unique, 0x10001df5, 8), (unique, 0x10001df5, 8) INT_ADD (unique, 0x10001ded, 8) , (const, 0x4, 8), (unique, 0x10001ded, 8) CAST (unique, 0x3400, 8), (unique, 0x3400, 8) CAST (unique, 0x10001de5, 8), (unique, 0x10001de5, 8) INT_ADD (stack, 0xffffffffffffff60, 8) , (unique, 0x3300, 8), (unique, 0x3300, 8) INT_MULT (register, 0x0, 8) , (const, 0x18, 8), (register, 0x0, 8) INT_RIGHT (unique, 0x10001dc5, 8) , (const, 0x20, 4), (unique, 0x10001dc5, 8) CAST (unique, 0xbd80, 8)]
[ ---  CBRANCH (ram, 0x483d20, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (register, 0x0, 4) , (const, 0x2, 4), (register, 0x0, 4) INT_SUB (register, 0x0, 4) , (const, 0x1, 4), (register, 0x0, 4) INT_AND (register, 0x0, 4) , (const, 0x3, 4), (register, 0x0, 4) INT_ZEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) CAST (unique, 0x10001e05, 8), (unique, 0x10001e05, 8) INT_ADD (unique, 0x10001dfd, 8) , (const, 0x5, 8), (unique, 0x10001dfd, 8) CAST (unique, 0x3400, 8)]
[ ---  CBRANCH (ram, 0x484297, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x3400, 8) , (unique, 0x10001e0d, 8), (unique, 0x10001e0d, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (register, 0x98, 8) , (const, 0x81, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x48394a, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10001e15, 8), (unique, 0x10001e15, 8) CAST (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (register, 0x98, 8) , (const, 0x82, 8) , (const, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001e25, 8) , (const, 0x0, 4), (unique, 0x10001e25, 8) CAST (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (register, 0x98, 8) , (const, 0x82, 8) , (const, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3200, 8) , (unique, 0x10001e2d, 8), (unique, 0x10001e2d, 8) CAST (unique, 0x3400, 8), (unique, 0x3200, 8) PTRADD (register, 0x98, 8) , (const, 0x81, 8) , (const, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001e35, 8) , (const, 0x0, 8), (unique, 0x10001e35, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001e3d, 8) , (const, 0x9, 8), (unique, 0x10001e3d, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff0, 8) , (const, 0x1, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001e45, 8) , (const, 0x483984, 8), (unique, 0x10001e45, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xffffffffffffffe8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1178, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x1178, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x1177, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x1175, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x1172, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x1178, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x1177, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x1175, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x1172, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x1178, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x1177, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x1175, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x1172, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x1178, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x1177, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x1175, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x1172, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x1178, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x1177, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x1175, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x1172, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x1178, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x1177, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x1175, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x1172, 4)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x1178, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x1177, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x1175, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x1172, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x1178, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x1177, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x1175, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x1172, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x1178, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x1177, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x1175, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x1172, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x1178, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x1177, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x1175, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x1172, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x1178, 4), (stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x1177, 4), (stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x1175, 4), (stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x1172, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x1178, 4), (stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x1177, 4), (stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x1175, 4), (stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x1172, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x1178, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x1177, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x1175, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x1172, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x1178, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x1177, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x1175, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x1172, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x1178, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x1177, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x1175, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x1172, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x1178, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x1177, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x1175, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x1172, 4)]
[(stack, 0xffffffffffffff88, 16) INDIRECT (stack, 0xffffffffffffff88, 16) , (const, 0x1178, 4), (stack, 0xffffffffffffff88, 16) INDIRECT (stack, 0xffffffffffffff88, 16) , (const, 0x1177, 4), (stack, 0xffffffffffffff88, 16) INDIRECT (stack, 0xffffffffffffff88, 16) , (const, 0x1175, 4), (stack, 0xffffffffffffff88, 16) INDIRECT (stack, 0xffffffffffffff88, 16) , (const, 0x1172, 4)]
[(stack, 0xffffffffffffff98, 16) INDIRECT (stack, 0xffffffffffffff98, 16) , (const, 0x1178, 4), (stack, 0xffffffffffffff98, 16) INDIRECT (stack, 0xffffffffffffff98, 16) , (const, 0x1177, 4), (stack, 0xffffffffffffff98, 16) INDIRECT (stack, 0xffffffffffffff98, 16) , (const, 0x1175, 4), (stack, 0xffffffffffffff98, 16) INDIRECT (stack, 0xffffffffffffff98, 16) , (const, 0x1172, 4)]
[(stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0x1178, 4), (stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0x1177, 4), (stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0x1175, 4), (stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0x1172, 4)]
[(stack, 0xffffffffffffffb8, 16) INDIRECT (stack, 0xffffffffffffffb8, 16) , (const, 0x1178, 4), (stack, 0xffffffffffffffb8, 16) INDIRECT (stack, 0xffffffffffffffb8, 16) , (const, 0x1177, 4), (stack, 0xffffffffffffffb8, 16) INDIRECT (stack, 0xffffffffffffffb8, 16) , (const, 0x1175, 4), (stack, 0xffffffffffffffb8, 16) INDIRECT (stack, 0xffffffffffffffb8, 16) , (const, 0x1172, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3200, 8) , (unique, 0x10001e55, 8), (unique, 0x10001e55, 8) CAST (register, 0x0, 8), (unique, 0x3200, 8) PTRADD (register, 0x98, 8) , (const, 0x83, 8) , (const, 0x8, 8), (register, 0x0, 8) CAST (unique, 0x10001e4d, 8), (unique, 0x10001e4d, 8) CALL (ram, 0x481760, 8) , (register, 0x38, 8) , (register, 0x98, 8) , (unique, 0x3100, 8) , (unique, 0x10001264, 8), (register, 0x38, 8) INT_ADD (register, 0x38, 8) , (stack, 0xffffffffffffff38, 8), (unique, 0x3100, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff80, 8), (register, 0x38, 8) INT_ZEXT (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10001e1d, 8), (unique, 0x10001e1d, 8) CAST (unique, 0x3400, 8)]
[(ram, 0x4c4a68, 8) INDIRECT (ram, 0x4c4a68, 8) , (const, 0x1181, 4), (ram, 0x4c4a68, 8) INDIRECT (ram, 0x4c4a68, 8) , (const, 0x117e, 4), (ram, 0x4c4a68, 8) INDIRECT (ram, 0x4c4a68, 8) , (const, 0x1178, 4), (ram, 0x4c4a68, 8) INDIRECT (ram, 0x4c4a68, 8) , (const, 0x1162, 4), (ram, 0x4c4a68, 8) INDIRECT (ram, 0x4c4a68, 8) , (const, 0x1152, 4)]
[(ram, 0x4c6118, 8) INDIRECT (ram, 0x4c6118, 8) , (const, 0x1181, 4), (ram, 0x4c6118, 8) INDIRECT (ram, 0x4c6118, 8) , (const, 0x117e, 4), (ram, 0x4c6118, 8) INDIRECT (ram, 0x4c6118, 8) , (const, 0x1178, 4), (ram, 0x4c6118, 8) INDIRECT (ram, 0x4c6118, 8) , (const, 0x1162, 4), (ram, 0x4c6118, 8) INDIRECT (ram, 0x4c6118, 8) , (const, 0x1152, 4)]
[(ram, 0x4c7d80, 4) INDIRECT (ram, 0x4c7d80, 4) , (const, 0x1181, 4), (ram, 0x4c7d80, 4) INDIRECT (ram, 0x4c7d80, 4) , (const, 0x117e, 4), (ram, 0x4c7d80, 4) INDIRECT (ram, 0x4c7d80, 4) , (const, 0x1178, 4), (ram, 0x4c7d80, 4) INDIRECT (ram, 0x4c7d80, 4) , (const, 0x1162, 4), (ram, 0x4c7d80, 4) INDIRECT (ram, 0x4c7d80, 4) , (const, 0x1152, 4)]
[(ram, 0x4c7da0, 8) INDIRECT (ram, 0x4c7da0, 8) , (const, 0x1181, 4), (ram, 0x4c7da0, 8) INDIRECT (ram, 0x4c7da0, 8) , (const, 0x117e, 4), (ram, 0x4c7da0, 8) INDIRECT (ram, 0x4c7da0, 8) , (const, 0x1178, 4), (ram, 0x4c7da0, 8) INDIRECT (ram, 0x4c7da0, 8) , (const, 0x1162, 4), (ram, 0x4c7da0, 8) INDIRECT (ram, 0x4c7da0, 8) , (const, 0x1152, 4)]
[(ram, 0x4c87c0, 4) INDIRECT (ram, 0x4c87c0, 4) , (const, 0x1181, 4), (ram, 0x4c87c0, 4) INDIRECT (ram, 0x4c87c0, 4) , (const, 0x117e, 4), (ram, 0x4c87c0, 4) INDIRECT (ram, 0x4c87c0, 4) , (const, 0x1178, 4), (ram, 0x4c87c0, 4) INDIRECT (ram, 0x4c87c0, 4) , (const, 0x1162, 4), (ram, 0x4c87c0, 4) INDIRECT (ram, 0x4c87c0, 4) , (const, 0x1152, 4)]
[(ram, 0x4c87d0, 8) INDIRECT (ram, 0x4c87d0, 8) , (const, 0x1181, 4), (ram, 0x4c87d0, 8) INDIRECT (ram, 0x4c87d0, 8) , (const, 0x117e, 4), (ram, 0x4c87d0, 8) INDIRECT (ram, 0x4c87d0, 8) , (const, 0x1178, 4), (ram, 0x4c87d0, 8) INDIRECT (ram, 0x4c87d0, 8) , (const, 0x1162, 4), (ram, 0x4c87d0, 8) INDIRECT (ram, 0x4c87d0, 8) , (const, 0x1152, 4)]
[(ram, 0x4c8840, 4) INDIRECT (ram, 0x4c8840, 4) , (const, 0x1181, 4), (ram, 0x4c8840, 4) INDIRECT (ram, 0x4c8840, 4) , (const, 0x117e, 4), (ram, 0x4c8840, 4) INDIRECT (ram, 0x4c8840, 4) , (const, 0x1178, 4), (ram, 0x4c8840, 4) INDIRECT (ram, 0x4c8840, 4) , (const, 0x1162, 4), (ram, 0x4c8840, 4) INDIRECT (ram, 0x4c8840, 4) , (const, 0x1152, 4)]
[(ram, 0x4c8850, 8) INDIRECT (ram, 0x4c8850, 8) , (const, 0x1181, 4), (ram, 0x4c8850, 8) INDIRECT (ram, 0x4c8850, 8) , (const, 0x117e, 4), (ram, 0x4c8850, 8) INDIRECT (ram, 0x4c8850, 8) , (const, 0x1178, 4), (ram, 0x4c8850, 8) INDIRECT (ram, 0x4c8850, 8) , (const, 0x1162, 4), (ram, 0x4c8850, 8) INDIRECT (ram, 0x4c8850, 8) , (const, 0x1152, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3200, 8) , (unique, 0x10001e5d, 8), (unique, 0x10001e5d, 8) CAST (stack, 0xffffffffffffff80, 8), (unique, 0x3200, 8) PTRADD (register, 0x98, 8) , (const, 0x84, 8) , (const, 0x8, 8), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x1178, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x1177, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x1175, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x1172, 4)]
[(unique, 0xbd80, 8) CAST (unique, 0x10001e65, 8), (unique, 0x10001e65, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (register, 0x98, 8) , (const, 0x83, 8) , (const, 0x8, 8)]
[(stack, 0xffffffffffffff80, 8) COPY (unique, 0x10001e6d, 8), (unique, 0x10001e6d, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (register, 0x98, 8) , (const, 0x84, 8) , (const, 0x8, 8)]
[ ---  BRANCH (ram, 0x483998, 1)]
[(stack, 0xffffffffffffffb8, 16) MULTIEQUAL (stack, 0xffffffffffffffb8, 16) , (stack, 0xffffffffffffffb8, 16)]
[(stack, 0xffffffffffffffa8, 16) MULTIEQUAL (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16)]
[(stack, 0xffffffffffffff98, 16) MULTIEQUAL (stack, 0xffffffffffffff98, 16) , (stack, 0xffffffffffffff98, 16)]
[(stack, 0xffffffffffffff88, 16) MULTIEQUAL (stack, 0xffffffffffffff88, 16) , (stack, 0xffffffffffffff88, 16)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(ram, 0x4c8850, 8) MULTIEQUAL (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8)]
[(ram, 0x4c8840, 4) MULTIEQUAL (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4)]
[(ram, 0x4c87d0, 8) MULTIEQUAL (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8)]
[(ram, 0x4c87c0, 4) MULTIEQUAL (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4)]
[(ram, 0x4c7da0, 8) MULTIEQUAL (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8)]
[(ram, 0x4c7d80, 4) MULTIEQUAL (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4)]
[(ram, 0x4c6118, 8) MULTIEQUAL (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8)]
[(ram, 0x4c4a68, 8) MULTIEQUAL (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (unique, 0xbd80, 8)]
[ ---  CBRANCH (ram, 0x48413e, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffff80, 8) , (const, 0x0, 8), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10001e7d, 8), (unique, 0x10001e7d, 8) INT_ADD (unique, 0x10001e75, 8) , (const, 0x4, 8), (unique, 0x10001e75, 8) CAST (stack, 0xffffffffffffff80, 8)]
[(unique, 0x1000127c, 8) COPY (register, 0x0, 8)]
[ ---  BRANCH (ram, 0x483d26, 1)]
[(stack, 0xffffffffffffffb8, 16) MULTIEQUAL (stack, 0xffffffffffffffb8, 16) , (stack, 0xffffffffffffffb8, 16) , (stack, 0xffffffffffffffb8, 16)]
[(stack, 0xffffffffffffffa8, 16) MULTIEQUAL (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16)]
[(stack, 0xffffffffffffff98, 16) MULTIEQUAL (stack, 0xffffffffffffff98, 16) , (stack, 0xffffffffffffff98, 16) , (stack, 0xffffffffffffff98, 16)]
[(stack, 0xffffffffffffff88, 16) MULTIEQUAL (stack, 0xffffffffffffff88, 16) , (stack, 0xffffffffffffff88, 16) , (stack, 0xffffffffffffff88, 16)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(ram, 0x4c8850, 8) MULTIEQUAL (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8)]
[(ram, 0x4c8840, 4) MULTIEQUAL (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4)]
[(ram, 0x4c87d0, 8) MULTIEQUAL (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8)]
[(ram, 0x4c87c0, 4) MULTIEQUAL (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4)]
[(ram, 0x4c7da0, 8) MULTIEQUAL (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8)]
[(ram, 0x4c7d80, 4) MULTIEQUAL (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4)]
[(ram, 0x4c6118, 8) MULTIEQUAL (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8)]
[(ram, 0x4c4a68, 8) MULTIEQUAL (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x0, 8) MULTIEQUAL (unique, 0x1000127c, 8) , (unique, 0x10001284, 8) , (unique, 0x10001284, 8)]
[(unique, 0xbd80, 8) CAST (unique, 0x10001e95, 8), (unique, 0x10001e95, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (stack, 0xffffffffffffff80, 8) , (const, 0x1, 8) , (const, 0x8, 8), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(register, 0x10, 1) INT_AND (unique, 0xbb00, 1) , (const, 0xf, 1), (unique, 0xbb00, 1) MULTIEQUAL (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1)]
[ ---  CBRANCH (ram, 0x48423a, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc00, 2) , (const, 0xfff1, 2), (unique, 0xbc00, 2) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10001e8d, 8), (unique, 0x10001e8d, 8) INT_ADD (unique, 0x10001e85, 8) , (const, 0x6, 8), (unique, 0x10001e85, 8) CAST (stack, 0xffffffffffffff80, 8), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[ ---  CBRANCH (ram, 0x4839a1, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x10, 1) , (const, 0xa, 1)]
[ ---  CBRANCH (ram, 0x4839a1, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x10, 1) , (const, 0xa, 1)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x4839a1, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc00, 2) , (const, 0x0, 2)]
[(register, 0x90, 8) CAST (unique, 0x10001ead, 8), (unique, 0x10001ead, 8) INT_ADD (unique, 0x10001e9d, 8) , (unique, 0x10001ea5, 8), (unique, 0x10001ea5, 8) CAST (unique, 0xbd80, 8), (unique, 0x10001e9d, 8) CAST (unique, 0xbd80, 8)]
[(register, 0x90, 8) MULTIEQUAL (register, 0x90, 8) , (unique, 0xbd80, 8)]
[ ---  CBRANCH (ram, 0x484351, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffff34, 4) , (const, 0x0, 4)]
[(unique, 0x1000138c, 8) COPY (register, 0x90, 8)]
[ ---  CBRANCH (ram, 0x483dc4, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x98, 8) , (register, 0x0, 8)]
[(unique, 0x10001394, 8) COPY (register, 0x90, 8)]
[ ---  CBRANCH (ram, 0x483dc4, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x10000773, 1) , (const, 0x0, 1), (unique, 0x10000773, 1) INT_AND (unique, 0xbb00, 1) , (const, 0x3, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x10001ebd, 8), (unique, 0x10001ebd, 8) INT_ADD (unique, 0x10001eb5, 8) , (const, 0x31c, 8), (unique, 0x10001eb5, 8) CAST (register, 0x0, 8)]
[(unique, 0x1000139c, 8) COPY (register, 0x90, 8)]
[ ---  CBRANCH (ram, 0x483dc4, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x100007bd, 1) , (const, 0x0, 1), (unique, 0x100007bd, 1) INT_AND (unique, 0xbb00, 1) , (const, 0x4, 1)]
[(stack, 0xffffffffffffff68, 8) COPY (register, 0x90, 8)]
[ ---  CBRANCH (ram, 0x483da6, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10001ec5, 8), (unique, 0x10001ec5, 8) CAST (ram, 0x4c4a68, 8)]
[(register, 0x10, 8) COPY (const, 0x4b026e, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001ecd, 8) , (const, 0x483dbd, 8), (unique, 0x10001ecd, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1277, 4)]
[(ram, 0x4c4a68, 8) INDIRECT (ram, 0x4c4a68, 8) , (const, 0x1277, 4)]
[(ram, 0x4c6118, 8) INDIRECT (ram, 0x4c6118, 8) , (const, 0x1277, 4)]
[(ram, 0x4c7d80, 4) INDIRECT (ram, 0x4c7d80, 4) , (const, 0x1277, 4)]
[(ram, 0x4c7da0, 8) INDIRECT (ram, 0x4c7da0, 8) , (const, 0x1277, 4)]
[(ram, 0x4c87c0, 4) INDIRECT (ram, 0x4c87c0, 4) , (const, 0x1277, 4)]
[(ram, 0x4c87d0, 8) INDIRECT (ram, 0x4c87d0, 8) , (const, 0x1277, 4)]
[(ram, 0x4c8840, 4) INDIRECT (ram, 0x4c8840, 4) , (const, 0x1277, 4)]
[(ram, 0x4c8850, 8) INDIRECT (ram, 0x4c8850, 8) , (const, 0x1277, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x1277, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x1276, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x1277, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x1276, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x1277, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x1276, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x1277, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x1276, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x1277, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x1276, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x1277, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x1276, 4)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x1277, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x1276, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x1277, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x1276, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x1277, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x1276, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x1277, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x1276, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x1277, 4), (stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x1276, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x1277, 4), (stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x1276, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x1277, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x1276, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x1277, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x1276, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x1277, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x1276, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x1277, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x1276, 4)]
[(stack, 0xffffffffffffff88, 16) INDIRECT (stack, 0xffffffffffffff88, 16) , (const, 0x1277, 4), (stack, 0xffffffffffffff88, 16) INDIRECT (stack, 0xffffffffffffff88, 16) , (const, 0x1276, 4)]
[(stack, 0xffffffffffffff98, 16) INDIRECT (stack, 0xffffffffffffff98, 16) , (const, 0x1277, 4), (stack, 0xffffffffffffff98, 16) INDIRECT (stack, 0xffffffffffffff98, 16) , (const, 0x1276, 4)]
[(stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0x1277, 4), (stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0x1276, 4)]
[(stack, 0xffffffffffffffb8, 16) INDIRECT (stack, 0xffffffffffffffb8, 16) , (const, 0x1277, 4), (stack, 0xffffffffffffffb8, 16) INDIRECT (stack, 0xffffffffffffffb8, 16) , (const, 0x1276, 4)]
[ ---  CALL (ram, 0x485480, 8) , (const, 0x2, 8) , (unique, 0x10000a18, 8) , (register, 0x10, 8), (unique, 0x10000a18, 8) COPY (const, 0x4b01f8, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0xbd80, 8) , (register, 0x10, 8)]
[(unique, 0x100013a4, 8) COPY (stack, 0xffffffffffffff68, 8), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x1277, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x1276, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001ed5, 8) , (const, 0x483dc7, 8), (unique, 0x10001ed5, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x127d, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4c4a68, 8) INDIRECT (ram, 0x4c4a68, 8) , (const, 0x127d, 4), (ram, 0x4c4a68, 8) MULTIEQUAL (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8)]
[(ram, 0x4c6118, 8) INDIRECT (ram, 0x4c6118, 8) , (const, 0x127d, 4), (ram, 0x4c6118, 8) MULTIEQUAL (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8)]
[(ram, 0x4c7d80, 4) INDIRECT (ram, 0x4c7d80, 4) , (const, 0x127d, 4), (ram, 0x4c7d80, 4) MULTIEQUAL (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4)]
[(ram, 0x4c7da0, 8) INDIRECT (ram, 0x4c7da0, 8) , (const, 0x127d, 4), (ram, 0x4c7da0, 8) MULTIEQUAL (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8)]
[(ram, 0x4c87c0, 4) INDIRECT (ram, 0x4c87c0, 4) , (const, 0x127d, 4), (ram, 0x4c87c0, 4) MULTIEQUAL (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4)]
[(ram, 0x4c87d0, 8) INDIRECT (ram, 0x4c87d0, 8) , (const, 0x127d, 4), (ram, 0x4c87d0, 8) MULTIEQUAL (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8)]
[(ram, 0x4c8840, 4) INDIRECT (ram, 0x4c8840, 4) , (const, 0x127d, 4), (ram, 0x4c8840, 4) MULTIEQUAL (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4)]
[(ram, 0x4c8850, 8) INDIRECT (ram, 0x4c8850, 8) , (const, 0x127d, 4), (ram, 0x4c8850, 8) MULTIEQUAL (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x127d, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x127c, 4), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x127d, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x127c, 4), (stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x127d, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x127c, 4), (stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x127d, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x127c, 4), (stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x127d, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x127c, 4), (stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x127d, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x127c, 4), (stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x127d, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x127c, 4), (stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x127d, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x127c, 4), (stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x127d, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x127c, 4), (stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x127d, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x127c, 4), (stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x127d, 4), (stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x127c, 4), (stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x127d, 4), (stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x127c, 4), (stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x127d, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x127c, 4), (stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x127d, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x127c, 4), (stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x127d, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x127c, 4), (stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x127d, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x127c, 4), (stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x127d, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x127c, 4), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff88, 16) INDIRECT (stack, 0xffffffffffffff88, 16) , (const, 0x127d, 4), (stack, 0xffffffffffffff88, 16) INDIRECT (stack, 0xffffffffffffff88, 16) , (const, 0x127c, 4), (stack, 0xffffffffffffff88, 16) MULTIEQUAL (stack, 0xffffffffffffff88, 16) , (stack, 0xffffffffffffff88, 16) , (stack, 0xffffffffffffff88, 16) , (stack, 0xffffffffffffff88, 16)]
[(stack, 0xffffffffffffff98, 16) INDIRECT (stack, 0xffffffffffffff98, 16) , (const, 0x127d, 4), (stack, 0xffffffffffffff98, 16) INDIRECT (stack, 0xffffffffffffff98, 16) , (const, 0x127c, 4), (stack, 0xffffffffffffff98, 16) MULTIEQUAL (stack, 0xffffffffffffff98, 16) , (stack, 0xffffffffffffff98, 16) , (stack, 0xffffffffffffff98, 16) , (stack, 0xffffffffffffff98, 16)]
[(stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0x127d, 4), (stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0x127c, 4), (stack, 0xffffffffffffffa8, 16) MULTIEQUAL (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16)]
[(stack, 0xffffffffffffffb8, 16) INDIRECT (stack, 0xffffffffffffffb8, 16) , (const, 0x127d, 4), (stack, 0xffffffffffffffb8, 16) INDIRECT (stack, 0xffffffffffffffb8, 16) , (const, 0x127c, 4), (stack, 0xffffffffffffffb8, 16) MULTIEQUAL (stack, 0xffffffffffffffb8, 16) , (stack, 0xffffffffffffffb8, 16) , (stack, 0xffffffffffffffb8, 16) , (stack, 0xffffffffffffffb8, 16)]
[ ---  CALLIND (unique, 0x10001edd, 8), (unique, 0x10001edd, 8) CAST (register, 0x90, 8), (register, 0x90, 8) MULTIEQUAL (unique, 0x1000138c, 8) , (unique, 0x10001394, 8) , (unique, 0x1000139c, 8) , (unique, 0x100013a4, 8)]
[(register, 0x0, 8) PTRADD (unique, 0xbd80, 8) , (unique, 0x10001ee5, 8) , (const, 0x1, 8), (unique, 0x10001ee5, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x98, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[ ---  BRANCH (ram, 0x4839b2, 1)]
[(register, 0x0, 8) PTRADD (unique, 0xbd80, 8) , (unique, 0x10001eed, 8) , (const, 0x1, 8), (unique, 0x10001eed, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x98, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[ ---  BRANCH (ram, 0x4839b4, 1)]
[(stack, 0xffffffffffffffb8, 16) MULTIEQUAL (stack, 0xffffffffffffffb8, 16) , (stack, 0xffffffffffffffb8, 16) , (stack, 0xffffffffffffffb8, 16) , (stack, 0xffffffffffffffb8, 16)]
[(stack, 0xffffffffffffffa8, 16) MULTIEQUAL (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16)]
[(stack, 0xffffffffffffff98, 16) MULTIEQUAL (stack, 0xffffffffffffff98, 16) , (stack, 0xffffffffffffff98, 16) , (stack, 0xffffffffffffff98, 16) , (stack, 0xffffffffffffff98, 16)]
[(stack, 0xffffffffffffff88, 16) MULTIEQUAL (stack, 0xffffffffffffff88, 16) , (stack, 0xffffffffffffff88, 16) , (stack, 0xffffffffffffff88, 16) , (stack, 0xffffffffffffff88, 16)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(ram, 0x4c8850, 8) MULTIEQUAL (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8)]
[(ram, 0x4c8840, 4) MULTIEQUAL (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4)]
[(ram, 0x4c87d0, 8) MULTIEQUAL (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8)]
[(ram, 0x4c87c0, 4) MULTIEQUAL (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4)]
[(ram, 0x4c7da0, 8) MULTIEQUAL (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8)]
[(ram, 0x4c7d80, 4) MULTIEQUAL (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4)]
[(ram, 0x4c6118, 8) MULTIEQUAL (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8)]
[(ram, 0x4c4a68, 8) MULTIEQUAL (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x0, 8) PTRADD (unique, 0xbd80, 8) , (unique, 0x10001ef5, 8) , (const, 0x1, 8), (unique, 0x10001ef5, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x98, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x4839b4, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffff34, 4) , (const, 0x0, 4), (stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001efd, 8) , (const, 0x4839b4, 8), (unique, 0x10001efd, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x11b1, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4c4a68, 8) INDIRECT (ram, 0x4c4a68, 8) , (const, 0x11b1, 4), (ram, 0x4c4a68, 8) MULTIEQUAL (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8)]
[(ram, 0x4c6118, 8) INDIRECT (ram, 0x4c6118, 8) , (const, 0x11b1, 4), (ram, 0x4c6118, 8) MULTIEQUAL (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8)]
[(ram, 0x4c7d80, 4) INDIRECT (ram, 0x4c7d80, 4) , (const, 0x11b1, 4), (ram, 0x4c7d80, 4) MULTIEQUAL (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4)]
[(ram, 0x4c7da0, 8) INDIRECT (ram, 0x4c7da0, 8) , (const, 0x11b1, 4), (ram, 0x4c7da0, 8) MULTIEQUAL (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8)]
[(ram, 0x4c87c0, 4) INDIRECT (ram, 0x4c87c0, 4) , (const, 0x11b1, 4), (ram, 0x4c87c0, 4) MULTIEQUAL (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4)]
[(ram, 0x4c87d0, 8) INDIRECT (ram, 0x4c87d0, 8) , (const, 0x11b1, 4), (ram, 0x4c87d0, 8) MULTIEQUAL (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8)]
[(ram, 0x4c8840, 4) INDIRECT (ram, 0x4c8840, 4) , (const, 0x11b1, 4), (ram, 0x4c8840, 4) MULTIEQUAL (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4)]
[(ram, 0x4c8850, 8) INDIRECT (ram, 0x4c8850, 8) , (const, 0x11b1, 4), (ram, 0x4c8850, 8) MULTIEQUAL (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x11b1, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x11b0, 4), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x11b1, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x11b0, 4), (stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x11b1, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x11b0, 4), (stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x11b1, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x11b0, 4), (stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x11b1, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x11b0, 4), (stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x11b1, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x11b0, 4), (stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x11b1, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x11b0, 4), (stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x11b1, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x11b0, 4), (stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x11b1, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x11b0, 4), (stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x11b1, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x11b0, 4), (stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x11b1, 4), (stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x11b0, 4), (stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x11b1, 4), (stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x11b0, 4), (stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x11b1, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x11b0, 4), (stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x11b1, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x11b0, 4), (stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x11b1, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x11b0, 4), (stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x11b1, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x11b0, 4), (stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x11b1, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x11b0, 4), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff88, 16) INDIRECT (stack, 0xffffffffffffff88, 16) , (const, 0x11b1, 4), (stack, 0xffffffffffffff88, 16) INDIRECT (stack, 0xffffffffffffff88, 16) , (const, 0x11b0, 4), (stack, 0xffffffffffffff88, 16) MULTIEQUAL (stack, 0xffffffffffffff88, 16) , (stack, 0xffffffffffffff88, 16)]
[(stack, 0xffffffffffffff98, 16) INDIRECT (stack, 0xffffffffffffff98, 16) , (const, 0x11b1, 4), (stack, 0xffffffffffffff98, 16) INDIRECT (stack, 0xffffffffffffff98, 16) , (const, 0x11b0, 4), (stack, 0xffffffffffffff98, 16) MULTIEQUAL (stack, 0xffffffffffffff98, 16) , (stack, 0xffffffffffffff98, 16)]
[(stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0x11b1, 4), (stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0x11b0, 4), (stack, 0xffffffffffffffa8, 16) MULTIEQUAL (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16)]
[(stack, 0xffffffffffffffb8, 16) INDIRECT (stack, 0xffffffffffffffb8, 16) , (const, 0x11b1, 4), (stack, 0xffffffffffffffb8, 16) INDIRECT (stack, 0xffffffffffffffb8, 16) , (const, 0x11b0, 4), (stack, 0xffffffffffffffb8, 16) MULTIEQUAL (stack, 0xffffffffffffffb8, 16) , (stack, 0xffffffffffffffb8, 16)]
[(register, 0x0, 8) CAST (unique, 0x10001f05, 8), (unique, 0x10001f05, 8) CALLIND (register, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[(stack, 0xffffffffffffffb8, 16) MULTIEQUAL (stack, 0xffffffffffffffb8, 16) , (stack, 0xffffffffffffffb8, 16) , (stack, 0xffffffffffffffb8, 16)]
[(stack, 0xffffffffffffffa8, 16) MULTIEQUAL (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16)]
[(stack, 0xffffffffffffff98, 16) MULTIEQUAL (stack, 0xffffffffffffff98, 16) , (stack, 0xffffffffffffff98, 16) , (stack, 0xffffffffffffff98, 16)]
[(stack, 0xffffffffffffff88, 16) MULTIEQUAL (stack, 0xffffffffffffff88, 16) , (stack, 0xffffffffffffff88, 16) , (stack, 0xffffffffffffff88, 16)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4c4a68, 8) INDIRECT (ram, 0x4c4a68, 8) , (const, 0x11b3, 4), (ram, 0x4c4a68, 8) MULTIEQUAL (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8)]
[(ram, 0x4c6118, 8) INDIRECT (ram, 0x4c6118, 8) , (const, 0x11b3, 4), (ram, 0x4c6118, 8) MULTIEQUAL (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8)]
[(ram, 0x4c7d80, 4) INDIRECT (ram, 0x4c7d80, 4) , (const, 0x11b3, 4), (ram, 0x4c7d80, 4) MULTIEQUAL (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4)]
[(ram, 0x4c7da0, 8) INDIRECT (ram, 0x4c7da0, 8) , (const, 0x11b3, 4), (ram, 0x4c7da0, 8) MULTIEQUAL (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8)]
[(ram, 0x4c87c0, 4) INDIRECT (ram, 0x4c87c0, 4) , (const, 0x11b3, 4), (ram, 0x4c87c0, 4) MULTIEQUAL (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4)]
[(ram, 0x4c87d0, 8) INDIRECT (ram, 0x4c87d0, 8) , (const, 0x11b3, 4), (ram, 0x4c87d0, 8) MULTIEQUAL (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8)]
[(ram, 0x4c8840, 4) INDIRECT (ram, 0x4c8840, 4) , (const, 0x11b3, 4), (ram, 0x4c8840, 4) MULTIEQUAL (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4)]
[(ram, 0x4c8850, 8) INDIRECT (ram, 0x4c8850, 8) , (const, 0x11b3, 4), (ram, 0x4c8850, 8) MULTIEQUAL (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0xb0, 8) , (register, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8) , (register, 0x0, 8)]
[ ---  BRANCH (ram, 0x4838e0, 1)]
[(stack, 0xffffffffffffffb8, 16) MULTIEQUAL (stack, 0xffffffffffffffb8, 16) , (stack, 0xffffffffffffffb8, 16)]
[(stack, 0xffffffffffffffa8, 16) MULTIEQUAL (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16)]
[(stack, 0xffffffffffffff98, 16) MULTIEQUAL (stack, 0xffffffffffffff98, 16) , (stack, 0xffffffffffffff98, 16)]
[(stack, 0xffffffffffffff88, 16) MULTIEQUAL (stack, 0xffffffffffffff88, 16) , (stack, 0xffffffffffffff88, 16)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(ram, 0x4c8850, 8) MULTIEQUAL (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8)]
[(ram, 0x4c8840, 4) MULTIEQUAL (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4)]
[(ram, 0x4c87d0, 8) MULTIEQUAL (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8)]
[(ram, 0x4c87c0, 4) MULTIEQUAL (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4)]
[(ram, 0x4c7da0, 8) MULTIEQUAL (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8)]
[(ram, 0x4c7d80, 4) MULTIEQUAL (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4)]
[(ram, 0x4c6118, 8) MULTIEQUAL (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8)]
[(ram, 0x4c4a68, 8) MULTIEQUAL (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x483127, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESSEQUAL (register, 0x18, 8) , (unique, 0x10001244, 8), (register, 0x18, 8) PTRADD (register, 0x18, 8) , (const, 0x3, 8) , (const, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001f15, 8) , (const, 0x484154, 8), (unique, 0x10001f15, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xded, 4)]
[(ram, 0x4c4a68, 8) INDIRECT (ram, 0x4c4a68, 8) , (const, 0xded, 4)]
[(ram, 0x4c6118, 8) INDIRECT (ram, 0x4c6118, 8) , (const, 0xded, 4)]
[(ram, 0x4c7d80, 4) INDIRECT (ram, 0x4c7d80, 4) , (const, 0xded, 4)]
[(ram, 0x4c7da0, 8) INDIRECT (ram, 0x4c7da0, 8) , (const, 0xded, 4)]
[(ram, 0x4c87c0, 4) INDIRECT (ram, 0x4c87c0, 4) , (const, 0xded, 4)]
[(ram, 0x4c87d0, 8) INDIRECT (ram, 0x4c87d0, 8) , (const, 0xded, 4)]
[(ram, 0x4c8840, 4) INDIRECT (ram, 0x4c8840, 4) , (const, 0xded, 4)]
[(ram, 0x4c8850, 8) INDIRECT (ram, 0x4c8850, 8) , (const, 0xded, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0xded, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0xdec, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0xded, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0xdec, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0xded, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0xdec, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0xded, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0xdec, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0xded, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0xdec, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0xded, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0xdec, 4)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0xded, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0xdec, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0xded, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0xdec, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0xded, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0xdec, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0xded, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0xdec, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0xded, 4), (stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0xdec, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0xded, 4), (stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0xdec, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0xded, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0xdec, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0xded, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0xdec, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0xded, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0xdec, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0xded, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0xdec, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0xded, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0xdec, 4)]
[(stack, 0xffffffffffffff88, 16) INDIRECT (stack, 0xffffffffffffff88, 16) , (const, 0xded, 4), (stack, 0xffffffffffffff88, 16) INDIRECT (stack, 0xffffffffffffff88, 16) , (const, 0xdec, 4)]
[(stack, 0xffffffffffffff98, 16) INDIRECT (stack, 0xffffffffffffff98, 16) , (const, 0xded, 4), (stack, 0xffffffffffffff98, 16) INDIRECT (stack, 0xffffffffffffff98, 16) , (const, 0xdec, 4)]
[(stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0xded, 4), (stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0xdec, 4)]
[(stack, 0xffffffffffffffb8, 16) INDIRECT (stack, 0xffffffffffffffb8, 16) , (const, 0xded, 4), (stack, 0xffffffffffffffb8, 16) INDIRECT (stack, 0xffffffffffffffb8, 16) , (const, 0xdec, 4)]
[ ---  CALL (ram, 0x482980, 8) , (register, 0x98, 8) , (register, 0x30, 8) , (const, 0x0, 8), (register, 0x30, 8) INT_AND (unique, 0x10001f0d, 8) , (const, 0xffffffff, 8), (unique, 0x10001f0d, 8) CAST (unique, 0xbd80, 8)]
[(unique, 0x100012cc, 8) COPY (register, 0x10, 8), (register, 0x10, 8) INDIRECT (const, 0x0, 8) , (const, 0xded, 4)]
[(stack, 0xffffffffffffffb8, 16) MULTIEQUAL (stack, 0xffffffffffffffb8, 16) , (stack, 0xffffffffffffffb8, 16)]
[(stack, 0xffffffffffffffa8, 16) MULTIEQUAL (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16)]
[(stack, 0xffffffffffffff98, 16) MULTIEQUAL (stack, 0xffffffffffffff98, 16) , (stack, 0xffffffffffffff98, 16)]
[(stack, 0xffffffffffffff88, 16) MULTIEQUAL (stack, 0xffffffffffffff88, 16) , (stack, 0xffffffffffffff88, 16)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(ram, 0x4c8850, 8) MULTIEQUAL (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8)]
[(ram, 0x4c8840, 4) MULTIEQUAL (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4)]
[(ram, 0x4c87d0, 8) MULTIEQUAL (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8)]
[(ram, 0x4c87c0, 4) MULTIEQUAL (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4)]
[(ram, 0x4c7da0, 8) MULTIEQUAL (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8)]
[(ram, 0x4c7d80, 4) MULTIEQUAL (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4)]
[(ram, 0x4c6118, 8) MULTIEQUAL (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb8, 8) MULTIEQUAL (register, 0xb8, 8) , (register, 0x38, 8)]
[(register, 0xa8, 8) MULTIEQUAL (unique, 0xbd80, 8) , (register, 0xa8, 8)]
[(register, 0xa0, 8) MULTIEQUAL (register, 0xa0, 8) , (register, 0xa0, 8)]
[(register, 0x10, 8) MULTIEQUAL (unique, 0x100012cc, 8) , (register, 0x10, 8)]
[(unique, 0x1000135c, 8) COPY (register, 0x20, 8), (register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x484170, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x10001f25, 8) , (const, 0x0, 8), (unique, 0x10001f25, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10001f1d, 8), (unique, 0x10001f1d, 8) CAST (ram, 0x4c4a68, 8), (ram, 0x4c4a68, 8) MULTIEQUAL (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8)]
[(register, 0x30, 8) COPY (const, 0x4af52f, 8)]
[(register, 0xa8, 8) MULTIEQUAL (register, 0xa8, 8) , (register, 0xa8, 8) , (register, 0xa8, 8)]
[(register, 0xa0, 8) MULTIEQUAL (register, 0xa0, 8) , (register, 0xa0, 8) , (register, 0xa0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001f2d, 8) , (const, 0x48406a, 8), (unique, 0x10001f2d, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8), (register, 0x20, 8) MULTIEQUAL (unique, 0x10001354, 8) , (unique, 0x1000135c, 8) , (unique, 0x1000135c, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xe0c, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4c4a68, 8) INDIRECT (ram, 0x4c4a68, 8) , (const, 0xe0c, 4), (ram, 0x4c4a68, 8) MULTIEQUAL (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8)]
[(ram, 0x4c6118, 8) INDIRECT (ram, 0x4c6118, 8) , (const, 0xe0c, 4), (ram, 0x4c6118, 8) MULTIEQUAL (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8)]
[(ram, 0x4c7d80, 4) INDIRECT (ram, 0x4c7d80, 4) , (const, 0xe0c, 4), (ram, 0x4c7d80, 4) MULTIEQUAL (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4)]
[(ram, 0x4c7da0, 8) INDIRECT (ram, 0x4c7da0, 8) , (const, 0xe0c, 4), (ram, 0x4c7da0, 8) MULTIEQUAL (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8)]
[(ram, 0x4c87c0, 4) INDIRECT (ram, 0x4c87c0, 4) , (const, 0xe0c, 4), (ram, 0x4c87c0, 4) MULTIEQUAL (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4)]
[(ram, 0x4c87d0, 8) INDIRECT (ram, 0x4c87d0, 8) , (const, 0xe0c, 4), (ram, 0x4c87d0, 8) MULTIEQUAL (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8)]
[(ram, 0x4c8840, 4) INDIRECT (ram, 0x4c8840, 4) , (const, 0xe0c, 4), (ram, 0x4c8840, 4) MULTIEQUAL (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4)]
[(ram, 0x4c8850, 8) INDIRECT (ram, 0x4c8850, 8) , (const, 0xe0c, 4), (ram, 0x4c8850, 8) MULTIEQUAL (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0xe0c, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0xe0b, 4), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0xe0c, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0xe0b, 4), (stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0xe0c, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0xe0b, 4), (stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0xe0c, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0xe0b, 4), (stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0xe0c, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0xe0b, 4), (stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0xe0c, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0xe0b, 4), (stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0xe0c, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0xe0b, 4), (stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0xe0c, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0xe0b, 4), (stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0xe0c, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0xe0b, 4), (stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0xe0c, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0xe0b, 4), (stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0xe0c, 4), (stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0xe0b, 4), (stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0xe0c, 4), (stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0xe0b, 4), (stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0xe0c, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0xe0b, 4), (stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0xe0c, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0xe0b, 4), (stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0xe0c, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0xe0b, 4), (stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0xe0c, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0xe0b, 4), (stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0xe0c, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0xe0b, 4), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff88, 16) INDIRECT (stack, 0xffffffffffffff88, 16) , (const, 0xe0c, 4), (stack, 0xffffffffffffff88, 16) INDIRECT (stack, 0xffffffffffffff88, 16) , (const, 0xe0b, 4), (stack, 0xffffffffffffff88, 16) MULTIEQUAL (stack, 0xffffffffffffff88, 16) , (stack, 0xffffffffffffff88, 16) , (stack, 0xffffffffffffff88, 16)]
[(stack, 0xffffffffffffff98, 16) INDIRECT (stack, 0xffffffffffffff98, 16) , (const, 0xe0c, 4), (stack, 0xffffffffffffff98, 16) INDIRECT (stack, 0xffffffffffffff98, 16) , (const, 0xe0b, 4), (stack, 0xffffffffffffff98, 16) MULTIEQUAL (stack, 0xffffffffffffff98, 16) , (stack, 0xffffffffffffff98, 16) , (stack, 0xffffffffffffff98, 16)]
[(stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0xe0c, 4), (stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0xe0b, 4), (stack, 0xffffffffffffffa8, 16) MULTIEQUAL (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16)]
[(stack, 0xffffffffffffffb8, 16) INDIRECT (stack, 0xffffffffffffffb8, 16) , (const, 0xe0c, 4), (stack, 0xffffffffffffffb8, 16) INDIRECT (stack, 0xffffffffffffffb8, 16) , (const, 0xe0b, 4), (stack, 0xffffffffffffffb8, 16) MULTIEQUAL (stack, 0xffffffffffffffb8, 16) , (stack, 0xffffffffffffffb8, 16) , (stack, 0xffffffffffffffb8, 16)]
[ ---  CALL (ram, 0x485320, 8) , (unique, 0x10000a28, 8) , (register, 0x30, 8) , (register, 0x10, 8), (unique, 0x10000a28, 8) COPY (const, 0x4b0285, 8), (register, 0x10, 8) MULTIEQUAL (register, 0x10, 8) , (register, 0x10, 8) , (register, 0x10, 8), (register, 0x30, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8) , (register, 0x30, 8)]
[(unique, 0x10001374, 8) COPY (register, 0x20, 8), (register, 0x20, 8) MULTIEQUAL (unique, 0x10001354, 8) , (unique, 0x1000135c, 8) , (unique, 0x1000135c, 8)]
[(unique, 0x100015dc, 8) COPY (register, 0xb8, 8), (register, 0xb8, 8) MULTIEQUAL (register, 0x38, 8) , (register, 0xb8, 8) , (register, 0xb8, 8)]
[ ---  BRANCH (ram, 0x482aa8, 1)]
[(stack, 0xffffffffffffffb8, 16) MULTIEQUAL (stack, 0xffffffffffffffb8, 16) , (stack, 0xffffffffffffffb8, 16) , (stack, 0xffffffffffffffb8, 16) , (stack, 0xffffffffffffffb8, 16) , (stack, 0xffffffffffffffb8, 16) , (stack, 0xffffffffffffffb8, 16) , (stack, 0xffffffffffffffb8, 16) , (stack, 0xffffffffffffffb8, 16) , (stack, 0xffffffffffffffb8, 16) , (stack, 0xffffffffffffffb8, 16) , (stack, 0xffffffffffffffb8, 16) , (stack, 0xffffffffffffffb8, 16) , (stack, 0xffffffffffffffb8, 16) , (stack, 0xffffffffffffffb8, 16) , (stack, 0xffffffffffffffb8, 16)]
[(stack, 0xffffffffffffffa8, 16) MULTIEQUAL (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16)]
[(stack, 0xffffffffffffff98, 16) MULTIEQUAL (stack, 0xffffffffffffff98, 16) , (stack, 0xffffffffffffff98, 16) , (stack, 0xffffffffffffff98, 16) , (stack, 0xffffffffffffff98, 16) , (stack, 0xffffffffffffff98, 16) , (stack, 0xffffffffffffff98, 16) , (stack, 0xffffffffffffff98, 16) , (stack, 0xffffffffffffff98, 16) , (stack, 0xffffffffffffff98, 16) , (stack, 0xffffffffffffff98, 16) , (stack, 0xffffffffffffff98, 16) , (stack, 0xffffffffffffff98, 16) , (stack, 0xffffffffffffff98, 16) , (stack, 0xffffffffffffff98, 16) , (stack, 0xffffffffffffff98, 16)]
[(stack, 0xffffffffffffff88, 16) MULTIEQUAL (stack, 0xffffffffffffff88, 16) , (stack, 0xffffffffffffff88, 16) , (stack, 0xffffffffffffff88, 16) , (stack, 0xffffffffffffff88, 16) , (stack, 0xffffffffffffff88, 16) , (stack, 0xffffffffffffff88, 16) , (stack, 0xffffffffffffff88, 16) , (stack, 0xffffffffffffff88, 16) , (stack, 0xffffffffffffff88, 16) , (stack, 0xffffffffffffff88, 16) , (stack, 0xffffffffffffff88, 16) , (stack, 0xffffffffffffff88, 16) , (stack, 0xffffffffffffff88, 16) , (stack, 0xffffffffffffff88, 16) , (stack, 0xffffffffffffff88, 16)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(ram, 0x4c8850, 8) MULTIEQUAL (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8) , (unique, 0x10001067, 8) , (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8) , (unique, 0x10001067, 8) , (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8)]
[(ram, 0x4c8840, 4) MULTIEQUAL (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4) , (unique, 0x10001063, 4) , (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4) , (unique, 0x10001063, 4) , (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4)]
[(ram, 0x4c87d0, 8) MULTIEQUAL (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8) , (unique, 0x1000105b, 8) , (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8) , (unique, 0x1000105b, 8) , (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8)]
[(ram, 0x4c87c0, 4) MULTIEQUAL (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4) , (unique, 0x10001057, 4) , (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4) , (unique, 0x10001057, 4) , (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4)]
[(ram, 0x4c7da0, 8) MULTIEQUAL (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8) , (unique, 0x1000104f, 8) , (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8) , (unique, 0x1000104f, 8) , (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8)]
[(ram, 0x4c7d80, 4) MULTIEQUAL (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4) , (unique, 0x1000104b, 4) , (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4) , (unique, 0x1000104b, 4) , (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4)]
[(ram, 0x4c6118, 8) MULTIEQUAL (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8) , (unique, 0x10001043, 8) , (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8) , (unique, 0x10001043, 8) , (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8)]
[(ram, 0x4c4a68, 8) MULTIEQUAL (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8) , (unique, 0x1000103b, 8) , (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8) , (unique, 0x1000103b, 8) , (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x98, 8) MULTIEQUAL (register, 0x98, 8) , (register, 0x98, 8) , (register, 0x98, 8) , (register, 0x98, 8) , (register, 0x98, 8) , (register, 0x98, 8) , (register, 0x98, 8) , (register, 0x98, 8) , (register, 0x98, 8) , (register, 0x98, 8) , (register, 0x98, 8) , (register, 0x98, 8) , (register, 0x98, 8) , (register, 0x98, 8) , (register, 0x98, 8)]
[(stack, 0xffffffffffffff48, 8) COPY (unique, 0xbe00, 8), (unique, 0xbe00, 8) PTRADD (stack, 0xffffffffffffff48, 8) , (const, 0x4, 8) , (const, 0x8, 8), (stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[ ---  CBRANCH (ram, 0x482c0e, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbe00, 8) , (stack, 0xffffffffffffff18, 8), (unique, 0xbe00, 8) PTRADD (stack, 0xffffffffffffff48, 8) , (const, 0x4, 8) , (const, 0x8, 8), (stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8), (stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[ ---  CBRANCH (ram, 0x4840a9, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffff30, 4) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x482d12, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x98, 8) , (const, 0xa, 8) , (const, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001f45, 8) , (const, 0x4840e5, 8), (unique, 0x10001f45, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x32b, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x32b, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x32a, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x32b, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x32a, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x32b, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x32a, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x32b, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x32a, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x32b, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x32a, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x32b, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x32a, 4)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x32b, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x32a, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x32b, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x32a, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x32b, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x32a, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x32b, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x32a, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x32b, 4), (stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x32a, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x32b, 4), (stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x32a, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x32b, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x32a, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x32b, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x32a, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x32b, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x32a, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x32b, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x32a, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x32b, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x32a, 4)]
[(stack, 0xffffffffffffff88, 16) INDIRECT (stack, 0xffffffffffffff88, 16) , (const, 0x32b, 4), (stack, 0xffffffffffffff88, 16) INDIRECT (stack, 0xffffffffffffff88, 16) , (const, 0x32a, 4)]
[(stack, 0xffffffffffffff98, 16) INDIRECT (stack, 0xffffffffffffff98, 16) , (const, 0x32b, 4), (stack, 0xffffffffffffff98, 16) INDIRECT (stack, 0xffffffffffffff98, 16) , (const, 0x32a, 4)]
[(stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0x32b, 4), (stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0x32a, 4)]
[(stack, 0xffffffffffffffb8, 16) INDIRECT (stack, 0xffffffffffffffb8, 16) , (const, 0x32b, 4), (stack, 0xffffffffffffffb8, 16) INDIRECT (stack, 0xffffffffffffffb8, 16) , (const, 0x32a, 4)]
[(ram, 0x4c4a68, 8) INDIRECT (ram, 0x4c4a68, 8) , (const, 0x32e, 4), (ram, 0x4c4a68, 8) INDIRECT (ram, 0x4c4a68, 8) , (const, 0x32b, 4)]
[(ram, 0x4c6118, 8) INDIRECT (ram, 0x4c6118, 8) , (const, 0x32e, 4), (ram, 0x4c6118, 8) INDIRECT (ram, 0x4c6118, 8) , (const, 0x32b, 4)]
[(ram, 0x4c7d80, 4) INDIRECT (ram, 0x4c7d80, 4) , (const, 0x32e, 4), (ram, 0x4c7d80, 4) INDIRECT (ram, 0x4c7d80, 4) , (const, 0x32b, 4)]
[(ram, 0x4c7da0, 8) INDIRECT (ram, 0x4c7da0, 8) , (const, 0x32e, 4), (ram, 0x4c7da0, 8) INDIRECT (ram, 0x4c7da0, 8) , (const, 0x32b, 4)]
[(ram, 0x4c87c0, 4) INDIRECT (ram, 0x4c87c0, 4) , (const, 0x32e, 4), (ram, 0x4c87c0, 4) INDIRECT (ram, 0x4c87c0, 4) , (const, 0x32b, 4)]
[(ram, 0x4c87d0, 8) INDIRECT (ram, 0x4c87d0, 8) , (const, 0x32e, 4), (ram, 0x4c87d0, 8) INDIRECT (ram, 0x4c87d0, 8) , (const, 0x32b, 4)]
[(ram, 0x4c8840, 4) INDIRECT (ram, 0x4c8840, 4) , (const, 0x32e, 4), (ram, 0x4c8840, 4) INDIRECT (ram, 0x4c8840, 4) , (const, 0x32b, 4)]
[(ram, 0x4c8850, 8) INDIRECT (ram, 0x4c8850, 8) , (const, 0x32e, 4), (ram, 0x4c8850, 8) INDIRECT (ram, 0x4c8850, 8) , (const, 0x32b, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3200, 8) , (register, 0x0, 8), (unique, 0x3200, 8) PTRADD (register, 0x98, 8) , (const, 0x67, 8) , (const, 0x8, 8), (register, 0x0, 8) CAST (unique, 0x10001f4d, 8), (unique, 0x10001f4d, 8) CALL (ram, 0x427e50, 8) , (const, 0x20, 8) , (register, 0x0, 8), (register, 0x0, 8) INT_DIV (unique, 0xbd80, 8) , (unique, 0x3580, 8), (unique, 0x3580, 8) INT_ADD (unique, 0x3480, 8) , (const, 0x10, 8), (unique, 0x3480, 8) INT_MULT (unique, 0x100006d8, 8) , (const, 0x8, 8), (unique, 0x100006d8, 8) INT_ZEXT (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbe00, 8) , (const, 0x7, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10001f3d, 8), (unique, 0x10001f3d, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x8, 8) , (const, 0x1, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10001f35, 8), (unique, 0x10001f35, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x8, 8) , (const, 0x1, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (register, 0x98, 8) , (const, 0x1c, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x482d12, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10001f4d, 8), (unique, 0x10001f4d, 8) CALL (ram, 0x427e50, 8) , (const, 0x20, 8) , (register, 0x0, 8), (register, 0x0, 8) INT_DIV (unique, 0xbd80, 8) , (unique, 0x3580, 8), (unique, 0x3580, 8) INT_ADD (unique, 0x3480, 8) , (const, 0x10, 8), (unique, 0x3480, 8) INT_MULT (unique, 0x100006d8, 8) , (const, 0x8, 8), (unique, 0x100006d8, 8) INT_ZEXT (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbe00, 8) , (const, 0x7, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10001f3d, 8), (unique, 0x10001f3d, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x8, 8) , (const, 0x1, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10001f35, 8), (unique, 0x10001f35, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x8, 8) , (const, 0x1, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (register, 0x98, 8) , (const, 0x1c, 8) , (const, 0x8, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x98, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x48437c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10001f55, 8), (unique, 0x10001f55, 8) CAST (ram, 0x4c4a68, 8)]
[(register, 0x10, 8) COPY (const, 0x4b026e, 8)]
[ ---  BRANCH (ram, 0x48410c, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001f5d, 8) , (const, 0x48411f, 8), (unique, 0x10001f5d, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[ ---  CALL (ram, 0x485480, 8) , (const, 0x2, 8) , (unique, 0x10000a20, 8) , (register, 0x10, 8) , (unique, 0xbd80, 8), (unique, 0x10000a20, 8) COPY (const, 0x4b0230, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0xbd80, 8) , (register, 0x10, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001f65, 8) , (unique, 0x100009c0, 8), (unique, 0x10001f65, 8) CAST (register, 0x20, 8), (unique, 0x100009c0, 8) PTRSUB (const, 0x0, 8) , (const, 0x484129, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x35c, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x35b, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x358, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x357, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x35c, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x35b, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x358, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x357, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x35c, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x35b, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x358, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x357, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x35c, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x35b, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x358, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x357, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x35c, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x35b, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x358, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x357, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x35c, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x35b, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x358, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x357, 4)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x35c, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x35b, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x358, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x357, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x35c, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x35b, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x358, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x357, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x35c, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x35b, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x358, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x357, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x35c, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x35b, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x358, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x357, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x35c, 4), (stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x35b, 4), (stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x358, 4), (stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x357, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x35c, 4), (stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x35b, 4), (stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x358, 4), (stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x357, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x35c, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x35b, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x358, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x357, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x35c, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x35b, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x358, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x357, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x35c, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x35b, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x358, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x357, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x35c, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x35b, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x358, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x357, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x35c, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x35b, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x358, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x357, 4)]
[(stack, 0xffffffffffffff88, 16) INDIRECT (stack, 0xffffffffffffff88, 16) , (const, 0x35c, 4), (stack, 0xffffffffffffff88, 16) INDIRECT (stack, 0xffffffffffffff88, 16) , (const, 0x35b, 4), (stack, 0xffffffffffffff88, 16) INDIRECT (stack, 0xffffffffffffff88, 16) , (const, 0x358, 4), (stack, 0xffffffffffffff88, 16) INDIRECT (stack, 0xffffffffffffff88, 16) , (const, 0x357, 4)]
[(stack, 0xffffffffffffff98, 16) INDIRECT (stack, 0xffffffffffffff98, 16) , (const, 0x35c, 4), (stack, 0xffffffffffffff98, 16) INDIRECT (stack, 0xffffffffffffff98, 16) , (const, 0x35b, 4), (stack, 0xffffffffffffff98, 16) INDIRECT (stack, 0xffffffffffffff98, 16) , (const, 0x358, 4), (stack, 0xffffffffffffff98, 16) INDIRECT (stack, 0xffffffffffffff98, 16) , (const, 0x357, 4)]
[(stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0x35c, 4), (stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0x35b, 4), (stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0x358, 4), (stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0x357, 4)]
[(stack, 0xffffffffffffffb8, 16) INDIRECT (stack, 0xffffffffffffffb8, 16) , (const, 0x35c, 4), (stack, 0xffffffffffffffb8, 16) INDIRECT (stack, 0xffffffffffffffb8, 16) , (const, 0x35b, 4), (stack, 0xffffffffffffffb8, 16) INDIRECT (stack, 0xffffffffffffffb8, 16) , (const, 0x358, 4), (stack, 0xffffffffffffffb8, 16) INDIRECT (stack, 0xffffffffffffffb8, 16) , (const, 0x357, 4)]
[ ---  CALL (ram, 0x454cb0, 8) , (const, 0x7f, 4)]
[(ram, 0x4c4a68, 8) COPY (ram, 0x4c4a68, 8), (ram, 0x4c4a68, 8) INDIRECT (ram, 0x4c4a68, 8) , (const, 0x35c, 4), (ram, 0x4c4a68, 8) INDIRECT (ram, 0x4c4a68, 8) , (const, 0x358, 4)]
[(ram, 0x4c6118, 8) COPY (ram, 0x4c6118, 8), (ram, 0x4c6118, 8) INDIRECT (ram, 0x4c6118, 8) , (const, 0x35c, 4), (ram, 0x4c6118, 8) INDIRECT (ram, 0x4c6118, 8) , (const, 0x358, 4)]
[(ram, 0x4c7d80, 4) COPY (ram, 0x4c7d80, 4), (ram, 0x4c7d80, 4) INDIRECT (ram, 0x4c7d80, 4) , (const, 0x35c, 4), (ram, 0x4c7d80, 4) INDIRECT (ram, 0x4c7d80, 4) , (const, 0x358, 4)]
[(ram, 0x4c7da0, 8) COPY (ram, 0x4c7da0, 8), (ram, 0x4c7da0, 8) INDIRECT (ram, 0x4c7da0, 8) , (const, 0x35c, 4), (ram, 0x4c7da0, 8) INDIRECT (ram, 0x4c7da0, 8) , (const, 0x358, 4)]
[(ram, 0x4c87c0, 4) COPY (ram, 0x4c87c0, 4), (ram, 0x4c87c0, 4) INDIRECT (ram, 0x4c87c0, 4) , (const, 0x35c, 4), (ram, 0x4c87c0, 4) INDIRECT (ram, 0x4c87c0, 4) , (const, 0x358, 4)]
[(ram, 0x4c87d0, 8) COPY (ram, 0x4c87d0, 8), (ram, 0x4c87d0, 8) INDIRECT (ram, 0x4c87d0, 8) , (const, 0x35c, 4), (ram, 0x4c87d0, 8) INDIRECT (ram, 0x4c87d0, 8) , (const, 0x358, 4)]
[(ram, 0x4c8840, 4) COPY (ram, 0x4c8840, 4), (ram, 0x4c8840, 4) INDIRECT (ram, 0x4c8840, 4) , (const, 0x35c, 4), (ram, 0x4c8840, 4) INDIRECT (ram, 0x4c8840, 4) , (const, 0x358, 4)]
[(ram, 0x4c8850, 8) COPY (ram, 0x4c8850, 8), (ram, 0x4c8850, 8) INDIRECT (ram, 0x4c8850, 8) , (const, 0x35c, 4), (ram, 0x4c8850, 8) INDIRECT (ram, 0x4c8850, 8) , (const, 0x358, 4)]
[ ---  RETURN (const, 0x1, 4)]
[(stack, 0xffffffffffffffb8, 16) MULTIEQUAL (stack, 0xffffffffffffffb8, 16) , (stack, 0xffffffffffffffb8, 16) , (stack, 0xffffffffffffffb8, 16)]
[(stack, 0xffffffffffffffa8, 16) MULTIEQUAL (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16)]
[(stack, 0xffffffffffffff98, 16) MULTIEQUAL (stack, 0xffffffffffffff98, 16) , (stack, 0xffffffffffffff98, 16) , (stack, 0xffffffffffffff98, 16)]
[(stack, 0xffffffffffffff88, 16) MULTIEQUAL (stack, 0xffffffffffffff88, 16) , (stack, 0xffffffffffffff88, 16) , (stack, 0xffffffffffffff88, 16)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4c4a68, 8) INDIRECT (ram, 0x4c4a68, 8) , (const, 0x1fe, 4), (ram, 0x4c4a68, 8) MULTIEQUAL (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8)]
[(ram, 0x4c6118, 8) INDIRECT (ram, 0x4c6118, 8) , (const, 0x1fe, 4), (ram, 0x4c6118, 8) MULTIEQUAL (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8)]
[(ram, 0x4c7d80, 4) INDIRECT (ram, 0x4c7d80, 4) , (const, 0x1fe, 4), (ram, 0x4c7d80, 4) MULTIEQUAL (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4)]
[(ram, 0x4c7da0, 8) INDIRECT (ram, 0x4c7da0, 8) , (const, 0x1fe, 4), (ram, 0x4c7da0, 8) MULTIEQUAL (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8)]
[(ram, 0x4c87c0, 4) INDIRECT (ram, 0x4c87c0, 4) , (const, 0x1fe, 4), (ram, 0x4c87c0, 4) MULTIEQUAL (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4)]
[(ram, 0x4c87d0, 8) INDIRECT (ram, 0x4c87d0, 8) , (const, 0x1fe, 4), (ram, 0x4c87d0, 8) MULTIEQUAL (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8)]
[(ram, 0x4c8840, 4) INDIRECT (ram, 0x4c8840, 4) , (const, 0x1fe, 4), (ram, 0x4c8840, 4) MULTIEQUAL (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4)]
[(ram, 0x4c8850, 8) INDIRECT (ram, 0x4c8850, 8) , (const, 0x1fe, 4), (ram, 0x4c8850, 8) MULTIEQUAL (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3200, 8) , (unique, 0xbb00, 1), (unique, 0xbb00, 1) INT_OR (unique, 0xbb00, 1) , (const, 0x4, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x10001f75, 8), (unique, 0x10001f75, 8) INT_ADD (unique, 0x10001f6d, 8) , (const, 0x31c, 8), (unique, 0x10001f6d, 8) CAST (register, 0x98, 8)]
[(unique, 0x1000164c, 8) COPY (stack, 0xffffffffffffff10, 8), (stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(unique, 0x10001078, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x10001080, 8) MULTIEQUAL (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8)]
[(unique, 0x10001088, 8) MULTIEQUAL (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8)]
[(unique, 0x10001090, 4) MULTIEQUAL (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4)]
[(unique, 0x10001094, 8) MULTIEQUAL (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8)]
[(unique, 0x1000109c, 4) MULTIEQUAL (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4)]
[(unique, 0x100010a0, 8) MULTIEQUAL (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8)]
[(unique, 0x100010a8, 4) MULTIEQUAL (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4)]
[(unique, 0x100010ac, 8) MULTIEQUAL (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8)]
[(unique, 0x100010b4, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(unique, 0x100010bc, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(unique, 0x100010cc, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(unique, 0x100010d4, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(unique, 0x100010dc, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(unique, 0x100010e4, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(unique, 0x100010ec, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(unique, 0x100010f0, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(unique, 0x100010f4, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(unique, 0x100010fc, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(unique, 0x10001104, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(unique, 0x1000110c, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(unique, 0x10001114, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(unique, 0x1000111c, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(unique, 0x10001124, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(unique, 0x1000112c, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(unique, 0x10001134, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(unique, 0x1000113c, 16) MULTIEQUAL (stack, 0xffffffffffffff88, 16) , (stack, 0xffffffffffffff88, 16)]
[(unique, 0x1000114c, 16) MULTIEQUAL (stack, 0xffffffffffffff98, 16) , (stack, 0xffffffffffffff98, 16)]
[(unique, 0x1000115c, 16) MULTIEQUAL (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16)]
[(unique, 0x1000116c, 16) MULTIEQUAL (stack, 0xffffffffffffffb8, 16) , (stack, 0xffffffffffffffb8, 16)]
[(unique, 0x10001314, 8) COPY (unique, 0x100010c4, 8), (unique, 0x100010c4, 8) MULTIEQUAL (unique, 0x1000164c, 8) , (unique, 0xbd80, 8)]
[(unique, 0x1000162c, 8) COPY (unique, 0x10001070, 8), (unique, 0x10001070, 8) MULTIEQUAL (register, 0x98, 8) , (register, 0xb8, 8)]
[ ---  CBRANCH (ram, 0x48407c, 1) , (unique, 0x1000106f, 1), (unique, 0x1000106f, 1) INT_EQUAL (unique, 0x100010c4, 8) , (const, 0x0, 8), (unique, 0x100010c4, 8) MULTIEQUAL (unique, 0x1000164c, 8) , (unique, 0xbd80, 8)]
[(register, 0xb8, 8) MULTIEQUAL (unique, 0x1000162c, 8) , (unique, 0x10001634, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001f85, 8) , (const, 0x484092, 8), (unique, 0x10001f85, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x2b4, 4), (register, 0x110, 8) MULTIEQUAL (unique, 0x10001078, 8) , (register, 0x110, 8)]
[(ram, 0x4c4a68, 8) INDIRECT (ram, 0x4c4a68, 8) , (const, 0x2b4, 4), (ram, 0x4c4a68, 8) MULTIEQUAL (unique, 0x10001080, 8) , (ram, 0x4c4a68, 8)]
[(ram, 0x4c6118, 8) INDIRECT (ram, 0x4c6118, 8) , (const, 0x2b4, 4), (ram, 0x4c6118, 8) MULTIEQUAL (unique, 0x10001088, 8) , (ram, 0x4c6118, 8)]
[(ram, 0x4c7d80, 4) INDIRECT (ram, 0x4c7d80, 4) , (const, 0x2b4, 4), (ram, 0x4c7d80, 4) MULTIEQUAL (unique, 0x10001090, 4) , (ram, 0x4c7d80, 4)]
[(ram, 0x4c7da0, 8) INDIRECT (ram, 0x4c7da0, 8) , (const, 0x2b4, 4), (ram, 0x4c7da0, 8) MULTIEQUAL (unique, 0x10001094, 8) , (ram, 0x4c7da0, 8)]
[(ram, 0x4c87c0, 4) INDIRECT (ram, 0x4c87c0, 4) , (const, 0x2b4, 4), (ram, 0x4c87c0, 4) MULTIEQUAL (unique, 0x1000109c, 4) , (ram, 0x4c87c0, 4)]
[(ram, 0x4c87d0, 8) INDIRECT (ram, 0x4c87d0, 8) , (const, 0x2b4, 4), (ram, 0x4c87d0, 8) MULTIEQUAL (unique, 0x100010a0, 8) , (ram, 0x4c87d0, 8)]
[(ram, 0x4c8840, 4) INDIRECT (ram, 0x4c8840, 4) , (const, 0x2b4, 4), (ram, 0x4c8840, 4) MULTIEQUAL (unique, 0x100010a8, 4) , (ram, 0x4c8840, 4)]
[(ram, 0x4c8850, 8) INDIRECT (ram, 0x4c8850, 8) , (const, 0x2b4, 4), (ram, 0x4c8850, 8) MULTIEQUAL (unique, 0x100010ac, 8) , (ram, 0x4c8850, 8)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x2b4, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x2b3, 4), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (unique, 0x100010b4, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x2b4, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x2b3, 4), (stack, 0xffffffffffffff08, 8) MULTIEQUAL (unique, 0x100010bc, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x2b4, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x2b3, 4), (stack, 0xffffffffffffff10, 8) MULTIEQUAL (unique, 0x100010cc, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x2b4, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x2b3, 4), (stack, 0xffffffffffffff18, 8) MULTIEQUAL (unique, 0x100010d4, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x2b4, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x2b3, 4), (stack, 0xffffffffffffff20, 8) MULTIEQUAL (unique, 0x100010dc, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x2b4, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x2b3, 4), (stack, 0xffffffffffffff28, 8) MULTIEQUAL (unique, 0x100010e4, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x2b4, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x2b3, 4), (stack, 0xffffffffffffff30, 4) MULTIEQUAL (unique, 0x100010ec, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x2b4, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x2b3, 4), (stack, 0xffffffffffffff34, 4) MULTIEQUAL (unique, 0x100010f0, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x2b4, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x2b3, 4), (stack, 0xffffffffffffff38, 8) MULTIEQUAL (unique, 0x100010f4, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x2b4, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x2b3, 4), (stack, 0xffffffffffffff40, 8) MULTIEQUAL (unique, 0x100010fc, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x2b4, 4), (stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x2b3, 4), (stack, 0xffffffffffffff48, 8) MULTIEQUAL (unique, 0x10001104, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x2b4, 4), (stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x2b3, 4), (stack, 0xffffffffffffff50, 8) MULTIEQUAL (unique, 0x1000110c, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x2b4, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x2b3, 4), (stack, 0xffffffffffffff58, 8) MULTIEQUAL (unique, 0x10001114, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x2b4, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x2b3, 4), (stack, 0xffffffffffffff60, 8) MULTIEQUAL (unique, 0x1000111c, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x2b4, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x2b3, 4), (stack, 0xffffffffffffff68, 8) MULTIEQUAL (unique, 0x10001124, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x2b4, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x2b3, 4), (stack, 0xffffffffffffff70, 8) MULTIEQUAL (unique, 0x1000112c, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x2b4, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x2b3, 4), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (unique, 0x10001134, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff88, 16) INDIRECT (stack, 0xffffffffffffff88, 16) , (const, 0x2b4, 4), (stack, 0xffffffffffffff88, 16) INDIRECT (stack, 0xffffffffffffff88, 16) , (const, 0x2b3, 4), (stack, 0xffffffffffffff88, 16) MULTIEQUAL (unique, 0x1000113c, 16) , (stack, 0xffffffffffffff88, 16)]
[(stack, 0xffffffffffffff98, 16) INDIRECT (stack, 0xffffffffffffff98, 16) , (const, 0x2b4, 4), (stack, 0xffffffffffffff98, 16) INDIRECT (stack, 0xffffffffffffff98, 16) , (const, 0x2b3, 4), (stack, 0xffffffffffffff98, 16) MULTIEQUAL (unique, 0x1000114c, 16) , (stack, 0xffffffffffffff98, 16)]
[(stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0x2b4, 4), (stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0x2b3, 4), (stack, 0xffffffffffffffa8, 16) MULTIEQUAL (unique, 0x1000115c, 16) , (stack, 0xffffffffffffffa8, 16)]
[(stack, 0xffffffffffffffb8, 16) INDIRECT (stack, 0xffffffffffffffb8, 16) , (const, 0x2b4, 4), (stack, 0xffffffffffffffb8, 16) INDIRECT (stack, 0xffffffffffffffb8, 16) , (const, 0x2b3, 4), (stack, 0xffffffffffffffb8, 16) MULTIEQUAL (unique, 0x1000116c, 16) , (stack, 0xffffffffffffffb8, 16)]
[ ---  CBRANCH (ram, 0x4843a7, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x4562d0, 8) , (unique, 0xbd80, 8) , (unique, 0x10001f8d, 8) , (unique, 0xbc80, 4), (unique, 0x10001f8d, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x18, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x1, 8) , (const, 0x8, 8), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10001f7d, 8), (unique, 0x10001f7d, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x2, 8) , (const, 0x8, 8), (register, 0x18, 8) MULTIEQUAL (unique, 0x10001314, 8) , (unique, 0x1000131c, 8)]
[(register, 0x8, 8) COPY (const, 0x4b00a8, 8)]
[ ---  BRANCH (ram, 0x484392, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001f9d, 8) , (const, 0x4843a7, 8), (unique, 0x10001f9d, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8), (register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x2e3, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x2e2, 4), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x2e3, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x2e2, 4), (stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x2e3, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x2e2, 4), (stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x2e3, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x2e2, 4), (stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x2e3, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x2e2, 4), (stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x2e3, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x2e2, 4), (stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x2e3, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x2e2, 4), (stack, 0xffffffffffffff30, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (stack, 0xffffffffffffff30, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x2e3, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x2e2, 4), (stack, 0xffffffffffffff34, 4) MULTIEQUAL (stack, 0xffffffffffffff34, 4) , (stack, 0xffffffffffffff34, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x2e3, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x2e2, 4), (stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x2e3, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x2e2, 4), (stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x2e3, 4), (stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x2e2, 4), (stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x2e3, 4), (stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x2e2, 4), (stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x2e3, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x2e2, 4), (stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x2e3, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x2e2, 4), (stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x2e3, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x2e2, 4), (stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x2e3, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x2e2, 4), (stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x2e3, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x2e2, 4), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff88, 16) INDIRECT (stack, 0xffffffffffffff88, 16) , (const, 0x2e3, 4), (stack, 0xffffffffffffff88, 16) INDIRECT (stack, 0xffffffffffffff88, 16) , (const, 0x2e2, 4), (stack, 0xffffffffffffff88, 16) MULTIEQUAL (stack, 0xffffffffffffff88, 16) , (stack, 0xffffffffffffff88, 16)]
[(stack, 0xffffffffffffff98, 16) INDIRECT (stack, 0xffffffffffffff98, 16) , (const, 0x2e3, 4), (stack, 0xffffffffffffff98, 16) INDIRECT (stack, 0xffffffffffffff98, 16) , (const, 0x2e2, 4), (stack, 0xffffffffffffff98, 16) MULTIEQUAL (stack, 0xffffffffffffff98, 16) , (stack, 0xffffffffffffff98, 16)]
[(stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0x2e3, 4), (stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0x2e2, 4), (stack, 0xffffffffffffffa8, 16) MULTIEQUAL (stack, 0xffffffffffffffa8, 16) , (stack, 0xffffffffffffffa8, 16)]
[(stack, 0xffffffffffffffb8, 16) INDIRECT (stack, 0xffffffffffffffb8, 16) , (const, 0x2e3, 4), (stack, 0xffffffffffffffb8, 16) INDIRECT (stack, 0xffffffffffffffb8, 16) , (const, 0x2e2, 4), (stack, 0xffffffffffffffb8, 16) MULTIEQUAL (stack, 0xffffffffffffffb8, 16) , (stack, 0xffffffffffffffb8, 16)]
[ ---  CALL (ram, 0x489410, 8) , (unique, 0xbc80, 4) , (unique, 0xbd80, 8) , (const, 0x0, 8) , (register, 0x8, 8), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10001f95, 8), (unique, 0x10001f95, 8) INT_ADD (register, 0x110, 8) , (const, 0xffffffffffffffc0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb8, 8) , (const, 0x1, 8) , (const, 0x8, 8), (register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8), (register, 0xb8, 8) MULTIEQUAL (register, 0xb8, 8) , (register, 0xb8, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4c4a68, 8) COPY (ram, 0x4c4a68, 8), (ram, 0x4c4a68, 8) INDIRECT (ram, 0x4c4a68, 8) , (const, 0x2e3, 4), (ram, 0x4c4a68, 8) MULTIEQUAL (ram, 0x4c4a68, 8) , (ram, 0x4c4a68, 8)]
[(ram, 0x4c6118, 8) COPY (ram, 0x4c6118, 8), (ram, 0x4c6118, 8) INDIRECT (ram, 0x4c6118, 8) , (const, 0x2e3, 4), (ram, 0x4c6118, 8) MULTIEQUAL (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8)]
[(ram, 0x4c7d80, 4) COPY (ram, 0x4c7d80, 4), (ram, 0x4c7d80, 4) INDIRECT (ram, 0x4c7d80, 4) , (const, 0x2e3, 4), (ram, 0x4c7d80, 4) MULTIEQUAL (ram, 0x4c7d80, 4) , (ram, 0x4c7d80, 4)]
[(ram, 0x4c7da0, 8) COPY (ram, 0x4c7da0, 8), (ram, 0x4c7da0, 8) INDIRECT (ram, 0x4c7da0, 8) , (const, 0x2e3, 4), (ram, 0x4c7da0, 8) MULTIEQUAL (ram, 0x4c7da0, 8) , (ram, 0x4c7da0, 8)]
[(ram, 0x4c87c0, 4) COPY (ram, 0x4c87c0, 4), (ram, 0x4c87c0, 4) INDIRECT (ram, 0x4c87c0, 4) , (const, 0x2e3, 4), (ram, 0x4c87c0, 4) MULTIEQUAL (ram, 0x4c87c0, 4) , (ram, 0x4c87c0, 4)]
[(ram, 0x4c87d0, 8) COPY (ram, 0x4c87d0, 8), (ram, 0x4c87d0, 8) INDIRECT (ram, 0x4c87d0, 8) , (const, 0x2e3, 4), (ram, 0x4c87d0, 8) MULTIEQUAL (ram, 0x4c87d0, 8) , (ram, 0x4c87d0, 8)]
[(ram, 0x4c8840, 4) COPY (ram, 0x4c8840, 4), (ram, 0x4c8840, 4) INDIRECT (ram, 0x4c8840, 4) , (const, 0x2e3, 4), (ram, 0x4c8840, 4) MULTIEQUAL (ram, 0x4c8840, 4) , (ram, 0x4c8840, 4)]
[(ram, 0x4c8850, 8) COPY (ram, 0x4c8850, 8), (ram, 0x4c8850, 8) INDIRECT (ram, 0x4c8850, 8) , (const, 0x2e3, 4), (ram, 0x4c8850, 8) MULTIEQUAL (ram, 0x4c8850, 8) , (ram, 0x4c8850, 8)]
[ ---  RETURN (const, 0x1, 4)]
[(unique, 0xbd80, 8) CAST (unique, 0x10001fa5, 8), (unique, 0x10001fa5, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x3, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x483780, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (unique, 0x10001070, 8) , (const, 0x8e, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x482d38, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x38, 8) , (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10001fd5, 8), (unique, 0x10001fd5, 8) INT_AND (unique, 0x10001fcd, 8) , (register, 0x30, 8), (unique, 0x10001fcd, 8) CAST (register, 0x0, 8), (register, 0x38, 8) CAST (unique, 0x10001fc5, 8), (unique, 0x10001fc5, 8) INT_AND (unique, 0x10001fbd, 8) , (register, 0x30, 8), (unique, 0x10001fbd, 8) CAST (register, 0x10, 8), (register, 0x0, 8) PTRADD (unique, 0xbd80, 8) , (unique, 0x10001fb5, 8) , (const, 0x1, 8), (unique, 0x10001fb5, 8) CAST (register, 0x10, 8), (register, 0x30, 8) INT_2COMP (unique, 0x10001088, 8), (register, 0x10, 8) PTRADD (unique, 0xbd80, 8) , (unique, 0x10001fad, 8) , (const, 0x1, 8), (unique, 0x10001fad, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10001070, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (unique, 0x10001070, 8) , (const, 0x8d, 8) , (const, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001ff5, 8) , (const, 0x4837b9, 8), (unique, 0x10001ff5, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (unique, 0x10001078, 8) , (const, 0x282, 4)]
[(ram, 0x4c4a68, 8) INDIRECT (unique, 0x10001080, 8) , (const, 0x282, 4)]
[(ram, 0x4c6118, 8) INDIRECT (unique, 0x10001088, 8) , (const, 0x282, 4)]
[(ram, 0x4c7d80, 4) INDIRECT (unique, 0x10001090, 4) , (const, 0x282, 4)]
[(ram, 0x4c7da0, 8) INDIRECT (unique, 0x10001094, 8) , (const, 0x282, 4)]
[(ram, 0x4c87c0, 4) INDIRECT (unique, 0x1000109c, 4) , (const, 0x282, 4)]
[(ram, 0x4c87d0, 8) INDIRECT (unique, 0x100010a0, 8) , (const, 0x282, 4)]
[(ram, 0x4c8840, 4) INDIRECT (unique, 0x100010a8, 4) , (const, 0x282, 4)]
[(ram, 0x4c8850, 8) INDIRECT (unique, 0x100010ac, 8) , (const, 0x282, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x282, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (unique, 0x100010b4, 8) , (const, 0x281, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x282, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (unique, 0x100010bc, 8) , (const, 0x281, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x282, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (unique, 0x100010cc, 8) , (const, 0x281, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x282, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (unique, 0x100010d4, 8) , (const, 0x281, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x282, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (unique, 0x100010dc, 8) , (const, 0x281, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x282, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (unique, 0x100010e4, 8) , (const, 0x281, 4)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x282, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (unique, 0x100010ec, 4) , (const, 0x281, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x282, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (unique, 0x100010f0, 4) , (const, 0x281, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x282, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (unique, 0x100010f4, 8) , (const, 0x281, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x282, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (unique, 0x100010fc, 8) , (const, 0x281, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x282, 4), (stack, 0xffffffffffffff48, 8) INDIRECT (unique, 0x10001104, 8) , (const, 0x281, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x282, 4), (stack, 0xffffffffffffff50, 8) INDIRECT (unique, 0x1000110c, 8) , (const, 0x281, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x282, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (unique, 0x10001114, 8) , (const, 0x281, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x282, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (unique, 0x1000111c, 8) , (const, 0x281, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x282, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (unique, 0x10001124, 8) , (const, 0x281, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x282, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (unique, 0x1000112c, 8) , (const, 0x281, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x282, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (unique, 0x10001134, 8) , (const, 0x281, 4)]
[(stack, 0xffffffffffffff88, 16) INDIRECT (stack, 0xffffffffffffff88, 16) , (const, 0x282, 4), (stack, 0xffffffffffffff88, 16) INDIRECT (unique, 0x1000113c, 16) , (const, 0x281, 4)]
[(stack, 0xffffffffffffff98, 16) INDIRECT (stack, 0xffffffffffffff98, 16) , (const, 0x282, 4), (stack, 0xffffffffffffff98, 16) INDIRECT (unique, 0x1000114c, 16) , (const, 0x281, 4)]
[(stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0x282, 4), (stack, 0xffffffffffffffa8, 16) INDIRECT (unique, 0x1000115c, 16) , (const, 0x281, 4)]
[(stack, 0xffffffffffffffb8, 16) INDIRECT (stack, 0xffffffffffffffb8, 16) , (const, 0x282, 4), (stack, 0xffffffffffffffb8, 16) INDIRECT (unique, 0x1000116c, 16) , (const, 0x281, 4)]
[ ---  CBRANCH (ram, 0x482d38, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x4562d0, 8) , (register, 0x38, 8) , (register, 0x0, 8) , (const, 0x1, 4), (register, 0x0, 8) CAST (unique, 0x10001fed, 8), (unique, 0x10001fed, 8) INT_SUB (unique, 0x10001fdd, 8) , (unique, 0x10001fe5, 8), (unique, 0x10001fe5, 8) CAST (register, 0x38, 8), (unique, 0x10001fdd, 8) CAST (register, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10002005, 8) , (const, 0x4837dd, 8), (unique, 0x10002005, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x2a3, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x2a2, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x2a3, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x2a2, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x2a3, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x2a2, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x2a3, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x2a2, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x2a3, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x2a2, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x2a3, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x2a2, 4)]
[(stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x2a3, 4), (stack, 0xffffffffffffff30, 4) INDIRECT (stack, 0xffffffffffffff30, 4) , (const, 0x2a2, 4)]
[(stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x2a3, 4), (stack, 0xffffffffffffff34, 4) INDIRECT (stack, 0xffffffffffffff34, 4) , (const, 0x2a2, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x2a3, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x2a2, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x2a3, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x2a2, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x2a3, 4), (stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x2a2, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x2a3, 4), (stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x2a2, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x2a3, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x2a2, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x2a3, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x2a2, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x2a3, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x2a2, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x2a3, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x2a2, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x2a3, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x2a2, 4)]
[(stack, 0xffffffffffffff88, 16) INDIRECT (stack, 0xffffffffffffff88, 16) , (const, 0x2a3, 4), (stack, 0xffffffffffffff88, 16) INDIRECT (stack, 0xffffffffffffff88, 16) , (const, 0x2a2, 4)]
[(stack, 0xffffffffffffff98, 16) INDIRECT (stack, 0xffffffffffffff98, 16) , (const, 0x2a3, 4), (stack, 0xffffffffffffff98, 16) INDIRECT (stack, 0xffffffffffffff98, 16) , (const, 0x2a2, 4)]
[(stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0x2a3, 4), (stack, 0xffffffffffffffa8, 16) INDIRECT (stack, 0xffffffffffffffa8, 16) , (const, 0x2a2, 4)]
[(stack, 0xffffffffffffffb8, 16) INDIRECT (stack, 0xffffffffffffffb8, 16) , (const, 0x2a3, 4), (stack, 0xffffffffffffffb8, 16) INDIRECT (stack, 0xffffffffffffffb8, 16) , (const, 0x2a2, 4)]
[ ---  CALL (ram, 0x489410, 8) , (unique, 0xbc80, 4) , (unique, 0xbd80, 8) , (const, 0x0, 8) , (unique, 0x10000a40, 8), (unique, 0x10000a40, 8) COPY (const, 0x4b0460, 8), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10001ffd, 8), (unique, 0x10001ffd, 8) INT_ADD (register, 0x110, 8) , (const, 0xffffffffffffffc0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0x10001070, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[(ram, 0x4c4a68, 8) COPY (ram, 0x4c4a68, 8), (ram, 0x4c4a68, 8) INDIRECT (ram, 0x4c4a68, 8) , (const, 0x2a3, 4)]
[(ram, 0x4c6118, 8) COPY (ram, 0x4c6118, 8), (ram, 0x4c6118, 8) INDIRECT (ram, 0x4c6118, 8) , (const, 0x2a3, 4)]
[(ram, 0x4c7d80, 4) COPY (ram, 0x4c7d80, 4), (ram, 0x4c7d80, 4) INDIRECT (ram, 0x4c7d80, 4) , (const, 0x2a3, 4)]
[(ram, 0x4c7da0, 8) COPY (ram, 0x4c7da0, 8), (ram, 0x4c7da0, 8) INDIRECT (ram, 0x4c7da0, 8) , (const, 0x2a3, 4)]
[(ram, 0x4c87c0, 4) COPY (ram, 0x4c87c0, 4), (ram, 0x4c87c0, 4) INDIRECT (ram, 0x4c87c0, 4) , (const, 0x2a3, 4)]
[(ram, 0x4c87d0, 8) COPY (ram, 0x4c87d0, 8), (ram, 0x4c87d0, 8) INDIRECT (ram, 0x4c87d0, 8) , (const, 0x2a3, 4)]
[(ram, 0x4c8840, 4) COPY (ram, 0x4c8840, 4), (ram, 0x4c8840, 4) INDIRECT (ram, 0x4c8840, 4) , (const, 0x2a3, 4)]
[(ram, 0x4c8850, 8) COPY (ram, 0x4c8850, 8), (ram, 0x4c8850, 8) INDIRECT (ram, 0x4c8850, 8) , (const, 0x2a3, 4)]
[ ---  RETURN (const, 0x1, 4)]
[(ram, 0x4c4a68, 8) COPY (ram, 0x4c4a68, 8), (ram, 0x4c4a68, 8) MULTIEQUAL (unique, 0x10001080, 8) , (unique, 0x10001080, 8) , (ram, 0x4c4a68, 8)]
[(ram, 0x4c6118, 8) COPY (ram, 0x4c6118, 8), (ram, 0x4c6118, 8) MULTIEQUAL (unique, 0x10001088, 8) , (unique, 0x10001088, 8) , (ram, 0x4c6118, 8)]
[(ram, 0x4c7d80, 4) COPY (ram, 0x4c7d80, 4), (ram, 0x4c7d80, 4) MULTIEQUAL (unique, 0x10001090, 4) , (unique, 0x10001090, 4) , (ram, 0x4c7d80, 4)]
[(ram, 0x4c7da0, 8) COPY (ram, 0x4c7da0, 8), (ram, 0x4c7da0, 8) MULTIEQUAL (unique, 0x10001094, 8) , (unique, 0x10001094, 8) , (ram, 0x4c7da0, 8)]
[(ram, 0x4c87c0, 4) COPY (ram, 0x4c87c0, 4), (ram, 0x4c87c0, 4) MULTIEQUAL (unique, 0x1000109c, 4) , (unique, 0x1000109c, 4) , (ram, 0x4c87c0, 4)]
[(ram, 0x4c87d0, 8) COPY (ram, 0x4c87d0, 8), (ram, 0x4c87d0, 8) MULTIEQUAL (unique, 0x100010a0, 8) , (unique, 0x100010a0, 8) , (ram, 0x4c87d0, 8)]
[(ram, 0x4c8840, 4) COPY (ram, 0x4c8840, 4), (ram, 0x4c8840, 4) MULTIEQUAL (unique, 0x100010a8, 4) , (unique, 0x100010a8, 4) , (ram, 0x4c8840, 4)]
[(ram, 0x4c8850, 8) COPY (ram, 0x4c8850, 8), (ram, 0x4c8850, 8) MULTIEQUAL (unique, 0x100010ac, 8) , (unique, 0x100010ac, 8) , (ram, 0x4c8850, 8)]
[ ---  RETURN (const, 0x0, 8)]
[(ram, 0x4c4a68, 8) COPY (ram, 0x4c4a68, 8)]
[(ram, 0x4c6118, 8) COPY (ram, 0x4c6118, 8)]
[(ram, 0x4c7d80, 4) COPY (ram, 0x4c7d80, 4)]
[(ram, 0x4c7da0, 8) COPY (ram, 0x4c7da0, 8)]
[(ram, 0x4c87c0, 4) COPY (ram, 0x4c87c0, 4)]
[(ram, 0x4c87d0, 8) COPY (ram, 0x4c87d0, 8)]
[(ram, 0x4c8840, 4) COPY (ram, 0x4c8840, 4)]
[(ram, 0x4c8850, 8) COPY (ram, 0x4c8850, 8)]
[ ---  RETURN (const, 0x0, 8)]
