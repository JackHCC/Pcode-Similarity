[(stack, 0xffffffffffffffa0, 8) COPY (register, 0x10, 8)]
[(stack, 0xffffffffffffffc0, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10000438, 8), (unique, 0x10000438, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffe38, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffe38, 8)]
[(stack, 0xffffffffffffffa8, 8) COPY (register, 0xa8, 8), (register, 0xa8, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffe40, 8)]
[(unique, 0x10000378, 8) COPY (register, 0x20, 8), (register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffe38, 8)]
[ ---  CBRANCH (ram, 0x4569f5, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x30, 8) , (const, 0x0, 8)]
[(unique, 0x10000380, 8) COPY (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x4569f5, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xa0, 8) , (const, 0x0, 8), (register, 0xa0, 8) CAST (unique, 0x10000448, 8), (unique, 0x10000448, 8) INT_AND (unique, 0x10000440, 8) , (const, 0xfffffffffffffffe, 8), (unique, 0x10000440, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x30, 8)]
[(stack, 0xffffffffffffffb4, 4) COPY (const, 0x28, 4)]
[(register, 0xa8, 8) COPY (const, 0x0, 8)]
[(unique, 0x100003e8, 8) COPY (register, 0xa0, 8)]
[(register, 0xa0, 8) MULTIEQUAL (unique, 0x100003e8, 8) , (register, 0xa0, 8)]
[(register, 0x18, 8) MULTIEQUAL (register, 0x30, 8) , (unique, 0x10000314, 8)]
[(register, 0xa8, 4) SUBPIECE (register, 0xa8, 8) , (const, 0x0, 4), (register, 0xa8, 8) MULTIEQUAL (register, 0xa8, 8) , (unique, 0x1000031c, 8)]
[(register, 0xb8, 8) INT_AND (register, 0xa8, 8) , (const, 0xffffffff, 8), (register, 0xa8, 8) MULTIEQUAL (register, 0xa8, 8) , (unique, 0x1000031c, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000450, 8) , (const, 0x4569b7, 8), (unique, 0x10000450, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8), (register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xb5, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0xb5, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0xb4, 4), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0xb5, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0xb4, 4), (stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0xb5, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0xb4, 4), (stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0xb5, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0xb4, 4), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffb4, 4) INDIRECT (stack, 0xffffffffffffffb4, 4) , (const, 0xb5, 4), (stack, 0xffffffffffffffb4, 4) INDIRECT (stack, 0xffffffffffffffb4, 4) , (const, 0xb4, 4), (stack, 0xffffffffffffffb4, 4) MULTIEQUAL (stack, 0xffffffffffffffb4, 4) , (stack, 0xffffffffffffffb4, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xb5, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xb4, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CBRANCH (ram, 0x456ac0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALLIND (unique, 0x10000330, 8) , (register, 0x38, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x0, 8), (unique, 0x10000330, 8) COPY (stack, 0xffffffffffffffa0, 8), (register, 0x0, 8) MULTIEQUAL (register, 0xa0, 8) , (unique, 0x1000030c, 8), (stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(unique, 0x3680, 8) INT_MULT (register, 0xa8, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x456a40, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffffb4, 4) , (register, 0xa8, 4)]
[(stack, 0xffffffffffffffb4, 4) COPY (unique, 0xbd00, 4), (unique, 0xbd00, 4) INT_ADD (stack, 0xffffffffffffffb4, 4) , (const, 0x14, 4)]
[(register, 0x38, 8) PTRADD (register, 0x20, 8) , (unique, 0x100000a1, 8) , (const, 0x1, 8), (unique, 0x100000a1, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (unique, 0x3580, 8) , (const, 0xfffffffffffff000, 8), (unique, 0x3580, 8) INT_ADD (unique, 0x3480, 8) , (const, 0x17, 8), (unique, 0x3480, 8) INT_MULT (register, 0x0, 8) , (const, 0x8, 8), (register, 0x0, 8) INT_SEXT (unique, 0xbd00, 4), (unique, 0xbd00, 4) INT_ADD (stack, 0xffffffffffffffb4, 4) , (const, 0x14, 4)]
[(unique, 0x100000c1, 4) SUBPIECE (unique, 0x3580, 8) , (const, 0x0, 4), (unique, 0x3580, 8) INT_ADD (unique, 0x3480, 8) , (const, 0x17, 8), (unique, 0x3480, 8) INT_MULT (register, 0x0, 8) , (const, 0x8, 8), (register, 0x0, 8) INT_SEXT (unique, 0xbd00, 4), (unique, 0xbd00, 4) INT_ADD (stack, 0xffffffffffffffb4, 4) , (const, 0x14, 4)]
[(unique, 0x10000420, 8) COPY (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x456a80, 1) , (unique, 0x1000023e, 1), (unique, 0x1000023e, 1) INT_NOTEQUAL (register, 0x20, 8) , (register, 0x38, 8), (register, 0x20, 8) MULTIEQUAL (unique, 0x10000420, 8) , (register, 0x20, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000460, 8) , (unique, 0xbe00, 8), (unique, 0x10000460, 8) CAST (unique, 0x3c80, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000458, 8), (unique, 0x10000458, 8) CAST (unique, 0x3c80, 8), (unique, 0x3c80, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffff000, 8) , (const, 0x1, 8)]
[(register, 0x20, 8) PTRADD (register, 0x20, 8) , (unique, 0x100000c9, 8) , (const, 0x1, 8), (unique, 0x100000c9, 8) INT_2COMP (register, 0x10, 8), (register, 0x10, 8) INT_ZEXT (register, 0x10, 4), (register, 0x10, 4) INT_AND (unique, 0x100000c1, 4) , (const, 0xff0, 4)]
[ ---  CBRANCH (ram, 0x456a94, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x10, 8) , (const, 0x0, 8), (register, 0x10, 8) INT_ZEXT (register, 0x10, 4), (register, 0x10, 4) INT_AND (unique, 0x100000c1, 4) , (const, 0xff0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000470, 8) , (unique, 0xbe00, 8), (unique, 0x10000470, 8) CAST (unique, 0x3880, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000468, 8), (unique, 0x10000468, 8) CAST (unique, 0x3880, 8), (unique, 0x3880, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000490, 8) , (const, 0x456aac, 8), (unique, 0x10000490, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (unique, 0x100002a4, 8) , (const, 0x1, 8), (unique, 0x100002a4, 8) INT_ADD (unique, 0x100000c9, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1f6, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x1f6, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x1f6, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x1f6, 4)]
[(stack, 0xffffffffffffffb4, 4) INDIRECT (stack, 0xffffffffffffffb4, 4) , (const, 0x1f6, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1f6, 4)]
[(stack, 0xffffffffffffff98, 4) SUBPIECE (stack, 0xffffffffffffff98, 8) , (const, 0x0, 8), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x1f6, 4), (stack, 0xffffffffffffff98, 8) CAST (unique, 0x10000480, 8), (unique, 0x10000480, 8) INT_OR (unique, 0x10000177, 8) , (unique, 0x1000017f, 8), (unique, 0x1000017f, 8) INT_ZEXT (register, 0x0, 4), (unique, 0x10000177, 8) INT_AND (unique, 0x10000478, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10000478, 8) CAST (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffffa8, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10000498, 8), (unique, 0x10000498, 8) CALL (ram, 0x401060, 8) , (register, 0x38, 8) , (stack, 0xffffffffffffffa8, 8) , (unique, 0x3680, 8), (register, 0x38, 8) INT_AND (unique, 0x10000488, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x10000488, 8) CAST (unique, 0x3800, 8), (unique, 0x3800, 8) PTRADD (register, 0x20, 8) , (unique, 0x1000029c, 8) , (const, 0x1, 8), (unique, 0x1000029c, 8) INT_ADD (unique, 0x100000c9, 8) , (const, 0xf, 8)]
[ ---  BRANCH (ram, 0x4569cf, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb4, 4) MULTIEQUAL (stack, 0xffffffffffffffb4, 4) , (stack, 0xffffffffffffffb4, 4)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100004a0, 8) , (register, 0x18, 8), (unique, 0x100004a0, 8) CAST (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (stack, 0xffffffffffffffa8, 8) , (unique, 0x3680, 8) , (const, 0x1, 8), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(register, 0xa0, 8) CAST (unique, 0x100004b0, 8), (unique, 0x100004b0, 8) INT_AND (unique, 0x100004a8, 8) , (const, 0xfffffffffffffffe, 8), (unique, 0x100004a8, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x456a20, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (unique, 0x100004b8, 4) , (const, 0x0, 4), (unique, 0x100004b8, 4) CAST (register, 0x8, 4), (register, 0x8, 4) MULTIEQUAL (register, 0x0, 4) , (stack, 0xffffffffffffff98, 4)]
[(unique, 0x3800, 8) PTRADD (register, 0xa0, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[(register, 0x0, 8) CAST (unique, 0x100004c4, 8), (unique, 0x100004c4, 8) INT_AND (unique, 0x100004bc, 8) , (const, 0xfffffffffffffffe, 8), (unique, 0x100004bc, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRADD (register, 0xa0, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[(unique, 0xbd80, 8) CAST (unique, 0x100004cc, 8), (unique, 0x100004cc, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRADD (register, 0xa0, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[(unique, 0x3800, 8) PTRADD (register, 0xa0, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[(unique, 0x10000314, 8) MULTIEQUAL (unique, 0x3800, 8) , (unique, 0x3800, 8)]
[(unique, 0x1000031c, 8) INT_ADD (register, 0xa8, 8) , (const, 0x1, 8)]
[(unique, 0x10000388, 8) COPY (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x4569a8, 1) , (unique, 0x10000324, 1), (unique, 0x10000324, 1) INT_EQUAL (unique, 0x1000030c, 8) , (const, 0x0, 8), (unique, 0x1000030c, 8) MULTIEQUAL (unique, 0xbd80, 8) , (register, 0x0, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb4, 4) MULTIEQUAL (stack, 0xffffffffffffffb4, 4) , (stack, 0xffffffffffffffb4, 4) , (stack, 0xffffffffffffffb4, 4)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x20, 8) MULTIEQUAL (unique, 0x10000378, 8) , (unique, 0x10000380, 8) , (unique, 0x10000388, 8)]
[(register, 0xa0, 8) COPY (const, 0x0, 8)]
[(register, 0x8, 8) INT_AND (unique, 0xbd80, 8) , (const, 0xfffffffffffffffe, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xa8, 8) , (const, 0x1, 8) , (const, 0x8, 8), (register, 0xa8, 8) CAST (unique, 0x100004dc, 8), (unique, 0x100004dc, 8) INT_AND (unique, 0x100004d4, 8) , (const, 0xfffffffffffffffe, 8), (unique, 0x100004d4, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x18, 8)]
[(unique, 0x10000430, 8) COPY (register, 0xa8, 8), (register, 0xa8, 8) CAST (unique, 0x100004dc, 8), (unique, 0x100004dc, 8) INT_AND (unique, 0x100004d4, 8) , (const, 0xfffffffffffffffe, 8), (unique, 0x100004d4, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x456f40, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbe00, 8) , (const, 0x0, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xa8, 8) , (const, 0x2, 8) , (const, 0x8, 8), (register, 0xa8, 8) CAST (unique, 0x100004dc, 8), (unique, 0x100004dc, 8) INT_AND (unique, 0x100004d4, 8) , (const, 0xfffffffffffffffe, 8), (unique, 0x100004d4, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x456f82, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x8, 8) , (const, 0x0, 8)]
[(register, 0x10, 8) CAST (unique, 0x100004e4, 8), (unique, 0x100004e4, 8) INT_LEFT (register, 0x10, 8) , (const, 0x3, 4), (register, 0x10, 8) INT_SEXT (register, 0xb8, 4), (register, 0xb8, 4) SUBPIECE (register, 0xb8, 8) , (const, 0x0, 4)]
[(unique, 0x10000358, 8) COPY (register, 0x18, 8)]
[(unique, 0x100003f0, 8) COPY (unique, 0x100004ec, 8), (unique, 0x100004ec, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xa8, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[ ---  BRANCH (ram, 0x456b2c, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (unique, 0x10000211, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (unique, 0x10000205, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (unique, 0x100001fd, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (unique, 0x100001f5, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (unique, 0x100001ed, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (unique, 0x100001e5, 8)]
[(register, 0xb0, 8) MULTIEQUAL (unique, 0x100003f0, 8) , (unique, 0x100003f8, 8)]
[(register, 0x80, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0x100001d5, 8)]
[(register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (unique, 0x100001c5, 8)]
[(register, 0x10, 8) MULTIEQUAL (register, 0x10, 8) , (register, 0x10, 8)]
[(register, 0x8, 8) MULTIEQUAL (unique, 0x10000358, 8) , (unique, 0x10000360, 8)]
[ ---  CBRANCH (ram, 0x456b00, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffffb4, 4) , (register, 0xb8, 4), (register, 0xb8, 4) SUBPIECE (register, 0xb8, 8) , (const, 0x0, 4), (register, 0xb8, 8) MULTIEQUAL (register, 0xb8, 8) , (unique, 0x100001dd, 8), (stack, 0xffffffffffffffb4, 4) MULTIEQUAL (stack, 0xffffffffffffffb4, 4) , (unique, 0x1000020d, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000050c, 8) , (register, 0x8, 8), (unique, 0x1000050c, 8) CAST (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (stack, 0xffffffffffffffa8, 8) , (unique, 0x10000504, 8) , (const, 0x1, 8), (unique, 0x10000504, 8) CAST (register, 0x10, 8)]
[(unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x38, 8) , (const, 0x1, 8) , (const, 0x8, 8), (register, 0x38, 8) CAST (unique, 0x100004fc, 8), (unique, 0x100004fc, 8) INT_AND (unique, 0x100004f4, 8) , (const, 0xfffffffffffffffe, 8), (unique, 0x100004f4, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0xb0, 8)]
[(unique, 0x10000400, 8) COPY (register, 0x10, 8)]
[(unique, 0x10000410, 8) COPY (register, 0x80, 8)]
[(stack, 0xffffffffffffffb4, 4) COPY (unique, 0xbd00, 4), (unique, 0xbd00, 4) INT_ADD (stack, 0xffffffffffffffb4, 4) , (const, 0x14, 4)]
[(register, 0x38, 8) PTRADD (register, 0x20, 8) , (unique, 0x100000e5, 8) , (const, 0x1, 8), (unique, 0x100000e5, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (unique, 0x3580, 8) , (const, 0xfffffffffffff000, 8), (unique, 0x3580, 8) INT_ADD (unique, 0x3480, 8) , (const, 0x17, 8), (unique, 0x3480, 8) INT_MULT (register, 0x0, 8) , (const, 0x8, 8), (register, 0x0, 8) INT_SEXT (unique, 0xbd00, 4), (unique, 0xbd00, 4) INT_ADD (stack, 0xffffffffffffffb4, 4) , (const, 0x14, 4)]
[(unique, 0x10000105, 4) SUBPIECE (unique, 0x3580, 8) , (const, 0x0, 4), (unique, 0x3580, 8) INT_ADD (unique, 0x3480, 8) , (const, 0x17, 8), (unique, 0x3480, 8) INT_MULT (register, 0x0, 8) , (const, 0x8, 8), (register, 0x0, 8) INT_SEXT (unique, 0xbd00, 4), (unique, 0xbd00, 4) INT_ADD (stack, 0xffffffffffffffb4, 4) , (const, 0x14, 4)]
[(unique, 0x10000428, 8) COPY (register, 0x20, 8)]
[(unique, 0x1000022a, 4) MULTIEQUAL (stack, 0xffffffffffffffb4, 4) , (stack, 0xffffffffffffffb4, 4)]
[(unique, 0x1000022e, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(unique, 0x10000236, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CBRANCH (ram, 0x456b72, 1) , (unique, 0x10000219, 1), (unique, 0x10000219, 1) INT_NOTEQUAL (register, 0x20, 8) , (register, 0x38, 8), (register, 0x20, 8) MULTIEQUAL (unique, 0x10000428, 8) , (register, 0x20, 8)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (unique, 0x1000022e, 8) , (const, 0x2b5, 4)]
[(stack, 0xffffffffffffffb4, 4) INDIRECT (unique, 0x1000022a, 4) , (const, 0x2b5, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (unique, 0x10000236, 8) , (const, 0x2b5, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000051c, 8) , (unique, 0xbe00, 8), (unique, 0x1000051c, 8) CAST (unique, 0x3c80, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000514, 8), (unique, 0x10000514, 8) CAST (unique, 0x3c80, 8), (unique, 0x3c80, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffff000, 8) , (const, 0x1, 8)]
[(register, 0x20, 8) PTRADD (register, 0x20, 8) , (unique, 0x1000010d, 8) , (const, 0x1, 8), (unique, 0x1000010d, 8) INT_2COMP (register, 0x30, 8), (register, 0x30, 8) INT_ZEXT (register, 0x30, 4), (register, 0x30, 4) INT_AND (unique, 0x10000105, 4) , (const, 0xff0, 4)]
[ ---  CBRANCH (ram, 0x456b86, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x30, 8) , (const, 0x0, 8), (register, 0x30, 8) INT_ZEXT (register, 0x30, 4), (register, 0x30, 4) INT_AND (unique, 0x10000105, 4) , (const, 0xff0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000052c, 8) , (unique, 0xbe00, 8), (unique, 0x1000052c, 8) CAST (unique, 0x3880, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000524, 8), (unique, 0x10000524, 8) CAST (unique, 0x3880, 8), (unique, 0x3880, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000053c, 8) , (const, 0x456ba8, 8), (unique, 0x1000053c, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (unique, 0x100002dc, 8) , (const, 0x1, 8), (unique, 0x100002dc, 8) INT_ADD (unique, 0x1000010d, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x31b, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (unique, 0x1000022e, 8) , (const, 0x31b, 4)]
[(stack, 0xffffffffffffffb4, 4) INDIRECT (unique, 0x1000022a, 4) , (const, 0x31b, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (unique, 0x10000236, 8) , (const, 0x31b, 4)]
[(stack, 0xffffffffffffffa8, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10000544, 8), (unique, 0x10000544, 8) CALL (ram, 0x401060, 8) , (register, 0x38, 8) , (unique, 0x1000022e, 8), (register, 0x38, 8) INT_AND (unique, 0x10000534, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x10000534, 8) CAST (unique, 0x3800, 8), (unique, 0x3800, 8) PTRADD (register, 0x20, 8) , (unique, 0x100002d4, 8) , (const, 0x1, 8), (unique, 0x100002d4, 8) INT_ADD (unique, 0x1000010d, 8) , (const, 0xf, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000564, 8) , (stack, 0xffffffffffffff90, 8), (unique, 0x10000564, 8) CAST (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (register, 0x0, 8) , (unique, 0x1000055c, 8) , (const, 0x1, 8), (unique, 0x1000055c, 8) CAST (stack, 0xffffffffffffffa0, 8), (register, 0x0, 8) CAST (unique, 0x10000544, 8), (unique, 0x10000544, 8) CALL (ram, 0x401060, 8) , (register, 0x38, 8) , (unique, 0x1000022e, 8), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x31b, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x31b, 4), (stack, 0xffffffffffffffa0, 8) COPY (register, 0x10, 8), (register, 0x38, 8) INT_AND (unique, 0x10000534, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x10000534, 8) CAST (unique, 0x3800, 8), (stack, 0xffffffffffffff90, 8) COPY (register, 0x8, 8), (unique, 0x3800, 8) PTRADD (register, 0x20, 8) , (unique, 0x100002d4, 8) , (const, 0x1, 8), (unique, 0x100002d4, 8) INT_ADD (unique, 0x1000010d, 8) , (const, 0xf, 8)]
[(unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x38, 8) , (const, 0x1, 8) , (const, 0x8, 8), (register, 0x38, 8) CAST (unique, 0x10000554, 8), (unique, 0x10000554, 8) INT_AND (unique, 0x1000054c, 8) , (const, 0xfffffffffffffffe, 8), (unique, 0x1000054c, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0xb0, 8)]
[(unique, 0x10000408, 8) COPY (stack, 0xffffffffffffffa0, 8), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x31b, 4), (stack, 0xffffffffffffffa0, 8) COPY (register, 0x10, 8)]
[(unique, 0x10000418, 8) COPY (stack, 0xffffffffffffff98, 8), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x31b, 4), (stack, 0xffffffffffffff98, 8) COPY (register, 0x80, 8)]
[(unique, 0x100001bd, 8) MULTIEQUAL (unique, 0x10000400, 8) , (unique, 0x10000408, 8)]
[(unique, 0x100001c5, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8)]
[(unique, 0x100001d5, 8) MULTIEQUAL (unique, 0x10000410, 8) , (unique, 0x10000418, 8)]
[(unique, 0x100001e5, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x100001ed, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(unique, 0x100001f5, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(unique, 0x100001fd, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(unique, 0x10000205, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(unique, 0x1000020d, 4) MULTIEQUAL (stack, 0xffffffffffffffb4, 4) , (stack, 0xffffffffffffffb4, 4)]
[(unique, 0x10000211, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(unique, 0x100001dd, 8) INT_ZEXT (register, 0xb8, 4), (register, 0xb8, 4) INT_ADD (register, 0xb8, 4) , (const, 0x1, 4)]
[(unique, 0x100003a0, 8) COPY (unique, 0x100001b4, 8), (unique, 0x100001b4, 8) MULTIEQUAL (register, 0x38, 8) , (register, 0x38, 8)]
[ ---  CBRANCH (ram, 0x456bd8, 1) , (unique, 0x100001bc, 1), (unique, 0x100001bc, 1) INT_EQUAL (unique, 0x58f00, 8) , (const, 0x0, 8), (unique, 0x58f00, 8) INT_AND (unique, 0xbe00, 8) , (const, 0xfffffffffffffffe, 8), (unique, 0xbe00, 8) MULTIEQUAL (unique, 0xbe00, 8) , (unique, 0xbe00, 8)]
[(register, 0x10, 8) PTRADD (unique, 0x100001bd, 8) , (const, 0x8, 8) , (const, 0x1, 8)]
[(unique, 0x10000360, 8) COPY (register, 0xb0, 8)]
[(unique, 0x100003f8, 8) COPY (unique, 0x1000056c, 8), (unique, 0x1000056c, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0x100001b4, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[(unique, 0x10000398, 8) COPY (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x456f82, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x8, 8) , (const, 0x0, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (unique, 0x10000211, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb4, 4) MULTIEQUAL (unique, 0x1000020d, 4) , (stack, 0xffffffffffffffb4, 4) , (stack, 0xffffffffffffffb4, 4)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (unique, 0x10000205, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (unique, 0x100001fd, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (unique, 0x100001f5, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (unique, 0x100001ed, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(register, 0x110, 8) MULTIEQUAL (unique, 0x100001e5, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb8, 8) MULTIEQUAL (unique, 0x100001dd, 8) , (register, 0xb8, 8) , (register, 0xb8, 8)]
[(register, 0x80, 8) MULTIEQUAL (unique, 0x100001d5, 8) , (unique, 0xbd80, 8) , (unique, 0xbd80, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x38, 8) , (const, 0x2, 8) , (const, 0x8, 8), (register, 0x38, 8) MULTIEQUAL (unique, 0x100003a0, 8) , (unique, 0x10000430, 8) , (unique, 0x10000430, 8)]
[(unique, 0x10000390, 8) COPY (register, 0x20, 8), (register, 0x20, 8) MULTIEQUAL (unique, 0x100001c5, 8) , (register, 0x20, 8) , (register, 0x20, 8)]
[(unique, 0x100003b8, 8) COPY (register, 0x38, 8), (register, 0x38, 8) MULTIEQUAL (unique, 0x100003a0, 8) , (unique, 0x10000430, 8) , (unique, 0x10000430, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb4, 4) MULTIEQUAL (stack, 0xffffffffffffffb4, 4) , (stack, 0xffffffffffffffb4, 4)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x80, 8) MULTIEQUAL (register, 0x80, 8) , (unique, 0xbd80, 8)]
[(register, 0x38, 8) MULTIEQUAL (unique, 0x100003b8, 8) , (unique, 0x10000430, 8)]
[(register, 0x20, 8) MULTIEQUAL (unique, 0x10000390, 8) , (unique, 0x10000398, 8)]
[(register, 0x8, 8) MULTIEQUAL (unique, 0xbd80, 8) , (register, 0x8, 8)]
[ ---  CBRANCH (ram, 0x456ee0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xb8, 4) , (const, 0x0, 4), (register, 0xb8, 4) SUBPIECE (register, 0xb8, 8) , (const, 0x0, 4), (register, 0xb8, 8) MULTIEQUAL (register, 0xb8, 8) , (register, 0xb8, 8)]
[ ---  CBRANCH (ram, 0x456f79, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x38, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000057c, 8), (unique, 0x1000057c, 8) INT_ADD (register, 0x0, 8) , (const, 0x10, 8), (register, 0x0, 8) INT_AND (unique, 0xbd80, 8) , (const, 0xfffffffffffffffe, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000574, 8), (unique, 0x10000574, 8) CAST (unique, 0x3a00, 8), (unique, 0x3a00, 8) PTRADD (stack, 0xffffffffffffffa8, 8) , (unique, 0x10000304, 8) , (const, 0x1, 8), (unique, 0x10000304, 8) INT_ADD (unique, 0x3900, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x3900, 8) INT_MULT (register, 0x0, 8) , (const, 0x8, 8), (register, 0x0, 8) INT_SEXT (register, 0xb8, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (register, 0x8, 8), (unique, 0x3100, 8) CAST (unique, 0x10000584, 8), (unique, 0x10000584, 8) INT_ADD (register, 0x0, 8) , (const, 0x10, 8)]
[ ---  BRANCH (ram, 0x456bef, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (register, 0x10, 8), (unique, 0x3100, 8) CAST (unique, 0x10000594, 8), (unique, 0x10000594, 8) INT_ADD (register, 0x0, 8) , (const, 0x8, 8), (register, 0x10, 8) INT_OR (register, 0x10, 8) , (register, 0x8, 8), (register, 0x10, 8) INT_ZEXT (register, 0x10, 4), (register, 0x10, 4) INT_AND (register, 0x10, 4) , (const, 0x1, 4), (register, 0x10, 4) SUBPIECE (unique, 0xbd80, 8) , (const, 0x0, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000058c, 8), (unique, 0x1000058c, 8) INT_ADD (register, 0x0, 8) , (const, 0x8, 8)]
[ ---  BRANCH (ram, 0x456bef, 1)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x18, 8) , (register, 0x80, 8), (register, 0x80, 8) CAST (unique, 0x1000059c, 8), (unique, 0x1000059c, 8) INT_OR (register, 0x80, 8) , (register, 0x8, 8), (register, 0x80, 8) INT_ZEXT (register, 0x80, 4), (register, 0x80, 4) INT_AND (register, 0x80, 4) , (const, 0x1, 4), (register, 0x80, 4) SUBPIECE (register, 0x80, 8) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x456bfb, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xa8, 8) , (register, 0x38, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0xa8, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x38, 8)]
[ ---  CBRANCH (ram, 0x456d12, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x58c00, 1) , (const, 0x0, 1), (unique, 0x58c00, 1) INT_AND (unique, 0xbb00, 1) , (const, 0x1, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x100005a4, 8), (unique, 0x100005a4, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x38, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[(unique, 0x10000348, 8) COPY (register, 0x8, 8)]
[ ---  CBRANCH (ram, 0x456f20, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xb8, 4) , (const, 0x0, 4)]
[(register, 0xb8, 4) SUBPIECE (register, 0xb8, 8) , (const, 0x0, 4), (register, 0xb8, 8) MULTIEQUAL (register, 0xb8, 8) , (register, 0xb8, 8)]
[ ---  CBRANCH (ram, 0x456c21, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x8, 8) , (const, 0x0, 8), (register, 0x8, 8) MULTIEQUAL (unique, 0x10000348, 8) , (unique, 0x10000350, 8)]
[(unique, 0x10000340, 8) COPY (register, 0x8, 8)]
[ ---  CBRANCH (ram, 0x456f30, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x10000125, 8) , (const, 0x0, 8), (unique, 0x10000125, 8) INT_AND (unique, 0xbd80, 8) , (const, 0x1, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100005ac, 8), (unique, 0x100005ac, 8) INT_ADD (register, 0x8, 8) , (const, 0x8, 8)]
[(register, 0x80, 4) SUBPIECE (unique, 0xbd80, 8) , (const, 0x0, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x100005b4, 8), (unique, 0x100005b4, 8) CAST (unique, 0x3a00, 8), (unique, 0x3a00, 8) PTRADD (stack, 0xffffffffffffffa8, 8) , (unique, 0x100002fc, 8) , (const, 0x1, 8), (unique, 0x100002fc, 8) INT_ADD (unique, 0x3900, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x3900, 8) INT_MULT (register, 0xb0, 8) , (const, 0x8, 8), (register, 0xb0, 8) INT_SEXT (register, 0xb8, 4)]
[ ---  CBRANCH (ram, 0x456d90, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (register, 0x8, 8), (register, 0x0, 8) INT_AND (unique, 0xbd80, 8) , (const, 0xfffffffffffffffe, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100005bc, 8), (unique, 0x100005bc, 8) INT_ADD (register, 0x10, 8) , (const, 0x8, 8), (register, 0x10, 8) INT_AND (unique, 0xbd80, 8) , (const, 0xfffffffffffffffe, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x100005b4, 8), (unique, 0x100005b4, 8) CAST (unique, 0x3a00, 8), (unique, 0x3a00, 8) PTRADD (stack, 0xffffffffffffffa8, 8) , (unique, 0x100002fc, 8) , (const, 0x1, 8), (unique, 0x100002fc, 8) INT_ADD (unique, 0x3900, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x3900, 8) INT_MULT (register, 0xb0, 8) , (const, 0x8, 8), (register, 0xb0, 8) INT_SEXT (register, 0xb8, 4)]
[(register, 0x98, 8) INT_AND (unique, 0xbd80, 8) , (const, 0xfffffffffffffffe, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100005cc, 8), (unique, 0x100005cc, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x8, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100005c4, 8), (unique, 0x100005c4, 8) INT_ADD (register, 0x10, 8) , (const, 0x10, 8)]
[(unique, 0x10000338, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100005c4, 8), (unique, 0x100005c4, 8) INT_ADD (register, 0x10, 8) , (const, 0x10, 8)]
[ ---  CBRANCH (ram, 0x456df2, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x10000151, 8) , (const, 0x0, 8), (unique, 0x10000151, 8) INT_AND (unique, 0xbd80, 8) , (const, 0x1, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100005cc, 8), (unique, 0x100005cc, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x8, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100005c4, 8), (unique, 0x100005c4, 8) INT_ADD (register, 0x10, 8) , (const, 0x10, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (register, 0x98, 8), (unique, 0x3100, 8) CAST (unique, 0x100005d4, 8), (unique, 0x100005d4, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x8, 8)]
[(register, 0xb8, 4) INT_ADD (register, 0xb8, 4) , (const, 0x1, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0xbe00, 8), (unique, 0xbe00, 8) INT_OR (unique, 0xbe00, 8) , (const, 0x1, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100005dc, 8), (unique, 0x100005dc, 8) INT_ADD (register, 0x10, 8) , (const, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (register, 0x0, 8), (unique, 0x3100, 8) CAST (unique, 0x100005ec, 8), (unique, 0x100005ec, 8) INT_ADD (register, 0x10, 8) , (const, 0x10, 8), (register, 0x0, 8) INT_AND (unique, 0xbd80, 8) , (const, 0xfffffffffffffffe, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100005e4, 8), (unique, 0x100005e4, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (register, 0x30, 8), (unique, 0x3100, 8) CAST (unique, 0x100005f4, 8), (unique, 0x100005f4, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x8, 8), (register, 0x30, 8) INT_OR (register, 0x30, 8) , (register, 0x10, 8), (register, 0x30, 8) INT_ZEXT (register, 0x30, 4), (register, 0x30, 4) INT_AND (register, 0x30, 4) , (const, 0x1, 4), (register, 0x30, 4) SUBPIECE (unique, 0xbd80, 8) , (const, 0x0, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100005e4, 8), (unique, 0x100005e4, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0xbd80, 8) , (register, 0x80, 8), (register, 0x80, 8) INT_OR (register, 0x80, 8) , (unique, 0xbd80, 8), (register, 0x80, 8) INT_ZEXT (register, 0x80, 4), (register, 0x80, 4) INT_AND (register, 0x80, 4) , (const, 0x1, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000060c, 8) , (unique, 0x3100, 8), (unique, 0x1000060c, 8) CAST (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (stack, 0xffffffffffffffa8, 8) , (unique, 0x3300, 8) , (const, 0x1, 8), (unique, 0x3300, 8) INT_MULT (register, 0xb0, 8) , (const, 0x8, 8), (unique, 0x3100, 8) CAST (unique, 0x10000604, 8), (unique, 0x10000604, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x8, 8)]
[(register, 0x98, 8) INT_AND (unique, 0xbd80, 8) , (const, 0xfffffffffffffffe, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100005fc, 8), (unique, 0x100005fc, 8) INT_ADD (register, 0x0, 8) , (const, 0x8, 8), (register, 0x0, 8) INT_AND (unique, 0xbd80, 8) , (const, 0xfffffffffffffffe, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100005e4, 8), (unique, 0x100005e4, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x8, 8)]
[(register, 0xb8, 4) MULTIEQUAL (register, 0xb8, 4) , (register, 0xb8, 4)]
[(register, 0x88, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0x3100, 8)]
[(register, 0x30, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8)]
[(register, 0x0, 8) MULTIEQUAL (unique, 0x10000338, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x456e70, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x98, 8) , (const, 0x0, 8), (register, 0x98, 8) MULTIEQUAL (register, 0x98, 8) , (register, 0x98, 8)]
[ ---  CBRANCH (ram, 0x456e70, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x10000159, 8) , (const, 0x0, 8), (unique, 0x10000159, 8) INT_AND (unique, 0xbd80, 8) , (const, 0x1, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000614, 8), (unique, 0x10000614, 8) INT_ADD (register, 0x98, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x456d70, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000061c, 8), (unique, 0x1000061c, 8) INT_ADD (register, 0x0, 8) , (const, 0x10, 8)]
[ ---  CBRANCH (ram, 0x456d70, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x58c00, 1) , (const, 0x0, 1), (unique, 0x58c00, 1) INT_AND (unique, 0xbb00, 1) , (const, 0x1, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000624, 8), (unique, 0x10000624, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x8, 8)]
[(register, 0x90, 4) SUBPIECE (unique, 0xbd80, 8) , (const, 0x0, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000062c, 8), (unique, 0x1000062c, 8) INT_ADD (register, 0x10, 8) , (const, 0x8, 8)]
[(register, 0x90, 4) SUBPIECE (unique, 0xbd80, 8) , (const, 0x0, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000634, 8), (unique, 0x10000634, 8) INT_ADD (register, 0x10, 8) , (const, 0x8, 8)]
[(unique, 0x100001a4, 8) INT_AND (unique, 0xbd80, 8) , (const, 0x1, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000634, 8), (unique, 0x10000634, 8) INT_ADD (register, 0x10, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x456f5c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000063c, 8), (unique, 0x1000063c, 8) INT_ADD (register, 0x0, 8) , (const, 0x10, 8)]
[ ---  CBRANCH (ram, 0x456e16, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x58c00, 1) , (const, 0x0, 1), (unique, 0x58c00, 1) INT_AND (unique, 0xbb00, 1) , (const, 0x1, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000644, 8), (unique, 0x10000644, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x456f50, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x100001a4, 8) , (const, 0x0, 8)]
[(register, 0x30, 8) INT_AND (unique, 0xbd80, 8) , (const, 0xfffffffffffffffe, 8)]
[ ---  BRANCH (ram, 0x456e2a, 1)]
[(register, 0x30, 8) INT_OR (unique, 0xbd80, 8) , (const, 0x1, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (register, 0x30, 8), (unique, 0x3100, 8) CAST (unique, 0x1000064c, 8), (unique, 0x1000064c, 8) INT_ADD (register, 0x98, 8) , (const, 0x8, 8), (register, 0x30, 8) MULTIEQUAL (register, 0x30, 8) , (register, 0x30, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (register, 0x80, 8), (unique, 0x3100, 8) CAST (unique, 0x1000065c, 8), (unique, 0x1000065c, 8) INT_ADD (register, 0x10, 8) , (const, 0x10, 8), (register, 0x80, 8) INT_AND (unique, 0xbd80, 8) , (const, 0xfffffffffffffffe, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (register, 0x30, 8), (unique, 0x3100, 8) CAST (unique, 0x1000066c, 8), (unique, 0x1000066c, 8) INT_ADD (register, 0x0, 8) , (const, 0x8, 8), (register, 0x30, 8) INT_OR (register, 0x30, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000664, 8), (unique, 0x10000664, 8) INT_ADD (register, 0x98, 8) , (const, 0x10, 8), (register, 0x30, 8) INT_ZEXT (register, 0x30, 4), (register, 0x30, 4) INT_AND (register, 0x30, 4) , (const, 0x1, 4), (register, 0x30, 4) SUBPIECE (unique, 0xbd80, 8) , (const, 0x0, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000654, 8), (unique, 0x10000654, 8) INT_ADD (register, 0x0, 8) , (const, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (register, 0x0, 8), (unique, 0x3100, 8) CAST (unique, 0x1000067c, 8), (unique, 0x1000067c, 8) INT_ADD (register, 0x98, 8) , (const, 0x10, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (register, 0x0, 8), (unique, 0x3100, 8) CAST (unique, 0x10000684, 8), (unique, 0x10000684, 8) INT_ADD (register, 0x98, 8) , (const, 0x8, 8), (register, 0x0, 8) INT_OR (register, 0x0, 8) , (register, 0x10, 8), (register, 0x0, 8) INT_ZEXT (register, 0x0, 4), (register, 0x0, 4) INT_AND (register, 0x0, 4) , (const, 0x1, 4), (register, 0x0, 4) SUBPIECE (unique, 0xbd80, 8) , (const, 0x0, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000674, 8), (unique, 0x10000674, 8) INT_ADD (register, 0x98, 8) , (const, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x88, 8) , (register, 0x98, 8), (register, 0x98, 8) INT_OR (register, 0x98, 8) , (register, 0x0, 8), (register, 0x0, 8) INT_ZEXT (register, 0x0, 4), (register, 0x0, 4) INT_AND (register, 0x0, 4) , (const, 0x1, 4), (register, 0x0, 4) SUBPIECE (unique, 0xbd80, 8) , (const, 0x0, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x88, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) INT_AND (unique, 0xbd80, 8) , (const, 0xfffffffffffffffe, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000068c, 8), (unique, 0x1000068c, 8) INT_ADD (register, 0x10, 8) , (const, 0x8, 8)]
[ ---  BRANCH (ram, 0x456d12, 1)]
[(register, 0x18, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8)]
[(register, 0x30, 8) INT_OR (register, 0x30, 8) , (const, 0x1, 8)]
[(unique, 0x100003d8, 8) COPY (register, 0x98, 8)]
[ ---  CBRANCH (ram, 0x456e9e, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x90, 4) , (const, 0x0, 4), (register, 0x90, 4) INT_AND (register, 0x90, 4) , (const, 0x1, 4), (register, 0x90, 4) MULTIEQUAL (register, 0x90, 4) , (register, 0x90, 4)]
[(unique, 0x100003e0, 8) COPY (register, 0x30, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (register, 0x98, 8), (unique, 0x3100, 8) CAST (unique, 0x10000694, 8), (unique, 0x10000694, 8) INT_ADD (register, 0x0, 8) , (const, 0x8, 8), (register, 0x98, 8) MULTIEQUAL (unique, 0x100003d8, 8) , (unique, 0x100003e0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) INT_AND (unique, 0xbd80, 8) , (const, 0xfffffffffffffffe, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000069c, 8), (unique, 0x1000069c, 8) INT_ADD (register, 0x10, 8) , (const, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) INT_AND (unique, 0xbd80, 8) , (const, 0xfffffffffffffffe, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100006a4, 8), (unique, 0x100006a4, 8) INT_ADD (register, 0x18, 8) , (const, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (register, 0x80, 8), (unique, 0x3100, 8) CAST (unique, 0x100006b4, 8), (unique, 0x100006b4, 8) INT_ADD (register, 0x10, 8) , (const, 0x10, 8), (register, 0x80, 8) INT_AND (unique, 0xbd80, 8) , (const, 0xfffffffffffffffe, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100006ac, 8), (unique, 0x100006ac, 8) INT_ADD (register, 0x0, 8) , (const, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (register, 0x10, 8), (unique, 0x3100, 8) CAST (unique, 0x100006bc, 8), (unique, 0x100006bc, 8) INT_ADD (register, 0x0, 8) , (const, 0x8, 8), (register, 0x10, 8) INT_OR (register, 0x10, 8) , (register, 0x30, 8), (register, 0x30, 8) INT_ZEXT (register, 0x30, 4), (register, 0x30, 4) INT_AND (register, 0x30, 4) , (const, 0x1, 4), (register, 0x30, 4) SUBPIECE (unique, 0xbd80, 8) , (const, 0x0, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100006ac, 8), (unique, 0x100006ac, 8) INT_ADD (register, 0x0, 8) , (const, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x88, 8) , (register, 0x8, 8), (register, 0x8, 8) INT_OR (register, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) INT_ZEXT (register, 0x0, 4), (register, 0x0, 4) INT_AND (register, 0x0, 4) , (const, 0x1, 4), (register, 0x0, 4) SUBPIECE (unique, 0xbd80, 8) , (const, 0x0, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x88, 8)]
[ ---  BRANCH (ram, 0x456d12, 1)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100006cc, 8), (unique, 0x100006cc, 8) INT_ADD (register, 0x0, 8) , (const, 0x10, 8)]
[(register, 0x18, 8) INT_AND (unique, 0xbd80, 8) , (const, 0xfffffffffffffffe, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100006c4, 8), (unique, 0x100006c4, 8) INT_ADD (register, 0x0, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x456ca3, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x10000135, 8) , (const, 0x0, 8), (unique, 0x10000135, 8) INT_AND (unique, 0xbd80, 8) , (const, 0x1, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100006c4, 8), (unique, 0x100006c4, 8) INT_ADD (register, 0x0, 8) , (const, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (register, 0x18, 8), (unique, 0x3100, 8) CAST (unique, 0x100006d4, 8), (unique, 0x100006d4, 8) INT_ADD (register, 0x0, 8) , (const, 0x8, 8)]
[(register, 0xb8, 4) INT_ADD (register, 0xb8, 4) , (const, 0x1, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (register, 0x98, 8), (unique, 0x3100, 8) CAST (unique, 0x100006dc, 8), (unique, 0x100006dc, 8) INT_ADD (register, 0x10, 8) , (const, 0x8, 8), (register, 0x98, 8) INT_OR (unique, 0xbd80, 8) , (const, 0x1, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (register, 0x10, 8), (unique, 0x3100, 8) CAST (unique, 0x100006e4, 8), (unique, 0x100006e4, 8) INT_ADD (register, 0x0, 8) , (const, 0x10, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0xbd80, 8) , (register, 0x80, 8), (register, 0x80, 8) INT_OR (register, 0x80, 8) , (register, 0x0, 8), (register, 0x80, 8) INT_ZEXT (register, 0x80, 4), (register, 0x80, 4) INT_AND (register, 0x80, 4) , (const, 0x1, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100006f4, 8) , (unique, 0x3100, 8), (unique, 0x100006f4, 8) CAST (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (stack, 0xffffffffffffffa8, 8) , (unique, 0x3300, 8) , (const, 0x1, 8), (unique, 0x3300, 8) INT_MULT (register, 0xb0, 8) , (const, 0x8, 8), (unique, 0x3100, 8) CAST (unique, 0x100006ec, 8), (unique, 0x100006ec, 8) INT_ADD (register, 0x0, 8) , (const, 0x10, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000704, 8), (unique, 0x10000704, 8) INT_ADD (register, 0x0, 8) , (const, 0x10, 8), (register, 0x0, 8) INT_AND (unique, 0xbd80, 8) , (const, 0xfffffffffffffffe, 8)]
[(register, 0x18, 8) INT_AND (unique, 0xbd80, 8) , (const, 0xfffffffffffffffe, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100006fc, 8), (unique, 0x100006fc, 8) INT_ADD (register, 0x0, 8) , (const, 0x8, 8), (register, 0x0, 8) INT_AND (unique, 0xbd80, 8) , (const, 0xfffffffffffffffe, 8)]
[(register, 0xb8, 4) MULTIEQUAL (register, 0xb8, 4) , (register, 0xb8, 4)]
[(register, 0x98, 8) MULTIEQUAL (unique, 0xbd80, 8) , (register, 0x98, 8)]
[(register, 0x88, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0x3100, 8)]
[(register, 0x30, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8)]
[(register, 0x18, 8) MULTIEQUAL (register, 0x18, 8) , (register, 0x18, 8)]
[(register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x456d20, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x8, 8) , (const, 0x0, 8), (register, 0x8, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8)]
[ ---  CBRANCH (ram, 0x456d20, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x1000013d, 8) , (const, 0x0, 8), (unique, 0x1000013d, 8) INT_AND (unique, 0xbd80, 8) , (const, 0x1, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000070c, 8), (unique, 0x1000070c, 8) INT_ADD (register, 0x8, 8) , (const, 0x8, 8)]
[(unique, 0x1000019c, 8) INT_AND (register, 0x98, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x456f10, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x18, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x456cbf, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x58c00, 1) , (const, 0x0, 1), (unique, 0x58c00, 1) INT_AND (unique, 0xbb00, 1) , (const, 0x1, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000714, 8), (unique, 0x10000714, 8) INT_ADD (register, 0x18, 8) , (const, 0x8, 8)]
[(register, 0x30, 8) INT_OR (unique, 0xbd80, 8) , (const, 0x1, 8)]
[(unique, 0x100003c8, 8) COPY (register, 0x80, 8), (register, 0x80, 8) INT_AND (unique, 0xbd80, 8) , (const, 0xfffffffffffffffe, 8)]
[ ---  CBRANCH (ram, 0x456cd1, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x1000019c, 8) , (const, 0x0, 8)]
[(unique, 0x100003d0, 8) COPY (register, 0x30, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (register, 0x80, 8), (unique, 0x3100, 8) CAST (unique, 0x1000071c, 8), (unique, 0x1000071c, 8) INT_ADD (register, 0x8, 8) , (const, 0x8, 8), (register, 0x80, 8) MULTIEQUAL (unique, 0x100003c8, 8) , (unique, 0x100003d0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (register, 0x30, 8), (unique, 0x3100, 8) CAST (unique, 0x10000734, 8), (unique, 0x10000734, 8) INT_ADD (register, 0x10, 8) , (const, 0x8, 8), (register, 0x30, 8) INT_OR (register, 0x30, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000072c, 8), (unique, 0x1000072c, 8) INT_ADD (register, 0x8, 8) , (const, 0x10, 8), (register, 0x30, 8) INT_ZEXT (register, 0x30, 4), (register, 0x30, 4) INT_AND (register, 0x30, 4) , (const, 0x1, 4), (register, 0x30, 4) SUBPIECE (unique, 0xbd80, 8) , (const, 0x0, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000724, 8), (unique, 0x10000724, 8) INT_ADD (register, 0x10, 8) , (const, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (register, 0x80, 8), (unique, 0x3100, 8) CAST (unique, 0x10000744, 8), (unique, 0x10000744, 8) INT_ADD (register, 0x0, 8) , (const, 0x10, 8), (register, 0x80, 8) INT_AND (unique, 0xbd80, 8) , (const, 0xfffffffffffffffe, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000073c, 8), (unique, 0x1000073c, 8) INT_ADD (register, 0x8, 8) , (const, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (register, 0x0, 8), (unique, 0x3100, 8) CAST (unique, 0x1000074c, 8), (unique, 0x1000074c, 8) INT_ADD (register, 0x8, 8) , (const, 0x8, 8), (register, 0x0, 8) INT_OR (register, 0x0, 8) , (register, 0x30, 8), (register, 0x30, 8) INT_ZEXT (register, 0x30, 4), (register, 0x30, 4) INT_AND (register, 0x30, 4) , (const, 0x1, 4), (register, 0x30, 4) SUBPIECE (unique, 0xbd80, 8) , (const, 0x0, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000073c, 8), (unique, 0x1000073c, 8) INT_ADD (register, 0x8, 8) , (const, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (register, 0x10, 8), (unique, 0x3100, 8) CAST (unique, 0x10000754, 8), (unique, 0x10000754, 8) INT_ADD (register, 0x8, 8) , (const, 0x10, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x88, 8) , (register, 0x8, 8), (register, 0x8, 8) INT_OR (register, 0x8, 8) , (register, 0x0, 8), (register, 0x0, 8) INT_ZEXT (register, 0x0, 4), (register, 0x0, 4) INT_AND (register, 0x0, 4) , (const, 0x1, 4), (register, 0x0, 4) SUBPIECE (unique, 0xbd80, 8) , (const, 0x0, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x88, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) INT_AND (unique, 0xbd80, 8) , (const, 0xfffffffffffffffe, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000075c, 8), (unique, 0x1000075c, 8) INT_ADD (register, 0x10, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x456d70, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x18, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x456d70, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x58c00, 1) , (const, 0x0, 1), (unique, 0x58c00, 1) INT_AND (unique, 0xbb00, 1) , (const, 0x1, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000764, 8), (unique, 0x10000764, 8) INT_ADD (register, 0x18, 8) , (const, 0x8, 8)]
[(register, 0x30, 8) INT_OR (register, 0x30, 8) , (const, 0x1, 8)]
[(unique, 0x10000368, 8) COPY (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x456d3a, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x100001ac, 8) , (const, 0x0, 8), (unique, 0x100001ac, 8) INT_AND (register, 0x98, 8) , (const, 0x1, 8)]
[(unique, 0x10000370, 8) COPY (register, 0x30, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (register, 0x18, 8), (unique, 0x3100, 8) CAST (unique, 0x1000076c, 8), (unique, 0x1000076c, 8) INT_ADD (register, 0x0, 8) , (const, 0x8, 8), (register, 0x18, 8) MULTIEQUAL (unique, 0x10000368, 8) , (unique, 0x10000370, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) INT_AND (unique, 0xbd80, 8) , (const, 0xfffffffffffffffe, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000774, 8), (unique, 0x10000774, 8) INT_ADD (register, 0x10, 8) , (const, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) INT_AND (unique, 0xbd80, 8) , (const, 0xfffffffffffffffe, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000784, 8), (unique, 0x10000784, 8) INT_ADD (register, 0x30, 8) , (const, 0x8, 8), (register, 0x30, 8) INT_AND (unique, 0xbd80, 8) , (const, 0xfffffffffffffffe, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000077c, 8), (unique, 0x1000077c, 8) INT_ADD (register, 0x0, 8) , (const, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (register, 0x8, 8), (unique, 0x3100, 8) CAST (unique, 0x10000794, 8), (unique, 0x10000794, 8) INT_ADD (register, 0x10, 8) , (const, 0x8, 8), (register, 0x8, 8) INT_OR (register, 0x8, 8) , (register, 0x30, 8), (register, 0x30, 8) INT_ZEXT (register, 0x30, 4), (register, 0x30, 4) INT_AND (register, 0x30, 4) , (const, 0x1, 4), (register, 0x30, 4) SUBPIECE (unique, 0xbd80, 8) , (const, 0x0, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000078c, 8), (unique, 0x1000078c, 8) INT_ADD (register, 0x10, 8) , (const, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (register, 0x10, 8), (unique, 0x3100, 8) CAST (unique, 0x1000079c, 8), (unique, 0x1000079c, 8) INT_ADD (register, 0x0, 8) , (const, 0x10, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x88, 8) , (register, 0x0, 8), (register, 0x0, 8) INT_OR (register, 0x0, 8) , (register, 0x10, 8), (register, 0x10, 8) INT_ZEXT (register, 0x10, 4), (register, 0x10, 4) INT_AND (register, 0x10, 4) , (const, 0x1, 4), (register, 0x10, 4) SUBPIECE (unique, 0xbd80, 8) , (const, 0x0, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x88, 8)]
[ ---  BRANCH (ram, 0x456d12, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (register, 0x30, 8), (unique, 0x3100, 8) CAST (unique, 0x100007a4, 8), (unique, 0x100007a4, 8) INT_ADD (register, 0x0, 8) , (const, 0x8, 8), (register, 0x30, 8) INT_OR (register, 0x30, 8) , (const, 0x1, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8) , (register, 0x0, 8) , (register, 0x0, 8), (register, 0x30, 8) MULTIEQUAL (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8)]
[(register, 0xb8, 8) INT_ZEXT (register, 0xb8, 4), (register, 0xb8, 4) INT_SUB (register, 0xb8, 4) , (const, 0x1, 4), (register, 0xb8, 4) MULTIEQUAL (register, 0xb8, 4) , (register, 0xb8, 4) , (register, 0xb8, 4) , (register, 0xb8, 4)]
[(unique, 0x10000350, 8) COPY (register, 0x10, 8)]
[ ---  CBRANCH (ram, 0x456f70, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xb8, 4) , (const, 0x0, 4), (register, 0xb8, 4) INT_SUB (register, 0xb8, 4) , (const, 0x1, 4), (register, 0xb8, 4) MULTIEQUAL (register, 0xb8, 4) , (register, 0xb8, 4) , (register, 0xb8, 4) , (register, 0xb8, 4)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100007ac, 8), (unique, 0x100007ac, 8) INT_ADD (register, 0x10, 8) , (const, 0x8, 8)]
[ ---  BRANCH (ram, 0x456f30, 1)]
[ ---  CBRANCH (ram, 0x456d12, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x8, 8) , (const, 0x0, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100007b4, 8), (unique, 0x100007b4, 8) INT_ADD (register, 0x8, 8) , (const, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (register, 0x0, 8), (unique, 0x3100, 8) CAST (unique, 0x100007bc, 8), (unique, 0x100007bc, 8) INT_ADD (register, 0x8, 8) , (const, 0x8, 8), (register, 0x0, 8) INT_AND (register, 0x0, 8) , (const, 0xfffffffffffffffe, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (register, 0x8, 8) MULTIEQUAL (unique, 0x10000340, 8) , (register, 0x10, 8) , (register, 0x8, 8)]
[ ---  BRANCH (ram, 0x456d12, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100007c4, 8) , (const, 0x456d17, 8), (unique, 0x100007c4, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x503, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x503, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x502, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x503, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x502, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x503, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x502, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x503, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x502, 4)]
[(stack, 0xffffffffffffffb4, 4) INDIRECT (stack, 0xffffffffffffffb4, 4) , (const, 0x503, 4), (stack, 0xffffffffffffffb4, 4) INDIRECT (stack, 0xffffffffffffffb4, 4) , (const, 0x502, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x503, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x502, 4)]
[ ---  CALL (ram, 0x426b40, 8) , (register, 0x38, 8)]
[ ---  BRANCH (ram, 0x4569f8, 1)]
[(stack, 0xffffffffffffffb4, 4) MULTIEQUAL (stack, 0xffffffffffffffb4, 4) , (stack, 0xffffffffffffffb4, 4)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(register, 0xa0, 8) MULTIEQUAL (register, 0xa0, 8) , (register, 0xa0, 8)]
[(register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x456f8a, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffffc0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x100007cc, 8), (unique, 0x100007cc, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100007d4, 8) , (unique, 0x10000254, 8), (unique, 0x100007d4, 8) CAST (register, 0x20, 8), (unique, 0x10000254, 8) PTRSUB (const, 0x0, 8) , (const, 0x456f8f, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x135, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x134, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x135, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x134, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x135, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x134, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x135, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x134, 4)]
[(stack, 0xffffffffffffffb4, 4) INDIRECT (stack, 0xffffffffffffffb4, 4) , (const, 0x135, 4), (stack, 0xffffffffffffffb4, 4) INDIRECT (stack, 0xffffffffffffffb4, 4) , (const, 0x134, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x135, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x134, 4)]
[ ---  CALL (ram, 0x458dd0, 8)]
[ ---  RETURN (const, 0x1, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) COPY (register, 0xa0, 8)]
