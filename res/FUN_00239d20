[(register, 0x20a, 1) COPY (const, 0x0, 1)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x100005f4, 8), (unique, 0x100005f4, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8)]
[(unique, 0x3c80, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff88, 8)]
[(unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff48, 8)]
[(unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff40, 8) COPY (const, 0x0, 8)]
[(stack, 0xffffffffffffff48, 8) COPY (const, 0x0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x50, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x50, 4), (register, 0x20a, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1) , (register, 0x20a, 1) , (register, 0x20a, 1) , (register, 0x20a, 1) , (register, 0x20a, 1) , (register, 0x20a, 1)]
[(ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x50, 4), (ram, 0x4eae00, 8) MULTIEQUAL (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8)]
[(ram, 0x4eaf20, 8) INDIRECT (ram, 0x4eaf20, 8) , (const, 0x50, 4), (ram, 0x4eaf20, 8) MULTIEQUAL (ram, 0x4eaf20, 8) , (ram, 0x4eaf20, 8) , (ram, 0x4eaf20, 8) , (ram, 0x4eaf20, 8) , (ram, 0x4eaf20, 8) , (ram, 0x4eaf20, 8) , (ram, 0x4eaf20, 8)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x50, 4), (stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x50, 4), (stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff58, 16) INDIRECT (stack, 0xffffffffffffff58, 16) , (const, 0x50, 4), (stack, 0xffffffffffffff58, 16) MULTIEQUAL (stack, 0xffffffffffffff58, 16) , (stack, 0xffffffffffffff58, 16) , (stack, 0xffffffffffffff58, 16) , (stack, 0xffffffffffffff58, 16) , (stack, 0xffffffffffffff58, 16) , (stack, 0xffffffffffffff58, 16) , (stack, 0xffffffffffffff58, 16)]
[(stack, 0xffffffffffffff68, 16) INDIRECT (stack, 0xffffffffffffff68, 16) , (const, 0x50, 4), (stack, 0xffffffffffffff68, 16) MULTIEQUAL (stack, 0xffffffffffffff68, 16) , (stack, 0xffffffffffffff68, 16) , (stack, 0xffffffffffffff68, 16) , (stack, 0xffffffffffffff68, 16) , (stack, 0xffffffffffffff68, 16) , (stack, 0xffffffffffffff68, 16) , (stack, 0xffffffffffffff68, 16)]
[(stack, 0xffffffffffffff78, 16) INDIRECT (stack, 0xffffffffffffff78, 16) , (const, 0x50, 4), (stack, 0xffffffffffffff78, 16) MULTIEQUAL (stack, 0xffffffffffffff78, 16) , (stack, 0xffffffffffffff78, 16) , (stack, 0xffffffffffffff78, 16) , (stack, 0xffffffffffffff78, 16) , (stack, 0xffffffffffffff78, 16) , (stack, 0xffffffffffffff78, 16) , (stack, 0xffffffffffffff78, 16)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x50, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (unique, 0xbd80, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(unique, 0x1000044e, 8) COPY (stack, 0xffffffffffffff40, 8), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x50, 4), (stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[ ---  CBRANCH (ram, 0x239fe4, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (register, 0x0, 8) , (const, 0x1, 8), (register, 0x0, 8) CALL (ram, 0x17bc50, 8) , (unique, 0x100005fc, 8) , (unique, 0x3800, 8) , (register, 0x38, 8), (unique, 0x100005fc, 8) CAST (unique, 0x3800, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3a00, 8) , (const, 0x0, 1), (unique, 0x3a00, 8) PTRADD (stack, 0xffffffffffffff40, 8) , (unique, 0x10000324, 8) , (const, 0x1, 8), (unique, 0x10000324, 8) INT_SUB (stack, 0xffffffffffffff48, 8) , (const, 0x1, 8)]
[(unique, 0x10000446, 8) COPY (ram, 0x4eaf20, 8), (ram, 0x4eaf20, 8) INDIRECT (ram, 0x4eaf20, 8) , (const, 0x67, 4)]
[(unique, 0x1000043e, 8) COPY (ram, 0x4eae00, 8), (ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x67, 4)]
[ ---  CBRANCH (ram, 0x239d90, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (stack, 0xffffffffffffff40, 8)]
[(unique, 0x100004c6, 8) COPY (stack, 0xffffffffffffff40, 8)]
[(unique, 0x100005cf, 1) COPY (unique, 0xbb00, 1)]
[ ---  CBRANCH (ram, 0x23a160, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x98, 2) , (const, 0x0, 2), (register, 0x98, 2) INT_AND (unique, 0xbc00, 2) , (const, 0x2000, 2), (unique, 0xbc00, 2) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) CAST (unique, 0x1000060d, 8), (unique, 0x1000060d, 8) INT_ADD (unique, 0xbd80, 8) , (unique, 0x3300, 8), (unique, 0x3300, 8) INT_MULT (register, 0x80, 8) , (const, 0x2, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000605, 8), (unique, 0x10000605, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (ram, 0x4eae00, 8) , (register, 0x110, 8) , (const, 0x1, 8), (register, 0x80, 8) INT_SEXT (unique, 0x10000604, 1), (unique, 0x10000604, 1) CAST (unique, 0xbb00, 1)]
[ ---  CBRANCH (ram, 0x239d90, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0x10, 8), (register, 0x10, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x1, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0x100004be, 8) , (unique, 0x100004c6, 8)]
[(unique, 0x100004be, 8) COPY (register, 0x10, 8)]
[(unique, 0x100005ce, 1) COPY (unique, 0xbb00, 1)]
[ ---  CBRANCH (ram, 0x239df0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x58c00, 1) , (const, 0x0, 1), (unique, 0x58c00, 1) INT_AND (unique, 0xbb00, 1) , (const, 0x20, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) CAST (unique, 0x10000616, 8), (unique, 0x10000616, 8) INT_ADD (unique, 0x3880, 8) , (unique, 0x3900, 8), (unique, 0x3900, 8) INT_MULT (register, 0x38, 8) , (const, 0x2, 8), (unique, 0x3880, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x1, 8), (register, 0x38, 8) INT_SEXT (unique, 0x10000615, 1), (unique, 0x10000615, 1) CAST (unique, 0xbb00, 1)]
[ ---  CBRANCH (ram, 0x239d90, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x8, 1) , (const, 0x23, 1), (register, 0x8, 1) MULTIEQUAL (unique, 0x100005ce, 1) , (unique, 0x100005cf, 1)]
[(unique, 0x1000047e, 8) COPY (unique, 0x10000466, 8), (unique, 0x10000466, 8) COPY (stack, 0xffffffffffffff40, 8)]
[ ---  CBRANCH (ram, 0x23a050, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x98, 2) , (const, 0x0, 2)]
[(ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0xdf, 4), (ram, 0x4eae00, 8) MULTIEQUAL (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8)]
[(ram, 0x4eaf20, 8) INDIRECT (ram, 0x4eaf20, 8) , (const, 0xdf, 4), (ram, 0x4eaf20, 8) MULTIEQUAL (ram, 0x4eaf20, 8) , (ram, 0x4eaf20, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x0, 8) , (register, 0x10, 1), (register, 0x10, 1) SUBPIECE (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) CAST (unique, 0x10000626, 8), (unique, 0x10000626, 8) INT_ADD (unique, 0xbd80, 8) , (unique, 0x3300, 8), (unique, 0x3300, 8) INT_MULT (register, 0x80, 8) , (const, 0x4, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x1000061e, 8), (unique, 0x1000061e, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (unique, 0x10000446, 8) , (register, 0x110, 8) , (const, 0x1, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x10000476, 8) , (unique, 0x1000047e, 8), (register, 0x80, 8) MULTIEQUAL (register, 0x80, 8) , (register, 0x80, 8)]
[(unique, 0x10000496, 8) COPY (register, 0x0, 8), (register, 0x0, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x1, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x10000476, 8) , (unique, 0x1000047e, 8)]
[ ---  CBRANCH (ram, 0x239e20, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0x0, 8), (register, 0x0, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x1, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x10000476, 8) , (unique, 0x1000047e, 8)]
[(unique, 0x10000476, 8) COPY (unique, 0x10000496, 8)]
[ ---  CBRANCH (ram, 0x23a050, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x58c00, 1) , (const, 0x0, 1), (unique, 0x58c00, 1) INT_AND (unique, 0xbb00, 1) , (const, 0x20, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) CAST (unique, 0x10000637, 8), (unique, 0x10000637, 8) INT_ADD (unique, 0x3880, 8) , (unique, 0x3900, 8), (unique, 0x3900, 8) INT_MULT (register, 0x80, 8) , (const, 0x2, 8), (unique, 0x3880, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x1, 8), (register, 0x80, 8) INT_SEXT (unique, 0x10000636, 1), (unique, 0x10000636, 1) CAST (unique, 0xbb00, 1), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x1000062e, 8), (unique, 0x1000062e, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (unique, 0x1000043e, 8) , (register, 0x110, 8) , (const, 0x1, 8)]
[(ram, 0x4eaf20, 8) MULTIEQUAL (ram, 0x4eaf20, 8) , (ram, 0x4eaf20, 8)]
[(ram, 0x4eae00, 8) MULTIEQUAL (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8)]
[(register, 0x0, 8) MULTIEQUAL (unique, 0x10000466, 8) , (unique, 0x10000496, 8)]
[ ---  CBRANCH (ram, 0x23a063, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x30, 1) , (const, 0x20, 1), (register, 0x30, 1) MULTIEQUAL (unique, 0xbb00, 1) , (unique, 0xbb00, 1)]
[(unique, 0x1000045e, 8) COPY (register, 0x0, 8)]
[(unique, 0x10000486, 8) COPY (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x239e4e, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x30, 1) , (const, 0x9, 1)]
[(ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x4c7, 4)]
[(ram, 0x4eaf20, 8) INDIRECT (ram, 0x4eaf20, 8) , (const, 0x4c7, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x0, 8) , (const, 0x0, 1)]
[(unique, 0x1000049e, 8) COPY (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x23a128, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x1000063f, 8), (unique, 0x1000063f, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (unique, 0x1000043e, 8) , (register, 0x110, 8) , (const, 0x1, 8)]
[ ---  BRANCH (ram, 0x23a090, 1)]
[(unique, 0x100004b6, 8) COPY (register, 0x10, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0x10, 8)]
[ ---  CBRANCH (ram, 0x23a080, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x58c00, 1) , (const, 0x0, 1), (unique, 0x58c00, 1) INT_AND (unique, 0xbb00, 1) , (const, 0x20, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) CAST (unique, 0x10000648, 8), (unique, 0x10000648, 8) INT_ADD (unique, 0x3880, 8) , (unique, 0x3900, 8), (unique, 0x3900, 8) INT_MULT (register, 0x0, 8) , (const, 0x2, 8), (unique, 0x3880, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x1, 8), (register, 0x0, 8) INT_SEXT (unique, 0x10000647, 1), (unique, 0x10000647, 1) CAST (unique, 0xbb00, 1), (unique, 0xbb00, 1) MULTIEQUAL (unique, 0xbb00, 1) , (unique, 0xbb00, 1)]
[(register, 0x8, 8) INT_SEXT (unique, 0x10000650, 1), (unique, 0x10000650, 1) CAST (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0x10, 8), (register, 0x10, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x1, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0x100004ae, 8) , (unique, 0x100004b6, 8)]
[ ---  CBRANCH (ram, 0x23a0a0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0x10, 8), (register, 0x10, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x1, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0x100004ae, 8) , (unique, 0x100004b6, 8)]
[(ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x501, 4)]
[(ram, 0x4eaf20, 8) INDIRECT (ram, 0x4eaf20, 8) , (const, 0x501, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x10, 8) , (const, 0x0, 1)]
[(unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (stack, 0xffffffffffffff40, 8)]
[(unique, 0x1000048e, 8) COPY (register, 0x10, 8)]
[(unique, 0x100004ae, 8) COPY (register, 0x10, 8)]
[ ---  CBRANCH (ram, 0x239e4e, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x58c00, 1) , (const, 0x0, 1), (unique, 0x58c00, 1) INT_AND (unique, 0xbb00, 1) , (const, 0x20, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) CAST (unique, 0x10000651, 8), (unique, 0x10000651, 8) INT_ADD (unique, 0x3880, 8) , (unique, 0x3900, 8), (unique, 0x3900, 8) INT_MULT (register, 0x8, 8) , (const, 0x2, 8), (unique, 0x3880, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x1, 8)]
[(unique, 0x100004a6, 8) COPY (register, 0x10, 8), (register, 0x10, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x23a128, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0x10, 8), (register, 0x10, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[(register, 0x0, 8) MULTIEQUAL (unique, 0x1000045e, 8) , (register, 0x10, 8) , (register, 0x0, 8) , (unique, 0x3100, 8) , (register, 0x10, 8)]
[(ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0xf0, 4), (ram, 0x4eae00, 8) MULTIEQUAL (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8)]
[(ram, 0x4eaf20, 8) INDIRECT (ram, 0x4eaf20, 8) , (const, 0xf0, 4), (ram, 0x4eaf20, 8) MULTIEQUAL (ram, 0x4eaf20, 8) , (ram, 0x4eaf20, 8) , (ram, 0x4eaf20, 8) , (ram, 0x4eaf20, 8) , (ram, 0x4eaf20, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x10, 8) , (const, 0x0, 1), (register, 0x10, 8) MULTIEQUAL (unique, 0x10000486, 8) , (unique, 0x1000048e, 8) , (unique, 0x10000496, 8) , (unique, 0x1000049e, 8) , (unique, 0x100004a6, 8)]
[(unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (stack, 0xffffffffffffff40, 8)]
[(unique, 0x100002eb, 8) MULTIEQUAL (register, 0x10, 8) , (register, 0x0, 8)]
[(unique, 0x100002f3, 8) MULTIEQUAL (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8)]
[(unique, 0x100002fb, 8) MULTIEQUAL (ram, 0x4eaf20, 8) , (ram, 0x4eaf20, 8)]
[ ---  CBRANCH (ram, 0x239e60, 1) , (unique, 0x100002ea, 1), (unique, 0x100002ea, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) MULTIEQUAL (unique, 0xbb00, 1) , (unique, 0xbb00, 1)]
[(register, 0x18, 8) COPY (const, 0xffffffff, 8)]
[ ---  BRANCH (ram, 0x239fee, 1)]
[(register, 0x30, 8) PTRSUB (const, 0x0, 8) , (const, 0x2b6b5e, 8)]
[(register, 0x8, 8) COPY (const, 0x2, 8)]
[(unique, 0x1000057e, 8) COPY (unique, 0x100002eb, 8)]
[(unique, 0x100005e0, 8) COPY (unique, 0x100002eb, 8)]
[ ---  CBRANCH (ram, 0x239e74, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x100002eb, 8)]
[(unique, 0x10000586, 8) COPY (register, 0x8, 8)]
[(unique, 0x100005e8, 8) COPY (register, 0x8, 8)]
[(register, 0x0, 8) MULTIEQUAL (unique, 0x100005d8, 8) , (unique, 0x100005e0, 8) , (unique, 0x100005e8, 8)]
[(register, 0x206, 1) MULTIEQUAL (register, 0x206, 1) , (register, 0x206, 1) , (register, 0x206, 1)]
[(register, 0x38, 8) MULTIEQUAL (unique, 0x10000576, 8) , (unique, 0x1000057e, 8) , (unique, 0x10000586, 8)]
[(register, 0x30, 8) MULTIEQUAL (unique, 0x1000051e, 8) , (register, 0x30, 8) , (register, 0x30, 8)]
[ ---  CBRANCH (ram, 0x239e79, 1) , (unique, 0xd600, 1), (unique, 0xd600, 1) INT_EQUAL (register, 0x8, 8) , (const, 0x0, 8), (register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8) , (register, 0x8, 8)]
[(register, 0x8, 8) INT_ADD (register, 0x8, 8) , (const, 0xffffffffffffffff, 8)]
[(unique, 0x1000051e, 8) COPY (register, 0x30, 8), (register, 0x30, 8) PTRADD (register, 0x30, 8) , (unique, 0x10000334, 8) , (const, 0x1, 8), (unique, 0x10000334, 8) INT_ADD (unique, 0x100000dd, 8) , (const, 0x1, 8), (unique, 0x100000dd, 8) INT_MULT (unique, 0xa380, 8) , (const, 0xfffffffffffffffe, 8), (unique, 0xa380, 8) INT_ZEXT (register, 0x20a, 1)]
[(unique, 0x10000576, 8) COPY (register, 0x38, 8), (register, 0x38, 8) PTRADD (register, 0x38, 8) , (unique, 0x1000032c, 8) , (const, 0x1, 8), (unique, 0x1000032c, 8) INT_ADD (unique, 0x100000d5, 8) , (const, 0x1, 8), (unique, 0x100000d5, 8) INT_MULT (unique, 0xaf80, 8) , (const, 0xfffffffffffffffe, 8), (unique, 0xaf80, 8) INT_ZEXT (register, 0x20a, 1)]
[(unique, 0x100005d8, 8) COPY (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x239e77, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xa500, 1) , (unique, 0xb100, 1), (unique, 0xb100, 1) LOAD (const, 0x1b1, 4) , (register, 0x38, 8), (unique, 0xa500, 1) LOAD (const, 0x1b1, 4) , (register, 0x30, 8)]
[ ---  CBRANCH (ram, 0x23a0d8, 1) , (register, 0x206, 1), (register, 0x206, 1) MULTIEQUAL (register, 0x206, 1) , (register, 0x206, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x492, 4)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x492, 4)]
[(ram, 0x4eae00, 8) INDIRECT (unique, 0x100002f3, 8) , (const, 0x492, 4)]
[(ram, 0x4eaf20, 8) INDIRECT (unique, 0x100002fb, 8) , (const, 0x492, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x492, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x492, 4)]
[(stack, 0xffffffffffffff58, 16) INDIRECT (stack, 0xffffffffffffff58, 16) , (const, 0x492, 4)]
[(stack, 0xffffffffffffff68, 16) INDIRECT (stack, 0xffffffffffffff68, 16) , (const, 0x492, 4)]
[(stack, 0xffffffffffffff78, 16) INDIRECT (stack, 0xffffffffffffff78, 16) , (const, 0x492, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x492, 4)]
[(register, 0x0, 4) CALL (ram, 0x23ced0, 8) , (unique, 0x10000659, 8) , (const, 0x0, 8) , (register, 0x80, 8) , (const, 0x0, 8), (unique, 0x10000659, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x2, 8) , (const, 0x1, 8)]
[(unique, 0x100005a6, 8) COPY (stack, 0xffffffffffffff40, 8), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x492, 4)]
[ ---  BRANCH (ram, 0x239ecc, 1)]
[(register, 0x8, 8) COPY (const, 0x2, 8)]
[(unique, 0x1000050e, 8) COPY (register, 0x30, 8), (register, 0x30, 8) PTRSUB (const, 0x0, 8) , (const, 0x2b6b61, 8)]
[(unique, 0x10000566, 8) COPY (register, 0x0, 8)]
[(register, 0x206, 1) MULTIEQUAL (register, 0x206, 1) , (register, 0x206, 1)]
[(register, 0x38, 8) MULTIEQUAL (unique, 0x10000566, 8) , (unique, 0x1000056e, 8)]
[(register, 0x30, 8) MULTIEQUAL (unique, 0x1000050e, 8) , (unique, 0x10000516, 8)]
[ ---  CBRANCH (ram, 0x239e90, 1) , (unique, 0xd600, 1), (unique, 0xd600, 1) INT_EQUAL (register, 0x8, 8) , (const, 0x0, 8), (register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8)]
[(register, 0x8, 8) INT_ADD (register, 0x8, 8) , (const, 0xffffffffffffffff, 8)]
[(unique, 0x10000516, 8) COPY (register, 0x30, 8), (register, 0x30, 8) PTRADD (register, 0x30, 8) , (unique, 0x10000344, 8) , (const, 0x1, 8), (unique, 0x10000344, 8) INT_ADD (unique, 0x100000f6, 8) , (const, 0x1, 8), (unique, 0x100000f6, 8) INT_MULT (unique, 0xa380, 8) , (const, 0xfffffffffffffffe, 8), (unique, 0xa380, 8) INT_ZEXT (register, 0x20a, 1)]
[(unique, 0x1000056e, 8) COPY (register, 0x38, 8), (register, 0x38, 8) PTRADD (register, 0x38, 8) , (unique, 0x1000033c, 8) , (const, 0x1, 8), (unique, 0x1000033c, 8) INT_ADD (unique, 0x100000ee, 8) , (const, 0x1, 8), (unique, 0x100000ee, 8) INT_MULT (unique, 0xaf80, 8) , (const, 0xfffffffffffffffe, 8), (unique, 0xaf80, 8) INT_ZEXT (register, 0x20a, 1)]
[ ---  CBRANCH (ram, 0x239e8e, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xa500, 1) , (unique, 0xb100, 1), (unique, 0xb100, 1) LOAD (const, 0x1b1, 4) , (register, 0x38, 8), (unique, 0xa500, 1) LOAD (const, 0x1b1, 4) , (register, 0x30, 8)]
[ ---  CBRANCH (ram, 0x23a100, 1) , (register, 0x206, 1), (register, 0x206, 1) MULTIEQUAL (register, 0x206, 1) , (register, 0x206, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x466, 4)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x466, 4)]
[(ram, 0x4eae00, 8) INDIRECT (unique, 0x100002f3, 8) , (const, 0x466, 4)]
[(ram, 0x4eaf20, 8) INDIRECT (unique, 0x100002fb, 8) , (const, 0x466, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x466, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x466, 4)]
[(stack, 0xffffffffffffff58, 16) INDIRECT (stack, 0xffffffffffffff58, 16) , (const, 0x466, 4)]
[(stack, 0xffffffffffffff68, 16) INDIRECT (stack, 0xffffffffffffff68, 16) , (const, 0x466, 4)]
[(stack, 0xffffffffffffff78, 16) INDIRECT (stack, 0xffffffffffffff78, 16) , (const, 0x466, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x466, 4)]
[(register, 0x0, 4) INT_2COMP (register, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x23ced0, 8) , (unique, 0x10000661, 8) , (const, 0x0, 8) , (register, 0x80, 8) , (const, 0x0, 8), (unique, 0x10000661, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x2, 8) , (const, 0x1, 8)]
[(unique, 0x1000059e, 8) COPY (stack, 0xffffffffffffff40, 8), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x466, 4)]
[ ---  BRANCH (ram, 0x239ecc, 1)]
[ ---  CBRANCH (ram, 0x23a140, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x2d, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0x0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x435, 4)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x435, 4)]
[(ram, 0x4eae00, 8) INDIRECT (unique, 0x100002f3, 8) , (const, 0x435, 4)]
[(ram, 0x4eaf20, 8) INDIRECT (unique, 0x100002fb, 8) , (const, 0x435, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x435, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x435, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x435, 4)]
[(stack, 0xffffffffffffff58, 16) INDIRECT (stack, 0xffffffffffffff58, 16) , (const, 0x435, 4)]
[(stack, 0xffffffffffffff68, 16) INDIRECT (stack, 0xffffffffffffff68, 16) , (const, 0x435, 4)]
[(stack, 0xffffffffffffff78, 16) INDIRECT (stack, 0xffffffffffffff78, 16) , (const, 0x435, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x435, 4)]
[(register, 0xa8, 4) INT_2COMP (unique, 0x10000248, 4), (unique, 0x10000248, 4) INT_ZEXT (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x121200, 8) , (unique, 0x10000669, 8) , (register, 0x80, 8), (unique, 0x10000669, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[(unique, 0x10000596, 8) COPY (unique, 0x1000044e, 8)]
[ ---  BRANCH (ram, 0x239ecc, 1)]
[(register, 0x8, 8) COPY (const, 0x2, 8)]
[(unique, 0x100004de, 8) COPY (register, 0x30, 8), (register, 0x30, 8) PTRSUB (const, 0x0, 8) , (const, 0x2b5727, 8)]
[(unique, 0x10000536, 8) COPY (register, 0x0, 8)]
[(register, 0x206, 1) MULTIEQUAL (register, 0x206, 1) , (register, 0x206, 1)]
[(register, 0x38, 8) MULTIEQUAL (unique, 0x10000536, 8) , (unique, 0x1000053e, 8)]
[(register, 0x30, 8) MULTIEQUAL (unique, 0x100004de, 8) , (unique, 0x100004e6, 8)]
[ ---  CBRANCH (ram, 0x239eb0, 1) , (unique, 0xd600, 1), (unique, 0xd600, 1) INT_EQUAL (register, 0x8, 8) , (const, 0x0, 8), (register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8)]
[(register, 0x8, 8) INT_ADD (register, 0x8, 8) , (const, 0xffffffffffffffff, 8)]
[(unique, 0x100004e6, 8) COPY (register, 0x30, 8), (register, 0x30, 8) PTRADD (register, 0x30, 8) , (unique, 0x10000354, 8) , (const, 0x1, 8), (unique, 0x10000354, 8) INT_ADD (unique, 0x10000110, 8) , (const, 0x1, 8), (unique, 0x10000110, 8) INT_MULT (unique, 0xa380, 8) , (const, 0xfffffffffffffffe, 8), (unique, 0xa380, 8) INT_ZEXT (register, 0x20a, 1)]
[(unique, 0x1000053e, 8) COPY (register, 0x38, 8), (register, 0x38, 8) PTRADD (register, 0x38, 8) , (unique, 0x1000034c, 8) , (const, 0x1, 8), (unique, 0x1000034c, 8) INT_ADD (unique, 0x10000108, 8) , (const, 0x1, 8), (unique, 0x10000108, 8) INT_MULT (unique, 0xaf80, 8) , (const, 0xfffffffffffffffe, 8), (unique, 0xaf80, 8) INT_ZEXT (register, 0x20a, 1)]
[ ---  CBRANCH (ram, 0x239eae, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xa500, 1) , (unique, 0xb100, 1), (unique, 0xb100, 1) LOAD (const, 0x1b1, 4) , (register, 0x38, 8), (unique, 0xa500, 1) LOAD (const, 0x1b1, 4) , (register, 0x30, 8)]
[ ---  CBRANCH (ram, 0x23a130, 1) , (unique, 0x100002b6, 1), (unique, 0x100002b6, 1) BOOL_NEGATE (register, 0x206, 1), (register, 0x206, 1) MULTIEQUAL (register, 0x206, 1) , (register, 0x206, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x191, 4)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x191, 4)]
[(ram, 0x4eae00, 8) INDIRECT (unique, 0x100002f3, 8) , (const, 0x191, 4)]
[(ram, 0x4eaf20, 8) INDIRECT (unique, 0x100002fb, 8) , (const, 0x191, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x191, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x191, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x191, 4)]
[(stack, 0xffffffffffffff58, 16) INDIRECT (stack, 0xffffffffffffff58, 16) , (const, 0x191, 4)]
[(stack, 0xffffffffffffff68, 16) INDIRECT (stack, 0xffffffffffffff68, 16) , (const, 0x191, 4)]
[(stack, 0xffffffffffffff78, 16) INDIRECT (stack, 0xffffffffffffff78, 16) , (const, 0x191, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x191, 4)]
[(unique, 0x10000131, 4) INT_ZEXT (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x121200, 8) , (register, 0x80, 8) , (unique, 0x10000671, 8), (unique, 0x10000671, 8) CAST (register, 0x0, 8)]
[(unique, 0x1000058e, 8) COPY (unique, 0x1000044e, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff78, 16) MULTIEQUAL (stack, 0xffffffffffffff78, 16) , (stack, 0xffffffffffffff78, 16) , (stack, 0xffffffffffffff78, 16) , (stack, 0xffffffffffffff78, 16)]
[(stack, 0xffffffffffffff68, 16) MULTIEQUAL (stack, 0xffffffffffffff68, 16) , (stack, 0xffffffffffffff68, 16) , (stack, 0xffffffffffffff68, 16) , (stack, 0xffffffffffffff68, 16)]
[(stack, 0xffffffffffffff58, 16) MULTIEQUAL (stack, 0xffffffffffffff58, 16) , (stack, 0xffffffffffffff58, 16) , (stack, 0xffffffffffffff58, 16) , (stack, 0xffffffffffffff58, 16)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(ram, 0x4eaf20, 8) MULTIEQUAL (ram, 0x4eaf20, 8) , (ram, 0x4eaf20, 8) , (ram, 0x4eaf20, 8) , (ram, 0x4eaf20, 8)]
[(ram, 0x4eae00, 8) MULTIEQUAL (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8)]
[(register, 0x20a, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1) , (register, 0x20a, 1) , (register, 0x20a, 1)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x100005ae, 8) COPY (register, 0xb0, 8), (register, 0xb0, 8) MULTIEQUAL (unique, 0x1000058e, 8) , (unique, 0x10000596, 8) , (unique, 0x1000059e, 8) , (unique, 0x100005a6, 8)]
[ ---  CBRANCH (ram, 0x239edb, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xa8, 4) , (const, 0x0, 4), (register, 0xa8, 4) MULTIEQUAL (unique, 0x10000131, 4) , (register, 0xa8, 4) , (register, 0x0, 4) , (register, 0x0, 4)]
[(unique, 0x100005b6, 8) COPY (register, 0xb0, 8)]
[ ---  CBRANCH (ram, 0x239d90, 1) , (unique, 0xc680, 1), (unique, 0xc680, 1) BOOL_NEGATE (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x2d, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0xb0, 8)]
[(register, 0xa8, 4) COPY (const, 0x1, 4)]
[ ---  BRANCH (ram, 0x239edb, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff78, 16) MULTIEQUAL (stack, 0xffffffffffffff78, 16) , (stack, 0xffffffffffffff78, 16) , (stack, 0xffffffffffffff78, 16)]
[(stack, 0xffffffffffffff68, 16) MULTIEQUAL (stack, 0xffffffffffffff68, 16) , (stack, 0xffffffffffffff68, 16) , (stack, 0xffffffffffffff68, 16)]
[(stack, 0xffffffffffffff58, 16) MULTIEQUAL (stack, 0xffffffffffffff58, 16) , (stack, 0xffffffffffffff58, 16) , (stack, 0xffffffffffffff58, 16)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(ram, 0x4eaf20, 8) MULTIEQUAL (ram, 0x4eaf20, 8) , (ram, 0x4eaf20, 8) , (unique, 0x100002fb, 8)]
[(ram, 0x4eae00, 8) MULTIEQUAL (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8) , (unique, 0x100002f3, 8)]
[(register, 0x20a, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1) , (register, 0x20a, 1)]
[(register, 0x206, 1) MULTIEQUAL (register, 0x206, 1) , (register, 0x206, 1) , (register, 0x206, 1)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xa8, 4) MULTIEQUAL (register, 0xa8, 4) , (register, 0xa8, 4) , (register, 0xa8, 4)]
[(register, 0x8, 8) COPY (const, 0x2, 8)]
[(unique, 0x100004fe, 8) COPY (register, 0x30, 8), (register, 0x30, 8) PTRSUB (const, 0x0, 8) , (const, 0x2b6b5e, 8)]
[(unique, 0x10000556, 8) COPY (register, 0xb0, 8), (register, 0xb0, 8) MULTIEQUAL (unique, 0x100005ae, 8) , (unique, 0x100005b6, 8) , (unique, 0x1000044e, 8)]
[(register, 0x206, 1) MULTIEQUAL (register, 0x206, 1) , (register, 0x206, 1)]
[(register, 0x38, 8) MULTIEQUAL (unique, 0x10000556, 8) , (unique, 0x1000055e, 8)]
[(register, 0x30, 8) MULTIEQUAL (unique, 0x100004fe, 8) , (unique, 0x10000506, 8)]
[ ---  CBRANCH (ram, 0x239eec, 1) , (unique, 0xd600, 1), (unique, 0xd600, 1) INT_EQUAL (register, 0x8, 8) , (const, 0x0, 8), (register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8)]
[(register, 0x8, 8) INT_ADD (register, 0x8, 8) , (const, 0xffffffffffffffff, 8)]
[(unique, 0x10000506, 8) COPY (register, 0x30, 8), (register, 0x30, 8) PTRADD (register, 0x30, 8) , (unique, 0x10000364, 8) , (const, 0x1, 8), (unique, 0x10000364, 8) INT_ADD (unique, 0x1000014a, 8) , (const, 0x1, 8), (unique, 0x1000014a, 8) INT_MULT (unique, 0xa380, 8) , (const, 0xfffffffffffffffe, 8), (unique, 0xa380, 8) INT_ZEXT (register, 0x20a, 1)]
[(unique, 0x1000055e, 8) COPY (register, 0x38, 8), (register, 0x38, 8) PTRADD (register, 0x38, 8) , (unique, 0x1000035c, 8) , (const, 0x1, 8), (unique, 0x1000035c, 8) INT_ADD (unique, 0x10000142, 8) , (const, 0x1, 8), (unique, 0x10000142, 8) INT_MULT (unique, 0xaf80, 8) , (const, 0xfffffffffffffffe, 8), (unique, 0xaf80, 8) INT_ZEXT (register, 0x20a, 1)]
[ ---  CBRANCH (ram, 0x239eea, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xa500, 1) , (unique, 0xb100, 1), (unique, 0xb100, 1) LOAD (const, 0x1b1, 4) , (register, 0x38, 8), (unique, 0xa500, 1) LOAD (const, 0x1b1, 4) , (register, 0x30, 8)]
[ ---  CBRANCH (ram, 0x23a028, 1) , (register, 0x206, 1), (register, 0x206, 1) MULTIEQUAL (register, 0x206, 1) , (register, 0x206, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x41f, 4)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x41f, 4)]
[(ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x41f, 4)]
[(ram, 0x4eaf20, 8) INDIRECT (ram, 0x4eaf20, 8) , (const, 0x41f, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x41f, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x41f, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x41f, 4)]
[(stack, 0xffffffffffffff58, 16) INDIRECT (stack, 0xffffffffffffff58, 16) , (const, 0x41f, 4)]
[(stack, 0xffffffffffffff68, 16) INDIRECT (stack, 0xffffffffffffff68, 16) , (const, 0x41f, 4)]
[(stack, 0xffffffffffffff78, 16) INDIRECT (stack, 0xffffffffffffff78, 16) , (const, 0x41f, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x41f, 4)]
[(register, 0x0, 4) CALL (ram, 0x23ced0, 8) , (unique, 0x10000679, 8) , (register, 0x88, 8) , (const, 0x0, 8) , (const, 0x0, 8), (unique, 0x10000679, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb0, 8) , (const, 0x2, 8) , (const, 0x1, 8)]
[(register, 0x8, 8) COPY (const, 0x2, 8)]
[(unique, 0x100004ee, 8) COPY (register, 0x30, 8), (register, 0x30, 8) PTRSUB (const, 0x0, 8) , (const, 0x2b6b61, 8)]
[(unique, 0x10000546, 8) COPY (register, 0xb0, 8)]
[(register, 0x206, 1) MULTIEQUAL (register, 0x206, 1) , (register, 0x206, 1)]
[(register, 0x38, 8) MULTIEQUAL (unique, 0x10000546, 8) , (unique, 0x1000054e, 8)]
[(register, 0x30, 8) MULTIEQUAL (unique, 0x100004ee, 8) , (unique, 0x100004f6, 8)]
[ ---  CBRANCH (ram, 0x239f03, 1) , (unique, 0xd600, 1), (unique, 0xd600, 1) INT_EQUAL (register, 0x8, 8) , (const, 0x0, 8), (register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8)]
[(register, 0x8, 8) INT_ADD (register, 0x8, 8) , (const, 0xffffffffffffffff, 8)]
[(unique, 0x100004f6, 8) COPY (register, 0x30, 8), (register, 0x30, 8) PTRADD (register, 0x30, 8) , (unique, 0x10000374, 8) , (const, 0x1, 8), (unique, 0x10000374, 8) INT_ADD (unique, 0x10000163, 8) , (const, 0x1, 8), (unique, 0x10000163, 8) INT_MULT (unique, 0xa380, 8) , (const, 0xfffffffffffffffe, 8), (unique, 0xa380, 8) INT_ZEXT (register, 0x20a, 1)]
[(unique, 0x1000054e, 8) COPY (register, 0x38, 8), (register, 0x38, 8) PTRADD (register, 0x38, 8) , (unique, 0x1000036c, 8) , (const, 0x1, 8), (unique, 0x1000036c, 8) INT_ADD (unique, 0x1000015b, 8) , (const, 0x1, 8), (unique, 0x1000015b, 8) INT_MULT (unique, 0xaf80, 8) , (const, 0xfffffffffffffffe, 8), (unique, 0xaf80, 8) INT_ZEXT (register, 0x20a, 1)]
[ ---  CBRANCH (ram, 0x239f01, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xa500, 1) , (unique, 0xb100, 1), (unique, 0xb100, 1) LOAD (const, 0x1b1, 4) , (register, 0x38, 8), (unique, 0xa500, 1) LOAD (const, 0x1b1, 4) , (register, 0x30, 8)]
[ ---  CBRANCH (ram, 0x23a167, 1) , (register, 0x206, 1), (register, 0x206, 1) MULTIEQUAL (register, 0x206, 1) , (register, 0x206, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x3eb, 4)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x3eb, 4)]
[(ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x3eb, 4)]
[(ram, 0x4eaf20, 8) INDIRECT (ram, 0x4eaf20, 8) , (const, 0x3eb, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x3eb, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x3eb, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x3eb, 4)]
[(stack, 0xffffffffffffff58, 16) INDIRECT (stack, 0xffffffffffffff58, 16) , (const, 0x3eb, 4)]
[(stack, 0xffffffffffffff68, 16) INDIRECT (stack, 0xffffffffffffff68, 16) , (const, 0x3eb, 4)]
[(stack, 0xffffffffffffff78, 16) INDIRECT (stack, 0xffffffffffffff78, 16) , (const, 0x3eb, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x3eb, 4)]
[(register, 0x0, 4) INT_2COMP (register, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x23ced0, 8) , (unique, 0x10000681, 8) , (register, 0x88, 8) , (const, 0x0, 8) , (const, 0x0, 8), (unique, 0x10000681, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb0, 8) , (const, 0x2, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x239fc0, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (const, 0x0, 4) , (register, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x23ced0, 8) , (unique, 0x10000681, 8) , (register, 0x88, 8) , (const, 0x0, 8) , (const, 0x0, 8), (unique, 0x10000681, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb0, 8) , (const, 0x2, 8) , (const, 0x1, 8)]
[(register, 0x200, 1) INT_LESS (unique, 0xbb00, 1) , (const, 0x2d, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0xb0, 8)]
[ ---  CBRANCH (ram, 0x23a190, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x2d, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0xb0, 8)]
[(register, 0xb0, 8) PTRADD (register, 0xb0, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[(register, 0xb8, 4) COPY (const, 0xffffffff, 4)]
[ ---  BRANCH (ram, 0x239f38, 1)]
[(register, 0x8, 8) COPY (const, 0x2, 8)]
[(register, 0xb8, 4) COPY (const, 0x1, 4)]
[(unique, 0x100004ce, 8) COPY (register, 0x30, 8), (register, 0x30, 8) PTRSUB (const, 0x0, 8) , (const, 0x2b5727, 8)]
[(unique, 0x10000526, 8) COPY (register, 0xb0, 8)]
[(register, 0x206, 1) MULTIEQUAL (register, 0x206, 1) , (register, 0x206, 1)]
[(register, 0x200, 1) MULTIEQUAL (register, 0x200, 1) , (register, 0x200, 1)]
[(register, 0x38, 8) MULTIEQUAL (unique, 0x10000526, 8) , (unique, 0x1000052e, 8)]
[(register, 0x30, 8) MULTIEQUAL (unique, 0x100004ce, 8) , (unique, 0x100004d6, 8)]
[ ---  CBRANCH (ram, 0x239f2a, 1) , (unique, 0xd600, 1), (unique, 0xd600, 1) INT_EQUAL (register, 0x8, 8) , (const, 0x0, 8), (register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8)]
[(register, 0x8, 8) INT_ADD (register, 0x8, 8) , (const, 0xffffffffffffffff, 8)]
[(register, 0x200, 1) INT_LESS (unique, 0xa500, 1) , (unique, 0xb100, 1), (unique, 0xb100, 1) LOAD (const, 0x1b1, 4) , (register, 0x38, 8), (unique, 0xa500, 1) LOAD (const, 0x1b1, 4) , (register, 0x30, 8)]
[(unique, 0x100004d6, 8) COPY (register, 0x30, 8), (register, 0x30, 8) PTRADD (register, 0x30, 8) , (unique, 0x10000384, 8) , (const, 0x1, 8), (unique, 0x10000384, 8) INT_ADD (unique, 0x1000017d, 8) , (const, 0x1, 8), (unique, 0x1000017d, 8) INT_MULT (unique, 0xa380, 8) , (const, 0xfffffffffffffffe, 8), (unique, 0xa380, 8) INT_ZEXT (register, 0x20a, 1)]
[(unique, 0x1000052e, 8) COPY (register, 0x38, 8), (register, 0x38, 8) PTRADD (register, 0x38, 8) , (unique, 0x1000037c, 8) , (const, 0x1, 8), (unique, 0x1000037c, 8) INT_ADD (unique, 0x10000175, 8) , (const, 0x1, 8), (unique, 0x10000175, 8) INT_MULT (unique, 0xaf80, 8) , (const, 0xfffffffffffffffe, 8), (unique, 0xaf80, 8) INT_ZEXT (register, 0x20a, 1)]
[ ---  CBRANCH (ram, 0x239f28, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xa500, 1) , (unique, 0xb100, 1), (unique, 0xb100, 1) LOAD (const, 0x1b1, 4) , (register, 0x38, 8), (unique, 0xa500, 1) LOAD (const, 0x1b1, 4) , (register, 0x30, 8)]
[ ---  CBRANCH (ram, 0x23a19f, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xc900, 1) , (register, 0x200, 1), (unique, 0xc900, 1) BOOL_AND (unique, 0x10000186, 1) , (unique, 0x10000187, 1), (unique, 0x10000187, 1) BOOL_NEGATE (register, 0x206, 1), (unique, 0x10000186, 1) BOOL_NEGATE (register, 0x200, 1), (register, 0x200, 1) MULTIEQUAL (register, 0x200, 1) , (register, 0x200, 1), (register, 0x206, 1) MULTIEQUAL (register, 0x206, 1) , (register, 0x206, 1)]
[(unique, 0x100002c2, 1) COPY (const, 0x1, 1)]
[ ---  BRANCH (ram, 0x239fc6, 1)]
[(register, 0xb8, 4) MULTIEQUAL (register, 0xb8, 4) , (register, 0xb8, 4)]
[(register, 0xb0, 8) MULTIEQUAL (register, 0xb0, 8) , (register, 0xb0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x260, 4)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x260, 4)]
[(ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x260, 4)]
[(ram, 0x4eaf20, 8) INDIRECT (ram, 0x4eaf20, 8) , (const, 0x260, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x260, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x260, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x260, 4)]
[(stack, 0xffffffffffffff58, 16) INDIRECT (stack, 0xffffffffffffff58, 16) , (const, 0x260, 4)]
[(stack, 0xffffffffffffff68, 16) INDIRECT (stack, 0xffffffffffffff68, 16) , (const, 0x260, 4)]
[(stack, 0xffffffffffffff78, 16) INDIRECT (stack, 0xffffffffffffff78, 16) , (const, 0x260, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x260, 4)]
[ ---  CBRANCH (ram, 0x239f77, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x23e360, 8) , (register, 0x30, 8) , (register, 0x10, 4) , (unique, 0x3c80, 8) , (const, 0x2e, 4) , (const, 0x0, 8) , (const, 0x0, 4) , (const, 0x1, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x276, 4)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x276, 4)]
[(ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x276, 4)]
[(ram, 0x4eaf20, 8) INDIRECT (ram, 0x4eaf20, 8) , (const, 0x276, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x276, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x276, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x276, 4)]
[(stack, 0xffffffffffffff58, 16) INDIRECT (stack, 0xffffffffffffff58, 16) , (const, 0x276, 4)]
[(stack, 0xffffffffffffff68, 16) INDIRECT (stack, 0xffffffffffffff68, 16) , (const, 0x276, 4)]
[(stack, 0xffffffffffffff78, 16) INDIRECT (stack, 0xffffffffffffff78, 16) , (const, 0x276, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x276, 4)]
[ ---  CBRANCH (ram, 0x23a03d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x121200, 8) , (unique, 0x3c80, 8) , (unique, 0x10000689, 8), (unique, 0x10000689, 8) CAST (register, 0xb0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x2a5, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x2a5, 4), (register, 0x20a, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1)]
[(ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x2a5, 4), (ram, 0x4eae00, 8) MULTIEQUAL (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8)]
[(ram, 0x4eaf20, 8) INDIRECT (ram, 0x4eaf20, 8) , (const, 0x2a5, 4), (ram, 0x4eaf20, 8) MULTIEQUAL (ram, 0x4eaf20, 8) , (ram, 0x4eaf20, 8)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x2a5, 4), (stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x2a5, 4), (stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff58, 16) INDIRECT (stack, 0xffffffffffffff58, 16) , (const, 0x2a5, 4), (stack, 0xffffffffffffff58, 16) INT_LEFT (unique, 0x100002da, 16) , (const, 0x20, 4), (unique, 0x100002da, 16) INT_ZEXT (unique, 0xbc00, 2), (unique, 0xbc00, 2) LOAD (const, 0x1b1, 4) , (unique, 0x1000039c, 8), (unique, 0x1000039c, 8) PTRSUB (register, 0x30, 8) , (const, 0x0, 8)]
[(stack, 0xffffffffffffff68, 16) INDIRECT (stack, 0xffffffffffffff68, 16) , (const, 0x2a5, 4), (stack, 0xffffffffffffff68, 16) COPY (const, 0x0, 16)]
[(stack, 0xffffffffffffff78, 16) INDIRECT (stack, 0xffffffffffffff78, 16) , (const, 0x2a5, 4), (stack, 0xffffffffffffff78, 16) COPY (const, 0x0, 16)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2a5, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(unique, 0x10000456, 8) COPY (stack, 0xffffffffffffff50, 8), (stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x2a5, 4), (stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[ ---  CBRANCH (ram, 0x23a1a9, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x207bc0, 8) , (unique, 0x10000699, 8) , (const, 0x0, 8) , (unique, 0x3800, 8) , (unique, 0x3800, 8), (unique, 0x10000699, 8) CAST (register, 0xb0, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff50, 8), (unique, 0x3800, 8) CAST (unique, 0x10000691, 8), (unique, 0x10000691, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff58, 8)]
[ ---  CBRANCH (ram, 0x23a228, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffff50, 8) , (const, 0x0, 8)]
[(register, 0x80, 4) INT_ZEXT (unique, 0xbc00, 2), (unique, 0xbc00, 2) LOAD (const, 0x1b1, 4) , (unique, 0x100003a4, 8), (unique, 0x100003a4, 8) PTRSUB (register, 0x30, 8) , (const, 0x0, 8)]
[(unique, 0x100005c6, 8) COPY (stack, 0xffffffffffffff50, 8)]
[ ---  BRANCH (ram, 0x23a1d9, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff78, 16) MULTIEQUAL (stack, 0xffffffffffffff78, 16) , (stack, 0xffffffffffffff78, 16)]
[(stack, 0xffffffffffffff68, 16) MULTIEQUAL (stack, 0xffffffffffffff68, 16) , (stack, 0xffffffffffffff68, 16)]
[(stack, 0xffffffffffffff58, 16) MULTIEQUAL (stack, 0xffffffffffffff58, 16) , (stack, 0xffffffffffffff58, 16)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(ram, 0x4eaf20, 8) MULTIEQUAL (ram, 0x4eaf20, 8) , (ram, 0x4eaf20, 8)]
[(ram, 0x4eae00, 8) MULTIEQUAL (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8)]
[(register, 0x20a, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x23a1d0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (register, 0x80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0xb8, 8) , (const, 0x4, 8), (register, 0xb8, 8) MULTIEQUAL (unique, 0x100005c6, 8) , (unique, 0xbd80, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x373, 4)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x373, 4)]
[(ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x373, 4)]
[(ram, 0x4eaf20, 8) INDIRECT (ram, 0x4eaf20, 8) , (const, 0x373, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x373, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x373, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x373, 4)]
[(stack, 0xffffffffffffff58, 16) INDIRECT (stack, 0xffffffffffffff58, 16) , (const, 0x373, 4)]
[(stack, 0xffffffffffffff68, 16) INDIRECT (stack, 0xffffffffffffff68, 16) , (const, 0x373, 4)]
[(stack, 0xffffffffffffff78, 16) INDIRECT (stack, 0xffffffffffffff78, 16) , (const, 0x373, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x373, 4)]
[(unique, 0x100005d4, 4) COPY (register, 0xb8, 4)]
[ ---  CBRANCH (ram, 0x23a1d0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x121220, 8) , (unique, 0xbd80, 8) , (register, 0x30, 8) , (register, 0x10, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0xb8, 8) , (const, 0x18, 8), (register, 0x10, 8) INT_ZEXT (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0xb8, 8) , (const, 0x10, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff78, 16) MULTIEQUAL (stack, 0xffffffffffffff78, 16) , (stack, 0xffffffffffffff78, 16)]
[(stack, 0xffffffffffffff68, 16) MULTIEQUAL (stack, 0xffffffffffffff68, 16) , (stack, 0xffffffffffffff68, 16)]
[(stack, 0xffffffffffffff58, 16) MULTIEQUAL (stack, 0xffffffffffffff58, 16) , (stack, 0xffffffffffffff58, 16)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(ram, 0x4eaf20, 8) MULTIEQUAL (ram, 0x4eaf20, 8) , (ram, 0x4eaf20, 8)]
[(ram, 0x4eae00, 8) MULTIEQUAL (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8)]
[(register, 0x20a, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x100005d0, 4) COPY (register, 0x0, 4)]
[ ---  CBRANCH (ram, 0x23a1ff, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0xb8, 8) , (const, 0x28, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x38b, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x38b, 4), (register, 0x20a, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1)]
[(ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x38b, 4), (ram, 0x4eae00, 8) MULTIEQUAL (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8)]
[(ram, 0x4eaf20, 8) INDIRECT (ram, 0x4eaf20, 8) , (const, 0x38b, 4), (ram, 0x4eaf20, 8) MULTIEQUAL (ram, 0x4eaf20, 8) , (ram, 0x4eaf20, 8)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x38b, 4), (stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x38b, 4), (stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x38b, 4), (stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff58, 16) INDIRECT (stack, 0xffffffffffffff58, 16) , (const, 0x38b, 4), (stack, 0xffffffffffffff58, 16) MULTIEQUAL (stack, 0xffffffffffffff58, 16) , (stack, 0xffffffffffffff58, 16)]
[(stack, 0xffffffffffffff68, 16) INDIRECT (stack, 0xffffffffffffff68, 16) , (const, 0x38b, 4), (stack, 0xffffffffffffff68, 16) MULTIEQUAL (stack, 0xffffffffffffff68, 16) , (stack, 0xffffffffffffff68, 16)]
[(stack, 0xffffffffffffff78, 16) INDIRECT (stack, 0xffffffffffffff78, 16) , (const, 0x38b, 4), (stack, 0xffffffffffffff78, 16) MULTIEQUAL (stack, 0xffffffffffffff78, 16) , (stack, 0xffffffffffffff78, 16)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x38b, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CALL (ram, 0x208880, 8) , (unique, 0x10000456, 8)]
[(unique, 0x100005f0, 4) COPY (stack, 0xffffffffffffff30, 4), (stack, 0xffffffffffffff30, 4) MULTIEQUAL (unique, 0x100005d0, 4) , (unique, 0x100005d4, 4)]
[(unique, 0x100003cd, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x100003d5, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1) , (register, 0x20a, 1)]
[(unique, 0x100003da, 8) MULTIEQUAL (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8)]
[(unique, 0x100003e2, 8) MULTIEQUAL (ram, 0x4eaf20, 8) , (ram, 0x4eaf20, 8) , (ram, 0x4eaf20, 8)]
[(unique, 0x100003ea, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(unique, 0x100003f2, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(unique, 0x100003fa, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(unique, 0x10000402, 16) MULTIEQUAL (stack, 0xffffffffffffff58, 16) , (stack, 0xffffffffffffff58, 16) , (stack, 0xffffffffffffff58, 16)]
[(unique, 0x10000412, 16) MULTIEQUAL (stack, 0xffffffffffffff68, 16) , (stack, 0xffffffffffffff68, 16) , (stack, 0xffffffffffffff68, 16)]
[(unique, 0x10000422, 16) MULTIEQUAL (stack, 0xffffffffffffff78, 16) , (stack, 0xffffffffffffff78, 16) , (stack, 0xffffffffffffff78, 16)]
[(unique, 0x10000432, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CBRANCH (ram, 0x239fc0, 1) , (unique, 0x100003cc, 1), (unique, 0x100003cc, 1) INT_SLESS (unique, 0x100003d6, 4) , (const, 0x0, 4), (unique, 0x100003d6, 4) MULTIEQUAL (unique, 0x100005f0, 4) , (register, 0xb8, 4) , (register, 0x0, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x3b5, 4)]
[(register, 0x20a, 1) INDIRECT (register, 0x20a, 1) , (const, 0x3b5, 4)]
[(ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x3b5, 4)]
[(ram, 0x4eaf20, 8) INDIRECT (ram, 0x4eaf20, 8) , (const, 0x3b5, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x3b5, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x3b5, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x3b5, 4)]
[(stack, 0xffffffffffffff58, 16) INDIRECT (stack, 0xffffffffffffff58, 16) , (const, 0x3b5, 4)]
[(stack, 0xffffffffffffff68, 16) INDIRECT (stack, 0xffffffffffffff68, 16) , (const, 0x3b5, 4)]
[(stack, 0xffffffffffffff78, 16) INDIRECT (stack, 0xffffffffffffff78, 16) , (const, 0x3b5, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x3b5, 4)]
[ ---  CALL (ram, 0x208880, 8) , (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x239fb9, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff78, 16) MULTIEQUAL (stack, 0xffffffffffffff78, 16) , (stack, 0xffffffffffffff78, 16)]
[(stack, 0xffffffffffffff68, 16) MULTIEQUAL (stack, 0xffffffffffffff68, 16) , (stack, 0xffffffffffffff68, 16)]
[(stack, 0xffffffffffffff58, 16) MULTIEQUAL (stack, 0xffffffffffffff58, 16) , (stack, 0xffffffffffffff58, 16)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(ram, 0x4eaf20, 8) MULTIEQUAL (ram, 0x4eaf20, 8) , (ram, 0x4eaf20, 8)]
[(ram, 0x4eae00, 8) MULTIEQUAL (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8)]
[(register, 0x20a, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb8, 4) COPY (const, 0x0, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (unique, 0x10000432, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff78, 16) MULTIEQUAL (stack, 0xffffffffffffff78, 16) , (unique, 0x10000422, 16) , (stack, 0xffffffffffffff78, 16)]
[(stack, 0xffffffffffffff68, 16) MULTIEQUAL (stack, 0xffffffffffffff68, 16) , (unique, 0x10000412, 16) , (stack, 0xffffffffffffff68, 16)]
[(stack, 0xffffffffffffff58, 16) MULTIEQUAL (stack, 0xffffffffffffff58, 16) , (unique, 0x10000402, 16) , (stack, 0xffffffffffffff58, 16)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (unique, 0x100003fa, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (unique, 0x100003f2, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (unique, 0x100003ea, 8) , (stack, 0xffffffffffffff40, 8)]
[(ram, 0x4eaf20, 8) MULTIEQUAL (ram, 0x4eaf20, 8) , (unique, 0x100003e2, 8) , (ram, 0x4eaf20, 8)]
[(ram, 0x4eae00, 8) MULTIEQUAL (ram, 0x4eae00, 8) , (unique, 0x100003da, 8) , (ram, 0x4eae00, 8)]
[(register, 0x20a, 1) MULTIEQUAL (register, 0x20a, 1) , (unique, 0x100003d5, 1) , (register, 0x20a, 1)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (unique, 0x100003cd, 8) , (register, 0x110, 8)]
[(unique, 0xd080, 1) INT_SLESS (const, 0x0, 4) , (register, 0xb8, 4), (register, 0xb8, 4) MULTIEQUAL (register, 0xb8, 4) , (unique, 0x100003d6, 4) , (register, 0x0, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff78, 16) MULTIEQUAL (stack, 0xffffffffffffff78, 16) , (stack, 0xffffffffffffff78, 16)]
[(stack, 0xffffffffffffff68, 16) MULTIEQUAL (stack, 0xffffffffffffff68, 16) , (stack, 0xffffffffffffff68, 16)]
[(stack, 0xffffffffffffff58, 16) MULTIEQUAL (stack, 0xffffffffffffff58, 16) , (stack, 0xffffffffffffff58, 16)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(ram, 0x4eaf20, 8) MULTIEQUAL (ram, 0x4eaf20, 8) , (ram, 0x4eaf20, 8)]
[(ram, 0x4eae00, 8) MULTIEQUAL (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8)]
[(register, 0x20a, 1) MULTIEQUAL (register, 0x20a, 1) , (register, 0x20a, 1)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x100002c0, 1) MULTIEQUAL (unique, 0xd080, 1) , (unique, 0x100002c2, 1)]
[ ---  CBRANCH (ram, 0x239fd3, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (const, 0x0, 4) , (unique, 0x100006a1, 4), (unique, 0x100006a1, 4) CAST (register, 0xa8, 4)]
[ ---  CBRANCH (ram, 0x23a21c, 1) , (unique, 0x100002c0, 1)]
[(register, 0x18, 8) COPY (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x239fee, 1)]
[ ---  CBRANCH (ram, 0x239d90, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (unique, 0x100006a5, 4) , (const, 0x0, 4), (unique, 0x100006a5, 4) CAST (register, 0xa8, 4)]
[ ---  CBRANCH (ram, 0x239d90, 1) , (unique, 0x100002c0, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (unique, 0x10000432, 8)]
[(stack, 0xffffffffffffff78, 16) MULTIEQUAL (stack, 0xffffffffffffff78, 16) , (stack, 0xffffffffffffff78, 16) , (stack, 0xffffffffffffff78, 16) , (unique, 0x10000422, 16)]
[(stack, 0xffffffffffffff68, 16) MULTIEQUAL (stack, 0xffffffffffffff68, 16) , (stack, 0xffffffffffffff68, 16) , (stack, 0xffffffffffffff68, 16) , (unique, 0x10000412, 16)]
[(stack, 0xffffffffffffff58, 16) MULTIEQUAL (stack, 0xffffffffffffff58, 16) , (stack, 0xffffffffffffff58, 16) , (stack, 0xffffffffffffff58, 16) , (unique, 0x10000402, 16)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (unique, 0x100003f2, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (unique, 0x100003ea, 8)]
[(ram, 0x4eaf20, 8) MULTIEQUAL (ram, 0x4eaf20, 8) , (ram, 0x4eaf20, 8) , (ram, 0x4eaf20, 8) , (unique, 0x100003e2, 8)]
[(ram, 0x4eae00, 8) MULTIEQUAL (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8) , (unique, 0x100003da, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (unique, 0x100003cd, 8)]
[(register, 0x18, 8) COPY (const, 0xffffffff, 8)]
[(ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x2fd, 4), (ram, 0x4eae00, 8) MULTIEQUAL (ram, 0x4eae00, 8) , (ram, 0x4eae00, 8) , (unique, 0x100002f3, 8)]
[(ram, 0x4eaf20, 8) INDIRECT (ram, 0x4eaf20, 8) , (const, 0x2fd, 4), (ram, 0x4eaf20, 8) MULTIEQUAL (ram, 0x4eaf20, 8) , (ram, 0x4eaf20, 8) , (unique, 0x100002fb, 8)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x2fd, 4), (stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x2fd, 4), (stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff58, 16) INDIRECT (stack, 0xffffffffffffff58, 16) , (const, 0x2fd, 4), (stack, 0xffffffffffffff58, 16) MULTIEQUAL (stack, 0xffffffffffffff58, 16) , (stack, 0xffffffffffffff58, 16) , (stack, 0xffffffffffffff58, 16)]
[(stack, 0xffffffffffffff68, 16) INDIRECT (stack, 0xffffffffffffff68, 16) , (const, 0x2fd, 4), (stack, 0xffffffffffffff68, 16) MULTIEQUAL (stack, 0xffffffffffffff68, 16) , (stack, 0xffffffffffffff68, 16) , (stack, 0xffffffffffffff68, 16)]
[(stack, 0xffffffffffffff78, 16) INDIRECT (stack, 0xffffffffffffff78, 16) , (const, 0x2fd, 4), (stack, 0xffffffffffffff78, 16) MULTIEQUAL (stack, 0xffffffffffffff78, 16) , (stack, 0xffffffffffffff78, 16) , (stack, 0xffffffffffffff78, 16)]
[ ---  CALL (ram, 0x1212c8, 8) , (stack, 0xffffffffffffff40, 8), (stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(register, 0x0, 8) COPY (register, 0x18, 8), (register, 0x18, 8) MULTIEQUAL (register, 0x18, 8) , (register, 0x18, 8) , (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x23a234, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffffc0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x100006a9, 8), (unique, 0x100006a9, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2fd, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x2fd, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x32a, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x32a, 4)]
[(stack, 0xffffffffffffff58, 16) INDIRECT (stack, 0xffffffffffffff58, 16) , (const, 0x32a, 4)]
[(stack, 0xffffffffffffff68, 16) INDIRECT (stack, 0xffffffffffffff68, 16) , (const, 0x32a, 4)]
[(stack, 0xffffffffffffff78, 16) INDIRECT (stack, 0xffffffffffffff78, 16) , (const, 0x32a, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x32a, 4)]
[ ---  CALL (ram, 0x234c80, 8)]
[(ram, 0x4eae00, 8) COPY (ram, 0x4eae00, 8), (ram, 0x4eae00, 8) INDIRECT (ram, 0x4eae00, 8) , (const, 0x32a, 4)]
[(ram, 0x4eaf20, 8) COPY (ram, 0x4eaf20, 8), (ram, 0x4eaf20, 8) INDIRECT (ram, 0x4eaf20, 8) , (const, 0x32a, 4)]
[ ---  RETURN (const, 0x1, 4)]
[(ram, 0x4eae00, 8) COPY (ram, 0x4eae00, 8)]
[(ram, 0x4eaf20, 8) COPY (ram, 0x4eaf20, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8)]
