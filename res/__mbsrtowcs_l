[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10000329, 8), (unique, 0x10000329, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8)]
[(stack, 0xfffffffffffffea0, 4) COPY (const, 0x1, 4)]
[(stack, 0xfffffffffffffe98, 8) COPY (const, 0x1, 8)]
[(unique, 0x10000309, 8) COPY (register, 0x8, 8)]
[ ---  CBRANCH (ram, 0x454678, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x10000339, 8) , (const, 0x0, 8), (unique, 0x10000339, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000331, 8), (unique, 0x10000331, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x28, 8) , (const, 0x1, 8), (unique, 0xbd80, 8) CAST (unique, 0x10000321, 8), (unique, 0x10000321, 8) LOAD (const, 0x1b1, 4) , (register, 0x80, 8)]
[(register, 0x0, 8) PTRSUB (const, 0x0, 8) , (const, 0x4c2820, 8)]
[ ---  CBRANCH (ram, 0x4543eb, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (unique, 0x10000271, 8), (unique, 0x10000271, 8) PTRSUB (const, 0x0, 8) , (const, 0x4c28c0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x338, 4)]
[(stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x338, 4)]
[(stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x338, 4)]
[(stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x338, 4)]
[(stack, 0xfffffffffffffea8, 8) INDIRECT (unique, 0x10000309, 8) , (const, 0x338, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x338, 4)]
[ ---  CALL (ram, 0x453d50, 8) , (unique, 0xbd80, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000341, 8), (unique, 0x10000341, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x28, 8) , (const, 0x1, 8)]
[ ---  BRANCH (ram, 0x4543eb, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffea8, 8) MULTIEQUAL (unique, 0x10000309, 8) , (unique, 0x10000309, 8) , (stack, 0xfffffffffffffea8, 8)]
[(stack, 0xfffffffffffffea0, 4) MULTIEQUAL (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4)]
[(stack, 0xfffffffffffffe98, 8) MULTIEQUAL (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8)]
[(stack, 0xfffffffffffffe80, 8) MULTIEQUAL (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0xbd80, 8) CAST (unique, 0x10000351, 8), (unique, 0x10000351, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x5, 8) , (const, 0x8, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000349, 8), (unique, 0x10000349, 8) CAST (register, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0xbd80, 8) , (register, 0x0, 8) , (unique, 0xbd80, 8)]
[ ---  CBRANCH (ram, 0x454406, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbe00, 8) , (const, 0x0, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000349, 8), (unique, 0x10000349, 8) CAST (register, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0xbd80, 8) , (register, 0x0, 8) , (unique, 0xbd80, 8)]
[(register, 0x18, 8) CAST (unique, 0x10000371, 8), (unique, 0x10000371, 8) INT_XOR (register, 0x18, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10000369, 8), (unique, 0x10000369, 8) INT_ADD (register, 0x110, 8) , (const, 0x30, 8), (register, 0x18, 8) INT_OR (unique, 0x4ff00, 8) , (unique, 0x50000, 8), (unique, 0x50000, 8) INT_LEFT (unique, 0x10000361, 8) , (const, 0x2f, 4), (unique, 0x10000361, 8) CAST (unique, 0xbd80, 8), (unique, 0x4ff00, 8) INT_RIGHT (unique, 0x10000359, 8) , (const, 0x11, 4), (unique, 0x10000359, 8) CAST (unique, 0xbd80, 8)]
[(register, 0x18, 8) MULTIEQUAL (unique, 0xbd80, 8) , (register, 0x18, 8)]
[(unique, 0x10000319, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x30, 8)]
[ ---  CBRANCH (ram, 0x4545a0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x38, 8) , (const, 0x0, 8)]
[(unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffeb8, 8)]
[(unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffe70, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x26e, 4)]
[(stack, 0xfffffffffffffe78, 8) INDIRECT (unique, 0x10000319, 8) , (const, 0x26e, 4)]
[(stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x26e, 4)]
[(stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x26e, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x26e, 4)]
[(unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffe78, 8)]
[(unique, 0x3a00, 8) INT_ADD (unique, 0x3880, 8) , (register, 0x0, 8), (unique, 0x3880, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x1, 8), (register, 0x0, 8) CALL (ram, 0x401190, 8) , (unique, 0xbd80, 8)]
[(register, 0xb8, 8) COPY (const, 0x0, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (stack, 0xfffffffffffffea8, 8), (stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x26e, 4)]
[(unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffe80, 8)]
[(unique, 0x3c80, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffb8, 8)]
[ ---  CALL (ram, 0x45a730, 8) , (register, 0x18, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x2bd, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x2a1, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0x2bd, 4), (stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0x2a1, 4), (stack, 0xfffffffffffffe78, 8) MULTIEQUAL (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8)]
[(stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x2bd, 4), (stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x2a1, 4), (stack, 0xfffffffffffffe80, 8) MULTIEQUAL (unique, 0xbd80, 8) , (stack, 0xfffffffffffffe80, 8)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x2bd, 4), (stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x2a1, 4), (stack, 0xfffffffffffffe90, 8) MULTIEQUAL (unique, 0x3c80, 8) , (stack, 0xfffffffffffffe90, 8)]
[(stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x2bd, 4), (stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x2a1, 4), (stack, 0xfffffffffffffe98, 8) MULTIEQUAL (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8)]
[(stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x2bd, 4), (stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x2a1, 4), (stack, 0xfffffffffffffea0, 4) MULTIEQUAL (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4)]
[(stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x2bd, 4), (stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x2a1, 4), (stack, 0xfffffffffffffea8, 8) MULTIEQUAL (unique, 0x3800, 8) , (stack, 0xfffffffffffffea8, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2bd, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2a1, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(register, 0xb8, 8) INT_ADD (register, 0xb8, 8) , (register, 0x10, 8), (register, 0x10, 8) INT_SRIGHT (unique, 0x10000381, 8) , (const, 0x2, 4), (unique, 0x10000381, 8) CAST (register, 0x10, 8), (register, 0x10, 8) PTRADD (stack, 0xfffffffffffffe88, 8) , (unique, 0x100001b3, 8) , (const, 0x1, 8), (unique, 0x100001b3, 8) INT_2COMP (unique, 0x10000379, 8), (unique, 0x10000379, 8) CAST (unique, 0x3800, 8), (stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x2bd, 4), (stack, 0xfffffffffffffe88, 8) INDIRECT (unique, 0x100002e9, 8) , (const, 0x2a1, 4), (unique, 0x100002e9, 8) COPY (unique, 0x3800, 8), (register, 0xb8, 8) MULTIEQUAL (register, 0xb8, 8) , (register, 0xb8, 8)]
[ ---  CBRANCH (ram, 0x4545f8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x5, 4), (register, 0x0, 4) SUBPIECE (register, 0x0, 8) , (const, 0x0, 4), (register, 0x0, 8) CALLIND (register, 0x18, 8) , (unique, 0xbd80, 8) , (stack, 0xfffffffffffffe50, 8) , (unique, 0x3800, 8) , (unique, 0x3a00, 8) , (const, 0x0, 8) , (unique, 0x3800, 8) , (const, 0x0, 8) , (const, 0x1, 8), (stack, 0xfffffffffffffe50, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffe88, 8)]
[ ---  CBRANCH (ram, 0x4544fc, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x100001bf, 8) , (const, 0x0, 8), (unique, 0x100001bf, 8) INT_AND (register, 0x0, 8) , (const, 0xfffffffb, 8)]
[ ---  CBRANCH (ram, 0x4544f8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000389, 8), (unique, 0x10000389, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (stack, 0xfffffffffffffe88, 8) , (const, 0xfffffffffffffffc, 8) , (const, 0x1, 8)]
[(stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0x323, 4)]
[(stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x323, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x323, 4)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x323, 4)]
[(stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x323, 4)]
[(stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x323, 4)]
[(stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x323, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x323, 4)]
[ ---  CALL (ram, 0x403170, 8) , (unique, 0x10000249, 8) , (unique, 0x10000229, 8) , (const, 0x5e, 4) , (unique, 0x10000259, 8), (unique, 0x10000259, 8) COPY (const, 0x49dcd8, 8), (unique, 0x10000249, 8) COPY (const, 0x49dca8, 8), (unique, 0x10000229, 8) COPY (const, 0x49dc8c, 8)]
[ ---  RETURN (const, 0x1, 4)]
[(unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffe70, 8)]
[(unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffe78, 8)]
[(unique, 0x3400, 8) PTRADD (register, 0x38, 8) , (unique, 0x3300, 8) , (const, 0x1, 8), (unique, 0x3300, 8) INT_MULT (register, 0x10, 8) , (const, 0x4, 8)]
[(unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffe88, 8)]
[(unique, 0x100002f1, 8) COPY (register, 0x38, 8)]
[ ---  CBRANCH (ram, 0x45446e, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x10, 8) , (const, 0x0, 8)]
[ ---  CALL (ram, 0x45a730, 8) , (register, 0x18, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x110, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xf6, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xee, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0x110, 4), (stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0xf6, 4), (stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0xee, 4), (stack, 0xfffffffffffffe78, 8) MULTIEQUAL (unique, 0x10000319, 8) , (stack, 0xfffffffffffffe78, 8)]
[(stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x110, 4), (stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0xf6, 4), (stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0xee, 4), (stack, 0xfffffffffffffe80, 8) MULTIEQUAL (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x110, 4), (stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0xf6, 4), (stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0xee, 4), (stack, 0xfffffffffffffe88, 8) MULTIEQUAL (unique, 0x100002f1, 8) , (stack, 0xfffffffffffffe88, 8)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x110, 4), (stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0xf6, 4), (stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0xee, 4), (stack, 0xfffffffffffffe90, 8) MULTIEQUAL (unique, 0x3400, 8) , (stack, 0xfffffffffffffe90, 8)]
[(stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x110, 4), (stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0xf6, 4), (stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0xee, 4), (stack, 0xfffffffffffffe98, 8) MULTIEQUAL (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8)]
[(stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x110, 4), (stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0xf6, 4), (stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0xee, 4), (stack, 0xfffffffffffffea0, 4) MULTIEQUAL (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4)]
[(stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x110, 4), (stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0xf6, 4), (stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0xee, 4), (stack, 0xfffffffffffffea8, 8) MULTIEQUAL (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x110, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xf6, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xee, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CBRANCH (ram, 0x454450, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x4, 4), (register, 0x0, 4) SUBPIECE (register, 0x0, 8) , (const, 0x0, 4), (register, 0x0, 8) CALLIND (register, 0x18, 8) , (unique, 0xbd80, 8) , (unique, 0x3800, 8) , (unique, 0x3800, 8) , (unique, 0x3a00, 8) , (const, 0x0, 8) , (unique, 0x3800, 8) , (const, 0x0, 8) , (const, 0x1, 8), (unique, 0x3a00, 8) INT_ADD (unique, 0x3880, 8) , (register, 0x0, 8), (unique, 0x3880, 8) INT_ADD (unique, 0x100002c9, 8) , (const, 0x1, 8), (register, 0x0, 8) CALL (ram, 0x401030, 8) , (stack, 0xfffffffffffffe78, 8), (unique, 0x100002c9, 8) COPY (stack, 0xfffffffffffffe78, 8), (stack, 0xfffffffffffffe78, 8) MULTIEQUAL (unique, 0x10000319, 8) , (stack, 0xfffffffffffffe78, 8)]
[ ---  CBRANCH (ram, 0x454450, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x7, 4)]
[ ---  CBRANCH (ram, 0x4544b4, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xfffffffffffffe78, 8) , (unique, 0x3a00, 8)]
[ ---  CBRANCH (ram, 0x4544b4, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) CAST (unique, 0x10000391, 8), (unique, 0x10000391, 8) INT_ADD (unique, 0x3a00, 8) , (const, 0xffffffffffffffff, 8)]
[ ---  CBRANCH (ram, 0x4544b4, 1) , (unique, 0x13280, 1), (unique, 0x13280, 1) INT_NOTEQUAL (register, 0x30, 8) , (const, 0x0, 8), (register, 0x30, 8) INT_SRIGHT (unique, 0x100003a1, 8) , (const, 0x2, 4), (unique, 0x100003a1, 8) CAST (register, 0x10, 8), (register, 0x10, 8) PTRADD (stack, 0xfffffffffffffe90, 8) , (unique, 0x100000c1, 8) , (const, 0x1, 8), (unique, 0x100000c1, 8) INT_2COMP (unique, 0x10000399, 8), (unique, 0x10000399, 8) CAST (stack, 0xfffffffffffffe88, 8)]
[(register, 0x10, 8) INT_SRIGHT (unique, 0x100003b1, 8) , (const, 0x2, 4), (unique, 0x100003b1, 8) CAST (register, 0x10, 8), (register, 0x10, 8) PTRADD (stack, 0xfffffffffffffe88, 8) , (unique, 0x10000101, 8) , (const, 0x1, 8), (unique, 0x10000101, 8) INT_2COMP (unique, 0x100003a9, 8), (unique, 0x100003a9, 8) CAST (register, 0x38, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x30, 8) , (stack, 0xfffffffffffffe78, 8)]
[ ---  CBRANCH (ram, 0x454550, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x10000109, 8) , (const, 0x0, 8), (unique, 0x10000109, 8) INT_AND (register, 0x0, 8) , (const, 0xfffffffb, 8)]
[ ---  CBRANCH (ram, 0x454510, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (const, 0x3, 4) , (register, 0x10, 4), (register, 0x10, 4) INT_SUB (register, 0x0, 4) , (const, 0x4, 4)]
[ ---  CBRANCH (ram, 0x4544fc, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100003b9, 8), (unique, 0x100003b9, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (stack, 0xfffffffffffffe88, 8) , (const, 0xfffffffffffffffc, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x4546b7, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x10, 8) , (const, 0x0, 8)]
[(stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0x202, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x202, 4)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x202, 4)]
[(stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x202, 4)]
[(stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x202, 4)]
[(stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x202, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x202, 4)]
[ ---  CALL (ram, 0x403170, 8) , (unique, 0x10000241, 8) , (unique, 0x10000231, 8) , (const, 0x8d, 4) , (unique, 0x10000261, 8), (unique, 0x10000261, 8) COPY (const, 0x49dcd8, 8), (unique, 0x10000241, 8) COPY (const, 0x49dc9a, 8), (unique, 0x10000231, 8) COPY (const, 0x49dc8c, 8)]
[ ---  RETURN (const, 0x1, 4)]
[ ---  CBRANCH (ram, 0x4546d6, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100003c1, 8), (unique, 0x100003c1, 8) CAST (stack, 0xfffffffffffffea8, 8)]
[(stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0x1f9, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x1f9, 4)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x1f9, 4)]
[(stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x1f9, 4)]
[(stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x1f9, 4)]
[(stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x1f9, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1f9, 4)]
[ ---  CALL (ram, 0x403170, 8) , (unique, 0x10000219, 8) , (unique, 0x10000239, 8) , (const, 0x8e, 4) , (unique, 0x10000269, 8), (unique, 0x10000269, 8) COPY (const, 0x49dcd8, 8), (unique, 0x10000239, 8) COPY (const, 0x49dc8c, 8), (unique, 0x10000219, 8) COPY (const, 0x49dbe0, 8)]
[ ---  RETURN (const, 0x1, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x30, 8) , (const, 0x0, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffea8, 8) MULTIEQUAL (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8)]
[(stack, 0xfffffffffffffea0, 4) MULTIEQUAL (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4)]
[(stack, 0xfffffffffffffe98, 8) MULTIEQUAL (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8)]
[(stack, 0xfffffffffffffe90, 8) MULTIEQUAL (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8)]
[(stack, 0xfffffffffffffe88, 8) MULTIEQUAL (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8)]
[(stack, 0xfffffffffffffe80, 8) MULTIEQUAL (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8)]
[(stack, 0xfffffffffffffe78, 8) MULTIEQUAL (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[(register, 0xb8, 8) INT_ADD (register, 0xb8, 8) , (const, 0xffffffffffffffff, 8), (register, 0xb8, 8) MULTIEQUAL (register, 0x10, 8) , (register, 0xb8, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffea8, 8) MULTIEQUAL (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8)]
[(stack, 0xfffffffffffffea0, 4) MULTIEQUAL (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4)]
[(stack, 0xfffffffffffffe98, 8) MULTIEQUAL (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8)]
[(stack, 0xfffffffffffffe90, 8) MULTIEQUAL (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8)]
[(stack, 0xfffffffffffffe88, 8) MULTIEQUAL (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8)]
[(stack, 0xfffffffffffffe80, 8) MULTIEQUAL (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8)]
[(stack, 0xfffffffffffffe78, 8) MULTIEQUAL (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb8, 8) MULTIEQUAL (register, 0x10, 8) , (register, 0xb8, 8) , (register, 0xb8, 8)]
[ ---  CBRANCH (ram, 0x45455d, 1) , (register, 0x206, 1), (register, 0x206, 1) BOOL_AND (unique, 0xc780, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x10000119, 4) , (const, 0x0, 4), (unique, 0xc780, 1) INT_LESS (const, 0x3, 4) , (register, 0x10, 4), (register, 0x10, 4) INT_SUB (unique, 0x10000119, 4) , (const, 0x4, 4), (unique, 0x10000119, 4) SUBPIECE (register, 0x0, 8) , (const, 0x0, 4), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8) , (register, 0x0, 8)]
[(stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0x1f0, 4), (stack, 0xfffffffffffffe78, 8) MULTIEQUAL (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8)]
[(stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x1f0, 4), (stack, 0xfffffffffffffe80, 8) MULTIEQUAL (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x1f0, 4), (stack, 0xfffffffffffffe88, 8) MULTIEQUAL (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x1f0, 4), (stack, 0xfffffffffffffe90, 8) MULTIEQUAL (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8)]
[(stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x1f0, 4), (stack, 0xfffffffffffffe98, 8) MULTIEQUAL (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8)]
[(stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0x1f0, 4), (stack, 0xfffffffffffffea0, 4) MULTIEQUAL (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4)]
[(stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x1f0, 4), (stack, 0xfffffffffffffea8, 8) MULTIEQUAL (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1f0, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CALL (ram, 0x403170, 8) , (unique, 0x10000211, 8) , (unique, 0x10000221, 8) , (const, 0x96, 4) , (unique, 0x10000251, 8), (unique, 0x10000251, 8) COPY (const, 0x49dcd8, 8), (unique, 0x10000221, 8) COPY (const, 0x49dc8c, 8), (unique, 0x10000211, 8) COPY (const, 0x49db10, 8)]
[ ---  RETURN (const, 0x1, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffea8, 8) MULTIEQUAL (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8)]
[(stack, 0xfffffffffffffea0, 4) MULTIEQUAL (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4)]
[(stack, 0xfffffffffffffe98, 8) MULTIEQUAL (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8)]
[(stack, 0xfffffffffffffe90, 8) MULTIEQUAL (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8)]
[(stack, 0xfffffffffffffe88, 8) MULTIEQUAL (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8)]
[(stack, 0xfffffffffffffe80, 8) MULTIEQUAL (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8)]
[(stack, 0xfffffffffffffe78, 8) MULTIEQUAL (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb8, 8) MULTIEQUAL (register, 0xb8, 8) , (register, 0x10, 8)]
[ ---  CBRANCH (ram, 0x454580, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (const, 0x7, 4) , (register, 0x0, 4), (register, 0x0, 4) SUBPIECE (register, 0x0, 8) , (const, 0x0, 4), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x454580, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_EQUAL (unique, 0x1d680, 8) , (const, 0x0, 8), (unique, 0x1d680, 8) INT_AND (unique, 0x1d600, 8) , (const, 0x1, 8), (unique, 0x1d600, 8) INT_RIGHT (const, 0xb1, 8) , (unique, 0x1d580, 8), (unique, 0x1d580, 8) INT_AND (register, 0x0, 8) , (const, 0x3f, 8)]
[(register, 0xb8, 8) COPY (const, 0xffffffffffffffff, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x4f00, 8) , (const, 0x54, 4), (unique, 0x4f00, 8) CAST (unique, 0x100003c9, 8), (unique, 0x100003c9, 8) INT_ADD (register, 0x110, 8) , (const, 0xffffffffffffffc0, 8)]
[ ---  BRANCH (ram, 0x454520, 1)]
[(register, 0xb8, 8) COPY (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x454520, 1)]
[(stack, 0xfffffffffffffea8, 8) MULTIEQUAL (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8)]
[(stack, 0xfffffffffffffea0, 4) MULTIEQUAL (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4) , (stack, 0xfffffffffffffea0, 4)]
[(stack, 0xfffffffffffffe98, 8) MULTIEQUAL (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8)]
[(stack, 0xfffffffffffffe90, 8) MULTIEQUAL (unique, 0x3400, 8) , (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8)]
[(stack, 0xfffffffffffffe88, 8) MULTIEQUAL (unique, 0x100002f1, 8) , (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8)]
[(stack, 0xfffffffffffffe80, 8) MULTIEQUAL (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8)]
[(stack, 0xfffffffffffffe78, 8) MULTIEQUAL (unique, 0x10000319, 8) , (stack, 0xfffffffffffffe78, 8) , (stack, 0xfffffffffffffe78, 8)]
[(register, 0xb8, 8) MULTIEQUAL (register, 0xb8, 8) , (register, 0xb8, 8) , (register, 0xb8, 8)]
[ ---  CBRANCH (ram, 0x4546b2, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffffc0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x100003d1, 8), (unique, 0x100003d1, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffe78, 8) INDIRECT (stack, 0xfffffffffffffe78, 8) , (const, 0xe8, 4)]
[(stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0xe8, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0xe8, 4)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0xe8, 4)]
[(stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0xe8, 4)]
[(stack, 0xfffffffffffffea0, 4) INDIRECT (stack, 0xfffffffffffffea0, 4) , (const, 0xe8, 4)]
[(stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0xe8, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xe8, 4)]
[ ---  CALL (ram, 0x458dd0, 8)]
[ ---  RETURN (const, 0x1, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) COPY (register, 0xb8, 8)]
