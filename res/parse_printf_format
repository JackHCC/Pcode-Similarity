[(ram, 0x4c4730, 8) INDIRECT (ram, 0x4c4730, 8) , (const, 0x23, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x23, 4), (stack, 0xffffffffffffff70, 8) COPY (const, 0x0, 8)]
[(stack, 0xffffffffffffff80, 4) INDIRECT (stack, 0xffffffffffffff80, 4) , (const, 0x23, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x23, 4)]
[(stack, 0xffffffffffffffa0, 4) INDIRECT (stack, 0xffffffffffffffa0, 4) , (const, 0x23, 4)]
[(stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0x23, 4)]
[(stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0x23, 4)]
[(stack, 0xffffffffffffffac, 4) INDIRECT (stack, 0xffffffffffffffac, 4) , (const, 0x23, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x23, 4)]
[ ---  CBRANCH (ram, 0x152dbd, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x195d30, 8) , (register, 0x38, 8) , (const, 0x25, 4)]
[(register, 0x0, 8) COPY (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x152dae, 1)]
[(unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff78, 8)]
[(register, 0xb8, 8) COPY (const, 0x0, 8)]
[(unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff70, 8)]
[(unique, 0x3100, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffb8, 8)]
[(unique, 0x100000d8, 8) COPY (register, 0x0, 8)]
[ ---  BRANCH (ram, 0x152d16, 1)]
[(ram, 0x4c4730, 8) INDIRECT (ram, 0x4c4730, 8) , (const, 0x48, 4), (ram, 0x4c4730, 8) MULTIEQUAL (ram, 0x4c4730, 8) , (ram, 0x4c4730, 8) , (ram, 0x4c4730, 8)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x48, 4), (stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff80, 4) INDIRECT (stack, 0xffffffffffffff80, 4) , (const, 0x48, 4), (stack, 0xffffffffffffff80, 4) MULTIEQUAL (stack, 0xffffffffffffff80, 4) , (stack, 0xffffffffffffff80, 4) , (stack, 0xffffffffffffff80, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x48, 4), (stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffffa0, 4) INDIRECT (stack, 0xffffffffffffffa0, 4) , (const, 0x48, 4), (stack, 0xffffffffffffffa0, 4) MULTIEQUAL (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4)]
[(stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0x48, 4), (stack, 0xffffffffffffffa8, 4) MULTIEQUAL (stack, 0xffffffffffffffa8, 4) , (stack, 0xffffffffffffffa8, 4) , (stack, 0xffffffffffffffa8, 4)]
[(stack, 0xffffffffffffffac, 4) INDIRECT (stack, 0xffffffffffffffac, 4) , (const, 0x48, 4), (stack, 0xffffffffffffffac, 4) MULTIEQUAL (stack, 0xffffffffffffffac, 4) , (stack, 0xffffffffffffffac, 4) , (stack, 0xffffffffffffffac, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x48, 4), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(register, 0x10, 8) INT_SEXT (stack, 0xffffffffffffffa4, 4), (stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0x48, 4), (stack, 0xffffffffffffffa4, 4) MULTIEQUAL (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4)]
[(register, 0xb8, 8) INT_ADD (register, 0xb8, 8) , (register, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x16c120, 8) , (register, 0x38, 8) , (register, 0xb8, 8) , (unique, 0x3800, 8) , (unique, 0x3800, 8), (register, 0x38, 8) MULTIEQUAL (unique, 0x100000d8, 8) , (unique, 0x100000e0, 8) , (unique, 0x100000e8, 8), (register, 0xb8, 8) MULTIEQUAL (register, 0xb8, 8) , (register, 0xb8, 8) , (register, 0xb8, 8)]
[ ---  CBRANCH (ram, 0x152d3e, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffffa4, 4) , (const, 0xffffffff, 4), (stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0x48, 4), (stack, 0xffffffffffffffa4, 4) MULTIEQUAL (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4)]
[ ---  CBRANCH (ram, 0x152d3e, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (unique, 0x100000f0, 8) , (register, 0x30, 8), (unique, 0x100000f0, 8) CAST (register, 0x10, 8)]
[(ram, 0x4c4730, 8) INDIRECT (ram, 0x4c4730, 8) , (const, 0x6d, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3400, 8) , (const, 0x0, 4), (unique, 0x3400, 8) CAST (unique, 0x100000f8, 8), (unique, 0x100000f8, 8) INT_ADD (register, 0x10, 8) , (unique, 0x3300, 8), (unique, 0x3300, 8) INT_MULT (register, 0x10, 8) , (const, 0x4, 8)]
[(ram, 0x4c4730, 8) MULTIEQUAL (ram, 0x4c4730, 8) , (ram, 0x4c4730, 8) , (ram, 0x4c4730, 8)]
[(register, 0x10, 8) INT_SEXT (stack, 0xffffffffffffffa0, 4)]
[ ---  CBRANCH (ram, 0x152d55, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffffa0, 4) , (const, 0xffffffff, 4)]
[ ---  CBRANCH (ram, 0x152d55, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (unique, 0x10000100, 8) , (register, 0x30, 8), (unique, 0x10000100, 8) CAST (register, 0x10, 8)]
[(ram, 0x4c4730, 8) INDIRECT (ram, 0x4c4730, 8) , (const, 0x89, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3400, 8) , (const, 0x0, 4), (unique, 0x3400, 8) CAST (unique, 0x10000108, 8), (unique, 0x10000108, 8) INT_ADD (register, 0x10, 8) , (unique, 0x3300, 8), (unique, 0x3300, 8) INT_MULT (register, 0x10, 8) , (const, 0x4, 8)]
[(ram, 0x4c4730, 8) MULTIEQUAL (ram, 0x4c4730, 8) , (ram, 0x4c4730, 8) , (ram, 0x4c4730, 8)]
[ ---  CBRANCH (ram, 0x152d08, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (register, 0x0, 8) , (register, 0x30, 8), (register, 0x0, 8) INT_SEXT (stack, 0xffffffffffffffa8, 4)]
[ ---  CBRANCH (ram, 0x152d08, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffffb0, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x152d00, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffffb0, 8) , (const, 0x1, 8)]
[(ram, 0x4c4730, 8) INDIRECT (ram, 0x4c4730, 8) , (const, 0x10c, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3400, 8) , (stack, 0xffffffffffffffac, 4), (unique, 0x3400, 8) CAST (unique, 0x10000110, 8), (unique, 0x10000110, 8) INT_ADD (register, 0x10, 8) , (unique, 0x3300, 8), (unique, 0x3300, 8) INT_MULT (register, 0x0, 8) , (const, 0x4, 8)]
[(ram, 0x4c4730, 8) MULTIEQUAL (ram, 0x4c4730, 8) , (ram, 0x4c4730, 8) , (ram, 0x4c4730, 8)]
[(unique, 0x100000e8, 8) COPY (stack, 0xffffffffffffff98, 8)]
[ ---  CBRANCH (ram, 0x152da0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (stack, 0xffffffffffffff98, 8)]
[(ram, 0x4c4730, 8) INDIRECT (ram, 0x4c4730, 8) , (const, 0xc7, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0xc7, 4)]
[(stack, 0xffffffffffffff80, 4) INDIRECT (stack, 0xffffffffffffff80, 4) , (const, 0xc7, 4)]
[(stack, 0xffffffffffffffa0, 4) INDIRECT (stack, 0xffffffffffffffa0, 4) , (const, 0xc7, 4)]
[(stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0xc7, 4)]
[(stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0xc7, 4)]
[(stack, 0xffffffffffffffac, 4) INDIRECT (stack, 0xffffffffffffffac, 4) , (const, 0xc7, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0xc7, 4)]
[ ---  CALLIND (unique, 0xbd80, 8) , (unique, 0x3800, 8) , (register, 0x30, 8) , (unique, 0x3400, 8) , (unique, 0x3100, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) CAST (unique, 0x10000118, 8), (unique, 0x10000118, 8) INT_ADD (ram, 0x4c4730, 8) , (unique, 0x3300, 8), (unique, 0x3300, 8) INT_MULT (register, 0x80, 8) , (const, 0x8, 8), (register, 0x30, 8) INT_SUB (register, 0x30, 8) , (register, 0x0, 8), (unique, 0x3400, 8) INT_ADD (register, 0x10, 8) , (unique, 0x3300, 8), (unique, 0x3300, 8) INT_MULT (register, 0x0, 8) , (const, 0x4, 8), (register, 0x80, 8) INT_SEXT (stack, 0xffffffffffffff80, 4)]
[(unique, 0x100000e0, 8) COPY (stack, 0xffffffffffffff98, 8), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0xc7, 4)]
[ ---  CBRANCH (ram, 0x152d16, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (stack, 0xffffffffffffff98, 8), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0xc7, 4)]
[(ram, 0x4c4730, 8) MULTIEQUAL (ram, 0x4c4730, 8) , (ram, 0x4c4730, 8)]
[(unique, 0x100000c8, 8) COPY (register, 0xb8, 8)]
[ ---  CBRANCH (ram, 0x152dae, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESSEQUAL (register, 0xb8, 8) , (stack, 0xffffffffffffff70, 8), (stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(unique, 0x100000d0, 8) COPY (stack, 0xffffffffffffff70, 8)]
[(ram, 0x4c4730, 8) COPY (ram, 0x4c4730, 8), (ram, 0x4c4730, 8) MULTIEQUAL (ram, 0x4c4730, 8) , (ram, 0x4c4730, 8) , (ram, 0x4c4730, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x100000c8, 8) , (unique, 0x100000d0, 8) , (register, 0x0, 8)]
