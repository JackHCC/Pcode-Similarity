[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffea8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x32, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x32, 4)]
[(stack, 0xfffffffffffffeaf, 1) INDIRECT (stack, 0xfffffffffffffeaf, 1) , (const, 0x32, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x32, 4)]
[(stack, 0xffffffffffffffb7, 1) INDIRECT (stack, 0xffffffffffffffb7, 1) , (const, 0x32, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x32, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x100001bc, 8), (unique, 0x100001bc, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8)]
[(unique, 0x100001a1, 8) COPY (register, 0x20, 8), (register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffea8, 8)]
[ ---  CBRANCH (ram, 0x2555dd, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0xffffffff, 4), (register, 0x0, 4) CALL (ram, 0x216e30, 8) , (unique, 0x3200, 8) , (const, 0xff, 8), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffeb8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x52, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x4c, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x52, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x4c, 4)]
[(stack, 0xfffffffffffffeaf, 1) INDIRECT (stack, 0xfffffffffffffeaf, 1) , (const, 0x52, 4), (stack, 0xfffffffffffffeaf, 1) INDIRECT (stack, 0xfffffffffffffeaf, 1) , (const, 0x4c, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x52, 4), (stack, 0xfffffffffffffeb0, 8) CAST (unique, 0x100001cc, 8), (unique, 0x100001cc, 8) INT_OR (unique, 0x1000013b, 8) , (unique, 0x10000143, 8), (unique, 0x10000143, 8) INT_ZEXT (register, 0x0, 4), (unique, 0x1000013b, 8) INT_AND (unique, 0x100001c4, 8) , (const, 0xffffffff00000000, 8), (unique, 0x100001c4, 8) CAST (stack, 0xfffffffffffffeb0, 8), (register, 0x0, 4) CALL (ram, 0x1e5910, 8), (stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x4c, 4)]
[(stack, 0xffffffffffffffb7, 1) INDIRECT (stack, 0xffffffffffffffb7, 1) , (const, 0x52, 4), (stack, 0xffffffffffffffb7, 1) INDIRECT (stack, 0xffffffffffffffb7, 1) , (const, 0x4c, 4), (stack, 0xffffffffffffffb7, 1) COPY (const, 0x0, 1)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x52, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x4c, 4)]
[(register, 0x0, 4) CALL (ram, 0x1e5930, 8)]
[(unique, 0x100001b1, 1) COPY (register, 0xa0, 1), (register, 0xa0, 1) COPY (const, 0x0, 1)]
[ ---  BRANCH (ram, 0x25552c, 1)]
[(register, 0xa0, 1) MULTIEQUAL (unique, 0x100001b1, 1) , (unique, 0x100001b2, 1) , (unique, 0x100001b3, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100001d4, 8) , (const, 0x255535, 8), (unique, 0x100001d4, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8), (register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x6c, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x6c, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(stack, 0xfffffffffffffeaf, 1) INDIRECT (stack, 0xfffffffffffffeaf, 1) , (const, 0x6c, 4), (stack, 0xfffffffffffffeaf, 1) INDIRECT (stack, 0xfffffffffffffeaf, 1) , (const, 0x6b, 4), (stack, 0xfffffffffffffeaf, 1) MULTIEQUAL (stack, 0xfffffffffffffeaf, 1) , (stack, 0xfffffffffffffeaf, 1) , (stack, 0xfffffffffffffeaf, 1)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x6c, 4), (stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x6b, 4), (stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(stack, 0xffffffffffffffb7, 1) INDIRECT (stack, 0xffffffffffffffb7, 1) , (const, 0x6c, 4), (stack, 0xffffffffffffffb7, 1) INDIRECT (stack, 0xffffffffffffffb7, 1) , (const, 0x6b, 4), (stack, 0xffffffffffffffb7, 1) MULTIEQUAL (stack, 0xffffffffffffffb7, 1) , (stack, 0xffffffffffffffb7, 1) , (stack, 0xffffffffffffffb7, 1)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x6c, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x6b, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CBRANCH (ram, 0x2554d0, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (register, 0x0, 4) , (const, 0x100, 4), (register, 0x0, 4) CALL (ram, 0x1e5940, 8) , (const, 0x0, 4) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x25553f, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xa0, 1) , (const, 0x1, 1)]
[(register, 0x18, 8) CAST (unique, 0x100001e8, 8), (unique, 0x100001e8, 8) INT_AND (unique, 0x100001e0, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x100001e0, 8) CAST (unique, 0x3800, 8), (unique, 0x3800, 8) PTRADD (register, 0x20, 8) , (unique, 0x10000171, 8) , (const, 0x1, 8), (unique, 0x10000171, 8) INT_ADD (unique, 0x100000c0, 8) , (const, 0xf, 8), (unique, 0x100000c0, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (unique, 0x3580, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3580, 8) INT_ADD (unique, 0x3480, 8) , (const, 0x1e, 8), (unique, 0x3480, 8) INT_MULT (register, 0x0, 8) , (const, 0x4, 8), (register, 0x0, 8) INT_SEXT (unique, 0x100001dc, 4), (unique, 0x100001dc, 4) CAST (register, 0x0, 4)]
[(unique, 0x10000199, 8) COPY (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (unique, 0x100000c0, 8) , (const, 0x1, 8), (unique, 0x100000c0, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (unique, 0x3580, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3580, 8) INT_ADD (unique, 0x3480, 8) , (const, 0x1e, 8), (unique, 0x3480, 8) INT_MULT (register, 0x0, 8) , (const, 0x4, 8), (register, 0x0, 8) INT_SEXT (unique, 0x100001dc, 4), (unique, 0x100001dc, 4) CAST (register, 0x0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100001f4, 8) , (const, 0x25554b, 8), (unique, 0x100001f4, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xa2, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xa2, 4)]
[(stack, 0xfffffffffffffeaf, 1) INDIRECT (stack, 0xfffffffffffffeaf, 1) , (const, 0xa2, 4), (stack, 0xfffffffffffffeaf, 1) INDIRECT (stack, 0xfffffffffffffeaf, 1) , (const, 0xa1, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0xa2, 4), (stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0xa1, 4)]
[(stack, 0xffffffffffffffb7, 1) INDIRECT (stack, 0xffffffffffffffb7, 1) , (const, 0xa2, 4), (stack, 0xffffffffffffffb7, 1) INDIRECT (stack, 0xffffffffffffffb7, 1) , (const, 0xa1, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xa2, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xa1, 4)]
[(unique, 0x10000191, 8) COPY (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x2554f0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x100001fc, 8), (unique, 0x100001fc, 8) CALL (ram, 0x1212c0, 8) , (register, 0x38, 8), (register, 0x38, 8) INT_LEFT (register, 0x38, 8) , (const, 0x2, 4), (register, 0x38, 8) INT_SEXT (unique, 0x100001f0, 4), (unique, 0x100001f0, 4) CAST (register, 0x0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000204, 8) , (const, 0x2554fb, 8), (unique, 0x10000204, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8), (register, 0x20, 8) MULTIEQUAL (unique, 0x10000191, 8) , (unique, 0x10000199, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xe4, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xe4, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(stack, 0xfffffffffffffeaf, 1) INDIRECT (stack, 0xfffffffffffffeaf, 1) , (const, 0xe4, 4), (stack, 0xfffffffffffffeaf, 1) INDIRECT (stack, 0xfffffffffffffeaf, 1) , (const, 0xe3, 4), (stack, 0xfffffffffffffeaf, 1) MULTIEQUAL (stack, 0xfffffffffffffeaf, 1) , (stack, 0xfffffffffffffeaf, 1)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0xe4, 4), (stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0xe3, 4), (stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(stack, 0xffffffffffffffb7, 1) INDIRECT (stack, 0xffffffffffffffb7, 1) , (const, 0xe4, 4), (stack, 0xffffffffffffffb7, 1) INDIRECT (stack, 0xffffffffffffffb7, 1) , (const, 0xe3, 4), (stack, 0xffffffffffffffb7, 1) MULTIEQUAL (stack, 0xffffffffffffffb7, 1) , (stack, 0xffffffffffffffb7, 1)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xe4, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xe3, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CBRANCH (ram, 0x255578, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0xffffffff, 4), (register, 0x0, 4) CALL (ram, 0x1e5940, 8) , (register, 0x0, 4) , (register, 0x18, 8), (register, 0x18, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x18, 8)]
[(stack, 0xfffffffffffffeb0, 4) SUBPIECE (stack, 0xfffffffffffffeb0, 8) , (const, 0x0, 8)]
[(unique, 0x100001b4, 4) COPY (register, 0x8, 4), (register, 0x8, 4) COPY (const, 0x10, 4)]
[ ---  CBRANCH (ram, 0x255589, 1) , (unique, 0x27780, 1), (unique, 0x27780, 1) INT_SLESS (register, 0x0, 4) , (const, 0x11, 4)]
[(unique, 0x100001b8, 4) COPY (register, 0x0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000020c, 8) , (const, 0x255597, 8), (unique, 0x1000020c, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x14f, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x14f, 4)]
[(stack, 0xfffffffffffffeaf, 1) INDIRECT (stack, 0xfffffffffffffeaf, 1) , (const, 0x14f, 4), (stack, 0xfffffffffffffeaf, 1) INDIRECT (stack, 0xfffffffffffffeaf, 1) , (const, 0x14e, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x14f, 4), (stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x14e, 4)]
[(stack, 0xffffffffffffffb7, 1) INDIRECT (stack, 0xffffffffffffffb7, 1) , (const, 0x14f, 4), (stack, 0xffffffffffffffb7, 1) INDIRECT (stack, 0xffffffffffffffb7, 1) , (const, 0x14e, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x14f, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x14e, 4)]
[(register, 0x0, 8) CALL (ram, 0x255200, 8) , (unique, 0x3200, 8) , (stack, 0xfffffffffffffeb0, 4) , (register, 0x0, 4) , (register, 0x8, 4) , (register, 0x18, 8), (register, 0x8, 4) MULTIEQUAL (unique, 0x100001b4, 4) , (unique, 0x100001b8, 4)]
[ ---  CBRANCH (ram, 0x2555a5, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (const, 0xff, 4) , (register, 0x0, 4)]
[(unique, 0x10000181, 8) COPY (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x255555, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xa0, 1) , (const, 0x0, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000214, 8) , (const, 0x2555b4, 8), (unique, 0x10000214, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x16c, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x16c, 4)]
[(stack, 0xfffffffffffffeaf, 1) INDIRECT (stack, 0xfffffffffffffeaf, 1) , (const, 0x16c, 4), (stack, 0xfffffffffffffeaf, 1) INDIRECT (stack, 0xfffffffffffffeaf, 1) , (const, 0x16b, 4)]
[(stack, 0xffffffffffffffb7, 1) INDIRECT (stack, 0xffffffffffffffb7, 1) , (const, 0x16c, 4), (stack, 0xffffffffffffffb7, 1) INDIRECT (stack, 0xffffffffffffffb7, 1) , (const, 0x16b, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x16c, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x16b, 4)]
[ ---  CALL (ram, 0x1212c8, 8) , (register, 0x18, 8)]
[(unique, 0x10000189, 8) COPY (stack, 0xfffffffffffffeb0, 8), (stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x16c, 4), (stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x16b, 4), (stack, 0xfffffffffffffeb0, 8) COPY (register, 0x0, 8)]
[ ---  BRANCH (ram, 0x255555, 1)]
[(unique, 0x100001a9, 8) COPY (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x2555dd, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd00, 4) , (const, 0x16, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x1000021c, 8), (unique, 0x1000021c, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (ram, 0x4eae68, 8) , (register, 0x110, 8) , (const, 0x1, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000224, 8) , (const, 0x2555e2, 8), (unique, 0x10000224, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8), (register, 0x20, 8) MULTIEQUAL (unique, 0x100001a1, 8) , (unique, 0x100001a9, 8)]
[(stack, 0xfffffffffffffeaf, 1) INDIRECT (stack, 0xfffffffffffffeaf, 1) , (const, 0x132, 4), (stack, 0xfffffffffffffeaf, 1) INDIRECT (stack, 0xfffffffffffffeaf, 1) , (const, 0x131, 4), (stack, 0xfffffffffffffeaf, 1) MULTIEQUAL (stack, 0xfffffffffffffeaf, 1) , (stack, 0xfffffffffffffeaf, 1)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x132, 4), (stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x131, 4), (stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(stack, 0xffffffffffffffb7, 1) INDIRECT (stack, 0xffffffffffffffb7, 1) , (const, 0x132, 4), (stack, 0xffffffffffffffb7, 1) INDIRECT (stack, 0xffffffffffffffb7, 1) , (const, 0x131, 4), (stack, 0xffffffffffffffb7, 1) MULTIEQUAL (stack, 0xffffffffffffffb7, 1) , (stack, 0xffffffffffffffb7, 1)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x132, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x131, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CALL (ram, 0x1406c0, 8)]
[(ram, 0x4eae68, 8) COPY (ram, 0x4eae68, 8), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x132, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[ ---  RETURN (const, 0x1, 4)]
[(unique, 0x100001b2, 1) COPY (register, 0xa0, 1), (register, 0xa0, 1) COPY (const, 0x1, 1)]
[ ---  CBRANCH (ram, 0x2555c0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 1) , (const, 0x0, 1), (register, 0x0, 1) INT_OR (unique, 0xc800, 1) , (register, 0xa0, 1), (unique, 0xc800, 1) INT_LESS (const, 0xff, 4) , (register, 0x0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000022c, 8) , (const, 0x2555ce, 8), (unique, 0x1000022c, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x128, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x128, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x128, 4), (stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x127, 4)]
[(stack, 0xffffffffffffffb7, 1) INDIRECT (stack, 0xffffffffffffffb7, 1) , (const, 0x128, 4), (stack, 0xffffffffffffffb7, 1) INDIRECT (stack, 0xffffffffffffffb7, 1) , (const, 0x127, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x128, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x127, 4)]
[ ---  CALL (ram, 0x1212c8, 8) , (register, 0x18, 8)]
[(unique, 0x100001b3, 1) COPY (stack, 0xfffffffffffffeaf, 1), (stack, 0xfffffffffffffeaf, 1) INDIRECT (stack, 0xfffffffffffffeaf, 1) , (const, 0x128, 4), (stack, 0xfffffffffffffeaf, 1) INDIRECT (stack, 0xfffffffffffffeaf, 1) , (const, 0x127, 4), (stack, 0xfffffffffffffeaf, 1) COPY (register, 0x0, 1)]
[ ---  BRANCH (ram, 0x25552c, 1)]
[(unique, 0x10000179, 8) COPY (register, 0x0, 8), (register, 0x0, 8) COPY (const, 0x0, 8)]
[(stack, 0xffffffffffffffb7, 1) MULTIEQUAL (stack, 0xffffffffffffffb7, 1) , (stack, 0xffffffffffffffb7, 1) , (stack, 0xffffffffffffffb7, 1)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(stack, 0xfffffffffffffeaf, 1) MULTIEQUAL (stack, 0xfffffffffffffeaf, 1) , (stack, 0xfffffffffffffeaf, 1) , (stack, 0xfffffffffffffeaf, 1)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8)]
[(register, 0x0, 8) MULTIEQUAL (unique, 0x10000179, 8) , (unique, 0x10000181, 8) , (unique, 0x10000189, 8)]
[ ---  CBRANCH (ram, 0x2555e2, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffffc0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10000234, 8), (unique, 0x10000234, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000023c, 8) , (unique, 0x10000151, 8), (unique, 0x1000023c, 8) CAST (register, 0x20, 8), (unique, 0x10000151, 8) PTRSUB (const, 0x0, 8) , (const, 0x2555e7, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(stack, 0xfffffffffffffeaf, 1) INDIRECT (stack, 0xfffffffffffffeaf, 1) , (const, 0xdc, 4), (stack, 0xfffffffffffffeaf, 1) INDIRECT (stack, 0xfffffffffffffeaf, 1) , (const, 0xdb, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0xdc, 4), (stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0xdb, 4)]
[(stack, 0xffffffffffffffb7, 1) INDIRECT (stack, 0xffffffffffffffb7, 1) , (const, 0xdc, 4), (stack, 0xffffffffffffffb7, 1) INDIRECT (stack, 0xffffffffffffffb7, 1) , (const, 0xdb, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xdc, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xdb, 4)]
[ ---  CALL (ram, 0x234c80, 8)]
[(ram, 0x4eae68, 8) COPY (ram, 0x4eae68, 8), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xdc, 4)]
[ ---  RETURN (const, 0x1, 4)]
[(ram, 0x4eae68, 8) COPY (ram, 0x4eae68, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8)]
