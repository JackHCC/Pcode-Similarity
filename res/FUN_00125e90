[(register, 0xa0, 8) COPY (const, 0x0, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x100004f4, 8), (unique, 0x100004f4, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8)]
[(unique, 0x3100, 8) INT_ADD (register, 0x38, 8) , (const, 0x68, 8)]
[(unique, 0x3100, 8) PTRADD (register, 0x30, 8) , (const, 0x6, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x125eff, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x1000025c, 4) , (const, 0x0, 4), (unique, 0x1000025c, 4) INT_AND (unique, 0xbc80, 4) , (const, 0x1, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100004ec, 8), (unique, 0x100004ec, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x30, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x10000504, 8), (unique, 0x10000504, 8) INT_ADD (register, 0x38, 8) , (const, 0x90, 8)]
[ ---  CBRANCH (ram, 0x125eff, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbe00, 8) , (const, 0x0, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100004fc, 8), (unique, 0x100004fc, 8) INT_ADD (register, 0x38, 8) , (const, 0x68, 8)]
[(register, 0xa0, 8) CAST (unique, 0x10000524, 8), (unique, 0x10000524, 8) INT_XOR (register, 0xa0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x1000051c, 8), (unique, 0x1000051c, 8) INT_ADD (register, 0x110, 8) , (const, 0x30, 8), (register, 0xa0, 8) INT_OR (unique, 0x4ff00, 8) , (unique, 0x50000, 8), (unique, 0x50000, 8) INT_LEFT (unique, 0x10000514, 8) , (const, 0x2f, 4), (unique, 0x10000514, 8) CAST (unique, 0xbd80, 8), (unique, 0x4ff00, 8) INT_RIGHT (unique, 0x1000050c, 8) , (const, 0x11, 4), (unique, 0x1000050c, 8) CAST (unique, 0xbd80, 8)]
[(register, 0xa0, 8) MULTIEQUAL (register, 0xa0, 8) , (unique, 0xbd80, 8) , (register, 0xa0, 8)]
[ ---  CBRANCH (ram, 0x1262d9, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0x8, 4) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x126473, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x80, 8) , (const, 0x0, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x6a6, 4)]
[ ---  CALL (ram, 0x1303d0, 8) , (unique, 0x100002ba, 8) , (unique, 0x100002a2, 8) , (const, 0x19f, 4) , (unique, 0x100002ea, 8), (unique, 0x100002ea, 8) COPY (const, 0x2bbbc0, 8), (unique, 0x100002ba, 8) COPY (const, 0x2b39f4, 8), (unique, 0x100002a2, 8) COPY (const, 0x2b39e0, 8)]
[ ---  RETURN (const, 0x1, 4)]
[(stack, 0xffffffffffffff74, 4) COPY (const, 0x0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000052c, 8) , (const, 0x0, 8), (unique, 0x1000052c, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x30, 8) , (const, 0x4, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x12615b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x58c00, 1) , (const, 0x0, 1), (unique, 0x58c00, 1) INT_AND (unique, 0xbb00, 1) , (const, 0x1, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x10000534, 8), (unique, 0x10000534, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x30, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[ ---  CALL (ram, 0x266330, 8) , (register, 0xa0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x697, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x663, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x697, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x663, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x697, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x663, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x697, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x663, 4)]
[(register, 0x0, 4) CALLIND (register, 0xa0, 8) , (unique, 0x3100, 8) , (unique, 0x3100, 8) , (const, 0x0, 8) , (const, 0x0, 8) , (const, 0x0, 8) , (register, 0x88, 8) , (stack, 0x8, 4) , (stack, 0x10, 4)]
[ ---  BRANCH (ram, 0x12615b, 1)]
[(unique, 0x1000044c, 8) COPY (register, 0x80, 8)]
[ ---  CBRANCH (ram, 0x125f19, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x80, 8) , (const, 0x0, 8)]
[(unique, 0x10000454, 8) COPY (register, 0x30, 8)]
[(unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffb0, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x1000044c, 8) , (unique, 0x10000454, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x30, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[(stack, 0xffffffffffffffb0, 8) COPY (const, 0x0, 8)]
[(unique, 0x1000043c, 8) COPY (register, 0x0, 8), (register, 0x0, 8) COPY (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x125f42, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x88, 8) , (const, 0x0, 8)]
[(unique, 0x10000444, 8) COPY (unique, 0x3800, 8)]
[(register, 0x0, 8) MULTIEQUAL (unique, 0x1000043c, 8) , (unique, 0x10000444, 8)]
[ ---  CBRANCH (ram, 0x1261b0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0x10, 4) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x125f4f, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) INT_AND (unique, 0xbc80, 4) , (const, 0x7, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) CAST (unique, 0x1000053c, 8), (unique, 0x1000053c, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x30, 8) , (const, 0x4, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x126454, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x80, 8) , (const, 0x0, 8)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x63d, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x63d, 4)]
[ ---  CALL (ram, 0x1303d0, 8) , (unique, 0x100002b2, 8) , (unique, 0x1000029a, 8) , (const, 0x22f, 4) , (unique, 0x100002e2, 8), (unique, 0x100002e2, 8) COPY (const, 0x2bbbc0, 8), (unique, 0x100002b2, 8) COPY (const, 0x2b39f4, 8), (unique, 0x1000029a, 8) COPY (const, 0x2b39e0, 8)]
[ ---  RETURN (const, 0x1, 4)]
[(unique, 0x10000434, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x10, 8)]
[(unique, 0x1000049c, 8) COPY (register, 0x98, 8), (register, 0x98, 8) INT_SEXT (unique, 0x10000544, 4), (unique, 0x10000544, 4) CAST (register, 0x0, 4)]
[ ---  CBRANCH (ram, 0x126439, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (unique, 0xbd80, 8) , (register, 0x8, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x10, 8)]
[ ---  CBRANCH (ram, 0x126363, 1) , (unique, 0xd080, 1), (unique, 0xd080, 1) INT_LESS (register, 0x0, 4) , (const, 0x4, 4)]
[(unique, 0x3100, 8) INT_ADD (register, 0x98, 8) , (const, 0x1, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x10, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000550, 8), (unique, 0x10000550, 8) INT_ADD (unique, 0x10000548, 8) , (const, 0x1, 8), (unique, 0x10000548, 8) CAST (unique, 0xbd80, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3a00, 8) , (unique, 0xbb00, 1), (unique, 0x3a00, 8) CAST (unique, 0x10000568, 8), (unique, 0x10000568, 8) INT_ADD (unique, 0x10000560, 8) , (unique, 0x10000382, 8), (unique, 0x10000560, 8) CAST (unique, 0xbd80, 8), (unique, 0x10000382, 8) INT_ADD (register, 0x98, 8) , (const, 0x4, 8), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x10000558, 8), (unique, 0x10000558, 8) CAST (unique, 0xbd80, 8)]
[ ---  CBRANCH (ram, 0x1262b6, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESSEQUAL (register, 0x8, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000550, 8), (unique, 0x10000550, 8) INT_ADD (unique, 0x10000548, 8) , (const, 0x1, 8), (unique, 0x10000548, 8) CAST (unique, 0xbd80, 8)]
[(unique, 0x10000404, 8) COPY (unique, 0x3100, 8)]
[ ---  CBRANCH (ram, 0x12623d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x3100, 8) , (const, 0x4, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x10, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000578, 8), (unique, 0x10000578, 8) INT_ADD (unique, 0x10000570, 8) , (const, 0x2, 8), (unique, 0x10000570, 8) CAST (unique, 0xbd80, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3a00, 8) , (unique, 0xbb00, 1), (unique, 0x3a00, 8) CAST (unique, 0x10000598, 8), (unique, 0x10000598, 8) INT_ADD (unique, 0x10000590, 8) , (unique, 0x1000038a, 8), (unique, 0x10000590, 8) CAST (unique, 0xbd80, 8), (unique, 0x1000038a, 8) INT_ADD (register, 0x98, 8) , (const, 0x5, 8), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000588, 8), (unique, 0x10000588, 8) INT_ADD (unique, 0x10000580, 8) , (const, 0x1, 8), (unique, 0x10000580, 8) CAST (unique, 0xbd80, 8)]
[(unique, 0x1000042c, 8) COPY (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000578, 8), (unique, 0x10000578, 8) INT_ADD (unique, 0x10000570, 8) , (const, 0x2, 8), (unique, 0x10000570, 8) CAST (unique, 0xbd80, 8)]
[(unique, 0x10000494, 8) COPY (register, 0x98, 8), (register, 0x98, 8) INT_ADD (register, 0x98, 8) , (const, 0x2, 8)]
[ ---  CBRANCH (ram, 0x1262b9, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESSEQUAL (register, 0x8, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000578, 8), (unique, 0x10000578, 8) INT_ADD (unique, 0x10000570, 8) , (const, 0x2, 8), (unique, 0x10000570, 8) CAST (unique, 0xbd80, 8)]
[(unique, 0x1000041c, 8) COPY (register, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x1000042c, 8) , (unique, 0x10000434, 8) , (unique, 0x3100, 8)]
[ ---  CBRANCH (ram, 0x12623d, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (register, 0x98, 8) , (const, 0x4, 8), (register, 0x98, 8) MULTIEQUAL (unique, 0x10000494, 8) , (unique, 0x1000049c, 8) , (unique, 0x3100, 8)]
[(stack, 0xffffffffffffff74, 4) COPY (const, 0x7, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0xbd80, 8) , (register, 0x98, 4), (register, 0x98, 4) INT_OR (register, 0x98, 4) , (register, 0x38, 4), (register, 0x98, 4) SUBPIECE (register, 0x98, 8) , (const, 0x0, 4), (register, 0x38, 4) INT_AND (unique, 0xbc80, 4) , (const, 0xfffffff8, 4)]
[ ---  BRANCH (ram, 0x12615b, 1)]
[(unique, 0x1000040c, 8) COPY (unique, 0x3100, 8)]
[ ---  CBRANCH (ram, 0x12623d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x98, 8) , (const, 0x3, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x10, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100005a8, 8), (unique, 0x100005a8, 8) INT_ADD (unique, 0x100005a0, 8) , (const, 0x3, 8), (unique, 0x100005a0, 8) CAST (unique, 0xbd80, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0xbb00, 1), (unique, 0x3100, 8) CAST (unique, 0x100005c8, 8), (unique, 0x100005c8, 8) INT_ADD (unique, 0x100005c0, 8) , (const, 0x7, 8), (unique, 0x100005c0, 8) CAST (unique, 0xbd80, 8), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100005b8, 8), (unique, 0x100005b8, 8) INT_ADD (unique, 0x100005b0, 8) , (const, 0x2, 8), (unique, 0x100005b0, 8) CAST (unique, 0xbd80, 8)]
[(unique, 0x10000414, 8) COPY (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100005a8, 8), (unique, 0x100005a8, 8) INT_ADD (unique, 0x100005a0, 8) , (const, 0x3, 8), (unique, 0x100005a0, 8) CAST (unique, 0xbd80, 8)]
[(register, 0x0, 8) MULTIEQUAL (unique, 0x10000404, 8) , (unique, 0x1000040c, 8) , (unique, 0x10000414, 8) , (unique, 0x1000041c, 8) , (unique, 0x10000434, 8)]
[ ---  CBRANCH (ram, 0x12636b, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (unique, 0xbb00, 1) , (const, 0x81, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100005d8, 8), (unique, 0x100005d8, 8) INT_ADD (unique, 0x100005d0, 8) , (const, 0x7, 8), (unique, 0x100005d0, 8) CAST (unique, 0xbd80, 8)]
[ ---  CBRANCH (ram, 0x12626d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x8, 4) , (const, 0x0, 4), (register, 0x8, 4) INT_AND (unique, 0xbc80, 4) , (const, 0x2, 4)]
[(stack, 0xffffffffffffff74, 4) COPY (const, 0x6, 4)]
[ ---  BRANCH (ram, 0x12615b, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100005e8, 8) , (unique, 0xbb00, 1), (unique, 0x100005e8, 8) CAST (unique, 0xbd80, 8), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x100005e0, 8), (unique, 0x100005e0, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x1, 8) , (const, 0x4, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0xbb00, 1), (unique, 0x3100, 8) CAST (unique, 0x10000608, 8), (unique, 0x10000608, 8) INT_ADD (unique, 0x10000600, 8) , (const, 0x1, 8), (unique, 0x10000600, 8) CAST (unique, 0xbd80, 8), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100005f8, 8), (unique, 0x100005f8, 8) INT_ADD (unique, 0x100005f0, 8) , (const, 0x5, 8), (unique, 0x100005f0, 8) CAST (unique, 0xbd80, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0xbb00, 1), (unique, 0x3100, 8) CAST (unique, 0x10000628, 8), (unique, 0x10000628, 8) INT_ADD (unique, 0x10000620, 8) , (const, 0x2, 8), (unique, 0x10000620, 8) CAST (unique, 0xbd80, 8), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000618, 8), (unique, 0x10000618, 8) INT_ADD (unique, 0x10000610, 8) , (const, 0x6, 8), (unique, 0x10000610, 8) CAST (unique, 0xbd80, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0xbb00, 1), (unique, 0x3100, 8) CAST (unique, 0x10000648, 8), (unique, 0x10000648, 8) INT_ADD (unique, 0x10000640, 8) , (const, 0x3, 8), (unique, 0x10000640, 8) CAST (unique, 0xbd80, 8), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000638, 8), (unique, 0x10000638, 8) INT_ADD (unique, 0x10000630, 8) , (const, 0x7, 8), (unique, 0x10000630, 8) CAST (unique, 0xbd80, 8)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0xbd80, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x10, 8)]
[(unique, 0x1000046c, 8) COPY (register, 0x10, 8), (register, 0x10, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x1, 8) , (const, 0x4, 8)]
[(register, 0x10, 8) MULTIEQUAL (unique, 0x1000046c, 8) , (unique, 0xbd80, 8)]
[(register, 0x0, 8) MULTIEQUAL (unique, 0xbd80, 8) , (register, 0x0, 8)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000650, 8), (unique, 0x10000650, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x30, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0xbd80, 8) , (register, 0x38, 4), (register, 0x38, 4) INT_AND (register, 0x38, 4) , (const, 0xfffffff8, 4), (register, 0x38, 4) MULTIEQUAL (unique, 0xbc80, 4) , (unique, 0xbc80, 4)]
[ ---  BRANCH (ram, 0x125f53, 1)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x10, 8)]
[(unique, 0xbc80, 4) MULTIEQUAL (unique, 0xbc80, 4) , (unique, 0xbc80, 4)]
[(register, 0x10, 8) MULTIEQUAL (unique, 0xbd80, 8) , (register, 0x10, 8)]
[(register, 0x0, 8) MULTIEQUAL (unique, 0xbd80, 8) , (register, 0x0, 8)]
[(unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffb8, 8)]
[(unique, 0xbc80, 4) MULTIEQUAL (unique, 0xbc80, 4) , (unique, 0xbc80, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (unique, 0xbd80, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x10000474, 8) COPY (register, 0x30, 8), (register, 0x30, 8) CAST (unique, 0x10000680, 8), (unique, 0x10000680, 8) INT_SUB (unique, 0x10000670, 8) , (unique, 0x10000678, 8), (unique, 0x10000678, 8) CAST (register, 0x10, 8), (unique, 0x10000670, 8) CAST (unique, 0xbd80, 8), (register, 0x10, 8) MULTIEQUAL (register, 0x10, 8) , (unique, 0xbd80, 8)]
[ ---  CBRANCH (ram, 0x125f81, 1) , (unique, 0x27800, 1), (unique, 0x27800, 1) INT_SLESS (unique, 0x10000688, 8) , (unique, 0x10000690, 8), (unique, 0x10000690, 8) CAST (register, 0x30, 8), (unique, 0x10000688, 8) CAST (register, 0x38, 8), (register, 0x30, 8) CAST (unique, 0x10000680, 8), (unique, 0x10000680, 8) INT_SUB (unique, 0x10000670, 8) , (unique, 0x10000678, 8), (unique, 0x10000678, 8) CAST (register, 0x10, 8), (unique, 0x10000670, 8) CAST (unique, 0xbd80, 8), (register, 0x38, 8) CAST (unique, 0x10000668, 8), (unique, 0x10000668, 8) INT_SUB (unique, 0x10000658, 8) , (unique, 0x10000660, 8), (unique, 0x10000660, 8) CAST (register, 0x0, 8), (unique, 0x10000658, 8) CAST (register, 0x8, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (unique, 0xbd80, 8), (register, 0x10, 8) MULTIEQUAL (register, 0x10, 8) , (unique, 0xbd80, 8)]
[(unique, 0x1000047c, 8) COPY (register, 0x38, 8)]
[(unique, 0x10000484, 8) COPY (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100006a0, 8), (unique, 0x100006a0, 8) INT_ADD (unique, 0x10000698, 8) , (const, 0x3, 8), (unique, 0x10000698, 8) CAST (register, 0x30, 8), (register, 0x30, 8) MULTIEQUAL (unique, 0x10000474, 8) , (unique, 0x1000047c, 8)]
[ ---  CBRANCH (ram, 0x125f8c, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (const, 0xffffffffffffffff, 8) , (unique, 0x100006a8, 8), (unique, 0x100006a8, 8) CAST (register, 0x30, 8), (register, 0x30, 8) MULTIEQUAL (unique, 0x10000474, 8) , (unique, 0x1000047c, 8)]
[(unique, 0x1000048c, 8) COPY (register, 0x30, 8)]
[(unique, 0x100004a4, 8) COPY (register, 0x10, 8)]
[ ---  CBRANCH (ram, 0x1260b4, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x38, 8) , (const, 0x0, 8), (register, 0x38, 8) INT_SRIGHT (unique, 0x100006b0, 8) , (const, 0x2, 4), (unique, 0x100006b0, 8) CAST (register, 0x38, 8), (register, 0x38, 8) MULTIEQUAL (unique, 0x10000484, 8) , (unique, 0x1000048c, 8)]
[ ---  CBRANCH (ram, 0x1260f0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x10000277, 4) , (const, 0x0, 4), (unique, 0x10000277, 4) INT_AND (unique, 0xbc80, 4) , (const, 0x2, 4)]
[ ---  CBRANCH (ram, 0x126337, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8)]
[(register, 0x30, 8) COPY (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x126358, 1)]
[(register, 0xb0, 8) MULTIEQUAL (unique, 0x100004a4, 8) , (register, 0xb0, 8)]
[(register, 0x30, 8) MULTIEQUAL (register, 0x30, 8) , (register, 0x30, 8)]
[ ---  CBRANCH (ram, 0x126340, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (register, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0xb0, 8) , (unique, 0xbc80, 4)]
[(register, 0x0, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x4, 8)]
[(register, 0xb0, 8) PTRADD (register, 0xb0, 8) , (const, 0x1, 8) , (const, 0x4, 8)]
[ ---  CBRANCH (ram, 0x1260b4, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x38, 8) , (register, 0x30, 8), (register, 0x30, 8) INT_ADD (register, 0x30, 8) , (const, 0x1, 8)]
[(register, 0x8, 8) COPY (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x126110, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(register, 0xb0, 8) MULTIEQUAL (unique, 0x100004a4, 8) , (register, 0xb0, 8)]
[ ---  CBRANCH (ram, 0x126100, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (register, 0x0, 8) , (register, 0x8, 8) , (const, 0x4, 8), (register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0xb0, 8) , (unique, 0xbc80, 4)]
[(register, 0xb0, 8) PTRADD (register, 0xb0, 8) , (const, 0x1, 8) , (const, 0x4, 8)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x4b1, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x4b1, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x4b1, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x0, 8) , (unique, 0xbe00, 8), (unique, 0xbe00, 8) INT_ADD (unique, 0xbe00, 8) , (const, 0x1, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (register, 0x0, 8)]
[ ---  BRANCH (ram, 0x126107, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(register, 0xb0, 8) MULTIEQUAL (register, 0xb0, 8) , (register, 0xb0, 8)]
[ ---  CBRANCH (ram, 0x1260b0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x38, 8) , (register, 0x8, 8), (register, 0x8, 8) INT_ADD (register, 0x8, 8) , (const, 0x1, 8)]
[(unique, 0x3400, 8) PTRADD (register, 0x0, 8) , (register, 0x38, 8) , (const, 0x4, 8)]
[(register, 0x30, 8) COPY (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x125fd0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8)]
[(register, 0xb0, 8) MULTIEQUAL (unique, 0x100004a4, 8) , (register, 0xb0, 8)]
[(register, 0x30, 8) MULTIEQUAL (register, 0x30, 8) , (register, 0x30, 8)]
[ ---  CBRANCH (ram, 0x125fb8, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (register, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x10, 8) , (register, 0x0, 8)]
[(stack, 0xffffffffffffff74, 4) COPY (const, 0x6, 4)]
[(unique, 0x10000287, 1) COPY (const, 0x0, 1)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0xb0, 8) , (unique, 0xbc80, 4)]
[(register, 0x0, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x4, 8)]
[(register, 0xb0, 8) PTRADD (register, 0xb0, 8) , (const, 0x1, 8) , (const, 0x4, 8)]
[ ---  CBRANCH (ram, 0x1260b4, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x38, 8) , (register, 0x30, 8), (register, 0x30, 8) INT_ADD (register, 0x30, 8) , (const, 0x1, 8)]
[(register, 0xb0, 8) MULTIEQUAL (unique, 0x100004bc, 8) , (unique, 0x100004a4, 8)]
[(register, 0x30, 8) MULTIEQUAL (register, 0x30, 8) , (register, 0x30, 8)]
[ ---  CBRANCH (ram, 0x126070, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (register, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[(unique, 0x1000028b, 1) COPY (const, 0x0, 1)]
[(stack, 0xffffffffffffff74, 4) COPY (const, 0x6, 4)]
[(unique, 0x100004dc, 8) COPY (unique, 0x100004d4, 8), (unique, 0x100004d4, 8) COPY (register, 0x10, 8)]
[ ---  CBRANCH (ram, 0x125fec, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x80, 8) , (const, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0xb0, 8) , (unique, 0xbc80, 4)]
[(register, 0x0, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x4, 8)]
[(unique, 0x100004bc, 8) COPY (register, 0xb0, 8), (register, 0xb0, 8) PTRADD (register, 0xb0, 8) , (const, 0x1, 8) , (const, 0x4, 8)]
[ ---  CBRANCH (ram, 0x1260b4, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x38, 8) , (register, 0x30, 8), (register, 0x30, 8) INT_ADD (register, 0x30, 8) , (const, 0x1, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(register, 0xb0, 8) MULTIEQUAL (unique, 0x100004a4, 8) , (register, 0xb0, 8) , (register, 0xb0, 8) , (register, 0xb0, 8) , (register, 0xb0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x10, 8) , (register, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8) , (register, 0x0, 8) , (unique, 0x3400, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x1261a0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (register, 0x8, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8) , (register, 0x0, 8) , (unique, 0x3400, 8) , (register, 0x0, 8)]
[(unique, 0x10000288, 1) COPY (const, 0x0, 1)]
[(stack, 0xffffffffffffff74, 4) COPY (const, 0x4, 4)]
[ ---  BRANCH (ram, 0x125fe3, 1)]
[ ---  CBRANCH (ram, 0x126188, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (register, 0x8, 8) , (register, 0x0, 8), (register, 0x0, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x4, 8)]
[(unique, 0x10000289, 1) COPY (const, 0x1, 1)]
[(stack, 0xffffffffffffff74, 4) COPY (const, 0x7, 4)]
[ ---  BRANCH (ram, 0x125fe3, 1)]
[ ---  CBRANCH (ram, 0x1264b6, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESSEQUAL (unique, 0x3100, 8) , (unique, 0xbd80, 8), (unique, 0x3100, 8) PTRADD (register, 0xb0, 8) , (const, 0x1, 8) , (const, 0x4, 8)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x425, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x425, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x425, 4)]
[ ---  CALL (ram, 0x1303d0, 8) , (unique, 0x100002d2, 8) , (unique, 0x100002ca, 8) , (const, 0x294, 4) , (unique, 0x100002da, 8), (unique, 0x100002da, 8) COPY (const, 0x2bb0b0, 8), (unique, 0x100002d2, 8) COPY (const, 0x2b3a2b, 8), (unique, 0x100002ca, 8) COPY (const, 0x2b3a1c, 8)]
[ ---  RETURN (const, 0x1, 4)]
[(unique, 0x1000028a, 1) COPY (const, 0x0, 1)]
[(stack, 0xffffffffffffff74, 4) COPY (const, 0x5, 4)]
[ ---  BRANCH (ram, 0x125fe3, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffff74, 4) MULTIEQUAL (stack, 0xffffffffffffff74, 4) , (stack, 0xffffffffffffff74, 4) , (stack, 0xffffffffffffff74, 4) , (stack, 0xffffffffffffff74, 4)]
[(register, 0xb0, 8) MULTIEQUAL (register, 0xb0, 8) , (register, 0xb0, 8) , (register, 0xb0, 8) , (register, 0xb0, 8)]
[(unique, 0x10000286, 1) MULTIEQUAL (unique, 0x1000028a, 1) , (unique, 0x10000289, 1) , (unique, 0x10000288, 1) , (unique, 0x10000287, 1)]
[ ---  CBRANCH (ram, 0x1260a0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x80, 8) , (const, 0x0, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffff74, 4) MULTIEQUAL (stack, 0xffffffffffffff74, 4) , (stack, 0xffffffffffffff74, 4)]
[(register, 0xb0, 8) MULTIEQUAL (unique, 0x100004d4, 8) , (register, 0xb0, 8)]
[(unique, 0x10000285, 1) MULTIEQUAL (unique, 0x1000028b, 1) , (unique, 0x10000286, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0xbd00, 4), (unique, 0xbd00, 4) INT_ADD (unique, 0xbd00, 4) , (const, 0x1, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100006c0, 8), (unique, 0x100006c0, 8) INT_ADD (unique, 0x100006b8, 8) , (const, 0x14, 8), (unique, 0x100006b8, 8) CAST (register, 0x30, 8)]
[ ---  CBRANCH (ram, 0x126280, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x58c00, 1) , (const, 0x0, 1), (unique, 0x58c00, 1) INT_AND (unique, 0xbb00, 1) , (const, 0x1, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x100006c8, 8), (unique, 0x100006c8, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x30, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x30, 8) , (register, 0xb0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x88, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) INT_ADD (unique, 0xbd80, 8) , (stack, 0xffffffffffffffb0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x88, 8)]
[ ---  BRANCH (ram, 0x126148, 1)]
[ ---  CBRANCH (ram, 0x1262a0, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESSEQUAL (register, 0xb0, 8) , (register, 0x10, 8)]
[ ---  CALL (ram, 0x266330, 8) , (register, 0xa0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x213, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1ef, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x213, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x1ef, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x213, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x1ef, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x30, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x213, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1ef, 4)]
[ ---  CBRANCH (ram, 0x126128, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x4, 4), (register, 0x0, 4) CALLIND (register, 0xa0, 8) , (unique, 0x3100, 8) , (unique, 0x3100, 8) , (unique, 0x3800, 8) , (register, 0xb0, 8) , (const, 0x0, 8) , (register, 0x88, 8) , (const, 0x0, 8) , (stack, 0x10, 4)]
[(unique, 0x100004e4, 4) COPY (stack, 0xffffffffffffff74, 4)]
[ ---  CBRANCH (ram, 0x12605b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffff74, 4) , (const, 0x5, 4)]
[ ---  CBRANCH (ram, 0x1262ab, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffffb8, 8) , (register, 0xb0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x10, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) CAST (unique, 0x100006f0, 8), (unique, 0x100006f0, 8) INT_SUB (unique, 0x100006e8, 8) , (register, 0xb0, 8), (unique, 0x100006e8, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x10, 8), (register, 0xb0, 8) CAST (unique, 0x100006e0, 8), (unique, 0x100006e0, 8) INT_SUB (unique, 0x100006d0, 8) , (unique, 0x100006d8, 8), (unique, 0x100006d8, 8) CAST (stack, 0xffffffffffffffb8, 8), (unique, 0x100006d0, 8) CAST (register, 0xb0, 8)]
[ ---  BRANCH (ram, 0x126053, 1)]
[(unique, 0x100004e8, 4) COPY (register, 0x0, 4)]
[ ---  CBRANCH (ram, 0x126445, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4)]
[(register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffff74, 4) , (const, 0x7, 4), (stack, 0xffffffffffffff74, 4) MULTIEQUAL (unique, 0x100004e4, 4) , (unique, 0x100004e8, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffff74, 4) MULTIEQUAL (stack, 0xffffffffffffff74, 4) , (stack, 0xffffffffffffff74, 4) , (stack, 0xffffffffffffff74, 4)]
[(unique, 0x10000284, 1) MULTIEQUAL (register, 0x206, 1) , (unique, 0x10000285, 1) , (unique, 0x10000285, 1)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x12615b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0x10, 4) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x126381, 1) , (unique, 0x10000284, 1)]
[ ---  CBRANCH (ram, 0x126492, 1) , (unique, 0xd080, 1), (unique, 0xd080, 1) INT_SLESS (const, 0x3, 8) , (register, 0x10, 8), (register, 0x10, 8) CAST (unique, 0x10000708, 8), (unique, 0x10000708, 8) INT_SUB (unique, 0x100006f8, 8) , (unique, 0x10000700, 8), (unique, 0x10000700, 8) CAST (unique, 0xbd80, 8), (unique, 0x100006f8, 8) CAST (register, 0x8, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x10, 8)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x364, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x364, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x364, 4)]
[ ---  CALL (ram, 0x1303d0, 8) , (unique, 0x100002c2, 8) , (unique, 0x100002aa, 8) , (const, 0x309, 4) , (unique, 0x100002f2, 8), (unique, 0x100002f2, 8) COPY (const, 0x2bbbc0, 8), (unique, 0x100002c2, 8) COPY (const, 0x2b3a08, 8), (unique, 0x100002aa, 8) COPY (const, 0x2b39e0, 8)]
[ ---  RETURN (const, 0x1, 4)]
[(unique, 0xbd80, 8) CAST (unique, 0x10000710, 8), (unique, 0x10000710, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x30, 8) , (const, 0x4, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x126441, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (unique, 0xbd80, 8) , (register, 0x8, 8)]
[(register, 0x0, 4) COPY (const, 0x0, 4)]
[ ---  BRANCH (ram, 0x12642b, 1)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x10, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000720, 8), (unique, 0x10000720, 8) INT_ADD (unique, 0x10000718, 8) , (const, 0x1, 8), (unique, 0x10000718, 8) CAST (unique, 0xbd80, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000730, 8) , (unique, 0xbb00, 1), (unique, 0x10000730, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x1, 8) , (const, 0x4, 8), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x10000728, 8), (unique, 0x10000728, 8) CAST (unique, 0xbd80, 8)]
[ ---  CBRANCH (ram, 0x126425, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (unique, 0x3100, 8) , (register, 0x8, 8), (unique, 0x3100, 8) CAST (unique, 0x10000720, 8), (unique, 0x10000720, 8) INT_ADD (unique, 0x10000718, 8) , (const, 0x1, 8), (unique, 0x10000718, 8) CAST (unique, 0xbd80, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x10, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000740, 8), (unique, 0x10000740, 8) INT_ADD (unique, 0x10000738, 8) , (const, 0x2, 8), (unique, 0x10000738, 8) CAST (unique, 0xbd80, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0xbb00, 1), (unique, 0x3100, 8) CAST (unique, 0x10000760, 8), (unique, 0x10000760, 8) INT_ADD (unique, 0x10000758, 8) , (const, 0x5, 8), (unique, 0x10000758, 8) CAST (unique, 0xbd80, 8), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000750, 8), (unique, 0x10000750, 8) INT_ADD (unique, 0x10000748, 8) , (const, 0x1, 8), (unique, 0x10000748, 8) CAST (unique, 0xbd80, 8)]
[ ---  CBRANCH (ram, 0x126425, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (unique, 0x3100, 8) , (register, 0x8, 8), (unique, 0x3100, 8) CAST (unique, 0x10000740, 8), (unique, 0x10000740, 8) INT_ADD (unique, 0x10000738, 8) , (const, 0x2, 8), (unique, 0x10000738, 8) CAST (unique, 0xbd80, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x10, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000770, 8), (unique, 0x10000770, 8) INT_ADD (unique, 0x10000768, 8) , (const, 0x3, 8), (unique, 0x10000768, 8) CAST (unique, 0xbd80, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0xbb00, 1), (unique, 0x3100, 8) CAST (unique, 0x10000790, 8), (unique, 0x10000790, 8) INT_ADD (unique, 0x10000788, 8) , (const, 0x6, 8), (unique, 0x10000788, 8) CAST (unique, 0xbd80, 8), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000780, 8), (unique, 0x10000780, 8) INT_ADD (unique, 0x10000778, 8) , (const, 0x2, 8), (unique, 0x10000778, 8) CAST (unique, 0xbd80, 8)]
[ ---  CBRANCH (ram, 0x126425, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (unique, 0x3100, 8) , (register, 0x8, 8), (unique, 0x3100, 8) CAST (unique, 0x10000770, 8), (unique, 0x10000770, 8) INT_ADD (unique, 0x10000768, 8) , (const, 0x3, 8), (unique, 0x10000768, 8) CAST (unique, 0xbd80, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x10, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x1, 8) , (const, 0x4, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0xbb00, 1), (unique, 0x3100, 8) CAST (unique, 0x100007b0, 8), (unique, 0x100007b0, 8) INT_ADD (unique, 0x100007a8, 8) , (const, 0x7, 8), (unique, 0x100007a8, 8) CAST (unique, 0xbd80, 8), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100007a0, 8), (unique, 0x100007a0, 8) INT_ADD (unique, 0x10000798, 8) , (const, 0x3, 8), (unique, 0x10000798, 8) CAST (unique, 0xbd80, 8)]
[ ---  CBRANCH (ram, 0x126425, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (unique, 0x3100, 8) , (register, 0x8, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x1, 8) , (const, 0x4, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x10, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100007c0, 8), (unique, 0x100007c0, 8) INT_ADD (unique, 0x100007b8, 8) , (const, 0x5, 8), (unique, 0x100007b8, 8) CAST (unique, 0xbd80, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100007d0, 8) , (unique, 0xbb00, 1), (unique, 0x100007d0, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x2, 8) , (const, 0x4, 8), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x100007c8, 8), (unique, 0x100007c8, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x1, 8) , (const, 0x4, 8)]
[ ---  CBRANCH (ram, 0x126425, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (unique, 0x3100, 8) , (register, 0x8, 8), (unique, 0x3100, 8) CAST (unique, 0x100007c0, 8), (unique, 0x100007c0, 8) INT_ADD (unique, 0x100007b8, 8) , (const, 0x5, 8), (unique, 0x100007b8, 8) CAST (unique, 0xbd80, 8)]
[(unique, 0x100003f4, 8) COPY (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100007e0, 8), (unique, 0x100007e0, 8) INT_ADD (unique, 0x100007d8, 8) , (const, 0x9, 8), (unique, 0x100007d8, 8) CAST (unique, 0xbd80, 8)]
[(unique, 0x1000045c, 8) COPY (unique, 0x3100, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x10, 8) , (register, 0x8, 8), (register, 0x8, 8) CAST (unique, 0x100007f0, 8), (unique, 0x100007f0, 8) INT_ADD (unique, 0x100007e8, 8) , (const, 0x1, 8), (unique, 0x100007e8, 8) CAST (register, 0x8, 8), (register, 0x8, 8) MULTIEQUAL (unique, 0x1000045c, 8) , (unique, 0x10000464, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x0, 8) , (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x100007f8, 8), (unique, 0x100007f8, 8) CAST (register, 0x8, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x100003f4, 8) , (unique, 0x100003fc, 8), (register, 0x8, 8) MULTIEQUAL (unique, 0x1000045c, 8) , (unique, 0x10000464, 8)]
[(unique, 0x100003fc, 8) COPY (register, 0x0, 8), (register, 0x0, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x1, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x100003f4, 8) , (unique, 0x100003fc, 8)]
[(unique, 0x10000464, 8) COPY (register, 0x8, 8), (register, 0x8, 8) CAST (unique, 0x100007f0, 8), (unique, 0x100007f0, 8) INT_ADD (unique, 0x100007e8, 8) , (const, 0x1, 8), (unique, 0x100007e8, 8) CAST (register, 0x8, 8), (register, 0x8, 8) MULTIEQUAL (unique, 0x1000045c, 8) , (unique, 0x10000464, 8)]
[ ---  CBRANCH (ram, 0x12640c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x8, 8) , (register, 0x8, 8), (register, 0x8, 8) CAST (unique, 0x100007f0, 8), (unique, 0x100007f0, 8) INT_ADD (unique, 0x100007e8, 8) , (const, 0x1, 8), (unique, 0x100007e8, 8) CAST (register, 0x8, 8), (register, 0x8, 8) MULTIEQUAL (unique, 0x1000045c, 8) , (unique, 0x10000464, 8)]
[(register, 0x0, 4) INT_SUB (register, 0x0, 4) , (register, 0x30, 4), (register, 0x30, 4) SUBPIECE (unique, 0x3100, 8) , (const, 0x0, 4), (register, 0x0, 4) INT_ADD (unique, 0x10000260, 4) , (const, 0x1, 4), (unique, 0x10000260, 4) SUBPIECE (register, 0x8, 8) , (const, 0x0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0xbd80, 8) , (register, 0x0, 4), (register, 0x0, 4) INT_OR (register, 0x0, 4) , (register, 0x8, 4), (register, 0x8, 4) INT_AND (unique, 0xbc80, 4) , (const, 0xfffffff8, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0xbd80, 8), (register, 0x0, 4) MULTIEQUAL (register, 0x0, 4) , (register, 0x0, 4)]
[ ---  BRANCH (ram, 0x12615b, 1)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000800, 8), (unique, 0x10000800, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x30, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x10, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x30, 8)]
[ ---  BRANCH (ram, 0x125f69, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffff74, 4) MULTIEQUAL (stack, 0xffffffffffffff74, 4) , (stack, 0xffffffffffffff74, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x80, 8) , (register, 0xb0, 8), (register, 0xb0, 8) MULTIEQUAL (unique, 0x100004dc, 8) , (register, 0xb0, 8)]
[ ---  BRANCH (ram, 0x12615b, 1)]
[(stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(register, 0x0, 4) COPY (stack, 0xffffffffffffff74, 4), (stack, 0xffffffffffffff74, 4) MULTIEQUAL (stack, 0xffffffffffffff74, 4) , (stack, 0xffffffffffffff74, 4) , (stack, 0xffffffffffffff74, 4) , (stack, 0xffffffffffffff74, 4) , (stack, 0xffffffffffffff74, 4) , (stack, 0xffffffffffffff74, 4) , (stack, 0xffffffffffffff74, 4) , (register, 0x0, 4)]
[ ---  CBRANCH (ram, 0x1264b1, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffffc0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10000808, 8), (unique, 0x10000808, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (unique, 0xbd80, 8) , (unique, 0xbd80, 8) , (unique, 0xbd80, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x1bb, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x1bb, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1bb, 4)]
[ ---  CALL (ram, 0x234c80, 8)]
[ ---  RETURN (const, 0x1, 4)]
