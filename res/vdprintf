[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffdb8, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffdb8, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffdb8, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffdb8, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffdb8, 8)]
[ ---  CALL (ram, 0x17ba60, 8) , (register, 0x20, 8) , (const, 0x8000, 8) , (const, 0x0, 8) , (unique, 0x3c80, 8) , (unique, 0x100000dc, 8), (unique, 0x100000dc, 8) PTRSUB (const, 0x0, 8) , (const, 0x4c2260, 8), (unique, 0x3c80, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffe98, 8), (register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffdb8, 8)]
[ ---  CALL (ram, 0x179740, 8) , (register, 0x20, 8), (register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffdb8, 8)]
[(stack, 0xfffffffffffffdb8, 4) INDIRECT (stack, 0xfffffffffffffdb8, 4) , (const, 0x3c, 4), (stack, 0xfffffffffffffdb8, 4) INDIRECT (stack, 0xfffffffffffffdb8, 4) , (const, 0x36, 4), (stack, 0xfffffffffffffdb8, 4) INDIRECT (stack, 0xfffffffffffffdb8, 4) , (const, 0x2e, 4)]
[(stack, 0xfffffffffffffdd8, 8) INDIRECT (stack, 0xfffffffffffffdd8, 8) , (const, 0x3c, 4), (stack, 0xfffffffffffffdd8, 8) INDIRECT (stack, 0xfffffffffffffdd8, 8) , (const, 0x36, 4), (stack, 0xfffffffffffffdd8, 8) INDIRECT (stack, 0xfffffffffffffdd8, 8) , (const, 0x2e, 4)]
[(stack, 0xfffffffffffffde0, 8) INDIRECT (stack, 0xfffffffffffffde0, 8) , (const, 0x3c, 4), (stack, 0xfffffffffffffde0, 8) INDIRECT (stack, 0xfffffffffffffde0, 8) , (const, 0x36, 4), (stack, 0xfffffffffffffde0, 8) INDIRECT (stack, 0xfffffffffffffde0, 8) , (const, 0x2e, 4)]
[(stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0x3c, 4), (stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0x36, 4), (stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0x2e, 4), (stack, 0xfffffffffffffe40, 8) COPY (const, 0x0, 8)]
[(stack, 0xfffffffffffffe58, 8) INDIRECT (stack, 0xfffffffffffffe58, 8) , (const, 0x3c, 4), (stack, 0xfffffffffffffe58, 8) INDIRECT (stack, 0xfffffffffffffe58, 8) , (const, 0x36, 4), (stack, 0xfffffffffffffe58, 8) INDIRECT (stack, 0xfffffffffffffe58, 8) , (const, 0x2e, 4)]
[(stack, 0xfffffffffffffe78, 4) INDIRECT (stack, 0xfffffffffffffe78, 4) , (const, 0x3c, 4), (stack, 0xfffffffffffffe78, 4) INDIRECT (stack, 0xfffffffffffffe78, 4) , (const, 0x36, 4), (stack, 0xfffffffffffffe78, 4) INDIRECT (stack, 0xfffffffffffffe78, 4) , (const, 0x2e, 4)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x3c, 4), (stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x36, 4), (stack, 0xfffffffffffffe90, 8) PTRSUB (const, 0x0, 8) , (const, 0x4c26e0, 8)]
[ ---  CBRANCH (ram, 0x17687d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x17a240, 8) , (register, 0x20, 8) , (register, 0x38, 4), (register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffdb8, 8)]
[(stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0x11b, 4)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x11b, 4)]
[ ---  CALL (ram, 0x17a900, 8) , (register, 0x20, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 4), (register, 0x0, 4) COPY (const, 0xffffffff, 4)]
[(stack, 0xfffffffffffffdb8, 4) INDIRECT (register, 0x0, 4) , (const, 0x65, 4), (register, 0x0, 4) INT_OR (register, 0x0, 4) , (const, 0x44, 4), (register, 0x0, 4) INT_AND (stack, 0xfffffffffffffdb8, 4) , (const, 0xffffeff3, 4)]
[(stack, 0xfffffffffffffdd8, 8) INDIRECT (stack, 0xfffffffffffffdd8, 8) , (const, 0x65, 4)]
[(stack, 0xfffffffffffffde0, 8) INDIRECT (stack, 0xfffffffffffffde0, 8) , (const, 0x65, 4)]
[(stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0x65, 4)]
[(stack, 0xfffffffffffffe58, 8) INDIRECT (stack, 0xfffffffffffffe58, 8) , (const, 0x65, 4)]
[(stack, 0xfffffffffffffe78, 4) INDIRECT (stack, 0xfffffffffffffe78, 4) , (const, 0x65, 4)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x65, 4)]
[ ---  CBRANCH (ram, 0x176858, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0xffffffff, 4), (register, 0x0, 4) CALL (ram, 0x14d130, 8) , (register, 0x20, 8) , (register, 0x30, 8) , (register, 0x10, 8)]
[ ---  CBRANCH (ram, 0x176860, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (stack, 0xfffffffffffffe78, 4) , (const, 0x1, 4)]
[(stack, 0xfffffffffffffdb8, 4) INDIRECT (stack, 0xfffffffffffffdb8, 4) , (const, 0x10c, 4)]
[(stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0x10c, 4)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x10c, 4)]
[(register, 0x0, 4) CALL (ram, 0x17a2c0, 8) , (register, 0x20, 8) , (stack, 0xfffffffffffffdd8, 8) , (register, 0x10, 8), (register, 0x10, 8) PTRADD (stack, 0xfffffffffffffde0, 8) , (unique, 0x100000c0, 8) , (const, 0x1, 8), (unique, 0x100000c0, 8) INT_2COMP (unique, 0x1000012e, 8), (unique, 0x1000012e, 8) CAST (stack, 0xfffffffffffffdd8, 8)]
[ ---  BRANCH (ram, 0x176831, 1)]
[(stack, 0xfffffffffffffdb8, 4) INDIRECT (stack, 0xfffffffffffffdb8, 4) , (const, 0xb9, 4)]
[(stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0xb9, 4)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0xb9, 4)]
[(register, 0x0, 4) CALL (ram, 0x174600, 8) , (register, 0x20, 8) , (unique, 0xbd80, 8) , (register, 0x10, 8), (register, 0x10, 8) INT_SRIGHT (register, 0x10, 8) , (const, 0x2, 4), (register, 0x10, 8) INT_SUB (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000014e, 8), (unique, 0x1000014e, 8) INT_ADD (unique, 0x10000146, 8) , (const, 0x20, 8), (unique, 0x10000146, 8) CAST (stack, 0xfffffffffffffe58, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000013e, 8), (unique, 0x1000013e, 8) INT_ADD (unique, 0x10000136, 8) , (const, 0x18, 8), (unique, 0x10000136, 8) CAST (stack, 0xfffffffffffffe58, 8)]
[(stack, 0xfffffffffffffe90, 8) MULTIEQUAL (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8)]
[(stack, 0xfffffffffffffe40, 8) MULTIEQUAL (stack, 0xfffffffffffffe40, 8) , (stack, 0xfffffffffffffe40, 8)]
[(stack, 0xfffffffffffffdb8, 4) MULTIEQUAL (stack, 0xfffffffffffffdb8, 4) , (stack, 0xfffffffffffffdb8, 4)]
[ ---  CBRANCH (ram, 0x176858, 1) , (register, 0x0, 1), (register, 0x0, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0xffffffff, 4), (register, 0x0, 4) MULTIEQUAL (register, 0x0, 4) , (register, 0x0, 4)]
[(stack, 0xfffffffffffffe90, 8) MULTIEQUAL (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8)]
[(stack, 0xfffffffffffffe40, 8) MULTIEQUAL (stack, 0xfffffffffffffe40, 8) , (stack, 0xfffffffffffffe40, 8)]
[(stack, 0xfffffffffffffdb8, 4) MULTIEQUAL (stack, 0xfffffffffffffdb8, 4) , (stack, 0xfffffffffffffdb8, 4)]
[(register, 0x28, 4) COPY (const, 0xffffffff, 4)]
[ ---  BRANCH (ram, 0x176835, 1)]
[(stack, 0xfffffffffffffdb8, 4) INDIRECT (stack, 0xfffffffffffffdb8, 4) , (const, 0xe1, 4), (stack, 0xfffffffffffffdb8, 4) MULTIEQUAL (stack, 0xfffffffffffffdb8, 4) , (stack, 0xfffffffffffffdb8, 4)]
[(stack, 0xfffffffffffffe40, 8) INDIRECT (stack, 0xfffffffffffffe40, 8) , (const, 0xe1, 4), (stack, 0xfffffffffffffe40, 8) MULTIEQUAL (stack, 0xfffffffffffffe40, 8) , (stack, 0xfffffffffffffe40, 8)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0xe1, 4), (stack, 0xfffffffffffffe90, 8) MULTIEQUAL (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8)]
[ ---  CALLIND (unique, 0xbd80, 8) , (register, 0x20, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000156, 8), (unique, 0x10000156, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (stack, 0xfffffffffffffe90, 8) , (const, 0x10, 8) , (const, 0x1, 8), (stack, 0xfffffffffffffe90, 8) MULTIEQUAL (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 4), (register, 0x0, 4) COPY (register, 0x28, 4), (register, 0x28, 4) MULTIEQUAL (register, 0x0, 4) , (register, 0x28, 4)]
