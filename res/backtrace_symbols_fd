[ ---  CBRANCH (ram, 0x2158b1, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (const, 0x0, 4) , (register, 0x30, 4)]
[(unique, 0x3a00, 8) PTRADD (register, 0x38, 8) , (unique, 0x1000012b, 8) , (const, 0x8, 8), (unique, 0x1000012b, 8) INT_ADD (register, 0x0, 8) , (const, 0x1, 8), (register, 0x0, 8) INT_ZEXT (unique, 0x3100, 4), (unique, 0x3100, 4) INT_SUB (register, 0x30, 4) , (const, 0x1, 4)]
[(unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffef0, 8)]
[(unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff08, 8)]
[(unique, 0x3c80, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff18, 8)]
[(unique, 0x3c80, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff38, 8)]
[(unique, 0x3c80, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff18, 8)]
[ ---  BRANCH (ram, 0x21586a, 1)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x62, 4), (stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x62, 4), (stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x62, 4), (stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x62, 4), (stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x62, 4), (stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x62, 4), (stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x62, 4), (stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x62, 4), (stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x62, 4), (stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x62, 4), (stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[ ---  CBRANCH (ram, 0x2156a0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x242a00, 8) , (unique, 0xbd80, 8) , (unique, 0x3c80, 8) , (unique, 0x3800, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x18, 8), (register, 0x18, 8) MULTIEQUAL (register, 0x38, 8) , (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x215886, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffff18, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x215886, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (stack, 0xffffffffffffff18, 8)]
[(register, 0xa8, 4) COPY (const, 0x3, 4)]
[(register, 0xa0, 8) COPY (const, 0x2, 8)]
[(register, 0x28, 8) COPY (const, 0x1, 8)]
[(register, 0x80, 8) COPY (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x2157e0, 1)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x181, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x181, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x181, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x181, 4), (stack, 0xffffffffffffff38, 8) COPY (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x181, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x181, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x181, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x181, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x181, 4)]
[(register, 0x0, 8) CALL (ram, 0x18acf0, 8) , (stack, 0xffffffffffffff18, 8)]
[ ---  CBRANCH (ram, 0x2158b8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffff28, 8) , (const, 0x0, 8), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x181, 4)]
[ ---  CBRANCH (ram, 0x215920, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (stack, 0xfffffffffffffef0, 8)]
[(register, 0xa8, 4) COPY (const, 0x4, 4)]
[(register, 0xa0, 8) COPY (const, 0x3, 8)]
[(register, 0x28, 8) COPY (const, 0x2, 8)]
[(register, 0x80, 8) COPY (const, 0x1, 8)]
[ ---  BRANCH (ram, 0x2157e0, 1)]
[(stack, 0xffffffffffffff50, 8) COPY (const, 0x1, 8)]
[(register, 0xa8, 4) COPY (const, 0x8, 4)]
[(register, 0xa0, 8) COPY (const, 0x7, 8)]
[(register, 0x28, 8) COPY (const, 0x6, 8)]
[(stack, 0xffffffffffffff48, 8) COPY (const, 0x28c758, 8)]
[(register, 0x80, 8) COPY (const, 0x5, 8)]
[(stack, 0xfffffffffffffed8, 8) COPY (const, 0x4, 8)]
[(stack, 0xfffffffffffffed0, 8) COPY (const, 0x3, 8)]
[(register, 0x0, 8) COPY (const, 0x2, 8)]
[(unique, 0x100003e3, 8) COPY (unique, 0xbd80, 8)]
[ ---  BRANCH (ram, 0x215746, 1)]
[(register, 0xa8, 4) COPY (const, 0x9, 4)]
[(register, 0xa0, 8) COPY (const, 0x8, 8)]
[(register, 0x28, 8) COPY (const, 0x7, 8)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x1a1, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x1a1, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x1a1, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x1a1, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (register, 0x0, 8) , (const, 0x1a1, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x1a1, 4), (stack, 0xffffffffffffff48, 8) COPY (const, 0x28c758, 8)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x1a1, 4), (stack, 0xffffffffffffff50, 8) COPY (const, 0x1, 8)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x1a1, 4), (stack, 0xffffffffffffff58, 8) COPY (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x1a1, 4)]
[(register, 0x0, 8) CAST (unique, 0x100003eb, 8), (unique, 0x100003eb, 8) CALL (ram, 0x18acf0, 8) , (stack, 0xffffffffffffff28, 8)]
[(register, 0x80, 8) COPY (const, 0x6, 8)]
[(stack, 0xfffffffffffffed8, 8) COPY (const, 0x5, 8)]
[(stack, 0xfffffffffffffed0, 8) COPY (const, 0x4, 8)]
[(register, 0x0, 8) COPY (const, 0x3, 8)]
[(unique, 0x100003db, 8) COPY (stack, 0xffffffffffffff30, 8), (stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x1a1, 4)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (register, 0x0, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (register, 0x0, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(register, 0xa8, 4) MULTIEQUAL (register, 0xa8, 4) , (register, 0xa8, 4)]
[(register, 0xa0, 8) MULTIEQUAL (register, 0xa0, 8) , (register, 0xa0, 8)]
[(register, 0x80, 8) MULTIEQUAL (register, 0x80, 8) , (register, 0x80, 8)]
[(register, 0x28, 8) MULTIEQUAL (register, 0x28, 8) , (register, 0x28, 8)]
[(register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[(register, 0x30, 8) PTRSUB (const, 0x0, 8) , (const, 0x28d71b, 8)]
[(register, 0x38, 8) INT_SUB (stack, 0xffffffffffffff30, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x18, 8), (stack, 0xffffffffffffff30, 8) MULTIEQUAL (unique, 0x100003db, 8) , (unique, 0x100003e3, 8)]
[ ---  CBRANCH (ram, 0x215768, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESSEQUAL (stack, 0xffffffffffffff30, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x18, 8), (stack, 0xffffffffffffff30, 8) MULTIEQUAL (unique, 0x100003db, 8) , (unique, 0x100003e3, 8)]
[(register, 0x8, 8) INT_SUB (unique, 0xbd80, 8) , (stack, 0xffffffffffffff30, 8)]
[(register, 0x30, 8) PTRSUB (const, 0x0, 8) , (const, 0x28d717, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100003ab, 8) , (register, 0x30, 8), (unique, 0x100003ab, 8) PTRSUB (unique, 0x3e80, 8) , (const, 0x0, 8), (unique, 0x3e80, 8) PTRADD (unique, 0x10000173, 8) , (register, 0x0, 8) , (const, 0x10, 8), (unique, 0x10000173, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff38, 8), (register, 0x30, 8) MULTIEQUAL (register, 0x30, 8) , (register, 0x30, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3e80, 8) , (const, 0x3, 8), (unique, 0x3e80, 8) PTRADD (unique, 0x10000193, 8) , (unique, 0x100002fb, 8) , (const, 0x8, 8), (unique, 0x100002fb, 8) INT_ADD (unique, 0x100002f3, 8) , (const, 0xffffffffffffffff, 8), (unique, 0x100002f3, 8) INT_MULT (register, 0x0, 8) , (const, 0x2, 8), (unique, 0x10000193, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff48, 8)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x214, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x214, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x214, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x214, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100003b3, 8) , (register, 0x0, 8), (unique, 0x100003b3, 8) PTRSUB (unique, 0x3e80, 8) , (const, 0x0, 8), (unique, 0x3e80, 8) PTRADD (unique, 0x100001b3, 8) , (stack, 0xfffffffffffffed0, 8) , (const, 0x10, 8), (unique, 0x100001b3, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff38, 8), (register, 0x0, 8) CAST (unique, 0x100003f3, 8), (unique, 0x100003f3, 8) CALL (ram, 0x14a670, 8) , (register, 0x38, 8) , (unique, 0x3c80, 8) , (const, 0x10, 8) , (const, 0x0, 8), (register, 0x38, 8) MULTIEQUAL (register, 0x38, 8) , (register, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3e80, 8) , (register, 0x8, 8), (unique, 0x3e80, 8) PTRADD (unique, 0x100001d3, 8) , (unique, 0x1000031b, 8) , (const, 0x8, 8), (unique, 0x1000031b, 8) INT_ADD (unique, 0x10000313, 8) , (const, 0xffffffffffffffff, 8), (unique, 0x10000313, 8) INT_MULT (stack, 0xfffffffffffffed0, 8) , (const, 0x2, 8), (unique, 0x100001d3, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff48, 8), (register, 0x8, 8) CAST (unique, 0x1000040b, 8), (unique, 0x1000040b, 8) INT_SUB (unique, 0x100003fb, 8) , (unique, 0x10000403, 8), (unique, 0x10000403, 8) CAST (register, 0x0, 8), (unique, 0x100003fb, 8) CAST (unique, 0x3c80, 8), (register, 0x0, 8) CAST (unique, 0x100003f3, 8), (unique, 0x100003f3, 8) CALL (ram, 0x14a670, 8) , (register, 0x38, 8) , (unique, 0x3c80, 8) , (const, 0x10, 8) , (const, 0x0, 8), (register, 0x38, 8) MULTIEQUAL (register, 0x38, 8) , (register, 0x8, 8)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x283, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x250, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x214, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100003bb, 8) , (unique, 0x1000010b, 8), (unique, 0x100003bb, 8) PTRSUB (unique, 0x3e80, 8) , (const, 0x0, 8), (unique, 0x1000010b, 8) PTRSUB (const, 0x0, 8) , (const, 0x28dc3b, 8), (unique, 0x3e80, 8) PTRADD (unique, 0x100001f3, 8) , (stack, 0xfffffffffffffed8, 8) , (const, 0x10, 8), (unique, 0x100001f3, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x288, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x283, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x258, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x250, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x214, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x288, 4), (stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x283, 4), (stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x258, 4), (stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x250, 4), (stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x214, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x288, 4), (stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x283, 4), (stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x258, 4), (stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x250, 4), (stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x214, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x288, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x283, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x258, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x250, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x214, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x206, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x288, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x283, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x258, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x250, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x214, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x211, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x206, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3e80, 8) , (const, 0x1, 8), (unique, 0x3e80, 8) PTRADD (unique, 0x10000213, 8) , (unique, 0x1000033b, 8) , (const, 0x8, 8), (unique, 0x1000033b, 8) INT_ADD (unique, 0x10000333, 8) , (const, 0xffffffffffffffff, 8), (unique, 0x10000333, 8) INT_MULT (stack, 0xfffffffffffffed8, 8) , (const, 0x2, 8), (unique, 0x10000213, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff48, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100003c3, 8) , (unique, 0x10000113, 8), (unique, 0x100003c3, 8) PTRSUB (unique, 0x3e80, 8) , (const, 0x0, 8), (unique, 0x10000113, 8) PTRSUB (const, 0x0, 8) , (const, 0x28ec09, 8), (unique, 0x3e80, 8) PTRADD (unique, 0x10000233, 8) , (register, 0x80, 8) , (const, 0x10, 8), (unique, 0x10000233, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff38, 8), (register, 0x80, 8) MULTIEQUAL (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3e80, 8) , (const, 0x3, 8), (unique, 0x3e80, 8) PTRADD (unique, 0x10000253, 8) , (unique, 0x1000035b, 8) , (const, 0x8, 8), (unique, 0x1000035b, 8) INT_ADD (unique, 0x10000353, 8) , (const, 0xffffffffffffffff, 8), (unique, 0x10000353, 8) INT_MULT (register, 0x80, 8) , (const, 0x2, 8), (unique, 0x10000253, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff48, 8), (register, 0x80, 8) MULTIEQUAL (register, 0x80, 8) , (register, 0x80, 8) , (register, 0x80, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100003cb, 8) , (register, 0x0, 8), (unique, 0x100003cb, 8) PTRSUB (unique, 0x3e80, 8) , (const, 0x0, 8), (unique, 0x3e80, 8) PTRADD (unique, 0x1000027b, 8) , (register, 0x28, 8) , (const, 0x10, 8), (unique, 0x1000027b, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff38, 8), (register, 0x0, 8) CAST (unique, 0x10000413, 8), (unique, 0x10000413, 8) CALL (ram, 0x14a670, 8) , (unique, 0xbd80, 8) , (unique, 0x3800, 8) , (const, 0x10, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x18, 8), (register, 0x28, 8) MULTIEQUAL (register, 0x28, 8) , (register, 0x28, 8) , (register, 0x28, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3e80, 8) , (register, 0x8, 8), (unique, 0x3e80, 8) PTRADD (unique, 0x1000029b, 8) , (unique, 0x1000037b, 8) , (const, 0x8, 8), (unique, 0x1000037b, 8) INT_ADD (unique, 0x10000373, 8) , (const, 0xffffffffffffffff, 8), (unique, 0x10000373, 8) INT_MULT (register, 0x28, 8) , (const, 0x2, 8), (unique, 0x1000029b, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff48, 8), (register, 0x8, 8) PTRADD (unique, 0x3800, 8) , (unique, 0x100000c7, 8) , (const, 0x1, 8), (unique, 0x100000c7, 8) INT_2COMP (unique, 0x1000041b, 8), (unique, 0x1000041b, 8) CAST (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10000413, 8), (unique, 0x10000413, 8) CALL (ram, 0x14a670, 8) , (unique, 0xbd80, 8) , (unique, 0x3800, 8) , (const, 0x10, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x18, 8), (register, 0x28, 8) MULTIEQUAL (register, 0x28, 8) , (register, 0x28, 8) , (register, 0x28, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3e80, 8) , (const, 0x2, 8), (unique, 0x3e80, 8) PTRADD (unique, 0x100002bb, 8) , (unique, 0x10000393, 8) , (const, 0x8, 8), (unique, 0x10000393, 8) INT_ADD (unique, 0x1000038b, 8) , (const, 0xffffffffffffffff, 8), (unique, 0x1000038b, 8) INT_MULT (register, 0xa0, 8) , (const, 0x2, 8), (unique, 0x100002bb, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff48, 8), (register, 0xa0, 8) MULTIEQUAL (register, 0xa0, 8) , (register, 0xa0, 8) , (register, 0xa0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100003d3, 8) , (unique, 0x1000011b, 8), (unique, 0x100003d3, 8) PTRSUB (unique, 0x3e80, 8) , (const, 0x0, 8), (unique, 0x1000011b, 8) PTRSUB (const, 0x0, 8) , (const, 0x28ec0d, 8), (unique, 0x3e80, 8) PTRADD (unique, 0x100002db, 8) , (register, 0xa0, 8) , (const, 0x10, 8), (unique, 0x100002db, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff38, 8), (register, 0xa0, 8) MULTIEQUAL (register, 0xa0, 8) , (register, 0xa0, 8) , (register, 0xa0, 8)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x13b, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x112, 4), (stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x13b, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x112, 4), (stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x13b, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x112, 4), (stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x13b, 4), (stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x112, 4), (stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x13b, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x112, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0xb4, 4), (stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x13b, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x112, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0xe1, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0xb4, 4), (stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (register, 0x0, 8)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x13b, 4), (stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x11b, 4), (stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x112, 4), (stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0xe1, 4), (stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0xb4, 4), (stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x13b, 4), (stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x12e, 4), (stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x11b, 4), (stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x112, 4), (stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0xe1, 4), (stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0xb4, 4), (stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x13b, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x138, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x12e, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x11b, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x112, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0xe1, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0xb4, 4), (stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x13b, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x138, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x133, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x12e, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x11b, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x112, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0xe1, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0xb4, 4), (stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[ ---  CALL (ram, 0x1fc710, 8) , (register, 0x10, 4) , (unique, 0x3c80, 8) , (register, 0xa8, 4), (register, 0xa8, 4) MULTIEQUAL (register, 0xa8, 4) , (register, 0xa8, 4) , (register, 0xa8, 4)]
[ ---  CBRANCH (ram, 0x2158a0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x3a00, 8) , (register, 0x18, 8), (register, 0x18, 8) PTRADD (register, 0x18, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[ ---  RETURN (const, 0x0, 8)]
