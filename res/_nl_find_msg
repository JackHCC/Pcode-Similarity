[(stack, 0xffffffffffffff9c, 4) SUBPIECE (stack, 0xffffffffffffff98, 8) , (const, 0x4, 4)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff58, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff58, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff58, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff58, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff58, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff58, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff58, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff58, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff58, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff58, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff58, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff58, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff58, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff58, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff78, 8) COPY (register, 0x38, 8)]
[(stack, 0xffffffffffffff60, 8) COPY (register, 0x30, 8)]
[(stack, 0xffffffffffffff68, 4) COPY (register, 0x8, 4)]
[(stack, 0xffffffffffffff58, 8) COPY (register, 0x80, 8)]
[(stack, 0xffffffffffffffc0, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10000ca8, 8), (unique, 0x10000ca8, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8)]
[ ---  CBRANCH (ram, 0x403720, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (unique, 0xbc80, 4) , (const, 0x1, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000ca0, 8), (unique, 0x10000ca0, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x38, 8) , (const, 0x8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xce7, 4)]
[(ram, 0x4c4e38, 8) INDIRECT (ram, 0x4c4e38, 8) , (const, 0xce7, 4)]
[(ram, 0x4c4f30, 8) INDIRECT (ram, 0x4c4f30, 8) , (const, 0xce7, 4)]
[(ram, 0x4c4f48, 8) INDIRECT (ram, 0x4c4f48, 8) , (const, 0xce7, 4)]
[(ram, 0x4c4f60, 8) INDIRECT (ram, 0x4c4f60, 8) , (const, 0xce7, 4)]
[(ram, 0x4c76b8, 8) INDIRECT (ram, 0x4c76b8, 8) , (const, 0xce7, 4)]
[(ram, 0x4c76c0, 4) INDIRECT (ram, 0x4c76c0, 4) , (const, 0xce7, 4)]
[(ram, 0x4c76c8, 8) INDIRECT (ram, 0x4c76c8, 8) , (const, 0xce7, 4)]
[(ram, 0x4c76d0, 8) INDIRECT (ram, 0x4c76d0, 8) , (const, 0xce7, 4)]
[(ram, 0x4c76d8, 4) INDIRECT (ram, 0x4c76d8, 4) , (const, 0xce7, 4)]
[(ram, 0x4c76e0, 8) INDIRECT (ram, 0x4c76e0, 8) , (const, 0xce7, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0xce7, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0xce7, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0xce7, 4)]
[(stack, 0xffffffffffffff6c, 4) INDIRECT (stack, 0xffffffffffffff6c, 4) , (const, 0xce7, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0xce7, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0xce7, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0xce7, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0xce7, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0xce7, 4)]
[(stack, 0xffffffffffffff9c, 4) INDIRECT (stack, 0xffffffffffffff9c, 4) , (const, 0xce7, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0xce7, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0xce7, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0xce7, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xce7, 4)]
[ ---  CALL (ram, 0x404d20, 8)]
[ ---  BRANCH (ram, 0x40349c, 1)]
[(stack, 0xffffffffffffff9c, 4) MULTIEQUAL (stack, 0xffffffffffffff9c, 4) , (stack, 0xffffffffffffff9c, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff6c, 4) MULTIEQUAL (stack, 0xffffffffffffff6c, 4) , (stack, 0xffffffffffffff6c, 4)]
[(stack, 0xffffffffffffff68, 4) MULTIEQUAL (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(ram, 0x4c76e0, 8) MULTIEQUAL (ram, 0x4c76e0, 8) , (ram, 0x4c76e0, 8)]
[(ram, 0x4c76d8, 4) MULTIEQUAL (ram, 0x4c76d8, 4) , (ram, 0x4c76d8, 4)]
[(ram, 0x4c76d0, 8) MULTIEQUAL (ram, 0x4c76d0, 8) , (ram, 0x4c76d0, 8)]
[(ram, 0x4c76c8, 8) MULTIEQUAL (ram, 0x4c76c8, 8) , (ram, 0x4c76c8, 8)]
[(ram, 0x4c76c0, 4) MULTIEQUAL (ram, 0x4c76c0, 4) , (ram, 0x4c76c0, 4)]
[(ram, 0x4c76b8, 8) MULTIEQUAL (ram, 0x4c76b8, 8) , (ram, 0x4c76b8, 8)]
[(ram, 0x4c4f60, 8) MULTIEQUAL (ram, 0x4c4f60, 8) , (ram, 0x4c4f60, 8)]
[(ram, 0x4c4f48, 8) MULTIEQUAL (ram, 0x4c4f48, 8) , (ram, 0x4c4f48, 8)]
[(ram, 0x4c4f30, 8) MULTIEQUAL (ram, 0x4c4f30, 8) , (ram, 0x4c4f30, 8)]
[(ram, 0x4c4e38, 8) MULTIEQUAL (ram, 0x4c4e38, 8) , (ram, 0x4c4e38, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x10000afe, 8) COPY (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x403608, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000cb0, 8), (unique, 0x10000cb0, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (stack, 0xffffffffffffff78, 8) , (const, 0x10, 8) , (const, 0x1, 8), (stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffffa0, 8) CAST (unique, 0x10000cd8, 8), (unique, 0x10000cd8, 8) INT_OR (unique, 0x100004e3, 8) , (unique, 0x10000cd0, 8), (unique, 0x10000cd0, 8) CAST (unique, 0x100004eb, 8), (unique, 0x100004eb, 8) CAST (unique, 0x10000cc8, 8), (unique, 0x10000cc8, 8) INT_ZEXT (unique, 0xbc80, 4), (unique, 0x100004e3, 8) INT_AND (unique, 0x10000cc0, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10000cc0, 8) CAST (stack, 0xffffffffffffffa0, 8), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000cb8, 8), (unique, 0x10000cb8, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x5, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x403640, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbe00, 8) , (const, 0x0, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0xc, 8) , (const, 0x8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x79, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x71, 4)]
[(ram, 0x4c4e38, 8) INDIRECT (ram, 0x4c4e38, 8) , (const, 0x79, 4), (ram, 0x4c4e38, 8) INDIRECT (ram, 0x4c4e38, 8) , (const, 0x71, 4)]
[(ram, 0x4c4f30, 8) INDIRECT (ram, 0x4c4f30, 8) , (const, 0x79, 4), (ram, 0x4c4f30, 8) INDIRECT (ram, 0x4c4f30, 8) , (const, 0x71, 4)]
[(ram, 0x4c4f48, 8) INDIRECT (ram, 0x4c4f48, 8) , (const, 0x79, 4), (ram, 0x4c4f48, 8) INDIRECT (ram, 0x4c4f48, 8) , (const, 0x71, 4)]
[(ram, 0x4c4f60, 8) INDIRECT (ram, 0x4c4f60, 8) , (const, 0x79, 4), (ram, 0x4c4f60, 8) INDIRECT (ram, 0x4c4f60, 8) , (const, 0x71, 4)]
[(ram, 0x4c76b8, 8) INDIRECT (ram, 0x4c76b8, 8) , (const, 0x79, 4), (ram, 0x4c76b8, 8) INDIRECT (ram, 0x4c76b8, 8) , (const, 0x71, 4)]
[(ram, 0x4c76c0, 4) INDIRECT (ram, 0x4c76c0, 4) , (const, 0x79, 4), (ram, 0x4c76c0, 4) INDIRECT (ram, 0x4c76c0, 4) , (const, 0x71, 4)]
[(ram, 0x4c76c8, 8) INDIRECT (ram, 0x4c76c8, 8) , (const, 0x79, 4), (ram, 0x4c76c8, 8) INDIRECT (ram, 0x4c76c8, 8) , (const, 0x71, 4)]
[(ram, 0x4c76d0, 8) INDIRECT (ram, 0x4c76d0, 8) , (const, 0x79, 4), (ram, 0x4c76d0, 8) INDIRECT (ram, 0x4c76d0, 8) , (const, 0x71, 4)]
[(ram, 0x4c76d8, 4) INDIRECT (ram, 0x4c76d8, 4) , (const, 0x79, 4), (ram, 0x4c76d8, 4) INDIRECT (ram, 0x4c76d8, 4) , (const, 0x71, 4)]
[(ram, 0x4c76e0, 8) INDIRECT (ram, 0x4c76e0, 8) , (const, 0x79, 4), (ram, 0x4c76e0, 8) INDIRECT (ram, 0x4c76e0, 8) , (const, 0x71, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x79, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x71, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x79, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x71, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x79, 4), (stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x71, 4)]
[(stack, 0xffffffffffffff6c, 4) INDIRECT (stack, 0xffffffffffffff6c, 4) , (const, 0x79, 4), (stack, 0xffffffffffffff6c, 4) INDIRECT (stack, 0xffffffffffffff6c, 4) , (const, 0x71, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x79, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x71, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x79, 4), (stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x71, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x79, 4), (stack, 0xffffffffffffff90, 8) CAST (unique, 0x10000ce8, 8), (unique, 0x10000ce8, 8) INT_OR (unique, 0x100004f3, 8) , (unique, 0x100004fb, 8), (unique, 0x100004fb, 8) INT_AND (register, 0x0, 8) , (const, 0xffffffff, 8), (unique, 0x100004f3, 8) INT_AND (unique, 0x10000ce0, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10000ce0, 8) CAST (stack, 0xffffffffffffff90, 8), (register, 0x0, 8) CALL (ram, 0x401190, 8) , (register, 0x10, 8), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x71, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x79, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x71, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x79, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x71, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x79, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x71, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x79, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x71, 4)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000cf8, 8), (unique, 0x10000cf8, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0xd, 8) , (const, 0x8, 8)]
[(stack, 0xffffffffffffff80, 8) COPY (register, 0x10, 8)]
[(register, 0x8, 4) INT_REM (register, 0x0, 4) , (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000cf0, 8), (unique, 0x10000cf0, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0xb, 8) , (const, 0x8, 8), (register, 0x0, 4) CALL (ram, 0x40f580, 8)]
[(unique, 0xbd80, 8) CAST (unique, 0x10000d00, 8), (unique, 0x10000d00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0xc, 8) , (const, 0x8, 8)]
[(stack, 0xffffffffffffff88, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10000d08, 8), (unique, 0x10000d08, 8) INT_AND (register, 0x0, 8) , (const, 0xffffffff, 8), (register, 0x0, 8) CALL (ram, 0x401190, 8) , (register, 0x10, 8)]
[(stack, 0xffffffffffffff98, 8) CAST (unique, 0x10000d14, 8), (unique, 0x10000d14, 8) INT_ADD (unique, 0x100009b2, 8) , (register, 0x0, 4), (unique, 0x100009b2, 8) INT_LEFT (unique, 0x100009aa, 8) , (const, 0x20, 8), (unique, 0x100009aa, 8) INT_SEXT (unique, 0x10000d10, 4), (unique, 0x10000d10, 4) CAST (stack, 0xffffffffffffff9c, 4), (register, 0x0, 4) INT_SUB (unique, 0xbc80, 4) , (register, 0xb8, 4), (register, 0xb8, 4) INT_ADD (unique, 0x10000193, 4) , (const, 0x1, 4), (unique, 0x10000193, 4) INT_REM (register, 0x0, 4) , (unique, 0x3100, 4), (unique, 0x3100, 4) INT_SUB (unique, 0xbc80, 4) , (const, 0x2, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000cf0, 8), (unique, 0x10000cf0, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0xb, 8) , (const, 0x8, 8), (register, 0x0, 4) CALL (ram, 0x40f580, 8), (stack, 0xffffffffffffff9c, 4) INDIRECT (stack, 0xffffffffffffff9c, 4) , (const, 0x79, 4), (stack, 0xffffffffffffff9c, 4) INDIRECT (stack, 0xffffffffffffff9c, 4) , (const, 0x71, 4)]
[(register, 0xa8, 4) INT_SUB (register, 0xb8, 4) , (unique, 0xbc80, 4), (register, 0xb8, 4) INT_ADD (unique, 0x10000193, 4) , (const, 0x1, 4), (unique, 0x10000193, 4) INT_REM (register, 0x0, 4) , (unique, 0x3100, 4), (unique, 0x3100, 4) INT_SUB (unique, 0xbc80, 4) , (const, 0x2, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000cf0, 8), (unique, 0x10000cf0, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0xb, 8) , (const, 0x8, 8), (register, 0x0, 4) CALL (ram, 0x40f580, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff6c, 4) MULTIEQUAL (stack, 0xffffffffffffff6c, 4) , (stack, 0xffffffffffffff6c, 4)]
[(stack, 0xffffffffffffff68, 4) MULTIEQUAL (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(ram, 0x4c76e0, 8) MULTIEQUAL (ram, 0x4c76e0, 8) , (ram, 0x4c76e0, 8)]
[(ram, 0x4c76d8, 4) MULTIEQUAL (ram, 0x4c76d8, 4) , (ram, 0x4c76d8, 4)]
[(ram, 0x4c76d0, 8) MULTIEQUAL (ram, 0x4c76d0, 8) , (ram, 0x4c76d0, 8)]
[(ram, 0x4c76c8, 8) MULTIEQUAL (ram, 0x4c76c8, 8) , (ram, 0x4c76c8, 8)]
[(ram, 0x4c76c0, 4) MULTIEQUAL (ram, 0x4c76c0, 4) , (ram, 0x4c76c0, 4)]
[(ram, 0x4c76b8, 8) MULTIEQUAL (ram, 0x4c76b8, 8) , (ram, 0x4c76b8, 8)]
[(ram, 0x4c4f60, 8) MULTIEQUAL (ram, 0x4c4f60, 8) , (ram, 0x4c4f60, 8)]
[(ram, 0x4c4f48, 8) MULTIEQUAL (ram, 0x4c4f48, 8) , (ram, 0x4c4f48, 8)]
[(ram, 0x4c4f30, 8) MULTIEQUAL (ram, 0x4c4f30, 8) , (ram, 0x4c4f30, 8)]
[(ram, 0x4c4e38, 8) MULTIEQUAL (ram, 0x4c4e38, 8) , (ram, 0x4c4e38, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x98, 4) MULTIEQUAL (register, 0xa8, 4) , (register, 0x98, 4)]
[(register, 0x0, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1bb80, 4), (unique, 0x1bb80, 4) INT_LEFT (unique, 0xbc80, 4) , (const, 0x18, 4), (unique, 0x1b780, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1ba00, 4), (unique, 0x1ba00, 4) INT_LEFT (unique, 0x1b980, 4) , (const, 0x8, 4), (unique, 0x1b980, 4) INT_AND (unique, 0xbc80, 4) , (const, 0xff00, 4), (unique, 0x1b780, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1b880, 4), (unique, 0x1b880, 4) INT_RIGHT (unique, 0x1b800, 4) , (const, 0x8, 4), (unique, 0x1b800, 4) INT_AND (unique, 0xbc80, 4) , (const, 0xff0000, 4), (unique, 0x1b780, 4) INT_RIGHT (unique, 0xbc80, 4) , (const, 0x18, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000d1c, 8), (unique, 0x10000d1c, 8) CAST (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (register, 0x80, 8) , (unique, 0x3300, 8) , (const, 0x1, 8), (unique, 0x3300, 8) INT_MULT (register, 0x0, 8) , (const, 0x4, 8), (register, 0x0, 8) INT_ZEXT (register, 0xb8, 4), (register, 0x80, 8) MULTIEQUAL (unique, 0xbd80, 8) , (register, 0x80, 8), (register, 0xb8, 4) MULTIEQUAL (register, 0x8, 4) , (register, 0x0, 4)]
[(unique, 0x10000bae, 4) COPY (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000d1c, 8), (unique, 0x10000d1c, 8) CAST (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (register, 0x80, 8) , (unique, 0x3300, 8) , (const, 0x1, 8), (unique, 0x3300, 8) INT_MULT (register, 0x0, 8) , (const, 0x4, 8), (register, 0x0, 8) INT_ZEXT (register, 0xb8, 4), (register, 0x80, 8) MULTIEQUAL (unique, 0xbd80, 8) , (register, 0x80, 8), (register, 0xb8, 4) MULTIEQUAL (register, 0x8, 4) , (register, 0x0, 4)]
[ ---  CBRANCH (ram, 0x403531, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbc80, 4) , (const, 0x0, 4)]
[(unique, 0x10000bb2, 4) COPY (register, 0x0, 4)]
[(unique, 0x10000b06, 8) COPY (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x403608, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x18, 4) , (const, 0x0, 4), (register, 0x18, 4) MULTIEQUAL (unique, 0x10000bae, 4) , (unique, 0x10000bb2, 4)]
[(register, 0x18, 8) CAST (unique, 0x10000d24, 8), (unique, 0x10000d24, 8) INT_ZEXT (register, 0x18, 4), (register, 0x18, 4) INT_SUB (register, 0x18, 4) , (const, 0x1, 4)]
[ ---  CBRANCH (ram, 0x4036e0, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (register, 0x18, 4) , (stack, 0xffffffffffffffa0, 4), (stack, 0xffffffffffffffa0, 4) SUBPIECE (stack, 0xffffffffffffffa0, 8) , (const, 0x0, 8), (register, 0x18, 4) INT_SUB (register, 0x18, 4) , (const, 0x1, 4)]
[ ---  CBRANCH (ram, 0x4036a0, 1) , (unique, 0x100008da, 1), (unique, 0x100008da, 1) BOOL_AND (register, 0x200, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (stack, 0xffffffffffffff88, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x0, 8), (register, 0x200, 1) INT_LESSEQUAL (stack, 0xffffffffffffff88, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10000d2c, 8), (unique, 0x10000d2c, 8) INT_ADD (register, 0x0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x9, 8) , (const, 0x8, 8), (register, 0x0, 8) INT_MULT (register, 0x0, 8) , (const, 0x10, 8), (register, 0x0, 8) INT_ZEXT (register, 0x0, 4), (register, 0x0, 4) INT_SUB (register, 0x18, 4) , (stack, 0xffffffffffffffa0, 4)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) CAST (unique, 0x10000d44, 8), (unique, 0x10000d44, 8) INT_ADD (unique, 0xbd80, 8) , (unique, 0x3300, 8), (unique, 0x3300, 8) INT_MULT (unique, 0x10000d3c, 8) , (const, 0x8, 8), (unique, 0x10000d3c, 8) CAST (register, 0x18, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x6, 8) , (const, 0x8, 8)]
[(stack, 0xffffffffffffff90, 4) SUBPIECE (stack, 0xffffffffffffff90, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x403710, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000d34, 8), (unique, 0x10000d34, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x3, 8) , (const, 0x8, 8)]
[(register, 0x0, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1bb80, 4), (unique, 0x1bb80, 4) INT_LEFT (unique, 0xbc80, 4) , (const, 0x18, 4), (unique, 0x1b780, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1ba00, 4), (unique, 0x1ba00, 4) INT_LEFT (unique, 0x1b980, 4) , (const, 0x8, 4), (unique, 0x1b980, 4) INT_AND (unique, 0xbc80, 4) , (const, 0xff00, 4), (unique, 0x1b780, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1b880, 4), (unique, 0x1b880, 4) INT_RIGHT (unique, 0x1b800, 4) , (const, 0x8, 4), (unique, 0x1b800, 4) INT_AND (unique, 0xbc80, 4) , (const, 0xff0000, 4), (unique, 0x1b780, 4) INT_RIGHT (unique, 0xbc80, 4) , (const, 0x18, 4)]
[(unique, 0x10000b36, 8) COPY (register, 0x80, 8)]
[(unique, 0x10000ba6, 4) COPY (register, 0x98, 4)]
[ ---  CBRANCH (ram, 0x4036a0, 1) , (unique, 0x100008d7, 1), (unique, 0x100008d7, 1) INT_LESSEQUAL (stack, 0xffffffffffffff90, 4) , (unique, 0x100008dd, 4), (unique, 0x100008dd, 4) MULTIEQUAL (register, 0x0, 4) , (unique, 0xbc80, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x187, 4)]
[(ram, 0x4c4e38, 8) INDIRECT (ram, 0x4c4e38, 8) , (const, 0x187, 4)]
[(ram, 0x4c4f30, 8) INDIRECT (ram, 0x4c4f30, 8) , (const, 0x187, 4)]
[(ram, 0x4c4f48, 8) INDIRECT (ram, 0x4c4f48, 8) , (const, 0x187, 4)]
[(ram, 0x4c4f60, 8) INDIRECT (ram, 0x4c4f60, 8) , (const, 0x187, 4)]
[(ram, 0x4c76b8, 8) INDIRECT (ram, 0x4c76b8, 8) , (const, 0x187, 4)]
[(ram, 0x4c76c0, 4) INDIRECT (ram, 0x4c76c0, 4) , (const, 0x187, 4)]
[(ram, 0x4c76c8, 8) INDIRECT (ram, 0x4c76c8, 8) , (const, 0x187, 4)]
[(ram, 0x4c76d0, 8) INDIRECT (ram, 0x4c76d0, 8) , (const, 0x187, 4)]
[(ram, 0x4c76d8, 4) INDIRECT (ram, 0x4c76d8, 4) , (const, 0x187, 4)]
[(ram, 0x4c76e0, 8) INDIRECT (ram, 0x4c76e0, 8) , (const, 0x187, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x187, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x187, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x187, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x187, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x187, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x187, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x187, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x187, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x187, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x187, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x187, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x187, 4)]
[(unique, 0x10000b3e, 8) COPY (stack, 0xffffffffffffff70, 8), (stack, 0xffffffffffffff70, 8) INDIRECT (unique, 0x10000c42, 8) , (const, 0x187, 4), (unique, 0x10000c42, 8) COPY (register, 0x80, 8)]
[(unique, 0x10000baa, 4) COPY (stack, 0xffffffffffffff6c, 4), (stack, 0xffffffffffffff6c, 4) INDIRECT (unique, 0x10000c3e, 4) , (const, 0x187, 4), (unique, 0x10000c3e, 4) COPY (register, 0x98, 4)]
[ ---  CBRANCH (ram, 0x4036a0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x401140, 8) , (stack, 0xffffffffffffff80, 8)]
[(register, 0x0, 8) CAST (unique, 0x10000d54, 8), (unique, 0x10000d54, 8) INT_AND (unique, 0x10000d4c, 8) , (const, 0xffffffff, 8), (unique, 0x10000d4c, 8) CAST (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff6c, 4) MULTIEQUAL (stack, 0xffffffffffffff6c, 4) , (stack, 0xffffffffffffff6c, 4) , (stack, 0xffffffffffffff6c, 4)]
[(stack, 0xffffffffffffff68, 4) MULTIEQUAL (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(ram, 0x4c76e0, 8) MULTIEQUAL (ram, 0x4c76e0, 8) , (ram, 0x4c76e0, 8) , (ram, 0x4c76e0, 8)]
[(ram, 0x4c76d8, 4) MULTIEQUAL (ram, 0x4c76d8, 4) , (ram, 0x4c76d8, 4) , (ram, 0x4c76d8, 4)]
[(ram, 0x4c76d0, 8) MULTIEQUAL (ram, 0x4c76d0, 8) , (ram, 0x4c76d0, 8) , (ram, 0x4c76d0, 8)]
[(ram, 0x4c76c8, 8) MULTIEQUAL (ram, 0x4c76c8, 8) , (ram, 0x4c76c8, 8) , (ram, 0x4c76c8, 8)]
[(ram, 0x4c76c0, 4) MULTIEQUAL (ram, 0x4c76c0, 4) , (ram, 0x4c76c0, 4) , (ram, 0x4c76c0, 4)]
[(ram, 0x4c76b8, 8) MULTIEQUAL (ram, 0x4c76b8, 8) , (ram, 0x4c76b8, 8) , (ram, 0x4c76b8, 8)]
[(ram, 0x4c4f60, 8) MULTIEQUAL (ram, 0x4c4f60, 8) , (ram, 0x4c4f60, 8) , (ram, 0x4c4f60, 8)]
[(ram, 0x4c4f48, 8) MULTIEQUAL (ram, 0x4c4f48, 8) , (ram, 0x4c4f48, 8) , (ram, 0x4c4f48, 8)]
[(ram, 0x4c4f30, 8) MULTIEQUAL (ram, 0x4c4f30, 8) , (ram, 0x4c4f30, 8) , (ram, 0x4c4f30, 8)]
[(ram, 0x4c4e38, 8) MULTIEQUAL (ram, 0x4c4e38, 8) , (ram, 0x4c4e38, 8) , (ram, 0x4c4e38, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x80, 8) MULTIEQUAL (unique, 0x10000b36, 8) , (unique, 0x10000b3e, 8) , (register, 0x80, 8)]
[(unique, 0x10000bb6, 4) COPY (register, 0x98, 4), (register, 0x98, 4) MULTIEQUAL (unique, 0x10000ba6, 4) , (unique, 0x10000baa, 4) , (register, 0x98, 4)]
[ ---  CBRANCH (ram, 0x4036af, 1) , (unique, 0x27780, 1), (unique, 0x27780, 1) INT_LESS (register, 0xb8, 4) , (stack, 0xffffffffffffff98, 4), (stack, 0xffffffffffffff98, 4) SUBPIECE (stack, 0xffffffffffffff98, 8) , (const, 0x0, 8), (stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(unique, 0x10000bba, 4) COPY (register, 0xb8, 4)]
[(register, 0x0, 4) INT_ADD (register, 0xb8, 4) , (unique, 0x100004d6, 4), (unique, 0x100004d6, 4) MULTIEQUAL (unique, 0x10000bb6, 4) , (unique, 0x10000bba, 4)]
[ ---  BRANCH (ram, 0x403520, 1)]
[(register, 0xb8, 8) COPY (const, 0x0, 8)]
[(unique, 0x10000b7e, 8) COPY (unique, 0x10000d5c, 8), (unique, 0x10000d5c, 8) CAST (unique, 0x100004eb, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (unique, 0x100005e9, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (unique, 0x100005e1, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (unique, 0x100005d9, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (unique, 0x100005d1, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (unique, 0x100004eb, 8) , (unique, 0x100005c9, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (unique, 0x100005c1, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (unique, 0x100005b9, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (unique, 0x100005b1, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (unique, 0x100005a9, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (unique, 0x100005a1, 8)]
[(stack, 0xffffffffffffff6c, 4) MULTIEQUAL (stack, 0xffffffffffffff6c, 4) , (unique, 0x1000059d, 4)]
[(stack, 0xffffffffffffff68, 4) MULTIEQUAL (stack, 0xffffffffffffff68, 4) , (unique, 0x10000599, 4)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (unique, 0x10000591, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (unique, 0x10000589, 8)]
[(ram, 0x4c76e0, 8) MULTIEQUAL (ram, 0x4c76e0, 8) , (unique, 0x10000581, 8)]
[(ram, 0x4c76d8, 4) MULTIEQUAL (ram, 0x4c76d8, 4) , (unique, 0x1000057d, 4)]
[(ram, 0x4c76d0, 8) MULTIEQUAL (ram, 0x4c76d0, 8) , (unique, 0x10000575, 8)]
[(ram, 0x4c76c8, 8) MULTIEQUAL (ram, 0x4c76c8, 8) , (unique, 0x1000056d, 8)]
[(ram, 0x4c76c0, 4) MULTIEQUAL (ram, 0x4c76c0, 4) , (unique, 0x10000569, 4)]
[(ram, 0x4c76b8, 8) MULTIEQUAL (ram, 0x4c76b8, 8) , (unique, 0x10000561, 8)]
[(ram, 0x4c4f60, 8) MULTIEQUAL (ram, 0x4c4f60, 8) , (unique, 0x10000559, 8)]
[(ram, 0x4c4f48, 8) MULTIEQUAL (ram, 0x4c4f48, 8) , (unique, 0x10000551, 8)]
[(ram, 0x4c4f30, 8) MULTIEQUAL (ram, 0x4c4f30, 8) , (unique, 0x10000549, 8)]
[(ram, 0x4c4e38, 8) MULTIEQUAL (ram, 0x4c4e38, 8) , (unique, 0x10000541, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (unique, 0x10000535, 8)]
[(unique, 0x10000b16, 8) COPY (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x403608, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (register, 0xb8, 8) , (register, 0xa8, 8), (register, 0xa8, 8) COPY (unique, 0x10000b8e, 8), (unique, 0x10000b8e, 8) MULTIEQUAL (unique, 0x10000b7e, 8) , (unique, 0x10000b86, 8), (register, 0xb8, 8) MULTIEQUAL (register, 0xb8, 8) , (register, 0xb8, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (unique, 0x100005e9, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (unique, 0x100005e1, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (unique, 0x100005d9, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (unique, 0x100005d1, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (unique, 0x100005c9, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (unique, 0x100005c1, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (unique, 0x100005b9, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (unique, 0x100005b1, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (unique, 0x100005a9, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (unique, 0x100005a1, 8)]
[(stack, 0xffffffffffffff6c, 4) MULTIEQUAL (stack, 0xffffffffffffff6c, 4) , (unique, 0x1000059d, 4)]
[(stack, 0xffffffffffffff68, 4) MULTIEQUAL (stack, 0xffffffffffffff68, 4) , (unique, 0x10000599, 4)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (unique, 0x10000591, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (unique, 0x10000589, 8)]
[(ram, 0x4c76e0, 8) MULTIEQUAL (ram, 0x4c76e0, 8) , (unique, 0x10000581, 8)]
[(ram, 0x4c76d8, 4) MULTIEQUAL (ram, 0x4c76d8, 4) , (unique, 0x1000057d, 4)]
[(ram, 0x4c76d0, 8) MULTIEQUAL (ram, 0x4c76d0, 8) , (unique, 0x10000575, 8)]
[(ram, 0x4c76c8, 8) MULTIEQUAL (ram, 0x4c76c8, 8) , (unique, 0x1000056d, 8)]
[(ram, 0x4c76c0, 4) MULTIEQUAL (ram, 0x4c76c0, 4) , (unique, 0x10000569, 4)]
[(ram, 0x4c76b8, 8) MULTIEQUAL (ram, 0x4c76b8, 8) , (unique, 0x10000561, 8)]
[(ram, 0x4c4f60, 8) MULTIEQUAL (ram, 0x4c4f60, 8) , (unique, 0x10000559, 8)]
[(ram, 0x4c4f48, 8) MULTIEQUAL (ram, 0x4c4f48, 8) , (unique, 0x10000551, 8)]
[(ram, 0x4c4f30, 8) MULTIEQUAL (ram, 0x4c4f30, 8) , (unique, 0x10000549, 8)]
[(ram, 0x4c4e38, 8) MULTIEQUAL (ram, 0x4c4e38, 8) , (unique, 0x10000541, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (unique, 0x10000535, 8)]
[(register, 0x18, 8) CAST (unique, 0x10000d7c, 8), (unique, 0x10000d7c, 8) INT_RIGHT (unique, 0x10000d74, 8) , (const, 0x1, 4), (unique, 0x10000d74, 8) CAST (unique, 0x3b80, 8), (unique, 0x3b80, 8) PTRADD (register, 0xa8, 8) , (unique, 0x10000d64, 8) , (const, 0x1, 8), (unique, 0x10000d64, 8) CAST (register, 0xb8, 8), (register, 0xb8, 8) MULTIEQUAL (register, 0xb8, 8) , (unique, 0x3100, 8)]
[ ---  CBRANCH (ram, 0x4036c0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000d6c, 8), (unique, 0x10000d6c, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x3, 8) , (const, 0x8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xcd9, 4)]
[(ram, 0x4c4e38, 8) INDIRECT (ram, 0x4c4e38, 8) , (const, 0xcd9, 4)]
[(ram, 0x4c4f30, 8) INDIRECT (ram, 0x4c4f30, 8) , (const, 0xcd9, 4)]
[(ram, 0x4c4f48, 8) INDIRECT (ram, 0x4c4f48, 8) , (const, 0xcd9, 4)]
[(ram, 0x4c4f60, 8) INDIRECT (ram, 0x4c4f60, 8) , (const, 0xcd9, 4)]
[(ram, 0x4c76b8, 8) INDIRECT (ram, 0x4c76b8, 8) , (const, 0xcd9, 4)]
[(ram, 0x4c76c0, 4) INDIRECT (ram, 0x4c76c0, 4) , (const, 0xcd9, 4)]
[(ram, 0x4c76c8, 8) INDIRECT (ram, 0x4c76c8, 8) , (const, 0xcd9, 4)]
[(ram, 0x4c76d0, 8) INDIRECT (ram, 0x4c76d0, 8) , (const, 0xcd9, 4)]
[(ram, 0x4c76d8, 4) INDIRECT (ram, 0x4c76d8, 4) , (const, 0xcd9, 4)]
[(ram, 0x4c76e0, 8) INDIRECT (ram, 0x4c76e0, 8) , (const, 0xcd9, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0xcd9, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0xcd9, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0xcd9, 4)]
[(stack, 0xffffffffffffff6c, 4) INDIRECT (stack, 0xffffffffffffff6c, 4) , (const, 0xcd9, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0xcd9, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0xcd9, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0xcd9, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0xcd9, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0xcd9, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0xcd9, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0xcd9, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0xcd9, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0xcd9, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xcd9, 4)]
[(register, 0x0, 4) CALL (ram, 0x401140, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xca7, 4)]
[(ram, 0x4c4e38, 8) INDIRECT (ram, 0x4c4e38, 8) , (const, 0xca7, 4)]
[(ram, 0x4c4f30, 8) INDIRECT (ram, 0x4c4f30, 8) , (const, 0xca7, 4)]
[(ram, 0x4c4f48, 8) INDIRECT (ram, 0x4c4f48, 8) , (const, 0xca7, 4)]
[(ram, 0x4c4f60, 8) INDIRECT (ram, 0x4c4f60, 8) , (const, 0xca7, 4)]
[(ram, 0x4c76b8, 8) INDIRECT (ram, 0x4c76b8, 8) , (const, 0xca7, 4)]
[(ram, 0x4c76c0, 4) INDIRECT (ram, 0x4c76c0, 4) , (const, 0xca7, 4)]
[(ram, 0x4c76c8, 8) INDIRECT (ram, 0x4c76c8, 8) , (const, 0xca7, 4)]
[(ram, 0x4c76d0, 8) INDIRECT (ram, 0x4c76d0, 8) , (const, 0xca7, 4)]
[(ram, 0x4c76d8, 4) INDIRECT (ram, 0x4c76d8, 4) , (const, 0xca7, 4)]
[(ram, 0x4c76e0, 8) INDIRECT (ram, 0x4c76e0, 8) , (const, 0xca7, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0xca7, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0xca7, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0xca7, 4)]
[(stack, 0xffffffffffffff6c, 4) INDIRECT (stack, 0xffffffffffffff6c, 4) , (const, 0xca7, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0xca7, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0xca7, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0xca7, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0xca7, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0xca7, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0xca7, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0xca7, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0xca7, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0xca7, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xca7, 4)]
[(register, 0x0, 4) CALL (ram, 0x401140, 8)]
[(unique, 0x10000535, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x10000541, 8) MULTIEQUAL (ram, 0x4c4e38, 8) , (ram, 0x4c4e38, 8)]
[(unique, 0x10000549, 8) MULTIEQUAL (ram, 0x4c4f30, 8) , (ram, 0x4c4f30, 8)]
[(unique, 0x10000551, 8) MULTIEQUAL (ram, 0x4c4f48, 8) , (ram, 0x4c4f48, 8)]
[(unique, 0x10000559, 8) MULTIEQUAL (ram, 0x4c4f60, 8) , (ram, 0x4c4f60, 8)]
[(unique, 0x10000561, 8) MULTIEQUAL (ram, 0x4c76b8, 8) , (ram, 0x4c76b8, 8)]
[(unique, 0x10000569, 4) MULTIEQUAL (ram, 0x4c76c0, 4) , (ram, 0x4c76c0, 4)]
[(unique, 0x1000056d, 8) MULTIEQUAL (ram, 0x4c76c8, 8) , (ram, 0x4c76c8, 8)]
[(unique, 0x10000575, 8) MULTIEQUAL (ram, 0x4c76d0, 8) , (ram, 0x4c76d0, 8)]
[(unique, 0x1000057d, 4) MULTIEQUAL (ram, 0x4c76d8, 4) , (ram, 0x4c76d8, 4)]
[(unique, 0x10000581, 8) MULTIEQUAL (ram, 0x4c76e0, 8) , (ram, 0x4c76e0, 8)]
[(unique, 0x10000589, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(unique, 0x10000591, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(unique, 0x10000599, 4) MULTIEQUAL (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4)]
[(unique, 0x1000059d, 4) MULTIEQUAL (stack, 0xffffffffffffff6c, 4) , (stack, 0xffffffffffffff6c, 4)]
[(unique, 0x100005a1, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(unique, 0x100005a9, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(unique, 0x100005b1, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(unique, 0x100005b9, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(unique, 0x100005c1, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(unique, 0x100005c9, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(unique, 0x100005d1, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(unique, 0x100005d9, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(unique, 0x100005e1, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(unique, 0x100005e9, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(unique, 0x10000b86, 8) COPY (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x403684, 1) , (unique, 0x10000534, 1), (unique, 0x10000534, 1) INT_SLESS (unique, 0x1000053d, 4) , (const, 0x0, 4), (unique, 0x1000053d, 4) MULTIEQUAL (register, 0x0, 4) , (register, 0x0, 4)]
[ ---  CBRANCH (ram, 0x4035a8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x1000053d, 4) , (const, 0x0, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (unique, 0x100005e9, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (unique, 0x100005e1, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (unique, 0x100005d9, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (unique, 0x100005d1, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (unique, 0x100005b9, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (unique, 0x100005b1, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (unique, 0x100005a9, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (unique, 0x100005a1, 8)]
[(stack, 0xffffffffffffff6c, 4) MULTIEQUAL (stack, 0xffffffffffffff6c, 4) , (unique, 0x1000059d, 4)]
[(stack, 0xffffffffffffff68, 4) MULTIEQUAL (stack, 0xffffffffffffff68, 4) , (unique, 0x10000599, 4)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (unique, 0x10000591, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (unique, 0x10000589, 8)]
[(ram, 0x4c76e0, 8) MULTIEQUAL (ram, 0x4c76e0, 8) , (unique, 0x10000581, 8)]
[(ram, 0x4c76d8, 4) MULTIEQUAL (ram, 0x4c76d8, 4) , (unique, 0x1000057d, 4)]
[(ram, 0x4c76d0, 8) MULTIEQUAL (ram, 0x4c76d0, 8) , (unique, 0x10000575, 8)]
[(ram, 0x4c76c8, 8) MULTIEQUAL (ram, 0x4c76c8, 8) , (unique, 0x1000056d, 8)]
[(ram, 0x4c76c0, 4) MULTIEQUAL (ram, 0x4c76c0, 4) , (unique, 0x10000569, 4)]
[(ram, 0x4c76b8, 8) MULTIEQUAL (ram, 0x4c76b8, 8) , (unique, 0x10000561, 8)]
[(ram, 0x4c4f60, 8) MULTIEQUAL (ram, 0x4c4f60, 8) , (unique, 0x10000559, 8)]
[(ram, 0x4c4f48, 8) MULTIEQUAL (ram, 0x4c4f48, 8) , (unique, 0x10000551, 8)]
[(ram, 0x4c4f30, 8) MULTIEQUAL (ram, 0x4c4f30, 8) , (unique, 0x10000549, 8)]
[(ram, 0x4c4e38, 8) MULTIEQUAL (ram, 0x4c4e38, 8) , (unique, 0x10000541, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (unique, 0x10000535, 8)]
[ ---  CBRANCH (ram, 0x403730, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (register, 0x18, 8) , (stack, 0xffffffffffffff98, 8), (register, 0x18, 8) MULTIEQUAL (register, 0x18, 8) , (register, 0x18, 8), (stack, 0xffffffffffffff98, 8) MULTIEQUAL (register, 0x0, 8) , (unique, 0x100005c9, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0xbd80, 8)]
[(register, 0x0, 8) INT_ZEXT (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0x3400, 8) , (const, 0x1, 8) , (const, 0x4, 8), (unique, 0x3400, 8) CAST (unique, 0x10000d94, 8), (unique, 0x10000d94, 8) INT_ADD (unique, 0xbd80, 8) , (unique, 0x3300, 8), (unique, 0x3300, 8) INT_MULT (unique, 0x10000d8c, 8) , (const, 0x8, 8), (unique, 0x10000d8c, 8) CAST (register, 0x18, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x7, 8) , (const, 0x8, 8)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) CAST (unique, 0x10000d94, 8), (unique, 0x10000d94, 8) INT_ADD (unique, 0xbd80, 8) , (unique, 0x3300, 8), (unique, 0x3300, 8) INT_MULT (unique, 0x10000d8c, 8) , (const, 0x8, 8), (unique, 0x10000d8c, 8) CAST (register, 0x18, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x7, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x403bc0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000d84, 8), (unique, 0x10000d84, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x3, 8) , (const, 0x8, 8)]
[(stack, 0xffffffffffffff98, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10000d9c, 8), (unique, 0x10000d9c, 8) INT_ADD (register, 0x0, 8) , (unique, 0xbd80, 8)]
[(stack, 0xffffffffffffff90, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10000da4, 8), (unique, 0x10000da4, 8) INT_ZEXT (unique, 0x3100, 4), (unique, 0x3100, 4) INT_ADD (unique, 0xbc80, 4) , (const, 0x1, 4)]
[ ---  BRANCH (ram, 0x4035d0, 1)]
[(stack, 0xffffffffffffff98, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10000dac, 8), (unique, 0x10000dac, 8) INT_ADD (register, 0x0, 8) , (unique, 0xbd80, 8), (register, 0x0, 8) INT_ZEXT (register, 0x0, 4), (register, 0x0, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1bb80, 4), (unique, 0x1bb80, 4) INT_LEFT (unique, 0xbc80, 4) , (const, 0x18, 4), (unique, 0x1b780, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1ba00, 4), (unique, 0x1ba00, 4) INT_LEFT (unique, 0x1b980, 4) , (const, 0x8, 4), (unique, 0x1b980, 4) INT_AND (unique, 0xbc80, 4) , (const, 0xff00, 4), (unique, 0x1b780, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1b880, 4), (unique, 0x1b880, 4) INT_RIGHT (unique, 0x1b800, 4) , (const, 0x8, 4), (unique, 0x1b800, 4) INT_AND (unique, 0xbc80, 4) , (const, 0xff0000, 4), (unique, 0x1b780, 4) INT_RIGHT (unique, 0xbc80, 4) , (const, 0x18, 4)]
[(stack, 0xffffffffffffff90, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10000db4, 8), (unique, 0x10000db4, 8) INT_ZEXT (unique, 0x3100, 4), (unique, 0x3100, 4) INT_ADD (register, 0x10, 4) , (const, 0x1, 4), (register, 0x10, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1bb80, 4), (unique, 0x1bb80, 4) INT_LEFT (unique, 0xbc80, 4) , (const, 0x18, 4), (unique, 0x1b780, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1ba00, 4), (unique, 0x1ba00, 4) INT_LEFT (unique, 0x1b980, 4) , (const, 0x8, 4), (unique, 0x1b980, 4) INT_AND (unique, 0xbc80, 4) , (const, 0xff00, 4), (unique, 0x1b780, 4) INT_OR (unique, 0x1b780, 4) , (unique, 0x1b880, 4), (unique, 0x1b880, 4) INT_RIGHT (unique, 0x1b800, 4) , (const, 0x8, 4), (unique, 0x1b800, 4) INT_AND (unique, 0xbc80, 4) , (const, 0xff0000, 4), (unique, 0x1b780, 4) INT_RIGHT (unique, 0xbc80, 4) , (const, 0x18, 4)]
[ ---  BRANCH (ram, 0x4035d0, 1)]
[(stack, 0xffffffffffffff98, 8) COPY (unique, 0x10000dd4, 8), (unique, 0x10000dd4, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x8, 8), (register, 0x0, 8) CAST (unique, 0x10000dcc, 8), (unique, 0x10000dcc, 8) INT_ADD (register, 0x0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0xa, 8) , (const, 0x8, 8), (register, 0x0, 8) INT_MULT (unique, 0x10000dc4, 8) , (const, 0x10, 8), (unique, 0x10000dc4, 8) CAST (register, 0x0, 8), (register, 0x0, 8) PTRADD (register, 0x18, 8) , (unique, 0x100001b9, 8) , (const, 0x1, 8), (unique, 0x100001b9, 8) INT_2COMP (unique, 0x10000dbc, 8), (unique, 0x10000dbc, 8) CAST (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) COPY (unique, 0x10000ddc, 8), (unique, 0x10000ddc, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10000dcc, 8), (unique, 0x10000dcc, 8) INT_ADD (register, 0x0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0xa, 8) , (const, 0x8, 8), (register, 0x0, 8) INT_MULT (unique, 0x10000dc4, 8) , (const, 0x10, 8), (unique, 0x10000dc4, 8) CAST (register, 0x0, 8), (register, 0x0, 8) PTRADD (register, 0x18, 8) , (unique, 0x100001b9, 8) , (const, 0x1, 8), (unique, 0x100001b9, 8) INT_2COMP (unique, 0x10000dbc, 8), (unique, 0x10000dbc, 8) CAST (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[ ---  CBRANCH (ram, 0x403768, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffff68, 4) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x403b88, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffff60, 8) , (const, 0x0, 8)]
[(unique, 0x10000b96, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000de4, 8), (unique, 0x10000de4, 8) INT_ADD (stack, 0xffffffffffffff60, 8) , (const, 0x10, 8)]
[ ---  CBRANCH (ram, 0x403b88, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000de4, 8), (unique, 0x10000de4, 8) INT_ADD (stack, 0xffffffffffffff60, 8) , (const, 0x10, 8)]
[ ---  CBRANCH (ram, 0x403bd3, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4c76c0, 4) , (const, 0x0, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xb21, 4)]
[(ram, 0x4c4e38, 8) INDIRECT (ram, 0x4c4e38, 8) , (const, 0xb21, 4)]
[(ram, 0x4c4f30, 8) INDIRECT (ram, 0x4c4f30, 8) , (const, 0xb21, 4)]
[(ram, 0x4c4f48, 8) INDIRECT (ram, 0x4c4f48, 8) , (const, 0xb21, 4)]
[(ram, 0x4c4f60, 8) INDIRECT (ram, 0x4c4f60, 8) , (const, 0xb21, 4)]
[(ram, 0x4c76c0, 4) INDIRECT (ram, 0x4c76c0, 4) , (const, 0xb21, 4)]
[(ram, 0x4c76c8, 8) INDIRECT (ram, 0x4c76c8, 8) , (const, 0xb21, 4)]
[(ram, 0x4c76d0, 8) INDIRECT (ram, 0x4c76d0, 8) , (const, 0xb21, 4)]
[(ram, 0x4c76d8, 4) INDIRECT (ram, 0x4c76d8, 4) , (const, 0xb21, 4)]
[(ram, 0x4c76e0, 8) INDIRECT (ram, 0x4c76e0, 8) , (const, 0xb21, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0xb21, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0xb21, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0xb21, 4)]
[(stack, 0xffffffffffffff6c, 4) INDIRECT (stack, 0xffffffffffffff6c, 4) , (const, 0xb21, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0xb21, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0xb21, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0xb21, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0xb21, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0xb21, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0xb21, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0xb21, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0xb21, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0xb21, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xb21, 4)]
[(unique, 0x10000bbe, 8) COPY (ram, 0x4c76b8, 8), (ram, 0x4c76b8, 8) INDIRECT (ram, 0x4c76b8, 8) , (const, 0xb21, 4)]
[ ---  CBRANCH (ram, 0x403bf0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x40ff60, 8) , (unique, 0x1000063f, 8), (unique, 0x1000063f, 8) COPY (const, 0x49a400, 8)]
[ ---  CBRANCH (ram, 0x403df1, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0x0, 8)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0xb41, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xb4a, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xb41, 4)]
[(ram, 0x4c4e38, 8) INDIRECT (ram, 0x4c4e38, 8) , (const, 0xb4a, 4), (ram, 0x4c4e38, 8) INDIRECT (ram, 0x4c4e38, 8) , (const, 0xb41, 4)]
[(ram, 0x4c4f30, 8) INDIRECT (ram, 0x4c4f30, 8) , (const, 0xb4a, 4), (ram, 0x4c4f30, 8) INDIRECT (ram, 0x4c4f30, 8) , (const, 0xb41, 4)]
[(ram, 0x4c4f48, 8) INDIRECT (ram, 0x4c4f48, 8) , (const, 0xb4a, 4), (ram, 0x4c4f48, 8) INDIRECT (ram, 0x4c4f48, 8) , (const, 0xb41, 4)]
[(ram, 0x4c4f60, 8) INDIRECT (ram, 0x4c4f60, 8) , (const, 0xb4a, 4), (ram, 0x4c4f60, 8) INDIRECT (ram, 0x4c4f60, 8) , (const, 0xb41, 4)]
[(ram, 0x4c76b8, 8) INDIRECT (ram, 0x4c76b8, 8) , (const, 0xb4a, 4), (ram, 0x4c76b8, 8) INDIRECT (ram, 0x4c76b8, 8) , (const, 0xb41, 4)]
[(ram, 0x4c76c0, 4) INDIRECT (ram, 0x4c76c0, 4) , (const, 0xb4a, 4), (ram, 0x4c76c0, 4) INDIRECT (ram, 0x4c76c0, 4) , (const, 0xb41, 4)]
[(ram, 0x4c76c8, 8) INDIRECT (ram, 0x4c76c8, 8) , (const, 0xb4a, 4), (ram, 0x4c76c8, 8) INDIRECT (ram, 0x4c76c8, 8) , (const, 0xb41, 4)]
[(ram, 0x4c76d0, 8) INDIRECT (ram, 0x4c76d0, 8) , (const, 0xb4a, 4), (ram, 0x4c76d0, 8) INDIRECT (ram, 0x4c76d0, 8) , (const, 0xb41, 4)]
[(ram, 0x4c76d8, 4) INDIRECT (ram, 0x4c76d8, 4) , (const, 0xb4a, 4), (ram, 0x4c76d8, 4) INDIRECT (ram, 0x4c76d8, 4) , (const, 0xb41, 4)]
[(ram, 0x4c76e0, 8) INDIRECT (ram, 0x4c76e0, 8) , (const, 0xb4a, 4), (ram, 0x4c76e0, 8) INDIRECT (ram, 0x4c76e0, 8) , (const, 0xb41, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0xb4a, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0xb41, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0xb4a, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0xb41, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0xb4a, 4), (stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0xb41, 4)]
[(stack, 0xffffffffffffff6c, 4) INDIRECT (stack, 0xffffffffffffff6c, 4) , (const, 0xb4a, 4), (stack, 0xffffffffffffff6c, 4) INDIRECT (stack, 0xffffffffffffff6c, 4) , (const, 0xb41, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0xb4a, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0xb41, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0xb4a, 4), (stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0xb41, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0xb4a, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0xb41, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (unique, 0x3100, 8) , (const, 0xb4a, 4), (unique, 0x3100, 8) CAST (unique, 0x10000dec, 8), (unique, 0x10000dec, 8) INT_ADD (register, 0x0, 8) , (const, 0x1, 8), (register, 0x0, 8) CALL (ram, 0x401190, 8) , (register, 0x0, 8)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0xb4a, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0xb41, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0xb4a, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0xb41, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0xb4a, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0xb41, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0xb4a, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0xb41, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0xb4a, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0xb41, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xb4a, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xb41, 4)]
[(unique, 0x10000bce, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10000dfc, 8), (unique, 0x10000dfc, 8) CALL (ram, 0x426550, 8) , (unique, 0x10000df4, 8), (unique, 0x10000df4, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000dec, 8), (unique, 0x10000dec, 8) INT_ADD (register, 0x0, 8) , (const, 0x1, 8), (register, 0x0, 8) CALL (ram, 0x401190, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x403e20, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10000dfc, 8), (unique, 0x10000dfc, 8) CALL (ram, 0x426550, 8) , (unique, 0x10000df4, 8), (unique, 0x10000df4, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000dec, 8), (unique, 0x10000dec, 8) INT_ADD (register, 0x0, 8) , (const, 0x1, 8), (register, 0x0, 8) CALL (ram, 0x401190, 8) , (register, 0x0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xb5d, 4)]
[(ram, 0x4c4e38, 8) INDIRECT (ram, 0x4c4e38, 8) , (const, 0xb5d, 4)]
[(ram, 0x4c4f30, 8) INDIRECT (ram, 0x4c4f30, 8) , (const, 0xb5d, 4)]
[(ram, 0x4c4f48, 8) INDIRECT (ram, 0x4c4f48, 8) , (const, 0xb5d, 4)]
[(ram, 0x4c4f60, 8) INDIRECT (ram, 0x4c4f60, 8) , (const, 0xb5d, 4)]
[(ram, 0x4c76b8, 8) INDIRECT (ram, 0x4c76b8, 8) , (const, 0xb5d, 4)]
[(ram, 0x4c76c0, 4) INDIRECT (ram, 0x4c76c0, 4) , (const, 0xb5d, 4)]
[(ram, 0x4c76c8, 8) INDIRECT (ram, 0x4c76c8, 8) , (const, 0xb5d, 4)]
[(ram, 0x4c76d0, 8) INDIRECT (ram, 0x4c76d0, 8) , (const, 0xb5d, 4)]
[(ram, 0x4c76d8, 4) INDIRECT (ram, 0x4c76d8, 4) , (const, 0xb5d, 4)]
[(ram, 0x4c76e0, 8) INDIRECT (ram, 0x4c76e0, 8) , (const, 0xb5d, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0xb5d, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0xb5d, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0xb5d, 4)]
[(stack, 0xffffffffffffff6c, 4) INDIRECT (stack, 0xffffffffffffff6c, 4) , (const, 0xb5d, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0xb5d, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0xb5d, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0xb5d, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0xb5d, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0xb5d, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0xb5d, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0xb5d, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0xb5d, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0xb5d, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xb5d, 4)]
[ ---  CALL (ram, 0x401060, 8) , (register, 0x0, 8) , (register, 0x0, 8) , (stack, 0xffffffffffffff88, 8)]
[(unique, 0x10000bd6, 8) COPY (register, 0x0, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff6c, 4) MULTIEQUAL (stack, 0xffffffffffffff6c, 4) , (stack, 0xffffffffffffff6c, 4) , (stack, 0xffffffffffffff6c, 4) , (stack, 0xffffffffffffff6c, 4)]
[(stack, 0xffffffffffffff68, 4) MULTIEQUAL (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(ram, 0x4c76e0, 8) MULTIEQUAL (ram, 0x4c76e0, 8) , (ram, 0x4c76e0, 8) , (ram, 0x4c76e0, 8) , (ram, 0x4c76e0, 8)]
[(ram, 0x4c76d8, 4) MULTIEQUAL (ram, 0x4c76d8, 4) , (ram, 0x4c76d8, 4) , (ram, 0x4c76d8, 4) , (ram, 0x4c76d8, 4)]
[(ram, 0x4c76d0, 8) MULTIEQUAL (ram, 0x4c76d0, 8) , (ram, 0x4c76d0, 8) , (ram, 0x4c76d0, 8) , (ram, 0x4c76d0, 8)]
[(ram, 0x4c76c8, 8) MULTIEQUAL (ram, 0x4c76c8, 8) , (ram, 0x4c76c8, 8) , (ram, 0x4c76c8, 8) , (ram, 0x4c76c8, 8)]
[(ram, 0x4c4f60, 8) MULTIEQUAL (ram, 0x4c4f60, 8) , (ram, 0x4c4f60, 8) , (ram, 0x4c4f60, 8) , (ram, 0x4c4f60, 8)]
[(ram, 0x4c4f48, 8) MULTIEQUAL (ram, 0x4c4f48, 8) , (ram, 0x4c4f48, 8) , (ram, 0x4c4f48, 8) , (ram, 0x4c4f48, 8)]
[(ram, 0x4c4f30, 8) MULTIEQUAL (ram, 0x4c4f30, 8) , (ram, 0x4c4f30, 8) , (ram, 0x4c4f30, 8) , (ram, 0x4c4f30, 8)]
[(ram, 0x4c4e38, 8) MULTIEQUAL (ram, 0x4c4e38, 8) , (ram, 0x4c4e38, 8) , (ram, 0x4c4e38, 8) , (ram, 0x4c4e38, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4c76b8, 8) COPY (unique, 0x10000bde, 8), (unique, 0x10000bde, 8) MULTIEQUAL (unique, 0x10000bbe, 8) , (unique, 0x10000bbe, 8) , (unique, 0x10000bce, 8) , (unique, 0x10000bd6, 8)]
[(ram, 0x4c76c0, 4) COPY (const, 0x1, 4)]
[ ---  BRANCH (ram, 0x403b99, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff6c, 4) MULTIEQUAL (stack, 0xffffffffffffff6c, 4) , (stack, 0xffffffffffffff6c, 4)]
[(stack, 0xffffffffffffff68, 4) MULTIEQUAL (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(ram, 0x4c76e0, 8) MULTIEQUAL (ram, 0x4c76e0, 8) , (ram, 0x4c76e0, 8)]
[(ram, 0x4c76d8, 4) MULTIEQUAL (ram, 0x4c76d8, 4) , (ram, 0x4c76d8, 4)]
[(ram, 0x4c76d0, 8) MULTIEQUAL (ram, 0x4c76d0, 8) , (ram, 0x4c76d0, 8)]
[(ram, 0x4c76c8, 8) MULTIEQUAL (ram, 0x4c76c8, 8) , (ram, 0x4c76c8, 8)]
[(ram, 0x4c76c0, 4) MULTIEQUAL (ram, 0x4c76c0, 4) , (ram, 0x4c76c0, 4)]
[(ram, 0x4c4f60, 8) MULTIEQUAL (ram, 0x4c4f60, 8) , (ram, 0x4c4f60, 8)]
[(ram, 0x4c4f48, 8) MULTIEQUAL (ram, 0x4c4f48, 8) , (ram, 0x4c4f48, 8)]
[(ram, 0x4c4f30, 8) MULTIEQUAL (ram, 0x4c4f30, 8) , (ram, 0x4c4f30, 8)]
[(ram, 0x4c4e38, 8) MULTIEQUAL (ram, 0x4c4e38, 8) , (ram, 0x4c4e38, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x10000b9e, 8) COPY (ram, 0x4c76b8, 8), (ram, 0x4c76b8, 8) MULTIEQUAL (ram, 0x4c76b8, 8) , (ram, 0x4c76b8, 8)]
[ ---  CBRANCH (ram, 0x403785, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4c76b8, 8) , (const, 0x0, 8), (ram, 0x4c76b8, 8) MULTIEQUAL (ram, 0x4c76b8, 8) , (ram, 0x4c76b8, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x10000e0c, 8), (unique, 0x10000e0c, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0xb0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000e04, 8), (unique, 0x10000e04, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (unique, 0x10000667, 8) , (register, 0x110, 8) , (const, 0x1, 8), (unique, 0x10000667, 8) PTRSUB (const, 0x0, 8) , (const, 0xffffffffffffffa0, 8)]
[ ---  BRANCH (ram, 0x403785, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff6c, 4) MULTIEQUAL (stack, 0xffffffffffffff6c, 4) , (stack, 0xffffffffffffff6c, 4) , (stack, 0xffffffffffffff6c, 4)]
[(stack, 0xffffffffffffff68, 4) MULTIEQUAL (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(ram, 0x4c76e0, 8) MULTIEQUAL (ram, 0x4c76e0, 8) , (ram, 0x4c76e0, 8) , (ram, 0x4c76e0, 8)]
[(ram, 0x4c76d8, 4) MULTIEQUAL (ram, 0x4c76d8, 4) , (ram, 0x4c76d8, 4) , (ram, 0x4c76d8, 4)]
[(ram, 0x4c76d0, 8) MULTIEQUAL (ram, 0x4c76d0, 8) , (ram, 0x4c76d0, 8) , (ram, 0x4c76d0, 8)]
[(ram, 0x4c76c8, 8) MULTIEQUAL (ram, 0x4c76c8, 8) , (ram, 0x4c76c8, 8) , (ram, 0x4c76c8, 8)]
[(ram, 0x4c76c0, 4) MULTIEQUAL (ram, 0x4c76c0, 4) , (ram, 0x4c76c0, 4) , (ram, 0x4c76c0, 4)]
[(ram, 0x4c76b8, 8) MULTIEQUAL (ram, 0x4c76b8, 8) , (ram, 0x4c76b8, 8) , (ram, 0x4c76b8, 8)]
[(ram, 0x4c4f60, 8) MULTIEQUAL (ram, 0x4c4f60, 8) , (ram, 0x4c4f60, 8) , (ram, 0x4c4f60, 8)]
[(ram, 0x4c4f30, 8) MULTIEQUAL (ram, 0x4c4f30, 8) , (ram, 0x4c4f30, 8) , (ram, 0x4c4f30, 8)]
[(ram, 0x4c4e38, 8) MULTIEQUAL (ram, 0x4c4e38, 8) , (ram, 0x4c4e38, 8) , (ram, 0x4c4e38, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb8, 8) MULTIEQUAL (unique, 0x10000b96, 8) , (unique, 0x10000b9e, 8) , (unique, 0xbd80, 8)]
[ ---  CBRANCH (ram, 0x40379b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4c4f48, 8) , (const, 0x0, 8), (ram, 0x4c4f48, 8) MULTIEQUAL (ram, 0x4c4f48, 8) , (ram, 0x4c4f48, 8) , (ram, 0x4c4f48, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x263, 4)]
[(ram, 0x4c4e38, 8) INDIRECT (ram, 0x4c4e38, 8) , (const, 0x263, 4)]
[(ram, 0x4c4f30, 8) INDIRECT (ram, 0x4c4f30, 8) , (const, 0x263, 4)]
[(ram, 0x4c4f48, 8) INDIRECT (ram, 0x4c4f48, 8) , (const, 0x263, 4)]
[(ram, 0x4c4f60, 8) INDIRECT (ram, 0x4c4f60, 8) , (const, 0x263, 4)]
[(ram, 0x4c76b8, 8) INDIRECT (ram, 0x4c76b8, 8) , (const, 0x263, 4)]
[(ram, 0x4c76c0, 4) INDIRECT (ram, 0x4c76c0, 4) , (const, 0x263, 4)]
[(ram, 0x4c76c8, 8) INDIRECT (ram, 0x4c76c8, 8) , (const, 0x263, 4)]
[(ram, 0x4c76d0, 8) INDIRECT (ram, 0x4c76d0, 8) , (const, 0x263, 4)]
[(ram, 0x4c76d8, 4) INDIRECT (ram, 0x4c76d8, 4) , (const, 0x263, 4)]
[(ram, 0x4c76e0, 8) INDIRECT (ram, 0x4c76e0, 8) , (const, 0x263, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x263, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x263, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x263, 4)]
[(stack, 0xffffffffffffff6c, 4) INDIRECT (stack, 0xffffffffffffff6c, 4) , (const, 0x263, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x263, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x263, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x263, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x263, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x263, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x263, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x263, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x263, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x263, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x263, 4)]
[ ---  CALL (ram, 0x0, 8) , (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x10, 8) , (const, 0x8, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff6c, 4) MULTIEQUAL (stack, 0xffffffffffffff6c, 4) , (stack, 0xffffffffffffff6c, 4)]
[(stack, 0xffffffffffffff68, 4) MULTIEQUAL (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(ram, 0x4c76e0, 8) MULTIEQUAL (ram, 0x4c76e0, 8) , (ram, 0x4c76e0, 8)]
[(ram, 0x4c76d8, 4) MULTIEQUAL (ram, 0x4c76d8, 4) , (ram, 0x4c76d8, 4)]
[(ram, 0x4c76d0, 8) MULTIEQUAL (ram, 0x4c76d0, 8) , (ram, 0x4c76d0, 8)]
[(ram, 0x4c76c8, 8) MULTIEQUAL (ram, 0x4c76c8, 8) , (ram, 0x4c76c8, 8)]
[(ram, 0x4c76c0, 4) MULTIEQUAL (ram, 0x4c76c0, 4) , (ram, 0x4c76c0, 4)]
[(ram, 0x4c76b8, 8) MULTIEQUAL (ram, 0x4c76b8, 8) , (ram, 0x4c76b8, 8)]
[(ram, 0x4c4f60, 8) MULTIEQUAL (ram, 0x4c4f60, 8) , (ram, 0x4c4f60, 8)]
[(ram, 0x4c4f48, 8) MULTIEQUAL (ram, 0x4c4f48, 8) , (ram, 0x4c4f48, 8)]
[(ram, 0x4c4f30, 8) MULTIEQUAL (ram, 0x4c4f30, 8) , (ram, 0x4c4f30, 8)]
[(ram, 0x4c4e38, 8) MULTIEQUAL (ram, 0x4c4e38, 8) , (ram, 0x4c4e38, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0xf, 8) , (const, 0x8, 8)]
[ ---  BRANCH (ram, 0x4037cd, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff6c, 4) MULTIEQUAL (stack, 0xffffffffffffff6c, 4) , (stack, 0xffffffffffffff6c, 4)]
[(stack, 0xffffffffffffff68, 4) MULTIEQUAL (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(ram, 0x4c76e0, 8) MULTIEQUAL (ram, 0x4c76e0, 8) , (ram, 0x4c76e0, 8)]
[(ram, 0x4c76d8, 4) MULTIEQUAL (ram, 0x4c76d8, 4) , (ram, 0x4c76d8, 4)]
[(ram, 0x4c76d0, 8) MULTIEQUAL (ram, 0x4c76d0, 8) , (ram, 0x4c76d0, 8)]
[(ram, 0x4c76c8, 8) MULTIEQUAL (ram, 0x4c76c8, 8) , (ram, 0x4c76c8, 8)]
[(ram, 0x4c76c0, 4) MULTIEQUAL (ram, 0x4c76c0, 4) , (ram, 0x4c76c0, 4)]
[(ram, 0x4c76b8, 8) MULTIEQUAL (ram, 0x4c76b8, 8) , (ram, 0x4c76b8, 8)]
[(ram, 0x4c4f60, 8) MULTIEQUAL (ram, 0x4c4f60, 8) , (ram, 0x4c4f60, 8)]
[(ram, 0x4c4f48, 8) MULTIEQUAL (ram, 0x4c4f48, 8) , (ram, 0x4c4f48, 8)]
[(ram, 0x4c4f30, 8) MULTIEQUAL (ram, 0x4c4f30, 8) , (ram, 0x4c4f30, 8)]
[(ram, 0x4c4e38, 8) MULTIEQUAL (ram, 0x4c4e38, 8) , (ram, 0x4c4e38, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x4037a8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xa8, 8) , (const, 0x0, 8), (register, 0xa8, 8) MULTIEQUAL (unique, 0xbd80, 8) , (register, 0xa8, 8)]
[ ---  CBRANCH (ram, 0x4037e8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4c4f60, 8) , (const, 0x0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x282, 4)]
[(ram, 0x4c4e38, 8) INDIRECT (ram, 0x4c4e38, 8) , (const, 0x282, 4)]
[(ram, 0x4c4f30, 8) INDIRECT (ram, 0x4c4f30, 8) , (const, 0x282, 4)]
[(ram, 0x4c4f48, 8) INDIRECT (ram, 0x4c4f48, 8) , (const, 0x282, 4)]
[(ram, 0x4c4f60, 8) INDIRECT (ram, 0x4c4f60, 8) , (const, 0x282, 4)]
[(ram, 0x4c76b8, 8) INDIRECT (ram, 0x4c76b8, 8) , (const, 0x282, 4)]
[(ram, 0x4c76c0, 4) INDIRECT (ram, 0x4c76c0, 4) , (const, 0x282, 4)]
[(ram, 0x4c76c8, 8) INDIRECT (ram, 0x4c76c8, 8) , (const, 0x282, 4)]
[(ram, 0x4c76d0, 8) INDIRECT (ram, 0x4c76d0, 8) , (const, 0x282, 4)]
[(ram, 0x4c76d8, 4) INDIRECT (ram, 0x4c76d8, 4) , (const, 0x282, 4)]
[(ram, 0x4c76e0, 8) INDIRECT (ram, 0x4c76e0, 8) , (const, 0x282, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x282, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x282, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x282, 4)]
[(stack, 0xffffffffffffff6c, 4) INDIRECT (stack, 0xffffffffffffff6c, 4) , (const, 0x282, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x282, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x282, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x282, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x282, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x282, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x282, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x282, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x282, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x282, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x282, 4)]
[ ---  CALL (ram, 0x0, 8) , (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x10, 8) , (const, 0x8, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff6c, 4) MULTIEQUAL (stack, 0xffffffffffffff6c, 4) , (stack, 0xffffffffffffff6c, 4)]
[(stack, 0xffffffffffffff68, 4) MULTIEQUAL (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(ram, 0x4c76e0, 8) MULTIEQUAL (ram, 0x4c76e0, 8) , (ram, 0x4c76e0, 8)]
[(ram, 0x4c76d8, 4) MULTIEQUAL (ram, 0x4c76d8, 4) , (ram, 0x4c76d8, 4)]
[(ram, 0x4c76d0, 8) MULTIEQUAL (ram, 0x4c76d0, 8) , (ram, 0x4c76d0, 8)]
[(ram, 0x4c76c8, 8) MULTIEQUAL (ram, 0x4c76c8, 8) , (ram, 0x4c76c8, 8)]
[(ram, 0x4c76c0, 4) MULTIEQUAL (ram, 0x4c76c0, 4) , (ram, 0x4c76c0, 4)]
[(ram, 0x4c76b8, 8) MULTIEQUAL (ram, 0x4c76b8, 8) , (ram, 0x4c76b8, 8)]
[(ram, 0x4c4f60, 8) MULTIEQUAL (ram, 0x4c4f60, 8) , (ram, 0x4c4f60, 8)]
[(ram, 0x4c4f48, 8) MULTIEQUAL (ram, 0x4c4f48, 8) , (ram, 0x4c4f48, 8)]
[(ram, 0x4c4e38, 8) MULTIEQUAL (ram, 0x4c4e38, 8) , (ram, 0x4c4e38, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x4037fe, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4c4f30, 8) , (const, 0x0, 8), (ram, 0x4c4f30, 8) MULTIEQUAL (ram, 0x4c4f30, 8) , (ram, 0x4c4f30, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x291, 4)]
[(ram, 0x4c4e38, 8) INDIRECT (ram, 0x4c4e38, 8) , (const, 0x291, 4)]
[(ram, 0x4c4f30, 8) INDIRECT (ram, 0x4c4f30, 8) , (const, 0x291, 4)]
[(ram, 0x4c4f48, 8) INDIRECT (ram, 0x4c4f48, 8) , (const, 0x291, 4)]
[(ram, 0x4c4f60, 8) INDIRECT (ram, 0x4c4f60, 8) , (const, 0x291, 4)]
[(ram, 0x4c76b8, 8) INDIRECT (ram, 0x4c76b8, 8) , (const, 0x291, 4)]
[(ram, 0x4c76c0, 4) INDIRECT (ram, 0x4c76c0, 4) , (const, 0x291, 4)]
[(ram, 0x4c76c8, 8) INDIRECT (ram, 0x4c76c8, 8) , (const, 0x291, 4)]
[(ram, 0x4c76d0, 8) INDIRECT (ram, 0x4c76d0, 8) , (const, 0x291, 4)]
[(ram, 0x4c76d8, 4) INDIRECT (ram, 0x4c76d8, 4) , (const, 0x291, 4)]
[(ram, 0x4c76e0, 8) INDIRECT (ram, 0x4c76e0, 8) , (const, 0x291, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x291, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x291, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x291, 4)]
[(stack, 0xffffffffffffff6c, 4) INDIRECT (stack, 0xffffffffffffff6c, 4) , (const, 0x291, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x291, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x291, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x291, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x291, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x291, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x291, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x291, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x291, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x291, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x291, 4)]
[ ---  CALL (ram, 0x0, 8) , (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x10, 8) , (const, 0x8, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff6c, 4) MULTIEQUAL (stack, 0xffffffffffffff6c, 4) , (stack, 0xffffffffffffff6c, 4)]
[(stack, 0xffffffffffffff68, 4) MULTIEQUAL (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(ram, 0x4c76e0, 8) MULTIEQUAL (ram, 0x4c76e0, 8) , (ram, 0x4c76e0, 8)]
[(ram, 0x4c76d8, 4) MULTIEQUAL (ram, 0x4c76d8, 4) , (ram, 0x4c76d8, 4)]
[(ram, 0x4c76d0, 8) MULTIEQUAL (ram, 0x4c76d0, 8) , (ram, 0x4c76d0, 8)]
[(ram, 0x4c76c8, 8) MULTIEQUAL (ram, 0x4c76c8, 8) , (ram, 0x4c76c8, 8)]
[(ram, 0x4c76c0, 4) MULTIEQUAL (ram, 0x4c76c0, 4) , (ram, 0x4c76c0, 4)]
[(ram, 0x4c76b8, 8) MULTIEQUAL (ram, 0x4c76b8, 8) , (ram, 0x4c76b8, 8)]
[(ram, 0x4c4f60, 8) MULTIEQUAL (ram, 0x4c4f60, 8) , (ram, 0x4c4f60, 8)]
[(ram, 0x4c4f48, 8) MULTIEQUAL (ram, 0x4c4f48, 8) , (ram, 0x4c4f48, 8)]
[(ram, 0x4c4f30, 8) MULTIEQUAL (ram, 0x4c4f30, 8) , (ram, 0x4c4f30, 8)]
[(ram, 0x4c4e38, 8) MULTIEQUAL (ram, 0x4c4e38, 8) , (ram, 0x4c4e38, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x10000b66, 8) COPY (unique, 0x10000e3c, 8), (unique, 0x10000e3c, 8) CAST (unique, 0x3a00, 8), (unique, 0x3a00, 8) PTRADD (unique, 0x3880, 8) , (unique, 0x10000e34, 8) , (const, 0x1, 8), (unique, 0x10000e34, 8) CAST (register, 0x0, 8), (unique, 0x3880, 8) PTRADD (unique, 0xbd80, 8) , (const, 0xffffffffffffffe8, 8) , (const, 0x1, 8), (register, 0x0, 8) CAST (unique, 0x10000e2c, 8), (unique, 0x10000e2c, 8) INT_MULT (unique, 0x10000e24, 8) , (const, 0x18, 8), (unique, 0x10000e24, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) CAST (unique, 0x10000e1c, 8), (unique, 0x10000e1c, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0xe, 8) , (const, 0x8, 8), (unique, 0xbd80, 8) CAST (unique, 0x10000e14, 8), (unique, 0x10000e14, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0xf, 8) , (const, 0x8, 8)]
[(unique, 0x10000c5a, 8) COPY (register, 0x18, 8)]
[ ---  BRANCH (ram, 0x40384f, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (register, 0x0, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (unique, 0xbd80, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff6c, 4) MULTIEQUAL (stack, 0xffffffffffffff6c, 4) , (stack, 0xffffffffffffff6c, 4)]
[(stack, 0xffffffffffffff68, 4) MULTIEQUAL (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(ram, 0x4c76e0, 8) MULTIEQUAL (ram, 0x4c76e0, 8) , (ram, 0x4c76e0, 8)]
[(ram, 0x4c76d8, 4) MULTIEQUAL (ram, 0x4c76d8, 4) , (ram, 0x4c76d8, 4)]
[(ram, 0x4c76d0, 8) MULTIEQUAL (ram, 0x4c76d0, 8) , (ram, 0x4c76d0, 8)]
[(ram, 0x4c76c8, 8) MULTIEQUAL (ram, 0x4c76c8, 8) , (ram, 0x4c76c8, 8)]
[(ram, 0x4c76c0, 4) MULTIEQUAL (ram, 0x4c76c0, 4) , (ram, 0x4c76c0, 4)]
[(ram, 0x4c76b8, 8) MULTIEQUAL (ram, 0x4c76b8, 8) , (ram, 0x4c76b8, 8)]
[(ram, 0x4c4f60, 8) MULTIEQUAL (ram, 0x4c4f60, 8) , (ram, 0x4c4f60, 8)]
[(ram, 0x4c4f48, 8) MULTIEQUAL (ram, 0x4c4f48, 8) , (ram, 0x4c4f48, 8)]
[(ram, 0x4c4f30, 8) MULTIEQUAL (ram, 0x4c4f30, 8) , (ram, 0x4c4f30, 8)]
[(ram, 0x4c4e38, 8) MULTIEQUAL (ram, 0x4c4e38, 8) , (ram, 0x4c4e38, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xa8, 8) COPY (unique, 0x10000b76, 8), (unique, 0x10000b76, 8) MULTIEQUAL (unique, 0x10000b66, 8) , (unique, 0x10000b6e, 8)]
[(unique, 0x100009d6, 8) COPY (stack, 0xffffffffffffff80, 8), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (unique, 0x10000c5a, 8) , (stack, 0xffffffffffffff80, 8)]
[ ---  CBRANCH (ram, 0x403830, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x18, 8) , (const, 0x0, 8), (register, 0x18, 8) MULTIEQUAL (unique, 0xbd80, 8) , (register, 0x18, 8)]
[(register, 0x18, 8) PTRADD (register, 0x18, 8) , (const, 0xffffffffffffffff, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xacb, 4)]
[(ram, 0x4c4e38, 8) INDIRECT (ram, 0x4c4e38, 8) , (const, 0xacb, 4)]
[(ram, 0x4c4f30, 8) INDIRECT (ram, 0x4c4f30, 8) , (const, 0xacb, 4)]
[(ram, 0x4c4f48, 8) INDIRECT (ram, 0x4c4f48, 8) , (const, 0xacb, 4)]
[(ram, 0x4c4f60, 8) INDIRECT (ram, 0x4c4f60, 8) , (const, 0xacb, 4)]
[(ram, 0x4c76b8, 8) INDIRECT (ram, 0x4c76b8, 8) , (const, 0xacb, 4)]
[(ram, 0x4c76c0, 4) INDIRECT (ram, 0x4c76c0, 4) , (const, 0xacb, 4)]
[(ram, 0x4c76c8, 8) INDIRECT (ram, 0x4c76c8, 8) , (const, 0xacb, 4)]
[(ram, 0x4c76d0, 8) INDIRECT (ram, 0x4c76d0, 8) , (const, 0xacb, 4)]
[(ram, 0x4c76d8, 4) INDIRECT (ram, 0x4c76d8, 4) , (const, 0xacb, 4)]
[(ram, 0x4c76e0, 8) INDIRECT (ram, 0x4c76e0, 8) , (const, 0xacb, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0xacb, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0xacb, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0xacb, 4)]
[(stack, 0xffffffffffffff6c, 4) INDIRECT (stack, 0xffffffffffffff6c, 4) , (const, 0xacb, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0xacb, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0xacb, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0xacb, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0xacb, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0xacb, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0xacb, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0xacb, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0xacb, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xacb, 4)]
[(unique, 0x10000a56, 8) COPY (stack, 0xffffffffffffff80, 8), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0xacb, 4)]
[(unique, 0x10000abe, 8) COPY (register, 0x20, 8)]
[(unique, 0x10000b6e, 8) COPY (register, 0xa8, 8), (register, 0xa8, 8) PTRADD (register, 0xa8, 8) , (const, 0xfffffffffffffffd, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x403d30, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x401140, 8) , (unique, 0xbd80, 8) , (register, 0xb8, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0xa8, 8)]
[(unique, 0x3100, 8) PTRADD (stack, 0xffffffffffffff88, 8) , (const, 0x18, 8) , (const, 0x1, 8)]
[(unique, 0x10000c98, 8) COPY (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x403e2c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffff70, 8) , (const, 0x0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xaad, 4)]
[(ram, 0x4c4e38, 8) INDIRECT (ram, 0x4c4e38, 8) , (const, 0xaad, 4)]
[(ram, 0x4c4f30, 8) INDIRECT (ram, 0x4c4f30, 8) , (const, 0xaad, 4)]
[(ram, 0x4c4f48, 8) INDIRECT (ram, 0x4c4f48, 8) , (const, 0xaad, 4)]
[(ram, 0x4c4f60, 8) INDIRECT (ram, 0x4c4f60, 8) , (const, 0xaad, 4)]
[(ram, 0x4c76b8, 8) INDIRECT (ram, 0x4c76b8, 8) , (const, 0xaad, 4)]
[(ram, 0x4c76c0, 4) INDIRECT (ram, 0x4c76c0, 4) , (const, 0xaad, 4)]
[(ram, 0x4c76c8, 8) INDIRECT (ram, 0x4c76c8, 8) , (const, 0xaad, 4)]
[(ram, 0x4c76d0, 8) INDIRECT (ram, 0x4c76d0, 8) , (const, 0xaad, 4)]
[(ram, 0x4c76d8, 4) INDIRECT (ram, 0x4c76d8, 4) , (const, 0xaad, 4)]
[(ram, 0x4c76e0, 8) INDIRECT (ram, 0x4c76e0, 8) , (const, 0xaad, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0xaad, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0xaad, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0xaad, 4)]
[(stack, 0xffffffffffffff6c, 4) INDIRECT (stack, 0xffffffffffffff6c, 4) , (const, 0xaad, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0xaad, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0xaad, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (unique, 0x10000c98, 8) , (const, 0xaad, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0xaad, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0xaad, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0xaad, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0xaad, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0xaad, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0xaad, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xaad, 4)]
[(register, 0x0, 8) CALL (ram, 0x426550, 8) , (unique, 0x10000e44, 8), (unique, 0x10000e44, 8) CAST (unique, 0x3100, 8)]
[ ---  BRANCH (ram, 0x403883, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x2f6, 4)]
[(ram, 0x4c4e38, 8) INDIRECT (ram, 0x4c4e38, 8) , (const, 0x2f6, 4)]
[(ram, 0x4c4f30, 8) INDIRECT (ram, 0x4c4f30, 8) , (const, 0x2f6, 4)]
[(ram, 0x4c4f48, 8) INDIRECT (ram, 0x4c4f48, 8) , (const, 0x2f6, 4)]
[(ram, 0x4c4f60, 8) INDIRECT (ram, 0x4c4f60, 8) , (const, 0x2f6, 4)]
[(ram, 0x4c76b8, 8) INDIRECT (ram, 0x4c76b8, 8) , (const, 0x2f6, 4)]
[(ram, 0x4c76c0, 4) INDIRECT (ram, 0x4c76c0, 4) , (const, 0x2f6, 4)]
[(ram, 0x4c76c8, 8) INDIRECT (ram, 0x4c76c8, 8) , (const, 0x2f6, 4)]
[(ram, 0x4c76d0, 8) INDIRECT (ram, 0x4c76d0, 8) , (const, 0x2f6, 4)]
[(ram, 0x4c76d8, 4) INDIRECT (ram, 0x4c76d8, 4) , (const, 0x2f6, 4)]
[(ram, 0x4c76e0, 8) INDIRECT (ram, 0x4c76e0, 8) , (const, 0x2f6, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x2f6, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x2f6, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x2f6, 4)]
[(stack, 0xffffffffffffff6c, 4) INDIRECT (stack, 0xffffffffffffff6c, 4) , (const, 0x2f6, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x2f6, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x2f6, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (unique, 0x10000c98, 8) , (const, 0x2f6, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x2f6, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x2f6, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x2f6, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x2f6, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x2f6, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x2f6, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2f6, 4)]
[(register, 0x0, 8) CALL (ram, 0x427240, 8) , (stack, 0xffffffffffffff70, 8) , (unique, 0x10000e4c, 8), (unique, 0x10000e4c, 8) CAST (unique, 0x3100, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff6c, 4) MULTIEQUAL (stack, 0xffffffffffffff6c, 4) , (stack, 0xffffffffffffff6c, 4)]
[(stack, 0xffffffffffffff68, 4) MULTIEQUAL (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(ram, 0x4c76e0, 8) MULTIEQUAL (ram, 0x4c76e0, 8) , (ram, 0x4c76e0, 8)]
[(ram, 0x4c76d8, 4) MULTIEQUAL (ram, 0x4c76d8, 4) , (ram, 0x4c76d8, 4)]
[(ram, 0x4c76d0, 8) MULTIEQUAL (ram, 0x4c76d0, 8) , (ram, 0x4c76d0, 8)]
[(ram, 0x4c76c8, 8) MULTIEQUAL (ram, 0x4c76c8, 8) , (ram, 0x4c76c8, 8)]
[(ram, 0x4c76c0, 4) MULTIEQUAL (ram, 0x4c76c0, 4) , (ram, 0x4c76c0, 4)]
[(ram, 0x4c76b8, 8) MULTIEQUAL (ram, 0x4c76b8, 8) , (ram, 0x4c76b8, 8)]
[(ram, 0x4c4f60, 8) MULTIEQUAL (ram, 0x4c4f60, 8) , (ram, 0x4c4f60, 8)]
[(ram, 0x4c4f48, 8) MULTIEQUAL (ram, 0x4c4f48, 8) , (ram, 0x4c4f48, 8)]
[(ram, 0x4c4f30, 8) MULTIEQUAL (ram, 0x4c4f30, 8) , (ram, 0x4c4f30, 8)]
[(ram, 0x4c4e38, 8) MULTIEQUAL (ram, 0x4c4e38, 8) , (ram, 0x4c4e38, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x403d85, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xa0, 8) , (const, 0x0, 8), (register, 0xa0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0x10000e54, 8), (unique, 0x10000e54, 8) CAST (register, 0xa0, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0xe, 8) , (const, 0x8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x30e, 4)]
[(ram, 0x4c4e38, 8) INDIRECT (ram, 0x4c4e38, 8) , (const, 0x30e, 4), (ram, 0x4c4e38, 8) INDIRECT (ram, 0x4c4e38, 8) , (const, 0x307, 4)]
[(ram, 0x4c4f30, 8) INDIRECT (ram, 0x4c4f30, 8) , (const, 0x30e, 4), (ram, 0x4c4f30, 8) INDIRECT (ram, 0x4c4f30, 8) , (const, 0x307, 4)]
[(ram, 0x4c4f48, 8) INDIRECT (ram, 0x4c4f48, 8) , (const, 0x30e, 4), (ram, 0x4c4f48, 8) INDIRECT (ram, 0x4c4f48, 8) , (const, 0x307, 4)]
[(ram, 0x4c4f60, 8) INDIRECT (ram, 0x4c4f60, 8) , (const, 0x30e, 4), (ram, 0x4c4f60, 8) INDIRECT (ram, 0x4c4f60, 8) , (const, 0x307, 4)]
[(ram, 0x4c76b8, 8) INDIRECT (ram, 0x4c76b8, 8) , (const, 0x30e, 4), (ram, 0x4c76b8, 8) INDIRECT (ram, 0x4c76b8, 8) , (const, 0x307, 4)]
[(ram, 0x4c76c0, 4) INDIRECT (ram, 0x4c76c0, 4) , (const, 0x30e, 4), (ram, 0x4c76c0, 4) INDIRECT (ram, 0x4c76c0, 4) , (const, 0x307, 4)]
[(ram, 0x4c76c8, 8) INDIRECT (ram, 0x4c76c8, 8) , (const, 0x30e, 4), (ram, 0x4c76c8, 8) INDIRECT (ram, 0x4c76c8, 8) , (const, 0x307, 4)]
[(ram, 0x4c76d0, 8) INDIRECT (ram, 0x4c76d0, 8) , (const, 0x30e, 4), (ram, 0x4c76d0, 8) INDIRECT (ram, 0x4c76d0, 8) , (const, 0x307, 4)]
[(ram, 0x4c76d8, 4) INDIRECT (ram, 0x4c76d8, 4) , (const, 0x30e, 4), (ram, 0x4c76d8, 4) INDIRECT (ram, 0x4c76d8, 4) , (const, 0x307, 4)]
[(ram, 0x4c76e0, 8) INDIRECT (ram, 0x4c76e0, 8) , (const, 0x30e, 4), (ram, 0x4c76e0, 8) INDIRECT (ram, 0x4c76e0, 8) , (const, 0x307, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x30e, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x30e, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x30e, 4)]
[(stack, 0xffffffffffffff6c, 4) INDIRECT (stack, 0xffffffffffffff6c, 4) , (const, 0x30e, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x30e, 4), (stack, 0xffffffffffffff70, 8) COPY (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x30e, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x30e, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x30e, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x30e, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x30e, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x30e, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x30e, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x30e, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x30e, 4)]
[(stack, 0xffffffffffffff80, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10000e5c, 8), (unique, 0x10000e5c, 8) CALL (ram, 0x429160, 8) , (register, 0xb8, 8)]
[ ---  CBRANCH (ram, 0x403d85, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10000e5c, 8), (unique, 0x10000e5c, 8) CALL (ram, 0x429160, 8) , (register, 0xb8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0xa0, 8) , (register, 0x0, 8), (register, 0xa0, 8) CAST (unique, 0x10000e74, 8), (unique, 0x10000e74, 8) INT_ADD (unique, 0x10000e64, 8) , (unique, 0x10000e6c, 8), (unique, 0x10000e6c, 8) CAST (stack, 0xffffffffffffff88, 8), (unique, 0x10000e64, 8) CAST (register, 0xa0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3800, 8) , (const, 0xffffffffffffffff, 8), (unique, 0x3800, 8) PTRADD (register, 0xa0, 8) , (const, 0x1, 8) , (const, 0x8, 8), (register, 0xa0, 8) CAST (unique, 0x10000e74, 8), (unique, 0x10000e74, 8) INT_ADD (unique, 0x10000e64, 8) , (unique, 0x10000e6c, 8), (unique, 0x10000e6c, 8) CAST (stack, 0xffffffffffffff88, 8), (unique, 0x10000e64, 8) CAST (register, 0xa0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x343, 4)]
[(ram, 0x4c4e38, 8) INDIRECT (ram, 0x4c4e38, 8) , (const, 0x343, 4), (ram, 0x4c4e38, 8) INDIRECT (ram, 0x4c4e38, 8) , (const, 0x340, 4), (ram, 0x4c4e38, 8) INDIRECT (ram, 0x4c4e38, 8) , (const, 0x339, 4)]
[(ram, 0x4c4f30, 8) INDIRECT (ram, 0x4c4f30, 8) , (const, 0x343, 4), (ram, 0x4c4f30, 8) INDIRECT (ram, 0x4c4f30, 8) , (const, 0x340, 4), (ram, 0x4c4f30, 8) INDIRECT (ram, 0x4c4f30, 8) , (const, 0x339, 4)]
[(ram, 0x4c4f48, 8) INDIRECT (ram, 0x4c4f48, 8) , (const, 0x343, 4), (ram, 0x4c4f48, 8) INDIRECT (ram, 0x4c4f48, 8) , (const, 0x340, 4), (ram, 0x4c4f48, 8) INDIRECT (ram, 0x4c4f48, 8) , (const, 0x339, 4)]
[(ram, 0x4c4f60, 8) INDIRECT (ram, 0x4c4f60, 8) , (const, 0x343, 4), (ram, 0x4c4f60, 8) INDIRECT (ram, 0x4c4f60, 8) , (const, 0x340, 4), (ram, 0x4c4f60, 8) INDIRECT (ram, 0x4c4f60, 8) , (const, 0x339, 4)]
[(ram, 0x4c76b8, 8) INDIRECT (ram, 0x4c76b8, 8) , (const, 0x343, 4), (ram, 0x4c76b8, 8) INDIRECT (ram, 0x4c76b8, 8) , (const, 0x340, 4), (ram, 0x4c76b8, 8) INDIRECT (ram, 0x4c76b8, 8) , (const, 0x339, 4)]
[(ram, 0x4c76c0, 4) INDIRECT (ram, 0x4c76c0, 4) , (const, 0x343, 4), (ram, 0x4c76c0, 4) INDIRECT (ram, 0x4c76c0, 4) , (const, 0x340, 4), (ram, 0x4c76c0, 4) INDIRECT (ram, 0x4c76c0, 4) , (const, 0x339, 4)]
[(ram, 0x4c76c8, 8) INDIRECT (ram, 0x4c76c8, 8) , (const, 0x343, 4), (ram, 0x4c76c8, 8) INDIRECT (ram, 0x4c76c8, 8) , (const, 0x340, 4), (ram, 0x4c76c8, 8) INDIRECT (ram, 0x4c76c8, 8) , (const, 0x339, 4)]
[(ram, 0x4c76d0, 8) INDIRECT (ram, 0x4c76d0, 8) , (const, 0x343, 4), (ram, 0x4c76d0, 8) INDIRECT (ram, 0x4c76d0, 8) , (const, 0x340, 4), (ram, 0x4c76d0, 8) INDIRECT (ram, 0x4c76d0, 8) , (const, 0x339, 4)]
[(ram, 0x4c76d8, 4) INDIRECT (ram, 0x4c76d8, 4) , (const, 0x343, 4), (ram, 0x4c76d8, 4) INDIRECT (ram, 0x4c76d8, 4) , (const, 0x340, 4), (ram, 0x4c76d8, 4) INDIRECT (ram, 0x4c76d8, 4) , (const, 0x339, 4)]
[(ram, 0x4c76e0, 8) INDIRECT (ram, 0x4c76e0, 8) , (const, 0x343, 4), (ram, 0x4c76e0, 8) INDIRECT (ram, 0x4c76e0, 8) , (const, 0x340, 4), (ram, 0x4c76e0, 8) INDIRECT (ram, 0x4c76e0, 8) , (const, 0x339, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x343, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x343, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x343, 4)]
[(stack, 0xffffffffffffff6c, 4) INDIRECT (stack, 0xffffffffffffff6c, 4) , (const, 0x343, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x343, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x343, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x343, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x343, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x343, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x343, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x343, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x343, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x343, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x343, 4)]
[ ---  CBRANCH (ram, 0x403f06, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0xffffffffffffffff, 8), (register, 0x0, 8) CAST (unique, 0x10000e7c, 8), (unique, 0x10000e7c, 8) CALL (ram, 0x403450, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff60, 8) , (unique, 0x10000657, 8) , (const, 0x0, 8) , (unique, 0x3100, 8), (unique, 0x10000657, 8) PTRSUB (const, 0x0, 8) , (const, 0x4b0c15, 8), (unique, 0x3100, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffb8, 8)]
[(unique, 0x10000a9e, 8) COPY (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x403b15, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x35c, 4)]
[(ram, 0x4c4e38, 8) INDIRECT (ram, 0x4c4e38, 8) , (const, 0x35c, 4)]
[(ram, 0x4c4f30, 8) INDIRECT (ram, 0x4c4f30, 8) , (const, 0x35c, 4)]
[(ram, 0x4c4f48, 8) INDIRECT (ram, 0x4c4f48, 8) , (const, 0x35c, 4)]
[(ram, 0x4c4f60, 8) INDIRECT (ram, 0x4c4f60, 8) , (const, 0x35c, 4)]
[(ram, 0x4c76b8, 8) INDIRECT (ram, 0x4c76b8, 8) , (const, 0x35c, 4)]
[(ram, 0x4c76c0, 4) INDIRECT (ram, 0x4c76c0, 4) , (const, 0x35c, 4)]
[(ram, 0x4c76c8, 8) INDIRECT (ram, 0x4c76c8, 8) , (const, 0x35c, 4)]
[(ram, 0x4c76d0, 8) INDIRECT (ram, 0x4c76d0, 8) , (const, 0x35c, 4)]
[(ram, 0x4c76d8, 4) INDIRECT (ram, 0x4c76d8, 4) , (const, 0x35c, 4)]
[(ram, 0x4c76e0, 8) INDIRECT (ram, 0x4c76e0, 8) , (const, 0x35c, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x35c, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x35c, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x35c, 4)]
[(stack, 0xffffffffffffff6c, 4) INDIRECT (stack, 0xffffffffffffff6c, 4) , (const, 0x35c, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x35c, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x35c, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x35c, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x35c, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x35c, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x35c, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x35c, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x35c, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x35c, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x35c, 4)]
[(unique, 0x10000aa6, 8) COPY (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x403b15, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x4010c0, 8) , (register, 0x0, 8) , (unique, 0x10000647, 8), (unique, 0x10000647, 8) COPY (const, 0x49a40f, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x36d, 4)]
[(ram, 0x4c4e38, 8) INDIRECT (ram, 0x4c4e38, 8) , (const, 0x36d, 4)]
[(ram, 0x4c4f30, 8) INDIRECT (ram, 0x4c4f30, 8) , (const, 0x36d, 4)]
[(ram, 0x4c4f48, 8) INDIRECT (ram, 0x4c4f48, 8) , (const, 0x36d, 4)]
[(ram, 0x4c4f60, 8) INDIRECT (ram, 0x4c4f60, 8) , (const, 0x36d, 4)]
[(ram, 0x4c76b8, 8) INDIRECT (ram, 0x4c76b8, 8) , (const, 0x36d, 4)]
[(ram, 0x4c76c0, 4) INDIRECT (ram, 0x4c76c0, 4) , (const, 0x36d, 4)]
[(ram, 0x4c76c8, 8) INDIRECT (ram, 0x4c76c8, 8) , (const, 0x36d, 4)]
[(ram, 0x4c76d0, 8) INDIRECT (ram, 0x4c76d0, 8) , (const, 0x36d, 4)]
[(ram, 0x4c76d8, 4) INDIRECT (ram, 0x4c76d8, 4) , (const, 0x36d, 4)]
[(ram, 0x4c76e0, 8) INDIRECT (ram, 0x4c76e0, 8) , (const, 0x36d, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x36d, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x36d, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x36d, 4)]
[(stack, 0xffffffffffffff6c, 4) INDIRECT (stack, 0xffffffffffffff6c, 4) , (const, 0x36d, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x36d, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x36d, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x36d, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x36d, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x36d, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x36d, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x36d, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x36d, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x36d, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x36d, 4)]
[(register, 0x38, 8) CAST (unique, 0x10000e8c, 8), (unique, 0x10000e8c, 8) INT_SUB (unique, 0x10000e84, 8) , (register, 0x8, 8), (unique, 0x10000e84, 8) CAST (unique, 0x100007bf, 8), (unique, 0x100007bf, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff58, 8), (register, 0x8, 8) INT_AND (unique, 0x3100, 8) , (const, 0xfffffffffffff000, 8), (unique, 0x3100, 8) INT_ADD (register, 0x0, 8) , (const, 0x18, 8), (register, 0x0, 8) CALL (ram, 0x401170, 8) , (unique, 0x3100, 8) , (unique, 0x1000064f, 8), (unique, 0x1000064f, 8) PTRSUB (const, 0x0, 8) , (const, 0x49a418, 8), (unique, 0x3100, 8) INT_ADD (register, 0x0, 8) , (const, 0x8, 8)]
[(unique, 0x100002c7, 4) SUBPIECE (unique, 0x3100, 8) , (const, 0x0, 4), (unique, 0x3100, 8) INT_ADD (register, 0x0, 8) , (const, 0x18, 8), (register, 0x0, 8) CALL (ram, 0x401170, 8) , (unique, 0x3100, 8) , (unique, 0x1000064f, 8), (unique, 0x1000064f, 8) PTRSUB (const, 0x0, 8) , (const, 0x49a418, 8), (unique, 0x3100, 8) INT_ADD (register, 0x0, 8) , (const, 0x8, 8)]
[(unique, 0x10000c64, 8) COPY (register, 0x20, 8)]
[(unique, 0x100005fa, 8) MULTIEQUAL (unique, 0x10000c64, 8) , (unique, 0x10000c6c, 8)]
[(unique, 0x10000602, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x403957, 1) , (unique, 0x100005f1, 1), (unique, 0x100005f1, 1) INT_NOTEQUAL (register, 0x20, 8) , (register, 0x38, 8), (register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8)]
[(register, 0x20, 8) CAST (unique, 0x10000e9c, 8), (unique, 0x10000e9c, 8) INT_ADD (unique, 0x10000e94, 8) , (const, 0xfffffffffffff000, 8), (unique, 0x10000e94, 8) CAST (unique, 0x100005fa, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3c80, 8) , (unique, 0xbe00, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3c80, 8), (unique, 0x3c80, 8) CAST (unique, 0x10000ebc, 8), (unique, 0x10000ebc, 8) INT_ADD (unique, 0x10000eb4, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x10000eb4, 8) CAST (unique, 0x100005fa, 8)]
[(register, 0x20, 8) CAST (unique, 0x10000ecc, 8), (unique, 0x10000ecc, 8) INT_ADD (unique, 0x10000ec4, 8) , (const, 0xfffffffffffff000, 8), (unique, 0x10000ec4, 8) CAST (unique, 0x100005fa, 8)]
[(unique, 0x10000c6c, 8) COPY (register, 0x20, 8), (register, 0x20, 8) CAST (unique, 0x10000eac, 8), (unique, 0x10000eac, 8) INT_ADD (unique, 0x10000ea4, 8) , (const, 0xfffffffffffff000, 8), (unique, 0x10000ea4, 8) CAST (unique, 0x100005fa, 8)]
[(register, 0x20, 8) CAST (unique, 0x10000edc, 8), (unique, 0x10000edc, 8) INT_ADD (unique, 0x10000ed4, 8) , (unique, 0x100002cf, 8), (unique, 0x10000ed4, 8) CAST (unique, 0x10000602, 8), (unique, 0x100002cf, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_ZEXT (register, 0x0, 4), (register, 0x0, 4) INT_AND (unique, 0x100002c7, 4) , (const, 0xff0, 4)]
[(register, 0x20, 8) CAST (unique, 0x10000eec, 8), (unique, 0x10000eec, 8) INT_ADD (unique, 0x10000ee4, 8) , (unique, 0x100002cf, 8), (unique, 0x10000ee4, 8) CAST (unique, 0x10000602, 8), (unique, 0x100002cf, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_ZEXT (register, 0x0, 4), (register, 0x0, 4) INT_AND (unique, 0x100002c7, 4) , (const, 0xff0, 4)]
[(register, 0x20, 8) CAST (unique, 0x10000efc, 8), (unique, 0x10000efc, 8) INT_ADD (unique, 0x10000ef4, 8) , (unique, 0x100002cf, 8), (unique, 0x10000ef4, 8) CAST (unique, 0x10000602, 8), (unique, 0x100002cf, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_ZEXT (register, 0x0, 4), (register, 0x0, 4) INT_AND (unique, 0x100002c7, 4) , (const, 0xff0, 4)]
[(register, 0x20, 8) CAST (unique, 0x10000f0c, 8), (unique, 0x10000f0c, 8) INT_ADD (unique, 0x10000f04, 8) , (unique, 0x100002cf, 8), (unique, 0x10000f04, 8) CAST (unique, 0x10000602, 8), (unique, 0x100002cf, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_ZEXT (register, 0x0, 4), (register, 0x0, 4) INT_AND (unique, 0x100002c7, 4) , (const, 0xff0, 4)]
[(register, 0x20, 8) CAST (unique, 0x10000f1c, 8), (unique, 0x10000f1c, 8) INT_ADD (unique, 0x10000f14, 8) , (unique, 0x100002cf, 8), (unique, 0x10000f14, 8) CAST (unique, 0x10000602, 8), (unique, 0x100002cf, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_ZEXT (register, 0x0, 4), (register, 0x0, 4) INT_AND (unique, 0x100002c7, 4) , (const, 0xff0, 4)]
[ ---  CBRANCH (ram, 0x40396a, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) INT_ZEXT (register, 0x0, 4), (register, 0x0, 4) INT_AND (unique, 0x100002c7, 4) , (const, 0xff0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3880, 8) , (unique, 0xbe00, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3880, 8), (unique, 0x3880, 8) CAST (unique, 0x10000f2c, 8), (unique, 0x10000f2c, 8) INT_ADD (unique, 0x10000f24, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x10000f24, 8) CAST (unique, 0x10000602, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x403989, 8), (register, 0x20, 8) CAST (unique, 0x10000f54, 8), (unique, 0x10000f54, 8) INT_ADD (unique, 0x10000f4c, 8) , (unique, 0x100007d7, 8), (unique, 0x10000f4c, 8) CAST (unique, 0x10000602, 8), (unique, 0x100007d7, 8) INT_ADD (unique, 0x100002cf, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x403, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x403, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x403, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x403, 4)]
[(stack, 0xffffffffffffff6c, 4) INDIRECT (stack, 0xffffffffffffff6c, 4) , (const, 0x403, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x403, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x403, 4), (stack, 0xffffffffffffff78, 8) COPY (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x403, 4), (stack, 0xffffffffffffff88, 8) COPY (register, 0x98, 8), (register, 0x98, 8) CAST (unique, 0x10000f44, 8), (unique, 0x10000f44, 8) INT_AND (unique, 0x3800, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3800, 8) CAST (unique, 0x10000f3c, 8), (unique, 0x10000f3c, 8) INT_ADD (unique, 0x10000f34, 8) , (unique, 0x100007cf, 8), (unique, 0x10000f34, 8) CAST (unique, 0x10000602, 8), (unique, 0x100007cf, 8) INT_ADD (unique, 0x100002cf, 8) , (const, 0xf, 8)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x403, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x403, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x403, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x403, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x403, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x403, 4)]
[(ram, 0x4c4f30, 8) INDIRECT (ram, 0x4c4f30, 8) , (const, 0x40b, 4), (ram, 0x4c4f30, 8) INDIRECT (ram, 0x4c4f30, 8) , (const, 0x403, 4)]
[(ram, 0x4c4f48, 8) INDIRECT (ram, 0x4c4f48, 8) , (const, 0x40b, 4), (ram, 0x4c4f48, 8) INDIRECT (ram, 0x4c4f48, 8) , (const, 0x403, 4)]
[(ram, 0x4c4f60, 8) INDIRECT (ram, 0x4c4f60, 8) , (const, 0x40b, 4), (ram, 0x4c4f60, 8) INDIRECT (ram, 0x4c4f60, 8) , (const, 0x403, 4)]
[(ram, 0x4c76b8, 8) INDIRECT (ram, 0x4c76b8, 8) , (const, 0x40b, 4), (ram, 0x4c76b8, 8) INDIRECT (ram, 0x4c76b8, 8) , (const, 0x403, 4)]
[(ram, 0x4c76c0, 4) INDIRECT (ram, 0x4c76c0, 4) , (const, 0x40b, 4), (ram, 0x4c76c0, 4) INDIRECT (ram, 0x4c76c0, 4) , (const, 0x403, 4)]
[(ram, 0x4c76c8, 8) INDIRECT (ram, 0x4c76c8, 8) , (const, 0x40b, 4), (ram, 0x4c76c8, 8) INDIRECT (ram, 0x4c76c8, 8) , (const, 0x403, 4)]
[(ram, 0x4c76d0, 8) INDIRECT (ram, 0x4c76d0, 8) , (const, 0x40b, 4), (ram, 0x4c76d0, 8) INDIRECT (ram, 0x4c76d0, 8) , (const, 0x403, 4)]
[(ram, 0x4c76d8, 4) INDIRECT (ram, 0x4c76d8, 4) , (const, 0x40b, 4), (ram, 0x4c76d8, 4) INDIRECT (ram, 0x4c76d8, 4) , (const, 0x403, 4)]
[(ram, 0x4c76e0, 8) INDIRECT (ram, 0x4c76e0, 8) , (const, 0x40b, 4), (ram, 0x4c76e0, 8) INDIRECT (ram, 0x4c76e0, 8) , (const, 0x403, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x0, 8) , (const, 0x0, 1), (register, 0x0, 8) CAST (unique, 0x10000f5c, 8), (unique, 0x10000f5c, 8) CALL (ram, 0x401160, 8) , (register, 0x98, 8) , (unique, 0x3100, 8) , (register, 0x0, 8), (register, 0x98, 8) CAST (unique, 0x10000f44, 8), (unique, 0x10000f44, 8) INT_AND (unique, 0x3800, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3800, 8) CAST (unique, 0x10000f3c, 8), (unique, 0x10000f3c, 8) INT_ADD (unique, 0x10000f34, 8) , (unique, 0x100007cf, 8), (unique, 0x10000f34, 8) CAST (unique, 0x10000602, 8), (unique, 0x100007cf, 8) INT_ADD (unique, 0x100002cf, 8) , (const, 0xf, 8)]
[(unique, 0x100009ba, 8) COPY (ram, 0x4c4e38, 8), (ram, 0x4c4e38, 8) INDIRECT (ram, 0x4c4e38, 8) , (const, 0x40b, 4), (ram, 0x4c4e38, 8) INDIRECT (ram, 0x4c4e38, 8) , (const, 0x403, 4)]
[(register, 0x10, 8) INT_SEXT (unique, 0x10000f64, 1), (unique, 0x10000f64, 1) CAST (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (stack, 0xffffffffffffff80, 8), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x403, 4)]
[ ---  CBRANCH (ram, 0x404050, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (stack, 0xffffffffffffff80, 8), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x403, 4)]
[ ---  CBRANCH (ram, 0x40406a, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x20, 8) , (register, 0x20, 8), (register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000f6d, 8) , (unique, 0xbe00, 8), (unique, 0x10000f6d, 8) CAST (unique, 0x3c80, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000f65, 8), (unique, 0x10000f65, 8) CAST (unique, 0x3c80, 8), (unique, 0x3c80, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffff000, 8) , (const, 0x1, 8)]
[ ---  BRANCH (ram, 0x404053, 1)]
[(register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xffffffffffffffe0, 8) , (const, 0x1, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000f7d, 8) , (unique, 0xbe00, 8), (unique, 0x10000f7d, 8) CAST (unique, 0x3800, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000f75, 8), (unique, 0x10000f75, 8) CAST (unique, 0x3800, 8), (unique, 0x3800, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(ram, 0x4c4e38, 8) INDIRECT (ram, 0x4c4e38, 8) , (const, 0xa99, 4)]
[(ram, 0x4c4f30, 8) INDIRECT (ram, 0x4c4f30, 8) , (const, 0xa99, 4)]
[(ram, 0x4c4f48, 8) INDIRECT (ram, 0x4c4f48, 8) , (const, 0xa99, 4)]
[(ram, 0x4c4f60, 8) INDIRECT (ram, 0x4c4f60, 8) , (const, 0xa99, 4)]
[(ram, 0x4c76b8, 8) INDIRECT (ram, 0x4c76b8, 8) , (const, 0xa99, 4)]
[(ram, 0x4c76c0, 4) INDIRECT (ram, 0x4c76c0, 4) , (const, 0xa99, 4)]
[(ram, 0x4c76c8, 8) INDIRECT (ram, 0x4c76c8, 8) , (const, 0xa99, 4)]
[(ram, 0x4c76d0, 8) INDIRECT (ram, 0x4c76d0, 8) , (const, 0xa99, 4)]
[(ram, 0x4c76d8, 4) INDIRECT (ram, 0x4c76d8, 4) , (const, 0xa99, 4)]
[(ram, 0x4c76e0, 8) INDIRECT (ram, 0x4c76e0, 8) , (const, 0xa99, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x0, 8) , (const, 0x2f, 1), (register, 0x0, 8) CAST (unique, 0x10000f8d, 8), (unique, 0x10000f8d, 8) INT_AND (unique, 0x10000f85, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x10000f85, 8) CAST (unique, 0x3800, 8), (unique, 0x3800, 8) PTRADD (register, 0x20, 8) , (const, 0xffffffffffffffef, 8) , (const, 0x1, 8)]
[(unique, 0x10000b4e, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10000f8d, 8), (unique, 0x10000f8d, 8) INT_AND (unique, 0x10000f85, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x10000f85, 8) CAST (unique, 0x3800, 8), (unique, 0x3800, 8) PTRADD (register, 0x20, 8) , (const, 0xffffffffffffffef, 8) , (const, 0x1, 8)]
[(register, 0x30, 8) COPY (const, 0x0, 8)]
[(register, 0x8, 8) INT_AND (register, 0x10, 8) , (const, 0xffffffff, 8)]
[(unique, 0x100009fe, 8) COPY (stack, 0xffffffffffffff80, 8)]
[(register, 0x30, 8) INT_ADD (register, 0x30, 8) , (register, 0x8, 8), (register, 0x8, 8) INT_ZEXT (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x8, 1) , (const, 0x2f, 1), (register, 0x8, 1) SUBPIECE (register, 0x8, 8) , (const, 0x0, 4), (register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8), (register, 0x30, 8) MULTIEQUAL (register, 0x30, 8) , (register, 0x30, 8)]
[(register, 0x8, 8) INT_ZEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0x0, 8), (register, 0x0, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x1, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x100009fe, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x4039a8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0x0, 8), (register, 0x0, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x1, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x100009fe, 8) , (register, 0x0, 8)]
[(register, 0x38, 8) CAST (unique, 0x10000fad, 8), (unique, 0x10000fad, 8) INT_ADD (unique, 0x10000fa5, 8) , (unique, 0x100007df, 8), (unique, 0x10000fa5, 8) CAST (unique, 0x10000602, 8), (unique, 0x100007df, 8) INT_SUB (unique, 0x100002cf, 8) , (register, 0x0, 8), (register, 0x0, 8) INT_AND (unique, 0x10000f9d, 8) , (const, 0xfffffffffffff000, 8), (unique, 0x10000f9d, 8) CAST (register, 0x0, 8), (register, 0x0, 8) PTRADD (register, 0x0, 8) , (unique, 0x100007e7, 8) , (const, 0x1, 8), (unique, 0x100007e7, 8) INT_SUB (const, 0x22, 8) , (unique, 0x10000f95, 8), (unique, 0x10000f95, 8) CAST (stack, 0xffffffffffffff80, 8)]
[(unique, 0x100004ba, 4) SUBPIECE (register, 0x0, 8) , (const, 0x0, 4), (register, 0x0, 8) PTRADD (register, 0x0, 8) , (unique, 0x100007e7, 8) , (const, 0x1, 8), (unique, 0x100007e7, 8) INT_SUB (const, 0x22, 8) , (unique, 0x10000f95, 8), (unique, 0x10000f95, 8) CAST (stack, 0xffffffffffffff80, 8)]
[(unique, 0x10000c74, 8) COPY (register, 0x20, 8)]
[(unique, 0x1000060b, 8) MULTIEQUAL (unique, 0x10000c74, 8) , (unique, 0x10000c7c, 8)]
[(unique, 0x10000613, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x4039f7, 1) , (unique, 0x1000060a, 1), (unique, 0x1000060a, 1) INT_NOTEQUAL (register, 0x20, 8) , (register, 0x38, 8), (register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8)]
[(register, 0x20, 8) PTRADD (unique, 0x1000060b, 8) , (const, 0xfffffffffffff000, 8) , (const, 0x1, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000fbd, 8) , (unique, 0xbe00, 8), (unique, 0x10000fbd, 8) CAST (unique, 0x3c80, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000fb5, 8), (unique, 0x10000fb5, 8) CAST (unique, 0x3c80, 8), (unique, 0x3c80, 8) PTRADD (unique, 0x1000060b, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x20, 8) PTRADD (unique, 0x1000060b, 8) , (const, 0xfffffffffffff000, 8) , (const, 0x1, 8)]
[(unique, 0x10000c7c, 8) COPY (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x1000060b, 8) , (const, 0xfffffffffffff000, 8) , (const, 0x1, 8)]
[(register, 0x20, 8) PTRADD (unique, 0x10000613, 8) , (unique, 0x10000310, 8) , (const, 0x1, 8), (unique, 0x10000310, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_ZEXT (register, 0x0, 4), (register, 0x0, 4) INT_AND (unique, 0x100004ba, 4) , (const, 0xff0, 4)]
[(register, 0x20, 8) PTRADD (unique, 0x10000613, 8) , (unique, 0x10000310, 8) , (const, 0x1, 8), (unique, 0x10000310, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_ZEXT (register, 0x0, 4), (register, 0x0, 4) INT_AND (unique, 0x100004ba, 4) , (const, 0xff0, 4)]
[(register, 0x20, 8) PTRADD (unique, 0x10000613, 8) , (unique, 0x10000310, 8) , (const, 0x1, 8), (unique, 0x10000310, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_ZEXT (register, 0x0, 4), (register, 0x0, 4) INT_AND (unique, 0x100004ba, 4) , (const, 0xff0, 4)]
[ ---  CBRANCH (ram, 0x403a0d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) INT_ZEXT (register, 0x0, 4), (register, 0x0, 4) INT_AND (unique, 0x100004ba, 4) , (const, 0xff0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000fcd, 8) , (unique, 0xbe00, 8), (unique, 0x10000fcd, 8) CAST (unique, 0x3880, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000fc5, 8), (unique, 0x10000fc5, 8) CAST (unique, 0x3880, 8), (unique, 0x3880, 8) PTRADD (unique, 0x10000613, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(unique, 0x100009de, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10000fdd, 8), (unique, 0x10000fdd, 8) INT_AND (unique, 0x10000fd5, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x10000fd5, 8) CAST (unique, 0x3800, 8), (unique, 0x3800, 8) PTRADD (unique, 0x10000613, 8) , (unique, 0x100007ef, 8) , (const, 0x1, 8), (unique, 0x100007ef, 8) INT_ADD (unique, 0x10000310, 8) , (const, 0xf, 8)]
[(unique, 0x10000a16, 8) COPY (stack, 0xffffffffffffff80, 8)]
[(ram, 0x4c4e38, 8) INDIRECT (ram, 0x4c4e38, 8) , (const, 0x50d, 4), (ram, 0x4c4e38, 8) MULTIEQUAL (ram, 0x4c4e38, 8) , (ram, 0x4c4e38, 8)]
[(ram, 0x4c4f30, 8) INDIRECT (ram, 0x4c4f30, 8) , (const, 0x50d, 4), (ram, 0x4c4f30, 8) MULTIEQUAL (ram, 0x4c4f30, 8) , (ram, 0x4c4f30, 8)]
[(ram, 0x4c4f48, 8) INDIRECT (ram, 0x4c4f48, 8) , (const, 0x50d, 4), (ram, 0x4c4f48, 8) MULTIEQUAL (ram, 0x4c4f48, 8) , (ram, 0x4c4f48, 8)]
[(ram, 0x4c4f60, 8) INDIRECT (ram, 0x4c4f60, 8) , (const, 0x50d, 4), (ram, 0x4c4f60, 8) MULTIEQUAL (ram, 0x4c4f60, 8) , (ram, 0x4c4f60, 8)]
[(ram, 0x4c76b8, 8) INDIRECT (ram, 0x4c76b8, 8) , (const, 0x50d, 4), (ram, 0x4c76b8, 8) MULTIEQUAL (ram, 0x4c76b8, 8) , (ram, 0x4c76b8, 8)]
[(ram, 0x4c76c0, 4) INDIRECT (ram, 0x4c76c0, 4) , (const, 0x50d, 4), (ram, 0x4c76c0, 4) MULTIEQUAL (ram, 0x4c76c0, 4) , (ram, 0x4c76c0, 4)]
[(ram, 0x4c76c8, 8) INDIRECT (ram, 0x4c76c8, 8) , (const, 0x50d, 4), (ram, 0x4c76c8, 8) MULTIEQUAL (ram, 0x4c76c8, 8) , (ram, 0x4c76c8, 8)]
[(ram, 0x4c76d0, 8) INDIRECT (ram, 0x4c76d0, 8) , (const, 0x50d, 4), (ram, 0x4c76d0, 8) MULTIEQUAL (ram, 0x4c76d0, 8) , (ram, 0x4c76d0, 8)]
[(ram, 0x4c76d8, 4) INDIRECT (ram, 0x4c76d8, 4) , (const, 0x50d, 4), (ram, 0x4c76d8, 4) MULTIEQUAL (ram, 0x4c76d8, 4) , (ram, 0x4c76d8, 4)]
[(ram, 0x4c76e0, 8) INDIRECT (ram, 0x4c76e0, 8) , (const, 0x50d, 4), (ram, 0x4c76e0, 8) MULTIEQUAL (ram, 0x4c76e0, 8) , (ram, 0x4c76e0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x0, 8) , (register, 0x10, 1), (register, 0x10, 1) SUBPIECE (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) CAST (unique, 0x10000fe5, 8), (unique, 0x10000fe5, 8) INT_ADD (unique, 0x100009ba, 8) , (unique, 0x3300, 8), (unique, 0x3300, 8) INT_MULT (register, 0x10, 8) , (const, 0x4, 8), (register, 0x0, 8) COPY (unique, 0x100009ee, 8), (unique, 0x100009ee, 8) MULTIEQUAL (unique, 0x100009de, 8) , (unique, 0x100009e6, 8), (register, 0x10, 8) MULTIEQUAL (register, 0x10, 8) , (register, 0x10, 8)]
[(register, 0x10, 8) INT_SEXT (unique, 0x10000fed, 1), (unique, 0x10000fed, 1) CAST (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0x8, 8), (register, 0x8, 8) PTRADD (register, 0x8, 8) , (const, 0x1, 8) , (const, 0x1, 8), (register, 0x8, 8) MULTIEQUAL (unique, 0x10000a16, 8) , (register, 0x8, 8)]
[(unique, 0x100009e6, 8) COPY (register, 0x0, 8), (register, 0x0, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x1, 8), (register, 0x0, 8) COPY (unique, 0x100009ee, 8), (unique, 0x100009ee, 8) MULTIEQUAL (unique, 0x100009de, 8) , (unique, 0x100009e6, 8)]
[ ---  CBRANCH (ram, 0x403a24, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0x8, 8), (register, 0x8, 8) PTRADD (register, 0x8, 8) , (const, 0x1, 8) , (const, 0x1, 8), (register, 0x8, 8) MULTIEQUAL (unique, 0x10000a16, 8) , (register, 0x8, 8)]
[(unique, 0x10000a86, 8) COPY (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x403f0f, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (register, 0x30, 8) , (const, 0x2, 8)]
[(ram, 0x4c4e38, 8) INDIRECT (ram, 0x4c4e38, 8) , (const, 0xa32, 4)]
[(ram, 0x4c4f30, 8) INDIRECT (ram, 0x4c4f30, 8) , (const, 0xa32, 4)]
[(ram, 0x4c4f48, 8) INDIRECT (ram, 0x4c4f48, 8) , (const, 0xa32, 4)]
[(ram, 0x4c4f60, 8) INDIRECT (ram, 0x4c4f60, 8) , (const, 0xa32, 4)]
[(ram, 0x4c76b8, 8) INDIRECT (ram, 0x4c76b8, 8) , (const, 0xa32, 4)]
[(ram, 0x4c76c0, 4) INDIRECT (ram, 0x4c76c0, 4) , (const, 0xa32, 4)]
[(ram, 0x4c76c8, 8) INDIRECT (ram, 0x4c76c8, 8) , (const, 0xa32, 4)]
[(ram, 0x4c76d0, 8) INDIRECT (ram, 0x4c76d0, 8) , (const, 0xa32, 4)]
[(ram, 0x4c76d8, 4) INDIRECT (ram, 0x4c76d8, 4) , (const, 0xa32, 4)]
[(ram, 0x4c76e0, 8) INDIRECT (ram, 0x4c76e0, 8) , (const, 0xa32, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x0, 8) , (const, 0x2f, 1)]
[(unique, 0x100009f6, 8) COPY (register, 0x0, 8)]
[(unique, 0x10000b46, 8) COPY (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x404083, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x30, 8) , (const, 0x0, 8)]
[(register, 0x88, 8) MULTIEQUAL (unique, 0x10000b46, 8) , (unique, 0x10000b4e, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (const, 0x2f, 1), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x1, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x100009f6, 8) , (register, 0x0, 8)]
[(register, 0x0, 8) PTRADD (register, 0x0, 8) , (const, 0xa, 8) , (const, 0x1, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x100009f6, 8) , (register, 0x0, 8)]
[(ram, 0x4c4e38, 8) INDIRECT (ram, 0x4c4e38, 8) , (const, 0xa4f, 4), (ram, 0x4c4e38, 8) INDIRECT (ram, 0x4c4e38, 8) , (const, 0xa43, 4), (ram, 0x4c4e38, 8) MULTIEQUAL (ram, 0x4c4e38, 8) , (ram, 0x4c4e38, 8)]
[(ram, 0x4c4f30, 8) INDIRECT (ram, 0x4c4f30, 8) , (const, 0xa4f, 4), (ram, 0x4c4f30, 8) INDIRECT (ram, 0x4c4f30, 8) , (const, 0xa43, 4), (ram, 0x4c4f30, 8) MULTIEQUAL (ram, 0x4c4f30, 8) , (ram, 0x4c4f30, 8)]
[(ram, 0x4c4f48, 8) INDIRECT (ram, 0x4c4f48, 8) , (const, 0xa4f, 4), (ram, 0x4c4f48, 8) INDIRECT (ram, 0x4c4f48, 8) , (const, 0xa43, 4), (ram, 0x4c4f48, 8) MULTIEQUAL (ram, 0x4c4f48, 8) , (ram, 0x4c4f48, 8)]
[(ram, 0x4c4f60, 8) INDIRECT (ram, 0x4c4f60, 8) , (const, 0xa4f, 4), (ram, 0x4c4f60, 8) INDIRECT (ram, 0x4c4f60, 8) , (const, 0xa43, 4), (ram, 0x4c4f60, 8) MULTIEQUAL (ram, 0x4c4f60, 8) , (ram, 0x4c4f60, 8)]
[(ram, 0x4c76b8, 8) INDIRECT (ram, 0x4c76b8, 8) , (const, 0xa4f, 4), (ram, 0x4c76b8, 8) INDIRECT (ram, 0x4c76b8, 8) , (const, 0xa43, 4), (ram, 0x4c76b8, 8) MULTIEQUAL (ram, 0x4c76b8, 8) , (ram, 0x4c76b8, 8)]
[(ram, 0x4c76c0, 4) INDIRECT (ram, 0x4c76c0, 4) , (const, 0xa4f, 4), (ram, 0x4c76c0, 4) INDIRECT (ram, 0x4c76c0, 4) , (const, 0xa43, 4), (ram, 0x4c76c0, 4) MULTIEQUAL (ram, 0x4c76c0, 4) , (ram, 0x4c76c0, 4)]
[(ram, 0x4c76c8, 8) INDIRECT (ram, 0x4c76c8, 8) , (const, 0xa4f, 4), (ram, 0x4c76c8, 8) INDIRECT (ram, 0x4c76c8, 8) , (const, 0xa43, 4), (ram, 0x4c76c8, 8) MULTIEQUAL (ram, 0x4c76c8, 8) , (ram, 0x4c76c8, 8)]
[(ram, 0x4c76d0, 8) INDIRECT (ram, 0x4c76d0, 8) , (const, 0xa4f, 4), (ram, 0x4c76d0, 8) INDIRECT (ram, 0x4c76d0, 8) , (const, 0xa43, 4), (ram, 0x4c76d0, 8) MULTIEQUAL (ram, 0x4c76d0, 8) , (ram, 0x4c76d0, 8)]
[(ram, 0x4c76d8, 4) INDIRECT (ram, 0x4c76d8, 4) , (const, 0xa4f, 4), (ram, 0x4c76d8, 4) INDIRECT (ram, 0x4c76d8, 4) , (const, 0xa43, 4), (ram, 0x4c76d8, 4) MULTIEQUAL (ram, 0x4c76d8, 4) , (ram, 0x4c76d8, 4)]
[(ram, 0x4c76e0, 8) INDIRECT (ram, 0x4c76e0, 8) , (const, 0xa4f, 4), (ram, 0x4c76e0, 8) INDIRECT (ram, 0x4c76e0, 8) , (const, 0xa43, 4), (ram, 0x4c76e0, 8) MULTIEQUAL (ram, 0x4c76e0, 8) , (ram, 0x4c76e0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000fee, 8) , (const, 0x54494c534e415254, 8), (unique, 0x10000fee, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x2, 8) , (const, 0x1, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x100009f6, 8) , (register, 0x0, 8)]
[(unique, 0x10000a96, 8) COPY (register, 0x20, 8), (register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8)]
[ ---  BRANCH (ram, 0x403a47, 1)]
[(unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x2, 8) , (const, 0x1, 8)]
[(unique, 0x10000a8e, 8) COPY (register, 0x20, 8)]
[ ---  BRANCH (ram, 0x403a47, 1)]
[(register, 0x88, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8) , (register, 0x88, 8)]
[(ram, 0x4c4f30, 8) INDIRECT (ram, 0x4c4f30, 8) , (const, 0x527, 4), (ram, 0x4c4f30, 8) MULTIEQUAL (ram, 0x4c4f30, 8) , (ram, 0x4c4f30, 8) , (ram, 0x4c4f30, 8)]
[(ram, 0x4c4f48, 8) INDIRECT (ram, 0x4c4f48, 8) , (const, 0x527, 4), (ram, 0x4c4f48, 8) MULTIEQUAL (ram, 0x4c4f48, 8) , (ram, 0x4c4f48, 8) , (ram, 0x4c4f48, 8)]
[(ram, 0x4c4f60, 8) INDIRECT (ram, 0x4c4f60, 8) , (const, 0x527, 4), (ram, 0x4c4f60, 8) MULTIEQUAL (ram, 0x4c4f60, 8) , (ram, 0x4c4f60, 8) , (ram, 0x4c4f60, 8)]
[(ram, 0x4c76b8, 8) INDIRECT (ram, 0x4c76b8, 8) , (const, 0x527, 4), (ram, 0x4c76b8, 8) MULTIEQUAL (ram, 0x4c76b8, 8) , (ram, 0x4c76b8, 8) , (ram, 0x4c76b8, 8)]
[(ram, 0x4c76c0, 4) INDIRECT (ram, 0x4c76c0, 4) , (const, 0x527, 4), (ram, 0x4c76c0, 4) MULTIEQUAL (ram, 0x4c76c0, 4) , (ram, 0x4c76c0, 4) , (ram, 0x4c76c0, 4)]
[(ram, 0x4c76c8, 8) INDIRECT (ram, 0x4c76c8, 8) , (const, 0x527, 4), (ram, 0x4c76c8, 8) MULTIEQUAL (ram, 0x4c76c8, 8) , (ram, 0x4c76c8, 8) , (ram, 0x4c76c8, 8)]
[(ram, 0x4c76d0, 8) INDIRECT (ram, 0x4c76d0, 8) , (const, 0x527, 4), (ram, 0x4c76d0, 8) MULTIEQUAL (ram, 0x4c76d0, 8) , (ram, 0x4c76d0, 8) , (ram, 0x4c76d0, 8)]
[(ram, 0x4c76d8, 4) INDIRECT (ram, 0x4c76d8, 4) , (const, 0x527, 4), (ram, 0x4c76d8, 4) MULTIEQUAL (ram, 0x4c76d8, 4) , (ram, 0x4c76d8, 4) , (ram, 0x4c76d8, 4)]
[(ram, 0x4c76e0, 8) INDIRECT (ram, 0x4c76e0, 8) , (const, 0x527, 4), (ram, 0x4c76e0, 8) MULTIEQUAL (ram, 0x4c76e0, 8) , (ram, 0x4c76e0, 8) , (ram, 0x4c76e0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x0, 8) , (const, 0x0, 1), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (unique, 0x3100, 8) , (register, 0x0, 8)]
[(unique, 0x100009c2, 8) COPY (ram, 0x4c4e38, 8), (ram, 0x4c4e38, 8) INDIRECT (ram, 0x4c4e38, 8) , (const, 0x527, 4), (ram, 0x4c4e38, 8) MULTIEQUAL (ram, 0x4c4e38, 8) , (ram, 0x4c4e38, 8) , (ram, 0x4c4e38, 8)]
[(unique, 0x10000a3e, 8) COPY (stack, 0xffffffffffffff88, 8)]
[(unique, 0x10000a7e, 8) COPY (register, 0x20, 8), (register, 0x20, 8) MULTIEQUAL (unique, 0x10000a86, 8) , (unique, 0x10000a8e, 8) , (unique, 0x10000a96, 8)]
[(unique, 0x10000b5e, 8) COPY (stack, 0xffffffffffffff78, 8)]
[(unique, 0x10000c63, 1) COPY (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (stack, 0xffffffffffffff88, 8)]
[ ---  CBRANCH (ram, 0x404032, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (stack, 0xffffffffffffff88, 8)]
[ ---  CBRANCH (ram, 0x4040fc, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x20, 8) , (register, 0x20, 8), (register, 0x20, 8) MULTIEQUAL (unique, 0x10000a76, 8) , (unique, 0x10000a7e, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000ffe, 8) , (unique, 0xbe00, 8), (unique, 0x10000ffe, 8) CAST (unique, 0x3c80, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000ff6, 8), (unique, 0x10000ff6, 8) CAST (unique, 0x3c80, 8), (unique, 0x3c80, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(unique, 0x10000a76, 8) COPY (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffff000, 8) , (const, 0x1, 8)]
[ ---  BRANCH (ram, 0x404035, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001006, 8) , (register, 0x20, 8), (unique, 0x10001006, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff0, 8) , (const, 0x1, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000100e, 8) , (register, 0x20, 8), (unique, 0x1000100e, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff0, 8) , (const, 0x1, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000101e, 8) , (unique, 0xbe00, 8), (unique, 0x1000101e, 8) CAST (register, 0x20, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10001016, 8), (unique, 0x10001016, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(ram, 0x4c4e38, 8) INDIRECT (ram, 0x4c4e38, 8) , (const, 0xa2e, 4)]
[(ram, 0x4c4f30, 8) INDIRECT (ram, 0x4c4f30, 8) , (const, 0xa2e, 4)]
[(ram, 0x4c4f48, 8) INDIRECT (ram, 0x4c4f48, 8) , (const, 0xa2e, 4)]
[(ram, 0x4c4f60, 8) INDIRECT (ram, 0x4c4f60, 8) , (const, 0xa2e, 4)]
[(ram, 0x4c76b8, 8) INDIRECT (ram, 0x4c76b8, 8) , (const, 0xa2e, 4)]
[(ram, 0x4c76c0, 4) INDIRECT (ram, 0x4c76c0, 4) , (const, 0xa2e, 4)]
[(ram, 0x4c76c8, 8) INDIRECT (ram, 0x4c76c8, 8) , (const, 0xa2e, 4)]
[(ram, 0x4c76d0, 8) INDIRECT (ram, 0x4c76d0, 8) , (const, 0xa2e, 4)]
[(ram, 0x4c76d8, 4) INDIRECT (ram, 0x4c76d8, 4) , (const, 0xa2e, 4)]
[(ram, 0x4c76e0, 8) INDIRECT (ram, 0x4c76e0, 8) , (const, 0xa2e, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x0, 8) , (const, 0x2f, 1), (register, 0x0, 8) CAST (unique, 0x1000102e, 8), (unique, 0x1000102e, 8) INT_AND (unique, 0x10001026, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x10001026, 8) CAST (unique, 0x3800, 8), (unique, 0x3800, 8) PTRADD (register, 0x20, 8) , (const, 0xffffffffffffffff, 8) , (const, 0x1, 8)]
[(unique, 0x10000b2e, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x1000102e, 8), (unique, 0x1000102e, 8) INT_AND (unique, 0x10001026, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x10001026, 8) CAST (unique, 0x3800, 8), (unique, 0x3800, 8) PTRADD (register, 0x20, 8) , (const, 0xffffffffffffffff, 8) , (const, 0x1, 8)]
[ ---  BRANCH (ram, 0x403fc8, 1)]
[(unique, 0x10000a36, 8) COPY (register, 0x10, 8), (register, 0x10, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x1, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0x10000a36, 8) , (unique, 0x10000a3e, 8)]
[(unique, 0x10000b56, 8) COPY (register, 0x90, 8), (register, 0x90, 8) PTRADD (register, 0x90, 8) , (register, 0x8, 8) , (const, 0x1, 8), (register, 0x8, 8) INT_ZEXT (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x8, 1) , (const, 0x2f, 1), (register, 0x8, 1) MULTIEQUAL (unique, 0x10000c62, 1) , (unique, 0x10000c63, 1), (register, 0x90, 8) MULTIEQUAL (unique, 0x10000b56, 8) , (unique, 0x10000b5e, 8)]
[(unique, 0x10000c62, 1) COPY (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0x10, 8), (register, 0x10, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x1, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0x10000a36, 8) , (unique, 0x10000a3e, 8)]
[ ---  CBRANCH (ram, 0x403a5b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0x10, 8), (register, 0x10, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x1, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0x10000a36, 8) , (unique, 0x10000a3e, 8)]
[(register, 0x38, 8) PTRADD (register, 0x20, 8) , (unique, 0x10000329, 8) , (const, 0x1, 8), (unique, 0x10000329, 8) INT_2COMP (register, 0x10, 8), (register, 0x10, 8) INT_AND (unique, 0x1000103e, 8) , (const, 0xfffffffffffff000, 8), (unique, 0x1000103e, 8) CAST (register, 0x10, 8), (register, 0x10, 8) PTRADD (register, 0x10, 8) , (unique, 0x100007f7, 8) , (const, 0x1, 8), (unique, 0x100007f7, 8) INT_SUB (const, 0x1a, 8) , (unique, 0x10001036, 8), (unique, 0x10001036, 8) CAST (stack, 0xffffffffffffff88, 8)]
[(unique, 0x100004c2, 4) SUBPIECE (register, 0x10, 8) , (const, 0x0, 4), (register, 0x10, 8) PTRADD (register, 0x10, 8) , (unique, 0x100007f7, 8) , (const, 0x1, 8), (unique, 0x100007f7, 8) INT_SUB (const, 0x1a, 8) , (unique, 0x10001036, 8), (unique, 0x10001036, 8) CAST (stack, 0xffffffffffffff88, 8)]
[ ---  CBRANCH (ram, 0x403aaa, 1) , (unique, 0x1000061b, 1), (unique, 0x1000061b, 1) INT_NOTEQUAL (register, 0x20, 8) , (register, 0x38, 8), (register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000104e, 8) , (unique, 0xbe00, 8), (unique, 0x1000104e, 8) CAST (unique, 0x3c80, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10001046, 8), (unique, 0x10001046, 8) CAST (unique, 0x3c80, 8), (unique, 0x3c80, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffff000, 8) , (const, 0x1, 8)]
[(register, 0x20, 8) PTRADD (register, 0x20, 8) , (unique, 0x10000349, 8) , (const, 0x1, 8), (unique, 0x10000349, 8) INT_2COMP (register, 0x10, 8), (register, 0x10, 8) INT_ZEXT (register, 0x10, 4), (register, 0x10, 4) INT_AND (unique, 0x100004c2, 4) , (const, 0xff0, 4)]
[(register, 0x20, 8) PTRADD (register, 0x20, 8) , (unique, 0x10000349, 8) , (const, 0x1, 8), (unique, 0x10000349, 8) INT_2COMP (register, 0x10, 8), (register, 0x10, 8) INT_ZEXT (register, 0x10, 4), (register, 0x10, 4) INT_AND (unique, 0x100004c2, 4) , (const, 0xff0, 4)]
[(register, 0x20, 8) PTRADD (register, 0x20, 8) , (unique, 0x10000349, 8) , (const, 0x1, 8), (unique, 0x10000349, 8) INT_2COMP (register, 0x10, 8), (register, 0x10, 8) INT_ZEXT (register, 0x10, 4), (register, 0x10, 4) INT_AND (unique, 0x100004c2, 4) , (const, 0xff0, 4)]
[ ---  CBRANCH (ram, 0x403ac1, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x10, 8) , (const, 0x0, 8), (register, 0x10, 8) INT_ZEXT (register, 0x10, 4), (register, 0x10, 4) INT_AND (unique, 0x100004c2, 4) , (const, 0xff0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000105e, 8) , (unique, 0xbe00, 8), (unique, 0x1000105e, 8) CAST (unique, 0x3880, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10001056, 8), (unique, 0x10001056, 8) CAST (unique, 0x3880, 8), (unique, 0x3880, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(unique, 0x10000a1e, 8) COPY (register, 0x30, 8), (register, 0x30, 8) CAST (unique, 0x1000106e, 8), (unique, 0x1000106e, 8) INT_AND (unique, 0x10001066, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x10001066, 8) CAST (unique, 0x3800, 8), (unique, 0x3800, 8) PTRADD (register, 0x20, 8) , (unique, 0x100007ff, 8) , (const, 0x1, 8), (unique, 0x100007ff, 8) INT_ADD (unique, 0x10000349, 8) , (const, 0xf, 8)]
[(ram, 0x4c4e38, 8) INDIRECT (ram, 0x4c4e38, 8) , (const, 0x616, 4), (ram, 0x4c4e38, 8) MULTIEQUAL (ram, 0x4c4e38, 8) , (ram, 0x4c4e38, 8)]
[(ram, 0x4c4f30, 8) INDIRECT (ram, 0x4c4f30, 8) , (const, 0x616, 4), (ram, 0x4c4f30, 8) MULTIEQUAL (ram, 0x4c4f30, 8) , (ram, 0x4c4f30, 8)]
[(ram, 0x4c4f48, 8) INDIRECT (ram, 0x4c4f48, 8) , (const, 0x616, 4), (ram, 0x4c4f48, 8) MULTIEQUAL (ram, 0x4c4f48, 8) , (ram, 0x4c4f48, 8)]
[(ram, 0x4c4f60, 8) INDIRECT (ram, 0x4c4f60, 8) , (const, 0x616, 4), (ram, 0x4c4f60, 8) MULTIEQUAL (ram, 0x4c4f60, 8) , (ram, 0x4c4f60, 8)]
[(ram, 0x4c76b8, 8) INDIRECT (ram, 0x4c76b8, 8) , (const, 0x616, 4), (ram, 0x4c76b8, 8) MULTIEQUAL (ram, 0x4c76b8, 8) , (ram, 0x4c76b8, 8)]
[(ram, 0x4c76c0, 4) INDIRECT (ram, 0x4c76c0, 4) , (const, 0x616, 4), (ram, 0x4c76c0, 4) MULTIEQUAL (ram, 0x4c76c0, 4) , (ram, 0x4c76c0, 4)]
[(ram, 0x4c76c8, 8) INDIRECT (ram, 0x4c76c8, 8) , (const, 0x616, 4), (ram, 0x4c76c8, 8) MULTIEQUAL (ram, 0x4c76c8, 8) , (ram, 0x4c76c8, 8)]
[(ram, 0x4c76d0, 8) INDIRECT (ram, 0x4c76d0, 8) , (const, 0x616, 4), (ram, 0x4c76d0, 8) MULTIEQUAL (ram, 0x4c76d0, 8) , (ram, 0x4c76d0, 8)]
[(ram, 0x4c76d8, 4) INDIRECT (ram, 0x4c76d8, 4) , (const, 0x616, 4), (ram, 0x4c76d8, 4) MULTIEQUAL (ram, 0x4c76d8, 4) , (ram, 0x4c76d8, 4)]
[(ram, 0x4c76e0, 8) INDIRECT (ram, 0x4c76e0, 8) , (const, 0x616, 4), (ram, 0x4c76e0, 8) MULTIEQUAL (ram, 0x4c76e0, 8) , (ram, 0x4c76e0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x10, 8) , (register, 0x0, 1), (register, 0x0, 1) SUBPIECE (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) CAST (unique, 0x10001076, 8), (unique, 0x10001076, 8) INT_ADD (unique, 0x100009c2, 8) , (unique, 0x3300, 8), (unique, 0x3300, 8) INT_MULT (register, 0x0, 8) , (const, 0x4, 8), (register, 0x0, 8) INT_SEXT (unique, 0xbb00, 1), (register, 0x10, 8) COPY (unique, 0x10000a2e, 8), (unique, 0x10000a2e, 8) MULTIEQUAL (unique, 0x10000a1e, 8) , (unique, 0x10000a26, 8), (unique, 0xbb00, 1) MULTIEQUAL (unique, 0xbb00, 1) , (unique, 0xbb00, 1)]
[(unique, 0x10000a26, 8) COPY (register, 0x10, 8), (register, 0x10, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x1, 8), (register, 0x10, 8) COPY (unique, 0x10000a2e, 8), (unique, 0x10000a2e, 8) MULTIEQUAL (unique, 0x10000a1e, 8) , (unique, 0x10000a26, 8)]
[ ---  CBRANCH (ram, 0x403ad4, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0xa8, 8), (register, 0xa8, 8) PTRADD (register, 0xa8, 8) , (const, 0x1, 8) , (const, 0x1, 8), (register, 0xa8, 8) MULTIEQUAL (register, 0x98, 8) , (register, 0xa8, 8)]
[(unique, 0x10000a5e, 8) COPY (unique, 0x1000107e, 8), (unique, 0x1000107e, 8) CAST (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x403f24, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (register, 0x90, 8) , (const, 0x2, 8)]
[(ram, 0x4c4e38, 8) INDIRECT (ram, 0x4c4e38, 8) , (const, 0x9d4, 4)]
[(ram, 0x4c4f30, 8) INDIRECT (ram, 0x4c4f30, 8) , (const, 0x9d4, 4)]
[(ram, 0x4c4f48, 8) INDIRECT (ram, 0x4c4f48, 8) , (const, 0x9d4, 4)]
[(ram, 0x4c4f60, 8) INDIRECT (ram, 0x4c4f60, 8) , (const, 0x9d4, 4)]
[(ram, 0x4c76b8, 8) INDIRECT (ram, 0x4c76b8, 8) , (const, 0x9d4, 4)]
[(ram, 0x4c76c0, 4) INDIRECT (ram, 0x4c76c0, 4) , (const, 0x9d4, 4)]
[(ram, 0x4c76c8, 8) INDIRECT (ram, 0x4c76c8, 8) , (const, 0x9d4, 4)]
[(ram, 0x4c76d0, 8) INDIRECT (ram, 0x4c76d0, 8) , (const, 0x9d4, 4)]
[(ram, 0x4c76d8, 4) INDIRECT (ram, 0x4c76d8, 4) , (const, 0x9d4, 4)]
[(ram, 0x4c76e0, 8) INDIRECT (ram, 0x4c76e0, 8) , (const, 0x9d4, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x10, 8) , (const, 0x2f, 1)]
[ ---  CBRANCH (ram, 0x403fc5, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x90, 8) , (const, 0x0, 8)]
[(register, 0x30, 8) MULTIEQUAL (unique, 0x10000b2e, 8) , (register, 0x30, 8)]
[(ram, 0x4c4e38, 8) INDIRECT (ram, 0x4c4e38, 8) , (const, 0x9e5, 4), (ram, 0x4c4e38, 8) MULTIEQUAL (ram, 0x4c4e38, 8) , (ram, 0x4c4e38, 8)]
[(ram, 0x4c4f30, 8) INDIRECT (ram, 0x4c4f30, 8) , (const, 0x9e5, 4), (ram, 0x4c4f30, 8) MULTIEQUAL (ram, 0x4c4f30, 8) , (ram, 0x4c4f30, 8)]
[(ram, 0x4c4f48, 8) INDIRECT (ram, 0x4c4f48, 8) , (const, 0x9e5, 4), (ram, 0x4c4f48, 8) MULTIEQUAL (ram, 0x4c4f48, 8) , (ram, 0x4c4f48, 8)]
[(ram, 0x4c4f60, 8) INDIRECT (ram, 0x4c4f60, 8) , (const, 0x9e5, 4), (ram, 0x4c4f60, 8) MULTIEQUAL (ram, 0x4c4f60, 8) , (ram, 0x4c4f60, 8)]
[(ram, 0x4c76b8, 8) INDIRECT (ram, 0x4c76b8, 8) , (const, 0x9e5, 4), (ram, 0x4c76b8, 8) MULTIEQUAL (ram, 0x4c76b8, 8) , (ram, 0x4c76b8, 8)]
[(ram, 0x4c76c0, 4) INDIRECT (ram, 0x4c76c0, 4) , (const, 0x9e5, 4), (ram, 0x4c76c0, 4) MULTIEQUAL (ram, 0x4c76c0, 4) , (ram, 0x4c76c0, 4)]
[(ram, 0x4c76c8, 8) INDIRECT (ram, 0x4c76c8, 8) , (const, 0x9e5, 4), (ram, 0x4c76c8, 8) MULTIEQUAL (ram, 0x4c76c8, 8) , (ram, 0x4c76c8, 8)]
[(ram, 0x4c76d0, 8) INDIRECT (ram, 0x4c76d0, 8) , (const, 0x9e5, 4), (ram, 0x4c76d0, 8) MULTIEQUAL (ram, 0x4c76d0, 8) , (ram, 0x4c76d0, 8)]
[(ram, 0x4c76d8, 4) INDIRECT (ram, 0x4c76d8, 4) , (const, 0x9e5, 4), (ram, 0x4c76d8, 4) MULTIEQUAL (ram, 0x4c76d8, 4) , (ram, 0x4c76d8, 4)]
[(ram, 0x4c76e0, 8) INDIRECT (ram, 0x4c76e0, 8) , (const, 0x9e5, 4), (ram, 0x4c76e0, 8) MULTIEQUAL (ram, 0x4c76e0, 8) , (ram, 0x4c76e0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (const, 0x2f, 1), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x1, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x10, 8)]
[(unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x2, 8) , (const, 0x1, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x10, 8)]
[(unique, 0x10000a6e, 8) COPY (unique, 0x10001086, 8), (unique, 0x10001086, 8) CAST (register, 0x20, 8), (register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8)]
[ ---  BRANCH (ram, 0x403af8, 1)]
[(unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x2, 8) , (const, 0x1, 8)]
[(unique, 0x10000a66, 8) COPY (unique, 0x1000108e, 8), (unique, 0x1000108e, 8) CAST (register, 0x20, 8)]
[ ---  BRANCH (ram, 0x403af8, 1)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x10, 8) , (const, 0x0, 1), (register, 0x10, 8) MULTIEQUAL (register, 0x10, 8) , (unique, 0x3100, 8) , (unique, 0x3100, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x403b0d, 8), (register, 0x20, 8) CAST (unique, 0x1000109e, 8), (unique, 0x1000109e, 8) INT_ADD (unique, 0x10001096, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x10001096, 8) CAST (register, 0x20, 8), (register, 0x20, 8) MULTIEQUAL (unique, 0x10000a5e, 8) , (unique, 0x10000a66, 8) , (unique, 0x10000a6e, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x637, 4)]
[(ram, 0x4c4e38, 8) INDIRECT (ram, 0x4c4e38, 8) , (const, 0x637, 4), (ram, 0x4c4e38, 8) INDIRECT (ram, 0x4c4e38, 8) , (const, 0x630, 4), (ram, 0x4c4e38, 8) MULTIEQUAL (ram, 0x4c4e38, 8) , (ram, 0x4c4e38, 8) , (ram, 0x4c4e38, 8)]
[(ram, 0x4c4f30, 8) INDIRECT (ram, 0x4c4f30, 8) , (const, 0x637, 4), (ram, 0x4c4f30, 8) INDIRECT (ram, 0x4c4f30, 8) , (const, 0x630, 4), (ram, 0x4c4f30, 8) MULTIEQUAL (ram, 0x4c4f30, 8) , (ram, 0x4c4f30, 8) , (ram, 0x4c4f30, 8)]
[(ram, 0x4c4f48, 8) INDIRECT (ram, 0x4c4f48, 8) , (const, 0x637, 4), (ram, 0x4c4f48, 8) INDIRECT (ram, 0x4c4f48, 8) , (const, 0x630, 4), (ram, 0x4c4f48, 8) MULTIEQUAL (ram, 0x4c4f48, 8) , (ram, 0x4c4f48, 8) , (ram, 0x4c4f48, 8)]
[(ram, 0x4c4f60, 8) INDIRECT (ram, 0x4c4f60, 8) , (const, 0x637, 4), (ram, 0x4c4f60, 8) INDIRECT (ram, 0x4c4f60, 8) , (const, 0x630, 4), (ram, 0x4c4f60, 8) MULTIEQUAL (ram, 0x4c4f60, 8) , (ram, 0x4c4f60, 8) , (ram, 0x4c4f60, 8)]
[(ram, 0x4c76b8, 8) INDIRECT (ram, 0x4c76b8, 8) , (const, 0x637, 4), (ram, 0x4c76b8, 8) INDIRECT (ram, 0x4c76b8, 8) , (const, 0x630, 4), (ram, 0x4c76b8, 8) MULTIEQUAL (ram, 0x4c76b8, 8) , (ram, 0x4c76b8, 8) , (ram, 0x4c76b8, 8)]
[(ram, 0x4c76c0, 4) INDIRECT (ram, 0x4c76c0, 4) , (const, 0x637, 4), (ram, 0x4c76c0, 4) INDIRECT (ram, 0x4c76c0, 4) , (const, 0x630, 4), (ram, 0x4c76c0, 4) MULTIEQUAL (ram, 0x4c76c0, 4) , (ram, 0x4c76c0, 4) , (ram, 0x4c76c0, 4)]
[(ram, 0x4c76c8, 8) INDIRECT (ram, 0x4c76c8, 8) , (const, 0x637, 4), (ram, 0x4c76c8, 8) INDIRECT (ram, 0x4c76c8, 8) , (const, 0x630, 4), (ram, 0x4c76c8, 8) MULTIEQUAL (ram, 0x4c76c8, 8) , (ram, 0x4c76c8, 8) , (ram, 0x4c76c8, 8)]
[(ram, 0x4c76d0, 8) INDIRECT (ram, 0x4c76d0, 8) , (const, 0x637, 4), (ram, 0x4c76d0, 8) INDIRECT (ram, 0x4c76d0, 8) , (const, 0x630, 4), (ram, 0x4c76d0, 8) MULTIEQUAL (ram, 0x4c76d0, 8) , (ram, 0x4c76d0, 8) , (ram, 0x4c76d0, 8)]
[(ram, 0x4c76d8, 4) INDIRECT (ram, 0x4c76d8, 4) , (const, 0x637, 4), (ram, 0x4c76d8, 4) INDIRECT (ram, 0x4c76d8, 4) , (const, 0x630, 4), (ram, 0x4c76d8, 4) MULTIEQUAL (ram, 0x4c76d8, 4) , (ram, 0x4c76d8, 4) , (ram, 0x4c76d8, 4)]
[(ram, 0x4c76e0, 8) INDIRECT (ram, 0x4c76e0, 8) , (const, 0x637, 4), (ram, 0x4c76e0, 8) INDIRECT (ram, 0x4c76e0, 8) , (const, 0x630, 4), (ram, 0x4c76e0, 8) MULTIEQUAL (ram, 0x4c76e0, 8) , (ram, 0x4c76e0, 8) , (ram, 0x4c76e0, 8)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x637, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x637, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x637, 4)]
[(stack, 0xffffffffffffff6c, 4) INDIRECT (stack, 0xffffffffffffff6c, 4) , (const, 0x637, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x637, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x637, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x637, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x637, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x637, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x637, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x637, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x637, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x637, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x637, 4)]
[ ---  CBRANCH (ram, 0x403edc, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x45b630, 8) , (register, 0x88, 8) , (register, 0x30, 8) , (unique, 0x3800, 8) , (const, 0x1, 8), (unique, 0x3800, 8) PTRADD (register, 0xa0, 8) , (const, 0x1, 8) , (const, 0x8, 8), (register, 0x30, 8) MULTIEQUAL (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8)]
[ ---  CBRANCH (ram, 0x4040be, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0xffffffff, 4)]
[ ---  CBRANCH (ram, 0x403efb, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4c4f60, 8) , (const, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x403efb, 8), (register, 0x20, 8) CAST (unique, 0x100010ae, 8), (unique, 0x100010ae, 8) INT_ADD (unique, 0x100010a6, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x100010a6, 8) CAST (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x9ba, 4)]
[(ram, 0x4c4e38, 8) INDIRECT (ram, 0x4c4e38, 8) , (const, 0x9ba, 4)]
[(ram, 0x4c4f30, 8) INDIRECT (ram, 0x4c4f30, 8) , (const, 0x9ba, 4)]
[(ram, 0x4c4f48, 8) INDIRECT (ram, 0x4c4f48, 8) , (const, 0x9ba, 4)]
[(ram, 0x4c4f60, 8) INDIRECT (ram, 0x4c4f60, 8) , (const, 0x9ba, 4)]
[(ram, 0x4c76b8, 8) INDIRECT (ram, 0x4c76b8, 8) , (const, 0x9ba, 4)]
[(ram, 0x4c76c0, 4) INDIRECT (ram, 0x4c76c0, 4) , (const, 0x9ba, 4)]
[(ram, 0x4c76c8, 8) INDIRECT (ram, 0x4c76c8, 8) , (const, 0x9ba, 4)]
[(ram, 0x4c76d0, 8) INDIRECT (ram, 0x4c76d0, 8) , (const, 0x9ba, 4)]
[(ram, 0x4c76d8, 4) INDIRECT (ram, 0x4c76d8, 4) , (const, 0x9ba, 4)]
[(ram, 0x4c76e0, 8) INDIRECT (ram, 0x4c76e0, 8) , (const, 0x9ba, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x9ba, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x9ba, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x9ba, 4)]
[(stack, 0xffffffffffffff6c, 4) INDIRECT (stack, 0xffffffffffffff6c, 4) , (const, 0x9ba, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x9ba, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x9ba, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x9ba, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x9ba, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x9ba, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x9ba, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x9ba, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x9ba, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x9ba, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x9ba, 4)]
[ ---  CALL (ram, 0x0, 8) , (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x10, 8) , (const, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x403f04, 8), (register, 0x20, 8) CAST (unique, 0x100010be, 8), (unique, 0x100010be, 8) INT_ADD (unique, 0x100010b6, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x100010b6, 8) CAST (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x9c0, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4c4e38, 8) INDIRECT (ram, 0x4c4e38, 8) , (const, 0x9c0, 4), (ram, 0x4c4e38, 8) MULTIEQUAL (ram, 0x4c4e38, 8) , (ram, 0x4c4e38, 8)]
[(ram, 0x4c4f30, 8) INDIRECT (ram, 0x4c4f30, 8) , (const, 0x9c0, 4), (ram, 0x4c4f30, 8) MULTIEQUAL (ram, 0x4c4f30, 8) , (ram, 0x4c4f30, 8)]
[(ram, 0x4c4f48, 8) INDIRECT (ram, 0x4c4f48, 8) , (const, 0x9c0, 4), (ram, 0x4c4f48, 8) MULTIEQUAL (ram, 0x4c4f48, 8) , (ram, 0x4c4f48, 8)]
[(ram, 0x4c4f60, 8) INDIRECT (ram, 0x4c4f60, 8) , (const, 0x9c0, 4), (ram, 0x4c4f60, 8) MULTIEQUAL (ram, 0x4c4f60, 8) , (ram, 0x4c4f60, 8)]
[(ram, 0x4c76b8, 8) INDIRECT (ram, 0x4c76b8, 8) , (const, 0x9c0, 4), (ram, 0x4c76b8, 8) MULTIEQUAL (ram, 0x4c76b8, 8) , (ram, 0x4c76b8, 8)]
[(ram, 0x4c76c0, 4) INDIRECT (ram, 0x4c76c0, 4) , (const, 0x9c0, 4), (ram, 0x4c76c0, 4) MULTIEQUAL (ram, 0x4c76c0, 4) , (ram, 0x4c76c0, 4)]
[(ram, 0x4c76c8, 8) INDIRECT (ram, 0x4c76c8, 8) , (const, 0x9c0, 4), (ram, 0x4c76c8, 8) MULTIEQUAL (ram, 0x4c76c8, 8) , (ram, 0x4c76c8, 8)]
[(ram, 0x4c76d0, 8) INDIRECT (ram, 0x4c76d0, 8) , (const, 0x9c0, 4), (ram, 0x4c76d0, 8) MULTIEQUAL (ram, 0x4c76d0, 8) , (ram, 0x4c76d0, 8)]
[(ram, 0x4c76d8, 4) INDIRECT (ram, 0x4c76d8, 4) , (const, 0x9c0, 4), (ram, 0x4c76d8, 4) MULTIEQUAL (ram, 0x4c76d8, 4) , (ram, 0x4c76d8, 4)]
[(ram, 0x4c76e0, 8) INDIRECT (ram, 0x4c76e0, 8) , (const, 0x9c0, 4), (ram, 0x4c76e0, 8) MULTIEQUAL (ram, 0x4c76e0, 8) , (ram, 0x4c76e0, 8)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x9c0, 4), (stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x9c0, 4), (stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x9c0, 4), (stack, 0xffffffffffffff68, 4) MULTIEQUAL (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4)]
[(stack, 0xffffffffffffff6c, 4) INDIRECT (stack, 0xffffffffffffff6c, 4) , (const, 0x9c0, 4), (stack, 0xffffffffffffff6c, 4) MULTIEQUAL (stack, 0xffffffffffffff6c, 4) , (stack, 0xffffffffffffff6c, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x9c0, 4), (stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x9c0, 4), (stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x9c0, 4), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x9c0, 4), (stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x9c0, 4), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x9c0, 4), (stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x9c0, 4), (stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x9c0, 4), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x9c0, 4), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x9c0, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CALL (ram, 0x426b40, 8) , (stack, 0xffffffffffffff80, 8), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(register, 0x38, 8) COPY (const, 0x0, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff6c, 4) MULTIEQUAL (stack, 0xffffffffffffff6c, 4) , (stack, 0xffffffffffffff6c, 4)]
[(stack, 0xffffffffffffff68, 4) MULTIEQUAL (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(ram, 0x4c76e0, 8) MULTIEQUAL (ram, 0x4c76e0, 8) , (ram, 0x4c76e0, 8)]
[(ram, 0x4c76d8, 4) MULTIEQUAL (ram, 0x4c76d8, 4) , (ram, 0x4c76d8, 4)]
[(ram, 0x4c76d0, 8) MULTIEQUAL (ram, 0x4c76d0, 8) , (ram, 0x4c76d0, 8)]
[(ram, 0x4c76c8, 8) MULTIEQUAL (ram, 0x4c76c8, 8) , (ram, 0x4c76c8, 8)]
[(ram, 0x4c76c0, 4) MULTIEQUAL (ram, 0x4c76c0, 4) , (ram, 0x4c76c0, 4)]
[(ram, 0x4c76b8, 8) MULTIEQUAL (ram, 0x4c76b8, 8) , (ram, 0x4c76b8, 8)]
[(ram, 0x4c4f60, 8) MULTIEQUAL (ram, 0x4c4f60, 8) , (ram, 0x4c4f60, 8)]
[(ram, 0x4c4f48, 8) MULTIEQUAL (ram, 0x4c4f48, 8) , (ram, 0x4c4f48, 8)]
[(ram, 0x4c4f30, 8) MULTIEQUAL (ram, 0x4c4f30, 8) , (ram, 0x4c4f30, 8)]
[(ram, 0x4c4e38, 8) MULTIEQUAL (ram, 0x4c4e38, 8) , (ram, 0x4c4e38, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8)]
[(stack, 0xffffffffffffff98, 8) COPY (register, 0x38, 8), (register, 0x38, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x38, 8)]
[ ---  BRANCH (ram, 0x403610, 1)]
[(ram, 0x4c4e38, 8) INDIRECT (ram, 0x4c4e38, 8) , (const, 0x9d1, 4)]
[(ram, 0x4c4f30, 8) INDIRECT (ram, 0x4c4f30, 8) , (const, 0x9d1, 4)]
[(ram, 0x4c4f48, 8) INDIRECT (ram, 0x4c4f48, 8) , (const, 0x9d1, 4)]
[(ram, 0x4c4f60, 8) INDIRECT (ram, 0x4c4f60, 8) , (const, 0x9d1, 4)]
[(ram, 0x4c76b8, 8) INDIRECT (ram, 0x4c76b8, 8) , (const, 0x9d1, 4)]
[(ram, 0x4c76c0, 4) INDIRECT (ram, 0x4c76c0, 4) , (const, 0x9d1, 4)]
[(ram, 0x4c76c8, 8) INDIRECT (ram, 0x4c76c8, 8) , (const, 0x9d1, 4)]
[(ram, 0x4c76d0, 8) INDIRECT (ram, 0x4c76d0, 8) , (const, 0x9d1, 4)]
[(ram, 0x4c76d8, 4) INDIRECT (ram, 0x4c76d8, 4) , (const, 0x9d1, 4)]
[(ram, 0x4c76e0, 8) INDIRECT (ram, 0x4c76e0, 8) , (const, 0x9d1, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3800, 8) , (const, 0xffffffffffffffff, 8), (unique, 0x3800, 8) PTRADD (register, 0xa0, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[ ---  BRANCH (ram, 0x403b15, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff6c, 4) MULTIEQUAL (stack, 0xffffffffffffff6c, 4) , (stack, 0xffffffffffffff6c, 4) , (stack, 0xffffffffffffff6c, 4) , (stack, 0xffffffffffffff6c, 4)]
[(stack, 0xffffffffffffff68, 4) MULTIEQUAL (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3800, 8) , (const, 0x0, 8), (unique, 0x3800, 8) PTRADD (register, 0xa0, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[(ram, 0x4c4e38, 8) INDIRECT (ram, 0x4c4e38, 8) , (const, 0x64d, 4), (ram, 0x4c4e38, 8) INDIRECT (ram, 0x4c4e38, 8) , (const, 0x645, 4), (ram, 0x4c4e38, 8) MULTIEQUAL (ram, 0x4c4e38, 8) , (ram, 0x4c4e38, 8) , (ram, 0x4c4e38, 8) , (ram, 0x4c4e38, 8)]
[(ram, 0x4c4f30, 8) INDIRECT (ram, 0x4c4f30, 8) , (const, 0x64d, 4), (ram, 0x4c4f30, 8) INDIRECT (ram, 0x4c4f30, 8) , (const, 0x645, 4), (ram, 0x4c4f30, 8) MULTIEQUAL (ram, 0x4c4f30, 8) , (ram, 0x4c4f30, 8) , (ram, 0x4c4f30, 8) , (ram, 0x4c4f30, 8)]
[(ram, 0x4c4f48, 8) INDIRECT (ram, 0x4c4f48, 8) , (const, 0x64d, 4), (ram, 0x4c4f48, 8) INDIRECT (ram, 0x4c4f48, 8) , (const, 0x645, 4), (ram, 0x4c4f48, 8) MULTIEQUAL (ram, 0x4c4f48, 8) , (ram, 0x4c4f48, 8) , (ram, 0x4c4f48, 8) , (ram, 0x4c4f48, 8)]
[(ram, 0x4c4f60, 8) INDIRECT (ram, 0x4c4f60, 8) , (const, 0x64d, 4), (ram, 0x4c4f60, 8) INDIRECT (ram, 0x4c4f60, 8) , (const, 0x645, 4), (ram, 0x4c4f60, 8) MULTIEQUAL (ram, 0x4c4f60, 8) , (ram, 0x4c4f60, 8) , (ram, 0x4c4f60, 8) , (ram, 0x4c4f60, 8)]
[(ram, 0x4c76b8, 8) INDIRECT (ram, 0x4c76b8, 8) , (const, 0x64d, 4), (ram, 0x4c76b8, 8) INDIRECT (ram, 0x4c76b8, 8) , (const, 0x645, 4), (ram, 0x4c76b8, 8) MULTIEQUAL (ram, 0x4c76b8, 8) , (ram, 0x4c76b8, 8) , (ram, 0x4c76b8, 8) , (ram, 0x4c76b8, 8)]
[(ram, 0x4c76c0, 4) INDIRECT (ram, 0x4c76c0, 4) , (const, 0x64d, 4), (ram, 0x4c76c0, 4) INDIRECT (ram, 0x4c76c0, 4) , (const, 0x645, 4), (ram, 0x4c76c0, 4) MULTIEQUAL (ram, 0x4c76c0, 4) , (ram, 0x4c76c0, 4) , (ram, 0x4c76c0, 4) , (ram, 0x4c76c0, 4)]
[(ram, 0x4c76c8, 8) INDIRECT (ram, 0x4c76c8, 8) , (const, 0x64d, 4), (ram, 0x4c76c8, 8) INDIRECT (ram, 0x4c76c8, 8) , (const, 0x645, 4), (ram, 0x4c76c8, 8) MULTIEQUAL (ram, 0x4c76c8, 8) , (ram, 0x4c76c8, 8) , (ram, 0x4c76c8, 8) , (ram, 0x4c76c8, 8)]
[(ram, 0x4c76d0, 8) INDIRECT (ram, 0x4c76d0, 8) , (const, 0x64d, 4), (ram, 0x4c76d0, 8) INDIRECT (ram, 0x4c76d0, 8) , (const, 0x645, 4), (ram, 0x4c76d0, 8) MULTIEQUAL (ram, 0x4c76d0, 8) , (ram, 0x4c76d0, 8) , (ram, 0x4c76d0, 8) , (ram, 0x4c76d0, 8)]
[(ram, 0x4c76d8, 4) INDIRECT (ram, 0x4c76d8, 4) , (const, 0x64d, 4), (ram, 0x4c76d8, 4) INDIRECT (ram, 0x4c76d8, 4) , (const, 0x645, 4), (ram, 0x4c76d8, 4) MULTIEQUAL (ram, 0x4c76d8, 4) , (ram, 0x4c76d8, 4) , (ram, 0x4c76d8, 4) , (ram, 0x4c76d8, 4)]
[(ram, 0x4c76e0, 8) INDIRECT (ram, 0x4c76e0, 8) , (const, 0x64d, 4), (ram, 0x4c76e0, 8) INDIRECT (ram, 0x4c76e0, 8) , (const, 0x645, 4), (ram, 0x4c76e0, 8) MULTIEQUAL (ram, 0x4c76e0, 8) , (ram, 0x4c76e0, 8) , (ram, 0x4c76e0, 8) , (ram, 0x4c76e0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0xbe00, 8), (unique, 0xbe00, 8) INT_ADD (unique, 0xbe00, 8) , (const, 0x1, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0xf, 8) , (const, 0x8, 8)]
[(unique, 0x10000a46, 8) COPY (unique, 0x100009d6, 8)]
[(unique, 0x10000aae, 8) COPY (register, 0x20, 8), (register, 0x20, 8) MULTIEQUAL (unique, 0x10000a9e, 8) , (unique, 0x10000aa6, 8) , (register, 0x20, 8) , (register, 0x20, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff6c, 4) MULTIEQUAL (stack, 0xffffffffffffff6c, 4) , (stack, 0xffffffffffffff6c, 4)]
[(stack, 0xffffffffffffff68, 4) MULTIEQUAL (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(ram, 0x4c76e0, 8) MULTIEQUAL (ram, 0x4c76e0, 8) , (ram, 0x4c76e0, 8)]
[(ram, 0x4c76d8, 4) MULTIEQUAL (ram, 0x4c76d8, 4) , (ram, 0x4c76d8, 4)]
[(ram, 0x4c76d0, 8) MULTIEQUAL (ram, 0x4c76d0, 8) , (ram, 0x4c76d0, 8)]
[(ram, 0x4c76c8, 8) MULTIEQUAL (ram, 0x4c76c8, 8) , (ram, 0x4c76c8, 8)]
[(ram, 0x4c76c0, 4) MULTIEQUAL (ram, 0x4c76c0, 4) , (ram, 0x4c76c0, 4)]
[(ram, 0x4c76b8, 8) MULTIEQUAL (ram, 0x4c76b8, 8) , (ram, 0x4c76b8, 8)]
[(ram, 0x4c4f48, 8) MULTIEQUAL (ram, 0x4c4f48, 8) , (ram, 0x4c4f48, 8)]
[(ram, 0x4c4f30, 8) MULTIEQUAL (ram, 0x4c4f30, 8) , (ram, 0x4c4f30, 8)]
[(ram, 0x4c4e38, 8) MULTIEQUAL (ram, 0x4c4e38, 8) , (ram, 0x4c4e38, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x10000aee, 8) COPY (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x403d9b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4c4f60, 8) , (const, 0x0, 8), (ram, 0x4c4f60, 8) MULTIEQUAL (ram, 0x4c4f60, 8) , (ram, 0x4c4f60, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xaa9, 4)]
[(ram, 0x4c4e38, 8) INDIRECT (ram, 0x4c4e38, 8) , (const, 0xaa9, 4)]
[(ram, 0x4c4f30, 8) INDIRECT (ram, 0x4c4f30, 8) , (const, 0xaa9, 4)]
[(ram, 0x4c4f48, 8) INDIRECT (ram, 0x4c4f48, 8) , (const, 0xaa9, 4)]
[(ram, 0x4c4f60, 8) INDIRECT (ram, 0x4c4f60, 8) , (const, 0xaa9, 4)]
[(ram, 0x4c76b8, 8) INDIRECT (ram, 0x4c76b8, 8) , (const, 0xaa9, 4)]
[(ram, 0x4c76c0, 4) INDIRECT (ram, 0x4c76c0, 4) , (const, 0xaa9, 4)]
[(ram, 0x4c76c8, 8) INDIRECT (ram, 0x4c76c8, 8) , (const, 0xaa9, 4)]
[(ram, 0x4c76d0, 8) INDIRECT (ram, 0x4c76d0, 8) , (const, 0xaa9, 4)]
[(ram, 0x4c76d8, 4) INDIRECT (ram, 0x4c76d8, 4) , (const, 0xaa9, 4)]
[(ram, 0x4c76e0, 8) INDIRECT (ram, 0x4c76e0, 8) , (const, 0xaa9, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0xaa9, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0xaa9, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0xaa9, 4)]
[(stack, 0xffffffffffffff6c, 4) INDIRECT (stack, 0xffffffffffffff6c, 4) , (const, 0xaa9, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0xaa9, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0xaa9, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0xaa9, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0xaa9, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0xaa9, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0xaa9, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0xaa9, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0xaa9, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0xaa9, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xaa9, 4)]
[ ---  CALL (ram, 0x0, 8) , (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x10, 8) , (const, 0x8, 8)]
[(unique, 0x10000af6, 8) COPY (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xaf1, 4)]
[(ram, 0x4c4e38, 8) INDIRECT (ram, 0x4c4e38, 8) , (const, 0xaf1, 4)]
[(ram, 0x4c4f30, 8) INDIRECT (ram, 0x4c4f30, 8) , (const, 0xaf1, 4)]
[(ram, 0x4c4f48, 8) INDIRECT (ram, 0x4c4f48, 8) , (const, 0xaf1, 4)]
[(ram, 0x4c4f60, 8) INDIRECT (ram, 0x4c4f60, 8) , (const, 0xaf1, 4)]
[(ram, 0x4c76b8, 8) INDIRECT (ram, 0x4c76b8, 8) , (const, 0xaf1, 4)]
[(ram, 0x4c76c0, 4) INDIRECT (ram, 0x4c76c0, 4) , (const, 0xaf1, 4)]
[(ram, 0x4c76c8, 8) INDIRECT (ram, 0x4c76c8, 8) , (const, 0xaf1, 4)]
[(ram, 0x4c76d0, 8) INDIRECT (ram, 0x4c76d0, 8) , (const, 0xaf1, 4)]
[(ram, 0x4c76d8, 4) INDIRECT (ram, 0x4c76d8, 4) , (const, 0xaf1, 4)]
[(ram, 0x4c76e0, 8) INDIRECT (ram, 0x4c76e0, 8) , (const, 0xaf1, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0xaf1, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0xaf1, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0xaf1, 4)]
[(stack, 0xffffffffffffff6c, 4) INDIRECT (stack, 0xffffffffffffff6c, 4) , (const, 0xaf1, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0xaf1, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0xaf1, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0xaf1, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0xaf1, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0xaf1, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0xaf1, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0xaf1, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0xaf1, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0xaf1, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xaf1, 4)]
[(unique, 0x10000a4e, 8) COPY (register, 0x18, 8)]
[(unique, 0x10000ab6, 8) COPY (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x403b28, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x401140, 8) , (unique, 0xbd80, 8) , (register, 0xb8, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) CAST (unique, 0x100010c6, 8), (unique, 0x100010c6, 8) INT_ADD (unique, 0xbd80, 8) , (unique, 0x3300, 8), (unique, 0x3300, 8) INT_MULT (register, 0xa8, 8) , (const, 0x18, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0xe, 8) , (const, 0x8, 8), (register, 0xa8, 8) INT_ADD (register, 0xa8, 8) , (const, 0xffffffffffffffff, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff6c, 4) MULTIEQUAL (stack, 0xffffffffffffff6c, 4) , (stack, 0xffffffffffffff6c, 4) , (stack, 0xffffffffffffff6c, 4)]
[(stack, 0xffffffffffffff68, 4) MULTIEQUAL (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(ram, 0x4c76e0, 8) MULTIEQUAL (ram, 0x4c76e0, 8) , (ram, 0x4c76e0, 8) , (ram, 0x4c76e0, 8)]
[(ram, 0x4c76d8, 4) MULTIEQUAL (ram, 0x4c76d8, 4) , (ram, 0x4c76d8, 4) , (ram, 0x4c76d8, 4)]
[(ram, 0x4c76d0, 8) MULTIEQUAL (ram, 0x4c76d0, 8) , (ram, 0x4c76d0, 8) , (ram, 0x4c76d0, 8)]
[(ram, 0x4c76c8, 8) MULTIEQUAL (ram, 0x4c76c8, 8) , (ram, 0x4c76c8, 8) , (ram, 0x4c76c8, 8)]
[(ram, 0x4c76c0, 4) MULTIEQUAL (ram, 0x4c76c0, 4) , (ram, 0x4c76c0, 4) , (ram, 0x4c76c0, 4)]
[(ram, 0x4c76b8, 8) MULTIEQUAL (ram, 0x4c76b8, 8) , (ram, 0x4c76b8, 8) , (ram, 0x4c76b8, 8)]
[(ram, 0x4c4f48, 8) MULTIEQUAL (ram, 0x4c4f48, 8) , (ram, 0x4c4f48, 8) , (ram, 0x4c4f48, 8)]
[(ram, 0x4c4f30, 8) MULTIEQUAL (ram, 0x4c4f30, 8) , (ram, 0x4c4f30, 8) , (ram, 0x4c4f30, 8)]
[(ram, 0x4c4e38, 8) MULTIEQUAL (ram, 0x4c4e38, 8) , (ram, 0x4c4e38, 8) , (ram, 0x4c4e38, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xa0, 8) MULTIEQUAL (register, 0xa0, 8) , (unique, 0x3400, 8) , (register, 0xa8, 8)]
[(register, 0x20, 8) MULTIEQUAL (unique, 0x10000aae, 8) , (unique, 0x10000ab6, 8) , (unique, 0x10000abe, 8)]
[(register, 0x18, 8) MULTIEQUAL (unique, 0x10000a46, 8) , (unique, 0x10000a4e, 8) , (unique, 0x10000a56, 8)]
[ ---  CBRANCH (ram, 0x403b3e, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4c4f60, 8) , (const, 0x0, 8), (ram, 0x4c4f60, 8) MULTIEQUAL (ram, 0x4c4f60, 8) , (ram, 0x4c4f60, 8) , (ram, 0x4c4f60, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x403b3e, 8), (register, 0x20, 8) CAST (unique, 0x100010d6, 8), (unique, 0x100010d6, 8) INT_ADD (unique, 0x100010ce, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x100010ce, 8) CAST (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x667, 4)]
[(ram, 0x4c4e38, 8) INDIRECT (ram, 0x4c4e38, 8) , (const, 0x667, 4)]
[(ram, 0x4c4f30, 8) INDIRECT (ram, 0x4c4f30, 8) , (const, 0x667, 4)]
[(ram, 0x4c4f48, 8) INDIRECT (ram, 0x4c4f48, 8) , (const, 0x667, 4)]
[(ram, 0x4c4f60, 8) INDIRECT (ram, 0x4c4f60, 8) , (const, 0x667, 4)]
[(ram, 0x4c76b8, 8) INDIRECT (ram, 0x4c76b8, 8) , (const, 0x667, 4)]
[(ram, 0x4c76c0, 4) INDIRECT (ram, 0x4c76c0, 4) , (const, 0x667, 4)]
[(ram, 0x4c76c8, 8) INDIRECT (ram, 0x4c76c8, 8) , (const, 0x667, 4)]
[(ram, 0x4c76d0, 8) INDIRECT (ram, 0x4c76d0, 8) , (const, 0x667, 4)]
[(ram, 0x4c76d8, 4) INDIRECT (ram, 0x4c76d8, 4) , (const, 0x667, 4)]
[(ram, 0x4c76e0, 8) INDIRECT (ram, 0x4c76e0, 8) , (const, 0x667, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x667, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x666, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x667, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x666, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x667, 4), (stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x666, 4)]
[(stack, 0xffffffffffffff6c, 4) INDIRECT (stack, 0xffffffffffffff6c, 4) , (const, 0x667, 4), (stack, 0xffffffffffffff6c, 4) INDIRECT (stack, 0xffffffffffffff6c, 4) , (const, 0x666, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x667, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x666, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x667, 4), (stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x666, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x667, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x666, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x667, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x666, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x667, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x666, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x667, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x666, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x667, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x666, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x667, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x666, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x667, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x666, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x667, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x666, 4)]
[ ---  CALL (ram, 0x0, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff6c, 4) MULTIEQUAL (stack, 0xffffffffffffff6c, 4) , (stack, 0xffffffffffffff6c, 4)]
[(stack, 0xffffffffffffff68, 4) MULTIEQUAL (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(ram, 0x4c76e0, 8) MULTIEQUAL (ram, 0x4c76e0, 8) , (ram, 0x4c76e0, 8)]
[(ram, 0x4c76d8, 4) MULTIEQUAL (ram, 0x4c76d8, 4) , (ram, 0x4c76d8, 4)]
[(ram, 0x4c76d0, 8) MULTIEQUAL (ram, 0x4c76d0, 8) , (ram, 0x4c76d0, 8)]
[(ram, 0x4c76c8, 8) MULTIEQUAL (ram, 0x4c76c8, 8) , (ram, 0x4c76c8, 8)]
[(ram, 0x4c76c0, 4) MULTIEQUAL (ram, 0x4c76c0, 4) , (ram, 0x4c76c0, 4)]
[(ram, 0x4c76b8, 8) MULTIEQUAL (ram, 0x4c76b8, 8) , (ram, 0x4c76b8, 8)]
[(ram, 0x4c4f60, 8) MULTIEQUAL (ram, 0x4c4f60, 8) , (ram, 0x4c4f60, 8)]
[(ram, 0x4c4f48, 8) MULTIEQUAL (ram, 0x4c4f48, 8) , (ram, 0x4c4f48, 8)]
[(ram, 0x4c4f30, 8) MULTIEQUAL (ram, 0x4c4f30, 8) , (ram, 0x4c4f30, 8)]
[(ram, 0x4c4e38, 8) MULTIEQUAL (ram, 0x4c4e38, 8) , (ram, 0x4c4e38, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x4035de, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbe00, 8) , (const, 0xffffffffffffffff, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRADD (register, 0xa0, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[(unique, 0x10000c84, 8) COPY (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x403da8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRADD (register, 0xa0, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x403f9f, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x100010de, 8), (unique, 0x100010de, 8) INT_ADD (register, 0x110, 8) , (const, 0x18, 8)]
[ ---  CALLOTHER (const, 0x11, 4)]
[ ---  CBRANCH (const, 0x4, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4c76d8, 4) , (const, 0x0, 4)]
[(ram, 0x4c76d8, 4) COPY (const, 0x1, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x403fc0, 8), (register, 0x20, 8) CAST (unique, 0x100010ee, 8), (unique, 0x100010ee, 8) INT_ADD (unique, 0x100010e6, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x100010e6, 8) CAST (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x99f, 4)]
[(ram, 0x4c4e38, 8) INDIRECT (ram, 0x4c4e38, 8) , (const, 0x99f, 4)]
[(ram, 0x4c4f30, 8) INDIRECT (ram, 0x4c4f30, 8) , (const, 0x99f, 4)]
[(ram, 0x4c4f48, 8) INDIRECT (ram, 0x4c4f48, 8) , (const, 0x99f, 4)]
[(ram, 0x4c4f60, 8) INDIRECT (ram, 0x4c4f60, 8) , (const, 0x99f, 4)]
[(ram, 0x4c76b8, 8) INDIRECT (ram, 0x4c76b8, 8) , (const, 0x99f, 4)]
[(ram, 0x4c76c0, 4) INDIRECT (ram, 0x4c76c0, 4) , (const, 0x99f, 4)]
[(ram, 0x4c76c8, 8) INDIRECT (ram, 0x4c76c8, 8) , (const, 0x99f, 4)]
[(ram, 0x4c76d0, 8) INDIRECT (ram, 0x4c76d0, 8) , (const, 0x99f, 4)]
[(ram, 0x4c76d8, 4) INDIRECT (ram, 0x4c76d8, 4) , (const, 0x99f, 4)]
[(ram, 0x4c76e0, 8) INDIRECT (ram, 0x4c76e0, 8) , (const, 0x99f, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x99f, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x99e, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x99f, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x99e, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x99f, 4), (stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x99e, 4)]
[(stack, 0xffffffffffffff6c, 4) INDIRECT (stack, 0xffffffffffffff6c, 4) , (const, 0x99f, 4), (stack, 0xffffffffffffff6c, 4) INDIRECT (stack, 0xffffffffffffff6c, 4) , (const, 0x99e, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x99f, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x99e, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x99f, 4), (stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x99e, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x99f, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x99e, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x99f, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x99e, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x99f, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x99e, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x99f, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x99e, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x99f, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x99e, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x99f, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x99e, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x99f, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x99e, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x99f, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x99e, 4)]
[ ---  CALL (ram, 0x421390, 8)]
[ ---  BRANCH (ram, 0x403dc4, 1)]
[ ---  CBRANCH (const, 0x4, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4c76d8, 4) , (const, 0x0, 4)]
[(ram, 0x4c76d8, 4) COPY (const, 0x1, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff6c, 4) MULTIEQUAL (stack, 0xffffffffffffff6c, 4) , (stack, 0xffffffffffffff6c, 4) , (stack, 0xffffffffffffff6c, 4) , (stack, 0xffffffffffffff6c, 4)]
[(stack, 0xffffffffffffff68, 4) MULTIEQUAL (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(ram, 0x4c76e0, 8) MULTIEQUAL (ram, 0x4c76e0, 8) , (ram, 0x4c76e0, 8) , (ram, 0x4c76e0, 8) , (ram, 0x4c76e0, 8)]
[(ram, 0x4c76d8, 4) MULTIEQUAL (ram, 0x4c76d8, 4) , (ram, 0x4c76d8, 4) , (ram, 0x4c76d8, 4) , (ram, 0x4c76d8, 4)]
[(ram, 0x4c76d0, 8) MULTIEQUAL (ram, 0x4c76d0, 8) , (ram, 0x4c76d0, 8) , (ram, 0x4c76d0, 8) , (ram, 0x4c76d0, 8)]
[(ram, 0x4c76c8, 8) MULTIEQUAL (ram, 0x4c76c8, 8) , (ram, 0x4c76c8, 8) , (ram, 0x4c76c8, 8) , (ram, 0x4c76c8, 8)]
[(ram, 0x4c76c0, 4) MULTIEQUAL (ram, 0x4c76c0, 4) , (ram, 0x4c76c0, 4) , (ram, 0x4c76c0, 4) , (ram, 0x4c76c0, 4)]
[(ram, 0x4c76b8, 8) MULTIEQUAL (ram, 0x4c76b8, 8) , (ram, 0x4c76b8, 8) , (ram, 0x4c76b8, 8) , (ram, 0x4c76b8, 8)]
[(ram, 0x4c4f60, 8) MULTIEQUAL (ram, 0x4c4f60, 8) , (ram, 0x4c4f60, 8) , (ram, 0x4c4f60, 8) , (ram, 0x4c4f60, 8)]
[(ram, 0x4c4f48, 8) MULTIEQUAL (ram, 0x4c4f48, 8) , (ram, 0x4c4f48, 8) , (ram, 0x4c4f48, 8) , (ram, 0x4c4f48, 8)]
[(ram, 0x4c4f30, 8) MULTIEQUAL (ram, 0x4c4f30, 8) , (ram, 0x4c4f30, 8) , (ram, 0x4c4f30, 8) , (ram, 0x4c4f30, 8)]
[(ram, 0x4c4e38, 8) MULTIEQUAL (ram, 0x4c4e38, 8) , (ram, 0x4c4e38, 8) , (ram, 0x4c4e38, 8) , (ram, 0x4c4e38, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x403f72, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbe00, 8) , (const, 0x0, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRADD (register, 0xa0, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x403f83, 8), (register, 0x20, 8) CAST (unique, 0x10001106, 8), (unique, 0x10001106, 8) INT_ADD (unique, 0x100010fe, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x100010fe, 8) CAST (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x96d, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x96d, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x96c, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x96d, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x96c, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x96d, 4), (stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x96c, 4)]
[(stack, 0xffffffffffffff6c, 4) INDIRECT (stack, 0xffffffffffffff6c, 4) , (const, 0x96d, 4), (stack, 0xffffffffffffff6c, 4) INDIRECT (stack, 0xffffffffffffff6c, 4) , (const, 0x96c, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x96d, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x96c, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x96d, 4), (stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x96c, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x96d, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x96c, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x96d, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x96c, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x96d, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x96c, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x96d, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x96c, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x96d, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x96c, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x96d, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x96c, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x96d, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x96c, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x96d, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x96c, 4)]
[(ram, 0x4c4e38, 8) INDIRECT (ram, 0x4c4e38, 8) , (const, 0x970, 4), (ram, 0x4c4e38, 8) INDIRECT (ram, 0x4c4e38, 8) , (const, 0x96d, 4)]
[(ram, 0x4c4f30, 8) INDIRECT (ram, 0x4c4f30, 8) , (const, 0x970, 4), (ram, 0x4c4f30, 8) INDIRECT (ram, 0x4c4f30, 8) , (const, 0x96d, 4)]
[(ram, 0x4c4f48, 8) INDIRECT (ram, 0x4c4f48, 8) , (const, 0x970, 4), (ram, 0x4c4f48, 8) INDIRECT (ram, 0x4c4f48, 8) , (const, 0x96d, 4)]
[(ram, 0x4c4f60, 8) INDIRECT (ram, 0x4c4f60, 8) , (const, 0x970, 4), (ram, 0x4c4f60, 8) INDIRECT (ram, 0x4c4f60, 8) , (const, 0x96d, 4)]
[(ram, 0x4c76b8, 8) INDIRECT (ram, 0x4c76b8, 8) , (const, 0x970, 4), (ram, 0x4c76b8, 8) INDIRECT (ram, 0x4c76b8, 8) , (const, 0x96d, 4)]
[(ram, 0x4c76c0, 4) INDIRECT (ram, 0x4c76c0, 4) , (const, 0x970, 4), (ram, 0x4c76c0, 4) INDIRECT (ram, 0x4c76c0, 4) , (const, 0x96d, 4)]
[(ram, 0x4c76c8, 8) INDIRECT (ram, 0x4c76c8, 8) , (const, 0x970, 4), (ram, 0x4c76c8, 8) INDIRECT (ram, 0x4c76c8, 8) , (const, 0x96d, 4)]
[(ram, 0x4c76d0, 8) INDIRECT (ram, 0x4c76d0, 8) , (const, 0x970, 4), (ram, 0x4c76d0, 8) INDIRECT (ram, 0x4c76d0, 8) , (const, 0x96d, 4)]
[(ram, 0x4c76d8, 4) INDIRECT (ram, 0x4c76d8, 4) , (const, 0x970, 4), (ram, 0x4c76d8, 4) INDIRECT (ram, 0x4c76d8, 4) , (const, 0x96d, 4)]
[(ram, 0x4c76e0, 8) INDIRECT (ram, 0x4c76e0, 8) , (const, 0x970, 4), (ram, 0x4c76e0, 8) INDIRECT (ram, 0x4c76e0, 8) , (const, 0x96d, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3800, 8) , (register, 0x0, 8), (unique, 0x3800, 8) PTRADD (register, 0xa0, 8) , (const, 0x2, 8) , (const, 0x8, 8), (register, 0x0, 8) CAST (unique, 0x1000110e, 8), (unique, 0x1000110e, 8) CALL (ram, 0x427e50, 8) , (register, 0x38, 8) , (const, 0x8, 8), (register, 0x38, 8) INT_ZEXT (register, 0x38, 4), (register, 0x38, 4) INT_ADD (stack, 0xffffffffffffffa0, 4) , (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100010f6, 8), (unique, 0x100010f6, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x8, 8) , (const, 0x8, 8), (stack, 0xffffffffffffffa0, 4) SUBPIECE (stack, 0xffffffffffffffa0, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x403c1f, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x1000110e, 8), (unique, 0x1000110e, 8) CALL (ram, 0x427e50, 8) , (register, 0x38, 8) , (const, 0x8, 8), (register, 0x38, 8) INT_ZEXT (register, 0x38, 4), (register, 0x38, 4) INT_ADD (stack, 0xffffffffffffffa0, 4) , (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100010f6, 8), (unique, 0x100010f6, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x8, 8) , (const, 0x8, 8), (stack, 0xffffffffffffffa0, 4) SUBPIECE (stack, 0xffffffffffffffa0, 8) , (const, 0x0, 8)]
[(ram, 0x4c4e38, 8) INDIRECT (ram, 0x4c4e38, 8) , (const, 0x97e, 4)]
[(ram, 0x4c4f30, 8) INDIRECT (ram, 0x4c4f30, 8) , (const, 0x97e, 4)]
[(ram, 0x4c4f48, 8) INDIRECT (ram, 0x4c4f48, 8) , (const, 0x97e, 4)]
[(ram, 0x4c4f60, 8) INDIRECT (ram, 0x4c4f60, 8) , (const, 0x97e, 4)]
[(ram, 0x4c76b8, 8) INDIRECT (ram, 0x4c76b8, 8) , (const, 0x97e, 4)]
[(ram, 0x4c76c0, 4) INDIRECT (ram, 0x4c76c0, 4) , (const, 0x97e, 4)]
[(ram, 0x4c76c8, 8) INDIRECT (ram, 0x4c76c8, 8) , (const, 0x97e, 4)]
[(ram, 0x4c76d0, 8) INDIRECT (ram, 0x4c76d0, 8) , (const, 0x97e, 4)]
[(ram, 0x4c76d8, 4) INDIRECT (ram, 0x4c76d8, 4) , (const, 0x97e, 4)]
[(ram, 0x4c76e0, 8) INDIRECT (ram, 0x4c76e0, 8) , (const, 0x97e, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3800, 8) , (const, 0xffffffffffffffff, 8), (unique, 0x3800, 8) PTRADD (register, 0xa0, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[ ---  BRANCH (ram, 0x403dd0, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff6c, 4) MULTIEQUAL (stack, 0xffffffffffffff6c, 4) , (stack, 0xffffffffffffff6c, 4)]
[(stack, 0xffffffffffffff68, 4) MULTIEQUAL (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(ram, 0x4c76e0, 8) MULTIEQUAL (ram, 0x4c76e0, 8) , (ram, 0x4c76e0, 8)]
[(ram, 0x4c76d0, 8) MULTIEQUAL (ram, 0x4c76d0, 8) , (ram, 0x4c76d0, 8)]
[(ram, 0x4c76c8, 8) MULTIEQUAL (ram, 0x4c76c8, 8) , (ram, 0x4c76c8, 8)]
[(ram, 0x4c76c0, 4) MULTIEQUAL (ram, 0x4c76c0, 4) , (ram, 0x4c76c0, 4)]
[(ram, 0x4c76b8, 8) MULTIEQUAL (ram, 0x4c76b8, 8) , (ram, 0x4c76b8, 8)]
[(ram, 0x4c4f60, 8) MULTIEQUAL (ram, 0x4c4f60, 8) , (ram, 0x4c4f60, 8)]
[(ram, 0x4c4f48, 8) MULTIEQUAL (ram, 0x4c4f48, 8) , (ram, 0x4c4f48, 8)]
[(ram, 0x4c4f30, 8) MULTIEQUAL (ram, 0x4c4f30, 8) , (ram, 0x4c4f30, 8)]
[(ram, 0x4c4e38, 8) MULTIEQUAL (ram, 0x4c4e38, 8) , (ram, 0x4c4e38, 8)]
[(unique, 0x100009ca, 4) COPY (ram, 0x4c76d8, 4), (ram, 0x4c76d8, 4) MULTIEQUAL (ram, 0x4c76d8, 4) , (ram, 0x4c76d8, 4)]
[ ---  CBRANCH (ram, 0x403ff8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10001116, 8), (unique, 0x10001116, 8) INT_ADD (register, 0x110, 8) , (const, 0x18, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4c76d8, 4) COPY (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x40409e, 1) , (unique, 0xd080, 1), (unique, 0xd080, 1) INT_SLESS (const, 0x1, 4) , (unique, 0x1000111e, 4), (unique, 0x1000111e, 4) CAST (unique, 0x100009ca, 4)]
[ ---  CALLOTHER (const, 0x5, 4)]
[ ---  BRANCH (ram, 0x404009, 1)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRADD (register, 0xa0, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[ ---  BRANCH (ram, 0x403b58, 1)]
[(ram, 0x4c76d8, 4) INT_SUB (ram, 0x4c76d8, 4) , (const, 0x1, 4)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRADD (register, 0xa0, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[ ---  BRANCH (ram, 0x403b58, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff6c, 4) MULTIEQUAL (stack, 0xffffffffffffff6c, 4) , (stack, 0xffffffffffffff6c, 4) , (stack, 0xffffffffffffff6c, 4)]
[(stack, 0xffffffffffffff68, 4) MULTIEQUAL (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(ram, 0x4c76e0, 8) MULTIEQUAL (ram, 0x4c76e0, 8) , (ram, 0x4c76e0, 8) , (ram, 0x4c76e0, 8)]
[(ram, 0x4c76d8, 4) MULTIEQUAL (ram, 0x4c76d8, 4) , (ram, 0x4c76d8, 4) , (ram, 0x4c76d8, 4)]
[(ram, 0x4c76d0, 8) MULTIEQUAL (ram, 0x4c76d0, 8) , (ram, 0x4c76d0, 8) , (ram, 0x4c76d0, 8)]
[(ram, 0x4c76c8, 8) MULTIEQUAL (ram, 0x4c76c8, 8) , (ram, 0x4c76c8, 8) , (ram, 0x4c76c8, 8)]
[(ram, 0x4c76c0, 4) MULTIEQUAL (ram, 0x4c76c0, 4) , (ram, 0x4c76c0, 4) , (ram, 0x4c76c0, 4)]
[(ram, 0x4c76b8, 8) MULTIEQUAL (ram, 0x4c76b8, 8) , (ram, 0x4c76b8, 8) , (ram, 0x4c76b8, 8)]
[(ram, 0x4c4f60, 8) MULTIEQUAL (ram, 0x4c4f60, 8) , (ram, 0x4c4f60, 8) , (ram, 0x4c4f60, 8)]
[(ram, 0x4c4f48, 8) MULTIEQUAL (ram, 0x4c4f48, 8) , (ram, 0x4c4f48, 8) , (ram, 0x4c4f48, 8)]
[(ram, 0x4c4f30, 8) MULTIEQUAL (ram, 0x4c4f30, 8) , (ram, 0x4c4f30, 8) , (ram, 0x4c4f30, 8)]
[(ram, 0x4c4e38, 8) MULTIEQUAL (ram, 0x4c4e38, 8) , (ram, 0x4c4e38, 8) , (ram, 0x4c4e38, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x403d9b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0xffffffffffffffff, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8) , (unique, 0xbd80, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff6c, 4) MULTIEQUAL (stack, 0xffffffffffffff6c, 4) , (stack, 0xffffffffffffff6c, 4) , (stack, 0xffffffffffffff6c, 4)]
[(stack, 0xffffffffffffff68, 4) MULTIEQUAL (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(ram, 0x4c76e0, 8) MULTIEQUAL (ram, 0x4c76e0, 8) , (ram, 0x4c76e0, 8) , (ram, 0x4c76e0, 8)]
[(ram, 0x4c76d8, 4) MULTIEQUAL (ram, 0x4c76d8, 4) , (ram, 0x4c76d8, 4) , (ram, 0x4c76d8, 4)]
[(ram, 0x4c76d0, 8) MULTIEQUAL (ram, 0x4c76d0, 8) , (ram, 0x4c76d0, 8) , (ram, 0x4c76d0, 8)]
[(ram, 0x4c76c8, 8) MULTIEQUAL (ram, 0x4c76c8, 8) , (ram, 0x4c76c8, 8) , (ram, 0x4c76c8, 8)]
[(ram, 0x4c76c0, 4) MULTIEQUAL (ram, 0x4c76c0, 4) , (ram, 0x4c76c0, 4) , (ram, 0x4c76c0, 4)]
[(ram, 0x4c76b8, 8) MULTIEQUAL (ram, 0x4c76b8, 8) , (ram, 0x4c76b8, 8) , (ram, 0x4c76b8, 8)]
[(ram, 0x4c4f60, 8) MULTIEQUAL (ram, 0x4c4f60, 8) , (ram, 0x4c4f60, 8) , (ram, 0x4c4f60, 8)]
[(ram, 0x4c4f48, 8) MULTIEQUAL (ram, 0x4c4f48, 8) , (ram, 0x4c4f48, 8) , (ram, 0x4c4f48, 8)]
[(ram, 0x4c4f30, 8) MULTIEQUAL (ram, 0x4c4f30, 8) , (ram, 0x4c4f30, 8) , (ram, 0x4c4f30, 8)]
[(ram, 0x4c4e38, 8) MULTIEQUAL (ram, 0x4c4e38, 8) , (ram, 0x4c4e38, 8) , (ram, 0x4c4e38, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x20, 8) MULTIEQUAL (unique, 0x10000c84, 8) , (unique, 0x10000aee, 8) , (unique, 0x10000af6, 8)]
[(stack, 0xffffffffffffff98, 8) COPY (const, 0xffffffffffffffff, 8)]
[ ---  BRANCH (ram, 0x403610, 1)]
[ ---  CBRANCH (ram, 0x403c03, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x1000112a, 8), (unique, 0x1000112a, 8) CAST (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (register, 0x0, 8) , (unique, 0x3300, 8) , (const, 0x1, 8), (unique, 0x3300, 8) INT_MULT (unique, 0x10001122, 8) , (const, 0x8, 8), (unique, 0x10001122, 8) CAST (register, 0x18, 8)]
[(stack, 0xffffffffffffff90, 8) COPY (unique, 0x10001132, 8), (unique, 0x10001132, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0xbd80, 8)]
[(unique, 0x10000a06, 8) COPY (unique, 0xbd80, 8)]
[(unique, 0x10000bee, 8) COPY (ram, 0x4c76d0, 8)]
[(unique, 0x10000c0e, 4) COPY (ram, 0x4c76d8, 4)]
[ ---  CBRANCH (ram, 0x403eb6, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x1000113a, 8), (unique, 0x1000113a, 8) INT_ADD (register, 0x110, 8) , (const, 0x18, 8)]
[ ---  CALLOTHER (const, 0x11, 4)]
[ ---  CBRANCH (const, 0x4, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4c76d8, 4) , (const, 0x0, 4)]
[(ram, 0x4c76d8, 4) COPY (const, 0x1, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x403ed7, 8), (register, 0x20, 8) CAST (unique, 0x1000114a, 8), (unique, 0x1000114a, 8) INT_ADD (unique, 0x10001142, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x10001142, 8) CAST (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x8d9, 4)]
[(ram, 0x4c4e38, 8) INDIRECT (ram, 0x4c4e38, 8) , (const, 0x8d9, 4)]
[(ram, 0x4c4f30, 8) INDIRECT (ram, 0x4c4f30, 8) , (const, 0x8d9, 4)]
[(ram, 0x4c4f48, 8) INDIRECT (ram, 0x4c4f48, 8) , (const, 0x8d9, 4)]
[(ram, 0x4c4f60, 8) INDIRECT (ram, 0x4c4f60, 8) , (const, 0x8d9, 4)]
[(ram, 0x4c76b8, 8) INDIRECT (ram, 0x4c76b8, 8) , (const, 0x8d9, 4)]
[(ram, 0x4c76c0, 4) INDIRECT (ram, 0x4c76c0, 4) , (const, 0x8d9, 4)]
[(ram, 0x4c76c8, 8) INDIRECT (ram, 0x4c76c8, 8) , (const, 0x8d9, 4)]
[(ram, 0x4c76d0, 8) INDIRECT (ram, 0x4c76d0, 8) , (const, 0x8d9, 4)]
[(ram, 0x4c76d8, 4) INDIRECT (ram, 0x4c76d8, 4) , (const, 0x8d9, 4)]
[(ram, 0x4c76e0, 8) INDIRECT (ram, 0x4c76e0, 8) , (const, 0x8d9, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x8d9, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x8d8, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x8d9, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x8d8, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x8d9, 4), (stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x8d8, 4)]
[(stack, 0xffffffffffffff6c, 4) INDIRECT (stack, 0xffffffffffffff6c, 4) , (const, 0x8d9, 4), (stack, 0xffffffffffffff6c, 4) INDIRECT (stack, 0xffffffffffffff6c, 4) , (const, 0x8d8, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x8d9, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x8d8, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x8d9, 4), (stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x8d8, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x8d9, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x8d8, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x8d9, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x8d8, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x8d9, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x8d8, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x8d9, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x8d8, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x8d9, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x8d8, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x8d9, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x8d8, 4)]
[ ---  CALL (ram, 0x421390, 8) , (unique, 0x1000065f, 8), (unique, 0x1000065f, 8) PTRSUB (const, 0x0, 8) , (const, 0x4c76d8, 8)]
[ ---  BRANCH (ram, 0x403c1f, 1)]
[ ---  CBRANCH (const, 0x4, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4c76d8, 4) , (const, 0x0, 4)]
[(ram, 0x4c76d8, 4) COPY (const, 0x1, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff6c, 4) MULTIEQUAL (stack, 0xffffffffffffff6c, 4) , (stack, 0xffffffffffffff6c, 4) , (stack, 0xffffffffffffff6c, 4) , (stack, 0xffffffffffffff6c, 4) , (stack, 0xffffffffffffff6c, 4)]
[(stack, 0xffffffffffffff68, 4) MULTIEQUAL (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(ram, 0x4c76e0, 8) MULTIEQUAL (ram, 0x4c76e0, 8) , (ram, 0x4c76e0, 8) , (ram, 0x4c76e0, 8) , (ram, 0x4c76e0, 8) , (ram, 0x4c76e0, 8)]
[(ram, 0x4c76d8, 4) MULTIEQUAL (ram, 0x4c76d8, 4) , (ram, 0x4c76d8, 4) , (ram, 0x4c76d8, 4) , (ram, 0x4c76d8, 4) , (ram, 0x4c76d8, 4)]
[(ram, 0x4c76c8, 8) MULTIEQUAL (ram, 0x4c76c8, 8) , (ram, 0x4c76c8, 8) , (ram, 0x4c76c8, 8) , (ram, 0x4c76c8, 8) , (ram, 0x4c76c8, 8)]
[(ram, 0x4c76c0, 4) MULTIEQUAL (ram, 0x4c76c0, 4) , (ram, 0x4c76c0, 4) , (ram, 0x4c76c0, 4) , (ram, 0x4c76c0, 4) , (ram, 0x4c76c0, 4)]
[(ram, 0x4c76b8, 8) MULTIEQUAL (ram, 0x4c76b8, 8) , (ram, 0x4c76b8, 8) , (ram, 0x4c76b8, 8) , (ram, 0x4c76b8, 8) , (ram, 0x4c76b8, 8)]
[(ram, 0x4c4f60, 8) MULTIEQUAL (ram, 0x4c4f60, 8) , (ram, 0x4c4f60, 8) , (ram, 0x4c4f60, 8) , (ram, 0x4c4f60, 8) , (ram, 0x4c4f60, 8)]
[(ram, 0x4c4f48, 8) MULTIEQUAL (ram, 0x4c4f48, 8) , (ram, 0x4c4f48, 8) , (ram, 0x4c4f48, 8) , (ram, 0x4c4f48, 8) , (ram, 0x4c4f48, 8)]
[(ram, 0x4c4f30, 8) MULTIEQUAL (ram, 0x4c4f30, 8) , (ram, 0x4c4f30, 8) , (ram, 0x4c4f30, 8) , (ram, 0x4c4f30, 8) , (ram, 0x4c4f30, 8)]
[(ram, 0x4c4e38, 8) MULTIEQUAL (ram, 0x4c4e38, 8) , (ram, 0x4c4e38, 8) , (ram, 0x4c4e38, 8) , (ram, 0x4c4e38, 8) , (ram, 0x4c4e38, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(stack, 0xffffffffffffffa0, 8) COPY (register, 0x18, 8)]
[(register, 0xb0, 4) COPY (const, 0x0, 4)]
[(unique, 0x3100, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffa8, 8) COPY (stack, 0xffffffffffffff98, 8), (stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffffb0, 8) COPY (register, 0x0, 8), (register, 0x0, 8) PTRADD (ram, 0x4c76d0, 8) , (const, 0x1, 8) , (const, 0x8, 8), (ram, 0x4c76d0, 8) MULTIEQUAL (ram, 0x4c76d0, 8) , (ram, 0x4c76d0, 8) , (ram, 0x4c76d0, 8) , (ram, 0x4c76d0, 8) , (ram, 0x4c76d0, 8)]
[ ---  BRANCH (ram, 0x403ca5, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff6c, 4) MULTIEQUAL (stack, 0xffffffffffffff6c, 4) , (stack, 0xffffffffffffff6c, 4)]
[(stack, 0xffffffffffffff68, 4) MULTIEQUAL (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(ram, 0x4c76e0, 8) MULTIEQUAL (ram, 0x4c76e0, 8) , (ram, 0x4c76e0, 8)]
[(ram, 0x4c76d8, 4) MULTIEQUAL (ram, 0x4c76d8, 4) , (ram, 0x4c76d8, 4)]
[(ram, 0x4c76d0, 8) MULTIEQUAL (ram, 0x4c76d0, 8) , (unique, 0x3100, 8)]
[(ram, 0x4c76c0, 4) MULTIEQUAL (ram, 0x4c76c0, 4) , (ram, 0x4c76c0, 4)]
[(ram, 0x4c76b8, 8) MULTIEQUAL (ram, 0x4c76b8, 8) , (ram, 0x4c76b8, 8)]
[(ram, 0x4c4f60, 8) MULTIEQUAL (ram, 0x4c4f60, 8) , (ram, 0x4c4f60, 8)]
[(ram, 0x4c4f48, 8) MULTIEQUAL (ram, 0x4c4f48, 8) , (ram, 0x4c4f48, 8)]
[(ram, 0x4c4f30, 8) MULTIEQUAL (ram, 0x4c4f30, 8) , (ram, 0x4c4f30, 8)]
[(ram, 0x4c4e38, 8) MULTIEQUAL (ram, 0x4c4e38, 8) , (ram, 0x4c4e38, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb0, 4) MULTIEQUAL (register, 0xb0, 4) , (register, 0xb0, 4)]
[(register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x403cec, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (const, 0x7, 8) , (ram, 0x4c76c8, 8), (ram, 0x4c76c8, 8) MULTIEQUAL (ram, 0x4c76c8, 8) , (register, 0x10, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x403cd0, 8), (register, 0x20, 8) CAST (unique, 0x10001172, 8), (unique, 0x10001172, 8) INT_ADD (unique, 0x1000116a, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x1000116a, 8) CAST (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x71a, 4)]
[(ram, 0x4c4e38, 8) INDIRECT (ram, 0x4c4e38, 8) , (const, 0x71a, 4)]
[(ram, 0x4c4f30, 8) INDIRECT (ram, 0x4c4f30, 8) , (const, 0x71a, 4)]
[(ram, 0x4c4f48, 8) INDIRECT (ram, 0x4c4f48, 8) , (const, 0x71a, 4)]
[(ram, 0x4c4f60, 8) INDIRECT (ram, 0x4c4f60, 8) , (const, 0x71a, 4)]
[(ram, 0x4c76b8, 8) INDIRECT (ram, 0x4c76b8, 8) , (const, 0x71a, 4)]
[(ram, 0x4c76c0, 4) INDIRECT (ram, 0x4c76c0, 4) , (const, 0x71a, 4)]
[(ram, 0x4c76c8, 8) INDIRECT (ram, 0x4c76c8, 8) , (const, 0x71a, 4)]
[(ram, 0x4c76d0, 8) INDIRECT (ram, 0x4c76d0, 8) , (const, 0x71a, 4)]
[(ram, 0x4c76d8, 4) INDIRECT (ram, 0x4c76d8, 4) , (const, 0x71a, 4)]
[(ram, 0x4c76e0, 8) INDIRECT (ram, 0x4c76e0, 8) , (const, 0x71a, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x71a, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x719, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x71a, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x719, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x71a, 4), (stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x719, 4)]
[(stack, 0xffffffffffffff6c, 4) INDIRECT (stack, 0xffffffffffffff6c, 4) , (const, 0x71a, 4), (stack, 0xffffffffffffff6c, 4) INDIRECT (stack, 0xffffffffffffff6c, 4) , (const, 0x719, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x71a, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x719, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x71a, 4), (stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x719, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x71a, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x719, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x71a, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x719, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x71a, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x719, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x71a, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x719, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x71a, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x719, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x71a, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x719, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x71a, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (register, 0x0, 8) , (const, 0x719, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x71a, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x719, 4)]
[ ---  CBRANCH (ram, 0x403e40, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x10, 4) , (const, 0x0, 4), (register, 0x10, 4) INT_AND (register, 0x0, 4) , (const, 0xfffffffb, 4), (register, 0x0, 4) CALL (ram, 0x45bcb0, 8) , (unique, 0xbd80, 8) , (unique, 0x3100, 8) , (register, 0x98, 8) , (unique, 0x3100, 8) , (unique, 0x3a00, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffa8, 8), (unique, 0x3a00, 8) INT_ADD (unique, 0x10001162, 8) , (unique, 0x10000867, 8), (unique, 0x10001162, 8) CAST (register, 0x0, 8), (unique, 0x10000867, 8) INT_SUB (ram, 0x4c76c8, 8) , (const, 0x8, 8), (register, 0x98, 8) INT_ADD (unique, 0x10001152, 8) , (unique, 0x1000115a, 8), (unique, 0x1000115a, 8) CAST (stack, 0xffffffffffffffa8, 8), (unique, 0x10001152, 8) CAST (stack, 0xffffffffffffff90, 8), (unique, 0x3100, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffb0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRADD (register, 0xa0, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[(unique, 0x3680, 8) INT_MULT (unique, 0x10001192, 8) , (const, 0x8, 8), (unique, 0x10001192, 8) CAST (stack, 0xffffffffffffffa0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (ram, 0x4c76d0, 8) , (unique, 0x1000119a, 8), (unique, 0x1000119a, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x8, 8) , (const, 0xffffffffffffffff, 8) , (const, 0x8, 8), (register, 0x8, 8) CAST (unique, 0x1000118a, 8), (unique, 0x1000118a, 8) INT_SUB (unique, 0x1000117a, 8) , (unique, 0x10001182, 8), (unique, 0x10001182, 8) CAST (ram, 0x4c76d0, 8), (unique, 0x1000117a, 8) CAST (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffff90, 8) COPY (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x8, 8) , (const, 0xffffffffffffffff, 8) , (const, 0x8, 8), (register, 0x8, 8) CAST (unique, 0x1000118a, 8), (unique, 0x1000118a, 8) INT_SUB (unique, 0x1000117a, 8) , (unique, 0x10001182, 8), (unique, 0x10001182, 8) CAST (ram, 0x4c76d0, 8), (unique, 0x1000117a, 8) CAST (stack, 0xffffffffffffffb0, 8)]
[(ram, 0x4c4e38, 8) INDIRECT (ram, 0x4c4e38, 8) , (const, 0x83e, 4), (ram, 0x4c4e38, 8) INDIRECT (ram, 0x4c4e38, 8) , (const, 0x834, 4)]
[(ram, 0x4c4f30, 8) INDIRECT (ram, 0x4c4f30, 8) , (const, 0x83e, 4), (ram, 0x4c4f30, 8) INDIRECT (ram, 0x4c4f30, 8) , (const, 0x834, 4)]
[(ram, 0x4c4f48, 8) INDIRECT (ram, 0x4c4f48, 8) , (const, 0x83e, 4), (ram, 0x4c4f48, 8) INDIRECT (ram, 0x4c4f48, 8) , (const, 0x834, 4)]
[(ram, 0x4c4f60, 8) INDIRECT (ram, 0x4c4f60, 8) , (const, 0x83e, 4), (ram, 0x4c4f60, 8) INDIRECT (ram, 0x4c4f60, 8) , (const, 0x834, 4)]
[(ram, 0x4c76b8, 8) INDIRECT (ram, 0x4c76b8, 8) , (const, 0x83e, 4), (ram, 0x4c76b8, 8) INDIRECT (ram, 0x4c76b8, 8) , (const, 0x834, 4)]
[(ram, 0x4c76c0, 4) INDIRECT (ram, 0x4c76c0, 4) , (const, 0x83e, 4), (ram, 0x4c76c0, 4) INDIRECT (ram, 0x4c76c0, 4) , (const, 0x834, 4)]
[(ram, 0x4c76d8, 4) INDIRECT (ram, 0x4c76d8, 4) , (const, 0x83e, 4), (ram, 0x4c76d8, 4) INDIRECT (ram, 0x4c76d8, 4) , (const, 0x834, 4)]
[(ram, 0x4c76e0, 8) INDIRECT (ram, 0x4c76e0, 8) , (const, 0x83e, 4), (ram, 0x4c76e0, 8) INDIRECT (ram, 0x4c76e0, 8) , (const, 0x834, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100011aa, 8) , (ram, 0x4c76d0, 8), (unique, 0x100011aa, 8) CAST (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (unique, 0xbd80, 8) , (unique, 0x3300, 8) , (const, 0x1, 8), (unique, 0x3300, 8) INT_MULT (unique, 0x100011a2, 8) , (const, 0x8, 8), (unique, 0x100011a2, 8) CAST (stack, 0xffffffffffffffa0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRADD (register, 0xa0, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[(register, 0x8, 8) INT_AND (register, 0x18, 8) , (const, 0xfffffffffffffff8, 8), (register, 0x18, 8) INT_SUB (ram, 0x4c76c8, 8) , (unique, 0x100011b2, 8), (unique, 0x100011b2, 8) CAST (register, 0x8, 8), (ram, 0x4c76c8, 8) INDIRECT (ram, 0x4c76c8, 8) , (const, 0x83e, 4), (ram, 0x4c76c8, 8) INDIRECT (ram, 0x4c76c8, 8) , (const, 0x834, 4), (register, 0x8, 8) CAST (unique, 0x1000118a, 8), (unique, 0x1000118a, 8) INT_SUB (unique, 0x1000117a, 8) , (unique, 0x10001182, 8), (unique, 0x10001182, 8) CAST (ram, 0x4c76d0, 8), (unique, 0x1000117a, 8) CAST (stack, 0xffffffffffffffb0, 8)]
[(register, 0x30, 8) CAST (unique, 0x100011c2, 8), (unique, 0x100011c2, 8) INT_ADD (unique, 0x100011ba, 8) , (register, 0x88, 8), (unique, 0x100011ba, 8) CAST (stack, 0xffffffffffffffb0, 8), (register, 0x88, 8) INT_ZEXT (register, 0x88, 4), (register, 0x88, 4) INT_AND (register, 0x88, 4) , (const, 0x7, 4), (register, 0x88, 4) SUBPIECE (register, 0x18, 8) , (const, 0x0, 4), (register, 0x18, 8) INT_SUB (ram, 0x4c76c8, 8) , (unique, 0x100011b2, 8), (unique, 0x100011b2, 8) CAST (register, 0x8, 8), (ram, 0x4c76c8, 8) INDIRECT (ram, 0x4c76c8, 8) , (const, 0x83e, 4), (ram, 0x4c76c8, 8) INDIRECT (ram, 0x4c76c8, 8) , (const, 0x834, 4), (register, 0x8, 8) CAST (unique, 0x1000118a, 8), (unique, 0x1000118a, 8) INT_SUB (unique, 0x1000117a, 8) , (unique, 0x10001182, 8), (unique, 0x10001182, 8) CAST (ram, 0x4c76d0, 8), (unique, 0x1000117a, 8) CAST (stack, 0xffffffffffffffb0, 8)]
[ ---  CBRANCH (ram, 0x404013, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x100011ca, 8), (unique, 0x100011ca, 8) INT_ADD (register, 0x110, 8) , (const, 0x18, 8)]
[ ---  CBRANCH (ram, 0x4040cc, 1) , (unique, 0xd080, 1), (unique, 0xd080, 1) INT_SLESS (unique, 0x100011d2, 4) , (const, 0x2, 4), (unique, 0x100011d2, 4) CAST (ram, 0x4c76d8, 4)]
[ ---  CALLOTHER (const, 0x5, 4)]
[(stack, 0xffffffffffffff90, 8) COPY (unique, 0x100011de, 8), (unique, 0x100011de, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x100011d6, 8), (unique, 0x100011d6, 8) CAST (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (unique, 0xbd80, 8) , (unique, 0x3680, 8) , (const, 0x1, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRADD (register, 0xa0, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[(unique, 0x10000c06, 8) COPY (register, 0x30, 8)]
[(unique, 0x10000c1a, 4) COPY (register, 0x10, 4)]
[ ---  BRANCH (ram, 0x403b76, 1)]
[(stack, 0xffffffffffffff90, 8) COPY (unique, 0x100011ee, 8), (unique, 0x100011ee, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x100011e6, 8), (unique, 0x100011e6, 8) CAST (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (unique, 0xbd80, 8) , (unique, 0x3680, 8) , (const, 0x1, 8)]
[(unique, 0x10000bfe, 8) COPY (register, 0x30, 8)]
[(unique, 0x10000c16, 4) COPY (register, 0x10, 4)]
[ ---  BRANCH (ram, 0x403b76, 1)]
[(unique, 0x10000a0e, 8) COPY (ram, 0x4c76d0, 8)]
[(unique, 0x10000bf6, 8) COPY (register, 0x30, 8)]
[(unique, 0x10000c12, 4) COPY (ram, 0x4c76d8, 4), (ram, 0x4c76d8, 4) INT_SUB (ram, 0x4c76d8, 4) , (const, 0x1, 4)]
[ ---  BRANCH (ram, 0x403b76, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff6c, 4) MULTIEQUAL (stack, 0xffffffffffffff6c, 4) , (stack, 0xffffffffffffff6c, 4) , (stack, 0xffffffffffffff6c, 4) , (stack, 0xffffffffffffff6c, 4)]
[(stack, 0xffffffffffffff68, 4) MULTIEQUAL (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(ram, 0x4c76e0, 8) MULTIEQUAL (ram, 0x4c76e0, 8) , (ram, 0x4c76e0, 8) , (ram, 0x4c76e0, 8) , (ram, 0x4c76e0, 8)]
[(ram, 0x4c76d8, 4) MULTIEQUAL (unique, 0x10000c0e, 4) , (unique, 0x10000c12, 4) , (unique, 0x10000c16, 4) , (unique, 0x10000c1a, 4)]
[(ram, 0x4c76d0, 8) MULTIEQUAL (unique, 0x10000bee, 8) , (unique, 0x10000bf6, 8) , (unique, 0x10000bfe, 8) , (unique, 0x10000c06, 8)]
[(ram, 0x4c76c8, 8) MULTIEQUAL (ram, 0x4c76c8, 8) , (register, 0x8, 8) , (register, 0x8, 8) , (register, 0x8, 8)]
[(ram, 0x4c76c0, 4) MULTIEQUAL (ram, 0x4c76c0, 4) , (ram, 0x4c76c0, 4) , (ram, 0x4c76c0, 4) , (ram, 0x4c76c0, 4)]
[(ram, 0x4c76b8, 8) MULTIEQUAL (ram, 0x4c76b8, 8) , (ram, 0x4c76b8, 8) , (ram, 0x4c76b8, 8) , (ram, 0x4c76b8, 8)]
[(ram, 0x4c4f60, 8) MULTIEQUAL (ram, 0x4c4f60, 8) , (ram, 0x4c4f60, 8) , (ram, 0x4c4f60, 8) , (ram, 0x4c4f60, 8)]
[(ram, 0x4c4f48, 8) MULTIEQUAL (ram, 0x4c4f48, 8) , (ram, 0x4c4f48, 8) , (ram, 0x4c4f48, 8) , (ram, 0x4c4f48, 8)]
[(ram, 0x4c4f30, 8) MULTIEQUAL (ram, 0x4c4f30, 8) , (ram, 0x4c4f30, 8) , (ram, 0x4c4f30, 8) , (ram, 0x4c4f30, 8)]
[(ram, 0x4c4e38, 8) MULTIEQUAL (ram, 0x4c4e38, 8) , (ram, 0x4c4e38, 8) , (ram, 0x4c4e38, 8) , (ram, 0x4c4e38, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(stack, 0xffffffffffffff98, 8) COPY (register, 0x0, 8), (register, 0x0, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x8, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x10000a06, 8) , (unique, 0x10000a0e, 8) , (unique, 0xbd80, 8) , (unique, 0xbd80, 8)]
[ ---  BRANCH (ram, 0x4035de, 1)]
[ ---  CBRANCH (ram, 0x4035ee, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x5, 4)]
[ ---  CBRANCH (ram, 0x403fd5, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x100011f6, 8), (unique, 0x100011f6, 8) INT_ADD (register, 0x110, 8) , (const, 0x18, 8)]
[(stack, 0xffffffffffffff98, 8) COPY (const, 0x0, 8)]
[(ram, 0x4c76d8, 4) INT_SUB (ram, 0x4c76d8, 4) , (const, 0x1, 4)]
[(unique, 0x10000b0e, 8) COPY (register, 0x20, 8)]
[(stack, 0xffffffffffffffa8, 8) COPY (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (register, 0x0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff6c, 4) MULTIEQUAL (stack, 0xffffffffffffff6c, 4) , (stack, 0xffffffffffffff6c, 4)]
[(stack, 0xffffffffffffff68, 4) MULTIEQUAL (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(ram, 0x4c76d8, 4) MULTIEQUAL (ram, 0x4c76d8, 4) , (ram, 0x4c76d8, 4)]
[(ram, 0x4c76d0, 8) MULTIEQUAL (ram, 0x4c76d0, 8) , (ram, 0x4c76d0, 8)]
[(ram, 0x4c76c0, 4) MULTIEQUAL (ram, 0x4c76c0, 4) , (ram, 0x4c76c0, 4)]
[(ram, 0x4c76b8, 8) MULTIEQUAL (ram, 0x4c76b8, 8) , (ram, 0x4c76b8, 8)]
[(ram, 0x4c4f60, 8) MULTIEQUAL (ram, 0x4c4f60, 8) , (ram, 0x4c4f60, 8)]
[(ram, 0x4c4f48, 8) MULTIEQUAL (ram, 0x4c4f48, 8) , (ram, 0x4c4f48, 8)]
[(ram, 0x4c4f30, 8) MULTIEQUAL (ram, 0x4c4f30, 8) , (ram, 0x4c4f30, 8)]
[(ram, 0x4c4e38, 8) MULTIEQUAL (ram, 0x4c4e38, 8) , (ram, 0x4c4e38, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x100009ce, 8) COPY (ram, 0x4c76e0, 8), (ram, 0x4c76e0, 8) MULTIEQUAL (ram, 0x4c76e0, 8) , (ram, 0x4c76e0, 8)]
[ ---  CBRANCH (ram, 0x403c50, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xb0, 4) , (const, 0x0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x403d0a, 8), (register, 0x20, 8) CAST (unique, 0x10001206, 8), (unique, 0x10001206, 8) INT_ADD (unique, 0x100011fe, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x100011fe, 8) CAST (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x748, 4)]
[(ram, 0x4c4e38, 8) INDIRECT (ram, 0x4c4e38, 8) , (const, 0x748, 4)]
[(ram, 0x4c4f30, 8) INDIRECT (ram, 0x4c4f30, 8) , (const, 0x748, 4)]
[(ram, 0x4c4f48, 8) INDIRECT (ram, 0x4c4f48, 8) , (const, 0x748, 4)]
[(ram, 0x4c4f60, 8) INDIRECT (ram, 0x4c4f60, 8) , (const, 0x748, 4)]
[(ram, 0x4c76b8, 8) INDIRECT (ram, 0x4c76b8, 8) , (const, 0x748, 4)]
[(ram, 0x4c76c0, 4) INDIRECT (ram, 0x4c76c0, 4) , (const, 0x748, 4)]
[(ram, 0x4c76c8, 8) INDIRECT (ram, 0x4c76c8, 8) , (const, 0x748, 4), (ram, 0x4c76c8, 8) COPY (const, 0xff0, 8)]
[(ram, 0x4c76d0, 8) INDIRECT (ram, 0x4c76d0, 8) , (const, 0x748, 4)]
[(ram, 0x4c76d8, 4) INDIRECT (ram, 0x4c76d8, 4) , (const, 0x748, 4)]
[(ram, 0x4c76e0, 8) INDIRECT (ram, 0x4c76e0, 8) , (const, 0x748, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x748, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x747, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x748, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x747, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x748, 4), (stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x747, 4)]
[(stack, 0xffffffffffffff6c, 4) INDIRECT (stack, 0xffffffffffffff6c, 4) , (const, 0x748, 4), (stack, 0xffffffffffffff6c, 4) INDIRECT (stack, 0xffffffffffffff6c, 4) , (const, 0x747, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x748, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x747, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x748, 4), (stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x747, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x748, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x747, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x748, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x747, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x748, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x747, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x748, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x747, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x748, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x747, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x748, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x747, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x748, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x747, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x748, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x747, 4)]
[ ---  CBRANCH (ram, 0x403d4b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x1000120e, 8), (unique, 0x1000120e, 8) CALL (ram, 0x426550, 8) , (const, 0xff0, 8)]
[(register, 0xb0, 4) COPY (const, 0x1, 4)]
[(ram, 0x4c4e38, 8) INDIRECT (ram, 0x4c4e38, 8) , (const, 0x757, 4)]
[(ram, 0x4c4f30, 8) INDIRECT (ram, 0x4c4f30, 8) , (const, 0x757, 4)]
[(ram, 0x4c4f48, 8) INDIRECT (ram, 0x4c4f48, 8) , (const, 0x757, 4)]
[(ram, 0x4c4f60, 8) INDIRECT (ram, 0x4c4f60, 8) , (const, 0x757, 4)]
[(ram, 0x4c76b8, 8) INDIRECT (ram, 0x4c76b8, 8) , (const, 0x757, 4)]
[(ram, 0x4c76c0, 4) INDIRECT (ram, 0x4c76c0, 4) , (const, 0x757, 4)]
[(ram, 0x4c76d8, 4) INDIRECT (ram, 0x4c76d8, 4) , (const, 0x757, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x0, 8) , (ram, 0x4c76e0, 8)]
[(register, 0x10, 8) COPY (const, 0xfe8, 8)]
[(unique, 0x10000c2e, 8) COPY (ram, 0x4c76e0, 8), (ram, 0x4c76e0, 8) COPY (unique, 0x10000c26, 8), (unique, 0x10000c26, 8) INDIRECT (unique, 0x10000c1e, 8) , (const, 0x757, 4), (unique, 0x10000c1e, 8) COPY (register, 0x0, 8)]
[ ---  BRANCH (ram, 0x403c8b, 1)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x403c77, 8), (register, 0x20, 8) CAST (unique, 0x1000121e, 8), (unique, 0x1000121e, 8) INT_ADD (unique, 0x10001216, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x10001216, 8) CAST (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x7cf, 4)]
[(ram, 0x4c4e38, 8) INDIRECT (ram, 0x4c4e38, 8) , (const, 0x7cf, 4)]
[(ram, 0x4c4f30, 8) INDIRECT (ram, 0x4c4f30, 8) , (const, 0x7cf, 4)]
[(ram, 0x4c4f48, 8) INDIRECT (ram, 0x4c4f48, 8) , (const, 0x7cf, 4)]
[(ram, 0x4c4f60, 8) INDIRECT (ram, 0x4c4f60, 8) , (const, 0x7cf, 4)]
[(ram, 0x4c76b8, 8) INDIRECT (ram, 0x4c76b8, 8) , (const, 0x7cf, 4)]
[(ram, 0x4c76c0, 4) INDIRECT (ram, 0x4c76c0, 4) , (const, 0x7cf, 4)]
[(ram, 0x4c76c8, 8) INDIRECT (unique, 0x10000be6, 8) , (const, 0x7cf, 4), (unique, 0x10000be6, 8) COPY (register, 0xa8, 8), (register, 0xa8, 8) INT_SEXT (register, 0x10, 4), (register, 0x10, 4) INT_MULT (register, 0xb0, 4) , (const, 0xff0, 4), (register, 0xb0, 4) INT_ADD (register, 0xb0, 4) , (const, 0x1, 4)]
[(ram, 0x4c76d0, 8) INDIRECT (ram, 0x4c76d0, 8) , (const, 0x7cf, 4)]
[(ram, 0x4c76d8, 4) INDIRECT (ram, 0x4c76d8, 4) , (const, 0x7cf, 4)]
[(ram, 0x4c76e0, 8) INDIRECT (ram, 0x4c76e0, 8) , (const, 0x7cf, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x7cf, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x7ce, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x7cf, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x7ce, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x7cf, 4), (stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x7ce, 4)]
[(stack, 0xffffffffffffff6c, 4) INDIRECT (stack, 0xffffffffffffff6c, 4) , (const, 0x7cf, 4), (stack, 0xffffffffffffff6c, 4) INDIRECT (stack, 0xffffffffffffff6c, 4) , (const, 0x7ce, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x7cf, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x7ce, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x7cf, 4), (stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x7ce, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x7cf, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x7ce, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x7cf, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x7ce, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x7cf, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x7ce, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x7cf, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x7ce, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x7cf, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x7ce, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x7cf, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x7ce, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x7cf, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x7ce, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x7cf, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x7ce, 4)]
[ ---  CBRANCH (ram, 0x403d39, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10001226, 8), (unique, 0x10001226, 8) CALL (ram, 0x427240, 8) , (ram, 0x4c76e0, 8) , (register, 0xa8, 8), (register, 0xa8, 8) INT_SEXT (register, 0x10, 4), (register, 0x10, 4) INT_MULT (register, 0xb0, 4) , (const, 0xff0, 4), (register, 0xb0, 4) INT_ADD (register, 0xb0, 4) , (const, 0x1, 4)]
[(unique, 0x3100, 8) INT_SUB (register, 0xa8, 8) , (const, 0x8, 8)]
[(unique, 0x10000c36, 8) COPY (register, 0x0, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff6c, 4) MULTIEQUAL (stack, 0xffffffffffffff6c, 4) , (stack, 0xffffffffffffff6c, 4)]
[(stack, 0xffffffffffffff68, 4) MULTIEQUAL (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(ram, 0x4c76e0, 8) MULTIEQUAL (unique, 0x10000c2e, 8) , (unique, 0x10000c36, 8)]
[(ram, 0x4c76d8, 4) MULTIEQUAL (ram, 0x4c76d8, 4) , (ram, 0x4c76d8, 4)]
[(ram, 0x4c76c0, 4) MULTIEQUAL (ram, 0x4c76c0, 4) , (ram, 0x4c76c0, 4)]
[(ram, 0x4c76b8, 8) MULTIEQUAL (ram, 0x4c76b8, 8) , (ram, 0x4c76b8, 8)]
[(ram, 0x4c4f60, 8) MULTIEQUAL (ram, 0x4c4f60, 8) , (ram, 0x4c4f60, 8)]
[(ram, 0x4c4f48, 8) MULTIEQUAL (ram, 0x4c4f48, 8) , (ram, 0x4c4f48, 8)]
[(ram, 0x4c4f30, 8) MULTIEQUAL (ram, 0x4c4f30, 8) , (ram, 0x4c4f30, 8)]
[(ram, 0x4c4e38, 8) MULTIEQUAL (ram, 0x4c4e38, 8) , (ram, 0x4c4e38, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb0, 4) MULTIEQUAL (register, 0xb0, 4) , (register, 0xb0, 4)]
[(register, 0x10, 8) MULTIEQUAL (register, 0x10, 8) , (unique, 0x3100, 8)]
[(unique, 0x3100, 8) CAST (unique, 0x1000122e, 8), (unique, 0x1000122e, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x8, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[(stack, 0xffffffffffffffb0, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10001236, 8), (unique, 0x10001236, 8) PTRADD (register, 0x0, 8) , (const, 0x2, 8) , (const, 0x8, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x403d4b, 8), (register, 0x20, 8) CAST (unique, 0x1000124e, 8), (unique, 0x1000124e, 8) INT_ADD (unique, 0x10001246, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x10001246, 8) CAST (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x7e3, 4)]
[(ram, 0x4c4e38, 8) INDIRECT (ram, 0x4c4e38, 8) , (const, 0x7e3, 4)]
[(ram, 0x4c4f30, 8) INDIRECT (ram, 0x4c4f30, 8) , (const, 0x7e3, 4)]
[(ram, 0x4c4f48, 8) INDIRECT (ram, 0x4c4f48, 8) , (const, 0x7e3, 4)]
[(ram, 0x4c4f60, 8) INDIRECT (ram, 0x4c4f60, 8) , (const, 0x7e3, 4)]
[(ram, 0x4c76b8, 8) INDIRECT (ram, 0x4c76b8, 8) , (const, 0x7e3, 4)]
[(ram, 0x4c76c0, 4) INDIRECT (ram, 0x4c76c0, 4) , (const, 0x7e3, 4)]
[(ram, 0x4c76c8, 8) INDIRECT (ram, 0x4c76c8, 8) , (const, 0x7e3, 4)]
[(ram, 0x4c76d0, 8) INDIRECT (ram, 0x4c76d0, 8) , (const, 0x7e3, 4)]
[(ram, 0x4c76d8, 4) INDIRECT (ram, 0x4c76d8, 4) , (const, 0x7e3, 4)]
[(ram, 0x4c76e0, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x7e3, 4), (unique, 0xbd80, 8) CAST (unique, 0x1000123e, 8), (unique, 0x1000123e, 8) LOAD (const, 0x1b1, 4) , (unique, 0x100009ce, 8)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x7e3, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x7e2, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x7e3, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x7e2, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x7e3, 4), (stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x7e2, 4)]
[(stack, 0xffffffffffffff6c, 4) INDIRECT (stack, 0xffffffffffffff6c, 4) , (const, 0x7e3, 4), (stack, 0xffffffffffffff6c, 4) INDIRECT (stack, 0xffffffffffffff6c, 4) , (const, 0x7e2, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x7e3, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x7e2, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x7e3, 4), (stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x7e2, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x7e3, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x7e2, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x7e3, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x7e2, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x7e3, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x7e2, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x7e3, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x7e2, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x7e3, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x7e2, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x7e3, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x7e2, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x7e3, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x7e2, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x7e3, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x7e2, 4)]
[ ---  CALL (ram, 0x426b40, 8) , (unique, 0x100009ce, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff6c, 4) MULTIEQUAL (stack, 0xffffffffffffff6c, 4) , (stack, 0xffffffffffffff6c, 4)]
[(stack, 0xffffffffffffff68, 4) MULTIEQUAL (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(ram, 0x4c76e0, 8) MULTIEQUAL (ram, 0x4c76e0, 8) , (ram, 0x4c76e0, 8)]
[(ram, 0x4c76d8, 4) MULTIEQUAL (ram, 0x4c76d8, 4) , (ram, 0x4c76d8, 4)]
[(ram, 0x4c76c0, 4) MULTIEQUAL (ram, 0x4c76c0, 4) , (ram, 0x4c76c0, 4)]
[(ram, 0x4c76b8, 8) MULTIEQUAL (ram, 0x4c76b8, 8) , (ram, 0x4c76b8, 8)]
[(ram, 0x4c4f60, 8) MULTIEQUAL (ram, 0x4c4f60, 8) , (ram, 0x4c4f60, 8)]
[(ram, 0x4c4f48, 8) MULTIEQUAL (ram, 0x4c4f48, 8) , (ram, 0x4c4f48, 8)]
[(ram, 0x4c4f30, 8) MULTIEQUAL (ram, 0x4c4f30, 8) , (ram, 0x4c4f30, 8)]
[(ram, 0x4c4e38, 8) MULTIEQUAL (ram, 0x4c4e38, 8) , (ram, 0x4c4e38, 8)]
[(ram, 0x4c76d0, 8) COPY (const, 0x0, 8)]
[(ram, 0x4c76c8, 8) COPY (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x403f39, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10001256, 8), (unique, 0x10001256, 8) INT_ADD (register, 0x110, 8) , (const, 0x18, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(stack, 0xffffffffffffff98, 8) COPY (const, 0xffffffffffffffff, 8)]
[(unique, 0x100008f0, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x100008f8, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(unique, 0x10000900, 8) MULTIEQUAL (ram, 0x4c4e38, 8) , (ram, 0x4c4e38, 8)]
[(unique, 0x10000908, 8) MULTIEQUAL (ram, 0x4c4f30, 8) , (ram, 0x4c4f30, 8)]
[(unique, 0x10000910, 8) MULTIEQUAL (ram, 0x4c4f48, 8) , (ram, 0x4c4f48, 8)]
[(unique, 0x10000918, 8) MULTIEQUAL (ram, 0x4c4f60, 8) , (ram, 0x4c4f60, 8)]
[(unique, 0x10000920, 8) MULTIEQUAL (ram, 0x4c76b8, 8) , (ram, 0x4c76b8, 8)]
[(unique, 0x10000928, 4) MULTIEQUAL (ram, 0x4c76c0, 4) , (ram, 0x4c76c0, 4)]
[(unique, 0x1000092c, 8) MULTIEQUAL (ram, 0x4c76c8, 8) , (ram, 0x4c76c8, 8)]
[(unique, 0x10000934, 8) MULTIEQUAL (ram, 0x4c76d0, 8) , (ram, 0x4c76d0, 8)]
[(unique, 0x1000093c, 8) MULTIEQUAL (ram, 0x4c76e0, 8) , (ram, 0x4c76e0, 8)]
[(unique, 0x10000944, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(unique, 0x1000094c, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(unique, 0x10000954, 4) MULTIEQUAL (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4)]
[(unique, 0x10000958, 4) MULTIEQUAL (stack, 0xffffffffffffff6c, 4) , (stack, 0xffffffffffffff6c, 4)]
[(unique, 0x1000095c, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(unique, 0x10000964, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(unique, 0x1000096c, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(unique, 0x10000974, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(unique, 0x1000097c, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(unique, 0x10000984, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(unique, 0x1000098c, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(unique, 0x10000994, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(unique, 0x1000099c, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(unique, 0x100008eb, 4) COPY (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x403610, 1) , (unique, 0x100008ef, 1), (unique, 0x100008ef, 1) INT_SLESS (const, 0x1, 4) , (unique, 0x1000125e, 4), (unique, 0x1000125e, 4) CAST (unique, 0x100009a4, 4), (unique, 0x100009a4, 4) MULTIEQUAL (ram, 0x4c76d8, 4) , (ram, 0x4c76d8, 4)]
[(ram, 0x4c76d8, 4) COPY (const, 0x0, 4)]
[ ---  CALLOTHER (const, 0x5, 4)]
[ ---  BRANCH (ram, 0x403610, 1)]
[(ram, 0x4c76d8, 4) INT_SUB (ram, 0x4c76d8, 4) , (const, 0x1, 4)]
[(stack, 0xffffffffffffff98, 8) COPY (const, 0xffffffffffffffff, 8)]
[ ---  BRANCH (ram, 0x403610, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff6c, 4) MULTIEQUAL (stack, 0xffffffffffffff6c, 4) , (stack, 0xffffffffffffff6c, 4) , (stack, 0xffffffffffffff6c, 4)]
[(stack, 0xffffffffffffff68, 4) MULTIEQUAL (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4c4e38, 8) INDIRECT (ram, 0x4c4e38, 8) , (const, 0x210, 4), (ram, 0x4c4e38, 8) MULTIEQUAL (ram, 0x4c4e38, 8) , (ram, 0x4c4e38, 8) , (ram, 0x4c4e38, 8)]
[(ram, 0x4c4f30, 8) INDIRECT (ram, 0x4c4f30, 8) , (const, 0x210, 4), (ram, 0x4c4f30, 8) MULTIEQUAL (ram, 0x4c4f30, 8) , (ram, 0x4c4f30, 8) , (ram, 0x4c4f30, 8)]
[(ram, 0x4c4f48, 8) INDIRECT (ram, 0x4c4f48, 8) , (const, 0x210, 4), (ram, 0x4c4f48, 8) MULTIEQUAL (ram, 0x4c4f48, 8) , (ram, 0x4c4f48, 8) , (ram, 0x4c4f48, 8)]
[(ram, 0x4c4f60, 8) INDIRECT (ram, 0x4c4f60, 8) , (const, 0x210, 4), (ram, 0x4c4f60, 8) MULTIEQUAL (ram, 0x4c4f60, 8) , (ram, 0x4c4f60, 8) , (ram, 0x4c4f60, 8)]
[(ram, 0x4c76b8, 8) INDIRECT (ram, 0x4c76b8, 8) , (const, 0x210, 4), (ram, 0x4c76b8, 8) MULTIEQUAL (ram, 0x4c76b8, 8) , (ram, 0x4c76b8, 8) , (ram, 0x4c76b8, 8)]
[(ram, 0x4c76c0, 4) INDIRECT (ram, 0x4c76c0, 4) , (const, 0x210, 4), (ram, 0x4c76c0, 4) MULTIEQUAL (ram, 0x4c76c0, 4) , (ram, 0x4c76c0, 4) , (ram, 0x4c76c0, 4)]
[(ram, 0x4c76c8, 8) INDIRECT (ram, 0x4c76c8, 8) , (const, 0x210, 4), (ram, 0x4c76c8, 8) MULTIEQUAL (ram, 0x4c76c8, 8) , (ram, 0x4c76c8, 8) , (ram, 0x4c76c8, 8)]
[(ram, 0x4c76d0, 8) INDIRECT (ram, 0x4c76d0, 8) , (const, 0x210, 4), (ram, 0x4c76d0, 8) MULTIEQUAL (ram, 0x4c76d0, 8) , (ram, 0x4c76d0, 8) , (ram, 0x4c76d0, 8)]
[(ram, 0x4c76d8, 4) INDIRECT (ram, 0x4c76d8, 4) , (const, 0x210, 4), (ram, 0x4c76d8, 4) MULTIEQUAL (ram, 0x4c76d8, 4) , (ram, 0x4c76d8, 4) , (ram, 0x4c76d8, 4)]
[(ram, 0x4c76e0, 8) INDIRECT (ram, 0x4c76e0, 8) , (const, 0x210, 4), (ram, 0x4c76e0, 8) MULTIEQUAL (ram, 0x4c76e0, 8) , (ram, 0x4c76e0, 8) , (ram, 0x4c76e0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (stack, 0xffffffffffffff58, 8) , (unique, 0x10001262, 8), (unique, 0x10001262, 8) CAST (stack, 0xffffffffffffff90, 8), (stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(unique, 0x10000ac6, 8) COPY (register, 0x20, 8), (register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8)]
[ ---  BRANCH (ram, 0x403610, 1)]
[(unique, 0x10000b1e, 8) COPY (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x403655, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESSEQUAL (register, 0xa8, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (unique, 0x100005e9, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (unique, 0x100005e1, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (unique, 0x100005d9, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (unique, 0x100005d1, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (unique, 0x100005c1, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (unique, 0x100005b9, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (unique, 0x100005b1, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (unique, 0x100005a9, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (unique, 0x100005a1, 8)]
[(stack, 0xffffffffffffff6c, 4) MULTIEQUAL (stack, 0xffffffffffffff6c, 4) , (stack, 0xffffffffffffff6c, 4) , (stack, 0xffffffffffffff6c, 4) , (stack, 0xffffffffffffff6c, 4) , (unique, 0x1000059d, 4)]
[(stack, 0xffffffffffffff68, 4) MULTIEQUAL (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4) , (unique, 0x10000599, 4)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (unique, 0x10000591, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (unique, 0x10000589, 8)]
[(ram, 0x4c76e0, 8) MULTIEQUAL (ram, 0x4c76e0, 8) , (ram, 0x4c76e0, 8) , (ram, 0x4c76e0, 8) , (ram, 0x4c76e0, 8) , (unique, 0x10000581, 8)]
[(ram, 0x4c76d8, 4) MULTIEQUAL (ram, 0x4c76d8, 4) , (ram, 0x4c76d8, 4) , (ram, 0x4c76d8, 4) , (ram, 0x4c76d8, 4) , (unique, 0x1000057d, 4)]
[(ram, 0x4c76d0, 8) MULTIEQUAL (ram, 0x4c76d0, 8) , (ram, 0x4c76d0, 8) , (ram, 0x4c76d0, 8) , (ram, 0x4c76d0, 8) , (unique, 0x10000575, 8)]
[(ram, 0x4c76c8, 8) MULTIEQUAL (ram, 0x4c76c8, 8) , (ram, 0x4c76c8, 8) , (ram, 0x4c76c8, 8) , (ram, 0x4c76c8, 8) , (unique, 0x1000056d, 8)]
[(ram, 0x4c76c0, 4) MULTIEQUAL (ram, 0x4c76c0, 4) , (ram, 0x4c76c0, 4) , (ram, 0x4c76c0, 4) , (ram, 0x4c76c0, 4) , (unique, 0x10000569, 4)]
[(ram, 0x4c76b8, 8) MULTIEQUAL (ram, 0x4c76b8, 8) , (ram, 0x4c76b8, 8) , (ram, 0x4c76b8, 8) , (ram, 0x4c76b8, 8) , (unique, 0x10000561, 8)]
[(ram, 0x4c4f60, 8) MULTIEQUAL (ram, 0x4c4f60, 8) , (ram, 0x4c4f60, 8) , (ram, 0x4c4f60, 8) , (ram, 0x4c4f60, 8) , (unique, 0x10000559, 8)]
[(ram, 0x4c4f48, 8) MULTIEQUAL (ram, 0x4c4f48, 8) , (ram, 0x4c4f48, 8) , (ram, 0x4c4f48, 8) , (ram, 0x4c4f48, 8) , (unique, 0x10000551, 8)]
[(ram, 0x4c4f30, 8) MULTIEQUAL (ram, 0x4c4f30, 8) , (ram, 0x4c4f30, 8) , (ram, 0x4c4f30, 8) , (ram, 0x4c4f30, 8) , (unique, 0x10000549, 8)]
[(ram, 0x4c4e38, 8) MULTIEQUAL (ram, 0x4c4e38, 8) , (ram, 0x4c4e38, 8) , (ram, 0x4c4e38, 8) , (ram, 0x4c4e38, 8) , (unique, 0x10000541, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (unique, 0x10000535, 8)]
[(register, 0x20, 8) COPY (unique, 0x10000b26, 8), (unique, 0x10000b26, 8) MULTIEQUAL (unique, 0x10000afe, 8) , (unique, 0x10000b06, 8) , (unique, 0x10000b0e, 8) , (unique, 0x10000b16, 8) , (unique, 0x10000b1e, 8)]
[(stack, 0xffffffffffffff98, 8) COPY (const, 0x0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (unique, 0x10000994, 8) , (unique, 0x10000994, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (unique, 0x1000098c, 8) , (unique, 0x1000098c, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa0, 8) MULTIEQUAL (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (unique, 0x10000984, 8) , (unique, 0x10000984, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8) , (stack, 0xffffffffffffffa0, 8)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (unique, 0x100008f8, 8) , (unique, 0x100008f8, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (unique, 0x1000097c, 8) , (unique, 0x1000097c, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (unique, 0x10000974, 8) , (unique, 0x10000974, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (unique, 0x1000096c, 8) , (unique, 0x1000096c, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (unique, 0x10000964, 8) , (unique, 0x10000964, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (unique, 0x1000095c, 8) , (unique, 0x1000095c, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff6c, 4) MULTIEQUAL (stack, 0xffffffffffffff6c, 4) , (stack, 0xffffffffffffff6c, 4) , (unique, 0x10000958, 4) , (unique, 0x10000958, 4) , (stack, 0xffffffffffffff6c, 4) , (stack, 0xffffffffffffff6c, 4) , (stack, 0xffffffffffffff6c, 4)]
[(stack, 0xffffffffffffff68, 4) MULTIEQUAL (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4) , (unique, 0x10000954, 4) , (unique, 0x10000954, 4) , (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (unique, 0x1000094c, 8) , (unique, 0x1000094c, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (unique, 0x10000944, 8) , (unique, 0x10000944, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(ram, 0x4c76e0, 8) MULTIEQUAL (ram, 0x4c76e0, 8) , (ram, 0x4c76e0, 8) , (unique, 0x1000093c, 8) , (unique, 0x1000093c, 8) , (ram, 0x4c76e0, 8) , (ram, 0x4c76e0, 8) , (ram, 0x4c76e0, 8)]
[(ram, 0x4c76d8, 4) MULTIEQUAL (ram, 0x4c76d8, 4) , (ram, 0x4c76d8, 4) , (unique, 0x100008eb, 4) , (ram, 0x4c76d8, 4) , (ram, 0x4c76d8, 4) , (ram, 0x4c76d8, 4) , (ram, 0x4c76d8, 4)]
[(ram, 0x4c76d0, 8) MULTIEQUAL (ram, 0x4c76d0, 8) , (ram, 0x4c76d0, 8) , (unique, 0x10000934, 8) , (unique, 0x10000934, 8) , (ram, 0x4c76d0, 8) , (ram, 0x4c76d0, 8) , (ram, 0x4c76d0, 8)]
[(ram, 0x4c76c8, 8) MULTIEQUAL (ram, 0x4c76c8, 8) , (ram, 0x4c76c8, 8) , (unique, 0x1000092c, 8) , (unique, 0x1000092c, 8) , (ram, 0x4c76c8, 8) , (ram, 0x4c76c8, 8) , (ram, 0x4c76c8, 8)]
[(ram, 0x4c76c0, 4) MULTIEQUAL (ram, 0x4c76c0, 4) , (ram, 0x4c76c0, 4) , (unique, 0x10000928, 4) , (unique, 0x10000928, 4) , (ram, 0x4c76c0, 4) , (ram, 0x4c76c0, 4) , (ram, 0x4c76c0, 4)]
[(ram, 0x4c76b8, 8) MULTIEQUAL (ram, 0x4c76b8, 8) , (ram, 0x4c76b8, 8) , (unique, 0x10000920, 8) , (unique, 0x10000920, 8) , (ram, 0x4c76b8, 8) , (ram, 0x4c76b8, 8) , (ram, 0x4c76b8, 8)]
[(ram, 0x4c4f60, 8) MULTIEQUAL (ram, 0x4c4f60, 8) , (ram, 0x4c4f60, 8) , (unique, 0x10000918, 8) , (unique, 0x10000918, 8) , (ram, 0x4c4f60, 8) , (ram, 0x4c4f60, 8) , (ram, 0x4c4f60, 8)]
[(ram, 0x4c4f48, 8) MULTIEQUAL (ram, 0x4c4f48, 8) , (ram, 0x4c4f48, 8) , (unique, 0x10000910, 8) , (unique, 0x10000910, 8) , (ram, 0x4c4f48, 8) , (ram, 0x4c4f48, 8) , (ram, 0x4c4f48, 8)]
[(ram, 0x4c4f30, 8) MULTIEQUAL (ram, 0x4c4f30, 8) , (ram, 0x4c4f30, 8) , (unique, 0x10000908, 8) , (unique, 0x10000908, 8) , (ram, 0x4c4f30, 8) , (ram, 0x4c4f30, 8) , (ram, 0x4c4f30, 8)]
[(ram, 0x4c4e38, 8) MULTIEQUAL (ram, 0x4c4e38, 8) , (ram, 0x4c4e38, 8) , (unique, 0x10000900, 8) , (unique, 0x10000900, 8) , (ram, 0x4c4e38, 8) , (ram, 0x4c4e38, 8) , (ram, 0x4c4e38, 8)]
[(register, 0x20, 8) MULTIEQUAL (unique, 0x10000ac6, 8) , (unique, 0x10000c84, 8) , (unique, 0x10000c84, 8) , (unique, 0x10000c84, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x403ff3, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffffc0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x1000126a, 8), (unique, 0x1000126a, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (unique, 0x100008f0, 8) , (unique, 0x100008f0, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (unique, 0x1000099c, 8) , (unique, 0x1000099c, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x20, 8) , (const, 0x403ff8, 8), (register, 0x20, 8) CAST (unique, 0x1000127a, 8), (unique, 0x1000127a, 8) INT_ADD (unique, 0x10001272, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x10001272, 8) CAST (register, 0x20, 8)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x238, 4), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x237, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x238, 4), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x237, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x238, 4), (stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x237, 4)]
[(stack, 0xffffffffffffff6c, 4) INDIRECT (stack, 0xffffffffffffff6c, 4) , (const, 0x238, 4), (stack, 0xffffffffffffff6c, 4) INDIRECT (stack, 0xffffffffffffff6c, 4) , (const, 0x237, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x238, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x237, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x238, 4), (stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x237, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x238, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x237, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x238, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x237, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x238, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x237, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x238, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x237, 4)]
[(stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x238, 4), (stack, 0xffffffffffffffa0, 8) INDIRECT (stack, 0xffffffffffffffa0, 8) , (const, 0x237, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x238, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x237, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x238, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x237, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x238, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x237, 4)]
[ ---  CALL (ram, 0x458dd0, 8)]
[(ram, 0x4c4e38, 8) COPY (ram, 0x4c4e38, 8), (ram, 0x4c4e38, 8) INDIRECT (ram, 0x4c4e38, 8) , (const, 0x238, 4)]
[(ram, 0x4c4f30, 8) COPY (ram, 0x4c4f30, 8), (ram, 0x4c4f30, 8) INDIRECT (ram, 0x4c4f30, 8) , (const, 0x238, 4)]
[(ram, 0x4c4f48, 8) COPY (ram, 0x4c4f48, 8), (ram, 0x4c4f48, 8) INDIRECT (ram, 0x4c4f48, 8) , (const, 0x238, 4)]
[(ram, 0x4c4f60, 8) COPY (ram, 0x4c4f60, 8), (ram, 0x4c4f60, 8) INDIRECT (ram, 0x4c4f60, 8) , (const, 0x238, 4)]
[(ram, 0x4c76b8, 8) COPY (ram, 0x4c76b8, 8), (ram, 0x4c76b8, 8) INDIRECT (ram, 0x4c76b8, 8) , (const, 0x238, 4)]
[(ram, 0x4c76c0, 4) COPY (ram, 0x4c76c0, 4), (ram, 0x4c76c0, 4) INDIRECT (ram, 0x4c76c0, 4) , (const, 0x238, 4)]
[(ram, 0x4c76c8, 8) COPY (ram, 0x4c76c8, 8), (ram, 0x4c76c8, 8) INDIRECT (ram, 0x4c76c8, 8) , (const, 0x238, 4)]
[(ram, 0x4c76d0, 8) COPY (ram, 0x4c76d0, 8), (ram, 0x4c76d0, 8) INDIRECT (ram, 0x4c76d0, 8) , (const, 0x238, 4)]
[(ram, 0x4c76d8, 4) COPY (ram, 0x4c76d8, 4), (ram, 0x4c76d8, 4) INDIRECT (ram, 0x4c76d8, 4) , (const, 0x238, 4)]
[(ram, 0x4c76e0, 8) COPY (ram, 0x4c76e0, 8), (ram, 0x4c76e0, 8) INDIRECT (ram, 0x4c76e0, 8) , (const, 0x238, 4)]
[ ---  RETURN (const, 0x1, 4)]
[(ram, 0x4c4e38, 8) COPY (ram, 0x4c4e38, 8)]
[(ram, 0x4c4f30, 8) COPY (ram, 0x4c4f30, 8)]
[(ram, 0x4c4f48, 8) COPY (ram, 0x4c4f48, 8)]
[(ram, 0x4c4f60, 8) COPY (ram, 0x4c4f60, 8)]
[(ram, 0x4c76b8, 8) COPY (ram, 0x4c76b8, 8)]
[(ram, 0x4c76c0, 4) COPY (ram, 0x4c76c0, 4)]
[(ram, 0x4c76c8, 8) COPY (ram, 0x4c76c8, 8)]
[(ram, 0x4c76d0, 8) COPY (ram, 0x4c76d0, 8)]
[(ram, 0x4c76d8, 4) COPY (ram, 0x4c76d8, 4)]
[(ram, 0x4c76e0, 8) COPY (ram, 0x4c76e0, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) COPY (stack, 0xffffffffffffff98, 8)]
