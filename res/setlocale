[ ---  CBRANCH (ram, 0x12add0, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (const, 0xc, 4) , (unique, 0x10000926, 4), (unique, 0x10000926, 4) CAST (register, 0x38, 4)]
[ ---  CBRANCH (ram, 0x12b0a0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x30, 8) , (const, 0x0, 8)]
[(ram, 0x4c2e78, 8) COPY (ram, 0x4c2e78, 8)]
[(ram, 0x4c2f10, 8) COPY (ram, 0x4c2f10, 8)]
[(ram, 0x4c44d0, 8) COPY (ram, 0x4c44d0, 8)]
[(ram, 0x4c8728, 8) COPY (ram, 0x4c8728, 8)]
[(ram, 0x4c8730, 8) COPY (ram, 0x4c8730, 8)]
[(ram, 0x4c8790, 4) COPY (ram, 0x4c8790, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3e80, 8), (unique, 0x3e80, 8) PTRADD (unique, 0x100005ed, 8) , (register, 0x38, 8) , (const, 0x8, 8), (unique, 0x100005ed, 8) PTRSUB (const, 0x0, 8) , (const, 0x4c44a0, 8), (register, 0x38, 8) INT_SEXT (register, 0x38, 4)]
[ ---  CBRANCH (ram, 0x12adf0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4c8790, 4) , (const, 0x0, 4)]
[ ---  CALLIND (register, 0x0, 8) , (unique, 0x10000605, 8), (unique, 0x10000605, 8) PTRSUB (const, 0x0, 8) , (const, 0x4c4920, 8), (register, 0x0, 8) CAST (unique, 0x10000932, 8), (unique, 0x10000932, 8) INT_XOR (register, 0x0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x1000092a, 8), (unique, 0x1000092a, 8) INT_ADD (register, 0x110, 8) , (const, 0x30, 8), (register, 0x0, 8) INT_OR (unique, 0x4ff00, 8) , (unique, 0x50000, 8), (unique, 0x50000, 8) INT_LEFT (ram, 0x4c8728, 8) , (const, 0x2f, 4), (unique, 0x4ff00, 8) INT_RIGHT (ram, 0x4c8728, 8) , (const, 0x11, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x6e7, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x6de, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x6e7, 4), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x6de, 4)]
[(ram, 0x4c2f10, 8) INDIRECT (ram, 0x4c2f10, 8) , (const, 0x6e7, 4), (ram, 0x4c2f10, 8) INDIRECT (ram, 0x4c2f10, 8) , (const, 0x6de, 4)]
[(ram, 0x4c44d0, 8) INDIRECT (ram, 0x4c44d0, 8) , (const, 0x6e7, 4), (ram, 0x4c44d0, 8) INDIRECT (ram, 0x4c44d0, 8) , (const, 0x6de, 4)]
[(ram, 0x4c8728, 8) INDIRECT (ram, 0x4c8728, 8) , (const, 0x6e7, 4), (ram, 0x4c8728, 8) INDIRECT (ram, 0x4c8728, 8) , (const, 0x6de, 4)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x6e7, 4), (ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x6de, 4)]
[(ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x6e7, 4), (ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x6de, 4)]
[ ---  CBRANCH (ram, 0x12ac90, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x1892e0, 8) , (register, 0x30, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3b80, 8), (unique, 0x3b80, 8) PTRADD (unique, 0x100005bd, 8) , (unique, 0x3100, 8) , (const, 0x8, 8), (unique, 0x100005bd, 8) PTRSUB (const, 0x0, 8) , (const, 0x4c4420, 8), (unique, 0x3100, 8) INT_ADD (register, 0xb0, 8) , (const, 0x10, 8), (register, 0xb0, 8) INT_SEXT (register, 0x38, 4)]
[ ---  CBRANCH (ram, 0x12ac79, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4c8790, 4) , (const, 0x0, 4)]
[ ---  CALLIND (register, 0x0, 8) , (unique, 0x1000060d, 8), (unique, 0x1000060d, 8) PTRSUB (const, 0x0, 8) , (const, 0x4c4920, 8), (register, 0x0, 8) CAST (unique, 0x10000942, 8), (unique, 0x10000942, 8) INT_XOR (register, 0x0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x1000093a, 8), (unique, 0x1000093a, 8) INT_ADD (register, 0x110, 8) , (const, 0x30, 8), (register, 0x0, 8) INT_OR (unique, 0x4ff00, 8) , (unique, 0x50000, 8), (unique, 0x50000, 8) INT_LEFT (ram, 0x4c8730, 8) , (const, 0x2f, 4), (unique, 0x4ff00, 8) INT_RIGHT (ram, 0x4c8730, 8) , (const, 0x11, 4)]
[(ram, 0x4c2e78, 8) COPY (ram, 0x4c2e78, 8), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x722, 4)]
[(ram, 0x4c2f10, 8) COPY (ram, 0x4c2f10, 8), (ram, 0x4c2f10, 8) INDIRECT (ram, 0x4c2f10, 8) , (const, 0x722, 4)]
[(ram, 0x4c44d0, 8) COPY (ram, 0x4c44d0, 8), (ram, 0x4c44d0, 8) INDIRECT (ram, 0x4c44d0, 8) , (const, 0x722, 4)]
[(ram, 0x4c8728, 8) COPY (ram, 0x4c8728, 8), (ram, 0x4c8728, 8) INDIRECT (ram, 0x4c8728, 8) , (const, 0x722, 4)]
[(ram, 0x4c8730, 8) COPY (ram, 0x4c8730, 8), (ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x722, 4)]
[(ram, 0x4c8790, 4) COPY (ram, 0x4c8790, 4), (ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x722, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3b80, 8), (unique, 0x3b80, 8) PTRADD (unique, 0x100005c5, 8) , (unique, 0x3100, 8) , (const, 0x8, 8), (unique, 0x100005c5, 8) PTRSUB (const, 0x0, 8) , (const, 0x4c4420, 8)]
[(ram, 0x4c2e78, 8) COPY (ram, 0x4c2e78, 8)]
[(ram, 0x4c2f10, 8) COPY (ram, 0x4c2f10, 8)]
[(ram, 0x4c44d0, 8) COPY (ram, 0x4c44d0, 8)]
[(ram, 0x4c8728, 8) COPY (ram, 0x4c8728, 8)]
[(ram, 0x4c8730, 8) COPY (ram, 0x4c8730, 8)]
[(ram, 0x4c8790, 4) COPY (ram, 0x4c8790, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) COPY (unique, 0xbd80, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x4c, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x4c, 4)]
[(ram, 0x4c2f10, 8) INDIRECT (ram, 0x4c2f10, 8) , (const, 0x4c, 4)]
[(ram, 0x4c44d0, 8) INDIRECT (ram, 0x4c44d0, 8) , (const, 0x4c, 4)]
[(ram, 0x4c8728, 8) INDIRECT (ram, 0x4c8728, 8) , (const, 0x4c, 4)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x4c, 4)]
[(ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x4c, 4)]
[ ---  CBRANCH (ram, 0x12ac90, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x1892e0, 8) , (register, 0x30, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3e80, 8), (unique, 0x3e80, 8) PTRADD (unique, 0x100005d5, 8) , (register, 0xb0, 8) , (const, 0x8, 8), (unique, 0x100005d5, 8) PTRSUB (const, 0x0, 8) , (const, 0x4c44a0, 8), (register, 0xb0, 8) INT_SEXT (register, 0x38, 4)]
[(ram, 0x4c2e78, 8) COPY (ram, 0x4c2e78, 8)]
[(ram, 0x4c2f10, 8) COPY (ram, 0x4c2f10, 8)]
[(ram, 0x4c44d0, 8) COPY (ram, 0x4c44d0, 8)]
[(ram, 0x4c8728, 8) COPY (ram, 0x4c8728, 8)]
[(ram, 0x4c8730, 8) COPY (ram, 0x4c8730, 8)]
[(ram, 0x4c8790, 4) COPY (ram, 0x4c8790, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) COPY (unique, 0xbd80, 8)]
[(register, 0xb0, 8) INT_SEXT (register, 0x38, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x7a, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x7a, 4), (ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(ram, 0x4c2f10, 8) INDIRECT (ram, 0x4c2f10, 8) , (const, 0x7a, 4), (ram, 0x4c2f10, 8) MULTIEQUAL (ram, 0x4c2f10, 8) , (ram, 0x4c2f10, 8)]
[(ram, 0x4c44d0, 8) INDIRECT (ram, 0x4c44d0, 8) , (const, 0x7a, 4), (ram, 0x4c44d0, 8) MULTIEQUAL (ram, 0x4c44d0, 8) , (ram, 0x4c44d0, 8)]
[(ram, 0x4c8728, 8) INDIRECT (ram, 0x4c8728, 8) , (const, 0x7a, 4), (ram, 0x4c8728, 8) MULTIEQUAL (ram, 0x4c8728, 8) , (ram, 0x4c8728, 8)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x7a, 4), (ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x7a, 4), (ram, 0x4c8790, 4) MULTIEQUAL (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x7a, 4), (stack, 0xfffffffffffffed8, 8) COPY (const, 0x0, 8)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x7a, 4), (stack, 0xfffffffffffffee0, 8) COPY (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x12acbc, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x139760, 8) , (unique, 0x1000051d, 8), (unique, 0x1000051d, 8) COPY (const, 0x28c1b7, 8)]
[ ---  CBRANCH (ram, 0x12b0c0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0x0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x65c, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x65c, 4)]
[(ram, 0x4c2f10, 8) INDIRECT (ram, 0x4c2f10, 8) , (const, 0x65c, 4)]
[(ram, 0x4c44d0, 8) INDIRECT (ram, 0x4c44d0, 8) , (const, 0x65c, 4)]
[(ram, 0x4c8728, 8) INDIRECT (ram, 0x4c8728, 8) , (const, 0x65c, 4)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x65c, 4)]
[(ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x65c, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x65c, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x65c, 4)]
[ ---  CBRANCH (ram, 0x12b0f8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x1960e0, 8) , (register, 0x0, 8) , (const, 0x3a, 8) , (unique, 0x3800, 8) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffed8, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffee0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x6aa, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x6aa, 4)]
[(ram, 0x4c2f10, 8) INDIRECT (ram, 0x4c2f10, 8) , (const, 0x6aa, 4)]
[(ram, 0x4c44d0, 8) INDIRECT (ram, 0x4c44d0, 8) , (const, 0x6aa, 4)]
[(ram, 0x4c8728, 8) INDIRECT (ram, 0x4c8728, 8) , (const, 0x6aa, 4)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x6aa, 4)]
[(ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x6aa, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x6aa, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x6aa, 4)]
[ ---  CBRANCH (ram, 0x12b0e1, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x196420, 8) , (unique, 0x3800, 8) , (unique, 0x3800, 8) , (unique, 0x100005a5, 8), (unique, 0x100005a5, 8) COPY (const, 0x292ec0, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c8728, 8) MULTIEQUAL (ram, 0x4c8728, 8) , (ram, 0x4c8728, 8)]
[(ram, 0x4c44d0, 8) MULTIEQUAL (ram, 0x4c44d0, 8) , (ram, 0x4c44d0, 8)]
[(ram, 0x4c2f10, 8) MULTIEQUAL (ram, 0x4c2f10, 8) , (ram, 0x4c2f10, 8)]
[(ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x12b120, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4c8790, 4) , (const, 0x0, 4), (ram, 0x4c8790, 4) MULTIEQUAL (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x6a2, 4)]
[(ram, 0x4c2f10, 8) INDIRECT (ram, 0x4c2f10, 8) , (const, 0x6a2, 4)]
[(ram, 0x4c44d0, 8) INDIRECT (ram, 0x4c44d0, 8) , (const, 0x6a2, 4)]
[(ram, 0x4c8728, 8) INDIRECT (ram, 0x4c8728, 8) , (const, 0x6a2, 4)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x6a2, 4)]
[(ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x6a2, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x6a2, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x6a2, 4)]
[ ---  CALLIND (register, 0x0, 8) , (unique, 0x10000615, 8), (unique, 0x10000615, 8) PTRSUB (const, 0x0, 8) , (const, 0x4c4920, 8), (register, 0x0, 8) CAST (unique, 0x10000952, 8), (unique, 0x10000952, 8) INT_XOR (register, 0x0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x1000094a, 8), (unique, 0x1000094a, 8) INT_ADD (register, 0x110, 8) , (const, 0x30, 8), (register, 0x0, 8) INT_OR (unique, 0x4ff00, 8) , (unique, 0x50000, 8), (unique, 0x50000, 8) INT_LEFT (ram, 0x4c8730, 8) , (const, 0x2f, 4), (unique, 0x4ff00, 8) INT_RIGHT (ram, 0x4c8730, 8) , (const, 0x11, 4)]
[ ---  BRANCH (ram, 0x12b0eb, 1)]
[(ram, 0x4c2e78, 8) COPY (ram, 0x4c2e78, 8), (ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(ram, 0x4c2f10, 8) COPY (ram, 0x4c2f10, 8), (ram, 0x4c2f10, 8) MULTIEQUAL (ram, 0x4c2f10, 8) , (ram, 0x4c2f10, 8)]
[(ram, 0x4c44d0, 8) COPY (ram, 0x4c44d0, 8), (ram, 0x4c44d0, 8) MULTIEQUAL (ram, 0x4c44d0, 8) , (ram, 0x4c44d0, 8)]
[(ram, 0x4c8728, 8) COPY (ram, 0x4c8728, 8), (ram, 0x4c8728, 8) MULTIEQUAL (ram, 0x4c8728, 8) , (ram, 0x4c8728, 8)]
[(ram, 0x4c8730, 8) COPY (ram, 0x4c8730, 8), (ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c8790, 4) COPY (ram, 0x4c8790, 4), (ram, 0x4c8790, 4) MULTIEQUAL (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) COPY (const, 0x0, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(ram, 0x4c8790, 4) MULTIEQUAL (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4)]
[(ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c8728, 8) MULTIEQUAL (ram, 0x4c8728, 8) , (ram, 0x4c8728, 8) , (ram, 0x4c8728, 8)]
[(ram, 0x4c44d0, 8) MULTIEQUAL (ram, 0x4c44d0, 8) , (ram, 0x4c44d0, 8) , (ram, 0x4c44d0, 8)]
[(ram, 0x4c2f10, 8) MULTIEQUAL (ram, 0x4c2f10, 8) , (ram, 0x4c2f10, 8) , (ram, 0x4c2f10, 8)]
[(ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x12af90, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x38, 4) , (const, 0x6, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xc6, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0xc6, 4)]
[(ram, 0x4c2f10, 8) INDIRECT (ram, 0x4c2f10, 8) , (const, 0xc6, 4)]
[(ram, 0x4c44d0, 8) INDIRECT (ram, 0x4c44d0, 8) , (const, 0xc6, 4)]
[(ram, 0x4c8728, 8) INDIRECT (ram, 0x4c8728, 8) , (const, 0xc6, 4)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0xc6, 4)]
[(ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0xc6, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0xc6, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0xc6, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (unique, 0x100008ba, 8) , (const, 0xc6, 4), (unique, 0x100008ba, 8) COPY (register, 0x30, 8)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (unique, 0x100008c2, 8) , (const, 0xc6, 4), (unique, 0x100008c2, 8) COPY (register, 0x30, 8)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (unique, 0x100008ca, 8) , (const, 0xc6, 4), (unique, 0x100008ca, 8) COPY (register, 0x30, 8)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (unique, 0x100008d2, 8) , (const, 0xc6, 4), (unique, 0x100008d2, 8) COPY (register, 0x30, 8)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (unique, 0x100008da, 8) , (const, 0xc6, 4), (unique, 0x100008da, 8) COPY (register, 0x30, 8)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (unique, 0x100008e2, 8) , (const, 0xc6, 4), (unique, 0x100008e2, 8) COPY (register, 0x30, 8)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (unique, 0x100008ea, 8) , (const, 0xc6, 4), (unique, 0x100008ea, 8) COPY (register, 0x30, 8)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (unique, 0x100008f2, 8) , (const, 0xc6, 4), (unique, 0x100008f2, 8) COPY (register, 0x30, 8)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (unique, 0x100008fa, 8) , (const, 0xc6, 4), (unique, 0x100008fa, 8) COPY (register, 0x30, 8)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (unique, 0x10000902, 8) , (const, 0xc6, 4), (unique, 0x10000902, 8) COPY (register, 0x30, 8)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (unique, 0x1000090a, 8) , (const, 0xc6, 4), (unique, 0x1000090a, 8) COPY (register, 0x30, 8)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (unique, 0x10000912, 8) , (const, 0xc6, 4), (unique, 0x10000912, 8) COPY (register, 0x30, 8)]
[ ---  CBRANCH (ram, 0x12b310, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x189080, 8) , (register, 0x30, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xd4, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0xd4, 4)]
[(ram, 0x4c2f10, 8) INDIRECT (ram, 0x4c2f10, 8) , (const, 0xd4, 4)]
[(ram, 0x4c44d0, 8) INDIRECT (ram, 0x4c44d0, 8) , (const, 0xd4, 4)]
[(ram, 0x4c8728, 8) INDIRECT (ram, 0x4c8728, 8) , (const, 0xd4, 4)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0xd4, 4)]
[(ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0xd4, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0xd4, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0xd4, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0xd4, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0xd4, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0xd4, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0xd4, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0xd4, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0xd4, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0xd4, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0xd4, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0xd4, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0xd4, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0xd4, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0xd4, 4)]
[(unique, 0x1000083a, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x18aa40, 8) , (register, 0x30, 8)]
[ ---  CBRANCH (ram, 0x12b42a, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x18aa40, 8) , (register, 0x30, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xe7, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0xe7, 4), (ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(ram, 0x4c2f10, 8) INDIRECT (ram, 0x4c2f10, 8) , (const, 0xe7, 4), (ram, 0x4c2f10, 8) MULTIEQUAL (ram, 0x4c2f10, 8) , (ram, 0x4c2f10, 8)]
[(ram, 0x4c44d0, 8) INDIRECT (ram, 0x4c44d0, 8) , (const, 0xe7, 4), (ram, 0x4c44d0, 8) MULTIEQUAL (ram, 0x4c44d0, 8) , (ram, 0x4c44d0, 8)]
[(ram, 0x4c8728, 8) INDIRECT (ram, 0x4c8728, 8) , (const, 0xe7, 4), (ram, 0x4c8728, 8) MULTIEQUAL (ram, 0x4c8728, 8) , (ram, 0x4c8728, 8)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0xe7, 4), (ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0xe7, 4), (ram, 0x4c8790, 4) MULTIEQUAL (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0xe7, 4), (stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0xe7, 4), (stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0xe7, 4), (stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0xe7, 4), (stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0xe7, 4), (stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0xe7, 4), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0xe7, 4), (stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0xe7, 4), (stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0xe7, 4), (stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0xe7, 4), (stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0xe7, 4), (stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0xe7, 4), (stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0xe7, 4), (stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0xe7, 4), (stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[ ---  CBRANCH (ram, 0x12b140, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x189080, 8) , (register, 0x18, 8) , (const, 0x3d, 8), (register, 0x18, 8) MULTIEQUAL (unique, 0x10000832, 8) , (unique, 0x1000083a, 8)]
[ ---  CBRANCH (ram, 0x12ae70, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x8, 8), (register, 0x0, 8) INT_SUB (register, 0x0, 8) , (unique, 0x1000095a, 8), (unique, 0x1000095a, 8) CAST (register, 0x18, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x4c9, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x4c9, 4)]
[(ram, 0x4c2f10, 8) INDIRECT (ram, 0x4c2f10, 8) , (const, 0x4c9, 4)]
[(ram, 0x4c44d0, 8) INDIRECT (ram, 0x4c44d0, 8) , (const, 0x4c9, 4)]
[(ram, 0x4c8728, 8) INDIRECT (ram, 0x4c8728, 8) , (const, 0x4c9, 4)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x4c9, 4)]
[(ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x4c9, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x4c9, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x4c9, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x4c9, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x4c9, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x4c9, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x4c9, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x4c9, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x4c9, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x4c9, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x4c9, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x4c9, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x4c9, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x4c9, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x4c9, 4)]
[ ---  CBRANCH (ram, 0x12b4aa, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x18e1c0, 8) , (register, 0x18, 8) , (unique, 0x100004c5, 8) , (const, 0x8, 8), (unique, 0x100004c5, 8) COPY (const, 0x274fab, 8)]
[(register, 0x0, 8) COPY (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x12af60, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x4d9, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x4d9, 4)]
[(ram, 0x4c2f10, 8) INDIRECT (ram, 0x4c2f10, 8) , (const, 0x4d9, 4)]
[(ram, 0x4c44d0, 8) INDIRECT (ram, 0x4c44d0, 8) , (const, 0x4d9, 4)]
[(ram, 0x4c8728, 8) INDIRECT (ram, 0x4c8728, 8) , (const, 0x4d9, 4)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x4d9, 4)]
[(ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x4d9, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x4d9, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x4d9, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x4d9, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x4d9, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x4d9, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x4d9, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x4d9, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x4d9, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x4d9, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x4d9, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x4d9, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x4d9, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x4d9, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x4d9, 4)]
[ ---  CBRANCH (ram, 0x12adb8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x18e1c0, 8) , (register, 0x18, 8) , (unique, 0x100004ed, 8) , (const, 0x8, 8), (unique, 0x100004ed, 8) COPY (const, 0x274fdf, 8)]
[(register, 0x0, 8) COPY (const, 0x7, 8)]
[ ---  BRANCH (ram, 0x12af60, 1)]
[ ---  CBRANCH (ram, 0x12aeb8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0xa, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x492, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x492, 4)]
[(ram, 0x4c2f10, 8) INDIRECT (ram, 0x4c2f10, 8) , (const, 0x492, 4)]
[(ram, 0x4c44d0, 8) INDIRECT (ram, 0x4c44d0, 8) , (const, 0x492, 4)]
[(ram, 0x4c8728, 8) INDIRECT (ram, 0x4c8728, 8) , (const, 0x492, 4)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x492, 4)]
[(ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x492, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x492, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x492, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x492, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x492, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x492, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x492, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x492, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x492, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x492, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x492, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x492, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x492, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x492, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x492, 4)]
[ ---  CBRANCH (ram, 0x12b496, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x18e1c0, 8) , (register, 0x18, 8) , (unique, 0x100004d5, 8) , (const, 0xa, 8), (unique, 0x100004d5, 8) COPY (const, 0x274fc0, 8)]
[(register, 0x0, 8) COPY (const, 0x1, 8)]
[ ---  BRANCH (ram, 0x12af60, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x4a2, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x4a2, 4)]
[(ram, 0x4c2f10, 8) INDIRECT (ram, 0x4c2f10, 8) , (const, 0x4a2, 4)]
[(ram, 0x4c44d0, 8) INDIRECT (ram, 0x4c44d0, 8) , (const, 0x4a2, 4)]
[(ram, 0x4c8728, 8) INDIRECT (ram, 0x4c8728, 8) , (const, 0x4a2, 4)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x4a2, 4)]
[(ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x4a2, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x4a2, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x4a2, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x4a2, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x4a2, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x4a2, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x4a2, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x4a2, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x4a2, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x4a2, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x4a2, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x4a2, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x4a2, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x4a2, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x4a2, 4)]
[ ---  CBRANCH (ram, 0x12b4a0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x18e1c0, 8) , (register, 0x18, 8) , (unique, 0x100004bd, 8) , (const, 0xa, 8), (unique, 0x100004bd, 8) COPY (const, 0x274fa0, 8)]
[(register, 0x0, 8) COPY (const, 0x3, 8)]
[ ---  BRANCH (ram, 0x12af60, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x4b2, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x4b2, 4)]
[(ram, 0x4c2f10, 8) INDIRECT (ram, 0x4c2f10, 8) , (const, 0x4b2, 4)]
[(ram, 0x4c44d0, 8) INDIRECT (ram, 0x4c44d0, 8) , (const, 0x4b2, 4)]
[(ram, 0x4c8728, 8) INDIRECT (ram, 0x4c8728, 8) , (const, 0x4b2, 4)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x4b2, 4)]
[(ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x4b2, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x4b2, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x4b2, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x4b2, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x4b2, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x4b2, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x4b2, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x4b2, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x4b2, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x4b2, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x4b2, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x4b2, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x4b2, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x4b2, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x4b2, 4)]
[ ---  CBRANCH (ram, 0x12adb8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x18e1c0, 8) , (register, 0x18, 8) , (unique, 0x100004fd, 8) , (const, 0xa, 8), (unique, 0x100004fd, 8) COPY (const, 0x274ff0, 8)]
[(register, 0x0, 8) COPY (const, 0x9, 8)]
[ ---  BRANCH (ram, 0x12af60, 1)]
[ ---  CBRANCH (ram, 0x12af18, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x7, 8)]
[ ---  CBRANCH (ram, 0x12b4cd, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0xb, 8)]
[ ---  CBRANCH (ram, 0x12b4f9, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0xc, 8)]
[ ---  CBRANCH (ram, 0x12b525, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0xe, 8)]
[ ---  CBRANCH (ram, 0x12adb8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x11, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x47f, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x47f, 4)]
[(ram, 0x4c2f10, 8) INDIRECT (ram, 0x4c2f10, 8) , (const, 0x47f, 4)]
[(ram, 0x4c44d0, 8) INDIRECT (ram, 0x4c44d0, 8) , (const, 0x47f, 4)]
[(ram, 0x4c8728, 8) INDIRECT (ram, 0x4c8728, 8) , (const, 0x47f, 4)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x47f, 4)]
[(ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x47f, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x47f, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x47f, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x47f, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x47f, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x47f, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x47f, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x47f, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x47f, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x47f, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x47f, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x47f, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x47f, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x47f, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x47f, 4)]
[ ---  CBRANCH (ram, 0x12adb8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x18e1c0, 8) , (register, 0x18, 8) , (unique, 0x10000515, 8) , (const, 0x11, 8), (unique, 0x10000515, 8) COPY (const, 0x275017, 8)]
[(register, 0x0, 8) COPY (const, 0xc, 8)]
[ ---  BRANCH (ram, 0x12af60, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x461, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x461, 4)]
[(ram, 0x4c2f10, 8) INDIRECT (ram, 0x4c2f10, 8) , (const, 0x461, 4)]
[(ram, 0x4c44d0, 8) INDIRECT (ram, 0x4c44d0, 8) , (const, 0x461, 4)]
[(ram, 0x4c8728, 8) INDIRECT (ram, 0x4c8728, 8) , (const, 0x461, 4)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x461, 4)]
[(ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x461, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x461, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x461, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x461, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x461, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x461, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x461, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x461, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x461, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x461, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x461, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x461, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x461, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x461, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x461, 4)]
[ ---  CBRANCH (ram, 0x12adb8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x18e1c0, 8) , (register, 0x18, 8) , (unique, 0x1000050d, 8) , (const, 0xe, 8), (unique, 0x1000050d, 8) COPY (const, 0x275008, 8)]
[(register, 0x0, 8) COPY (const, 0xb, 8)]
[ ---  BRANCH (ram, 0x12af60, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x443, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x443, 4)]
[(ram, 0x4c2f10, 8) INDIRECT (ram, 0x4c2f10, 8) , (const, 0x443, 4)]
[(ram, 0x4c44d0, 8) INDIRECT (ram, 0x4c44d0, 8) , (const, 0x443, 4)]
[(ram, 0x4c8728, 8) INDIRECT (ram, 0x4c8728, 8) , (const, 0x443, 4)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x443, 4)]
[(ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x443, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x443, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x443, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x443, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x443, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x443, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x443, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x443, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x443, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x443, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x443, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x443, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x443, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x443, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x443, 4)]
[ ---  CBRANCH (ram, 0x12adb8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x18e1c0, 8) , (register, 0x18, 8) , (unique, 0x10000505, 8) , (const, 0xc, 8), (unique, 0x10000505, 8) COPY (const, 0x274ffb, 8)]
[(register, 0x0, 8) COPY (const, 0xa, 8)]
[ ---  BRANCH (ram, 0x12af60, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x414, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x414, 4)]
[(ram, 0x4c2f10, 8) INDIRECT (ram, 0x4c2f10, 8) , (const, 0x414, 4)]
[(ram, 0x4c44d0, 8) INDIRECT (ram, 0x4c44d0, 8) , (const, 0x414, 4)]
[(ram, 0x4c8728, 8) INDIRECT (ram, 0x4c8728, 8) , (const, 0x414, 4)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x414, 4)]
[(ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x414, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x414, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x414, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x414, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x414, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x414, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x414, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x414, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x414, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x414, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x414, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x414, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x414, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x414, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x414, 4)]
[ ---  CBRANCH (ram, 0x12b48c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x18e1c0, 8) , (register, 0x18, 8) , (unique, 0x100004cd, 8) , (const, 0xb, 8), (unique, 0x100004cd, 8) COPY (const, 0x274fb4, 8)]
[(register, 0x0, 8) COPY (const, 0x4, 8)]
[ ---  BRANCH (ram, 0x12af60, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x424, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x424, 4)]
[(ram, 0x4c2f10, 8) INDIRECT (ram, 0x4c2f10, 8) , (const, 0x424, 4)]
[(ram, 0x4c44d0, 8) INDIRECT (ram, 0x4c44d0, 8) , (const, 0x424, 4)]
[(ram, 0x4c8728, 8) INDIRECT (ram, 0x4c8728, 8) , (const, 0x424, 4)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x424, 4)]
[(ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x424, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x424, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x424, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x424, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x424, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x424, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x424, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x424, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x424, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x424, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x424, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x424, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x424, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x424, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x424, 4)]
[ ---  CBRANCH (ram, 0x12adb8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x18e1c0, 8) , (register, 0x18, 8) , (unique, 0x100004e5, 8) , (const, 0xb, 8), (unique, 0x100004e5, 8) COPY (const, 0x274fd3, 8)]
[(register, 0x0, 8) COPY (const, 0x5, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x120, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x120, 4)]
[(ram, 0x4c2f10, 8) INDIRECT (ram, 0x4c2f10, 8) , (const, 0x120, 4)]
[(ram, 0x4c44d0, 8) INDIRECT (ram, 0x4c44d0, 8) , (const, 0x120, 4)]
[(ram, 0x4c8728, 8) INDIRECT (ram, 0x4c8728, 8) , (const, 0x120, 4)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x120, 4)]
[(ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x120, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x120, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x120, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x120, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x120, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x120, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x120, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x120, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x120, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x120, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x120, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x120, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x120, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x120, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x120, 4)]
[ ---  CBRANCH (ram, 0x12b482, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x18e1c0, 8) , (register, 0x18, 8) , (unique, 0x100004dd, 8) , (const, 0x7, 8), (unique, 0x100004dd, 8) COPY (const, 0x274fcb, 8)]
[(register, 0x0, 8) COPY (const, 0x2, 8)]
[ ---  BRANCH (ram, 0x12af60, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x130, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x130, 4)]
[(ram, 0x4c2f10, 8) INDIRECT (ram, 0x4c2f10, 8) , (const, 0x130, 4)]
[(ram, 0x4c44d0, 8) INDIRECT (ram, 0x4c44d0, 8) , (const, 0x130, 4)]
[(ram, 0x4c8728, 8) INDIRECT (ram, 0x4c8728, 8) , (const, 0x130, 4)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x130, 4)]
[(ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x130, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x130, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x130, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x130, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x130, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x130, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x130, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x130, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x130, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x130, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x130, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x130, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x130, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x130, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x130, 4)]
[ ---  CBRANCH (ram, 0x12b4b1, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x18e1c0, 8) , (register, 0x18, 8) , (unique, 0x100004f5, 8) , (const, 0x7, 8), (unique, 0x100004f5, 8) COPY (const, 0x274fe8, 8)]
[(register, 0x0, 8) COPY (const, 0x8, 8)]
[ ---  BRANCH (ram, 0x12af60, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3a00, 8) , (unique, 0x3100, 8), (unique, 0x3a00, 8) PTRADD (unique, 0x10000665, 8) , (register, 0x0, 8) , (const, 0x8, 8), (unique, 0x10000665, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffee8, 8), (unique, 0x3100, 8) CAST (unique, 0x10000962, 8), (unique, 0x10000962, 8) INT_ADD (register, 0x0, 8) , (const, 0x1, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8) , (register, 0x0, 8) , (register, 0x0, 8) , (register, 0x0, 8) , (register, 0x0, 8) , (register, 0x0, 8) , (register, 0x0, 8) , (register, 0x0, 8) , (register, 0x0, 8) , (register, 0x0, 8) , (register, 0x0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x190, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x190, 4), (ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(ram, 0x4c2f10, 8) INDIRECT (ram, 0x4c2f10, 8) , (const, 0x190, 4), (ram, 0x4c2f10, 8) MULTIEQUAL (ram, 0x4c2f10, 8) , (ram, 0x4c2f10, 8) , (ram, 0x4c2f10, 8) , (ram, 0x4c2f10, 8) , (ram, 0x4c2f10, 8) , (ram, 0x4c2f10, 8) , (ram, 0x4c2f10, 8) , (ram, 0x4c2f10, 8) , (ram, 0x4c2f10, 8) , (ram, 0x4c2f10, 8) , (ram, 0x4c2f10, 8) , (ram, 0x4c2f10, 8)]
[(ram, 0x4c44d0, 8) INDIRECT (ram, 0x4c44d0, 8) , (const, 0x190, 4), (ram, 0x4c44d0, 8) MULTIEQUAL (ram, 0x4c44d0, 8) , (ram, 0x4c44d0, 8) , (ram, 0x4c44d0, 8) , (ram, 0x4c44d0, 8) , (ram, 0x4c44d0, 8) , (ram, 0x4c44d0, 8) , (ram, 0x4c44d0, 8) , (ram, 0x4c44d0, 8) , (ram, 0x4c44d0, 8) , (ram, 0x4c44d0, 8) , (ram, 0x4c44d0, 8) , (ram, 0x4c44d0, 8)]
[(ram, 0x4c8728, 8) INDIRECT (ram, 0x4c8728, 8) , (const, 0x190, 4), (ram, 0x4c8728, 8) MULTIEQUAL (ram, 0x4c8728, 8) , (ram, 0x4c8728, 8) , (ram, 0x4c8728, 8) , (ram, 0x4c8728, 8) , (ram, 0x4c8728, 8) , (ram, 0x4c8728, 8) , (ram, 0x4c8728, 8) , (ram, 0x4c8728, 8) , (ram, 0x4c8728, 8) , (ram, 0x4c8728, 8) , (ram, 0x4c8728, 8) , (ram, 0x4c8728, 8)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x190, 4), (ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x190, 4), (ram, 0x4c8790, 4) MULTIEQUAL (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x190, 4), (stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x190, 4), (stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x190, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x18d, 4), (stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x190, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x18d, 4), (stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x190, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x18d, 4), (stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x190, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x18d, 4), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x190, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x18d, 4), (stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x190, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x18d, 4), (stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x190, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x18d, 4), (stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x190, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x18d, 4), (stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x190, 4), (stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x18d, 4), (stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x190, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x18d, 4), (stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x190, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x18d, 4), (stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x190, 4), (stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x18d, 4), (stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[ ---  CBRANCH (ram, 0x12b140, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x1000096a, 8), (unique, 0x1000096a, 8) CALL (ram, 0x189080, 8) , (unique, 0x3100, 8) , (const, 0x3b, 8), (unique, 0x3100, 8) CAST (unique, 0x10000962, 8), (unique, 0x10000962, 8) INT_ADD (register, 0x0, 8) , (const, 0x1, 8)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x19c, 4)]
[(ram, 0x4c2f10, 8) INDIRECT (ram, 0x4c2f10, 8) , (const, 0x19c, 4)]
[(ram, 0x4c44d0, 8) INDIRECT (ram, 0x4c44d0, 8) , (const, 0x19c, 4)]
[(ram, 0x4c8728, 8) INDIRECT (ram, 0x4c8728, 8) , (const, 0x19c, 4)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x19c, 4)]
[(ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x19c, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x0, 8) , (const, 0x0, 1)]
[(unique, 0x10000832, 8) COPY (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[ ---  BRANCH (ram, 0x12ad40, 1)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(ram, 0x4c8790, 4) MULTIEQUAL (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4)]
[(ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c8728, 8) MULTIEQUAL (ram, 0x4c8728, 8) , (ram, 0x4c8728, 8)]
[(ram, 0x4c44d0, 8) MULTIEQUAL (ram, 0x4c44d0, 8) , (ram, 0x4c44d0, 8)]
[(ram, 0x4c2f10, 8) MULTIEQUAL (ram, 0x4c2f10, 8) , (ram, 0x4c2f10, 8)]
[(ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x10, 4) COPY (const, 0x1, 4)]
[(register, 0x0, 8) COPY (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x12b157, 1)]
[(register, 0x10, 4) MULTIEQUAL (register, 0x10, 4) , (register, 0x10, 4)]
[ ---  CBRANCH (ram, 0x12b150, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x6, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x12adb8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x30, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (unique, 0x100006c5, 8) , (register, 0x0, 8) , (const, 0x8, 8), (unique, 0x100006c5, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffee8, 8)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c8728, 8) MULTIEQUAL (ram, 0x4c8728, 8) , (ram, 0x4c8728, 8) , (ram, 0x4c8728, 8) , (ram, 0x4c8728, 8) , (ram, 0x4c8728, 8) , (ram, 0x4c8728, 8) , (ram, 0x4c8728, 8) , (ram, 0x4c8728, 8) , (ram, 0x4c8728, 8)]
[(ram, 0x4c44d0, 8) MULTIEQUAL (ram, 0x4c44d0, 8) , (ram, 0x4c44d0, 8) , (ram, 0x4c44d0, 8) , (ram, 0x4c44d0, 8) , (ram, 0x4c44d0, 8) , (ram, 0x4c44d0, 8) , (ram, 0x4c44d0, 8) , (ram, 0x4c44d0, 8) , (ram, 0x4c44d0, 8)]
[(ram, 0x4c2f10, 8) MULTIEQUAL (ram, 0x4c2f10, 8) , (ram, 0x4c2f10, 8) , (ram, 0x4c2f10, 8) , (ram, 0x4c2f10, 8) , (ram, 0x4c2f10, 8) , (ram, 0x4c2f10, 8) , (ram, 0x4c2f10, 8) , (ram, 0x4c2f10, 8) , (ram, 0x4c2f10, 8)]
[(ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x12b460, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4c8790, 4) , (const, 0x0, 4), (ram, 0x4c8790, 4) MULTIEQUAL (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x182, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x182, 4)]
[(ram, 0x4c2f10, 8) INDIRECT (ram, 0x4c2f10, 8) , (const, 0x182, 4)]
[(ram, 0x4c44d0, 8) INDIRECT (ram, 0x4c44d0, 8) , (const, 0x182, 4)]
[(ram, 0x4c8728, 8) INDIRECT (ram, 0x4c8728, 8) , (const, 0x182, 4)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x182, 4)]
[(ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x182, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x182, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x182, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x182, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x182, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x182, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x182, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x182, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x182, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x182, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x182, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x182, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x182, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x182, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x182, 4)]
[ ---  CALLIND (register, 0x0, 8) , (unique, 0x10000635, 8), (unique, 0x10000635, 8) PTRSUB (const, 0x0, 8) , (const, 0x4c4920, 8), (register, 0x0, 8) CAST (unique, 0x1000097a, 8), (unique, 0x1000097a, 8) INT_XOR (register, 0x0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10000972, 8), (unique, 0x10000972, 8) INT_ADD (register, 0x110, 8) , (const, 0x30, 8), (register, 0x0, 8) INT_OR (unique, 0x4ff00, 8) , (unique, 0x50000, 8), (unique, 0x50000, 8) INT_LEFT (ram, 0x4c8730, 8) , (const, 0x2f, 4), (unique, 0x4ff00, 8) INT_RIGHT (ram, 0x4c8730, 8) , (const, 0x11, 4)]
[ ---  BRANCH (ram, 0x12adc6, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x14f, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x14f, 4), (ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(ram, 0x4c2f10, 8) INDIRECT (ram, 0x4c2f10, 8) , (const, 0x14f, 4), (ram, 0x4c2f10, 8) MULTIEQUAL (ram, 0x4c2f10, 8) , (ram, 0x4c2f10, 8)]
[(ram, 0x4c44d0, 8) INDIRECT (ram, 0x4c44d0, 8) , (const, 0x14f, 4), (ram, 0x4c44d0, 8) MULTIEQUAL (ram, 0x4c44d0, 8) , (ram, 0x4c44d0, 8)]
[(ram, 0x4c8728, 8) INDIRECT (ram, 0x4c8728, 8) , (const, 0x14f, 4), (ram, 0x4c8728, 8) MULTIEQUAL (ram, 0x4c8728, 8) , (ram, 0x4c8728, 8)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x14f, 4), (ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x14f, 4), (ram, 0x4c8790, 4) MULTIEQUAL (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x14f, 4), (stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x14f, 4), (stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x14f, 4), (stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x14f, 4), (stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x14f, 4), (stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x14f, 4), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x14f, 4), (stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x14f, 4), (stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x14f, 4), (stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x14f, 4), (stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x14f, 4), (stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x14f, 4), (stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x14f, 4), (stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x14f, 4), (stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[ ---  CALL (ram, 0x11f8a8, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x12b150, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x10, 4) , (const, 0xd, 4)]
[(register, 0x0, 8) INT_ADD (register, 0x0, 8) , (const, 0x1, 8)]
[(register, 0x10, 4) INT_ADD (register, 0x10, 4) , (const, 0x1, 4)]
[ ---  CBRANCH (ram, 0x12ac79, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4c8790, 4) , (const, 0x0, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x52b, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x52b, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x52b, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x52b, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x52b, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x52b, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x52b, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x52b, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x52b, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x52b, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x52b, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x52b, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x52b, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x52b, 4)]
[ ---  CALLIND (register, 0x0, 8) , (unique, 0x1000062d, 8), (unique, 0x1000062d, 8) PTRSUB (const, 0x0, 8) , (const, 0x4c4920, 8), (register, 0x0, 8) CAST (unique, 0x1000098a, 8), (unique, 0x1000098a, 8) INT_XOR (register, 0x0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10000982, 8), (unique, 0x10000982, 8) INT_ADD (register, 0x110, 8) , (const, 0x30, 8), (register, 0x0, 8) INT_OR (unique, 0x4ff00, 8) , (unique, 0x50000, 8), (unique, 0x50000, 8) INT_LEFT (ram, 0x4c8730, 8) , (const, 0x2f, 4), (unique, 0x4ff00, 8) INT_RIGHT (ram, 0x4c8730, 8) , (const, 0x11, 4)]
[(ram, 0x4c2e78, 8) COPY (ram, 0x4c2e78, 8), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x52b, 4)]
[(ram, 0x4c2f10, 8) COPY (ram, 0x4c2f10, 8), (ram, 0x4c2f10, 8) INDIRECT (ram, 0x4c2f10, 8) , (const, 0x52b, 4)]
[(ram, 0x4c44d0, 8) COPY (ram, 0x4c44d0, 8), (ram, 0x4c44d0, 8) INDIRECT (ram, 0x4c44d0, 8) , (const, 0x52b, 4)]
[(ram, 0x4c8728, 8) COPY (ram, 0x4c8728, 8), (ram, 0x4c8728, 8) INDIRECT (ram, 0x4c8728, 8) , (const, 0x52b, 4)]
[(ram, 0x4c8730, 8) COPY (ram, 0x4c8730, 8), (ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x52b, 4)]
[(ram, 0x4c8790, 4) COPY (ram, 0x4c8790, 4), (ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x52b, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) COPY (const, 0x0, 8)]
[(ram, 0x4c2e78, 8) COPY (ram, 0x4c2e78, 8)]
[(ram, 0x4c2f10, 8) COPY (ram, 0x4c2f10, 8)]
[(ram, 0x4c44d0, 8) COPY (ram, 0x4c44d0, 8)]
[(ram, 0x4c8728, 8) COPY (ram, 0x4c8728, 8)]
[(ram, 0x4c8730, 8) COPY (ram, 0x4c8730, 8)]
[(ram, 0x4c8790, 4) COPY (ram, 0x4c8790, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) COPY (const, 0x0, 8)]
[(stack, 0xfffffffffffffed0, 8) COPY (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x12b16c, 1)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (register, 0x0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(ram, 0x4c8790, 4) MULTIEQUAL (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4)]
[(ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c8728, 8) MULTIEQUAL (ram, 0x4c8728, 8) , (ram, 0x4c8728, 8)]
[(ram, 0x4c44d0, 8) MULTIEQUAL (ram, 0x4c44d0, 8) , (ram, 0x4c44d0, 8)]
[(ram, 0x4c2f10, 8) MULTIEQUAL (ram, 0x4c2f10, 8) , (ram, 0x4c2f10, 8)]
[(ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x18, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffee8, 8)]
[(unique, 0x10000842, 4) COPY (register, 0xb8, 4), (register, 0xb8, 4) COPY (const, 0xc, 4)]
[(unique, 0x100008a6, 4) COPY (stack, 0xfffffffffffffecc, 4), (stack, 0xfffffffffffffecc, 4) COPY (const, 0xd, 4)]
[ ---  BRANCH (ram, 0x12b1a3, 1)]
[(stack, 0xfffffffffffffecc, 4) MULTIEQUAL (unique, 0x100008a6, 4) , (unique, 0x100008aa, 4) , (unique, 0x10000922, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1e5, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x1e5, 4), (ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(ram, 0x4c2f10, 8) INDIRECT (ram, 0x4c2f10, 8) , (const, 0x1e5, 4), (ram, 0x4c2f10, 8) MULTIEQUAL (ram, 0x4c2f10, 8) , (ram, 0x4c2f10, 8) , (ram, 0x4c2f10, 8)]
[(ram, 0x4c44d0, 8) INDIRECT (ram, 0x4c44d0, 8) , (const, 0x1e5, 4), (ram, 0x4c44d0, 8) MULTIEQUAL (ram, 0x4c44d0, 8) , (ram, 0x4c44d0, 8) , (ram, 0x4c44d0, 8)]
[(ram, 0x4c8728, 8) INDIRECT (ram, 0x4c8728, 8) , (const, 0x1e5, 4), (ram, 0x4c8728, 8) MULTIEQUAL (ram, 0x4c8728, 8) , (ram, 0x4c8728, 8) , (ram, 0x4c8728, 8)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x1e5, 4), (ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x1e5, 4), (ram, 0x4c8790, 4) MULTIEQUAL (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x1e5, 4), (stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x1e5, 4), (stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x1e5, 4), (stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x1e5, 4), (stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x1e5, 4), (stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x1e5, 4), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x1e5, 4), (stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x1e5, 4), (stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x1e5, 4), (stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x1e5, 4), (stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x1e5, 4), (stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x1e5, 4), (stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x1e5, 4), (stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x1e5, 4), (stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3e80, 8) , (register, 0x0, 8), (unique, 0x3e80, 8) PTRADD (unique, 0x10000715, 8) , (register, 0xb0, 8) , (const, 0x8, 8), (unique, 0x10000715, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff58, 8), (register, 0x0, 8) CAST (unique, 0x10000992, 8), (unique, 0x10000992, 8) CALL (ram, 0x12b560, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffee0, 8) , (register, 0xb8, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (register, 0x18, 8) , (register, 0xb0, 8) , (const, 0x8, 8), (register, 0xb0, 8) INT_SEXT (register, 0xb8, 4), (register, 0xb8, 4) COPY (unique, 0x1000084e, 4), (unique, 0x1000084e, 4) MULTIEQUAL (unique, 0x10000842, 4) , (unique, 0x10000846, 4) , (unique, 0x1000084a, 4), (stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8), (stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[ ---  CBRANCH (ram, 0x12b220, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10000992, 8), (unique, 0x10000992, 8) CALL (ram, 0x12b560, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffee0, 8) , (register, 0xb8, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (register, 0x18, 8) , (register, 0xb0, 8) , (const, 0x8, 8), (register, 0xb0, 8) INT_SEXT (register, 0xb8, 4), (register, 0xb8, 4) COPY (unique, 0x1000084e, 4), (unique, 0x1000084e, 4) MULTIEQUAL (unique, 0x10000842, 4) , (unique, 0x10000846, 4) , (unique, 0x1000084a, 4), (stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8), (stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[ ---  CBRANCH (ram, 0x12b1d6, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd00, 4) , (const, 0xffffffff, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x1000099a, 8), (unique, 0x1000099a, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x30, 8) , (const, 0x1, 8)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x205, 4)]
[(ram, 0x4c2f10, 8) INDIRECT (ram, 0x4c2f10, 8) , (const, 0x205, 4)]
[(ram, 0x4c44d0, 8) INDIRECT (ram, 0x4c44d0, 8) , (const, 0x205, 4)]
[(ram, 0x4c8728, 8) INDIRECT (ram, 0x4c8728, 8) , (const, 0x205, 4)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x205, 4)]
[(ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x205, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100009a2, 8) , (const, 0xffffffff, 4), (unique, 0x100009a2, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x30, 8) , (const, 0x1, 8)]
[(ram, 0x4c8790, 4) MULTIEQUAL (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4)]
[(ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c8728, 8) MULTIEQUAL (ram, 0x4c8728, 8) , (ram, 0x4c8728, 8)]
[(ram, 0x4c44d0, 8) MULTIEQUAL (ram, 0x4c44d0, 8) , (ram, 0x4c44d0, 8)]
[(ram, 0x4c2f10, 8) MULTIEQUAL (ram, 0x4c2f10, 8) , (ram, 0x4c2f10, 8)]
[(ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[ ---  CBRANCH (ram, 0x12b185, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (unique, 0x1000053d, 8), (unique, 0x1000053d, 8) COPY (const, 0x28e177, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) PTRADD (unique, 0x10000735, 8) , (register, 0xb0, 8) , (const, 0x8, 8), (unique, 0x10000735, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffee8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x222, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x222, 4)]
[(ram, 0x4c2f10, 8) INDIRECT (ram, 0x4c2f10, 8) , (const, 0x222, 4)]
[(ram, 0x4c44d0, 8) INDIRECT (ram, 0x4c44d0, 8) , (const, 0x222, 4)]
[(ram, 0x4c8728, 8) INDIRECT (ram, 0x4c8728, 8) , (const, 0x222, 4)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x222, 4)]
[(ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x222, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x222, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x222, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x222, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x222, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x222, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x222, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x222, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x222, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x222, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x222, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x222, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x222, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x222, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x222, 4)]
[ ---  CBRANCH (ram, 0x12b180, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x1892e0, 8) , (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3e80, 8), (unique, 0x3e80, 8) PTRADD (unique, 0x100005f5, 8) , (register, 0xb0, 8) , (const, 0x8, 8), (unique, 0x100005f5, 8) PTRSUB (const, 0x0, 8) , (const, 0x4c44a0, 8)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x3ee, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x3ee, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x3ee, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x3ee, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x3ee, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x3ee, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x3ee, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x3ee, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x3ee, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x3ee, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x3ee, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x3ee, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3a00, 8) , (unique, 0xbd80, 8), (unique, 0x3a00, 8) PTRADD (unique, 0x100006ed, 8) , (register, 0xb0, 8) , (const, 0x8, 8), (unique, 0x100006ed, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffee8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x230, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x230, 4)]
[(ram, 0x4c2f10, 8) INDIRECT (ram, 0x4c2f10, 8) , (const, 0x230, 4)]
[(ram, 0x4c44d0, 8) INDIRECT (ram, 0x4c44d0, 8) , (const, 0x230, 4)]
[(ram, 0x4c8728, 8) INDIRECT (ram, 0x4c8728, 8) , (const, 0x230, 4)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x230, 4)]
[(ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x230, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x230, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x230, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x23e, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x230, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x23e, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x230, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x23e, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x230, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x23e, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x230, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x23e, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x230, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x23e, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x230, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x23e, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x230, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x23e, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x230, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x23e, 4), (stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x230, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x23e, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x230, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x23e, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x230, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x23e, 4), (stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x230, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3a00, 8) , (register, 0x0, 8), (unique, 0x3a00, 8) PTRADD (unique, 0x1000075d, 8) , (register, 0xb0, 8) , (const, 0x8, 8), (unique, 0x1000075d, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffee8, 8), (register, 0x0, 8) CALL (ram, 0x18aa40, 8) , (unique, 0xbd80, 8)]
[ ---  CBRANCH (ram, 0x12b185, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x18aa40, 8) , (unique, 0xbd80, 8)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(ram, 0x4c8790, 4) MULTIEQUAL (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4)]
[(ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c8728, 8) MULTIEQUAL (ram, 0x4c8728, 8) , (ram, 0x4c8728, 8)]
[(ram, 0x4c44d0, 8) MULTIEQUAL (ram, 0x4c44d0, 8) , (ram, 0x4c44d0, 8)]
[(ram, 0x4c2f10, 8) MULTIEQUAL (ram, 0x4c2f10, 8) , (ram, 0x4c2f10, 8)]
[(ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x100008b2, 4) COPY (stack, 0xfffffffffffffecc, 4)]
[ ---  CBRANCH (ram, 0x12b335, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (register, 0xb8, 4) , (const, 0x0, 4)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(ram, 0x4c8790, 4) MULTIEQUAL (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4)]
[(ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c8728, 8) MULTIEQUAL (ram, 0x4c8728, 8) , (ram, 0x4c8728, 8) , (ram, 0x4c8728, 8)]
[(ram, 0x4c44d0, 8) MULTIEQUAL (ram, 0x4c44d0, 8) , (ram, 0x4c44d0, 8) , (ram, 0x4c44d0, 8)]
[(ram, 0x4c2f10, 8) MULTIEQUAL (ram, 0x4c2f10, 8) , (ram, 0x4c2f10, 8) , (ram, 0x4c2f10, 8)]
[(ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x3100, 4) INT_ADD (register, 0xb8, 4) , (const, 0xffffffff, 4)]
[(unique, 0x10000922, 4) COPY (register, 0xb8, 4)]
[ ---  CBRANCH (ram, 0x12b328, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (register, 0xb8, 4) , (const, 0x1, 4)]
[(unique, 0x1000085e, 4) COPY (register, 0xb8, 4)]
[ ---  CBRANCH (ram, 0x12b241, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (const, 0xffffffff, 4) , (unique, 0x3100, 4)]
[(stack, 0xfffffffffffffecc, 4) MULTIEQUAL (unique, 0x100008b2, 4) , (unique, 0x10000922, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x2fe, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x2fe, 4), (ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(ram, 0x4c2f10, 8) INDIRECT (ram, 0x4c2f10, 8) , (const, 0x2fe, 4), (ram, 0x4c2f10, 8) MULTIEQUAL (ram, 0x4c2f10, 8) , (ram, 0x4c2f10, 8)]
[(ram, 0x4c44d0, 8) INDIRECT (ram, 0x4c44d0, 8) , (const, 0x2fe, 4), (ram, 0x4c44d0, 8) MULTIEQUAL (ram, 0x4c44d0, 8) , (ram, 0x4c44d0, 8)]
[(ram, 0x4c8728, 8) INDIRECT (ram, 0x4c8728, 8) , (const, 0x2fe, 4), (ram, 0x4c8728, 8) MULTIEQUAL (ram, 0x4c8728, 8) , (ram, 0x4c8728, 8)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x2fe, 4), (ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x2fe, 4), (ram, 0x4c8790, 4) MULTIEQUAL (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x2fe, 4), (stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x2fe, 4), (stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x2fe, 4), (stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x2fe, 4), (stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x2fe, 4), (stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x2fe, 4), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x2fe, 4), (stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x2fe, 4), (stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x2fe, 4), (stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x2fe, 4), (stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x2fe, 4), (stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x2fe, 4), (stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x2fe, 4), (stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x2fe, 4), (stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[ ---  CBRANCH (ram, 0x12b229, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x100009aa, 8), (unique, 0x100009aa, 8) CALL (ram, 0x12a920, 8) , (const, 0x6, 8) , (register, 0x18, 8)]
[(register, 0xb0, 8) PTRSUB (const, 0x0, 8) , (const, 0x4c4420, 8)]
[(register, 0x28, 4) COPY (const, 0x1, 4)]
[(register, 0xb8, 8) COPY (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x12b37b, 1)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(ram, 0x4c8790, 4) MULTIEQUAL (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4)]
[(ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c8728, 8) MULTIEQUAL (ram, 0x4c8728, 8) , (ram, 0x4c8728, 8)]
[(ram, 0x4c44d0, 8) MULTIEQUAL (ram, 0x4c44d0, 8) , (ram, 0x4c44d0, 8)]
[(ram, 0x4c2f10, 8) MULTIEQUAL (ram, 0x4c2f10, 8) , (ram, 0x4c2f10, 8)]
[(ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb0, 8) MULTIEQUAL (register, 0xb0, 8) , (register, 0xb0, 8)]
[(register, 0x28, 4) MULTIEQUAL (register, 0x28, 4) , (register, 0x28, 4)]
[ ---  CBRANCH (ram, 0x12b370, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xb8, 8) , (const, 0x6, 8), (register, 0xb8, 8) MULTIEQUAL (register, 0xb8, 8) , (register, 0xb8, 8)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x32b, 4)]
[(ram, 0x4c2f10, 8) INDIRECT (ram, 0x4c2f10, 8) , (const, 0x32b, 4)]
[(ram, 0x4c44d0, 8) INDIRECT (ram, 0x4c44d0, 8) , (const, 0x32b, 4)]
[(ram, 0x4c8728, 8) INDIRECT (ram, 0x4c8728, 8) , (const, 0x32b, 4)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x32b, 4)]
[(ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x32b, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0xb0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (unique, 0x100007ad, 8) , (register, 0xb8, 8) , (const, 0x8, 8), (unique, 0x100007ad, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff58, 8)]
[ ---  CBRANCH (ram, 0x12b39a, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x100009b2, 8) , (const, 0x0, 8), (unique, 0x100009b2, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (unique, 0x100005b5, 8) , (register, 0xb8, 8) , (const, 0x8, 8), (unique, 0x100005b5, 8) PTRSUB (const, 0x0, 8) , (const, 0x4c1ae0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x33c, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x33c, 4)]
[(ram, 0x4c2f10, 8) INDIRECT (ram, 0x4c2f10, 8) , (const, 0x33c, 4)]
[(ram, 0x4c44d0, 8) INDIRECT (ram, 0x4c44d0, 8) , (const, 0x33c, 4)]
[(ram, 0x4c8728, 8) INDIRECT (ram, 0x4c8728, 8) , (const, 0x33c, 4)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x33c, 4)]
[(ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x33c, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x33c, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x33c, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x33c, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x33c, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x33c, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x33c, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x33c, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x33c, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x33c, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x33c, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x33c, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x33c, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x33c, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x33c, 4)]
[ ---  CALLIND (unique, 0x100009ba, 8), (unique, 0x100009ba, 8) CAST (unique, 0xbd80, 8)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(ram, 0x4c8790, 4) MULTIEQUAL (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4)]
[(ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c8728, 8) MULTIEQUAL (ram, 0x4c8728, 8) , (ram, 0x4c8728, 8)]
[(ram, 0x4c44d0, 8) MULTIEQUAL (ram, 0x4c44d0, 8) , (ram, 0x4c44d0, 8)]
[(ram, 0x4c2f10, 8) MULTIEQUAL (ram, 0x4c2f10, 8) , (ram, 0x4c2f10, 8)]
[(ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x12b3c2, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (register, 0xb0, 8) , (const, 0x10, 8) , (const, 0x8, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (register, 0x18, 8) , (register, 0xb8, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x12b3bb, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (unique, 0x1000054d, 8), (unique, 0x1000054d, 8) COPY (const, 0x28e177, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x35b, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x35b, 4)]
[(ram, 0x4c2f10, 8) INDIRECT (ram, 0x4c2f10, 8) , (const, 0x35b, 4)]
[(ram, 0x4c44d0, 8) INDIRECT (ram, 0x4c44d0, 8) , (const, 0x35b, 4)]
[(ram, 0x4c8728, 8) INDIRECT (ram, 0x4c8728, 8) , (const, 0x35b, 4)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x35b, 4)]
[(ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x35b, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x35b, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x35b, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x35b, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x35b, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x35b, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x35b, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x35b, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x35b, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x35b, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x35b, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x35b, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x35b, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x35b, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x35b, 4)]
[ ---  CALL (ram, 0x11f8a8, 8) , (unique, 0xbd80, 8)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x35e, 4), (ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(ram, 0x4c2f10, 8) INDIRECT (ram, 0x4c2f10, 8) , (const, 0x35e, 4), (ram, 0x4c2f10, 8) MULTIEQUAL (ram, 0x4c2f10, 8) , (ram, 0x4c2f10, 8)]
[(ram, 0x4c44d0, 8) INDIRECT (ram, 0x4c44d0, 8) , (const, 0x35e, 4), (ram, 0x4c44d0, 8) MULTIEQUAL (ram, 0x4c44d0, 8) , (ram, 0x4c44d0, 8)]
[(ram, 0x4c8728, 8) INDIRECT (ram, 0x4c8728, 8) , (const, 0x35e, 4), (ram, 0x4c8728, 8) MULTIEQUAL (ram, 0x4c8728, 8) , (ram, 0x4c8728, 8)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x35e, 4), (ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x35e, 4), (ram, 0x4c8790, 4) MULTIEQUAL (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3200, 8) , (unique, 0xbd80, 8), (unique, 0x3200, 8) PTRADD (register, 0xb0, 8) , (const, 0x10, 8) , (const, 0x8, 8)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(ram, 0x4c8790, 4) MULTIEQUAL (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4)]
[(ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c8728, 8) MULTIEQUAL (ram, 0x4c8728, 8) , (ram, 0x4c8728, 8)]
[(ram, 0x4c44d0, 8) MULTIEQUAL (ram, 0x4c44d0, 8) , (ram, 0x4c44d0, 8)]
[(ram, 0x4c2f10, 8) MULTIEQUAL (ram, 0x4c2f10, 8) , (ram, 0x4c2f10, 8)]
[(ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x12b370, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x28, 4) , (const, 0xd, 4)]
[(unique, 0x10000866, 8) COPY (ram, 0x4c44d0, 8)]
[ ---  CBRANCH (ram, 0x12b3f2, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (ram, 0x4c44d0, 8)]
[(unique, 0x1000086e, 8) COPY (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x12b3e6, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4c44d0, 8) , (unique, 0x1000055d, 8), (unique, 0x1000055d, 8) COPY (const, 0x28e177, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x386, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x386, 4)]
[(ram, 0x4c2f10, 8) INDIRECT (ram, 0x4c2f10, 8) , (const, 0x386, 4)]
[(ram, 0x4c44d0, 8) INDIRECT (ram, 0x4c44d0, 8) , (const, 0x386, 4)]
[(ram, 0x4c8728, 8) INDIRECT (ram, 0x4c8728, 8) , (const, 0x386, 4)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x386, 4)]
[(ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x386, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x386, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x386, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x386, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x386, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x386, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x386, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x386, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x386, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x386, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x386, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x386, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x386, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x386, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x386, 4)]
[ ---  CALL (ram, 0x11f8a8, 8) , (ram, 0x4c44d0, 8)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x392, 4), (ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(ram, 0x4c2f10, 8) INDIRECT (ram, 0x4c2f10, 8) , (const, 0x392, 4), (ram, 0x4c2f10, 8) MULTIEQUAL (ram, 0x4c2f10, 8) , (ram, 0x4c2f10, 8) , (ram, 0x4c2f10, 8)]
[(ram, 0x4c44d0, 8) INDIRECT (ram, 0x4c44d0, 8) , (const, 0x392, 4), (ram, 0x4c44d0, 8) COPY (unique, 0x1000087e, 8), (unique, 0x1000087e, 8) MULTIEQUAL (unique, 0x10000866, 8) , (unique, 0x1000086e, 8) , (unique, 0x1000086e, 8)]
[(ram, 0x4c8728, 8) INDIRECT (ram, 0x4c8728, 8) , (const, 0x392, 4), (ram, 0x4c8728, 8) MULTIEQUAL (ram, 0x4c8728, 8) , (ram, 0x4c8728, 8) , (ram, 0x4c8728, 8)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x392, 4), (ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x392, 4), (ram, 0x4c8790, 4) MULTIEQUAL (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100009ca, 8) , (unique, 0xbd00, 4), (unique, 0x100009ca, 8) CAST (ram, 0x4c2f10, 8), (unique, 0xbd00, 4) INT_ADD (unique, 0xbd00, 4) , (const, 0x1, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100009c2, 8), (unique, 0x100009c2, 8) CAST (ram, 0x4c2f10, 8), (ram, 0x4c2f10, 8) MULTIEQUAL (ram, 0x4c2f10, 8) , (ram, 0x4c2f10, 8) , (ram, 0x4c2f10, 8)]
[ ---  BRANCH (ram, 0x12b290, 1)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(ram, 0x4c8790, 4) MULTIEQUAL (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4)]
[(ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c8728, 8) MULTIEQUAL (ram, 0x4c8728, 8) , (ram, 0x4c8728, 8)]
[(ram, 0x4c44d0, 8) MULTIEQUAL (ram, 0x4c44d0, 8) , (ram, 0x4c44d0, 8)]
[(ram, 0x4c2f10, 8) MULTIEQUAL (ram, 0x4c2f10, 8) , (ram, 0x4c2f10, 8)]
[(ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb8, 8) INT_ADD (register, 0xb8, 8) , (const, 0x1, 8)]
[(register, 0x28, 4) INT_ADD (register, 0x28, 4) , (const, 0x1, 4)]
[(register, 0xb0, 8) PTRADD (register, 0xb0, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(ram, 0x4c8790, 4) MULTIEQUAL (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4)]
[(ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c8728, 8) MULTIEQUAL (ram, 0x4c8728, 8) , (ram, 0x4c8728, 8)]
[(ram, 0x4c44d0, 8) MULTIEQUAL (ram, 0x4c44d0, 8) , (ram, 0x4c44d0, 8)]
[(ram, 0x4c2f10, 8) MULTIEQUAL (ram, 0x4c2f10, 8) , (ram, 0x4c2f10, 8)]
[(ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x10000862, 4) COPY (stack, 0xfffffffffffffecc, 4), (stack, 0xfffffffffffffecc, 4) MULTIEQUAL (stack, 0xfffffffffffffecc, 4) , (stack, 0xfffffffffffffecc, 4)]
[ ---  CBRANCH (ram, 0x12b280, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xfffffffffffffecc, 4) , (const, 0xd, 4), (stack, 0xfffffffffffffecc, 4) MULTIEQUAL (stack, 0xfffffffffffffecc, 4) , (stack, 0xfffffffffffffecc, 4)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(ram, 0x4c8790, 4) MULTIEQUAL (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4)]
[(ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c8728, 8) MULTIEQUAL (ram, 0x4c8728, 8) , (ram, 0x4c8728, 8) , (ram, 0x4c8728, 8)]
[(ram, 0x4c44d0, 8) MULTIEQUAL (ram, 0x4c44d0, 8) , (ram, 0x4c44d0, 8) , (ram, 0x4c44d0, 8)]
[(ram, 0x4c2f10, 8) MULTIEQUAL (ram, 0x4c2f10, 8) , (ram, 0x4c2f10, 8) , (ram, 0x4c2f10, 8)]
[(ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x10000490, 4) INT_ADD (unique, 0x10000494, 4) , (const, 0x1, 4), (unique, 0x10000494, 4) MULTIEQUAL (unique, 0x1000085a, 4) , (unique, 0x1000085e, 4) , (unique, 0x10000862, 4)]
[ ---  CBRANCH (ram, 0x12b250, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x1000048c, 4) , (const, 0x6, 4), (unique, 0x1000048c, 4) MULTIEQUAL (unique, 0x10000852, 4) , (unique, 0x10000922, 4) , (stack, 0xfffffffffffffecc, 4)]
[ ---  CBRANCH (ram, 0x12b27a, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (unique, 0x1000058d, 8), (unique, 0x1000058d, 8) COPY (const, 0x28e177, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) PTRADD (unique, 0x1000077d, 8) , (register, 0x0, 8) , (const, 0x8, 8), (unique, 0x1000077d, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffee8, 8), (register, 0x0, 8) INT_SEXT (unique, 0x1000048c, 4)]
[ ---  CBRANCH (ram, 0x12b27a, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3e80, 8), (unique, 0x3e80, 8) PTRADD (unique, 0x100005fd, 8) , (register, 0x0, 8) , (const, 0x8, 8), (unique, 0x100005fd, 8) PTRSUB (const, 0x0, 8) , (const, 0x4c44a0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x295, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x295, 4)]
[(ram, 0x4c2f10, 8) INDIRECT (ram, 0x4c2f10, 8) , (const, 0x295, 4)]
[(ram, 0x4c44d0, 8) INDIRECT (ram, 0x4c44d0, 8) , (const, 0x295, 4)]
[(ram, 0x4c8728, 8) INDIRECT (ram, 0x4c8728, 8) , (const, 0x295, 4)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x295, 4)]
[(ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x295, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x295, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x295, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x295, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x295, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x295, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x295, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x295, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x295, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x295, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x295, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x295, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x295, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x295, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x295, 4)]
[ ---  CALL (ram, 0x11f8a8, 8) , (unique, 0xbd80, 8)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(ram, 0x4c8790, 4) MULTIEQUAL (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4)]
[(ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c8728, 8) MULTIEQUAL (ram, 0x4c8728, 8) , (ram, 0x4c8728, 8) , (ram, 0x4c8728, 8)]
[(ram, 0x4c44d0, 8) MULTIEQUAL (ram, 0x4c44d0, 8) , (ram, 0x4c44d0, 8) , (ram, 0x4c44d0, 8)]
[(ram, 0x4c2f10, 8) MULTIEQUAL (ram, 0x4c2f10, 8) , (ram, 0x4c2f10, 8) , (ram, 0x4c2f10, 8)]
[(ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x12b250, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x10000490, 4) , (const, 0xd, 4)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(ram, 0x4c8790, 4) MULTIEQUAL (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4)]
[(ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c8728, 8) MULTIEQUAL (ram, 0x4c8728, 8) , (ram, 0x4c8728, 8)]
[(ram, 0x4c44d0, 8) MULTIEQUAL (ram, 0x4c44d0, 8) , (ram, 0x4c44d0, 8)]
[(ram, 0x4c2f10, 8) MULTIEQUAL (ram, 0x4c2f10, 8) , (ram, 0x4c2f10, 8)]
[(ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(stack, 0xfffffffffffffec0, 8) COPY (const, 0x0, 8)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffec0, 8) MULTIEQUAL (stack, 0xfffffffffffffec0, 8) , (register, 0x0, 8)]
[(ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c8728, 8) MULTIEQUAL (ram, 0x4c8728, 8) , (ram, 0x4c8728, 8)]
[(ram, 0x4c44d0, 8) MULTIEQUAL (ram, 0x4c44d0, 8) , (ram, 0x4c44d0, 8)]
[(ram, 0x4c2f10, 8) MULTIEQUAL (ram, 0x4c2f10, 8) , (ram, 0x4c2f10, 8)]
[(ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x12b408, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4c8790, 4) , (const, 0x0, 4), (ram, 0x4c8790, 4) MULTIEQUAL (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x2e4, 4)]
[(ram, 0x4c2f10, 8) INDIRECT (ram, 0x4c2f10, 8) , (const, 0x2e4, 4)]
[(ram, 0x4c44d0, 8) INDIRECT (ram, 0x4c44d0, 8) , (const, 0x2e4, 4)]
[(ram, 0x4c8728, 8) INDIRECT (ram, 0x4c8728, 8) , (const, 0x2e4, 4)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x2e4, 4)]
[(ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x2e4, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x2e4, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x2e4, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x2e4, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x2e4, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x2e4, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x2e4, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x2e4, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x2e4, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x2e4, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x2e4, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x2e4, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x2e4, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x2e4, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x2e4, 4)]
[ ---  CALLIND (register, 0x0, 8) , (unique, 0x10000625, 8), (unique, 0x10000625, 8) PTRSUB (const, 0x0, 8) , (const, 0x4c4920, 8), (register, 0x0, 8) CAST (unique, 0x100009da, 8), (unique, 0x100009da, 8) INT_XOR (register, 0x0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x100009d2, 8), (unique, 0x100009d2, 8) INT_ADD (register, 0x110, 8) , (const, 0x30, 8), (register, 0x0, 8) INT_OR (unique, 0x4ff00, 8) , (unique, 0x50000, 8), (unique, 0x50000, 8) INT_LEFT (ram, 0x4c8730, 8) , (const, 0x2f, 4), (unique, 0x4ff00, 8) INT_RIGHT (ram, 0x4c8730, 8) , (const, 0x11, 4)]
[ ---  BRANCH (ram, 0x12b29e, 1)]
[ ---  CALL (ram, 0x11f8a8, 8) , (stack, 0xfffffffffffffed8, 8), (stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x2bc, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x2b6, 4), (stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x2bc, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x2b6, 4), (stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x2bc, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x2b6, 4), (stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x2bc, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x2b6, 4), (stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x2bc, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x2b6, 4), (stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x2bc, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x2b6, 4), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x2bc, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x2b6, 4), (stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x2bc, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x2b6, 4), (stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x2bc, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x2b6, 4), (stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x2bc, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x2b6, 4), (stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x2bc, 4), (stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x2b6, 4), (stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x2bc, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x2b6, 4), (stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x2bc, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x2b6, 4), (stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x2bc, 4), (stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x2b6, 4), (stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[ ---  CALL (ram, 0x11f8a8, 8) , (stack, 0xfffffffffffffed0, 8)]
[(ram, 0x4c2e78, 8) COPY (ram, 0x4c2e78, 8), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x2bc, 4), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x2b6, 4), (ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(ram, 0x4c2f10, 8) COPY (ram, 0x4c2f10, 8), (ram, 0x4c2f10, 8) INDIRECT (ram, 0x4c2f10, 8) , (const, 0x2bc, 4), (ram, 0x4c2f10, 8) INDIRECT (ram, 0x4c2f10, 8) , (const, 0x2b6, 4), (ram, 0x4c2f10, 8) MULTIEQUAL (ram, 0x4c2f10, 8) , (ram, 0x4c2f10, 8)]
[(ram, 0x4c44d0, 8) COPY (ram, 0x4c44d0, 8), (ram, 0x4c44d0, 8) INDIRECT (ram, 0x4c44d0, 8) , (const, 0x2bc, 4), (ram, 0x4c44d0, 8) INDIRECT (ram, 0x4c44d0, 8) , (const, 0x2b6, 4), (ram, 0x4c44d0, 8) MULTIEQUAL (ram, 0x4c44d0, 8) , (ram, 0x4c44d0, 8)]
[(ram, 0x4c8728, 8) COPY (ram, 0x4c8728, 8), (ram, 0x4c8728, 8) INDIRECT (ram, 0x4c8728, 8) , (const, 0x2bc, 4), (ram, 0x4c8728, 8) INDIRECT (ram, 0x4c8728, 8) , (const, 0x2b6, 4), (ram, 0x4c8728, 8) MULTIEQUAL (ram, 0x4c8728, 8) , (ram, 0x4c8728, 8)]
[(ram, 0x4c8730, 8) COPY (ram, 0x4c8730, 8), (ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x2bc, 4), (ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x2b6, 4), (ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c8790, 4) COPY (ram, 0x4c8790, 4), (ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x2bc, 4), (ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x2b6, 4), (ram, 0x4c8790, 4) MULTIEQUAL (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) COPY (stack, 0xfffffffffffffec0, 8)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(ram, 0x4c8790, 4) MULTIEQUAL (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4)]
[(ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c8728, 8) MULTIEQUAL (ram, 0x4c8728, 8) , (ram, 0x4c8728, 8)]
[(ram, 0x4c44d0, 8) MULTIEQUAL (ram, 0x4c44d0, 8) , (ram, 0x4c44d0, 8)]
[(ram, 0x4c2f10, 8) MULTIEQUAL (ram, 0x4c2f10, 8) , (ram, 0x4c2f10, 8)]
[(ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x10000852, 4) COPY (register, 0x18, 4), (register, 0x18, 4) INT_ADD (unique, 0x1000048c, 4) , (const, 0x1, 4)]
[(unique, 0x1000085a, 4) COPY (unique, 0x10000490, 4)]
[(unique, 0x1000084a, 4) COPY (unique, 0x3100, 4)]
[ ---  CBRANCH (ram, 0x12b4bb, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x3100, 4) , (const, 0x6, 4)]
[(unique, 0x10000846, 4) COPY (register, 0x0, 4), (register, 0x0, 4) COPY (const, 0x5, 4)]
[(unique, 0x100008aa, 4) COPY (stack, 0xfffffffffffffecc, 4), (stack, 0xfffffffffffffecc, 4) COPY (const, 0x6, 4)]
[ ---  BRANCH (ram, 0x12b1a0, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x543, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x543, 4)]
[(ram, 0x4c2f10, 8) INDIRECT (ram, 0x4c2f10, 8) , (const, 0x543, 4)]
[(ram, 0x4c44d0, 8) INDIRECT (ram, 0x4c44d0, 8) , (const, 0x543, 4)]
[(ram, 0x4c8728, 8) INDIRECT (ram, 0x4c8728, 8) , (const, 0x543, 4)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x543, 4)]
[(ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x543, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x543, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x543, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (unique, 0x1000091a, 8) , (const, 0x543, 4), (unique, 0x1000091a, 8) COPY (register, 0x30, 8)]
[ ---  CBRANCH (ram, 0x12b2d4, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x100009e2, 8), (unique, 0x100009e2, 8) CALL (ram, 0x12b560, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffee0, 8) , (register, 0x38, 4) , (unique, 0x3c80, 8), (unique, 0x3c80, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff58, 8)]
[ ---  CBRANCH (ram, 0x12afcd, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd00, 4) , (const, 0xffffffff, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100009ea, 8), (unique, 0x100009ea, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x30, 8) , (const, 0x1, 8)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x55f, 4)]
[(ram, 0x4c2f10, 8) INDIRECT (ram, 0x4c2f10, 8) , (const, 0x55f, 4)]
[(ram, 0x4c44d0, 8) INDIRECT (ram, 0x4c44d0, 8) , (const, 0x55f, 4)]
[(ram, 0x4c8728, 8) INDIRECT (ram, 0x4c8728, 8) , (const, 0x55f, 4)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x55f, 4)]
[(ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x55f, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100009f2, 8) , (const, 0xffffffff, 4), (unique, 0x100009f2, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x30, 8) , (const, 0x1, 8)]
[(ram, 0x4c8790, 4) MULTIEQUAL (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4)]
[(ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c8728, 8) MULTIEQUAL (ram, 0x4c8728, 8) , (ram, 0x4c8728, 8)]
[(ram, 0x4c44d0, 8) MULTIEQUAL (ram, 0x4c44d0, 8) , (ram, 0x4c44d0, 8)]
[(ram, 0x4c2f10, 8) MULTIEQUAL (ram, 0x4c2f10, 8) , (ram, 0x4c2f10, 8)]
[(ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[ ---  CBRANCH (ram, 0x12affc, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffff58, 8) , (unique, 0x1000052d, 8), (unique, 0x1000052d, 8) COPY (const, 0x28e177, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x573, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x573, 4)]
[(ram, 0x4c2f10, 8) INDIRECT (ram, 0x4c2f10, 8) , (const, 0x573, 4)]
[(ram, 0x4c44d0, 8) INDIRECT (ram, 0x4c44d0, 8) , (const, 0x573, 4)]
[(ram, 0x4c8728, 8) INDIRECT (ram, 0x4c8728, 8) , (const, 0x573, 4)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x573, 4)]
[(ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x573, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x573, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x573, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x573, 4)]
[ ---  CBRANCH (ram, 0x12b2d4, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x18aa40, 8) , (stack, 0xffffffffffffff58, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x586, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x586, 4), (ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(ram, 0x4c2f10, 8) INDIRECT (ram, 0x4c2f10, 8) , (const, 0x586, 4), (ram, 0x4c2f10, 8) MULTIEQUAL (ram, 0x4c2f10, 8) , (ram, 0x4c2f10, 8)]
[(ram, 0x4c44d0, 8) INDIRECT (ram, 0x4c44d0, 8) , (const, 0x586, 4), (ram, 0x4c44d0, 8) MULTIEQUAL (ram, 0x4c44d0, 8) , (ram, 0x4c44d0, 8)]
[(ram, 0x4c8728, 8) INDIRECT (ram, 0x4c8728, 8) , (const, 0x586, 4), (ram, 0x4c8728, 8) MULTIEQUAL (ram, 0x4c8728, 8) , (ram, 0x4c8728, 8)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x586, 4), (ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x586, 4), (ram, 0x4c8790, 4) MULTIEQUAL (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x586, 4), (stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x586, 4), (stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x586, 4), (stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x12b2c0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x100009fa, 8), (unique, 0x100009fa, 8) CALL (ram, 0x12a920, 8) , (register, 0x38, 4) , (unique, 0x3c80, 8)]
[ ---  CBRANCH (ram, 0x12b2d4, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffff58, 8) , (unique, 0x1000059d, 8), (unique, 0x1000059d, 8) COPY (const, 0x28e177, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x64d, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x64d, 4)]
[(ram, 0x4c2f10, 8) INDIRECT (ram, 0x4c2f10, 8) , (const, 0x64d, 4)]
[(ram, 0x4c44d0, 8) INDIRECT (ram, 0x4c44d0, 8) , (const, 0x64d, 4)]
[(ram, 0x4c8728, 8) INDIRECT (ram, 0x4c8728, 8) , (const, 0x64d, 4)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x64d, 4)]
[(ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x64d, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x64d, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x64d, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x64d, 4)]
[ ---  CALL (ram, 0x11f8a8, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(ram, 0x4c8790, 4) MULTIEQUAL (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4)]
[(ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c8728, 8) MULTIEQUAL (ram, 0x4c8728, 8) , (ram, 0x4c8728, 8) , (ram, 0x4c8728, 8) , (ram, 0x4c8728, 8)]
[(ram, 0x4c44d0, 8) MULTIEQUAL (ram, 0x4c44d0, 8) , (ram, 0x4c44d0, 8) , (ram, 0x4c44d0, 8) , (ram, 0x4c44d0, 8)]
[(ram, 0x4c2f10, 8) MULTIEQUAL (ram, 0x4c2f10, 8) , (ram, 0x4c2f10, 8) , (ram, 0x4c2f10, 8) , (ram, 0x4c2f10, 8)]
[(ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(stack, 0xffffffffffffff58, 8) COPY (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x12b07b, 1)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x596, 4)]
[(ram, 0x4c2f10, 8) INDIRECT (ram, 0x4c2f10, 8) , (const, 0x596, 4)]
[(ram, 0x4c44d0, 8) INDIRECT (ram, 0x4c44d0, 8) , (const, 0x596, 4)]
[(ram, 0x4c8728, 8) INDIRECT (ram, 0x4c8728, 8) , (const, 0x596, 4)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x596, 4)]
[(ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x596, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3b80, 8) , (register, 0x0, 8), (unique, 0x3b80, 8) PTRADD (unique, 0x100005cd, 8) , (register, 0xb0, 8) , (const, 0x8, 8), (unique, 0x100005cd, 8) PTRSUB (const, 0x0, 8) , (const, 0x4c4420, 8)]
[ ---  CBRANCH (ram, 0x12b029, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x10000a02, 8) , (const, 0x0, 8), (unique, 0x10000a02, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (unique, 0x100005ad, 8) , (register, 0xb0, 8) , (const, 0x8, 8), (unique, 0x100005ad, 8) PTRSUB (const, 0x0, 8) , (const, 0x4c1ae0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x5a7, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x5a7, 4)]
[(ram, 0x4c2f10, 8) INDIRECT (ram, 0x4c2f10, 8) , (const, 0x5a7, 4)]
[(ram, 0x4c44d0, 8) INDIRECT (ram, 0x4c44d0, 8) , (const, 0x5a7, 4)]
[(ram, 0x4c8728, 8) INDIRECT (ram, 0x4c8728, 8) , (const, 0x5a7, 4)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x5a7, 4)]
[(ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x5a7, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x5a7, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x5a7, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x5a7, 4)]
[ ---  CALLIND (unique, 0x10000a0a, 8), (unique, 0x10000a0a, 8) CAST (unique, 0xbd80, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(ram, 0x4c8790, 4) MULTIEQUAL (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4)]
[(ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c8728, 8) MULTIEQUAL (ram, 0x4c8728, 8) , (ram, 0x4c8728, 8)]
[(ram, 0x4c44d0, 8) MULTIEQUAL (ram, 0x4c44d0, 8) , (ram, 0x4c44d0, 8)]
[(ram, 0x4c2f10, 8) MULTIEQUAL (ram, 0x4c2f10, 8) , (ram, 0x4c2f10, 8)]
[(ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x1000082a, 8) COPY (stack, 0xffffffffffffff58, 8), (stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[ ---  CBRANCH (ram, 0x12b052, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffff58, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3e80, 8), (unique, 0x3e80, 8) PTRADD (unique, 0x100005dd, 8) , (register, 0xb0, 8) , (const, 0x8, 8), (unique, 0x100005dd, 8) PTRSUB (const, 0x0, 8) , (const, 0x4c44a0, 8), (stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[ ---  CBRANCH (ram, 0x12b04a, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (unique, 0x1000056d, 8), (unique, 0x1000056d, 8) COPY (const, 0x28e177, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x5ca, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x5ca, 4)]
[(ram, 0x4c2f10, 8) INDIRECT (ram, 0x4c2f10, 8) , (const, 0x5ca, 4)]
[(ram, 0x4c44d0, 8) INDIRECT (ram, 0x4c44d0, 8) , (const, 0x5ca, 4)]
[(ram, 0x4c8728, 8) INDIRECT (ram, 0x4c8728, 8) , (const, 0x5ca, 4)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x5ca, 4)]
[(ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x5ca, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x5ca, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x5ca, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x5ca, 4)]
[ ---  CALL (ram, 0x11f8a8, 8) , (unique, 0xbd80, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x5cf, 4), (ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(ram, 0x4c2f10, 8) INDIRECT (ram, 0x4c2f10, 8) , (const, 0x5cf, 4), (ram, 0x4c2f10, 8) MULTIEQUAL (ram, 0x4c2f10, 8) , (ram, 0x4c2f10, 8)]
[(ram, 0x4c44d0, 8) INDIRECT (ram, 0x4c44d0, 8) , (const, 0x5cf, 4), (ram, 0x4c44d0, 8) MULTIEQUAL (ram, 0x4c44d0, 8) , (ram, 0x4c44d0, 8)]
[(ram, 0x4c8728, 8) INDIRECT (ram, 0x4c8728, 8) , (const, 0x5cf, 4), (ram, 0x4c8728, 8) MULTIEQUAL (ram, 0x4c8728, 8) , (ram, 0x4c8728, 8)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x5cf, 4), (ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x5cf, 4), (ram, 0x4c8790, 4) MULTIEQUAL (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3e80, 8) , (unique, 0x1000082a, 8), (unique, 0x3e80, 8) PTRADD (unique, 0x100005e5, 8) , (register, 0xb0, 8) , (const, 0x8, 8), (unique, 0x100005e5, 8) PTRSUB (const, 0x0, 8) , (const, 0x4c44a0, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(ram, 0x4c8790, 4) MULTIEQUAL (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4)]
[(ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c8728, 8) MULTIEQUAL (ram, 0x4c8728, 8) , (ram, 0x4c8728, 8)]
[(ram, 0x4c2f10, 8) MULTIEQUAL (ram, 0x4c2f10, 8) , (ram, 0x4c2f10, 8)]
[(ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x10000886, 8) COPY (ram, 0x4c44d0, 8), (ram, 0x4c44d0, 8) MULTIEQUAL (ram, 0x4c44d0, 8) , (ram, 0x4c44d0, 8)]
[ ---  CBRANCH (ram, 0x12b071, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (ram, 0x4c44d0, 8), (ram, 0x4c44d0, 8) MULTIEQUAL (ram, 0x4c44d0, 8) , (ram, 0x4c44d0, 8)]
[(unique, 0x1000088e, 8) COPY (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x12b06a, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4c44d0, 8) , (unique, 0x1000057d, 8), (unique, 0x1000057d, 8) COPY (const, 0x28e177, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x5eb, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x5eb, 4)]
[(ram, 0x4c2f10, 8) INDIRECT (ram, 0x4c2f10, 8) , (const, 0x5eb, 4)]
[(ram, 0x4c44d0, 8) INDIRECT (ram, 0x4c44d0, 8) , (const, 0x5eb, 4)]
[(ram, 0x4c8728, 8) INDIRECT (ram, 0x4c8728, 8) , (const, 0x5eb, 4)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x5eb, 4)]
[(ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x5eb, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x5eb, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x5eb, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x5eb, 4)]
[ ---  CALL (ram, 0x11f8a8, 8) , (ram, 0x4c44d0, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x5f4, 4), (ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(ram, 0x4c2f10, 8) INDIRECT (ram, 0x4c2f10, 8) , (const, 0x5f4, 4), (ram, 0x4c2f10, 8) MULTIEQUAL (ram, 0x4c2f10, 8) , (ram, 0x4c2f10, 8) , (ram, 0x4c2f10, 8)]
[(ram, 0x4c44d0, 8) INDIRECT (ram, 0x4c44d0, 8) , (const, 0x5f4, 4), (ram, 0x4c44d0, 8) COPY (unique, 0x1000089e, 8), (unique, 0x1000089e, 8) MULTIEQUAL (unique, 0x10000886, 8) , (unique, 0x1000088e, 8) , (unique, 0x1000088e, 8)]
[(ram, 0x4c8728, 8) INDIRECT (ram, 0x4c8728, 8) , (const, 0x5f4, 4), (ram, 0x4c8728, 8) MULTIEQUAL (ram, 0x4c8728, 8) , (ram, 0x4c8728, 8) , (ram, 0x4c8728, 8)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x5f4, 4), (ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x5f4, 4), (ram, 0x4c8790, 4) MULTIEQUAL (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000a1a, 8) , (unique, 0xbd00, 4), (unique, 0x10000a1a, 8) CAST (ram, 0x4c2f10, 8), (unique, 0xbd00, 4) INT_ADD (unique, 0xbd00, 4) , (const, 0x1, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000a12, 8), (unique, 0x10000a12, 8) CAST (ram, 0x4c2f10, 8), (ram, 0x4c2f10, 8) MULTIEQUAL (ram, 0x4c2f10, 8) , (ram, 0x4c2f10, 8) , (ram, 0x4c2f10, 8)]
[(stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c8728, 8) MULTIEQUAL (ram, 0x4c8728, 8) , (ram, 0x4c8728, 8)]
[(ram, 0x4c44d0, 8) MULTIEQUAL (ram, 0x4c44d0, 8) , (ram, 0x4c44d0, 8)]
[(ram, 0x4c2f10, 8) MULTIEQUAL (ram, 0x4c2f10, 8) , (ram, 0x4c2f10, 8)]
[(ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x12b2e8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4c8790, 4) , (const, 0x0, 4), (ram, 0x4c8790, 4) MULTIEQUAL (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x638, 4)]
[(ram, 0x4c2f10, 8) INDIRECT (ram, 0x4c2f10, 8) , (const, 0x638, 4)]
[(ram, 0x4c44d0, 8) INDIRECT (ram, 0x4c44d0, 8) , (const, 0x638, 4)]
[(ram, 0x4c8728, 8) INDIRECT (ram, 0x4c8728, 8) , (const, 0x638, 4)]
[(ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x638, 4)]
[(ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x638, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x638, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x638, 4)]
[(stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x638, 4)]
[ ---  CALLIND (register, 0x0, 8) , (unique, 0x1000061d, 8), (unique, 0x1000061d, 8) PTRSUB (const, 0x0, 8) , (const, 0x4c4920, 8), (register, 0x0, 8) CAST (unique, 0x10000a2a, 8), (unique, 0x10000a2a, 8) INT_XOR (register, 0x0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10000a22, 8), (unique, 0x10000a22, 8) INT_ADD (register, 0x110, 8) , (const, 0x30, 8), (register, 0x0, 8) INT_OR (unique, 0x4ff00, 8) , (unique, 0x50000, 8), (unique, 0x50000, 8) INT_LEFT (ram, 0x4c8730, 8) , (const, 0x2f, 4), (unique, 0x4ff00, 8) INT_RIGHT (ram, 0x4c8730, 8) , (const, 0x11, 4)]
[ ---  BRANCH (ram, 0x12b089, 1)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x610, 4), (stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x610, 4), (stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[ ---  CALL (ram, 0x11f8a8, 8) , (stack, 0xfffffffffffffed8, 8), (stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(ram, 0x4c2e78, 8) COPY (ram, 0x4c2e78, 8), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x610, 4), (ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(ram, 0x4c2f10, 8) COPY (ram, 0x4c2f10, 8), (ram, 0x4c2f10, 8) INDIRECT (ram, 0x4c2f10, 8) , (const, 0x610, 4), (ram, 0x4c2f10, 8) MULTIEQUAL (ram, 0x4c2f10, 8) , (ram, 0x4c2f10, 8)]
[(ram, 0x4c44d0, 8) COPY (ram, 0x4c44d0, 8), (ram, 0x4c44d0, 8) INDIRECT (ram, 0x4c44d0, 8) , (const, 0x610, 4), (ram, 0x4c44d0, 8) MULTIEQUAL (ram, 0x4c44d0, 8) , (ram, 0x4c44d0, 8)]
[(ram, 0x4c8728, 8) COPY (ram, 0x4c8728, 8), (ram, 0x4c8728, 8) INDIRECT (ram, 0x4c8728, 8) , (const, 0x610, 4), (ram, 0x4c8728, 8) MULTIEQUAL (ram, 0x4c8728, 8) , (ram, 0x4c8728, 8)]
[(ram, 0x4c8730, 8) COPY (ram, 0x4c8730, 8), (ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x610, 4), (ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c8790, 4) COPY (ram, 0x4c8790, 4), (ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x610, 4), (ram, 0x4c8790, 4) MULTIEQUAL (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) COPY (stack, 0xffffffffffffff58, 8), (stack, 0xffffffffffffff58, 8) INDIRECT (stack, 0xffffffffffffff58, 8) , (const, 0x610, 4), (stack, 0xffffffffffffff58, 8) MULTIEQUAL (stack, 0xffffffffffffff58, 8) , (stack, 0xffffffffffffff58, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000a32, 8) , (const, 0x16, 4), (unique, 0x10000a32, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (ram, 0x4c2e78, 8) , (register, 0x110, 8) , (const, 0x1, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8), (ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(ram, 0x4c2e78, 8) COPY (ram, 0x4c2e78, 8), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x15d, 4), (ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(ram, 0x4c2f10, 8) COPY (ram, 0x4c2f10, 8), (ram, 0x4c2f10, 8) INDIRECT (ram, 0x4c2f10, 8) , (const, 0x15d, 4), (ram, 0x4c2f10, 8) MULTIEQUAL (ram, 0x4c2f10, 8) , (ram, 0x4c2f10, 8)]
[(ram, 0x4c44d0, 8) COPY (ram, 0x4c44d0, 8), (ram, 0x4c44d0, 8) INDIRECT (ram, 0x4c44d0, 8) , (const, 0x15d, 4), (ram, 0x4c44d0, 8) MULTIEQUAL (ram, 0x4c44d0, 8) , (ram, 0x4c44d0, 8)]
[(ram, 0x4c8728, 8) COPY (ram, 0x4c8728, 8), (ram, 0x4c8728, 8) INDIRECT (ram, 0x4c8728, 8) , (const, 0x15d, 4), (ram, 0x4c8728, 8) MULTIEQUAL (ram, 0x4c8728, 8) , (ram, 0x4c8728, 8)]
[(ram, 0x4c8730, 8) COPY (ram, 0x4c8730, 8), (ram, 0x4c8730, 8) INDIRECT (ram, 0x4c8730, 8) , (const, 0x15d, 4), (ram, 0x4c8730, 8) MULTIEQUAL (ram, 0x4c8730, 8) , (ram, 0x4c8730, 8)]
[(ram, 0x4c8790, 4) COPY (ram, 0x4c8790, 4), (ram, 0x4c8790, 4) INDIRECT (ram, 0x4c8790, 4) , (const, 0x15d, 4), (ram, 0x4c8790, 4) MULTIEQUAL (ram, 0x4c8790, 4) , (ram, 0x4c8790, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) COPY (const, 0x0, 8)]
