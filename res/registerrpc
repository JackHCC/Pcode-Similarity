[ ---  CBRANCH (ram, 0x22dde0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x10, 8) , (const, 0x0, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x165, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x14b, 4)]
[(register, 0x0, 4) CALL (ram, 0x155980, 8) , (unique, 0x3800, 8) , (register, 0x0, 8) , (const, 0x0, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffc0, 8), (register, 0x0, 8) CAST (unique, 0x100001b3, 8), (unique, 0x100001b3, 8) CALL (ram, 0x12e620, 8) , (unique, 0x1000015a, 8) , (unique, 0x10000172, 8) , (const, 0x5, 8), (unique, 0x10000172, 8) COPY (const, 0x2928b8, 8), (unique, 0x1000015a, 8) PTRSUB (const, 0x0, 8) , (const, 0x28c400, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2f, 4)]
[ ---  CBRANCH (ram, 0x22de28, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbe00, 8) , (const, 0x0, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x100001bb, 8), (unique, 0x100001bb, 8) INT_ADD (register, 0x0, 8) , (const, 0x100, 8), (register, 0x0, 8) CALL (ram, 0x237a60, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x135, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3c80, 8) , (register, 0x0, 8), (unique, 0x3c80, 8) CAST (unique, 0x100001c3, 8), (unique, 0x100001c3, 8) INT_ADD (register, 0x0, 8) , (const, 0x100, 8), (register, 0x0, 8) CALL (ram, 0x239750, 8) , (const, 0xffffffff, 4)]
[(register, 0x30, 8) COPY (const, 0x2928e0, 8)]
[ ---  CBRANCH (ram, 0x22dce1, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x239750, 8) , (const, 0xffffffff, 4)]
[ ---  CALL (ram, 0x22c0c0, 8) , (register, 0x38, 8) , (register, 0x30, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x4d, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x43, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CBRANCH (ram, 0x22dd88, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x237dd0, 8) , (unique, 0xbd80, 8) , (register, 0x38, 8) , (register, 0x30, 8) , (unique, 0x10000142, 8) , (const, 0x11, 8), (unique, 0x10000142, 8) PTRSUB (const, 0x0, 8) , (const, 0x22dad0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3c80, 8), (unique, 0x3c80, 8) CAST (unique, 0x100001cb, 8), (unique, 0x100001cb, 8) INT_ADD (register, 0x0, 8) , (const, 0x100, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x70, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x5e, 4)]
[(register, 0x0, 4) CALL (ram, 0x155980, 8) , (unique, 0x3800, 8) , (register, 0x0, 8) , (register, 0x38, 8) , (register, 0x30, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffc0, 8), (register, 0x0, 8) CAST (unique, 0x100001d3, 8), (unique, 0x100001d3, 8) CALL (ram, 0x12e620, 8) , (unique, 0x10000152, 8) , (unique, 0x1000017a, 8) , (const, 0x5, 8), (unique, 0x1000017a, 8) COPY (const, 0x292900, 8), (unique, 0x10000152, 8) PTRSUB (const, 0x0, 8) , (const, 0x28c400, 8)]
[(unique, 0x1000013a, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CBRANCH (ram, 0x22dd45, 1) , (unique, 0x10000139, 1), (unique, 0x10000139, 1) INT_SLESS (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) MULTIEQUAL (register, 0x0, 4) , (register, 0x0, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) COPY (const, 0xffffffff, 8)]
[ ---  CBRANCH (ram, 0x22de78, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x100001db, 8), (unique, 0x100001db, 8) CALL (ram, 0x11f8a0, 8) , (const, 0x28, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x0, 8) , (register, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100001eb, 8) , (register, 0x18, 4), (unique, 0x100001eb, 8) CAST (unique, 0x3100, 8), (register, 0x18, 4) SUBPIECE (register, 0x38, 8) , (const, 0x0, 4), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (register, 0x28, 4), (register, 0x28, 4) SUBPIECE (register, 0x10, 8) , (const, 0x0, 4), (unique, 0x3100, 8) CAST (unique, 0x100001fb, 8), (unique, 0x100001fb, 8) INT_ADD (unique, 0x100001f3, 8) , (const, 0xc, 8), (unique, 0x100001f3, 8) CAST (register, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (register, 0x80, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (register, 0x88, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x3, 8) , (const, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0xbd80, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x4, 8) , (const, 0x8, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3c80, 8), (unique, 0x3c80, 8) CAST (unique, 0x100001e3, 8), (unique, 0x100001e3, 8) INT_ADD (register, 0x0, 8) , (const, 0xf8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3c80, 8) , (register, 0x0, 8), (unique, 0x3c80, 8) CAST (unique, 0x10000203, 8), (unique, 0x10000203, 8) INT_ADD (register, 0x0, 8) , (const, 0xf8, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) COPY (const, 0x0, 8)]
[(register, 0x30, 8) COPY (const, 0x28f3f7, 8)]
[ ---  BRANCH (ram, 0x22de50, 1)]
[(register, 0x0, 8) CALL (ram, 0x18aa40, 8) , (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x1000020b, 8), (unique, 0x1000020b, 8) CALL (ram, 0x12e620, 8) , (unique, 0x1000014a, 8) , (register, 0x30, 8) , (const, 0x5, 8), (unique, 0x1000014a, 8) PTRSUB (const, 0x0, 8) , (const, 0x28c400, 8), (register, 0x30, 8) MULTIEQUAL (register, 0x30, 8) , (register, 0x30, 8)]
[ ---  BRANCH (ram, 0x22dd4a, 1)]
[ ---  CBRANCH (ram, 0x22de11, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffffc0, 8) , (const, 0x0, 8), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (register, 0x0, 8) , (unique, 0x1000013a, 8)]
[ ---  CALL (ram, 0x16cfd0, 8) , (const, 0x0, 8) , (unique, 0x1000016a, 8), (unique, 0x1000016a, 8) COPY (const, 0x28eaa9, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xa5, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x9f, 4)]
[ ---  CALL (ram, 0x11f8a8, 8) , (stack, 0xffffffffffffffc0, 8), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x9f, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) COPY (const, 0xffffffff, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) COPY (const, 0xffffffff, 8)]
