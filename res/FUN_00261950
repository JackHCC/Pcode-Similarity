[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff08, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x40, 4)]
[(ram, 0x2bc3b0, 4) INDIRECT (ram, 0x2bc3b0, 4) , (const, 0x40, 4)]
[(ram, 0x2bc3b4, 4) INDIRECT (ram, 0x2bc3b4, 4) , (const, 0x40, 4)]
[(ram, 0x2bc3b8, 4) INDIRECT (ram, 0x2bc3b8, 4) , (const, 0x40, 4)]
[(ram, 0x2bc3bc, 4) INDIRECT (ram, 0x2bc3bc, 4) , (const, 0x40, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x40, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x40, 4), (stack, 0xffffffffffffff00, 8) COPY (const, 0x261991, 8)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (unique, 0x100003d4, 8) , (const, 0x40, 4), (unique, 0x100003d4, 8) COPY (register, 0x30, 8)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x40, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x40, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x40, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x40, 4)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x40, 4)]
[(stack, 0xffffffffffffff44, 2) INDIRECT (stack, 0xffffffffffffff44, 2) , (const, 0x40, 4)]
[(stack, 0xffffffffffffff48, 2) INDIRECT (stack, 0xffffffffffffff48, 2) , (const, 0x40, 4)]
[(stack, 0xffffffffffffff4a, 4) INDIRECT (stack, 0xffffffffffffff4a, 4) , (const, 0x40, 4)]
[(stack, 0xffffffffffffff4e, 4) INDIRECT (stack, 0xffffffffffffff4e, 4) , (const, 0x40, 4)]
[(stack, 0xffffffffffffff52, 4) INDIRECT (stack, 0xffffffffffffff52, 4) , (const, 0x40, 4)]
[(stack, 0xffffffffffffff56, 4) INDIRECT (stack, 0xffffffffffffff56, 4) , (const, 0x40, 4)]
[(stack, 0xffffffffffffff5a, 4) INDIRECT (stack, 0xffffffffffffff5a, 4) , (const, 0x40, 4)]
[(stack, 0xffffffffffffff5e, 1) INDIRECT (stack, 0xffffffffffffff5e, 1) , (const, 0x40, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x40, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x100003e0, 8), (unique, 0x100003e0, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8)]
[ ---  CBRANCH (ram, 0x261b88, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x222ec0, 8) , (const, 0x1, 4) , (const, 0x80801, 4) , (const, 0x0, 4)]
[(register, 0xa0, 4) COPY (const, 0xffffffff, 4)]
[ ---  BRANCH (ram, 0x261a61, 1)]
[(register, 0x20, 8) PTRADD (unique, 0x1000021c, 8) , (unique, 0x10000098, 8) , (const, 0x1, 8), (unique, 0x1000021c, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff08, 8), (unique, 0x10000098, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (unique, 0x3100, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3100, 8) INT_ADD (register, 0x10, 8) , (const, 0x2a, 8)]
[(register, 0x20, 8) PTRADD (unique, 0x10000234, 8) , (unique, 0x10000098, 8) , (const, 0x1, 8), (unique, 0x10000234, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff08, 8), (unique, 0x10000098, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (unique, 0x3100, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3100, 8) INT_ADD (register, 0x10, 8) , (const, 0x2a, 8)]
[(register, 0x20, 8) PTRADD (unique, 0x1000024c, 8) , (unique, 0x10000098, 8) , (const, 0x1, 8), (unique, 0x1000024c, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff08, 8), (unique, 0x10000098, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (unique, 0x3100, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3100, 8) INT_ADD (register, 0x10, 8) , (const, 0x2a, 8)]
[(unique, 0x3100, 8) INT_ADD (register, 0x10, 8) , (const, 0xc, 8)]
[(unique, 0x3800, 8) CAST (unique, 0x100003f8, 8), (unique, 0x100003f8, 8) INT_ADD (unique, 0x100003f0, 8) , (unique, 0x10000098, 8), (unique, 0x100003f0, 8) CAST (unique, 0x100002c4, 8), (unique, 0x100002c4, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff10, 8), (unique, 0x10000098, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (unique, 0x3100, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3100, 8) INT_ADD (register, 0x10, 8) , (const, 0x2a, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000400, 8) , (const, 0x2619ee, 8), (unique, 0x10000400, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x100002dc, 8) , (unique, 0x100002d4, 8) , (const, 0x1, 8), (unique, 0x100002dc, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff08, 8), (unique, 0x100002d4, 8) INT_ADD (unique, 0x10000098, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x10000098, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (unique, 0x3100, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3100, 8) INT_ADD (register, 0x10, 8) , (const, 0x2a, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x83, 4)]
[(ram, 0x2bc3b0, 4) INDIRECT (ram, 0x2bc3b0, 4) , (const, 0x83, 4)]
[(ram, 0x2bc3b4, 4) INDIRECT (ram, 0x2bc3b4, 4) , (const, 0x83, 4)]
[(ram, 0x2bc3b8, 4) INDIRECT (ram, 0x2bc3b8, 4) , (const, 0x83, 4)]
[(ram, 0x2bc3bc, 4) INDIRECT (ram, 0x2bc3bc, 4) , (const, 0x83, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x83, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x83, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x82, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x83, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x82, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x83, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x82, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x83, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x82, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x83, 4), (stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x82, 4)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x83, 4), (stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x82, 4)]
[(stack, 0xffffffffffffff44, 2) INDIRECT (stack, 0xffffffffffffff44, 2) , (const, 0x83, 4), (stack, 0xffffffffffffff44, 2) INDIRECT (stack, 0xffffffffffffff44, 2) , (const, 0x82, 4)]
[(stack, 0xffffffffffffff48, 2) INDIRECT (stack, 0xffffffffffffff48, 2) , (const, 0x83, 4), (stack, 0xffffffffffffff48, 2) INDIRECT (stack, 0xffffffffffffff48, 2) , (const, 0x82, 4), (stack, 0xffffffffffffff48, 2) COPY (const, 0x1, 2)]
[(stack, 0xffffffffffffff4a, 4) INDIRECT (stack, 0xffffffffffffff4a, 4) , (const, 0x83, 4), (stack, 0xffffffffffffff4a, 4) INDIRECT (stack, 0xffffffffffffff4a, 4) , (const, 0x82, 4), (stack, 0xffffffffffffff4a, 4) COPY (ram, 0x2bc3b0, 4)]
[(stack, 0xffffffffffffff4e, 4) INDIRECT (stack, 0xffffffffffffff4e, 4) , (const, 0x83, 4), (stack, 0xffffffffffffff4e, 4) INDIRECT (stack, 0xffffffffffffff4e, 4) , (const, 0x82, 4), (stack, 0xffffffffffffff4e, 4) COPY (ram, 0x2bc3b4, 4)]
[(stack, 0xffffffffffffff52, 4) INDIRECT (stack, 0xffffffffffffff52, 4) , (const, 0x83, 4), (stack, 0xffffffffffffff52, 4) INDIRECT (stack, 0xffffffffffffff52, 4) , (const, 0x82, 4), (stack, 0xffffffffffffff52, 4) COPY (ram, 0x2bc3b8, 4)]
[(stack, 0xffffffffffffff56, 4) INDIRECT (stack, 0xffffffffffffff56, 4) , (const, 0x83, 4), (stack, 0xffffffffffffff56, 4) INDIRECT (stack, 0xffffffffffffff56, 4) , (const, 0x82, 4), (stack, 0xffffffffffffff56, 4) COPY (ram, 0x2bc3bc, 4)]
[(stack, 0xffffffffffffff5a, 4) INDIRECT (stack, 0xffffffffffffff5a, 4) , (const, 0x83, 4), (stack, 0xffffffffffffff5a, 4) INDIRECT (stack, 0xffffffffffffff5a, 4) , (const, 0x82, 4), (stack, 0xffffffffffffff5a, 4) COPY (const, 0x74656b63, 4)]
[(stack, 0xffffffffffffff5e, 1) INDIRECT (stack, 0xffffffffffffff5e, 1) , (const, 0x83, 4), (stack, 0xffffffffffffff5e, 1) INDIRECT (stack, 0xffffffffffffff5e, 1) , (const, 0x82, 4), (stack, 0xffffffffffffff5e, 1) COPY (const, 0x0, 1)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x83, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x82, 4)]
[(unique, 0x100003ac, 8) COPY (stack, 0xffffffffffffff10, 8), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x83, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x82, 4)]
[ ---  CBRANCH (ram, 0x261a03, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (const, 0xffffffff, 4) , (register, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x2228a0, 8) , (register, 0x0, 4) , (unique, 0x3200, 8) , (const, 0x6e, 4), (unique, 0x3200, 8) CAST (unique, 0x100003e8, 8), (unique, 0x100003e8, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff48, 8)]
[ ---  CBRANCH (ram, 0x261b70, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd00, 4) , (const, 0x73, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000408, 8), (unique, 0x10000408, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (ram, 0x4eae68, 8) , (register, 0x110, 8) , (const, 0x1, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (register, 0x38, 4), (unique, 0x3100, 8) CAST (unique, 0x10000428, 8), (unique, 0x10000428, 8) INT_ADD (unique, 0x10000420, 8) , (unique, 0x10000304, 8), (unique, 0x10000420, 8) CAST (unique, 0x1000030c, 8), (unique, 0x1000030c, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff10, 8), (unique, 0x10000304, 8) INT_ADD (unique, 0x10000098, 8) , (const, 0x4, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (register, 0xb0, 4), (register, 0xb0, 4) SUBPIECE (register, 0x10, 8) , (const, 0x0, 4), (unique, 0x3100, 8) CAST (unique, 0x10000438, 8), (unique, 0x10000438, 8) INT_ADD (unique, 0x10000430, 8) , (unique, 0x10000098, 8), (unique, 0x10000430, 8) CAST (unique, 0x10000324, 8), (unique, 0x10000324, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff18, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000440, 8) , (const, 0x2, 4), (unique, 0x10000440, 8) CAST (unique, 0x3800, 8)]
[(unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff40, 8)]
[(unique, 0x100000f6, 1) COPY (const, 0x1, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000448, 8) , (const, 0x261a31, 8), (unique, 0x10000448, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x1000033c, 8) , (unique, 0x10000334, 8) , (const, 0x1, 8), (unique, 0x1000033c, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff08, 8), (unique, 0x10000334, 8) INT_ADD (unique, 0x10000098, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xb2, 4)]
[(ram, 0x2bc3b0, 4) INDIRECT (ram, 0x2bc3b0, 4) , (const, 0xb2, 4), (ram, 0x2bc3b0, 4) INDIRECT (ram, 0x2bc3b0, 4) , (const, 0xac, 4), (ram, 0x2bc3b0, 4) INDIRECT (ram, 0x2bc3b0, 4) , (const, 0xa9, 4), (ram, 0x2bc3b0, 4) INDIRECT (ram, 0x2bc3b0, 4) , (const, 0xa6, 4)]
[(ram, 0x2bc3b4, 4) INDIRECT (ram, 0x2bc3b4, 4) , (const, 0xb2, 4), (ram, 0x2bc3b4, 4) INDIRECT (ram, 0x2bc3b4, 4) , (const, 0xac, 4), (ram, 0x2bc3b4, 4) INDIRECT (ram, 0x2bc3b4, 4) , (const, 0xa9, 4), (ram, 0x2bc3b4, 4) INDIRECT (ram, 0x2bc3b4, 4) , (const, 0xa6, 4)]
[(ram, 0x2bc3b8, 4) INDIRECT (ram, 0x2bc3b8, 4) , (const, 0xb2, 4), (ram, 0x2bc3b8, 4) INDIRECT (ram, 0x2bc3b8, 4) , (const, 0xac, 4), (ram, 0x2bc3b8, 4) INDIRECT (ram, 0x2bc3b8, 4) , (const, 0xa9, 4), (ram, 0x2bc3b8, 4) INDIRECT (ram, 0x2bc3b8, 4) , (const, 0xa6, 4)]
[(ram, 0x2bc3bc, 4) INDIRECT (ram, 0x2bc3bc, 4) , (const, 0xb2, 4), (ram, 0x2bc3bc, 4) INDIRECT (ram, 0x2bc3bc, 4) , (const, 0xac, 4), (ram, 0x2bc3bc, 4) INDIRECT (ram, 0x2bc3bc, 4) , (const, 0xa9, 4), (ram, 0x2bc3bc, 4) INDIRECT (ram, 0x2bc3bc, 4) , (const, 0xa6, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xb2, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xac, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xa9, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xa6, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0xb2, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0xb1, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0xb2, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0xb1, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0xb2, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0xb1, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0xb2, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0xb1, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0xb2, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0xb1, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0xb2, 4), (stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0xb1, 4)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0xb2, 4), (stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0xb1, 4)]
[(stack, 0xffffffffffffff44, 2) INDIRECT (stack, 0xffffffffffffff44, 2) , (const, 0xb2, 4), (stack, 0xffffffffffffff44, 2) INDIRECT (stack, 0xffffffffffffff44, 2) , (const, 0xb1, 4)]
[(stack, 0xffffffffffffff48, 2) INDIRECT (stack, 0xffffffffffffff48, 2) , (const, 0xb2, 4), (stack, 0xffffffffffffff48, 2) INDIRECT (stack, 0xffffffffffffff48, 2) , (const, 0xb1, 4)]
[(stack, 0xffffffffffffff4a, 4) INDIRECT (stack, 0xffffffffffffff4a, 4) , (const, 0xb2, 4), (stack, 0xffffffffffffff4a, 4) INDIRECT (stack, 0xffffffffffffff4a, 4) , (const, 0xb1, 4)]
[(stack, 0xffffffffffffff4e, 4) INDIRECT (stack, 0xffffffffffffff4e, 4) , (const, 0xb2, 4), (stack, 0xffffffffffffff4e, 4) INDIRECT (stack, 0xffffffffffffff4e, 4) , (const, 0xb1, 4)]
[(stack, 0xffffffffffffff52, 4) INDIRECT (stack, 0xffffffffffffff52, 4) , (const, 0xb2, 4), (stack, 0xffffffffffffff52, 4) INDIRECT (stack, 0xffffffffffffff52, 4) , (const, 0xb1, 4)]
[(stack, 0xffffffffffffff56, 4) INDIRECT (stack, 0xffffffffffffff56, 4) , (const, 0xb2, 4), (stack, 0xffffffffffffff56, 4) INDIRECT (stack, 0xffffffffffffff56, 4) , (const, 0xb1, 4)]
[(stack, 0xffffffffffffff5a, 4) INDIRECT (stack, 0xffffffffffffff5a, 4) , (const, 0xb2, 4), (stack, 0xffffffffffffff5a, 4) INDIRECT (stack, 0xffffffffffffff5a, 4) , (const, 0xb1, 4)]
[(stack, 0xffffffffffffff5e, 1) INDIRECT (stack, 0xffffffffffffff5e, 1) , (const, 0xb2, 4), (stack, 0xffffffffffffff5e, 1) INDIRECT (stack, 0xffffffffffffff5e, 1) , (const, 0xb1, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xb2, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xb1, 4)]
[ ---  CALL (ram, 0x121160, 8) , (unique, 0x3100, 8) , (unique, 0x100003ac, 8) , (register, 0x10, 8), (unique, 0x3100, 8) CAST (unique, 0x10000418, 8), (unique, 0x10000418, 8) INT_ADD (unique, 0x10000410, 8) , (unique, 0x100002ec, 8), (unique, 0x10000410, 8) CAST (unique, 0x100002f4, 8), (unique, 0x100002f4, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff18, 8), (unique, 0x100002ec, 8) INT_ADD (unique, 0x10000098, 8) , (const, 0x4, 8)]
[(stack, 0xffffffffffffff10, 8) COPY (unique, 0x3200, 8), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff28, 8)]
[(unique, 0x100000ef, 1) MULTIEQUAL (unique, 0x100000f6, 1) , (unique, 0x100000ef, 1) , (unique, 0x100000f2, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000450, 8) , (const, 0x261a52, 8), (unique, 0x10000450, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x10000354, 8) , (unique, 0x1000034c, 8) , (const, 0x1, 8), (unique, 0x10000354, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff08, 8), (unique, 0x1000034c, 8) INT_ADD (unique, 0x10000098, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xbf, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x2bc3b0, 4) INDIRECT (ram, 0x2bc3b0, 4) , (const, 0xbf, 4), (ram, 0x2bc3b0, 4) MULTIEQUAL (ram, 0x2bc3b0, 4) , (ram, 0x2bc3b0, 4) , (ram, 0x2bc3b0, 4)]
[(ram, 0x2bc3b4, 4) INDIRECT (ram, 0x2bc3b4, 4) , (const, 0xbf, 4), (ram, 0x2bc3b4, 4) MULTIEQUAL (ram, 0x2bc3b4, 4) , (ram, 0x2bc3b4, 4) , (ram, 0x2bc3b4, 4)]
[(ram, 0x2bc3b8, 4) INDIRECT (ram, 0x2bc3b8, 4) , (const, 0xbf, 4), (ram, 0x2bc3b8, 4) MULTIEQUAL (ram, 0x2bc3b8, 4) , (ram, 0x2bc3b8, 4) , (ram, 0x2bc3b8, 4)]
[(ram, 0x2bc3bc, 4) INDIRECT (ram, 0x2bc3bc, 4) , (const, 0xbf, 4), (ram, 0x2bc3bc, 4) MULTIEQUAL (ram, 0x2bc3bc, 4) , (ram, 0x2bc3bc, 4) , (ram, 0x2bc3bc, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xbf, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0xbf, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0xbe, 4), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0xbf, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0xbe, 4), (stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0xbf, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0xbe, 4), (stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0xbf, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0xbe, 4), (stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0xbf, 4), (stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0xbe, 4), (stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0xbf, 4), (stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0xbe, 4), (stack, 0xffffffffffffff40, 4) MULTIEQUAL (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4)]
[(stack, 0xffffffffffffff44, 2) INDIRECT (stack, 0xffffffffffffff44, 2) , (const, 0xbf, 4), (stack, 0xffffffffffffff44, 2) INDIRECT (stack, 0xffffffffffffff44, 2) , (const, 0xbe, 4), (stack, 0xffffffffffffff44, 2) MULTIEQUAL (stack, 0xffffffffffffff44, 2) , (stack, 0xffffffffffffff44, 2) , (stack, 0xffffffffffffff44, 2)]
[(stack, 0xffffffffffffff48, 2) INDIRECT (stack, 0xffffffffffffff48, 2) , (const, 0xbf, 4), (stack, 0xffffffffffffff48, 2) INDIRECT (stack, 0xffffffffffffff48, 2) , (const, 0xbe, 4), (stack, 0xffffffffffffff48, 2) MULTIEQUAL (stack, 0xffffffffffffff48, 2) , (stack, 0xffffffffffffff48, 2) , (stack, 0xffffffffffffff48, 2)]
[(stack, 0xffffffffffffff4a, 4) INDIRECT (stack, 0xffffffffffffff4a, 4) , (const, 0xbf, 4), (stack, 0xffffffffffffff4a, 4) INDIRECT (stack, 0xffffffffffffff4a, 4) , (const, 0xbe, 4), (stack, 0xffffffffffffff4a, 4) MULTIEQUAL (stack, 0xffffffffffffff4a, 4) , (stack, 0xffffffffffffff4a, 4) , (stack, 0xffffffffffffff4a, 4)]
[(stack, 0xffffffffffffff4e, 4) INDIRECT (stack, 0xffffffffffffff4e, 4) , (const, 0xbf, 4), (stack, 0xffffffffffffff4e, 4) INDIRECT (stack, 0xffffffffffffff4e, 4) , (const, 0xbe, 4), (stack, 0xffffffffffffff4e, 4) MULTIEQUAL (stack, 0xffffffffffffff4e, 4) , (stack, 0xffffffffffffff4e, 4) , (stack, 0xffffffffffffff4e, 4)]
[(stack, 0xffffffffffffff52, 4) INDIRECT (stack, 0xffffffffffffff52, 4) , (const, 0xbf, 4), (stack, 0xffffffffffffff52, 4) INDIRECT (stack, 0xffffffffffffff52, 4) , (const, 0xbe, 4), (stack, 0xffffffffffffff52, 4) MULTIEQUAL (stack, 0xffffffffffffff52, 4) , (stack, 0xffffffffffffff52, 4) , (stack, 0xffffffffffffff52, 4)]
[(stack, 0xffffffffffffff56, 4) INDIRECT (stack, 0xffffffffffffff56, 4) , (const, 0xbf, 4), (stack, 0xffffffffffffff56, 4) INDIRECT (stack, 0xffffffffffffff56, 4) , (const, 0xbe, 4), (stack, 0xffffffffffffff56, 4) MULTIEQUAL (stack, 0xffffffffffffff56, 4) , (stack, 0xffffffffffffff56, 4) , (stack, 0xffffffffffffff56, 4)]
[(stack, 0xffffffffffffff5a, 4) INDIRECT (stack, 0xffffffffffffff5a, 4) , (const, 0xbf, 4), (stack, 0xffffffffffffff5a, 4) INDIRECT (stack, 0xffffffffffffff5a, 4) , (const, 0xbe, 4), (stack, 0xffffffffffffff5a, 4) MULTIEQUAL (stack, 0xffffffffffffff5a, 4) , (stack, 0xffffffffffffff5a, 4) , (stack, 0xffffffffffffff5a, 4)]
[(stack, 0xffffffffffffff5e, 1) INDIRECT (stack, 0xffffffffffffff5e, 1) , (const, 0xbf, 4), (stack, 0xffffffffffffff5e, 1) INDIRECT (stack, 0xffffffffffffff5e, 1) , (const, 0xbe, 4), (stack, 0xffffffffffffff5e, 1) MULTIEQUAL (stack, 0xffffffffffffff5e, 1) , (stack, 0xffffffffffffff5e, 1) , (stack, 0xffffffffffffff5e, 1)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xbf, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xbe, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(unique, 0x100003b4, 8) COPY (stack, 0xffffffffffffff10, 8), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0xbf, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0xbe, 4), (stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[ ---  CBRANCH (ram, 0x261a90, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0xffffffffffffffff, 8), (register, 0x0, 8) CALL (ram, 0x222c30, 8) , (register, 0x0, 4) , (unique, 0x3800, 8) , (unique, 0x3100, 8) , (const, 0x4000, 4)]
[ ---  CBRANCH (ram, 0x261a3f, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbc80, 4) , (const, 0x4, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000458, 8), (unique, 0x10000458, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (ram, 0x4eae68, 8) , (register, 0x110, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x261a61, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x3100, 8) , (const, 0xffffffffffffffff, 8)]
[ ---  CBRANCH (ram, 0x261b70, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbc80, 4) , (const, 0xb, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000460, 8) , (const, 0x261abc, 8), (unique, 0x10000460, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x1000036c, 8) , (unique, 0x10000364, 8) , (const, 0x1, 8), (unique, 0x1000036c, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff08, 8), (unique, 0x10000364, 8) INT_ADD (unique, 0x10000098, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x137, 4)]
[(ram, 0x2bc3b0, 4) INDIRECT (ram, 0x2bc3b0, 4) , (const, 0x137, 4)]
[(ram, 0x2bc3b4, 4) INDIRECT (ram, 0x2bc3b4, 4) , (const, 0x137, 4)]
[(ram, 0x2bc3b8, 4) INDIRECT (ram, 0x2bc3b8, 4) , (const, 0x137, 4)]
[(ram, 0x2bc3bc, 4) INDIRECT (ram, 0x2bc3bc, 4) , (const, 0x137, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x137, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x137, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x136, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x137, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x136, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x137, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x136, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x137, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x136, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x137, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x136, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x137, 4), (stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x136, 4)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x137, 4), (stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x136, 4)]
[(stack, 0xffffffffffffff44, 2) INDIRECT (stack, 0xffffffffffffff44, 2) , (const, 0x137, 4), (stack, 0xffffffffffffff44, 2) INDIRECT (stack, 0xffffffffffffff44, 2) , (const, 0x136, 4)]
[(stack, 0xffffffffffffff48, 2) INDIRECT (stack, 0xffffffffffffff48, 2) , (const, 0x137, 4), (stack, 0xffffffffffffff48, 2) INDIRECT (stack, 0xffffffffffffff48, 2) , (const, 0x136, 4)]
[(stack, 0xffffffffffffff4a, 4) INDIRECT (stack, 0xffffffffffffff4a, 4) , (const, 0x137, 4), (stack, 0xffffffffffffff4a, 4) INDIRECT (stack, 0xffffffffffffff4a, 4) , (const, 0x136, 4)]
[(stack, 0xffffffffffffff4e, 4) INDIRECT (stack, 0xffffffffffffff4e, 4) , (const, 0x137, 4), (stack, 0xffffffffffffff4e, 4) INDIRECT (stack, 0xffffffffffffff4e, 4) , (const, 0x136, 4)]
[(stack, 0xffffffffffffff52, 4) INDIRECT (stack, 0xffffffffffffff52, 4) , (const, 0x137, 4), (stack, 0xffffffffffffff52, 4) INDIRECT (stack, 0xffffffffffffff52, 4) , (const, 0x136, 4)]
[(stack, 0xffffffffffffff56, 4) INDIRECT (stack, 0xffffffffffffff56, 4) , (const, 0x137, 4), (stack, 0xffffffffffffff56, 4) INDIRECT (stack, 0xffffffffffffff56, 4) , (const, 0x136, 4)]
[(stack, 0xffffffffffffff5a, 4) INDIRECT (stack, 0xffffffffffffff5a, 4) , (const, 0x137, 4), (stack, 0xffffffffffffff5a, 4) INDIRECT (stack, 0xffffffffffffff5a, 4) , (const, 0x136, 4)]
[(stack, 0xffffffffffffff5e, 1) INDIRECT (stack, 0xffffffffffffff5e, 1) , (const, 0x137, 4), (stack, 0xffffffffffffff5e, 1) INDIRECT (stack, 0xffffffffffffff5e, 1) , (const, 0x136, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x137, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x136, 4)]
[ ---  CALL (ram, 0x120ff0, 8) , (unique, 0x100003b4, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x261b30, 1) , (unique, 0x100000ef, 1)]
[(stack, 0xffffffffffffff40, 4) COPY (register, 0x0, 4)]
[(stack, 0xffffffffffffff44, 2) COPY (const, 0x1c, 2)]
[(register, 0x10, 4) COPY (const, 0x1388, 4)]
[(stack, 0xffffffffffffff20, 8) COPY (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff18, 8) COPY (register, 0x0, 8), (register, 0x0, 8) INT_ADD (stack, 0xffffffffffffff28, 8) , (const, 0x5, 8)]
[ ---  BRANCH (ram, 0x261b10, 1)]
[(stack, 0xffffffffffffff40, 4) COPY (register, 0x0, 4)]
[(stack, 0xffffffffffffff44, 2) COPY (const, 0x1c, 2)]
[(register, 0x10, 4) INT_ADD (unique, 0x1000013f, 4) , (register, 0x8, 4), (unique, 0x1000013f, 4) SUBPIECE (unique, 0x1000011f, 8) , (const, 0x0, 4), (unique, 0x1000011f, 8) INT_SDIV (register, 0x30, 8) , (const, 0x3e8, 8), (register, 0x8, 4) INT_MULT (register, 0x8, 4) , (const, 0x3e8, 4), (register, 0x8, 4) INT_SUB (unique, 0x1000010f, 4) , (unique, 0x10000117, 4), (unique, 0x1000010f, 4) SUBPIECE (stack, 0xffffffffffffff18, 8) , (const, 0x0, 4), (unique, 0x10000117, 4) SUBPIECE (stack, 0xffffffffffffff28, 8) , (const, 0x0, 4), (register, 0x30, 8) INT_SUB (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff30, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000468, 8) , (const, 0x261b1d, 8), (unique, 0x10000468, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x10000384, 8) , (unique, 0x1000037c, 8) , (const, 0x1, 8), (unique, 0x10000384, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff08, 8), (unique, 0x1000037c, 8) INT_ADD (unique, 0x10000098, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1d7, 4)]
[(ram, 0x2bc3b0, 4) INDIRECT (ram, 0x2bc3b0, 4) , (const, 0x1d7, 4)]
[(ram, 0x2bc3b4, 4) INDIRECT (ram, 0x2bc3b4, 4) , (const, 0x1d7, 4)]
[(ram, 0x2bc3b8, 4) INDIRECT (ram, 0x2bc3b8, 4) , (const, 0x1d7, 4)]
[(ram, 0x2bc3bc, 4) INDIRECT (ram, 0x2bc3bc, 4) , (const, 0x1d7, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x1d7, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x1d7, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x1d6, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x1d7, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x1d6, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x1d7, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x1d6, 4), (stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x1d7, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x1d6, 4), (stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x1d7, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x1d6, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x1d7, 4), (stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x1d6, 4)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x1d7, 4), (stack, 0xffffffffffffff40, 4) INDIRECT (unique, 0x100003dc, 4) , (const, 0x1d6, 4), (unique, 0x100003dc, 4) COPY (register, 0x0, 4)]
[(stack, 0xffffffffffffff44, 2) INDIRECT (stack, 0xffffffffffffff44, 2) , (const, 0x1d7, 4), (stack, 0xffffffffffffff44, 2) INDIRECT (stack, 0xffffffffffffff44, 2) , (const, 0x1d6, 4), (stack, 0xffffffffffffff44, 2) COPY (const, 0x1c, 2)]
[(stack, 0xffffffffffffff48, 2) INDIRECT (stack, 0xffffffffffffff48, 2) , (const, 0x1d7, 4), (stack, 0xffffffffffffff48, 2) INDIRECT (stack, 0xffffffffffffff48, 2) , (const, 0x1d6, 4)]
[(stack, 0xffffffffffffff4a, 4) INDIRECT (stack, 0xffffffffffffff4a, 4) , (const, 0x1d7, 4), (stack, 0xffffffffffffff4a, 4) INDIRECT (stack, 0xffffffffffffff4a, 4) , (const, 0x1d6, 4)]
[(stack, 0xffffffffffffff4e, 4) INDIRECT (stack, 0xffffffffffffff4e, 4) , (const, 0x1d7, 4), (stack, 0xffffffffffffff4e, 4) INDIRECT (stack, 0xffffffffffffff4e, 4) , (const, 0x1d6, 4)]
[(stack, 0xffffffffffffff52, 4) INDIRECT (stack, 0xffffffffffffff52, 4) , (const, 0x1d7, 4), (stack, 0xffffffffffffff52, 4) INDIRECT (stack, 0xffffffffffffff52, 4) , (const, 0x1d6, 4)]
[(stack, 0xffffffffffffff56, 4) INDIRECT (stack, 0xffffffffffffff56, 4) , (const, 0x1d7, 4), (stack, 0xffffffffffffff56, 4) INDIRECT (stack, 0xffffffffffffff56, 4) , (const, 0x1d6, 4)]
[(stack, 0xffffffffffffff5a, 4) INDIRECT (stack, 0xffffffffffffff5a, 4) , (const, 0x1d7, 4), (stack, 0xffffffffffffff5a, 4) INDIRECT (stack, 0xffffffffffffff5a, 4) , (const, 0x1d6, 4)]
[(stack, 0xffffffffffffff5e, 1) INDIRECT (stack, 0xffffffffffffff5e, 1) , (const, 0x1d7, 4), (stack, 0xffffffffffffff5e, 1) INDIRECT (stack, 0xffffffffffffff5e, 1) , (const, 0x1d6, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1d7, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1d6, 4)]
[ ---  CBRANCH (ram, 0x261b70, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (register, 0x0, 4) , (const, 0x1, 4), (register, 0x0, 4) CALL (ram, 0x214bb0, 8) , (unique, 0x3200, 8) , (const, 0x1, 8) , (register, 0x10, 4), (register, 0x10, 4) MULTIEQUAL (register, 0x10, 4) , (register, 0x10, 4)]
[(unique, 0x100000f2, 1) COPY (const, 0x0, 1)]
[ ---  BRANCH (ram, 0x261a3f, 1)]
[(unique, 0x100003bc, 8) COPY (register, 0x20, 8)]
[(unique, 0x100003cc, 4) COPY (register, 0x0, 4)]
[ ---  CBRANCH (ram, 0x261b70, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x3100, 8) , (register, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000470, 8) , (const, 0x261b7e, 8), (unique, 0x10000470, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x1000039c, 8) , (unique, 0x10000394, 8) , (const, 0x1, 8), (unique, 0x1000039c, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff08, 8), (unique, 0x10000394, 8) INT_ADD (unique, 0x10000098, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x102, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x2bc3b0, 4) INDIRECT (ram, 0x2bc3b0, 4) , (const, 0x102, 4), (ram, 0x2bc3b0, 4) MULTIEQUAL (ram, 0x2bc3b0, 4) , (ram, 0x2bc3b0, 4) , (ram, 0x2bc3b0, 4) , (ram, 0x2bc3b0, 4)]
[(ram, 0x2bc3b4, 4) INDIRECT (ram, 0x2bc3b4, 4) , (const, 0x102, 4), (ram, 0x2bc3b4, 4) MULTIEQUAL (ram, 0x2bc3b4, 4) , (ram, 0x2bc3b4, 4) , (ram, 0x2bc3b4, 4) , (ram, 0x2bc3b4, 4)]
[(ram, 0x2bc3b8, 4) INDIRECT (ram, 0x2bc3b8, 4) , (const, 0x102, 4), (ram, 0x2bc3b8, 4) MULTIEQUAL (ram, 0x2bc3b8, 4) , (ram, 0x2bc3b8, 4) , (ram, 0x2bc3b8, 4) , (ram, 0x2bc3b8, 4)]
[(ram, 0x2bc3bc, 4) INDIRECT (ram, 0x2bc3bc, 4) , (const, 0x102, 4), (ram, 0x2bc3bc, 4) MULTIEQUAL (ram, 0x2bc3bc, 4) , (ram, 0x2bc3bc, 4) , (ram, 0x2bc3bc, 4) , (ram, 0x2bc3bc, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x102, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x102, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x101, 4), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x102, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x101, 4), (stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x102, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x101, 4), (stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x102, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x101, 4), (stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x102, 4), (stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0x101, 4), (stack, 0xffffffffffffff40, 4) MULTIEQUAL (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4)]
[(stack, 0xffffffffffffff44, 2) INDIRECT (stack, 0xffffffffffffff44, 2) , (const, 0x102, 4), (stack, 0xffffffffffffff44, 2) INDIRECT (stack, 0xffffffffffffff44, 2) , (const, 0x101, 4), (stack, 0xffffffffffffff44, 2) MULTIEQUAL (stack, 0xffffffffffffff44, 2) , (stack, 0xffffffffffffff44, 2) , (stack, 0xffffffffffffff44, 2) , (stack, 0xffffffffffffff44, 2)]
[(stack, 0xffffffffffffff48, 2) INDIRECT (stack, 0xffffffffffffff48, 2) , (const, 0x102, 4), (stack, 0xffffffffffffff48, 2) INDIRECT (stack, 0xffffffffffffff48, 2) , (const, 0x101, 4), (stack, 0xffffffffffffff48, 2) MULTIEQUAL (stack, 0xffffffffffffff48, 2) , (stack, 0xffffffffffffff48, 2) , (stack, 0xffffffffffffff48, 2) , (stack, 0xffffffffffffff48, 2)]
[(stack, 0xffffffffffffff4a, 4) INDIRECT (stack, 0xffffffffffffff4a, 4) , (const, 0x102, 4), (stack, 0xffffffffffffff4a, 4) INDIRECT (stack, 0xffffffffffffff4a, 4) , (const, 0x101, 4), (stack, 0xffffffffffffff4a, 4) MULTIEQUAL (stack, 0xffffffffffffff4a, 4) , (stack, 0xffffffffffffff4a, 4) , (stack, 0xffffffffffffff4a, 4) , (stack, 0xffffffffffffff4a, 4)]
[(stack, 0xffffffffffffff4e, 4) INDIRECT (stack, 0xffffffffffffff4e, 4) , (const, 0x102, 4), (stack, 0xffffffffffffff4e, 4) INDIRECT (stack, 0xffffffffffffff4e, 4) , (const, 0x101, 4), (stack, 0xffffffffffffff4e, 4) MULTIEQUAL (stack, 0xffffffffffffff4e, 4) , (stack, 0xffffffffffffff4e, 4) , (stack, 0xffffffffffffff4e, 4) , (stack, 0xffffffffffffff4e, 4)]
[(stack, 0xffffffffffffff52, 4) INDIRECT (stack, 0xffffffffffffff52, 4) , (const, 0x102, 4), (stack, 0xffffffffffffff52, 4) INDIRECT (stack, 0xffffffffffffff52, 4) , (const, 0x101, 4), (stack, 0xffffffffffffff52, 4) MULTIEQUAL (stack, 0xffffffffffffff52, 4) , (stack, 0xffffffffffffff52, 4) , (stack, 0xffffffffffffff52, 4) , (stack, 0xffffffffffffff52, 4)]
[(stack, 0xffffffffffffff56, 4) INDIRECT (stack, 0xffffffffffffff56, 4) , (const, 0x102, 4), (stack, 0xffffffffffffff56, 4) INDIRECT (stack, 0xffffffffffffff56, 4) , (const, 0x101, 4), (stack, 0xffffffffffffff56, 4) MULTIEQUAL (stack, 0xffffffffffffff56, 4) , (stack, 0xffffffffffffff56, 4) , (stack, 0xffffffffffffff56, 4) , (stack, 0xffffffffffffff56, 4)]
[(stack, 0xffffffffffffff5a, 4) INDIRECT (stack, 0xffffffffffffff5a, 4) , (const, 0x102, 4), (stack, 0xffffffffffffff5a, 4) INDIRECT (stack, 0xffffffffffffff5a, 4) , (const, 0x101, 4), (stack, 0xffffffffffffff5a, 4) MULTIEQUAL (stack, 0xffffffffffffff5a, 4) , (stack, 0xffffffffffffff5a, 4) , (stack, 0xffffffffffffff5a, 4) , (stack, 0xffffffffffffff5a, 4)]
[(stack, 0xffffffffffffff5e, 1) INDIRECT (stack, 0xffffffffffffff5e, 1) , (const, 0x102, 4), (stack, 0xffffffffffffff5e, 1) INDIRECT (stack, 0xffffffffffffff5e, 1) , (const, 0x101, 4), (stack, 0xffffffffffffff5e, 1) MULTIEQUAL (stack, 0xffffffffffffff5e, 1) , (stack, 0xffffffffffffff5e, 1) , (stack, 0xffffffffffffff5e, 1) , (stack, 0xffffffffffffff5e, 1)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x102, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x101, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CALL (ram, 0x210940, 8) , (register, 0x0, 4)]
[(unique, 0x100003c4, 8) COPY (register, 0x20, 8)]
[(unique, 0x100003d0, 4) COPY (register, 0xa0, 4), (register, 0xa0, 4) COPY (const, 0xffffffff, 4)]
[ ---  BRANCH (ram, 0x261a61, 1)]
[(stack, 0xffffffffffffff5e, 1) MULTIEQUAL (stack, 0xffffffffffffff5e, 1) , (stack, 0xffffffffffffff5e, 1) , (stack, 0xffffffffffffff5e, 1) , (stack, 0xffffffffffffff5e, 1)]
[(stack, 0xffffffffffffff5a, 4) MULTIEQUAL (stack, 0xffffffffffffff5a, 4) , (stack, 0xffffffffffffff5a, 4) , (stack, 0xffffffffffffff5a, 4) , (stack, 0xffffffffffffff5a, 4)]
[(stack, 0xffffffffffffff56, 4) MULTIEQUAL (stack, 0xffffffffffffff56, 4) , (stack, 0xffffffffffffff56, 4) , (stack, 0xffffffffffffff56, 4) , (stack, 0xffffffffffffff56, 4)]
[(stack, 0xffffffffffffff52, 4) MULTIEQUAL (stack, 0xffffffffffffff52, 4) , (stack, 0xffffffffffffff52, 4) , (stack, 0xffffffffffffff52, 4) , (stack, 0xffffffffffffff52, 4)]
[(stack, 0xffffffffffffff4e, 4) MULTIEQUAL (stack, 0xffffffffffffff4e, 4) , (stack, 0xffffffffffffff4e, 4) , (stack, 0xffffffffffffff4e, 4) , (stack, 0xffffffffffffff4e, 4)]
[(stack, 0xffffffffffffff4a, 4) MULTIEQUAL (stack, 0xffffffffffffff4a, 4) , (stack, 0xffffffffffffff4a, 4) , (stack, 0xffffffffffffff4a, 4) , (stack, 0xffffffffffffff4a, 4)]
[(stack, 0xffffffffffffff48, 2) MULTIEQUAL (stack, 0xffffffffffffff48, 2) , (stack, 0xffffffffffffff48, 2) , (stack, 0xffffffffffffff48, 2) , (stack, 0xffffffffffffff48, 2)]
[(stack, 0xffffffffffffff44, 2) MULTIEQUAL (stack, 0xffffffffffffff44, 2) , (stack, 0xffffffffffffff44, 2) , (stack, 0xffffffffffffff44, 2) , (stack, 0xffffffffffffff44, 2)]
[(stack, 0xffffffffffffff40, 4) MULTIEQUAL (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x2bc3bc, 4) MULTIEQUAL (ram, 0x2bc3bc, 4) , (ram, 0x2bc3bc, 4) , (ram, 0x2bc3bc, 4) , (ram, 0x2bc3bc, 4)]
[(ram, 0x2bc3b8, 4) MULTIEQUAL (ram, 0x2bc3b8, 4) , (ram, 0x2bc3b8, 4) , (ram, 0x2bc3b8, 4) , (ram, 0x2bc3b8, 4)]
[(ram, 0x2bc3b4, 4) MULTIEQUAL (ram, 0x2bc3b4, 4) , (ram, 0x2bc3b4, 4) , (ram, 0x2bc3b4, 4) , (ram, 0x2bc3b4, 4)]
[(ram, 0x2bc3b0, 4) MULTIEQUAL (ram, 0x2bc3b0, 4) , (ram, 0x2bc3b0, 4) , (ram, 0x2bc3b0, 4) , (ram, 0x2bc3b0, 4)]
[(register, 0x20, 8) MULTIEQUAL (unique, 0x100003bc, 8) , (unique, 0x100003c4, 8) , (register, 0x20, 8) , (register, 0x20, 8)]
[(register, 0x0, 4) COPY (register, 0xa0, 4), (register, 0xa0, 4) MULTIEQUAL (unique, 0x100003cc, 4) , (unique, 0x100003d0, 4) , (register, 0x0, 4) , (register, 0xa0, 4)]
[ ---  CBRANCH (ram, 0x261b93, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffffc0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10000478, 8), (unique, 0x10000478, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000480, 8) , (unique, 0x100001e4, 8), (unique, 0x10000480, 8) CAST (register, 0x20, 8), (unique, 0x100001e4, 8) PTRSUB (const, 0x0, 8) , (const, 0x261b98, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0xfa, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0xf9, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0xfa, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0xf9, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0xfa, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0xf9, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0xfa, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0xf9, 4)]
[(stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0xfa, 4), (stack, 0xffffffffffffff40, 4) INDIRECT (stack, 0xffffffffffffff40, 4) , (const, 0xf9, 4)]
[(stack, 0xffffffffffffff44, 2) INDIRECT (stack, 0xffffffffffffff44, 2) , (const, 0xfa, 4), (stack, 0xffffffffffffff44, 2) INDIRECT (stack, 0xffffffffffffff44, 2) , (const, 0xf9, 4)]
[(stack, 0xffffffffffffff48, 2) INDIRECT (stack, 0xffffffffffffff48, 2) , (const, 0xfa, 4), (stack, 0xffffffffffffff48, 2) INDIRECT (stack, 0xffffffffffffff48, 2) , (const, 0xf9, 4)]
[(stack, 0xffffffffffffff4a, 4) INDIRECT (stack, 0xffffffffffffff4a, 4) , (const, 0xfa, 4), (stack, 0xffffffffffffff4a, 4) INDIRECT (stack, 0xffffffffffffff4a, 4) , (const, 0xf9, 4)]
[(stack, 0xffffffffffffff4e, 4) INDIRECT (stack, 0xffffffffffffff4e, 4) , (const, 0xfa, 4), (stack, 0xffffffffffffff4e, 4) INDIRECT (stack, 0xffffffffffffff4e, 4) , (const, 0xf9, 4)]
[(stack, 0xffffffffffffff52, 4) INDIRECT (stack, 0xffffffffffffff52, 4) , (const, 0xfa, 4), (stack, 0xffffffffffffff52, 4) INDIRECT (stack, 0xffffffffffffff52, 4) , (const, 0xf9, 4)]
[(stack, 0xffffffffffffff56, 4) INDIRECT (stack, 0xffffffffffffff56, 4) , (const, 0xfa, 4), (stack, 0xffffffffffffff56, 4) INDIRECT (stack, 0xffffffffffffff56, 4) , (const, 0xf9, 4)]
[(stack, 0xffffffffffffff5a, 4) INDIRECT (stack, 0xffffffffffffff5a, 4) , (const, 0xfa, 4), (stack, 0xffffffffffffff5a, 4) INDIRECT (stack, 0xffffffffffffff5a, 4) , (const, 0xf9, 4)]
[(stack, 0xffffffffffffff5e, 1) INDIRECT (stack, 0xffffffffffffff5e, 1) , (const, 0xfa, 4), (stack, 0xffffffffffffff5e, 1) INDIRECT (stack, 0xffffffffffffff5e, 1) , (const, 0xf9, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xfa, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xf9, 4)]
[ ---  CALL (ram, 0x234c80, 8)]
[(ram, 0x2bc3b0, 4) COPY (ram, 0x2bc3b0, 4), (ram, 0x2bc3b0, 4) INDIRECT (ram, 0x2bc3b0, 4) , (const, 0xfa, 4)]
[(ram, 0x2bc3b4, 4) COPY (ram, 0x2bc3b4, 4), (ram, 0x2bc3b4, 4) INDIRECT (ram, 0x2bc3b4, 4) , (const, 0xfa, 4)]
[(ram, 0x2bc3b8, 4) COPY (ram, 0x2bc3b8, 4), (ram, 0x2bc3b8, 4) INDIRECT (ram, 0x2bc3b8, 4) , (const, 0xfa, 4)]
[(ram, 0x2bc3bc, 4) COPY (ram, 0x2bc3bc, 4), (ram, 0x2bc3bc, 4) INDIRECT (ram, 0x2bc3bc, 4) , (const, 0xfa, 4)]
[(ram, 0x4eae68, 8) COPY (ram, 0x4eae68, 8), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xfa, 4)]
[ ---  RETURN (const, 0x1, 4)]
[(ram, 0x2bc3b0, 4) COPY (ram, 0x2bc3b0, 4)]
[(ram, 0x2bc3b4, 4) COPY (ram, 0x2bc3b4, 4)]
[(ram, 0x2bc3b8, 4) COPY (ram, 0x2bc3b8, 4)]
[(ram, 0x2bc3bc, 4) COPY (ram, 0x2bc3bc, 4)]
[(ram, 0x4eae68, 8) COPY (ram, 0x4eae68, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 4)]
