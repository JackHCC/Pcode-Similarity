[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1d, 4)]
[(stack, 0xffffffffffffffc8, 8) INDIRECT (stack, 0xffffffffffffffc8, 8) , (const, 0x1d, 4)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0x1d, 4)]
[(stack, 0xffffffffffffffd8, 8) INDIRECT (stack, 0xffffffffffffffd8, 8) , (const, 0x1d, 4)]
[(stack, 0xffffffffffffffe0, 8) INDIRECT (stack, 0xffffffffffffffe0, 8) , (const, 0x1d, 4)]
[(stack, 0xfffffffffffffff0, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x1d, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10000099, 8), (unique, 0x10000099, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8)]
[ ---  CBRANCH (ram, 0x241510, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x230e80, 8) , (const, 0x1, 4) , (register, 0x20, 8), (register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffc8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x72, 4)]
[(stack, 0xffffffffffffffd8, 8) INDIRECT (stack, 0xffffffffffffffd8, 8) , (const, 0x72, 4)]
[(stack, 0xffffffffffffffe0, 8) INDIRECT (stack, 0xffffffffffffffe0, 8) , (const, 0x72, 4)]
[(stack, 0xfffffffffffffff0, 8) INDIRECT (stack, 0xfffffffffffffff0, 8) , (const, 0x72, 4)]
[ ---  CBRANCH (ram, 0x24155d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x120ff0, 8) , (unique, 0x3800, 8) , (const, 0x0, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffd8, 8)]
[(stack, 0xfffffffffffffff0, 8) INDIRECT (stack, 0xfffffffffffffff0, 8) , (const, 0x95, 4)]
[ ---  CALL (ram, 0x189910, 8) , (unique, 0x10000077, 8), (unique, 0x10000077, 8) COPY (const, 0x2ba6b0, 8)]
[ ---  RETURN (const, 0x1, 4)]
[(register, 0x10, 8) INT_MULT (stack, 0xffffffffffffffe0, 8) , (const, 0x3e8, 8)]
[(unique, 0xbd80, 8) COPY (stack, 0xffffffffffffffd8, 8)]
[ ---  BRANCH (ram, 0x2414e9, 1)]
[(stack, 0xfffffffffffffff0, 8) MULTIEQUAL (stack, 0xfffffffffffffff0, 8) , (stack, 0xfffffffffffffff0, 8)]
[(stack, 0xffffffffffffffd0, 8) MULTIEQUAL (register, 0x10, 8) , (stack, 0xffffffffffffffd0, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x24153e, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (stack, 0xffffffffffffffc8, 8) , (const, 0x0, 8), (stack, 0xffffffffffffffc8, 8) MULTIEQUAL (unique, 0xbd80, 8) , (stack, 0xffffffffffffffc8, 8)]
[(register, 0x0, 8) COPY (stack, 0xffffffffffffffc8, 8)]
[ ---  CBRANCH (ram, 0x241539, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xfffffffffffffff0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x100000a1, 8), (unique, 0x100000a1, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0x58, 4)]
[(stack, 0xfffffffffffffff0, 8) INDIRECT (stack, 0xfffffffffffffff0, 8) , (const, 0x58, 4)]
[ ---  CALL (ram, 0x234c80, 8)]
[ ---  RETURN (const, 0x1, 4)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0x61, 4)]
[(stack, 0xfffffffffffffff0, 8) INDIRECT (stack, 0xfffffffffffffff0, 8) , (const, 0x61, 4)]
[ ---  CALL (ram, 0x1303d0, 8) , (unique, 0x1000006f, 8) , (unique, 0x10000067, 8) , (const, 0x27, 4) , (unique, 0x1000007f, 8), (unique, 0x1000007f, 8) COPY (const, 0x2bb640, 8), (unique, 0x1000006f, 8) COPY (const, 0x2b6d46, 8), (unique, 0x10000067, 8) COPY (const, 0x2b6d3b, 8)]
[ ---  RETURN (const, 0x1, 4)]
