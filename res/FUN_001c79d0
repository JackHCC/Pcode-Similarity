[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10000096, 8), (unique, 0x10000096, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8)]
[(unique, 0x10000082, 8) COPY (register, 0x38, 8)]
[ ---  BRANCH (ram, 0x1c79f4, 1)]
[ ---  CBRANCH (ram, 0x1c79f0, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (register, 0x0, 4) , (const, 0x1a, 4), (register, 0x0, 4) INT_SUB (register, 0x0, 4) , (const, 0x41, 4), (register, 0x0, 4) INT_AND (unique, 0xbc80, 4) , (const, 0xffffffdf, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (register, 0x18, 8), (register, 0x18, 8) MULTIEQUAL (unique, 0x10000082, 8) , (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x1c79f0, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (unique, 0x3100, 4) , (const, 0xa, 4), (unique, 0x3100, 4) INT_SUB (unique, 0xbc80, 4) , (const, 0x30, 4)]
[ ---  CBRANCH (ram, 0x1c79f0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0x5f, 4)]
[(register, 0x18, 8) PTRADD (register, 0x18, 8) , (const, 0x1, 8) , (const, 0x4, 8)]
[(unique, 0x1000008e, 4) COPY (ram, 0x2bcae0, 4)]
[ ---  CBRANCH (ram, 0x1c7a3c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (register, 0x10, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xb6, 4)]
[(stack, 0xffffffffffffffe0, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0xb6, 4)]
[(register, 0x0, 4) CALL (ram, 0x1befb0, 8) , (register, 0x38, 8) , (unique, 0x3800, 8) , (const, 0x0, 8) , (const, 0x0, 8) , (unique, 0x10000069, 8), (unique, 0x10000069, 8) PTRSUB (const, 0x0, 8) , (const, 0x4ea960, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffd8, 8)]
[(unique, 0x10000092, 4) COPY (ram, 0x2bcae0, 4), (ram, 0x2bcae0, 4) INDIRECT (ram, 0x2bcae0, 4) , (const, 0xb6, 4)]
[ ---  CBRANCH (ram, 0x1c7a14, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffffd8, 8) , (register, 0x18, 8), (stack, 0xffffffffffffffd8, 8) INDIRECT (stack, 0xffffffffffffffd8, 8) , (const, 0xb6, 4)]
[(unique, 0x1000008a, 4) COPY (register, 0x0, 4), (register, 0x0, 4) INT_OR (register, 0x0, 4) , (const, 0x7fc00000, 4), (register, 0x0, 4) INT_AND (register, 0x0, 4) , (const, 0x3fffff, 4)]
[ ---  BRANCH (ram, 0x1c7a1c, 1)]
[(stack, 0xffffffffffffffe0, 8) MULTIEQUAL (stack, 0xffffffffffffffe0, 8) , (unique, 0xbd80, 8) , (stack, 0xffffffffffffffe0, 8)]
[(ram, 0x2bcae0, 4) MULTIEQUAL (ram, 0x2bcae0, 4) , (ram, 0x2bcae0, 4) , (ram, 0x2bcae0, 4)]
[(register, 0x1200, 4) MULTIEQUAL (unique, 0x1000008a, 4) , (unique, 0x1000008e, 4) , (unique, 0x10000092, 4)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x1c7a25, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x30, 8) , (const, 0x0, 8)]
[(ram, 0x2bcae0, 4) INDIRECT (ram, 0x2bcae0, 4) , (const, 0x77, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x30, 8) , (register, 0x18, 8)]
[(ram, 0x2bcae0, 4) MULTIEQUAL (ram, 0x2bcae0, 4) , (ram, 0x2bcae0, 4)]
[ ---  CBRANCH (ram, 0x1c7a6e, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffffe0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x1000009e, 8), (unique, 0x1000009e, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8)]
[(ram, 0x2bcae0, 4) COPY (ram, 0x2bcae0, 4)]
[ ---  RETURN (const, 0x0, 8)]
[(stack, 0xffffffffffffffe0, 8) INDIRECT (stack, 0xffffffffffffffe0, 8) , (const, 0x9a, 4)]
[ ---  CALL (ram, 0x234c80, 8) , (register, 0x1200, 4)]
[(ram, 0x2bcae0, 4) COPY (ram, 0x2bcae0, 4), (ram, 0x2bcae0, 4) INDIRECT (ram, 0x2bcae0, 4) , (const, 0x9a, 4)]
[ ---  RETURN (const, 0x1, 4)]
