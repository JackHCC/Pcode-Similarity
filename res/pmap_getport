[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (const, 0x6f00, 2), (unique, 0x3100, 8) PTRSUB (register, 0x38, 8) , (const, 0x2, 8)]
[(stack, 0xffffffffffffffa2, 2) COPY (const, 0x0, 2)]
[(stack, 0xffffffffffffffa4, 4) COPY (const, 0xffffffff, 4)]
[ ---  CBRANCH (ram, 0x237948, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x8, 4) , (const, 0x6, 4)]
[(stack, 0xffffffffffffffa2, 2) INDIRECT (stack, 0xffffffffffffffa2, 2) , (const, 0x112, 4)]
[(stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0x112, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x112, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x112, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x112, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x112, 4)]
[ ---  CBRANCH (ram, 0x2379f8, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x207ce0, 8) , (const, 0x2, 4) , (const, 0x1, 4) , (const, 0x6, 4)]
[(stack, 0xffffffffffffffa2, 2) INDIRECT (stack, 0xffffffffffffffa2, 2) , (const, 0x13b, 4)]
[(stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0x13b, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x13b, 4), (stack, 0xffffffffffffffa8, 8) COPY (const, 0x2, 8)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x13b, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x13b, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x13b, 4)]
[ ---  CBRANCH (ram, 0x2379f0, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x207830, 8) , (register, 0x0, 4) , (unique, 0x3800, 8) , (const, 0x10, 4), (unique, 0x3800, 8) CAST (unique, 0x1000030f, 8), (unique, 0x1000030f, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa2, 2) INDIRECT (stack, 0xffffffffffffffa2, 2) , (const, 0x14c, 4)]
[(stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0x14c, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x14c, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x14c, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x14c, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x14c, 4)]
[ ---  CBRANCH (ram, 0x2379f0, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x207860, 8) , (register, 0x0, 4) , (unique, 0x10000317, 8) , (const, 0x10, 4), (unique, 0x10000317, 8) CAST (register, 0x38, 8)]
[(stack, 0xffffffffffffffa2, 2) INDIRECT (stack, 0xffffffffffffffa2, 2) , (const, 0x178, 4), (stack, 0xffffffffffffffa2, 2) MULTIEQUAL (stack, 0xffffffffffffffa2, 2) , (stack, 0xffffffffffffffa2, 2)]
[(stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0x178, 4), (stack, 0xffffffffffffffa4, 4) MULTIEQUAL (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x178, 4), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[ ---  CALL (ram, 0x1f7030, 8) , (register, 0x0, 4)]
[(stack, 0xffffffffffffffa2, 2) INDIRECT (stack, 0xffffffffffffffa2, 2) , (const, 0x185, 4), (stack, 0xffffffffffffffa2, 2) MULTIEQUAL (stack, 0xffffffffffffffa2, 2) , (stack, 0xffffffffffffffa2, 2)]
[(stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0x185, 4), (stack, 0xffffffffffffffa4, 4) COPY (const, 0xffffffff, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x185, 4), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(register, 0x0, 8) CALL (ram, 0x234dd0, 8) , (register, 0x38, 8) , (const, 0x186a0, 8) , (const, 0x2, 8) , (unique, 0x3800, 8) , (const, 0x190, 4) , (const, 0x190, 4), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffa4, 8)]
[(stack, 0xffffffffffffffa2, 2) INDIRECT (stack, 0xffffffffffffffa2, 2) , (const, 0x163, 4)]
[(stack, 0xffffffffffffffa4, 4) INDIRECT (unique, 0x100002fb, 4) , (const, 0x163, 4), (unique, 0x100002fb, 4) COPY (register, 0x0, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x163, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x163, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x163, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x163, 4)]
[(unique, 0x10000218, 1) COPY (const, 0x1, 1)]
[ ---  CBRANCH (ram, 0x23788c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x234dd0, 8) , (register, 0x38, 8) , (const, 0x186a0, 8) , (const, 0x2, 8) , (unique, 0x3800, 8) , (const, 0x190, 4) , (const, 0x190, 4), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffa4, 8)]
[(stack, 0xffffffffffffffa2, 2) INDIRECT (stack, 0xffffffffffffffa2, 2) , (const, 0x55, 4)]
[(stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0x55, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x55, 4)]
[(register, 0x0, 8) CALL (ram, 0x235cb0, 8) , (register, 0x38, 8) , (const, 0x186a0, 8) , (const, 0x2, 8) , (unique, 0x1000031f, 16) , (unique, 0x1000032f, 8) , (const, 0x0, 4) , (register, 0x88, 4), (unique, 0x1000032f, 8) CAST (unique, 0x1000021a, 8), (unique, 0x1000031f, 16) CAST (unique, 0x10000171, 16), (unique, 0x1000021a, 8) PTRSUB (const, 0x0, 8) , (const, 0x5, 8), (unique, 0x10000171, 16) INT_ADD (unique, 0x100002eb, 16) , (unique, 0x10000181, 9), (unique, 0x100002eb, 16) INT_LEFT (unique, 0x100002db, 16) , (const, 0x48, 16), (unique, 0x100002db, 16) INT_SEXT (const, 0x1, 7), (unique, 0x10000181, 9) INT_ADD (unique, 0x100002d2, 9) , (const, 0x190, 8), (unique, 0x100002d2, 9) INT_LEFT (unique, 0x100002c9, 9) , (const, 0x40, 9), (unique, 0x100002c9, 9) INT_SEXT (const, 0x90, 1), (register, 0x88, 4) INT_SUB (unique, 0x1000020b, 4) , (const, 0x5c, 4), (unique, 0x1000020b, 4) SUBPIECE (register, 0x20, 8) , (const, 0x0, 4)]
[(unique, 0x100002bb, 2) MULTIEQUAL (stack, 0xffffffffffffffa2, 2) , (stack, 0xffffffffffffffa2, 2)]
[(unique, 0x100002bd, 4) MULTIEQUAL (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4)]
[(unique, 0x100002c1, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[ ---  CBRANCH (ram, 0x237882, 1) , (unique, 0x100002b2, 1), (unique, 0x100002b2, 1) INT_EQUAL (unique, 0x100002b3, 8) , (const, 0x0, 8), (unique, 0x100002b3, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[(unique, 0x10000219, 1) COPY (const, 0x0, 1)]
[(unique, 0x10000215, 1) MULTIEQUAL (unique, 0x10000219, 1) , (unique, 0x10000218, 1)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x6c, 4), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (unique, 0x100002c1, 8) , (stack, 0xffffffffffffffa8, 8)]
[(register, 0x0, 8) CALL (ram, 0x237b30, 8)]
[(stack, 0xffffffffffffffa2, 2) INDIRECT (stack, 0xffffffffffffffa2, 2) , (const, 0x91, 4), (stack, 0xffffffffffffffa2, 2) INDIRECT (stack, 0xffffffffffffffa2, 2) , (const, 0x6c, 4), (stack, 0xffffffffffffffa2, 2) MULTIEQUAL (unique, 0x100002bb, 2) , (stack, 0xffffffffffffffa2, 2)]
[(stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0x91, 4), (stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0x6c, 4), (stack, 0xffffffffffffffa4, 4) MULTIEQUAL (unique, 0x100002bd, 4) , (stack, 0xffffffffffffffa4, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (unique, 0x100002ff, 8) , (const, 0x91, 4), (unique, 0x100002ff, 8) COPY (register, 0x30, 8)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (unique, 0x10000307, 8) , (const, 0x91, 4), (unique, 0x10000307, 8) COPY (register, 0x10, 8)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (register, 0x0, 8) , (const, 0x91, 4), (register, 0x0, 8) INT_ZEXT (register, 0x8, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x91, 4), (stack, 0xffffffffffffffc0, 8) COPY (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x237928, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALLIND (unique, 0xbd80, 8) , (register, 0xb8, 8) , (const, 0x3, 8) , (unique, 0x10000222, 8) , (unique, 0x10000337, 8) , (unique, 0x1000022a, 8) , (unique, 0x1000033f, 8) , (unique, 0x10000347, 16), (unique, 0x10000347, 16) CAST (unique, 0x1000018a, 16), (unique, 0x1000033f, 8) CAST (unique, 0x3800, 8), (unique, 0x10000337, 8) CAST (unique, 0x3800, 8), (unique, 0x1000022a, 8) PTRSUB (const, 0x0, 8) , (const, 0x23a6c0, 8), (unique, 0x10000222, 8) PTRSUB (const, 0x0, 8) , (const, 0x22c3f0, 8), (unique, 0x1000018a, 16) INT_ZEXT (unique, 0x1000019a, 9), (unique, 0x1000019a, 9) INT_ZEXT (const, 0x3c, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000252, 8), (unique, 0x10000252, 8) PTRSUB (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffa2, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0xb8, 8) , (const, 0x8, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffa8, 8), (register, 0xb8, 8) MULTIEQUAL (unique, 0x100002b3, 8) , (register, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000282, 8) , (const, 0xe, 4), (unique, 0x10000282, 8) PTRSUB (register, 0x0, 8) , (const, 0x0, 8)]
[(stack, 0xffffffffffffffa2, 2) INDIRECT (stack, 0xffffffffffffffa2, 2) , (const, 0x10b, 4)]
[(stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0x10b, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x10b, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x10b, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x10b, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x10b, 4)]
[ ---  CALLIND (unique, 0xbd80, 8) , (register, 0xb8, 8) , (unique, 0x3100, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (unique, 0xbd80, 8) , (const, 0x10, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0xb8, 8) , (const, 0x8, 8), (unique, 0x3100, 8) PTRSUB (register, 0x0, 8) , (const, 0x8, 8)]
[ ---  BRANCH (ram, 0x2378f1, 1)]
[ ---  CBRANCH (ram, 0x2378f1, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffffa2, 2) , (const, 0x0, 2)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000025a, 8) , (const, 0xf, 4), (unique, 0x1000025a, 8) PTRSUB (register, 0x0, 8) , (const, 0x0, 8)]
[(stack, 0xffffffffffffffa2, 2) INDIRECT (stack, 0xffffffffffffffa2, 2) , (const, 0xbd, 4), (stack, 0xffffffffffffffa2, 2) MULTIEQUAL (stack, 0xffffffffffffffa2, 2) , (stack, 0xffffffffffffffa2, 2) , (stack, 0xffffffffffffffa2, 2)]
[(stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0xbd, 4), (stack, 0xffffffffffffffa4, 4) MULTIEQUAL (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0xbd, 4), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0xbd, 4), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0xbd, 4), (stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xbd, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CALLIND (unique, 0xbd80, 8) , (register, 0xb8, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (unique, 0xbd80, 8) , (const, 0x20, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0xb8, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x23790b, 1) , (unique, 0x10000217, 1), (unique, 0x10000217, 1) BOOL_NEGATE (unique, 0x10000215, 1)]
[(stack, 0xffffffffffffffa2, 2) INDIRECT (stack, 0xffffffffffffffa2, 2) , (const, 0xd2, 4), (stack, 0xffffffffffffffa2, 2) MULTIEQUAL (stack, 0xffffffffffffffa2, 2) , (stack, 0xffffffffffffffa2, 2)]
[(stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0xd2, 4), (stack, 0xffffffffffffffa4, 4) MULTIEQUAL (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0xd2, 4), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0xd2, 4), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0xd2, 4), (stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xd2, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CALL (ram, 0x1f7030, 8) , (stack, 0xffffffffffffffa4, 4), (stack, 0xffffffffffffffa4, 4) MULTIEQUAL (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (const, 0x0, 2), (unique, 0x3100, 8) PTRSUB (register, 0x38, 8) , (const, 0x2, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 2), (register, 0x0, 2) COPY (stack, 0xffffffffffffffa2, 2), (stack, 0xffffffffffffffa2, 2) MULTIEQUAL (unique, 0x100002bb, 2) , (stack, 0xffffffffffffffa2, 2) , (stack, 0xffffffffffffffa2, 2)]
