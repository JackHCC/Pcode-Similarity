[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (const, 0x6f00, 2), (unique, 0x3100, 8) PTRSUB (register, 0x38, 8) , (const, 0x2, 8)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0x2a, 4), (stack, 0xffffffffffffffd0, 8) COPY (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x22c348, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0xffffffff, 4), (register, 0x0, 4) CALL (ram, 0x237530, 8)]
[(stack, 0xffffffffffffffcc, 4) INDIRECT (register, 0x0, 4) , (const, 0xdb, 4)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0xdb, 4)]
[ ---  CBRANCH (ram, 0x22c306, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x234dd0, 8) , (register, 0x38, 8) , (const, 0x186a0, 8) , (const, 0x2, 8) , (unique, 0x3800, 8) , (const, 0x32, 4) , (const, 0x1f4, 4), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffcc, 8)]
[(stack, 0xffffffffffffffcc, 4) INDIRECT (stack, 0xffffffffffffffcc, 4) , (const, 0x103, 4)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0x103, 4)]
[ ---  CBRANCH (ram, 0x22c3c3, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALLIND (unique, 0xbd80, 8) , (register, 0x0, 8) , (const, 0x4, 8) , (unique, 0x100001fc, 8) , (const, 0x0, 8) , (unique, 0x100001ec, 8) , (unique, 0x100002a4, 8) , (unique, 0x100002ac, 16), (unique, 0x100002ac, 16) CAST (unique, 0x10000168, 16), (unique, 0x100002a4, 8) CAST (unique, 0x3800, 8), (unique, 0x100001fc, 8) PTRSUB (const, 0x0, 8) , (const, 0x23a1c0, 8), (unique, 0x100001ec, 8) PTRSUB (const, 0x0, 8) , (const, 0x22c450, 8), (unique, 0x10000168, 16) INT_ZEXT (unique, 0x10000178, 9), (unique, 0x10000178, 9) INT_ZEXT (const, 0x3c, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x1000027c, 8), (unique, 0x1000027c, 8) PTRSUB (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffd0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0x0, 8) , (const, 0x8, 8)]
[(stack, 0xffffffffffffffcc, 4) INDIRECT (stack, 0xffffffffffffffcc, 4) , (const, 0x11c, 4), (stack, 0xffffffffffffffcc, 4) INDIRECT (stack, 0xffffffffffffffcc, 4) , (const, 0x117, 4)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0x11c, 4), (stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0x117, 4)]
[ ---  CALL (ram, 0x2344d0, 8) , (register, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x100002bc, 8), (unique, 0x100002bc, 8) CALL (ram, 0x12e620, 8) , (unique, 0x1000020c, 8) , (unique, 0x1000021c, 8) , (const, 0x5, 8), (unique, 0x1000021c, 8) COPY (const, 0x28f355, 8), (unique, 0x1000020c, 8) PTRSUB (const, 0x0, 8) , (const, 0x28c400, 8)]
[(stack, 0xffffffffffffffcc, 4) INDIRECT (stack, 0xffffffffffffffcc, 4) , (const, 0x125, 4), (stack, 0xffffffffffffffcc, 4) MULTIEQUAL (stack, 0xffffffffffffffcc, 4) , (stack, 0xffffffffffffffcc, 4)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0x125, 4), (stack, 0xffffffffffffffd0, 8) MULTIEQUAL (stack, 0xffffffffffffffd0, 8) , (stack, 0xffffffffffffffd0, 8)]
[ ---  CALLIND (unique, 0xbd80, 8) , (register, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (unique, 0xbd80, 8) , (const, 0x20, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0x0, 8) , (const, 0x8, 8)]
[ ---  BRANCH (ram, 0x22c306, 1)]
[(stack, 0xffffffffffffffcc, 4) INDIRECT (register, 0x0, 4) , (const, 0x41, 4)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0x41, 4)]
[ ---  CBRANCH (ram, 0x22c2ee, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x234dd0, 8) , (register, 0x38, 8) , (const, 0x186a0, 8) , (const, 0x2, 8) , (unique, 0x3800, 8) , (const, 0x32, 4) , (const, 0x1f4, 4), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffcc, 8)]
[(stack, 0xffffffffffffffcc, 4) INDIRECT (stack, 0xffffffffffffffcc, 4) , (const, 0x69, 4)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0x69, 4)]
[(unique, 0x10000181, 8) INT_ADD (unique, 0x1000029c, 8) , (stack, 0xffffffffffffffc0, 1), (unique, 0x1000029c, 8) INT_LEFT (unique, 0x10000294, 8) , (const, 0x8, 8), (unique, 0x10000294, 8) INT_SEXT (unique, 0x100002dc, 7), (unique, 0x100002dc, 7) CAST (stack, 0xffffffffffffffc1, 7), (stack, 0xffffffffffffffc1, 7) INDIRECT (stack, 0xffffffffffffffc1, 7) , (const, 0x69, 4), (stack, 0xffffffffffffffc0, 1) INDIRECT (stack, 0xffffffffffffffc0, 1) , (const, 0x69, 4), (stack, 0xffffffffffffffc1, 7) COPY (const, 0x0, 7), (stack, 0xffffffffffffffc0, 1) COPY (const, 0x0, 1)]
[ ---  CBRANCH (ram, 0x22c320, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALLIND (unique, 0xbd80, 8) , (register, 0x0, 8) , (const, 0x4, 8) , (unique, 0x100001f4, 8) , (const, 0x0, 8) , (unique, 0x100001e4, 8) , (unique, 0x100002c4, 8) , (unique, 0x100002cc, 16), (unique, 0x100002cc, 16) CAST (unique, 0x1000014f, 16), (unique, 0x100002c4, 8) CAST (unique, 0x3800, 8), (unique, 0x100001f4, 8) PTRSUB (const, 0x0, 8) , (const, 0x23a1c0, 8), (unique, 0x100001e4, 8) PTRSUB (const, 0x0, 8) , (const, 0x22c450, 8), (unique, 0x1000014f, 16) INT_ZEXT (unique, 0x1000015f, 9), (unique, 0x1000015f, 9) INT_ZEXT (const, 0x3c, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000244, 8), (unique, 0x10000244, 8) PTRSUB (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffd0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0x0, 8) , (const, 0x8, 8)]
[(stack, 0xffffffffffffffcc, 4) INDIRECT (stack, 0xffffffffffffffcc, 4) , (const, 0xd0, 4), (stack, 0xffffffffffffffcc, 4) INDIRECT (stack, 0xffffffffffffffcc, 4) , (const, 0xcb, 4)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0xd0, 4), (stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0xcb, 4)]
[ ---  CALL (ram, 0x2344d0, 8) , (register, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x100002e3, 8), (unique, 0x100002e3, 8) CALL (ram, 0x12e620, 8) , (unique, 0x10000204, 8) , (unique, 0x10000214, 8) , (const, 0x5, 8) , (unique, 0x10000181, 8), (unique, 0x10000214, 8) COPY (const, 0x28f355, 8), (unique, 0x10000204, 8) PTRSUB (const, 0x0, 8) , (const, 0x28c400, 8)]
[ ---  BRANCH (ram, 0x22c2e4, 1)]
[(stack, 0xffffffffffffffcc, 4) INDIRECT (stack, 0xffffffffffffffcc, 4) , (const, 0x81, 4), (stack, 0xffffffffffffffcc, 4) MULTIEQUAL (stack, 0xffffffffffffffcc, 4) , (stack, 0xffffffffffffffcc, 4)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0x81, 4), (stack, 0xffffffffffffffd0, 8) MULTIEQUAL (stack, 0xffffffffffffffd0, 8) , (stack, 0xffffffffffffffd0, 8)]
[ ---  CALLIND (unique, 0xbd80, 8) , (register, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (unique, 0xbd80, 8) , (const, 0x20, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0x0, 8) , (const, 0x8, 8)]
[(stack, 0xffffffffffffffd0, 8) MULTIEQUAL (stack, 0xffffffffffffffd0, 8) , (stack, 0xffffffffffffffd0, 8)]
[ ---  CALLOTHER (const, 0x5, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (const, 0x0, 2), (unique, 0x3100, 8) PTRSUB (register, 0x38, 8) , (const, 0x2, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) COPY (stack, 0xffffffffffffffd0, 8), (stack, 0xffffffffffffffd0, 8) MULTIEQUAL (stack, 0xffffffffffffffd0, 8) , (stack, 0xffffffffffffffd0, 8) , (stack, 0xffffffffffffffd0, 8)]
