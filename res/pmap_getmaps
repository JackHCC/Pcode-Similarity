[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (const, 0x6f00, 2), (unique, 0x3100, 8) PTRSUB (register, 0x38, 8) , (const, 0x2, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x29, 4)]
[(stack, 0xffffffffffffffd8, 8) INDIRECT (stack, 0xffffffffffffffd8, 8) , (const, 0x29, 4), (stack, 0xffffffffffffffd8, 8) COPY (const, 0x0, 8)]
[(stack, 0xffffffffffffffe0, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x29, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x100002b4, 8), (unique, 0x100002b4, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8)]
[ ---  CBRANCH (ram, 0x24cd20, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0xffffffff, 4), (register, 0x0, 4) CALL (ram, 0x259080, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xd2, 4)]
[(stack, 0xffffffffffffffd4, 4) INDIRECT (register, 0x0, 4) , (const, 0xd2, 4)]
[(stack, 0xffffffffffffffd8, 8) INDIRECT (stack, 0xffffffffffffffd8, 8) , (const, 0xd2, 4)]
[(stack, 0xffffffffffffffe0, 8) INDIRECT (stack, 0xffffffffffffffe0, 8) , (const, 0xd2, 4)]
[ ---  CBRANCH (ram, 0x24ccca, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x2564d0, 8) , (register, 0x38, 8) , (const, 0x186a0, 8) , (const, 0x2, 8) , (unique, 0x3800, 8) , (const, 0x32, 4) , (const, 0x1f4, 4), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffd4, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xfa, 4)]
[(stack, 0xffffffffffffffd4, 4) INDIRECT (stack, 0xffffffffffffffd4, 4) , (const, 0xfa, 4)]
[(stack, 0xffffffffffffffd8, 8) INDIRECT (stack, 0xffffffffffffffd8, 8) , (const, 0xfa, 4)]
[(stack, 0xffffffffffffffe0, 8) INDIRECT (stack, 0xffffffffffffffe0, 8) , (const, 0xfa, 4)]
[ ---  CBRANCH (ram, 0x24cd90, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALLIND (unique, 0xbd80, 8) , (register, 0x0, 8) , (const, 0x4, 8) , (unique, 0x1000020c, 8) , (const, 0x0, 8) , (unique, 0x100001fc, 8) , (unique, 0x100002bc, 8) , (unique, 0x100002c4, 16), (unique, 0x100002c4, 16) CAST (unique, 0x10000168, 16), (unique, 0x100002bc, 8) CAST (unique, 0x3800, 8), (unique, 0x1000020c, 8) PTRSUB (const, 0x0, 8) , (const, 0x25c4f0, 8), (unique, 0x100001fc, 8) PTRSUB (const, 0x0, 8) , (const, 0x24ce20, 8), (unique, 0x10000168, 16) INT_ZEXT (unique, 0x10000178, 9), (unique, 0x10000178, 9) INT_ZEXT (const, 0x3c, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x1000028c, 8), (unique, 0x1000028c, 8) PTRSUB (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffd8, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0x0, 8) , (const, 0x8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x11e, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x119, 4)]
[(stack, 0xffffffffffffffd4, 4) INDIRECT (stack, 0xffffffffffffffd4, 4) , (const, 0x11e, 4), (stack, 0xffffffffffffffd4, 4) INDIRECT (stack, 0xffffffffffffffd4, 4) , (const, 0x119, 4)]
[(stack, 0xffffffffffffffd8, 8) INDIRECT (stack, 0xffffffffffffffd8, 8) , (const, 0x11e, 4), (stack, 0xffffffffffffffd8, 8) INDIRECT (stack, 0xffffffffffffffd8, 8) , (const, 0x119, 4)]
[(stack, 0xffffffffffffffe0, 8) INDIRECT (stack, 0xffffffffffffffe0, 8) , (const, 0x11e, 4), (stack, 0xffffffffffffffe0, 8) INDIRECT (stack, 0xffffffffffffffe0, 8) , (const, 0x119, 4)]
[ ---  CALL (ram, 0x255b40, 8) , (register, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x100002d4, 8), (unique, 0x100002d4, 8) CALL (ram, 0x130d70, 8) , (unique, 0x1000021c, 8) , (unique, 0x1000022c, 8) , (const, 0x5, 8), (unique, 0x1000022c, 8) COPY (const, 0x2b70db, 8), (unique, 0x1000021c, 8) PTRSUB (const, 0x0, 8) , (const, 0x2b3d14, 8)]
[ ---  BRANCH (ram, 0x24cd7c, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x112, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(stack, 0xffffffffffffffd4, 4) INDIRECT (stack, 0xffffffffffffffd4, 4) , (const, 0x112, 4), (stack, 0xffffffffffffffd4, 4) MULTIEQUAL (stack, 0xffffffffffffffd4, 4) , (stack, 0xffffffffffffffd4, 4)]
[(stack, 0xffffffffffffffd8, 8) INDIRECT (stack, 0xffffffffffffffd8, 8) , (const, 0x112, 4), (stack, 0xffffffffffffffd8, 8) MULTIEQUAL (stack, 0xffffffffffffffd8, 8) , (stack, 0xffffffffffffffd8, 8)]
[(stack, 0xffffffffffffffe0, 8) INDIRECT (stack, 0xffffffffffffffe0, 8) , (const, 0x112, 4), (stack, 0xffffffffffffffe0, 8) MULTIEQUAL (stack, 0xffffffffffffffe0, 8) , (stack, 0xffffffffffffffe0, 8)]
[ ---  CALLIND (unique, 0xbd80, 8) , (register, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (unique, 0xbd80, 8) , (const, 0x20, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0x0, 8) , (const, 0x8, 8)]
[ ---  BRANCH (ram, 0x24ccca, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x40, 4)]
[(stack, 0xffffffffffffffd4, 4) INDIRECT (register, 0x0, 4) , (const, 0x40, 4)]
[(stack, 0xffffffffffffffd8, 8) INDIRECT (stack, 0xffffffffffffffd8, 8) , (const, 0x40, 4)]
[(stack, 0xffffffffffffffe0, 8) INDIRECT (stack, 0xffffffffffffffe0, 8) , (const, 0x40, 4)]
[ ---  CBRANCH (ram, 0x24ccc1, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x2564d0, 8) , (register, 0x38, 8) , (const, 0x186a0, 8) , (const, 0x2, 8) , (unique, 0x3800, 8) , (const, 0x32, 4) , (const, 0x1f4, 4), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffd4, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x68, 4)]
[(stack, 0xffffffffffffffd4, 4) INDIRECT (stack, 0xffffffffffffffd4, 4) , (const, 0x68, 4)]
[(stack, 0xffffffffffffffd8, 8) INDIRECT (stack, 0xffffffffffffffd8, 8) , (const, 0x68, 4)]
[(stack, 0xffffffffffffffe0, 8) INDIRECT (stack, 0xffffffffffffffe0, 8) , (const, 0x68, 4)]
[(unique, 0x10000181, 8) INT_ADD (unique, 0x100002ac, 8) , (stack, 0xffffffffffffffc0, 1), (unique, 0x100002ac, 8) INT_LEFT (unique, 0x100002a4, 8) , (const, 0x8, 8), (unique, 0x100002a4, 8) INT_SEXT (unique, 0x100002f4, 7), (unique, 0x100002f4, 7) CAST (stack, 0xffffffffffffffc1, 7), (stack, 0xffffffffffffffc1, 7) INDIRECT (stack, 0xffffffffffffffc1, 7) , (const, 0x68, 4), (stack, 0xffffffffffffffc0, 1) INDIRECT (stack, 0xffffffffffffffc0, 1) , (const, 0x68, 4), (stack, 0xffffffffffffffc1, 7) COPY (const, 0x0, 7), (stack, 0xffffffffffffffc0, 1) COPY (const, 0x0, 1)]
[ ---  CBRANCH (ram, 0x24ccf8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALLIND (unique, 0xbd80, 8) , (register, 0x0, 8) , (const, 0x4, 8) , (unique, 0x10000204, 8) , (const, 0x0, 8) , (unique, 0x100001f4, 8) , (unique, 0x100002dc, 8) , (unique, 0x100002e4, 16), (unique, 0x100002e4, 16) CAST (unique, 0x1000014f, 16), (unique, 0x100002dc, 8) CAST (unique, 0x3800, 8), (unique, 0x10000204, 8) PTRSUB (const, 0x0, 8) , (const, 0x25c4f0, 8), (unique, 0x100001f4, 8) PTRSUB (const, 0x0, 8) , (const, 0x24ce20, 8), (unique, 0x1000014f, 16) INT_ZEXT (unique, 0x1000015f, 9), (unique, 0x1000015f, 9) INT_ZEXT (const, 0x3c, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000254, 8), (unique, 0x10000254, 8) PTRSUB (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffd8, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0x0, 8) , (const, 0x8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xc7, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xc2, 4)]
[(stack, 0xffffffffffffffd4, 4) INDIRECT (stack, 0xffffffffffffffd4, 4) , (const, 0xc7, 4), (stack, 0xffffffffffffffd4, 4) INDIRECT (stack, 0xffffffffffffffd4, 4) , (const, 0xc2, 4)]
[(stack, 0xffffffffffffffd8, 8) INDIRECT (stack, 0xffffffffffffffd8, 8) , (const, 0xc7, 4), (stack, 0xffffffffffffffd8, 8) INDIRECT (stack, 0xffffffffffffffd8, 8) , (const, 0xc2, 4)]
[(stack, 0xffffffffffffffe0, 8) INDIRECT (stack, 0xffffffffffffffe0, 8) , (const, 0xc7, 4), (stack, 0xffffffffffffffe0, 8) INDIRECT (stack, 0xffffffffffffffe0, 8) , (const, 0xc2, 4)]
[ ---  CALL (ram, 0x255b40, 8) , (register, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x100002fb, 8), (unique, 0x100002fb, 8) CALL (ram, 0x130d70, 8) , (unique, 0x10000214, 8) , (unique, 0x10000224, 8) , (const, 0x5, 8) , (unique, 0x10000181, 8), (unique, 0x10000224, 8) COPY (const, 0x2b70db, 8), (unique, 0x10000214, 8) PTRSUB (const, 0x0, 8) , (const, 0x2b3d14, 8)]
[ ---  BRANCH (ram, 0x24ccb7, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x80, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(stack, 0xffffffffffffffd4, 4) INDIRECT (stack, 0xffffffffffffffd4, 4) , (const, 0x80, 4), (stack, 0xffffffffffffffd4, 4) MULTIEQUAL (stack, 0xffffffffffffffd4, 4) , (stack, 0xffffffffffffffd4, 4)]
[(stack, 0xffffffffffffffd8, 8) INDIRECT (stack, 0xffffffffffffffd8, 8) , (const, 0x80, 4), (stack, 0xffffffffffffffd8, 8) MULTIEQUAL (stack, 0xffffffffffffffd8, 8) , (stack, 0xffffffffffffffd8, 8)]
[(stack, 0xffffffffffffffe0, 8) INDIRECT (stack, 0xffffffffffffffe0, 8) , (const, 0x80, 4), (stack, 0xffffffffffffffe0, 8) MULTIEQUAL (stack, 0xffffffffffffffe0, 8) , (stack, 0xffffffffffffffe0, 8)]
[ ---  CALLIND (unique, 0xbd80, 8) , (register, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (unique, 0xbd80, 8) , (const, 0x20, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0x0, 8) , (const, 0x8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x87, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(stack, 0xffffffffffffffd4, 4) INDIRECT (stack, 0xffffffffffffffd4, 4) , (const, 0x87, 4), (stack, 0xffffffffffffffd4, 4) MULTIEQUAL (stack, 0xffffffffffffffd4, 4) , (stack, 0xffffffffffffffd4, 4)]
[(stack, 0xffffffffffffffd8, 8) INDIRECT (stack, 0xffffffffffffffd8, 8) , (const, 0x87, 4), (stack, 0xffffffffffffffd8, 8) MULTIEQUAL (stack, 0xffffffffffffffd8, 8) , (stack, 0xffffffffffffffd8, 8)]
[(stack, 0xffffffffffffffe0, 8) INDIRECT (stack, 0xffffffffffffffe0, 8) , (const, 0x87, 4), (stack, 0xffffffffffffffe0, 8) MULTIEQUAL (stack, 0xffffffffffffffe0, 8) , (stack, 0xffffffffffffffe0, 8)]
[ ---  CALL (ram, 0x210940, 8) , (stack, 0xffffffffffffffd4, 4), (stack, 0xffffffffffffffd4, 4) MULTIEQUAL (stack, 0xffffffffffffffd4, 4) , (stack, 0xffffffffffffffd4, 4)]
[(stack, 0xffffffffffffffd4, 4) MULTIEQUAL (stack, 0xffffffffffffffd4, 4) , (stack, 0xffffffffffffffd4, 4) , (stack, 0xffffffffffffffd4, 4)]
[(register, 0x0, 8) COPY (stack, 0xffffffffffffffd8, 8), (stack, 0xffffffffffffffd8, 8) MULTIEQUAL (stack, 0xffffffffffffffd8, 8) , (stack, 0xffffffffffffffd8, 8) , (stack, 0xffffffffffffffd8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (const, 0x0, 2), (unique, 0x3100, 8) PTRSUB (register, 0x38, 8) , (const, 0x2, 8)]
[ ---  CBRANCH (ram, 0x24cdb5, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffffe0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10000303, 8), (unique, 0x10000303, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8), (stack, 0xffffffffffffffe0, 8) MULTIEQUAL (stack, 0xffffffffffffffe0, 8) , (stack, 0xffffffffffffffe0, 8) , (stack, 0xffffffffffffffe0, 8)]
[(stack, 0xffffffffffffffd4, 4) INDIRECT (stack, 0xffffffffffffffd4, 4) , (const, 0xba, 4)]
[(stack, 0xffffffffffffffd8, 8) INDIRECT (stack, 0xffffffffffffffd8, 8) , (const, 0xba, 4)]
[(stack, 0xffffffffffffffe0, 8) INDIRECT (stack, 0xffffffffffffffe0, 8) , (const, 0xba, 4)]
[ ---  CALL (ram, 0x234c80, 8)]
[ ---  RETURN (const, 0x1, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8)]
