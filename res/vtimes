[(register, 0x20, 8) CAST (unique, 0x1000024c, 8), (unique, 0x1000024c, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff58, 8)]
[(register, 0x20, 8) CAST (unique, 0x10000254, 8), (unique, 0x10000254, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff58, 8)]
[ ---  CBRANCH (ram, 0x1fc375, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x38, 8) , (const, 0x0, 8)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x28, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x28, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x28, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x28, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x28, 4)]
[(stack, 0xffffffffffffff90, 4) INDIRECT (stack, 0xffffffffffffff90, 4) , (const, 0x28, 4)]
[(stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0x28, 4)]
[(stack, 0xffffffffffffffa0, 4) INDIRECT (stack, 0xffffffffffffffa0, 4) , (const, 0x28, 4)]
[(stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0x28, 4)]
[(stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0x28, 4)]
[(stack, 0xffffffffffffffb8, 4) INDIRECT (stack, 0xffffffffffffffb8, 4) , (const, 0x28, 4)]
[ ---  CBRANCH (ram, 0x1fc440, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (const, 0xffffffff, 4) , (register, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x1fc100, 8) , (const, 0x0, 4) , (register, 0x20, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100001cc, 8) , (register, 0x10, 4), (unique, 0x100001cc, 8) PTRSUB (register, 0x38, 8) , (const, 0x0, 8), (register, 0x10, 4) INT_ADD (unique, 0x1000006a, 4) , (register, 0x0, 4), (unique, 0x1000006a, 4) SUBPIECE (unique, 0x1000004a, 8) , (const, 0x0, 4), (unique, 0x1000004a, 8) INT_SDIV (unique, 0x1000016a, 8) , (const, 0xf4240, 8), (register, 0x0, 4) INT_MULT (stack, 0xffffffffffffff58, 4) , (const, 0x3c, 4), (unique, 0x1000016a, 8) INT_MULT (stack, 0xffffffffffffff60, 8) , (const, 0x3c, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (register, 0x0, 4), (unique, 0x3100, 8) PTRSUB (register, 0x38, 8) , (const, 0x8, 8), (register, 0x0, 4) INT_ADD (stack, 0xffffffffffffff90, 4) , (stack, 0xffffffffffffff88, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (stack, 0xffffffffffffffa0, 4), (unique, 0x3100, 8) PTRSUB (register, 0x38, 8) , (const, 0x14, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (register, 0x10, 4), (unique, 0x3100, 8) PTRSUB (register, 0x38, 8) , (const, 0x4, 8), (register, 0x10, 4) INT_ADD (unique, 0x100000b2, 4) , (register, 0x8, 4), (unique, 0x100000b2, 4) SUBPIECE (unique, 0x10000092, 8) , (const, 0x0, 4), (unique, 0x10000092, 8) INT_SDIV (unique, 0x10000172, 8) , (const, 0xf4240, 8), (register, 0x8, 4) INT_MULT (stack, 0xffffffffffffff68, 4) , (const, 0x3c, 4), (unique, 0x10000172, 8) INT_MULT (stack, 0xffffffffffffff70, 8) , (const, 0x3c, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (stack, 0xffffffffffffff98, 4), (unique, 0x3100, 8) PTRSUB (register, 0x38, 8) , (const, 0x18, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (stack, 0xffffffffffffffa8, 4), (unique, 0x3100, 8) PTRSUB (register, 0x38, 8) , (const, 0x1c, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (stack, 0xffffffffffffffb0, 4), (unique, 0x3100, 8) PTRSUB (register, 0x38, 8) , (const, 0x20, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (stack, 0xffffffffffffffb8, 4), (unique, 0x3100, 8) PTRSUB (register, 0x38, 8) , (const, 0x24, 8)]
[(stack, 0xffffffffffffffb8, 4) MULTIEQUAL (stack, 0xffffffffffffffb8, 4) , (stack, 0xffffffffffffffb8, 4)]
[(stack, 0xffffffffffffffb0, 4) MULTIEQUAL (stack, 0xffffffffffffffb0, 4) , (stack, 0xffffffffffffffb0, 4)]
[(stack, 0xffffffffffffffa8, 4) MULTIEQUAL (stack, 0xffffffffffffffa8, 4) , (stack, 0xffffffffffffffa8, 4)]
[(stack, 0xffffffffffffff98, 4) MULTIEQUAL (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4)]
[(stack, 0xffffffffffffffa0, 4) MULTIEQUAL (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4)]
[(stack, 0xffffffffffffff90, 4) MULTIEQUAL (stack, 0xffffffffffffff90, 4) , (stack, 0xffffffffffffff90, 4)]
[(stack, 0xffffffffffffff88, 4) MULTIEQUAL (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 4) MULTIEQUAL (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4)]
[ ---  CBRANCH (ram, 0x1fc42d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x30, 8) , (const, 0x0, 8)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x1b4, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x1b4, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x1b4, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x1b4, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x1b4, 4)]
[(stack, 0xffffffffffffff90, 4) INDIRECT (stack, 0xffffffffffffff90, 4) , (const, 0x1b4, 4)]
[(stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0x1b4, 4)]
[(stack, 0xffffffffffffffa0, 4) INDIRECT (stack, 0xffffffffffffffa0, 4) , (const, 0x1b4, 4)]
[(stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0x1b4, 4)]
[(stack, 0xffffffffffffffb0, 4) INDIRECT (stack, 0xffffffffffffffb0, 4) , (const, 0x1b4, 4)]
[(stack, 0xffffffffffffffb8, 4) INDIRECT (stack, 0xffffffffffffffb8, 4) , (const, 0x1b4, 4)]
[ ---  CBRANCH (ram, 0x1fc440, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x1fc100, 8) , (const, 0xffffffff, 4) , (register, 0x20, 8)]
[(register, 0x0, 4) COPY (const, 0xffffffff, 4)]
[ ---  BRANCH (ram, 0x1fc42f, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000020c, 8) , (register, 0x10, 4), (unique, 0x1000020c, 8) PTRSUB (register, 0x30, 8) , (const, 0x0, 8), (register, 0x10, 4) INT_ADD (unique, 0x10000102, 4) , (register, 0x0, 4), (unique, 0x10000102, 4) SUBPIECE (unique, 0x100000e2, 8) , (const, 0x0, 4), (unique, 0x100000e2, 8) INT_SDIV (unique, 0x1000017a, 8) , (const, 0xf4240, 8), (register, 0x0, 4) INT_MULT (stack, 0xffffffffffffff58, 4) , (const, 0x3c, 4), (unique, 0x1000017a, 8) INT_MULT (stack, 0xffffffffffffff60, 8) , (const, 0x3c, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (register, 0x0, 4), (unique, 0x3100, 8) PTRSUB (register, 0x30, 8) , (const, 0x8, 8), (register, 0x0, 4) INT_ADD (stack, 0xffffffffffffff90, 4) , (stack, 0xffffffffffffff88, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (stack, 0xffffffffffffffa0, 4), (unique, 0x3100, 8) PTRSUB (register, 0x30, 8) , (const, 0x14, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (register, 0x10, 4), (unique, 0x3100, 8) PTRSUB (register, 0x30, 8) , (const, 0x4, 8), (register, 0x10, 4) INT_ADD (unique, 0x1000014a, 4) , (register, 0x8, 4), (unique, 0x1000014a, 4) SUBPIECE (unique, 0x1000012a, 8) , (const, 0x0, 4), (unique, 0x1000012a, 8) INT_SDIV (unique, 0x10000182, 8) , (const, 0xf4240, 8), (register, 0x8, 4) INT_MULT (stack, 0xffffffffffffff68, 4) , (const, 0x3c, 4), (unique, 0x10000182, 8) INT_MULT (stack, 0xffffffffffffff70, 8) , (const, 0x3c, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (stack, 0xffffffffffffff98, 4), (unique, 0x3100, 8) PTRSUB (register, 0x30, 8) , (const, 0x18, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (stack, 0xffffffffffffffa8, 4), (unique, 0x3100, 8) PTRSUB (register, 0x30, 8) , (const, 0x1c, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (stack, 0xffffffffffffffb0, 4), (unique, 0x3100, 8) PTRSUB (register, 0x30, 8) , (const, 0x20, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (stack, 0xffffffffffffffb8, 4), (unique, 0x3100, 8) PTRSUB (register, 0x30, 8) , (const, 0x24, 8)]
[(register, 0x0, 4) COPY (const, 0x0, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 4), (register, 0x0, 4) COPY (register, 0x0, 4), (register, 0x0, 4) MULTIEQUAL (register, 0x0, 4) , (register, 0x0, 4)]
