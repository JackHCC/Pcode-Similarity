[(unique, 0x3c80, 8) CAST (unique, 0x10000427, 8), (unique, 0x10000427, 8) PTRADD (unique, 0x100003a3, 8) , (const, 0x80, 8) , (const, 0x1, 8), (unique, 0x100003a3, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffec8, 8)]
[(stack, 0xffffffffffffff48, 8) COPY (const, 0x1, 8)]
[(stack, 0xffffffffffffffd0, 4) COPY (const, 0x0, 4)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x1000042f, 8), (unique, 0x1000042f, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8)]
[(unique, 0x100003db, 8) COPY (unique, 0x10000437, 8), (unique, 0x10000437, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff50, 8)]
[(register, 0x8, 8) COPY (const, 0x10, 8)]
[(stack, 0xffffffffffffffe0, 8) MULTIEQUAL (unique, 0xbd80, 8) , (stack, 0xffffffffffffffe0, 8)]
[(stack, 0xffffffffffffffd0, 4) MULTIEQUAL (stack, 0xffffffffffffffd0, 4) , (stack, 0xffffffffffffffd0, 4)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(register, 0x38, 8) MULTIEQUAL (unique, 0x100003db, 8) , (unique, 0x100003e3, 8)]
[ ---  CBRANCH (ram, 0x14ef04, 1) , (unique, 0xd300, 1), (unique, 0xd300, 1) INT_NOTEQUAL (register, 0x8, 8) , (const, 0x0, 8), (register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x39, 4)]
[(stack, 0xffffffffffffffd0, 4) INDIRECT (stack, 0xffffffffffffffd0, 4) , (const, 0x39, 4)]
[(stack, 0xffffffffffffffe0, 8) INDIRECT (stack, 0xffffffffffffffe0, 8) , (const, 0x39, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x38, 8) , (const, 0x0, 8)]
[(unique, 0x100003e3, 8) COPY (unique, 0xb800, 8), (unique, 0xb800, 8) PTRADD (register, 0x38, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[(register, 0x8, 8) INT_ADD (register, 0x8, 8) , (const, 0xffffffffffffffff, 8)]
[ ---  BRANCH (ram, 0x14ef01, 1)]
[ ---  CBRANCH (ram, 0x14ef19, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4f08f8, 4) , (const, 0x0, 4)]
[ ---  CBRANCH (const, 0x4, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4ed5e0, 4) , (const, 0x0, 4)]
[(ram, 0x4ed5e0, 4) COPY (const, 0x1, 4)]
[ ---  CALLOTHER (const, 0x11, 4)]
[ ---  CBRANCH (const, 0x4, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4ed5e0, 4) , (const, 0x0, 4)]
[(ram, 0x4ed5e0, 4) COPY (const, 0x1, 4)]
[ ---  BRANCH (ram, 0x14ef3c, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x40c, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x40c, 4)]
[(ram, 0x4eaea8, 8) INDIRECT (ram, 0x4eaea8, 8) , (const, 0x40c, 4)]
[(ram, 0x4ed5e0, 4) INDIRECT (ram, 0x4ed5e0, 4) , (const, 0x40c, 4)]
[(ram, 0x4ed5e4, 4) INDIRECT (ram, 0x4ed5e4, 4) , (const, 0x40c, 4)]
[(ram, 0x4f08a8, 8) INDIRECT (ram, 0x4f08a8, 8) , (const, 0x40c, 4)]
[(ram, 0x4f08b0, 8) INDIRECT (ram, 0x4f08b0, 8) , (const, 0x40c, 4)]
[(ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x40c, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x40c, 4)]
[(stack, 0xfffffffffffffe80, 4) INDIRECT (stack, 0xfffffffffffffe80, 4) , (const, 0x40c, 4)]
[(stack, 0xfffffffffffffe84, 4) INDIRECT (stack, 0xfffffffffffffe84, 4) , (const, 0x40c, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x40c, 4)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x40c, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x40c, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x40c, 4)]
[(stack, 0xffffffffffffffd0, 4) INDIRECT (stack, 0xffffffffffffffd0, 4) , (const, 0x40c, 4)]
[(stack, 0xffffffffffffffe0, 8) INDIRECT (stack, 0xffffffffffffffe0, 8) , (const, 0x40c, 4)]
[ ---  CALL (ram, 0x230690, 8)]
[(stack, 0xffffffffffffffe0, 8) MULTIEQUAL (stack, 0xffffffffffffffe0, 8) , (stack, 0xffffffffffffffe0, 8) , (stack, 0xffffffffffffffe0, 8)]
[(stack, 0xffffffffffffffd0, 4) MULTIEQUAL (stack, 0xffffffffffffffd0, 4) , (stack, 0xffffffffffffffd0, 4) , (stack, 0xffffffffffffffd0, 4)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xfffffffffffffe90, 8) MULTIEQUAL (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8)]
[(stack, 0xfffffffffffffe88, 8) MULTIEQUAL (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8)]
[(stack, 0xfffffffffffffe84, 4) MULTIEQUAL (stack, 0xfffffffffffffe84, 4) , (stack, 0xfffffffffffffe84, 4) , (stack, 0xfffffffffffffe84, 4)]
[(stack, 0xfffffffffffffe80, 4) MULTIEQUAL (stack, 0xfffffffffffffe80, 4) , (stack, 0xfffffffffffffe80, 4) , (stack, 0xfffffffffffffe80, 4)]
[(ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(ram, 0x4f08e8, 4) MULTIEQUAL (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4)]
[(ram, 0x4f08b0, 8) MULTIEQUAL (ram, 0x4f08b0, 8) , (ram, 0x4f08b0, 8) , (ram, 0x4f08b0, 8)]
[(ram, 0x4f08a8, 8) MULTIEQUAL (ram, 0x4f08a8, 8) , (ram, 0x4f08a8, 8) , (ram, 0x4f08a8, 8)]
[(ram, 0x4ed5e0, 4) MULTIEQUAL (ram, 0x4ed5e0, 4) , (ram, 0x4ed5e0, 4) , (ram, 0x4ed5e0, 4)]
[(ram, 0x4eaea8, 8) MULTIEQUAL (ram, 0x4eaea8, 8) , (ram, 0x4eaea8, 8) , (ram, 0x4eaea8, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x10000417, 4) COPY (unique, 0x3100, 4), (unique, 0x3100, 4) INT_ADD (ram, 0x4ed5e4, 4) , (const, 0x1, 4), (ram, 0x4ed5e4, 4) MULTIEQUAL (ram, 0x4ed5e4, 4) , (ram, 0x4ed5e4, 4) , (ram, 0x4ed5e4, 4)]
[ ---  CBRANCH (ram, 0x14ef87, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4ed5e4, 4) , (const, 0x0, 4), (ram, 0x4ed5e4, 4) MULTIEQUAL (ram, 0x4ed5e4, 4) , (ram, 0x4ed5e4, 4) , (ram, 0x4ed5e4, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x6e, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x6e, 4)]
[(ram, 0x4eaea8, 8) INDIRECT (ram, 0x4eaea8, 8) , (const, 0x6e, 4)]
[(ram, 0x4ed5e0, 4) INDIRECT (ram, 0x4ed5e0, 4) , (const, 0x6e, 4)]
[(ram, 0x4ed5e4, 4) INDIRECT (unique, 0x10000417, 4) , (const, 0x6e, 4)]
[(ram, 0x4f08a8, 8) INDIRECT (ram, 0x4f08a8, 8) , (const, 0x6e, 4)]
[(ram, 0x4f08b0, 8) INDIRECT (ram, 0x4f08b0, 8) , (const, 0x6e, 4)]
[(ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x6e, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x6e, 4)]
[(stack, 0xfffffffffffffe80, 4) INDIRECT (stack, 0xfffffffffffffe80, 4) , (const, 0x6e, 4)]
[(stack, 0xfffffffffffffe84, 4) INDIRECT (stack, 0xfffffffffffffe84, 4) , (const, 0x6e, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x6e, 4)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x6e, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x6e, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x6e, 4)]
[(stack, 0xffffffffffffffd0, 4) INDIRECT (stack, 0xffffffffffffffd0, 4) , (const, 0x6e, 4)]
[(stack, 0xffffffffffffffe0, 8) INDIRECT (stack, 0xffffffffffffffe0, 8) , (const, 0x6e, 4)]
[ ---  CBRANCH (ram, 0x14f1d9, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x13f110, 8) , (const, 0x2, 4) , (unique, 0x3c80, 8) , (unique, 0x10000336, 8), (unique, 0x10000336, 8) CAST (unique, 0x1000043f, 8), (unique, 0x1000043f, 8) PTRSUB (const, 0x0, 8) , (const, 0x4ed6a0, 8)]
[(ram, 0x4ed5e4, 4) INT_ADD (ram, 0x4ed5e4, 4) , (const, 0xffffffff, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x7e, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x7e, 4)]
[(ram, 0x4eaea8, 8) INDIRECT (ram, 0x4eaea8, 8) , (const, 0x7e, 4)]
[(ram, 0x4ed5e0, 4) INDIRECT (ram, 0x4ed5e0, 4) , (const, 0x7e, 4)]
[(ram, 0x4ed5e4, 4) INDIRECT (ram, 0x4ed5e4, 4) , (const, 0x7e, 4)]
[(ram, 0x4f08a8, 8) INDIRECT (ram, 0x4f08a8, 8) , (const, 0x7e, 4)]
[(ram, 0x4f08b0, 8) INDIRECT (ram, 0x4f08b0, 8) , (const, 0x7e, 4)]
[(ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x7e, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x7e, 4)]
[(stack, 0xfffffffffffffe80, 4) INDIRECT (stack, 0xfffffffffffffe80, 4) , (const, 0x7e, 4)]
[(stack, 0xfffffffffffffe84, 4) INDIRECT (stack, 0xfffffffffffffe84, 4) , (const, 0x7e, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x7e, 4)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x7e, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x7e, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x7e, 4)]
[(stack, 0xffffffffffffffd0, 4) INDIRECT (stack, 0xffffffffffffffd0, 4) , (const, 0x7e, 4)]
[(stack, 0xffffffffffffffe0, 8) INDIRECT (stack, 0xffffffffffffffe0, 8) , (const, 0x7e, 4)]
[ ---  CBRANCH (ram, 0x14f220, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (const, 0xffffffff, 4) , (register, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x13f110, 8) , (const, 0x3, 4) , (unique, 0x3c80, 8) , (unique, 0x1000031e, 8), (unique, 0x1000031e, 8) CAST (unique, 0x10000447, 8), (unique, 0x10000447, 8) PTRSUB (const, 0x0, 8) , (const, 0x4ed600, 8)]
[(stack, 0xffffffffffffffe0, 8) MULTIEQUAL (stack, 0xffffffffffffffe0, 8) , (stack, 0xffffffffffffffe0, 8)]
[(stack, 0xffffffffffffffd0, 4) MULTIEQUAL (stack, 0xffffffffffffffd0, 4) , (stack, 0xffffffffffffffd0, 4)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xfffffffffffffe90, 8) MULTIEQUAL (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8)]
[(stack, 0xfffffffffffffe88, 8) MULTIEQUAL (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8)]
[(stack, 0xfffffffffffffe84, 4) MULTIEQUAL (stack, 0xfffffffffffffe84, 4) , (stack, 0xfffffffffffffe84, 4)]
[(stack, 0xfffffffffffffe80, 4) MULTIEQUAL (stack, 0xfffffffffffffe80, 4) , (stack, 0xfffffffffffffe80, 4)]
[(ram, 0x4f08e8, 4) MULTIEQUAL (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4)]
[(ram, 0x4f08b0, 8) MULTIEQUAL (ram, 0x4f08b0, 8) , (ram, 0x4f08b0, 8)]
[(ram, 0x4f08a8, 8) MULTIEQUAL (ram, 0x4f08a8, 8) , (ram, 0x4f08a8, 8)]
[(ram, 0x4ed5e4, 4) MULTIEQUAL (unique, 0x10000417, 4) , (ram, 0x4ed5e4, 4)]
[(ram, 0x4ed5e0, 4) MULTIEQUAL (ram, 0x4ed5e0, 4) , (ram, 0x4ed5e0, 4)]
[(ram, 0x4eaea8, 8) MULTIEQUAL (ram, 0x4eaea8, 8) , (ram, 0x4eaea8, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x14ef9b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4f08f8, 4) , (const, 0x0, 4), (ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[ ---  CALLOTHER (const, 0x11, 4)]
[(unique, 0x1000040b, 4) COPY (unique, 0x1000038e, 4), (unique, 0x1000038e, 4) INT_ADD (ram, 0x4ed5e0, 4) , (const, 0xffffffff, 4)]
[ ---  CBRANCH (ram, 0x14efbd, 1) , (unique, 0x10000392, 1), (unique, 0x10000392, 1) INT_NOTEQUAL (unique, 0x1000038e, 4) , (const, 0x0, 4), (unique, 0x1000038e, 4) INT_ADD (ram, 0x4ed5e0, 4) , (const, 0xffffffff, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x3d6, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x3d6, 4)]
[(ram, 0x4eaea8, 8) INDIRECT (ram, 0x4eaea8, 8) , (const, 0x3d6, 4)]
[(ram, 0x4ed5e4, 4) INDIRECT (ram, 0x4ed5e4, 4) , (const, 0x3d6, 4)]
[(ram, 0x4f08a8, 8) INDIRECT (ram, 0x4f08a8, 8) , (const, 0x3d6, 4)]
[(ram, 0x4f08b0, 8) INDIRECT (ram, 0x4f08b0, 8) , (const, 0x3d6, 4)]
[(ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x3d6, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x3d6, 4)]
[(stack, 0xfffffffffffffe80, 4) INDIRECT (stack, 0xfffffffffffffe80, 4) , (const, 0x3d6, 4)]
[(stack, 0xfffffffffffffe84, 4) INDIRECT (stack, 0xfffffffffffffe84, 4) , (const, 0x3d6, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x3d6, 4)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x3d6, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x3d6, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x3d6, 4)]
[(stack, 0xffffffffffffffd0, 4) INDIRECT (stack, 0xffffffffffffffd0, 4) , (const, 0x3d6, 4)]
[(stack, 0xffffffffffffffe0, 8) INDIRECT (stack, 0xffffffffffffffe0, 8) , (const, 0x3d6, 4)]
[ ---  CALL (ram, 0x2306c0, 8)]
[(unique, 0x10000407, 4) COPY (ram, 0x4ed5e0, 4), (ram, 0x4ed5e0, 4) INDIRECT (ram, 0x4ed5e0, 4) , (const, 0x3d6, 4), (ram, 0x4ed5e0, 4) INT_ADD (ram, 0x4ed5e0, 4) , (const, 0xffffffff, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xbf, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xbf, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4eaea8, 8) INDIRECT (ram, 0x4eaea8, 8) , (const, 0xbf, 4), (ram, 0x4eaea8, 8) MULTIEQUAL (ram, 0x4eaea8, 8) , (ram, 0x4eaea8, 8)]
[(ram, 0x4ed5e0, 4) INDIRECT (ram, 0x4ed5e0, 4) , (const, 0xbf, 4), (ram, 0x4ed5e0, 4) COPY (unique, 0x1000040f, 4), (unique, 0x1000040f, 4) MULTIEQUAL (unique, 0x10000407, 4) , (unique, 0x1000040b, 4)]
[(ram, 0x4ed5e4, 4) INDIRECT (ram, 0x4ed5e4, 4) , (const, 0xbf, 4), (ram, 0x4ed5e4, 4) MULTIEQUAL (ram, 0x4ed5e4, 4) , (ram, 0x4ed5e4, 4)]
[(ram, 0x4f08a8, 8) INDIRECT (ram, 0x4f08a8, 8) , (const, 0xbf, 4), (ram, 0x4f08a8, 8) MULTIEQUAL (ram, 0x4f08a8, 8) , (ram, 0x4f08a8, 8)]
[(ram, 0x4f08b0, 8) INDIRECT (ram, 0x4f08b0, 8) , (const, 0xbf, 4), (ram, 0x4f08b0, 8) MULTIEQUAL (ram, 0x4f08b0, 8) , (ram, 0x4f08b0, 8)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0xbf, 4), (ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(stack, 0xfffffffffffffe80, 4) INDIRECT (stack, 0xfffffffffffffe80, 4) , (const, 0xbf, 4), (stack, 0xfffffffffffffe80, 4) MULTIEQUAL (stack, 0xfffffffffffffe80, 4) , (stack, 0xfffffffffffffe80, 4)]
[(stack, 0xfffffffffffffe84, 4) INDIRECT (stack, 0xfffffffffffffe84, 4) , (const, 0xbf, 4), (stack, 0xfffffffffffffe84, 4) MULTIEQUAL (stack, 0xfffffffffffffe84, 4) , (stack, 0xfffffffffffffe84, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0xbf, 4), (stack, 0xfffffffffffffe88, 8) MULTIEQUAL (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0xbf, 4), (stack, 0xfffffffffffffe90, 8) MULTIEQUAL (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0xbf, 4), (stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (unique, 0xbe00, 8) , (const, 0xbf, 4), (unique, 0xbe00, 8) INT_OR (stack, 0xffffffffffffff50, 8) , (const, 0x10000, 8), (stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffffd0, 4) INDIRECT (stack, 0xffffffffffffffd0, 4) , (const, 0xbf, 4), (stack, 0xffffffffffffffd0, 4) MULTIEQUAL (stack, 0xffffffffffffffd0, 4) , (stack, 0xffffffffffffffd0, 4)]
[(stack, 0xffffffffffffffe0, 8) INDIRECT (stack, 0xffffffffffffffe0, 8) , (const, 0xbf, 4), (stack, 0xffffffffffffffe0, 8) MULTIEQUAL (stack, 0xffffffffffffffe0, 8) , (stack, 0xffffffffffffffe0, 8)]
[(unique, 0x100003c7, 4) COPY (ram, 0x4f08e8, 4), (ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0xbf, 4), (ram, 0x4f08e8, 4) MULTIEQUAL (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4)]
[ ---  CBRANCH (ram, 0x14f249, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (const, 0xffffffff, 4) , (register, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x13f140, 8) , (const, 0x0, 4) , (unique, 0x3100, 8) , (unique, 0x3800, 8), (unique, 0x3100, 8) CAST (unique, 0x10000457, 8), (unique, 0x10000457, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff50, 8), (unique, 0x3800, 8) CAST (unique, 0x1000044f, 8), (unique, 0x1000044f, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffec8, 8)]
[ ---  CBRANCH (ram, 0x14f1a0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4f08e8, 4) , (const, 0x0, 4)]
[(stack, 0xfffffffffffffe88, 8) PTRSUB (const, 0x0, 8) , (const, 0x14f360, 8)]
[(unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffe84, 8)]
[ ---  BRANCH (ram, 0x14f019, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xfd, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xfd, 4)]
[(ram, 0x4eaea8, 8) INDIRECT (ram, 0x4eaea8, 8) , (const, 0xfd, 4)]
[(ram, 0x4ed5e0, 4) INDIRECT (ram, 0x4ed5e0, 4) , (const, 0xfd, 4)]
[(ram, 0x4ed5e4, 4) INDIRECT (ram, 0x4ed5e4, 4) , (const, 0xfd, 4)]
[(ram, 0x4f08a8, 8) INDIRECT (ram, 0x4f08a8, 8) , (const, 0xfd, 4)]
[(ram, 0x4f08b0, 8) INDIRECT (ram, 0x4f08b0, 8) , (const, 0xfd, 4)]
[(ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0xfd, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0xfd, 4)]
[(stack, 0xfffffffffffffe80, 4) INDIRECT (stack, 0xfffffffffffffe80, 4) , (const, 0xfd, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0xfd, 4)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0xfd, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0xfd, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0xfd, 4)]
[(stack, 0xffffffffffffffd0, 4) INDIRECT (stack, 0xffffffffffffffd0, 4) , (const, 0xfd, 4)]
[(stack, 0xffffffffffffffe0, 8) INDIRECT (stack, 0xffffffffffffffe0, 8) , (const, 0xfd, 4)]
[ ---  CALLIND (register, 0x0, 8) , (unique, 0x3800, 8) , (unique, 0x100002e6, 8) , (unique, 0x3800, 8), (unique, 0x100002e6, 8) PTRSUB (const, 0x0, 8) , (const, 0x14f360, 8), (register, 0x0, 8) CAST (unique, 0x10000467, 8), (unique, 0x10000467, 8) INT_XOR (register, 0x0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x1000045f, 8), (unique, 0x1000045f, 8) INT_ADD (register, 0x110, 8) , (const, 0x30, 8), (register, 0x0, 8) INT_OR (unique, 0x4ff00, 8) , (unique, 0x50000, 8), (unique, 0x50000, 8) INT_LEFT (ram, 0x4f08a8, 8) , (const, 0x2f, 4), (unique, 0x4ff00, 8) INT_RIGHT (ram, 0x4f08a8, 8) , (const, 0x11, 4), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffe88, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffe84, 8)]
[(stack, 0xffffffffffffffe0, 8) MULTIEQUAL (stack, 0xffffffffffffffe0, 8) , (stack, 0xffffffffffffffe0, 8)]
[(stack, 0xffffffffffffffd0, 4) MULTIEQUAL (stack, 0xffffffffffffffd0, 4) , (stack, 0xffffffffffffffd0, 4)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xfffffffffffffe90, 8) MULTIEQUAL (stack, 0xfffffffffffffe90, 8) , (unique, 0x3800, 8)]
[(stack, 0xfffffffffffffe88, 8) MULTIEQUAL (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8)]
[(stack, 0xfffffffffffffe80, 4) MULTIEQUAL (stack, 0xfffffffffffffe80, 4) , (stack, 0xfffffffffffffe80, 4)]
[(ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(ram, 0x4f08e8, 4) MULTIEQUAL (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4)]
[(ram, 0x4f08b0, 8) MULTIEQUAL (ram, 0x4f08b0, 8) , (ram, 0x4f08b0, 8)]
[(ram, 0x4f08a8, 8) MULTIEQUAL (ram, 0x4f08a8, 8) , (ram, 0x4f08a8, 8)]
[(ram, 0x4ed5e4, 4) MULTIEQUAL (ram, 0x4ed5e4, 4) , (ram, 0x4ed5e4, 4)]
[(ram, 0x4ed5e0, 4) MULTIEQUAL (ram, 0x4ed5e0, 4) , (ram, 0x4ed5e0, 4)]
[(ram, 0x4eaea8, 8) MULTIEQUAL (ram, 0x4eaea8, 8) , (ram, 0x4eaea8, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CALLOTHER (const, 0x5, 4)]
[(stack, 0xfffffffffffffe84, 4) COPY (const, 0x38, 4)]
[(unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffe80, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x27a, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x27a, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4eaea8, 8) INDIRECT (ram, 0x4eaea8, 8) , (const, 0x27a, 4), (ram, 0x4eaea8, 8) MULTIEQUAL (ram, 0x4eaea8, 8) , (ram, 0x4eaea8, 8)]
[(ram, 0x4ed5e0, 4) INDIRECT (ram, 0x4ed5e0, 4) , (const, 0x27a, 4), (ram, 0x4ed5e0, 4) MULTIEQUAL (ram, 0x4ed5e0, 4) , (ram, 0x4ed5e0, 4)]
[(ram, 0x4ed5e4, 4) INDIRECT (ram, 0x4ed5e4, 4) , (const, 0x27a, 4), (ram, 0x4ed5e4, 4) MULTIEQUAL (ram, 0x4ed5e4, 4) , (ram, 0x4ed5e4, 4)]
[(ram, 0x4f08a8, 8) INDIRECT (ram, 0x4f08a8, 8) , (const, 0x27a, 4), (ram, 0x4f08a8, 8) MULTIEQUAL (ram, 0x4f08a8, 8) , (ram, 0x4f08a8, 8)]
[(ram, 0x4f08b0, 8) INDIRECT (ram, 0x4f08b0, 8) , (const, 0x27a, 4), (ram, 0x4f08b0, 8) MULTIEQUAL (ram, 0x4f08b0, 8) , (ram, 0x4f08b0, 8)]
[(ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x27a, 4), (ram, 0x4f08e8, 4) MULTIEQUAL (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x27a, 4), (ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(stack, 0xfffffffffffffe80, 4) INDIRECT (stack, 0xfffffffffffffe80, 4) , (const, 0x27a, 4), (stack, 0xfffffffffffffe80, 4) MULTIEQUAL (stack, 0xfffffffffffffe80, 4) , (stack, 0xfffffffffffffe80, 4)]
[(stack, 0xfffffffffffffe84, 4) INDIRECT (stack, 0xfffffffffffffe84, 4) , (const, 0x27a, 4), (stack, 0xfffffffffffffe84, 4) MULTIEQUAL (stack, 0xfffffffffffffe84, 4) , (stack, 0xfffffffffffffe84, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x27a, 4), (stack, 0xfffffffffffffe88, 8) MULTIEQUAL (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x27a, 4), (stack, 0xfffffffffffffe90, 8) MULTIEQUAL (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x27a, 4), (stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x27a, 4), (stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffffd0, 4) INDIRECT (stack, 0xffffffffffffffd0, 4) , (const, 0x27a, 4), (stack, 0xffffffffffffffd0, 4) MULTIEQUAL (stack, 0xffffffffffffffd0, 4) , (stack, 0xffffffffffffffd0, 4)]
[(stack, 0xffffffffffffffe0, 8) INDIRECT (stack, 0xffffffffffffffe0, 8) , (const, 0x27a, 4), (stack, 0xffffffffffffffe0, 8) MULTIEQUAL (stack, 0xffffffffffffffe0, 8) , (stack, 0xffffffffffffffe0, 8)]
[ ---  CBRANCH (ram, 0x14f050, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0xffffffff, 4), (register, 0x0, 4) CALL (ram, 0x1e4670, 8) , (stack, 0xfffffffffffffe84, 4) , (unique, 0x3800, 8) , (const, 0x0, 4), (stack, 0xfffffffffffffe84, 4) MULTIEQUAL (stack, 0xfffffffffffffe84, 4) , (stack, 0xfffffffffffffe84, 4)]
[ ---  CBRANCH (ram, 0x14f070, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd00, 4) , (const, 0x4, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x1000046f, 8), (unique, 0x1000046f, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (ram, 0x4eae68, 8) , (register, 0x110, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x14f07c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (stack, 0xfffffffffffffe84, 4)]
[(stack, 0xfffffffffffffe80, 4) COPY (const, 0xffffffff, 4)]
[(stack, 0xfffffffffffffe80, 4) MULTIEQUAL (stack, 0xfffffffffffffe80, 4) , (stack, 0xfffffffffffffe80, 4)]
[ ---  CBRANCH (ram, 0x14f09d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x100003c7, 4) , (const, 0x0, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x168, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x168, 4)]
[(ram, 0x4eaea8, 8) INDIRECT (ram, 0x4eaea8, 8) , (const, 0x168, 4)]
[(ram, 0x4ed5e0, 4) INDIRECT (ram, 0x4ed5e0, 4) , (const, 0x168, 4)]
[(ram, 0x4ed5e4, 4) INDIRECT (ram, 0x4ed5e4, 4) , (const, 0x168, 4)]
[(ram, 0x4f08a8, 8) INDIRECT (ram, 0x4f08a8, 8) , (const, 0x168, 4)]
[(ram, 0x4f08b0, 8) INDIRECT (ram, 0x4f08b0, 8) , (const, 0x168, 4)]
[(ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x168, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x168, 4)]
[(stack, 0xfffffffffffffe80, 4) INDIRECT (stack, 0xfffffffffffffe80, 4) , (const, 0x168, 4)]
[(stack, 0xfffffffffffffe84, 4) INDIRECT (stack, 0xfffffffffffffe84, 4) , (const, 0x168, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x168, 4)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x168, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x168, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x168, 4)]
[(stack, 0xffffffffffffffd0, 4) INDIRECT (stack, 0xffffffffffffffd0, 4) , (const, 0x168, 4)]
[(stack, 0xffffffffffffffe0, 8) INDIRECT (stack, 0xffffffffffffffe0, 8) , (const, 0x168, 4)]
[ ---  CALLIND (register, 0x0, 8) , (unique, 0x3800, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x1000047f, 8), (unique, 0x1000047f, 8) INT_XOR (register, 0x0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10000477, 8), (unique, 0x10000477, 8) INT_ADD (register, 0x110, 8) , (const, 0x30, 8), (register, 0x0, 8) INT_OR (unique, 0x4ff00, 8) , (unique, 0x50000, 8), (unique, 0x50000, 8) INT_LEFT (ram, 0x4f08b0, 8) , (const, 0x2f, 4), (unique, 0x4ff00, 8) INT_RIGHT (ram, 0x4f08b0, 8) , (const, 0x11, 4), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffe88, 8)]
[(stack, 0xffffffffffffffe0, 8) MULTIEQUAL (stack, 0xffffffffffffffe0, 8) , (stack, 0xffffffffffffffe0, 8)]
[(stack, 0xffffffffffffffd0, 4) MULTIEQUAL (stack, 0xffffffffffffffd0, 4) , (stack, 0xffffffffffffffd0, 4)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xfffffffffffffe90, 8) MULTIEQUAL (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8)]
[(stack, 0xfffffffffffffe88, 8) MULTIEQUAL (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8)]
[(stack, 0xfffffffffffffe84, 4) MULTIEQUAL (stack, 0xfffffffffffffe84, 4) , (stack, 0xfffffffffffffe84, 4)]
[(stack, 0xfffffffffffffe80, 4) MULTIEQUAL (stack, 0xfffffffffffffe80, 4) , (stack, 0xfffffffffffffe80, 4)]
[(ram, 0x4f08e8, 4) MULTIEQUAL (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4)]
[(ram, 0x4f08b0, 8) MULTIEQUAL (ram, 0x4f08b0, 8) , (ram, 0x4f08b0, 8)]
[(ram, 0x4f08a8, 8) MULTIEQUAL (ram, 0x4f08a8, 8) , (ram, 0x4f08a8, 8)]
[(ram, 0x4ed5e4, 4) MULTIEQUAL (ram, 0x4ed5e4, 4) , (ram, 0x4ed5e4, 4)]
[(ram, 0x4ed5e0, 4) MULTIEQUAL (ram, 0x4ed5e0, 4) , (ram, 0x4ed5e0, 4)]
[(ram, 0x4eaea8, 8) MULTIEQUAL (ram, 0x4eaea8, 8) , (ram, 0x4eaea8, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x14f0b9, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4f08f8, 4) , (const, 0x0, 4), (ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[ ---  CBRANCH (const, 0x4, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4ed5e0, 4) , (const, 0x0, 4)]
[(ram, 0x4ed5e0, 4) COPY (const, 0x1, 4)]
[ ---  CALLOTHER (const, 0x11, 4)]
[ ---  CBRANCH (const, 0x4, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4ed5e0, 4) , (const, 0x0, 4)]
[(ram, 0x4ed5e0, 4) COPY (const, 0x1, 4)]
[ ---  BRANCH (ram, 0x14f0dc, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x253, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x253, 4)]
[(ram, 0x4eaea8, 8) INDIRECT (ram, 0x4eaea8, 8) , (const, 0x253, 4)]
[(ram, 0x4ed5e0, 4) INDIRECT (ram, 0x4ed5e0, 4) , (const, 0x253, 4)]
[(ram, 0x4ed5e4, 4) INDIRECT (ram, 0x4ed5e4, 4) , (const, 0x253, 4)]
[(ram, 0x4f08a8, 8) INDIRECT (ram, 0x4f08a8, 8) , (const, 0x253, 4)]
[(ram, 0x4f08b0, 8) INDIRECT (ram, 0x4f08b0, 8) , (const, 0x253, 4)]
[(ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x253, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x253, 4)]
[(stack, 0xfffffffffffffe80, 4) INDIRECT (stack, 0xfffffffffffffe80, 4) , (const, 0x253, 4)]
[(stack, 0xfffffffffffffe84, 4) INDIRECT (stack, 0xfffffffffffffe84, 4) , (const, 0x253, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x253, 4)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x253, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x253, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x253, 4)]
[(stack, 0xffffffffffffffd0, 4) INDIRECT (stack, 0xffffffffffffffd0, 4) , (const, 0x253, 4)]
[(stack, 0xffffffffffffffe0, 8) INDIRECT (stack, 0xffffffffffffffe0, 8) , (const, 0x253, 4)]
[ ---  CALL (ram, 0x230690, 8) , (unique, 0x100002fe, 8), (unique, 0x100002fe, 8) PTRSUB (const, 0x0, 8) , (const, 0x4ed5e0, 8)]
[(stack, 0xffffffffffffffe0, 8) MULTIEQUAL (stack, 0xffffffffffffffe0, 8) , (stack, 0xffffffffffffffe0, 8) , (stack, 0xffffffffffffffe0, 8)]
[(stack, 0xffffffffffffffd0, 4) MULTIEQUAL (stack, 0xffffffffffffffd0, 4) , (stack, 0xffffffffffffffd0, 4) , (stack, 0xffffffffffffffd0, 4)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xfffffffffffffe90, 8) MULTIEQUAL (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8)]
[(stack, 0xfffffffffffffe88, 8) MULTIEQUAL (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8)]
[(stack, 0xfffffffffffffe84, 4) MULTIEQUAL (stack, 0xfffffffffffffe84, 4) , (stack, 0xfffffffffffffe84, 4) , (stack, 0xfffffffffffffe84, 4)]
[(stack, 0xfffffffffffffe80, 4) MULTIEQUAL (stack, 0xfffffffffffffe80, 4) , (stack, 0xfffffffffffffe80, 4) , (stack, 0xfffffffffffffe80, 4)]
[(ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(ram, 0x4f08e8, 4) MULTIEQUAL (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4)]
[(ram, 0x4f08b0, 8) MULTIEQUAL (ram, 0x4f08b0, 8) , (ram, 0x4f08b0, 8) , (ram, 0x4f08b0, 8)]
[(ram, 0x4f08a8, 8) MULTIEQUAL (ram, 0x4f08a8, 8) , (ram, 0x4f08a8, 8) , (ram, 0x4f08a8, 8)]
[(ram, 0x4ed5e0, 4) MULTIEQUAL (ram, 0x4ed5e0, 4) , (ram, 0x4ed5e0, 4) , (ram, 0x4ed5e0, 4)]
[(ram, 0x4eaea8, 8) MULTIEQUAL (ram, 0x4eaea8, 8) , (ram, 0x4eaea8, 8) , (ram, 0x4eaea8, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x14f180, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4ed5e4, 4) , (const, 0x0, 4), (ram, 0x4ed5e4, 4) INT_ADD (ram, 0x4ed5e4, 4) , (const, 0xffffffff, 4), (ram, 0x4ed5e4, 4) MULTIEQUAL (ram, 0x4ed5e4, 4) , (ram, 0x4ed5e4, 4) , (ram, 0x4ed5e4, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1bb, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1aa, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x1bb, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x1aa, 4)]
[(ram, 0x4eaea8, 8) INDIRECT (ram, 0x4eaea8, 8) , (const, 0x1bb, 4), (ram, 0x4eaea8, 8) INDIRECT (ram, 0x4eaea8, 8) , (const, 0x1aa, 4)]
[(ram, 0x4ed5e0, 4) INDIRECT (ram, 0x4ed5e0, 4) , (const, 0x1bb, 4), (ram, 0x4ed5e0, 4) INDIRECT (ram, 0x4ed5e0, 4) , (const, 0x1aa, 4)]
[(ram, 0x4ed5e4, 4) INDIRECT (ram, 0x4ed5e4, 4) , (const, 0x1bb, 4), (ram, 0x4ed5e4, 4) INDIRECT (ram, 0x4ed5e4, 4) , (const, 0x1aa, 4)]
[(ram, 0x4f08a8, 8) INDIRECT (ram, 0x4f08a8, 8) , (const, 0x1bb, 4), (ram, 0x4f08a8, 8) INDIRECT (ram, 0x4f08a8, 8) , (const, 0x1aa, 4)]
[(ram, 0x4f08b0, 8) INDIRECT (ram, 0x4f08b0, 8) , (const, 0x1bb, 4), (ram, 0x4f08b0, 8) INDIRECT (ram, 0x4f08b0, 8) , (const, 0x1aa, 4)]
[(ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x1bb, 4), (ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x1aa, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x1bb, 4), (ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x1aa, 4)]
[(stack, 0xfffffffffffffe80, 4) INDIRECT (stack, 0xfffffffffffffe80, 4) , (const, 0x1bb, 4), (stack, 0xfffffffffffffe80, 4) INDIRECT (stack, 0xfffffffffffffe80, 4) , (const, 0x1aa, 4)]
[(stack, 0xfffffffffffffe84, 4) INDIRECT (stack, 0xfffffffffffffe84, 4) , (const, 0x1bb, 4), (stack, 0xfffffffffffffe84, 4) INDIRECT (stack, 0xfffffffffffffe84, 4) , (const, 0x1aa, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x1bb, 4), (stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x1aa, 4)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x1bb, 4), (stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x1aa, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x1bb, 4), (stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x1aa, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x1bb, 4), (stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x1aa, 4)]
[(stack, 0xffffffffffffffd0, 4) INDIRECT (stack, 0xffffffffffffffd0, 4) , (const, 0x1bb, 4), (stack, 0xffffffffffffffd0, 4) INDIRECT (stack, 0xffffffffffffffd0, 4) , (const, 0x1aa, 4)]
[(stack, 0xffffffffffffffe0, 8) INDIRECT (stack, 0xffffffffffffffe0, 8) , (const, 0x1bb, 4), (stack, 0xffffffffffffffe0, 8) INDIRECT (stack, 0xffffffffffffffe0, 8) , (const, 0x1aa, 4)]
[ ---  CBRANCH (ram, 0x14f180, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x18, 4) , (const, 0x0, 4), (register, 0x18, 4) INT_OR (register, 0x0, 4) , (register, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x13f110, 8) , (const, 0x3, 4) , (unique, 0x1000030e, 8) , (const, 0x0, 8), (unique, 0x1000030e, 8) CAST (unique, 0x1000048f, 8), (unique, 0x1000048f, 8) PTRSUB (const, 0x0, 8) , (const, 0x4ed600, 8), (register, 0x0, 4) CALL (ram, 0x13f110, 8) , (const, 0x2, 4) , (unique, 0x10000326, 8) , (const, 0x0, 8), (unique, 0x10000326, 8) CAST (unique, 0x10000487, 8), (unique, 0x10000487, 8) PTRSUB (const, 0x0, 8) , (const, 0x4ed6a0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x238, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x238, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4eaea8, 8) INDIRECT (ram, 0x4eaea8, 8) , (const, 0x238, 4), (ram, 0x4eaea8, 8) MULTIEQUAL (ram, 0x4eaea8, 8) , (ram, 0x4eaea8, 8)]
[(ram, 0x4ed5e0, 4) INDIRECT (ram, 0x4ed5e0, 4) , (const, 0x238, 4), (ram, 0x4ed5e0, 4) MULTIEQUAL (ram, 0x4ed5e0, 4) , (ram, 0x4ed5e0, 4)]
[(ram, 0x4ed5e4, 4) INDIRECT (ram, 0x4ed5e4, 4) , (const, 0x238, 4), (ram, 0x4ed5e4, 4) MULTIEQUAL (ram, 0x4ed5e4, 4) , (ram, 0x4ed5e4, 4)]
[(ram, 0x4f08a8, 8) INDIRECT (ram, 0x4f08a8, 8) , (const, 0x238, 4), (ram, 0x4f08a8, 8) MULTIEQUAL (ram, 0x4f08a8, 8) , (ram, 0x4f08a8, 8)]
[(ram, 0x4f08b0, 8) INDIRECT (ram, 0x4f08b0, 8) , (const, 0x238, 4), (ram, 0x4f08b0, 8) MULTIEQUAL (ram, 0x4f08b0, 8) , (ram, 0x4f08b0, 8)]
[(ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x238, 4), (ram, 0x4f08e8, 4) MULTIEQUAL (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x238, 4), (ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(stack, 0xfffffffffffffe80, 4) INDIRECT (stack, 0xfffffffffffffe80, 4) , (const, 0x238, 4), (stack, 0xfffffffffffffe80, 4) MULTIEQUAL (stack, 0xfffffffffffffe80, 4) , (stack, 0xfffffffffffffe80, 4)]
[(stack, 0xfffffffffffffe84, 4) INDIRECT (stack, 0xfffffffffffffe84, 4) , (const, 0x238, 4), (stack, 0xfffffffffffffe84, 4) MULTIEQUAL (stack, 0xfffffffffffffe84, 4) , (stack, 0xfffffffffffffe84, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x238, 4), (stack, 0xfffffffffffffe88, 8) MULTIEQUAL (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x238, 4), (stack, 0xfffffffffffffe90, 8) MULTIEQUAL (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x238, 4), (stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x238, 4), (stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffffd0, 4) INDIRECT (stack, 0xffffffffffffffd0, 4) , (const, 0x238, 4), (stack, 0xffffffffffffffd0, 4) MULTIEQUAL (stack, 0xffffffffffffffd0, 4) , (stack, 0xffffffffffffffd0, 4)]
[(stack, 0xffffffffffffffe0, 8) INDIRECT (stack, 0xffffffffffffffe0, 8) , (const, 0x238, 4), (stack, 0xffffffffffffffe0, 8) MULTIEQUAL (stack, 0xffffffffffffffe0, 8) , (stack, 0xffffffffffffffe0, 8)]
[ ---  CBRANCH (ram, 0x14f11d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x13f140, 8) , (const, 0x2, 4) , (unique, 0x3800, 8) , (const, 0x0, 8)]
[(stack, 0xfffffffffffffe80, 4) COPY (const, 0xffffffff, 4)]
[ ---  BRANCH (ram, 0x14f11d, 1)]
[(stack, 0xfffffffffffffe80, 4) COPY (const, 0xffffffff, 4)]
[(stack, 0xffffffffffffffe0, 8) MULTIEQUAL (stack, 0xffffffffffffffe0, 8) , (stack, 0xffffffffffffffe0, 8) , (stack, 0xffffffffffffffe0, 8)]
[(stack, 0xffffffffffffffd0, 4) MULTIEQUAL (stack, 0xffffffffffffffd0, 4) , (stack, 0xffffffffffffffd0, 4) , (stack, 0xffffffffffffffd0, 4)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xfffffffffffffe90, 8) MULTIEQUAL (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8)]
[(stack, 0xfffffffffffffe88, 8) MULTIEQUAL (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8)]
[(stack, 0xfffffffffffffe84, 4) MULTIEQUAL (stack, 0xfffffffffffffe84, 4) , (stack, 0xfffffffffffffe84, 4) , (stack, 0xfffffffffffffe84, 4)]
[(stack, 0xfffffffffffffe80, 4) MULTIEQUAL (stack, 0xfffffffffffffe80, 4) , (stack, 0xfffffffffffffe80, 4) , (stack, 0xfffffffffffffe80, 4)]
[(ram, 0x4f08e8, 4) MULTIEQUAL (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4)]
[(ram, 0x4f08b0, 8) MULTIEQUAL (ram, 0x4f08b0, 8) , (ram, 0x4f08b0, 8) , (ram, 0x4f08b0, 8)]
[(ram, 0x4f08a8, 8) MULTIEQUAL (ram, 0x4f08a8, 8) , (ram, 0x4f08a8, 8) , (ram, 0x4f08a8, 8)]
[(ram, 0x4ed5e4, 4) MULTIEQUAL (ram, 0x4ed5e4, 4) , (ram, 0x4ed5e4, 4) , (ram, 0x4ed5e4, 4)]
[(ram, 0x4ed5e0, 4) MULTIEQUAL (ram, 0x4ed5e0, 4) , (ram, 0x4ed5e0, 4) , (ram, 0x4ed5e0, 4)]
[(ram, 0x4eaea8, 8) MULTIEQUAL (ram, 0x4eaea8, 8) , (ram, 0x4eaea8, 8) , (ram, 0x4eaea8, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x14f131, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4f08f8, 4) , (const, 0x0, 4), (ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[ ---  CALLOTHER (const, 0x11, 4)]
[(unique, 0x100003f3, 4) COPY (unique, 0x100003b3, 4), (unique, 0x100003b3, 4) INT_ADD (ram, 0x4ed5e0, 4) , (const, 0xffffffff, 4)]
[(unique, 0x10000423, 4) COPY (stack, 0xfffffffffffffe80, 4)]
[ ---  CBRANCH (ram, 0x14f153, 1) , (unique, 0x100003b7, 1), (unique, 0x100003b7, 1) INT_NOTEQUAL (unique, 0x100003b3, 4) , (const, 0x0, 4), (unique, 0x100003b3, 4) INT_ADD (ram, 0x4ed5e0, 4) , (const, 0xffffffff, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x217, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x217, 4)]
[(ram, 0x4eaea8, 8) INDIRECT (ram, 0x4eaea8, 8) , (const, 0x217, 4)]
[(ram, 0x4ed5e4, 4) INDIRECT (ram, 0x4ed5e4, 4) , (const, 0x217, 4)]
[(ram, 0x4f08a8, 8) INDIRECT (ram, 0x4f08a8, 8) , (const, 0x217, 4)]
[(ram, 0x4f08b0, 8) INDIRECT (ram, 0x4f08b0, 8) , (const, 0x217, 4)]
[(ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x217, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x217, 4)]
[(stack, 0xfffffffffffffe84, 4) INDIRECT (stack, 0xfffffffffffffe84, 4) , (const, 0x217, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x217, 4)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x217, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x217, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x217, 4)]
[(stack, 0xffffffffffffffd0, 4) INDIRECT (stack, 0xffffffffffffffd0, 4) , (const, 0x217, 4)]
[(stack, 0xffffffffffffffe0, 8) INDIRECT (stack, 0xffffffffffffffe0, 8) , (const, 0x217, 4)]
[ ---  CALL (ram, 0x2306c0, 8) , (unique, 0x100002ee, 8), (unique, 0x100002ee, 8) PTRSUB (const, 0x0, 8) , (const, 0x4ed5e0, 8)]
[(unique, 0x100003ef, 4) COPY (ram, 0x4ed5e0, 4), (ram, 0x4ed5e0, 4) INDIRECT (ram, 0x4ed5e0, 4) , (const, 0x217, 4), (ram, 0x4ed5e0, 4) INT_ADD (ram, 0x4ed5e0, 4) , (const, 0xffffffff, 4)]
[(unique, 0x1000041f, 4) COPY (stack, 0xfffffffffffffe80, 4), (stack, 0xfffffffffffffe80, 4) INDIRECT (stack, 0xfffffffffffffe80, 4) , (const, 0x217, 4)]
[ ---  CBRANCH (ram, 0x14f265, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4f08f8, 4) , (const, 0x0, 4)]
[ ---  CBRANCH (const, 0x4, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4ed5e0, 4) , (const, 0x0, 4)]
[(ram, 0x4ed5e0, 4) COPY (const, 0x1, 4)]
[ ---  CALLOTHER (const, 0x11, 4)]
[ ---  CBRANCH (const, 0x4, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4ed5e0, 4) , (const, 0x0, 4)]
[(ram, 0x4ed5e0, 4) COPY (const, 0x1, 4)]
[ ---  BRANCH (ram, 0x14f288, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x3b0, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x3b0, 4)]
[(ram, 0x4eaea8, 8) INDIRECT (ram, 0x4eaea8, 8) , (const, 0x3b0, 4)]
[(ram, 0x4ed5e0, 4) INDIRECT (ram, 0x4ed5e0, 4) , (const, 0x3b0, 4)]
[(ram, 0x4ed5e4, 4) INDIRECT (ram, 0x4ed5e4, 4) , (const, 0x3b0, 4)]
[(ram, 0x4f08a8, 8) INDIRECT (ram, 0x4f08a8, 8) , (const, 0x3b0, 4)]
[(ram, 0x4f08b0, 8) INDIRECT (ram, 0x4f08b0, 8) , (const, 0x3b0, 4)]
[(ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x3b0, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x3b0, 4)]
[(stack, 0xfffffffffffffe80, 4) INDIRECT (stack, 0xfffffffffffffe80, 4) , (const, 0x3b0, 4)]
[(stack, 0xfffffffffffffe84, 4) INDIRECT (stack, 0xfffffffffffffe84, 4) , (const, 0x3b0, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x3b0, 4)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x3b0, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x3b0, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x3b0, 4)]
[(stack, 0xffffffffffffffd0, 4) INDIRECT (stack, 0xffffffffffffffd0, 4) , (const, 0x3b0, 4)]
[(stack, 0xffffffffffffffe0, 8) INDIRECT (stack, 0xffffffffffffffe0, 8) , (const, 0x3b0, 4)]
[ ---  CALL (ram, 0x230690, 8) , (unique, 0x10000306, 8), (unique, 0x10000306, 8) PTRSUB (const, 0x0, 8) , (const, 0x4ed5e0, 8)]
[(stack, 0xffffffffffffffe0, 8) MULTIEQUAL (stack, 0xffffffffffffffe0, 8) , (stack, 0xffffffffffffffe0, 8) , (stack, 0xffffffffffffffe0, 8)]
[(stack, 0xffffffffffffffd0, 4) MULTIEQUAL (stack, 0xffffffffffffffd0, 4) , (stack, 0xffffffffffffffd0, 4) , (stack, 0xffffffffffffffd0, 4)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xfffffffffffffe90, 8) MULTIEQUAL (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8)]
[(stack, 0xfffffffffffffe88, 8) MULTIEQUAL (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8)]
[(stack, 0xfffffffffffffe84, 4) MULTIEQUAL (stack, 0xfffffffffffffe84, 4) , (stack, 0xfffffffffffffe84, 4) , (stack, 0xfffffffffffffe84, 4)]
[(stack, 0xfffffffffffffe80, 4) MULTIEQUAL (stack, 0xfffffffffffffe80, 4) , (stack, 0xfffffffffffffe80, 4) , (stack, 0xfffffffffffffe80, 4)]
[(ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(ram, 0x4f08e8, 4) MULTIEQUAL (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4)]
[(ram, 0x4f08b0, 8) MULTIEQUAL (ram, 0x4f08b0, 8) , (ram, 0x4f08b0, 8) , (ram, 0x4f08b0, 8)]
[(ram, 0x4f08a8, 8) MULTIEQUAL (ram, 0x4f08a8, 8) , (ram, 0x4f08a8, 8) , (ram, 0x4f08a8, 8)]
[(ram, 0x4ed5e0, 4) MULTIEQUAL (ram, 0x4ed5e0, 4) , (ram, 0x4ed5e0, 4) , (ram, 0x4ed5e0, 4)]
[(ram, 0x4eaea8, 8) MULTIEQUAL (ram, 0x4eaea8, 8) , (ram, 0x4eaea8, 8) , (ram, 0x4eaea8, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x100003bf, 8) COPY (ram, 0x4eae68, 8), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[ ---  CBRANCH (ram, 0x14f1e0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4ed5e4, 4) , (const, 0x0, 4), (ram, 0x4ed5e4, 4) INT_ADD (ram, 0x4ed5e4, 4) , (const, 0xffffffff, 4), (ram, 0x4ed5e4, 4) MULTIEQUAL (ram, 0x4ed5e4, 4) , (ram, 0x4ed5e4, 4) , (ram, 0x4ed5e4, 4)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000497, 8), (unique, 0x10000497, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (ram, 0x4eae68, 8) , (register, 0x110, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x358, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x358, 4)]
[(ram, 0x4eaea8, 8) INDIRECT (ram, 0x4eaea8, 8) , (const, 0x358, 4)]
[(ram, 0x4ed5e0, 4) INDIRECT (ram, 0x4ed5e0, 4) , (const, 0x358, 4)]
[(ram, 0x4ed5e4, 4) INDIRECT (ram, 0x4ed5e4, 4) , (const, 0x358, 4)]
[(ram, 0x4f08a8, 8) INDIRECT (ram, 0x4f08a8, 8) , (const, 0x358, 4)]
[(ram, 0x4f08b0, 8) INDIRECT (ram, 0x4f08b0, 8) , (const, 0x358, 4)]
[(ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x358, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x358, 4)]
[(stack, 0xfffffffffffffe80, 4) INDIRECT (stack, 0xfffffffffffffe80, 4) , (const, 0x358, 4)]
[(stack, 0xfffffffffffffe84, 4) INDIRECT (stack, 0xfffffffffffffe84, 4) , (const, 0x358, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x358, 4)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x358, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x358, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x358, 4)]
[(stack, 0xffffffffffffffd0, 4) INDIRECT (stack, 0xffffffffffffffd0, 4) , (const, 0x358, 4)]
[(stack, 0xffffffffffffffe0, 8) INDIRECT (stack, 0xffffffffffffffe0, 8) , (const, 0x358, 4)]
[ ---  CALL (ram, 0x13f110, 8) , (const, 0x3, 4) , (unique, 0x10000316, 8) , (const, 0x0, 8), (unique, 0x10000316, 8) CAST (unique, 0x1000049f, 8), (unique, 0x1000049f, 8) PTRSUB (const, 0x0, 8) , (const, 0x4ed600, 8)]
[(unique, 0x100003cb, 8) COPY (unique, 0x100003bf, 8)]
[ ---  BRANCH (ram, 0x14f231, 1)]
[(ram, 0x4ed5e4, 4) INT_ADD (ram, 0x4ed5e4, 4) , (const, 0xffffffff, 4)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100004a7, 8), (unique, 0x100004a7, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (ram, 0x4eae68, 8) , (register, 0x110, 8) , (const, 0x1, 8)]
[(unique, 0x100003d3, 8) COPY (ram, 0x4eae68, 8)]
[(stack, 0xfffffffffffffe80, 4) INDIRECT (stack, 0xfffffffffffffe80, 4) , (const, 0x368, 4), (stack, 0xfffffffffffffe80, 4) MULTIEQUAL (stack, 0xfffffffffffffe80, 4) , (stack, 0xfffffffffffffe80, 4)]
[(stack, 0xfffffffffffffe84, 4) INDIRECT (stack, 0xfffffffffffffe84, 4) , (const, 0x368, 4), (stack, 0xfffffffffffffe84, 4) MULTIEQUAL (stack, 0xfffffffffffffe84, 4) , (stack, 0xfffffffffffffe84, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x368, 4), (stack, 0xfffffffffffffe88, 8) MULTIEQUAL (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x368, 4), (stack, 0xfffffffffffffe90, 8) MULTIEQUAL (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x368, 4), (stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x368, 4), (stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffffd0, 4) INDIRECT (stack, 0xffffffffffffffd0, 4) , (const, 0x368, 4), (stack, 0xffffffffffffffd0, 4) MULTIEQUAL (stack, 0xffffffffffffffd0, 4) , (stack, 0xffffffffffffffd0, 4)]
[(stack, 0xffffffffffffffe0, 8) INDIRECT (stack, 0xffffffffffffffe0, 8) , (const, 0x368, 4), (stack, 0xffffffffffffffe0, 8) MULTIEQUAL (stack, 0xffffffffffffffe0, 8) , (stack, 0xffffffffffffffe0, 8)]
[ ---  CALL (ram, 0x13f110, 8) , (const, 0x2, 4) , (unique, 0x1000032e, 8) , (const, 0x0, 8), (unique, 0x1000032e, 8) CAST (unique, 0x100004af, 8), (unique, 0x100004af, 8) PTRSUB (const, 0x0, 8) , (const, 0x4ed6a0, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x36b, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x368, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(ram, 0x4eaea8, 8) INDIRECT (ram, 0x4eaea8, 8) , (const, 0x36b, 4), (ram, 0x4eaea8, 8) INDIRECT (ram, 0x4eaea8, 8) , (const, 0x368, 4), (ram, 0x4eaea8, 8) MULTIEQUAL (ram, 0x4eaea8, 8) , (ram, 0x4eaea8, 8)]
[(ram, 0x4ed5e0, 4) INDIRECT (ram, 0x4ed5e0, 4) , (const, 0x36b, 4), (ram, 0x4ed5e0, 4) INDIRECT (ram, 0x4ed5e0, 4) , (const, 0x368, 4), (ram, 0x4ed5e0, 4) MULTIEQUAL (ram, 0x4ed5e0, 4) , (ram, 0x4ed5e0, 4)]
[(ram, 0x4ed5e4, 4) INDIRECT (ram, 0x4ed5e4, 4) , (const, 0x36b, 4), (ram, 0x4ed5e4, 4) INDIRECT (ram, 0x4ed5e4, 4) , (const, 0x368, 4), (ram, 0x4ed5e4, 4) MULTIEQUAL (ram, 0x4ed5e4, 4) , (ram, 0x4ed5e4, 4)]
[(ram, 0x4f08a8, 8) INDIRECT (ram, 0x4f08a8, 8) , (const, 0x36b, 4), (ram, 0x4f08a8, 8) INDIRECT (ram, 0x4f08a8, 8) , (const, 0x368, 4), (ram, 0x4f08a8, 8) MULTIEQUAL (ram, 0x4f08a8, 8) , (ram, 0x4f08a8, 8)]
[(ram, 0x4f08b0, 8) INDIRECT (ram, 0x4f08b0, 8) , (const, 0x36b, 4), (ram, 0x4f08b0, 8) INDIRECT (ram, 0x4f08b0, 8) , (const, 0x368, 4), (ram, 0x4f08b0, 8) MULTIEQUAL (ram, 0x4f08b0, 8) , (ram, 0x4f08b0, 8)]
[(ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x36b, 4), (ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x368, 4), (ram, 0x4f08e8, 4) MULTIEQUAL (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x36b, 4), (ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x368, 4), (ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100004b7, 8) , (register, 0x28, 4), (unique, 0x100004b7, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (register, 0x18, 8) , (register, 0x110, 8) , (const, 0x1, 8), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x368, 4), (register, 0x18, 8) MULTIEQUAL (unique, 0x100003cb, 8) , (unique, 0x100003d3, 8), (register, 0x28, 4) MULTIEQUAL (unique, 0xbc80, 4) , (unique, 0xbc80, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  BRANCH (ram, 0x14f1e0, 1)]
[(stack, 0xffffffffffffffe0, 8) MULTIEQUAL (stack, 0xffffffffffffffe0, 8) , (stack, 0xffffffffffffffe0, 8) , (stack, 0xffffffffffffffe0, 8)]
[(stack, 0xffffffffffffffd0, 4) MULTIEQUAL (stack, 0xffffffffffffffd0, 4) , (stack, 0xffffffffffffffd0, 4) , (stack, 0xffffffffffffffd0, 4)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xfffffffffffffe90, 8) MULTIEQUAL (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8)]
[(stack, 0xfffffffffffffe88, 8) MULTIEQUAL (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8)]
[(stack, 0xfffffffffffffe84, 4) MULTIEQUAL (stack, 0xfffffffffffffe84, 4) , (stack, 0xfffffffffffffe84, 4) , (stack, 0xfffffffffffffe84, 4)]
[(stack, 0xfffffffffffffe80, 4) MULTIEQUAL (stack, 0xfffffffffffffe80, 4) , (stack, 0xfffffffffffffe80, 4) , (stack, 0xfffffffffffffe80, 4)]
[(ram, 0x4f08e8, 4) MULTIEQUAL (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4)]
[(ram, 0x4f08b0, 8) MULTIEQUAL (ram, 0x4f08b0, 8) , (ram, 0x4f08b0, 8) , (ram, 0x4f08b0, 8)]
[(ram, 0x4f08a8, 8) MULTIEQUAL (ram, 0x4f08a8, 8) , (ram, 0x4f08a8, 8) , (ram, 0x4f08a8, 8)]
[(ram, 0x4ed5e4, 4) MULTIEQUAL (ram, 0x4ed5e4, 4) , (ram, 0x4ed5e4, 4) , (ram, 0x4ed5e4, 4)]
[(ram, 0x4ed5e0, 4) MULTIEQUAL (ram, 0x4ed5e0, 4) , (ram, 0x4ed5e0, 4) , (ram, 0x4ed5e0, 4)]
[(ram, 0x4eaea8, 8) MULTIEQUAL (ram, 0x4eaea8, 8) , (ram, 0x4eaea8, 8) , (ram, 0x4eaea8, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x14f1f4, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4f08f8, 4) , (const, 0x0, 4), (ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[ ---  CALLOTHER (const, 0x11, 4)]
[(unique, 0x100003ff, 4) COPY (unique, 0x10000393, 4), (unique, 0x10000393, 4) INT_ADD (ram, 0x4ed5e0, 4) , (const, 0xffffffff, 4)]
[ ---  CBRANCH (ram, 0x14f216, 1) , (unique, 0x10000397, 1), (unique, 0x10000397, 1) INT_NOTEQUAL (unique, 0x10000393, 4) , (const, 0x0, 4), (unique, 0x10000393, 4) INT_ADD (ram, 0x4ed5e0, 4) , (const, 0xffffffff, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x391, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x391, 4)]
[(ram, 0x4eaea8, 8) INDIRECT (ram, 0x4eaea8, 8) , (const, 0x391, 4)]
[(ram, 0x4ed5e4, 4) INDIRECT (ram, 0x4ed5e4, 4) , (const, 0x391, 4)]
[(ram, 0x4f08a8, 8) INDIRECT (ram, 0x4f08a8, 8) , (const, 0x391, 4)]
[(ram, 0x4f08b0, 8) INDIRECT (ram, 0x4f08b0, 8) , (const, 0x391, 4)]
[(ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x391, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x391, 4)]
[(stack, 0xfffffffffffffe80, 4) INDIRECT (stack, 0xfffffffffffffe80, 4) , (const, 0x391, 4)]
[(stack, 0xfffffffffffffe84, 4) INDIRECT (stack, 0xfffffffffffffe84, 4) , (const, 0x391, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x391, 4)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x391, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x391, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x391, 4)]
[(stack, 0xffffffffffffffd0, 4) INDIRECT (stack, 0xffffffffffffffd0, 4) , (const, 0x391, 4)]
[(stack, 0xffffffffffffffe0, 8) INDIRECT (stack, 0xffffffffffffffe0, 8) , (const, 0x391, 4)]
[ ---  CALL (ram, 0x2306c0, 8) , (unique, 0x100002f6, 8), (unique, 0x100002f6, 8) PTRSUB (const, 0x0, 8) , (const, 0x4ed5e0, 8)]
[(unique, 0x100003fb, 4) COPY (ram, 0x4ed5e0, 4), (ram, 0x4ed5e0, 4) INDIRECT (ram, 0x4ed5e0, 4) , (const, 0x391, 4), (ram, 0x4ed5e0, 4) INT_ADD (ram, 0x4ed5e0, 4) , (const, 0xffffffff, 4)]
[(stack, 0xffffffffffffffe0, 8) MULTIEQUAL (stack, 0xffffffffffffffe0, 8) , (stack, 0xffffffffffffffe0, 8)]
[(stack, 0xffffffffffffffd0, 4) MULTIEQUAL (stack, 0xffffffffffffffd0, 4) , (stack, 0xffffffffffffffd0, 4)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xfffffffffffffe90, 8) MULTIEQUAL (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8)]
[(stack, 0xfffffffffffffe88, 8) MULTIEQUAL (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8)]
[(stack, 0xfffffffffffffe84, 4) MULTIEQUAL (stack, 0xfffffffffffffe84, 4) , (stack, 0xfffffffffffffe84, 4)]
[(stack, 0xfffffffffffffe80, 4) MULTIEQUAL (stack, 0xfffffffffffffe80, 4) , (stack, 0xfffffffffffffe80, 4)]
[(ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(ram, 0x4f08e8, 4) MULTIEQUAL (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4)]
[(ram, 0x4f08b0, 8) MULTIEQUAL (ram, 0x4f08b0, 8) , (ram, 0x4f08b0, 8)]
[(ram, 0x4f08a8, 8) MULTIEQUAL (ram, 0x4f08a8, 8) , (ram, 0x4f08a8, 8)]
[(ram, 0x4ed5e4, 4) MULTIEQUAL (ram, 0x4ed5e4, 4) , (ram, 0x4ed5e4, 4)]
[(ram, 0x4eaea8, 8) MULTIEQUAL (ram, 0x4eaea8, 8) , (ram, 0x4eaea8, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x100003eb, 4) COPY (ram, 0x4ed5e0, 4), (ram, 0x4ed5e0, 4) COPY (unique, 0x10000403, 4), (unique, 0x10000403, 4) MULTIEQUAL (unique, 0x100003fb, 4) , (unique, 0x100003ff, 4)]
[(unique, 0x1000041b, 4) COPY (register, 0x0, 4), (register, 0x0, 4) COPY (const, 0xffffffff, 4)]
[ ---  BRANCH (ram, 0x14f157, 1)]
[(stack, 0xffffffffffffffd0, 4) MULTIEQUAL (stack, 0xffffffffffffffd0, 4) , (stack, 0xffffffffffffffd0, 4) , (stack, 0xffffffffffffffd0, 4)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xfffffffffffffe90, 8) MULTIEQUAL (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8) , (stack, 0xfffffffffffffe90, 8)]
[(stack, 0xfffffffffffffe88, 8) MULTIEQUAL (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8)]
[(stack, 0xfffffffffffffe84, 4) MULTIEQUAL (stack, 0xfffffffffffffe84, 4) , (stack, 0xfffffffffffffe84, 4) , (stack, 0xfffffffffffffe84, 4)]
[(stack, 0xfffffffffffffe80, 4) MULTIEQUAL (stack, 0xfffffffffffffe80, 4) , (stack, 0xfffffffffffffe80, 4) , (stack, 0xfffffffffffffe80, 4)]
[(ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(ram, 0x4f08e8, 4) MULTIEQUAL (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4)]
[(ram, 0x4f08b0, 8) MULTIEQUAL (ram, 0x4f08b0, 8) , (ram, 0x4f08b0, 8) , (ram, 0x4f08b0, 8)]
[(ram, 0x4f08a8, 8) MULTIEQUAL (ram, 0x4f08a8, 8) , (ram, 0x4f08a8, 8) , (ram, 0x4f08a8, 8)]
[(ram, 0x4ed5e4, 4) MULTIEQUAL (ram, 0x4ed5e4, 4) , (ram, 0x4ed5e4, 4) , (ram, 0x4ed5e4, 4)]
[(ram, 0x4eaea8, 8) MULTIEQUAL (ram, 0x4eaea8, 8) , (ram, 0x4eaea8, 8) , (ram, 0x4eaea8, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x0, 4) MULTIEQUAL (unique, 0x1000041b, 4) , (unique, 0x1000041f, 4) , (unique, 0x10000423, 4)]
[(ram, 0x4ed5e0, 4) COPY (unique, 0x100003f7, 4), (unique, 0x100003f7, 4) MULTIEQUAL (unique, 0x100003eb, 4) , (unique, 0x100003ef, 4) , (unique, 0x100003f3, 4)]
[ ---  CBRANCH (ram, 0x14f35b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffffe0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x100004bf, 8), (unique, 0x100004bf, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8), (stack, 0xffffffffffffffe0, 8) MULTIEQUAL (stack, 0xffffffffffffffe0, 8) , (stack, 0xffffffffffffffe0, 8) , (stack, 0xffffffffffffffe0, 8)]
[(ram, 0x4eae68, 8) COPY (ram, 0x4eae68, 8)]
[(ram, 0x4eaea8, 8) COPY (ram, 0x4eaea8, 8)]
[(ram, 0x4ed5e0, 4) COPY (ram, 0x4ed5e0, 4)]
[(ram, 0x4ed5e4, 4) COPY (ram, 0x4ed5e4, 4)]
[(ram, 0x4f08a8, 8) COPY (ram, 0x4f08a8, 8)]
[(ram, 0x4f08b0, 8) COPY (ram, 0x4f08b0, 8)]
[(ram, 0x4f08e8, 4) COPY (ram, 0x4f08e8, 4)]
[(ram, 0x4f08f8, 4) COPY (ram, 0x4f08f8, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 4)]
[(stack, 0xfffffffffffffe80, 4) INDIRECT (stack, 0xfffffffffffffe80, 4) , (const, 0x208, 4)]
[(stack, 0xfffffffffffffe84, 4) INDIRECT (stack, 0xfffffffffffffe84, 4) , (const, 0x208, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x208, 4)]
[(stack, 0xfffffffffffffe90, 8) INDIRECT (stack, 0xfffffffffffffe90, 8) , (const, 0x208, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x208, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x208, 4)]
[(stack, 0xffffffffffffffd0, 4) INDIRECT (stack, 0xffffffffffffffd0, 4) , (const, 0x208, 4)]
[(stack, 0xffffffffffffffe0, 8) INDIRECT (stack, 0xffffffffffffffe0, 8) , (const, 0x208, 4)]
[ ---  CALL (ram, 0x234c80, 8)]
[(ram, 0x4eae68, 8) COPY (ram, 0x4eae68, 8), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x208, 4)]
[(ram, 0x4eaea8, 8) COPY (ram, 0x4eaea8, 8), (ram, 0x4eaea8, 8) INDIRECT (ram, 0x4eaea8, 8) , (const, 0x208, 4)]
[(ram, 0x4ed5e0, 4) COPY (ram, 0x4ed5e0, 4), (ram, 0x4ed5e0, 4) INDIRECT (ram, 0x4ed5e0, 4) , (const, 0x208, 4)]
[(ram, 0x4ed5e4, 4) COPY (ram, 0x4ed5e4, 4), (ram, 0x4ed5e4, 4) INDIRECT (ram, 0x4ed5e4, 4) , (const, 0x208, 4)]
[(ram, 0x4f08a8, 8) COPY (ram, 0x4f08a8, 8), (ram, 0x4f08a8, 8) INDIRECT (ram, 0x4f08a8, 8) , (const, 0x208, 4)]
[(ram, 0x4f08b0, 8) COPY (ram, 0x4f08b0, 8), (ram, 0x4f08b0, 8) INDIRECT (ram, 0x4f08b0, 8) , (const, 0x208, 4)]
[(ram, 0x4f08e8, 4) COPY (ram, 0x4f08e8, 4), (ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x208, 4)]
[(ram, 0x4f08f8, 4) COPY (ram, 0x4f08f8, 4), (ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x208, 4)]
[ ---  RETURN (const, 0x1, 4)]
