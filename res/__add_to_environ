[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff88, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff88, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff88, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff88, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff88, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff88, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff88, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff88, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff88, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff88, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x39, 4)]
[(ram, 0x4c7cd8, 8) INDIRECT (ram, 0x4c7cd8, 8) , (const, 0x39, 4)]
[(ram, 0x4c7f10, 8) INDIRECT (ram, 0x4c7f10, 8) , (const, 0x39, 4)]
[(ram, 0x4c7f20, 4) INDIRECT (ram, 0x4c7f20, 4) , (const, 0x39, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x39, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (unique, 0x100003fa, 8) , (const, 0x39, 4), (unique, 0x100003fa, 8) COPY (register, 0x30, 8)]
[(stack, 0xffffffffffffffa4, 4) INDIRECT (unique, 0x10000402, 4) , (const, 0x39, 4), (unique, 0x10000402, 4) COPY (register, 0x8, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x39, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (unique, 0x1000040e, 8) , (const, 0x39, 4), (unique, 0x1000040e, 8) COPY (register, 0x10, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x39, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x1000042e, 8), (unique, 0x1000042e, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8)]
[(register, 0x0, 8) CALL (ram, 0x401190, 8)]
[ ---  CBRANCH (ram, 0x46a800, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x10, 8) , (const, 0x0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x364, 4)]
[(ram, 0x4c7cd8, 8) INDIRECT (ram, 0x4c7cd8, 8) , (const, 0x364, 4)]
[(ram, 0x4c7f10, 8) INDIRECT (ram, 0x4c7f10, 8) , (const, 0x364, 4)]
[(ram, 0x4c7f20, 4) INDIRECT (ram, 0x4c7f20, 4) , (const, 0x364, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x364, 4)]
[(stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0x364, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x364, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x364, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x364, 4)]
[(register, 0x0, 8) INT_ADD (register, 0x0, 8) , (const, 0x1, 8), (register, 0x0, 8) CALL (ram, 0x401190, 8) , (stack, 0xffffffffffffff98, 8)]
[ ---  BRANCH (ram, 0x46a6b6, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa4, 4) MULTIEQUAL (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (register, 0x0, 8)]
[(ram, 0x4c7f20, 4) MULTIEQUAL (ram, 0x4c7f20, 4) , (ram, 0x4c7f20, 4)]
[(ram, 0x4c7f10, 8) MULTIEQUAL (ram, 0x4c7f10, 8) , (ram, 0x4c7f10, 8)]
[(ram, 0x4c7cd8, 8) MULTIEQUAL (ram, 0x4c7cd8, 8) , (ram, 0x4c7cd8, 8)]
[ ---  CBRANCH (ram, 0x46a930, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10000436, 8), (unique, 0x10000436, 8) INT_ADD (register, 0x110, 8) , (const, 0x18, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CALLOTHER (const, 0x11, 4)]
[ ---  CBRANCH (const, 0x4, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4c7f20, 4) , (const, 0x0, 4)]
[(ram, 0x4c7f20, 4) COPY (const, 0x1, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x35d, 4)]
[(ram, 0x4c7cd8, 8) INDIRECT (ram, 0x4c7cd8, 8) , (const, 0x35d, 4)]
[(ram, 0x4c7f10, 8) INDIRECT (ram, 0x4c7f10, 8) , (const, 0x35d, 4)]
[(ram, 0x4c7f20, 4) INDIRECT (ram, 0x4c7f20, 4) , (const, 0x35d, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x35d, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x35d, 4)]
[(stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0x35d, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x35d, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x35d, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x35d, 4)]
[ ---  CALL (ram, 0x421390, 8) , (unique, 0x10000258, 8), (unique, 0x10000258, 8) PTRSUB (const, 0x0, 8) , (const, 0x4c7f20, 8)]
[ ---  BRANCH (ram, 0x46a6d2, 1)]
[ ---  CBRANCH (const, 0x4, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4c7f20, 4) , (const, 0x0, 4)]
[(ram, 0x4c7f20, 4) COPY (const, 0x1, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa4, 4) MULTIEQUAL (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(ram, 0x4c7f20, 4) MULTIEQUAL (ram, 0x4c7f20, 4) , (ram, 0x4c7f20, 4) , (ram, 0x4c7f20, 4) , (ram, 0x4c7f20, 4)]
[(ram, 0x4c7f10, 8) MULTIEQUAL (ram, 0x4c7f10, 8) , (ram, 0x4c7f10, 8) , (ram, 0x4c7f10, 8) , (ram, 0x4c7f10, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x46a7f0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4c7cd8, 8) , (const, 0x0, 8), (ram, 0x4c7cd8, 8) MULTIEQUAL (ram, 0x4c7cd8, 8) , (ram, 0x4c7cd8, 8) , (ram, 0x4c7cd8, 8) , (ram, 0x4c7cd8, 8)]
[ ---  CBRANCH (ram, 0x46a7f0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x1000043e, 8), (unique, 0x1000043e, 8) CAST (unique, 0x100002b8, 8), (unique, 0x100002b8, 8) PTRSUB (ram, 0x4c7cd8, 8) , (const, 0x0, 8)]
[(register, 0x30, 8) COPY (const, 0x10, 8)]
[(register, 0x10, 8) COPY (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x46a72e, 1)]
[(unique, 0x10000362, 8) COPY (ram, 0x4c7cd8, 8)]
[(unique, 0x100003ca, 8) COPY (register, 0xb8, 8), (register, 0xb8, 8) COPY (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x46a6fb, 1)]
[(register, 0x18, 8) MULTIEQUAL (unique, 0x10000362, 8) , (register, 0x18, 8)]
[(register, 0xb8, 8) COPY (unique, 0x100003da, 8), (unique, 0x100003da, 8) MULTIEQUAL (unique, 0x100003ca, 8) , (unique, 0x100003d2, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x8b, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4c7cd8, 8) INDIRECT (ram, 0x4c7cd8, 8) , (const, 0x8b, 4), (ram, 0x4c7cd8, 8) MULTIEQUAL (ram, 0x4c7cd8, 8) , (ram, 0x4c7cd8, 8)]
[(ram, 0x4c7f10, 8) INDIRECT (ram, 0x4c7f10, 8) , (const, 0x8b, 4), (ram, 0x4c7f10, 8) MULTIEQUAL (ram, 0x4c7f10, 8) , (ram, 0x4c7f10, 8)]
[(ram, 0x4c7f20, 4) INDIRECT (ram, 0x4c7f20, 4) , (const, 0x8b, 4), (ram, 0x4c7f20, 4) MULTIEQUAL (ram, 0x4c7f20, 4) , (ram, 0x4c7f20, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x8b, 4), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x8b, 4), (stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0x8b, 4), (stack, 0xffffffffffffffa4, 4) MULTIEQUAL (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x8b, 4), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x8b, 4), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x8b, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CBRANCH (ram, 0x46a715, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x4010d0, 8) , (register, 0xa8, 8) , (register, 0x38, 8) , (register, 0x0, 8), (register, 0xa8, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8)]
[(unique, 0x100003e2, 8) COPY (ram, 0x4c7cd8, 8)]
[ ---  CBRANCH (ram, 0x46a78e, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x3d, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3b80, 8), (unique, 0x3b80, 8) CAST (unique, 0x10000446, 8), (unique, 0x10000446, 8) INT_ADD (register, 0xa8, 8) , (register, 0x0, 8)]
[(register, 0x18, 8) CAST (unique, 0x10000456, 8), (unique, 0x10000456, 8) PTRADD (unique, 0x100002d0, 8) , (const, 0x8, 8) , (const, 0x1, 8), (unique, 0x100002d0, 8) PTRSUB (register, 0x18, 8) , (const, 0x0, 8)]
[(unique, 0x100003d2, 8) COPY (unique, 0x3100, 8), (unique, 0x3100, 8) INT_ADD (register, 0xb8, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x46a6f8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x1000044e, 8), (unique, 0x1000044e, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0x100002c0, 8) , (const, 0x8, 8) , (const, 0x1, 8), (unique, 0x100002c0, 8) PTRSUB (register, 0x18, 8) , (const, 0x0, 8)]
[(unique, 0x3580, 8) INT_ADD (unique, 0x3480, 8) , (const, 0x18, 8), (unique, 0x3480, 8) INT_MULT (register, 0xb8, 8) , (const, 0x8, 8)]
[(unique, 0x10000352, 8) COPY (ram, 0x4c7f10, 8), (ram, 0x4c7f10, 8) MULTIEQUAL (ram, 0x4c7f10, 8) , (ram, 0x4c7f10, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xc9, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4c7cd8, 8) INDIRECT (ram, 0x4c7cd8, 8) , (const, 0xc9, 4), (ram, 0x4c7cd8, 8) MULTIEQUAL (ram, 0x4c7cd8, 8) , (ram, 0x4c7cd8, 8)]
[(ram, 0x4c7f10, 8) INDIRECT (ram, 0x4c7f10, 8) , (const, 0xc9, 4), (ram, 0x4c7f10, 8) MULTIEQUAL (ram, 0x4c7f10, 8) , (ram, 0x4c7f10, 8)]
[(ram, 0x4c7f20, 4) INDIRECT (ram, 0x4c7f20, 4) , (const, 0xc9, 4), (ram, 0x4c7f20, 4) MULTIEQUAL (ram, 0x4c7f20, 4) , (ram, 0x4c7f20, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0xc9, 4), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0xc9, 4), (stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0xc9, 4), (stack, 0xffffffffffffffa4, 4) MULTIEQUAL (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (unique, 0x10000406, 8) , (const, 0xc9, 4), (unique, 0x10000406, 8) COPY (register, 0x10, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0x10, 8)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0xc9, 4), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xc9, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(unique, 0x1000039a, 8) COPY (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x46aa13, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x1000045e, 8), (unique, 0x1000045e, 8) CALL (ram, 0x427240, 8) , (ram, 0x4c7f10, 8) , (register, 0x30, 8), (register, 0x30, 8) MULTIEQUAL (unique, 0x3580, 8) , (register, 0x30, 8), (ram, 0x4c7f10, 8) MULTIEQUAL (ram, 0x4c7f10, 8) , (ram, 0x4c7f10, 8)]
[(unique, 0x3680, 8) INT_MULT (stack, 0xffffffffffffffa8, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x46a773, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x10000352, 8) , (ram, 0x4c7cd8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xe9, 4)]
[(ram, 0x4c7cd8, 8) INDIRECT (ram, 0x4c7cd8, 8) , (const, 0xe9, 4)]
[(ram, 0x4c7f10, 8) INDIRECT (ram, 0x4c7f10, 8) , (const, 0xe9, 4)]
[(ram, 0x4c7f20, 4) INDIRECT (ram, 0x4c7f20, 4) , (const, 0xe9, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0xe9, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0xe9, 4)]
[(stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0xe9, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0xe9, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0xe9, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xe9, 4)]
[(register, 0x0, 8) CAST (unique, 0x10000466, 8), (unique, 0x10000466, 8) CALL (ram, 0x401060, 8) , (register, 0x0, 8) , (ram, 0x4c7cd8, 8) , (unique, 0x3680, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa4, 4) MULTIEQUAL (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4c7f10, 8) INDIRECT (unique, 0x100003f2, 8) , (const, 0xf7, 4), (unique, 0x100003f2, 8) COPY (register, 0x8, 8), (register, 0x8, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[(ram, 0x4c7f20, 4) INDIRECT (ram, 0x4c7f20, 4) , (const, 0xf7, 4), (ram, 0x4c7f20, 4) MULTIEQUAL (ram, 0x4c7f20, 4) , (ram, 0x4c7f20, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x18, 8) , (const, 0x0, 16), (register, 0x18, 8) CAST (unique, 0x1000046e, 8), (unique, 0x1000046e, 8) PTRADD (unique, 0x100002e0, 8) , (unique, 0x3680, 8) , (const, 0x1, 8), (unique, 0x100002e0, 8) PTRSUB (register, 0x8, 8) , (const, 0x0, 8), (register, 0x8, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000476, 8), (unique, 0x10000476, 8) CAST (unique, 0x100002f0, 8), (unique, 0x100002f0, 8) PTRSUB (register, 0x18, 8) , (const, 0x0, 8), (register, 0x18, 8) CAST (unique, 0x1000046e, 8), (unique, 0x1000046e, 8) PTRADD (unique, 0x100002e0, 8) , (unique, 0x3680, 8) , (const, 0x1, 8), (unique, 0x100002e0, 8) PTRSUB (register, 0x8, 8) , (const, 0x0, 8), (register, 0x8, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[(unique, 0x100003ea, 8) COPY (register, 0x8, 8), (register, 0x8, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa4, 4) MULTIEQUAL (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(ram, 0x4c7f20, 4) MULTIEQUAL (ram, 0x4c7f20, 4) , (ram, 0x4c7f20, 4)]
[(ram, 0x4c7f10, 8) MULTIEQUAL (ram, 0x4c7f10, 8) , (ram, 0x4c7f10, 8)]
[(ram, 0x4c7cd8, 8) MULTIEQUAL (unique, 0x100003e2, 8) , (unique, 0x100003ea, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x18, 8) MULTIEQUAL (register, 0x18, 8) , (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x46a7e0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xa8, 8) , (const, 0x0, 8), (register, 0xa8, 8) MULTIEQUAL (register, 0xa8, 8) , (unique, 0xbd80, 8)]
[ ---  CBRANCH (ram, 0x46a7e0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffffa4, 4) , (const, 0x0, 4)]
[(unique, 0x1000036a, 8) COPY (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x46a820, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffffb0, 8) , (const, 0x0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1a6, 4)]
[(ram, 0x4c7cd8, 8) INDIRECT (ram, 0x4c7cd8, 8) , (const, 0x1a6, 4)]
[(ram, 0x4c7f10, 8) INDIRECT (ram, 0x4c7f10, 8) , (const, 0x1a6, 4)]
[(ram, 0x4c7f20, 4) INDIRECT (ram, 0x4c7f20, 4) , (const, 0x1a6, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x1a6, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x1a6, 4)]
[(stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0x1a6, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x1a6, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x1a6, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1a6, 4)]
[(register, 0x0, 4) CALL (ram, 0x421340, 8) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) INT_ADD (unique, 0x3880, 8) , (register, 0x0, 8), (unique, 0x3880, 8) INT_ADD (stack, 0xffffffffffffff90, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x46a842, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (unique, 0x3a00, 8) , (const, 0x1001, 8), (unique, 0x3a00, 8) INT_ADD (unique, 0x3880, 8) , (register, 0x0, 8), (unique, 0x3880, 8) INT_ADD (stack, 0xffffffffffffff90, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x46a99f, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x0, 4)]
[(register, 0x8, 8) PTRADD (unique, 0x10000308, 8) , (unique, 0x10000144, 8) , (const, 0x1, 8), (unique, 0x10000308, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff88, 8), (unique, 0x10000144, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (unique, 0x3100, 8) , (const, 0xfffffffffffff000, 8), (unique, 0x3100, 8) INT_ADD (unique, 0x3a00, 8) , (const, 0x17, 8)]
[(unique, 0x10000164, 4) SUBPIECE (unique, 0x3100, 8) , (const, 0x0, 4), (unique, 0x3100, 8) INT_ADD (unique, 0x3a00, 8) , (const, 0x17, 8)]
[(unique, 0x10000416, 8) COPY (register, 0x20, 8)]
[(unique, 0x10000216, 8) MULTIEQUAL (unique, 0x10000416, 8) , (unique, 0x1000041e, 8)]
[(unique, 0x1000021e, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x46a876, 1) , (unique, 0x1000020d, 1), (unique, 0x1000020d, 1) INT_NOTEQUAL (register, 0x20, 8) , (register, 0x8, 8), (register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8)]
[(register, 0x20, 8) PTRADD (unique, 0x10000216, 8) , (const, 0xfffffffffffff000, 8) , (const, 0x1, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000486, 8) , (unique, 0xbe00, 8), (unique, 0x10000486, 8) CAST (unique, 0x3c80, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x1000047e, 8), (unique, 0x1000047e, 8) CAST (unique, 0x3c80, 8), (unique, 0x3c80, 8) PTRADD (unique, 0x10000216, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x20, 8) PTRADD (unique, 0x10000216, 8) , (const, 0xfffffffffffff000, 8) , (const, 0x1, 8)]
[(unique, 0x1000041e, 8) COPY (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x10000216, 8) , (const, 0xfffffffffffff000, 8) , (const, 0x1, 8)]
[(register, 0x20, 8) PTRADD (unique, 0x1000021e, 8) , (unique, 0x1000016c, 8) , (const, 0x1, 8), (unique, 0x1000016c, 8) INT_2COMP (register, 0x10, 8), (register, 0x10, 8) INT_ZEXT (register, 0x10, 4), (register, 0x10, 4) INT_AND (unique, 0x10000164, 4) , (const, 0xff0, 4)]
[(register, 0x20, 8) PTRADD (unique, 0x1000021e, 8) , (unique, 0x1000016c, 8) , (const, 0x1, 8), (unique, 0x1000016c, 8) INT_2COMP (register, 0x10, 8), (register, 0x10, 8) INT_ZEXT (register, 0x10, 4), (register, 0x10, 4) INT_AND (unique, 0x10000164, 4) , (const, 0xff0, 4)]
[(register, 0x20, 8) PTRADD (unique, 0x1000021e, 8) , (unique, 0x1000016c, 8) , (const, 0x1, 8), (unique, 0x1000016c, 8) INT_2COMP (register, 0x10, 8), (register, 0x10, 8) INT_ZEXT (register, 0x10, 4), (register, 0x10, 4) INT_AND (unique, 0x10000164, 4) , (const, 0xff0, 4)]
[ ---  CBRANCH (ram, 0x46a994, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x10, 8) , (const, 0x0, 8), (register, 0x10, 8) INT_ZEXT (register, 0x10, 4), (register, 0x10, 4) INT_AND (unique, 0x10000164, 4) , (const, 0xff0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000496, 8) , (unique, 0xbe00, 8), (unique, 0x10000496, 8) CAST (unique, 0x3880, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x1000048e, 8), (unique, 0x1000048e, 8) CAST (unique, 0x3880, 8), (unique, 0x3880, 8) PTRADD (unique, 0x1000021e, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[ ---  BRANCH (ram, 0x46a888, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100004ae, 8) , (const, 0x46a8a2, 8), (unique, 0x100004ae, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x1000021e, 8) , (unique, 0x10000320, 8) , (const, 0x1, 8), (unique, 0x10000320, 8) INT_ADD (unique, 0x1000016c, 8) , (const, 0xfffffffffffffff8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x0, 8) , (const, 0x3d, 1), (register, 0x0, 8) CAST (unique, 0x100004b6, 8), (unique, 0x100004b6, 8) CALL (ram, 0x401160, 8) , (register, 0x0, 8) , (register, 0x38, 8) , (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x100004a6, 8), (unique, 0x100004a6, 8) INT_AND (unique, 0x1000049e, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x1000049e, 8) CAST (unique, 0x3800, 8), (unique, 0x3800, 8) PTRADD (unique, 0x1000021e, 8) , (unique, 0x10000318, 8) , (const, 0x1, 8), (unique, 0x10000318, 8) INT_ADD (unique, 0x1000016c, 8) , (const, 0xf, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100004be, 8) , (const, 0x46a8b6, 8), (unique, 0x100004be, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x1000021e, 8) , (unique, 0x10000328, 8) , (const, 0x1, 8), (unique, 0x10000328, 8) INT_ADD (unique, 0x1000016c, 8) , (const, 0xfffffffffffffff8, 8)]
[ ---  CALL (ram, 0x401060, 8) , (unique, 0x3100, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff90, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x1, 8), (register, 0x0, 8) CAST (unique, 0x100004b6, 8), (unique, 0x100004b6, 8) CALL (ram, 0x401160, 8) , (register, 0x0, 8) , (register, 0x38, 8) , (register, 0x0, 8), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x238, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x238, 4), (register, 0x0, 8) CAST (unique, 0x100004a6, 8), (unique, 0x100004a6, 8) INT_AND (unique, 0x1000049e, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x1000049e, 8) CAST (unique, 0x3800, 8), (unique, 0x3800, 8) PTRADD (unique, 0x1000021e, 8) , (unique, 0x10000318, 8) , (const, 0x1, 8), (unique, 0x10000318, 8) INT_ADD (unique, 0x1000016c, 8) , (const, 0xf, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100004c6, 8) , (const, 0x46a8cc, 8), (unique, 0x100004c6, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x1000021e, 8) , (unique, 0x10000330, 8) , (const, 0x1, 8), (unique, 0x10000330, 8) INT_ADD (unique, 0x1000016c, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x24b, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x245, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x238, 4)]
[(ram, 0x4c7cd8, 8) INDIRECT (ram, 0x4c7cd8, 8) , (const, 0x24b, 4), (ram, 0x4c7cd8, 8) INDIRECT (ram, 0x4c7cd8, 8) , (const, 0x245, 4), (ram, 0x4c7cd8, 8) INDIRECT (ram, 0x4c7cd8, 8) , (const, 0x240, 4), (ram, 0x4c7cd8, 8) INDIRECT (ram, 0x4c7cd8, 8) , (const, 0x238, 4)]
[(ram, 0x4c7f10, 8) INDIRECT (ram, 0x4c7f10, 8) , (const, 0x24b, 4), (ram, 0x4c7f10, 8) INDIRECT (ram, 0x4c7f10, 8) , (const, 0x245, 4), (ram, 0x4c7f10, 8) INDIRECT (ram, 0x4c7f10, 8) , (const, 0x240, 4), (ram, 0x4c7f10, 8) INDIRECT (ram, 0x4c7f10, 8) , (const, 0x238, 4)]
[(ram, 0x4c7f20, 4) INDIRECT (ram, 0x4c7f20, 4) , (const, 0x24b, 4), (ram, 0x4c7f20, 4) INDIRECT (ram, 0x4c7f20, 4) , (const, 0x245, 4), (ram, 0x4c7f20, 4) INDIRECT (ram, 0x4c7f20, 4) , (const, 0x240, 4), (ram, 0x4c7f20, 4) INDIRECT (ram, 0x4c7f20, 4) , (const, 0x238, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x24b, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x245, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x238, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x24b, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x245, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x238, 4)]
[(stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0x24b, 4), (stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0x245, 4), (stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0x238, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x24b, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x245, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x238, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x24b, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x245, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x238, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x24b, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x245, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x238, 4)]
[ ---  CBRANCH (ram, 0x46a8e1, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x100004d6, 8), (unique, 0x100004d6, 8) CALL (ram, 0x4568a0, 8) , (register, 0x0, 8) , (unique, 0x100004ce, 8) , (unique, 0x10000228, 8), (unique, 0x100004ce, 8) CAST (unique, 0x10000240, 8), (unique, 0x10000240, 8) PTRSUB (const, 0x0, 8) , (const, 0x4c7f18, 8), (unique, 0x10000228, 8) PTRSUB (const, 0x0, 8) , (const, 0x401140, 8), (register, 0x0, 8) CAST (unique, 0x100004a6, 8), (unique, 0x100004a6, 8) INT_AND (unique, 0x1000049e, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x1000049e, 8) CAST (unique, 0x3800, 8), (unique, 0x3800, 8) PTRADD (unique, 0x1000021e, 8) , (unique, 0x10000318, 8) , (const, 0x1, 8), (unique, 0x10000318, 8) INT_ADD (unique, 0x1000016c, 8) , (const, 0xf, 8)]
[(stack, 0xffffffffffffffb0, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x0, 8)]
[(unique, 0x10000372, 8) COPY (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x46a7e7, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100004de, 8) , (const, 0x46a8e9, 8), (unique, 0x100004de, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x1000021e, 8) , (unique, 0x10000338, 8) , (const, 0x1, 8), (unique, 0x10000338, 8) INT_ADD (unique, 0x1000016c, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x269, 4)]
[(ram, 0x4c7cd8, 8) INDIRECT (ram, 0x4c7cd8, 8) , (const, 0x269, 4)]
[(ram, 0x4c7f10, 8) INDIRECT (ram, 0x4c7f10, 8) , (const, 0x269, 4)]
[(ram, 0x4c7f20, 4) INDIRECT (ram, 0x4c7f20, 4) , (const, 0x269, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x269, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x269, 4)]
[(stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0x269, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x269, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x269, 4), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x269, 4)]
[(stack, 0xffffffffffffffb0, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x426550, 8) , (unique, 0x3a00, 8)]
[(unique, 0x100003a2, 8) COPY (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x46aa13, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x426550, 8) , (unique, 0x3a00, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100004e6, 8) , (const, 0x46a904, 8), (unique, 0x100004e6, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x1000021e, 8) , (unique, 0x10000340, 8) , (const, 0x1, 8), (unique, 0x10000340, 8) INT_ADD (unique, 0x1000016c, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x27c, 4)]
[(ram, 0x4c7cd8, 8) INDIRECT (ram, 0x4c7cd8, 8) , (const, 0x27c, 4)]
[(ram, 0x4c7f10, 8) INDIRECT (ram, 0x4c7f10, 8) , (const, 0x27c, 4)]
[(ram, 0x4c7f20, 4) INDIRECT (ram, 0x4c7f20, 4) , (const, 0x27c, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x27c, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x27c, 4)]
[(stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0x27c, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x27c, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x27c, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x27c, 4)]
[ ---  CALL (ram, 0x401060, 8) , (register, 0x0, 8) , (register, 0x0, 8) , (unique, 0x3a00, 8)]
[(unique, 0x10000382, 8) COPY (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x2e7, 4)]
[(ram, 0x4c7cd8, 8) INDIRECT (ram, 0x4c7cd8, 8) , (const, 0x2e7, 4)]
[(ram, 0x4c7f10, 8) INDIRECT (ram, 0x4c7f10, 8) , (const, 0x2e7, 4)]
[(ram, 0x4c7f20, 4) INDIRECT (ram, 0x4c7f20, 4) , (const, 0x2e7, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x2e7, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x2e7, 4)]
[(stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0x2e7, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x2e7, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x2e7, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2e7, 4)]
[(stack, 0xffffffffffffffb0, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x426550, 8) , (unique, 0x3a00, 8)]
[(unique, 0x100003aa, 8) COPY (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x46aa13, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x426550, 8) , (unique, 0x3a00, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa4, 4) MULTIEQUAL (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(ram, 0x4c7f10, 8) MULTIEQUAL (ram, 0x4c7f10, 8) , (ram, 0x4c7f10, 8) , (ram, 0x4c7f10, 8)]
[(ram, 0x4c7cd8, 8) MULTIEQUAL (ram, 0x4c7cd8, 8) , (ram, 0x4c7cd8, 8) , (ram, 0x4c7cd8, 8)]
[(register, 0x20, 8) MULTIEQUAL (unique, 0x1000039a, 8) , (unique, 0x100003a2, 8) , (unique, 0x100003aa, 8)]
[(unique, 0x1000035e, 4) COPY (ram, 0x4c7f20, 4), (ram, 0x4c7f20, 4) MULTIEQUAL (ram, 0x4c7f20, 4) , (ram, 0x4c7f20, 4) , (ram, 0x4c7f20, 4)]
[ ---  CBRANCH (ram, 0x46aa31, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x100004ee, 8), (unique, 0x100004ee, 8) INT_ADD (register, 0x110, 8) , (const, 0x18, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4c7f20, 4) COPY (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x46aa4e, 1) , (unique, 0xd080, 1), (unique, 0xd080, 1) INT_SLESS (const, 0x1, 4) , (unique, 0x1000035e, 4)]
[ ---  CALLOTHER (const, 0x5, 4)]
[ ---  BRANCH (ram, 0x46aa3e, 1)]
[(register, 0x80, 4) COPY (const, 0xffffffff, 4)]
[ ---  BRANCH (ram, 0x46a7b3, 1)]
[(ram, 0x4c7f20, 4) INT_ADD (ram, 0x4c7f20, 4) , (const, 0xffffffff, 4)]
[(register, 0x80, 4) COPY (const, 0xffffffff, 4)]
[ ---  BRANCH (ram, 0x46a7b3, 1)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x0, 8) , (const, 0x3d, 1), (register, 0x0, 8) CAST (unique, 0x100004f6, 8), (unique, 0x100004f6, 8) CALL (ram, 0x401160, 8) , (register, 0x0, 8) , (register, 0x38, 8) , (register, 0x0, 8)]
[ ---  CALL (ram, 0x401060, 8) , (unique, 0x3100, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff90, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x1, 8), (register, 0x0, 8) CAST (unique, 0x100004f6, 8), (unique, 0x100004f6, 8) CALL (ram, 0x401160, 8) , (register, 0x0, 8) , (register, 0x38, 8) , (register, 0x0, 8), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x2fd, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x2fd, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x310, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x30a, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x2fd, 4)]
[(ram, 0x4c7cd8, 8) INDIRECT (ram, 0x4c7cd8, 8) , (const, 0x310, 4), (ram, 0x4c7cd8, 8) INDIRECT (ram, 0x4c7cd8, 8) , (const, 0x30a, 4), (ram, 0x4c7cd8, 8) INDIRECT (ram, 0x4c7cd8, 8) , (const, 0x305, 4), (ram, 0x4c7cd8, 8) INDIRECT (ram, 0x4c7cd8, 8) , (const, 0x2fd, 4)]
[(ram, 0x4c7f10, 8) INDIRECT (ram, 0x4c7f10, 8) , (const, 0x310, 4), (ram, 0x4c7f10, 8) INDIRECT (ram, 0x4c7f10, 8) , (const, 0x30a, 4), (ram, 0x4c7f10, 8) INDIRECT (ram, 0x4c7f10, 8) , (const, 0x305, 4), (ram, 0x4c7f10, 8) INDIRECT (ram, 0x4c7f10, 8) , (const, 0x2fd, 4)]
[(ram, 0x4c7f20, 4) INDIRECT (ram, 0x4c7f20, 4) , (const, 0x310, 4), (ram, 0x4c7f20, 4) INDIRECT (ram, 0x4c7f20, 4) , (const, 0x30a, 4), (ram, 0x4c7f20, 4) INDIRECT (ram, 0x4c7f20, 4) , (const, 0x305, 4), (ram, 0x4c7f20, 4) INDIRECT (ram, 0x4c7f20, 4) , (const, 0x2fd, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x310, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x30a, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x2fd, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x310, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x30a, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x2fd, 4)]
[(stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0x310, 4), (stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0x30a, 4), (stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0x2fd, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x310, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x30a, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x2fd, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x310, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x30a, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x2fd, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x310, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x30a, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2fd, 4)]
[(unique, 0x1000038a, 8) COPY (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x46a904, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10000506, 8), (unique, 0x10000506, 8) CALL (ram, 0x4568a0, 8) , (register, 0x0, 8) , (unique, 0x100004fe, 8) , (unique, 0x10000238, 8), (unique, 0x100004fe, 8) CAST (unique, 0x10000250, 8), (unique, 0x10000250, 8) PTRSUB (const, 0x0, 8) , (const, 0x4c7f18, 8), (unique, 0x10000238, 8) PTRSUB (const, 0x0, 8) , (const, 0x401140, 8)]
[(unique, 0x10000392, 8) COPY (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x46a904, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000050e, 8) , (const, 0x46a91b, 8), (unique, 0x1000050e, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8), (register, 0x20, 8) MULTIEQUAL (unique, 0x10000382, 8) , (unique, 0x1000038a, 8) , (unique, 0x10000392, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x284, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x284, 4), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x284, 4), (stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0x284, 4), (stack, 0xffffffffffffffa4, 4) MULTIEQUAL (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x284, 4), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x284, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CALL (ram, 0x4564a0, 8) , (stack, 0xffffffffffffffb0, 8) , (unique, 0x10000516, 8) , (unique, 0x10000230, 8), (unique, 0x10000516, 8) CAST (unique, 0x10000248, 8), (unique, 0x10000248, 8) PTRSUB (const, 0x0, 8) , (const, 0x4c7f18, 8), (unique, 0x10000230, 8) PTRSUB (const, 0x0, 8) , (const, 0x401140, 8), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(ram, 0x4c7cd8, 8) INDIRECT (ram, 0x4c7cd8, 8) , (const, 0x289, 4), (ram, 0x4c7cd8, 8) INDIRECT (ram, 0x4c7cd8, 8) , (const, 0x284, 4), (ram, 0x4c7cd8, 8) MULTIEQUAL (ram, 0x4c7cd8, 8) , (ram, 0x4c7cd8, 8) , (ram, 0x4c7cd8, 8)]
[(ram, 0x4c7f10, 8) INDIRECT (ram, 0x4c7f10, 8) , (const, 0x289, 4), (ram, 0x4c7f10, 8) INDIRECT (ram, 0x4c7f10, 8) , (const, 0x284, 4), (ram, 0x4c7f10, 8) MULTIEQUAL (ram, 0x4c7f10, 8) , (ram, 0x4c7f10, 8) , (ram, 0x4c7f10, 8)]
[(ram, 0x4c7f20, 4) INDIRECT (ram, 0x4c7f20, 4) , (const, 0x289, 4), (ram, 0x4c7f20, 4) INDIRECT (ram, 0x4c7f20, 4) , (const, 0x284, 4), (ram, 0x4c7f20, 4) MULTIEQUAL (ram, 0x4c7f20, 4) , (ram, 0x4c7f20, 4) , (ram, 0x4c7f20, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000051e, 8) , (stack, 0xffffffffffffffb0, 8), (unique, 0x1000051e, 8) CAST (unique, 0x10000348, 8), (unique, 0x10000348, 8) PTRSUB (register, 0x18, 8) , (const, 0x0, 8), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x284, 4), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[ ---  BRANCH (ram, 0x46a79a, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x32c, 4)]
[(ram, 0x4c7cd8, 8) INDIRECT (ram, 0x4c7cd8, 8) , (const, 0x32c, 4)]
[(ram, 0x4c7f10, 8) INDIRECT (ram, 0x4c7f10, 8) , (const, 0x32c, 4)]
[(ram, 0x4c7f20, 4) INDIRECT (ram, 0x4c7f20, 4) , (const, 0x32c, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x32c, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x32c, 4)]
[(stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0x32c, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x32c, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x32c, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x32c, 4)]
[ ---  CALL (ram, 0x426b40, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffb0, 8) COPY (unique, 0xbd80, 8)]
[(unique, 0x1000037a, 8) COPY (register, 0x20, 8)]
[ ---  BRANCH (ram, 0x46a7e7, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa4, 4) MULTIEQUAL (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x20, 8) MULTIEQUAL (unique, 0x1000036a, 8) , (unique, 0x10000372, 8) , (unique, 0x1000037a, 8)]
[(ram, 0x4c7cd8, 8) INDIRECT (ram, 0x4c7cd8, 8) , (const, 0x19a, 4), (ram, 0x4c7cd8, 8) MULTIEQUAL (ram, 0x4c7cd8, 8) , (ram, 0x4c7cd8, 8) , (ram, 0x4c7cd8, 8)]
[(ram, 0x4c7f10, 8) INDIRECT (ram, 0x4c7f10, 8) , (const, 0x19a, 4), (ram, 0x4c7f10, 8) MULTIEQUAL (ram, 0x4c7f10, 8) , (ram, 0x4c7f10, 8) , (ram, 0x4c7f10, 8)]
[(ram, 0x4c7f20, 4) INDIRECT (ram, 0x4c7f20, 4) , (const, 0x19a, 4), (ram, 0x4c7f20, 4) MULTIEQUAL (ram, 0x4c7f20, 4) , (ram, 0x4c7f20, 4) , (ram, 0x4c7f20, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000526, 8) , (stack, 0xffffffffffffffb0, 8), (unique, 0x10000526, 8) CAST (unique, 0x100002f8, 8), (unique, 0x100002f8, 8) PTRSUB (register, 0x18, 8) , (const, 0x0, 8), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[ ---  BRANCH (ram, 0x46a79a, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa4, 4) MULTIEQUAL (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(ram, 0x4c7f10, 8) MULTIEQUAL (ram, 0x4c7f10, 8) , (ram, 0x4c7f10, 8) , (ram, 0x4c7f10, 8)]
[(ram, 0x4c7cd8, 8) MULTIEQUAL (ram, 0x4c7cd8, 8) , (ram, 0x4c7cd8, 8) , (ram, 0x4c7cd8, 8)]
[(unique, 0x1000035a, 4) COPY (ram, 0x4c7f20, 4), (ram, 0x4c7f20, 4) MULTIEQUAL (ram, 0x4c7f20, 4) , (ram, 0x4c7f20, 4) , (ram, 0x4c7f20, 4)]
[(unique, 0x10000426, 8) COPY (register, 0x20, 8), (register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x46a960, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x1000052e, 8), (unique, 0x1000052e, 8) INT_ADD (register, 0x110, 8) , (const, 0x18, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4c7f20, 4) COPY (const, 0x0, 4)]
[(register, 0x80, 4) COPY (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x46a7b3, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (const, 0x1, 4) , (unique, 0x1000035a, 4)]
[ ---  CALLOTHER (const, 0x5, 4)]
[ ---  BRANCH (ram, 0x46a7b3, 1)]
[(ram, 0x4c7f20, 4) INT_ADD (ram, 0x4c7f20, 4) , (const, 0xffffffff, 4)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffa4, 4) MULTIEQUAL (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4) , (stack, 0xffffffffffffffa4, 4)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(ram, 0x4c7f20, 4) MULTIEQUAL (ram, 0x4c7f20, 4) , (ram, 0x4c7f20, 4) , (ram, 0x4c7f20, 4) , (ram, 0x4c7f20, 4) , (ram, 0x4c7f20, 4)]
[(ram, 0x4c7f10, 8) MULTIEQUAL (ram, 0x4c7f10, 8) , (ram, 0x4c7f10, 8) , (ram, 0x4c7f10, 8) , (ram, 0x4c7f10, 8) , (ram, 0x4c7f10, 8)]
[(ram, 0x4c7cd8, 8) MULTIEQUAL (ram, 0x4c7cd8, 8) , (ram, 0x4c7cd8, 8) , (ram, 0x4c7cd8, 8) , (ram, 0x4c7cd8, 8) , (ram, 0x4c7cd8, 8)]
[(register, 0x80, 4) MULTIEQUAL (unique, 0xbc80, 4) , (register, 0x80, 4) , (register, 0x80, 4) , (register, 0x80, 4) , (register, 0x80, 4)]
[(register, 0x20, 8) MULTIEQUAL (unique, 0x10000426, 8) , (unique, 0x10000426, 8) , (unique, 0x10000426, 8) , (register, 0x20, 8) , (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x46aa49, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffffc0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10000536, 8), (unique, 0x10000536, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(ram, 0x4c7cd8, 8) COPY (ram, 0x4c7cd8, 8)]
[(ram, 0x4c7f10, 8) COPY (ram, 0x4c7f10, 8)]
[(ram, 0x4c7f20, 4) COPY (ram, 0x4c7f20, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 4), (register, 0x0, 4) COPY (register, 0x80, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000053e, 8) , (const, 0x46aa4e, 8), (unique, 0x1000053e, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x151, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x150, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x151, 4), (stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x150, 4)]
[(stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0x151, 4), (stack, 0xffffffffffffffa4, 4) INDIRECT (stack, 0xffffffffffffffa4, 4) , (const, 0x150, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x151, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x150, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x151, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x150, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x151, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x150, 4)]
[ ---  CALL (ram, 0x458dd0, 8)]
[(ram, 0x4c7cd8, 8) COPY (ram, 0x4c7cd8, 8), (ram, 0x4c7cd8, 8) INDIRECT (ram, 0x4c7cd8, 8) , (const, 0x151, 4)]
[(ram, 0x4c7f10, 8) COPY (ram, 0x4c7f10, 8), (ram, 0x4c7f10, 8) INDIRECT (ram, 0x4c7f10, 8) , (const, 0x151, 4)]
[(ram, 0x4c7f20, 4) COPY (ram, 0x4c7f20, 4), (ram, 0x4c7f20, 4) INDIRECT (ram, 0x4c7f20, 4) , (const, 0x151, 4)]
[ ---  RETURN (const, 0x1, 4)]
