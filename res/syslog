[(unique, 0x10000573, 8) COPY (ram, 0x4c2e78, 8)]
[(unique, 0x10000125, 8) INT_ZEXT (unique, 0x10000627, 4), (unique, 0x10000627, 4) CAST (register, 0x38, 4)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffe78, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffe78, 8)]
[ ---  CBRANCH (ram, 0x1ff788, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 1) , (const, 0x0, 1)]
[(unique, 0x100005f7, 4) COPY (register, 0x1200, 4)]
[(unique, 0x100005fb, 4) COPY (register, 0x1220, 4)]
[(unique, 0x100005ff, 4) COPY (register, 0x1240, 4)]
[(unique, 0x10000603, 4) COPY (register, 0x1260, 4)]
[(unique, 0x10000607, 4) COPY (register, 0x1280, 4)]
[(unique, 0x1000060b, 4) COPY (register, 0x12a0, 4)]
[(unique, 0x1000060f, 4) COPY (register, 0x12c0, 4)]
[(unique, 0x10000613, 4) COPY (register, 0x12e0, 4)]
[(stack, 0xffffffffffffffc8, 4) MULTIEQUAL (stack, 0xffffffffffffffc8, 4) , (unique, 0x10000613, 4)]
[(stack, 0xffffffffffffffb8, 4) MULTIEQUAL (stack, 0xffffffffffffffb8, 4) , (unique, 0x1000060f, 4)]
[(stack, 0xffffffffffffffa8, 4) MULTIEQUAL (stack, 0xffffffffffffffa8, 4) , (unique, 0x1000060b, 4)]
[(stack, 0xffffffffffffff98, 4) MULTIEQUAL (stack, 0xffffffffffffff98, 4) , (unique, 0x10000607, 4)]
[(stack, 0xffffffffffffff88, 4) MULTIEQUAL (stack, 0xffffffffffffff88, 4) , (unique, 0x10000603, 4)]
[(stack, 0xffffffffffffff78, 4) MULTIEQUAL (stack, 0xffffffffffffff78, 4) , (unique, 0x100005ff, 4)]
[(stack, 0xffffffffffffff68, 4) MULTIEQUAL (stack, 0xffffffffffffff68, 4) , (unique, 0x100005fb, 4)]
[(stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (unique, 0x100005f7, 4)]
[(unique, 0x3c80, 8) PTRSUB (register, 0x20, 8) , (const, 0x8, 8)]
[(unique, 0x3c80, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff28, 8)]
[(stack, 0xfffffffffffffe90, 4) COPY (const, 0x10, 4)]
[(stack, 0xfffffffffffffe94, 4) COPY (const, 0x30, 4)]
[(stack, 0xfffffffffffffe80, 8) COPY (const, 0x0, 8)]
[(stack, 0xfffffffffffffe88, 8) COPY (const, 0x0, 8)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x1000062b, 8), (unique, 0x1000062b, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (ram, 0x4c2e78, 8) , (register, 0x110, 8) , (const, 0x1, 8)]
[(unique, 0x1000057b, 8) COPY (unique, 0x10000125, 8)]
[(unique, 0x100005bf, 8) COPY (register, 0x10, 8)]
[(unique, 0x100005cf, 8) COPY (register, 0x8, 8)]
[(unique, 0x100005df, 8) COPY (register, 0x80, 8)]
[(unique, 0x100005ef, 8) COPY (register, 0x88, 8)]
[ ---  CBRANCH (ram, 0x1ffa50, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x100002f8, 4) , (const, 0x0, 4), (unique, 0x100002f8, 4) INT_AND (register, 0x38, 4) , (const, 0xfffffc00, 4)]
[(register, 0x28, 8) INT_ZEXT (register, 0x28, 4), (register, 0x28, 4) INT_AND (register, 0x38, 4) , (const, 0x3ff, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x4d3, 4)]
[(ram, 0x4c2e08, 8) INDIRECT (ram, 0x4c2e08, 8) , (const, 0x4d3, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x4d3, 4)]
[(ram, 0x4c3210, 4) INDIRECT (ram, 0x4c3210, 4) , (const, 0x4d3, 4)]
[(ram, 0x4c3214, 4) INDIRECT (ram, 0x4c3214, 4) , (const, 0x4d3, 4)]
[(ram, 0x4c3218, 4) INDIRECT (ram, 0x4c3218, 4) , (const, 0x4d3, 4)]
[(ram, 0x4c321c, 4) INDIRECT (ram, 0x4c321c, 4) , (const, 0x4d3, 4)]
[(ram, 0x4c6210, 4) INDIRECT (ram, 0x4c6210, 4) , (const, 0x4d3, 4)]
[(ram, 0x4c6218, 8) INDIRECT (ram, 0x4c6218, 8) , (const, 0x4d3, 4)]
[(ram, 0x4c6220, 4) INDIRECT (ram, 0x4c6220, 4) , (const, 0x4d3, 4)]
[(ram, 0x4c6224, 4) INDIRECT (ram, 0x4c6224, 4) , (const, 0x4d3, 4)]
[(ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x4d3, 4)]
[(stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x4d3, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x4d3, 4)]
[(stack, 0xfffffffffffffe90, 4) INDIRECT (stack, 0xfffffffffffffe90, 4) , (const, 0x4d3, 4)]
[(stack, 0xfffffffffffffe94, 4) INDIRECT (stack, 0xfffffffffffffe94, 4) , (const, 0x4d3, 4)]
[(stack, 0xfffffffffffffe98, 8) INDIRECT (unique, 0x3c80, 8) , (const, 0x4d3, 4)]
[(stack, 0xfffffffffffffea0, 8) INDIRECT (unique, 0x3c80, 8) , (const, 0x4d3, 4)]
[(stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x4d3, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x4d3, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x4d3, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x4d3, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (unique, 0x100005bf, 8) , (const, 0x4d3, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (unique, 0x100005cf, 8) , (const, 0x4d3, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (unique, 0x100005df, 8) , (const, 0x4d3, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (unique, 0x100005ef, 8) , (const, 0x4d3, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x4d3, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x4d3, 4)]
[(stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0x4d3, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x4d3, 4)]
[(stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0x4d3, 4)]
[(stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0x4d3, 4)]
[(stack, 0xffffffffffffffb8, 4) INDIRECT (stack, 0xffffffffffffffb8, 4) , (const, 0x4d3, 4)]
[(stack, 0xffffffffffffffc8, 4) INDIRECT (stack, 0xffffffffffffffc8, 4) , (const, 0x4d3, 4)]
[ ---  CALL (ram, 0x1ff710, 8) , (const, 0x23, 4) , (unique, 0x1000041c, 8) , (unique, 0x10000125, 8), (unique, 0x1000041c, 8) COPY (const, 0x291fa8, 8)]
[ ---  BRANCH (ram, 0x1ff7dc, 1)]
[(stack, 0xffffffffffffffc8, 4) MULTIEQUAL (stack, 0xffffffffffffffc8, 4) , (stack, 0xffffffffffffffc8, 4)]
[(stack, 0xffffffffffffffb8, 4) MULTIEQUAL (stack, 0xffffffffffffffb8, 4) , (stack, 0xffffffffffffffb8, 4)]
[(stack, 0xffffffffffffffa8, 4) MULTIEQUAL (stack, 0xffffffffffffffa8, 4) , (stack, 0xffffffffffffffa8, 4)]
[(stack, 0xffffffffffffff98, 4) MULTIEQUAL (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4)]
[(stack, 0xffffffffffffff88, 4) MULTIEQUAL (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4)]
[(stack, 0xffffffffffffff78, 4) MULTIEQUAL (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4)]
[(stack, 0xffffffffffffff68, 4) MULTIEQUAL (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4)]
[(stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (unique, 0x100005ef, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (unique, 0x100005df, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (unique, 0x100005cf, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (unique, 0x100005bf, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(stack, 0xfffffffffffffea8, 8) MULTIEQUAL (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8)]
[(stack, 0xfffffffffffffea0, 8) MULTIEQUAL (unique, 0x3c80, 8) , (stack, 0xfffffffffffffea0, 8)]
[(stack, 0xfffffffffffffe98, 8) MULTIEQUAL (unique, 0x3c80, 8) , (stack, 0xfffffffffffffe98, 8)]
[(stack, 0xfffffffffffffe94, 4) MULTIEQUAL (stack, 0xfffffffffffffe94, 4) , (stack, 0xfffffffffffffe94, 4)]
[(stack, 0xfffffffffffffe90, 4) MULTIEQUAL (stack, 0xfffffffffffffe90, 4) , (stack, 0xfffffffffffffe90, 4)]
[(stack, 0xfffffffffffffe88, 8) MULTIEQUAL (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8)]
[(stack, 0xfffffffffffffe80, 8) MULTIEQUAL (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8)]
[(ram, 0x4c87a0, 4) MULTIEQUAL (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4)]
[(ram, 0x4c6224, 4) MULTIEQUAL (ram, 0x4c6224, 4) , (ram, 0x4c6224, 4)]
[(ram, 0x4c6220, 4) MULTIEQUAL (ram, 0x4c6220, 4) , (ram, 0x4c6220, 4)]
[(ram, 0x4c6218, 8) MULTIEQUAL (ram, 0x4c6218, 8) , (ram, 0x4c6218, 8)]
[(ram, 0x4c6210, 4) MULTIEQUAL (ram, 0x4c6210, 4) , (ram, 0x4c6210, 4)]
[(ram, 0x4c321c, 4) MULTIEQUAL (ram, 0x4c321c, 4) , (ram, 0x4c321c, 4)]
[(ram, 0x4c3218, 4) MULTIEQUAL (ram, 0x4c3218, 4) , (ram, 0x4c3218, 4)]
[(ram, 0x4c3214, 4) MULTIEQUAL (ram, 0x4c3214, 4) , (ram, 0x4c3214, 4)]
[(ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(ram, 0x4c2e08, 8) MULTIEQUAL (ram, 0x4c2e08, 8) , (ram, 0x4c2e08, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x1ffa37, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_EQUAL (unique, 0x1d000, 4) , (const, 0x0, 4), (unique, 0x1d000, 4) INT_AND (unique, 0x1cf80, 4) , (const, 0x1, 4), (unique, 0x1cf80, 4) INT_RIGHT (ram, 0x4c3210, 4) , (register, 0x0, 4), (register, 0x0, 4) INT_AND (register, 0x28, 4) , (const, 0x7, 4), (register, 0x28, 4) SUBPIECE (register, 0x28, 8) , (const, 0x0, 4), (register, 0x28, 8) MULTIEQUAL (unique, 0x1000057b, 8) , (register, 0x28, 8), (ram, 0x4c3210, 4) MULTIEQUAL (ram, 0x4c3210, 4) , (ram, 0x4c3210, 4)]
[(ram, 0x4c2e08, 8) COPY (ram, 0x4c2e08, 8)]
[(ram, 0x4c2e78, 8) COPY (ram, 0x4c2e78, 8)]
[(ram, 0x4c3210, 4) COPY (ram, 0x4c3210, 4)]
[(ram, 0x4c3214, 4) COPY (ram, 0x4c3214, 4)]
[(ram, 0x4c3218, 4) COPY (ram, 0x4c3218, 4)]
[(ram, 0x4c321c, 4) COPY (ram, 0x4c321c, 4)]
[(ram, 0x4c6210, 4) COPY (ram, 0x4c6210, 4)]
[(ram, 0x4c6218, 8) COPY (ram, 0x4c6218, 8)]
[(ram, 0x4c6220, 4) COPY (ram, 0x4c6220, 4)]
[(ram, 0x4c6224, 4) COPY (ram, 0x4c6224, 4)]
[(ram, 0x4c87a0, 4) COPY (ram, 0x4c87a0, 4)]
[ ---  RETURN (const, 0x0, 8)]
[(unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffe88, 8)]
[(unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffe80, 8)]
[(register, 0x0, 4) INT_OR (ram, 0x4c3214, 4) , (register, 0x28, 4)]
[ ---  CBRANCH (ram, 0x1ff80b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x1000014d, 8) , (const, 0x0, 8), (unique, 0x1000014d, 8) INT_AND (register, 0x28, 8) , (const, 0x3f8, 8)]
[(register, 0x28, 8) INT_ZEXT (register, 0x0, 4)]
[(register, 0x28, 8) MULTIEQUAL (register, 0x28, 8) , (register, 0x28, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xa2, 4)]
[(ram, 0x4c2e08, 8) INDIRECT (ram, 0x4c2e08, 8) , (const, 0xa2, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0xa2, 4)]
[(ram, 0x4c3210, 4) INDIRECT (ram, 0x4c3210, 4) , (const, 0xa2, 4)]
[(ram, 0x4c3214, 4) INDIRECT (ram, 0x4c3214, 4) , (const, 0xa2, 4)]
[(ram, 0x4c3218, 4) INDIRECT (ram, 0x4c3218, 4) , (const, 0xa2, 4)]
[(ram, 0x4c321c, 4) INDIRECT (ram, 0x4c321c, 4) , (const, 0xa2, 4)]
[(ram, 0x4c6210, 4) INDIRECT (ram, 0x4c6210, 4) , (const, 0xa2, 4)]
[(ram, 0x4c6218, 8) INDIRECT (ram, 0x4c6218, 8) , (const, 0xa2, 4)]
[(ram, 0x4c6220, 4) INDIRECT (ram, 0x4c6220, 4) , (const, 0xa2, 4)]
[(ram, 0x4c6224, 4) INDIRECT (ram, 0x4c6224, 4) , (const, 0xa2, 4)]
[(ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0xa2, 4)]
[(stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0xa2, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0xa2, 4)]
[(stack, 0xfffffffffffffe90, 4) INDIRECT (stack, 0xfffffffffffffe90, 4) , (const, 0xa2, 4)]
[(stack, 0xfffffffffffffe94, 4) INDIRECT (stack, 0xfffffffffffffe94, 4) , (const, 0xa2, 4)]
[(stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0xa2, 4)]
[(stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0xa2, 4)]
[(stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0xa2, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0xa2, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0xa2, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0xa2, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0xa2, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0xa2, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0xa2, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0xa2, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0xa2, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0xa2, 4)]
[(stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0xa2, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0xa2, 4)]
[(stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0xa2, 4)]
[(stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0xa2, 4)]
[(stack, 0xffffffffffffffb8, 4) INDIRECT (stack, 0xffffffffffffffb8, 4) , (const, 0xa2, 4)]
[(stack, 0xffffffffffffffc8, 4) INDIRECT (stack, 0xffffffffffffffc8, 4) , (const, 0xa2, 4)]
[ ---  CBRANCH (ram, 0x1ffa70, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x1762b0, 8) , (unique, 0x10000633, 8) , (unique, 0x1000063b, 8), (unique, 0x1000063b, 8) CAST (unique, 0x3800, 8), (unique, 0x10000633, 8) CAST (unique, 0x3800, 8)]
[(ram, 0x4c2e08, 8) INDIRECT (ram, 0x4c2e08, 8) , (const, 0x3dc, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x3dc, 4)]
[(ram, 0x4c3210, 4) INDIRECT (ram, 0x4c3210, 4) , (const, 0x3dc, 4)]
[(ram, 0x4c3214, 4) INDIRECT (ram, 0x4c3214, 4) , (const, 0x3dc, 4)]
[(ram, 0x4c3218, 4) INDIRECT (ram, 0x4c3218, 4) , (const, 0x3dc, 4)]
[(ram, 0x4c321c, 4) INDIRECT (ram, 0x4c321c, 4) , (const, 0x3dc, 4)]
[(ram, 0x4c6210, 4) INDIRECT (ram, 0x4c6210, 4) , (const, 0x3dc, 4)]
[(ram, 0x4c6218, 8) INDIRECT (ram, 0x4c6218, 8) , (const, 0x3dc, 4)]
[(ram, 0x4c6220, 4) INDIRECT (ram, 0x4c6220, 4) , (const, 0x3dc, 4)]
[(ram, 0x4c6224, 4) INDIRECT (ram, 0x4c6224, 4) , (const, 0x3dc, 4)]
[(ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x3dc, 4)]
[(stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x3dc, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x3dc, 4)]
[(stack, 0xfffffffffffffe90, 4) INDIRECT (stack, 0xfffffffffffffe90, 4) , (const, 0x3dc, 4)]
[(stack, 0xfffffffffffffe94, 4) INDIRECT (stack, 0xfffffffffffffe94, 4) , (const, 0x3dc, 4)]
[(stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x3dc, 4)]
[(stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x3dc, 4)]
[(stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x3dc, 4), (stack, 0xfffffffffffffea8, 8) COPY (const, 0x6d20666f2074756f, 8)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x3dc, 4), (stack, 0xfffffffffffffeb0, 8) COPY (const, 0x5b2079726f6d65, 8)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x3dc, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x3dc, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x3dc, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x3dc, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x3dc, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x3dc, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x3dc, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x3dc, 4)]
[(stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0x3dc, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x3dc, 4)]
[(stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0x3dc, 4)]
[(stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0x3dc, 4)]
[(stack, 0xffffffffffffffb8, 4) INDIRECT (stack, 0xffffffffffffffb8, 4) , (const, 0x3dc, 4)]
[(stack, 0xffffffffffffffc8, 4) INDIRECT (stack, 0xffffffffffffffc8, 4) , (const, 0x3dc, 4)]
[(unique, 0x3100, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffef4, 8)]
[(unique, 0x10000617, 4) COPY (register, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x1cc770, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x30, 8) , (register, 0x8, 1), (register, 0x8, 1) INT_ADD (unique, 0x100002f6, 1) , (const, 0x30, 1), (unique, 0x100002f6, 1) INT_ADD (unique, 0x10000304, 1) , (unique, 0x10000305, 1), (unique, 0x10000304, 1) SUBPIECE (register, 0x8, 4) , (const, 0x0, 4), (unique, 0x10000305, 1) INT_MULT (unique, 0x10000308, 1) , (const, 0xf6, 1), (unique, 0x10000308, 1) SUBPIECE (unique, 0x100002fc, 4) , (const, 0x0, 4), (unique, 0x100002fc, 4) INT_SDIV (register, 0x8, 4) , (const, 0xa, 4), (register, 0x30, 8) PTRADD (register, 0x30, 8) , (const, 0xffffffffffffffff, 8) , (const, 0x1, 8), (register, 0x8, 4) MULTIEQUAL (unique, 0x10000617, 4) , (unique, 0x1000061b, 4), (register, 0x30, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0x30, 8)]
[(unique, 0x1000061b, 4) COPY (unique, 0x100002fc, 4), (unique, 0x100002fc, 4) INT_SDIV (register, 0x8, 4) , (const, 0xa, 4), (register, 0x8, 4) MULTIEQUAL (unique, 0x10000617, 4) , (unique, 0x1000061b, 4)]
[ ---  CBRANCH (ram, 0x1ffaa8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x100002fc, 4) , (const, 0x0, 4), (unique, 0x100002fc, 4) INT_SDIV (register, 0x8, 4) , (const, 0xa, 4), (register, 0x8, 4) MULTIEQUAL (unique, 0x10000617, 4) , (unique, 0x1000061b, 4)]
[(register, 0x28, 8) COPY (const, 0x0, 8)]
[(stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x499, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x499, 4)]
[(stack, 0xfffffffffffffe90, 4) INDIRECT (stack, 0xfffffffffffffe90, 4) , (const, 0x499, 4)]
[(stack, 0xfffffffffffffe94, 4) INDIRECT (stack, 0xfffffffffffffe94, 4) , (const, 0x499, 4)]
[(stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x499, 4)]
[(stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x499, 4)]
[(stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x499, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x499, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x499, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x499, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x499, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x499, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x499, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x499, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x499, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x499, 4)]
[(stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0x499, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x499, 4)]
[(stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0x499, 4)]
[(stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0x499, 4)]
[(stack, 0xffffffffffffffb8, 4) INDIRECT (stack, 0xffffffffffffffb8, 4) , (const, 0x499, 4)]
[(stack, 0xffffffffffffffc8, 4) INDIRECT (stack, 0xffffffffffffffc8, 4) , (const, 0x499, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x0, 8) , (const, 0x5d, 1), (register, 0x0, 8) CAST (unique, 0x1000065b, 8), (unique, 0x1000065b, 8) CALL (ram, 0x18e980, 8) , (unique, 0x3800, 8) , (register, 0x30, 8) , (register, 0x10, 8), (register, 0x10, 8) PTRADD (unique, 0x10000549, 8) , (unique, 0x10000653, 8) , (const, 0x1, 8), (unique, 0x10000653, 8) CAST (unique, 0x10000569, 8), (unique, 0x10000569, 8) PTRADD (unique, 0x10000559, 8) , (unique, 0x1000024a, 8) , (const, 0x1, 8), (unique, 0x10000559, 8) PTRSUB (register, 0x20, 8) , (const, 0x0, 8), (unique, 0x10000549, 8) PTRSUB (const, 0x0, 8) , (const, 0xfffffffffffffef4, 8), (unique, 0x1000024a, 8) INT_2COMP (unique, 0x1000064b, 8), (unique, 0x1000064b, 8) CAST (register, 0x30, 8), (unique, 0x3800, 8) INT_ADD (unique, 0x10000643, 8) , (const, 0x7, 8), (unique, 0x10000643, 8) CAST (unique, 0x1000050c, 8), (unique, 0x1000050c, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffeb0, 8)]
[(ram, 0x4c2e08, 8) INDIRECT (ram, 0x4c2e08, 8) , (const, 0x49e, 4), (ram, 0x4c2e08, 8) INDIRECT (ram, 0x4c2e08, 8) , (const, 0x49b, 4), (ram, 0x4c2e08, 8) INDIRECT (ram, 0x4c2e08, 8) , (const, 0x499, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x49e, 4), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x49b, 4), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x499, 4)]
[(ram, 0x4c3210, 4) INDIRECT (ram, 0x4c3210, 4) , (const, 0x49e, 4), (ram, 0x4c3210, 4) INDIRECT (ram, 0x4c3210, 4) , (const, 0x49b, 4), (ram, 0x4c3210, 4) INDIRECT (ram, 0x4c3210, 4) , (const, 0x499, 4)]
[(ram, 0x4c3214, 4) INDIRECT (ram, 0x4c3214, 4) , (const, 0x49e, 4), (ram, 0x4c3214, 4) INDIRECT (ram, 0x4c3214, 4) , (const, 0x49b, 4), (ram, 0x4c3214, 4) INDIRECT (ram, 0x4c3214, 4) , (const, 0x499, 4)]
[(ram, 0x4c3218, 4) INDIRECT (ram, 0x4c3218, 4) , (const, 0x49e, 4), (ram, 0x4c3218, 4) INDIRECT (ram, 0x4c3218, 4) , (const, 0x49b, 4), (ram, 0x4c3218, 4) INDIRECT (ram, 0x4c3218, 4) , (const, 0x499, 4)]
[(ram, 0x4c321c, 4) INDIRECT (ram, 0x4c321c, 4) , (const, 0x49e, 4), (ram, 0x4c321c, 4) INDIRECT (ram, 0x4c321c, 4) , (const, 0x49b, 4), (ram, 0x4c321c, 4) INDIRECT (ram, 0x4c321c, 4) , (const, 0x499, 4)]
[(ram, 0x4c6210, 4) INDIRECT (ram, 0x4c6210, 4) , (const, 0x49e, 4), (ram, 0x4c6210, 4) INDIRECT (ram, 0x4c6210, 4) , (const, 0x49b, 4), (ram, 0x4c6210, 4) INDIRECT (ram, 0x4c6210, 4) , (const, 0x499, 4)]
[(ram, 0x4c6218, 8) INDIRECT (ram, 0x4c6218, 8) , (const, 0x49e, 4), (ram, 0x4c6218, 8) INDIRECT (ram, 0x4c6218, 8) , (const, 0x49b, 4), (ram, 0x4c6218, 8) INDIRECT (ram, 0x4c6218, 8) , (const, 0x499, 4)]
[(ram, 0x4c6220, 4) INDIRECT (ram, 0x4c6220, 4) , (const, 0x49e, 4), (ram, 0x4c6220, 4) INDIRECT (ram, 0x4c6220, 4) , (const, 0x49b, 4), (ram, 0x4c6220, 4) INDIRECT (ram, 0x4c6220, 4) , (const, 0x499, 4)]
[(ram, 0x4c6224, 4) INDIRECT (ram, 0x4c6224, 4) , (const, 0x49e, 4), (ram, 0x4c6224, 4) INDIRECT (ram, 0x4c6224, 4) , (const, 0x49b, 4), (ram, 0x4c6224, 4) INDIRECT (ram, 0x4c6224, 4) , (const, 0x499, 4)]
[(ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x49e, 4), (ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x49b, 4), (ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x499, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (const, 0x0, 1), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x1, 8), (register, 0x0, 8) CAST (unique, 0x1000065b, 8), (unique, 0x1000065b, 8) CALL (ram, 0x18e980, 8) , (unique, 0x3800, 8) , (register, 0x30, 8) , (register, 0x10, 8), (register, 0x10, 8) PTRADD (unique, 0x10000549, 8) , (unique, 0x10000653, 8) , (const, 0x1, 8), (unique, 0x10000653, 8) CAST (unique, 0x10000569, 8), (unique, 0x10000569, 8) PTRADD (unique, 0x10000559, 8) , (unique, 0x1000024a, 8) , (const, 0x1, 8), (unique, 0x10000559, 8) PTRSUB (register, 0x20, 8) , (const, 0x0, 8), (unique, 0x10000549, 8) PTRSUB (const, 0x0, 8) , (const, 0xfffffffffffffef4, 8), (unique, 0x1000024a, 8) INT_2COMP (unique, 0x1000064b, 8), (unique, 0x1000064b, 8) CAST (register, 0x30, 8), (unique, 0x3800, 8) INT_ADD (unique, 0x10000643, 8) , (const, 0x7, 8), (unique, 0x10000643, 8) CAST (unique, 0x1000050c, 8), (unique, 0x1000050c, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffeb0, 8)]
[(register, 0x0, 8) PTRADD (register, 0x0, 8) , (unique, 0x1000053c, 8) , (const, 0x1, 8), (unique, 0x1000053c, 8) INT_SUB (const, 0x1, 8) , (unique, 0x10000663, 8), (unique, 0x10000663, 8) CAST (unique, 0x3800, 8), (register, 0x0, 8) CAST (unique, 0x1000065b, 8), (unique, 0x1000065b, 8) CALL (ram, 0x18e980, 8) , (unique, 0x3800, 8) , (register, 0x30, 8) , (register, 0x10, 8), (register, 0x10, 8) PTRADD (unique, 0x10000549, 8) , (unique, 0x10000653, 8) , (const, 0x1, 8), (unique, 0x10000653, 8) CAST (unique, 0x10000569, 8), (unique, 0x10000569, 8) PTRADD (unique, 0x10000559, 8) , (unique, 0x1000024a, 8) , (const, 0x1, 8), (unique, 0x10000559, 8) PTRSUB (register, 0x20, 8) , (const, 0x0, 8), (unique, 0x10000549, 8) PTRSUB (const, 0x0, 8) , (const, 0xfffffffffffffef4, 8), (unique, 0x1000024a, 8) INT_2COMP (unique, 0x1000064b, 8), (unique, 0x1000064b, 8) CAST (register, 0x30, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffea8, 8), (unique, 0x3800, 8) INT_ADD (unique, 0x10000643, 8) , (const, 0x7, 8), (unique, 0x10000643, 8) CAST (unique, 0x1000050c, 8), (unique, 0x1000050c, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffeb0, 8)]
[(unique, 0x10000597, 8) COPY (unique, 0x3800, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffea8, 8)]
[ ---  BRANCH (ram, 0x1ff8fd, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000046c, 8) , (unique, 0xbd00, 4), (unique, 0x1000046c, 8) PTRSUB (register, 0x0, 8) , (const, 0x0, 8), (unique, 0xbd00, 4) INT_OR (unique, 0xbd00, 4) , (const, 0x8000, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000464, 8), (unique, 0x10000464, 8) PTRSUB (register, 0x0, 8) , (const, 0x0, 8)]
[ ---  CALL (ram, 0x155720, 8) , (register, 0x0, 8) , (unique, 0x100003f4, 8) , (register, 0x28, 8), (unique, 0x100003f4, 8) COPY (const, 0x28e0d0, 8)]
[ ---  CALL (ram, 0x11f880, 8) , (register, 0x20, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) PTRADD (unique, 0xbd80, 8) , (register, 0x0, 8) , (const, 0x1, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0x0, 8) , (const, 0x28, 8), (register, 0x0, 8) CALL (ram, 0x1c4660, 8) , (unique, 0xbd80, 8) , (unique, 0x1000067b, 8) , (unique, 0x100003fc, 8) , (register, 0x0, 8) , (unique, 0x10000683, 8), (unique, 0x10000683, 8) CAST (unique, 0x10000424, 8), (unique, 0x1000067b, 8) CAST (register, 0x30, 8), (unique, 0x10000424, 8) PTRSUB (const, 0x0, 8) , (const, 0x4c1b60, 8), (unique, 0x100003fc, 8) COPY (const, 0x28e0d5, 8), (register, 0x30, 8) PTRADD (unique, 0xbd80, 8) , (unique, 0x10000175, 8) , (const, 0x1, 8), (unique, 0x10000175, 8) INT_2COMP (unique, 0x10000673, 8), (unique, 0x10000673, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0x0, 8) , (const, 0x30, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0x0, 8) , (const, 0x28, 8), (register, 0x0, 8) CALL (ram, 0x1baef0, 8) , (register, 0x20, 8) , (unique, 0x3800, 8), (unique, 0x3800, 8) CAST (unique, 0x1000066b, 8), (unique, 0x1000066b, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffee8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x100, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xeb, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xd6, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xd0, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xcc, 4)]
[(ram, 0x4c2e08, 8) INDIRECT (ram, 0x4c2e08, 8) , (const, 0x100, 4), (ram, 0x4c2e08, 8) INDIRECT (ram, 0x4c2e08, 8) , (const, 0xf3, 4), (ram, 0x4c2e08, 8) INDIRECT (ram, 0x4c2e08, 8) , (const, 0xeb, 4), (ram, 0x4c2e08, 8) INDIRECT (ram, 0x4c2e08, 8) , (const, 0xd6, 4), (ram, 0x4c2e08, 8) INDIRECT (ram, 0x4c2e08, 8) , (const, 0xd0, 4), (ram, 0x4c2e08, 8) INDIRECT (ram, 0x4c2e08, 8) , (const, 0xcc, 4), (ram, 0x4c2e08, 8) INDIRECT (ram, 0x4c2e08, 8) , (const, 0xb2, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x100, 4), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0xf3, 4), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0xeb, 4), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0xd6, 4), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0xd0, 4), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0xcc, 4), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0xb2, 4)]
[(ram, 0x4c3210, 4) INDIRECT (ram, 0x4c3210, 4) , (const, 0x100, 4), (ram, 0x4c3210, 4) INDIRECT (ram, 0x4c3210, 4) , (const, 0xf3, 4), (ram, 0x4c3210, 4) INDIRECT (ram, 0x4c3210, 4) , (const, 0xeb, 4), (ram, 0x4c3210, 4) INDIRECT (ram, 0x4c3210, 4) , (const, 0xd6, 4), (ram, 0x4c3210, 4) INDIRECT (ram, 0x4c3210, 4) , (const, 0xd0, 4), (ram, 0x4c3210, 4) INDIRECT (ram, 0x4c3210, 4) , (const, 0xcc, 4), (ram, 0x4c3210, 4) INDIRECT (ram, 0x4c3210, 4) , (const, 0xb2, 4)]
[(ram, 0x4c3214, 4) INDIRECT (ram, 0x4c3214, 4) , (const, 0x100, 4), (ram, 0x4c3214, 4) INDIRECT (ram, 0x4c3214, 4) , (const, 0xf3, 4), (ram, 0x4c3214, 4) INDIRECT (ram, 0x4c3214, 4) , (const, 0xeb, 4), (ram, 0x4c3214, 4) INDIRECT (ram, 0x4c3214, 4) , (const, 0xd6, 4), (ram, 0x4c3214, 4) INDIRECT (ram, 0x4c3214, 4) , (const, 0xd0, 4), (ram, 0x4c3214, 4) INDIRECT (ram, 0x4c3214, 4) , (const, 0xcc, 4), (ram, 0x4c3214, 4) INDIRECT (ram, 0x4c3214, 4) , (const, 0xb2, 4)]
[(ram, 0x4c3218, 4) INDIRECT (ram, 0x4c3218, 4) , (const, 0x100, 4), (ram, 0x4c3218, 4) INDIRECT (ram, 0x4c3218, 4) , (const, 0xf3, 4), (ram, 0x4c3218, 4) INDIRECT (ram, 0x4c3218, 4) , (const, 0xeb, 4), (ram, 0x4c3218, 4) INDIRECT (ram, 0x4c3218, 4) , (const, 0xd6, 4), (ram, 0x4c3218, 4) INDIRECT (ram, 0x4c3218, 4) , (const, 0xd0, 4), (ram, 0x4c3218, 4) INDIRECT (ram, 0x4c3218, 4) , (const, 0xcc, 4), (ram, 0x4c3218, 4) INDIRECT (ram, 0x4c3218, 4) , (const, 0xb2, 4)]
[(ram, 0x4c321c, 4) INDIRECT (ram, 0x4c321c, 4) , (const, 0x100, 4), (ram, 0x4c321c, 4) INDIRECT (ram, 0x4c321c, 4) , (const, 0xf3, 4), (ram, 0x4c321c, 4) INDIRECT (ram, 0x4c321c, 4) , (const, 0xeb, 4), (ram, 0x4c321c, 4) INDIRECT (ram, 0x4c321c, 4) , (const, 0xd6, 4), (ram, 0x4c321c, 4) INDIRECT (ram, 0x4c321c, 4) , (const, 0xd0, 4), (ram, 0x4c321c, 4) INDIRECT (ram, 0x4c321c, 4) , (const, 0xcc, 4), (ram, 0x4c321c, 4) INDIRECT (ram, 0x4c321c, 4) , (const, 0xb2, 4)]
[(ram, 0x4c6210, 4) INDIRECT (ram, 0x4c6210, 4) , (const, 0x100, 4), (ram, 0x4c6210, 4) INDIRECT (ram, 0x4c6210, 4) , (const, 0xf3, 4), (ram, 0x4c6210, 4) INDIRECT (ram, 0x4c6210, 4) , (const, 0xeb, 4), (ram, 0x4c6210, 4) INDIRECT (ram, 0x4c6210, 4) , (const, 0xd6, 4), (ram, 0x4c6210, 4) INDIRECT (ram, 0x4c6210, 4) , (const, 0xd0, 4), (ram, 0x4c6210, 4) INDIRECT (ram, 0x4c6210, 4) , (const, 0xcc, 4), (ram, 0x4c6210, 4) INDIRECT (ram, 0x4c6210, 4) , (const, 0xb2, 4)]
[(ram, 0x4c6220, 4) INDIRECT (ram, 0x4c6220, 4) , (const, 0x100, 4), (ram, 0x4c6220, 4) INDIRECT (ram, 0x4c6220, 4) , (const, 0xf3, 4), (ram, 0x4c6220, 4) INDIRECT (ram, 0x4c6220, 4) , (const, 0xeb, 4), (ram, 0x4c6220, 4) INDIRECT (ram, 0x4c6220, 4) , (const, 0xd6, 4), (ram, 0x4c6220, 4) INDIRECT (ram, 0x4c6220, 4) , (const, 0xd0, 4), (ram, 0x4c6220, 4) INDIRECT (ram, 0x4c6220, 4) , (const, 0xcc, 4), (ram, 0x4c6220, 4) INDIRECT (ram, 0x4c6220, 4) , (const, 0xb2, 4)]
[(ram, 0x4c6224, 4) INDIRECT (ram, 0x4c6224, 4) , (const, 0x100, 4), (ram, 0x4c6224, 4) INDIRECT (ram, 0x4c6224, 4) , (const, 0xf3, 4), (ram, 0x4c6224, 4) INDIRECT (ram, 0x4c6224, 4) , (const, 0xeb, 4), (ram, 0x4c6224, 4) INDIRECT (ram, 0x4c6224, 4) , (const, 0xd6, 4), (ram, 0x4c6224, 4) INDIRECT (ram, 0x4c6224, 4) , (const, 0xd0, 4), (ram, 0x4c6224, 4) INDIRECT (ram, 0x4c6224, 4) , (const, 0xcc, 4), (ram, 0x4c6224, 4) INDIRECT (ram, 0x4c6224, 4) , (const, 0xb2, 4)]
[(ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x100, 4), (ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0xf3, 4), (ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0xeb, 4), (ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0xd6, 4), (ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0xd0, 4), (ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0xcc, 4), (ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0xb2, 4)]
[(stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x100, 4), (stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0xeb, 4), (stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0xd6, 4), (stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0xd0, 4), (stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0xcc, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x100, 4), (stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0xeb, 4), (stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0xd6, 4), (stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0xd0, 4), (stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0xcc, 4)]
[(stack, 0xfffffffffffffe90, 4) INDIRECT (stack, 0xfffffffffffffe90, 4) , (const, 0x100, 4), (stack, 0xfffffffffffffe90, 4) INDIRECT (stack, 0xfffffffffffffe90, 4) , (const, 0xeb, 4), (stack, 0xfffffffffffffe90, 4) INDIRECT (stack, 0xfffffffffffffe90, 4) , (const, 0xd6, 4), (stack, 0xfffffffffffffe90, 4) INDIRECT (stack, 0xfffffffffffffe90, 4) , (const, 0xd0, 4), (stack, 0xfffffffffffffe90, 4) INDIRECT (stack, 0xfffffffffffffe90, 4) , (const, 0xcc, 4)]
[(stack, 0xfffffffffffffe94, 4) INDIRECT (stack, 0xfffffffffffffe94, 4) , (const, 0x100, 4), (stack, 0xfffffffffffffe94, 4) INDIRECT (stack, 0xfffffffffffffe94, 4) , (const, 0xeb, 4), (stack, 0xfffffffffffffe94, 4) INDIRECT (stack, 0xfffffffffffffe94, 4) , (const, 0xd6, 4), (stack, 0xfffffffffffffe94, 4) INDIRECT (stack, 0xfffffffffffffe94, 4) , (const, 0xd0, 4), (stack, 0xfffffffffffffe94, 4) INDIRECT (stack, 0xfffffffffffffe94, 4) , (const, 0xcc, 4)]
[(stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x100, 4), (stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0xeb, 4), (stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0xd6, 4), (stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0xd0, 4), (stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0xcc, 4)]
[(stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x100, 4), (stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0xeb, 4), (stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0xd6, 4), (stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0xd0, 4), (stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0xcc, 4)]
[(stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x100, 4), (stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0xeb, 4), (stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0xd6, 4), (stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0xd0, 4), (stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0xcc, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x100, 4), (stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0xeb, 4), (stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0xd6, 4), (stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0xd0, 4), (stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0xcc, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x100, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0xeb, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0xd6, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0xd0, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0xcc, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x100, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0xeb, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0xd6, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0xd0, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0xcc, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x100, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0xeb, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0xd6, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0xd0, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0xcc, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x100, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0xeb, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0xd6, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0xd0, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0xcc, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x100, 4), (stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0xeb, 4), (stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0xd6, 4), (stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0xd0, 4), (stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0xcc, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x100, 4), (stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0xeb, 4), (stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0xd6, 4), (stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0xd0, 4), (stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0xcc, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x100, 4), (stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0xeb, 4), (stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0xd6, 4), (stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0xd0, 4), (stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0xcc, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x100, 4), (stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0xeb, 4), (stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0xd6, 4), (stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0xd0, 4), (stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0xcc, 4)]
[(stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0x100, 4), (stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0xeb, 4), (stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0xd6, 4), (stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0xd0, 4), (stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0xcc, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x100, 4), (stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0xeb, 4), (stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0xd6, 4), (stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0xd0, 4), (stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0xcc, 4)]
[(stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0x100, 4), (stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0xeb, 4), (stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0xd6, 4), (stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0xd0, 4), (stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0xcc, 4)]
[(stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0x100, 4), (stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0xeb, 4), (stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0xd6, 4), (stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0xd0, 4), (stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0xcc, 4)]
[(stack, 0xffffffffffffffb8, 4) INDIRECT (stack, 0xffffffffffffffb8, 4) , (const, 0x100, 4), (stack, 0xffffffffffffffb8, 4) INDIRECT (stack, 0xffffffffffffffb8, 4) , (const, 0xeb, 4), (stack, 0xffffffffffffffb8, 4) INDIRECT (stack, 0xffffffffffffffb8, 4) , (const, 0xd6, 4), (stack, 0xffffffffffffffb8, 4) INDIRECT (stack, 0xffffffffffffffb8, 4) , (const, 0xd0, 4), (stack, 0xffffffffffffffb8, 4) INDIRECT (stack, 0xffffffffffffffb8, 4) , (const, 0xcc, 4)]
[(stack, 0xffffffffffffffc8, 4) INDIRECT (stack, 0xffffffffffffffc8, 4) , (const, 0x100, 4), (stack, 0xffffffffffffffc8, 4) INDIRECT (stack, 0xffffffffffffffc8, 4) , (const, 0xeb, 4), (stack, 0xffffffffffffffc8, 4) INDIRECT (stack, 0xffffffffffffffc8, 4) , (const, 0xd6, 4), (stack, 0xffffffffffffffc8, 4) INDIRECT (stack, 0xffffffffffffffc8, 4) , (const, 0xd0, 4), (stack, 0xffffffffffffffc8, 4) INDIRECT (stack, 0xffffffffffffffc8, 4) , (const, 0xcc, 4)]
[(register, 0x0, 8) CALL (ram, 0x16e3e0, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x1ffc10, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4c6218, 8) , (const, 0x0, 8), (ram, 0x4c6218, 8) INDIRECT (ram, 0x4c6218, 8) , (const, 0x100, 4), (ram, 0x4c6218, 8) INDIRECT (ram, 0x4c6218, 8) , (const, 0xf3, 4), (ram, 0x4c6218, 8) INDIRECT (ram, 0x4c6218, 8) , (const, 0xeb, 4), (ram, 0x4c6218, 8) INDIRECT (ram, 0x4c6218, 8) , (const, 0xd6, 4), (ram, 0x4c6218, 8) INDIRECT (ram, 0x4c6218, 8) , (const, 0xd0, 4), (ram, 0x4c6218, 8) INDIRECT (ram, 0x4c6218, 8) , (const, 0xcc, 4), (ram, 0x4c6218, 8) INDIRECT (ram, 0x4c6218, 8) , (const, 0xb2, 4)]
[ ---  CBRANCH (ram, 0x1ff88a, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x1000068b, 8), (unique, 0x1000068b, 8) CAST (ram, 0x4c2e08, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x110, 4)]
[(ram, 0x4c2e08, 8) INDIRECT (ram, 0x4c2e08, 8) , (const, 0x110, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x110, 4)]
[(ram, 0x4c3210, 4) INDIRECT (ram, 0x4c3210, 4) , (const, 0x110, 4)]
[(ram, 0x4c3214, 4) INDIRECT (ram, 0x4c3214, 4) , (const, 0x110, 4)]
[(ram, 0x4c3218, 4) INDIRECT (ram, 0x4c3218, 4) , (const, 0x110, 4)]
[(ram, 0x4c321c, 4) INDIRECT (ram, 0x4c321c, 4) , (const, 0x110, 4)]
[(ram, 0x4c6210, 4) INDIRECT (ram, 0x4c6210, 4) , (const, 0x110, 4)]
[(ram, 0x4c6218, 8) INDIRECT (ram, 0x4c6218, 8) , (const, 0x110, 4), (ram, 0x4c6218, 8) MULTIEQUAL (ram, 0x4c6218, 8) , (unique, 0xbd80, 8)]
[(ram, 0x4c6224, 4) INDIRECT (ram, 0x4c6224, 4) , (const, 0x110, 4)]
[(ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x110, 4)]
[(stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x110, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x110, 4)]
[(stack, 0xfffffffffffffe90, 4) INDIRECT (stack, 0xfffffffffffffe90, 4) , (const, 0x110, 4)]
[(stack, 0xfffffffffffffe94, 4) INDIRECT (stack, 0xfffffffffffffe94, 4) , (const, 0x110, 4)]
[(stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x110, 4)]
[(stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x110, 4)]
[(stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x110, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x110, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x110, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x110, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x110, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x110, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x110, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x110, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x110, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x110, 4)]
[(stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0x110, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x110, 4)]
[(stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0x110, 4)]
[(stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0x110, 4)]
[(stack, 0xffffffffffffffb8, 4) INDIRECT (stack, 0xffffffffffffffb8, 4) , (const, 0x110, 4)]
[(stack, 0xffffffffffffffc8, 4) INDIRECT (stack, 0xffffffffffffffc8, 4) , (const, 0x110, 4)]
[ ---  CALL (ram, 0x1781e0, 8) , (ram, 0x4c6218, 8) , (register, 0x0, 8), (ram, 0x4c6218, 8) MULTIEQUAL (ram, 0x4c6218, 8) , (unique, 0xbd80, 8)]
[ ---  CBRANCH (ram, 0x1ffc40, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x100003cc, 4) , (const, 0x0, 4), (unique, 0x100003cc, 4) INT_AND (ram, 0x4c6220, 4) , (const, 0x1, 4), (ram, 0x4c6220, 4) INDIRECT (ram, 0x4c6220, 4) , (const, 0x110, 4)]
[ ---  CBRANCH (ram, 0x1ff8db, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x100003e4, 4) , (const, 0x0, 4), (unique, 0x100003e4, 4) INT_AND (ram, 0x4c6220, 4) , (const, 0x1, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x3b5, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x3a4, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4c2e08, 8) INDIRECT (ram, 0x4c2e08, 8) , (const, 0x3b5, 4), (ram, 0x4c2e08, 8) INDIRECT (ram, 0x4c2e08, 8) , (const, 0x3a4, 4), (ram, 0x4c2e08, 8) MULTIEQUAL (ram, 0x4c2e08, 8) , (ram, 0x4c2e08, 8)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x3b5, 4), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x3a4, 4), (ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(ram, 0x4c3210, 4) INDIRECT (ram, 0x4c3210, 4) , (const, 0x3b5, 4), (ram, 0x4c3210, 4) INDIRECT (ram, 0x4c3210, 4) , (const, 0x3a4, 4), (ram, 0x4c3210, 4) MULTIEQUAL (ram, 0x4c3210, 4) , (ram, 0x4c3210, 4)]
[(ram, 0x4c3214, 4) INDIRECT (ram, 0x4c3214, 4) , (const, 0x3b5, 4), (ram, 0x4c3214, 4) INDIRECT (ram, 0x4c3214, 4) , (const, 0x3a4, 4), (ram, 0x4c3214, 4) MULTIEQUAL (ram, 0x4c3214, 4) , (ram, 0x4c3214, 4)]
[(ram, 0x4c3218, 4) INDIRECT (ram, 0x4c3218, 4) , (const, 0x3b5, 4), (ram, 0x4c3218, 4) INDIRECT (ram, 0x4c3218, 4) , (const, 0x3a4, 4), (ram, 0x4c3218, 4) MULTIEQUAL (ram, 0x4c3218, 4) , (ram, 0x4c3218, 4)]
[(ram, 0x4c321c, 4) INDIRECT (ram, 0x4c321c, 4) , (const, 0x3b5, 4), (ram, 0x4c321c, 4) INDIRECT (ram, 0x4c321c, 4) , (const, 0x3a4, 4), (ram, 0x4c321c, 4) MULTIEQUAL (ram, 0x4c321c, 4) , (ram, 0x4c321c, 4)]
[(ram, 0x4c6210, 4) INDIRECT (ram, 0x4c6210, 4) , (const, 0x3b5, 4), (ram, 0x4c6210, 4) INDIRECT (ram, 0x4c6210, 4) , (const, 0x3a4, 4), (ram, 0x4c6210, 4) MULTIEQUAL (ram, 0x4c6210, 4) , (ram, 0x4c6210, 4)]
[(ram, 0x4c6218, 8) INDIRECT (ram, 0x4c6218, 8) , (const, 0x3b5, 4), (ram, 0x4c6218, 8) INDIRECT (ram, 0x4c6218, 8) , (const, 0x3a4, 4), (ram, 0x4c6218, 8) MULTIEQUAL (ram, 0x4c6218, 8) , (unique, 0xbd80, 8)]
[(ram, 0x4c6220, 4) INDIRECT (ram, 0x4c6220, 4) , (const, 0x3b5, 4), (ram, 0x4c6220, 4) INDIRECT (ram, 0x4c6220, 4) , (const, 0x3a4, 4), (ram, 0x4c6220, 4) MULTIEQUAL (ram, 0x4c6220, 4) , (ram, 0x4c6220, 4)]
[(ram, 0x4c6224, 4) INDIRECT (ram, 0x4c6224, 4) , (const, 0x3b5, 4), (ram, 0x4c6224, 4) INDIRECT (ram, 0x4c6224, 4) , (const, 0x3a4, 4), (ram, 0x4c6224, 4) MULTIEQUAL (ram, 0x4c6224, 4) , (ram, 0x4c6224, 4)]
[(ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x3b5, 4), (ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x3a4, 4), (ram, 0x4c87a0, 4) MULTIEQUAL (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4)]
[(stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x3b5, 4), (stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x3a4, 4), (stack, 0xfffffffffffffe80, 8) MULTIEQUAL (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x3b5, 4), (stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x3a4, 4), (stack, 0xfffffffffffffe88, 8) MULTIEQUAL (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8)]
[(stack, 0xfffffffffffffe90, 4) INDIRECT (stack, 0xfffffffffffffe90, 4) , (const, 0x3b5, 4), (stack, 0xfffffffffffffe90, 4) INDIRECT (stack, 0xfffffffffffffe90, 4) , (const, 0x3a4, 4), (stack, 0xfffffffffffffe90, 4) MULTIEQUAL (stack, 0xfffffffffffffe90, 4) , (stack, 0xfffffffffffffe90, 4)]
[(stack, 0xfffffffffffffe94, 4) INDIRECT (stack, 0xfffffffffffffe94, 4) , (const, 0x3b5, 4), (stack, 0xfffffffffffffe94, 4) INDIRECT (stack, 0xfffffffffffffe94, 4) , (const, 0x3a4, 4), (stack, 0xfffffffffffffe94, 4) MULTIEQUAL (stack, 0xfffffffffffffe94, 4) , (stack, 0xfffffffffffffe94, 4)]
[(stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x3b5, 4), (stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x3a4, 4), (stack, 0xfffffffffffffe98, 8) MULTIEQUAL (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8)]
[(stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x3b5, 4), (stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x3a4, 4), (stack, 0xfffffffffffffea0, 8) MULTIEQUAL (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8)]
[(stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x3b5, 4), (stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x3a4, 4), (stack, 0xfffffffffffffea8, 8) MULTIEQUAL (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x3b5, 4), (stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x3a4, 4), (stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x3b5, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x3a4, 4), (stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x3b5, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x3a4, 4), (stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x3b5, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x3a4, 4), (stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x3b5, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x3a4, 4), (stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x3b5, 4), (stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x3a4, 4), (stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x3b5, 4), (stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x3a4, 4), (stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x3b5, 4), (stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x3a4, 4), (stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x3b5, 4), (stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x3a4, 4), (stack, 0xffffffffffffff68, 4) MULTIEQUAL (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4)]
[(stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0x3b5, 4), (stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0x3a4, 4), (stack, 0xffffffffffffff78, 4) MULTIEQUAL (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x3b5, 4), (stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x3a4, 4), (stack, 0xffffffffffffff88, 4) MULTIEQUAL (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4)]
[(stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0x3b5, 4), (stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0x3a4, 4), (stack, 0xffffffffffffff98, 4) MULTIEQUAL (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4)]
[(stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0x3b5, 4), (stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0x3a4, 4), (stack, 0xffffffffffffffa8, 4) MULTIEQUAL (stack, 0xffffffffffffffa8, 4) , (stack, 0xffffffffffffffa8, 4)]
[(stack, 0xffffffffffffffb8, 4) INDIRECT (stack, 0xffffffffffffffb8, 4) , (const, 0x3b5, 4), (stack, 0xffffffffffffffb8, 4) INDIRECT (stack, 0xffffffffffffffb8, 4) , (const, 0x3a4, 4), (stack, 0xffffffffffffffb8, 4) MULTIEQUAL (stack, 0xffffffffffffffb8, 4) , (stack, 0xffffffffffffffb8, 4)]
[(stack, 0xffffffffffffffc8, 4) INDIRECT (stack, 0xffffffffffffffc8, 4) , (const, 0x3b5, 4), (stack, 0xffffffffffffffc8, 4) INDIRECT (stack, 0xffffffffffffffc8, 4) , (const, 0x3a4, 4), (stack, 0xffffffffffffffc8, 4) MULTIEQUAL (stack, 0xffffffffffffffc8, 4) , (stack, 0xffffffffffffffc8, 4)]
[ ---  CALL (ram, 0x155720, 8) , (register, 0x0, 8) , (unique, 0x10000404, 8) , (register, 0x10, 8), (unique, 0x10000404, 8) COPY (const, 0x28e0df, 8), (register, 0x10, 8) INT_ZEXT (register, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x1cc770, 8)]
[ ---  BRANCH (ram, 0x1ff89f, 1)]
[(stack, 0xffffffffffffffc8, 4) MULTIEQUAL (stack, 0xffffffffffffffc8, 4) , (stack, 0xffffffffffffffc8, 4)]
[(stack, 0xffffffffffffffb8, 4) MULTIEQUAL (stack, 0xffffffffffffffb8, 4) , (stack, 0xffffffffffffffb8, 4)]
[(stack, 0xffffffffffffffa8, 4) MULTIEQUAL (stack, 0xffffffffffffffa8, 4) , (stack, 0xffffffffffffffa8, 4)]
[(stack, 0xffffffffffffff98, 4) MULTIEQUAL (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4)]
[(stack, 0xffffffffffffff88, 4) MULTIEQUAL (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4)]
[(stack, 0xffffffffffffff78, 4) MULTIEQUAL (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4)]
[(stack, 0xffffffffffffff68, 4) MULTIEQUAL (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4)]
[(stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(stack, 0xfffffffffffffea8, 8) MULTIEQUAL (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8)]
[(stack, 0xfffffffffffffea0, 8) MULTIEQUAL (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8)]
[(stack, 0xfffffffffffffe98, 8) MULTIEQUAL (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8)]
[(stack, 0xfffffffffffffe94, 4) MULTIEQUAL (stack, 0xfffffffffffffe94, 4) , (stack, 0xfffffffffffffe94, 4)]
[(stack, 0xfffffffffffffe90, 4) MULTIEQUAL (stack, 0xfffffffffffffe90, 4) , (stack, 0xfffffffffffffe90, 4)]
[(stack, 0xfffffffffffffe88, 8) MULTIEQUAL (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8)]
[(stack, 0xfffffffffffffe80, 8) MULTIEQUAL (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8)]
[(ram, 0x4c87a0, 4) MULTIEQUAL (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4)]
[(ram, 0x4c6224, 4) MULTIEQUAL (ram, 0x4c6224, 4) , (ram, 0x4c6224, 4)]
[(ram, 0x4c6220, 4) MULTIEQUAL (ram, 0x4c6220, 4) , (ram, 0x4c6220, 4)]
[(ram, 0x4c6210, 4) MULTIEQUAL (ram, 0x4c6210, 4) , (ram, 0x4c6210, 4)]
[(ram, 0x4c321c, 4) MULTIEQUAL (ram, 0x4c321c, 4) , (ram, 0x4c321c, 4)]
[(ram, 0x4c3218, 4) MULTIEQUAL (ram, 0x4c3218, 4) , (ram, 0x4c3218, 4)]
[(ram, 0x4c3214, 4) MULTIEQUAL (ram, 0x4c3214, 4) , (ram, 0x4c3214, 4)]
[(ram, 0x4c3210, 4) MULTIEQUAL (ram, 0x4c3210, 4) , (ram, 0x4c3210, 4)]
[(ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(ram, 0x4c2e08, 8) MULTIEQUAL (ram, 0x4c2e08, 8) , (ram, 0x4c2e08, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x1ff8db, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4c6218, 8) , (const, 0x0, 8), (ram, 0x4c6218, 8) MULTIEQUAL (ram, 0x4c6218, 8) , (ram, 0x4c6218, 8)]
[ ---  CBRANCH (ram, 0x1ffcc0, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0x0, 8) , (const, 0x30, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0x0, 8) , (const, 0x28, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x3a0, 4)]
[(ram, 0x4c2e08, 8) INDIRECT (ram, 0x4c2e08, 8) , (const, 0x3a0, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x3a0, 4)]
[(ram, 0x4c3210, 4) INDIRECT (ram, 0x4c3210, 4) , (const, 0x3a0, 4)]
[(ram, 0x4c3214, 4) INDIRECT (ram, 0x4c3214, 4) , (const, 0x3a0, 4)]
[(ram, 0x4c3218, 4) INDIRECT (ram, 0x4c3218, 4) , (const, 0x3a0, 4)]
[(ram, 0x4c321c, 4) INDIRECT (ram, 0x4c321c, 4) , (const, 0x3a0, 4)]
[(ram, 0x4c6210, 4) INDIRECT (ram, 0x4c6210, 4) , (const, 0x3a0, 4)]
[(ram, 0x4c6218, 8) INDIRECT (ram, 0x4c6218, 8) , (const, 0x3a0, 4)]
[(ram, 0x4c6220, 4) INDIRECT (ram, 0x4c6220, 4) , (const, 0x3a0, 4)]
[(ram, 0x4c6224, 4) INDIRECT (ram, 0x4c6224, 4) , (const, 0x3a0, 4)]
[(ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x3a0, 4)]
[(stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x3a0, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x3a0, 4)]
[(stack, 0xfffffffffffffe90, 4) INDIRECT (stack, 0xfffffffffffffe90, 4) , (const, 0x3a0, 4)]
[(stack, 0xfffffffffffffe94, 4) INDIRECT (stack, 0xfffffffffffffe94, 4) , (const, 0x3a0, 4)]
[(stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x3a0, 4)]
[(stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x3a0, 4)]
[(stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x3a0, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x3a0, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x3a0, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x3a0, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x3a0, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x3a0, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x3a0, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x3a0, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x3a0, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x3a0, 4)]
[(stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0x3a0, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x3a0, 4)]
[(stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0x3a0, 4)]
[(stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0x3a0, 4)]
[(stack, 0xffffffffffffffb8, 4) INDIRECT (stack, 0xffffffffffffffb8, 4) , (const, 0x3a0, 4)]
[(stack, 0xffffffffffffffc8, 4) INDIRECT (stack, 0xffffffffffffffc8, 4) , (const, 0x3a0, 4)]
[ ---  CALL (ram, 0x17b150, 8) , (unique, 0x10000693, 8) , (const, 0x3a, 4), (unique, 0x10000693, 8) CAST (register, 0x0, 8)]
[ ---  BRANCH (ram, 0x1ff8c2, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0x0, 8) , (const, 0x28, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[(ram, 0x4c2e08, 8) INDIRECT (ram, 0x4c2e08, 8) , (const, 0x13e, 4), (ram, 0x4c2e08, 8) INDIRECT (ram, 0x4c2e08, 8) , (const, 0x13c, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x13e, 4), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x13c, 4)]
[(ram, 0x4c3210, 4) INDIRECT (ram, 0x4c3210, 4) , (const, 0x13e, 4), (ram, 0x4c3210, 4) INDIRECT (ram, 0x4c3210, 4) , (const, 0x13c, 4)]
[(ram, 0x4c3214, 4) INDIRECT (ram, 0x4c3214, 4) , (const, 0x13e, 4), (ram, 0x4c3214, 4) INDIRECT (ram, 0x4c3214, 4) , (const, 0x13c, 4)]
[(ram, 0x4c3218, 4) INDIRECT (ram, 0x4c3218, 4) , (const, 0x13e, 4), (ram, 0x4c3218, 4) INDIRECT (ram, 0x4c3218, 4) , (const, 0x13c, 4)]
[(ram, 0x4c321c, 4) INDIRECT (ram, 0x4c321c, 4) , (const, 0x13e, 4), (ram, 0x4c321c, 4) INDIRECT (ram, 0x4c321c, 4) , (const, 0x13c, 4)]
[(ram, 0x4c6210, 4) INDIRECT (ram, 0x4c6210, 4) , (const, 0x13e, 4), (ram, 0x4c6210, 4) INDIRECT (ram, 0x4c6210, 4) , (const, 0x13c, 4)]
[(ram, 0x4c6218, 8) INDIRECT (ram, 0x4c6218, 8) , (const, 0x13e, 4), (ram, 0x4c6218, 8) INDIRECT (ram, 0x4c6218, 8) , (const, 0x13c, 4)]
[(ram, 0x4c6220, 4) INDIRECT (ram, 0x4c6220, 4) , (const, 0x13e, 4), (ram, 0x4c6220, 4) INDIRECT (ram, 0x4c6220, 4) , (const, 0x13c, 4)]
[(ram, 0x4c6224, 4) INDIRECT (ram, 0x4c6224, 4) , (const, 0x13e, 4), (ram, 0x4c6224, 4) INDIRECT (ram, 0x4c6224, 4) , (const, 0x13c, 4)]
[(ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x13e, 4), (ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x13c, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0xbd80, 8) , (const, 0x3a, 1)]
[(stack, 0xffffffffffffffc8, 4) MULTIEQUAL (stack, 0xffffffffffffffc8, 4) , (stack, 0xffffffffffffffc8, 4)]
[(stack, 0xffffffffffffffb8, 4) MULTIEQUAL (stack, 0xffffffffffffffb8, 4) , (stack, 0xffffffffffffffb8, 4)]
[(stack, 0xffffffffffffffa8, 4) MULTIEQUAL (stack, 0xffffffffffffffa8, 4) , (stack, 0xffffffffffffffa8, 4)]
[(stack, 0xffffffffffffff98, 4) MULTIEQUAL (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4)]
[(stack, 0xffffffffffffff88, 4) MULTIEQUAL (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4)]
[(stack, 0xffffffffffffff78, 4) MULTIEQUAL (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4)]
[(stack, 0xffffffffffffff68, 4) MULTIEQUAL (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4)]
[(stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(stack, 0xfffffffffffffea8, 8) MULTIEQUAL (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8)]
[(stack, 0xfffffffffffffea0, 8) MULTIEQUAL (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8)]
[(stack, 0xfffffffffffffe98, 8) MULTIEQUAL (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8)]
[(stack, 0xfffffffffffffe94, 4) MULTIEQUAL (stack, 0xfffffffffffffe94, 4) , (stack, 0xfffffffffffffe94, 4)]
[(stack, 0xfffffffffffffe90, 4) MULTIEQUAL (stack, 0xfffffffffffffe90, 4) , (stack, 0xfffffffffffffe90, 4)]
[(stack, 0xfffffffffffffe88, 8) MULTIEQUAL (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8)]
[(stack, 0xfffffffffffffe80, 8) MULTIEQUAL (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8)]
[(ram, 0x4c87a0, 4) MULTIEQUAL (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4)]
[(ram, 0x4c6224, 4) MULTIEQUAL (ram, 0x4c6224, 4) , (ram, 0x4c6224, 4)]
[(ram, 0x4c6220, 4) MULTIEQUAL (ram, 0x4c6220, 4) , (ram, 0x4c6220, 4)]
[(ram, 0x4c6218, 8) MULTIEQUAL (ram, 0x4c6218, 8) , (ram, 0x4c6218, 8)]
[(ram, 0x4c6210, 4) MULTIEQUAL (ram, 0x4c6210, 4) , (ram, 0x4c6210, 4)]
[(ram, 0x4c321c, 4) MULTIEQUAL (ram, 0x4c321c, 4) , (ram, 0x4c321c, 4)]
[(ram, 0x4c3218, 4) MULTIEQUAL (ram, 0x4c3218, 4) , (ram, 0x4c3218, 4)]
[(ram, 0x4c3214, 4) MULTIEQUAL (ram, 0x4c3214, 4) , (ram, 0x4c3214, 4)]
[(ram, 0x4c3210, 4) MULTIEQUAL (ram, 0x4c3210, 4) , (ram, 0x4c3210, 4)]
[(ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(ram, 0x4c2e08, 8) MULTIEQUAL (ram, 0x4c2e08, 8) , (ram, 0x4c2e08, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x1ffca8, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0x0, 8) , (const, 0x30, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0x0, 8) , (const, 0x28, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x39a, 4)]
[(ram, 0x4c2e08, 8) INDIRECT (ram, 0x4c2e08, 8) , (const, 0x39a, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x39a, 4)]
[(ram, 0x4c3210, 4) INDIRECT (ram, 0x4c3210, 4) , (const, 0x39a, 4)]
[(ram, 0x4c3214, 4) INDIRECT (ram, 0x4c3214, 4) , (const, 0x39a, 4)]
[(ram, 0x4c3218, 4) INDIRECT (ram, 0x4c3218, 4) , (const, 0x39a, 4)]
[(ram, 0x4c321c, 4) INDIRECT (ram, 0x4c321c, 4) , (const, 0x39a, 4)]
[(ram, 0x4c6210, 4) INDIRECT (ram, 0x4c6210, 4) , (const, 0x39a, 4)]
[(ram, 0x4c6218, 8) INDIRECT (ram, 0x4c6218, 8) , (const, 0x39a, 4)]
[(ram, 0x4c6220, 4) INDIRECT (ram, 0x4c6220, 4) , (const, 0x39a, 4)]
[(ram, 0x4c6224, 4) INDIRECT (ram, 0x4c6224, 4) , (const, 0x39a, 4)]
[(ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x39a, 4)]
[(stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x39a, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x39a, 4)]
[(stack, 0xfffffffffffffe90, 4) INDIRECT (stack, 0xfffffffffffffe90, 4) , (const, 0x39a, 4)]
[(stack, 0xfffffffffffffe94, 4) INDIRECT (stack, 0xfffffffffffffe94, 4) , (const, 0x39a, 4)]
[(stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x39a, 4)]
[(stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x39a, 4)]
[(stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x39a, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x39a, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x39a, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x39a, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x39a, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x39a, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x39a, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x39a, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x39a, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x39a, 4)]
[(stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0x39a, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x39a, 4)]
[(stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0x39a, 4)]
[(stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0x39a, 4)]
[(stack, 0xffffffffffffffb8, 4) INDIRECT (stack, 0xffffffffffffffb8, 4) , (const, 0x39a, 4)]
[(stack, 0xffffffffffffffc8, 4) INDIRECT (stack, 0xffffffffffffffc8, 4) , (const, 0x39a, 4)]
[ ---  CALL (ram, 0x17b150, 8) , (unique, 0x1000069b, 8) , (const, 0x20, 4), (unique, 0x1000069b, 8) CAST (register, 0x0, 8)]
[ ---  BRANCH (ram, 0x1ff8db, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0x0, 8) , (const, 0x28, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[(ram, 0x4c2e08, 8) INDIRECT (ram, 0x4c2e08, 8) , (const, 0x157, 4), (ram, 0x4c2e08, 8) INDIRECT (ram, 0x4c2e08, 8) , (const, 0x155, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x157, 4), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x155, 4)]
[(ram, 0x4c3210, 4) INDIRECT (ram, 0x4c3210, 4) , (const, 0x157, 4), (ram, 0x4c3210, 4) INDIRECT (ram, 0x4c3210, 4) , (const, 0x155, 4)]
[(ram, 0x4c3214, 4) INDIRECT (ram, 0x4c3214, 4) , (const, 0x157, 4), (ram, 0x4c3214, 4) INDIRECT (ram, 0x4c3214, 4) , (const, 0x155, 4)]
[(ram, 0x4c3218, 4) INDIRECT (ram, 0x4c3218, 4) , (const, 0x157, 4), (ram, 0x4c3218, 4) INDIRECT (ram, 0x4c3218, 4) , (const, 0x155, 4)]
[(ram, 0x4c321c, 4) INDIRECT (ram, 0x4c321c, 4) , (const, 0x157, 4), (ram, 0x4c321c, 4) INDIRECT (ram, 0x4c321c, 4) , (const, 0x155, 4)]
[(ram, 0x4c6210, 4) INDIRECT (ram, 0x4c6210, 4) , (const, 0x157, 4), (ram, 0x4c6210, 4) INDIRECT (ram, 0x4c6210, 4) , (const, 0x155, 4)]
[(ram, 0x4c6218, 8) INDIRECT (ram, 0x4c6218, 8) , (const, 0x157, 4), (ram, 0x4c6218, 8) INDIRECT (ram, 0x4c6218, 8) , (const, 0x155, 4)]
[(ram, 0x4c6220, 4) INDIRECT (ram, 0x4c6220, 4) , (const, 0x157, 4), (ram, 0x4c6220, 4) INDIRECT (ram, 0x4c6220, 4) , (const, 0x155, 4)]
[(ram, 0x4c6224, 4) INDIRECT (ram, 0x4c6224, 4) , (const, 0x157, 4), (ram, 0x4c6224, 4) INDIRECT (ram, 0x4c6224, 4) , (const, 0x155, 4)]
[(ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x157, 4), (ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x155, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0xbd80, 8) , (const, 0x20, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100006a3, 8) , (unique, 0xbc80, 4), (unique, 0x100006a3, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (unique, 0x10000573, 8) , (register, 0x110, 8) , (const, 0x1, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CALL (ram, 0x14d130, 8) , (register, 0x0, 8) , (register, 0x30, 8) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffe90, 8)]
[(ram, 0x4c2e08, 8) INDIRECT (ram, 0x4c2e08, 8) , (const, 0x165, 4), (ram, 0x4c2e08, 8) INDIRECT (ram, 0x4c2e08, 8) , (const, 0x161, 4), (ram, 0x4c2e08, 8) INDIRECT (ram, 0x4c2e08, 8) , (const, 0x15e, 4), (ram, 0x4c2e08, 8) MULTIEQUAL (ram, 0x4c2e08, 8) , (ram, 0x4c2e08, 8) , (ram, 0x4c2e08, 8) , (ram, 0x4c2e08, 8)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x165, 4), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x161, 4), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x15e, 4), (ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(ram, 0x4c3210, 4) INDIRECT (ram, 0x4c3210, 4) , (const, 0x165, 4), (ram, 0x4c3210, 4) INDIRECT (ram, 0x4c3210, 4) , (const, 0x161, 4), (ram, 0x4c3210, 4) INDIRECT (ram, 0x4c3210, 4) , (const, 0x15e, 4), (ram, 0x4c3210, 4) MULTIEQUAL (ram, 0x4c3210, 4) , (ram, 0x4c3210, 4) , (ram, 0x4c3210, 4) , (ram, 0x4c3210, 4)]
[(ram, 0x4c3214, 4) INDIRECT (ram, 0x4c3214, 4) , (const, 0x165, 4), (ram, 0x4c3214, 4) INDIRECT (ram, 0x4c3214, 4) , (const, 0x161, 4), (ram, 0x4c3214, 4) INDIRECT (ram, 0x4c3214, 4) , (const, 0x15e, 4), (ram, 0x4c3214, 4) MULTIEQUAL (ram, 0x4c3214, 4) , (ram, 0x4c3214, 4) , (ram, 0x4c3214, 4) , (ram, 0x4c3214, 4)]
[(ram, 0x4c3218, 4) INDIRECT (ram, 0x4c3218, 4) , (const, 0x165, 4), (ram, 0x4c3218, 4) INDIRECT (ram, 0x4c3218, 4) , (const, 0x161, 4), (ram, 0x4c3218, 4) INDIRECT (ram, 0x4c3218, 4) , (const, 0x15e, 4), (ram, 0x4c3218, 4) MULTIEQUAL (ram, 0x4c3218, 4) , (ram, 0x4c3218, 4) , (ram, 0x4c3218, 4) , (ram, 0x4c3218, 4)]
[(ram, 0x4c321c, 4) INDIRECT (ram, 0x4c321c, 4) , (const, 0x165, 4), (ram, 0x4c321c, 4) INDIRECT (ram, 0x4c321c, 4) , (const, 0x161, 4), (ram, 0x4c321c, 4) INDIRECT (ram, 0x4c321c, 4) , (const, 0x15e, 4), (ram, 0x4c321c, 4) MULTIEQUAL (ram, 0x4c321c, 4) , (ram, 0x4c321c, 4) , (ram, 0x4c321c, 4) , (ram, 0x4c321c, 4)]
[(ram, 0x4c6210, 4) INDIRECT (ram, 0x4c6210, 4) , (const, 0x165, 4), (ram, 0x4c6210, 4) INDIRECT (ram, 0x4c6210, 4) , (const, 0x161, 4), (ram, 0x4c6210, 4) INDIRECT (ram, 0x4c6210, 4) , (const, 0x15e, 4), (ram, 0x4c6210, 4) MULTIEQUAL (ram, 0x4c6210, 4) , (ram, 0x4c6210, 4) , (ram, 0x4c6210, 4) , (ram, 0x4c6210, 4)]
[(ram, 0x4c6218, 8) INDIRECT (ram, 0x4c6218, 8) , (const, 0x165, 4), (ram, 0x4c6218, 8) INDIRECT (ram, 0x4c6218, 8) , (const, 0x161, 4), (ram, 0x4c6218, 8) INDIRECT (ram, 0x4c6218, 8) , (const, 0x15e, 4), (ram, 0x4c6218, 8) MULTIEQUAL (ram, 0x4c6218, 8) , (ram, 0x4c6218, 8) , (ram, 0x4c6218, 8) , (unique, 0xbd80, 8)]
[(ram, 0x4c6220, 4) INDIRECT (ram, 0x4c6220, 4) , (const, 0x165, 4), (ram, 0x4c6220, 4) INDIRECT (ram, 0x4c6220, 4) , (const, 0x161, 4), (ram, 0x4c6220, 4) INDIRECT (ram, 0x4c6220, 4) , (const, 0x15e, 4), (ram, 0x4c6220, 4) MULTIEQUAL (ram, 0x4c6220, 4) , (ram, 0x4c6220, 4) , (ram, 0x4c6220, 4) , (ram, 0x4c6220, 4)]
[(ram, 0x4c6224, 4) INDIRECT (ram, 0x4c6224, 4) , (const, 0x165, 4), (ram, 0x4c6224, 4) INDIRECT (ram, 0x4c6224, 4) , (const, 0x161, 4), (ram, 0x4c6224, 4) INDIRECT (ram, 0x4c6224, 4) , (const, 0x15e, 4), (ram, 0x4c6224, 4) MULTIEQUAL (ram, 0x4c6224, 4) , (ram, 0x4c6224, 4) , (ram, 0x4c6224, 4) , (ram, 0x4c6224, 4)]
[(ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x165, 4), (ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x161, 4), (ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x15e, 4), (ram, 0x4c87a0, 4) MULTIEQUAL (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x165, 4), (stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x161, 4), (stack, 0xfffffffffffffe88, 8) MULTIEQUAL (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8)]
[(stack, 0xfffffffffffffe90, 4) INDIRECT (stack, 0xfffffffffffffe90, 4) , (const, 0x165, 4), (stack, 0xfffffffffffffe90, 4) INDIRECT (stack, 0xfffffffffffffe90, 4) , (const, 0x161, 4), (stack, 0xfffffffffffffe90, 4) MULTIEQUAL (stack, 0xfffffffffffffe90, 4) , (stack, 0xfffffffffffffe90, 4) , (stack, 0xfffffffffffffe90, 4) , (stack, 0xfffffffffffffe90, 4)]
[(stack, 0xfffffffffffffe94, 4) INDIRECT (stack, 0xfffffffffffffe94, 4) , (const, 0x165, 4), (stack, 0xfffffffffffffe94, 4) INDIRECT (stack, 0xfffffffffffffe94, 4) , (const, 0x161, 4), (stack, 0xfffffffffffffe94, 4) MULTIEQUAL (stack, 0xfffffffffffffe94, 4) , (stack, 0xfffffffffffffe94, 4) , (stack, 0xfffffffffffffe94, 4) , (stack, 0xfffffffffffffe94, 4)]
[(stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x165, 4), (stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x161, 4), (stack, 0xfffffffffffffe98, 8) MULTIEQUAL (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8)]
[(stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x165, 4), (stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x161, 4), (stack, 0xfffffffffffffea0, 8) MULTIEQUAL (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8)]
[(stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x165, 4), (stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x161, 4), (stack, 0xfffffffffffffea8, 8) MULTIEQUAL (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x165, 4), (stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x161, 4), (stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x165, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x161, 4), (stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x165, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x161, 4), (stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x165, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x161, 4), (stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x165, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x161, 4), (stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x165, 4), (stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x161, 4), (stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x165, 4), (stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x161, 4), (stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x165, 4), (stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x161, 4), (stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x165, 4), (stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x161, 4), (stack, 0xffffffffffffff68, 4) MULTIEQUAL (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4)]
[(stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0x165, 4), (stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0x161, 4), (stack, 0xffffffffffffff78, 4) MULTIEQUAL (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x165, 4), (stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x161, 4), (stack, 0xffffffffffffff88, 4) MULTIEQUAL (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4)]
[(stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0x165, 4), (stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0x161, 4), (stack, 0xffffffffffffff98, 4) MULTIEQUAL (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4)]
[(stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0x165, 4), (stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0x161, 4), (stack, 0xffffffffffffffa8, 4) MULTIEQUAL (stack, 0xffffffffffffffa8, 4) , (stack, 0xffffffffffffffa8, 4) , (stack, 0xffffffffffffffa8, 4) , (stack, 0xffffffffffffffa8, 4)]
[(stack, 0xffffffffffffffb8, 4) INDIRECT (stack, 0xffffffffffffffb8, 4) , (const, 0x165, 4), (stack, 0xffffffffffffffb8, 4) INDIRECT (stack, 0xffffffffffffffb8, 4) , (const, 0x161, 4), (stack, 0xffffffffffffffb8, 4) MULTIEQUAL (stack, 0xffffffffffffffb8, 4) , (stack, 0xffffffffffffffb8, 4) , (stack, 0xffffffffffffffb8, 4) , (stack, 0xffffffffffffffb8, 4)]
[(stack, 0xffffffffffffffc8, 4) INDIRECT (stack, 0xffffffffffffffc8, 4) , (const, 0x165, 4), (stack, 0xffffffffffffffc8, 4) INDIRECT (stack, 0xffffffffffffffc8, 4) , (const, 0x161, 4), (stack, 0xffffffffffffffc8, 4) MULTIEQUAL (stack, 0xffffffffffffffc8, 4) , (stack, 0xffffffffffffffc8, 4) , (stack, 0xffffffffffffffc8, 4) , (stack, 0xffffffffffffffc8, 4)]
[ ---  CALL (ram, 0x16d210, 8) , (register, 0x0, 8)]
[(unique, 0x1000058f, 8) COPY (stack, 0xfffffffffffffe80, 8), (stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x165, 4), (stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x161, 4), (stack, 0xfffffffffffffe80, 8) MULTIEQUAL (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8)]
[(stack, 0xffffffffffffffc8, 4) MULTIEQUAL (stack, 0xffffffffffffffc8, 4) , (stack, 0xffffffffffffffc8, 4)]
[(stack, 0xffffffffffffffb8, 4) MULTIEQUAL (stack, 0xffffffffffffffb8, 4) , (stack, 0xffffffffffffffb8, 4)]
[(stack, 0xffffffffffffffa8, 4) MULTIEQUAL (stack, 0xffffffffffffffa8, 4) , (stack, 0xffffffffffffffa8, 4)]
[(stack, 0xffffffffffffff98, 4) MULTIEQUAL (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4)]
[(stack, 0xffffffffffffff88, 4) MULTIEQUAL (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4)]
[(stack, 0xffffffffffffff78, 4) MULTIEQUAL (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4)]
[(stack, 0xffffffffffffff68, 4) MULTIEQUAL (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4)]
[(stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(stack, 0xfffffffffffffea8, 8) MULTIEQUAL (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8)]
[(stack, 0xfffffffffffffea0, 8) MULTIEQUAL (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8)]
[(stack, 0xfffffffffffffe98, 8) MULTIEQUAL (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8)]
[(stack, 0xfffffffffffffe94, 4) MULTIEQUAL (stack, 0xfffffffffffffe94, 4) , (stack, 0xfffffffffffffe94, 4)]
[(stack, 0xfffffffffffffe90, 4) MULTIEQUAL (stack, 0xfffffffffffffe90, 4) , (stack, 0xfffffffffffffe90, 4)]
[(stack, 0xfffffffffffffe88, 8) MULTIEQUAL (stack, 0xfffffffffffffe88, 8) , (register, 0x0, 8)]
[(stack, 0xfffffffffffffe80, 8) MULTIEQUAL (unique, 0x1000058f, 8) , (unique, 0x10000597, 8)]
[(ram, 0x4c87a0, 4) MULTIEQUAL (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4)]
[(ram, 0x4c6224, 4) MULTIEQUAL (ram, 0x4c6224, 4) , (ram, 0x4c6224, 4)]
[(ram, 0x4c6218, 8) MULTIEQUAL (ram, 0x4c6218, 8) , (ram, 0x4c6218, 8)]
[(ram, 0x4c6210, 4) MULTIEQUAL (ram, 0x4c6210, 4) , (ram, 0x4c6210, 4)]
[(ram, 0x4c321c, 4) MULTIEQUAL (ram, 0x4c321c, 4) , (ram, 0x4c321c, 4)]
[(ram, 0x4c3218, 4) MULTIEQUAL (ram, 0x4c3218, 4) , (ram, 0x4c3218, 4)]
[(ram, 0x4c3214, 4) MULTIEQUAL (ram, 0x4c3214, 4) , (ram, 0x4c3214, 4)]
[(ram, 0x4c3210, 4) MULTIEQUAL (ram, 0x4c3210, 4) , (ram, 0x4c3210, 4)]
[(ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(ram, 0x4c2e08, 8) MULTIEQUAL (ram, 0x4c2e08, 8) , (ram, 0x4c2e08, 8)]
[(register, 0x28, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x28, 8)]
[ ---  CBRANCH (ram, 0x1ff96a, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x100003d1, 4) , (const, 0x0, 4), (unique, 0x100003d1, 4) INT_AND (ram, 0x4c6220, 4) , (const, 0x20, 4), (ram, 0x4c6220, 4) MULTIEQUAL (ram, 0x4c6220, 4) , (ram, 0x4c6220, 4)]
[(stack, 0xfffffffffffffec8, 8) COPY (unique, 0x3400, 8), (unique, 0x3400, 8) CAST (unique, 0x100006b3, 8), (unique, 0x100006b3, 8) INT_ADD (unique, 0x100006ab, 8) , (register, 0x28, 8), (unique, 0x100006ab, 8) CAST (stack, 0xfffffffffffffe80, 8)]
[(stack, 0xfffffffffffffed0, 8) COPY (unique, 0x100006bb, 8), (unique, 0x100006bb, 8) CAST (register, 0x10, 8), (register, 0x10, 8) PTRADD (stack, 0xfffffffffffffe88, 8) , (unique, 0x100001ad, 8) , (const, 0x1, 8), (unique, 0x100001ad, 8) INT_2COMP (register, 0x28, 8)]
[(register, 0x10, 4) COPY (const, 0x1, 4)]
[ ---  CBRANCH (ram, 0x1ff945, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0xa, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) PTRADD (stack, 0xfffffffffffffe88, 8) , (unique, 0x3880, 8) , (const, 0x1, 8), (unique, 0x3880, 8) INT_ADD (unique, 0x100006c3, 8) , (const, 0xffffffffffffffff, 8), (unique, 0x100006c3, 8) CAST (stack, 0xfffffffffffffe80, 8)]
[(stack, 0xfffffffffffffee0, 8) COPY (const, 0x1, 8)]
[(register, 0x10, 4) COPY (const, 0x2, 4)]
[(stack, 0xfffffffffffffed8, 8) COPY (const, 0x28bea9, 8)]
[(ram, 0x4c2e08, 8) INDIRECT (ram, 0x4c2e08, 8) , (const, 0x1b7, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x1b7, 4)]
[(ram, 0x4c3210, 4) INDIRECT (ram, 0x4c3210, 4) , (const, 0x1b7, 4)]
[(ram, 0x4c3214, 4) INDIRECT (ram, 0x4c3214, 4) , (const, 0x1b7, 4)]
[(ram, 0x4c3218, 4) INDIRECT (ram, 0x4c3218, 4) , (const, 0x1b7, 4)]
[(ram, 0x4c321c, 4) INDIRECT (ram, 0x4c321c, 4) , (const, 0x1b7, 4)]
[(ram, 0x4c6210, 4) INDIRECT (ram, 0x4c6210, 4) , (const, 0x1b7, 4)]
[(ram, 0x4c6218, 8) INDIRECT (ram, 0x4c6218, 8) , (const, 0x1b7, 4)]
[(ram, 0x4c6220, 4) INDIRECT (ram, 0x4c6220, 4) , (const, 0x1b7, 4)]
[(ram, 0x4c6224, 4) INDIRECT (ram, 0x4c6224, 4) , (const, 0x1b7, 4)]
[(ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x1b7, 4)]
[(stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x1b7, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x1b7, 4)]
[(stack, 0xfffffffffffffe90, 4) INDIRECT (stack, 0xfffffffffffffe90, 4) , (const, 0x1b7, 4)]
[(stack, 0xfffffffffffffe94, 4) INDIRECT (stack, 0xfffffffffffffe94, 4) , (const, 0x1b7, 4)]
[(stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x1b7, 4)]
[(stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x1b7, 4)]
[(stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x1b7, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x1b7, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x1b7, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x1b7, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x1b7, 4), (stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x1b7, 4), (stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x1b7, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x1b7, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x1b7, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x1b7, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x1b7, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x1b7, 4)]
[(stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0x1b7, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x1b7, 4)]
[(stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0x1b7, 4)]
[(stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0x1b7, 4)]
[(stack, 0xffffffffffffffb8, 4) INDIRECT (stack, 0xffffffffffffffb8, 4) , (const, 0x1b7, 4)]
[(stack, 0xffffffffffffffc8, 4) INDIRECT (stack, 0xffffffffffffffc8, 4) , (const, 0x1b7, 4)]
[ ---  CALL (ram, 0x1fc710, 8) , (const, 0x2, 4) , (unique, 0x3800, 8) , (register, 0x10, 4), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffec8, 8), (register, 0x10, 4) MULTIEQUAL (register, 0x10, 4) , (register, 0x10, 4)]
[(stack, 0xffffffffffffffc8, 4) MULTIEQUAL (stack, 0xffffffffffffffc8, 4) , (stack, 0xffffffffffffffc8, 4)]
[(stack, 0xffffffffffffffb8, 4) MULTIEQUAL (stack, 0xffffffffffffffb8, 4) , (stack, 0xffffffffffffffb8, 4)]
[(stack, 0xffffffffffffffa8, 4) MULTIEQUAL (stack, 0xffffffffffffffa8, 4) , (stack, 0xffffffffffffffa8, 4)]
[(stack, 0xffffffffffffff98, 4) MULTIEQUAL (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4)]
[(stack, 0xffffffffffffff88, 4) MULTIEQUAL (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4)]
[(stack, 0xffffffffffffff78, 4) MULTIEQUAL (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4)]
[(stack, 0xffffffffffffff68, 4) MULTIEQUAL (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4)]
[(stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(stack, 0xfffffffffffffea8, 8) MULTIEQUAL (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8)]
[(stack, 0xfffffffffffffea0, 8) MULTIEQUAL (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8)]
[(stack, 0xfffffffffffffe98, 8) MULTIEQUAL (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8)]
[(stack, 0xfffffffffffffe94, 4) MULTIEQUAL (stack, 0xfffffffffffffe94, 4) , (stack, 0xfffffffffffffe94, 4)]
[(stack, 0xfffffffffffffe90, 4) MULTIEQUAL (stack, 0xfffffffffffffe90, 4) , (stack, 0xfffffffffffffe90, 4)]
[(stack, 0xfffffffffffffe88, 8) MULTIEQUAL (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8)]
[(ram, 0x4c6224, 4) MULTIEQUAL (ram, 0x4c6224, 4) , (ram, 0x4c6224, 4)]
[(ram, 0x4c6220, 4) MULTIEQUAL (ram, 0x4c6220, 4) , (ram, 0x4c6220, 4)]
[(ram, 0x4c6218, 8) MULTIEQUAL (ram, 0x4c6218, 8) , (ram, 0x4c6218, 8)]
[(ram, 0x4c6210, 4) MULTIEQUAL (ram, 0x4c6210, 4) , (ram, 0x4c6210, 4)]
[(ram, 0x4c321c, 4) MULTIEQUAL (ram, 0x4c321c, 4) , (ram, 0x4c321c, 4)]
[(ram, 0x4c3218, 4) MULTIEQUAL (ram, 0x4c3218, 4) , (ram, 0x4c3218, 4)]
[(ram, 0x4c3214, 4) MULTIEQUAL (ram, 0x4c3214, 4) , (ram, 0x4c3214, 4)]
[(ram, 0x4c3210, 4) MULTIEQUAL (ram, 0x4c3210, 4) , (ram, 0x4c3210, 4)]
[(ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(ram, 0x4c2e08, 8) MULTIEQUAL (ram, 0x4c2e08, 8) , (ram, 0x4c2e08, 8)]
[(stack, 0xfffffffffffffed0, 8) COPY (const, 0x0, 8)]
[(unique, 0x1000061f, 8) COPY (stack, 0xfffffffffffffe80, 8), (stack, 0xfffffffffffffe80, 8) MULTIEQUAL (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8)]
[ ---  CBRANCH (ram, 0x1ff994, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4c87a0, 4) , (const, 0x0, 4), (ram, 0x4c87a0, 4) MULTIEQUAL (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4)]
[ ---  CBRANCH (const, 0x4, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4c6210, 4) , (const, 0x0, 4)]
[(ram, 0x4c6210, 4) COPY (const, 0x1, 4)]
[ ---  CALLOTHER (const, 0x11, 4)]
[ ---  CBRANCH (const, 0x4, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4c6210, 4) , (const, 0x0, 4)]
[(ram, 0x4c6210, 4) COPY (const, 0x1, 4)]
[ ---  BRANCH (ram, 0x1ff9b7, 1)]
[(ram, 0x4c2e08, 8) INDIRECT (ram, 0x4c2e08, 8) , (const, 0x37c, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x37c, 4)]
[(ram, 0x4c3210, 4) INDIRECT (ram, 0x4c3210, 4) , (const, 0x37c, 4)]
[(ram, 0x4c3214, 4) INDIRECT (ram, 0x4c3214, 4) , (const, 0x37c, 4)]
[(ram, 0x4c3218, 4) INDIRECT (ram, 0x4c3218, 4) , (const, 0x37c, 4)]
[(ram, 0x4c321c, 4) INDIRECT (ram, 0x4c321c, 4) , (const, 0x37c, 4)]
[(ram, 0x4c6210, 4) INDIRECT (ram, 0x4c6210, 4) , (const, 0x37c, 4)]
[(ram, 0x4c6218, 8) INDIRECT (ram, 0x4c6218, 8) , (const, 0x37c, 4)]
[(ram, 0x4c6220, 4) INDIRECT (ram, 0x4c6220, 4) , (const, 0x37c, 4)]
[(ram, 0x4c6224, 4) INDIRECT (ram, 0x4c6224, 4) , (const, 0x37c, 4)]
[(ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x37c, 4)]
[(stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x37c, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x37c, 4)]
[(stack, 0xfffffffffffffe90, 4) INDIRECT (stack, 0xfffffffffffffe90, 4) , (const, 0x37c, 4)]
[(stack, 0xfffffffffffffe94, 4) INDIRECT (stack, 0xfffffffffffffe94, 4) , (const, 0x37c, 4)]
[(stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x37c, 4)]
[(stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x37c, 4)]
[(stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x37c, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x37c, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (unique, 0x1000061f, 8) , (const, 0x37c, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x37c, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x37c, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x37c, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x37c, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x37c, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x37c, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x37c, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x37c, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x37c, 4)]
[(stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0x37c, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x37c, 4)]
[(stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0x37c, 4)]
[(stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0x37c, 4)]
[(stack, 0xffffffffffffffb8, 4) INDIRECT (stack, 0xffffffffffffffb8, 4) , (const, 0x37c, 4)]
[(stack, 0xffffffffffffffc8, 4) INDIRECT (stack, 0xffffffffffffffc8, 4) , (const, 0x37c, 4)]
[ ---  CALL (ram, 0x2147c0, 8)]
[(stack, 0xffffffffffffffc8, 4) MULTIEQUAL (stack, 0xffffffffffffffc8, 4) , (stack, 0xffffffffffffffc8, 4) , (stack, 0xffffffffffffffc8, 4)]
[(stack, 0xffffffffffffffb8, 4) MULTIEQUAL (stack, 0xffffffffffffffb8, 4) , (stack, 0xffffffffffffffb8, 4) , (stack, 0xffffffffffffffb8, 4)]
[(stack, 0xffffffffffffffa8, 4) MULTIEQUAL (stack, 0xffffffffffffffa8, 4) , (stack, 0xffffffffffffffa8, 4) , (stack, 0xffffffffffffffa8, 4)]
[(stack, 0xffffffffffffff98, 4) MULTIEQUAL (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4)]
[(stack, 0xffffffffffffff88, 4) MULTIEQUAL (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4)]
[(stack, 0xffffffffffffff78, 4) MULTIEQUAL (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4)]
[(stack, 0xffffffffffffff68, 4) MULTIEQUAL (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4)]
[(stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (unique, 0x1000061f, 8) , (stack, 0xfffffffffffffec8, 8) , (unique, 0x1000061f, 8)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(stack, 0xfffffffffffffea8, 8) MULTIEQUAL (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8)]
[(stack, 0xfffffffffffffea0, 8) MULTIEQUAL (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8)]
[(stack, 0xfffffffffffffe98, 8) MULTIEQUAL (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8)]
[(stack, 0xfffffffffffffe94, 4) MULTIEQUAL (stack, 0xfffffffffffffe94, 4) , (stack, 0xfffffffffffffe94, 4) , (stack, 0xfffffffffffffe94, 4)]
[(stack, 0xfffffffffffffe90, 4) MULTIEQUAL (stack, 0xfffffffffffffe90, 4) , (stack, 0xfffffffffffffe90, 4) , (stack, 0xfffffffffffffe90, 4)]
[(stack, 0xfffffffffffffe88, 8) MULTIEQUAL (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8)]
[(stack, 0xfffffffffffffe80, 8) MULTIEQUAL (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8)]
[(ram, 0x4c87a0, 4) MULTIEQUAL (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4)]
[(ram, 0x4c6220, 4) MULTIEQUAL (ram, 0x4c6220, 4) , (ram, 0x4c6220, 4) , (ram, 0x4c6220, 4)]
[(ram, 0x4c6218, 8) MULTIEQUAL (ram, 0x4c6218, 8) , (ram, 0x4c6218, 8) , (ram, 0x4c6218, 8)]
[(ram, 0x4c6210, 4) MULTIEQUAL (ram, 0x4c6210, 4) , (ram, 0x4c6210, 4) , (ram, 0x4c6210, 4)]
[(ram, 0x4c321c, 4) MULTIEQUAL (ram, 0x4c321c, 4) , (ram, 0x4c321c, 4) , (ram, 0x4c321c, 4)]
[(ram, 0x4c3218, 4) MULTIEQUAL (ram, 0x4c3218, 4) , (ram, 0x4c3218, 4) , (ram, 0x4c3218, 4)]
[(ram, 0x4c3214, 4) MULTIEQUAL (ram, 0x4c3214, 4) , (ram, 0x4c3214, 4) , (ram, 0x4c3214, 4)]
[(ram, 0x4c3210, 4) MULTIEQUAL (ram, 0x4c3210, 4) , (ram, 0x4c3210, 4) , (ram, 0x4c3210, 4)]
[(ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(ram, 0x4c2e08, 8) MULTIEQUAL (ram, 0x4c2e08, 8) , (ram, 0x4c2e08, 8) , (ram, 0x4c2e08, 8)]
[ ---  CBRANCH (ram, 0x1ffbd8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4c6224, 4) , (const, 0x0, 4), (ram, 0x4c6224, 4) MULTIEQUAL (ram, 0x4c6224, 4) , (ram, 0x4c6224, 4) , (ram, 0x4c6224, 4)]
[(ram, 0x4c2e08, 8) INDIRECT (ram, 0x4c2e08, 8) , (const, 0x361, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x361, 4)]
[(ram, 0x4c3210, 4) INDIRECT (ram, 0x4c3210, 4) , (const, 0x361, 4)]
[(ram, 0x4c3214, 4) INDIRECT (ram, 0x4c3214, 4) , (const, 0x361, 4)]
[(ram, 0x4c3218, 4) INDIRECT (ram, 0x4c3218, 4) , (const, 0x361, 4)]
[(ram, 0x4c6210, 4) INDIRECT (ram, 0x4c6210, 4) , (const, 0x361, 4)]
[(ram, 0x4c6218, 8) INDIRECT (ram, 0x4c6218, 8) , (const, 0x361, 4)]
[(ram, 0x4c6220, 4) INDIRECT (ram, 0x4c6220, 4) , (const, 0x361, 4)]
[(ram, 0x4c6224, 4) INDIRECT (ram, 0x4c6224, 4) , (const, 0x361, 4)]
[(ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x361, 4)]
[(stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x361, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x361, 4)]
[(stack, 0xfffffffffffffe90, 4) INDIRECT (stack, 0xfffffffffffffe90, 4) , (const, 0x361, 4)]
[(stack, 0xfffffffffffffe94, 4) INDIRECT (stack, 0xfffffffffffffe94, 4) , (const, 0x361, 4)]
[(stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x361, 4)]
[(stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x361, 4)]
[(stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x361, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x361, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x361, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x361, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x361, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x361, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x361, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x361, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x361, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x361, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x361, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x361, 4)]
[(stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0x361, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x361, 4)]
[(stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0x361, 4)]
[(stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0x361, 4)]
[(stack, 0xffffffffffffffb8, 4) INDIRECT (stack, 0xffffffffffffffb8, 4) , (const, 0x361, 4)]
[(stack, 0xffffffffffffffc8, 4) INDIRECT (stack, 0xffffffffffffffc8, 4) , (const, 0x361, 4)]
[ ---  CALL (ram, 0x1ff540, 8) , (ram, 0x4c6218, 8) , (register, 0x30, 4) , (const, 0x0, 8), (register, 0x30, 4) INT_OR (ram, 0x4c6220, 4) , (const, 0x8, 4)]
[ ---  CBRANCH (ram, 0x1ff9d8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4c321c, 4) , (const, 0x1, 4), (ram, 0x4c321c, 4) INDIRECT (ram, 0x4c321c, 4) , (const, 0x361, 4)]
[ ---  CBRANCH (ram, 0x1ffb08, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4c321c, 4) , (const, 0x1, 4)]
[(stack, 0xffffffffffffffc8, 4) MULTIEQUAL (stack, 0xffffffffffffffc8, 4) , (stack, 0xffffffffffffffc8, 4)]
[(stack, 0xffffffffffffffb8, 4) MULTIEQUAL (stack, 0xffffffffffffffb8, 4) , (stack, 0xffffffffffffffb8, 4)]
[(stack, 0xffffffffffffffa8, 4) MULTIEQUAL (stack, 0xffffffffffffffa8, 4) , (stack, 0xffffffffffffffa8, 4)]
[(stack, 0xffffffffffffff98, 4) MULTIEQUAL (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4)]
[(stack, 0xffffffffffffff88, 4) MULTIEQUAL (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4)]
[(stack, 0xffffffffffffff78, 4) MULTIEQUAL (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4)]
[(stack, 0xffffffffffffff68, 4) MULTIEQUAL (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4)]
[(stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(stack, 0xfffffffffffffea8, 8) MULTIEQUAL (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8)]
[(stack, 0xfffffffffffffea0, 8) MULTIEQUAL (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8)]
[(stack, 0xfffffffffffffe98, 8) MULTIEQUAL (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8)]
[(stack, 0xfffffffffffffe94, 4) MULTIEQUAL (stack, 0xfffffffffffffe94, 4) , (stack, 0xfffffffffffffe94, 4)]
[(stack, 0xfffffffffffffe90, 4) MULTIEQUAL (stack, 0xfffffffffffffe90, 4) , (stack, 0xfffffffffffffe90, 4)]
[(stack, 0xfffffffffffffe80, 8) MULTIEQUAL (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8)]
[(ram, 0x4c87a0, 4) MULTIEQUAL (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4)]
[(ram, 0x4c6224, 4) MULTIEQUAL (ram, 0x4c6224, 4) , (ram, 0x4c6224, 4)]
[(ram, 0x4c6220, 4) MULTIEQUAL (ram, 0x4c6220, 4) , (ram, 0x4c6220, 4)]
[(ram, 0x4c6218, 8) MULTIEQUAL (ram, 0x4c6218, 8) , (ram, 0x4c6218, 8)]
[(ram, 0x4c6210, 4) MULTIEQUAL (ram, 0x4c6210, 4) , (ram, 0x4c6210, 4)]
[(ram, 0x4c321c, 4) MULTIEQUAL (ram, 0x4c321c, 4) , (ram, 0x4c321c, 4)]
[(ram, 0x4c3218, 4) MULTIEQUAL (ram, 0x4c3218, 4) , (ram, 0x4c3218, 4)]
[(ram, 0x4c3214, 4) MULTIEQUAL (ram, 0x4c3214, 4) , (ram, 0x4c3214, 4)]
[(ram, 0x4c3210, 4) MULTIEQUAL (ram, 0x4c3210, 4) , (ram, 0x4c3210, 4)]
[(ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(ram, 0x4c2e08, 8) MULTIEQUAL (ram, 0x4c2e08, 8) , (ram, 0x4c2e08, 8)]
[(unique, 0xbe00, 8) PTRADD (stack, 0xfffffffffffffe88, 8) , (const, 0x1, 8) , (const, 0x1, 8), (stack, 0xfffffffffffffe88, 8) MULTIEQUAL (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8)]
[(stack, 0xffffffffffffffc8, 4) MULTIEQUAL (stack, 0xffffffffffffffc8, 4) , (stack, 0xffffffffffffffc8, 4)]
[(stack, 0xffffffffffffffb8, 4) MULTIEQUAL (stack, 0xffffffffffffffb8, 4) , (stack, 0xffffffffffffffb8, 4)]
[(stack, 0xffffffffffffffa8, 4) MULTIEQUAL (stack, 0xffffffffffffffa8, 4) , (stack, 0xffffffffffffffa8, 4)]
[(stack, 0xffffffffffffff98, 4) MULTIEQUAL (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4)]
[(stack, 0xffffffffffffff88, 4) MULTIEQUAL (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4)]
[(stack, 0xffffffffffffff78, 4) MULTIEQUAL (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4)]
[(stack, 0xffffffffffffff68, 4) MULTIEQUAL (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4)]
[(stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(stack, 0xfffffffffffffea8, 8) MULTIEQUAL (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8)]
[(stack, 0xfffffffffffffea0, 8) MULTIEQUAL (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8)]
[(stack, 0xfffffffffffffe98, 8) MULTIEQUAL (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8)]
[(stack, 0xfffffffffffffe94, 4) MULTIEQUAL (stack, 0xfffffffffffffe94, 4) , (stack, 0xfffffffffffffe94, 4)]
[(stack, 0xfffffffffffffe90, 4) MULTIEQUAL (stack, 0xfffffffffffffe90, 4) , (stack, 0xfffffffffffffe90, 4)]
[(stack, 0xfffffffffffffe88, 8) MULTIEQUAL (unique, 0xbe00, 8) , (stack, 0xfffffffffffffe88, 8)]
[(stack, 0xfffffffffffffe80, 8) MULTIEQUAL (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8)]
[(ram, 0x4c87a0, 4) MULTIEQUAL (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4)]
[(ram, 0x4c6220, 4) MULTIEQUAL (ram, 0x4c6220, 4) , (ram, 0x4c6220, 4)]
[(ram, 0x4c6218, 8) MULTIEQUAL (ram, 0x4c6218, 8) , (ram, 0x4c6218, 8)]
[(ram, 0x4c6210, 4) MULTIEQUAL (ram, 0x4c6210, 4) , (ram, 0x4c6210, 4)]
[(ram, 0x4c321c, 4) MULTIEQUAL (ram, 0x4c321c, 4) , (ram, 0x4c321c, 4)]
[(ram, 0x4c3218, 4) MULTIEQUAL (ram, 0x4c3218, 4) , (ram, 0x4c3218, 4)]
[(ram, 0x4c3214, 4) MULTIEQUAL (ram, 0x4c3214, 4) , (ram, 0x4c3214, 4)]
[(ram, 0x4c3210, 4) MULTIEQUAL (ram, 0x4c3210, 4) , (ram, 0x4c3210, 4)]
[(ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(ram, 0x4c2e08, 8) MULTIEQUAL (ram, 0x4c2e08, 8) , (ram, 0x4c2e08, 8)]
[ ---  CBRANCH (ram, 0x1ffb08, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4c6224, 4) , (const, 0x0, 4), (ram, 0x4c6224, 4) MULTIEQUAL (ram, 0x4c6224, 4) , (ram, 0x4c6224, 4)]
[(ram, 0x4c2e08, 8) INDIRECT (ram, 0x4c2e08, 8) , (const, 0x2d8, 4), (ram, 0x4c2e08, 8) MULTIEQUAL (ram, 0x4c2e08, 8) , (ram, 0x4c2e08, 8)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x2d8, 4), (ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(ram, 0x4c3210, 4) INDIRECT (ram, 0x4c3210, 4) , (const, 0x2d8, 4), (ram, 0x4c3210, 4) MULTIEQUAL (ram, 0x4c3210, 4) , (ram, 0x4c3210, 4)]
[(ram, 0x4c3214, 4) INDIRECT (ram, 0x4c3214, 4) , (const, 0x2d8, 4), (ram, 0x4c3214, 4) MULTIEQUAL (ram, 0x4c3214, 4) , (ram, 0x4c3214, 4)]
[(ram, 0x4c3218, 4) INDIRECT (ram, 0x4c3218, 4) , (const, 0x2d8, 4), (ram, 0x4c3218, 4) MULTIEQUAL (ram, 0x4c3218, 4) , (ram, 0x4c3218, 4)]
[(ram, 0x4c321c, 4) INDIRECT (ram, 0x4c321c, 4) , (const, 0x2d8, 4), (ram, 0x4c321c, 4) MULTIEQUAL (ram, 0x4c321c, 4) , (ram, 0x4c321c, 4)]
[(ram, 0x4c6210, 4) INDIRECT (ram, 0x4c6210, 4) , (const, 0x2d8, 4), (ram, 0x4c6210, 4) MULTIEQUAL (ram, 0x4c6210, 4) , (ram, 0x4c6210, 4)]
[(ram, 0x4c6218, 8) INDIRECT (ram, 0x4c6218, 8) , (const, 0x2d8, 4), (ram, 0x4c6218, 8) MULTIEQUAL (ram, 0x4c6218, 8) , (ram, 0x4c6218, 8)]
[(ram, 0x4c6220, 4) INDIRECT (ram, 0x4c6220, 4) , (const, 0x2d8, 4), (ram, 0x4c6220, 4) MULTIEQUAL (ram, 0x4c6220, 4) , (ram, 0x4c6220, 4)]
[(ram, 0x4c6224, 4) INDIRECT (ram, 0x4c6224, 4) , (const, 0x2d8, 4), (ram, 0x4c6224, 4) MULTIEQUAL (ram, 0x4c6224, 4) , (ram, 0x4c6224, 4)]
[(ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x2d8, 4), (ram, 0x4c87a0, 4) MULTIEQUAL (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4)]
[(stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x2d8, 4), (stack, 0xfffffffffffffe80, 8) MULTIEQUAL (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x2d8, 4), (stack, 0xfffffffffffffe88, 8) MULTIEQUAL (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8)]
[(stack, 0xfffffffffffffe90, 4) INDIRECT (stack, 0xfffffffffffffe90, 4) , (const, 0x2d8, 4), (stack, 0xfffffffffffffe90, 4) MULTIEQUAL (stack, 0xfffffffffffffe90, 4) , (stack, 0xfffffffffffffe90, 4)]
[(stack, 0xfffffffffffffe94, 4) INDIRECT (stack, 0xfffffffffffffe94, 4) , (const, 0x2d8, 4), (stack, 0xfffffffffffffe94, 4) MULTIEQUAL (stack, 0xfffffffffffffe94, 4) , (stack, 0xfffffffffffffe94, 4)]
[(stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x2d8, 4), (stack, 0xfffffffffffffe98, 8) MULTIEQUAL (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8)]
[(stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x2d8, 4), (stack, 0xfffffffffffffea0, 8) MULTIEQUAL (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8)]
[(stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x2d8, 4), (stack, 0xfffffffffffffea8, 8) MULTIEQUAL (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x2d8, 4), (stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x2d8, 4), (stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x2d8, 4), (stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x2d8, 4), (stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x2d8, 4), (stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x2d8, 4), (stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x2d8, 4), (stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x2d8, 4), (stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x2d8, 4), (stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x2d8, 4), (stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x2d8, 4), (stack, 0xffffffffffffff68, 4) MULTIEQUAL (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4)]
[(stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0x2d8, 4), (stack, 0xffffffffffffff78, 4) MULTIEQUAL (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x2d8, 4), (stack, 0xffffffffffffff88, 4) MULTIEQUAL (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4)]
[(stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0x2d8, 4), (stack, 0xffffffffffffff98, 4) MULTIEQUAL (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4)]
[(stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0x2d8, 4), (stack, 0xffffffffffffffa8, 4) MULTIEQUAL (stack, 0xffffffffffffffa8, 4) , (stack, 0xffffffffffffffa8, 4)]
[(stack, 0xffffffffffffffb8, 4) INDIRECT (stack, 0xffffffffffffffb8, 4) , (const, 0x2d8, 4), (stack, 0xffffffffffffffb8, 4) MULTIEQUAL (stack, 0xffffffffffffffb8, 4) , (stack, 0xffffffffffffffb8, 4)]
[(stack, 0xffffffffffffffc8, 4) INDIRECT (stack, 0xffffffffffffffc8, 4) , (const, 0x2d8, 4), (stack, 0xffffffffffffffc8, 4) MULTIEQUAL (stack, 0xffffffffffffffc8, 4) , (stack, 0xffffffffffffffc8, 4)]
[ ---  CBRANCH (ram, 0x1ff9ed, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (const, 0xffffffffffffffff, 8) , (register, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x207b00, 8) , (ram, 0x4c3218, 4) , (stack, 0xfffffffffffffe80, 8) , (unique, 0x100006cb, 8) , (const, 0x4000, 4), (unique, 0x100006cb, 8) CAST (stack, 0xfffffffffffffe88, 8), (ram, 0x4c3218, 4) MULTIEQUAL (ram, 0x4c3218, 4) , (ram, 0x4c3218, 4), (stack, 0xfffffffffffffe80, 8) MULTIEQUAL (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8), (stack, 0xfffffffffffffe88, 8) MULTIEQUAL (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8)]
[ ---  CBRANCH (ram, 0x1ff9e0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4c6224, 4) , (const, 0x0, 4)]
[(ram, 0x4c3218, 4) INDIRECT (ram, 0x4c3218, 4) , (const, 0x2f4, 4)]
[(ram, 0x4c6224, 4) INDIRECT (ram, 0x4c6224, 4) , (const, 0x2f4, 4)]
[ ---  CALL (ram, 0x1f7030, 8) , (ram, 0x4c3218, 4)]
[(ram, 0x4c2e08, 8) INDIRECT (ram, 0x4c2e08, 8) , (const, 0x310, 4), (ram, 0x4c2e08, 8) INDIRECT (ram, 0x4c2e08, 8) , (const, 0x2f4, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x310, 4), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x2f4, 4)]
[(ram, 0x4c3210, 4) INDIRECT (ram, 0x4c3210, 4) , (const, 0x310, 4), (ram, 0x4c3210, 4) INDIRECT (ram, 0x4c3210, 4) , (const, 0x2f4, 4)]
[(ram, 0x4c3214, 4) INDIRECT (ram, 0x4c3214, 4) , (const, 0x310, 4), (ram, 0x4c3214, 4) INDIRECT (ram, 0x4c3214, 4) , (const, 0x2f4, 4)]
[(ram, 0x4c3218, 4) INDIRECT (ram, 0x4c3218, 4) , (const, 0x310, 4), (ram, 0x4c3218, 4) COPY (const, 0xffffffff, 4)]
[(ram, 0x4c321c, 4) INDIRECT (ram, 0x4c321c, 4) , (const, 0x310, 4), (ram, 0x4c321c, 4) INDIRECT (ram, 0x4c321c, 4) , (const, 0x2f4, 4)]
[(ram, 0x4c6210, 4) INDIRECT (ram, 0x4c6210, 4) , (const, 0x310, 4), (ram, 0x4c6210, 4) INDIRECT (ram, 0x4c6210, 4) , (const, 0x2f4, 4)]
[(ram, 0x4c6218, 8) INDIRECT (ram, 0x4c6218, 8) , (const, 0x310, 4), (ram, 0x4c6218, 8) INDIRECT (ram, 0x4c6218, 8) , (const, 0x2f4, 4)]
[(ram, 0x4c6220, 4) INDIRECT (ram, 0x4c6220, 4) , (const, 0x310, 4), (ram, 0x4c6220, 4) INDIRECT (ram, 0x4c6220, 4) , (const, 0x2f4, 4)]
[(ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x310, 4), (ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x2f4, 4)]
[(stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x310, 4), (stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x2f4, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x310, 4), (stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x2f4, 4)]
[(stack, 0xfffffffffffffe90, 4) INDIRECT (stack, 0xfffffffffffffe90, 4) , (const, 0x310, 4), (stack, 0xfffffffffffffe90, 4) INDIRECT (stack, 0xfffffffffffffe90, 4) , (const, 0x2f4, 4)]
[(stack, 0xfffffffffffffe94, 4) INDIRECT (stack, 0xfffffffffffffe94, 4) , (const, 0x310, 4), (stack, 0xfffffffffffffe94, 4) INDIRECT (stack, 0xfffffffffffffe94, 4) , (const, 0x2f4, 4)]
[(stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x310, 4), (stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x2f4, 4)]
[(stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x310, 4), (stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x2f4, 4)]
[(stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x310, 4), (stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x2f4, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x310, 4), (stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x2f4, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x310, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x2f4, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x310, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x2f4, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x310, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x2f4, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x310, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x2f4, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x310, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x2f4, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x310, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x2f4, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x310, 4), (stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x2f4, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x310, 4), (stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x2f4, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x310, 4), (stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x2f4, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x310, 4), (stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x2f4, 4)]
[(stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0x310, 4), (stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0x2f4, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x310, 4), (stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x2f4, 4)]
[(stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0x310, 4), (stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0x2f4, 4)]
[(stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0x310, 4), (stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0x2f4, 4)]
[(stack, 0xffffffffffffffb8, 4) INDIRECT (stack, 0xffffffffffffffb8, 4) , (const, 0x310, 4), (stack, 0xffffffffffffffb8, 4) INDIRECT (stack, 0xffffffffffffffb8, 4) , (const, 0x2f4, 4)]
[(stack, 0xffffffffffffffc8, 4) INDIRECT (stack, 0xffffffffffffffc8, 4) , (const, 0x310, 4), (stack, 0xffffffffffffffc8, 4) INDIRECT (stack, 0xffffffffffffffc8, 4) , (const, 0x2f4, 4)]
[ ---  CALL (ram, 0x1ff540, 8) , (ram, 0x4c6218, 8) , (register, 0x30, 4) , (const, 0x0, 8), (register, 0x30, 4) INT_OR (ram, 0x4c6220, 4) , (const, 0x8, 4), (ram, 0x4c6220, 4) INDIRECT (ram, 0x4c6220, 4) , (const, 0x2f4, 4), (ram, 0x4c6218, 8) INDIRECT (ram, 0x4c6218, 8) , (const, 0x2f4, 4)]
[ ---  CBRANCH (ram, 0x1ff9e0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4c6224, 4) , (const, 0x0, 4), (ram, 0x4c6224, 4) INDIRECT (ram, 0x4c6224, 4) , (const, 0x310, 4), (ram, 0x4c6224, 4) COPY (const, 0x0, 4)]
[(ram, 0x4c2e08, 8) INDIRECT (ram, 0x4c2e08, 8) , (const, 0x328, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x328, 4)]
[(ram, 0x4c3210, 4) INDIRECT (ram, 0x4c3210, 4) , (const, 0x328, 4)]
[(ram, 0x4c3214, 4) INDIRECT (ram, 0x4c3214, 4) , (const, 0x328, 4)]
[(ram, 0x4c3218, 4) INDIRECT (ram, 0x4c3218, 4) , (const, 0x328, 4)]
[(ram, 0x4c321c, 4) INDIRECT (ram, 0x4c321c, 4) , (const, 0x328, 4)]
[(ram, 0x4c6210, 4) INDIRECT (ram, 0x4c6210, 4) , (const, 0x328, 4)]
[(ram, 0x4c6218, 8) INDIRECT (ram, 0x4c6218, 8) , (const, 0x328, 4)]
[(ram, 0x4c6220, 4) INDIRECT (ram, 0x4c6220, 4) , (const, 0x328, 4)]
[(ram, 0x4c6224, 4) INDIRECT (ram, 0x4c6224, 4) , (const, 0x328, 4)]
[(ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x328, 4)]
[(stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x328, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x328, 4)]
[(stack, 0xfffffffffffffe90, 4) INDIRECT (stack, 0xfffffffffffffe90, 4) , (const, 0x328, 4)]
[(stack, 0xfffffffffffffe94, 4) INDIRECT (stack, 0xfffffffffffffe94, 4) , (const, 0x328, 4)]
[(stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x328, 4)]
[(stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x328, 4)]
[(stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x328, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x328, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x328, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x328, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x328, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x328, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x328, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x328, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x328, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x328, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x328, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x328, 4)]
[(stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0x328, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x328, 4)]
[(stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0x328, 4)]
[(stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0x328, 4)]
[(stack, 0xffffffffffffffb8, 4) INDIRECT (stack, 0xffffffffffffffb8, 4) , (const, 0x328, 4)]
[(stack, 0xffffffffffffffc8, 4) INDIRECT (stack, 0xffffffffffffffc8, 4) , (const, 0x328, 4)]
[ ---  CBRANCH (ram, 0x1ff9ed, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (const, 0xffffffffffffffff, 8) , (register, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x207b00, 8) , (ram, 0x4c3218, 4) , (stack, 0xfffffffffffffe80, 8) , (unique, 0x100006d3, 8) , (const, 0x4000, 4), (unique, 0x100006d3, 8) CAST (stack, 0xfffffffffffffe88, 8)]
[ ---  CBRANCH (ram, 0x1ff9e0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4c6224, 4) , (const, 0x0, 4)]
[(ram, 0x4c2e08, 8) INDIRECT (ram, 0x4c2e08, 8) , (const, 0x344, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x344, 4)]
[(ram, 0x4c3210, 4) INDIRECT (ram, 0x4c3210, 4) , (const, 0x344, 4)]
[(ram, 0x4c3214, 4) INDIRECT (ram, 0x4c3214, 4) , (const, 0x344, 4)]
[(ram, 0x4c3218, 4) INDIRECT (ram, 0x4c3218, 4) , (const, 0x344, 4)]
[(ram, 0x4c321c, 4) INDIRECT (ram, 0x4c321c, 4) , (const, 0x344, 4)]
[(ram, 0x4c6210, 4) INDIRECT (ram, 0x4c6210, 4) , (const, 0x344, 4)]
[(ram, 0x4c6218, 8) INDIRECT (ram, 0x4c6218, 8) , (const, 0x344, 4)]
[(ram, 0x4c6220, 4) INDIRECT (ram, 0x4c6220, 4) , (const, 0x344, 4)]
[(ram, 0x4c6224, 4) INDIRECT (ram, 0x4c6224, 4) , (const, 0x344, 4)]
[(ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x344, 4)]
[(stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x344, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x344, 4)]
[(stack, 0xfffffffffffffe90, 4) INDIRECT (stack, 0xfffffffffffffe90, 4) , (const, 0x344, 4)]
[(stack, 0xfffffffffffffe94, 4) INDIRECT (stack, 0xfffffffffffffe94, 4) , (const, 0x344, 4)]
[(stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x344, 4)]
[(stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x344, 4)]
[(stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x344, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x344, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x344, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x344, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x344, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x344, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x344, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x344, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x344, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x344, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x344, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x344, 4)]
[(stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0x344, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x344, 4)]
[(stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0x344, 4)]
[(stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0x344, 4)]
[(stack, 0xffffffffffffffb8, 4) INDIRECT (stack, 0xffffffffffffffb8, 4) , (const, 0x344, 4)]
[(stack, 0xffffffffffffffc8, 4) INDIRECT (stack, 0xffffffffffffffc8, 4) , (const, 0x344, 4)]
[ ---  CALL (ram, 0x1f7030, 8) , (ram, 0x4c3218, 4)]
[(ram, 0x4c3218, 4) COPY (const, 0xffffffff, 4)]
[(ram, 0x4c6224, 4) COPY (const, 0x0, 4)]
[ ---  BRANCH (ram, 0x1ff9e0, 1)]
[(stack, 0xffffffffffffffc8, 4) MULTIEQUAL (stack, 0xffffffffffffffc8, 4) , (stack, 0xffffffffffffffc8, 4) , (stack, 0xffffffffffffffc8, 4) , (stack, 0xffffffffffffffc8, 4) , (stack, 0xffffffffffffffc8, 4)]
[(stack, 0xffffffffffffffb8, 4) MULTIEQUAL (stack, 0xffffffffffffffb8, 4) , (stack, 0xffffffffffffffb8, 4) , (stack, 0xffffffffffffffb8, 4) , (stack, 0xffffffffffffffb8, 4) , (stack, 0xffffffffffffffb8, 4)]
[(stack, 0xffffffffffffffa8, 4) MULTIEQUAL (stack, 0xffffffffffffffa8, 4) , (stack, 0xffffffffffffffa8, 4) , (stack, 0xffffffffffffffa8, 4) , (stack, 0xffffffffffffffa8, 4) , (stack, 0xffffffffffffffa8, 4)]
[(stack, 0xffffffffffffff98, 4) MULTIEQUAL (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4)]
[(stack, 0xffffffffffffff88, 4) MULTIEQUAL (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4)]
[(stack, 0xffffffffffffff78, 4) MULTIEQUAL (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4)]
[(stack, 0xffffffffffffff68, 4) MULTIEQUAL (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4)]
[(stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(stack, 0xfffffffffffffea8, 8) MULTIEQUAL (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8)]
[(stack, 0xfffffffffffffea0, 8) MULTIEQUAL (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8)]
[(stack, 0xfffffffffffffe98, 8) MULTIEQUAL (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8)]
[(stack, 0xfffffffffffffe94, 4) MULTIEQUAL (stack, 0xfffffffffffffe94, 4) , (stack, 0xfffffffffffffe94, 4) , (stack, 0xfffffffffffffe94, 4) , (stack, 0xfffffffffffffe94, 4) , (stack, 0xfffffffffffffe94, 4)]
[(stack, 0xfffffffffffffe90, 4) MULTIEQUAL (stack, 0xfffffffffffffe90, 4) , (stack, 0xfffffffffffffe90, 4) , (stack, 0xfffffffffffffe90, 4) , (stack, 0xfffffffffffffe90, 4) , (stack, 0xfffffffffffffe90, 4)]
[(stack, 0xfffffffffffffe88, 8) MULTIEQUAL (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8)]
[(stack, 0xfffffffffffffe80, 8) MULTIEQUAL (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8)]
[(ram, 0x4c87a0, 4) MULTIEQUAL (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4)]
[(ram, 0x4c6224, 4) MULTIEQUAL (ram, 0x4c6224, 4) , (ram, 0x4c6224, 4) , (ram, 0x4c6224, 4) , (ram, 0x4c6224, 4) , (ram, 0x4c6224, 4)]
[(ram, 0x4c6218, 8) MULTIEQUAL (ram, 0x4c6218, 8) , (ram, 0x4c6218, 8) , (ram, 0x4c6218, 8) , (ram, 0x4c6218, 8) , (ram, 0x4c6218, 8)]
[(ram, 0x4c6210, 4) MULTIEQUAL (ram, 0x4c6210, 4) , (ram, 0x4c6210, 4) , (ram, 0x4c6210, 4) , (ram, 0x4c6210, 4) , (ram, 0x4c6210, 4)]
[(ram, 0x4c321c, 4) MULTIEQUAL (ram, 0x4c321c, 4) , (ram, 0x4c321c, 4) , (ram, 0x4c321c, 4) , (ram, 0x4c321c, 4) , (ram, 0x4c321c, 4)]
[(ram, 0x4c3218, 4) MULTIEQUAL (ram, 0x4c3218, 4) , (ram, 0x4c3218, 4) , (ram, 0x4c3218, 4) , (ram, 0x4c3218, 4) , (ram, 0x4c3218, 4)]
[(ram, 0x4c3214, 4) MULTIEQUAL (ram, 0x4c3214, 4) , (ram, 0x4c3214, 4) , (ram, 0x4c3214, 4) , (ram, 0x4c3214, 4) , (ram, 0x4c3214, 4)]
[(ram, 0x4c3210, 4) MULTIEQUAL (ram, 0x4c3210, 4) , (ram, 0x4c3210, 4) , (ram, 0x4c3210, 4) , (ram, 0x4c3210, 4) , (ram, 0x4c3210, 4)]
[(ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(ram, 0x4c2e08, 8) MULTIEQUAL (ram, 0x4c2e08, 8) , (ram, 0x4c2e08, 8) , (ram, 0x4c2e08, 8) , (ram, 0x4c2e08, 8) , (ram, 0x4c2e08, 8)]
[ ---  CBRANCH (ram, 0x1ffc60, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x100003d9, 4) , (const, 0x0, 4), (unique, 0x100003d9, 4) INT_AND (ram, 0x4c6220, 4) , (const, 0x2, 4), (ram, 0x4c6220, 4) MULTIEQUAL (ram, 0x4c6220, 4) , (ram, 0x4c6220, 4) , (ram, 0x4c6220, 4) , (ram, 0x4c6220, 4) , (ram, 0x4c6220, 4)]
[(ram, 0x4c2e08, 8) INDIRECT (ram, 0x4c2e08, 8) , (const, 0x29c, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x29c, 4)]
[(ram, 0x4c3210, 4) INDIRECT (ram, 0x4c3210, 4) , (const, 0x29c, 4)]
[(ram, 0x4c3214, 4) INDIRECT (ram, 0x4c3214, 4) , (const, 0x29c, 4)]
[(ram, 0x4c3218, 4) INDIRECT (ram, 0x4c3218, 4) , (const, 0x29c, 4)]
[(ram, 0x4c321c, 4) INDIRECT (ram, 0x4c321c, 4) , (const, 0x29c, 4)]
[(ram, 0x4c6210, 4) INDIRECT (ram, 0x4c6210, 4) , (const, 0x29c, 4)]
[(ram, 0x4c6218, 8) INDIRECT (ram, 0x4c6218, 8) , (const, 0x29c, 4)]
[(ram, 0x4c6220, 4) INDIRECT (ram, 0x4c6220, 4) , (const, 0x29c, 4)]
[(ram, 0x4c6224, 4) INDIRECT (ram, 0x4c6224, 4) , (const, 0x29c, 4)]
[(ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x29c, 4)]
[(stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x29c, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x29c, 4)]
[(stack, 0xfffffffffffffe90, 4) INDIRECT (stack, 0xfffffffffffffe90, 4) , (const, 0x29c, 4)]
[(stack, 0xfffffffffffffe94, 4) INDIRECT (stack, 0xfffffffffffffe94, 4) , (const, 0x29c, 4)]
[(stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x29c, 4)]
[(stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x29c, 4)]
[(stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x29c, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x29c, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x29c, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x29c, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x29c, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x29c, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x29c, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x29c, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x29c, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x29c, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x29c, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x29c, 4)]
[(stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0x29c, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x29c, 4)]
[(stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0x29c, 4)]
[(stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0x29c, 4)]
[(stack, 0xffffffffffffffb8, 4) INDIRECT (stack, 0xffffffffffffffb8, 4) , (const, 0x29c, 4)]
[(stack, 0xffffffffffffffc8, 4) INDIRECT (stack, 0xffffffffffffffc8, 4) , (const, 0x29c, 4)]
[ ---  CBRANCH (ram, 0x1ff9ed, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (const, 0xffffffff, 4) , (register, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x1f6780, 8) , (unique, 0x1000040c, 8) , (const, 0x101, 4) , (const, 0x0, 8), (unique, 0x1000040c, 8) COPY (const, 0x28e0e4, 8)]
[ ---  CALL (ram, 0x155a10, 8) , (register, 0x0, 4) , (unique, 0x10000414, 8) , (register, 0x10, 8), (unique, 0x10000414, 8) COPY (const, 0x28e0f1, 8), (register, 0x10, 8) INT_ADD (register, 0x28, 8) , (unique, 0x100006db, 8), (unique, 0x100006db, 8) CAST (stack, 0xfffffffffffffe80, 8)]
[(ram, 0x4c2e08, 8) INDIRECT (ram, 0x4c2e08, 8) , (const, 0x2cb, 4), (ram, 0x4c2e08, 8) INDIRECT (ram, 0x4c2e08, 8) , (const, 0x2c6, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x2cb, 4), (ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x2c6, 4)]
[(ram, 0x4c3210, 4) INDIRECT (ram, 0x4c3210, 4) , (const, 0x2cb, 4), (ram, 0x4c3210, 4) INDIRECT (ram, 0x4c3210, 4) , (const, 0x2c6, 4)]
[(ram, 0x4c3214, 4) INDIRECT (ram, 0x4c3214, 4) , (const, 0x2cb, 4), (ram, 0x4c3214, 4) INDIRECT (ram, 0x4c3214, 4) , (const, 0x2c6, 4)]
[(ram, 0x4c3218, 4) INDIRECT (ram, 0x4c3218, 4) , (const, 0x2cb, 4), (ram, 0x4c3218, 4) INDIRECT (ram, 0x4c3218, 4) , (const, 0x2c6, 4)]
[(ram, 0x4c321c, 4) INDIRECT (ram, 0x4c321c, 4) , (const, 0x2cb, 4), (ram, 0x4c321c, 4) INDIRECT (ram, 0x4c321c, 4) , (const, 0x2c6, 4)]
[(ram, 0x4c6210, 4) INDIRECT (ram, 0x4c6210, 4) , (const, 0x2cb, 4), (ram, 0x4c6210, 4) INDIRECT (ram, 0x4c6210, 4) , (const, 0x2c6, 4)]
[(ram, 0x4c6218, 8) INDIRECT (ram, 0x4c6218, 8) , (const, 0x2cb, 4), (ram, 0x4c6218, 8) INDIRECT (ram, 0x4c6218, 8) , (const, 0x2c6, 4)]
[(ram, 0x4c6220, 4) INDIRECT (ram, 0x4c6220, 4) , (const, 0x2cb, 4), (ram, 0x4c6220, 4) INDIRECT (ram, 0x4c6220, 4) , (const, 0x2c6, 4)]
[(ram, 0x4c6224, 4) INDIRECT (ram, 0x4c6224, 4) , (const, 0x2cb, 4), (ram, 0x4c6224, 4) INDIRECT (ram, 0x4c6224, 4) , (const, 0x2c6, 4)]
[(ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x2cb, 4), (ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x2c6, 4)]
[(stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x2cb, 4), (stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x2c6, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x2cb, 4), (stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x2c6, 4)]
[(stack, 0xfffffffffffffe90, 4) INDIRECT (stack, 0xfffffffffffffe90, 4) , (const, 0x2cb, 4), (stack, 0xfffffffffffffe90, 4) INDIRECT (stack, 0xfffffffffffffe90, 4) , (const, 0x2c6, 4)]
[(stack, 0xfffffffffffffe94, 4) INDIRECT (stack, 0xfffffffffffffe94, 4) , (const, 0x2cb, 4), (stack, 0xfffffffffffffe94, 4) INDIRECT (stack, 0xfffffffffffffe94, 4) , (const, 0x2c6, 4)]
[(stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x2cb, 4), (stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x2c6, 4)]
[(stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x2cb, 4), (stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x2c6, 4)]
[(stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x2cb, 4), (stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x2c6, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x2cb, 4), (stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x2c6, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x2cb, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x2c6, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x2cb, 4), (stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x2c6, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x2cb, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x2c6, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x2cb, 4), (stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x2c6, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x2cb, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x2c6, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x2cb, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x2c6, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x2cb, 4), (stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x2c6, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x2cb, 4), (stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x2c6, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x2cb, 4), (stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x2c6, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x2cb, 4), (stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x2c6, 4)]
[(stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0x2cb, 4), (stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0x2c6, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x2cb, 4), (stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x2c6, 4)]
[(stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0x2cb, 4), (stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0x2c6, 4)]
[(stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0x2cb, 4), (stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0x2c6, 4)]
[(stack, 0xffffffffffffffb8, 4) INDIRECT (stack, 0xffffffffffffffb8, 4) , (const, 0x2cb, 4), (stack, 0xffffffffffffffb8, 4) INDIRECT (stack, 0xffffffffffffffb8, 4) , (const, 0x2c6, 4)]
[(stack, 0xffffffffffffffc8, 4) INDIRECT (stack, 0xffffffffffffffc8, 4) , (const, 0x2cb, 4), (stack, 0xffffffffffffffc8, 4) INDIRECT (stack, 0xffffffffffffffc8, 4) , (const, 0x2c6, 4)]
[ ---  CALL (ram, 0x1f7030, 8) , (register, 0x0, 4)]
[ ---  BRANCH (ram, 0x1ff9ed, 1)]
[(stack, 0xffffffffffffffc8, 4) MULTIEQUAL (stack, 0xffffffffffffffc8, 4) , (stack, 0xffffffffffffffc8, 4) , (stack, 0xffffffffffffffc8, 4) , (stack, 0xffffffffffffffc8, 4) , (stack, 0xffffffffffffffc8, 4)]
[(stack, 0xffffffffffffffb8, 4) MULTIEQUAL (stack, 0xffffffffffffffb8, 4) , (stack, 0xffffffffffffffb8, 4) , (stack, 0xffffffffffffffb8, 4) , (stack, 0xffffffffffffffb8, 4) , (stack, 0xffffffffffffffb8, 4)]
[(stack, 0xffffffffffffffa8, 4) MULTIEQUAL (stack, 0xffffffffffffffa8, 4) , (stack, 0xffffffffffffffa8, 4) , (stack, 0xffffffffffffffa8, 4) , (stack, 0xffffffffffffffa8, 4) , (stack, 0xffffffffffffffa8, 4)]
[(stack, 0xffffffffffffff98, 4) MULTIEQUAL (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4)]
[(stack, 0xffffffffffffff88, 4) MULTIEQUAL (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4)]
[(stack, 0xffffffffffffff78, 4) MULTIEQUAL (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4)]
[(stack, 0xffffffffffffff68, 4) MULTIEQUAL (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4)]
[(stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(stack, 0xfffffffffffffea8, 8) MULTIEQUAL (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8)]
[(stack, 0xfffffffffffffea0, 8) MULTIEQUAL (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8)]
[(stack, 0xfffffffffffffe98, 8) MULTIEQUAL (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8)]
[(stack, 0xfffffffffffffe94, 4) MULTIEQUAL (stack, 0xfffffffffffffe94, 4) , (stack, 0xfffffffffffffe94, 4) , (stack, 0xfffffffffffffe94, 4) , (stack, 0xfffffffffffffe94, 4) , (stack, 0xfffffffffffffe94, 4)]
[(stack, 0xfffffffffffffe90, 4) MULTIEQUAL (stack, 0xfffffffffffffe90, 4) , (stack, 0xfffffffffffffe90, 4) , (stack, 0xfffffffffffffe90, 4) , (stack, 0xfffffffffffffe90, 4) , (stack, 0xfffffffffffffe90, 4)]
[(stack, 0xfffffffffffffe88, 8) MULTIEQUAL (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8)]
[(stack, 0xfffffffffffffe80, 8) MULTIEQUAL (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8)]
[(ram, 0x4c6224, 4) MULTIEQUAL (ram, 0x4c6224, 4) , (ram, 0x4c6224, 4) , (ram, 0x4c6224, 4) , (ram, 0x4c6224, 4) , (ram, 0x4c6224, 4)]
[(ram, 0x4c6220, 4) MULTIEQUAL (ram, 0x4c6220, 4) , (ram, 0x4c6220, 4) , (ram, 0x4c6220, 4) , (ram, 0x4c6220, 4) , (ram, 0x4c6220, 4)]
[(ram, 0x4c6218, 8) MULTIEQUAL (ram, 0x4c6218, 8) , (ram, 0x4c6218, 8) , (ram, 0x4c6218, 8) , (ram, 0x4c6218, 8) , (ram, 0x4c6218, 8)]
[(ram, 0x4c6210, 4) MULTIEQUAL (ram, 0x4c6210, 4) , (ram, 0x4c6210, 4) , (ram, 0x4c6210, 4) , (ram, 0x4c6210, 4) , (ram, 0x4c6210, 4)]
[(ram, 0x4c321c, 4) MULTIEQUAL (ram, 0x4c321c, 4) , (ram, 0x4c321c, 4) , (ram, 0x4c321c, 4) , (ram, 0x4c321c, 4) , (ram, 0x4c321c, 4)]
[(ram, 0x4c3218, 4) MULTIEQUAL (ram, 0x4c3218, 4) , (ram, 0x4c3218, 4) , (ram, 0x4c3218, 4) , (ram, 0x4c3218, 4) , (ram, 0x4c3218, 4)]
[(ram, 0x4c3214, 4) MULTIEQUAL (ram, 0x4c3214, 4) , (ram, 0x4c3214, 4) , (ram, 0x4c3214, 4) , (ram, 0x4c3214, 4) , (ram, 0x4c3214, 4)]
[(ram, 0x4c3210, 4) MULTIEQUAL (ram, 0x4c3210, 4) , (ram, 0x4c3210, 4) , (ram, 0x4c3210, 4) , (ram, 0x4c3210, 4) , (ram, 0x4c3210, 4)]
[(ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(ram, 0x4c2e08, 8) MULTIEQUAL (ram, 0x4c2e08, 8) , (ram, 0x4c2e08, 8) , (ram, 0x4c2e08, 8) , (ram, 0x4c2e08, 8) , (ram, 0x4c2e08, 8)]
[ ---  CBRANCH (ram, 0x1ffa01, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4c87a0, 4) , (const, 0x0, 4), (ram, 0x4c87a0, 4) MULTIEQUAL (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4)]
[ ---  CALLOTHER (const, 0x11, 4)]
[(unique, 0x10000587, 4) COPY (unique, 0x10000544, 4), (unique, 0x10000544, 4) INT_ADD (ram, 0x4c6210, 4) , (const, 0xffffffff, 4)]
[ ---  CBRANCH (ram, 0x1ffa23, 1) , (unique, 0x10000548, 1), (unique, 0x10000548, 1) INT_NOTEQUAL (unique, 0x10000544, 4) , (const, 0x0, 4), (unique, 0x10000544, 4) INT_ADD (ram, 0x4c6210, 4) , (const, 0xffffffff, 4)]
[(ram, 0x4c2e08, 8) INDIRECT (ram, 0x4c2e08, 8) , (const, 0x271, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x271, 4)]
[(ram, 0x4c3210, 4) INDIRECT (ram, 0x4c3210, 4) , (const, 0x271, 4)]
[(ram, 0x4c3214, 4) INDIRECT (ram, 0x4c3214, 4) , (const, 0x271, 4)]
[(ram, 0x4c3218, 4) INDIRECT (ram, 0x4c3218, 4) , (const, 0x271, 4)]
[(ram, 0x4c321c, 4) INDIRECT (ram, 0x4c321c, 4) , (const, 0x271, 4)]
[(ram, 0x4c6218, 8) INDIRECT (ram, 0x4c6218, 8) , (const, 0x271, 4)]
[(ram, 0x4c6220, 4) INDIRECT (ram, 0x4c6220, 4) , (const, 0x271, 4)]
[(ram, 0x4c6224, 4) INDIRECT (ram, 0x4c6224, 4) , (const, 0x271, 4)]
[(ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x271, 4)]
[(stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x271, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x271, 4)]
[(stack, 0xfffffffffffffe90, 4) INDIRECT (stack, 0xfffffffffffffe90, 4) , (const, 0x271, 4)]
[(stack, 0xfffffffffffffe94, 4) INDIRECT (stack, 0xfffffffffffffe94, 4) , (const, 0x271, 4)]
[(stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x271, 4)]
[(stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x271, 4)]
[(stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x271, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x271, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x271, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x271, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x271, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x271, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x271, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x271, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x271, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x271, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x271, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x271, 4)]
[(stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0x271, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x271, 4)]
[(stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0x271, 4)]
[(stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0x271, 4)]
[(stack, 0xffffffffffffffb8, 4) INDIRECT (stack, 0xffffffffffffffb8, 4) , (const, 0x271, 4)]
[(stack, 0xffffffffffffffc8, 4) INDIRECT (stack, 0xffffffffffffffc8, 4) , (const, 0x271, 4)]
[ ---  CALL (ram, 0x2147f0, 8) , (unique, 0x1000042c, 8), (unique, 0x1000042c, 8) PTRSUB (const, 0x0, 8) , (const, 0x4c6210, 8)]
[(unique, 0x10000583, 4) COPY (ram, 0x4c6210, 4), (ram, 0x4c6210, 4) INDIRECT (ram, 0x4c6210, 4) , (const, 0x271, 4), (ram, 0x4c6210, 4) INT_ADD (ram, 0x4c6210, 4) , (const, 0xffffffff, 4)]
[(stack, 0xffffffffffffffc8, 4) MULTIEQUAL (stack, 0xffffffffffffffc8, 4) , (stack, 0xffffffffffffffc8, 4)]
[(stack, 0xffffffffffffffb8, 4) MULTIEQUAL (stack, 0xffffffffffffffb8, 4) , (stack, 0xffffffffffffffb8, 4)]
[(stack, 0xffffffffffffffa8, 4) MULTIEQUAL (stack, 0xffffffffffffffa8, 4) , (stack, 0xffffffffffffffa8, 4)]
[(stack, 0xffffffffffffff98, 4) MULTIEQUAL (stack, 0xffffffffffffff98, 4) , (stack, 0xffffffffffffff98, 4)]
[(stack, 0xffffffffffffff88, 4) MULTIEQUAL (stack, 0xffffffffffffff88, 4) , (stack, 0xffffffffffffff88, 4)]
[(stack, 0xffffffffffffff78, 4) MULTIEQUAL (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4)]
[(stack, 0xffffffffffffff68, 4) MULTIEQUAL (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4)]
[(stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xfffffffffffffee0, 8) MULTIEQUAL (stack, 0xfffffffffffffee0, 8) , (stack, 0xfffffffffffffee0, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 8) MULTIEQUAL (stack, 0xfffffffffffffed0, 8) , (stack, 0xfffffffffffffed0, 8)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(stack, 0xfffffffffffffea8, 8) MULTIEQUAL (stack, 0xfffffffffffffea8, 8) , (stack, 0xfffffffffffffea8, 8)]
[(stack, 0xfffffffffffffea0, 8) MULTIEQUAL (stack, 0xfffffffffffffea0, 8) , (stack, 0xfffffffffffffea0, 8)]
[(stack, 0xfffffffffffffe98, 8) MULTIEQUAL (stack, 0xfffffffffffffe98, 8) , (stack, 0xfffffffffffffe98, 8)]
[(stack, 0xfffffffffffffe94, 4) MULTIEQUAL (stack, 0xfffffffffffffe94, 4) , (stack, 0xfffffffffffffe94, 4)]
[(stack, 0xfffffffffffffe90, 4) MULTIEQUAL (stack, 0xfffffffffffffe90, 4) , (stack, 0xfffffffffffffe90, 4)]
[(stack, 0xfffffffffffffe88, 8) MULTIEQUAL (stack, 0xfffffffffffffe88, 8) , (stack, 0xfffffffffffffe88, 8)]
[(ram, 0x4c87a0, 4) MULTIEQUAL (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4)]
[(ram, 0x4c6224, 4) MULTIEQUAL (ram, 0x4c6224, 4) , (ram, 0x4c6224, 4)]
[(ram, 0x4c6220, 4) MULTIEQUAL (ram, 0x4c6220, 4) , (ram, 0x4c6220, 4)]
[(ram, 0x4c6218, 8) MULTIEQUAL (ram, 0x4c6218, 8) , (ram, 0x4c6218, 8)]
[(ram, 0x4c321c, 4) MULTIEQUAL (ram, 0x4c321c, 4) , (ram, 0x4c321c, 4)]
[(ram, 0x4c3218, 4) MULTIEQUAL (ram, 0x4c3218, 4) , (ram, 0x4c3218, 4)]
[(ram, 0x4c3214, 4) MULTIEQUAL (ram, 0x4c3214, 4) , (ram, 0x4c3214, 4)]
[(ram, 0x4c3210, 4) MULTIEQUAL (ram, 0x4c3210, 4) , (ram, 0x4c3210, 4)]
[(ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(ram, 0x4c2e08, 8) MULTIEQUAL (ram, 0x4c2e08, 8) , (ram, 0x4c2e08, 8)]
[(ram, 0x4c6210, 4) COPY (unique, 0x1000058b, 4), (unique, 0x1000058b, 4) MULTIEQUAL (unique, 0x10000583, 4) , (unique, 0x10000587, 4)]
[ ---  CBRANCH (ram, 0x1ffa37, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xfffffffffffffe80, 8) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffea8, 8), (stack, 0xfffffffffffffe80, 8) MULTIEQUAL (stack, 0xfffffffffffffe80, 8) , (stack, 0xfffffffffffffe80, 8)]
[(ram, 0x4c2e08, 8) INDIRECT (ram, 0x4c2e08, 8) , (const, 0x24e, 4)]
[(ram, 0x4c2e78, 8) INDIRECT (ram, 0x4c2e78, 8) , (const, 0x24e, 4)]
[(ram, 0x4c3210, 4) INDIRECT (ram, 0x4c3210, 4) , (const, 0x24e, 4)]
[(ram, 0x4c3214, 4) INDIRECT (ram, 0x4c3214, 4) , (const, 0x24e, 4)]
[(ram, 0x4c3218, 4) INDIRECT (ram, 0x4c3218, 4) , (const, 0x24e, 4)]
[(ram, 0x4c321c, 4) INDIRECT (ram, 0x4c321c, 4) , (const, 0x24e, 4)]
[(ram, 0x4c6210, 4) INDIRECT (ram, 0x4c6210, 4) , (const, 0x24e, 4)]
[(ram, 0x4c6218, 8) INDIRECT (ram, 0x4c6218, 8) , (const, 0x24e, 4)]
[(ram, 0x4c6220, 4) INDIRECT (ram, 0x4c6220, 4) , (const, 0x24e, 4)]
[(ram, 0x4c6224, 4) INDIRECT (ram, 0x4c6224, 4) , (const, 0x24e, 4)]
[(ram, 0x4c87a0, 4) INDIRECT (ram, 0x4c87a0, 4) , (const, 0x24e, 4)]
[(stack, 0xfffffffffffffe80, 8) INDIRECT (stack, 0xfffffffffffffe80, 8) , (const, 0x24e, 4)]
[(stack, 0xfffffffffffffe88, 8) INDIRECT (stack, 0xfffffffffffffe88, 8) , (const, 0x24e, 4)]
[(stack, 0xfffffffffffffe90, 4) INDIRECT (stack, 0xfffffffffffffe90, 4) , (const, 0x24e, 4)]
[(stack, 0xfffffffffffffe94, 4) INDIRECT (stack, 0xfffffffffffffe94, 4) , (const, 0x24e, 4)]
[(stack, 0xfffffffffffffe98, 8) INDIRECT (stack, 0xfffffffffffffe98, 8) , (const, 0x24e, 4)]
[(stack, 0xfffffffffffffea0, 8) INDIRECT (stack, 0xfffffffffffffea0, 8) , (const, 0x24e, 4)]
[(stack, 0xfffffffffffffea8, 8) INDIRECT (stack, 0xfffffffffffffea8, 8) , (const, 0x24e, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x24e, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x24e, 4)]
[(stack, 0xfffffffffffffed0, 8) INDIRECT (stack, 0xfffffffffffffed0, 8) , (const, 0x24e, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x24e, 4)]
[(stack, 0xfffffffffffffee0, 8) INDIRECT (stack, 0xfffffffffffffee0, 8) , (const, 0x24e, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x24e, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x24e, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x24e, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x24e, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x24e, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x24e, 4)]
[(stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0x24e, 4)]
[(stack, 0xffffffffffffff88, 4) INDIRECT (stack, 0xffffffffffffff88, 4) , (const, 0x24e, 4)]
[(stack, 0xffffffffffffff98, 4) INDIRECT (stack, 0xffffffffffffff98, 4) , (const, 0x24e, 4)]
[(stack, 0xffffffffffffffa8, 4) INDIRECT (stack, 0xffffffffffffffa8, 4) , (const, 0x24e, 4)]
[(stack, 0xffffffffffffffb8, 4) INDIRECT (stack, 0xffffffffffffffb8, 4) , (const, 0x24e, 4)]
[(stack, 0xffffffffffffffc8, 4) INDIRECT (stack, 0xffffffffffffffc8, 4) , (const, 0x24e, 4)]
[ ---  CALL (ram, 0x11f8a8, 8) , (stack, 0xfffffffffffffe80, 8)]
[(ram, 0x4c2e08, 8) COPY (ram, 0x4c2e08, 8), (ram, 0x4c2e08, 8) MULTIEQUAL (ram, 0x4c2e08, 8) , (ram, 0x4c2e08, 8)]
[(ram, 0x4c2e78, 8) COPY (ram, 0x4c2e78, 8), (ram, 0x4c2e78, 8) MULTIEQUAL (ram, 0x4c2e78, 8) , (ram, 0x4c2e78, 8)]
[(ram, 0x4c3210, 4) COPY (ram, 0x4c3210, 4), (ram, 0x4c3210, 4) MULTIEQUAL (ram, 0x4c3210, 4) , (ram, 0x4c3210, 4)]
[(ram, 0x4c3214, 4) COPY (ram, 0x4c3214, 4), (ram, 0x4c3214, 4) MULTIEQUAL (ram, 0x4c3214, 4) , (ram, 0x4c3214, 4)]
[(ram, 0x4c3218, 4) COPY (ram, 0x4c3218, 4), (ram, 0x4c3218, 4) MULTIEQUAL (ram, 0x4c3218, 4) , (ram, 0x4c3218, 4)]
[(ram, 0x4c321c, 4) COPY (ram, 0x4c321c, 4), (ram, 0x4c321c, 4) MULTIEQUAL (ram, 0x4c321c, 4) , (ram, 0x4c321c, 4)]
[(ram, 0x4c6210, 4) COPY (ram, 0x4c6210, 4), (ram, 0x4c6210, 4) MULTIEQUAL (ram, 0x4c6210, 4) , (ram, 0x4c6210, 4)]
[(ram, 0x4c6218, 8) COPY (ram, 0x4c6218, 8), (ram, 0x4c6218, 8) MULTIEQUAL (ram, 0x4c6218, 8) , (ram, 0x4c6218, 8)]
[(ram, 0x4c6220, 4) COPY (ram, 0x4c6220, 4), (ram, 0x4c6220, 4) MULTIEQUAL (ram, 0x4c6220, 4) , (ram, 0x4c6220, 4)]
[(ram, 0x4c6224, 4) COPY (ram, 0x4c6224, 4), (ram, 0x4c6224, 4) MULTIEQUAL (ram, 0x4c6224, 4) , (ram, 0x4c6224, 4)]
[(ram, 0x4c87a0, 4) COPY (ram, 0x4c87a0, 4), (ram, 0x4c87a0, 4) MULTIEQUAL (ram, 0x4c87a0, 4) , (ram, 0x4c87a0, 4)]
[ ---  RETURN (const, 0x0, 8)]
