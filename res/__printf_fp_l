[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffea8, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffea8, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffea8, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffea8, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffea8, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffea8, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffea8, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffea8, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffea8, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffea8, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffea8, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffea8, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffea8, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffea8, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffea8, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffea8, 8)]
[(stack, 0xffffffffffffff00, 8) COPY (register, 0x30, 8)]
[(stack, 0xffffffffffffff40, 8) COPY (register, 0x10, 8)]
[(stack, 0xffffffffffffffc0, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10002de8, 8), (unique, 0x10002de8, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8)]
[(stack, 0xffffffffffffff54, 4) COPY (const, 0x0, 4)]
[(stack, 0xffffffffffffff58, 4) COPY (const, 0x0, 4)]
[(unique, 0x10001224, 1) INT_AND (register, 0x10, 1) , (const, 0x1, 1), (register, 0x10, 1) INT_RIGHT (unique, 0xbb00, 1) , (const, 0x2, 4), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10002df8, 8), (unique, 0x10002df8, 8) INT_ADD (unique, 0x10002df0, 8) , (const, 0xd, 8), (unique, 0x10002df0, 8) CAST (register, 0x10, 8)]
[(stack, 0xffffffffffffff3c, 4) COPY (register, 0x18, 4), (register, 0x18, 4) INT_AND (register, 0x10, 4) , (const, 0x1, 4), (register, 0x10, 4) INT_ZEXT (register, 0x10, 1), (register, 0x10, 1) INT_RIGHT (unique, 0xbb00, 1) , (const, 0x2, 4), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10002df8, 8), (unique, 0x10002df8, 8) INT_ADD (unique, 0x10002df0, 8) , (const, 0xd, 8), (unique, 0x10002df0, 8) CAST (register, 0x10, 8)]
[(unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x10002e00, 8), (unique, 0x10002e00, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x3, 8) , (const, 0x4, 8)]
[(register, 0x30, 1) INT_AND (unique, 0xbb00, 1) , (const, 0x1, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10002df8, 8), (unique, 0x10002df8, 8) INT_ADD (unique, 0x10002df0, 8) , (const, 0xd, 8), (unique, 0x10002df0, 8) CAST (register, 0x10, 8)]
[ ---  CBRANCH (ram, 0x46bbe0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x10000e84, 1) , (const, 0x0, 1), (unique, 0x10000e84, 1) INT_AND (unique, 0xbb00, 1) , (const, 0x1, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10002df8, 8), (unique, 0x10002df8, 8) INT_ADD (unique, 0x10002df0, 8) , (const, 0xd, 8), (unique, 0x10002df0, 8) CAST (register, 0x10, 8)]
[(stack, 0xfffffffffffffef0, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10002e08, 8), (unique, 0x10002e08, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x50, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x30, 8) , (const, 0x4, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x46bc03, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10002e08, 8), (unique, 0x10002e08, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x50, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x30, 8) , (const, 0x4, 8) , (const, 0x8, 8)]
[(stack, 0xfffffffffffffef0, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10002e10, 8), (unique, 0x10002e10, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x40, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x30, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xffffffffffffff38, 4) COPY (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x10002e18, 8), (unique, 0x10002e18, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x198, 8)]
[ ---  CBRANCH (ram, 0x46bc27, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x10002e18, 8), (unique, 0x10002e18, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x198, 8)]
[(stack, 0xffffffffffffff38, 4) COPY (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10002e20, 8), (unique, 0x10002e20, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x58, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x30, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[ ---  CBRANCH (ram, 0x46ba65, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (unique, 0x10002e28, 1) , (const, 0x0, 1), (unique, 0x10002e28, 1) CAST (unique, 0xbb00, 1)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10002e29, 8), (unique, 0x10002e29, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x60, 8)]
[(stack, 0xfffffffffffffef0, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10002e31, 8), (unique, 0x10002e31, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x40, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x30, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[(stack, 0xffffffffffffff38, 4) COPY (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10002e39, 8), (unique, 0x10002e39, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x58, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x30, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x46bd30, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (const, 0xff, 1) , (unique, 0x10002e41, 1), (unique, 0x10002e41, 1) CAST (unique, 0xbb00, 1)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10002e42, 8), (unique, 0x10002e42, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x50, 8)]
[ ---  BRANCH (ram, 0x46bc3a, 1)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xffffffffffffff28, 16) INT_ADD (unique, 0x100020bc, 16) , (unique, 0xbb00, 1), (unique, 0x100020bc, 16) INT_LEFT (unique, 0x100020ac, 16) , (const, 0x8, 16), (unique, 0x100020ac, 16) INT_SEXT (stack, 0xffffffffffffff29, 15), (stack, 0xffffffffffffff29, 15) SUBPIECE (stack, 0xffffffffffffff28, 16) , (const, 0x1, 8), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0x38, 8), (register, 0x38, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8)]
[ ---  CBRANCH (ram, 0x46ba65, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (const, 0x7d, 1) , (unique, 0x10002e4a, 1), (unique, 0x10002e4a, 1) CAST (register, 0x10, 1), (register, 0x10, 1) INT_SUB (unique, 0xbb00, 1) , (const, 0x1, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0x38, 8), (register, 0x38, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff28, 16) MULTIEQUAL (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xffffffffffffff10, 8) COPY (const, 0x0, 8)]
[(stack, 0xfffffffffffffee4, 4) COPY (const, 0x0, 4)]
[(stack, 0xfffffffffffffee8, 8) COPY (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x46bfa0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x10001224, 1) , (const, 0x0, 1)]
[ ---  CBRANCH (ram, 0x46c9a8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x30, 1) , (const, 0x0, 1)]
[(stack, 0xfffffffffffffee8, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10002e4b, 8), (unique, 0x10002e4b, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x58, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x30, 8) , (const, 0x4, 8) , (const, 0x8, 8)]
[ ---  BRANCH (ram, 0x46bfc2, 1)]
[(stack, 0xfffffffffffffee8, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10002e53, 8), (unique, 0x10002e53, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x48, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x30, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[(register, 0x30, 4) INT_AND (register, 0x30, 4) , (const, 0xfffffffe, 4), (register, 0x30, 4) INT_NEGATE (unique, 0x100003e4, 4), (unique, 0x100003e4, 4) INT_2COMP (unique, 0x12600, 4), (unique, 0x12600, 4) INT_ZEXT (register, 0x200, 1), (register, 0x200, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0x30, 8), (register, 0x30, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8)]
[(unique, 0x10002944, 8) COPY (register, 0x10, 8), (register, 0x10, 8) COPY (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x46bfdc, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0x30, 8), (register, 0x30, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8)]
[(unique, 0x1000294c, 8) COPY (register, 0x38, 8)]
[(stack, 0xfffffffffffffee4, 4) COPY (register, 0x30, 4)]
[(stack, 0xffffffffffffff10, 8) COPY (register, 0x10, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0x10002944, 8) , (unique, 0x1000294c, 8)]
[ ---  BRANCH (ram, 0x46ba85, 1)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff28, 16) MULTIEQUAL (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (register, 0x30, 8)]
[(stack, 0xfffffffffffffee4, 4) MULTIEQUAL (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x8, 8)]
[ ---  CBRANCH (ram, 0x46bcb0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x58800, 1) , (const, 0x0, 1), (unique, 0x58800, 1) INT_AND (unique, 0xbb00, 1) , (const, 0x10, 1)]
[ ---  CBRANCH (ram, 0x46c990, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x30, 1) , (const, 0x0, 1)]
[(stack, 0xfffffffffffffee4, 4) COPY (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x10002e5b, 8), (unique, 0x10002e5b, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x1a0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x30, 8) , (const, 0x4, 8) , (const, 0x8, 8)]
[ ---  BRANCH (ram, 0x46bc7b, 1)]
[(stack, 0xfffffffffffffee4, 4) COPY (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10002e63, 8), (unique, 0x10002e63, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x60, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x30, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[(stack, 0xfffffffffffffee8, 8) COPY (const, 0x0, 8)]
[(unique, 0x10002954, 8) COPY (register, 0x10, 8), (register, 0x10, 8) COPY (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x46bc9b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xfffffffffffffee4, 4) , (const, 0x0, 4), (stack, 0xfffffffffffffee4, 4) MULTIEQUAL (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4)]
[(unique, 0x1000295c, 8) COPY (register, 0x38, 8)]
[(stack, 0xffffffffffffff10, 8) COPY (register, 0x10, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0x10002954, 8) , (unique, 0x1000295c, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x8, 8)]
[ ---  CBRANCH (ram, 0x46ba90, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x58800, 1) , (const, 0x0, 1), (unique, 0x58800, 1) INT_AND (unique, 0xbb00, 1) , (const, 0x10, 1)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff28, 16) MULTIEQUAL (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee4, 4) MULTIEQUAL (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4)]
[(register, 0x10, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8)]
[ ---  CBRANCH (ram, 0x46bcf0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x10000e2f, 1) , (const, 0x0, 1), (unique, 0x10000e2f, 1) INT_AND (unique, 0xbb00, 1) , (const, 0x1, 1)]
[ ---  CBRANCH (ram, 0x46c6d0, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) FLOAT_LESS (ram, 0x4ae3a0, 10) , (register, 0x1000, 10), (register, 0x1000, 10) FLOAT_ABS (unique, 0x5580, 10), (unique, 0x5580, 10) LOAD (const, 0x1b1, 4) , (unique, 0x10002e6b, 8), (unique, 0x10002e6b, 8) CAST (unique, 0x10001688, 8), (unique, 0x10001688, 8) PTRSUB (register, 0x10, 8) , (const, 0x0, 8)]
[(register, 0x0, 4) INT_ZEXT (unique, 0x10002e73, 2), (unique, 0x10002e73, 2) CAST (unique, 0x63e00, 2), (unique, 0x63e00, 2) INT_LEFT (unique, 0x63d80, 2) , (const, 0x9, 4), (unique, 0x63d80, 2) INT_ZEXT (register, 0x1081, 1), (register, 0x1081, 1) FLOAT_LESS (unique, 0x5580, 10) , (unique, 0x63a00, 10), (unique, 0x63a00, 10) INT2FLOAT (const, 0x0, 4)]
[ ---  BRANCH (ram, 0x46bb1f, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x2b52, 4)]
[(register, 0x1090, 2) INDIRECT (register, 0x1090, 2) , (const, 0x2b52, 4)]
[(ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x2b52, 4)]
[(ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x2b52, 4)]
[(ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x2b52, 4)]
[(ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x2b52, 4)]
[(ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x2b52, 4)]
[(ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x2b52, 4)]
[(ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x2b52, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x2b52, 4)]
[(stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x2b52, 4)]
[(stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x2b52, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x2b52, 4)]
[(stack, 0xfffffffffffffee4, 4) INDIRECT (stack, 0xfffffffffffffee4, 4) , (const, 0x2b52, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x2b52, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x2b52, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x2b52, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x2b52, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x2b52, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x2b52, 4)]
[(stack, 0xffffffffffffff18, 16) INDIRECT (stack, 0xffffffffffffff18, 16) , (const, 0x2b52, 4)]
[(stack, 0xffffffffffffff28, 16) INDIRECT (stack, 0xffffffffffffff28, 16) , (const, 0x2b52, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x2b52, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x2b52, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x2b52, 4)]
[(stack, 0xffffffffffffff52, 2) INDIRECT (stack, 0xffffffffffffff52, 2) , (const, 0x2b52, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x2b52, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x2b52, 4)]
[(stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0x2b52, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x2b52, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x2b52, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x2b52, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2b52, 4)]
[(stack, 0xffffffffffffff70, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x48b5a0, 8) , (unique, 0x3100, 8) , (const, 0x2, 8) , (unique, 0x3200, 8), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff60, 8), (unique, 0x3100, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff98, 8)]
[(unique, 0x3100, 4) INT_ADD (register, 0x8, 4) , (const, 0xffffffc1, 4), (register, 0x8, 4) INT_MULT (unique, 0x10000e45, 4) , (const, 0x40, 4), (unique, 0x10000e45, 4) SUBPIECE (register, 0x0, 8) , (const, 0x0, 4), (register, 0x0, 8) CALL (ram, 0x48b5a0, 8) , (unique, 0x3100, 8) , (const, 0x2, 8) , (unique, 0x3200, 8), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff60, 8), (unique, 0x3100, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff98, 8)]
[ ---  BRANCH (ram, 0x46c022, 1)]
[(register, 0x1200, 16) INT_ZEXT (unique, 0x5280, 8), (unique, 0x5280, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10002e75, 8), (unique, 0x10002e75, 8) CAST (unique, 0x10001690, 8), (unique, 0x10001690, 8) PTRSUB (register, 0x10, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x46bff0, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) FLOAT_LESSEQUAL (unique, 0x10002e7d, 8) , (ram, 0x4ae3d0, 8), (unique, 0x10002e7d, 8) CAST (register, 0x1220, 8), (register, 0x1220, 8) INT_AND (unique, 0x5280, 8) , (ram, 0x4ae3b0, 8), (unique, 0x5280, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10002e75, 8), (unique, 0x10002e75, 8) CAST (unique, 0x10001690, 8), (unique, 0x10001690, 8) PTRSUB (register, 0x10, 8) , (const, 0x0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x2be4, 4)]
[(register, 0x1090, 2) INDIRECT (register, 0x1090, 2) , (const, 0x2be4, 4)]
[(ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x2be4, 4)]
[(ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x2be4, 4)]
[(ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x2be4, 4)]
[(ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x2be4, 4)]
[(ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x2be4, 4)]
[(ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x2be4, 4)]
[(ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x2be4, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x2be4, 4)]
[(stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x2be4, 4)]
[(stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x2be4, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x2be4, 4)]
[(stack, 0xfffffffffffffee4, 4) INDIRECT (stack, 0xfffffffffffffee4, 4) , (const, 0x2be4, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x2be4, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x2be4, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x2be4, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x2be4, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x2be4, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x2be4, 4)]
[(stack, 0xffffffffffffff18, 16) INDIRECT (stack, 0xffffffffffffff18, 16) , (const, 0x2be4, 4)]
[(stack, 0xffffffffffffff28, 16) INDIRECT (stack, 0xffffffffffffff28, 16) , (const, 0x2be4, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x2be4, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x2be4, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x2be4, 4)]
[(stack, 0xffffffffffffff52, 2) INDIRECT (stack, 0xffffffffffffff52, 2) , (const, 0x2be4, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x2be4, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x2be4, 4)]
[(stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0x2be4, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x2be4, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x2be4, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x2be4, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2be4, 4)]
[(stack, 0xffffffffffffff70, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x48b510, 8) , (unique, 0x3100, 8) , (const, 0x2, 8) , (unique, 0x3200, 8), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff60, 8), (unique, 0x3100, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff98, 8)]
[(unique, 0x3100, 4) INT_ADD (register, 0x8, 4) , (const, 0xffffffcc, 4), (register, 0x8, 4) INT_MULT (unique, 0x10000e33, 4) , (const, 0x40, 4), (unique, 0x10000e33, 4) SUBPIECE (register, 0x0, 8) , (const, 0x0, 4), (register, 0x0, 8) CALL (ram, 0x48b510, 8) , (unique, 0x3100, 8) , (const, 0x2, 8) , (unique, 0x3200, 8), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff60, 8), (unique, 0x3100, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff98, 8)]
[(register, 0xa8, 4) INT_AND (register, 0xa8, 4) , (const, 0x1, 4), (register, 0xa8, 4) CALLOTHER (const, 0x72, 4) , (register, 0xa8, 4) , (register, 0x1200, 16)]
[ ---  BRANCH (ram, 0x46bb1f, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xbf, 4)]
[(register, 0x1090, 2) INDIRECT (register, 0x1090, 2) , (const, 0xbf, 4)]
[(ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0xbf, 4)]
[(ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0xbf, 4)]
[(ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0xbf, 4)]
[(ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0xbf, 4)]
[(ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0xbf, 4)]
[(ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0xbf, 4)]
[(ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0xbf, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0xbf, 4)]
[(stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0xbf, 4)]
[(stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0xbf, 4)]
[(stack, 0xfffffffffffffec0, 4) INDIRECT (stack, 0xfffffffffffffec0, 4) , (const, 0xbf, 4)]
[(stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0xbf, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0xbf, 4)]
[(stack, 0xfffffffffffffed0, 4) INDIRECT (stack, 0xfffffffffffffed0, 4) , (const, 0xbf, 4)]
[(stack, 0xfffffffffffffed4, 4) INDIRECT (stack, 0xfffffffffffffed4, 4) , (const, 0xbf, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0xbf, 4)]
[(stack, 0xfffffffffffffee0, 4) INDIRECT (stack, 0xfffffffffffffee0, 4) , (const, 0xbf, 4)]
[(stack, 0xfffffffffffffee4, 4) INDIRECT (stack, 0xfffffffffffffee4, 4) , (const, 0xbf, 4), (stack, 0xfffffffffffffee4, 4) MULTIEQUAL (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0xbf, 4), (stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0xbf, 4), (stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0xbf, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0xbf, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0xbf, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0xbf, 4), (stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff18, 16) INDIRECT (stack, 0xffffffffffffff18, 16) , (const, 0xbf, 4)]
[(stack, 0xffffffffffffff28, 16) INDIRECT (unique, 0x10001214, 16) , (const, 0xbf, 4), (unique, 0x10001214, 16) LOAD (const, 0x1b1, 4) , (register, 0x10, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0xbf, 4), (stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0xbf, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0xbf, 4)]
[(stack, 0xffffffffffffff52, 2) INDIRECT (stack, 0xffffffffffffff52, 2) , (const, 0xbf, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0xbf, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0xbf, 4)]
[(stack, 0xffffffffffffff5c, 4) INDIRECT (stack, 0xffffffffffffff5c, 4) , (const, 0xbf, 4)]
[(stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0xbf, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0xbf, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0xbf, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0xbf, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0xbf, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0xbf, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0xbf, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0xbf, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0xbf, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xbf, 4)]
[ ---  CBRANCH (ram, 0x46c710, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x4922d0, 8) , (unique, 0x10000ed0, 8) , (unique, 0x10000ed0, 8) , (unique, 0x10000ed0, 8), (unique, 0x10000ed0, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10002e85, 8), (unique, 0x10002e85, 8) CAST (unique, 0x10001640, 8), (unique, 0x10001640, 8) PTRSUB (register, 0x10, 8) , (const, 0x0, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xd9, 4)]
[(register, 0x1090, 2) INDIRECT (register, 0x1090, 2) , (const, 0xd9, 4)]
[(ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0xd9, 4)]
[(ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0xd9, 4)]
[(ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0xd9, 4)]
[(ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0xd9, 4)]
[(ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0xd9, 4)]
[(ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0xd9, 4)]
[(ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0xd9, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0xd9, 4)]
[(stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0xd9, 4)]
[(stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0xd9, 4)]
[(stack, 0xfffffffffffffec0, 4) INDIRECT (stack, 0xfffffffffffffec0, 4) , (const, 0xd9, 4)]
[(stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0xd9, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0xd9, 4)]
[(stack, 0xfffffffffffffed0, 4) INDIRECT (stack, 0xfffffffffffffed0, 4) , (const, 0xd9, 4)]
[(stack, 0xfffffffffffffed4, 4) INDIRECT (stack, 0xfffffffffffffed4, 4) , (const, 0xd9, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0xd9, 4)]
[(stack, 0xfffffffffffffee0, 4) INDIRECT (stack, 0xfffffffffffffee0, 4) , (const, 0xd9, 4)]
[(stack, 0xfffffffffffffee4, 4) INDIRECT (stack, 0xfffffffffffffee4, 4) , (const, 0xd9, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0xd9, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0xd9, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0xd9, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0xd9, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0xd9, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0xd9, 4)]
[(stack, 0xffffffffffffff18, 16) INDIRECT (register, 0x1200, 16) , (const, 0xd9, 4), (register, 0x1200, 16) INT_AND (stack, 0xffffffffffffff28, 16) , (ram, 0x4ae380, 16)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0xd9, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0xd9, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0xd9, 4)]
[(stack, 0xffffffffffffff52, 2) INDIRECT (stack, 0xffffffffffffff52, 2) , (const, 0xd9, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0xd9, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0xd9, 4)]
[(stack, 0xffffffffffffff5c, 4) INDIRECT (stack, 0xffffffffffffff5c, 4) , (const, 0xd9, 4)]
[(stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0xd9, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0xd9, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0xd9, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0xd9, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0xd9, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0xd9, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0xd9, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0xd9, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0xd9, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xd9, 4)]
[(stack, 0xffffffffffffff28, 8) SUBPIECE (stack, 0xffffffffffffff28, 16) , (const, 0x0, 8), (stack, 0xffffffffffffff28, 16) INDIRECT (stack, 0xffffffffffffff28, 16) , (const, 0xd9, 4)]
[ ---  CBRANCH (ram, 0x46c818, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x4922d0, 8) , (register, 0x1200, 8) , (ram, 0x4ae390, 8) , (register, 0x1240, 8), (register, 0x1240, 8) SUBPIECE (stack, 0xffffffffffffff28, 16) , (const, 0x0, 4), (register, 0x1200, 8) SUBPIECE (register, 0x1200, 16) , (const, 0x0, 4), (register, 0x1200, 16) INT_AND (stack, 0xffffffffffffff28, 16) , (ram, 0x4ae380, 16)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xee, 4)]
[(register, 0x1090, 2) INDIRECT (register, 0x1090, 2) , (const, 0xee, 4)]
[(ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0xee, 4)]
[(ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0xee, 4)]
[(ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0xee, 4)]
[(ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0xee, 4)]
[(ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0xee, 4)]
[(ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0xee, 4)]
[(ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0xee, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0xee, 4)]
[(stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0xee, 4)]
[(stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0xee, 4)]
[(stack, 0xfffffffffffffec0, 4) INDIRECT (stack, 0xfffffffffffffec0, 4) , (const, 0xee, 4)]
[(stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0xee, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0xee, 4)]
[(stack, 0xfffffffffffffed0, 4) INDIRECT (stack, 0xfffffffffffffed0, 4) , (const, 0xee, 4)]
[(stack, 0xfffffffffffffed4, 4) INDIRECT (stack, 0xfffffffffffffed4, 4) , (const, 0xee, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0xee, 4)]
[(stack, 0xfffffffffffffee0, 4) INDIRECT (stack, 0xfffffffffffffee0, 4) , (const, 0xee, 4)]
[(stack, 0xfffffffffffffee4, 4) INDIRECT (stack, 0xfffffffffffffee4, 4) , (const, 0xee, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0xee, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0xee, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0xee, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0xee, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0xee, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0xee, 4)]
[(stack, 0xffffffffffffff18, 16) INDIRECT (stack, 0xffffffffffffff18, 16) , (const, 0xee, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0xee, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0xee, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0xee, 4)]
[(stack, 0xffffffffffffff52, 2) INDIRECT (stack, 0xffffffffffffff52, 2) , (const, 0xee, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0xee, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0xee, 4)]
[(stack, 0xffffffffffffff5c, 4) INDIRECT (stack, 0xffffffffffffff5c, 4) , (const, 0xee, 4)]
[(stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0xee, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0xee, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0xee, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0xee, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0xee, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0xee, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0xee, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0xee, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0xee, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xee, 4)]
[(unique, 0x5300, 8) SUBPIECE (stack, 0xffffffffffffff28, 16) , (const, 0x0, 4), (stack, 0xffffffffffffff28, 16) INDIRECT (stack, 0xffffffffffffff28, 16) , (const, 0xee, 4)]
[ ---  CBRANCH (ram, 0x46c818, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (const, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x4924e0, 8) , (stack, 0xffffffffffffff18, 8) , (ram, 0x4ae390, 8) , (stack, 0xffffffffffffff28, 8), (stack, 0xffffffffffffff18, 8) SUBPIECE (stack, 0xffffffffffffff18, 16) , (const, 0x0, 8)]
[(register, 0xa8, 4) INT_AND (register, 0xa8, 4) , (const, 0x8, 4), (register, 0xa8, 4) CALLOTHER (const, 0x73, 4) , (register, 0xa8, 4) , (stack, 0xffffffffffffff28, 16)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 4) MULTIEQUAL (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4)]
[(stack, 0xffffffffffffff5c, 4) MULTIEQUAL (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4)]
[(stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4)]
[(stack, 0xffffffffffffff52, 2) MULTIEQUAL (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff28, 16) MULTIEQUAL (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16)]
[(stack, 0xffffffffffffff18, 16) MULTIEQUAL (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee4, 4) MULTIEQUAL (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4)]
[(stack, 0xfffffffffffffee0, 4) MULTIEQUAL (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed4, 4) MULTIEQUAL (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4)]
[(stack, 0xfffffffffffffed0, 4) MULTIEQUAL (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffec4, 4) MULTIEQUAL (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4)]
[(stack, 0xfffffffffffffec0, 4) MULTIEQUAL (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4)]
[(stack, 0xfffffffffffffebc, 4) MULTIEQUAL (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4)]
[(stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(ram, 0x4ae3d0, 8) MULTIEQUAL (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8)]
[(ram, 0x4ae3c8, 8) MULTIEQUAL (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8)]
[(ram, 0x4ae3c0, 8) MULTIEQUAL (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8)]
[(ram, 0x4ae3b0, 8) MULTIEQUAL (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8)]
[(ram, 0x4ae3a0, 10) MULTIEQUAL (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10)]
[(ram, 0x4ae390, 8) MULTIEQUAL (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8)]
[(ram, 0x4ae380, 16) MULTIEQUAL (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16)]
[(stack, 0xffffffffffffff54, 4) COPY (register, 0xa8, 4), (register, 0xa8, 4) MULTIEQUAL (register, 0xa8, 4) , (register, 0x0, 4) , (register, 0xa8, 4)]
[(register, 0xb8, 8) CAST (unique, 0x10002e8d, 8), (unique, 0x10002e8d, 8) PTRSUB (const, 0x0, 8) , (const, 0x4ae328, 8)]
[(register, 0xb0, 8) PTRSUB (const, 0x0, 8) , (const, 0x4ae309, 8)]
[ ---  CBRANCH (ram, 0x46bb64, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 2) , (const, 0x0, 2), (register, 0x0, 2) INT_AND (unique, 0xbc00, 2) , (const, 0x100, 2), (unique, 0xbc00, 2) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) CAST (unique, 0x10002ea1, 8), (unique, 0x10002ea1, 8) INT_ADD (unique, 0xbd80, 8) , (unique, 0x3300, 8), (unique, 0x3300, 8) INT_MULT (register, 0x10, 8) , (const, 0x2, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10002e99, 8), (unique, 0x10002e99, 8) INT_ADD (register, 0x110, 8) , (const, 0xfffffffffffffff0, 8), (register, 0x10, 8) INT_SEXT (unique, 0x10002e95, 4), (unique, 0x10002e95, 4) CAST (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (stack, 0xffffffffffffff40, 8) , (const, 0x2, 8) , (const, 0x4, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8), (stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(register, 0xb8, 8) CAST (unique, 0x10002ea9, 8), (unique, 0x10002ea9, 8) PTRSUB (const, 0x0, 8) , (const, 0x4ae348, 8)]
[(register, 0xb0, 8) PTRSUB (const, 0x0, 8) , (const, 0x4ae311, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x659, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x1090, 2) INDIRECT (register, 0x1090, 2) , (const, 0x659, 4), (register, 0x1090, 2) MULTIEQUAL (register, 0x1090, 2) , (register, 0x1090, 2)]
[(ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x659, 4), (ram, 0x4ae380, 16) MULTIEQUAL (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16)]
[(ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x659, 4), (ram, 0x4ae390, 8) MULTIEQUAL (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8)]
[(ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x659, 4), (ram, 0x4ae3a0, 10) MULTIEQUAL (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10)]
[(ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x659, 4), (ram, 0x4ae3b0, 8) MULTIEQUAL (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8)]
[(ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x659, 4), (ram, 0x4ae3c0, 8) MULTIEQUAL (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8)]
[(ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x659, 4), (ram, 0x4ae3c8, 8) MULTIEQUAL (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8)]
[(ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x659, 4), (ram, 0x4ae3d0, 8) MULTIEQUAL (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x659, 4), (stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x659, 4), (stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4)]
[(stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x659, 4), (stack, 0xfffffffffffffec4, 4) MULTIEQUAL (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x659, 4), (stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffee4, 4) INDIRECT (stack, 0xfffffffffffffee4, 4) , (const, 0x659, 4), (stack, 0xfffffffffffffee4, 4) MULTIEQUAL (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x659, 4), (stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x659, 4), (stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x659, 4), (stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x659, 4), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x659, 4), (stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x659, 4), (stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff18, 16) INDIRECT (stack, 0xffffffffffffff18, 16) , (const, 0x659, 4), (stack, 0xffffffffffffff18, 16) MULTIEQUAL (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16)]
[(stack, 0xffffffffffffff28, 16) INDIRECT (stack, 0xffffffffffffff28, 16) , (const, 0x659, 4), (stack, 0xffffffffffffff28, 16) MULTIEQUAL (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x659, 4), (stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x659, 4), (stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x659, 4), (stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff52, 2) INDIRECT (stack, 0xffffffffffffff52, 2) , (const, 0x659, 4), (stack, 0xffffffffffffff52, 2) MULTIEQUAL (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x659, 4), (stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x659, 4), (stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4)]
[(stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0x659, 4), (stack, 0xffffffffffffff60, 4) MULTIEQUAL (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x659, 4), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x659, 4), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x659, 4), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x659, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff70, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x48b660, 8) , (register, 0x1240, 8) , (unique, 0x3100, 8) , (const, 0x2, 8) , (unique, 0x3200, 8), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff60, 8), (unique, 0x3100, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff98, 8), (register, 0x1240, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (unique, 0x5300, 8)]
[(unique, 0x3100, 4) INT_ADD (register, 0x8, 4) , (const, 0xffffff90, 4), (register, 0x8, 4) INT_MULT (unique, 0x10000e4d, 4) , (const, 0x40, 4), (unique, 0x10000e4d, 4) SUBPIECE (register, 0x0, 8) , (const, 0x0, 4), (register, 0x0, 8) CALL (ram, 0x48b660, 8) , (register, 0x1240, 8) , (unique, 0x3100, 8) , (const, 0x2, 8) , (unique, 0x3200, 8), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff60, 8), (unique, 0x3100, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff98, 8), (register, 0x1240, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (unique, 0x5300, 8)]
[ ---  BRANCH (ram, 0x46c022, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff52, 2) MULTIEQUAL (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff28, 16) MULTIEQUAL (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16)]
[(stack, 0xffffffffffffff18, 16) MULTIEQUAL (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee4, 4) MULTIEQUAL (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffec4, 4) MULTIEQUAL (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4)]
[(stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(ram, 0x4ae3d0, 8) MULTIEQUAL (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8)]
[(ram, 0x4ae3c8, 8) MULTIEQUAL (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8)]
[(ram, 0x4ae3c0, 8) MULTIEQUAL (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8)]
[(ram, 0x4ae3b0, 8) MULTIEQUAL (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8)]
[(ram, 0x4ae3a0, 10) MULTIEQUAL (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10)]
[(ram, 0x4ae390, 8) MULTIEQUAL (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8)]
[(ram, 0x4ae380, 16) MULTIEQUAL (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16)]
[(register, 0x1090, 2) MULTIEQUAL (register, 0x1090, 2) , (register, 0x1090, 2) , (register, 0x1090, 2)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb0, 4) MULTIEQUAL (unique, 0x3100, 4) , (unique, 0x3100, 4) , (unique, 0x3100, 4)]
[(unique, 0x100028ac, 8) COPY (stack, 0xffffffffffffff70, 8), (stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff0c, 4) SUBPIECE (stack, 0xffffffffffffff08, 8) , (const, 0x4, 4), (stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffea8, 8)]
[(register, 0xb8, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff98, 8)]
[(unique, 0x10000415, 4) SUBPIECE (unique, 0x3580, 8) , (const, 0x0, 4), (unique, 0x3580, 8) INT_ADD (unique, 0x3480, 8) , (const, 0x17, 8), (unique, 0x3480, 8) INT_MULT (register, 0x0, 8) , (const, 0x8, 8), (register, 0x0, 8) INT_SEXT (register, 0x0, 4), (register, 0x0, 4) INT_ADD (register, 0x0, 4) , (const, 0x4, 4), (register, 0x0, 4) INT_SRIGHT (unique, 0x10002eb5, 4) , (const, 0x6, 4), (unique, 0x10002eb5, 4) CAST (register, 0x0, 4), (register, 0x0, 4) INT_ADD (register, 0x0, 4) , (const, 0x3f, 4), (register, 0x0, 4) INT_SUB (register, 0x0, 4) , (register, 0x10, 4), (register, 0x0, 4) INT_XOR (register, 0x10, 4) , (stack, 0xffffffffffffff60, 4), (register, 0x10, 4) INT_SRIGHT (unique, 0x10002eb1, 4) , (const, 0x1f, 4), (unique, 0x10002eb1, 4) CAST (stack, 0xffffffffffffff60, 4), (stack, 0xffffffffffffff60, 4) MULTIEQUAL (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4)]
[(register, 0x18, 8) PTRADD (unique, 0x10001758, 8) , (unique, 0x100003f5, 8) , (const, 0x1, 8), (unique, 0x10001758, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffea8, 8), (unique, 0x100003f5, 8) INT_2COMP (register, 0x30, 8), (register, 0x30, 8) INT_AND (unique, 0x3580, 8) , (const, 0xfffffffffffff000, 8), (unique, 0x3580, 8) INT_ADD (unique, 0x3480, 8) , (const, 0x17, 8), (unique, 0x3480, 8) INT_MULT (register, 0x0, 8) , (const, 0x8, 8), (register, 0x0, 8) INT_SEXT (register, 0x0, 4), (register, 0x0, 4) INT_ADD (register, 0x0, 4) , (const, 0x4, 4), (register, 0x0, 4) INT_SRIGHT (unique, 0x10002eb5, 4) , (const, 0x6, 4), (unique, 0x10002eb5, 4) CAST (register, 0x0, 4), (register, 0x0, 4) INT_ADD (register, 0x0, 4) , (const, 0x3f, 4), (register, 0x0, 4) INT_SUB (register, 0x0, 4) , (register, 0x10, 4), (register, 0x0, 4) INT_XOR (register, 0x10, 4) , (stack, 0xffffffffffffff60, 4), (register, 0x10, 4) INT_SRIGHT (unique, 0x10002eb1, 4) , (const, 0x1f, 4), (unique, 0x10002eb1, 4) CAST (stack, 0xffffffffffffff60, 4), (stack, 0xffffffffffffff60, 4) MULTIEQUAL (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffea8, 8)]
[(unique, 0x10002d0c, 8) COPY (register, 0x20, 8), (register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffea8, 8)]
[(unique, 0x10001259, 8) MULTIEQUAL (unique, 0x10002d0c, 8) , (unique, 0x10002d14, 8)]
[(unique, 0x10001261, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x46c07a, 1) , (unique, 0x10001257, 1), (unique, 0x10001257, 1) INT_NOTEQUAL (register, 0x20, 8) , (register, 0x18, 8), (register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8)]
[(register, 0x20, 8) PTRADD (unique, 0x10001259, 8) , (const, 0xfffffffffffff000, 8) , (const, 0x1, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10002ec1, 8) , (unique, 0xbe00, 8), (unique, 0x10002ec1, 8) CAST (unique, 0x3c80, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10002eb9, 8), (unique, 0x10002eb9, 8) CAST (unique, 0x3c80, 8), (unique, 0x3c80, 8) PTRADD (unique, 0x10001259, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x20, 8) PTRADD (unique, 0x10001259, 8) , (const, 0xfffffffffffff000, 8) , (const, 0x1, 8)]
[(unique, 0x10002d14, 8) COPY (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x10001259, 8) , (const, 0xfffffffffffff000, 8) , (const, 0x1, 8)]
[(register, 0x20, 8) PTRADD (unique, 0x10001261, 8) , (unique, 0x1000041d, 8) , (const, 0x1, 8), (unique, 0x1000041d, 8) INT_2COMP (register, 0x10, 8), (register, 0x10, 8) INT_ZEXT (register, 0x10, 4), (register, 0x10, 4) INT_AND (unique, 0x10000415, 4) , (const, 0xff0, 4)]
[(register, 0x20, 8) PTRADD (unique, 0x10001261, 8) , (unique, 0x1000041d, 8) , (const, 0x1, 8), (unique, 0x1000041d, 8) INT_2COMP (register, 0x10, 8), (register, 0x10, 8) INT_ZEXT (register, 0x10, 4), (register, 0x10, 4) INT_AND (unique, 0x10000415, 4) , (const, 0xff0, 4)]
[(register, 0x20, 8) PTRADD (unique, 0x10001261, 8) , (unique, 0x1000041d, 8) , (const, 0x1, 8), (unique, 0x1000041d, 8) INT_2COMP (register, 0x10, 8), (register, 0x10, 8) INT_ZEXT (register, 0x10, 4), (register, 0x10, 4) INT_AND (unique, 0x10000415, 4) , (const, 0xff0, 4)]
[ ---  CBRANCH (ram, 0x46c9bf, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x10, 8) , (const, 0x0, 8), (register, 0x10, 8) INT_ZEXT (register, 0x10, 4), (register, 0x10, 4) INT_AND (unique, 0x10000415, 4) , (const, 0xff0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10002ed1, 8) , (unique, 0xbe00, 8), (unique, 0x10002ed1, 8) CAST (unique, 0x3880, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10002ec9, 8), (unique, 0x10002ec9, 8) CAST (unique, 0x3880, 8), (unique, 0x3880, 8) PTRADD (unique, 0x10001261, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[ ---  BRANCH (ram, 0x46c08c, 1)]
[(register, 0x18, 8) PTRADD (unique, 0x10001261, 8) , (unique, 0x10001770, 8) , (const, 0x1, 8), (unique, 0x10001770, 8) INT_SUB (unique, 0x1000041d, 8) , (register, 0x30, 8), (register, 0x30, 8) INT_AND (unique, 0x3580, 8) , (const, 0xfffffffffffff000, 8)]
[(stack, 0xffffffffffffff68, 8) COPY (register, 0x38, 8), (register, 0x38, 8) CAST (unique, 0x10002ee1, 8), (unique, 0x10002ee1, 8) INT_AND (unique, 0x10002ed9, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x10002ed9, 8) CAST (unique, 0x3800, 8), (unique, 0x3800, 8) PTRADD (unique, 0x10001261, 8) , (unique, 0x10001768, 8) , (const, 0x1, 8), (unique, 0x10001768, 8) INT_ADD (unique, 0x1000041d, 8) , (const, 0xf, 8)]
[(unique, 0x10002d1c, 8) COPY (register, 0x20, 8)]
[(unique, 0x1000127a, 8) MULTIEQUAL (unique, 0x10002d1c, 8) , (unique, 0x10002d24, 8)]
[(unique, 0x10001282, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x46c0d0, 1) , (unique, 0x10001269, 1), (unique, 0x10001269, 1) INT_NOTEQUAL (register, 0x20, 8) , (register, 0x18, 8), (register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8)]
[(register, 0x20, 8) PTRADD (unique, 0x1000127a, 8) , (const, 0xfffffffffffff000, 8) , (const, 0x1, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10002ef1, 8) , (unique, 0xbe00, 8), (unique, 0x10002ef1, 8) CAST (unique, 0x3c80, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10002ee9, 8), (unique, 0x10002ee9, 8) CAST (unique, 0x3c80, 8), (unique, 0x3c80, 8) PTRADD (unique, 0x1000127a, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x20, 8) PTRADD (unique, 0x1000127a, 8) , (const, 0xfffffffffffff000, 8) , (const, 0x1, 8)]
[(unique, 0x10002d24, 8) COPY (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x1000127a, 8) , (const, 0xfffffffffffff000, 8) , (const, 0x1, 8)]
[(register, 0x20, 8) PTRADD (unique, 0x10001282, 8) , (unique, 0x1000044d, 8) , (const, 0x1, 8), (unique, 0x1000044d, 8) INT_2COMP (register, 0x10, 8), (register, 0x10, 8) INT_ZEXT (register, 0x10, 4), (register, 0x10, 4) INT_AND (unique, 0x10000415, 4) , (const, 0xff0, 4)]
[(register, 0x20, 8) PTRADD (unique, 0x10001282, 8) , (unique, 0x1000044d, 8) , (const, 0x1, 8), (unique, 0x1000044d, 8) INT_2COMP (register, 0x10, 8), (register, 0x10, 8) INT_ZEXT (register, 0x10, 4), (register, 0x10, 4) INT_AND (unique, 0x10000415, 4) , (const, 0xff0, 4)]
[(register, 0x20, 8) PTRADD (unique, 0x10001282, 8) , (unique, 0x1000044d, 8) , (const, 0x1, 8), (unique, 0x1000044d, 8) INT_2COMP (register, 0x10, 8), (register, 0x10, 8) INT_ZEXT (register, 0x10, 4), (register, 0x10, 4) INT_AND (unique, 0x10000415, 4) , (const, 0xff0, 4)]
[ ---  CBRANCH (ram, 0x46c0e4, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x10, 8) , (const, 0x0, 8), (register, 0x10, 8) INT_ZEXT (register, 0x10, 4), (register, 0x10, 4) INT_AND (unique, 0x10000415, 4) , (const, 0xff0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10002f01, 8) , (unique, 0xbe00, 8), (unique, 0x10002f01, 8) CAST (unique, 0x3880, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10002ef9, 8), (unique, 0x10002ef9, 8) CAST (unique, 0x3880, 8), (unique, 0x3880, 8) PTRADD (unique, 0x10001282, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(stack, 0xffffffffffffff88, 8) COPY (register, 0x10, 8), (register, 0x10, 8) CAST (unique, 0x10002f11, 8), (unique, 0x10002f11, 8) INT_AND (unique, 0x10002f09, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x10002f09, 8) CAST (unique, 0x3800, 8), (unique, 0x3800, 8) PTRADD (unique, 0x10001282, 8) , (unique, 0x10001778, 8) , (const, 0x1, 8), (unique, 0x10001778, 8) INT_ADD (unique, 0x1000044d, 8) , (const, 0xf, 8)]
[(register, 0x18, 8) PTRADD (unique, 0x10001282, 8) , (unique, 0x10001780, 8) , (const, 0x1, 8), (unique, 0x10001780, 8) INT_SUB (unique, 0x1000044d, 8) , (register, 0x0, 8), (register, 0x0, 8) INT_AND (unique, 0x3580, 8) , (const, 0xfffffffffffff000, 8)]
[(unique, 0x10002d2c, 8) COPY (register, 0x20, 8)]
[(unique, 0x1000128b, 8) MULTIEQUAL (unique, 0x10002d2c, 8) , (unique, 0x10002d34, 8)]
[(unique, 0x10001293, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x46c121, 1) , (unique, 0x1000128a, 1), (unique, 0x1000128a, 1) INT_NOTEQUAL (register, 0x20, 8) , (register, 0x18, 8), (register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8)]
[(register, 0x20, 8) PTRADD (unique, 0x1000128b, 8) , (const, 0xfffffffffffff000, 8) , (const, 0x1, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10002f21, 8) , (unique, 0xbe00, 8), (unique, 0x10002f21, 8) CAST (unique, 0x3c80, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10002f19, 8), (unique, 0x10002f19, 8) CAST (unique, 0x3c80, 8), (unique, 0x3c80, 8) PTRADD (unique, 0x1000128b, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x20, 8) PTRADD (unique, 0x1000128b, 8) , (const, 0xfffffffffffff000, 8) , (const, 0x1, 8)]
[(unique, 0x10002d34, 8) COPY (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x1000128b, 8) , (const, 0xfffffffffffff000, 8) , (const, 0x1, 8)]
[(register, 0x20, 8) PTRADD (unique, 0x10001293, 8) , (unique, 0x1000047d, 8) , (const, 0x1, 8), (unique, 0x1000047d, 8) INT_2COMP (register, 0x10, 8), (register, 0x10, 8) INT_ZEXT (register, 0x10, 4), (register, 0x10, 4) INT_AND (unique, 0x10000415, 4) , (const, 0xff0, 4)]
[(register, 0x20, 8) PTRADD (unique, 0x10001293, 8) , (unique, 0x1000047d, 8) , (const, 0x1, 8), (unique, 0x1000047d, 8) INT_2COMP (register, 0x10, 8), (register, 0x10, 8) INT_ZEXT (register, 0x10, 4), (register, 0x10, 4) INT_AND (unique, 0x10000415, 4) , (const, 0xff0, 4)]
[(register, 0x20, 8) PTRADD (unique, 0x10001293, 8) , (unique, 0x1000047d, 8) , (const, 0x1, 8), (unique, 0x1000047d, 8) INT_2COMP (register, 0x10, 8), (register, 0x10, 8) INT_ZEXT (register, 0x10, 4), (register, 0x10, 4) INT_AND (unique, 0x10000415, 4) , (const, 0xff0, 4)]
[(register, 0x20, 8) PTRADD (unique, 0x10001293, 8) , (unique, 0x1000047d, 8) , (const, 0x1, 8), (unique, 0x1000047d, 8) INT_2COMP (register, 0x10, 8), (register, 0x10, 8) INT_ZEXT (register, 0x10, 4), (register, 0x10, 4) INT_AND (unique, 0x10000415, 4) , (const, 0xff0, 4)]
[(register, 0x20, 8) PTRADD (unique, 0x10001293, 8) , (unique, 0x1000047d, 8) , (const, 0x1, 8), (unique, 0x1000047d, 8) INT_2COMP (register, 0x10, 8), (register, 0x10, 8) INT_ZEXT (register, 0x10, 4), (register, 0x10, 4) INT_AND (unique, 0x10000415, 4) , (const, 0xff0, 4)]
[(register, 0x20, 8) PTRADD (unique, 0x10001293, 8) , (unique, 0x1000047d, 8) , (const, 0x1, 8), (unique, 0x1000047d, 8) INT_2COMP (register, 0x10, 8), (register, 0x10, 8) INT_ZEXT (register, 0x10, 4), (register, 0x10, 4) INT_AND (unique, 0x10000415, 4) , (const, 0xff0, 4)]
[ ---  CBRANCH (ram, 0x46c135, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x10, 8) , (const, 0x0, 8), (register, 0x10, 8) INT_ZEXT (register, 0x10, 4), (register, 0x10, 4) INT_AND (unique, 0x10000415, 4) , (const, 0xff0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10002f31, 8) , (unique, 0xbe00, 8), (unique, 0x10002f31, 8) CAST (unique, 0x3880, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10002f29, 8), (unique, 0x10002f29, 8) CAST (unique, 0x3880, 8), (unique, 0x3880, 8) PTRADD (unique, 0x10001293, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(stack, 0xffffffffffffff80, 8) COPY (const, 0x0, 8)]
[(stack, 0xffffffffffffff78, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10002f41, 8), (unique, 0x10002f41, 8) INT_AND (unique, 0x10002f39, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x10002f39, 8) CAST (unique, 0x3800, 8), (unique, 0x3800, 8) PTRADD (unique, 0x10001293, 8) , (unique, 0x10001788, 8) , (const, 0x1, 8), (unique, 0x10001788, 8) INT_ADD (unique, 0x1000047d, 8) , (const, 0xf, 8)]
[ ---  CBRANCH (ram, 0x46d26b, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (const, 0x2, 4) , (unique, 0x10002f49, 4), (unique, 0x10002f49, 4) CAST (stack, 0xffffffffffffff60, 4)]
[(unique, 0x10002bf4, 4) COPY (unique, 0x3100, 4), (unique, 0x3100, 4) INT_ADD (register, 0x0, 4) , (const, 0x3f, 4), (register, 0x0, 4) INT_ADD (stack, 0xffffffffffffff60, 4) , (register, 0xb0, 4)]
[ ---  CBRANCH (ram, 0x46c15f, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (const, 0xffffffff, 4) , (unique, 0x10002f4d, 4), (unique, 0x10002f4d, 4) CAST (register, 0x0, 4), (register, 0x0, 4) INT_ADD (stack, 0xffffffffffffff60, 4) , (register, 0xb0, 4)]
[(unique, 0x10002bf8, 4) COPY (register, 0x0, 4)]
[(register, 0x10, 4) INT_SRIGHT (unique, 0x10002f51, 4) , (const, 0x6, 4), (unique, 0x10002f51, 4) CAST (register, 0x10, 4), (register, 0x10, 4) MULTIEQUAL (unique, 0x10002bf4, 4) , (unique, 0x10002bf8, 4)]
[ ---  CBRANCH (ram, 0x46d990, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x10000491, 4) , (const, 0x0, 4), (unique, 0x10000491, 4) INT_AND (register, 0x0, 4) , (const, 0x3f, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10002f55, 8) , (const, 0x46d9b2, 8), (unique, 0x10002f55, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x10001293, 8) , (unique, 0x100017a0, 8) , (const, 0x1, 8), (unique, 0x100017a0, 8) INT_ADD (unique, 0x1000047d, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x2539, 4)]
[(register, 0x1090, 2) INDIRECT (register, 0x1090, 2) , (const, 0x2539, 4)]
[(ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x2539, 4)]
[(ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x2539, 4)]
[(ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x2539, 4)]
[(ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x2539, 4)]
[(ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x2539, 4)]
[(ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x2539, 4)]
[(ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x2539, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x2539, 4)]
[(stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x2539, 4)]
[(stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x2539, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x2539, 4)]
[(stack, 0xfffffffffffffee4, 4) INDIRECT (stack, 0xfffffffffffffee4, 4) , (const, 0x2539, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x2539, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x2539, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x2539, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x2539, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x2539, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x2539, 4)]
[(stack, 0xffffffffffffff18, 16) INDIRECT (stack, 0xffffffffffffff18, 16) , (const, 0x2539, 4)]
[(stack, 0xffffffffffffff28, 16) INDIRECT (stack, 0xffffffffffffff28, 16) , (const, 0x2539, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x2539, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x2539, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x2539, 4)]
[(stack, 0xffffffffffffff52, 2) INDIRECT (stack, 0xffffffffffffff52, 2) , (const, 0x2539, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x2539, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x2539, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x2539, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x2539, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x2539, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x2539, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x2539, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x2539, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x2539, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x2539, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2539, 4)]
[(register, 0x0, 8) CALL (ram, 0x489d30, 8) , (unique, 0x3400, 8) , (register, 0xb8, 8) , (stack, 0xffffffffffffff70, 8), (unique, 0x3400, 8) PTRADD (register, 0x38, 8) , (register, 0x10, 8) , (const, 0x8, 8), (register, 0x10, 8) INT_SEXT (register, 0x10, 4)]
[(unique, 0x10002c18, 4) COPY (register, 0x10, 4), (register, 0x10, 4) INT_ADD (register, 0xb0, 4) , (const, 0x3f, 4), (register, 0xb0, 4) INT_ADD (register, 0xb0, 4) , (stack, 0xffffffffffffff60, 4), (stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0x2539, 4)]
[ ---  CBRANCH (ram, 0x46d9ca, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (const, 0xffffffff, 4) , (register, 0xb0, 4), (register, 0xb0, 4) INT_ADD (register, 0xb0, 4) , (stack, 0xffffffffffffff60, 4), (stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0x2539, 4)]
[(unique, 0x10002c1c, 4) COPY (register, 0xb0, 4)]
[(stack, 0xffffffffffffff70, 8) COPY (register, 0x30, 8), (register, 0x30, 8) INT_ADD (stack, 0xffffffffffffff70, 8) , (register, 0x10, 8), (register, 0x10, 8) INT_SEXT (register, 0x10, 4), (register, 0x10, 4) INT_SRIGHT (register, 0x10, 4) , (const, 0x6, 4), (register, 0x10, 4) MULTIEQUAL (unique, 0x10002c18, 4) , (unique, 0x10002c1c, 4)]
[(unique, 0x10002cb0, 4) COPY (stack, 0xffffffffffffff60, 4)]
[ ---  CBRANCH (ram, 0x46c1a7, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8)]
[(stack, 0xffffffffffffff70, 8) COPY (unique, 0x3100, 8), (unique, 0x3100, 8) INT_ADD (register, 0x30, 8) , (const, 0x1, 8)]
[(ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x2598, 4)]
[(ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x2598, 4)]
[(ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x2598, 4)]
[(ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x2598, 4)]
[(ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x2598, 4)]
[(ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x2598, 4)]
[(ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x2598, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3400, 8) , (register, 0x0, 8), (unique, 0x3400, 8) PTRADD (stack, 0xffffffffffffff68, 8) , (register, 0x30, 8) , (const, 0x8, 8)]
[ ---  BRANCH (ram, 0x46c1a7, 1)]
[(unique, 0x10002cbc, 4) COPY (stack, 0xffffffffffffff60, 4)]
[ ---  CBRANCH (ram, 0x46dde2, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (const, 0xffffffffffffffff, 8) , (register, 0x0, 8), (register, 0x0, 8) INT_ADD (stack, 0xffffffffffffff70, 8) , (const, 0xffffffffffffffff, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10002f5d, 8) , (const, 0x46c194, 8), (unique, 0x10002f5d, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x10001293, 8) , (unique, 0x100017a8, 8) , (const, 0x1, 8), (unique, 0x100017a8, 8) INT_ADD (unique, 0x1000047d, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x8f4, 4)]
[(register, 0x1090, 2) INDIRECT (register, 0x1090, 2) , (const, 0x8f4, 4)]
[(ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x8f4, 4)]
[(ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x8f4, 4)]
[(ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x8f4, 4)]
[(ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x8f4, 4)]
[(ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x8f4, 4)]
[(ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x8f4, 4)]
[(ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x8f4, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x8f4, 4)]
[(stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x8f4, 4)]
[(stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x8f4, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x8f4, 4)]
[(stack, 0xfffffffffffffee4, 4) INDIRECT (stack, 0xfffffffffffffee4, 4) , (const, 0x8f4, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x8f4, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x8f4, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x8f4, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x8f4, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x8f4, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x8f4, 4)]
[(stack, 0xffffffffffffff18, 16) INDIRECT (stack, 0xffffffffffffff18, 16) , (const, 0x8f4, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x8f4, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x8f4, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x8f4, 4)]
[(stack, 0xffffffffffffff52, 2) INDIRECT (stack, 0xffffffffffffff52, 2) , (const, 0x8f4, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x8f4, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x8f4, 4)]
[(stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0x8f4, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x8f4, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x8f4, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x8f4, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x8f4, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x8f4, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x8f4, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x8f4, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x8f4, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x8f4, 4)]
[ ---  CALL (ram, 0x401060, 8) , (unique, 0x3400, 8) , (register, 0xb8, 8) , (unique, 0x3680, 8), (unique, 0x3400, 8) PTRADD (register, 0x38, 8) , (register, 0x18, 8) , (const, 0x8, 8), (unique, 0x3680, 8) INT_MULT (stack, 0xffffffffffffff70, 8) , (const, 0x8, 8), (register, 0x18, 8) INT_SEXT (register, 0x10, 4)]
[(stack, 0xffffffffffffff28, 4) SUBPIECE (stack, 0xffffffffffffff28, 16) , (const, 0x0, 8), (stack, 0xffffffffffffff28, 16) INDIRECT (stack, 0xffffffffffffff28, 16) , (const, 0x8f4, 4), (stack, 0xffffffffffffff28, 16) INT_ADD (unique, 0x1000211c, 16) , (stack, 0xffffffffffffff60, 4), (unique, 0x1000211c, 16) INT_LEFT (unique, 0x1000210c, 16) , (const, 0x20, 16), (unique, 0x1000210c, 16) INT_SEXT (stack, 0xffffffffffffff2c, 12), (stack, 0xffffffffffffff2c, 12) SUBPIECE (stack, 0xffffffffffffff28, 16) , (const, 0x4, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 4) MULTIEQUAL (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4)]
[(stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff52, 2) MULTIEQUAL (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff28, 16) MULTIEQUAL (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16)]
[(stack, 0xffffffffffffff18, 16) MULTIEQUAL (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee4, 4) MULTIEQUAL (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffec4, 4) MULTIEQUAL (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4)]
[(stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(ram, 0x4ae3d0, 8) MULTIEQUAL (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8)]
[(ram, 0x4ae3c8, 8) MULTIEQUAL (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8)]
[(ram, 0x4ae3c0, 8) MULTIEQUAL (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8)]
[(ram, 0x4ae3b0, 8) MULTIEQUAL (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8)]
[(ram, 0x4ae3a0, 10) MULTIEQUAL (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10)]
[(ram, 0x4ae390, 8) MULTIEQUAL (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8)]
[(ram, 0x4ae380, 16) MULTIEQUAL (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16)]
[(register, 0x1090, 2) MULTIEQUAL (register, 0x1090, 2) , (register, 0x1090, 2)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(stack, 0xffffffffffffff70, 8) COPY (register, 0xa8, 8), (register, 0xa8, 8) INT_ADD (unique, 0x100028ac, 8) , (register, 0x18, 8), (register, 0x18, 8) INT_SEXT (register, 0x10, 4)]
[(unique, 0x10002cac, 4) COPY (unique, 0x1000100a, 4), (unique, 0x1000100a, 4) MULTIEQUAL (stack, 0xffffffffffffff28, 4) , (unique, 0x10002cbc, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 4) MULTIEQUAL (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4)]
[(stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff52, 2) MULTIEQUAL (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff18, 16) MULTIEQUAL (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee4, 4) MULTIEQUAL (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffec4, 4) MULTIEQUAL (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4)]
[(stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(ram, 0x4ae3d0, 8) MULTIEQUAL (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8)]
[(ram, 0x4ae3c8, 8) MULTIEQUAL (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8)]
[(ram, 0x4ae3c0, 8) MULTIEQUAL (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8)]
[(ram, 0x4ae3b0, 8) MULTIEQUAL (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8)]
[(ram, 0x4ae3a0, 10) MULTIEQUAL (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10)]
[(ram, 0x4ae390, 8) MULTIEQUAL (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8)]
[(ram, 0x4ae380, 16) MULTIEQUAL (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16)]
[(register, 0x1090, 2) MULTIEQUAL (register, 0x1090, 2) , (register, 0x1090, 2) , (register, 0x1090, 2)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x8, 4) MULTIEQUAL (unique, 0x10002cac, 4) , (unique, 0x10002cb0, 4) , (unique, 0x10002cb0, 4)]
[(stack, 0xffffffffffffff30, 8) SUBPIECE (stack, 0xffffffffffffff28, 16) , (const, 0x8, 4), (stack, 0xffffffffffffff28, 16) MULTIEQUAL (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16)]
[ ---  CBRANCH (ram, 0x46c1ca, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (const, 0x0, 8) , (register, 0x10, 8), (register, 0x10, 8) MULTIEQUAL (register, 0x18, 8) , (register, 0x10, 8) , (register, 0x10, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10002f65, 8) , (const, 0x46c1c4, 8), (unique, 0x10002f65, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x10001293, 8) , (unique, 0x100017b0, 8) , (const, 0x1, 8), (unique, 0x100017b0, 8) INT_ADD (unique, 0x1000047d, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x949, 4)]
[(register, 0x1090, 2) INDIRECT (register, 0x1090, 2) , (const, 0x949, 4)]
[(ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x949, 4)]
[(ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x949, 4)]
[(ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x949, 4)]
[(ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x949, 4)]
[(ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x949, 4)]
[(ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x949, 4)]
[(ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x949, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x949, 4)]
[(stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x949, 4)]
[(stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x949, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x949, 4)]
[(stack, 0xfffffffffffffee4, 4) INDIRECT (stack, 0xfffffffffffffee4, 4) , (const, 0x949, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x949, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x949, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x949, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x949, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x949, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x949, 4)]
[(stack, 0xffffffffffffff18, 16) INDIRECT (stack, 0xffffffffffffff18, 16) , (const, 0x949, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x949, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x949, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x949, 4)]
[(stack, 0xffffffffffffff52, 2) INDIRECT (stack, 0xffffffffffffff52, 2) , (const, 0x949, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x949, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x949, 4)]
[(stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0x949, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x949, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x949, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x949, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x949, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x949, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x949, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x949, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x949, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x949, 4)]
[ ---  CALL (ram, 0x401120, 8) , (stack, 0xffffffffffffff68, 8) , (const, 0x0, 8) , (register, 0x10, 8), (register, 0x10, 8) INT_LEFT (register, 0x10, 8) , (const, 0x3, 4)]
[(stack, 0xffffffffffffff30, 8) SUBPIECE (stack, 0xffffffffffffff28, 16) , (const, 0x8, 4), (stack, 0xffffffffffffff28, 16) INDIRECT (stack, 0xffffffffffffff28, 16) , (const, 0x949, 4), (stack, 0xffffffffffffff28, 16) INT_ADD (unique, 0x1000213c, 16) , (register, 0x8, 4), (unique, 0x1000213c, 16) INT_LEFT (unique, 0x1000212c, 16) , (const, 0x20, 16), (unique, 0x1000212c, 16) INT_SEXT (stack, 0xffffffffffffff2c, 12), (stack, 0xffffffffffffff2c, 12) SUBPIECE (stack, 0xffffffffffffff28, 16) , (const, 0x4, 8)]
[(stack, 0xffffffffffffff28, 4) SUBPIECE (stack, 0xffffffffffffff28, 16) , (const, 0x0, 8), (stack, 0xffffffffffffff28, 16) INDIRECT (stack, 0xffffffffffffff28, 16) , (const, 0x949, 4), (stack, 0xffffffffffffff28, 16) INT_ADD (unique, 0x1000213c, 16) , (register, 0x8, 4), (unique, 0x1000213c, 16) INT_LEFT (unique, 0x1000212c, 16) , (const, 0x20, 16), (unique, 0x1000212c, 16) INT_SEXT (stack, 0xffffffffffffff2c, 12), (stack, 0xffffffffffffff2c, 12) SUBPIECE (stack, 0xffffffffffffff28, 16) , (const, 0x4, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 4) MULTIEQUAL (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4)]
[(stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff52, 2) MULTIEQUAL (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff18, 16) MULTIEQUAL (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee4, 4) MULTIEQUAL (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffec4, 4) MULTIEQUAL (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4)]
[(stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(ram, 0x4ae3d0, 8) MULTIEQUAL (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8)]
[(ram, 0x4ae3c8, 8) MULTIEQUAL (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8)]
[(ram, 0x4ae3c0, 8) MULTIEQUAL (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8)]
[(ram, 0x4ae3b0, 8) MULTIEQUAL (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8)]
[(ram, 0x4ae3a0, 10) MULTIEQUAL (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10)]
[(ram, 0x4ae390, 8) MULTIEQUAL (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8)]
[(ram, 0x4ae380, 16) MULTIEQUAL (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16)]
[(register, 0x1090, 2) MULTIEQUAL (register, 0x1090, 2) , (register, 0x1090, 2)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x8, 4) MULTIEQUAL (register, 0x8, 4) , (stack, 0xffffffffffffff28, 4)]
[(stack, 0xffffffffffffff28, 16) INT_ADD (unique, 0x1000215c, 16) , (unique, 0x10002f75, 8), (unique, 0x10002f75, 8) CAST (register, 0x38, 8), (unique, 0x1000215c, 16) INT_LEFT (unique, 0x1000214c, 16) , (const, 0x40, 16), (unique, 0x1000214c, 16) INT_SEXT (unique, 0x10002f6d, 8), (unique, 0x10002f6d, 8) CAST (stack, 0xffffffffffffff30, 8), (stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(register, 0xa0, 4) COPY (const, 0x0, 4)]
[(register, 0xa8, 1) COPY (const, 0xc, 1)]
[(register, 0xa8, 4) COPY (const, 0x0, 4)]
[(unique, 0x1000293c, 8) COPY (stack, 0xffffffffffffff80, 8), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(unique, 0x10002bdc, 8) COPY (unique, 0x10002f7d, 8), (unique, 0x10002f7d, 8) CAST (register, 0xb8, 8), (register, 0xb8, 8) PTRADD (unique, 0x10001590, 8) , (const, 0x138, 8) , (const, 0x1, 8), (unique, 0x10001590, 8) PTRSUB (const, 0x0, 8) , (const, 0x4b17e0, 8)]
[ ---  BRANCH (ram, 0x46c25e, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (unique, 0x100013c2, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (unique, 0x100013ba, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (unique, 0x100013b2, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (unique, 0x100013aa, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (unique, 0x100013a2, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (unique, 0x1000139a, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (unique, 0x10001392, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (unique, 0x1000138a, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (unique, 0x10001382, 8)]
[(stack, 0xffffffffffffff60, 4) MULTIEQUAL (stack, 0xffffffffffffff60, 4) , (unique, 0x1000137e, 4)]
[(stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (unique, 0x1000137a, 4)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (unique, 0x10001376, 4)]
[(stack, 0xffffffffffffff52, 2) MULTIEQUAL (stack, 0xffffffffffffff52, 2) , (unique, 0x10001374, 2)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (unique, 0x1000136c, 8)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (unique, 0x10001368, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (unique, 0x10001364, 4)]
[(stack, 0xffffffffffffff28, 16) MULTIEQUAL (stack, 0xffffffffffffff28, 16) , (unique, 0x10001354, 16)]
[(stack, 0xffffffffffffff18, 16) MULTIEQUAL (stack, 0xffffffffffffff18, 16) , (unique, 0x10001344, 16)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (unique, 0x1000133c, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (unique, 0x10001334, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (unique, 0x1000132c, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (unique, 0x10001324, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (unique, 0x1000131c, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (unique, 0x10001314, 8)]
[(stack, 0xfffffffffffffee4, 4) MULTIEQUAL (stack, 0xfffffffffffffee4, 4) , (unique, 0x10001310, 4)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (unique, 0x10001308, 8)]
[(stack, 0xfffffffffffffec4, 4) MULTIEQUAL (stack, 0xfffffffffffffec4, 4) , (unique, 0x10001304, 4)]
[(stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (unique, 0x10001300, 4)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (unique, 0x100012f8, 8)]
[(ram, 0x4ae3d0, 8) MULTIEQUAL (ram, 0x4ae3d0, 8) , (unique, 0x100012f0, 8)]
[(ram, 0x4ae3c8, 8) MULTIEQUAL (ram, 0x4ae3c8, 8) , (unique, 0x100012e8, 8)]
[(ram, 0x4ae3c0, 8) MULTIEQUAL (ram, 0x4ae3c0, 8) , (unique, 0x100012e0, 8)]
[(ram, 0x4ae3b0, 8) MULTIEQUAL (ram, 0x4ae3b0, 8) , (unique, 0x100012d8, 8)]
[(ram, 0x4ae3a0, 10) MULTIEQUAL (ram, 0x4ae3a0, 10) , (unique, 0x100012ce, 10)]
[(ram, 0x4ae390, 8) MULTIEQUAL (ram, 0x4ae390, 8) , (unique, 0x100012c6, 8)]
[(ram, 0x4ae380, 16) MULTIEQUAL (ram, 0x4ae380, 16) , (unique, 0x100012b6, 16)]
[(register, 0x1090, 2) MULTIEQUAL (register, 0x1090, 2) , (unique, 0x100012ac, 2)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (unique, 0x100012a4, 8)]
[(register, 0xb0, 1) MULTIEQUAL (register, 0xa8, 1) , (register, 0xb0, 1)]
[(register, 0xa8, 4) MULTIEQUAL (register, 0xa8, 4) , (unique, 0x100012b2, 4)]
[(register, 0xb8, 8) PTRADD (register, 0xb8, 8) , (const, 0xfffffffffffffffd, 8) , (const, 0x8, 8), (register, 0xb8, 8) MULTIEQUAL (unique, 0x10002bdc, 8) , (unique, 0x10002be4, 8)]
[(unique, 0x10002924, 8) COPY (register, 0x10, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0x1000293c, 8) , (unique, 0x1000129c, 8)]
[ ---  CBRANCH (ram, 0x46c24b, 1) , (unique, 0xd080, 1), (unique, 0xd080, 1) INT_SLESS (unique, 0x10002f8d, 4) , (register, 0x0, 4), (unique, 0x10002f8d, 4) CAST (register, 0x8, 4), (register, 0x0, 4) INT_ADD (register, 0x0, 4) , (const, 0xffffffff, 4), (register, 0x0, 4) INT_ADD (unique, 0xbc80, 4) , (register, 0xa0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10002f85, 8), (unique, 0x10002f85, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb8, 8) , (const, 0xffffffffffffffff, 8) , (const, 0x8, 8), (register, 0x8, 4) MULTIEQUAL (register, 0x8, 4) , (unique, 0x10002cb8, 4), (register, 0xa0, 4) MULTIEQUAL (register, 0xa0, 4) , (unique, 0x100012ae, 4), (register, 0xb8, 8) MULTIEQUAL (unique, 0x10002bdc, 8) , (unique, 0x10002be4, 8)]
[ ---  CBRANCH (ram, 0x46c200, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x10, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x46c9f0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x58c00, 1) , (const, 0x0, 1), (unique, 0x58c00, 1) INT_AND (unique, 0xbb00, 1) , (const, 0x10, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10002f99, 8), (unique, 0x10002f99, 8) INT_ADD (unique, 0x10002f91, 8) , (const, 0xd, 8), (unique, 0x10002f91, 8) CAST (stack, 0xffffffffffffff40, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10002fa1, 8) , (const, 0x46ca17, 8), (unique, 0x10002fa1, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x10001293, 8) , (unique, 0x100017b8, 8) , (const, 0x1, 8), (unique, 0x100017b8, 8) INT_ADD (unique, 0x1000047d, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x24b1, 4)]
[(register, 0x1090, 2) INDIRECT (register, 0x1090, 2) , (const, 0x24b1, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x24b1, 4)]
[(stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x24b1, 4)]
[(stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x24b1, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x24b1, 4)]
[(stack, 0xfffffffffffffee4, 4) INDIRECT (stack, 0xfffffffffffffee4, 4) , (const, 0x24b1, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x24b1, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x24b1, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x24b1, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x24b1, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x24b1, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x24b1, 4)]
[(stack, 0xffffffffffffff18, 16) INDIRECT (stack, 0xffffffffffffff18, 16) , (const, 0x24b1, 4)]
[(stack, 0xffffffffffffff28, 16) INDIRECT (stack, 0xffffffffffffff28, 16) , (const, 0x24b1, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x24b1, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x24b1, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x24b1, 4)]
[(stack, 0xffffffffffffff52, 2) INDIRECT (stack, 0xffffffffffffff52, 2) , (const, 0x24b1, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x24b1, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x24b1, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x24b1, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x24b1, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x24b1, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x24b1, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x24b1, 4), (stack, 0xffffffffffffff90, 8) COPY (unique, 0x3100, 8), (unique, 0x3100, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x1, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb8, 8) , (const, 0xfffffffffffffffe, 8) , (const, 0x8, 8)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x24b1, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x24b1, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x24b1, 4)]
[ ---  CALL (ram, 0x401060, 8) , (register, 0x38, 8) , (unique, 0x3400, 8) , (register, 0x10, 8), (unique, 0x3400, 8) PTRADD (unique, 0x100015a8, 8) , (unique, 0x3300, 8) , (const, 0x1, 8), (unique, 0x100015a8, 8) PTRSUB (const, 0x0, 8) , (const, 0x4b1960, 8), (unique, 0x3300, 8) INT_MULT (unique, 0xbd80, 8) , (const, 0x8, 8), (register, 0x10, 8) INT_MULT (unique, 0x3100, 8) , (const, 0x8, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0xb8, 8), (unique, 0x3100, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x1, 8), (register, 0x38, 8) PTRADD (stack, 0xffffffffffffff88, 8) , (const, 0x1, 8) , (const, 0x8, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb8, 8) , (const, 0xfffffffffffffffe, 8) , (const, 0x8, 8)]
[(ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x24b6, 4), (ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x24b1, 4)]
[(ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x24b6, 4), (ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x24b1, 4)]
[(ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x24b6, 4), (ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x24b1, 4)]
[(ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x24b6, 4), (ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x24b1, 4)]
[(ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x24b6, 4), (ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x24b1, 4)]
[(ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x24b6, 4), (ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x24b1, 4)]
[(ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x24b6, 4), (ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x24b1, 4)]
[ ---  STORE (const, 0x1b1, 4) , (stack, 0xffffffffffffff88, 8) , (const, 0x0, 8), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x24b1, 4)]
[(stack, 0xffffffffffffff60, 4) COPY (unique, 0xbd00, 4), (unique, 0xbd00, 4) INT_ADD (stack, 0xffffffffffffff60, 4) , (const, 0x40, 4), (stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0x24b1, 4)]
[ ---  BRANCH (ram, 0x46c234, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10002fa9, 8) , (const, 0x46c230, 8), (unique, 0x10002fa9, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x10001293, 8) , (unique, 0x100017c0, 8) , (const, 0x1, 8), (unique, 0x100017c0, 8) INT_ADD (unique, 0x1000047d, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x246f, 4)]
[(register, 0x1090, 2) INDIRECT (register, 0x1090, 2) , (const, 0x246f, 4)]
[(ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x246f, 4)]
[(ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x246f, 4)]
[(ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x246f, 4)]
[(ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x246f, 4)]
[(ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x246f, 4)]
[(ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x246f, 4)]
[(ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x246f, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x246f, 4)]
[(stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x246f, 4)]
[(stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x246f, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x246f, 4)]
[(stack, 0xfffffffffffffee4, 4) INDIRECT (stack, 0xfffffffffffffee4, 4) , (const, 0x246f, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x246f, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x246f, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x246f, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x246f, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x246f, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x246f, 4)]
[(stack, 0xffffffffffffff18, 16) INDIRECT (stack, 0xffffffffffffff18, 16) , (const, 0x246f, 4)]
[(stack, 0xffffffffffffff28, 16) INDIRECT (stack, 0xffffffffffffff28, 16) , (const, 0x246f, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x246f, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x246f, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x246f, 4)]
[(stack, 0xffffffffffffff52, 2) INDIRECT (stack, 0xffffffffffffff52, 2) , (const, 0x246f, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x246f, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x246f, 4)]
[(stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0x246f, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x246f, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x246f, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x246f, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x246f, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x246f, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x246f, 4), (stack, 0xffffffffffffff90, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb8, 8) , (const, 0xfffffffffffffffe, 8) , (const, 0x8, 8)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x246f, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x246f, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x246f, 4)]
[ ---  CALL (ram, 0x401060, 8) , (stack, 0xffffffffffffff88, 8) , (unique, 0x3400, 8) , (register, 0x10, 8), (register, 0x10, 8) INT_LEFT (unique, 0xbd80, 8) , (const, 0x3, 4), (unique, 0x3400, 8) PTRADD (unique, 0x100015a0, 8) , (unique, 0x3300, 8) , (const, 0x1, 8), (unique, 0x100015a0, 8) PTRSUB (const, 0x0, 8) , (const, 0x4b1960, 8), (unique, 0x3300, 8) INT_MULT (unique, 0xbd80, 8) , (const, 0x8, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0xb8, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb8, 8) , (const, 0xfffffffffffffffe, 8) , (const, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10002fb1, 8) , (const, 0x46c299, 8), (unique, 0x10002fb1, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x10001293, 8) , (unique, 0x100017c8, 8) , (const, 0x1, 8), (unique, 0x100017c8, 8) INT_ADD (unique, 0x1000047d, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x9bf, 4)]
[(register, 0x1090, 2) INDIRECT (register, 0x1090, 2) , (const, 0x9bf, 4)]
[(ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x9bf, 4)]
[(ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x9bf, 4)]
[(ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x9bf, 4)]
[(ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x9bf, 4)]
[(ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x9bf, 4)]
[(ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x9bf, 4)]
[(ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x9bf, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x9bf, 4)]
[(stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x9bf, 4)]
[(stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x9bf, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x9bf, 4)]
[(stack, 0xfffffffffffffee4, 4) INDIRECT (stack, 0xfffffffffffffee4, 4) , (const, 0x9bf, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x9bf, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x9bf, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x9bf, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x9bf, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x9bf, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x9bf, 4)]
[(stack, 0xffffffffffffff18, 16) INDIRECT (stack, 0xffffffffffffff18, 16) , (const, 0x9bf, 4)]
[(stack, 0xffffffffffffff28, 16) INDIRECT (stack, 0xffffffffffffff28, 16) , (const, 0x9bf, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x9bf, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x9bf, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x9bf, 4)]
[(stack, 0xffffffffffffff52, 2) INDIRECT (stack, 0xffffffffffffff52, 2) , (const, 0x9bf, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x9bf, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x9bf, 4)]
[(stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0x9bf, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x9bf, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x9bf, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x9bf, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x9bf, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x9bf, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x9bf, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x9bf, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x9bf, 4)]
[(register, 0x10, 8) INT_ADD (unique, 0xbd80, 8) , (stack, 0xffffffffffffff80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb8, 8) , (const, 0xfffffffffffffffe, 8) , (const, 0x8, 8), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x9bf, 4)]
[ ---  CBRANCH (ram, 0x46ca38, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x489f60, 8)]
[(stack, 0xffffffffffffff90, 8) COPY (register, 0x10, 8), (register, 0x10, 8) INT_ADD (register, 0x10, 8) , (const, 0xfffffffffffffffe, 8)]
[ ---  BRANCH (ram, 0x46c234, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 4) MULTIEQUAL (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4)]
[(stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff52, 2) MULTIEQUAL (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff28, 16) MULTIEQUAL (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16)]
[(stack, 0xffffffffffffff18, 16) MULTIEQUAL (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee4, 4) MULTIEQUAL (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffec4, 4) MULTIEQUAL (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4)]
[(stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(ram, 0x4ae3d0, 8) MULTIEQUAL (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8)]
[(ram, 0x4ae3c8, 8) MULTIEQUAL (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8)]
[(ram, 0x4ae3c0, 8) MULTIEQUAL (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8)]
[(ram, 0x4ae3b0, 8) MULTIEQUAL (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8)]
[(ram, 0x4ae3a0, 10) MULTIEQUAL (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10)]
[(ram, 0x4ae390, 8) MULTIEQUAL (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8)]
[(ram, 0x4ae380, 16) MULTIEQUAL (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16)]
[(register, 0x1090, 2) MULTIEQUAL (register, 0x1090, 2) , (register, 0x1090, 2) , (register, 0x1090, 2)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff90, 8), (stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[ ---  CBRANCH (ram, 0x46c2c0, 1) , (unique, 0x1000100f, 1), (unique, 0x1000100f, 1) INT_SLESS (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff70, 8), (stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff90, 8) COPY (register, 0x10, 8), (register, 0x10, 8) INT_ADD (register, 0x10, 8) , (const, 0xffffffffffffffff, 8)]
[(register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffff70, 8) , (register, 0x10, 8), (register, 0x10, 8) INT_ADD (register, 0x10, 8) , (const, 0xffffffffffffffff, 8)]
[ ---  CBRANCH (ram, 0x46c241, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESSEQUAL (stack, 0xffffffffffffff70, 8) , (register, 0x10, 8), (register, 0x10, 8) INT_ADD (register, 0x10, 8) , (const, 0xffffffffffffffff, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 4) MULTIEQUAL (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4)]
[(stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff52, 2) MULTIEQUAL (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff28, 16) MULTIEQUAL (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16)]
[(stack, 0xffffffffffffff18, 16) MULTIEQUAL (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee4, 4) MULTIEQUAL (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffec4, 4) MULTIEQUAL (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4)]
[(stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(ram, 0x4ae3d0, 8) MULTIEQUAL (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8)]
[(ram, 0x4ae3c8, 8) MULTIEQUAL (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8)]
[(ram, 0x4ae3c0, 8) MULTIEQUAL (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8)]
[(ram, 0x4ae3b0, 8) MULTIEQUAL (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8)]
[(ram, 0x4ae3a0, 10) MULTIEQUAL (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10)]
[(ram, 0x4ae390, 8) MULTIEQUAL (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8)]
[(ram, 0x4ae380, 16) MULTIEQUAL (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16)]
[(register, 0x1090, 2) MULTIEQUAL (register, 0x1090, 2) , (register, 0x1090, 2)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x1000292c, 8) COPY (stack, 0xffffffffffffff80, 8), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[ ---  CBRANCH (ram, 0x46d2b0, 1) , (register, 0x206, 1), (register, 0x206, 1) MULTIEQUAL (register, 0x206, 1) , (register, 0x206, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10002fb9, 8) , (const, 0x46d2c0, 8), (unique, 0x10002fb9, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x10001293, 8) , (unique, 0x100017d0, 8) , (const, 0x1, 8), (unique, 0x100017d0, 8) INT_ADD (unique, 0x1000047d, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x23fe, 4)]
[(register, 0x1090, 2) INDIRECT (register, 0x1090, 2) , (const, 0x23fe, 4)]
[(ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x23fe, 4)]
[(ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x23fe, 4)]
[(ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x23fe, 4)]
[(ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x23fe, 4)]
[(ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x23fe, 4)]
[(ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x23fe, 4)]
[(ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x23fe, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x23fe, 4)]
[(stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x23fe, 4)]
[(stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x23fe, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x23fe, 4)]
[(stack, 0xfffffffffffffee4, 4) INDIRECT (stack, 0xfffffffffffffee4, 4) , (const, 0x23fe, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x23fe, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x23fe, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x23fe, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x23fe, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x23fe, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x23fe, 4)]
[(stack, 0xffffffffffffff18, 16) INDIRECT (stack, 0xffffffffffffff18, 16) , (const, 0x23fe, 4)]
[(stack, 0xffffffffffffff28, 16) INDIRECT (stack, 0xffffffffffffff28, 16) , (const, 0x23fe, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x23fe, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x23fe, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x23fe, 4)]
[(stack, 0xffffffffffffff52, 2) INDIRECT (stack, 0xffffffffffffff52, 2) , (const, 0x23fe, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x23fe, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x23fe, 4)]
[(stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0x23fe, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x23fe, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x23fe, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x23fe, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x23fe, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x23fe, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x23fe, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x23fe, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x23fe, 4)]
[(unique, 0x10002934, 8) COPY (stack, 0xffffffffffffff80, 8), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x23fe, 4)]
[ ---  CBRANCH (ram, 0x46c2c0, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (const, 0xffffffff, 4) , (register, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x489690, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 4) MULTIEQUAL (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4)]
[(stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff52, 2) MULTIEQUAL (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff28, 16) MULTIEQUAL (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16)]
[(stack, 0xffffffffffffff18, 16) MULTIEQUAL (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee4, 4) MULTIEQUAL (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffec4, 4) MULTIEQUAL (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4)]
[(stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(ram, 0x4ae3d0, 8) MULTIEQUAL (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8)]
[(ram, 0x4ae3c8, 8) MULTIEQUAL (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8)]
[(ram, 0x4ae3c0, 8) MULTIEQUAL (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8)]
[(ram, 0x4ae3b0, 8) MULTIEQUAL (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8)]
[(ram, 0x4ae3a0, 10) MULTIEQUAL (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10)]
[(ram, 0x4ae390, 8) MULTIEQUAL (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8)]
[(ram, 0x4ae380, 16) MULTIEQUAL (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16)]
[(register, 0x1090, 2) MULTIEQUAL (register, 0x1090, 2) , (register, 0x1090, 2) , (register, 0x1090, 2)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(stack, 0xffffffffffffff0c, 4) SUBPIECE (stack, 0xffffffffffffff08, 8) , (const, 0x4, 4), (stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(unique, 0x10002d3c, 8) COPY (register, 0x10, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0x10002924, 8) , (unique, 0x1000292c, 8) , (unique, 0x10002934, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10002fc1, 8) , (const, 0x46c2d5, 8), (unique, 0x10002fc1, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x10001293, 8) , (unique, 0x100017d8, 8) , (const, 0x1, 8), (unique, 0x100017d8, 8) INT_ADD (unique, 0x1000047d, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xa28, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x1090, 2) INDIRECT (register, 0x1090, 2) , (const, 0xa28, 4), (register, 0x1090, 2) MULTIEQUAL (register, 0x1090, 2) , (register, 0x1090, 2) , (register, 0x1090, 2)]
[(ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0xa28, 4), (ram, 0x4ae380, 16) MULTIEQUAL (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16)]
[(ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0xa28, 4), (ram, 0x4ae390, 8) MULTIEQUAL (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8)]
[(ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0xa28, 4), (ram, 0x4ae3a0, 10) MULTIEQUAL (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10)]
[(ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0xa28, 4), (ram, 0x4ae3b0, 8) MULTIEQUAL (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8)]
[(ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0xa28, 4), (ram, 0x4ae3c0, 8) MULTIEQUAL (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8)]
[(ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0xa28, 4), (ram, 0x4ae3c8, 8) MULTIEQUAL (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8)]
[(ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0xa28, 4), (ram, 0x4ae3d0, 8) MULTIEQUAL (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0xa28, 4), (stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0xa28, 4), (stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4)]
[(stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0xa28, 4), (stack, 0xfffffffffffffec4, 4) MULTIEQUAL (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0xa28, 4), (stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffee4, 4) INDIRECT (stack, 0xfffffffffffffee4, 4) , (const, 0xa28, 4), (stack, 0xfffffffffffffee4, 4) MULTIEQUAL (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0xa28, 4), (stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0xa28, 4), (stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0xa28, 4), (stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0xa28, 4), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0xa28, 4), (stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff18, 16) INDIRECT (stack, 0xffffffffffffff18, 16) , (const, 0xa28, 4), (stack, 0xffffffffffffff18, 16) MULTIEQUAL (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16)]
[(stack, 0xffffffffffffff28, 16) INDIRECT (stack, 0xffffffffffffff28, 16) , (const, 0xa28, 4), (stack, 0xffffffffffffff28, 16) MULTIEQUAL (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0xa28, 4), (stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0xa28, 4), (stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0xa28, 4), (stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff52, 2) INDIRECT (stack, 0xffffffffffffff52, 2) , (const, 0xa28, 4), (stack, 0xffffffffffffff52, 2) MULTIEQUAL (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0xa28, 4), (stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0xa28, 4), (stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4)]
[(stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0xa28, 4), (stack, 0xffffffffffffff60, 4) MULTIEQUAL (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0xa28, 4), (stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0xa28, 4), (stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0xa28, 4), (stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0xa28, 4), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0xa28, 4), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0xa28, 4), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xa28, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CALL (ram, 0x401060, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff88, 8) , (register, 0x10, 8), (register, 0x10, 8) INT_LEFT (stack, 0xffffffffffffff90, 8) , (const, 0x3, 4), (stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8), (stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff0c, 4) SUBPIECE (stack, 0xffffffffffffff08, 8) , (const, 0x4, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0xa28, 4), (stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(unique, 0x1b380, 8) COPY (const, 0x3f, 8)]
[ ---  CBRANCH (const, 0x7, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) PTRADD (stack, 0xffffffffffffff78, 8) , (unique, 0x100018a0, 8) , (const, 0x8, 8), (unique, 0x100018a0, 8) INT_ADD (stack, 0xffffffffffffff80, 8) , (const, 0xffffffffffffffff, 8), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0xa28, 4), (stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0xa28, 4), (stack, 0xffffffffffffff80, 8) COPY (stack, 0xffffffffffffff90, 8), (stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[ ---  CBRANCH (const, 0x3, 1) , (unique, 0x1b580, 1), (unique, 0x1b580, 1) INT_EQUAL (unique, 0x1b500, 8) , (const, 0x0, 8), (unique, 0x1b500, 8) INT_RIGHT (unique, 0xbd80, 8) , (unique, 0x1b380, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3a00, 8), (unique, 0x1b380, 8) MULTIEQUAL (unique, 0x1b380, 8) , (unique, 0x1b380, 8)]
[(unique, 0x1b380, 8) INT_ADD (unique, 0x1b380, 8) , (const, 0xffffffffffffffff, 8)]
[ ---  BRANCH (const, 0xfffffffb, 1)]
[(register, 0x90, 4) INT_SUB (unique, 0x3200, 4) , (register, 0x0, 4), (register, 0x0, 4) INT_XOR (unique, 0x10000521, 4) , (const, 0x3f, 4), (unique, 0x10000521, 4) SUBPIECE (unique, 0x1b380, 8) , (const, 0x0, 4), (unique, 0x3200, 4) INT_ADD (register, 0x8, 4) , (const, 0xffffff7f, 4), (register, 0x8, 4) INT_MULT (unique, 0x10000e3b, 4) , (const, 0x40, 4), (unique, 0x10000e3b, 4) SUBPIECE (stack, 0xffffffffffffff80, 8) , (const, 0x0, 4), (unique, 0x1b380, 8) MULTIEQUAL (unique, 0x1b380, 8) , (unique, 0x1b380, 8)]
[(register, 0xa8, 4) INT_OR (register, 0xa8, 4) , (register, 0x0, 4), (register, 0x0, 4) INT_LEFT (const, 0x1, 4) , (unique, 0x53100, 1), (unique, 0x53100, 1) INT_AND (register, 0xb0, 1) , (const, 0x1f, 1)]
[(unique, 0x10002d44, 8) COPY (stack, 0xffffffffffffff80, 8)]
[(unique, 0x1000129c, 8) MULTIEQUAL (unique, 0x10002d3c, 8) , (unique, 0x10002d44, 8)]
[(unique, 0x100012a4, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x100012ac, 2) MULTIEQUAL (register, 0x1090, 2) , (register, 0x1090, 2)]
[(unique, 0x100012ae, 4) MULTIEQUAL (register, 0xa0, 4) , (register, 0x90, 4)]
[(unique, 0x100012b2, 4) MULTIEQUAL (register, 0xa8, 4) , (register, 0xa8, 4)]
[(unique, 0x100012b6, 16) MULTIEQUAL (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16)]
[(unique, 0x100012c6, 8) MULTIEQUAL (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8)]
[(unique, 0x100012ce, 10) MULTIEQUAL (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10)]
[(unique, 0x100012d8, 8) MULTIEQUAL (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8)]
[(unique, 0x100012e0, 8) MULTIEQUAL (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8)]
[(unique, 0x100012e8, 8) MULTIEQUAL (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8)]
[(unique, 0x100012f0, 8) MULTIEQUAL (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8)]
[(unique, 0x100012f8, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(unique, 0x10001300, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4)]
[(unique, 0x10001304, 4) MULTIEQUAL (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4)]
[(unique, 0x10001308, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(unique, 0x10001310, 4) MULTIEQUAL (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4)]
[(unique, 0x10001314, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(unique, 0x1000131c, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(unique, 0x10001324, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(unique, 0x1000132c, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(unique, 0x10001334, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(unique, 0x1000133c, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(unique, 0x10001344, 16) MULTIEQUAL (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16)]
[(unique, 0x10001354, 16) MULTIEQUAL (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16)]
[(unique, 0x10001364, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(unique, 0x10001368, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(unique, 0x1000136c, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(unique, 0x10001374, 2) MULTIEQUAL (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2)]
[(unique, 0x10001376, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(unique, 0x1000137a, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4)]
[(unique, 0x1000137e, 4) MULTIEQUAL (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4)]
[(unique, 0x10001382, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(unique, 0x1000138a, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(unique, 0x10001392, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(unique, 0x1000139a, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(unique, 0x100013a2, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(unique, 0x100013aa, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(unique, 0x100013b2, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(unique, 0x100013ba, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(unique, 0x100013c2, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(unique, 0x100013ca, 4) MULTIEQUAL (stack, 0xffffffffffffff0c, 4) , (stack, 0xffffffffffffff0c, 4)]
[ ---  CBRANCH (ram, 0x46c313, 1) , (unique, 0x1000129b, 1), (unique, 0x1000129b, 1) INT_EQUAL (register, 0xb8, 8) , (unique, 0x10002fc9, 8), (unique, 0x10002fc9, 8) CAST (unique, 0x10001578, 8), (unique, 0x10001578, 8) PTRSUB (const, 0x0, 8) , (const, 0x4b17e0, 8)]
[(stack, 0xffffffffffffff60, 4) COPY (unique, 0x100012b2, 4)]
[(unique, 0x10002b2c, 8) COPY (stack, 0xffffffffffffff28, 8), (stack, 0xffffffffffffff28, 8) SUBPIECE (unique, 0x10001354, 16) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x46c390, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (const, 0x0, 8) , (unique, 0x1000129c, 8)]
[(unique, 0x1b380, 8) COPY (const, 0x3f, 8)]
[ ---  CBRANCH (const, 0x7, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) PTRADD (unique, 0x10001392, 8) , (unique, 0x100018b8, 8) , (const, 0x8, 8), (unique, 0x100018b8, 8) INT_ADD (unique, 0x1000129c, 8) , (const, 0xffffffffffffffff, 8)]
[ ---  CBRANCH (const, 0x3, 1) , (unique, 0x1b580, 1), (unique, 0x1b580, 1) INT_EQUAL (unique, 0x1b500, 8) , (const, 0x0, 8), (unique, 0x1b500, 8) INT_RIGHT (unique, 0xbd80, 8) , (unique, 0x1b380, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3a00, 8), (unique, 0x1b380, 8) MULTIEQUAL (unique, 0x1b380, 8) , (unique, 0x1b380, 8)]
[(unique, 0x1b380, 8) INT_ADD (unique, 0x1b380, 8) , (const, 0xffffffffffffffff, 8)]
[ ---  BRANCH (const, 0xfffffffb, 1)]
[(register, 0x30, 4) INT_XOR (unique, 0x10001547, 4) , (const, 0x3f, 4), (unique, 0x10001547, 4) SUBPIECE (unique, 0x1b380, 8) , (const, 0x0, 4), (unique, 0x1b380, 8) MULTIEQUAL (unique, 0x1b380, 8) , (unique, 0x1b380, 8)]
[(unique, 0x10002dc8, 8) COPY (unique, 0x10001392, 8)]
[ ---  CBRANCH (ram, 0x46e495, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10001392, 8)]
[(register, 0xb0, 8) COPY (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x46c374, 1)]
[(register, 0x30, 8) MULTIEQUAL (unique, 0x10002dc8, 8) , (register, 0x30, 8)]
[(unique, 0x10000eb6, 4) SUBPIECE (register, 0x0, 8) , (const, 0x0, 4), (register, 0x0, 8) MULTIEQUAL (unique, 0xbd80, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x46c358, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) CAST (unique, 0x10002fd9, 8), (unique, 0x10002fd9, 8) INT_ADD (unique, 0x10002fd1, 8) , (register, 0xb0, 8), (unique, 0x10002fd1, 8) CAST (unique, 0x10001382, 8), (register, 0xb0, 8) MULTIEQUAL (register, 0xb0, 8) , (register, 0xb0, 8)]
[(register, 0x18, 4) INT_ADD (unique, 0x10000eb6, 4) , (const, 0x1, 4)]
[(register, 0x30, 8) PTRADD (register, 0x30, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[(register, 0x0, 8) INT_ADD (register, 0x0, 8) , (const, 0x1, 8)]
[(register, 0xb0, 8) INT_ADD (register, 0xb0, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x46db44, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x30, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x46e011, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x30, 4) , (const, 0x0, 4)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) CAST (unique, 0x10002fe9, 8), (unique, 0x10002fe9, 8) INT_ADD (unique, 0x10002fe1, 8) , (register, 0xb0, 8), (unique, 0x10002fe1, 8) CAST (unique, 0x10001382, 8)]
[(unique, 0xdcc80, 4) COPY (const, 0x0, 4)]
[(unique, 0xdcc80, 4) MULTIEQUAL (unique, 0xdcc80, 4) , (unique, 0xdcc80, 4)]
[ ---  CBRANCH (const, 0x5, 1) , (unique, 0xdce00, 1), (unique, 0xdce00, 1) INT_EQUAL (unique, 0xdcd80, 8) , (const, 0x0, 8), (unique, 0xdcd80, 8) INT_AND (unique, 0xdcd00, 8) , (const, 0x1, 8), (unique, 0xdcd00, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xdcd00, 8)]
[(unique, 0xdcc80, 4) INT_ADD (unique, 0xdcc80, 4) , (const, 0x1, 4)]
[(unique, 0xdcd00, 8) INT_OR (unique, 0xdcf00, 8) , (const, 0x8000000000000000, 8), (unique, 0xdcf00, 8) INT_RIGHT (unique, 0xdcd00, 8) , (const, 0x1, 4)]
[ ---  BRANCH (const, 0xfffffffa, 1)]
[ ---  CBRANCH (ram, 0x46e2d8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (const, 0x0, 8)]
[(register, 0xb8, 4) INT_SUB (const, 0x40, 4) , (register, 0x30, 4)]
[ ---  BRANCH (ram, 0x46db7b, 1)]
[(unique, 0xdcc80, 4) COPY (const, 0x0, 4)]
[(unique, 0xdcc80, 4) MULTIEQUAL (unique, 0xdcc80, 4) , (unique, 0xdcc80, 4)]
[ ---  CBRANCH (const, 0x5, 1) , (unique, 0xdce00, 1), (unique, 0xdce00, 1) INT_EQUAL (unique, 0xdcd80, 8) , (const, 0x0, 8), (unique, 0xdcd80, 8) INT_AND (unique, 0xdcd00, 8) , (const, 0x1, 8), (unique, 0xdcd00, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xdcd00, 8)]
[(unique, 0xdcc80, 4) INT_ADD (unique, 0xdcc80, 4) , (const, 0x1, 4)]
[(unique, 0xdcd00, 8) INT_OR (unique, 0xdcf00, 8) , (const, 0x8000000000000000, 8), (unique, 0xdcf00, 8) INT_RIGHT (unique, 0xdcd00, 8) , (const, 0x1, 4)]
[ ---  BRANCH (const, 0xfffffffa, 1)]
[(unique, 0x10002c20, 4) COPY (unique, 0xdcc80, 4)]
[ ---  CBRANCH (ram, 0x46db78, 1) , (unique, 0x27780, 1), (unique, 0x27780, 1) INT_SLESSEQUAL (unique, 0xdcc80, 4) , (unique, 0xdcc80, 4)]
[(unique, 0x10002c24, 4) COPY (unique, 0xdcc80, 4)]
[(register, 0xb8, 4) INT_SUB (const, 0x40, 4) , (register, 0x30, 4)]
[(unique, 0x10002cf4, 4) COPY (unique, 0x10000b1e, 4), (unique, 0x10000b1e, 4) MULTIEQUAL (unique, 0x10002c20, 4) , (unique, 0x10002c24, 4)]
[ ---  CBRANCH (ram, 0x46e087, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x30, 4) , (const, 0x0, 4)]
[(unique, 0xdcc80, 4) COPY (const, 0x0, 4)]
[(unique, 0xdcc80, 4) MULTIEQUAL (unique, 0xdcc80, 4) , (unique, 0xdcc80, 4)]
[ ---  CBRANCH (const, 0x5, 1) , (unique, 0xdce00, 1), (unique, 0xdce00, 1) INT_EQUAL (unique, 0xdcd80, 8) , (const, 0x0, 8), (unique, 0xdcd80, 8) INT_AND (unique, 0xdcd00, 8) , (const, 0x1, 8), (unique, 0xdcd00, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xdcd00, 8)]
[(unique, 0xdcc80, 4) INT_ADD (unique, 0xdcc80, 4) , (const, 0x1, 4)]
[(unique, 0xdcd00, 8) INT_OR (unique, 0xdcf00, 8) , (const, 0x8000000000000000, 8), (unique, 0xdcf00, 8) INT_RIGHT (unique, 0xdcd00, 8) , (const, 0x1, 4)]
[ ---  BRANCH (const, 0xfffffffa, 1)]
[(register, 0xb8, 4) INT_SUB (const, 0x40, 4) , (register, 0x30, 4)]
[(unique, 0x10002a3c, 8) COPY (register, 0x30, 8)]
[(unique, 0x10002cf0, 4) COPY (unique, 0xdcc80, 4)]
[(unique, 0x10002cf8, 4) COPY (unique, 0xdcc80, 4)]
[ ---  CBRANCH (ram, 0x46db7b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x10000eb6, 4) , (const, 0x0, 4)]
[(register, 0xb0, 8) MULTIEQUAL (register, 0xb0, 8) , (register, 0xb0, 8) , (register, 0xb0, 8)]
[(register, 0x30, 8) MULTIEQUAL (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x30, 8)]
[(register, 0xa8, 8) INT_SEXT (register, 0x18, 4), (register, 0x18, 4) MULTIEQUAL (unique, 0x10000eb6, 4) , (register, 0x18, 4) , (register, 0x18, 4)]
[ ---  CBRANCH (ram, 0x46e0ab, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (register, 0x80, 4) , (register, 0xb8, 4), (register, 0x80, 4) MULTIEQUAL (unique, 0x10002cf0, 4) , (unique, 0x10002cf4, 4) , (unique, 0xdcc80, 4), (register, 0xb8, 4) MULTIEQUAL (register, 0xb8, 4) , (register, 0xb8, 4) , (register, 0xb8, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10002ff9, 8) , (const, 0x46dba0, 8), (unique, 0x10002ff9, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x10001293, 8) , (unique, 0x100017e0, 8) , (const, 0x1, 8), (unique, 0x100017e0, 8) INT_ADD (unique, 0x1000047d, 8) , (const, 0xfffffffffffffff8, 8)]
[ ---  CALL (ram, 0x489e50, 8) , (unique, 0x10001392, 8) , (unique, 0x3400, 8) , (register, 0x10, 8) , (register, 0xb8, 4), (register, 0x10, 8) INT_SUB (unique, 0x1000129c, 8) , (register, 0x18, 8), (unique, 0x3400, 8) INT_ADD (unique, 0x10002ff1, 8) , (register, 0xb0, 8), (unique, 0x10002ff1, 8) CAST (unique, 0x10001392, 8), (register, 0x18, 8) INT_SEXT (register, 0x18, 4), (register, 0xb0, 8) INT_SUB (register, 0xb0, 8) , (const, 0x8, 8), (register, 0x18, 4) INT_ADD (register, 0x18, 4) , (const, 0xffffffff, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10003009, 8) , (const, 0x46dbc1, 8), (unique, 0x10003009, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x10001293, 8) , (unique, 0x100017f8, 8) , (const, 0x1, 8), (unique, 0x100017f8, 8) INT_ADD (unique, 0x1000047d, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x22a6, 4), (register, 0x110, 8) INDIRECT (unique, 0x100012a4, 8) , (const, 0x227e, 4)]
[(register, 0x1090, 2) INDIRECT (register, 0x1090, 2) , (const, 0x22a6, 4), (register, 0x1090, 2) INDIRECT (unique, 0x100012ac, 2) , (const, 0x227e, 4)]
[(ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x22a6, 4), (ram, 0x4ae380, 16) INDIRECT (unique, 0x100012b6, 16) , (const, 0x227e, 4)]
[(ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x22a6, 4), (ram, 0x4ae390, 8) INDIRECT (unique, 0x100012c6, 8) , (const, 0x227e, 4)]
[(ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x22a6, 4), (ram, 0x4ae3a0, 10) INDIRECT (unique, 0x100012ce, 10) , (const, 0x227e, 4)]
[(ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x22a6, 4), (ram, 0x4ae3b0, 8) INDIRECT (unique, 0x100012d8, 8) , (const, 0x227e, 4)]
[(ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x22a6, 4), (ram, 0x4ae3c0, 8) INDIRECT (unique, 0x100012e0, 8) , (const, 0x227e, 4)]
[(ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x22a6, 4), (ram, 0x4ae3c8, 8) INDIRECT (unique, 0x100012e8, 8) , (const, 0x227e, 4)]
[(ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x22a6, 4), (ram, 0x4ae3d0, 8) INDIRECT (unique, 0x100012f0, 8) , (const, 0x227e, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x22a6, 4), (stack, 0xfffffffffffffeb0, 8) INDIRECT (unique, 0x100012f8, 8) , (const, 0x227e, 4)]
[(stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x22a6, 4), (stack, 0xfffffffffffffeb8, 4) INDIRECT (unique, 0x10001300, 4) , (const, 0x227e, 4)]
[(stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x22a6, 4), (stack, 0xfffffffffffffec4, 4) INDIRECT (unique, 0x10001304, 4) , (const, 0x227e, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x22a6, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (unique, 0x10001308, 8) , (const, 0x227e, 4)]
[(stack, 0xfffffffffffffee4, 4) INDIRECT (stack, 0xfffffffffffffee4, 4) , (const, 0x22a6, 4), (stack, 0xfffffffffffffee4, 4) INDIRECT (unique, 0x10001310, 4) , (const, 0x227e, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x22a6, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (unique, 0x10001314, 8) , (const, 0x227e, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x22a6, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (unique, 0x1000131c, 8) , (const, 0x227e, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x22a6, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (unique, 0x10001324, 8) , (const, 0x227e, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x22a6, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (unique, 0x1000132c, 8) , (const, 0x227e, 4)]
[(stack, 0xffffffffffffff0c, 4) INDIRECT (stack, 0xffffffffffffff0c, 4) , (const, 0x22a6, 4), (stack, 0xffffffffffffff0c, 4) INDIRECT (unique, 0x100013ca, 4) , (const, 0x227e, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x22a6, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (unique, 0x1000133c, 8) , (const, 0x227e, 4)]
[(stack, 0xffffffffffffff18, 16) INDIRECT (stack, 0xffffffffffffff18, 16) , (const, 0x22a6, 4), (stack, 0xffffffffffffff18, 16) INDIRECT (unique, 0x10001344, 16) , (const, 0x227e, 4)]
[(stack, 0xffffffffffffff28, 16) INDIRECT (stack, 0xffffffffffffff28, 16) , (const, 0x22a6, 4), (stack, 0xffffffffffffff28, 16) INDIRECT (unique, 0x10001354, 16) , (const, 0x227e, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x22a6, 4), (stack, 0xffffffffffffff38, 4) INDIRECT (unique, 0x10001364, 4) , (const, 0x227e, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x22a6, 4), (stack, 0xffffffffffffff3c, 4) INDIRECT (unique, 0x10001368, 4) , (const, 0x227e, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x22a6, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (unique, 0x1000136c, 8) , (const, 0x227e, 4)]
[(stack, 0xffffffffffffff52, 2) INDIRECT (stack, 0xffffffffffffff52, 2) , (const, 0x22a6, 4), (stack, 0xffffffffffffff52, 2) INDIRECT (unique, 0x10001374, 2) , (const, 0x227e, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x22a6, 4), (stack, 0xffffffffffffff54, 4) INDIRECT (unique, 0x10001376, 4) , (const, 0x227e, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x22a6, 4), (stack, 0xffffffffffffff58, 4) INDIRECT (unique, 0x1000137a, 4) , (const, 0x227e, 4)]
[(stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0x22a6, 4), (stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0x227e, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x22a6, 4), (stack, 0xffffffffffffff78, 8) INDIRECT (unique, 0x10001392, 8) , (const, 0x227e, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x22a6, 4), (stack, 0xffffffffffffff80, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) INT_SUB (stack, 0xffffffffffffff80, 8) , (register, 0xa8, 8), (stack, 0xffffffffffffff80, 8) INDIRECT (unique, 0x1000139a, 8) , (const, 0x227e, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x22a6, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (unique, 0x100013a2, 8) , (const, 0x227e, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x22a6, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (unique, 0x100013aa, 8) , (const, 0x227e, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x22a6, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (unique, 0x100013b2, 8) , (const, 0x227e, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x22a6, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (unique, 0x100013ba, 8) , (const, 0x227e, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x22a6, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (unique, 0x100013c2, 8) , (const, 0x227e, 4)]
[ ---  CALL (ram, 0x489e50, 8) , (stack, 0xffffffffffffff68, 8) , (unique, 0x3400, 8) , (register, 0x10, 8) , (register, 0xb8, 4), (register, 0x10, 8) INT_SUB (stack, 0xffffffffffffff70, 8) , (register, 0x18, 8), (unique, 0x3400, 8) INT_ADD (unique, 0x10003001, 8) , (register, 0xb0, 8), (unique, 0x10003001, 8) CAST (stack, 0xffffffffffffff68, 8), (stack, 0xffffffffffffff70, 8) INDIRECT (unique, 0x1000138a, 8) , (const, 0x227e, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (unique, 0x10001382, 8) , (const, 0x227e, 4), (register, 0x18, 8) INT_SEXT (register, 0x18, 4), (register, 0xb0, 8) INT_SUB (register, 0xb0, 8) , (const, 0x8, 8), (register, 0x18, 4) INT_ADD (register, 0x18, 4) , (const, 0xffffffff, 4)]
[ ---  CBRANCH (ram, 0x46dbe3, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbe00, 8) , (const, 0x0, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) PTRADD (stack, 0xffffffffffffff68, 8) , (unique, 0x10001d08, 8) , (const, 0x8, 8), (unique, 0x10001d08, 8) INT_ADD (register, 0x0, 8) , (const, 0xffffffffffffffff, 8), (register, 0x0, 8) INT_SUB (stack, 0xffffffffffffff70, 8) , (register, 0x18, 8), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x22a6, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x22a6, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (unique, 0x1000138a, 8) , (const, 0x227e, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (unique, 0x10001382, 8) , (const, 0x227e, 4), (register, 0x18, 8) INT_SEXT (register, 0x18, 4), (register, 0x18, 4) INT_ADD (register, 0x18, 4) , (const, 0xffffffff, 4)]
[(register, 0x0, 8) INT_SUB (stack, 0xffffffffffffff70, 8) , (register, 0xa8, 8)]
[ ---  CBRANCH (ram, 0x46e011, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x10000eb6, 4) , (const, 0x0, 4)]
[(register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x46e040, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (const, 0x0, 8) , (register, 0x10, 8), (register, 0x10, 8) INT_SUB (unique, 0x1000129c, 8) , (register, 0x18, 8), (register, 0x18, 8) INT_SEXT (register, 0x18, 4), (register, 0x18, 4) MULTIEQUAL (unique, 0x10000eb6, 4) , (register, 0x18, 4)]
[(register, 0x8, 8) COPY (const, 0x0, 8)]
[(ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x20f1, 4), (ram, 0x4ae380, 16) MULTIEQUAL (unique, 0x100012b6, 16) , (ram, 0x4ae380, 16)]
[(ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x20f1, 4), (ram, 0x4ae390, 8) MULTIEQUAL (unique, 0x100012c6, 8) , (ram, 0x4ae390, 8)]
[(ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x20f1, 4), (ram, 0x4ae3a0, 10) MULTIEQUAL (unique, 0x100012ce, 10) , (ram, 0x4ae3a0, 10)]
[(ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x20f1, 4), (ram, 0x4ae3b0, 8) MULTIEQUAL (unique, 0x100012d8, 8) , (ram, 0x4ae3b0, 8)]
[(ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x20f1, 4), (ram, 0x4ae3c0, 8) MULTIEQUAL (unique, 0x100012e0, 8) , (ram, 0x4ae3c0, 8)]
[(ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x20f1, 4), (ram, 0x4ae3c8, 8) MULTIEQUAL (unique, 0x100012e8, 8) , (ram, 0x4ae3c8, 8)]
[(ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x20f1, 4), (ram, 0x4ae3d0, 8) MULTIEQUAL (unique, 0x100012f0, 8) , (ram, 0x4ae3d0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3400, 8) , (unique, 0xbd80, 8), (unique, 0x3400, 8) PTRADD (unique, 0x10001392, 8) , (register, 0x8, 8) , (const, 0x8, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (unique, 0x10001392, 8) , (unique, 0x10001d90, 8) , (const, 0x8, 8), (unique, 0x10001d90, 8) INT_ADD (register, 0x0, 8) , (register, 0x8, 8), (register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8)]
[ ---  CBRANCH (ram, 0x46e028, 1) , (unique, 0xd080, 1), (unique, 0xd080, 1) INT_SLESS (register, 0x8, 8) , (register, 0x10, 8), (register, 0x10, 8) INT_SUB (unique, 0x1000139a, 8) , (register, 0x18, 8), (register, 0x8, 8) INT_ADD (register, 0x8, 8) , (const, 0x1, 8), (register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8)]
[(ram, 0x4ae3d0, 8) MULTIEQUAL (unique, 0x100012f0, 8) , (ram, 0x4ae3d0, 8)]
[(ram, 0x4ae3c8, 8) MULTIEQUAL (unique, 0x100012e8, 8) , (ram, 0x4ae3c8, 8)]
[(ram, 0x4ae3c0, 8) MULTIEQUAL (unique, 0x100012e0, 8) , (ram, 0x4ae3c0, 8)]
[(ram, 0x4ae3b0, 8) MULTIEQUAL (unique, 0x100012d8, 8) , (ram, 0x4ae3b0, 8)]
[(ram, 0x4ae3a0, 10) MULTIEQUAL (unique, 0x100012ce, 10) , (ram, 0x4ae3a0, 10)]
[(ram, 0x4ae390, 8) MULTIEQUAL (unique, 0x100012c6, 8) , (ram, 0x4ae390, 8)]
[(ram, 0x4ae380, 16) MULTIEQUAL (unique, 0x100012b6, 16) , (ram, 0x4ae380, 16)]
[(stack, 0xffffffffffffff80, 8) COPY (register, 0x10, 8), (register, 0x10, 8) MULTIEQUAL (register, 0x10, 8) , (register, 0x10, 8)]
[ ---  CBRANCH (ram, 0x46e07b, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (const, 0x0, 8) , (register, 0x10, 8), (register, 0x10, 8) INT_SUB (unique, 0x1000138a, 8) , (register, 0x18, 8)]
[(register, 0x0, 8) COPY (const, 0x0, 8)]
[(ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x2143, 4), (ram, 0x4ae380, 16) MULTIEQUAL (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16)]
[(ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x2143, 4), (ram, 0x4ae390, 8) MULTIEQUAL (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8)]
[(ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x2143, 4), (ram, 0x4ae3a0, 10) MULTIEQUAL (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10)]
[(ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x2143, 4), (ram, 0x4ae3b0, 8) MULTIEQUAL (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8)]
[(ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x2143, 4), (ram, 0x4ae3c0, 8) MULTIEQUAL (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8)]
[(ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x2143, 4), (ram, 0x4ae3c8, 8) MULTIEQUAL (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8)]
[(ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x2143, 4), (ram, 0x4ae3d0, 8) MULTIEQUAL (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3400, 8) , (unique, 0xbd80, 8), (unique, 0x3400, 8) PTRADD (unique, 0x10001382, 8) , (register, 0x0, 8) , (const, 0x8, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (unique, 0x10001382, 8) , (unique, 0x10001db0, 8) , (const, 0x8, 8), (unique, 0x10001db0, 8) INT_ADD (register, 0x0, 8) , (register, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x46e060, 1) , (unique, 0xd080, 1), (unique, 0xd080, 1) INT_SLESS (register, 0x0, 8) , (register, 0x10, 8), (register, 0x10, 8) INT_SUB (unique, 0x1000138a, 8) , (register, 0x18, 8), (register, 0x0, 8) INT_ADD (register, 0x0, 8) , (const, 0x1, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[(ram, 0x4ae3d0, 8) MULTIEQUAL (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8)]
[(ram, 0x4ae3c8, 8) MULTIEQUAL (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8)]
[(ram, 0x4ae3c0, 8) MULTIEQUAL (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8)]
[(ram, 0x4ae3b0, 8) MULTIEQUAL (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8)]
[(ram, 0x4ae3a0, 10) MULTIEQUAL (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10)]
[(ram, 0x4ae390, 8) MULTIEQUAL (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8)]
[(ram, 0x4ae380, 16) MULTIEQUAL (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16)]
[(stack, 0xffffffffffffff70, 8) COPY (register, 0x10, 8), (register, 0x10, 8) MULTIEQUAL (register, 0x10, 8) , (register, 0x10, 8)]
[ ---  BRANCH (ram, 0x46c390, 1)]
[ ---  CBRANCH (ram, 0x46c390, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x30, 4) , (const, 0x0, 4)]
[(unique, 0xdcc80, 4) COPY (const, 0x0, 4)]
[(unique, 0xdcc80, 4) MULTIEQUAL (unique, 0xdcc80, 4) , (unique, 0xdcc80, 4)]
[ ---  CBRANCH (const, 0x5, 1) , (unique, 0xdce00, 1), (unique, 0xdce00, 1) INT_EQUAL (unique, 0xdcd80, 8) , (const, 0x0, 8), (unique, 0xdcd80, 8) INT_AND (unique, 0xdcd00, 8) , (const, 0x1, 8), (unique, 0xdcd00, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xdcd00, 8)]
[(unique, 0xdcc80, 4) INT_ADD (unique, 0xdcc80, 4) , (const, 0x1, 4)]
[(unique, 0xdcd00, 8) INT_OR (unique, 0xdcf00, 8) , (const, 0x8000000000000000, 8), (unique, 0xdcf00, 8) INT_RIGHT (unique, 0xdcd00, 8) , (const, 0x1, 4)]
[ ---  BRANCH (const, 0xfffffffa, 1)]
[ ---  CBRANCH (ram, 0x46e5d1, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10001382, 8)]
[(register, 0xb8, 4) INT_SUB (const, 0x40, 4) , (register, 0x30, 4)]
[ ---  BRANCH (ram, 0x46e09d, 1)]
[(unique, 0xdcc80, 4) COPY (const, 0x0, 4)]
[(unique, 0xdcc80, 4) MULTIEQUAL (unique, 0xdcc80, 4) , (unique, 0xdcc80, 4)]
[ ---  CBRANCH (const, 0x5, 1) , (unique, 0xdce00, 1), (unique, 0xdce00, 1) INT_EQUAL (unique, 0xdcd80, 8) , (const, 0x0, 8), (unique, 0xdcd80, 8) INT_AND (unique, 0xdcd00, 8) , (const, 0x1, 8), (unique, 0xdcd00, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xdcd00, 8)]
[(unique, 0xdcc80, 4) INT_ADD (unique, 0xdcc80, 4) , (const, 0x1, 4)]
[(unique, 0xdcd00, 8) INT_OR (unique, 0xdcf00, 8) , (const, 0x8000000000000000, 8), (unique, 0xdcf00, 8) INT_RIGHT (unique, 0xdcd00, 8) , (const, 0x1, 4)]
[ ---  BRANCH (const, 0xfffffffa, 1)]
[(unique, 0x10002c30, 4) COPY (unique, 0xdcc80, 4)]
[ ---  CBRANCH (ram, 0x46e4d0, 1) , (unique, 0x27780, 1), (unique, 0x27780, 1) INT_SLESSEQUAL (unique, 0xdcc80, 4) , (unique, 0xdcc80, 4)]
[(unique, 0x10002c34, 4) COPY (unique, 0xdcc80, 4)]
[(register, 0xb8, 4) INT_SUB (const, 0x40, 4) , (register, 0x30, 4)]
[(register, 0xb0, 8) COPY (const, 0x0, 8)]
[(unique, 0x10002cfc, 4) COPY (unique, 0x10000dcc, 4), (unique, 0x10000dcc, 4) MULTIEQUAL (unique, 0x10002c30, 4) , (unique, 0x10002c34, 4)]
[ ---  BRANCH (ram, 0x46e09d, 1)]
[(register, 0xb0, 8) MULTIEQUAL (register, 0xb0, 8) , (register, 0xb0, 8) , (unique, 0xbd80, 8)]
[(register, 0x30, 8) MULTIEQUAL (unique, 0x10002a3c, 8) , (unique, 0x10002dc8, 8) , (unique, 0x10002dc8, 8)]
[(register, 0x18, 4) COPY (const, 0x0, 4)]
[(register, 0xa8, 8) COPY (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x46e39c, 1) , (unique, 0xd080, 1), (unique, 0xd080, 1) INT_SLESSEQUAL (register, 0xb8, 4) , (register, 0x80, 4), (register, 0x80, 4) MULTIEQUAL (unique, 0x10002cf8, 4) , (unique, 0x10002cfc, 4) , (unique, 0xdcc80, 4), (register, 0xb8, 4) MULTIEQUAL (register, 0xb8, 4) , (register, 0xb8, 4) , (register, 0xb8, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10003011, 8) , (const, 0x46e0b9, 8), (unique, 0x10003011, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x10001293, 8) , (unique, 0x100017f0, 8) , (const, 0x1, 8), (unique, 0x100017f0, 8) INT_ADD (unique, 0x1000047d, 8) , (const, 0xfffffffffffffff8, 8)]
[ ---  CALL (ram, 0x489e50, 8) , (unique, 0x10001392, 8) , (register, 0x30, 8) , (register, 0x10, 8) , (register, 0xb8, 4), (register, 0x10, 8) INT_SUB (unique, 0x1000129c, 8) , (register, 0xa8, 8), (register, 0x30, 8) MULTIEQUAL (register, 0x30, 8) , (register, 0x30, 8), (register, 0xa8, 8) MULTIEQUAL (register, 0xa8, 8) , (register, 0xa8, 8), (register, 0xb8, 4) MULTIEQUAL (register, 0xb8, 4) , (register, 0xb8, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10003021, 8) , (const, 0x46e0dd, 8), (unique, 0x10003021, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x10001293, 8) , (unique, 0x10001800, 8) , (const, 0x1, 8), (unique, 0x10001800, 8) INT_ADD (unique, 0x1000047d, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x21ed, 4), (register, 0x110, 8) INDIRECT (unique, 0x100012a4, 8) , (const, 0x21c4, 4)]
[(register, 0x1090, 2) INDIRECT (register, 0x1090, 2) , (const, 0x21ed, 4), (register, 0x1090, 2) INDIRECT (unique, 0x100012ac, 2) , (const, 0x21c4, 4)]
[(ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x21ed, 4), (ram, 0x4ae380, 16) INDIRECT (unique, 0x100012b6, 16) , (const, 0x21c4, 4)]
[(ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x21ed, 4), (ram, 0x4ae390, 8) INDIRECT (unique, 0x100012c6, 8) , (const, 0x21c4, 4)]
[(ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x21ed, 4), (ram, 0x4ae3a0, 10) INDIRECT (unique, 0x100012ce, 10) , (const, 0x21c4, 4)]
[(ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x21ed, 4), (ram, 0x4ae3b0, 8) INDIRECT (unique, 0x100012d8, 8) , (const, 0x21c4, 4)]
[(ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x21ed, 4), (ram, 0x4ae3c0, 8) INDIRECT (unique, 0x100012e0, 8) , (const, 0x21c4, 4)]
[(ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x21ed, 4), (ram, 0x4ae3c8, 8) INDIRECT (unique, 0x100012e8, 8) , (const, 0x21c4, 4)]
[(ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x21ed, 4), (ram, 0x4ae3d0, 8) INDIRECT (unique, 0x100012f0, 8) , (const, 0x21c4, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x21ed, 4), (stack, 0xfffffffffffffeb0, 8) INDIRECT (unique, 0x100012f8, 8) , (const, 0x21c4, 4)]
[(stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x21ed, 4), (stack, 0xfffffffffffffeb8, 4) INDIRECT (unique, 0x10001300, 4) , (const, 0x21c4, 4)]
[(stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x21ed, 4), (stack, 0xfffffffffffffec4, 4) INDIRECT (unique, 0x10001304, 4) , (const, 0x21c4, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x21ed, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (unique, 0x10001308, 8) , (const, 0x21c4, 4)]
[(stack, 0xfffffffffffffee4, 4) INDIRECT (stack, 0xfffffffffffffee4, 4) , (const, 0x21ed, 4), (stack, 0xfffffffffffffee4, 4) INDIRECT (unique, 0x10001310, 4) , (const, 0x21c4, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x21ed, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (unique, 0x10001314, 8) , (const, 0x21c4, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x21ed, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (unique, 0x1000131c, 8) , (const, 0x21c4, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x21ed, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (unique, 0x10001324, 8) , (const, 0x21c4, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x21ed, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (unique, 0x1000132c, 8) , (const, 0x21c4, 4)]
[(stack, 0xffffffffffffff0c, 4) INDIRECT (stack, 0xffffffffffffff0c, 4) , (const, 0x21ed, 4), (stack, 0xffffffffffffff0c, 4) INDIRECT (unique, 0x100013ca, 4) , (const, 0x21c4, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x21ed, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (unique, 0x1000133c, 8) , (const, 0x21c4, 4)]
[(stack, 0xffffffffffffff18, 16) INDIRECT (stack, 0xffffffffffffff18, 16) , (const, 0x21ed, 4), (stack, 0xffffffffffffff18, 16) INDIRECT (unique, 0x10001344, 16) , (const, 0x21c4, 4)]
[(stack, 0xffffffffffffff28, 16) INDIRECT (stack, 0xffffffffffffff28, 16) , (const, 0x21ed, 4), (stack, 0xffffffffffffff28, 16) INDIRECT (unique, 0x10001354, 16) , (const, 0x21c4, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x21ed, 4), (stack, 0xffffffffffffff38, 4) INDIRECT (unique, 0x10001364, 4) , (const, 0x21c4, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x21ed, 4), (stack, 0xffffffffffffff3c, 4) INDIRECT (unique, 0x10001368, 4) , (const, 0x21c4, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x21ed, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (unique, 0x1000136c, 8) , (const, 0x21c4, 4)]
[(stack, 0xffffffffffffff52, 2) INDIRECT (stack, 0xffffffffffffff52, 2) , (const, 0x21ed, 4), (stack, 0xffffffffffffff52, 2) INDIRECT (unique, 0x10001374, 2) , (const, 0x21c4, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x21ed, 4), (stack, 0xffffffffffffff54, 4) INDIRECT (unique, 0x10001376, 4) , (const, 0x21c4, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x21ed, 4), (stack, 0xffffffffffffff58, 4) INDIRECT (unique, 0x1000137a, 4) , (const, 0x21c4, 4)]
[(stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0x21ed, 4), (stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0x21c4, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x21ed, 4), (stack, 0xffffffffffffff78, 8) INDIRECT (unique, 0x10001392, 8) , (const, 0x21c4, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x21ed, 4), (stack, 0xffffffffffffff80, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) INT_SUB (stack, 0xffffffffffffff80, 8) , (register, 0x18, 8), (register, 0x18, 8) INT_SEXT (register, 0x18, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (unique, 0x1000139a, 8) , (const, 0x21c4, 4), (register, 0x18, 4) INT_ADD (register, 0x18, 4) , (const, 0x1, 4), (register, 0x18, 4) MULTIEQUAL (register, 0x18, 4) , (register, 0x18, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x21ed, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (unique, 0x100013a2, 8) , (const, 0x21c4, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x21ed, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (unique, 0x100013aa, 8) , (const, 0x21c4, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x21ed, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (unique, 0x100013b2, 8) , (const, 0x21c4, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x21ed, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (unique, 0x100013ba, 8) , (const, 0x21c4, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x21ed, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (unique, 0x100013c2, 8) , (const, 0x21c4, 4)]
[ ---  CALL (ram, 0x489e50, 8) , (stack, 0xffffffffffffff68, 8) , (unique, 0x3400, 8) , (register, 0x10, 8) , (register, 0xb8, 4), (register, 0x10, 8) INT_SUB (stack, 0xffffffffffffff70, 8) , (register, 0xa8, 8), (unique, 0x3400, 8) INT_ADD (unique, 0x10003019, 8) , (register, 0xb0, 8), (unique, 0x10003019, 8) CAST (stack, 0xffffffffffffff68, 8), (stack, 0xffffffffffffff70, 8) INDIRECT (unique, 0x1000138a, 8) , (const, 0x21c4, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (unique, 0x10001382, 8) , (const, 0x21c4, 4), (register, 0xa8, 8) MULTIEQUAL (register, 0xa8, 8) , (register, 0xa8, 8), (register, 0xb0, 8) MULTIEQUAL (register, 0xb0, 8) , (register, 0xb0, 8), (register, 0xb8, 4) MULTIEQUAL (register, 0xb8, 4) , (register, 0xb8, 4)]
[ ---  CBRANCH (ram, 0x46dbe3, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbe00, 8) , (const, 0x0, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) PTRADD (stack, 0xffffffffffffff68, 8) , (unique, 0x10001dd0, 8) , (const, 0x8, 8), (unique, 0x10001dd0, 8) INT_ADD (register, 0x0, 8) , (const, 0xffffffffffffffff, 8), (register, 0x0, 8) INT_SUB (stack, 0xffffffffffffff70, 8) , (register, 0xa8, 8), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x21ed, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x21ed, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (unique, 0x1000138a, 8) , (const, 0x21c4, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (unique, 0x10001382, 8) , (const, 0x21c4, 4), (register, 0xa8, 8) MULTIEQUAL (register, 0xa8, 8) , (register, 0xa8, 8)]
[(register, 0x0, 8) INT_SUB (stack, 0xffffffffffffff70, 8) , (register, 0x18, 8)]
[ ---  BRANCH (ram, 0x46dbe3, 1)]
[(stack, 0xffffffffffffff0c, 4) MULTIEQUAL (stack, 0xffffffffffffff0c, 4) , (stack, 0xffffffffffffff0c, 4) , (stack, 0xffffffffffffff0c, 4) , (stack, 0xffffffffffffff0c, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 4) MULTIEQUAL (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4)]
[(stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff52, 2) MULTIEQUAL (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff28, 16) MULTIEQUAL (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16)]
[(stack, 0xffffffffffffff18, 16) MULTIEQUAL (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee4, 4) MULTIEQUAL (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffec4, 4) MULTIEQUAL (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4)]
[(stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(ram, 0x4ae3d0, 8) MULTIEQUAL (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8)]
[(ram, 0x4ae3c8, 8) MULTIEQUAL (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8)]
[(ram, 0x4ae3c0, 8) MULTIEQUAL (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8)]
[(ram, 0x4ae3b0, 8) MULTIEQUAL (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8)]
[(ram, 0x4ae3a0, 10) MULTIEQUAL (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10)]
[(ram, 0x4ae390, 8) MULTIEQUAL (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8)]
[(ram, 0x4ae380, 16) MULTIEQUAL (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16)]
[(register, 0x1090, 2) MULTIEQUAL (register, 0x1090, 2) , (register, 0x1090, 2) , (register, 0x1090, 2) , (register, 0x1090, 2)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(stack, 0xffffffffffffff70, 8) COPY (register, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8) , (register, 0x0, 8) , (register, 0x0, 8)]
[ ---  BRANCH (ram, 0x46c390, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10003029, 8) , (const, 0x46e3aa, 8), (unique, 0x10003029, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x10001293, 8) , (unique, 0x100017e8, 8) , (const, 0x1, 8), (unique, 0x100017e8, 8) INT_ADD (unique, 0x1000047d, 8) , (const, 0xfffffffffffffff8, 8)]
[ ---  CALL (ram, 0x489d30, 8) , (unique, 0x10001392, 8) , (unique, 0x10001392, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10003031, 8) , (const, 0x46e3c6, 8), (unique, 0x10003031, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x10001293, 8) , (unique, 0x10001808, 8) , (const, 0x1, 8), (unique, 0x10001808, 8) INT_ADD (unique, 0x1000047d, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x2232, 4), (register, 0x110, 8) INDIRECT (unique, 0x100012a4, 8) , (const, 0x2224, 4)]
[(register, 0x1090, 2) INDIRECT (register, 0x1090, 2) , (const, 0x2232, 4), (register, 0x1090, 2) INDIRECT (unique, 0x100012ac, 2) , (const, 0x2224, 4)]
[(ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x2232, 4), (ram, 0x4ae380, 16) INDIRECT (unique, 0x100012b6, 16) , (const, 0x2224, 4)]
[(ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x2232, 4), (ram, 0x4ae390, 8) INDIRECT (unique, 0x100012c6, 8) , (const, 0x2224, 4)]
[(ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x2232, 4), (ram, 0x4ae3a0, 10) INDIRECT (unique, 0x100012ce, 10) , (const, 0x2224, 4)]
[(ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x2232, 4), (ram, 0x4ae3b0, 8) INDIRECT (unique, 0x100012d8, 8) , (const, 0x2224, 4)]
[(ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x2232, 4), (ram, 0x4ae3c0, 8) INDIRECT (unique, 0x100012e0, 8) , (const, 0x2224, 4)]
[(ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x2232, 4), (ram, 0x4ae3c8, 8) INDIRECT (unique, 0x100012e8, 8) , (const, 0x2224, 4)]
[(ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x2232, 4), (ram, 0x4ae3d0, 8) INDIRECT (unique, 0x100012f0, 8) , (const, 0x2224, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x2232, 4), (stack, 0xfffffffffffffeb0, 8) INDIRECT (unique, 0x100012f8, 8) , (const, 0x2224, 4)]
[(stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x2232, 4), (stack, 0xfffffffffffffeb8, 4) INDIRECT (unique, 0x10001300, 4) , (const, 0x2224, 4)]
[(stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x2232, 4), (stack, 0xfffffffffffffec4, 4) INDIRECT (unique, 0x10001304, 4) , (const, 0x2224, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x2232, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (unique, 0x10001308, 8) , (const, 0x2224, 4)]
[(stack, 0xfffffffffffffee4, 4) INDIRECT (stack, 0xfffffffffffffee4, 4) , (const, 0x2232, 4), (stack, 0xfffffffffffffee4, 4) INDIRECT (unique, 0x10001310, 4) , (const, 0x2224, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x2232, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (unique, 0x10001314, 8) , (const, 0x2224, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x2232, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (unique, 0x1000131c, 8) , (const, 0x2224, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x2232, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (unique, 0x10001324, 8) , (const, 0x2224, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x2232, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (unique, 0x1000132c, 8) , (const, 0x2224, 4)]
[(stack, 0xffffffffffffff0c, 4) INDIRECT (stack, 0xffffffffffffff0c, 4) , (const, 0x2232, 4), (stack, 0xffffffffffffff0c, 4) INDIRECT (unique, 0x100013ca, 4) , (const, 0x2224, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x2232, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (unique, 0x1000133c, 8) , (const, 0x2224, 4)]
[(stack, 0xffffffffffffff18, 16) INDIRECT (stack, 0xffffffffffffff18, 16) , (const, 0x2232, 4), (stack, 0xffffffffffffff18, 16) INDIRECT (unique, 0x10001344, 16) , (const, 0x2224, 4)]
[(stack, 0xffffffffffffff28, 16) INDIRECT (stack, 0xffffffffffffff28, 16) , (const, 0x2232, 4), (stack, 0xffffffffffffff28, 16) INDIRECT (stack, 0xffffffffffffff28, 16) , (const, 0x2224, 4), (stack, 0xffffffffffffff28, 16) INT_AND (unique, 0x10001247, 16) , (const, 0xffffffffffffffff, 16), (unique, 0x10001247, 16) INT_XOR (unique, 0x10001558, 16) , (const, 0x3f, 16), (unique, 0x10001558, 16) INT_ADD (unique, 0x100027ac, 16) , (unique, 0x10001547, 4), (unique, 0x100027ac, 16) INT_LEFT (unique, 0x1000279c, 16) , (const, 0x20, 16), (unique, 0x1000279c, 16) INT_SEXT (stack, 0xffffffffffffff2c, 12), (stack, 0xffffffffffffff2c, 12) SUBPIECE (unique, 0x1000278c, 16) , (const, 0x0, 4), (unique, 0x1000278c, 16) INT_RIGHT (unique, 0x10001354, 16) , (const, 0x20, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x2232, 4), (stack, 0xffffffffffffff38, 4) INDIRECT (unique, 0x10001364, 4) , (const, 0x2224, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x2232, 4), (stack, 0xffffffffffffff3c, 4) INDIRECT (unique, 0x10001368, 4) , (const, 0x2224, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x2232, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (unique, 0x1000136c, 8) , (const, 0x2224, 4)]
[(stack, 0xffffffffffffff52, 2) INDIRECT (stack, 0xffffffffffffff52, 2) , (const, 0x2232, 4), (stack, 0xffffffffffffff52, 2) INDIRECT (unique, 0x10001374, 2) , (const, 0x2224, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x2232, 4), (stack, 0xffffffffffffff54, 4) INDIRECT (unique, 0x10001376, 4) , (const, 0x2224, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x2232, 4), (stack, 0xffffffffffffff58, 4) INDIRECT (unique, 0x1000137a, 4) , (const, 0x2224, 4)]
[(stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0x2232, 4), (stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0x2224, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x2232, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (unique, 0x10001382, 8) , (const, 0x2224, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x2232, 4), (stack, 0xffffffffffffff78, 8) INDIRECT (unique, 0x10001392, 8) , (const, 0x2224, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x2232, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (unique, 0x1000139a, 8) , (const, 0x2224, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x2232, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (unique, 0x100013a2, 8) , (const, 0x2224, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x2232, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (unique, 0x100013aa, 8) , (const, 0x2224, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x2232, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (unique, 0x100013b2, 8) , (const, 0x2224, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x2232, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (unique, 0x100013ba, 8) , (const, 0x2224, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2232, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (unique, 0x100013c2, 8) , (const, 0x2224, 4)]
[(unique, 0x100028c4, 8) COPY (stack, 0xffffffffffffff70, 8), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x2232, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (unique, 0x1000138a, 8) , (const, 0x2224, 4)]
[ ---  CBRANCH (ram, 0x46c390, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x489d30, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff28, 4), (stack, 0xffffffffffffff28, 4) SUBPIECE (stack, 0xffffffffffffff28, 16) , (const, 0x0, 8), (stack, 0xffffffffffffff70, 8) INDIRECT (unique, 0x1000138a, 8) , (const, 0x2224, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (unique, 0x10001382, 8) , (const, 0x2224, 4), (stack, 0xffffffffffffff28, 16) INDIRECT (stack, 0xffffffffffffff28, 16) , (const, 0x2224, 4), (stack, 0xffffffffffffff28, 16) INT_AND (unique, 0x10001247, 16) , (const, 0xffffffffffffffff, 16), (unique, 0x10001247, 16) INT_XOR (unique, 0x10001558, 16) , (const, 0x3f, 16), (unique, 0x10001558, 16) INT_ADD (unique, 0x100027ac, 16) , (unique, 0x10001547, 4), (unique, 0x100027ac, 16) INT_LEFT (unique, 0x1000279c, 16) , (const, 0x20, 16), (unique, 0x1000279c, 16) INT_SEXT (stack, 0xffffffffffffff2c, 12), (stack, 0xffffffffffffff2c, 12) SUBPIECE (unique, 0x1000278c, 16) , (const, 0x0, 4), (unique, 0x1000278c, 16) INT_RIGHT (unique, 0x10001354, 16) , (const, 0x20, 4)]
[(stack, 0xffffffffffffff70, 8) COPY (unique, 0x3100, 8), (unique, 0x3100, 8) INT_ADD (stack, 0xffffffffffffff70, 8) , (const, 0x1, 8)]
[(ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x224b, 4)]
[(ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x224b, 4)]
[(ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x224b, 4)]
[(ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x224b, 4)]
[(ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x224b, 4)]
[(ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x224b, 4)]
[(ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x224b, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3400, 8) , (register, 0x0, 8), (unique, 0x3400, 8) PTRADD (stack, 0xffffffffffffff68, 8) , (unique, 0x100028c4, 8) , (const, 0x8, 8)]
[ ---  BRANCH (ram, 0x46c390, 1)]
[(register, 0xb0, 1) INT_SUB (register, 0xb0, 1) , (const, 0x1, 1)]
[(unique, 0x10002be4, 8) COPY (register, 0xb8, 8)]
[(unique, 0x10002cb8, 4) COPY (unique, 0x1000137e, 4)]
[ ---  CBRANCH (ram, 0x46d568, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (unique, 0x10003039, 4) , (const, 0x0, 4), (unique, 0x10003039, 4) CAST (stack, 0xffffffffffffff60, 4)]
[(register, 0xa8, 1) COPY (const, 0xc, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000303d, 8) , (const, 0x46d57c, 8), (unique, 0x1000303d, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x10001293, 8) , (unique, 0x10001790, 8) , (const, 0x1, 8), (unique, 0x10001790, 8) INT_ADD (unique, 0x1000047d, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x25ce, 4)]
[(register, 0x1090, 2) INDIRECT (register, 0x1090, 2) , (const, 0x25ce, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x25ce, 4)]
[(stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x25ce, 4)]
[(stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x25ce, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x25ce, 4)]
[(stack, 0xfffffffffffffee4, 4) INDIRECT (stack, 0xfffffffffffffee4, 4) , (const, 0x25ce, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x25ce, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x25ce, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x25ce, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x25ce, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x25ce, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x25ce, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x25ce, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x25ce, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x25ce, 4)]
[(stack, 0xffffffffffffff52, 2) INDIRECT (stack, 0xffffffffffffff52, 2) , (const, 0x25ce, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x25ce, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x25ce, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x25ce, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x25ce, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x25ce, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x25ce, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x25ce, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x25ce, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x25ce, 4)]
[(stack, 0xffffffffffffff28, 16) INT_AND (stack, 0xffffffffffffff28, 16) , (const, 0xffffffff00000000, 16), (stack, 0xffffffffffffff28, 16) INDIRECT (stack, 0xffffffffffffff28, 16) , (const, 0x25ce, 4)]
[(stack, 0xffffffffffffff18, 16) INT_ADD (unique, 0x100024cc, 16) , (unique, 0x1000304d, 8), (unique, 0x1000304d, 8) CAST (register, 0x38, 8), (unique, 0x100024cc, 16) INT_LEFT (unique, 0x100024bc, 16) , (const, 0x40, 16), (unique, 0x100024bc, 16) INT_SEXT (unique, 0x10003045, 8), (unique, 0x10003045, 8) CAST (stack, 0xffffffffffffff20, 8), (stack, 0xffffffffffffff20, 8) SUBPIECE (stack, 0xffffffffffffff18, 16) , (const, 0x8, 8), (stack, 0xffffffffffffff18, 16) INDIRECT (stack, 0xffffffffffffff18, 16) , (const, 0x25ce, 4)]
[(stack, 0xffffffffffffff70, 8) COPY (unique, 0x3100, 8), (unique, 0x3100, 8) INT_ADD (stack, 0xffffffffffffff70, 8) , (const, 0x1, 8), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x25ce, 4)]
[(ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x25f3, 4), (ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x25ce, 4)]
[(ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x25f3, 4), (ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x25ce, 4)]
[(ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x25f3, 4), (ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x25ce, 4)]
[(ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x25f3, 4), (ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x25ce, 4)]
[(ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x25f3, 4), (ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x25ce, 4)]
[(ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x25f3, 4), (ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x25ce, 4)]
[(ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x25f3, 4), (ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x25ce, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3400, 8) , (register, 0x0, 8), (unique, 0x3400, 8) PTRADD (stack, 0xffffffffffffff68, 8) , (unique, 0x100028bc, 8) , (const, 0x8, 8), (unique, 0x100028bc, 8) COPY (stack, 0xffffffffffffff70, 8), (register, 0x0, 8) CALL (ram, 0x489d30, 8) , (register, 0x38, 8) , (register, 0xb8, 8) , (stack, 0xffffffffffffff70, 8) , (register, 0xb0, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x25ce, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x25ce, 4)]
[(stack, 0xffffffffffffff58, 4) COPY (const, 0x1, 4)]
[(stack, 0xffffffffffffff60, 4) COPY (register, 0x30, 4), (register, 0x30, 4) INT_2COMP (stack, 0xffffffffffffff60, 4), (stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0x25ce, 4)]
[(unique, 0x10002964, 8) COPY (unique, 0x10003055, 8), (unique, 0x10003055, 8) CAST (register, 0x18, 8), (register, 0x18, 8) PTRADD (unique, 0x10001598, 8) , (const, 0x138, 8) , (const, 0x1, 8), (unique, 0x10001598, 8) PTRSUB (const, 0x0, 8) , (const, 0x4b17e0, 8)]
[ ---  BRANCH (ram, 0x46d675, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 4) MULTIEQUAL (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4)]
[(stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff52, 2) MULTIEQUAL (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff28, 16) MULTIEQUAL (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16)]
[(stack, 0xffffffffffffff18, 16) MULTIEQUAL (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee4, 4) MULTIEQUAL (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffec4, 4) MULTIEQUAL (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4)]
[(stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(ram, 0x4ae3d0, 8) MULTIEQUAL (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8)]
[(ram, 0x4ae3c8, 8) MULTIEQUAL (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8)]
[(ram, 0x4ae3c0, 8) MULTIEQUAL (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8)]
[(ram, 0x4ae3b0, 8) MULTIEQUAL (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8)]
[(ram, 0x4ae3a0, 10) MULTIEQUAL (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10)]
[(ram, 0x4ae390, 8) MULTIEQUAL (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8)]
[(ram, 0x4ae380, 16) MULTIEQUAL (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16)]
[(register, 0x1090, 2) MULTIEQUAL (register, 0x1090, 2) , (register, 0x1090, 2)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xa8, 1) MULTIEQUAL (register, 0xa8, 1) , (register, 0xa8, 1)]
[(register, 0x18, 8) PTRADD (register, 0x18, 8) , (const, 0xfffffffffffffffd, 8) , (const, 0x8, 8), (register, 0x18, 8) MULTIEQUAL (unique, 0x10002964, 8) , (unique, 0x1000296c, 8)]
[(unique, 0x10002c40, 4) COPY (register, 0x30, 4), (register, 0x30, 4) MULTIEQUAL (register, 0x30, 4) , (register, 0x30, 4)]
[ ---  CBRANCH (ram, 0x46d659, 1) , (unique, 0x10001126, 1), (unique, 0x10001126, 1) BOOL_OR (register, 0x206, 1) , (unique, 0xcf80, 1), (unique, 0xcf80, 1) INT_SLESS (unique, 0x1000306d, 4) , (unique, 0x10003071, 4), (unique, 0x10003071, 4) CAST (register, 0x30, 4), (unique, 0x1000306d, 4) CAST (unique, 0xbc80, 4), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (register, 0x30, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10003065, 8), (unique, 0x10003065, 8) INT_ADD (unique, 0x1000305d, 8) , (const, 0xfffffffffffffffc, 8), (unique, 0x1000305d, 8) CAST (register, 0x18, 8), (register, 0x18, 8) MULTIEQUAL (unique, 0x10002964, 8) , (unique, 0x1000296c, 8), (register, 0x30, 4) MULTIEQUAL (register, 0x30, 4) , (register, 0x30, 4)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x46d5d8, 1) , (unique, 0xcc00, 1), (unique, 0xcc00, 1) INT_SLESS (stack, 0xffffffffffffff70, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0xffffffffffffffff, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0xfffffffffffffffe, 8) , (const, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10003075, 8) , (const, 0x46d5eb, 8), (unique, 0x10003075, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x10001293, 8) , (unique, 0x10001810, 8) , (const, 0x1, 8), (unique, 0x10001810, 8) INT_ADD (unique, 0x1000047d, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x2a7d, 4)]
[(register, 0x1090, 2) INDIRECT (register, 0x1090, 2) , (const, 0x2a7d, 4)]
[(ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x2a7d, 4)]
[(ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x2a7d, 4)]
[(ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x2a7d, 4)]
[(ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x2a7d, 4)]
[(ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x2a7d, 4)]
[(ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x2a7d, 4)]
[(ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x2a7d, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x2a7d, 4)]
[(stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x2a7d, 4)]
[(stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x2a7d, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x2a7d, 4)]
[(stack, 0xfffffffffffffee4, 4) INDIRECT (stack, 0xfffffffffffffee4, 4) , (const, 0x2a7d, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x2a7d, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x2a7d, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x2a7d, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x2a7d, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x2a7d, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x2a7d, 4)]
[(stack, 0xffffffffffffff18, 16) INDIRECT (stack, 0xffffffffffffff18, 16) , (const, 0x2a7d, 4)]
[(stack, 0xffffffffffffff28, 16) INDIRECT (stack, 0xffffffffffffff28, 16) , (const, 0x2a7d, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x2a7d, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x2a7d, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x2a7d, 4)]
[(stack, 0xffffffffffffff52, 2) INDIRECT (stack, 0xffffffffffffff52, 2) , (const, 0x2a7d, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x2a7d, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x2a7d, 4)]
[(stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0x2a7d, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x2a7d, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x2a7d, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x2a7d, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x2a7d, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x2a7d, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x2a7d, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x2a7d, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x2a7d, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2a7d, 4)]
[(register, 0x0, 8) CALL (ram, 0x489f60, 8) , (stack, 0xffffffffffffff88, 8) , (unique, 0x3a00, 8) , (unique, 0x3100, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff70, 8), (unique, 0x3a00, 8) INT_ADD (unique, 0x3900, 8) , (const, 0x4b1968, 8), (unique, 0x3900, 8) INT_MULT (unique, 0xbd80, 8) , (const, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000307d, 8) , (const, 0x46d6bb, 8), (unique, 0x1000307d, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x10001293, 8) , (unique, 0x10001818, 8) , (const, 0x1, 8), (unique, 0x10001818, 8) INT_ADD (unique, 0x1000047d, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x2639, 4)]
[(register, 0x1090, 2) INDIRECT (register, 0x1090, 2) , (const, 0x2639, 4)]
[(ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x2639, 4)]
[(ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x2639, 4)]
[(ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x2639, 4)]
[(ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x2639, 4)]
[(ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x2639, 4)]
[(ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x2639, 4)]
[(ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x2639, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x2639, 4)]
[(stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x2639, 4)]
[(stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x2639, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x2639, 4)]
[(stack, 0xfffffffffffffee4, 4) INDIRECT (stack, 0xfffffffffffffee4, 4) , (const, 0x2639, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x2639, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x2639, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x2639, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x2639, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x2639, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x2639, 4)]
[(stack, 0xffffffffffffff18, 16) INDIRECT (stack, 0xffffffffffffff18, 16) , (const, 0x2639, 4)]
[(stack, 0xffffffffffffff28, 16) INDIRECT (stack, 0xffffffffffffff28, 16) , (const, 0x2639, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x2639, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x2639, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x2639, 4)]
[(stack, 0xffffffffffffff52, 2) INDIRECT (stack, 0xffffffffffffff52, 2) , (const, 0x2639, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x2639, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x2639, 4)]
[(stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0x2639, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x2639, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x2639, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x2639, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x2639, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x2639, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x2639, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x2639, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x2639, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2639, 4)]
[(register, 0x0, 8) CALL (ram, 0x489f60, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff70, 8) , (unique, 0x3a00, 8) , (unique, 0x3100, 8), (unique, 0x3a00, 8) INT_ADD (unique, 0x3900, 8) , (const, 0x4b1968, 8), (unique, 0x3900, 8) INT_MULT (unique, 0xbd80, 8) , (const, 0x8, 8)]
[ ---  BRANCH (ram, 0x46d5eb, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 4) MULTIEQUAL (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4)]
[(stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff52, 2) MULTIEQUAL (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff28, 16) MULTIEQUAL (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16)]
[(stack, 0xffffffffffffff18, 16) MULTIEQUAL (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee4, 4) MULTIEQUAL (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffec4, 4) MULTIEQUAL (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4)]
[(stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(ram, 0x4ae3d0, 8) MULTIEQUAL (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8)]
[(ram, 0x4ae3c8, 8) MULTIEQUAL (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8)]
[(ram, 0x4ae3c0, 8) MULTIEQUAL (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8)]
[(ram, 0x4ae3b0, 8) MULTIEQUAL (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8)]
[(ram, 0x4ae3a0, 10) MULTIEQUAL (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10)]
[(ram, 0x4ae390, 8) MULTIEQUAL (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8)]
[(ram, 0x4ae380, 16) MULTIEQUAL (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16)]
[(register, 0x1090, 2) MULTIEQUAL (register, 0x1090, 2) , (register, 0x1090, 2)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x80, 8) INT_ADD (unique, 0xbd80, 8) , (stack, 0xffffffffffffff70, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0xfffffffffffffffe, 8) , (const, 0x8, 8), (stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[ ---  CBRANCH (ram, 0x46d6c0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[(stack, 0xffffffffffffff90, 8) COPY (register, 0x80, 8), (register, 0x80, 8) INT_ADD (register, 0x80, 8) , (const, 0xfffffffffffffffe, 8)]
[ ---  BRANCH (ram, 0x46d60a, 1)]
[(stack, 0xffffffffffffff90, 8) COPY (register, 0x80, 8), (register, 0x80, 8) INT_ADD (register, 0x80, 8) , (const, 0xffffffffffffffff, 8)]
[(register, 0xb0, 4) INT_ADD (unique, 0x100009b0, 4) , (const, 0x1, 4), (unique, 0x100009b0, 4) INT_SUB (unique, 0x100009b8, 4) , (unique, 0x100009c0, 4), (unique, 0x100009b8, 4) SUBPIECE (register, 0x80, 8) , (const, 0x0, 4), (unique, 0x100009c0, 4) SUBPIECE (stack, 0xffffffffffffff70, 8) , (const, 0x0, 4), (register, 0x80, 8) MULTIEQUAL (register, 0x80, 8) , (register, 0x80, 8)]
[(unique, 0x1b380, 8) COPY (const, 0x3f, 8)]
[ ---  CBRANCH (const, 0x7, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) PTRADD (stack, 0xffffffffffffff88, 8) , (unique, 0x10001c28, 8) , (const, 0x8, 8), (unique, 0x10001c28, 8) INT_ADD (register, 0x80, 8) , (const, 0xffffffffffffffff, 8), (register, 0x80, 8) MULTIEQUAL (register, 0x80, 8) , (register, 0x80, 8)]
[ ---  CBRANCH (const, 0x3, 1) , (unique, 0x1b580, 1), (unique, 0x1b580, 1) INT_EQUAL (unique, 0x1b500, 8) , (const, 0x0, 8), (unique, 0x1b500, 8) INT_RIGHT (unique, 0xbd80, 8) , (unique, 0x1b380, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3a00, 8), (unique, 0x1b380, 8) MULTIEQUAL (unique, 0x1b380, 8) , (unique, 0x1b380, 8)]
[(unique, 0x1b380, 8) INT_SUB (unique, 0x1b380, 8) , (const, 0x1, 8)]
[ ---  BRANCH (const, 0xfffffffb, 1)]
[(register, 0xa0, 4) SUBPIECE (register, 0xa0, 8) , (const, 0x0, 4), (register, 0xa0, 8) INT_AND (register, 0x8, 8) , (const, 0xffffffff, 8), (register, 0x8, 8) INT_XOR (unique, 0x1b380, 8) , (const, 0x3f, 8), (unique, 0x1b380, 8) MULTIEQUAL (unique, 0x1b380, 8) , (unique, 0x1b380, 8)]
[ ---  CBRANCH (ram, 0x46d788, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x38, 4) , (register, 0xb0, 4), (register, 0x38, 4) INT_ADD (stack, 0xffffffffffffff60, 4) , (const, 0x3, 4), (register, 0xb0, 4) INT_ADD (register, 0xb0, 4) , (register, 0x30, 4), (register, 0x30, 4) INT_NEGATE (register, 0x8, 4), (register, 0x8, 4) SUBPIECE (register, 0x8, 8) , (const, 0x0, 4), (register, 0x8, 8) INT_XOR (unique, 0x1b380, 8) , (const, 0x3f, 8), (register, 0xb0, 4) INT_MULT (register, 0xb0, 4) , (const, 0x40, 4), (unique, 0x1b380, 8) MULTIEQUAL (unique, 0x1b380, 8) , (unique, 0x1b380, 8)]
[ ---  CBRANCH (ram, 0x46deee, 1) , (unique, 0xd080, 1), (unique, 0xd080, 1) INT_SLESS (unique, 0x10003085, 4) , (const, 0x3d, 4), (unique, 0x10003085, 4) CAST (register, 0x8, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10003089, 8) , (const, 0x46df13, 8), (unique, 0x10003089, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x10001293, 8) , (unique, 0x10001820, 8) , (const, 0x1, 8), (unique, 0x10001820, 8) INT_ADD (unique, 0x1000047d, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x2a30, 4)]
[(register, 0x1090, 2) INDIRECT (register, 0x1090, 2) , (const, 0x2a30, 4)]
[(ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x2a30, 4)]
[(ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x2a30, 4)]
[(ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x2a30, 4)]
[(ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x2a30, 4)]
[(ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x2a30, 4)]
[(ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x2a30, 4)]
[(ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x2a30, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x2a30, 4)]
[(stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x2a30, 4)]
[(stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x2a30, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x2a30, 4)]
[(stack, 0xfffffffffffffee4, 4) INDIRECT (stack, 0xfffffffffffffee4, 4) , (const, 0x2a30, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x2a30, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x2a30, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x2a30, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x2a30, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x2a30, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x2a30, 4)]
[(stack, 0xffffffffffffff18, 16) INDIRECT (stack, 0xffffffffffffff18, 16) , (const, 0x2a30, 4)]
[(stack, 0xffffffffffffff28, 16) INDIRECT (stack, 0xffffffffffffff28, 16) , (const, 0x2a30, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x2a30, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x2a30, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x2a30, 4)]
[(stack, 0xffffffffffffff52, 2) INDIRECT (stack, 0xffffffffffffff52, 2) , (const, 0x2a30, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x2a30, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x2a30, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x2a30, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x2a30, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x2a30, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x2a30, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x2a30, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (register, 0x80, 8) , (const, 0x2a30, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x2a30, 4), (stack, 0xffffffffffffffa8, 8) COPY (ram, 0x4ae3c0, 8)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x2a30, 4), (stack, 0xffffffffffffffb0, 8) COPY (ram, 0x4ae3c8, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2a30, 4)]
[ ---  CALL (ram, 0x489d30, 8) , (unique, 0x3100, 8) , (unique, 0x3100, 8) , (const, 0x2, 8), (unique, 0x3100, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffa8, 8)]
[ ---  CBRANCH (ram, 0x46d6cd, 1) , (unique, 0xcd00, 1), (unique, 0xcd00, 1) INT_SLESS (unique, 0x10003091, 4) , (register, 0xb0, 4), (unique, 0x10003091, 4) CAST (register, 0x0, 4), (register, 0x0, 4) INT_ADD (stack, 0xffffffffffffff60, 4) , (const, 0x2, 4), (stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0x2a30, 4)]
[(unique, 0x10002c60, 4) COPY (stack, 0xffffffffffffff60, 4)]
[ ---  CBRANCH (ram, 0x46d659, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (register, 0xb0, 4), (register, 0x0, 4) INT_ADD (stack, 0xffffffffffffff60, 4) , (const, 0x3, 4)]
[(unique, 0x3a00, 8) PTRADD (stack, 0xffffffffffffff88, 8) , (unique, 0x10001d78, 8) , (const, 0x8, 8), (unique, 0x10001d78, 8) INT_ADD (stack, 0xffffffffffffff90, 8) , (const, 0xffffffffffffffff, 8)]
[ ---  BRANCH (ram, 0x46d7bc, 1)]
[(stack, 0xffffffffffffffa8, 8) COPY (const, 0x0, 8)]
[(stack, 0xffffffffffffffb0, 8) COPY (register, 0x38, 8), (register, 0x38, 8) INT_LEFT (const, 0xa, 8) , (unique, 0x53700, 1), (unique, 0x53700, 1) INT_AND (register, 0x8, 1) , (const, 0x3f, 1), (register, 0x8, 1) INT_SUB (const, 0x3c, 1) , (unique, 0x10000e72, 1), (unique, 0x10000e72, 1) SUBPIECE (register, 0xa0, 8) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x46d6d8, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (unique, 0x10003095, 4) , (register, 0xb0, 4), (unique, 0x10003095, 4) CAST (register, 0x38, 4), (register, 0x38, 4) INT_ADD (stack, 0xffffffffffffff60, 4) , (const, 0x2, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (register, 0x80, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 4) MULTIEQUAL (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4)]
[(stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff52, 2) MULTIEQUAL (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff28, 16) MULTIEQUAL (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16)]
[(stack, 0xffffffffffffff18, 16) MULTIEQUAL (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee4, 4) MULTIEQUAL (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffec4, 4) MULTIEQUAL (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4)]
[(stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(ram, 0x4ae3d0, 8) MULTIEQUAL (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8)]
[(ram, 0x4ae3c8, 8) MULTIEQUAL (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8)]
[(ram, 0x4ae3c0, 8) MULTIEQUAL (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8)]
[(ram, 0x4ae3b0, 8) MULTIEQUAL (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8)]
[(ram, 0x4ae3a0, 10) MULTIEQUAL (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10)]
[(ram, 0x4ae390, 8) MULTIEQUAL (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8)]
[(ram, 0x4ae380, 16) MULTIEQUAL (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16)]
[(register, 0x1090, 2) MULTIEQUAL (register, 0x1090, 2) , (register, 0x1090, 2)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (stack, 0xffffffffffffffb0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x3a00, 8) , (unique, 0x3a00, 8), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[ ---  CBRANCH (ram, 0x46d6d8, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESSEQUAL (stack, 0xffffffffffffffb0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x3a00, 8) , (unique, 0x3a00, 8), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(unique, 0x10002c58, 4) COPY (stack, 0xffffffffffffff60, 4)]
[ ---  CBRANCH (ram, 0x46d659, 1) , (register, 0x206, 1)]
[ ---  CBRANCH (ram, 0x46d659, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESSEQUAL (stack, 0xffffffffffffffa8, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) PTRADD (stack, 0xffffffffffffff88, 8) , (unique, 0x1000208c, 8) , (const, 0x8, 8), (unique, 0x1000208c, 8) INT_ADD (stack, 0xffffffffffffff90, 8) , (const, 0xfffffffffffffffe, 8)]
[(unique, 0x10002c44, 4) COPY (stack, 0xffffffffffffff60, 4)]
[ ---  CBRANCH (ram, 0x46d6d8, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESSEQUAL (register, 0xb0, 4) , (unique, 0x10003099, 4), (unique, 0x10003099, 4) CAST (register, 0x0, 4), (register, 0x0, 4) INT_ADD (stack, 0xffffffffffffff60, 4) , (const, 0x2, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (register, 0x80, 8) , (register, 0x80, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff52, 2) MULTIEQUAL (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff18, 16) MULTIEQUAL (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee4, 4) MULTIEQUAL (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffec4, 4) MULTIEQUAL (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4)]
[(stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(ram, 0x4ae3d0, 8) MULTIEQUAL (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8)]
[(ram, 0x4ae3c8, 8) MULTIEQUAL (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8)]
[(ram, 0x4ae3c0, 8) MULTIEQUAL (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8)]
[(ram, 0x4ae3b0, 8) MULTIEQUAL (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8)]
[(ram, 0x4ae3a0, 10) MULTIEQUAL (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10)]
[(ram, 0x4ae390, 8) MULTIEQUAL (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8)]
[(ram, 0x4ae380, 16) MULTIEQUAL (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16)]
[(register, 0x1090, 2) MULTIEQUAL (register, 0x1090, 2) , (register, 0x1090, 2) , (register, 0x1090, 2) , (register, 0x1090, 2) , (register, 0x1090, 2)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(stack, 0xffffffffffffff28, 16) INT_ADD (unique, 0x100024ec, 16) , (unique, 0xbc80, 4), (unique, 0x100024ec, 16) INT_LEFT (unique, 0x100024dc, 16) , (const, 0x20, 16), (unique, 0x100024dc, 16) INT_SEXT (stack, 0xffffffffffffff2c, 12), (stack, 0xffffffffffffff2c, 12) SUBPIECE (stack, 0xffffffffffffff28, 16) , (const, 0x4, 8), (unique, 0xbc80, 4) INT_OR (stack, 0xffffffffffffff28, 4) , (register, 0x0, 4), (stack, 0xffffffffffffff28, 4) SUBPIECE (stack, 0xffffffffffffff28, 16) , (const, 0x0, 8), (register, 0x0, 4) INT_LEFT (const, 0x1, 4) , (unique, 0x53100, 1), (unique, 0x53100, 1) INT_AND (register, 0xa8, 1) , (const, 0x1f, 1), (stack, 0xffffffffffffff28, 16) MULTIEQUAL (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16)]
[(register, 0x0, 4) INT_SUB (register, 0xa0, 4) , (register, 0x30, 4), (register, 0x30, 4) INT_SUB (register, 0x30, 4) , (register, 0xb0, 4), (register, 0x30, 4) MULTIEQUAL (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4)]
[(stack, 0xffffffffffffff60, 4) COPY (register, 0x30, 4), (register, 0x30, 4) INT_SUB (register, 0x30, 4) , (register, 0xb0, 4), (register, 0x30, 4) MULTIEQUAL (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4)]
[(unique, 0x10002c28, 4) COPY (register, 0xa0, 4)]
[ ---  CBRANCH (ram, 0x46d6fc, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (unique, 0x1000309d, 4) , (const, 0x0, 4), (unique, 0x1000309d, 4) CAST (register, 0x30, 4), (register, 0x30, 4) INT_SUB (register, 0x30, 4) , (register, 0xb0, 4), (register, 0x30, 4) MULTIEQUAL (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4)]
[(unique, 0x10002c2c, 4) COPY (register, 0x0, 4)]
[(register, 0xa0, 4) MULTIEQUAL (unique, 0x10002c28, 4) , (unique, 0x10002c2c, 4)]
[(unique, 0x10002dd0, 8) COPY (stack, 0xffffffffffffff88, 8)]
[ ---  CBRANCH (ram, 0x46e2e6, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (stack, 0xffffffffffffff88, 8)]
[ ---  CBRANCH (ram, 0x46e5e7, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xa0, 4) , (const, 0x3f, 4)]
[(register, 0x38, 8) COPY (const, 0x0, 8)]
[(register, 0xb8, 8) COPY (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x46d747, 1)]
[(unique, 0xdcc80, 4) COPY (const, 0x0, 4)]
[(unique, 0xdcc80, 4) MULTIEQUAL (unique, 0xdcc80, 4) , (unique, 0xdcc80, 4)]
[ ---  CBRANCH (const, 0x5, 1) , (unique, 0xdce00, 1), (unique, 0xdce00, 1) INT_EQUAL (unique, 0xdcd80, 8) , (const, 0x0, 8), (unique, 0xdcd80, 8) INT_AND (unique, 0xdcd00, 8) , (const, 0x1, 8), (unique, 0xdcd00, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xdcd00, 8)]
[(unique, 0xdcc80, 4) INT_ADD (unique, 0xdcc80, 4) , (const, 0x1, 4)]
[(unique, 0xdcd00, 8) INT_OR (unique, 0xdcf00, 8) , (const, 0x8000000000000000, 8), (unique, 0xdcf00, 8) INT_RIGHT (unique, 0xdcd00, 8) , (const, 0x1, 4)]
[ ---  BRANCH (const, 0xfffffffa, 1)]
[ ---  CBRANCH (ram, 0x46e332, 1) , (unique, 0xcc00, 1), (unique, 0xcc00, 1) INT_SLESSEQUAL (register, 0x8, 4) , (unique, 0xdcc80, 4), (register, 0x8, 4) INT_SUB (const, 0x3f, 4) , (register, 0xa0, 4)]
[(register, 0xa0, 8) COPY (const, 0x0, 8)]
[(unique, 0x10002acc, 8) COPY (stack, 0xffffffffffffff90, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100030a1, 8) , (const, 0x46e345, 8), (unique, 0x100030a1, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x10001293, 8) , (unique, 0x10001828, 8) , (const, 0x1, 8), (unique, 0x10001828, 8) INT_ADD (unique, 0x1000047d, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x2970, 4)]
[(register, 0x1090, 2) INDIRECT (register, 0x1090, 2) , (const, 0x2970, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x2970, 4)]
[(stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x2970, 4)]
[(stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x2970, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x2970, 4)]
[(stack, 0xfffffffffffffee4, 4) INDIRECT (stack, 0xfffffffffffffee4, 4) , (const, 0x2970, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x2970, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x2970, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x2970, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x2970, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x2970, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x2970, 4)]
[(stack, 0xffffffffffffff18, 16) INDIRECT (stack, 0xffffffffffffff18, 16) , (const, 0x2970, 4)]
[(stack, 0xffffffffffffff28, 16) INDIRECT (stack, 0xffffffffffffff28, 16) , (const, 0x2970, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x2970, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x2970, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x2970, 4)]
[(stack, 0xffffffffffffff52, 2) INDIRECT (stack, 0xffffffffffffff52, 2) , (const, 0x2970, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x2970, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x2970, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x2970, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x2970, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x2970, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x2970, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x2970, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x2970, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2970, 4)]
[(stack, 0xffffffffffffff70, 8) COPY (register, 0x0, 8), (register, 0x0, 8) INT_ADD (stack, 0xffffffffffffff90, 8) , (const, 0x1, 8), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x2970, 4)]
[(ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x298c, 4), (ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x2970, 4)]
[(ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x298c, 4), (ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x2970, 4)]
[(ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x298c, 4), (ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x2970, 4)]
[(ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x298c, 4), (ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x2970, 4)]
[(ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x298c, 4), (ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x2970, 4)]
[(ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x298c, 4), (ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x2970, 4)]
[(ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x298c, 4), (ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x2970, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3a00, 8) , (register, 0x0, 8), (unique, 0x3a00, 8) PTRADD (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff90, 8) , (const, 0x8, 8), (register, 0x0, 8) CALL (ram, 0x489d30, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff90, 8) , (register, 0x8, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x2970, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x2970, 4), (register, 0x8, 4) INT_ADD (register, 0xa0, 4) , (const, 0x1, 4)]
[(unique, 0x10002c54, 4) COPY (stack, 0xffffffffffffff60, 4), (stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0x2970, 4)]
[ ---  BRANCH (ram, 0x46d659, 1)]
[(unique, 0x100028ec, 8) COPY (register, 0x0, 8), (register, 0x0, 8) COPY (const, 0x1, 8)]
[(register, 0x88, 4) INT_ADD (unique, 0x10000a18, 4) , (const, 0xffffffff, 4), (unique, 0x10000a18, 4) SUBPIECE (register, 0x0, 8) , (const, 0x0, 4), (register, 0x0, 8) COPY (unique, 0x100028fc, 8), (unique, 0x100028fc, 8) MULTIEQUAL (unique, 0x100028ec, 8) , (unique, 0x100028f4, 8)]
[(register, 0x38, 8) INT_SEXT (unique, 0x10000a18, 4), (unique, 0x10000a18, 4) SUBPIECE (register, 0x0, 8) , (const, 0x0, 4), (register, 0x0, 8) COPY (unique, 0x100028fc, 8), (unique, 0x100028fc, 8) MULTIEQUAL (unique, 0x100028ec, 8) , (unique, 0x100028f4, 8)]
[(unique, 0x100028f4, 8) COPY (register, 0x0, 8), (register, 0x0, 8) INT_ADD (register, 0x0, 8) , (const, 0x1, 8), (register, 0x0, 8) COPY (unique, 0x100028fc, 8), (unique, 0x100028fc, 8) MULTIEQUAL (unique, 0x100028ec, 8) , (unique, 0x100028f4, 8)]
[ ---  CBRANCH (ram, 0x46d718, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x10, 8), (register, 0x10, 8) PTRADD (unique, 0x10000e68, 8) , (const, 0x1, 8) , (const, 0x8, 8), (unique, 0x10000e68, 8) MULTIEQUAL (unique, 0x10002dd0, 8) , (register, 0x10, 8)]
[ ---  CBRANCH (ram, 0x46dd18, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xa0, 4) , (const, 0x3f, 4)]
[(register, 0x30, 4) INT_SUB (const, 0x3f, 4) , (register, 0xa0, 4)]
[(unique, 0xdcc80, 4) COPY (const, 0x0, 4)]
[(unique, 0xdcc80, 4) MULTIEQUAL (unique, 0xdcc80, 4) , (unique, 0xdcc80, 4)]
[ ---  CBRANCH (const, 0x5, 1) , (unique, 0xdce00, 1), (unique, 0xdce00, 1) INT_EQUAL (unique, 0xdcd80, 8) , (const, 0x0, 8), (unique, 0xdcd80, 8) INT_AND (unique, 0xdcd00, 8) , (const, 0x1, 8), (unique, 0xdcd00, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xdcd00, 8)]
[(unique, 0xdcc80, 4) INT_ADD (unique, 0xdcc80, 4) , (const, 0x1, 4)]
[(unique, 0xdcd00, 8) INT_OR (unique, 0xdcf00, 8) , (const, 0x8000000000000000, 8), (unique, 0xdcf00, 8) INT_RIGHT (unique, 0xdcd00, 8) , (const, 0x1, 4)]
[ ---  BRANCH (const, 0xfffffffa, 1)]
[ ---  CBRANCH (ram, 0x46e476, 1) , (unique, 0xcd00, 1), (unique, 0xcd00, 1) INT_SLESS (unique, 0xdcc80, 4) , (register, 0x30, 4)]
[(unique, 0x10002ac4, 8) COPY (register, 0x80, 8), (register, 0x80, 8) INT_SUB (stack, 0xffffffffffffff90, 8) , (register, 0xa0, 8), (register, 0xa0, 8) INT_SEXT (unique, 0x10000a18, 4)]
[(unique, 0x10002ad4, 8) COPY (register, 0x10, 8)]
[ ---  BRANCH (ram, 0x46e30b, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100030a9, 8) , (const, 0x46e319, 8), (unique, 0x100030a9, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x10001293, 8) , (unique, 0x10001838, 8) , (const, 0x1, 8), (unique, 0x10001838, 8) INT_ADD (unique, 0x1000047d, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x291a, 4)]
[(register, 0x1090, 2) INDIRECT (register, 0x1090, 2) , (const, 0x291a, 4)]
[(ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x291a, 4)]
[(ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x291a, 4)]
[(ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x291a, 4)]
[(ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x291a, 4)]
[(ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x291a, 4)]
[(ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x291a, 4)]
[(ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x291a, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x291a, 4)]
[(stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x291a, 4)]
[(stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x291a, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x291a, 4)]
[(stack, 0xfffffffffffffee4, 4) INDIRECT (stack, 0xfffffffffffffee4, 4) , (const, 0x291a, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x291a, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x291a, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x291a, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x291a, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x291a, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x291a, 4)]
[(stack, 0xffffffffffffff18, 16) INDIRECT (stack, 0xffffffffffffff18, 16) , (const, 0x291a, 4)]
[(stack, 0xffffffffffffff28, 16) INDIRECT (stack, 0xffffffffffffff28, 16) , (const, 0x291a, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x291a, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x291a, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x291a, 4)]
[(stack, 0xffffffffffffff52, 2) INDIRECT (stack, 0xffffffffffffff52, 2) , (const, 0x291a, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x291a, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x291a, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x291a, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x291a, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x291a, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x291a, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x291a, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x291a, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x291a, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x291a, 4)]
[ ---  CALL (ram, 0x489e50, 8) , (stack, 0xffffffffffffff68, 8) , (register, 0x90, 8) , (register, 0x80, 8) , (unique, 0x10000eaa, 4), (register, 0x80, 8) MULTIEQUAL (unique, 0x10002ac4, 8) , (unique, 0x10002acc, 8), (register, 0x90, 8) MULTIEQUAL (unique, 0x10002ad4, 8) , (unique, 0x10002dd0, 8), (unique, 0x10000eaa, 4) MULTIEQUAL (register, 0x30, 4) , (register, 0x8, 4)]
[(stack, 0xffffffffffffff70, 8) COPY (register, 0x0, 8), (register, 0x0, 8) INT_SUB (stack, 0xffffffffffffff90, 8) , (register, 0xa0, 8), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x291a, 4), (register, 0xa0, 8) MULTIEQUAL (register, 0xa0, 8) , (register, 0xa0, 8)]
[(unique, 0x10002c50, 4) COPY (stack, 0xffffffffffffff60, 4), (stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0x291a, 4)]
[ ---  BRANCH (ram, 0x46d659, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100030b1, 8) , (const, 0x46dd54, 8), (unique, 0x100030b1, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x10001293, 8) , (unique, 0x10001830, 8) , (const, 0x1, 8), (unique, 0x10001830, 8) INT_ADD (unique, 0x1000047d, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x28f4, 4)]
[(register, 0x1090, 2) INDIRECT (register, 0x1090, 2) , (const, 0x28f4, 4)]
[(ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x28f4, 4)]
[(ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x28f4, 4)]
[(ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x28f4, 4)]
[(ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x28f4, 4)]
[(ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x28f4, 4)]
[(ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x28f4, 4)]
[(ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x28f4, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x28f4, 4)]
[(stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x28f4, 4)]
[(stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x28f4, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x28f4, 4)]
[(stack, 0xfffffffffffffee4, 4) INDIRECT (stack, 0xfffffffffffffee4, 4) , (const, 0x28f4, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x28f4, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x28f4, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x28f4, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x28f4, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x28f4, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x28f4, 4)]
[(stack, 0xffffffffffffff18, 16) INDIRECT (stack, 0xffffffffffffff18, 16) , (const, 0x28f4, 4)]
[(stack, 0xffffffffffffff28, 16) INDIRECT (stack, 0xffffffffffffff28, 16) , (const, 0x28f4, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x28f4, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x28f4, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x28f4, 4)]
[(stack, 0xffffffffffffff52, 2) INDIRECT (stack, 0xffffffffffffff52, 2) , (const, 0x28f4, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x28f4, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x28f4, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x28f4, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x28f4, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x28f4, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x28f4, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x28f4, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x28f4, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x28f4, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x28f4, 4)]
[ ---  CALL (ram, 0x489e50, 8) , (stack, 0xffffffffffffff68, 8) , (unique, 0x3a00, 8) , (register, 0x10, 8) , (register, 0x30, 4), (register, 0x10, 8) INT_SUB (stack, 0xffffffffffffff90, 8) , (register, 0xb0, 8), (unique, 0x3a00, 8) PTRADD (stack, 0xffffffffffffff88, 8) , (unique, 0x10001d28, 8) , (const, 0x8, 8), (unique, 0x10001d28, 8) INT_ADD (register, 0x0, 8) , (const, 0xffffffffffffffff, 8), (register, 0xb0, 8) INT_SEXT (register, 0x88, 4)]
[(stack, 0xffffffffffffff70, 8) COPY (register, 0x0, 8), (register, 0x0, 8) INT_SUB (stack, 0xffffffffffffff90, 8) , (register, 0xb0, 8), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x28f4, 4), (register, 0xb0, 8) INT_SEXT (register, 0x88, 4)]
[(unique, 0x10002c4c, 4) COPY (stack, 0xffffffffffffff60, 4), (stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0x28f4, 4)]
[ ---  BRANCH (ram, 0x46d659, 1)]
[(register, 0xb8, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0xb8, 8)]
[ ---  CBRANCH (ram, 0x46d778, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (const, 0x0, 8) , (register, 0x80, 8), (register, 0x80, 8) INT_SUB (stack, 0xffffffffffffff90, 8) , (register, 0x38, 8), (register, 0x38, 8) MULTIEQUAL (register, 0x38, 8) , (register, 0x38, 8)]
[(register, 0x0, 8) COPY (const, 0x0, 8)]
[(ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x2886, 4), (ram, 0x4ae380, 16) MULTIEQUAL (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16)]
[(ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x2886, 4), (ram, 0x4ae390, 8) MULTIEQUAL (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8)]
[(ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x2886, 4), (ram, 0x4ae3a0, 10) MULTIEQUAL (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10)]
[(ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x2886, 4), (ram, 0x4ae3b0, 8) MULTIEQUAL (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8)]
[(ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x2886, 4), (ram, 0x4ae3c0, 8) MULTIEQUAL (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8)]
[(ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x2886, 4), (ram, 0x4ae3c8, 8) MULTIEQUAL (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8)]
[(ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x2886, 4), (ram, 0x4ae3d0, 8) MULTIEQUAL (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3400, 8) , (unique, 0xbd80, 8), (unique, 0x3400, 8) PTRADD (stack, 0xffffffffffffff68, 8) , (register, 0x0, 8) , (const, 0x8, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (stack, 0xffffffffffffff88, 8) , (unique, 0x10001c58, 8) , (const, 0x8, 8), (unique, 0x10001c58, 8) INT_ADD (register, 0xb8, 8) , (register, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x46d760, 1) , (unique, 0xd080, 1), (unique, 0xd080, 1) INT_SLESS (register, 0x0, 8) , (register, 0x80, 8), (register, 0x80, 8) INT_SUB (stack, 0xffffffffffffff90, 8) , (register, 0x38, 8), (register, 0x0, 8) INT_ADD (register, 0x0, 8) , (const, 0x1, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[(ram, 0x4ae3d0, 8) MULTIEQUAL (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8)]
[(ram, 0x4ae3c8, 8) MULTIEQUAL (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8)]
[(ram, 0x4ae3c0, 8) MULTIEQUAL (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8)]
[(ram, 0x4ae3b0, 8) MULTIEQUAL (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8)]
[(ram, 0x4ae3a0, 10) MULTIEQUAL (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10)]
[(ram, 0x4ae390, 8) MULTIEQUAL (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8)]
[(ram, 0x4ae380, 16) MULTIEQUAL (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16)]
[(stack, 0xffffffffffffff70, 8) COPY (register, 0x80, 8), (register, 0x80, 8) MULTIEQUAL (register, 0x80, 8) , (register, 0x80, 8)]
[(unique, 0x10002c48, 4) COPY (register, 0x30, 4)]
[ ---  BRANCH (ram, 0x46d659, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (register, 0x80, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 4) MULTIEQUAL (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4)]
[(stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff52, 2) MULTIEQUAL (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff28, 16) MULTIEQUAL (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee4, 4) MULTIEQUAL (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffec4, 4) MULTIEQUAL (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4)]
[(stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(ram, 0x4ae3d0, 8) MULTIEQUAL (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8)]
[(ram, 0x4ae3c8, 8) MULTIEQUAL (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8)]
[(ram, 0x4ae3c0, 8) MULTIEQUAL (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8)]
[(ram, 0x4ae3b0, 8) MULTIEQUAL (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8)]
[(ram, 0x4ae3a0, 10) MULTIEQUAL (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10)]
[(ram, 0x4ae390, 8) MULTIEQUAL (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8)]
[(ram, 0x4ae380, 16) MULTIEQUAL (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16)]
[(register, 0x1090, 2) MULTIEQUAL (register, 0x1090, 2) , (register, 0x1090, 2) , (register, 0x1090, 2) , (register, 0x1090, 2) , (register, 0x1090, 2) , (register, 0x1090, 2) , (register, 0x1090, 2) , (register, 0x1090, 2) , (register, 0x1090, 2)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x30, 4) MULTIEQUAL (unique, 0x10002c40, 4) , (unique, 0x10002c44, 4) , (unique, 0x10002c48, 4) , (unique, 0x10002c4c, 4) , (unique, 0x10002c50, 4) , (unique, 0x10002c54, 4) , (unique, 0x10002c58, 4) , (unique, 0x10002c58, 4) , (unique, 0x10002c60, 4)]
[(stack, 0xffffffffffffff0c, 4) SUBPIECE (stack, 0xffffffffffffff08, 8) , (const, 0x4, 4), (stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(register, 0xa8, 1) INT_SUB (register, 0xa8, 1) , (const, 0x1, 1)]
[(stack, 0xffffffffffffff18, 8) SUBPIECE (stack, 0xffffffffffffff18, 16) , (const, 0x0, 8), (stack, 0xffffffffffffff18, 16) MULTIEQUAL (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16)]
[ ---  CBRANCH (ram, 0x46dbef, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x18, 8) , (unique, 0x100030b9, 8), (unique, 0x100030b9, 8) CAST (unique, 0x10001588, 8), (unique, 0x10001588, 8) PTRADD (unique, 0x10001580, 8) , (const, 0x18, 8) , (const, 0x1, 8), (unique, 0x10001580, 8) PTRSUB (const, 0x0, 8) , (const, 0x4b17e0, 8)]
[ ---  CBRANCH (ram, 0x46dc8e, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (const, 0x0, 4) , (unique, 0x100030c1, 4), (unique, 0x100030c1, 4) CAST (register, 0x30, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100030c5, 8) , (const, 0x46dc1a, 8), (unique, 0x100030c5, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x10001293, 8) , (unique, 0x10001840, 8) , (const, 0x1, 8), (unique, 0x10001840, 8) INT_ADD (unique, 0x1000047d, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x272f, 4)]
[(register, 0x1090, 2) INDIRECT (register, 0x1090, 2) , (const, 0x272f, 4)]
[(ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x272f, 4)]
[(ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x272f, 4)]
[(ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x272f, 4)]
[(ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x272f, 4)]
[(ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x272f, 4)]
[(ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x272f, 4)]
[(ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x272f, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x272f, 4)]
[(stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x272f, 4)]
[(stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x272f, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x272f, 4)]
[(stack, 0xfffffffffffffee4, 4) INDIRECT (stack, 0xfffffffffffffee4, 4) , (const, 0x272f, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x272f, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x272f, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x272f, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x272f, 4)]
[(stack, 0xffffffffffffff0c, 4) INDIRECT (stack, 0xffffffffffffff0c, 4) , (const, 0x272f, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x272f, 4)]
[(stack, 0xffffffffffffff18, 16) INDIRECT (stack, 0xffffffffffffff18, 16) , (const, 0x272f, 4)]
[(stack, 0xffffffffffffff28, 16) INDIRECT (stack, 0xffffffffffffff28, 16) , (const, 0x272f, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x272f, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x272f, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x272f, 4)]
[(stack, 0xffffffffffffff52, 2) INDIRECT (stack, 0xffffffffffffff52, 2) , (const, 0x272f, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x272f, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x272f, 4)]
[(stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0x272f, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x272f, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x272f, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x272f, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x272f, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x272f, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x272f, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x272f, 4)]
[ ---  CALL (ram, 0x48a400, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff70, 8) , (const, 0xa, 8)]
[(stack, 0xffffffffffffff90, 8) COPY (stack, 0xffffffffffffff70, 8), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x272f, 4)]
[(unique, 0xdcc80, 4) COPY (const, 0x0, 4)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (stack, 0xffffffffffffff88, 8), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x272f, 4)]
[(unique, 0xdcc80, 4) MULTIEQUAL (unique, 0xdcc80, 4) , (unique, 0xdcc80, 4)]
[ ---  CBRANCH (const, 0x5, 1) , (unique, 0xdce00, 1), (unique, 0xdce00, 1) INT_EQUAL (unique, 0xdcd80, 8) , (const, 0x0, 8), (unique, 0xdcd80, 8) INT_AND (unique, 0xdcd00, 8) , (const, 0x1, 8), (unique, 0xdcd00, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xdcd00, 8)]
[(unique, 0xdcc80, 4) INT_ADD (unique, 0xdcc80, 4) , (const, 0x1, 4)]
[(unique, 0xdcd00, 8) INT_OR (unique, 0xdcf00, 8) , (const, 0x8000000000000000, 8), (unique, 0xdcf00, 8) INT_RIGHT (unique, 0xdcd00, 8) , (const, 0x1, 4)]
[ ---  BRANCH (const, 0xfffffffa, 1)]
[(unique, 0x10002d00, 4) COPY (register, 0x8, 4), (register, 0x8, 4) COPY (const, 0x4, 4)]
[ ---  CBRANCH (ram, 0x46dc43, 1) , (unique, 0x27780, 1), (unique, 0x27780, 1) INT_SLESS (unique, 0x100030cd, 4) , (const, 0x5, 4), (unique, 0x100030cd, 4) CAST (stack, 0xffffffffffffff60, 4)]
[(unique, 0x10002d04, 4) COPY (stack, 0xffffffffffffff60, 4)]
[ ---  CBRANCH (ram, 0x46e228, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (unique, 0xdcc80, 4) , (unique, 0x100030d1, 4), (unique, 0x100030d1, 4) CAST (register, 0x8, 4), (register, 0x8, 4) MULTIEQUAL (unique, 0x10002d00, 4) , (unique, 0x10002d04, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100030d5, 8) , (const, 0x46e234, 8), (unique, 0x100030d5, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x10001293, 8) , (unique, 0x10001850, 8) , (const, 0x1, 8), (unique, 0x10001850, 8) INT_ADD (unique, 0x1000047d, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x27b9, 4)]
[(register, 0x1090, 2) INDIRECT (register, 0x1090, 2) , (const, 0x27b9, 4)]
[(ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x27b9, 4)]
[(ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x27b9, 4)]
[(ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x27b9, 4)]
[(ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x27b9, 4)]
[(ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x27b9, 4)]
[(ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x27b9, 4)]
[(ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x27b9, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x27b9, 4)]
[(stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x27b9, 4)]
[(stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x27b9, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x27b9, 4)]
[(stack, 0xfffffffffffffee4, 4) INDIRECT (stack, 0xfffffffffffffee4, 4) , (const, 0x27b9, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x27b9, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x27b9, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x27b9, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x27b9, 4)]
[(stack, 0xffffffffffffff0c, 4) INDIRECT (stack, 0xffffffffffffff0c, 4) , (const, 0x27b9, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x27b9, 4)]
[(stack, 0xffffffffffffff18, 16) INDIRECT (stack, 0xffffffffffffff18, 16) , (const, 0x27b9, 4)]
[(stack, 0xffffffffffffff28, 16) INDIRECT (stack, 0xffffffffffffff28, 16) , (const, 0x27b9, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x27b9, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x27b9, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x27b9, 4)]
[(stack, 0xffffffffffffff52, 2) INDIRECT (stack, 0xffffffffffffff52, 2) , (const, 0x27b9, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x27b9, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x27b9, 4)]
[(stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0x27b9, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x27b9, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x27b9, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x27b9, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x27b9, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x27b9, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x27b9, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x27b9, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x27b9, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x27b9, 4)]
[ ---  CALL (ram, 0x489e50, 8)]
[ ---  BRANCH (ram, 0x46dc7c, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100030dd, 8) , (const, 0x46dc60, 8), (unique, 0x100030dd, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x10001293, 8) , (unique, 0x10001848, 8) , (const, 0x1, 8), (unique, 0x10001848, 8) INT_ADD (unique, 0x1000047d, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x2785, 4)]
[(register, 0x1090, 2) INDIRECT (register, 0x1090, 2) , (const, 0x2785, 4)]
[(ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x2785, 4)]
[(ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x2785, 4)]
[(ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x2785, 4)]
[(ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x2785, 4)]
[(ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x2785, 4)]
[(ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x2785, 4)]
[(ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x2785, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x2785, 4)]
[(stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x2785, 4)]
[(stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x2785, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x2785, 4)]
[(stack, 0xfffffffffffffee4, 4) INDIRECT (stack, 0xfffffffffffffee4, 4) , (const, 0x2785, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x2785, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x2785, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x2785, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x2785, 4)]
[(stack, 0xffffffffffffff0c, 4) INDIRECT (stack, 0xffffffffffffff0c, 4) , (const, 0x2785, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x2785, 4)]
[(stack, 0xffffffffffffff18, 16) INDIRECT (stack, 0xffffffffffffff18, 16) , (const, 0x2785, 4)]
[(stack, 0xffffffffffffff28, 16) INDIRECT (stack, 0xffffffffffffff28, 16) , (const, 0x2785, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x2785, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x2785, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x2785, 4)]
[(stack, 0xffffffffffffff52, 2) INDIRECT (stack, 0xffffffffffffff52, 2) , (const, 0x2785, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x2785, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x2785, 4)]
[(stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0x2785, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x2785, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x2785, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x2785, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x2785, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x2785, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x2785, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x2785, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2785, 4)]
[(unique, 0x100028cc, 8) COPY (stack, 0xffffffffffffff90, 8), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x2785, 4)]
[ ---  CBRANCH (ram, 0x46dc7c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x489d30, 8)]
[(stack, 0xffffffffffffff90, 8) COPY (unique, 0x3100, 8), (unique, 0x3100, 8) INT_ADD (stack, 0xffffffffffffff90, 8) , (const, 0x1, 8)]
[(ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x279e, 4)]
[(ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x279e, 4)]
[(ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x279e, 4)]
[(ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x279e, 4)]
[(ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x279e, 4)]
[(ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x279e, 4)]
[(ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x279e, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3400, 8) , (register, 0x0, 8), (unique, 0x3400, 8) PTRADD (stack, 0xffffffffffffff68, 8) , (unique, 0x100028cc, 8) , (const, 0x8, 8)]
[(stack, 0xffffffffffffff0c, 4) MULTIEQUAL (stack, 0xffffffffffffff0c, 4) , (stack, 0xffffffffffffff0c, 4) , (stack, 0xffffffffffffff0c, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff52, 2) MULTIEQUAL (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff18, 16) MULTIEQUAL (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee4, 4) MULTIEQUAL (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffec4, 4) MULTIEQUAL (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4)]
[(stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(ram, 0x4ae3d0, 8) MULTIEQUAL (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8)]
[(ram, 0x4ae3c8, 8) MULTIEQUAL (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8)]
[(ram, 0x4ae3c0, 8) MULTIEQUAL (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8)]
[(ram, 0x4ae3b0, 8) MULTIEQUAL (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8)]
[(ram, 0x4ae3a0, 10) MULTIEQUAL (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10)]
[(ram, 0x4ae390, 8) MULTIEQUAL (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8)]
[(ram, 0x4ae380, 16) MULTIEQUAL (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16)]
[(register, 0x1090, 2) MULTIEQUAL (register, 0x1090, 2) , (register, 0x1090, 2) , (register, 0x1090, 2)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(stack, 0xffffffffffffff28, 16) INT_OR (stack, 0xffffffffffffff28, 16) , (const, 0x1, 16), (stack, 0xffffffffffffff28, 16) MULTIEQUAL (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16)]
[(stack, 0xffffffffffffff70, 8) COPY (stack, 0xffffffffffffff90, 8), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(unique, 0x1000296c, 8) COPY (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x46e005, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (const, 0x0, 4) , (unique, 0x100030e5, 4), (unique, 0x100030e5, 4) CAST (register, 0x30, 4)]
[(stack, 0xffffffffffffff0c, 4) MULTIEQUAL (stack, 0xffffffffffffff0c, 4) , (stack, 0xffffffffffffff0c, 4) , (stack, 0xffffffffffffff0c, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff52, 2) MULTIEQUAL (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff18, 16) MULTIEQUAL (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee4, 4) MULTIEQUAL (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffec4, 4) MULTIEQUAL (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4)]
[(stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(ram, 0x4ae3d0, 8) MULTIEQUAL (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8)]
[(ram, 0x4ae3c8, 8) MULTIEQUAL (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8)]
[(ram, 0x4ae3c0, 8) MULTIEQUAL (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8)]
[(ram, 0x4ae3b0, 8) MULTIEQUAL (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8)]
[(ram, 0x4ae3a0, 10) MULTIEQUAL (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10)]
[(ram, 0x4ae390, 8) MULTIEQUAL (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8)]
[(ram, 0x4ae380, 16) MULTIEQUAL (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16)]
[(register, 0x1090, 2) MULTIEQUAL (register, 0x1090, 2) , (register, 0x1090, 2) , (register, 0x1090, 2)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(stack, 0xffffffffffffff60, 4) COPY (stack, 0xffffffffffffff28, 4), (stack, 0xffffffffffffff28, 4) SUBPIECE (stack, 0xffffffffffffff28, 16) , (const, 0x0, 8), (stack, 0xffffffffffffff28, 16) MULTIEQUAL (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16)]
[(unique, 0x10002b24, 8) COPY (stack, 0xffffffffffffff18, 8)]
[ ---  BRANCH (ram, 0x46c390, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100030e9, 8) , (const, 0x46d281, 8), (unique, 0x100030e9, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x10001293, 8) , (unique, 0x10001798, 8) , (const, 0x1, 8), (unique, 0x10001798, 8) INT_ADD (unique, 0x1000047d, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x25b2, 4)]
[(register, 0x1090, 2) INDIRECT (register, 0x1090, 2) , (const, 0x25b2, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x25b2, 4)]
[(stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x25b2, 4)]
[(stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x25b2, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x25b2, 4)]
[(stack, 0xfffffffffffffee4, 4) INDIRECT (stack, 0xfffffffffffffee4, 4) , (const, 0x25b2, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x25b2, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x25b2, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x25b2, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x25b2, 4)]
[(stack, 0xffffffffffffff0c, 4) INDIRECT (stack, 0xffffffffffffff0c, 4) , (const, 0x25b2, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x25b2, 4)]
[(stack, 0xffffffffffffff18, 16) INDIRECT (stack, 0xffffffffffffff18, 16) , (const, 0x25b2, 4)]
[(stack, 0xffffffffffffff28, 16) INDIRECT (stack, 0xffffffffffffff28, 16) , (const, 0x25b2, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x25b2, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x25b2, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x25b2, 4)]
[(stack, 0xffffffffffffff52, 2) INDIRECT (stack, 0xffffffffffffff52, 2) , (const, 0x25b2, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x25b2, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x25b2, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x25b2, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x25b2, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x25b2, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x25b2, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x25b2, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x25b2, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x25b2, 4)]
[(stack, 0xffffffffffffff70, 8) COPY (unique, 0x3100, 8), (unique, 0x3100, 8) INT_ADD (stack, 0xffffffffffffff70, 8) , (const, 0x1, 8), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x25b2, 4)]
[(ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x25c2, 4), (ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x25b2, 4)]
[(ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x25c2, 4), (ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x25b2, 4)]
[(ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x25c2, 4), (ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x25b2, 4)]
[(ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x25c2, 4), (ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x25b2, 4)]
[(ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x25c2, 4), (ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x25b2, 4)]
[(ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x25c2, 4), (ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x25b2, 4)]
[(ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x25c2, 4), (ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x25b2, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3400, 8) , (register, 0x0, 8), (unique, 0x3400, 8) PTRADD (stack, 0xffffffffffffff68, 8) , (unique, 0x100028b4, 8) , (const, 0x8, 8), (unique, 0x100028b4, 8) COPY (stack, 0xffffffffffffff70, 8), (register, 0x0, 8) CALL (ram, 0x489d30, 8) , (register, 0x38, 8) , (register, 0xb8, 8) , (stack, 0xffffffffffffff70, 8) , (register, 0x8, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x25b2, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x25b2, 4), (register, 0x8, 4) INT_ADD (stack, 0xffffffffffffff60, 4) , (register, 0xb0, 4)]
[(stack, 0xffffffffffffff60, 4) COPY (const, 0x0, 4)]
[(unique, 0x10002b1c, 8) COPY (register, 0x38, 8)]
[ ---  BRANCH (ram, 0x46c390, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (unique, 0x100013c2, 8) , (unique, 0x100013c2, 8) , (unique, 0x100013c2, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (unique, 0x100013c2, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (unique, 0x100013ba, 8) , (unique, 0x100013ba, 8) , (unique, 0x100013ba, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (unique, 0x100013ba, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (unique, 0x100013b2, 8) , (unique, 0x100013b2, 8) , (unique, 0x100013b2, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (unique, 0x100013b2, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (unique, 0x100013aa, 8) , (unique, 0x100013aa, 8) , (unique, 0x100013aa, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (unique, 0x100013aa, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (unique, 0x100013a2, 8) , (unique, 0x100013a2, 8) , (unique, 0x100013a2, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (unique, 0x100013a2, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (unique, 0x1000139a, 8) , (unique, 0x1000139a, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (unique, 0x1000139a, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (unique, 0x10001392, 8) , (unique, 0x10001392, 8) , (unique, 0x10001392, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (unique, 0x10001392, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (unique, 0x1000138a, 8) , (unique, 0x1000138a, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (unique, 0x1000138a, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (unique, 0x10001382, 8) , (unique, 0x10001382, 8) , (unique, 0x10001382, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (unique, 0x10001382, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 4) MULTIEQUAL (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4)]
[(stack, 0xffffffffffffff58, 4) MULTIEQUAL (unique, 0x1000137a, 4) , (unique, 0x1000137a, 4) , (unique, 0x1000137a, 4) , (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4) , (unique, 0x1000137a, 4) , (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (unique, 0x10001376, 4) , (unique, 0x10001376, 4) , (unique, 0x10001376, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (unique, 0x10001376, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff52, 2) MULTIEQUAL (unique, 0x10001374, 2) , (unique, 0x10001374, 2) , (unique, 0x10001374, 2) , (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2) , (unique, 0x10001374, 2) , (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (unique, 0x10001368, 4) , (unique, 0x10001368, 4) , (unique, 0x10001368, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (unique, 0x10001368, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (unique, 0x10001364, 4) , (unique, 0x10001364, 4) , (unique, 0x10001364, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (unique, 0x10001364, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff28, 16) MULTIEQUAL (unique, 0x10001354, 16) , (unique, 0x10001354, 16) , (unique, 0x10001354, 16) , (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16) , (unique, 0x10001354, 16) , (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (unique, 0x1000133c, 8) , (unique, 0x1000133c, 8) , (unique, 0x1000133c, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (unique, 0x1000133c, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (unique, 0x1000132c, 8) , (unique, 0x1000132c, 8) , (unique, 0x1000132c, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (unique, 0x1000132c, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (unique, 0x10001324, 8) , (unique, 0x10001324, 8) , (unique, 0x10001324, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (unique, 0x10001324, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (unique, 0x1000131c, 8) , (unique, 0x1000131c, 8) , (unique, 0x1000131c, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (unique, 0x1000131c, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (unique, 0x10001314, 8) , (unique, 0x10001314, 8) , (unique, 0x10001314, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (unique, 0x10001314, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee4, 4) MULTIEQUAL (unique, 0x10001310, 4) , (unique, 0x10001310, 4) , (unique, 0x10001310, 4) , (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4) , (unique, 0x10001310, 4) , (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (unique, 0x10001308, 8) , (unique, 0x10001308, 8) , (unique, 0x10001308, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (unique, 0x10001308, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffec4, 4) MULTIEQUAL (unique, 0x10001304, 4) , (unique, 0x10001304, 4) , (unique, 0x10001304, 4) , (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4) , (unique, 0x10001304, 4) , (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4)]
[(stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (unique, 0x10001300, 4) , (unique, 0x10001300, 4) , (unique, 0x10001300, 4) , (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4) , (unique, 0x10001300, 4) , (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (unique, 0x100012f8, 8) , (unique, 0x100012f8, 8) , (unique, 0x100012f8, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (unique, 0x100012f8, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(ram, 0x4ae3d0, 8) MULTIEQUAL (unique, 0x100012f0, 8) , (unique, 0x100012f0, 8) , (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8) , (unique, 0x100012f0, 8) , (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8)]
[(ram, 0x4ae3c8, 8) MULTIEQUAL (unique, 0x100012e8, 8) , (unique, 0x100012e8, 8) , (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8) , (unique, 0x100012e8, 8) , (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8)]
[(ram, 0x4ae3c0, 8) MULTIEQUAL (unique, 0x100012e0, 8) , (unique, 0x100012e0, 8) , (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8) , (unique, 0x100012e0, 8) , (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8)]
[(ram, 0x4ae3b0, 8) MULTIEQUAL (unique, 0x100012d8, 8) , (unique, 0x100012d8, 8) , (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8) , (unique, 0x100012d8, 8) , (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8)]
[(ram, 0x4ae3a0, 10) MULTIEQUAL (unique, 0x100012ce, 10) , (unique, 0x100012ce, 10) , (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10) , (unique, 0x100012ce, 10) , (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10)]
[(ram, 0x4ae390, 8) MULTIEQUAL (unique, 0x100012c6, 8) , (unique, 0x100012c6, 8) , (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8) , (unique, 0x100012c6, 8) , (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8)]
[(ram, 0x4ae380, 16) MULTIEQUAL (unique, 0x100012b6, 16) , (unique, 0x100012b6, 16) , (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16) , (unique, 0x100012b6, 16) , (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16)]
[(register, 0x1090, 2) MULTIEQUAL (unique, 0x100012ac, 2) , (unique, 0x100012ac, 2) , (unique, 0x100012ac, 2) , (register, 0x1090, 2) , (register, 0x1090, 2) , (register, 0x1090, 2) , (unique, 0x100012ac, 2) , (register, 0x1090, 2) , (register, 0x1090, 2)]
[(register, 0xa0, 8) MULTIEQUAL (unique, 0x10002b2c, 8) , (unique, 0x10002b2c, 8) , (unique, 0x10002b2c, 8) , (unique, 0x10002b2c, 8) , (unique, 0x10002b2c, 8) , (unique, 0x10002b2c, 8) , (unique, 0x10002b2c, 8) , (unique, 0x10002b1c, 8) , (unique, 0x10002b24, 8)]
[(stack, 0xfffffffffffffec0, 4) COPY (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (stack, 0xffffffffffffff40, 8) , (const, 0x1, 8) , (const, 0x4, 8), (stack, 0xffffffffffffff40, 8) MULTIEQUAL (unique, 0x1000136c, 8) , (unique, 0x1000136c, 8) , (unique, 0x1000136c, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (unique, 0x1000136c, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff08, 8) CAST (unique, 0x10003101, 8), (unique, 0x10003101, 8) INT_ADD (unique, 0x10002174, 8) , (unique, 0xbc80, 4), (unique, 0x10002174, 8) INT_LEFT (unique, 0x1000216c, 8) , (const, 0x20, 8), (unique, 0x1000216c, 8) INT_SEXT (unique, 0x100030fd, 4), (unique, 0x100030fd, 4) CAST (stack, 0xffffffffffffff0c, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (stack, 0xffffffffffffff40, 8), (stack, 0xffffffffffffff40, 8) MULTIEQUAL (unique, 0x1000136c, 8) , (unique, 0x1000136c, 8) , (unique, 0x1000136c, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (unique, 0x1000136c, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8), (stack, 0xffffffffffffff0c, 4) MULTIEQUAL (unique, 0x100013ca, 4) , (unique, 0x100013ca, 4) , (unique, 0x100013ca, 4) , (stack, 0xffffffffffffff0c, 4) , (stack, 0xffffffffffffff0c, 4) , (stack, 0xffffffffffffff0c, 4) , (unique, 0x100013ca, 4) , (stack, 0xffffffffffffff0c, 4) , (stack, 0xffffffffffffff0c, 4)]
[(stack, 0xfffffffffffffebc, 4) COPY (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) CAST (unique, 0x10003109, 8), (unique, 0x10003109, 8) INT_ADD (unique, 0xbd80, 8) , (unique, 0x3300, 8), (unique, 0x3300, 8) INT_MULT (register, 0x10, 8) , (const, 0x4, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x100030f5, 8), (unique, 0x100030f5, 8) INT_ADD (register, 0x110, 8) , (const, 0xffffffffffffffe0, 8), (register, 0x10, 8) INT_SEXT (unique, 0x100030f1, 4), (unique, 0x100030f1, 4) CAST (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (stack, 0xffffffffffffff40, 8) , (const, 0x2, 8) , (const, 0x4, 8), (register, 0x110, 8) MULTIEQUAL (unique, 0x100012a4, 8) , (unique, 0x100012a4, 8) , (unique, 0x100012a4, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (unique, 0x100012a4, 8) , (register, 0x110, 8) , (register, 0x110, 8), (stack, 0xffffffffffffff40, 8) MULTIEQUAL (unique, 0x1000136c, 8) , (unique, 0x1000136c, 8) , (unique, 0x1000136c, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (unique, 0x1000136c, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff1c, 12) SUBPIECE (stack, 0xffffffffffffff18, 16) , (const, 0x4, 8), (stack, 0xffffffffffffff18, 16) MULTIEQUAL (unique, 0x10001344, 16) , (unique, 0x10001344, 16) , (unique, 0x10001344, 16) , (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16) , (unique, 0x10001344, 16) , (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16)]
[ ---  CBRANCH (ram, 0x46d378, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 1) , (const, 0x65, 1), (register, 0x0, 1) SUBPIECE (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) CAST (unique, 0x10003109, 8), (unique, 0x10003109, 8) INT_ADD (unique, 0xbd80, 8) , (unique, 0x3300, 8), (unique, 0x3300, 8) INT_MULT (register, 0x10, 8) , (const, 0x4, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x100030f5, 8), (unique, 0x100030f5, 8) INT_ADD (register, 0x110, 8) , (const, 0xffffffffffffffe0, 8), (register, 0x10, 8) INT_SEXT (unique, 0x100030f1, 4), (unique, 0x100030f1, 4) CAST (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (stack, 0xffffffffffffff40, 8) , (const, 0x2, 8) , (const, 0x4, 8), (register, 0x110, 8) MULTIEQUAL (unique, 0x100012a4, 8) , (unique, 0x100012a4, 8) , (unique, 0x100012a4, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (unique, 0x100012a4, 8) , (register, 0x110, 8) , (register, 0x110, 8), (stack, 0xffffffffffffff40, 8) MULTIEQUAL (unique, 0x1000136c, 8) , (unique, 0x1000136c, 8) , (unique, 0x1000136c, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (unique, 0x1000136c, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(register, 0x0, 8) INT_SEXT (unique, 0x10003111, 4), (unique, 0x10003111, 4) CAST (unique, 0xbc80, 4)]
[(stack, 0xffffffffffffff5c, 4) COPY (unique, 0xbc80, 4)]
[ ---  CBRANCH (ram, 0x46da97, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (unique, 0x10003115, 4) , (const, 0x0, 4), (unique, 0x10003115, 4) CAST (unique, 0xbc80, 4)]
[(stack, 0xfffffffffffffed8, 8) COPY (const, 0xe, 8)]
[(stack, 0xffffffffffffff08, 8) CAST (unique, 0x1000311d, 8), (unique, 0x1000311d, 8) INT_ADD (unique, 0x10002504, 8) , (const, 0x6, 4), (unique, 0x10002504, 8) INT_LEFT (unique, 0x100024fc, 8) , (const, 0x20, 8), (unique, 0x100024fc, 8) INT_SEXT (unique, 0x10003119, 4), (unique, 0x10003119, 4) CAST (stack, 0xffffffffffffff0c, 4)]
[ ---  BRANCH (ram, 0x46d394, 1)]
[(stack, 0xfffffffffffffed8, 8) COPY (register, 0x0, 8), (register, 0x0, 8) INT_ADD (register, 0x0, 8) , (const, 0x8, 8)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(register, 0x30, 4) COPY (const, 0x1, 4)]
[(stack, 0xfffffffffffffed0, 4) COPY (const, 0x7fffffff, 4)]
[(stack, 0xfffffffffffffee0, 4) COPY (const, 0x1, 4)]
[(stack, 0xffffffffffffff18, 16) INT_ADD (unique, 0x1000247c, 16) , (stack, 0xffffffffffffff08, 4), (unique, 0x1000247c, 16) INT_LEFT (unique, 0x1000246c, 16) , (const, 0x20, 16), (unique, 0x1000246c, 16) INT_SEXT (stack, 0xffffffffffffff1c, 12), (stack, 0xffffffffffffff08, 4) SUBPIECE (stack, 0xffffffffffffff08, 8) , (const, 0x0, 8), (stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[ ---  BRANCH (ram, 0x46c466, 1)]
[ ---  CBRANCH (ram, 0x46d4a8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 1) , (const, 0x66, 1)]
[(stack, 0xfffffffffffffed0, 4) COPY (const, 0x6, 4)]
[(register, 0x206, 1) INT_NOTEQUAL (unique, 0xbc80, 4) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x46c3f4, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (const, 0xffffffff, 4) , (unique, 0x10003125, 4), (unique, 0x10003125, 4) CAST (unique, 0xbc80, 4)]
[(unique, 0x10002bfc, 4) COPY (register, 0x0, 4), (register, 0x0, 4) COPY (const, 0x1, 4)]
[ ---  CBRANCH (ram, 0x46c3ee, 1) , (register, 0x206, 1)]
[(unique, 0x10002c00, 4) COPY (unique, 0xbc80, 4)]
[(stack, 0xfffffffffffffed0, 4) COPY (register, 0x0, 4), (register, 0x0, 4) MULTIEQUAL (unique, 0x10002bfc, 4) , (unique, 0x10002c00, 4)]
[(stack, 0xfffffffffffffed0, 4) MULTIEQUAL (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4)]
[ ---  CBRANCH (ram, 0x46d530, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffff58, 4) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x46d950, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (unique, 0x10003129, 4) , (unique, 0x1000312d, 4), (unique, 0x1000312d, 4) CAST (stack, 0xfffffffffffffed0, 4), (unique, 0x10003129, 4) CAST (stack, 0xffffffffffffff60, 4)]
[(stack, 0xffffffffffffff5c, 4) COPY (const, 0x66, 4)]
[(stack, 0xfffffffffffffee0, 4) COPY (register, 0x0, 4), (register, 0x0, 4) INT_ADD (stack, 0xffffffffffffff60, 4) , (const, 0x1, 4)]
[(register, 0x18, 4) INT_SUB (stack, 0xfffffffffffffed0, 4) , (register, 0x0, 4), (register, 0x0, 4) INT_ADD (stack, 0xffffffffffffff60, 4) , (const, 0x1, 4)]
[ ---  BRANCH (ram, 0x46c433, 1)]
[ ---  CBRANCH (ram, 0x46d950, 1) , (unique, 0xd080, 1), (unique, 0xd080, 1) INT_SLESS (const, 0x4, 4) , (unique, 0x10003131, 4), (unique, 0x10003131, 4) CAST (stack, 0xffffffffffffff60, 4)]
[(stack, 0xffffffffffffff5c, 4) COPY (const, 0x66, 4)]
[(stack, 0xfffffffffffffee0, 4) COPY (const, 0x0, 4)]
[(unique, 0x10002d08, 4) COPY (stack, 0xfffffffffffffed0, 4)]
[(unique, 0x10001225, 4) MULTIEQUAL (unique, 0x10002d08, 4) , (register, 0x18, 4)]
[(stack, 0xfffffffffffffee0, 4) MULTIEQUAL (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4)]
[(stack, 0xffffffffffffff5c, 4) COPY (const, 0x66, 4)]
[(stack, 0xfffffffffffffed8, 8) COPY (register, 0x0, 8), (register, 0x0, 8) INT_ADD (register, 0x0, 8) , (const, 0x5, 8), (register, 0x0, 8) INT_SEXT (unique, 0x10003135, 4), (unique, 0x10003135, 4) CAST (stack, 0xfffffffffffffed0, 4)]
[(stack, 0xfffffffffffffee0, 4) COPY (const, 0x1, 4)]
[(stack, 0xffffffffffffff5c, 4) COPY (register, 0x18, 4), (register, 0x18, 4) INT_SUB (unique, 0xbc80, 4) , (const, 0x2, 4)]
[(stack, 0xfffffffffffffed8, 8) COPY (register, 0x0, 8), (register, 0x0, 8) INT_ADD (register, 0x0, 8) , (const, 0x8, 8), (register, 0x0, 8) INT_SEXT (unique, 0x10003139, 4), (unique, 0x10003139, 4) CAST (register, 0x0, 4), (register, 0x0, 4) INT_SUB (stack, 0xfffffffffffffed0, 4) , (const, 0x1, 4)]
[ ---  BRANCH (ram, 0x46c44a, 1)]
[(stack, 0xffffffffffffff5c, 4) MULTIEQUAL (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4)]
[(stack, 0xfffffffffffffee0, 4) MULTIEQUAL (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xffffffffffffff18, 16) INT_ADD (unique, 0x1000218c, 16) , (unique, 0x10001229, 4), (unique, 0x1000218c, 16) INT_LEFT (unique, 0x1000217c, 16) , (const, 0x20, 16), (unique, 0x1000217c, 16) INT_SEXT (stack, 0xffffffffffffff1c, 12), (unique, 0x10001229, 4) MULTIEQUAL (unique, 0x10001225, 4) , (register, 0x0, 4)]
[(register, 0x30, 4) COPY (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x46c460, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x58c00, 1) , (const, 0x0, 1), (unique, 0x58c00, 1) INT_AND (unique, 0xbb00, 1) , (const, 0x8, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x1000313d, 8), (unique, 0x1000313d, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (stack, 0xffffffffffffff40, 8) , (const, 0x3, 8) , (const, 0x4, 8)]
[(register, 0x0, 4) COPY (const, 0x0, 4)]
[(stack, 0xffffffffffffff08, 8) CAST (unique, 0x10003149, 8), (unique, 0x10003149, 8) INT_ADD (unique, 0x100021a4, 8) , (register, 0x0, 4), (unique, 0x100021a4, 8) INT_LEFT (unique, 0x1000219c, 8) , (const, 0x20, 8), (unique, 0x1000219c, 8) INT_SEXT (unique, 0x10003145, 4), (unique, 0x10003145, 4) CAST (stack, 0xffffffffffffff0c, 4), (register, 0x0, 4) MULTIEQUAL (unique, 0x10001229, 4) , (register, 0x0, 4)]
[(stack, 0xffffffffffffff5c, 4) COPY (const, 0x66, 4)]
[(register, 0x10, 8) INT_SEXT (unique, 0x10003151, 4), (unique, 0x10003151, 4) CAST (unique, 0xbc80, 4)]
[ ---  CBRANCH (ram, 0x46d4c8, 1) , (register, 0x207, 1), (register, 0x207, 1) INT_SLESS (unique, 0x10003155, 4) , (const, 0x0, 4), (unique, 0x10003155, 4) CAST (unique, 0xbc80, 4)]
[(stack, 0xffffffffffffff08, 8) CAST (unique, 0x1000315d, 8), (unique, 0x1000315d, 8) INT_ADD (unique, 0x10002494, 8) , (const, 0x6, 4), (unique, 0x10002494, 8) INT_LEFT (unique, 0x1000248c, 8) , (const, 0x20, 8), (unique, 0x1000248c, 8) INT_SEXT (unique, 0x10003159, 4), (unique, 0x10003159, 4) CAST (stack, 0xffffffffffffff0c, 4)]
[(register, 0x10, 8) COPY (const, 0x6, 8)]
[(register, 0x10, 8) MULTIEQUAL (register, 0x10, 8) , (register, 0x10, 8)]
[(stack, 0xfffffffffffffed4, 4) COPY (stack, 0xffffffffffffff58, 4)]
[(stack, 0xffffffffffffff08, 4) SUBPIECE (stack, 0xffffffffffffff08, 8) , (const, 0x0, 8), (stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[ ---  CBRANCH (ram, 0x46dda8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffff58, 4) , (const, 0x0, 4)]
[(register, 0x30, 4) COPY (const, 0x1, 4)]
[(stack, 0xfffffffffffffed0, 4) COPY (const, 0x7fffffff, 4)]
[(stack, 0xfffffffffffffed8, 8) COPY (unique, 0x3100, 8), (unique, 0x3100, 8) INT_ADD (register, 0x10, 8) , (const, 0x2, 8)]
[(stack, 0xfffffffffffffee0, 4) COPY (const, 0x1, 4)]
[(stack, 0xffffffffffffff18, 16) INT_ADD (unique, 0x100025dc, 16) , (stack, 0xffffffffffffff08, 4), (unique, 0x100025dc, 16) INT_LEFT (unique, 0x100025cc, 16) , (const, 0x20, 16), (unique, 0x100025cc, 16) INT_SEXT (stack, 0xffffffffffffff1c, 12)]
[ ---  BRANCH (ram, 0x46c466, 1)]
[(stack, 0xffffffffffffff5c, 4) MULTIEQUAL (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4)]
[(stack, 0xffffffffffffff18, 16) MULTIEQUAL (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xfffffffffffffee0, 4) MULTIEQUAL (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 4) MULTIEQUAL (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4)]
[(register, 0x30, 4) MULTIEQUAL (register, 0x30, 4) , (register, 0x30, 4) , (register, 0x30, 4)]
[(register, 0x10, 8) MULTIEQUAL (register, 0x10, 8) , (register, 0x10, 8) , (register, 0x10, 8)]
[ ---  CBRANCH (ram, 0x46d420, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffff10, 8) , (const, 0x0, 8)]
[(stack, 0xfffffffffffffed4, 4) COPY (const, 0x0, 4)]
[ ---  BRANCH (ram, 0x46c501, 1)]
[(register, 0x30, 4) COPY (const, 0x1, 4)]
[(stack, 0xfffffffffffffed0, 4) COPY (const, 0x7fffffff, 4)]
[(stack, 0xfffffffffffffed8, 8) COPY (unique, 0x3a00, 8), (unique, 0x3a00, 8) INT_ADD (unique, 0x3880, 8) , (register, 0x0, 8), (unique, 0x3880, 8) INT_ADD (register, 0x10, 8) , (const, 0x2, 8), (register, 0x0, 8) INT_SEXT (unique, 0x10003165, 4), (unique, 0x10003165, 4) CAST (stack, 0xffffffffffffff60, 4)]
[(stack, 0xfffffffffffffee0, 4) COPY (register, 0x18, 4), (register, 0x18, 4) INT_ADD (stack, 0xffffffffffffff60, 4) , (const, 0x1, 4)]
[(stack, 0xffffffffffffff18, 16) INT_ADD (unique, 0x100024ac, 16) , (stack, 0xffffffffffffff08, 4), (unique, 0x100024ac, 16) INT_LEFT (unique, 0x1000249c, 16) , (const, 0x20, 16), (unique, 0x1000249c, 16) INT_SEXT (stack, 0xffffffffffffff1c, 12)]
[ ---  CBRANCH (ram, 0x46c474, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffff10, 8) , (const, 0x0, 8)]
[(stack, 0xffffffffffffff5c, 4) MULTIEQUAL (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4)]
[(stack, 0xffffffffffffff18, 16) MULTIEQUAL (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xfffffffffffffee0, 4) MULTIEQUAL (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed0, 4) MULTIEQUAL (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4)]
[(register, 0x30, 4) MULTIEQUAL (register, 0x30, 4) , (register, 0x30, 4)]
[(register, 0x10, 8) MULTIEQUAL (register, 0x10, 8) , (register, 0x10, 8)]
[(stack, 0xffffffffffffff28, 16) INT_ADD (unique, 0x100021bc, 16) , (unique, 0xbb00, 1), (unique, 0x100021bc, 16) INT_LEFT (unique, 0x100021ac, 16) , (const, 0x8, 16), (unique, 0x100021ac, 16) INT_SEXT (stack, 0xffffffffffffff29, 15), (stack, 0xffffffffffffff29, 15) SUBPIECE (stack, 0xffffffffffffff28, 16) , (const, 0x1, 8), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (stack, 0xffffffffffffff10, 8)]
[ ---  CBRANCH (ram, 0x46d490, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (unique, 0x10003169, 1) , (const, 0x7e, 1), (unique, 0x10003169, 1) CAST (register, 0x0, 1), (register, 0x0, 1) INT_SUB (unique, 0xbb00, 1) , (const, 0x1, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xfffffffffffffed4, 4) COPY (const, 0x0, 4)]
[(register, 0x0, 8) COPY (const, 0x1, 8)]
[ ---  BRANCH (ram, 0x46c4e3, 1)]
[(register, 0x10, 8) INT_ZEXT (stack, 0xfffffffffffffee0, 4)]
[(unique, 0x10002914, 8) COPY (stack, 0xffffffffffffff10, 8)]
[(unique, 0x10002c04, 4) COPY (register, 0x88, 4), (register, 0x88, 4) COPY (const, 0x0, 4)]
[ ---  BRANCH (ram, 0x46c4cd, 1)]
[(register, 0x88, 4) MULTIEQUAL (unique, 0x10002c04, 4) , (unique, 0x10002c08, 4)]
[ ---  CBRANCH (ram, 0x46c4a8, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESSEQUAL (register, 0x10, 4) , (register, 0x38, 4), (register, 0x10, 4) SUBPIECE (register, 0x10, 8) , (const, 0x0, 4), (register, 0x38, 4) INT_SEXT (unique, 0x1000316a, 1), (unique, 0x1000316a, 1) CAST (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x10002914, 8) , (register, 0x0, 8), (register, 0x10, 8) MULTIEQUAL (register, 0x10, 8) , (register, 0x10, 8)]
[(stack, 0xfffffffffffffed4, 4) COPY (register, 0x88, 4)]
[(register, 0x0, 8) INT_SEXT (register, 0x0, 4), (register, 0x0, 4) INT_ADD (register, 0x88, 4) , (const, 0x1, 4)]
[(register, 0x0, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[(register, 0x8, 4) INT_ADD (register, 0x88, 4) , (const, 0x1, 4)]
[(register, 0x10, 8) INT_ZEXT (register, 0x10, 4), (register, 0x10, 4) INT_SUB (register, 0x10, 4) , (register, 0x38, 4)]
[ ---  CBRANCH (ram, 0x46da08, 1) , (unique, 0xc900, 1), (unique, 0xc900, 1) INT_LESS (const, 0x7e, 1) , (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[(stack, 0xfffffffffffffed4, 4) COPY (register, 0x8, 4)]
[(register, 0x0, 8) INT_SEXT (unique, 0x3100, 4), (unique, 0x3100, 4) INT_ADD (register, 0x88, 4) , (const, 0x2, 4)]
[ ---  BRANCH (ram, 0x46c4e3, 1)]
[(unique, 0x10002c08, 4) COPY (register, 0x8, 4)]
[ ---  CBRANCH (ram, 0x46da19, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x0, 1)]
[(unique, 0x2e680, 8) INT_REM (unique, 0x2e300, 8) , (unique, 0x2e180, 8), (unique, 0x2e300, 8) INT_ZEXT (register, 0x0, 4), (unique, 0x2e180, 8) INT_ZEXT (register, 0x38, 4), (register, 0x0, 4) INT_SUB (register, 0x10, 4) , (const, 0x1, 4)]
[(stack, 0xfffffffffffffed4, 4) COPY (register, 0x0, 4), (register, 0x0, 4) INT_ADD (unique, 0x10000e74, 4) , (register, 0x8, 4), (unique, 0x10000e74, 4) INT_DIV (register, 0x0, 4) , (register, 0x38, 4), (register, 0x0, 4) INT_SUB (register, 0x10, 4) , (const, 0x1, 4)]
[(register, 0x0, 8) INT_SEXT (register, 0x0, 4), (register, 0x0, 4) INT_ADD (register, 0x0, 4) , (const, 0x1, 4), (register, 0x0, 4) INT_ADD (unique, 0x10000e74, 4) , (register, 0x8, 4), (unique, 0x10000e74, 4) INT_DIV (register, 0x0, 4) , (register, 0x38, 4), (register, 0x0, 4) INT_SUB (register, 0x10, 4) , (const, 0x1, 4)]
[ ---  BRANCH (ram, 0x46c4e3, 1)]
[(stack, 0xfffffffffffffed4, 4) MULTIEQUAL (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4)]
[(register, 0x10, 8) MULTIEQUAL (register, 0x10, 8) , (unique, 0x2e680, 8) , (register, 0x10, 8) , (register, 0x10, 8)]
[(stack, 0xfffffffffffffed8, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) INT_ADD (stack, 0xfffffffffffffed8, 8) , (register, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8) , (register, 0x0, 8) , (register, 0x0, 8)]
[(stack, 0xffffffffffffff5c, 4) MULTIEQUAL (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4)]
[(stack, 0xffffffffffffff28, 16) MULTIEQUAL (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16)]
[(stack, 0xffffffffffffff18, 16) MULTIEQUAL (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xfffffffffffffee0, 4) MULTIEQUAL (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4)]
[(stack, 0xfffffffffffffed4, 4) MULTIEQUAL (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4)]
[(stack, 0xfffffffffffffed0, 4) MULTIEQUAL (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4)]
[(register, 0x30, 4) MULTIEQUAL (register, 0x30, 4) , (register, 0x30, 4)]
[(register, 0x10, 8) MULTIEQUAL (register, 0x10, 8) , (register, 0x10, 8)]
[ ---  CBRANCH (ram, 0x46d930, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (stack, 0xfffffffffffffed8, 8) , (const, 0x3ffffffffffffffd, 8), (stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xfffffffffffffee0, 4) MULTIEQUAL (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4)]
[(stack, 0xfffffffffffffed4, 4) MULTIEQUAL (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4)]
[(stack, 0xfffffffffffffed0, 4) MULTIEQUAL (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4)]
[(register, 0x10, 8) MULTIEQUAL (register, 0x10, 8) , (register, 0x10, 8)]
[(unique, 0x100028a8, 4) COPY (stack, 0xffffffffffffff5c, 4), (stack, 0xffffffffffffff5c, 4) MULTIEQUAL (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4)]
[(stack, 0xffffffffffffff28, 16) INT_ADD (unique, 0x100021dc, 16) , (register, 0x30, 4), (unique, 0x100021dc, 16) INT_LEFT (unique, 0x100021cc, 16) , (const, 0x20, 16), (unique, 0x100021cc, 16) INT_SEXT (stack, 0xffffffffffffff2c, 12), (stack, 0xffffffffffffff2c, 12) SUBPIECE (stack, 0xffffffffffffff28, 16) , (const, 0x4, 8), (register, 0x30, 4) MULTIEQUAL (register, 0x30, 4) , (register, 0x30, 4), (stack, 0xffffffffffffff28, 16) MULTIEQUAL (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16)]
[ ---  CBRANCH (ram, 0x46d930, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESSEQUAL (unique, 0x1000316f, 8) , (stack, 0xfffffffffffffed8, 8), (unique, 0x1000316f, 8) CAST (register, 0x0, 8), (register, 0x0, 8) INT_SEXT (unique, 0x1000316b, 4), (unique, 0x1000316b, 4) CAST (stack, 0xffffffffffffff18, 4), (stack, 0xffffffffffffff18, 4) SUBPIECE (stack, 0xffffffffffffff18, 16) , (const, 0x0, 8), (stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8), (stack, 0xffffffffffffff18, 16) MULTIEQUAL (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10003177, 8) , (const, 0x46c52e, 8), (unique, 0x10003177, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x10001293, 8) , (unique, 0x10001858, 8) , (const, 0x1, 8), (unique, 0x10001858, 8) INT_ADD (unique, 0x1000047d, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xc7f, 4)]
[(register, 0x1090, 2) INDIRECT (register, 0x1090, 2) , (const, 0xc7f, 4)]
[(ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0xc7f, 4)]
[(ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0xc7f, 4)]
[(ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0xc7f, 4)]
[(ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0xc7f, 4)]
[(ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0xc7f, 4)]
[(ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0xc7f, 4)]
[(ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0xc7f, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0xc7f, 4)]
[(stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0xc7f, 4)]
[(stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0xc7f, 4)]
[(stack, 0xfffffffffffffec0, 4) INDIRECT (stack, 0xfffffffffffffec0, 4) , (const, 0xc7f, 4)]
[(stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0xc7f, 4)]
[(stack, 0xfffffffffffffed0, 4) INDIRECT (stack, 0xfffffffffffffed0, 4) , (const, 0xc7f, 4)]
[(stack, 0xfffffffffffffed4, 4) INDIRECT (stack, 0xfffffffffffffed4, 4) , (const, 0xc7f, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0xc7f, 4)]
[(stack, 0xfffffffffffffee0, 4) INDIRECT (stack, 0xfffffffffffffee0, 4) , (const, 0xc7f, 4)]
[(stack, 0xfffffffffffffee4, 4) INDIRECT (stack, 0xfffffffffffffee4, 4) , (const, 0xc7f, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0xc7f, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0xc7f, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0xc7f, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0xc7f, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0xc7f, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0xc7f, 4)]
[(stack, 0xffffffffffffff18, 16) INDIRECT (stack, 0xffffffffffffff18, 16) , (const, 0xc7f, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0xc7f, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0xc7f, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0xc7f, 4)]
[(stack, 0xffffffffffffff52, 2) INDIRECT (stack, 0xffffffffffffff52, 2) , (const, 0xc7f, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0xc7f, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0xc7f, 4)]
[(stack, 0xffffffffffffff5c, 4) INDIRECT (stack, 0xffffffffffffff5c, 4) , (const, 0xc7f, 4)]
[(stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0xc7f, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0xc7f, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0xc7f, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0xc7f, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0xc7f, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0xc7f, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0xc7f, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0xc7f, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0xc7f, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xc7f, 4)]
[(stack, 0xffffffffffffff28, 4) SUBPIECE (stack, 0xffffffffffffff28, 16) , (const, 0x0, 8), (stack, 0xffffffffffffff28, 16) INDIRECT (stack, 0xffffffffffffff28, 16) , (const, 0xc7f, 4)]
[ ---  CBRANCH (ram, 0x46c545, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x421340, 8) , (unique, 0x3580, 8) , (register, 0x30, 4) , (register, 0x10, 8), (unique, 0x3580, 8) INT_ADD (unique, 0x3480, 8) , (const, 0x8, 8), (unique, 0x3480, 8) INT_MULT (stack, 0xfffffffffffffed8, 8) , (const, 0x4, 8)]
[ ---  CBRANCH (ram, 0x46dfba, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (const, 0x1000, 8) , (unique, 0x3580, 8)]
[(register, 0x10, 8) PTRADD (unique, 0x10001293, 8) , (unique, 0x10001860, 8) , (const, 0x1, 8), (unique, 0x10001860, 8) INT_SUB (unique, 0x1000047d, 8) , (register, 0xb8, 8), (register, 0xb8, 8) INT_AND (register, 0xb8, 8) , (const, 0xfffffffffffff000, 8), (register, 0xb8, 8) INT_ADD (unique, 0x3480, 8) , (const, 0x1f, 8)]
[(unique, 0x100005b7, 4) SUBPIECE (register, 0xb8, 8) , (const, 0x0, 4), (register, 0xb8, 8) INT_ADD (unique, 0x3480, 8) , (const, 0x1f, 8)]
[(unique, 0x10002d4c, 8) COPY (register, 0x20, 8)]
[(unique, 0x100013cf, 8) MULTIEQUAL (unique, 0x10002d4c, 8) , (unique, 0x10002d54, 8)]
[(unique, 0x100013d7, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x46c577, 1) , (unique, 0x100013ce, 1), (unique, 0x100013ce, 1) INT_NOTEQUAL (register, 0x20, 8) , (register, 0x10, 8), (register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8)]
[(register, 0x20, 8) PTRADD (unique, 0x100013cf, 8) , (const, 0xfffffffffffff000, 8) , (const, 0x1, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10003187, 8) , (unique, 0xbe00, 8), (unique, 0x10003187, 8) CAST (unique, 0x3c80, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x1000317f, 8), (unique, 0x1000317f, 8) CAST (unique, 0x3c80, 8), (unique, 0x3c80, 8) PTRADD (unique, 0x100013cf, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x20, 8) PTRADD (unique, 0x100013cf, 8) , (const, 0xfffffffffffff000, 8) , (const, 0x1, 8)]
[(unique, 0x10002d54, 8) COPY (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x100013cf, 8) , (const, 0xfffffffffffff000, 8) , (const, 0x1, 8)]
[(register, 0x20, 8) PTRADD (unique, 0x100013d7, 8) , (unique, 0x100005bf, 8) , (const, 0x1, 8), (unique, 0x100005bf, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_ZEXT (register, 0x0, 4), (register, 0x0, 4) INT_AND (unique, 0x100005b7, 4) , (const, 0xff0, 4)]
[ ---  CBRANCH (ram, 0x46c58a, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) INT_ZEXT (register, 0x0, 4), (register, 0x0, 4) INT_AND (unique, 0x100005b7, 4) , (const, 0xff0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10003197, 8) , (unique, 0xbe00, 8), (unique, 0x10003197, 8) CAST (unique, 0x3880, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x1000318f, 8), (unique, 0x1000318f, 8) CAST (unique, 0x3880, 8), (unique, 0x3880, 8) PTRADD (unique, 0x100013d7, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(stack, 0xfffffffffffffeb8, 4) COPY (const, 0x1, 4)]
[(stack, 0xfffffffffffffec8, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x100031a7, 8), (unique, 0x100031a7, 8) INT_AND (unique, 0x1000319f, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x1000319f, 8) CAST (unique, 0x3800, 8), (unique, 0x3800, 8) PTRADD (unique, 0x100013d7, 8) , (unique, 0x100018f0, 8) , (const, 0x1, 8), (unique, 0x100018f0, 8) INT_ADD (unique, 0x100005bf, 8) , (const, 0xf, 8)]
[(unique, 0x10002a1c, 8) COPY (register, 0x20, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100031af, 8) , (const, 0x46dfc2, 8), (unique, 0x100031af, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x10001293, 8) , (unique, 0x10001868, 8) , (const, 0x1, 8), (unique, 0x10001868, 8) INT_ADD (unique, 0x1000047d, 8) , (const, 0xfffffffffffffff8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1f3e, 4)]
[(register, 0x1090, 2) INDIRECT (register, 0x1090, 2) , (const, 0x1f3e, 4)]
[(ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x1f3e, 4)]
[(ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x1f3e, 4)]
[(ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x1f3e, 4)]
[(ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x1f3e, 4)]
[(ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x1f3e, 4)]
[(ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x1f3e, 4)]
[(ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x1f3e, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x1f3e, 4)]
[(stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x1f3e, 4)]
[(stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x1f3e, 4)]
[(stack, 0xfffffffffffffec0, 4) INDIRECT (stack, 0xfffffffffffffec0, 4) , (const, 0x1f3e, 4)]
[(stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x1f3e, 4)]
[(stack, 0xfffffffffffffed0, 4) INDIRECT (stack, 0xfffffffffffffed0, 4) , (const, 0x1f3e, 4)]
[(stack, 0xfffffffffffffed4, 4) INDIRECT (stack, 0xfffffffffffffed4, 4) , (const, 0x1f3e, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x1f3e, 4)]
[(stack, 0xfffffffffffffee0, 4) INDIRECT (stack, 0xfffffffffffffee0, 4) , (const, 0x1f3e, 4)]
[(stack, 0xfffffffffffffee4, 4) INDIRECT (stack, 0xfffffffffffffee4, 4) , (const, 0x1f3e, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x1f3e, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x1f3e, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x1f3e, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x1f3e, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x1f3e, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x1f3e, 4)]
[(stack, 0xffffffffffffff18, 16) INDIRECT (stack, 0xffffffffffffff18, 16) , (const, 0x1f3e, 4)]
[(stack, 0xffffffffffffff28, 16) INDIRECT (stack, 0xffffffffffffff28, 16) , (const, 0x1f3e, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x1f3e, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x1f3e, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x1f3e, 4)]
[(stack, 0xffffffffffffff52, 2) INDIRECT (stack, 0xffffffffffffff52, 2) , (const, 0x1f3e, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x1f3e, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x1f3e, 4)]
[(stack, 0xffffffffffffff5c, 4) INDIRECT (stack, 0xffffffffffffff5c, 4) , (const, 0x1f3e, 4)]
[(stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0x1f3e, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x1f3e, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x1f3e, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x1f3e, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x1f3e, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x1f3e, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x1f3e, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x1f3e, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x1f3e, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1f3e, 4)]
[(stack, 0xfffffffffffffec8, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x100031b7, 8), (unique, 0x100031b7, 8) CALL (ram, 0x426550, 8) , (unique, 0x3580, 8)]
[(unique, 0x100029f4, 8) COPY (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x46c898, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x100031b7, 8), (unique, 0x100031b7, 8) CALL (ram, 0x426550, 8) , (unique, 0x3580, 8)]
[(stack, 0xfffffffffffffeb8, 4) COPY (const, 0x0, 4)]
[(stack, 0xffffffffffffff28, 4) SUBPIECE (stack, 0xffffffffffffff28, 16) , (const, 0x0, 8)]
[(unique, 0x10002a24, 8) COPY (register, 0x20, 8)]
[ ---  BRANCH (ram, 0x46c5a4, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 4) MULTIEQUAL (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4)]
[(stack, 0xffffffffffffff5c, 4) MULTIEQUAL (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff18, 16) MULTIEQUAL (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee4, 4) MULTIEQUAL (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4)]
[(stack, 0xfffffffffffffee0, 4) MULTIEQUAL (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed4, 4) MULTIEQUAL (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4)]
[(stack, 0xfffffffffffffed0, 4) MULTIEQUAL (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4)]
[(stack, 0xfffffffffffffec0, 4) MULTIEQUAL (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4)]
[(stack, 0xfffffffffffffebc, 4) MULTIEQUAL (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4)]
[(stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(ram, 0x4ae3d0, 8) MULTIEQUAL (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8)]
[(ram, 0x4ae3c8, 8) MULTIEQUAL (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8)]
[(ram, 0x4ae3c0, 8) MULTIEQUAL (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8)]
[(ram, 0x4ae3b0, 8) MULTIEQUAL (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8)]
[(ram, 0x4ae3a0, 10) MULTIEQUAL (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10)]
[(ram, 0x4ae390, 8) MULTIEQUAL (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8)]
[(ram, 0x4ae380, 16) MULTIEQUAL (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16)]
[(register, 0x1090, 2) MULTIEQUAL (register, 0x1090, 2) , (register, 0x1090, 2)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x30, 4) MULTIEQUAL (stack, 0xffffffffffffff28, 4) , (stack, 0xffffffffffffff28, 4)]
[(register, 0x20, 8) MULTIEQUAL (unique, 0x10002a1c, 8) , (unique, 0x10002a24, 8)]
[(stack, 0xffffffffffffff2c, 12) SUBPIECE (stack, 0xffffffffffffff28, 16) , (const, 0x4, 4), (stack, 0xffffffffffffff28, 16) MULTIEQUAL (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16)]
[(stack, 0xfffffffffffffefc, 4) SUBPIECE (stack, 0xfffffffffffffef8, 8) , (const, 0x4, 4), (stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x2, 8) , (const, 0x4, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[(unique, 0x10002de0, 8) COPY (register, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x46c5bd, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffff58, 4) , (const, 0x0, 4), (stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4)]
[ ---  CBRANCH (ram, 0x46db13, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x100028a8, 4) , (const, 0x66, 4)]
[ ---  CBRANCH (ram, 0x46e108, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (unique, 0x100031bf, 4) , (const, 0x1, 4), (unique, 0x100031bf, 4) CAST (stack, 0xfffffffffffffee0, 4)]
[(stack, 0xfffffffffffffec4, 4) COPY (const, 0x0, 4)]
[(unique, 0x1000290c, 8) COPY (unique, 0x3100, 8)]
[ ---  BRANCH (ram, 0x46c61d, 1)]
[(unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff58, 8)]
[(stack, 0xffffffffffffff28, 16) INT_ADD (unique, 0x100021fc, 16) , (register, 0x0, 8), (unique, 0x100021fc, 16) INT_LEFT (unique, 0x100021ec, 16) , (const, 0x40, 16), (unique, 0x100021ec, 16) INT_SEXT (unique, 0x100031c3, 8), (unique, 0x100031c3, 8) CAST (stack, 0xffffffffffffff30, 8), (stack, 0xffffffffffffff30, 8) SUBPIECE (stack, 0xffffffffffffff28, 16) , (const, 0x8, 8), (register, 0x0, 8) INT_ZEXT (register, 0x0, 4), (register, 0x0, 4) INT_SUB (stack, 0xfffffffffffffee0, 4) , (const, 0x1, 4)]
[(unique, 0x3a00, 8) PTRADD (register, 0x0, 8) , (unique, 0x10001910, 8) , (const, 0x4, 8), (unique, 0x10001910, 8) INT_ADD (register, 0x0, 8) , (const, 0x3, 8), (register, 0x0, 8) INT_ZEXT (register, 0x0, 4), (register, 0x0, 4) INT_SUB (stack, 0xfffffffffffffee0, 4) , (const, 0x1, 4)]
[(unique, 0x10002bcc, 8) COPY (unique, 0x3100, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100031cb, 8) , (const, 0x46c5fc, 8), (unique, 0x100031cb, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xd7c, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x1090, 2) INDIRECT (register, 0x1090, 2) , (const, 0xd7c, 4), (register, 0x1090, 2) MULTIEQUAL (register, 0x1090, 2) , (register, 0x1090, 2)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0xd7c, 4), (stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0xd7c, 4), (stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4)]
[(stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0xd7c, 4), (stack, 0xfffffffffffffebc, 4) MULTIEQUAL (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4)]
[(stack, 0xfffffffffffffec0, 4) INDIRECT (stack, 0xfffffffffffffec0, 4) , (const, 0xd7c, 4), (stack, 0xfffffffffffffec0, 4) MULTIEQUAL (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0xd7c, 4), (stack, 0xfffffffffffffec8, 8) MULTIEQUAL (unique, 0x10002de0, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffed0, 4) INDIRECT (stack, 0xfffffffffffffed0, 4) , (const, 0xd7c, 4), (stack, 0xfffffffffffffed0, 4) MULTIEQUAL (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4)]
[(stack, 0xfffffffffffffed4, 4) INDIRECT (stack, 0xfffffffffffffed4, 4) , (const, 0xd7c, 4), (stack, 0xfffffffffffffed4, 4) MULTIEQUAL (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0xd7c, 4), (stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffee0, 4) INDIRECT (stack, 0xfffffffffffffee0, 4) , (const, 0xd7c, 4), (stack, 0xfffffffffffffee0, 4) MULTIEQUAL (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4)]
[(stack, 0xfffffffffffffee4, 4) INDIRECT (stack, 0xfffffffffffffee4, 4) , (const, 0xd7c, 4), (stack, 0xfffffffffffffee4, 4) MULTIEQUAL (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0xd7c, 4), (stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0xd7c, 4), (stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0xd7c, 4), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0xd7c, 4), (stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0xd7c, 4), (stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff18, 16) INDIRECT (stack, 0xffffffffffffff18, 16) , (const, 0xd7c, 4), (stack, 0xffffffffffffff18, 16) MULTIEQUAL (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16)]
[(stack, 0xffffffffffffff28, 16) INDIRECT (stack, 0xffffffffffffff28, 16) , (const, 0xd7c, 4), (stack, 0xffffffffffffff28, 16) MULTIEQUAL (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0xd7c, 4), (stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0xd7c, 4), (stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0xd7c, 4), (stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0xd7c, 4), (stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0xd7c, 4), (stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4)]
[(stack, 0xffffffffffffff5c, 4) INDIRECT (stack, 0xffffffffffffff5c, 4) , (const, 0xd7c, 4), (stack, 0xffffffffffffff5c, 4) MULTIEQUAL (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4)]
[(stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0xd7c, 4), (stack, 0xffffffffffffff60, 4) MULTIEQUAL (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0xd7c, 4), (stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0xd7c, 4), (stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0xd7c, 4), (stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0xd7c, 4), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0xd7c, 4), (stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0xd7c, 4), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0xd7c, 4), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0xd7c, 4), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xd7c, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xfffffffffffffefc, 4) SUBPIECE (stack, 0xfffffffffffffef8, 8) , (const, 0x4, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0xd7c, 4), (stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0xd7f, 4), (ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0xd7c, 4), (ram, 0x4ae380, 16) MULTIEQUAL (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16)]
[(ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0xd7f, 4), (ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0xd7c, 4), (ram, 0x4ae390, 8) MULTIEQUAL (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8)]
[(ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0xd7f, 4), (ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0xd7c, 4), (ram, 0x4ae3a0, 10) MULTIEQUAL (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10)]
[(ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0xd7f, 4), (ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0xd7c, 4), (ram, 0x4ae3b0, 8) MULTIEQUAL (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8)]
[(ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0xd7f, 4), (ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0xd7c, 4), (ram, 0x4ae3c0, 8) MULTIEQUAL (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8)]
[(ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0xd7f, 4), (ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0xd7c, 4), (ram, 0x4ae3c8, 8) MULTIEQUAL (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8)]
[(ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0xd7f, 4), (ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0xd7c, 4), (ram, 0x4ae3d0, 8) MULTIEQUAL (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0xb8, 8) , (register, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x46b550, 8) , (unique, 0x3200, 8), (register, 0xb8, 8) MULTIEQUAL (unique, 0x10002bcc, 8) , (unique, 0x10002bd4, 8)]
[(unique, 0x10002bd4, 8) COPY (register, 0xb8, 8), (register, 0xb8, 8) PTRADD (register, 0xb8, 8) , (const, 0x1, 8) , (const, 0x4, 8), (register, 0xb8, 8) MULTIEQUAL (unique, 0x10002bcc, 8) , (unique, 0x10002bd4, 8)]
[ ---  CBRANCH (ram, 0x46c5f0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xb8, 8) , (unique, 0x3a00, 8), (register, 0xb8, 8) PTRADD (register, 0xb8, 8) , (const, 0x1, 8) , (const, 0x4, 8), (register, 0xb8, 8) MULTIEQUAL (unique, 0x10002bcc, 8) , (unique, 0x10002bd4, 8)]
[(stack, 0xfffffffffffffec4, 4) COPY (stack, 0xfffffffffffffee0, 4)]
[(unique, 0x10002904, 8) COPY (unique, 0x3a00, 8), (unique, 0x3a00, 8) PTRADD (register, 0x0, 8) , (unique, 0x10001930, 8) , (const, 0x4, 8), (unique, 0x10001930, 8) INT_ADD (unique, 0x100031d3, 8) , (const, 0x3, 8), (unique, 0x100031d3, 8) CAST (stack, 0xffffffffffffff28, 8), (stack, 0xffffffffffffff28, 8) SUBPIECE (stack, 0xffffffffffffff28, 16) , (const, 0x0, 8)]
[(unique, 0x10002c7c, 8) COPY (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffefc, 4) MULTIEQUAL (stack, 0xfffffffffffffefc, 4) , (stack, 0xfffffffffffffefc, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 4) MULTIEQUAL (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4)]
[(stack, 0xffffffffffffff5c, 4) MULTIEQUAL (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4)]
[(stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff18, 16) MULTIEQUAL (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee4, 4) MULTIEQUAL (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4)]
[(stack, 0xfffffffffffffee0, 4) MULTIEQUAL (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed4, 4) MULTIEQUAL (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4)]
[(stack, 0xfffffffffffffed0, 4) MULTIEQUAL (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (unique, 0x10002c7c, 8) , (unique, 0x10002de0, 8)]
[(stack, 0xfffffffffffffec4, 4) MULTIEQUAL (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4)]
[(stack, 0xfffffffffffffec0, 4) MULTIEQUAL (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4)]
[(stack, 0xfffffffffffffebc, 4) MULTIEQUAL (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4)]
[(stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(ram, 0x4ae3d0, 8) MULTIEQUAL (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8)]
[(ram, 0x4ae3c8, 8) MULTIEQUAL (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8)]
[(ram, 0x4ae3c0, 8) MULTIEQUAL (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8)]
[(ram, 0x4ae3b0, 8) MULTIEQUAL (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8)]
[(ram, 0x4ae3a0, 10) MULTIEQUAL (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10)]
[(ram, 0x4ae390, 8) MULTIEQUAL (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8)]
[(ram, 0x4ae380, 16) MULTIEQUAL (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16)]
[(register, 0x1090, 2) MULTIEQUAL (register, 0x1090, 2) , (register, 0x1090, 2)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x0, 8) MULTIEQUAL (unique, 0x10002904, 8) , (unique, 0x1000290c, 8)]
[(stack, 0xffffffffffffff2c, 12) SUBPIECE (stack, 0xffffffffffffff28, 16) , (const, 0x4, 4), (stack, 0xffffffffffffff28, 16) MULTIEQUAL (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16)]
[ ---  CBRANCH (ram, 0x46c638, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x58c00, 1) , (const, 0x0, 1), (unique, 0x58c00, 1) INT_AND (unique, 0xbb00, 1) , (const, 0x8, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x100031db, 8), (unique, 0x100031db, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (stack, 0xffffffffffffff40, 8) , (const, 0x3, 8) , (const, 0x4, 8), (stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[ ---  CBRANCH (ram, 0x46dad7, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (const, 0x0, 4) , (stack, 0xffffffffffffff08, 4), (stack, 0xffffffffffffff08, 4) SUBPIECE (stack, 0xffffffffffffff08, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x46e171, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (const, 0x0, 4) , (unique, 0x100031e3, 4), (unique, 0x100031e3, 4) CAST (stack, 0xffffffffffffff18, 4), (stack, 0xffffffffffffff18, 4) SUBPIECE (stack, 0xffffffffffffff18, 16) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x46c638, 1) , (unique, 0xd080, 1), (unique, 0xd080, 1) INT_SLESS (stack, 0xffffffffffffff70, 8) , (const, 0x2, 8)]
[ ---  CBRANCH (ram, 0x46c638, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbe00, 8) , (const, 0x0, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (stack, 0xffffffffffffff68, 8)]
[(register, 0x30, 4) COPY (const, 0x1, 4)]
[(unique, 0x10002c94, 8) COPY (stack, 0xfffffffffffffec8, 8)]
[ ---  BRANCH (ram, 0x46c649, 1)]
[(register, 0x30, 4) COPY (const, 0x1, 4)]
[(ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0xdc1, 4)]
[(ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0xdc1, 4)]
[(ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0xdc1, 4)]
[(ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0xdc1, 4)]
[(ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0xdc1, 4)]
[(ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0xdc1, 4)]
[(ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0xdc1, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x0, 8) , (stack, 0xffffffffffffff38, 4)]
[(unique, 0x10002ba4, 8) COPY (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x4, 8)]
[(unique, 0x10002c8c, 8) COPY (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffef8, 8) CAST (unique, 0x100031e7, 8), (unique, 0x100031e7, 8) INT_LEFT (unique, 0x10001193, 8) , (const, 0x20, 4), (unique, 0x10001193, 8) INT_ZEXT (stack, 0xfffffffffffffefc, 4)]
[(register, 0x18, 4) COPY (const, 0x0, 4)]
[(unique, 0x10002b04, 8) COPY (register, 0xa0, 8)]
[ ---  BRANCH (ram, 0x46ca66, 1)]
[(unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x4, 8) , (const, 0x4, 8)]
[(stack, 0xffffffffffffff60, 4) COPY (unique, 0xbd00, 4), (unique, 0xbd00, 4) INT_SUB (stack, 0xffffffffffffff60, 4) , (const, 0x1, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (const, 0x30, 4), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x2, 8) , (const, 0x4, 8)]
[(ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x1f36, 4), (ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x1f33, 4)]
[(ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x1f36, 4), (ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x1f33, 4)]
[(ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x1f36, 4), (ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x1f33, 4)]
[(ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x1f36, 4), (ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x1f33, 4)]
[(ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x1f36, 4), (ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x1f33, 4)]
[(ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x1f36, 4), (ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x1f33, 4)]
[(ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x1f36, 4), (ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x1f33, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (stack, 0xffffffffffffff38, 4), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x3, 8) , (const, 0x4, 8)]
[(stack, 0xfffffffffffffec4, 4) COPY (const, 0x0, 4)]
[ ---  BRANCH (ram, 0x46c649, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 4) MULTIEQUAL (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4)]
[(stack, 0xffffffffffffff5c, 4) MULTIEQUAL (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4)]
[(stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff18, 16) MULTIEQUAL (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee4, 4) MULTIEQUAL (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4)]
[(stack, 0xfffffffffffffee0, 4) MULTIEQUAL (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed4, 4) MULTIEQUAL (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4)]
[(stack, 0xfffffffffffffed0, 4) MULTIEQUAL (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (unique, 0x10002c8c, 8) , (unique, 0x10002c94, 8) , (unique, 0x10002de0, 8)]
[(stack, 0xfffffffffffffec4, 4) MULTIEQUAL (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4)]
[(stack, 0xfffffffffffffec0, 4) MULTIEQUAL (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4)]
[(stack, 0xfffffffffffffebc, 4) MULTIEQUAL (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4)]
[(stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4)]
[(ram, 0x4ae3d0, 8) MULTIEQUAL (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8)]
[(ram, 0x4ae3c8, 8) MULTIEQUAL (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8)]
[(ram, 0x4ae3c0, 8) MULTIEQUAL (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8)]
[(ram, 0x4ae3b0, 8) MULTIEQUAL (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8)]
[(ram, 0x4ae3a0, 10) MULTIEQUAL (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10)]
[(ram, 0x4ae390, 8) MULTIEQUAL (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8)]
[(ram, 0x4ae380, 16) MULTIEQUAL (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16)]
[(register, 0x1090, 2) MULTIEQUAL (register, 0x1090, 2) , (register, 0x1090, 2) , (register, 0x1090, 2)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb8, 8) MULTIEQUAL (unique, 0x10002ba4, 8) , (register, 0x0, 8) , (unique, 0x3100, 8)]
[(register, 0xa8, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff58, 8)]
[(register, 0x18, 4) COPY (const, 0x0, 4)]
[(stack, 0xfffffffffffffeb0, 8) COPY (register, 0xa0, 8)]
[(stack, 0xfffffffffffffef8, 8) CAST (unique, 0x100031ef, 8), (unique, 0x100031ef, 8) INT_LEFT (unique, 0x1000123d, 8) , (const, 0x20, 4), (unique, 0x1000123d, 8) INT_ZEXT (stack, 0xfffffffffffffefc, 4), (stack, 0xfffffffffffffefc, 4) MULTIEQUAL (stack, 0xfffffffffffffefc, 4) , (stack, 0xfffffffffffffefc, 4) , (stack, 0xfffffffffffffefc, 4)]
[(stack, 0xffffffffffffff28, 16) INT_ADD (unique, 0x1000221c, 16) , (stack, 0xffffffffffffff08, 4), (unique, 0x1000221c, 16) INT_LEFT (unique, 0x1000220c, 16) , (const, 0x20, 16), (unique, 0x1000220c, 16) INT_SEXT (stack, 0xffffffffffffff2c, 12), (stack, 0xffffffffffffff08, 4) SUBPIECE (stack, 0xffffffffffffff08, 8) , (const, 0x0, 8), (stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8), (stack, 0xffffffffffffff2c, 12) MULTIEQUAL (stack, 0xffffffffffffff2c, 12) , (stack, 0xffffffffffffff2c, 12) , (stack, 0xffffffffffffff2c, 12)]
[(unique, 0x10002cc0, 4) COPY (register, 0x30, 4), (register, 0x30, 4) MULTIEQUAL (register, 0x30, 4) , (register, 0x30, 4) , (register, 0x30, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 4) MULTIEQUAL (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4)]
[(stack, 0xffffffffffffff5c, 4) MULTIEQUAL (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4)]
[(stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff18, 16) MULTIEQUAL (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee4, 4) MULTIEQUAL (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4)]
[(stack, 0xfffffffffffffee0, 4) MULTIEQUAL (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed4, 4) MULTIEQUAL (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4)]
[(stack, 0xfffffffffffffed0, 4) MULTIEQUAL (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffec4, 4) MULTIEQUAL (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4)]
[(stack, 0xfffffffffffffec0, 4) MULTIEQUAL (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4)]
[(stack, 0xfffffffffffffebc, 4) MULTIEQUAL (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4)]
[(stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(ram, 0x4ae3d0, 8) MULTIEQUAL (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8)]
[(ram, 0x4ae3c8, 8) MULTIEQUAL (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8)]
[(ram, 0x4ae3c0, 8) MULTIEQUAL (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8)]
[(ram, 0x4ae3b0, 8) MULTIEQUAL (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8)]
[(ram, 0x4ae3a0, 10) MULTIEQUAL (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10)]
[(ram, 0x4ae390, 8) MULTIEQUAL (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8)]
[(ram, 0x4ae380, 16) MULTIEQUAL (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16)]
[(register, 0x1090, 2) MULTIEQUAL (register, 0x1090, 2) , (register, 0x1090, 2) , (register, 0x1090, 2)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x18, 4) MULTIEQUAL (unique, 0x10002cc0, 4) , (register, 0x18, 4) , (register, 0x18, 4)]
[(unique, 0x10002bac, 8) COPY (register, 0xb8, 8), (register, 0xb8, 8) MULTIEQUAL (register, 0xb8, 8) , (register, 0xb8, 8) , (register, 0xb8, 8)]
[(unique, 0x10002cc4, 4) COPY (stack, 0xffffffffffffff28, 4), (stack, 0xffffffffffffff28, 4) SUBPIECE (stack, 0xffffffffffffff28, 16) , (const, 0x0, 8), (stack, 0xffffffffffffff28, 16) MULTIEQUAL (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16)]
[ ---  CBRANCH (ram, 0x46c699, 1) , (unique, 0xd080, 1), (unique, 0xd080, 1) INT_SLESS (unique, 0x100031f7, 4) , (unique, 0x100031fb, 4), (unique, 0x100031fb, 4) CAST (stack, 0xffffffffffffff28, 4), (unique, 0x100031f7, 4) CAST (register, 0xa8, 4), (stack, 0xffffffffffffff28, 4) SUBPIECE (stack, 0xffffffffffffff28, 16) , (const, 0x0, 8), (register, 0xa8, 4) MULTIEQUAL (register, 0x18, 4) , (register, 0xa8, 4) , (register, 0xa8, 4), (stack, 0xffffffffffffff28, 16) MULTIEQUAL (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16)]
[(unique, 0x10001050, 4) MULTIEQUAL (unique, 0x10002cc4, 4) , (unique, 0x10002cc8, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 4) MULTIEQUAL (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4)]
[(stack, 0xffffffffffffff5c, 4) MULTIEQUAL (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4)]
[(stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff28, 16) MULTIEQUAL (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee4, 4) MULTIEQUAL (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4)]
[(stack, 0xfffffffffffffee0, 4) MULTIEQUAL (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed4, 4) MULTIEQUAL (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4)]
[(stack, 0xfffffffffffffed0, 4) MULTIEQUAL (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffec4, 4) MULTIEQUAL (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4)]
[(stack, 0xfffffffffffffec0, 4) MULTIEQUAL (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4)]
[(stack, 0xfffffffffffffebc, 4) MULTIEQUAL (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4)]
[(stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4)]
[(ram, 0x4ae3d0, 8) MULTIEQUAL (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8)]
[(ram, 0x4ae3c8, 8) MULTIEQUAL (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8)]
[(ram, 0x4ae3c0, 8) MULTIEQUAL (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8)]
[(ram, 0x4ae3b0, 8) MULTIEQUAL (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8)]
[(ram, 0x4ae3a0, 10) MULTIEQUAL (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10)]
[(ram, 0x4ae390, 8) MULTIEQUAL (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8)]
[(ram, 0x4ae380, 16) MULTIEQUAL (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16)]
[(register, 0x1090, 2) MULTIEQUAL (register, 0x1090, 2) , (register, 0x1090, 2)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb8, 8) MULTIEQUAL (register, 0xb8, 8) , (register, 0xb8, 8)]
[(register, 0x18, 4) MULTIEQUAL (register, 0x18, 4) , (register, 0x18, 4)]
[(unique, 0x10002b0c, 8) COPY (stack, 0xfffffffffffffeb0, 8), (stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[ ---  CBRANCH (ram, 0x46ca59, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (unique, 0x100031ff, 4) , (unique, 0x10003203, 4), (unique, 0x10003203, 4) CAST (stack, 0xffffffffffffff18, 4), (unique, 0x100031ff, 4) CAST (register, 0xa8, 4), (stack, 0xffffffffffffff18, 4) SUBPIECE (stack, 0xffffffffffffff18, 16) , (const, 0x0, 8), (register, 0xa8, 4) MULTIEQUAL (register, 0xa8, 4) , (register, 0xa8, 4), (stack, 0xffffffffffffff18, 16) MULTIEQUAL (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16)]
[(unique, 0x10002bb4, 8) COPY (register, 0xb8, 8)]
[ ---  CBRANCH (ram, 0x46ca48, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (const, 0x1, 8) , (stack, 0xffffffffffffff70, 8)]
[ ---  CBRANCH (ram, 0x46c699, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbe00, 8) , (const, 0x0, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (stack, 0xffffffffffffff68, 8)]
[(register, 0xa8, 4) INT_ADD (register, 0xa8, 4) , (const, 0x1, 4), (register, 0xa8, 4) MULTIEQUAL (register, 0xa8, 4) , (register, 0xa8, 4) , (register, 0xa8, 4) , (register, 0xa8, 4)]
[(register, 0xb8, 8) PTRADD (register, 0xb8, 8) , (const, 0x1, 8) , (const, 0x4, 8), (register, 0xb8, 8) MULTIEQUAL (unique, 0x10002bac, 8) , (unique, 0x10002bb4, 8) , (unique, 0x10002bb4, 8) , (unique, 0x10002bc4, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10003207, 8) , (const, 0x46c6a9, 8), (unique, 0x10003207, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xe27, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x1090, 2) INDIRECT (register, 0x1090, 2) , (const, 0xe27, 4), (register, 0x1090, 2) MULTIEQUAL (register, 0x1090, 2) , (register, 0x1090, 2) , (register, 0x1090, 2) , (register, 0x1090, 2)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0xe27, 4), (stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0xe27, 4), (stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4)]
[(stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0xe27, 4), (stack, 0xfffffffffffffebc, 4) MULTIEQUAL (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4)]
[(stack, 0xfffffffffffffec0, 4) INDIRECT (stack, 0xfffffffffffffec0, 4) , (const, 0xe27, 4), (stack, 0xfffffffffffffec0, 4) MULTIEQUAL (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4)]
[(stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0xe27, 4), (stack, 0xfffffffffffffec4, 4) MULTIEQUAL (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0xe27, 4), (stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffed0, 4) INDIRECT (stack, 0xfffffffffffffed0, 4) , (const, 0xe27, 4), (stack, 0xfffffffffffffed0, 4) MULTIEQUAL (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4)]
[(stack, 0xfffffffffffffed4, 4) INDIRECT (stack, 0xfffffffffffffed4, 4) , (const, 0xe27, 4), (stack, 0xfffffffffffffed4, 4) MULTIEQUAL (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0xe27, 4), (stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffee0, 4) INDIRECT (stack, 0xfffffffffffffee0, 4) , (const, 0xe27, 4), (stack, 0xfffffffffffffee0, 4) MULTIEQUAL (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4)]
[(stack, 0xfffffffffffffee4, 4) INDIRECT (stack, 0xfffffffffffffee4, 4) , (const, 0xe27, 4), (stack, 0xfffffffffffffee4, 4) MULTIEQUAL (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0xe27, 4), (stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0xe27, 4), (stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0xe27, 4), (stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0xe27, 4), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0xe27, 4), (stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0xe27, 4), (stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff18, 16) INDIRECT (stack, 0xffffffffffffff18, 16) , (const, 0xe27, 4), (stack, 0xffffffffffffff18, 16) MULTIEQUAL (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16)]
[(stack, 0xffffffffffffff28, 16) INDIRECT (stack, 0xffffffffffffff28, 16) , (const, 0xe27, 4), (stack, 0xffffffffffffff28, 16) MULTIEQUAL (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0xe27, 4), (stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0xe27, 4), (stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0xe27, 4), (stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0xe27, 4), (stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0xe27, 4), (stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4)]
[(stack, 0xffffffffffffff5c, 4) INDIRECT (stack, 0xffffffffffffff5c, 4) , (const, 0xe27, 4), (stack, 0xffffffffffffff5c, 4) MULTIEQUAL (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4)]
[(stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0xe27, 4), (stack, 0xffffffffffffff60, 4) MULTIEQUAL (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0xe27, 4), (stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0xe27, 4), (stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0xe27, 4), (stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0xe27, 4), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0xe27, 4), (stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0xe27, 4), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0xe27, 4), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0xe27, 4), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xe27, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0xe2a, 4), (ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0xe27, 4), (ram, 0x4ae380, 16) MULTIEQUAL (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16)]
[(ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0xe2a, 4), (ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0xe27, 4), (ram, 0x4ae390, 8) MULTIEQUAL (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8)]
[(ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0xe2a, 4), (ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0xe27, 4), (ram, 0x4ae3a0, 10) MULTIEQUAL (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10)]
[(ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0xe2a, 4), (ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0xe27, 4), (ram, 0x4ae3b0, 8) MULTIEQUAL (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8)]
[(ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0xe2a, 4), (ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0xe27, 4), (ram, 0x4ae3c0, 8) MULTIEQUAL (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8)]
[(ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0xe2a, 4), (ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0xe27, 4), (ram, 0x4ae3c8, 8) MULTIEQUAL (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8)]
[(ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0xe2a, 4), (ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0xe27, 4), (ram, 0x4ae3d0, 8) MULTIEQUAL (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0xb8, 8) , (register, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x46b550, 8) , (register, 0xa8, 8), (register, 0xb8, 8) MULTIEQUAL (unique, 0x10002bac, 8) , (unique, 0x10002bb4, 8) , (unique, 0x10002bb4, 8) , (unique, 0x10002bc4, 8)]
[ ---  CBRANCH (ram, 0x46c6ba, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x18, 4) , (const, 0x0, 4), (register, 0x18, 4) MULTIEQUAL (register, 0x18, 4) , (register, 0x18, 4) , (register, 0x18, 4) , (register, 0x18, 4)]
[ ---  CBRANCH (ram, 0x46d0f8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x30, 4)]
[(stack, 0xffffffffffffff18, 16) INT_ADD (unique, 0x100023fc, 16) , (unique, 0xbd00, 4), (unique, 0x100023fc, 16) INT_LEFT (unique, 0x100023ec, 16) , (const, 0x20, 16), (unique, 0x100023ec, 16) INT_SEXT (stack, 0xffffffffffffff1c, 12), (stack, 0xffffffffffffff1c, 12) SUBPIECE (stack, 0xffffffffffffff18, 16) , (const, 0x4, 8), (unique, 0xbd00, 4) INT_ADD (stack, 0xffffffffffffff18, 4) , (const, 0x1, 4), (stack, 0xffffffffffffff18, 4) SUBPIECE (stack, 0xffffffffffffff18, 16) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x46c670, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (const, 0x0, 4) , (stack, 0xffffffffffffff08, 4), (stack, 0xffffffffffffff08, 4) SUBPIECE (stack, 0xffffffffffffff08, 8) , (const, 0x0, 8)]
[(stack, 0xfffffffffffffef8, 8) CAST (unique, 0x10003217, 8), (unique, 0x10003217, 8) INT_OR (unique, 0x100010d6, 8) , (unique, 0x100010de, 8), (unique, 0x100010de, 8) INT_ZEXT (unique, 0xbd00, 4), (unique, 0x100010d6, 8) INT_AND (unique, 0x1000320f, 8) , (const, 0xffffffff00000000, 8), (unique, 0x1000320f, 8) CAST (stack, 0xfffffffffffffef8, 8), (unique, 0xbd00, 4) INT_ADD (stack, 0xfffffffffffffef8, 4) , (const, 0x1, 4), (stack, 0xfffffffffffffef8, 4) SUBPIECE (stack, 0xfffffffffffffef8, 8) , (const, 0x0, 8)]
[(stack, 0xffffffffffffff28, 16) INT_ADD (unique, 0x1000241c, 16) , (register, 0x0, 4), (unique, 0x1000241c, 16) INT_LEFT (unique, 0x1000240c, 16) , (const, 0x20, 16), (unique, 0x1000240c, 16) INT_SEXT (stack, 0xffffffffffffff2c, 12), (stack, 0xffffffffffffff2c, 12) SUBPIECE (stack, 0xffffffffffffff28, 16) , (const, 0x4, 8), (register, 0x0, 4) INT_ADD (stack, 0xffffffffffffff08, 4) , (unique, 0xbd00, 4), (unique, 0xbd00, 4) INT_ADD (stack, 0xfffffffffffffef8, 4) , (const, 0x1, 4), (stack, 0xfffffffffffffef8, 4) SUBPIECE (stack, 0xfffffffffffffef8, 8) , (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x46c670, 1)]
[(register, 0x18, 4) COPY (const, 0x1, 4)]
[(unique, 0x10002bc4, 8) COPY (register, 0xb8, 8)]
[(unique, 0x10002cc8, 4) COPY (stack, 0xffffffffffffff28, 4), (stack, 0xffffffffffffff28, 4) SUBPIECE (stack, 0xffffffffffffff28, 16) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x46c67e, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (unique, 0x1000321f, 4) , (unique, 0x10003223, 4), (unique, 0x10003223, 4) CAST (stack, 0xffffffffffffff28, 4), (unique, 0x1000321f, 4) CAST (register, 0xa8, 4), (stack, 0xffffffffffffff28, 4) SUBPIECE (stack, 0xffffffffffffff28, 16) , (const, 0x0, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 4) MULTIEQUAL (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4)]
[(stack, 0xffffffffffffff5c, 4) MULTIEQUAL (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4)]
[(stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff28, 16) MULTIEQUAL (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16)]
[(stack, 0xffffffffffffff18, 16) MULTIEQUAL (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee4, 4) MULTIEQUAL (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4)]
[(stack, 0xfffffffffffffee0, 4) MULTIEQUAL (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed4, 4) MULTIEQUAL (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4)]
[(stack, 0xfffffffffffffed0, 4) MULTIEQUAL (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffec4, 4) MULTIEQUAL (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4)]
[(stack, 0xfffffffffffffec0, 4) MULTIEQUAL (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4)]
[(stack, 0xfffffffffffffebc, 4) MULTIEQUAL (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4)]
[(stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(ram, 0x4ae3d0, 8) MULTIEQUAL (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8)]
[(ram, 0x4ae3c8, 8) MULTIEQUAL (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8)]
[(ram, 0x4ae3c0, 8) MULTIEQUAL (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8)]
[(ram, 0x4ae3b0, 8) MULTIEQUAL (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8)]
[(ram, 0x4ae3a0, 10) MULTIEQUAL (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10)]
[(ram, 0x4ae390, 8) MULTIEQUAL (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8)]
[(ram, 0x4ae380, 16) MULTIEQUAL (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16)]
[(unique, 0x10000e90, 4) MULTIEQUAL (register, 0x18, 4) , (register, 0xa8, 4) , (register, 0xa8, 4)]
[(register, 0x1090, 2) MULTIEQUAL (register, 0x1090, 2) , (register, 0x1090, 2) , (register, 0x1090, 2)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xa0, 8) MULTIEQUAL (unique, 0x10002b04, 8) , (unique, 0x10002b0c, 8) , (unique, 0x10002b0c, 8)]
[(register, 0x88, 4) MULTIEQUAL (stack, 0xffffffffffffff08, 4) , (unique, 0x10001050, 4) , (unique, 0x10001050, 4)]
[ ---  CBRANCH (ram, 0x46ca76, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (stack, 0xffffffffffffff38, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb8, 8) , (const, 0xffffffffffffffff, 8) , (const, 0x4, 8), (register, 0xb8, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0xb8, 8) , (register, 0xb8, 8), (stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb8, 8) , (const, 0xfffffffffffffffe, 8) , (const, 0x4, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10003227, 8) , (const, 0x46ca8b, 8), (unique, 0x10003227, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xecf, 4)]
[(register, 0x1090, 2) INDIRECT (register, 0x1090, 2) , (const, 0xecf, 4)]
[(ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0xecf, 4)]
[(ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0xecf, 4)]
[(ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0xecf, 4)]
[(ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0xecf, 4)]
[(ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0xecf, 4)]
[(ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0xecf, 4)]
[(ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0xecf, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0xecf, 4)]
[(stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0xecf, 4)]
[(stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0xecf, 4)]
[(stack, 0xfffffffffffffec0, 4) INDIRECT (stack, 0xfffffffffffffec0, 4) , (const, 0xecf, 4)]
[(stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0xecf, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0xecf, 4)]
[(stack, 0xfffffffffffffed0, 4) INDIRECT (stack, 0xfffffffffffffed0, 4) , (const, 0xecf, 4)]
[(stack, 0xfffffffffffffed4, 4) INDIRECT (stack, 0xfffffffffffffed4, 4) , (const, 0xecf, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0xecf, 4)]
[(stack, 0xfffffffffffffee0, 4) INDIRECT (stack, 0xfffffffffffffee0, 4) , (const, 0xecf, 4)]
[(stack, 0xfffffffffffffee4, 4) INDIRECT (stack, 0xfffffffffffffee4, 4) , (const, 0xecf, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0xecf, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0xecf, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0xecf, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0xecf, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0xecf, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0xecf, 4)]
[(stack, 0xffffffffffffff18, 16) INDIRECT (stack, 0xffffffffffffff18, 16) , (const, 0xecf, 4), (stack, 0xffffffffffffff18, 16) INT_ADD (unique, 0x1000231c, 16) , (unique, 0xbc80, 4), (unique, 0x1000231c, 16) INT_LEFT (unique, 0x1000230c, 16) , (const, 0x20, 16), (unique, 0x1000230c, 16) INT_SEXT (stack, 0xffffffffffffff1c, 12), (stack, 0xffffffffffffff1c, 12) SUBPIECE (stack, 0xffffffffffffff18, 16) , (const, 0x4, 8), (unique, 0xbc80, 4) MULTIEQUAL (unique, 0xbc80, 4) , (unique, 0xbc80, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0xecf, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0xecf, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0xecf, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0xecf, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0xecf, 4)]
[(stack, 0xffffffffffffff5c, 4) INDIRECT (stack, 0xffffffffffffff5c, 4) , (const, 0xecf, 4)]
[(stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0xecf, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0xecf, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0xecf, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0xecf, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0xecf, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0xecf, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0xecf, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0xecf, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0xecf, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xecf, 4)]
[(stack, 0xffffffffffffff28, 4) SUBPIECE (stack, 0xffffffffffffff28, 16) , (const, 0x0, 8), (stack, 0xffffffffffffff28, 16) INDIRECT (stack, 0xffffffffffffff28, 16) , (const, 0xecf, 4), (stack, 0xffffffffffffff28, 16) INT_ADD (unique, 0x1000233c, 16) , (register, 0x88, 4), (unique, 0x1000233c, 16) INT_LEFT (unique, 0x1000232c, 16) , (const, 0x20, 16), (unique, 0x1000232c, 16) INT_SEXT (stack, 0xffffffffffffff2c, 12), (stack, 0xffffffffffffff2c, 12) SUBPIECE (stack, 0xffffffffffffff28, 16) , (const, 0x4, 8)]
[(register, 0x38, 1) BOOL_AND (register, 0x206, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x35, 4), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x30, 4), (register, 0x0, 4) CALL (ram, 0x46b550, 8)]
[ ---  CBRANCH (ram, 0x46caeb, 1) , (register, 0x206, 1), (register, 0x206, 1) BOOL_OR (unique, 0x10001245, 1) , (unique, 0x10001246, 1), (unique, 0x10001246, 1) BOOL_NEGATE (register, 0x206, 1), (unique, 0x10001245, 1) BOOL_NEGATE (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x35, 4), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x30, 4), (register, 0x0, 4) CALL (ram, 0x46b550, 8)]
[ ---  CBRANCH (ram, 0x46dab1, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffff70, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x46caeb, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbe00, 8) , (const, 0x0, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (stack, 0xffffffffffffff68, 8)]
[(register, 0x30, 8) COPY (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x46cade, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffff80, 8) , (const, 0x0, 8)]
[(unique, 0x10002d7c, 8) COPY (stack, 0xffffffffffffff70, 8)]
[ ---  CBRANCH (ram, 0x46cae6, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffff80, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x46cade, 1) , (unique, 0x10001e80, 1), (unique, 0x10001e80, 1) INT_NOTEQUAL (unique, 0x10001e81, 8) , (const, 0x0, 8), (unique, 0x10001e81, 8) MULTIEQUAL (unique, 0x10002d74, 8) , (unique, 0x10002d7c, 8)]
[ ---  CBRANCH (ram, 0x46cad8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbe00, 8) , (const, 0x0, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) PTRADD (stack, 0xffffffffffffff68, 8) , (unique, 0x10001a60, 8) , (const, 0x8, 8), (unique, 0x10001a60, 8) INT_ADD (register, 0x30, 8) , (const, 0xffffffffffffffff, 8), (register, 0x30, 8) MULTIEQUAL (unique, 0x10001e81, 8) , (register, 0x30, 8)]
[(unique, 0x10001553, 1) COPY (const, 0x1, 1)]
[(unique, 0x10002d74, 8) COPY (register, 0x30, 8), (register, 0x30, 8) INT_ADD (register, 0x30, 8) , (const, 0xffffffffffffffff, 8)]
[(unique, 0x10001551, 1) MULTIEQUAL (register, 0x38, 1) , (unique, 0x10001553, 1) , (register, 0x38, 1) , (register, 0x38, 1)]
[(stack, 0xffffffffffffff52, 2) COPY (register, 0x1090, 2)]
[ ---  CBRANCH (ram, 0x46d7e0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x30, 2) , (const, 0x800, 2), (register, 0x30, 2) INT_AND (register, 0x1090, 2) , (const, 0xc00, 2)]
[ ---  CBRANCH (ram, 0x46d130, 1) , (unique, 0xc900, 1), (unique, 0xc900, 1) INT_LESS (register, 0x30, 2) , (const, 0x801, 2)]
[ ---  CBRANCH (ram, 0x46d140, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x30, 2) , (const, 0x0, 2)]
[ ---  CBRANCH (ram, 0x46e621, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x30, 2) , (const, 0x400, 2)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x1e6e, 4)]
[(stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x1e6e, 4)]
[(stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x1e6e, 4)]
[(stack, 0xfffffffffffffec0, 4) INDIRECT (stack, 0xfffffffffffffec0, 4) , (const, 0x1e6e, 4)]
[(stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x1e6e, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x1e6e, 4)]
[(stack, 0xfffffffffffffed0, 4) INDIRECT (stack, 0xfffffffffffffed0, 4) , (const, 0x1e6e, 4)]
[(stack, 0xfffffffffffffed4, 4) INDIRECT (stack, 0xfffffffffffffed4, 4) , (const, 0x1e6e, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x1e6e, 4)]
[(stack, 0xfffffffffffffee0, 4) INDIRECT (stack, 0xfffffffffffffee0, 4) , (const, 0x1e6e, 4)]
[(stack, 0xfffffffffffffee4, 4) INDIRECT (stack, 0xfffffffffffffee4, 4) , (const, 0x1e6e, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x1e6e, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x1e6e, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x1e6e, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x1e6e, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x1e6e, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x1e6e, 4)]
[(stack, 0xffffffffffffff18, 16) INDIRECT (stack, 0xffffffffffffff18, 16) , (const, 0x1e6e, 4)]
[(stack, 0xffffffffffffff28, 16) INDIRECT (stack, 0xffffffffffffff28, 16) , (const, 0x1e6e, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x1e6e, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x1e6e, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x1e6e, 4)]
[(stack, 0xffffffffffffff52, 2) INDIRECT (stack, 0xffffffffffffff52, 2) , (const, 0x1e6e, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x1e6e, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x1e6e, 4)]
[(stack, 0xffffffffffffff5c, 4) INDIRECT (stack, 0xffffffffffffff5c, 4) , (const, 0x1e6e, 4)]
[(stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0x1e6e, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x1e6e, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x1e6e, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x1e6e, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x1e6e, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x1e6e, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x1e6e, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x1e6e, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x1e6e, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1e6e, 4)]
[ ---  CALL (ram, 0x40160f, 8)]
[(ram, 0x4ae380, 16) COPY (ram, 0x4ae380, 16), (ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x1e6e, 4)]
[(ram, 0x4ae390, 8) COPY (ram, 0x4ae390, 8), (ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x1e6e, 4)]
[(ram, 0x4ae3a0, 10) COPY (ram, 0x4ae3a0, 10), (ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x1e6e, 4)]
[(ram, 0x4ae3b0, 8) COPY (ram, 0x4ae3b0, 8), (ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x1e6e, 4)]
[(ram, 0x4ae3c0, 8) COPY (ram, 0x4ae3c0, 8), (ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x1e6e, 4)]
[(ram, 0x4ae3c8, 8) COPY (ram, 0x4ae3c8, 8), (ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x1e6e, 4)]
[(ram, 0x4ae3d0, 8) COPY (ram, 0x4ae3d0, 8), (ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x1e6e, 4)]
[ ---  RETURN (const, 0x1, 4)]
[ ---  CBRANCH (ram, 0x46cb30, 1) , (unique, 0x10001e89, 1), (unique, 0x10001e89, 1) INT_NOTEQUAL (stack, 0xffffffffffffff54, 4) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x46cb25, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (register, 0x0, 4) , (const, 0x35, 4)]
[ ---  CBRANCH (ram, 0x46cb30, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (register, 0x0, 4) , (const, 0x35, 4)]
[ ---  CBRANCH (ram, 0x46d164, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x10001070, 16) , (const, 0x0, 16), (unique, 0x10001070, 16) INT_AND (stack, 0xffffffffffffff18, 16) , (const, 0x1, 16)]
[ ---  CBRANCH (ram, 0x46d164, 1) , (unique, 0x10001552, 1), (unique, 0x10001552, 1) BOOL_NEGATE (unique, 0x10001551, 1)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb8, 8) , (const, 0xffffffffffffffff, 8) , (const, 0x4, 8)]
[(unique, 0x3100, 8) PTRADD (register, 0xb8, 8) , (const, 0xffffffffffffffff, 8) , (const, 0x4, 8)]
[ ---  CBRANCH (ram, 0x46d3c5, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x10000e90, 4) , (const, 0x0, 4)]
[(register, 0x38, 4) COPY (const, 0x0, 4)]
[(stack, 0xffffffffffffff08, 4) SUBPIECE (stack, 0xffffffffffffff08, 8) , (const, 0x0, 8)]
[(stack, 0xfffffffffffffef8, 4) SUBPIECE (stack, 0xfffffffffffffef8, 8) , (const, 0x0, 8)]
[(unique, 0x10001e8e, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0x0, 8)]
[(unique, 0x10001e97, 16) MULTIEQUAL (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16)]
[(unique, 0x10001ea7, 8) MULTIEQUAL (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8)]
[(unique, 0x10001eaf, 10) MULTIEQUAL (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10)]
[(unique, 0x10001eb9, 8) MULTIEQUAL (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8)]
[(unique, 0x10001ec1, 8) MULTIEQUAL (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8)]
[(unique, 0x10001ec9, 8) MULTIEQUAL (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8)]
[(unique, 0x10001ed1, 8) MULTIEQUAL (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8)]
[(unique, 0x10001ed9, 4) MULTIEQUAL (register, 0x38, 4) , (register, 0x38, 4)]
[ ---  CBRANCH (ram, 0x46d1a8, 1) , (unique, 0x10001e96, 1), (unique, 0x10001e96, 1) INT_NOTEQUAL (stack, 0xffffffffffffff38, 4) , (unique, 0x10001e8a, 4), (unique, 0x10001e8a, 4) MULTIEQUAL (unique, 0xbc80, 4) , (unique, 0xbc80, 4)]
[ ---  CBRANCH (ram, 0x46d190, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x10001e8a, 4) , (const, 0x39, 4)]
[ ---  CBRANCH (ram, 0x46d1e0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x10001ed9, 4) , (stack, 0xffffffffffffff08, 4)]
[ ---  CBRANCH (ram, 0x46d1e0, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (stack, 0xfffffffffffffef8, 4) , (const, 0x1, 4)]
[(ram, 0x4ae380, 16) INDIRECT (unique, 0x10001e97, 16) , (const, 0x1e27, 4)]
[(ram, 0x4ae390, 8) INDIRECT (unique, 0x10001ea7, 8) , (const, 0x1e27, 4)]
[(ram, 0x4ae3a0, 10) INDIRECT (unique, 0x10001eaf, 10) , (const, 0x1e27, 4)]
[(ram, 0x4ae3b0, 8) INDIRECT (unique, 0x10001eb9, 8) , (const, 0x1e27, 4)]
[(ram, 0x4ae3c0, 8) INDIRECT (unique, 0x10001ec1, 8) , (const, 0x1e27, 4)]
[(ram, 0x4ae3c8, 8) INDIRECT (unique, 0x10001ec9, 8) , (const, 0x1e27, 4)]
[(ram, 0x4ae3d0, 8) INDIRECT (unique, 0x10001ed1, 8) , (const, 0x1e27, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001e8e, 8) , (const, 0x30, 4)]
[(register, 0x0, 8) PTRADD (unique, 0x10001e8e, 8) , (const, 0xffffffffffffffff, 8) , (const, 0x4, 8)]
[(register, 0x38, 4) INT_ADD (unique, 0x10001ed9, 4) , (const, 0x1, 4)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0x10001e8e, 8) , (const, 0xffffffffffffffff, 8) , (const, 0x4, 8)]
[ ---  CBRANCH (ram, 0x46de3e, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x10001ed9, 4) , (stack, 0xffffffffffffff08, 4)]
[ ---  CBRANCH (ram, 0x46d1bf, 1) , (unique, 0xd080, 1), (unique, 0xd080, 1) INT_SLESS (const, 0x0, 4) , (stack, 0xfffffffffffffef8, 4)]
[(stack, 0xfffffffffffffef8, 8) CAST (unique, 0x10003237, 8), (unique, 0x10003237, 8) INT_OR (unique, 0x100010ea, 8) , (unique, 0x100010f2, 8), (unique, 0x100010f2, 8) INT_ZEXT (unique, 0xbd00, 4), (unique, 0x100010ea, 8) INT_AND (unique, 0x1000322f, 8) , (const, 0xffffffff00000000, 8), (unique, 0x1000322f, 8) CAST (stack, 0xfffffffffffffef8, 8), (unique, 0xbd00, 4) INT_SUB (stack, 0xfffffffffffffef8, 4) , (const, 0x1, 4)]
[ ---  CBRANCH (ram, 0x46de3e, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x10001e8a, 4) , (stack, 0xffffffffffffff38, 4)]
[(register, 0x88, 4) INT_ADD (stack, 0xffffffffffffff08, 4) , (stack, 0xfffffffffffffef8, 4), (stack, 0xfffffffffffffef8, 4) SUBPIECE (stack, 0xfffffffffffffef8, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10001e8e, 8)]
[ ---  CBRANCH (ram, 0x46d1e5, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xfffffffffffffebc, 1) , (const, 0x67, 1), (stack, 0xfffffffffffffebc, 1) SUBPIECE (stack, 0xfffffffffffffebc, 4) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x46d1e5, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffff5c, 4) , (const, 0x66, 4)]
[ ---  CBRANCH (ram, 0x46d1e5, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x58c00, 1) , (const, 0x0, 1), (unique, 0x58c00, 1) INT_AND (unique, 0xbb00, 1) , (const, 0x8, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x1000323f, 8), (unique, 0x1000323f, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (stack, 0xffffffffffffff40, 8) , (const, 0x3, 8) , (const, 0x4, 8)]
[ ---  CBRANCH (ram, 0x46d1e5, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x10001e8e, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (stack, 0xfffffffffffffec8, 8) , (const, 0x3, 8) , (const, 0x4, 8)]
[ ---  CBRANCH (ram, 0x46d1e5, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd00, 4) , (const, 0x30, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (stack, 0xfffffffffffffec8, 8) , (const, 0x2, 8) , (const, 0x4, 8)]
[(register, 0x88, 4) INT_ADD (unique, 0x10000c05, 4) , (stack, 0xffffffffffffff08, 4), (unique, 0x10000c05, 4) INT_ADD (stack, 0xfffffffffffffef8, 4) , (const, 0xffffffff, 4)]
[ ---  BRANCH (ram, 0x46d1e5, 1)]
[(register, 0x88, 4) INT_ADD (unique, 0xbd00, 4) , (stack, 0xffffffffffffff08, 4)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(register, 0x88, 4) MULTIEQUAL (register, 0x88, 4) , (stack, 0xffffffffffffff28, 4) , (stack, 0xffffffffffffff28, 4)]
[(ram, 0x4ae380, 16) INDIRECT (unique, 0x10001e97, 16) , (const, 0x1dfc, 4)]
[(ram, 0x4ae390, 8) INDIRECT (unique, 0x10001ea7, 8) , (const, 0x1dfc, 4)]
[(ram, 0x4ae3a0, 10) INDIRECT (unique, 0x10001eaf, 10) , (const, 0x1dfc, 4)]
[(ram, 0x4ae3b0, 8) INDIRECT (unique, 0x10001eb9, 8) , (const, 0x1dfc, 4)]
[(ram, 0x4ae3c0, 8) INDIRECT (unique, 0x10001ec1, 8) , (const, 0x1dfc, 4)]
[(ram, 0x4ae3c8, 8) INDIRECT (unique, 0x10001ec9, 8) , (const, 0x1dfc, 4)]
[(ram, 0x4ae3d0, 8) INDIRECT (unique, 0x10001ed1, 8) , (const, 0x1dfc, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001e8e, 8) , (register, 0x30, 4), (register, 0x30, 4) INT_ADD (unique, 0x10001e8a, 4) , (const, 0x1, 4)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(ram, 0x4ae3d0, 8) MULTIEQUAL (unique, 0x10001ed1, 8) , (unique, 0x10001ed1, 8) , (unique, 0x10001ed1, 8) , (unique, 0x10001ed1, 8) , (unique, 0x10001ed1, 8) , (unique, 0x10001ed1, 8) , (ram, 0x4ae3d0, 8)]
[(ram, 0x4ae3c8, 8) MULTIEQUAL (unique, 0x10001ec9, 8) , (unique, 0x10001ec9, 8) , (unique, 0x10001ec9, 8) , (unique, 0x10001ec9, 8) , (unique, 0x10001ec9, 8) , (unique, 0x10001ec9, 8) , (ram, 0x4ae3c8, 8)]
[(ram, 0x4ae3c0, 8) MULTIEQUAL (unique, 0x10001ec1, 8) , (unique, 0x10001ec1, 8) , (unique, 0x10001ec1, 8) , (unique, 0x10001ec1, 8) , (unique, 0x10001ec1, 8) , (unique, 0x10001ec1, 8) , (ram, 0x4ae3c0, 8)]
[(ram, 0x4ae3b0, 8) MULTIEQUAL (unique, 0x10001eb9, 8) , (unique, 0x10001eb9, 8) , (unique, 0x10001eb9, 8) , (unique, 0x10001eb9, 8) , (unique, 0x10001eb9, 8) , (unique, 0x10001eb9, 8) , (ram, 0x4ae3b0, 8)]
[(ram, 0x4ae3a0, 10) MULTIEQUAL (unique, 0x10001eaf, 10) , (unique, 0x10001eaf, 10) , (unique, 0x10001eaf, 10) , (unique, 0x10001eaf, 10) , (unique, 0x10001eaf, 10) , (unique, 0x10001eaf, 10) , (ram, 0x4ae3a0, 10)]
[(ram, 0x4ae390, 8) MULTIEQUAL (unique, 0x10001ea7, 8) , (unique, 0x10001ea7, 8) , (unique, 0x10001ea7, 8) , (unique, 0x10001ea7, 8) , (unique, 0x10001ea7, 8) , (unique, 0x10001ea7, 8) , (ram, 0x4ae390, 8)]
[(ram, 0x4ae380, 16) MULTIEQUAL (unique, 0x10001e97, 16) , (unique, 0x10001e97, 16) , (unique, 0x10001e97, 16) , (unique, 0x10001e97, 16) , (unique, 0x10001e97, 16) , (unique, 0x10001e97, 16) , (ram, 0x4ae380, 16)]
[(register, 0x88, 4) MULTIEQUAL (register, 0x88, 4) , (register, 0x88, 4) , (register, 0x88, 4) , (register, 0x88, 4) , (register, 0x88, 4) , (register, 0x88, 4) , (register, 0x88, 4)]
[ ---  CBRANCH (ram, 0x46d3be, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffff38, 4) , (register, 0x30, 4), (register, 0x30, 4) MULTIEQUAL (unique, 0xbc80, 4) , (unique, 0xbc80, 4) , (unique, 0xbc80, 4) , (unique, 0xbc80, 4) , (unique, 0xbc80, 4) , (unique, 0xbc80, 4) , (register, 0x30, 4)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0x10001e8e, 8) , (const, 0xffffffffffffffff, 8) , (const, 0x4, 8)]
[(register, 0x0, 8) PTRADD (unique, 0x10001e8e, 8) , (const, 0xffffffffffffffff, 8) , (const, 0x4, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(ram, 0x4ae3d0, 8) MULTIEQUAL (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8)]
[(ram, 0x4ae3c8, 8) MULTIEQUAL (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8)]
[(ram, 0x4ae3c0, 8) MULTIEQUAL (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8)]
[(ram, 0x4ae3b0, 8) MULTIEQUAL (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8)]
[(ram, 0x4ae3a0, 10) MULTIEQUAL (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10)]
[(ram, 0x4ae390, 8) MULTIEQUAL (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8)]
[(ram, 0x4ae380, 16) MULTIEQUAL (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16)]
[(register, 0x88, 4) MULTIEQUAL (stack, 0xffffffffffffff28, 4) , (register, 0x88, 4)]
[(unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0xffffffffffffffff, 8) , (const, 0x4, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0x0, 8)]
[(unique, 0x10002d8c, 8) COPY (register, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x46d3d3, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffff38, 4) , (register, 0x30, 4), (register, 0x30, 4) MULTIEQUAL (unique, 0xbc80, 4) , (unique, 0xbc80, 4)]
[(unique, 0x10002d94, 8) COPY (unique, 0x3100, 8)]
[(unique, 0x10001ee6, 16) MULTIEQUAL (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16)]
[(unique, 0x10001ef6, 8) MULTIEQUAL (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8)]
[(unique, 0x10001efe, 10) MULTIEQUAL (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10)]
[(unique, 0x10001f08, 8) MULTIEQUAL (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8)]
[(unique, 0x10001f10, 8) MULTIEQUAL (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8)]
[(unique, 0x10001f18, 8) MULTIEQUAL (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8)]
[(unique, 0x10001f20, 8) MULTIEQUAL (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8)]
[ ---  CBRANCH (ram, 0x46d3f3, 1) , (unique, 0x10001edd, 1), (unique, 0x10001edd, 1) INT_LESSEQUAL (unique, 0x3100, 8) , (unique, 0x10001ede, 8), (unique, 0x10001ede, 8) MULTIEQUAL (unique, 0x10002d84, 8) , (unique, 0x10002d8c, 8) , (unique, 0x10002d94, 8)]
[ ---  CBRANCH (ram, 0x46d3e0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbc80, 4) , (const, 0x39, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10001ede, 8)]
[ ---  CBRANCH (ram, 0x46da32, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESSEQUAL (unique, 0x3100, 8) , (unique, 0x10001ede, 8)]
[(ram, 0x4ae380, 16) INDIRECT (unique, 0x10001ee6, 16) , (const, 0x1da7, 4)]
[(ram, 0x4ae390, 8) INDIRECT (unique, 0x10001ef6, 8) , (const, 0x1da7, 4)]
[(ram, 0x4ae3a0, 10) INDIRECT (unique, 0x10001efe, 10) , (const, 0x1da7, 4)]
[(ram, 0x4ae3b0, 8) INDIRECT (unique, 0x10001f08, 8) , (const, 0x1da7, 4)]
[(ram, 0x4ae3c0, 8) INDIRECT (unique, 0x10001f10, 8) , (const, 0x1da7, 4)]
[(ram, 0x4ae3c8, 8) INDIRECT (unique, 0x10001f18, 8) , (const, 0x1da7, 4)]
[(ram, 0x4ae3d0, 8) INDIRECT (unique, 0x10001f20, 8) , (const, 0x1da7, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001ede, 8) , (register, 0x30, 4), (register, 0x30, 4) INT_ADD (unique, 0xbc80, 4) , (const, 0x1, 4)]
[ ---  BRANCH (ram, 0x46cb30, 1)]
[(ram, 0x4ae380, 16) INDIRECT (unique, 0x10001ee6, 16) , (const, 0x1daa, 4)]
[(ram, 0x4ae390, 8) INDIRECT (unique, 0x10001ef6, 8) , (const, 0x1daa, 4)]
[(ram, 0x4ae3a0, 10) INDIRECT (unique, 0x10001efe, 10) , (const, 0x1daa, 4)]
[(ram, 0x4ae3b0, 8) INDIRECT (unique, 0x10001f08, 8) , (const, 0x1daa, 4)]
[(ram, 0x4ae3c0, 8) INDIRECT (unique, 0x10001f10, 8) , (const, 0x1daa, 4)]
[(ram, 0x4ae3c8, 8) INDIRECT (unique, 0x10001f18, 8) , (const, 0x1daa, 4)]
[(ram, 0x4ae3d0, 8) INDIRECT (unique, 0x10001f20, 8) , (const, 0x1daa, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001ede, 8) , (const, 0x30, 4)]
[(unique, 0x10002d84, 8) COPY (register, 0x0, 8), (register, 0x0, 8) PTRADD (unique, 0x10001ede, 8) , (const, 0xffffffffffffffff, 8) , (const, 0x4, 8)]
[ ---  CBRANCH (ram, 0x46e1e3, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffff5c, 4) , (const, 0x66, 4)]
[ ---  CBRANCH (ram, 0x46e4db, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffed0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (stack, 0xfffffffffffffec8, 8) , (const, 0x31, 4)]
[(ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x1cf4, 4), (ram, 0x4ae380, 16) INDIRECT (unique, 0x10001ee6, 16) , (const, 0x1cf1, 4)]
[(ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x1cf4, 4), (ram, 0x4ae390, 8) INDIRECT (unique, 0x10001ef6, 8) , (const, 0x1cf1, 4)]
[(ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x1cf4, 4), (ram, 0x4ae3a0, 10) INDIRECT (unique, 0x10001efe, 10) , (const, 0x1cf1, 4)]
[(ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x1cf4, 4), (ram, 0x4ae3b0, 8) INDIRECT (unique, 0x10001f08, 8) , (const, 0x1cf1, 4)]
[(ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x1cf4, 4), (ram, 0x4ae3c0, 8) INDIRECT (unique, 0x10001f10, 8) , (const, 0x1cf1, 4)]
[(ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x1cf4, 4), (ram, 0x4ae3c8, 8) INDIRECT (unique, 0x10001f18, 8) , (const, 0x1cf1, 4)]
[(ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x1cf4, 4), (ram, 0x4ae3d0, 8) INDIRECT (unique, 0x10001f20, 8) , (const, 0x1cf1, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (stack, 0xffffffffffffff38, 4), (unique, 0x3100, 8) PTRADD (stack, 0xfffffffffffffec8, 8) , (const, 0x1, 8) , (const, 0x4, 8)]
[ ---  CBRANCH (ram, 0x46e4ff, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x58c00, 1) , (const, 0x0, 1), (unique, 0x58c00, 1) INT_AND (unique, 0xbb00, 1) , (const, 0x8, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x10003247, 8), (unique, 0x10003247, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (stack, 0xffffffffffffff40, 8) , (const, 0x3, 8) , (const, 0x4, 8)]
[(unique, 0x10002c70, 4) COPY (stack, 0xfffffffffffffed0, 4)]
[ ---  CBRANCH (ram, 0x46e5bf, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x10000e90, 4) , (const, 0x0, 4)]
[(ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x1d19, 4)]
[(ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x1d19, 4)]
[(ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x1d19, 4)]
[(ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x1d19, 4)]
[(ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x1d19, 4)]
[(ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x1d19, 4)]
[(ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x1d19, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3a00, 8) , (const, 0x30, 4), (unique, 0x3a00, 8) PTRADD (stack, 0xfffffffffffffec8, 8) , (unique, 0x10001e40, 8) , (const, 0x4, 8), (unique, 0x10001e40, 8) INT_ADD (register, 0x0, 8) , (const, 0x2, 8), (register, 0x0, 8) INT_SEXT (unique, 0x1000324f, 4), (unique, 0x1000324f, 4) CAST (stack, 0xfffffffffffffec4, 4)]
[(unique, 0x10002c6c, 4) COPY (register, 0x18, 4), (register, 0x18, 4) INT_ADD (unique, 0x10000dd8, 4) , (stack, 0xfffffffffffffec4, 4), (unique, 0x10000dd8, 4) INT_ADD (unique, 0x10000e90, 4) , (const, 0x1, 4)]
[(ram, 0x4ae3d0, 8) MULTIEQUAL (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8)]
[(ram, 0x4ae3c8, 8) MULTIEQUAL (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8)]
[(ram, 0x4ae3c0, 8) MULTIEQUAL (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8)]
[(ram, 0x4ae3b0, 8) MULTIEQUAL (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8)]
[(ram, 0x4ae3a0, 10) MULTIEQUAL (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10)]
[(ram, 0x4ae390, 8) MULTIEQUAL (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8)]
[(ram, 0x4ae380, 16) MULTIEQUAL (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16)]
[(stack, 0xffffffffffffff60, 4) COPY (unique, 0xbd00, 4), (unique, 0xbd00, 4) INT_ADD (stack, 0xffffffffffffff60, 4) , (const, 0x1, 4)]
[(stack, 0xfffffffffffffec4, 4) COPY (const, 0x1, 4)]
[(stack, 0xffffffffffffff5c, 4) COPY (register, 0x0, 4), (register, 0x0, 4) INT_ADD (register, 0x0, 4) , (const, 0x45, 4), (register, 0x0, 4) INT_AND (unique, 0x10000dec, 4) , (const, 0x20, 4), (unique, 0x10000dec, 4) INT_2COMP (unique, 0x12600, 4), (unique, 0x12600, 4) INT_ZEXT (register, 0x200, 1), (register, 0x200, 1) INT_EQUAL (register, 0x0, 2) , (const, 0x0, 2), (register, 0x0, 2) INT_AND (unique, 0xbc00, 2) , (const, 0x100, 2), (unique, 0xbc00, 2) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) CAST (unique, 0x1000325f, 8), (unique, 0x1000325f, 8) INT_ADD (unique, 0xbd80, 8) , (unique, 0x3300, 8), (unique, 0x3300, 8) INT_MULT (register, 0x30, 8) , (const, 0x2, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10003257, 8), (unique, 0x10003257, 8) INT_ADD (register, 0x110, 8) , (const, 0xfffffffffffffff0, 8), (register, 0x30, 8) INT_SEXT (unique, 0x10003253, 4), (unique, 0x10003253, 4) CAST (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (stack, 0xffffffffffffff40, 8) , (const, 0x2, 8) , (const, 0x4, 8)]
[(unique, 0x10002b94, 8) COPY (stack, 0xfffffffffffffec8, 8)]
[(unique, 0x10002cec, 4) COPY (unique, 0x10000eae, 4), (unique, 0x10000eae, 4) MULTIEQUAL (unique, 0x10002c6c, 4) , (unique, 0x10002c70, 4)]
[ ---  BRANCH (ram, 0x46da6e, 1)]
[(stack, 0xfffffffffffffec4, 4) COPY (unique, 0xbd00, 4), (unique, 0xbd00, 4) INT_ADD (stack, 0xfffffffffffffec4, 4) , (const, 0x1, 4)]
[(ram, 0x4ae380, 16) INDIRECT (unique, 0x10001ee6, 16) , (const, 0x1cea, 4)]
[(ram, 0x4ae390, 8) INDIRECT (unique, 0x10001ef6, 8) , (const, 0x1cea, 4)]
[(ram, 0x4ae3a0, 10) INDIRECT (unique, 0x10001efe, 10) , (const, 0x1cea, 4)]
[(ram, 0x4ae3b0, 8) INDIRECT (unique, 0x10001f08, 8) , (const, 0x1cea, 4)]
[(ram, 0x4ae3c0, 8) INDIRECT (unique, 0x10001f10, 8) , (const, 0x1cea, 4)]
[(ram, 0x4ae3c8, 8) INDIRECT (unique, 0x10001f18, 8) , (const, 0x1cea, 4)]
[(ram, 0x4ae3d0, 8) INDIRECT (unique, 0x10001f20, 8) , (const, 0x1cea, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (const, 0x31, 4), (unique, 0x3100, 8) PTRADD (stack, 0xfffffffffffffec8, 8) , (const, 0x1, 8) , (const, 0x4, 8)]
[(unique, 0x10002b8c, 8) COPY (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (stack, 0xfffffffffffffec8, 8) , (const, 0x1, 8) , (const, 0x4, 8)]
[(unique, 0x10002ce8, 4) COPY (unique, 0x10000e90, 4)]
[ ---  BRANCH (ram, 0x46da6e, 1)]
[(ram, 0x4ae380, 16) INDIRECT (unique, 0x10001ee6, 16) , (const, 0x1c23, 4)]
[(ram, 0x4ae390, 8) INDIRECT (unique, 0x10001ef6, 8) , (const, 0x1c23, 4)]
[(ram, 0x4ae3a0, 10) INDIRECT (unique, 0x10001efe, 10) , (const, 0x1c23, 4)]
[(ram, 0x4ae3b0, 8) INDIRECT (unique, 0x10001f08, 8) , (const, 0x1c23, 4)]
[(ram, 0x4ae3c0, 8) INDIRECT (unique, 0x10001f10, 8) , (const, 0x1c23, 4)]
[(ram, 0x4ae3c8, 8) INDIRECT (unique, 0x10001f18, 8) , (const, 0x1c23, 4)]
[(ram, 0x4ae3d0, 8) INDIRECT (unique, 0x10001f20, 8) , (const, 0x1c23, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (const, 0x31, 4), (unique, 0x3100, 8) PTRADD (stack, 0xfffffffffffffec8, 8) , (const, 0x2, 8) , (const, 0x4, 8)]
[(stack, 0xffffffffffffff60, 4) COPY (unique, 0xbc80, 4), (unique, 0xbc80, 4) INT_ADD (stack, 0xffffffffffffff60, 4) , (register, 0x0, 4), (register, 0x0, 4) INT_SUB (register, 0x0, 4) , (const, 0x1, 4), (register, 0x0, 4) INT_AND (unique, 0x10000ad4, 4) , (const, 0x2, 4), (unique, 0x10000ad4, 4) INT_2COMP (unique, 0x12600, 4), (unique, 0x12600, 4) INT_ZEXT (register, 0x200, 1), (register, 0x200, 1) INT_EQUAL (stack, 0xffffffffffffff58, 4) , (const, 0x0, 4)]
[(unique, 0x10002b7c, 8) COPY (unique, 0x3100, 8)]
[(unique, 0x10002ce0, 4) COPY (unique, 0x10000e90, 4)]
[ ---  CBRANCH (ram, 0x46da6e, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) INT_ADD (stack, 0xffffffffffffff60, 4) , (register, 0x0, 4), (register, 0x0, 4) INT_SUB (register, 0x0, 4) , (const, 0x1, 4), (register, 0x0, 4) INT_AND (unique, 0x10000ad4, 4) , (const, 0x2, 4), (unique, 0x10000ad4, 4) INT_2COMP (unique, 0x12600, 4), (unique, 0x12600, 4) INT_ZEXT (register, 0x200, 1), (register, 0x200, 1) INT_EQUAL (stack, 0xffffffffffffff58, 4) , (const, 0x0, 4)]
[(stack, 0xffffffffffffff58, 4) COPY (const, 0x0, 4)]
[(unique, 0x10002b84, 8) COPY (unique, 0x3100, 8)]
[(unique, 0x10002ce4, 4) COPY (unique, 0x10000e90, 4)]
[(stack, 0xffffffffffffff60, 4) MULTIEQUAL (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4)]
[(stack, 0xffffffffffffff5c, 4) MULTIEQUAL (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4)]
[(stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4)]
[(ram, 0x4ae3d0, 8) MULTIEQUAL (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8)]
[(ram, 0x4ae3c8, 8) MULTIEQUAL (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8)]
[(ram, 0x4ae3c0, 8) MULTIEQUAL (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8)]
[(ram, 0x4ae3b0, 8) MULTIEQUAL (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8)]
[(ram, 0x4ae3a0, 10) MULTIEQUAL (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10)]
[(ram, 0x4ae390, 8) MULTIEQUAL (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8)]
[(ram, 0x4ae380, 16) MULTIEQUAL (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16)]
[(register, 0xb0, 8) MULTIEQUAL (unique, 0x10002b7c, 8) , (unique, 0x10002b84, 8) , (unique, 0x10002b8c, 8) , (unique, 0x10002b94, 8)]
[ ---  CBRANCH (ram, 0x46cb30, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (unique, 0x10003267, 4) , (unique, 0x1000326b, 4), (unique, 0x1000326b, 4) CAST (register, 0x0, 4), (unique, 0x10003267, 4) CAST (stack, 0xfffffffffffffed0, 4), (register, 0x0, 4) INT_ADD (stack, 0xfffffffffffffec4, 4) , (register, 0x18, 4), (register, 0x18, 4) MULTIEQUAL (unique, 0x10002ce0, 4) , (unique, 0x10002ce4, 4) , (unique, 0x10002ce8, 4) , (unique, 0x10002cec, 4), (stack, 0xfffffffffffffec4, 4) MULTIEQUAL (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4)]
[(register, 0x18, 4) INT_SUB (register, 0x18, 4) , (register, 0x0, 4), (register, 0x0, 4) INT_SUB (register, 0x0, 4) , (stack, 0xfffffffffffffed0, 4)]
[(register, 0xb8, 8) PTRADD (register, 0xb8, 8) , (unique, 0x10001cd8, 8) , (const, 0x4, 8), (unique, 0x10001cd8, 8) INT_2COMP (register, 0x30, 8), (register, 0x30, 8) INT_SEXT (register, 0x0, 4), (register, 0x0, 4) INT_SUB (register, 0x0, 4) , (stack, 0xfffffffffffffed0, 4)]
[ ---  BRANCH (ram, 0x46cb30, 1)]
[ ---  CBRANCH (ram, 0x46cb4c, 1) , (unique, 0xd080, 1), (unique, 0xd080, 1) INT_SLESS (unique, 0x1000326f, 4) , (unique, 0x10003273, 4), (unique, 0x10003273, 4) CAST (unique, 0x10000e90, 4), (unique, 0x1000326f, 4) CAST (register, 0x88, 4)]
[ ---  CBRANCH (ram, 0x46cb30, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x30, 2) , (const, 0xc00, 2)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x1e7b, 4)]
[(stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x1e7b, 4)]
[(stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x1e7b, 4)]
[(stack, 0xfffffffffffffec0, 4) INDIRECT (stack, 0xfffffffffffffec0, 4) , (const, 0x1e7b, 4)]
[(stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x1e7b, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x1e7b, 4)]
[(stack, 0xfffffffffffffed0, 4) INDIRECT (stack, 0xfffffffffffffed0, 4) , (const, 0x1e7b, 4)]
[(stack, 0xfffffffffffffed4, 4) INDIRECT (stack, 0xfffffffffffffed4, 4) , (const, 0x1e7b, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x1e7b, 4)]
[(stack, 0xfffffffffffffee0, 4) INDIRECT (stack, 0xfffffffffffffee0, 4) , (const, 0x1e7b, 4)]
[(stack, 0xfffffffffffffee4, 4) INDIRECT (stack, 0xfffffffffffffee4, 4) , (const, 0x1e7b, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x1e7b, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x1e7b, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x1e7b, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x1e7b, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x1e7b, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x1e7b, 4)]
[(stack, 0xffffffffffffff18, 16) INDIRECT (stack, 0xffffffffffffff18, 16) , (const, 0x1e7b, 4)]
[(stack, 0xffffffffffffff28, 16) INDIRECT (stack, 0xffffffffffffff28, 16) , (const, 0x1e7b, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x1e7b, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x1e7b, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x1e7b, 4)]
[(stack, 0xffffffffffffff52, 2) INDIRECT (stack, 0xffffffffffffff52, 2) , (const, 0x1e7b, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x1e7b, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x1e7b, 4)]
[(stack, 0xffffffffffffff5c, 4) INDIRECT (stack, 0xffffffffffffff5c, 4) , (const, 0x1e7b, 4)]
[(stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0x1e7b, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x1e7b, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x1e7b, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x1e7b, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x1e7b, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x1e7b, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x1e7b, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x1e7b, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x1e7b, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1e7b, 4)]
[ ---  CALL (ram, 0x40160f, 8)]
[(ram, 0x4ae380, 16) COPY (ram, 0x4ae380, 16), (ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x1e7b, 4)]
[(ram, 0x4ae390, 8) COPY (ram, 0x4ae390, 8), (ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x1e7b, 4)]
[(ram, 0x4ae3a0, 10) COPY (ram, 0x4ae3a0, 10), (ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x1e7b, 4)]
[(ram, 0x4ae3b0, 8) COPY (ram, 0x4ae3b0, 8), (ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x1e7b, 4)]
[(ram, 0x4ae3c0, 8) COPY (ram, 0x4ae3c0, 8), (ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x1e7b, 4)]
[(ram, 0x4ae3c8, 8) COPY (ram, 0x4ae3c8, 8), (ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x1e7b, 4)]
[(ram, 0x4ae3d0, 8) COPY (ram, 0x4ae3d0, 8), (ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x1e7b, 4)]
[ ---  RETURN (const, 0x1, 4)]
[(stack, 0xffffffffffffff60, 4) MULTIEQUAL (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4)]
[(stack, 0xffffffffffffff5c, 4) MULTIEQUAL (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4)]
[(stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffec4, 4) MULTIEQUAL (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4)]
[(ram, 0x4ae3d0, 8) MULTIEQUAL (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8)]
[(ram, 0x4ae3c8, 8) MULTIEQUAL (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8)]
[(ram, 0x4ae3c0, 8) MULTIEQUAL (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8)]
[(ram, 0x4ae3b0, 8) MULTIEQUAL (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8)]
[(ram, 0x4ae3a0, 10) MULTIEQUAL (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10)]
[(ram, 0x4ae390, 8) MULTIEQUAL (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8)]
[(ram, 0x4ae380, 16) MULTIEQUAL (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16)]
[(register, 0xb8, 8) MULTIEQUAL (register, 0xb8, 8) , (register, 0xb8, 8) , (register, 0xb8, 8) , (register, 0xb8, 8) , (register, 0xb8, 8) , (register, 0xb8, 8) , (register, 0xb8, 8)]
[(register, 0xb0, 8) MULTIEQUAL (unique, 0x3100, 8) , (unique, 0x3100, 8) , (register, 0xb0, 8) , (register, 0xb0, 8) , (unique, 0x3100, 8) , (unique, 0x3100, 8) , (unique, 0x3100, 8)]
[ ---  CBRANCH (ram, 0x46cb4c, 1) , (unique, 0xd080, 1), (unique, 0xd080, 1) INT_SLESS (unique, 0x10003277, 4) , (unique, 0x1000327b, 4), (unique, 0x1000327b, 4) CAST (register, 0x18, 4), (unique, 0x10003277, 4) CAST (register, 0x88, 4), (register, 0x18, 4) MULTIEQUAL (unique, 0x10000e90, 4) , (unique, 0x10000e90, 4) , (register, 0x18, 4) , (register, 0x18, 4) , (unique, 0x10000e90, 4) , (unique, 0x10000e90, 4) , (unique, 0x10000e90, 4), (register, 0x88, 4) MULTIEQUAL (stack, 0xffffffffffffff28, 4) , (stack, 0xffffffffffffff28, 4) , (register, 0x88, 4) , (register, 0x88, 4) , (register, 0x88, 4) , (stack, 0xffffffffffffff28, 4) , (stack, 0xffffffffffffff28, 4)]
[(stack, 0xffffffffffffff60, 4) MULTIEQUAL (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4)]
[(stack, 0xffffffffffffff5c, 4) MULTIEQUAL (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4)]
[(stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffec4, 4) MULTIEQUAL (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4)]
[(ram, 0x4ae3d0, 8) MULTIEQUAL (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8)]
[(ram, 0x4ae3c8, 8) MULTIEQUAL (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8)]
[(ram, 0x4ae3c0, 8) MULTIEQUAL (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8)]
[(ram, 0x4ae3b0, 8) MULTIEQUAL (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8)]
[(ram, 0x4ae3a0, 10) MULTIEQUAL (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10)]
[(ram, 0x4ae390, 8) MULTIEQUAL (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8)]
[(ram, 0x4ae380, 16) MULTIEQUAL (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16)]
[(register, 0xb0, 8) MULTIEQUAL (register, 0xb0, 8) , (register, 0xb0, 8) , (unique, 0x3100, 8)]
[(register, 0x88, 4) MULTIEQUAL (register, 0x88, 4) , (register, 0x88, 4) , (register, 0x88, 4)]
[(register, 0x18, 4) MULTIEQUAL (register, 0x18, 4) , (register, 0x18, 4) , (unique, 0x10000e90, 4)]
[ ---  CBRANCH (ram, 0x46cb40, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd00, 4) , (const, 0x30, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb8, 8) , (const, 0xffffffffffffffff, 8) , (const, 0x4, 8), (register, 0xb8, 8) MULTIEQUAL (register, 0xb8, 8) , (register, 0xb8, 8) , (register, 0xb8, 8)]
[(register, 0xb8, 8) PTRADD (register, 0xb8, 8) , (const, 0xffffffffffffffff, 8) , (const, 0x4, 8)]
[ ---  CBRANCH (ram, 0x46cb53, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (unique, 0x1000327f, 4) , (unique, 0x10003283, 4), (unique, 0x10003283, 4) CAST (register, 0x18, 4), (unique, 0x1000327f, 4) CAST (register, 0x88, 4), (register, 0x18, 4) INT_SUB (register, 0x18, 4) , (const, 0x1, 4)]
[(stack, 0xffffffffffffff60, 4) MULTIEQUAL (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4)]
[(stack, 0xffffffffffffff5c, 4) MULTIEQUAL (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4)]
[(stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffec4, 4) MULTIEQUAL (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4)]
[(ram, 0x4ae3d0, 8) MULTIEQUAL (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8)]
[(ram, 0x4ae3c8, 8) MULTIEQUAL (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8)]
[(ram, 0x4ae3c0, 8) MULTIEQUAL (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8)]
[(ram, 0x4ae3b0, 8) MULTIEQUAL (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8)]
[(ram, 0x4ae3a0, 10) MULTIEQUAL (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10)]
[(ram, 0x4ae390, 8) MULTIEQUAL (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8)]
[(ram, 0x4ae380, 16) MULTIEQUAL (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16)]
[(register, 0xb8, 8) MULTIEQUAL (register, 0xb8, 8) , (register, 0xb8, 8) , (register, 0xb8, 8)]
[(register, 0xb0, 8) MULTIEQUAL (register, 0xb0, 8) , (register, 0xb0, 8) , (register, 0xb0, 8)]
[ ---  CBRANCH (ram, 0x46cb78, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x18, 4) , (const, 0x0, 4), (register, 0x18, 4) MULTIEQUAL (register, 0x18, 4) , (register, 0x18, 4) , (register, 0x18, 4)]
[ ---  CBRANCH (ram, 0x46cb78, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x58c00, 1) , (const, 0x0, 1), (unique, 0x58c00, 1) INT_AND (unique, 0xbb00, 1) , (const, 0x8, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x10003287, 8), (unique, 0x10003287, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (stack, 0xffffffffffffff40, 8) , (const, 0x3, 8) , (const, 0x4, 8)]
[ ---  CBRANCH (ram, 0x46cb78, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (stack, 0xffffffffffffff38, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb8, 8) , (const, 0xffffffffffffffff, 8) , (const, 0x4, 8)]
[(register, 0xb8, 8) PTRADD (register, 0xb8, 8) , (const, 0xffffffffffffffff, 8) , (const, 0x4, 8)]
[(stack, 0xffffffffffffff60, 4) MULTIEQUAL (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4)]
[(stack, 0xffffffffffffff5c, 4) MULTIEQUAL (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4)]
[(stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(ram, 0x4ae3d0, 8) MULTIEQUAL (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8)]
[(ram, 0x4ae3c8, 8) MULTIEQUAL (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8)]
[(ram, 0x4ae3c0, 8) MULTIEQUAL (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8)]
[(ram, 0x4ae3b0, 8) MULTIEQUAL (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8)]
[(ram, 0x4ae3a0, 10) MULTIEQUAL (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10)]
[(ram, 0x4ae390, 8) MULTIEQUAL (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8)]
[(ram, 0x4ae380, 16) MULTIEQUAL (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16)]
[(register, 0xb8, 8) MULTIEQUAL (register, 0xb8, 8) , (register, 0xb8, 8) , (register, 0xb8, 8) , (register, 0xb8, 8) , (register, 0xb8, 8)]
[(register, 0xb0, 8) MULTIEQUAL (register, 0xb0, 8) , (register, 0xb0, 8) , (register, 0xb0, 8) , (register, 0xb0, 8) , (unique, 0x3100, 8)]
[(unique, 0x1000289c, 4) COPY (stack, 0xfffffffffffffec4, 4), (stack, 0xfffffffffffffec4, 4) MULTIEQUAL (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4)]
[ ---  CBRANCH (ram, 0x46ccda, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffff10, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x46cbe7, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffee0, 4)]
[(stack, 0xfffffffffffffed4, 4) COPY (const, 0x0, 4)]
[(stack, 0xffffffffffffff28, 16) INT_ADD (unique, 0x1000235c, 16) , (unique, 0xbb00, 1), (unique, 0x1000235c, 16) INT_LEFT (unique, 0x1000234c, 16) , (const, 0x8, 16), (unique, 0x1000234c, 16) INT_SEXT (stack, 0xffffffffffffff29, 15), (stack, 0xffffffffffffff29, 15) SUBPIECE (stack, 0xffffffffffffff28, 16) , (const, 0x1, 8), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (stack, 0xffffffffffffff10, 8)]
[ ---  CBRANCH (ram, 0x46ccda, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (const, 0x7d, 1) , (unique, 0x1000328f, 1), (unique, 0x1000328f, 1) CAST (register, 0x0, 1), (register, 0x0, 1) INT_SUB (unique, 0xbb00, 1) , (const, 0x1, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (stack, 0xffffffffffffff10, 8)]
[(register, 0x30, 4) COPY (const, 0x0, 4)]
[(unique, 0x100028e4, 8) COPY (stack, 0xffffffffffffff10, 8)]
[(unique, 0x10002c0c, 4) COPY (stack, 0xfffffffffffffec4, 4)]
[ ---  BRANCH (ram, 0x46cbda, 1)]
[(register, 0x30, 4) MULTIEQUAL (register, 0x30, 4) , (register, 0x30, 4)]
[ ---  CBRANCH (ram, 0x46cbc0, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESSEQUAL (register, 0x10, 4) , (register, 0x38, 4), (register, 0x38, 4) INT_SEXT (unique, 0x10003290, 1), (unique, 0x10003290, 1) CAST (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x100028e4, 8) , (register, 0x0, 8), (register, 0x10, 4) MULTIEQUAL (unique, 0x10002c0c, 4) , (register, 0x10, 4)]
[(register, 0x0, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[(register, 0x30, 4) INT_ADD (register, 0x30, 4) , (const, 0x1, 4)]
[(register, 0x10, 4) INT_SUB (register, 0x10, 4) , (register, 0x38, 4)]
[ ---  CBRANCH (ram, 0x46cbe1, 1) , (unique, 0xc900, 1), (unique, 0xc900, 1) INT_LESS (const, 0x7e, 1) , (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[(stack, 0xfffffffffffffed4, 4) COPY (register, 0x30, 4), (register, 0x30, 4) MULTIEQUAL (register, 0x30, 4) , (register, 0x30, 4)]
[ ---  CBRANCH (ram, 0x46dff1, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x0, 1)]
[(stack, 0xfffffffffffffed4, 4) COPY (register, 0x0, 4), (register, 0x0, 4) INT_ADD (unique, 0x10000e7c, 4) , (register, 0x30, 4), (unique, 0x10000e7c, 4) INT_DIV (unique, 0x3100, 4) , (register, 0x38, 4), (unique, 0x3100, 4) INT_SUB (register, 0x10, 4) , (const, 0x1, 4)]
[ ---  BRANCH (ram, 0x46cbe7, 1)]
[(stack, 0xffffffffffffff28, 16) MULTIEQUAL (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16)]
[ ---  CBRANCH (ram, 0x46ccda, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xfffffffffffffed4, 4) , (const, 0x0, 4), (stack, 0xfffffffffffffed4, 4) MULTIEQUAL (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100032b5, 8) , (const, 0x46cc28, 8), (unique, 0x100032b5, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1066, 4)]
[(ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x1066, 4)]
[(ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x1066, 4)]
[(ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x1066, 4)]
[(ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x1066, 4)]
[(ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x1066, 4)]
[(ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x1066, 4)]
[(ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x1066, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x1066, 4)]
[(stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x1066, 4)]
[(stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x1066, 4)]
[(stack, 0xfffffffffffffec0, 4) INDIRECT (stack, 0xfffffffffffffec0, 4) , (const, 0x1066, 4)]
[(stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x1066, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x1066, 4)]
[(stack, 0xfffffffffffffed0, 4) INDIRECT (stack, 0xfffffffffffffed0, 4) , (const, 0x1066, 4)]
[(stack, 0xfffffffffffffed4, 4) INDIRECT (stack, 0xfffffffffffffed4, 4) , (const, 0x1066, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x1066, 4)]
[(stack, 0xfffffffffffffee0, 4) INDIRECT (stack, 0xfffffffffffffee0, 4) , (const, 0x1066, 4)]
[(stack, 0xfffffffffffffee4, 4) INDIRECT (stack, 0xfffffffffffffee4, 4) , (const, 0x1066, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x1066, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x1066, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x1066, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x1066, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x1066, 4)]
[(stack, 0xffffffffffffff18, 16) INDIRECT (stack, 0xffffffffffffff18, 16) , (const, 0x1066, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x1066, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x1066, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x1066, 4)]
[(stack, 0xffffffffffffff52, 2) INDIRECT (stack, 0xffffffffffffff52, 2) , (const, 0x1066, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x1066, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x1066, 4)]
[(stack, 0xffffffffffffff5c, 4) INDIRECT (stack, 0xffffffffffffff5c, 4) , (const, 0x1066, 4)]
[(stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0x1066, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x1066, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x1066, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x1066, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x1066, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x1066, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x1066, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x1066, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x1066, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1066, 4)]
[ ---  CALL (ram, 0x47afe0, 8) , (unique, 0x100032bd, 8) , (unique, 0x100032c5, 8) , (register, 0x10, 8), (unique, 0x100032c5, 8) CAST (unique, 0x3400, 8), (unique, 0x100032bd, 8) CAST (unique, 0x3400, 8), (register, 0x10, 8) INT_SRIGHT (register, 0x10, 8) , (const, 0x2, 4), (unique, 0x3400, 8) PTRADD (register, 0xb0, 8) , (register, 0x0, 8) , (const, 0x4, 8), (register, 0x10, 8) CAST (unique, 0x100032a5, 8), (unique, 0x100032a5, 8) INT_SUB (unique, 0x10003295, 8) , (unique, 0x1000329d, 8), (unique, 0x1000329d, 8) CAST (unique, 0x3400, 8), (unique, 0x10003295, 8) CAST (register, 0xb8, 8), (register, 0x0, 8) INT_ADD (register, 0x0, 8) , (register, 0xa8, 8), (unique, 0x3400, 8) PTRADD (register, 0xb0, 8) , (register, 0x0, 8) , (const, 0x4, 8), (register, 0xa8, 8) INT_SEXT (stack, 0xfffffffffffffed4, 4), (register, 0x0, 8) INT_SEXT (unique, 0x10003291, 4), (unique, 0x10003291, 4) CAST (stack, 0xfffffffffffffec4, 4)]
[(unique, 0x3a00, 8) CAST (unique, 0x100032dd, 8), (unique, 0x100032dd, 8) INT_ADD (unique, 0x100032d5, 8) , (unique, 0x10001aa8, 8), (unique, 0x100032d5, 8) CAST (register, 0xb0, 8), (unique, 0x10001aa8, 8) INT_ADD (unique, 0x100032cd, 8) , (const, 0xfffffffffffffffc, 8), (unique, 0x100032cd, 8) CAST (stack, 0xffffffffffffff28, 8), (stack, 0xffffffffffffff28, 8) SUBPIECE (stack, 0xffffffffffffff28, 16) , (const, 0x0, 8), (stack, 0xffffffffffffff28, 16) INDIRECT (stack, 0xffffffffffffff28, 16) , (const, 0x1066, 4), (stack, 0xffffffffffffff28, 16) INT_ADD (unique, 0x1000237c, 16) , (unique, 0x3680, 8), (unique, 0x1000237c, 16) INT_LEFT (unique, 0x1000236c, 16) , (const, 0x40, 16), (unique, 0x1000236c, 16) INT_SEXT (unique, 0x100032ad, 8), (unique, 0x100032ad, 8) CAST (stack, 0xffffffffffffff30, 8), (stack, 0xffffffffffffff30, 8) SUBPIECE (stack, 0xffffffffffffff28, 16) , (const, 0x8, 8), (unique, 0x3680, 8) INT_MULT (register, 0x0, 8) , (const, 0x4, 8), (register, 0x0, 8) INT_ADD (register, 0x0, 8) , (register, 0xa8, 8), (register, 0xa8, 8) INT_SEXT (stack, 0xfffffffffffffed4, 4), (register, 0x0, 8) INT_SEXT (unique, 0x10003291, 4), (unique, 0x10003291, 4) CAST (stack, 0xfffffffffffffec4, 4)]
[(register, 0x88, 4) INT_SEXT (unique, 0x100032e5, 1), (unique, 0x100032e5, 1) CAST (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (stack, 0xffffffffffffff10, 8), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x1066, 4)]
[(unique, 0x1000291c, 8) COPY (stack, 0xffffffffffffff10, 8), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x1066, 4)]
[(ram, 0x4ae3d0, 8) MULTIEQUAL (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8)]
[(ram, 0x4ae3c8, 8) MULTIEQUAL (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8)]
[(ram, 0x4ae3c0, 8) MULTIEQUAL (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8)]
[(ram, 0x4ae3b0, 8) MULTIEQUAL (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8)]
[(ram, 0x4ae3a0, 10) MULTIEQUAL (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10)]
[(ram, 0x4ae390, 8) MULTIEQUAL (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8)]
[(ram, 0x4ae380, 16) MULTIEQUAL (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16)]
[(register, 0x8, 8) MULTIEQUAL (unique, 0x1000291c, 8) , (unique, 0x100013e4, 8)]
[(register, 0x18, 8) INT_ZEXT (unique, 0x10000e94, 4), (unique, 0x10000e94, 4) MULTIEQUAL (unique, 0x1000289c, 4) , (register, 0x30, 4)]
[(register, 0x30, 8) INT_ZEXT (register, 0x30, 4), (register, 0x30, 4) INT_SUB (unique, 0x10000e94, 4) , (register, 0x88, 4), (register, 0x88, 4) MULTIEQUAL (register, 0x88, 4) , (unique, 0x100013df, 4), (unique, 0x10000e94, 4) MULTIEQUAL (unique, 0x1000289c, 4) , (register, 0x30, 4)]
[(unique, 0x100028d4, 8) COPY (register, 0x38, 8), (register, 0x38, 8) MULTIEQUAL (unique, 0x3a00, 8) , (unique, 0x3a00, 8)]
[(ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x109d, 4), (ram, 0x4ae380, 16) MULTIEQUAL (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16)]
[(ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x109d, 4), (ram, 0x4ae390, 8) MULTIEQUAL (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8)]
[(ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x109d, 4), (ram, 0x4ae3a0, 10) MULTIEQUAL (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10)]
[(ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x109d, 4), (ram, 0x4ae3b0, 8) MULTIEQUAL (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8)]
[(ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x109d, 4), (ram, 0x4ae3c0, 8) MULTIEQUAL (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8)]
[(ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x109d, 4), (ram, 0x4ae3c8, 8) MULTIEQUAL (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8)]
[(ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x109d, 4), (ram, 0x4ae3d0, 8) MULTIEQUAL (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x0, 8) , (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (register, 0xb0, 8) , (register, 0x10, 8) , (const, 0x4, 8), (register, 0x10, 8) INT_ZEXT (register, 0x10, 4), (register, 0x10, 4) INT_SUB (unique, 0x1000072f, 4) , (const, 0x1, 4), (unique, 0x1000072f, 4) SUBPIECE (register, 0x18, 8) , (const, 0x0, 4), (register, 0x0, 8) MULTIEQUAL (unique, 0x100028d4, 8) , (unique, 0x100028dc, 8), (register, 0x18, 8) MULTIEQUAL (register, 0x18, 8) , (register, 0x10, 8)]
[(unique, 0x100028dc, 8) COPY (register, 0x0, 8), (register, 0x0, 8) PTRADD (register, 0x0, 8) , (const, 0xffffffffffffffff, 8) , (const, 0x4, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x100028d4, 8) , (unique, 0x100028dc, 8)]
[ ---  CBRANCH (ram, 0x46cc60, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x10, 4) , (register, 0x30, 4), (register, 0x10, 4) INT_SUB (unique, 0x1000072f, 4) , (const, 0x1, 4), (unique, 0x1000072f, 4) SUBPIECE (register, 0x18, 8) , (const, 0x0, 4), (register, 0x18, 8) MULTIEQUAL (register, 0x18, 8) , (register, 0x10, 8)]
[(ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x10bf, 4)]
[(ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x10bf, 4)]
[(ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x10bf, 4)]
[(ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x10bf, 4)]
[(ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x10bf, 4)]
[(ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x10bf, 4)]
[(ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x10bf, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3400, 8) , (stack, 0xfffffffffffffee4, 4), (unique, 0x3400, 8) PTRADD (register, 0x38, 8) , (register, 0x10, 8) , (const, 0x4, 8), (register, 0x10, 8) INT_NEGATE (register, 0x0, 8), (register, 0x0, 8) INT_ZEXT (register, 0x0, 4), (register, 0x0, 4) INT_SUB (register, 0x88, 4) , (const, 0x1, 4)]
[(unique, 0x10002a8c, 8) COPY (unique, 0x3a00, 8), (unique, 0x3a00, 8) PTRADD (register, 0x38, 8) , (unique, 0x10001ad8, 8) , (const, 0x4, 8), (unique, 0x10001ad8, 8) INT_SUB (const, 0xfffffffffffffffe, 8) , (register, 0x0, 8), (register, 0x0, 8) INT_ZEXT (register, 0x0, 4), (register, 0x0, 4) INT_SUB (register, 0x88, 4) , (const, 0x1, 4)]
[ ---  CBRANCH (ram, 0x46ccc0, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (const, 0x7e, 1) , (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x8, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x46ccb0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x0, 1)]
[(unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0x8, 8)]
[(register, 0x8, 8) PTRADD (register, 0x8, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[(unique, 0x100013e4, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8)]
[(unique, 0x10002a94, 8) COPY (unique, 0x3a00, 8)]
[ ---  CBRANCH (ram, 0x46cca7, 1) , (unique, 0x100013e3, 1), (unique, 0x100013e3, 1) INT_LESS (unique, 0x100013df, 4) , (register, 0x30, 4), (unique, 0x100013df, 4) INT_SEXT (unique, 0x100032e6, 1), (unique, 0x100032e6, 1) CAST (unique, 0xbb00, 1), (unique, 0xbb00, 1) MULTIEQUAL (unique, 0xbb00, 1) , (unique, 0xbb00, 1)]
[(ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x1105, 4), (ram, 0x4ae380, 16) MULTIEQUAL (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16)]
[(ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x1105, 4), (ram, 0x4ae390, 8) MULTIEQUAL (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8)]
[(ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x1105, 4), (ram, 0x4ae3a0, 10) MULTIEQUAL (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10)]
[(ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x1105, 4), (ram, 0x4ae3b0, 8) MULTIEQUAL (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8)]
[(ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x1105, 4), (ram, 0x4ae3c0, 8) MULTIEQUAL (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8)]
[(ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x1105, 4), (ram, 0x4ae3c8, 8) MULTIEQUAL (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8)]
[(ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x1105, 4), (ram, 0x4ae3d0, 8) MULTIEQUAL (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x38, 8) , (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) PTRADD (register, 0xb0, 8) , (register, 0x0, 8) , (const, 0x4, 8), (register, 0x0, 8) INT_ZEXT (register, 0x0, 4), (register, 0x0, 4) INT_SUB (unique, 0x1000074c, 4) , (const, 0x1, 4), (unique, 0x1000074c, 4) SUBPIECE (register, 0x30, 8) , (const, 0x0, 4), (register, 0x30, 8) MULTIEQUAL (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x0, 8), (register, 0x38, 8) MULTIEQUAL (unique, 0x10002a8c, 8) , (unique, 0x10002a94, 8) , (unique, 0x10002a9c, 8)]
[(unique, 0x10002a9c, 8) COPY (register, 0x38, 8), (register, 0x38, 8) PTRADD (register, 0x38, 8) , (const, 0xffffffffffffffff, 8) , (const, 0x4, 8), (register, 0x38, 8) MULTIEQUAL (unique, 0x10002a8c, 8) , (unique, 0x10002a94, 8) , (unique, 0x10002a9c, 8)]
[ ---  CBRANCH (ram, 0x46ccc0, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (register, 0xb0, 8) , (register, 0x38, 8), (register, 0x38, 8) PTRADD (register, 0x38, 8) , (const, 0xffffffffffffffff, 8) , (const, 0x4, 8), (register, 0x38, 8) MULTIEQUAL (unique, 0x10002a8c, 8) , (unique, 0x10002a94, 8) , (unique, 0x10002a9c, 8)]
[(unique, 0x3400, 8) PTRADD (register, 0xb8, 8) , (register, 0xa8, 8) , (const, 0x4, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 4) MULTIEQUAL (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4)]
[(stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff52, 2) MULTIEQUAL (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff28, 16) MULTIEQUAL (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16)]
[(stack, 0xffffffffffffff18, 16) MULTIEQUAL (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee4, 4) MULTIEQUAL (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4)]
[(stack, 0xfffffffffffffee0, 4) MULTIEQUAL (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed4, 4) MULTIEQUAL (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4)]
[(stack, 0xfffffffffffffed0, 4) MULTIEQUAL (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffec4, 4) MULTIEQUAL (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4)]
[(stack, 0xfffffffffffffec0, 4) MULTIEQUAL (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4)]
[(stack, 0xfffffffffffffebc, 4) MULTIEQUAL (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4)]
[(stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(ram, 0x4ae3d0, 8) MULTIEQUAL (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8)]
[(ram, 0x4ae3c8, 8) MULTIEQUAL (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8)]
[(ram, 0x4ae3c0, 8) MULTIEQUAL (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8)]
[(ram, 0x4ae3b0, 8) MULTIEQUAL (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8)]
[(ram, 0x4ae3a0, 10) MULTIEQUAL (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10)]
[(ram, 0x4ae390, 8) MULTIEQUAL (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8)]
[(ram, 0x4ae380, 16) MULTIEQUAL (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x10002b9c, 8) COPY (register, 0xb8, 8), (register, 0xb8, 8) MULTIEQUAL (register, 0xb8, 8) , (register, 0xb8, 8) , (register, 0xb8, 8) , (unique, 0x3400, 8)]
[ ---  CBRANCH (ram, 0x46cd6b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffff5c, 4) , (const, 0x66, 4), (stack, 0xffffffffffffff5c, 4) MULTIEQUAL (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4)]
[ ---  CBRANCH (ram, 0x46e1a3, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffff58, 4) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x46e1b5, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xfffffffffffffebc, 1) , (const, 0x67, 1), (stack, 0xfffffffffffffebc, 1) SUBPIECE (stack, 0xfffffffffffffebc, 4) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x46e5f1, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffff60, 4) , (const, 0x4, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100032e7, 8) , (const, 0x46e605, 8), (unique, 0x100032e7, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1a0d, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x1a0d, 4)]
[(stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x1a0d, 4)]
[(stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x1a0d, 4)]
[(stack, 0xfffffffffffffec0, 4) INDIRECT (stack, 0xfffffffffffffec0, 4) , (const, 0x1a0d, 4)]
[(stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x1a0d, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x1a0d, 4)]
[(stack, 0xfffffffffffffed0, 4) INDIRECT (stack, 0xfffffffffffffed0, 4) , (const, 0x1a0d, 4)]
[(stack, 0xfffffffffffffed4, 4) INDIRECT (stack, 0xfffffffffffffed4, 4) , (const, 0x1a0d, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x1a0d, 4)]
[(stack, 0xfffffffffffffee0, 4) INDIRECT (stack, 0xfffffffffffffee0, 4) , (const, 0x1a0d, 4)]
[(stack, 0xfffffffffffffee4, 4) INDIRECT (stack, 0xfffffffffffffee4, 4) , (const, 0x1a0d, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x1a0d, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x1a0d, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x1a0d, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x1a0d, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x1a0d, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x1a0d, 4)]
[(stack, 0xffffffffffffff18, 16) INDIRECT (stack, 0xffffffffffffff18, 16) , (const, 0x1a0d, 4)]
[(stack, 0xffffffffffffff28, 16) INDIRECT (stack, 0xffffffffffffff28, 16) , (const, 0x1a0d, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x1a0d, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x1a0d, 4)]
[(stack, 0xffffffffffffff52, 2) INDIRECT (stack, 0xffffffffffffff52, 2) , (const, 0x1a0d, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x1a0d, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x1a0d, 4)]
[(stack, 0xffffffffffffff5c, 4) INDIRECT (stack, 0xffffffffffffff5c, 4) , (const, 0x1a0d, 4)]
[(stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0x1a0d, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x1a0d, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x1a0d, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x1a0d, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x1a0d, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x1a0d, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x1a0d, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x1a0d, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x1a0d, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1a0d, 4)]
[ ---  CALL (ram, 0x47afd0, 8) , (unique, 0x100032ef, 8) , (unique, 0x10001570, 8) , (const, 0x6, 8), (unique, 0x100032ef, 8) CAST (register, 0xb0, 8), (unique, 0x10001570, 8) COPY (const, 0x4ae358, 8)]
[(ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x1a14, 4), (ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x1a0d, 4)]
[(ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x1a14, 4), (ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x1a0d, 4)]
[(ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x1a14, 4), (ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x1a0d, 4)]
[(ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x1a14, 4), (ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x1a0d, 4)]
[(ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x1a14, 4), (ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x1a0d, 4)]
[(ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x1a14, 4), (ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x1a0d, 4)]
[(ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x1a14, 4), (ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x1a0d, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (stack, 0xffffffffffffff38, 4), (unique, 0x3100, 8) PTRADD (register, 0xb0, 8) , (const, 0x1, 8) , (const, 0x4, 8), (stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x1a0d, 4)]
[ ---  CBRANCH (ram, 0x46e626, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (register, 0xb8, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb0, 8) , (const, 0x2, 8) , (const, 0x4, 8)]
[(register, 0xb8, 8) PTRADD (register, 0xb8, 8) , (const, 0x4, 8) , (const, 0x4, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000330f, 8) , (const, 0x46e642, 8), (unique, 0x1000330f, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1a66, 4)]
[(ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x1a66, 4)]
[(ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x1a66, 4)]
[(ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x1a66, 4)]
[(ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x1a66, 4)]
[(ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x1a66, 4)]
[(ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x1a66, 4)]
[(ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x1a66, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x1a66, 4)]
[(stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x1a66, 4)]
[(stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x1a66, 4)]
[(stack, 0xfffffffffffffec0, 4) INDIRECT (stack, 0xfffffffffffffec0, 4) , (const, 0x1a66, 4)]
[(stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x1a66, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x1a66, 4)]
[(stack, 0xfffffffffffffed0, 4) INDIRECT (stack, 0xfffffffffffffed0, 4) , (const, 0x1a66, 4)]
[(stack, 0xfffffffffffffed4, 4) INDIRECT (stack, 0xfffffffffffffed4, 4) , (const, 0x1a66, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x1a66, 4)]
[(stack, 0xfffffffffffffee0, 4) INDIRECT (stack, 0xfffffffffffffee0, 4) , (const, 0x1a66, 4)]
[(stack, 0xfffffffffffffee4, 4) INDIRECT (stack, 0xfffffffffffffee4, 4) , (const, 0x1a66, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x1a66, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x1a66, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x1a66, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x1a66, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x1a66, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x1a66, 4)]
[(stack, 0xffffffffffffff18, 16) INDIRECT (stack, 0xffffffffffffff18, 16) , (const, 0x1a66, 4)]
[(stack, 0xffffffffffffff28, 16) INDIRECT (stack, 0xffffffffffffff28, 16) , (const, 0x1a66, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x1a66, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x1a66, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x1a66, 4)]
[(stack, 0xffffffffffffff52, 2) INDIRECT (stack, 0xffffffffffffff52, 2) , (const, 0x1a66, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x1a66, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x1a66, 4)]
[(stack, 0xffffffffffffff5c, 4) INDIRECT (stack, 0xffffffffffffff5c, 4) , (const, 0x1a66, 4)]
[(stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0x1a66, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x1a66, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x1a66, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x1a66, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x1a66, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x1a66, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x1a66, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x1a66, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x1a66, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1a66, 4)]
[ ---  CALL (ram, 0x401150, 8) , (unique, 0x3100, 8) , (const, 0x30, 8) , (register, 0x10, 8), (register, 0x10, 8) INT_SRIGHT (register, 0x10, 8) , (const, 0x2, 4), (register, 0x10, 8) CAST (unique, 0x10003307, 8), (unique, 0x10003307, 8) INT_SUB (unique, 0x100032f7, 8) , (unique, 0x100032ff, 8), (unique, 0x100032ff, 8) CAST (unique, 0x3100, 8), (unique, 0x100032f7, 8) CAST (register, 0xb8, 8), (unique, 0x3100, 8) PTRADD (register, 0xb0, 8) , (const, 0x6, 8) , (const, 0x4, 8)]
[ ---  BRANCH (ram, 0x46cd6b, 1)]
[(register, 0xb8, 8) PTRADD (register, 0xb8, 8) , (const, 0x5, 8) , (const, 0x4, 8)]
[ ---  BRANCH (ram, 0x46cd6b, 1)]
[(ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x1a05, 4)]
[(ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x1a05, 4)]
[(ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x1a05, 4)]
[(ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x1a05, 4)]
[(ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x1a05, 4)]
[(ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x1a05, 4)]
[(ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x1a05, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0xb8, 8) , (stack, 0xffffffffffffff5c, 4)]
[(register, 0x10, 4) COPY (const, 0x2d, 4)]
[ ---  BRANCH (ram, 0x46cd05, 1)]
[(ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x1137, 4)]
[(ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x1137, 4)]
[(ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x1137, 4)]
[(ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x1137, 4)]
[(ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x1137, 4)]
[(ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x1137, 4)]
[(ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x1137, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0xb8, 8) , (stack, 0xffffffffffffff5c, 4)]
[(register, 0x10, 4) COPY (const, 0x2b, 4)]
[(ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x113b, 4), (ram, 0x4ae380, 16) MULTIEQUAL (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16)]
[(ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x113b, 4), (ram, 0x4ae390, 8) MULTIEQUAL (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8)]
[(ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x113b, 4), (ram, 0x4ae3a0, 10) MULTIEQUAL (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10)]
[(ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x113b, 4), (ram, 0x4ae3b0, 8) MULTIEQUAL (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8)]
[(ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x113b, 4), (ram, 0x4ae3c0, 8) MULTIEQUAL (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8)]
[(ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x113b, 4), (ram, 0x4ae3c8, 8) MULTIEQUAL (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8)]
[(ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x113b, 4), (ram, 0x4ae3d0, 8) MULTIEQUAL (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (register, 0x10, 4), (unique, 0x3100, 8) PTRADD (register, 0xb8, 8) , (const, 0x1, 8) , (const, 0x4, 8), (register, 0x10, 4) MULTIEQUAL (register, 0x10, 4) , (register, 0x10, 4)]
[(unique, 0x3100, 8) PTRADD (register, 0xb8, 8) , (const, 0x2, 8) , (const, 0x4, 8)]
[ ---  CBRANCH (ram, 0x46d40d, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (unique, 0x10003317, 4) , (const, 0xa, 4), (unique, 0x10003317, 4) CAST (stack, 0xffffffffffffff60, 4)]
[(ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x19e7, 4)]
[(ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x19e7, 4)]
[(ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x19e7, 4)]
[(ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x19e7, 4)]
[(ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x19e7, 4)]
[(ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x19e7, 4)]
[(ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x19e7, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (const, 0x30, 4), (unique, 0x3100, 8) PTRADD (register, 0xb8, 8) , (const, 0x2, 8) , (const, 0x4, 8)]
[(unique, 0x3100, 8) PTRADD (register, 0xb8, 8) , (const, 0x3, 8) , (const, 0x4, 8)]
[ ---  BRANCH (ram, 0x46cd62, 1)]
[(register, 0x8, 4) COPY (const, 0xa, 4)]
[(unique, 0x10002a2c, 8) COPY (unique, 0x3100, 8)]
[(unique, 0x10002c10, 4) COPY (unique, 0x10000ecb, 4), (unique, 0x10000ecb, 4) INT_MULT (register, 0x8, 4) , (const, 0xa, 4), (register, 0x8, 4) MULTIEQUAL (register, 0x8, 4) , (unique, 0x10000ecb, 4)]
[ ---  CBRANCH (ram, 0x46cd20, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESSEQUAL (unique, 0x10000ecb, 4) , (unique, 0x1000331b, 4), (unique, 0x1000331b, 4) CAST (stack, 0xffffffffffffff60, 4), (unique, 0x10000ecb, 4) INT_MULT (register, 0x8, 4) , (const, 0xa, 4), (register, 0x8, 4) MULTIEQUAL (register, 0x8, 4) , (unique, 0x10000ecb, 4)]
[(register, 0x10, 4) INT_SREM (unique, 0x10003323, 4) , (unique, 0x1000079c, 4), (unique, 0x10003323, 4) CAST (register, 0x0, 4), (unique, 0x1000079c, 4) INT_SDIV (register, 0x8, 4) , (const, 0xa, 4), (register, 0x0, 4) MULTIEQUAL (stack, 0xffffffffffffff60, 4) , (register, 0x10, 4), (register, 0x8, 4) MULTIEQUAL (unique, 0x10002c10, 4) , (unique, 0x10002c14, 4)]
[(ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x11e6, 4), (ram, 0x4ae380, 16) MULTIEQUAL (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16)]
[(ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x11e6, 4), (ram, 0x4ae390, 8) MULTIEQUAL (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8)]
[(ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x11e6, 4), (ram, 0x4ae3a0, 10) MULTIEQUAL (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10)]
[(ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x11e6, 4), (ram, 0x4ae3b0, 8) MULTIEQUAL (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8)]
[(ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x11e6, 4), (ram, 0x4ae3c0, 8) MULTIEQUAL (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8)]
[(ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x11e6, 4), (ram, 0x4ae3c8, 8) MULTIEQUAL (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8)]
[(ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x11e6, 4), (ram, 0x4ae3d0, 8) MULTIEQUAL (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x30, 8) , (register, 0x0, 4), (register, 0x0, 4) INT_ADD (register, 0x0, 4) , (const, 0x30, 4), (register, 0x0, 4) INT_SDIV (unique, 0x1000331f, 4) , (unique, 0x1000079c, 4), (unique, 0x1000331f, 4) CAST (register, 0x0, 4), (unique, 0x1000079c, 4) INT_SDIV (register, 0x8, 4) , (const, 0xa, 4), (register, 0x0, 4) MULTIEQUAL (stack, 0xffffffffffffff60, 4) , (register, 0x10, 4), (register, 0x8, 4) MULTIEQUAL (unique, 0x10002c10, 4) , (unique, 0x10002c14, 4), (register, 0x30, 8) MULTIEQUAL (unique, 0x10002a2c, 8) , (unique, 0x10002a34, 8)]
[(unique, 0x10002a34, 8) COPY (register, 0x30, 8), (register, 0x30, 8) PTRADD (register, 0x30, 8) , (const, 0x1, 8) , (const, 0x4, 8), (register, 0x30, 8) MULTIEQUAL (unique, 0x10002a2c, 8) , (unique, 0x10002a34, 8)]
[(unique, 0x10002c14, 4) COPY (unique, 0x1000079c, 4), (unique, 0x1000079c, 4) INT_SDIV (register, 0x8, 4) , (const, 0xa, 4), (register, 0x8, 4) MULTIEQUAL (unique, 0x10002c10, 4) , (unique, 0x10002c14, 4)]
[ ---  CBRANCH (ram, 0x46cd30, 1) , (unique, 0xd080, 1), (unique, 0xd080, 1) INT_SLESS (const, 0x6d, 4) , (register, 0x8, 4), (register, 0x8, 4) MULTIEQUAL (unique, 0x10002c10, 4) , (unique, 0x10002c14, 4)]
[(stack, 0xffffffffffffff60, 4) COPY (register, 0x10, 4)]
[(unique, 0x3100, 8) PTRADD (register, 0x30, 8) , (const, 0x1, 8) , (const, 0x4, 8), (register, 0x30, 8) MULTIEQUAL (register, 0x30, 8) , (unique, 0x3100, 8)]
[(ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x1206, 4), (ram, 0x4ae380, 16) MULTIEQUAL (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16)]
[(ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x1206, 4), (ram, 0x4ae390, 8) MULTIEQUAL (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8)]
[(ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x1206, 4), (ram, 0x4ae3a0, 10) MULTIEQUAL (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10)]
[(ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x1206, 4), (ram, 0x4ae3b0, 8) MULTIEQUAL (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8)]
[(ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x1206, 4), (ram, 0x4ae3c0, 8) MULTIEQUAL (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8)]
[(ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x1206, 4), (ram, 0x4ae3c8, 8) MULTIEQUAL (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8)]
[(ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x1206, 4), (ram, 0x4ae3d0, 8) MULTIEQUAL (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x30, 8) , (register, 0x0, 4), (register, 0x0, 4) INT_ADD (stack, 0xffffffffffffff60, 4) , (const, 0x30, 4), (register, 0x30, 8) MULTIEQUAL (register, 0x30, 8) , (unique, 0x3100, 8), (stack, 0xffffffffffffff60, 4) MULTIEQUAL (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 4) MULTIEQUAL (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4)]
[(stack, 0xffffffffffffff5c, 4) MULTIEQUAL (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4)]
[(stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4)]
[(stack, 0xffffffffffffff52, 2) MULTIEQUAL (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff18, 16) MULTIEQUAL (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee4, 4) MULTIEQUAL (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4)]
[(stack, 0xfffffffffffffee0, 4) MULTIEQUAL (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed4, 4) MULTIEQUAL (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4)]
[(stack, 0xfffffffffffffed0, 4) MULTIEQUAL (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffec4, 4) MULTIEQUAL (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4)]
[(stack, 0xfffffffffffffec0, 4) MULTIEQUAL (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4)]
[(stack, 0xfffffffffffffebc, 4) MULTIEQUAL (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4)]
[(stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(ram, 0x4ae3d0, 8) MULTIEQUAL (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8)]
[(ram, 0x4ae3c8, 8) MULTIEQUAL (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8)]
[(ram, 0x4ae3c0, 8) MULTIEQUAL (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8)]
[(ram, 0x4ae3b0, 8) MULTIEQUAL (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8)]
[(ram, 0x4ae3a0, 10) MULTIEQUAL (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10)]
[(ram, 0x4ae390, 8) MULTIEQUAL (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8)]
[(ram, 0x4ae380, 16) MULTIEQUAL (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x1000333f, 8), (unique, 0x1000333f, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (stack, 0xffffffffffffff40, 8) , (const, 0x3, 8) , (const, 0x4, 8), (stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(register, 0x0, 4) SUBPIECE (register, 0xa8, 8) , (const, 0x0, 4), (register, 0xa8, 8) CAST (unique, 0x10003347, 8), (unique, 0x10003347, 8) INT_SRIGHT (register, 0xa8, 8) , (const, 0x2, 4), (register, 0xa8, 8) CAST (unique, 0x10003337, 8), (unique, 0x10003337, 8) INT_SUB (unique, 0x10003327, 8) , (unique, 0x1000332f, 8), (unique, 0x1000332f, 8) CAST (register, 0xb0, 8), (unique, 0x10003327, 8) CAST (register, 0xb8, 8), (register, 0xb8, 8) MULTIEQUAL (unique, 0x10002b9c, 8) , (unique, 0x3100, 8) , (register, 0xb8, 8) , (register, 0xb8, 8)]
[(stack, 0xffffffffffffff2c, 12) SUBPIECE (stack, 0xffffffffffffff28, 16) , (const, 0x4, 8), (stack, 0xffffffffffffff28, 16) MULTIEQUAL (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16)]
[ ---  CBRANCH (ram, 0x46d200, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffff54, 4) , (const, 0x0, 4), (stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[ ---  CBRANCH (ram, 0x46d200, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x10000e5f, 1) , (const, 0x0, 1), (unique, 0x10000e5f, 1) INT_AND (unique, 0xbb00, 1) , (const, 0x50, 1)]
[(stack, 0xffffffffffffff28, 16) INT_ADD (unique, 0x1000243c, 16) , (register, 0x8, 4), (unique, 0x1000243c, 16) INT_LEFT (unique, 0x1000242c, 16) , (const, 0x20, 16), (unique, 0x1000242c, 16) INT_SEXT (stack, 0xffffffffffffff2c, 12), (register, 0x8, 4) INT_SUB (register, 0x30, 4) , (register, 0x0, 4), (register, 0x30, 4) INT_SUB (stack, 0xfffffffffffffec0, 4) , (const, 0x1, 4)]
[ ---  CBRANCH (ram, 0x46d240, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x10000e98, 1) , (const, 0x0, 1), (unique, 0x10000e98, 1) INT_AND (unique, 0xbb00, 1) , (const, 0x20, 1)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (stack, 0xffffffffffffff40, 8) , (const, 0x4, 8) , (const, 0x4, 8)]
[ ---  CBRANCH (ram, 0x46d240, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (const, 0x0, 4) , (register, 0x8, 4)]
[ ---  CBRANCH (ram, 0x46cdd2, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbc80, 4) , (const, 0x30, 4)]
[(register, 0x88, 4) COPY (const, 0x0, 4)]
[ ---  BRANCH (ram, 0x46ce08, 1)]
[(stack, 0xffffffffffffff28, 16) INT_ADD (unique, 0x1000239c, 16) , (register, 0x30, 4), (unique, 0x1000239c, 16) INT_LEFT (unique, 0x1000238c, 16) , (const, 0x20, 16), (unique, 0x1000238c, 16) INT_SEXT (stack, 0xffffffffffffff2c, 12), (register, 0x30, 4) INT_SUB (stack, 0xfffffffffffffec0, 4) , (register, 0x0, 4)]
[ ---  CBRANCH (ram, 0x46da00, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x58c00, 1) , (const, 0x0, 1), (unique, 0x58c00, 1) INT_AND (unique, 0xbb00, 1) , (const, 0x20, 1)]
[ ---  CBRANCH (ram, 0x46da00, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0x30, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (stack, 0xffffffffffffff40, 8) , (const, 0x4, 8) , (const, 0x4, 8)]
[ ---  CBRANCH (ram, 0x46da00, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (unique, 0x1000334f, 4) , (const, 0x1, 4), (unique, 0x1000334f, 4) CAST (register, 0x30, 4)]
[(register, 0x88, 4) COPY (const, 0x0, 4)]
[ ---  BRANCH (ram, 0x46d43b, 1)]
[(unique, 0xbc80, 4) MULTIEQUAL (unique, 0xbc80, 4) , (unique, 0xbc80, 4)]
[(register, 0x18, 8) INT_SEXT (unique, 0x10003353, 4), (unique, 0x10003353, 4) CAST (stack, 0xffffffffffffff28, 4), (stack, 0xffffffffffffff28, 4) SUBPIECE (stack, 0xffffffffffffff28, 16) , (const, 0x0, 8), (stack, 0xffffffffffffff28, 16) MULTIEQUAL (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16)]
[ ---  CBRANCH (ram, 0x46dfe7, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffff3c, 4) , (const, 0x0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10003357, 8) , (const, 0x46dfec, 8), (unique, 0x10003357, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1961, 4)]
[(ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x1961, 4)]
[(ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x1961, 4)]
[(ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x1961, 4)]
[(ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x1961, 4)]
[(ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x1961, 4)]
[(ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x1961, 4)]
[(ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x1961, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x1961, 4)]
[(stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x1961, 4)]
[(stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x1961, 4)]
[(stack, 0xfffffffffffffec0, 4) INDIRECT (stack, 0xfffffffffffffec0, 4) , (const, 0x1961, 4)]
[(stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x1961, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x1961, 4)]
[(stack, 0xfffffffffffffed0, 4) INDIRECT (stack, 0xfffffffffffffed0, 4) , (const, 0x1961, 4)]
[(stack, 0xfffffffffffffed4, 4) INDIRECT (stack, 0xfffffffffffffed4, 4) , (const, 0x1961, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x1961, 4)]
[(stack, 0xfffffffffffffee0, 4) INDIRECT (stack, 0xfffffffffffffee0, 4) , (const, 0x1961, 4)]
[(stack, 0xfffffffffffffee4, 4) INDIRECT (stack, 0xfffffffffffffee4, 4) , (const, 0x1961, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x1961, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x1961, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x1961, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x1961, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x1961, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x1961, 4)]
[(stack, 0xffffffffffffff18, 16) INDIRECT (stack, 0xffffffffffffff18, 16) , (const, 0x1961, 4)]
[(stack, 0xffffffffffffff28, 16) INDIRECT (stack, 0xffffffffffffff28, 16) , (const, 0x1961, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x1961, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x1961, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x1961, 4)]
[(stack, 0xffffffffffffff52, 2) INDIRECT (stack, 0xffffffffffffff52, 2) , (const, 0x1961, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x1961, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x1961, 4)]
[(stack, 0xffffffffffffff5c, 4) INDIRECT (stack, 0xffffffffffffff5c, 4) , (const, 0x1961, 4)]
[(stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0x1961, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x1961, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x1961, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x1961, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x1961, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x1961, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x1961, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x1961, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x1961, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1961, 4)]
[(register, 0x0, 8) CALL (ram, 0x418b00, 8) , (register, 0xa0, 8) , (unique, 0xbc80, 4) , (register, 0x18, 8)]
[ ---  BRANCH (ram, 0x46cdf2, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000335f, 8) , (const, 0x46cdf2, 8), (unique, 0x1000335f, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x12a7, 4)]
[(ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x12a7, 4)]
[(ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x12a7, 4)]
[(ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x12a7, 4)]
[(ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x12a7, 4)]
[(ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x12a7, 4)]
[(ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x12a7, 4)]
[(ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x12a7, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x12a7, 4)]
[(stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x12a7, 4)]
[(stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x12a7, 4)]
[(stack, 0xfffffffffffffec0, 4) INDIRECT (stack, 0xfffffffffffffec0, 4) , (const, 0x12a7, 4)]
[(stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x12a7, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x12a7, 4)]
[(stack, 0xfffffffffffffed0, 4) INDIRECT (stack, 0xfffffffffffffed0, 4) , (const, 0x12a7, 4)]
[(stack, 0xfffffffffffffed4, 4) INDIRECT (stack, 0xfffffffffffffed4, 4) , (const, 0x12a7, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x12a7, 4)]
[(stack, 0xfffffffffffffee0, 4) INDIRECT (stack, 0xfffffffffffffee0, 4) , (const, 0x12a7, 4)]
[(stack, 0xfffffffffffffee4, 4) INDIRECT (stack, 0xfffffffffffffee4, 4) , (const, 0x12a7, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x12a7, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x12a7, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x12a7, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x12a7, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x12a7, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x12a7, 4)]
[(stack, 0xffffffffffffff18, 16) INDIRECT (stack, 0xffffffffffffff18, 16) , (const, 0x12a7, 4)]
[(stack, 0xffffffffffffff28, 16) INDIRECT (stack, 0xffffffffffffff28, 16) , (const, 0x12a7, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x12a7, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x12a7, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x12a7, 4)]
[(stack, 0xffffffffffffff52, 2) INDIRECT (stack, 0xffffffffffffff52, 2) , (const, 0x12a7, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x12a7, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x12a7, 4)]
[(stack, 0xffffffffffffff5c, 4) INDIRECT (stack, 0xffffffffffffff5c, 4) , (const, 0x12a7, 4)]
[(stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0x12a7, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x12a7, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x12a7, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x12a7, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x12a7, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x12a7, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x12a7, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x12a7, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x12a7, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x12a7, 4)]
[(register, 0x0, 8) CALL (ram, 0x478510, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 4) MULTIEQUAL (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4)]
[(stack, 0xffffffffffffff5c, 4) MULTIEQUAL (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4)]
[(stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff52, 2) MULTIEQUAL (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff28, 16) MULTIEQUAL (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16)]
[(stack, 0xffffffffffffff18, 16) MULTIEQUAL (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee4, 4) MULTIEQUAL (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4)]
[(stack, 0xfffffffffffffee0, 4) MULTIEQUAL (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed4, 4) MULTIEQUAL (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4)]
[(stack, 0xfffffffffffffed0, 4) MULTIEQUAL (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffec4, 4) MULTIEQUAL (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4)]
[(stack, 0xfffffffffffffec0, 4) MULTIEQUAL (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4)]
[(stack, 0xfffffffffffffebc, 4) MULTIEQUAL (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4)]
[(stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(ram, 0x4ae3d0, 8) MULTIEQUAL (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8)]
[(ram, 0x4ae3c8, 8) MULTIEQUAL (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8)]
[(ram, 0x4ae3c0, 8) MULTIEQUAL (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8)]
[(ram, 0x4ae3b0, 8) MULTIEQUAL (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8)]
[(ram, 0x4ae3a0, 10) MULTIEQUAL (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10)]
[(ram, 0x4ae390, 8) MULTIEQUAL (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8)]
[(ram, 0x4ae380, 16) MULTIEQUAL (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x46c87c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (register, 0x18, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[(unique, 0x10002cdc, 4) COPY (stack, 0xffffffffffffff28, 4), (stack, 0xffffffffffffff28, 4) SUBPIECE (stack, 0xffffffffffffff28, 16) , (const, 0x0, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 4) MULTIEQUAL (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4)]
[(stack, 0xffffffffffffff5c, 4) MULTIEQUAL (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4)]
[(stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4)]
[(stack, 0xffffffffffffff52, 2) MULTIEQUAL (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff28, 16) MULTIEQUAL (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16)]
[(stack, 0xffffffffffffff18, 16) MULTIEQUAL (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee4, 4) MULTIEQUAL (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4)]
[(stack, 0xfffffffffffffee0, 4) MULTIEQUAL (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed4, 4) MULTIEQUAL (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4)]
[(stack, 0xfffffffffffffed0, 4) MULTIEQUAL (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffec4, 4) MULTIEQUAL (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4)]
[(stack, 0xfffffffffffffec0, 4) MULTIEQUAL (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4)]
[(stack, 0xfffffffffffffebc, 4) MULTIEQUAL (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4)]
[(stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(ram, 0x4ae3d0, 8) MULTIEQUAL (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8)]
[(ram, 0x4ae3c8, 8) MULTIEQUAL (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8)]
[(ram, 0x4ae3c0, 8) MULTIEQUAL (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8)]
[(ram, 0x4ae3b0, 8) MULTIEQUAL (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8)]
[(ram, 0x4ae3a0, 10) MULTIEQUAL (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10)]
[(ram, 0x4ae390, 8) MULTIEQUAL (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8)]
[(ram, 0x4ae380, 16) MULTIEQUAL (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x88, 4) MULTIEQUAL (unique, 0x10002cdc, 4) , (register, 0x88, 4)]
[ ---  CBRANCH (ram, 0x46d430, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffff54, 4) , (const, 0x0, 4), (stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff1c, 12) SUBPIECE (stack, 0xffffffffffffff18, 16) , (const, 0x4, 8)]
[ ---  CBRANCH (ram, 0x46d838, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffff3c, 4) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x46e426, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRSUB (register, 0xa0, 8) , (const, 0x30, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRSUB (register, 0xa0, 8) , (const, 0x28, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3800, 8) , (unique, 0x3100, 8), (unique, 0x3800, 8) PTRSUB (register, 0xa0, 8) , (const, 0x28, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[(ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x1876, 4), (ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x1874, 4)]
[(ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x1876, 4), (ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x1874, 4)]
[(ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x1876, 4), (ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x1874, 4)]
[(ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x1876, 4), (ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x1874, 4)]
[(ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x1876, 4), (ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x1874, 4)]
[(ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x1876, 4), (ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x1874, 4)]
[(ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x1876, 4), (ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x1874, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0xbd80, 8) , (const, 0x2d, 1)]
[ ---  BRANCH (ram, 0x46ce4b, 1)]
[(stack, 0xffffffffffffff18, 16) INT_ADD (unique, 0x100027cc, 16) , (register, 0x88, 4), (unique, 0x100027cc, 16) INT_LEFT (unique, 0x100027bc, 16) , (const, 0x20, 16), (unique, 0x100027bc, 16) INT_SEXT (stack, 0xffffffffffffff1c, 12)]
[(register, 0x30, 4) COPY (const, 0x2d, 4)]
[ ---  CBRANCH (ram, 0x46c853, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3c80, 8), (unique, 0x3c80, 8) PTRSUB (register, 0xa0, 8) , (const, 0xa0, 8)]
[ ---  CBRANCH (ram, 0x46c853, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000337f, 8), (unique, 0x1000337f, 8) INT_ADD (unique, 0x10003377, 8) , (const, 0x28, 8), (unique, 0x10003377, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000336f, 8), (unique, 0x1000336f, 8) INT_ADD (unique, 0x10003367, 8) , (const, 0x20, 8), (unique, 0x10003367, 8) CAST (unique, 0xbd80, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000338f, 8), (unique, 0x1000338f, 8) INT_ADD (unique, 0x10003387, 8) , (const, 0x20, 8), (unique, 0x10003387, 8) CAST (unique, 0xbd80, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x1, 8) , (const, 0x4, 8)]
[(ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x12f8, 4), (ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x12f6, 4)]
[(ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x12f8, 4), (ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x12f6, 4)]
[(ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x12f8, 4), (ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x12f6, 4)]
[(ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x12f8, 4), (ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x12f6, 4)]
[(ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x12f8, 4), (ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x12f6, 4)]
[(ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x12f8, 4), (ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x12f6, 4)]
[(ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x12f8, 4), (ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x12f6, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0xbd80, 8) , (const, 0x2d, 4)]
[(stack, 0xffffffffffffff18, 16) INT_ADD (unique, 0x1000223c, 16) , (register, 0x88, 4), (unique, 0x1000223c, 16) INT_LEFT (unique, 0x1000222c, 16) , (const, 0x20, 16), (unique, 0x1000222c, 16) INT_SEXT (stack, 0xffffffffffffff1c, 12)]
[(unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x10003397, 8), (unique, 0x10003397, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (stack, 0xffffffffffffff40, 8) , (const, 0x3, 8) , (const, 0x4, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 4) MULTIEQUAL (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4)]
[(stack, 0xffffffffffffff5c, 4) MULTIEQUAL (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4)]
[(stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff52, 2) MULTIEQUAL (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff28, 16) MULTIEQUAL (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee4, 4) MULTIEQUAL (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4)]
[(stack, 0xfffffffffffffee0, 4) MULTIEQUAL (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed4, 4) MULTIEQUAL (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4)]
[(stack, 0xfffffffffffffed0, 4) MULTIEQUAL (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffec4, 4) MULTIEQUAL (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4)]
[(stack, 0xfffffffffffffec0, 4) MULTIEQUAL (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4)]
[(stack, 0xfffffffffffffebc, 4) MULTIEQUAL (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4)]
[(stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(ram, 0x4ae3d0, 8) MULTIEQUAL (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8)]
[(ram, 0x4ae3c8, 8) MULTIEQUAL (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8)]
[(ram, 0x4ae3c0, 8) MULTIEQUAL (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8)]
[(ram, 0x4ae3b0, 8) MULTIEQUAL (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8)]
[(ram, 0x4ae3a0, 10) MULTIEQUAL (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10)]
[(ram, 0x4ae390, 8) MULTIEQUAL (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8)]
[(ram, 0x4ae380, 16) MULTIEQUAL (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x88, 4) MULTIEQUAL (register, 0x88, 4) , (register, 0x88, 4)]
[(stack, 0xffffffffffffff1c, 12) SUBPIECE (stack, 0xffffffffffffff18, 16) , (const, 0x4, 8), (stack, 0xffffffffffffff18, 16) MULTIEQUAL (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16)]
[ ---  CBRANCH (ram, 0x46d8e0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x10000e99, 1) , (const, 0x0, 1), (unique, 0x10000e99, 1) INT_AND (unique, 0xbb00, 1) , (const, 0x40, 1), (unique, 0xbb00, 1) MULTIEQUAL (unique, 0xbb00, 1) , (unique, 0xbb00, 1)]
[ ---  CBRANCH (ram, 0x46ce5a, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x10000ec2, 1) , (const, 0x0, 1), (unique, 0x10000ec2, 1) INT_AND (unique, 0xbb00, 1) , (const, 0x10, 1)]
[ ---  CBRANCH (ram, 0x46e1c2, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffff3c, 4) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x46e5ae, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESSEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRSUB (register, 0xa0, 8) , (const, 0x30, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRSUB (register, 0xa0, 8) , (const, 0x28, 8)]
[(stack, 0xffffffffffffff18, 16) INT_ADD (unique, 0x1000288c, 16) , (register, 0x88, 4), (unique, 0x1000288c, 16) INT_LEFT (unique, 0x1000287c, 16) , (const, 0x20, 16), (unique, 0x1000287c, 16) INT_SEXT (stack, 0xffffffffffffff1c, 12)]
[(register, 0x30, 4) COPY (const, 0x20, 4)]
[ ---  BRANCH (ram, 0x46e432, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3800, 8) , (unique, 0x3100, 8), (unique, 0x3800, 8) PTRSUB (register, 0xa0, 8) , (const, 0x28, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[(ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x1958, 4), (ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x1956, 4)]
[(ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x1958, 4), (ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x1956, 4)]
[(ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x1958, 4), (ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x1956, 4)]
[(ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x1958, 4), (ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x1956, 4)]
[(ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x1958, 4), (ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x1956, 4)]
[(ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x1958, 4), (ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x1956, 4)]
[(ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x1958, 4), (ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x1956, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0xbd80, 8) , (const, 0x20, 1)]
[ ---  BRANCH (ram, 0x46ce4b, 1)]
[ ---  CBRANCH (ram, 0x46e58c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3c80, 8), (unique, 0x3c80, 8) PTRSUB (register, 0xa0, 8) , (const, 0xa0, 8)]
[ ---  CBRANCH (ram, 0x46e58c, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESSEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100033b7, 8), (unique, 0x100033b7, 8) INT_ADD (unique, 0x100033af, 8) , (const, 0x28, 8), (unique, 0x100033af, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100033a7, 8), (unique, 0x100033a7, 8) INT_ADD (unique, 0x1000339f, 8) , (const, 0x20, 8), (unique, 0x1000339f, 8) CAST (unique, 0xbd80, 8)]
[(stack, 0xffffffffffffff18, 16) INT_ADD (unique, 0x1000284c, 16) , (register, 0x88, 4), (unique, 0x1000284c, 16) INT_LEFT (unique, 0x1000283c, 16) , (const, 0x20, 16), (unique, 0x1000283c, 16) INT_SEXT (stack, 0xffffffffffffff1c, 12)]
[ ---  BRANCH (ram, 0x46c85f, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100033c7, 8), (unique, 0x100033c7, 8) INT_ADD (unique, 0x100033bf, 8) , (const, 0x20, 8), (unique, 0x100033bf, 8) CAST (unique, 0xbd80, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x1, 8) , (const, 0x4, 8)]
[(ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x1939, 4), (ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x1937, 4)]
[(ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x1939, 4), (ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x1937, 4)]
[(ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x1939, 4), (ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x1937, 4)]
[(ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x1939, 4), (ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x1937, 4)]
[(ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x1939, 4), (ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x1937, 4)]
[(ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x1939, 4), (ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x1937, 4)]
[(ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x1939, 4), (ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x1937, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0xbd80, 8) , (const, 0x20, 4)]
[ ---  BRANCH (ram, 0x46ce4b, 1)]
[ ---  CBRANCH (ram, 0x46deb0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffff3c, 4) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x46e59d, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESSEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRSUB (register, 0xa0, 8) , (const, 0x30, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRSUB (register, 0xa0, 8) , (const, 0x28, 8)]
[(stack, 0xffffffffffffff18, 16) INT_ADD (unique, 0x1000286c, 16) , (register, 0x88, 4), (unique, 0x1000286c, 16) INT_LEFT (unique, 0x1000285c, 16) , (const, 0x20, 16), (unique, 0x1000285c, 16) INT_SEXT (stack, 0xffffffffffffff1c, 12)]
[(register, 0x30, 4) COPY (const, 0x2b, 4)]
[ ---  BRANCH (ram, 0x46e432, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100033cf, 8) , (const, 0x46e43a, 8), (unique, 0x100033cf, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x187f, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x187f, 4), (ram, 0x4ae380, 16) MULTIEQUAL (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16)]
[(ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x187f, 4), (ram, 0x4ae390, 8) MULTIEQUAL (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8)]
[(ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x187f, 4), (ram, 0x4ae3a0, 10) MULTIEQUAL (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10)]
[(ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x187f, 4), (ram, 0x4ae3b0, 8) MULTIEQUAL (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8)]
[(ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x187f, 4), (ram, 0x4ae3c0, 8) MULTIEQUAL (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8)]
[(ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x187f, 4), (ram, 0x4ae3c8, 8) MULTIEQUAL (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8)]
[(ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x187f, 4), (ram, 0x4ae3d0, 8) MULTIEQUAL (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x187f, 4), (stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x187f, 4), (stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4)]
[(stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x187f, 4), (stack, 0xfffffffffffffebc, 4) MULTIEQUAL (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4)]
[(stack, 0xfffffffffffffec0, 4) INDIRECT (stack, 0xfffffffffffffec0, 4) , (const, 0x187f, 4), (stack, 0xfffffffffffffec0, 4) MULTIEQUAL (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4)]
[(stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x187f, 4), (stack, 0xfffffffffffffec4, 4) MULTIEQUAL (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x187f, 4), (stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffed0, 4) INDIRECT (stack, 0xfffffffffffffed0, 4) , (const, 0x187f, 4), (stack, 0xfffffffffffffed0, 4) MULTIEQUAL (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4)]
[(stack, 0xfffffffffffffed4, 4) INDIRECT (stack, 0xfffffffffffffed4, 4) , (const, 0x187f, 4), (stack, 0xfffffffffffffed4, 4) MULTIEQUAL (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x187f, 4), (stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffee0, 4) INDIRECT (stack, 0xfffffffffffffee0, 4) , (const, 0x187f, 4), (stack, 0xfffffffffffffee0, 4) MULTIEQUAL (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4)]
[(stack, 0xfffffffffffffee4, 4) INDIRECT (stack, 0xfffffffffffffee4, 4) , (const, 0x187f, 4), (stack, 0xfffffffffffffee4, 4) MULTIEQUAL (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x187f, 4), (stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x187f, 4), (stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x187f, 4), (stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x187f, 4), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x187f, 4), (stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x187f, 4), (stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff28, 16) INDIRECT (stack, 0xffffffffffffff28, 16) , (const, 0x187f, 4), (stack, 0xffffffffffffff28, 16) MULTIEQUAL (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x187f, 4), (stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x187f, 4), (stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x187f, 4), (stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff52, 2) INDIRECT (stack, 0xffffffffffffff52, 2) , (const, 0x187f, 4), (stack, 0xffffffffffffff52, 2) MULTIEQUAL (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x187f, 4), (stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x187f, 4), (stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4)]
[(stack, 0xffffffffffffff5c, 4) INDIRECT (stack, 0xffffffffffffff5c, 4) , (const, 0x187f, 4), (stack, 0xffffffffffffff5c, 4) MULTIEQUAL (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4)]
[(stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0x187f, 4), (stack, 0xffffffffffffff60, 4) MULTIEQUAL (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x187f, 4), (stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x187f, 4), (stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x187f, 4), (stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x187f, 4), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x187f, 4), (stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x187f, 4), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x187f, 4), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x187f, 4), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x187f, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(register, 0x0, 4) CALL (ram, 0x41e9e0, 8) , (register, 0xa0, 8) , (register, 0x30, 4), (register, 0x30, 4) MULTIEQUAL (register, 0x30, 4) , (register, 0x30, 4) , (register, 0x30, 4)]
[(stack, 0xffffffffffffff18, 4) SUBPIECE (stack, 0xffffffffffffff18, 16) , (const, 0x0, 8), (stack, 0xffffffffffffff18, 16) INDIRECT (stack, 0xffffffffffffff18, 16) , (const, 0x187f, 4), (stack, 0xffffffffffffff18, 16) MULTIEQUAL (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16)]
[ ---  BRANCH (ram, 0x46c874, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3800, 8) , (unique, 0x3100, 8), (unique, 0x3800, 8) PTRSUB (register, 0xa0, 8) , (const, 0x28, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[(ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x18f4, 4), (ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x18f2, 4)]
[(ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x18f4, 4), (ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x18f2, 4)]
[(ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x18f4, 4), (ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x18f2, 4)]
[(ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x18f4, 4), (ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x18f2, 4)]
[(ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x18f4, 4), (ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x18f2, 4)]
[(ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x18f4, 4), (ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x18f2, 4)]
[(ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x18f4, 4), (ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x18f2, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0xbd80, 8) , (const, 0x2b, 1)]
[ ---  BRANCH (ram, 0x46ce4b, 1)]
[ ---  CBRANCH (ram, 0x46e484, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3c80, 8), (unique, 0x3c80, 8) PTRSUB (register, 0xa0, 8) , (const, 0xa0, 8)]
[ ---  CBRANCH (ram, 0x46e484, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESSEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100033ef, 8), (unique, 0x100033ef, 8) INT_ADD (unique, 0x100033e7, 8) , (const, 0x28, 8), (unique, 0x100033e7, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100033df, 8), (unique, 0x100033df, 8) INT_ADD (unique, 0x100033d7, 8) , (const, 0x20, 8), (unique, 0x100033d7, 8) CAST (unique, 0xbd80, 8)]
[(stack, 0xffffffffffffff18, 16) INT_ADD (unique, 0x100027ec, 16) , (register, 0x88, 4), (unique, 0x100027ec, 16) INT_LEFT (unique, 0x100027dc, 16) , (const, 0x20, 16), (unique, 0x100027dc, 16) INT_SEXT (stack, 0xffffffffffffff1c, 12)]
[ ---  BRANCH (ram, 0x46c85f, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100033f7, 8) , (const, 0x46c867, 8), (unique, 0x100033f7, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1845, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x1845, 4), (ram, 0x4ae380, 16) MULTIEQUAL (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16)]
[(ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x1845, 4), (ram, 0x4ae390, 8) MULTIEQUAL (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8)]
[(ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x1845, 4), (ram, 0x4ae3a0, 10) MULTIEQUAL (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10)]
[(ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x1845, 4), (ram, 0x4ae3b0, 8) MULTIEQUAL (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8)]
[(ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x1845, 4), (ram, 0x4ae3c0, 8) MULTIEQUAL (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8)]
[(ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x1845, 4), (ram, 0x4ae3c8, 8) MULTIEQUAL (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8)]
[(ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x1845, 4), (ram, 0x4ae3d0, 8) MULTIEQUAL (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x1845, 4), (stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x1845, 4), (stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4)]
[(stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x1845, 4), (stack, 0xfffffffffffffebc, 4) MULTIEQUAL (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4)]
[(stack, 0xfffffffffffffec0, 4) INDIRECT (stack, 0xfffffffffffffec0, 4) , (const, 0x1845, 4), (stack, 0xfffffffffffffec0, 4) MULTIEQUAL (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4)]
[(stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x1845, 4), (stack, 0xfffffffffffffec4, 4) MULTIEQUAL (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x1845, 4), (stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffed0, 4) INDIRECT (stack, 0xfffffffffffffed0, 4) , (const, 0x1845, 4), (stack, 0xfffffffffffffed0, 4) MULTIEQUAL (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4)]
[(stack, 0xfffffffffffffed4, 4) INDIRECT (stack, 0xfffffffffffffed4, 4) , (const, 0x1845, 4), (stack, 0xfffffffffffffed4, 4) MULTIEQUAL (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x1845, 4), (stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffee0, 4) INDIRECT (stack, 0xfffffffffffffee0, 4) , (const, 0x1845, 4), (stack, 0xfffffffffffffee0, 4) MULTIEQUAL (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4)]
[(stack, 0xfffffffffffffee4, 4) INDIRECT (stack, 0xfffffffffffffee4, 4) , (const, 0x1845, 4), (stack, 0xfffffffffffffee4, 4) MULTIEQUAL (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x1845, 4), (stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x1845, 4), (stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x1845, 4), (stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x1845, 4), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x1845, 4), (stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x1845, 4), (stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff28, 16) INDIRECT (stack, 0xffffffffffffff28, 16) , (const, 0x1845, 4), (stack, 0xffffffffffffff28, 16) MULTIEQUAL (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x1845, 4), (stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x1845, 4), (stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x1845, 4), (stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff52, 2) INDIRECT (stack, 0xffffffffffffff52, 2) , (const, 0x1845, 4), (stack, 0xffffffffffffff52, 2) MULTIEQUAL (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x1845, 4), (stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x1845, 4), (stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4)]
[(stack, 0xffffffffffffff5c, 4) INDIRECT (stack, 0xffffffffffffff5c, 4) , (const, 0x1845, 4), (stack, 0xffffffffffffff5c, 4) MULTIEQUAL (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4)]
[(stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0x1845, 4), (stack, 0xffffffffffffff60, 4) MULTIEQUAL (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x1845, 4), (stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x1845, 4), (stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x1845, 4), (stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x1845, 4), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x1845, 4), (stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x1845, 4), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x1845, 4), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x1845, 4), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1845, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(register, 0x0, 4) CALL (ram, 0x478c50, 8) , (register, 0xa0, 8)]
[(stack, 0xffffffffffffff18, 4) SUBPIECE (stack, 0xffffffffffffff18, 16) , (const, 0x0, 8), (stack, 0xffffffffffffff18, 16) INDIRECT (stack, 0xffffffffffffff18, 16) , (const, 0x1845, 4), (stack, 0xffffffffffffff18, 16) MULTIEQUAL (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 4) MULTIEQUAL (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4)]
[(stack, 0xffffffffffffff5c, 4) MULTIEQUAL (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4)]
[(stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff52, 2) MULTIEQUAL (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff28, 16) MULTIEQUAL (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16)]
[(stack, 0xffffffffffffff18, 16) MULTIEQUAL (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee4, 4) MULTIEQUAL (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4)]
[(stack, 0xfffffffffffffee0, 4) MULTIEQUAL (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed4, 4) MULTIEQUAL (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4)]
[(stack, 0xfffffffffffffed0, 4) MULTIEQUAL (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffec4, 4) MULTIEQUAL (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4)]
[(stack, 0xfffffffffffffec0, 4) MULTIEQUAL (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4)]
[(stack, 0xfffffffffffffebc, 4) MULTIEQUAL (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4)]
[(stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(ram, 0x4ae3d0, 8) MULTIEQUAL (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8)]
[(ram, 0x4ae3c8, 8) MULTIEQUAL (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8)]
[(ram, 0x4ae3c0, 8) MULTIEQUAL (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8)]
[(ram, 0x4ae3b0, 8) MULTIEQUAL (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8)]
[(ram, 0x4ae3a0, 10) MULTIEQUAL (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10)]
[(ram, 0x4ae390, 8) MULTIEQUAL (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8)]
[(ram, 0x4ae380, 16) MULTIEQUAL (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16)]
[(unique, 0xbc80, 4) MULTIEQUAL (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x46ce4b, 1) , (register, 0x0, 1), (register, 0x0, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0xffffffff, 4), (register, 0x0, 4) MULTIEQUAL (register, 0x0, 4) , (register, 0x0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10003407, 8), (unique, 0x10003407, 8) INT_ADD (unique, 0x100033ff, 8) , (const, 0x20, 8), (unique, 0x100033ff, 8) CAST (unique, 0xbd80, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x1, 8) , (const, 0x4, 8)]
[(ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x18d5, 4), (ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x18d3, 4)]
[(ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x18d5, 4), (ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x18d3, 4)]
[(ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x18d5, 4), (ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x18d3, 4)]
[(ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x18d5, 4), (ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x18d3, 4)]
[(ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x18d5, 4), (ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x18d3, 4)]
[(ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x18d5, 4), (ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x18d3, 4)]
[(ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x18d5, 4), (ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x18d3, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0xbd80, 8) , (const, 0x2b, 4)]
[ ---  BRANCH (ram, 0x46ce4b, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 4) MULTIEQUAL (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4)]
[(stack, 0xffffffffffffff5c, 4) MULTIEQUAL (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4)]
[(stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff52, 2) MULTIEQUAL (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff28, 16) MULTIEQUAL (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16)]
[(stack, 0xffffffffffffff18, 16) MULTIEQUAL (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee4, 4) MULTIEQUAL (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4)]
[(stack, 0xfffffffffffffee0, 4) MULTIEQUAL (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed4, 4) MULTIEQUAL (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4)]
[(stack, 0xfffffffffffffed0, 4) MULTIEQUAL (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffec4, 4) MULTIEQUAL (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4)]
[(stack, 0xfffffffffffffec0, 4) MULTIEQUAL (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4)]
[(stack, 0xfffffffffffffebc, 4) MULTIEQUAL (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4)]
[(stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(ram, 0x4ae3d0, 8) MULTIEQUAL (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8)]
[(ram, 0x4ae3c8, 8) MULTIEQUAL (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8)]
[(ram, 0x4ae3c0, 8) MULTIEQUAL (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8)]
[(ram, 0x4ae3b0, 8) MULTIEQUAL (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8)]
[(ram, 0x4ae3a0, 10) MULTIEQUAL (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10)]
[(ram, 0x4ae390, 8) MULTIEQUAL (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8)]
[(ram, 0x4ae380, 16) MULTIEQUAL (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x88, 4) INT_ADD (register, 0x88, 4) , (const, 0x1, 4), (register, 0x88, 4) MULTIEQUAL (register, 0x88, 4) , (unique, 0xbc80, 4) , (register, 0x88, 4) , (register, 0x88, 4) , (register, 0x88, 4) , (register, 0x88, 4) , (register, 0x88, 4)]
[(unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x1000340f, 8), (unique, 0x1000340f, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (stack, 0xffffffffffffff40, 8) , (const, 0x3, 8) , (const, 0x4, 8), (stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 4) MULTIEQUAL (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4)]
[(stack, 0xffffffffffffff5c, 4) MULTIEQUAL (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4)]
[(stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff52, 2) MULTIEQUAL (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff28, 16) MULTIEQUAL (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16)]
[(stack, 0xffffffffffffff18, 16) MULTIEQUAL (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee4, 4) MULTIEQUAL (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4)]
[(stack, 0xfffffffffffffee0, 4) MULTIEQUAL (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed4, 4) MULTIEQUAL (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4)]
[(stack, 0xfffffffffffffed0, 4) MULTIEQUAL (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffec4, 4) MULTIEQUAL (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4)]
[(stack, 0xfffffffffffffec0, 4) MULTIEQUAL (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4)]
[(stack, 0xfffffffffffffebc, 4) MULTIEQUAL (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4)]
[(stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(ram, 0x4ae3d0, 8) MULTIEQUAL (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8)]
[(ram, 0x4ae3c8, 8) MULTIEQUAL (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8)]
[(ram, 0x4ae3c0, 8) MULTIEQUAL (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8)]
[(ram, 0x4ae3b0, 8) MULTIEQUAL (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8)]
[(ram, 0x4ae3a0, 10) MULTIEQUAL (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10)]
[(ram, 0x4ae390, 8) MULTIEQUAL (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8)]
[(ram, 0x4ae380, 16) MULTIEQUAL (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x88, 4) MULTIEQUAL (register, 0x88, 4) , (register, 0x88, 4)]
[ ---  CBRANCH (ram, 0x46ce79, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x10000ecf, 1) , (const, 0x0, 1), (unique, 0x10000ecf, 1) INT_AND (unique, 0xbb00, 1) , (const, 0x20, 1), (unique, 0xbb00, 1) MULTIEQUAL (unique, 0xbb00, 1) , (unique, 0xbb00, 1)]
[ ---  CBRANCH (ram, 0x46ce79, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd00, 4) , (const, 0x30, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (stack, 0xffffffffffffff40, 8) , (const, 0x4, 8) , (const, 0x4, 8)]
[ ---  CBRANCH (ram, 0x46df72, 1) , (unique, 0xd080, 1), (unique, 0xd080, 1) INT_SLESS (const, 0x0, 4) , (unique, 0x10003417, 4), (unique, 0x10003417, 4) CAST (stack, 0xffffffffffffff28, 4), (stack, 0xffffffffffffff28, 4) SUBPIECE (stack, 0xffffffffffffff28, 16) , (const, 0x0, 8)]
[(register, 0x18, 8) INT_SEXT (unique, 0x1000341b, 4), (unique, 0x1000341b, 4) CAST (stack, 0xffffffffffffff28, 4)]
[(stack, 0xffffffffffffff18, 16) INT_ADD (unique, 0x1000263c, 16) , (register, 0x88, 4), (unique, 0x1000263c, 16) INT_LEFT (unique, 0x1000262c, 16) , (const, 0x20, 16), (unique, 0x1000262c, 16) INT_SEXT (stack, 0xffffffffffffff1c, 12), (stack, 0xffffffffffffff1c, 12) SUBPIECE (stack, 0xffffffffffffff18, 16) , (const, 0x4, 8)]
[ ---  CBRANCH (ram, 0x46e239, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffff3c, 4) , (const, 0x0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000341f, 8) , (const, 0x46e23e, 8), (unique, 0x1000341f, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1838, 4)]
[(ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x1838, 4)]
[(ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x1838, 4)]
[(ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x1838, 4)]
[(ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x1838, 4)]
[(ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x1838, 4)]
[(ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x1838, 4)]
[(ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x1838, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x1838, 4)]
[(stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x1838, 4)]
[(stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x1838, 4)]
[(stack, 0xfffffffffffffec0, 4) INDIRECT (stack, 0xfffffffffffffec0, 4) , (const, 0x1838, 4)]
[(stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x1838, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x1838, 4)]
[(stack, 0xfffffffffffffed0, 4) INDIRECT (stack, 0xfffffffffffffed0, 4) , (const, 0x1838, 4)]
[(stack, 0xfffffffffffffed4, 4) INDIRECT (stack, 0xfffffffffffffed4, 4) , (const, 0x1838, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x1838, 4)]
[(stack, 0xfffffffffffffee0, 4) INDIRECT (stack, 0xfffffffffffffee0, 4) , (const, 0x1838, 4)]
[(stack, 0xfffffffffffffee4, 4) INDIRECT (stack, 0xfffffffffffffee4, 4) , (const, 0x1838, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x1838, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x1838, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x1838, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x1838, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x1838, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x1838, 4)]
[(stack, 0xffffffffffffff28, 16) INDIRECT (stack, 0xffffffffffffff28, 16) , (const, 0x1838, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x1838, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x1838, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x1838, 4)]
[(stack, 0xffffffffffffff52, 2) INDIRECT (stack, 0xffffffffffffff52, 2) , (const, 0x1838, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x1838, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x1838, 4)]
[(stack, 0xffffffffffffff5c, 4) INDIRECT (stack, 0xffffffffffffff5c, 4) , (const, 0x1838, 4)]
[(stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0x1838, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x1838, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x1838, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x1838, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x1838, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x1838, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x1838, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x1838, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x1838, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1838, 4)]
[(register, 0x0, 8) CALL (ram, 0x418b00, 8) , (register, 0xa0, 8) , (const, 0x30, 4) , (register, 0x18, 8)]
[(stack, 0xffffffffffffff18, 4) SUBPIECE (stack, 0xffffffffffffff18, 16) , (const, 0x0, 8), (stack, 0xffffffffffffff18, 16) INDIRECT (stack, 0xffffffffffffff18, 16) , (const, 0x1838, 4)]
[ ---  BRANCH (ram, 0x46dfa5, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10003427, 8) , (const, 0x46df9e, 8), (unique, 0x10003427, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1817, 4)]
[(ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x1817, 4)]
[(ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x1817, 4)]
[(ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x1817, 4)]
[(ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x1817, 4)]
[(ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x1817, 4)]
[(ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x1817, 4)]
[(ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x1817, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x1817, 4)]
[(stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x1817, 4)]
[(stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x1817, 4)]
[(stack, 0xfffffffffffffec0, 4) INDIRECT (stack, 0xfffffffffffffec0, 4) , (const, 0x1817, 4)]
[(stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x1817, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x1817, 4)]
[(stack, 0xfffffffffffffed0, 4) INDIRECT (stack, 0xfffffffffffffed0, 4) , (const, 0x1817, 4)]
[(stack, 0xfffffffffffffed4, 4) INDIRECT (stack, 0xfffffffffffffed4, 4) , (const, 0x1817, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x1817, 4)]
[(stack, 0xfffffffffffffee0, 4) INDIRECT (stack, 0xfffffffffffffee0, 4) , (const, 0x1817, 4)]
[(stack, 0xfffffffffffffee4, 4) INDIRECT (stack, 0xfffffffffffffee4, 4) , (const, 0x1817, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x1817, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x1817, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x1817, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x1817, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x1817, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x1817, 4)]
[(stack, 0xffffffffffffff28, 16) INDIRECT (stack, 0xffffffffffffff28, 16) , (const, 0x1817, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x1817, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x1817, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x1817, 4)]
[(stack, 0xffffffffffffff52, 2) INDIRECT (stack, 0xffffffffffffff52, 2) , (const, 0x1817, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x1817, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x1817, 4)]
[(stack, 0xffffffffffffff5c, 4) INDIRECT (stack, 0xffffffffffffff5c, 4) , (const, 0x1817, 4)]
[(stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0x1817, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x1817, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x1817, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x1817, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x1817, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x1817, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x1817, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x1817, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x1817, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1817, 4)]
[(register, 0x0, 8) CALL (ram, 0x478510, 8)]
[(stack, 0xffffffffffffff18, 4) SUBPIECE (stack, 0xffffffffffffff18, 16) , (const, 0x0, 8), (stack, 0xffffffffffffff18, 16) INDIRECT (stack, 0xffffffffffffff18, 16) , (const, 0x1817, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 4) MULTIEQUAL (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4)]
[(stack, 0xffffffffffffff5c, 4) MULTIEQUAL (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4)]
[(stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff52, 2) MULTIEQUAL (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff28, 16) MULTIEQUAL (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16)]
[(stack, 0xffffffffffffff18, 16) MULTIEQUAL (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee4, 4) MULTIEQUAL (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4)]
[(stack, 0xfffffffffffffee0, 4) MULTIEQUAL (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed4, 4) MULTIEQUAL (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4)]
[(stack, 0xfffffffffffffed0, 4) MULTIEQUAL (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffec4, 4) MULTIEQUAL (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4)]
[(stack, 0xfffffffffffffec0, 4) MULTIEQUAL (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4)]
[(stack, 0xfffffffffffffebc, 4) MULTIEQUAL (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4)]
[(stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(ram, 0x4ae3d0, 8) MULTIEQUAL (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8)]
[(ram, 0x4ae3c8, 8) MULTIEQUAL (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8)]
[(ram, 0x4ae3c0, 8) MULTIEQUAL (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8)]
[(ram, 0x4ae3b0, 8) MULTIEQUAL (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8)]
[(ram, 0x4ae3a0, 10) MULTIEQUAL (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10)]
[(ram, 0x4ae390, 8) MULTIEQUAL (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8)]
[(ram, 0x4ae380, 16) MULTIEQUAL (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x88, 4) MULTIEQUAL (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4)]
[ ---  CBRANCH (ram, 0x46c87c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (register, 0x18, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[(register, 0x88, 4) INT_ADD (register, 0x88, 4) , (stack, 0xffffffffffffff28, 4), (stack, 0xffffffffffffff28, 4) SUBPIECE (stack, 0xffffffffffffff28, 16) , (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x46ce79, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 4) MULTIEQUAL (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4)]
[(stack, 0xffffffffffffff5c, 4) MULTIEQUAL (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4)]
[(stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff52, 2) MULTIEQUAL (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff28, 16) MULTIEQUAL (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee4, 4) MULTIEQUAL (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4)]
[(stack, 0xfffffffffffffee0, 4) MULTIEQUAL (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed4, 4) MULTIEQUAL (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4)]
[(stack, 0xfffffffffffffed0, 4) MULTIEQUAL (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffec4, 4) MULTIEQUAL (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4)]
[(stack, 0xfffffffffffffec0, 4) MULTIEQUAL (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4)]
[(stack, 0xfffffffffffffebc, 4) MULTIEQUAL (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4)]
[(stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(ram, 0x4ae3d0, 8) MULTIEQUAL (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8)]
[(ram, 0x4ae3c8, 8) MULTIEQUAL (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8)]
[(ram, 0x4ae3c0, 8) MULTIEQUAL (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8)]
[(ram, 0x4ae3b0, 8) MULTIEQUAL (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8)]
[(ram, 0x4ae3a0, 10) MULTIEQUAL (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10)]
[(ram, 0x4ae390, 8) MULTIEQUAL (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8)]
[(ram, 0x4ae380, 16) MULTIEQUAL (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x88, 4) MULTIEQUAL (register, 0x88, 4) , (register, 0x88, 4) , (register, 0x88, 4) , (register, 0x88, 4)]
[(stack, 0xffffffffffffff1c, 12) SUBPIECE (stack, 0xffffffffffffff18, 16) , (const, 0x4, 8), (stack, 0xffffffffffffff18, 16) MULTIEQUAL (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16)]
[ ---  CBRANCH (ram, 0x46d2d8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffff3c, 4) , (const, 0x0, 4), (stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[ ---  CBRANCH (ram, 0x46e24a, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x58c00, 1) , (const, 0x0, 1), (unique, 0x58c00, 1) INT_AND (unique, 0xbb00, 1) , (const, 0x8, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10003437, 8), (unique, 0x10003437, 8) INT_ADD (unique, 0x1000342f, 8) , (const, 0xd, 8), (unique, 0x1000342f, 8) CAST (stack, 0xffffffffffffff40, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000343f, 8) , (const, 0x46e25c, 8), (unique, 0x1000343f, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x17f8, 4)]
[(ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x17f8, 4)]
[(ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x17f8, 4)]
[(ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x17f8, 4)]
[(ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x17f8, 4)]
[(ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x17f8, 4)]
[(ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x17f8, 4)]
[(ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x17f8, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x17f8, 4)]
[(stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x17f8, 4)]
[(stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x17f8, 4)]
[(stack, 0xfffffffffffffec0, 4) INDIRECT (stack, 0xfffffffffffffec0, 4) , (const, 0x17f8, 4)]
[(stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x17f8, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x17f8, 4)]
[(stack, 0xfffffffffffffed0, 4) INDIRECT (stack, 0xfffffffffffffed0, 4) , (const, 0x17f8, 4)]
[(stack, 0xfffffffffffffed4, 4) INDIRECT (stack, 0xfffffffffffffed4, 4) , (const, 0x17f8, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x17f8, 4)]
[(stack, 0xfffffffffffffee0, 4) INDIRECT (stack, 0xfffffffffffffee0, 4) , (const, 0x17f8, 4)]
[(stack, 0xfffffffffffffee4, 4) INDIRECT (stack, 0xfffffffffffffee4, 4) , (const, 0x17f8, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x17f8, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x17f8, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x17f8, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x17f8, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x17f8, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x17f8, 4)]
[(stack, 0xffffffffffffff28, 16) INDIRECT (stack, 0xffffffffffffff28, 16) , (const, 0x17f8, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x17f8, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x17f8, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x17f8, 4)]
[(stack, 0xffffffffffffff52, 2) INDIRECT (stack, 0xffffffffffffff52, 2) , (const, 0x17f8, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x17f8, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x17f8, 4)]
[(stack, 0xffffffffffffff5c, 4) INDIRECT (stack, 0xffffffffffffff5c, 4) , (const, 0x17f8, 4)]
[(stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0x17f8, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x17f8, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x17f8, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x17f8, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x17f8, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x17f8, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x17f8, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x17f8, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x17f8, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x17f8, 4)]
[ ---  CALL (ram, 0x46b6a0, 8) , (const, 0x0, 8) , (const, 0x0, 8) , (const, 0x0, 8)]
[(stack, 0xffffffffffffff18, 4) SUBPIECE (stack, 0xffffffffffffff18, 16) , (const, 0x0, 8), (stack, 0xffffffffffffff18, 16) INDIRECT (stack, 0xffffffffffffff18, 16) , (const, 0x17f8, 4), (stack, 0xffffffffffffff18, 16) INT_ADD (unique, 0x100026dc, 16) , (register, 0x88, 4), (unique, 0x100026dc, 16) INT_LEFT (unique, 0x100026cc, 16) , (const, 0x20, 16), (unique, 0x100026cc, 16) INT_SEXT (stack, 0xffffffffffffff1c, 12)]
[ ---  BRANCH (ram, 0x46d2e2, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 4) MULTIEQUAL (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4)]
[(stack, 0xffffffffffffff5c, 4) MULTIEQUAL (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4)]
[(stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff52, 2) MULTIEQUAL (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff28, 16) MULTIEQUAL (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee4, 4) MULTIEQUAL (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4)]
[(stack, 0xfffffffffffffee0, 4) MULTIEQUAL (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed4, 4) MULTIEQUAL (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4)]
[(stack, 0xfffffffffffffed0, 4) MULTIEQUAL (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffec4, 4) MULTIEQUAL (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4)]
[(stack, 0xfffffffffffffec0, 4) MULTIEQUAL (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4)]
[(stack, 0xfffffffffffffebc, 4) MULTIEQUAL (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4)]
[(stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(ram, 0x4ae3d0, 8) MULTIEQUAL (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8)]
[(ram, 0x4ae3c8, 8) MULTIEQUAL (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8)]
[(ram, 0x4ae3c0, 8) MULTIEQUAL (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8)]
[(ram, 0x4ae3b0, 8) MULTIEQUAL (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8)]
[(ram, 0x4ae3a0, 10) MULTIEQUAL (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10)]
[(ram, 0x4ae390, 8) MULTIEQUAL (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8)]
[(ram, 0x4ae380, 16) MULTIEQUAL (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x88, 4) MULTIEQUAL (register, 0x88, 4) , (stack, 0xffffffffffffff18, 4)]
[(stack, 0xffffffffffffff20, 8) SUBPIECE (stack, 0xffffffffffffff18, 16) , (const, 0x8, 8), (stack, 0xffffffffffffff18, 16) MULTIEQUAL (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16)]
[ ---  CBRANCH (ram, 0x46d7f8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xb8, 8) , (register, 0xb0, 8)]
[ ---  CBRANCH (ram, 0x46e3f1, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (register, 0x10, 8) , (const, 0x6a8, 8), (register, 0x10, 8) INT_SUB (unique, 0xbd80, 8) , (const, 0x4c6b60, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10003447, 8), (unique, 0x10003447, 8) CAST (unique, 0x3c80, 8), (unique, 0x3c80, 8) PTRADD (register, 0xa0, 8) , (const, 0x1, 8) , (const, 0xd8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000345f, 8) , (const, 0x46e404, 8), (unique, 0x1000345f, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x17c6, 4)]
[(ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x17c6, 4)]
[(ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x17c6, 4)]
[(ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x17c6, 4)]
[(ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x17c6, 4)]
[(ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x17c6, 4)]
[(ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x17c6, 4)]
[(ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x17c6, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x17c6, 4)]
[(stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x17c6, 4)]
[(stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x17c6, 4)]
[(stack, 0xfffffffffffffec0, 4) INDIRECT (stack, 0xfffffffffffffec0, 4) , (const, 0x17c6, 4)]
[(stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x17c6, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x17c6, 4)]
[(stack, 0xfffffffffffffed0, 4) INDIRECT (stack, 0xfffffffffffffed0, 4) , (const, 0x17c6, 4)]
[(stack, 0xfffffffffffffed4, 4) INDIRECT (stack, 0xfffffffffffffed4, 4) , (const, 0x17c6, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x17c6, 4)]
[(stack, 0xfffffffffffffee0, 4) INDIRECT (stack, 0xfffffffffffffee0, 4) , (const, 0x17c6, 4)]
[(stack, 0xfffffffffffffee4, 4) INDIRECT (stack, 0xfffffffffffffee4, 4) , (const, 0x17c6, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x17c6, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x17c6, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x17c6, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x17c6, 4)]
[(stack, 0xffffffffffffff28, 16) INDIRECT (stack, 0xffffffffffffff28, 16) , (const, 0x17c6, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x17c6, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x17c6, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x17c6, 4)]
[(stack, 0xffffffffffffff52, 2) INDIRECT (stack, 0xffffffffffffff52, 2) , (const, 0x17c6, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x17c6, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x17c6, 4)]
[(stack, 0xffffffffffffff5c, 4) INDIRECT (stack, 0xffffffffffffff5c, 4) , (const, 0x17c6, 4)]
[(stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0x17c6, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x17c6, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x17c6, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x17c6, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x17c6, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x17c6, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x17c6, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x17c6, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x17c6, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x17c6, 4)]
[ ---  CALL (ram, 0x41b380, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10003467, 8), (unique, 0x10003467, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x38, 8)]
[(stack, 0xffffffffffffff18, 16) INT_AND (stack, 0xffffffffffffff18, 16) , (const, 0xffffffffffffffff, 16), (stack, 0xffffffffffffff18, 16) INDIRECT (stack, 0xffffffffffffff18, 16) , (const, 0x17c6, 4)]
[(stack, 0xffffffffffffff10, 4) SUBPIECE (stack, 0xffffffffffffff10, 8) , (const, 0x0, 8), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x17c6, 4), (stack, 0xffffffffffffff10, 8) CAST (unique, 0x10003457, 8), (unique, 0x10003457, 8) INT_OR (unique, 0x100011bf, 8) , (unique, 0x100011c7, 8), (unique, 0x100011c7, 8) INT_ZEXT (register, 0x88, 4), (unique, 0x100011bf, 8) INT_AND (unique, 0x1000344f, 8) , (const, 0xffffffff00000000, 8), (unique, 0x1000344f, 8) CAST (stack, 0xffffffffffffff10, 8)]
[(unique, 0x10002abc, 8) COPY (stack, 0xffffffffffffff08, 8), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x17c6, 4), (stack, 0xffffffffffffff08, 8) COPY (register, 0xa8, 8)]
[ ---  BRANCH (ram, 0x46d05f, 1)]
[(stack, 0xffffffffffffff18, 16) INT_LEFT (unique, 0x1000112d, 16) , (const, 0x40, 4), (unique, 0x1000112d, 16) INT_ZEXT (stack, 0xffffffffffffff20, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000346f, 8), (unique, 0x1000346f, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x38, 8)]
[(unique, 0x10002ab4, 8) COPY (register, 0xa8, 8)]
[(unique, 0x10002ccc, 4) COPY (register, 0x88, 4)]
[ ---  BRANCH (ram, 0x46d05f, 1)]
[(register, 0x18, 4) INT_ADD (register, 0x0, 4) , (const, 0x1, 4)]
[(unique, 0x10002a84, 8) COPY (register, 0xa0, 8)]
[ ---  CBRANCH (ram, 0x46e579, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xa8, 8) , (const, 0x0, 8)]
[(stack, 0xffffffffffffff18, 16) INT_LEFT (unique, 0x10001204, 16) , (const, 0x40, 4), (unique, 0x10001204, 16) INT_ZEXT (stack, 0xffffffffffffff20, 8)]
[ ---  BRANCH (ram, 0x46d093, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 4) MULTIEQUAL (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4)]
[(stack, 0xffffffffffffff5c, 4) MULTIEQUAL (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4)]
[(stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff52, 2) MULTIEQUAL (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff28, 16) MULTIEQUAL (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16)]
[(stack, 0xffffffffffffff18, 16) MULTIEQUAL (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee4, 4) MULTIEQUAL (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4)]
[(stack, 0xfffffffffffffee0, 4) MULTIEQUAL (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed4, 4) MULTIEQUAL (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4)]
[(stack, 0xfffffffffffffed0, 4) MULTIEQUAL (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffec4, 4) MULTIEQUAL (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4)]
[(stack, 0xfffffffffffffec0, 4) MULTIEQUAL (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4)]
[(stack, 0xfffffffffffffebc, 4) MULTIEQUAL (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4)]
[(stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(ram, 0x4ae3d0, 8) MULTIEQUAL (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8)]
[(ram, 0x4ae3c8, 8) MULTIEQUAL (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8)]
[(ram, 0x4ae3c0, 8) MULTIEQUAL (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8)]
[(ram, 0x4ae3b0, 8) MULTIEQUAL (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8)]
[(ram, 0x4ae3a0, 10) MULTIEQUAL (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10)]
[(ram, 0x4ae390, 8) MULTIEQUAL (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8)]
[(ram, 0x4ae380, 16) MULTIEQUAL (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb8, 8) MULTIEQUAL (register, 0xb8, 8) , (register, 0xa8, 8)]
[(register, 0xb0, 8) PTRADD (register, 0xb0, 8) , (const, 0x1, 8) , (const, 0x4, 8), (register, 0xb0, 8) MULTIEQUAL (unique, 0x10002b74, 8) , (register, 0xb0, 8)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (register, 0xb0, 8), (register, 0xb0, 8) MULTIEQUAL (unique, 0x10002b74, 8) , (register, 0xb0, 8)]
[ ---  CBRANCH (ram, 0x46d310, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) PTRSUB (register, 0x38, 8) , (const, 0xa0, 8), (register, 0x38, 8) MULTIEQUAL (unique, 0x10002a7c, 8) , (unique, 0x10002a84, 8)]
[ ---  CBRANCH (ram, 0x46d357, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESSEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000348f, 8), (unique, 0x1000348f, 8) INT_ADD (unique, 0x10003487, 8) , (const, 0x28, 8), (unique, 0x10003487, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000347f, 8), (unique, 0x1000347f, 8) INT_ADD (unique, 0x10003477, 8) , (const, 0x20, 8), (unique, 0x10003477, 8) CAST (unique, 0xbd80, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100034a7, 8) , (const, 0x46d363, 8), (unique, 0x100034a7, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1734, 4)]
[(ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x1734, 4)]
[(ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x1734, 4)]
[(ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x1734, 4)]
[(ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x1734, 4)]
[(ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x1734, 4)]
[(ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x1734, 4)]
[(ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x1734, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x1734, 4)]
[(stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x1734, 4)]
[(stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x1734, 4)]
[(stack, 0xfffffffffffffec0, 4) INDIRECT (stack, 0xfffffffffffffec0, 4) , (const, 0x1734, 4)]
[(stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x1734, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x1734, 4)]
[(stack, 0xfffffffffffffed0, 4) INDIRECT (stack, 0xfffffffffffffed0, 4) , (const, 0x1734, 4)]
[(stack, 0xfffffffffffffed4, 4) INDIRECT (stack, 0xfffffffffffffed4, 4) , (const, 0x1734, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x1734, 4)]
[(stack, 0xfffffffffffffee0, 4) INDIRECT (stack, 0xfffffffffffffee0, 4) , (const, 0x1734, 4)]
[(stack, 0xfffffffffffffee4, 4) INDIRECT (stack, 0xfffffffffffffee4, 4) , (const, 0x1734, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x1734, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x1734, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x1734, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x1734, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x1734, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x1734, 4)]
[(stack, 0xffffffffffffff28, 16) INDIRECT (stack, 0xffffffffffffff28, 16) , (const, 0x1734, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x1734, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x1734, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x1734, 4)]
[(stack, 0xffffffffffffff52, 2) INDIRECT (stack, 0xffffffffffffff52, 2) , (const, 0x1734, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x1734, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x1734, 4)]
[(stack, 0xffffffffffffff5c, 4) INDIRECT (stack, 0xffffffffffffff5c, 4) , (const, 0x1734, 4)]
[(stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0x1734, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x1734, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x1734, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x1734, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x1734, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x1734, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x1734, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x1734, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x1734, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1734, 4)]
[(register, 0x0, 4) CALL (ram, 0x478c50, 8)]
[(stack, 0xffffffffffffff18, 8) SUBPIECE (stack, 0xffffffffffffff18, 16) , (const, 0x0, 8), (stack, 0xffffffffffffff18, 16) INDIRECT (stack, 0xffffffffffffff18, 16) , (const, 0x1734, 4), (stack, 0xffffffffffffff18, 16) INT_ADD (unique, 0x1000245c, 16) , (unique, 0x1000349f, 8), (unique, 0x1000349f, 8) CAST (register, 0x38, 8), (unique, 0x1000245c, 16) INT_LEFT (unique, 0x1000244c, 16) , (const, 0x40, 16), (unique, 0x1000244c, 16) INT_SEXT (unique, 0x10003497, 8), (unique, 0x10003497, 8) CAST (stack, 0xffffffffffffff20, 8), (stack, 0xffffffffffffff20, 8) SUBPIECE (stack, 0xffffffffffffff18, 16) , (const, 0x8, 8)]
[ ---  BRANCH (ram, 0x46d32a, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100034b7, 8), (unique, 0x100034b7, 8) INT_ADD (unique, 0x100034af, 8) , (const, 0x20, 8), (unique, 0x100034af, 8) CAST (unique, 0xbd80, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x1, 8) , (const, 0x4, 8)]
[(ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x178d, 4), (ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x178a, 4)]
[(ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x178d, 4), (ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x178a, 4)]
[(ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x178d, 4), (ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x178a, 4)]
[(ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x178d, 4), (ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x178a, 4)]
[(ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x178d, 4), (ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x178a, 4)]
[(ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x178d, 4), (ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x178a, 4)]
[(ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x178d, 4), (ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x178a, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0xbd80, 8) , (unique, 0xbc80, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 4) MULTIEQUAL (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4)]
[(stack, 0xffffffffffffff5c, 4) MULTIEQUAL (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4)]
[(stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff52, 2) MULTIEQUAL (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff28, 16) MULTIEQUAL (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16)]
[(stack, 0xffffffffffffff18, 16) MULTIEQUAL (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee4, 4) MULTIEQUAL (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4)]
[(stack, 0xfffffffffffffee0, 4) MULTIEQUAL (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed4, 4) MULTIEQUAL (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4)]
[(stack, 0xfffffffffffffed0, 4) MULTIEQUAL (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffec4, 4) MULTIEQUAL (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4)]
[(stack, 0xfffffffffffffec0, 4) MULTIEQUAL (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4)]
[(stack, 0xfffffffffffffebc, 4) MULTIEQUAL (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4)]
[(stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(ram, 0x4ae3d0, 8) MULTIEQUAL (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8)]
[(ram, 0x4ae3c8, 8) MULTIEQUAL (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8)]
[(ram, 0x4ae3c0, 8) MULTIEQUAL (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8)]
[(ram, 0x4ae3b0, 8) MULTIEQUAL (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8)]
[(ram, 0x4ae3a0, 10) MULTIEQUAL (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10)]
[(ram, 0x4ae390, 8) MULTIEQUAL (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8)]
[(ram, 0x4ae380, 16) MULTIEQUAL (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x38, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (register, 0x38, 8)]
[ ---  CBRANCH (ram, 0x46c87c, 1) , (register, 0x0, 1), (register, 0x0, 1) INT_EQUAL (unique, 0x10000ebe, 4) , (const, 0xffffffff, 4), (unique, 0x10000ebe, 4) MULTIEQUAL (register, 0x0, 4) , (unique, 0xbc80, 4)]
[(register, 0xa8, 4) INT_SUB (unique, 0x3400, 4) , (register, 0xb8, 4), (register, 0xb8, 4) SUBPIECE (register, 0xb8, 8) , (const, 0x0, 4), (unique, 0x3400, 4) INT_ADD (register, 0x18, 4) , (register, 0x88, 4)]
[(unique, 0x10002a7c, 8) COPY (register, 0x38, 8)]
[(unique, 0x10002b74, 8) COPY (register, 0xb0, 8)]
[ ---  CBRANCH (ram, 0x46dedb, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xb8, 8) , (const, 0x0, 8), (register, 0xb8, 8) PTRADD (register, 0xb8, 8) , (const, 0xffffffffffffffff, 8) , (const, 0x1, 8)]
[(stack, 0xffffffffffffff18, 16) INT_AND (stack, 0xffffffffffffff18, 16) , (const, 0xffffffffffffffff, 16)]
[(unique, 0x10002aec, 8) COPY (register, 0x38, 8)]
[(unique, 0x10002bf0, 4) COPY (register, 0xa8, 4)]
[ ---  BRANCH (ram, 0x46d093, 1)]
[ ---  CBRANCH (ram, 0x46ceb5, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x58c00, 1) , (const, 0x0, 1), (unique, 0x58c00, 1) INT_AND (unique, 0xbb00, 1) , (const, 0x8, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100034c7, 8), (unique, 0x100034c7, 8) INT_ADD (unique, 0x100034bf, 8) , (const, 0xd, 8), (unique, 0x100034bf, 8) CAST (stack, 0xffffffffffffff40, 8)]
[(stack, 0xfffffffffffffed8, 8) COPY (register, 0x0, 8), (register, 0x0, 8) INT_MULT (register, 0x0, 8) , (stack, 0xfffffffffffffed8, 8), (register, 0x0, 8) INT_ZEXT (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x100034cf, 8), (unique, 0x100034cf, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0xa8, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (stack, 0xffffffffffffff00, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100034d7, 8) , (const, 0x46cec8, 8), (unique, 0x100034d7, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1375, 4)]
[(ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x1375, 4)]
[(ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x1375, 4)]
[(ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x1375, 4)]
[(ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x1375, 4)]
[(ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x1375, 4)]
[(ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x1375, 4)]
[(ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x1375, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x1375, 4)]
[(stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x1375, 4)]
[(stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x1375, 4)]
[(stack, 0xfffffffffffffec0, 4) INDIRECT (stack, 0xfffffffffffffec0, 4) , (const, 0x1375, 4)]
[(stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x1375, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x1375, 4)]
[(stack, 0xfffffffffffffed0, 4) INDIRECT (stack, 0xfffffffffffffed0, 4) , (const, 0x1375, 4)]
[(stack, 0xfffffffffffffed4, 4) INDIRECT (stack, 0xfffffffffffffed4, 4) , (const, 0x1375, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x1375, 4), (stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffee0, 4) INDIRECT (stack, 0xfffffffffffffee0, 4) , (const, 0x1375, 4)]
[(stack, 0xfffffffffffffee4, 4) INDIRECT (stack, 0xfffffffffffffee4, 4) , (const, 0x1375, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x1375, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x1375, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x1375, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x1375, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x1375, 4)]
[(stack, 0xffffffffffffff28, 16) INDIRECT (stack, 0xffffffffffffff28, 16) , (const, 0x1375, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x1375, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x1375, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x1375, 4)]
[(stack, 0xffffffffffffff52, 2) INDIRECT (stack, 0xffffffffffffff52, 2) , (const, 0x1375, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x1375, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x1375, 4)]
[(stack, 0xffffffffffffff5c, 4) INDIRECT (stack, 0xffffffffffffff5c, 4) , (const, 0x1375, 4)]
[(stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0x1375, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x1375, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x1375, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x1375, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x1375, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x1375, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x1375, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x1375, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x1375, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1375, 4)]
[(register, 0x0, 8) CALL (ram, 0x401190, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xffffffffffffff18, 4) SUBPIECE (stack, 0xffffffffffffff18, 16) , (const, 0x0, 8), (stack, 0xffffffffffffff18, 16) INDIRECT (stack, 0xffffffffffffff18, 16) , (const, 0x1375, 4), (stack, 0xffffffffffffff18, 16) INT_ADD (unique, 0x100023bc, 16) , (register, 0x88, 4), (unique, 0x100023bc, 16) INT_LEFT (unique, 0x100023ac, 16) , (const, 0x20, 16), (unique, 0x100023ac, 16) INT_SEXT (stack, 0xffffffffffffff1c, 12)]
[ ---  CBRANCH (ram, 0x46dc9f, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xfffffffffffffee8, 8) , (const, 0x0, 8), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x1375, 4)]
[(register, 0x10, 8) COPY (const, 0x0, 8)]
[(register, 0xa8, 8) COPY (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x46ceff, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100034df, 8) , (const, 0x46cee7, 8), (unique, 0x100034df, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x138a, 4)]
[(ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x138a, 4)]
[(ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x138a, 4)]
[(ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x138a, 4)]
[(ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x138a, 4)]
[(ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x138a, 4)]
[(ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x138a, 4)]
[(ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x138a, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x138a, 4)]
[(stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x138a, 4)]
[(stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x138a, 4)]
[(stack, 0xfffffffffffffec0, 4) INDIRECT (stack, 0xfffffffffffffec0, 4) , (const, 0x138a, 4)]
[(stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x138a, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x138a, 4)]
[(stack, 0xfffffffffffffed0, 4) INDIRECT (stack, 0xfffffffffffffed0, 4) , (const, 0x138a, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x138a, 4)]
[(stack, 0xfffffffffffffee0, 4) INDIRECT (stack, 0xfffffffffffffee0, 4) , (const, 0x138a, 4)]
[(stack, 0xfffffffffffffee4, 4) INDIRECT (stack, 0xfffffffffffffee4, 4) , (const, 0x138a, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x138a, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x138a, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x138a, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x138a, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x138a, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x138a, 4)]
[(stack, 0xffffffffffffff28, 16) INDIRECT (stack, 0xffffffffffffff28, 16) , (const, 0x138a, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x138a, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x138a, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x138a, 4)]
[(stack, 0xffffffffffffff52, 2) INDIRECT (stack, 0xffffffffffffff52, 2) , (const, 0x138a, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x138a, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x138a, 4)]
[(stack, 0xffffffffffffff5c, 4) INDIRECT (stack, 0xffffffffffffff5c, 4) , (const, 0x138a, 4)]
[(stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0x138a, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x138a, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x138a, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x138a, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x138a, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x138a, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x138a, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x138a, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x138a, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x138a, 4)]
[(stack, 0xffffffffffffff18, 4) SUBPIECE (stack, 0xffffffffffffff18, 16) , (const, 0x0, 8), (stack, 0xffffffffffffff18, 16) INDIRECT (stack, 0xffffffffffffff18, 16) , (const, 0x138a, 4)]
[(register, 0x0, 8) INT_MULT (register, 0x0, 8) , (unique, 0x100034ef, 8), (unique, 0x100034ef, 8) CAST (register, 0x0, 8), (register, 0x0, 8) INT_SEXT (stack, 0xfffffffffffffed4, 4), (register, 0x0, 8) CAST (unique, 0x100034e7, 8), (unique, 0x100034e7, 8) CALL (ram, 0x401190, 8), (stack, 0xfffffffffffffed4, 4) INDIRECT (stack, 0xfffffffffffffed4, 4) , (const, 0x138a, 4)]
[(unique, 0x10001095, 4) MULTIEQUAL (stack, 0xffffffffffffff18, 4) , (stack, 0xffffffffffffff18, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 4) MULTIEQUAL (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4)]
[(stack, 0xffffffffffffff5c, 4) MULTIEQUAL (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4)]
[(stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff52, 2) MULTIEQUAL (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff28, 16) MULTIEQUAL (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16)]
[(stack, 0xffffffffffffff18, 16) MULTIEQUAL (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee4, 4) MULTIEQUAL (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4)]
[(stack, 0xfffffffffffffee0, 4) MULTIEQUAL (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4)]
[(stack, 0xfffffffffffffed4, 4) MULTIEQUAL (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4)]
[(stack, 0xfffffffffffffed0, 4) MULTIEQUAL (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffec4, 4) MULTIEQUAL (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4)]
[(stack, 0xfffffffffffffec0, 4) MULTIEQUAL (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4)]
[(stack, 0xfffffffffffffebc, 4) MULTIEQUAL (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(ram, 0x4ae3d0, 8) MULTIEQUAL (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8)]
[(ram, 0x4ae3c8, 8) MULTIEQUAL (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8)]
[(ram, 0x4ae3c0, 8) MULTIEQUAL (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8)]
[(ram, 0x4ae3b0, 8) MULTIEQUAL (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8)]
[(ram, 0x4ae3a0, 10) MULTIEQUAL (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10)]
[(ram, 0x4ae390, 8) MULTIEQUAL (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8)]
[(ram, 0x4ae380, 16) MULTIEQUAL (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xa8, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0xa8, 8)]
[(stack, 0xffffffffffffff08, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x100034f7, 8), (unique, 0x100034f7, 8) INT_ADD (unique, 0x3a00, 8) , (register, 0x10, 8), (unique, 0x3a00, 8) INT_ADD (unique, 0x3880, 8) , (register, 0x0, 8), (unique, 0x3880, 8) INT_ADD (stack, 0xfffffffffffffed8, 8) , (const, 0x2, 8), (register, 0x10, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x10, 8), (stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[ ---  CBRANCH (ram, 0x46e2a7, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xfffffffffffffeb8, 4) , (const, 0x1, 4), (stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4)]
[(register, 0x30, 8) PTRADD (register, 0x20, 8) , (unique, 0x1000080c, 8) , (const, 0x1, 8), (unique, 0x1000080c, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_AND (unique, 0x100034ff, 8) , (const, 0xfffffffffffff000, 8), (unique, 0x100034ff, 8) CAST (register, 0x0, 8), (register, 0x0, 8) PTRADD (register, 0x0, 8) , (const, 0x17, 8) , (const, 0x1, 8)]
[(unique, 0x1000082c, 4) SUBPIECE (register, 0x0, 8) , (const, 0x0, 4), (register, 0x0, 8) PTRADD (register, 0x0, 8) , (const, 0x17, 8) , (const, 0x1, 8)]
[(unique, 0x10002d6c, 8) COPY (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x46cf56, 1) , (unique, 0x100013ec, 1), (unique, 0x100013ec, 1) INT_NOTEQUAL (register, 0x20, 8) , (register, 0x30, 8), (register, 0x20, 8) MULTIEQUAL (unique, 0x10002d6c, 8) , (register, 0x20, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000350f, 8) , (unique, 0xbe00, 8), (unique, 0x1000350f, 8) CAST (unique, 0x3c80, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10003507, 8), (unique, 0x10003507, 8) CAST (unique, 0x3c80, 8), (unique, 0x3c80, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffff000, 8) , (const, 0x1, 8)]
[(register, 0x20, 8) PTRADD (register, 0x20, 8) , (unique, 0x10000834, 8) , (const, 0x1, 8), (unique, 0x10000834, 8) INT_2COMP (register, 0x10, 8), (register, 0x10, 8) INT_ZEXT (register, 0x10, 4), (register, 0x10, 4) INT_AND (unique, 0x1000082c, 4) , (const, 0xff0, 4)]
[ ---  CBRANCH (ram, 0x46cf6a, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x10, 8) , (const, 0x0, 8), (register, 0x10, 8) INT_ZEXT (register, 0x10, 4), (register, 0x10, 4) INT_AND (unique, 0x1000082c, 4) , (const, 0xff0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000351f, 8) , (unique, 0xbe00, 8), (unique, 0x1000351f, 8) CAST (unique, 0x3880, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10003517, 8), (unique, 0x10003517, 8) CAST (unique, 0x3880, 8), (unique, 0x3880, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(stack, 0xffffffffffffff18, 16) INT_AND (unique, 0x1000109c, 16) , (const, 0xffffffffffffffff, 16), (unique, 0x1000109c, 16) INT_ADD (unique, 0x100023dc, 16) , (unique, 0x1000352f, 8), (unique, 0x1000352f, 8) CAST (unique, 0x3800, 8), (unique, 0x100023dc, 16) INT_LEFT (unique, 0x100023cc, 16) , (const, 0x40, 16), (unique, 0x100023cc, 16) INT_SEXT (unique, 0x10003527, 8), (unique, 0x10003527, 8) CAST (stack, 0xffffffffffffff20, 8), (stack, 0xffffffffffffff20, 8) SUBPIECE (stack, 0xffffffffffffff18, 16) , (const, 0x8, 8), (unique, 0x3800, 8) PTRADD (register, 0x20, 8) , (unique, 0x10001b50, 8) , (const, 0x1, 8), (unique, 0x10001b50, 8) INT_ADD (unique, 0x10000834, 8) , (const, 0xf, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10003547, 8) , (const, 0x46e2b6, 8), (unique, 0x10003547, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x169c, 4)]
[(ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x169c, 4)]
[(ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x169c, 4)]
[(ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x169c, 4)]
[(ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x169c, 4)]
[(ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x169c, 4)]
[(ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x169c, 4)]
[(ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x169c, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x169c, 4)]
[(stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x169c, 4)]
[(stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x169c, 4)]
[(stack, 0xfffffffffffffec0, 4) INDIRECT (stack, 0xfffffffffffffec0, 4) , (const, 0x169c, 4)]
[(stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x169c, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x169c, 4)]
[(stack, 0xfffffffffffffed0, 4) INDIRECT (stack, 0xfffffffffffffed0, 4) , (const, 0x169c, 4)]
[(stack, 0xfffffffffffffed4, 4) INDIRECT (stack, 0xfffffffffffffed4, 4) , (const, 0x169c, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x169c, 4)]
[(stack, 0xfffffffffffffee0, 4) INDIRECT (stack, 0xfffffffffffffee0, 4) , (const, 0x169c, 4)]
[(stack, 0xfffffffffffffee4, 4) INDIRECT (stack, 0xfffffffffffffee4, 4) , (const, 0x169c, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x169c, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x169c, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x169c, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x169c, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x169c, 4)]
[(stack, 0xffffffffffffff28, 16) INDIRECT (stack, 0xffffffffffffff28, 16) , (const, 0x169c, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x169c, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x169c, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x169c, 4)]
[(stack, 0xffffffffffffff52, 2) INDIRECT (stack, 0xffffffffffffff52, 2) , (const, 0x169c, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x169c, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x169c, 4)]
[(stack, 0xffffffffffffff5c, 4) INDIRECT (stack, 0xffffffffffffff5c, 4) , (const, 0x169c, 4)]
[(stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0x169c, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x169c, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x169c, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x169c, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x169c, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x169c, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x169c, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x169c, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x169c, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x169c, 4)]
[(stack, 0xffffffffffffff18, 16) INT_ADD (unique, 0x100026fc, 16) , (unique, 0x1000355f, 8), (unique, 0x1000355f, 8) CAST (register, 0x0, 8), (unique, 0x100026fc, 16) INT_LEFT (unique, 0x100026ec, 16) , (const, 0x40, 16), (unique, 0x100026ec, 16) INT_SEXT (unique, 0x10003557, 8), (unique, 0x10003557, 8) CAST (stack, 0xffffffffffffff20, 8), (stack, 0xffffffffffffff20, 8) SUBPIECE (stack, 0xffffffffffffff18, 16) , (const, 0x8, 8), (register, 0x0, 8) CALL (ram, 0x426550, 8) , (unique, 0x1000354f, 8), (stack, 0xffffffffffffff18, 16) INDIRECT (stack, 0xffffffffffffff18, 16) , (const, 0x169c, 4), (unique, 0x1000354f, 8) CAST (register, 0x0, 8)]
[(unique, 0x10002cd4, 4) COPY (stack, 0xffffffffffffff10, 4), (stack, 0xffffffffffffff10, 4) SUBPIECE (stack, 0xffffffffffffff10, 8) , (const, 0x0, 8), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x169c, 4), (stack, 0xffffffffffffff10, 8) CAST (unique, 0x1000353f, 8), (unique, 0x1000353f, 8) INT_OR (unique, 0x100011ac, 8) , (unique, 0x100011b4, 8), (unique, 0x100011b4, 8) INT_ZEXT (unique, 0x10001095, 4), (unique, 0x100011ac, 8) INT_AND (unique, 0x10003537, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10003537, 8) CAST (stack, 0xffffffffffffff10, 8)]
[ ---  CBRANCH (ram, 0x46cf7a, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CALL (ram, 0x426550, 8) , (unique, 0x1000354f, 8), (unique, 0x1000354f, 8) CAST (register, 0x0, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 4) MULTIEQUAL (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4)]
[(stack, 0xffffffffffffff5c, 4) MULTIEQUAL (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4)]
[(stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff52, 2) MULTIEQUAL (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff28, 16) MULTIEQUAL (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee0, 4) MULTIEQUAL (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed4, 4) MULTIEQUAL (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4)]
[(stack, 0xfffffffffffffed0, 4) MULTIEQUAL (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffec4, 4) MULTIEQUAL (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4)]
[(stack, 0xfffffffffffffec0, 4) MULTIEQUAL (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4)]
[(stack, 0xfffffffffffffebc, 4) MULTIEQUAL (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4)]
[(stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(ram, 0x4ae3d0, 8) MULTIEQUAL (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8)]
[(ram, 0x4ae3c8, 8) MULTIEQUAL (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8)]
[(ram, 0x4ae3c0, 8) MULTIEQUAL (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8)]
[(ram, 0x4ae3b0, 8) MULTIEQUAL (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8)]
[(ram, 0x4ae3a0, 10) MULTIEQUAL (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10)]
[(ram, 0x4ae390, 8) MULTIEQUAL (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8)]
[(ram, 0x4ae380, 16) MULTIEQUAL (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x88, 4) MULTIEQUAL (unique, 0x10001095, 4) , (unique, 0x10002cd4, 4)]
[(register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8)]
[(unique, 0x100028a4, 4) COPY (stack, 0xffffffffffffff38, 4), (stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(unique, 0x100028a0, 4) COPY (stack, 0xfffffffffffffee4, 4), (stack, 0xfffffffffffffee4, 4) MULTIEQUAL (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4)]
[(stack, 0xffffffffffffff18, 8) SUBPIECE (stack, 0xffffffffffffff18, 16) , (const, 0x0, 8), (stack, 0xffffffffffffff18, 16) MULTIEQUAL (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16)]
[ ---  CBRANCH (ram, 0x46e213, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (register, 0xb0, 8) , (register, 0xb8, 8)]
[(unique, 0x10002a74, 8) COPY (unique, 0x10003577, 8), (unique, 0x10003577, 8) CAST (stack, 0xffffffffffffff18, 8)]
[(unique, 0x10002cd8, 4) COPY (register, 0x88, 4)]
[ ---  CBRANCH (ram, 0x46e268, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x58c00, 1) , (const, 0x0, 1), (unique, 0x58c00, 1) INT_AND (unique, 0xbb00, 1) , (const, 0x8, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000356f, 8), (unique, 0x1000356f, 8) INT_ADD (unique, 0x10003567, 8) , (const, 0xd, 8), (unique, 0x10003567, 8) CAST (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff10, 8) COPY (register, 0xa8, 8)]
[(stack, 0xfffffffffffffef8, 8) COPY (register, 0xa0, 8)]
[(stack, 0xffffffffffffff00, 8) CAST (unique, 0x10003587, 8), (unique, 0x10003587, 8) INT_OR (unique, 0x100010b0, 8) , (unique, 0x100010b8, 8), (unique, 0x100010b8, 8) INT_ZEXT (register, 0x88, 4), (unique, 0x100010b0, 8) INT_AND (unique, 0x1000357f, 8) , (const, 0xffffffff00000000, 8), (unique, 0x1000357f, 8) CAST (stack, 0xffffffffffffff00, 8)]
[ ---  BRANCH (ram, 0x46cfd8, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 4) MULTIEQUAL (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4)]
[(stack, 0xffffffffffffff5c, 4) MULTIEQUAL (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4)]
[(stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff52, 2) MULTIEQUAL (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff28, 16) MULTIEQUAL (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16)]
[(stack, 0xffffffffffffff18, 16) MULTIEQUAL (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee4, 4) MULTIEQUAL (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4)]
[(stack, 0xfffffffffffffee0, 4) MULTIEQUAL (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed4, 4) MULTIEQUAL (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4)]
[(stack, 0xfffffffffffffed0, 4) MULTIEQUAL (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffec4, 4) MULTIEQUAL (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4)]
[(stack, 0xfffffffffffffec0, 4) MULTIEQUAL (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4)]
[(stack, 0xfffffffffffffebc, 4) MULTIEQUAL (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4)]
[(stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(ram, 0x4ae3d0, 8) MULTIEQUAL (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8)]
[(ram, 0x4ae3c8, 8) MULTIEQUAL (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8)]
[(ram, 0x4ae3c0, 8) MULTIEQUAL (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8)]
[(ram, 0x4ae3b0, 8) MULTIEQUAL (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8)]
[(ram, 0x4ae3a0, 10) MULTIEQUAL (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10)]
[(ram, 0x4ae390, 8) MULTIEQUAL (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8)]
[(ram, 0x4ae380, 16) MULTIEQUAL (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x38, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (register, 0x0, 8) , (register, 0x38, 8)]
[ ---  CBRANCH (ram, 0x46cfc0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbc80, 4) , (unique, 0x100028a4, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (register, 0xb8, 8), (register, 0xb8, 8) MULTIEQUAL (register, 0xb0, 8) , (register, 0xb8, 8) , (register, 0xb8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000358f, 8) , (const, 0x46cff2, 8), (unique, 0x1000358f, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x148e, 4)]
[(ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x148e, 4)]
[(ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x148e, 4)]
[(ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x148e, 4)]
[(ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x148e, 4)]
[(ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x148e, 4)]
[(ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x148e, 4)]
[(ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x148e, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x148e, 4)]
[(stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x148e, 4)]
[(stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x148e, 4)]
[(stack, 0xfffffffffffffec0, 4) INDIRECT (stack, 0xfffffffffffffec0, 4) , (const, 0x148e, 4)]
[(stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x148e, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x148e, 4)]
[(stack, 0xfffffffffffffed0, 4) INDIRECT (stack, 0xfffffffffffffed0, 4) , (const, 0x148e, 4)]
[(stack, 0xfffffffffffffed4, 4) INDIRECT (stack, 0xfffffffffffffed4, 4) , (const, 0x148e, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x148e, 4)]
[(stack, 0xfffffffffffffee0, 4) INDIRECT (stack, 0xfffffffffffffee0, 4) , (const, 0x148e, 4)]
[(stack, 0xfffffffffffffee4, 4) INDIRECT (stack, 0xfffffffffffffee4, 4) , (const, 0x148e, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x148e, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x148e, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x148e, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x148e, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x148e, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x148e, 4)]
[(stack, 0xffffffffffffff18, 16) INDIRECT (stack, 0xffffffffffffff18, 16) , (const, 0x148e, 4)]
[(stack, 0xffffffffffffff28, 16) INDIRECT (stack, 0xffffffffffffff28, 16) , (const, 0x148e, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x148e, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x148e, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x148e, 4)]
[(stack, 0xffffffffffffff52, 2) INDIRECT (stack, 0xffffffffffffff52, 2) , (const, 0x148e, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x148e, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x148e, 4)]
[(stack, 0xffffffffffffff5c, 4) INDIRECT (stack, 0xffffffffffffff5c, 4) , (const, 0x148e, 4)]
[(stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0x148e, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x148e, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x148e, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x148e, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x148e, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x148e, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x148e, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x148e, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x148e, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x148e, 4)]
[(unique, 0x10002a5c, 8) COPY (unique, 0x1000359f, 8), (unique, 0x1000359f, 8) CAST (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10003597, 8), (unique, 0x10003597, 8) CALL (ram, 0x401160, 8) , (register, 0x38, 8) , (stack, 0xfffffffffffffef0, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x46cfd8, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (register, 0xb8, 8) , (register, 0xb8, 8), (register, 0xb8, 8) PTRADD (register, 0xb8, 8) , (const, 0x1, 8) , (const, 0x4, 8)]
[ ---  CBRANCH (ram, 0x46d250, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x100028a0, 4) , (unique, 0xbc80, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100035a7, 8) , (const, 0x46d263, 8), (unique, 0x100035a7, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1680, 4)]
[(ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x1680, 4)]
[(ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x1680, 4)]
[(ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x1680, 4)]
[(ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x1680, 4)]
[(ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x1680, 4)]
[(ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x1680, 4)]
[(ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x1680, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x1680, 4)]
[(stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x1680, 4)]
[(stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x1680, 4)]
[(stack, 0xfffffffffffffec0, 4) INDIRECT (stack, 0xfffffffffffffec0, 4) , (const, 0x1680, 4)]
[(stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x1680, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x1680, 4)]
[(stack, 0xfffffffffffffed0, 4) INDIRECT (stack, 0xfffffffffffffed0, 4) , (const, 0x1680, 4)]
[(stack, 0xfffffffffffffed4, 4) INDIRECT (stack, 0xfffffffffffffed4, 4) , (const, 0x1680, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x1680, 4)]
[(stack, 0xfffffffffffffee0, 4) INDIRECT (stack, 0xfffffffffffffee0, 4) , (const, 0x1680, 4)]
[(stack, 0xfffffffffffffee4, 4) INDIRECT (stack, 0xfffffffffffffee4, 4) , (const, 0x1680, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x1680, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x1680, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x1680, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x1680, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x1680, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x1680, 4)]
[(stack, 0xffffffffffffff18, 16) INDIRECT (stack, 0xffffffffffffff18, 16) , (const, 0x1680, 4)]
[(stack, 0xffffffffffffff28, 16) INDIRECT (stack, 0xffffffffffffff28, 16) , (const, 0x1680, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x1680, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x1680, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x1680, 4)]
[(stack, 0xffffffffffffff52, 2) INDIRECT (stack, 0xffffffffffffff52, 2) , (const, 0x1680, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x1680, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x1680, 4)]
[(stack, 0xffffffffffffff5c, 4) INDIRECT (stack, 0xffffffffffffff5c, 4) , (const, 0x1680, 4)]
[(stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0x1680, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x1680, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x1680, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x1680, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x1680, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x1680, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x1680, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x1680, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x1680, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1680, 4)]
[(register, 0x0, 8) CAST (unique, 0x100035af, 8), (unique, 0x100035af, 8) CALL (ram, 0x401160, 8) , (register, 0x38, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xffffffffffffff10, 8)]
[ ---  BRANCH (ram, 0x46cfcf, 1)]
[(ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x165a, 4)]
[(ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x165a, 4)]
[(ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x165a, 4)]
[(ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x165a, 4)]
[(ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x165a, 4)]
[(ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x165a, 4)]
[(ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x165a, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100035b7, 8) , (register, 0x10, 1), (unique, 0x100035b7, 8) CAST (register, 0x38, 8), (register, 0x10, 1) SUBPIECE (unique, 0xbc80, 4) , (const, 0x0, 4)]
[(register, 0x38, 8) CAST (unique, 0x100035c7, 8), (unique, 0x100035c7, 8) INT_ADD (unique, 0x100035bf, 8) , (const, 0x1, 8), (unique, 0x100035bf, 8) CAST (register, 0x38, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 4) MULTIEQUAL (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4)]
[(stack, 0xffffffffffffff5c, 4) MULTIEQUAL (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4)]
[(stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff52, 2) MULTIEQUAL (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff28, 16) MULTIEQUAL (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16)]
[(stack, 0xffffffffffffff18, 16) MULTIEQUAL (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee4, 4) MULTIEQUAL (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4)]
[(stack, 0xfffffffffffffee0, 4) MULTIEQUAL (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed4, 4) MULTIEQUAL (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4)]
[(stack, 0xfffffffffffffed0, 4) MULTIEQUAL (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffec4, 4) MULTIEQUAL (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4)]
[(stack, 0xfffffffffffffec0, 4) MULTIEQUAL (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4)]
[(stack, 0xfffffffffffffebc, 4) MULTIEQUAL (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4)]
[(stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(ram, 0x4ae3d0, 8) MULTIEQUAL (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8)]
[(ram, 0x4ae3c8, 8) MULTIEQUAL (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8)]
[(ram, 0x4ae3c0, 8) MULTIEQUAL (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8)]
[(ram, 0x4ae3b0, 8) MULTIEQUAL (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8)]
[(ram, 0x4ae3a0, 10) MULTIEQUAL (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10)]
[(ram, 0x4ae390, 8) MULTIEQUAL (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8)]
[(ram, 0x4ae380, 16) MULTIEQUAL (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x10002a64, 8) COPY (unique, 0x100035cf, 8), (unique, 0x100035cf, 8) CAST (register, 0x38, 8), (register, 0x38, 8) MULTIEQUAL (register, 0x38, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x46cffa, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESSEQUAL (register, 0xb8, 8) , (register, 0xb8, 8), (register, 0xb8, 8) PTRADD (register, 0xb8, 8) , (const, 0x1, 8) , (const, 0x4, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 4) MULTIEQUAL (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4)]
[(stack, 0xffffffffffffff5c, 4) MULTIEQUAL (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4)]
[(stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff52, 2) MULTIEQUAL (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff28, 16) MULTIEQUAL (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16)]
[(stack, 0xffffffffffffff18, 16) MULTIEQUAL (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee4, 4) MULTIEQUAL (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4)]
[(stack, 0xfffffffffffffee0, 4) MULTIEQUAL (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed4, 4) MULTIEQUAL (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4)]
[(stack, 0xfffffffffffffed0, 4) MULTIEQUAL (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffec4, 4) MULTIEQUAL (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4)]
[(stack, 0xfffffffffffffec0, 4) MULTIEQUAL (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4)]
[(stack, 0xfffffffffffffebc, 4) MULTIEQUAL (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4)]
[(stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(ram, 0x4ae3d0, 8) MULTIEQUAL (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8)]
[(ram, 0x4ae3c8, 8) MULTIEQUAL (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8)]
[(ram, 0x4ae3c0, 8) MULTIEQUAL (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8)]
[(ram, 0x4ae3b0, 8) MULTIEQUAL (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8)]
[(ram, 0x4ae3a0, 10) MULTIEQUAL (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10)]
[(ram, 0x4ae390, 8) MULTIEQUAL (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8)]
[(ram, 0x4ae380, 16) MULTIEQUAL (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(stack, 0xffffffffffffff00, 4) SUBPIECE (stack, 0xffffffffffffff00, 8) , (const, 0x0, 8), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(unique, 0x10002a6c, 8) COPY (register, 0x38, 8), (register, 0x38, 8) MULTIEQUAL (unique, 0x10002a5c, 8) , (unique, 0x10002a64, 8)]
[(unique, 0x10002af4, 8) COPY (stack, 0xfffffffffffffef8, 8), (stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[ ---  CBRANCH (ram, 0x46e26f, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x58c00, 1) , (const, 0x0, 1), (unique, 0x58c00, 1) INT_AND (unique, 0xbb00, 1) , (const, 0x8, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100035df, 8), (unique, 0x100035df, 8) INT_ADD (unique, 0x100035d7, 8) , (const, 0xd, 8), (unique, 0x100035d7, 8) CAST (stack, 0xffffffffffffff40, 8), (stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(register, 0xa0, 8) MULTIEQUAL (unique, 0x10002af4, 8) , (register, 0xa0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100035ff, 8) , (const, 0x46e295, 8), (unique, 0x100035ff, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1647, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x1647, 4), (ram, 0x4ae380, 16) MULTIEQUAL (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16)]
[(ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x1647, 4), (ram, 0x4ae390, 8) MULTIEQUAL (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8)]
[(ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x1647, 4), (ram, 0x4ae3a0, 10) MULTIEQUAL (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10)]
[(ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x1647, 4), (ram, 0x4ae3b0, 8) MULTIEQUAL (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8)]
[(ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x1647, 4), (ram, 0x4ae3c0, 8) MULTIEQUAL (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8)]
[(ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x1647, 4), (ram, 0x4ae3c8, 8) MULTIEQUAL (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8)]
[(ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x1647, 4), (ram, 0x4ae3d0, 8) MULTIEQUAL (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x1647, 4), (stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x1647, 4), (stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4)]
[(stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x1647, 4), (stack, 0xfffffffffffffebc, 4) MULTIEQUAL (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4)]
[(stack, 0xfffffffffffffec0, 4) INDIRECT (stack, 0xfffffffffffffec0, 4) , (const, 0x1647, 4), (stack, 0xfffffffffffffec0, 4) MULTIEQUAL (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4)]
[(stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x1647, 4), (stack, 0xfffffffffffffec4, 4) MULTIEQUAL (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x1647, 4), (stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffed0, 4) INDIRECT (stack, 0xfffffffffffffed0, 4) , (const, 0x1647, 4), (stack, 0xfffffffffffffed0, 4) MULTIEQUAL (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4)]
[(stack, 0xfffffffffffffed4, 4) INDIRECT (stack, 0xfffffffffffffed4, 4) , (const, 0x1647, 4), (stack, 0xfffffffffffffed4, 4) MULTIEQUAL (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x1647, 4), (stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffee0, 4) INDIRECT (stack, 0xfffffffffffffee0, 4) , (const, 0x1647, 4), (stack, 0xfffffffffffffee0, 4) MULTIEQUAL (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4)]
[(stack, 0xfffffffffffffee4, 4) INDIRECT (stack, 0xfffffffffffffee4, 4) , (const, 0x1647, 4), (stack, 0xfffffffffffffee4, 4) MULTIEQUAL (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x1647, 4), (stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x1647, 4), (stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x1647, 4), (stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x1647, 4), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x1647, 4), (stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff18, 16) INDIRECT (stack, 0xffffffffffffff18, 16) , (const, 0x1647, 4), (stack, 0xffffffffffffff18, 16) MULTIEQUAL (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16)]
[(stack, 0xffffffffffffff28, 16) INDIRECT (stack, 0xffffffffffffff28, 16) , (const, 0x1647, 4), (stack, 0xffffffffffffff28, 16) MULTIEQUAL (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x1647, 4), (stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x1647, 4), (stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x1647, 4), (stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff52, 2) INDIRECT (stack, 0xffffffffffffff52, 2) , (const, 0x1647, 4), (stack, 0xffffffffffffff52, 2) MULTIEQUAL (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x1647, 4), (stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x1647, 4), (stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4)]
[(stack, 0xffffffffffffff5c, 4) INDIRECT (stack, 0xffffffffffffff5c, 4) , (const, 0x1647, 4), (stack, 0xffffffffffffff5c, 4) MULTIEQUAL (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4)]
[(stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0x1647, 4), (stack, 0xffffffffffffff60, 4) MULTIEQUAL (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x1647, 4), (stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x1647, 4), (stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x1647, 4), (stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x1647, 4), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x1647, 4), (stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x1647, 4), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x1647, 4), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x1647, 4), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1647, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(register, 0x0, 8) CAST (unique, 0x10003607, 8), (unique, 0x10003607, 8) CALL (ram, 0x46b6a0, 8) , (stack, 0xffffffffffffff18, 8) , (register, 0x38, 8) , (register, 0xb8, 8), (register, 0xb8, 8) PTRADD (stack, 0xffffffffffffff08, 8) , (unique, 0x100035f7, 8) , (const, 0x1, 8), (unique, 0x100035f7, 8) CAST (stack, 0xffffffffffffff18, 8), (stack, 0xffffffffffffff18, 8) SUBPIECE (stack, 0xffffffffffffff18, 16) , (const, 0x0, 8), (register, 0x38, 8) MULTIEQUAL (unique, 0x10002a6c, 8) , (unique, 0x10002a74, 8), (stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8), (stack, 0xffffffffffffff18, 16) MULTIEQUAL (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16)]
[(stack, 0xffffffffffffff10, 4) SUBPIECE (stack, 0xffffffffffffff10, 8) , (const, 0x0, 8), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x1647, 4), (stack, 0xffffffffffffff10, 8) CAST (unique, 0x100035ef, 8), (unique, 0x100035ef, 8) INT_OR (unique, 0x1000119c, 8) , (unique, 0x100011a4, 8), (unique, 0x100011a4, 8) INT_ZEXT (register, 0x88, 4), (unique, 0x1000119c, 8) INT_AND (unique, 0x100035e7, 8) , (const, 0xffffffff00000000, 8), (unique, 0x100035e7, 8) CAST (stack, 0xffffffffffffff10, 8), (register, 0x88, 4) MULTIEQUAL (stack, 0xffffffffffffff00, 4) , (unique, 0x10002cd8, 4), (stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[ ---  BRANCH (ram, 0x46d020, 1)]
[(stack, 0xffffffffffffff18, 8) SUBPIECE (stack, 0xffffffffffffff18, 16) , (const, 0x0, 8)]
[(unique, 0x10002cd0, 4) COPY (stack, 0xffffffffffffff00, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 4) MULTIEQUAL (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4)]
[(stack, 0xffffffffffffff5c, 4) MULTIEQUAL (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4)]
[(stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff52, 2) MULTIEQUAL (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff28, 16) MULTIEQUAL (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16)]
[(stack, 0xffffffffffffff18, 16) MULTIEQUAL (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee4, 4) MULTIEQUAL (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4)]
[(stack, 0xfffffffffffffee0, 4) MULTIEQUAL (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed4, 4) MULTIEQUAL (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4)]
[(stack, 0xfffffffffffffed0, 4) MULTIEQUAL (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffec4, 4) MULTIEQUAL (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4)]
[(stack, 0xfffffffffffffec0, 4) MULTIEQUAL (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4)]
[(stack, 0xfffffffffffffebc, 4) MULTIEQUAL (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4)]
[(stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(ram, 0x4ae3d0, 8) MULTIEQUAL (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8)]
[(ram, 0x4ae3c8, 8) MULTIEQUAL (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8)]
[(ram, 0x4ae3c0, 8) MULTIEQUAL (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8)]
[(ram, 0x4ae3b0, 8) MULTIEQUAL (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8)]
[(ram, 0x4ae3a0, 10) MULTIEQUAL (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10)]
[(ram, 0x4ae390, 8) MULTIEQUAL (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8)]
[(ram, 0x4ae380, 16) MULTIEQUAL (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xa0, 8) MULTIEQUAL (unique, 0x10002af4, 8) , (register, 0xa0, 8)]
[(unique, 0x10002da4, 8) COPY (unique, 0x1000361f, 8), (unique, 0x1000361f, 8) CAST (register, 0xb0, 8), (register, 0xb0, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (register, 0x0, 8)]
[(unique, 0x10002dac, 4) COPY (register, 0x88, 4), (register, 0x88, 4) MULTIEQUAL (unique, 0x10002cd0, 4) , (stack, 0xffffffffffffff10, 4)]
[(unique, 0x10002db8, 8) COPY (register, 0x18, 8), (register, 0x18, 8) PTRADD (register, 0x38, 8) , (unique, 0x10000864, 8) , (const, 0x1, 8), (unique, 0x10000864, 8) INT_2COMP (unique, 0x1000360f, 8), (unique, 0x1000360f, 8) CAST (register, 0xb0, 8), (register, 0x38, 8) MULTIEQUAL (register, 0x38, 8) , (register, 0xb8, 8), (register, 0xb0, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x46d860, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (const, 0x14, 8) , (unique, 0x10003617, 8), (unique, 0x10003617, 8) CAST (register, 0x18, 8), (register, 0x18, 8) PTRADD (register, 0x38, 8) , (unique, 0x10000864, 8) , (const, 0x1, 8), (unique, 0x10000864, 8) INT_2COMP (unique, 0x1000360f, 8), (unique, 0x1000360f, 8) CAST (register, 0xb0, 8), (register, 0x38, 8) MULTIEQUAL (register, 0x38, 8) , (register, 0xb8, 8), (register, 0xb0, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (register, 0x0, 8)]
[(unique, 0x10002dd8, 8) COPY (unique, 0x1000362f, 8), (unique, 0x1000362f, 8) CAST (register, 0xb0, 8)]
[ ---  CBRANCH (ram, 0x46e44c, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (register, 0x10, 8) , (const, 0x6a8, 8), (register, 0x10, 8) INT_SUB (unique, 0xbd80, 8) , (const, 0x4c6b60, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10003627, 8), (unique, 0x10003627, 8) CAST (unique, 0x3c80, 8), (unique, 0x3c80, 8) PTRADD (register, 0xa0, 8) , (const, 0x1, 8) , (const, 0xd8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10003647, 8) , (const, 0x46e45f, 8), (unique, 0x10003647, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x15a1, 4)]
[(ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x15a1, 4)]
[(ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x15a1, 4)]
[(ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x15a1, 4)]
[(ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x15a1, 4)]
[(ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x15a1, 4)]
[(ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x15a1, 4)]
[(ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x15a1, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x15a1, 4)]
[(stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x15a1, 4)]
[(stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x15a1, 4)]
[(stack, 0xfffffffffffffec0, 4) INDIRECT (stack, 0xfffffffffffffec0, 4) , (const, 0x15a1, 4)]
[(stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x15a1, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x15a1, 4)]
[(stack, 0xfffffffffffffed0, 4) INDIRECT (stack, 0xfffffffffffffed0, 4) , (const, 0x15a1, 4)]
[(stack, 0xfffffffffffffed4, 4) INDIRECT (stack, 0xfffffffffffffed4, 4) , (const, 0x15a1, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x15a1, 4)]
[(stack, 0xfffffffffffffee0, 4) INDIRECT (stack, 0xfffffffffffffee0, 4) , (const, 0x15a1, 4)]
[(stack, 0xfffffffffffffee4, 4) INDIRECT (stack, 0xfffffffffffffee4, 4) , (const, 0x15a1, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x15a1, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x15a1, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x15a1, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x15a1, 4)]
[(stack, 0xffffffffffffff18, 16) INDIRECT (stack, 0xffffffffffffff18, 16) , (const, 0x15a1, 4)]
[(stack, 0xffffffffffffff28, 16) INDIRECT (stack, 0xffffffffffffff28, 16) , (const, 0x15a1, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x15a1, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x15a1, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x15a1, 4)]
[(stack, 0xffffffffffffff52, 2) INDIRECT (stack, 0xffffffffffffff52, 2) , (const, 0x15a1, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x15a1, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x15a1, 4)]
[(stack, 0xffffffffffffff5c, 4) INDIRECT (stack, 0xffffffffffffff5c, 4) , (const, 0x15a1, 4)]
[(stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0x15a1, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x15a1, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x15a1, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x15a1, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x15a1, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x15a1, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x15a1, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x15a1, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x15a1, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x15a1, 4)]
[ ---  CALL (ram, 0x41b380, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000364f, 8), (unique, 0x1000364f, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x38, 8)]
[(stack, 0xffffffffffffff10, 4) SUBPIECE (stack, 0xffffffffffffff10, 8) , (const, 0x0, 8), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x15a1, 4), (stack, 0xffffffffffffff10, 8) CAST (unique, 0x1000363f, 8), (unique, 0x1000363f, 8) INT_OR (unique, 0x100011ef, 8) , (unique, 0x100011f7, 8), (unique, 0x100011f7, 8) INT_ZEXT (register, 0x88, 4), (unique, 0x100011ef, 8) INT_AND (unique, 0x10003637, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10003637, 8) CAST (stack, 0xffffffffffffff10, 8)]
[(unique, 0x10002aac, 8) COPY (stack, 0xffffffffffffff08, 8), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x15a1, 4), (stack, 0xffffffffffffff08, 8) COPY (register, 0x18, 8)]
[ ---  BRANCH (ram, 0x46d05f, 1)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10003657, 8), (unique, 0x10003657, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x38, 8)]
[(unique, 0x10002aa4, 8) COPY (register, 0x18, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000366f, 8) , (const, 0x46d078, 8), (unique, 0x1000366f, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8), (register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x14fe, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x14fe, 4), (ram, 0x4ae380, 16) MULTIEQUAL (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16)]
[(ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x14fe, 4), (ram, 0x4ae390, 8) MULTIEQUAL (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8)]
[(ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x14fe, 4), (ram, 0x4ae3a0, 10) MULTIEQUAL (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10)]
[(ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x14fe, 4), (ram, 0x4ae3b0, 8) MULTIEQUAL (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8)]
[(ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x14fe, 4), (ram, 0x4ae3c0, 8) MULTIEQUAL (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8)]
[(ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x14fe, 4), (ram, 0x4ae3c8, 8) MULTIEQUAL (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8)]
[(ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x14fe, 4), (ram, 0x4ae3d0, 8) MULTIEQUAL (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x14fe, 4), (stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x14fe, 4), (stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4)]
[(stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x14fe, 4), (stack, 0xfffffffffffffebc, 4) MULTIEQUAL (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4)]
[(stack, 0xfffffffffffffec0, 4) INDIRECT (stack, 0xfffffffffffffec0, 4) , (const, 0x14fe, 4), (stack, 0xfffffffffffffec0, 4) MULTIEQUAL (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4)]
[(stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x14fe, 4), (stack, 0xfffffffffffffec4, 4) MULTIEQUAL (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x14fe, 4), (stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffed0, 4) INDIRECT (stack, 0xfffffffffffffed0, 4) , (const, 0x14fe, 4), (stack, 0xfffffffffffffed0, 4) MULTIEQUAL (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4)]
[(stack, 0xfffffffffffffed4, 4) INDIRECT (stack, 0xfffffffffffffed4, 4) , (const, 0x14fe, 4), (stack, 0xfffffffffffffed4, 4) MULTIEQUAL (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x14fe, 4), (stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffee0, 4) INDIRECT (stack, 0xfffffffffffffee0, 4) , (const, 0x14fe, 4), (stack, 0xfffffffffffffee0, 4) MULTIEQUAL (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4)]
[(stack, 0xfffffffffffffee4, 4) INDIRECT (stack, 0xfffffffffffffee4, 4) , (const, 0x14fe, 4), (stack, 0xfffffffffffffee4, 4) MULTIEQUAL (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x14fe, 4), (stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x14fe, 4), (stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x14fe, 4), (stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x14fe, 4), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xffffffffffffff18, 16) INDIRECT (stack, 0xffffffffffffff18, 16) , (const, 0x14fe, 4), (stack, 0xffffffffffffff18, 16) MULTIEQUAL (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16)]
[(stack, 0xffffffffffffff28, 16) INDIRECT (stack, 0xffffffffffffff28, 16) , (const, 0x14fe, 4), (stack, 0xffffffffffffff28, 16) MULTIEQUAL (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x14fe, 4), (stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x14fe, 4), (stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x14fe, 4), (stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff52, 2) INDIRECT (stack, 0xffffffffffffff52, 2) , (const, 0x14fe, 4), (stack, 0xffffffffffffff52, 2) MULTIEQUAL (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x14fe, 4), (stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x14fe, 4), (stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4)]
[(stack, 0xffffffffffffff5c, 4) INDIRECT (stack, 0xffffffffffffff5c, 4) , (const, 0x14fe, 4), (stack, 0xffffffffffffff5c, 4) MULTIEQUAL (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4)]
[(stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0x14fe, 4), (stack, 0xffffffffffffff60, 4) MULTIEQUAL (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x14fe, 4), (stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x14fe, 4), (stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x14fe, 4), (stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x14fe, 4), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x14fe, 4), (stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x14fe, 4), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x14fe, 4), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x14fe, 4), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x14fe, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff08, 4) SUBPIECE (stack, 0xffffffffffffff08, 8) , (const, 0x0, 8), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x14fe, 4), (stack, 0xffffffffffffff08, 8) CAST (unique, 0x10003667, 8), (unique, 0x10003667, 8) INT_OR (unique, 0x100010c4, 8) , (unique, 0x100010cc, 8), (unique, 0x100010cc, 8) INT_ZEXT (register, 0x88, 4), (unique, 0x100010c4, 8) INT_AND (unique, 0x1000365f, 8) , (const, 0xffffffff00000000, 8), (unique, 0x1000365f, 8) CAST (stack, 0xffffffffffffff08, 8), (register, 0x88, 4) MULTIEQUAL (register, 0x88, 4) , (stack, 0xffffffffffffff10, 4) , (unique, 0x10002ccc, 4) , (stack, 0xffffffffffffff10, 4), (stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[ ---  CBRANCH (ram, 0x46c87c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (stack, 0xffffffffffffff10, 8), (register, 0x0, 8) CAST (unique, 0x10003677, 8), (unique, 0x10003677, 8) CALLIND (register, 0x0, 8) , (register, 0xa0, 8) , (register, 0xb0, 8) , (register, 0x80, 8), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x14fe, 4), (stack, 0xffffffffffffff10, 8) COPY (register, 0x80, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8) , (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (register, 0x80, 8) MULTIEQUAL (unique, 0x10002aa4, 8) , (unique, 0x10002aac, 8) , (unique, 0x10002ab4, 8) , (unique, 0x10002abc, 8), (register, 0xa0, 8) MULTIEQUAL (register, 0xa0, 8) , (register, 0xa0, 8) , (register, 0xa0, 8) , (register, 0xa0, 8), (register, 0xb0, 8) MULTIEQUAL (unique, 0x10002dd8, 8) , (unique, 0x10002dd8, 8) , (register, 0xb0, 8) , (register, 0xb0, 8)]
[(unique, 0x10002ae4, 8) COPY (register, 0xa0, 8)]
[(unique, 0x10002bec, 4) COPY (register, 0xa8, 4), (register, 0xa8, 4) INT_ADD (stack, 0xffffffffffffff08, 4) , (unique, 0x10000898, 4), (unique, 0x10000898, 4) SUBPIECE (stack, 0xffffffffffffff10, 8) , (const, 0x0, 4)]
[(unique, 0x10001f29, 8) MULTIEQUAL (unique, 0x10002d9c, 8) , (unique, 0x10002da4, 8)]
[(unique, 0x10001f31, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x10001f39, 16) MULTIEQUAL (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16)]
[(unique, 0x10001f49, 8) MULTIEQUAL (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8)]
[(unique, 0x10001f51, 10) MULTIEQUAL (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10)]
[(unique, 0x10001f5b, 8) MULTIEQUAL (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8)]
[(unique, 0x10001f63, 8) MULTIEQUAL (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8)]
[(unique, 0x10001f6b, 8) MULTIEQUAL (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8)]
[(unique, 0x10001f73, 8) MULTIEQUAL (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8)]
[(unique, 0x10001f7b, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(unique, 0x10001f83, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4)]
[(unique, 0x10001f87, 4) MULTIEQUAL (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4)]
[(unique, 0x10001f8b, 4) MULTIEQUAL (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4)]
[(unique, 0x10001f8f, 4) MULTIEQUAL (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4)]
[(unique, 0x10001f93, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(unique, 0x10001f9b, 4) MULTIEQUAL (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4)]
[(unique, 0x10001f9f, 4) MULTIEQUAL (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4)]
[(unique, 0x10001fa3, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(unique, 0x10001fab, 4) MULTIEQUAL (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4)]
[(unique, 0x10001faf, 4) MULTIEQUAL (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4)]
[(unique, 0x10001fb3, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(unique, 0x10001fbb, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(unique, 0x10001fc3, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(unique, 0x10001fcb, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(unique, 0x10001fd3, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(unique, 0x10001fdb, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(unique, 0x10001fe3, 16) MULTIEQUAL (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16)]
[(unique, 0x10001ff3, 16) MULTIEQUAL (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16)]
[(unique, 0x10002003, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(unique, 0x10002007, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(unique, 0x1000200b, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(unique, 0x10002013, 2) MULTIEQUAL (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2)]
[(unique, 0x10002015, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(unique, 0x10002019, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4)]
[(unique, 0x1000201d, 4) MULTIEQUAL (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4)]
[(unique, 0x10002021, 4) MULTIEQUAL (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4)]
[(unique, 0x10002025, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(unique, 0x1000202d, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(unique, 0x10002035, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(unique, 0x1000203d, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(unique, 0x10002045, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(unique, 0x1000204d, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(unique, 0x10002055, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(unique, 0x1000205d, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(unique, 0x10002065, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(unique, 0x1000206d, 4) MULTIEQUAL (register, 0x0, 4) , (unique, 0x10002dac, 4)]
[ ---  CBRANCH (ram, 0x46d893, 1) , (unique, 0x10001f28, 1), (unique, 0x10001f28, 1) INT_NOTEQUAL (unique, 0x10002083, 8) , (const, 0x0, 8), (unique, 0x10002083, 8) MULTIEQUAL (unique, 0x10002db0, 8) , (unique, 0x10002db8, 8)]
[(register, 0xb8, 8) CAST (unique, 0x10003687, 8), (unique, 0x10003687, 8) INT_ADD (unique, 0x1000367f, 8) , (const, 0x1, 8), (unique, 0x1000367f, 8) CAST (unique, 0x10001f29, 8)]
[(register, 0x30, 4) INT_ZEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x10003697, 8), (unique, 0x10003697, 8) CAST (unique, 0x10001f29, 8)]
[ ---  CBRANCH (ram, 0x46d870, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRSUB (register, 0xa0, 8) , (const, 0x30, 8), (unique, 0xbd80, 8) CAST (unique, 0x1000368f, 8), (unique, 0x1000368f, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRSUB (register, 0xa0, 8) , (const, 0x28, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3800, 8) , (unique, 0x1000369f, 8), (unique, 0x1000369f, 8) CAST (unique, 0x3100, 8), (unique, 0x3800, 8) PTRSUB (register, 0xa0, 8) , (const, 0x28, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[(ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x162f, 4), (ram, 0x4ae380, 16) INDIRECT (unique, 0x10001f39, 16) , (const, 0x162d, 4)]
[(ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x162f, 4), (ram, 0x4ae390, 8) INDIRECT (unique, 0x10001f49, 8) , (const, 0x162d, 4)]
[(ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x162f, 4), (ram, 0x4ae3a0, 10) INDIRECT (unique, 0x10001f51, 10) , (const, 0x162d, 4)]
[(ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x162f, 4), (ram, 0x4ae3b0, 8) INDIRECT (unique, 0x10001f5b, 8) , (const, 0x162d, 4)]
[(ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x162f, 4), (ram, 0x4ae3c0, 8) INDIRECT (unique, 0x10001f63, 8) , (const, 0x162d, 4)]
[(ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x162f, 4), (ram, 0x4ae3c8, 8) INDIRECT (unique, 0x10001f6b, 8) , (const, 0x162d, 4)]
[(ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x162f, 4), (ram, 0x4ae3d0, 8) INDIRECT (unique, 0x10001f73, 8) , (const, 0x162d, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0xbd80, 8) , (unique, 0xbb00, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100036a7, 8) , (const, 0x46d8b0, 8), (unique, 0x100036a7, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (unique, 0x10001f31, 8) , (const, 0x15e0, 4)]
[(ram, 0x4ae380, 16) INDIRECT (unique, 0x10001f39, 16) , (const, 0x15e0, 4)]
[(ram, 0x4ae390, 8) INDIRECT (unique, 0x10001f49, 8) , (const, 0x15e0, 4)]
[(ram, 0x4ae3a0, 10) INDIRECT (unique, 0x10001f51, 10) , (const, 0x15e0, 4)]
[(ram, 0x4ae3b0, 8) INDIRECT (unique, 0x10001f5b, 8) , (const, 0x15e0, 4)]
[(ram, 0x4ae3c0, 8) INDIRECT (unique, 0x10001f63, 8) , (const, 0x15e0, 4)]
[(ram, 0x4ae3c8, 8) INDIRECT (unique, 0x10001f6b, 8) , (const, 0x15e0, 4)]
[(ram, 0x4ae3d0, 8) INDIRECT (unique, 0x10001f73, 8) , (const, 0x15e0, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (unique, 0x10001f7b, 8) , (const, 0x15e0, 4)]
[(stack, 0xfffffffffffffeb8, 4) INDIRECT (unique, 0x10001f83, 4) , (const, 0x15e0, 4)]
[(stack, 0xfffffffffffffebc, 4) INDIRECT (unique, 0x10001f87, 4) , (const, 0x15e0, 4)]
[(stack, 0xfffffffffffffec0, 4) INDIRECT (unique, 0x10001f8b, 4) , (const, 0x15e0, 4)]
[(stack, 0xfffffffffffffec4, 4) INDIRECT (unique, 0x10001f8f, 4) , (const, 0x15e0, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (unique, 0x10001f93, 8) , (const, 0x15e0, 4)]
[(stack, 0xfffffffffffffed0, 4) INDIRECT (unique, 0x10001f9b, 4) , (const, 0x15e0, 4)]
[(stack, 0xfffffffffffffed4, 4) INDIRECT (unique, 0x10001f9f, 4) , (const, 0x15e0, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (unique, 0x10001fa3, 8) , (const, 0x15e0, 4)]
[(stack, 0xfffffffffffffee0, 4) INDIRECT (unique, 0x10001fab, 4) , (const, 0x15e0, 4)]
[(stack, 0xfffffffffffffee4, 4) INDIRECT (unique, 0x10001faf, 4) , (const, 0x15e0, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (unique, 0x10001fb3, 8) , (const, 0x15e0, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (unique, 0x10001fbb, 8) , (const, 0x15e0, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (unique, 0x10001fc3, 8) , (const, 0x15e0, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (unique, 0x10001fcb, 8) , (const, 0x15e0, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (unique, 0x10001fd3, 8) , (const, 0x15e0, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (unique, 0x10001fdb, 8) , (const, 0x15e0, 4)]
[(stack, 0xffffffffffffff18, 16) INDIRECT (unique, 0x10001fe3, 16) , (const, 0x15e0, 4)]
[(stack, 0xffffffffffffff28, 16) INDIRECT (unique, 0x10001ff3, 16) , (const, 0x15e0, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (unique, 0x10002003, 4) , (const, 0x15e0, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (unique, 0x10002007, 4) , (const, 0x15e0, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (unique, 0x1000200b, 8) , (const, 0x15e0, 4)]
[(stack, 0xffffffffffffff52, 2) INDIRECT (unique, 0x10002013, 2) , (const, 0x15e0, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (unique, 0x10002015, 4) , (const, 0x15e0, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (unique, 0x10002019, 4) , (const, 0x15e0, 4)]
[(stack, 0xffffffffffffff5c, 4) INDIRECT (unique, 0x1000201d, 4) , (const, 0x15e0, 4)]
[(stack, 0xffffffffffffff60, 4) INDIRECT (unique, 0x10002021, 4) , (const, 0x15e0, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (unique, 0x10002025, 8) , (const, 0x15e0, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (unique, 0x1000202d, 8) , (const, 0x15e0, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (unique, 0x10002035, 8) , (const, 0x15e0, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (unique, 0x1000203d, 8) , (const, 0x15e0, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (unique, 0x10002045, 8) , (const, 0x15e0, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (unique, 0x1000204d, 8) , (const, 0x15e0, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (unique, 0x10002055, 8) , (const, 0x15e0, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (unique, 0x1000205d, 8) , (const, 0x15e0, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (unique, 0x10002065, 8) , (const, 0x15e0, 4)]
[ ---  CBRANCH (ram, 0x46d87c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0xffffffff, 4), (register, 0x0, 4) CALL (ram, 0x41e9e0, 8) , (register, 0xa0, 8) , (register, 0x30, 4)]
[(unique, 0x100029ec, 8) COPY (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x46c898, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xfffffffffffffeb8, 4) , (const, 0x0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100036af, 8) , (const, 0x46d8d4, 8), (unique, 0x100036af, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1602, 4)]
[(ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x1602, 4)]
[(ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x1602, 4)]
[(ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x1602, 4)]
[(ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x1602, 4)]
[(ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x1602, 4)]
[(ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x1602, 4)]
[(ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x1602, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x1602, 4)]
[(stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x1602, 4)]
[(stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x1602, 4)]
[(stack, 0xfffffffffffffec0, 4) INDIRECT (stack, 0xfffffffffffffec0, 4) , (const, 0x1602, 4)]
[(stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x1602, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x1602, 4)]
[(stack, 0xfffffffffffffed0, 4) INDIRECT (stack, 0xfffffffffffffed0, 4) , (const, 0x1602, 4)]
[(stack, 0xfffffffffffffed4, 4) INDIRECT (stack, 0xfffffffffffffed4, 4) , (const, 0x1602, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x1602, 4)]
[(stack, 0xfffffffffffffee0, 4) INDIRECT (stack, 0xfffffffffffffee0, 4) , (const, 0x1602, 4)]
[(stack, 0xfffffffffffffee4, 4) INDIRECT (stack, 0xfffffffffffffee4, 4) , (const, 0x1602, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x1602, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x1602, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x1602, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x1602, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x1602, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x1602, 4)]
[(stack, 0xffffffffffffff18, 16) INDIRECT (stack, 0xffffffffffffff18, 16) , (const, 0x1602, 4)]
[(stack, 0xffffffffffffff28, 16) INDIRECT (stack, 0xffffffffffffff28, 16) , (const, 0x1602, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x1602, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x1602, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x1602, 4)]
[(stack, 0xffffffffffffff52, 2) INDIRECT (stack, 0xffffffffffffff52, 2) , (const, 0x1602, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x1602, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x1602, 4)]
[(stack, 0xffffffffffffff5c, 4) INDIRECT (stack, 0xffffffffffffff5c, 4) , (const, 0x1602, 4)]
[(stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0x1602, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x1602, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x1602, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x1602, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x1602, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x1602, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x1602, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x1602, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x1602, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1602, 4)]
[ ---  CALL (ram, 0x426b40, 8) , (stack, 0xfffffffffffffec8, 8)]
[ ---  BRANCH (ram, 0x46bf29, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (unique, 0x10002065, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (unique, 0x1000205d, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (unique, 0x10002055, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (unique, 0x1000204d, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (unique, 0x10002045, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (unique, 0x1000203d, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (unique, 0x10002035, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (unique, 0x1000202d, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (unique, 0x10002025, 8)]
[(stack, 0xffffffffffffff60, 4) MULTIEQUAL (stack, 0xffffffffffffff60, 4) , (unique, 0x10002021, 4)]
[(stack, 0xffffffffffffff5c, 4) MULTIEQUAL (stack, 0xffffffffffffff5c, 4) , (unique, 0x1000201d, 4)]
[(stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (unique, 0x10002019, 4)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (unique, 0x10002015, 4)]
[(stack, 0xffffffffffffff52, 2) MULTIEQUAL (stack, 0xffffffffffffff52, 2) , (unique, 0x10002013, 2)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (unique, 0x1000200b, 8)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (unique, 0x10002007, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (unique, 0x10002003, 4)]
[(stack, 0xffffffffffffff28, 16) MULTIEQUAL (stack, 0xffffffffffffff28, 16) , (unique, 0x10001ff3, 16)]
[(stack, 0xffffffffffffff18, 16) MULTIEQUAL (stack, 0xffffffffffffff18, 16) , (unique, 0x10001fe3, 16)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (unique, 0x10001fdb, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (unique, 0x10001fd3, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (unique, 0x10001fcb, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (unique, 0x10001fc3, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (unique, 0x10001fbb, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (unique, 0x10001fb3, 8)]
[(stack, 0xfffffffffffffee4, 4) MULTIEQUAL (stack, 0xfffffffffffffee4, 4) , (unique, 0x10001faf, 4)]
[(stack, 0xfffffffffffffee0, 4) MULTIEQUAL (stack, 0xfffffffffffffee0, 4) , (unique, 0x10001fab, 4)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (unique, 0x10001fa3, 8)]
[(stack, 0xfffffffffffffed4, 4) MULTIEQUAL (stack, 0xfffffffffffffed4, 4) , (unique, 0x10001f9f, 4)]
[(stack, 0xfffffffffffffed0, 4) MULTIEQUAL (stack, 0xfffffffffffffed0, 4) , (unique, 0x10001f9b, 4)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (unique, 0x10001f93, 8)]
[(stack, 0xfffffffffffffec4, 4) MULTIEQUAL (stack, 0xfffffffffffffec4, 4) , (unique, 0x10001f8f, 4)]
[(stack, 0xfffffffffffffec0, 4) MULTIEQUAL (stack, 0xfffffffffffffec0, 4) , (unique, 0x10001f8b, 4)]
[(stack, 0xfffffffffffffebc, 4) MULTIEQUAL (stack, 0xfffffffffffffebc, 4) , (unique, 0x10001f87, 4)]
[(stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (unique, 0x10001f83, 4)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (unique, 0x10001f7b, 8)]
[(ram, 0x4ae3d0, 8) MULTIEQUAL (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8)]
[(ram, 0x4ae3c8, 8) MULTIEQUAL (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8)]
[(ram, 0x4ae3c0, 8) MULTIEQUAL (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8)]
[(ram, 0x4ae3b0, 8) MULTIEQUAL (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8)]
[(ram, 0x4ae3a0, 10) MULTIEQUAL (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10)]
[(ram, 0x4ae390, 8) MULTIEQUAL (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8)]
[(ram, 0x4ae380, 16) MULTIEQUAL (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (unique, 0x10001f31, 8)]
[(register, 0x0, 4) INT_SUB (register, 0x0, 4) , (register, 0xb0, 4), (register, 0xb0, 4) SUBPIECE (register, 0xb0, 8) , (const, 0x0, 4), (register, 0x0, 4) INT_ADD (register, 0x88, 4) , (unique, 0x10000a74, 4), (unique, 0x10000a74, 4) SUBPIECE (register, 0xb8, 8) , (const, 0x0, 4)]
[(unique, 0x10002d9c, 8) COPY (register, 0xb8, 8)]
[(unique, 0x10002db0, 8) COPY (register, 0x10, 8), (register, 0x10, 8) CAST (unique, 0x100036d7, 8), (unique, 0x100036d7, 8) INT_ADD (register, 0x10, 8) , (unique, 0x100036cf, 8), (unique, 0x100036cf, 8) CAST (register, 0x18, 8), (register, 0x10, 8) CAST (unique, 0x100036c7, 8), (unique, 0x100036c7, 8) INT_SUB (unique, 0x100036b7, 8) , (unique, 0x100036bf, 8), (unique, 0x100036bf, 8) CAST (register, 0xb8, 8), (unique, 0x100036b7, 8) CAST (register, 0xb0, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (unique, 0x10002065, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (unique, 0x1000205d, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (unique, 0x10002055, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (unique, 0x1000204d, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (unique, 0x10002045, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (unique, 0x1000203d, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (unique, 0x10002035, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (unique, 0x1000202d, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (unique, 0x10002025, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 4) MULTIEQUAL (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4) , (unique, 0x10002021, 4) , (stack, 0xffffffffffffff60, 4)]
[(stack, 0xffffffffffffff5c, 4) MULTIEQUAL (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4) , (unique, 0x1000201d, 4) , (stack, 0xffffffffffffff5c, 4)]
[(stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4) , (unique, 0x10002019, 4) , (stack, 0xffffffffffffff58, 4)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (unique, 0x10002015, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff52, 2) MULTIEQUAL (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2) , (unique, 0x10002013, 2) , (stack, 0xffffffffffffff52, 2)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (unique, 0x1000200b, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (unique, 0x10002007, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (unique, 0x10002003, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff28, 16) MULTIEQUAL (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16) , (unique, 0x10001ff3, 16) , (stack, 0xffffffffffffff28, 16)]
[(stack, 0xffffffffffffff18, 16) MULTIEQUAL (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16) , (unique, 0x10001fe3, 16) , (stack, 0xffffffffffffff18, 16)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (unique, 0x10001fdb, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (unique, 0x10001fd3, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (unique, 0x10001fcb, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (unique, 0x10001fc3, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (unique, 0x10001fbb, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (unique, 0x10001fb3, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee4, 4) MULTIEQUAL (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4) , (unique, 0x10001faf, 4) , (stack, 0xfffffffffffffee4, 4)]
[(stack, 0xfffffffffffffee0, 4) MULTIEQUAL (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4) , (unique, 0x10001fab, 4) , (stack, 0xfffffffffffffee0, 4)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (unique, 0x10001fa3, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed4, 4) MULTIEQUAL (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4) , (unique, 0x10001f9f, 4) , (stack, 0xfffffffffffffed4, 4)]
[(stack, 0xfffffffffffffed0, 4) MULTIEQUAL (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4) , (unique, 0x10001f9b, 4) , (stack, 0xfffffffffffffed0, 4)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (unique, 0x10001f93, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffec4, 4) MULTIEQUAL (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4) , (unique, 0x10001f8f, 4) , (stack, 0xfffffffffffffec4, 4)]
[(stack, 0xfffffffffffffec0, 4) MULTIEQUAL (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4) , (unique, 0x10001f8b, 4) , (stack, 0xfffffffffffffec0, 4)]
[(stack, 0xfffffffffffffebc, 4) MULTIEQUAL (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4) , (unique, 0x10001f87, 4) , (stack, 0xfffffffffffffebc, 4)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (unique, 0x10001f7b, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(ram, 0x4ae3d0, 8) MULTIEQUAL (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8) , (unique, 0x10001f73, 8) , (ram, 0x4ae3d0, 8)]
[(ram, 0x4ae3c8, 8) MULTIEQUAL (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8) , (unique, 0x10001f6b, 8) , (ram, 0x4ae3c8, 8)]
[(ram, 0x4ae3c0, 8) MULTIEQUAL (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8) , (unique, 0x10001f63, 8) , (ram, 0x4ae3c0, 8)]
[(ram, 0x4ae3b0, 8) MULTIEQUAL (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8) , (unique, 0x10001f5b, 8) , (ram, 0x4ae3b0, 8)]
[(ram, 0x4ae3a0, 10) MULTIEQUAL (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10) , (unique, 0x10001f51, 10) , (ram, 0x4ae3a0, 10)]
[(ram, 0x4ae390, 8) MULTIEQUAL (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8) , (unique, 0x10001f49, 8) , (ram, 0x4ae390, 8)]
[(ram, 0x4ae380, 16) MULTIEQUAL (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16) , (unique, 0x10001f39, 16) , (ram, 0x4ae380, 16)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (unique, 0x10001f31, 8) , (register, 0x110, 8)]
[(register, 0xa8, 4) MULTIEQUAL (unique, 0x10002bec, 4) , (unique, 0x10002bf0, 4) , (register, 0x88, 4) , (unique, 0x1000206d, 4) , (register, 0x88, 4)]
[(register, 0xa0, 8) MULTIEQUAL (unique, 0x10002ae4, 8) , (unique, 0x10002aec, 8) , (register, 0xa0, 8) , (register, 0xa0, 8) , (register, 0xa0, 8)]
[(register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x46e121, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xfffffffffffffeb8, 4) , (const, 0x1, 4), (stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4) , (unique, 0x10001f83, 4) , (stack, 0xfffffffffffffeb8, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100036df, 8) , (const, 0x46e12d, 8), (unique, 0x100036df, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[ ---  CALL (ram, 0x426b40, 8) , (stack, 0xffffffffffffff18, 8), (stack, 0xffffffffffffff18, 8) SUBPIECE (stack, 0xffffffffffffff18, 16) , (const, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100036e7, 8) , (const, 0x46e139, 8), (unique, 0x100036e7, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1597, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1591, 4)]
[(ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x1597, 4), (ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x1591, 4)]
[(ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x1597, 4), (ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x1591, 4)]
[(ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x1597, 4), (ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x1591, 4)]
[(ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x1597, 4), (ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x1591, 4)]
[(ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x1597, 4), (ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x1591, 4)]
[(ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x1597, 4), (ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x1591, 4)]
[(ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x1597, 4), (ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x1591, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x1597, 4), (stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x1591, 4)]
[(stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x1597, 4), (stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x1591, 4)]
[(stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x1597, 4), (stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x1591, 4)]
[(stack, 0xfffffffffffffec0, 4) INDIRECT (stack, 0xfffffffffffffec0, 4) , (const, 0x1597, 4), (stack, 0xfffffffffffffec0, 4) INDIRECT (stack, 0xfffffffffffffec0, 4) , (const, 0x1591, 4)]
[(stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x1597, 4), (stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x1591, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x1597, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x1591, 4)]
[(stack, 0xfffffffffffffed0, 4) INDIRECT (stack, 0xfffffffffffffed0, 4) , (const, 0x1597, 4), (stack, 0xfffffffffffffed0, 4) INDIRECT (stack, 0xfffffffffffffed0, 4) , (const, 0x1591, 4)]
[(stack, 0xfffffffffffffed4, 4) INDIRECT (stack, 0xfffffffffffffed4, 4) , (const, 0x1597, 4), (stack, 0xfffffffffffffed4, 4) INDIRECT (stack, 0xfffffffffffffed4, 4) , (const, 0x1591, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x1597, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x1591, 4)]
[(stack, 0xfffffffffffffee0, 4) INDIRECT (stack, 0xfffffffffffffee0, 4) , (const, 0x1597, 4), (stack, 0xfffffffffffffee0, 4) INDIRECT (stack, 0xfffffffffffffee0, 4) , (const, 0x1591, 4)]
[(stack, 0xfffffffffffffee4, 4) INDIRECT (stack, 0xfffffffffffffee4, 4) , (const, 0x1597, 4), (stack, 0xfffffffffffffee4, 4) INDIRECT (stack, 0xfffffffffffffee4, 4) , (const, 0x1591, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x1597, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x1591, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x1597, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x1591, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x1597, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x1591, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x1597, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x1591, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x1597, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x1591, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x1597, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x1591, 4)]
[(stack, 0xffffffffffffff18, 16) INDIRECT (stack, 0xffffffffffffff18, 16) , (const, 0x1597, 4), (stack, 0xffffffffffffff18, 16) INDIRECT (stack, 0xffffffffffffff18, 16) , (const, 0x1591, 4)]
[(stack, 0xffffffffffffff28, 16) INDIRECT (stack, 0xffffffffffffff28, 16) , (const, 0x1597, 4), (stack, 0xffffffffffffff28, 16) INDIRECT (stack, 0xffffffffffffff28, 16) , (const, 0x1591, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x1597, 4), (stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x1591, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x1597, 4), (stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x1591, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x1597, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x1591, 4)]
[(stack, 0xffffffffffffff52, 2) INDIRECT (stack, 0xffffffffffffff52, 2) , (const, 0x1597, 4), (stack, 0xffffffffffffff52, 2) INDIRECT (stack, 0xffffffffffffff52, 2) , (const, 0x1591, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x1597, 4), (stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x1591, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x1597, 4), (stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x1591, 4)]
[(stack, 0xffffffffffffff5c, 4) INDIRECT (stack, 0xffffffffffffff5c, 4) , (const, 0x1597, 4), (stack, 0xffffffffffffff5c, 4) INDIRECT (stack, 0xffffffffffffff5c, 4) , (const, 0x1591, 4)]
[(stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0x1597, 4), (stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0x1591, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x1597, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x1591, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x1597, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x1591, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x1597, 4), (stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x1591, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x1597, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x1591, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x1597, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x1591, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x1597, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x1591, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x1597, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x1591, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x1597, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x1591, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1597, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1591, 4)]
[ ---  CALL (ram, 0x426b40, 8) , (stack, 0xfffffffffffffec8, 8), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x1591, 4)]
[ ---  BRANCH (ram, 0x46d0a0, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 4) MULTIEQUAL (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4)]
[(stack, 0xffffffffffffff5c, 4) MULTIEQUAL (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4)]
[(stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff52, 2) MULTIEQUAL (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff28, 16) MULTIEQUAL (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16)]
[(stack, 0xffffffffffffff18, 16) MULTIEQUAL (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee4, 4) MULTIEQUAL (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4)]
[(stack, 0xfffffffffffffee0, 4) MULTIEQUAL (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed4, 4) MULTIEQUAL (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4)]
[(stack, 0xfffffffffffffed0, 4) MULTIEQUAL (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffec4, 4) MULTIEQUAL (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4)]
[(stack, 0xfffffffffffffec0, 4) MULTIEQUAL (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4)]
[(stack, 0xfffffffffffffebc, 4) MULTIEQUAL (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4)]
[(stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(ram, 0x4ae3d0, 8) MULTIEQUAL (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8)]
[(ram, 0x4ae3c8, 8) MULTIEQUAL (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8)]
[(ram, 0x4ae3c0, 8) MULTIEQUAL (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8)]
[(ram, 0x4ae3b0, 8) MULTIEQUAL (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8)]
[(ram, 0x4ae3a0, 10) MULTIEQUAL (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10)]
[(ram, 0x4ae390, 8) MULTIEQUAL (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8)]
[(ram, 0x4ae380, 16) MULTIEQUAL (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x46bf29, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x58c00, 1) , (const, 0x0, 1), (unique, 0x58c00, 1) INT_AND (unique, 0xbb00, 1) , (const, 0x20, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x100036ef, 8), (unique, 0x100036ef, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (stack, 0xffffffffffffff40, 8) , (const, 0x3, 8) , (const, 0x4, 8), (stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(register, 0x18, 8) INT_SEXT (unique, 0x100036f7, 4), (unique, 0x100036f7, 4) CAST (stack, 0xffffffffffffff28, 4), (stack, 0xffffffffffffff28, 4) SUBPIECE (stack, 0xffffffffffffff28, 16) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x46bf29, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (unique, 0x100036fb, 4) , (const, 0x1, 4), (unique, 0x100036fb, 4) CAST (stack, 0xffffffffffffff28, 4), (stack, 0xffffffffffffff28, 4) SUBPIECE (stack, 0xffffffffffffff28, 16) , (const, 0x0, 8)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (stack, 0xffffffffffffff40, 8) , (const, 0x4, 8) , (const, 0x4, 8)]
[ ---  CBRANCH (ram, 0x46ded1, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffff3c, 4) , (const, 0x0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100036ff, 8) , (const, 0x46ded6, 8), (unique, 0x100036ff, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x158a, 4)]
[(ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x158a, 4)]
[(ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x158a, 4)]
[(ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x158a, 4)]
[(ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x158a, 4)]
[(ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x158a, 4)]
[(ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x158a, 4)]
[(ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x158a, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x158a, 4)]
[(stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x158a, 4)]
[(stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x158a, 4)]
[(stack, 0xfffffffffffffec0, 4) INDIRECT (stack, 0xfffffffffffffec0, 4) , (const, 0x158a, 4)]
[(stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x158a, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x158a, 4)]
[(stack, 0xfffffffffffffed0, 4) INDIRECT (stack, 0xfffffffffffffed0, 4) , (const, 0x158a, 4)]
[(stack, 0xfffffffffffffed4, 4) INDIRECT (stack, 0xfffffffffffffed4, 4) , (const, 0x158a, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x158a, 4)]
[(stack, 0xfffffffffffffee0, 4) INDIRECT (stack, 0xfffffffffffffee0, 4) , (const, 0x158a, 4)]
[(stack, 0xfffffffffffffee4, 4) INDIRECT (stack, 0xfffffffffffffee4, 4) , (const, 0x158a, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x158a, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x158a, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x158a, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x158a, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x158a, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x158a, 4)]
[(stack, 0xffffffffffffff18, 16) INDIRECT (stack, 0xffffffffffffff18, 16) , (const, 0x158a, 4)]
[(stack, 0xffffffffffffff28, 16) INDIRECT (stack, 0xffffffffffffff28, 16) , (const, 0x158a, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x158a, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x158a, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x158a, 4)]
[(stack, 0xffffffffffffff52, 2) INDIRECT (stack, 0xffffffffffffff52, 2) , (const, 0x158a, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x158a, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x158a, 4)]
[(stack, 0xffffffffffffff5c, 4) INDIRECT (stack, 0xffffffffffffff5c, 4) , (const, 0x158a, 4)]
[(stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0x158a, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x158a, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x158a, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x158a, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x158a, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x158a, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x158a, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x158a, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x158a, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x158a, 4)]
[(register, 0x0, 8) CALL (ram, 0x418b00, 8) , (register, 0xa0, 8) , (unique, 0xbc80, 4) , (register, 0x18, 8)]
[ ---  BRANCH (ram, 0x46d0de, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10003707, 8) , (const, 0x46d0de, 8), (unique, 0x10003707, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1558, 4)]
[(ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x1558, 4)]
[(ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x1558, 4)]
[(ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x1558, 4)]
[(ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x1558, 4)]
[(ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x1558, 4)]
[(ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x1558, 4)]
[(ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x1558, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x1558, 4)]
[(stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x1558, 4)]
[(stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x1558, 4)]
[(stack, 0xfffffffffffffec0, 4) INDIRECT (stack, 0xfffffffffffffec0, 4) , (const, 0x1558, 4)]
[(stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x1558, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x1558, 4)]
[(stack, 0xfffffffffffffed0, 4) INDIRECT (stack, 0xfffffffffffffed0, 4) , (const, 0x1558, 4)]
[(stack, 0xfffffffffffffed4, 4) INDIRECT (stack, 0xfffffffffffffed4, 4) , (const, 0x1558, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x1558, 4)]
[(stack, 0xfffffffffffffee0, 4) INDIRECT (stack, 0xfffffffffffffee0, 4) , (const, 0x1558, 4)]
[(stack, 0xfffffffffffffee4, 4) INDIRECT (stack, 0xfffffffffffffee4, 4) , (const, 0x1558, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x1558, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x1558, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x1558, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x1558, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x1558, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x1558, 4)]
[(stack, 0xffffffffffffff18, 16) INDIRECT (stack, 0xffffffffffffff18, 16) , (const, 0x1558, 4)]
[(stack, 0xffffffffffffff28, 16) INDIRECT (stack, 0xffffffffffffff28, 16) , (const, 0x1558, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x1558, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x1558, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x1558, 4)]
[(stack, 0xffffffffffffff52, 2) INDIRECT (stack, 0xffffffffffffff52, 2) , (const, 0x1558, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x1558, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x1558, 4)]
[(stack, 0xffffffffffffff5c, 4) INDIRECT (stack, 0xffffffffffffff5c, 4) , (const, 0x1558, 4)]
[(stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0x1558, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x1558, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x1558, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x1558, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x1558, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x1558, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x1558, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x1558, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x1558, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1558, 4)]
[(register, 0x0, 8) CALL (ram, 0x478510, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 4) MULTIEQUAL (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4)]
[(stack, 0xffffffffffffff5c, 4) MULTIEQUAL (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4)]
[(stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff52, 2) MULTIEQUAL (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff28, 16) MULTIEQUAL (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16)]
[(stack, 0xffffffffffffff18, 16) MULTIEQUAL (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee4, 4) MULTIEQUAL (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4)]
[(stack, 0xfffffffffffffee0, 4) MULTIEQUAL (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed4, 4) MULTIEQUAL (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4)]
[(stack, 0xfffffffffffffed0, 4) MULTIEQUAL (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffec4, 4) MULTIEQUAL (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4)]
[(stack, 0xfffffffffffffec0, 4) MULTIEQUAL (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4)]
[(stack, 0xfffffffffffffebc, 4) MULTIEQUAL (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4)]
[(stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(ram, 0x4ae3d0, 8) MULTIEQUAL (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8)]
[(ram, 0x4ae3c8, 8) MULTIEQUAL (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8)]
[(ram, 0x4ae3c0, 8) MULTIEQUAL (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8)]
[(ram, 0x4ae3b0, 8) MULTIEQUAL (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8)]
[(ram, 0x4ae3a0, 10) MULTIEQUAL (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10)]
[(ram, 0x4ae390, 8) MULTIEQUAL (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8)]
[(ram, 0x4ae380, 16) MULTIEQUAL (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x46c87c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (register, 0x18, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[(register, 0xa8, 4) INT_ADD (register, 0xa8, 4) , (stack, 0xffffffffffffff28, 4), (stack, 0xffffffffffffff28, 4) SUBPIECE (stack, 0xffffffffffffff28, 16) , (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x46bf29, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 4) MULTIEQUAL (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4)]
[(stack, 0xffffffffffffff5c, 4) MULTIEQUAL (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4)]
[(stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff52, 2) MULTIEQUAL (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff28, 16) MULTIEQUAL (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16)]
[(stack, 0xffffffffffffff18, 16) MULTIEQUAL (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee4, 4) MULTIEQUAL (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4)]
[(stack, 0xfffffffffffffee0, 4) MULTIEQUAL (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed4, 4) MULTIEQUAL (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4)]
[(stack, 0xfffffffffffffed0, 4) MULTIEQUAL (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffec4, 4) MULTIEQUAL (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4)]
[(stack, 0xfffffffffffffec0, 4) MULTIEQUAL (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4)]
[(stack, 0xfffffffffffffebc, 4) MULTIEQUAL (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(ram, 0x4ae3d0, 8) MULTIEQUAL (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8)]
[(ram, 0x4ae3c8, 8) MULTIEQUAL (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8)]
[(ram, 0x4ae3c0, 8) MULTIEQUAL (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8)]
[(ram, 0x4ae3b0, 8) MULTIEQUAL (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8)]
[(ram, 0x4ae3a0, 10) MULTIEQUAL (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10)]
[(ram, 0x4ae390, 8) MULTIEQUAL (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8)]
[(ram, 0x4ae380, 16) MULTIEQUAL (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x100029dc, 8) COPY (register, 0x20, 8), (register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x46c898, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xfffffffffffffeb8, 4) , (const, 0x0, 4), (stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000370f, 8) , (const, 0x46c894, 8), (unique, 0x1000370f, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8), (register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1587, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x1587, 4), (ram, 0x4ae380, 16) MULTIEQUAL (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16)]
[(ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x1587, 4), (ram, 0x4ae390, 8) MULTIEQUAL (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8)]
[(ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x1587, 4), (ram, 0x4ae3a0, 10) MULTIEQUAL (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10)]
[(ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x1587, 4), (ram, 0x4ae3b0, 8) MULTIEQUAL (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8)]
[(ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x1587, 4), (ram, 0x4ae3c0, 8) MULTIEQUAL (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8)]
[(ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x1587, 4), (ram, 0x4ae3c8, 8) MULTIEQUAL (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8)]
[(ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x1587, 4), (ram, 0x4ae3d0, 8) MULTIEQUAL (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x1587, 4), (stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x1587, 4), (stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4)]
[(stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x1587, 4), (stack, 0xfffffffffffffebc, 4) MULTIEQUAL (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4)]
[(stack, 0xfffffffffffffec0, 4) INDIRECT (stack, 0xfffffffffffffec0, 4) , (const, 0x1587, 4), (stack, 0xfffffffffffffec0, 4) MULTIEQUAL (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4)]
[(stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x1587, 4), (stack, 0xfffffffffffffec4, 4) MULTIEQUAL (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x1587, 4), (stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffed0, 4) INDIRECT (stack, 0xfffffffffffffed0, 4) , (const, 0x1587, 4), (stack, 0xfffffffffffffed0, 4) MULTIEQUAL (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4)]
[(stack, 0xfffffffffffffed4, 4) INDIRECT (stack, 0xfffffffffffffed4, 4) , (const, 0x1587, 4), (stack, 0xfffffffffffffed4, 4) MULTIEQUAL (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x1587, 4), (stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffee0, 4) INDIRECT (stack, 0xfffffffffffffee0, 4) , (const, 0x1587, 4), (stack, 0xfffffffffffffee0, 4) MULTIEQUAL (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4)]
[(stack, 0xfffffffffffffee4, 4) INDIRECT (stack, 0xfffffffffffffee4, 4) , (const, 0x1587, 4), (stack, 0xfffffffffffffee4, 4) MULTIEQUAL (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x1587, 4), (stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x1587, 4), (stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x1587, 4), (stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x1587, 4), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x1587, 4), (stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x1587, 4), (stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff18, 16) INDIRECT (stack, 0xffffffffffffff18, 16) , (const, 0x1587, 4), (stack, 0xffffffffffffff18, 16) MULTIEQUAL (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16)]
[(stack, 0xffffffffffffff28, 16) INDIRECT (stack, 0xffffffffffffff28, 16) , (const, 0x1587, 4), (stack, 0xffffffffffffff28, 16) MULTIEQUAL (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x1587, 4), (stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x1587, 4), (stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x1587, 4), (stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff52, 2) INDIRECT (stack, 0xffffffffffffff52, 2) , (const, 0x1587, 4), (stack, 0xffffffffffffff52, 2) MULTIEQUAL (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x1587, 4), (stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x1587, 4), (stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4)]
[(stack, 0xffffffffffffff5c, 4) INDIRECT (stack, 0xffffffffffffff5c, 4) , (const, 0x1587, 4), (stack, 0xffffffffffffff5c, 4) MULTIEQUAL (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4)]
[(stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0x1587, 4), (stack, 0xffffffffffffff60, 4) MULTIEQUAL (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x1587, 4), (stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x1587, 4), (stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x1587, 4), (stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x1587, 4), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x1587, 4), (stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x1587, 4), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x1587, 4), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x1587, 4), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1587, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CALL (ram, 0x426b40, 8) , (stack, 0xfffffffffffffec8, 8), (stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(unique, 0x100029e4, 8) COPY (register, 0x20, 8), (register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8)]
[(stack, 0xffffffffffffff5c, 4) MULTIEQUAL (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4)]
[(stack, 0xffffffffffffff28, 16) MULTIEQUAL (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16)]
[(stack, 0xffffffffffffff18, 16) MULTIEQUAL (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xfffffffffffffee0, 4) MULTIEQUAL (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed4, 4) MULTIEQUAL (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4)]
[(stack, 0xfffffffffffffed0, 4) MULTIEQUAL (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4)]
[(register, 0xa8, 4) COPY (const, 0xffffffff, 4)]
[(ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x1f58, 4)]
[(ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x1f58, 4)]
[(ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x1f58, 4)]
[(ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x1f58, 4)]
[(ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x1f58, 4)]
[(ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x1f58, 4)]
[(ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x1f58, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x4f00, 8) , (const, 0x22, 4), (unique, 0x4f00, 8) CAST (unique, 0x10003717, 8), (unique, 0x10003717, 8) INT_ADD (register, 0x110, 8) , (const, 0xffffffffffffffc0, 8)]
[ ---  BRANCH (ram, 0x46bf29, 1)]
[(stack, 0xffffffffffffff54, 4) COPY (register, 0xa8, 4), (register, 0xa8, 4) INT_AND (register, 0xa8, 4) , (const, 0x8, 4), (register, 0xa8, 4) CALLOTHER (const, 0x73, 4) , (register, 0xa8, 4) , (stack, 0xffffffffffffff28, 16)]
[(register, 0xb8, 8) CAST (unique, 0x1000371f, 8), (unique, 0x1000371f, 8) PTRSUB (const, 0x0, 8) , (const, 0x4ae318, 8)]
[(register, 0xb0, 8) PTRSUB (const, 0x0, 8) , (const, 0x4ae305, 8)]
[ ---  CBRANCH (ram, 0x46c75d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 2) , (const, 0x0, 2), (register, 0x0, 2) INT_AND (unique, 0xbc00, 2) , (const, 0x100, 2), (unique, 0xbc00, 2) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) CAST (unique, 0x10003733, 8), (unique, 0x10003733, 8) INT_ADD (unique, 0xbd80, 8) , (unique, 0x3300, 8), (unique, 0x3300, 8) INT_MULT (register, 0x10, 8) , (const, 0x2, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x1000372b, 8), (unique, 0x1000372b, 8) INT_ADD (register, 0x110, 8) , (const, 0xfffffffffffffff0, 8), (register, 0x10, 8) INT_SEXT (unique, 0x10003727, 4), (unique, 0x10003727, 4) CAST (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (stack, 0xffffffffffffff40, 8) , (const, 0x2, 8) , (const, 0x4, 8)]
[(register, 0xb8, 8) CAST (unique, 0x1000373b, 8), (unique, 0x1000373b, 8) PTRSUB (const, 0x0, 8) , (const, 0x4ae338, 8)]
[(register, 0xb0, 8) PTRSUB (const, 0x0, 8) , (const, 0x4ae30d, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 4) MULTIEQUAL (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4)]
[(stack, 0xffffffffffffff5c, 4) MULTIEQUAL (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4)]
[(stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4)]
[(stack, 0xffffffffffffff52, 2) MULTIEQUAL (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff28, 16) MULTIEQUAL (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16)]
[(stack, 0xffffffffffffff18, 16) MULTIEQUAL (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee4, 4) MULTIEQUAL (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4)]
[(stack, 0xfffffffffffffee0, 4) MULTIEQUAL (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed4, 4) MULTIEQUAL (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4)]
[(stack, 0xfffffffffffffed0, 4) MULTIEQUAL (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffec4, 4) MULTIEQUAL (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4)]
[(stack, 0xfffffffffffffec0, 4) MULTIEQUAL (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4)]
[(stack, 0xfffffffffffffebc, 4) MULTIEQUAL (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4)]
[(stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(ram, 0x4ae3d0, 8) MULTIEQUAL (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8)]
[(ram, 0x4ae3c8, 8) MULTIEQUAL (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8)]
[(ram, 0x4ae3c0, 8) MULTIEQUAL (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8)]
[(ram, 0x4ae3b0, 8) MULTIEQUAL (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8)]
[(ram, 0x4ae3a0, 10) MULTIEQUAL (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10)]
[(ram, 0x4ae390, 8) MULTIEQUAL (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8)]
[(ram, 0x4ae380, 16) MULTIEQUAL (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb8, 8) MULTIEQUAL (register, 0xb8, 8) , (register, 0xb8, 8) , (register, 0xb8, 8) , (register, 0xb8, 8)]
[(register, 0xb0, 8) MULTIEQUAL (register, 0xb0, 8) , (register, 0xb0, 8) , (register, 0xb0, 8) , (register, 0xb0, 8)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (stack, 0xffffffffffffff40, 8) , (const, 0x1, 8) , (const, 0x4, 8), (stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(register, 0x10, 1) INT_AND (unique, 0x10000e85, 1) , (const, 0x1, 1), (unique, 0x10000e85, 1) INT_XOR (unique, 0x10000e2c, 1) , (const, 0x1, 1), (unique, 0x10000e2c, 1) INT_RIGHT (unique, 0xbb00, 1) , (const, 0x5, 4)]
[ ---  CBRANCH (ram, 0x46bde8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffff54, 4) , (const, 0x0, 4), (stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[ ---  CBRANCH (ram, 0x46bf50, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x10000e31, 1) , (const, 0x0, 1), (unique, 0x10000e31, 1) INT_AND (unique, 0xbb00, 1) , (const, 0x50, 1)]
[(register, 0x8, 4) INT_SUB (unique, 0xbc80, 4) , (const, 0x4, 4)]
[(register, 0x8, 4) INT_SUB (unique, 0xbc80, 4) , (const, 0x3, 4)]
[(unique, 0x10002075, 1) INT_SLESS (const, 0x0, 4) , (unique, 0x10003747, 4), (unique, 0x10003747, 4) CAST (unique, 0x10002071, 4), (unique, 0x10002071, 4) MULTIEQUAL (register, 0x8, 4) , (register, 0x8, 4)]
[(unique, 0x10002d60, 4) COPY (stack, 0xffffffffffffff54, 4)]
[ ---  CBRANCH (ram, 0x46bdfc, 1) , (unique, 0x10002076, 1), (unique, 0x10002076, 1) INT_SLESS (const, 0x0, 4) , (unique, 0x10003743, 4), (unique, 0x10003743, 4) CAST (unique, 0x10002071, 4), (unique, 0x10002071, 4) MULTIEQUAL (register, 0x8, 4) , (register, 0x8, 4)]
[ ---  CBRANCH (ram, 0x46bd40, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x10, 1) , (const, 0x0, 1)]
[(unique, 0xd080, 1) INT_SLESS (const, 0x0, 4) , (unique, 0x1000374b, 4), (unique, 0x1000374b, 4) CAST (register, 0x8, 4), (register, 0x8, 4) INT_SUB (unique, 0xbc80, 4) , (const, 0x4, 4)]
[ ---  CBRANCH (ram, 0x46bb99, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (unique, 0x1000374f, 4) , (const, 0x1, 4), (unique, 0x1000374f, 4) CAST (register, 0x8, 4), (register, 0x8, 4) INT_SUB (unique, 0xbc80, 4) , (const, 0x4, 4)]
[ ---  CBRANCH (ram, 0x46bd40, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x10, 1) , (const, 0x0, 1)]
[(register, 0xa8, 4) COPY (const, 0x0, 4)]
[(unique, 0x10002ca4, 4) COPY (register, 0x8, 4)]
[(register, 0x18, 8) INT_SEXT (unique, 0x10003753, 4), (unique, 0x10003753, 4) CAST (register, 0x8, 4), (register, 0x8, 4) MULTIEQUAL (register, 0x8, 4) , (unique, 0x10002071, 4)]
[(stack, 0xffffffffffffff28, 16) INT_ADD (unique, 0x100020dc, 16) , (register, 0x8, 4), (unique, 0x100020dc, 16) INT_LEFT (unique, 0x100020cc, 16) , (const, 0x20, 16), (unique, 0x100020cc, 16) INT_SEXT (stack, 0xffffffffffffff2c, 12), (stack, 0xffffffffffffff2c, 12) SUBPIECE (stack, 0xffffffffffffff28, 16) , (const, 0x4, 8), (register, 0x8, 4) MULTIEQUAL (register, 0x8, 4) , (unique, 0x10002071, 4)]
[ ---  CBRANCH (ram, 0x46bf90, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffff3c, 4) , (const, 0x0, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x5f2, 4)]
[(ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x5f2, 4)]
[(ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x5f2, 4)]
[(ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x5f2, 4)]
[(ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x5f2, 4)]
[(ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x5f2, 4)]
[(ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x5f2, 4)]
[(ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x5f2, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x5f2, 4)]
[(stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x5f2, 4)]
[(stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x5f2, 4)]
[(stack, 0xfffffffffffffec0, 4) INDIRECT (stack, 0xfffffffffffffec0, 4) , (const, 0x5f2, 4)]
[(stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x5f2, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x5f2, 4)]
[(stack, 0xfffffffffffffed0, 4) INDIRECT (stack, 0xfffffffffffffed0, 4) , (const, 0x5f2, 4)]
[(stack, 0xfffffffffffffed4, 4) INDIRECT (stack, 0xfffffffffffffed4, 4) , (const, 0x5f2, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x5f2, 4)]
[(stack, 0xfffffffffffffee0, 4) INDIRECT (stack, 0xfffffffffffffee0, 4) , (const, 0x5f2, 4)]
[(stack, 0xfffffffffffffee4, 4) INDIRECT (stack, 0xfffffffffffffee4, 4) , (const, 0x5f2, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x5f2, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x5f2, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x5f2, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x5f2, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x5f2, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x5f2, 4)]
[(stack, 0xffffffffffffff18, 16) INDIRECT (stack, 0xffffffffffffff18, 16) , (const, 0x5f2, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x5f2, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x5f2, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x5f2, 4)]
[(stack, 0xffffffffffffff52, 2) INDIRECT (stack, 0xffffffffffffff52, 2) , (const, 0x5f2, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x5f2, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x5f2, 4)]
[(stack, 0xffffffffffffff5c, 4) INDIRECT (stack, 0xffffffffffffff5c, 4) , (const, 0x5f2, 4)]
[(stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0x5f2, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x5f2, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x5f2, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x5f2, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x5f2, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x5f2, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x5f2, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x5f2, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x5f2, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x5f2, 4)]
[(register, 0x0, 8) CALL (ram, 0x418b00, 8) , (register, 0x38, 8) , (const, 0x20, 4) , (register, 0x18, 8)]
[(unique, 0x10002c68, 4) COPY (stack, 0xffffffffffffff28, 4), (stack, 0xffffffffffffff28, 4) SUBPIECE (stack, 0xffffffffffffff28, 16) , (const, 0x0, 8), (stack, 0xffffffffffffff28, 16) INDIRECT (stack, 0xffffffffffffff28, 16) , (const, 0x5f2, 4)]
[ ---  BRANCH (ram, 0x46bd6d, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x4f4, 4)]
[(ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x4f4, 4)]
[(ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x4f4, 4)]
[(ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x4f4, 4)]
[(ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x4f4, 4)]
[(ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x4f4, 4)]
[(ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x4f4, 4)]
[(ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x4f4, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x4f4, 4)]
[(stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x4f4, 4)]
[(stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x4f4, 4)]
[(stack, 0xfffffffffffffec0, 4) INDIRECT (stack, 0xfffffffffffffec0, 4) , (const, 0x4f4, 4)]
[(stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x4f4, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x4f4, 4)]
[(stack, 0xfffffffffffffed0, 4) INDIRECT (stack, 0xfffffffffffffed0, 4) , (const, 0x4f4, 4)]
[(stack, 0xfffffffffffffed4, 4) INDIRECT (stack, 0xfffffffffffffed4, 4) , (const, 0x4f4, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x4f4, 4)]
[(stack, 0xfffffffffffffee0, 4) INDIRECT (stack, 0xfffffffffffffee0, 4) , (const, 0x4f4, 4)]
[(stack, 0xfffffffffffffee4, 4) INDIRECT (stack, 0xfffffffffffffee4, 4) , (const, 0x4f4, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x4f4, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x4f4, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x4f4, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x4f4, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x4f4, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x4f4, 4)]
[(stack, 0xffffffffffffff18, 16) INDIRECT (stack, 0xffffffffffffff18, 16) , (const, 0x4f4, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x4f4, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x4f4, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x4f4, 4)]
[(stack, 0xffffffffffffff52, 2) INDIRECT (stack, 0xffffffffffffff52, 2) , (const, 0x4f4, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x4f4, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x4f4, 4)]
[(stack, 0xffffffffffffff5c, 4) INDIRECT (stack, 0xffffffffffffff5c, 4) , (const, 0x4f4, 4)]
[(stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0x4f4, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x4f4, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x4f4, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x4f4, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x4f4, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x4f4, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x4f4, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x4f4, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x4f4, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x4f4, 4)]
[(register, 0x0, 8) CALL (ram, 0x478510, 8)]
[(unique, 0x10002c64, 4) COPY (stack, 0xffffffffffffff28, 4), (stack, 0xffffffffffffff28, 4) SUBPIECE (stack, 0xffffffffffffff28, 16) , (const, 0x0, 8), (stack, 0xffffffffffffff28, 16) INDIRECT (stack, 0xffffffffffffff28, 16) , (const, 0x4f4, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 4) MULTIEQUAL (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4)]
[(stack, 0xffffffffffffff5c, 4) MULTIEQUAL (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4)]
[(stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff52, 2) MULTIEQUAL (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff28, 16) MULTIEQUAL (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16)]
[(stack, 0xffffffffffffff18, 16) MULTIEQUAL (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee4, 4) MULTIEQUAL (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4)]
[(stack, 0xfffffffffffffee0, 4) MULTIEQUAL (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed4, 4) MULTIEQUAL (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4)]
[(stack, 0xfffffffffffffed0, 4) MULTIEQUAL (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffec4, 4) MULTIEQUAL (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4)]
[(stack, 0xfffffffffffffec0, 4) MULTIEQUAL (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4)]
[(stack, 0xfffffffffffffebc, 4) MULTIEQUAL (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4)]
[(stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(ram, 0x4ae3d0, 8) MULTIEQUAL (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8)]
[(ram, 0x4ae3c8, 8) MULTIEQUAL (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8)]
[(ram, 0x4ae3c0, 8) MULTIEQUAL (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8)]
[(ram, 0x4ae3b0, 8) MULTIEQUAL (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8)]
[(ram, 0x4ae3a0, 10) MULTIEQUAL (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10)]
[(ram, 0x4ae390, 8) MULTIEQUAL (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8)]
[(ram, 0x4ae380, 16) MULTIEQUAL (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16)]
[(unique, 0xbc80, 4) MULTIEQUAL (unique, 0x10002c64, 4) , (unique, 0x10002c68, 4)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x100029d4, 8) COPY (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x46c898, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (register, 0x18, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[(register, 0x80, 1) COPY (const, 0x1, 1)]
[(unique, 0x10002ca8, 4) COPY (unique, 0xbc80, 4)]
[ ---  CBRANCH (ram, 0x46bb9c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffff54, 4) , (const, 0x0, 4)]
[(unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x10003757, 8), (unique, 0x10003757, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (stack, 0xffffffffffffff40, 8) , (const, 0x3, 8) , (const, 0x4, 8)]
[(unique, 0x10002d5c, 4) COPY (unique, 0xbc80, 4)]
[(unique, 0x100013ff, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x10001407, 16) MULTIEQUAL (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16)]
[(unique, 0x10001417, 8) MULTIEQUAL (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8)]
[(unique, 0x1000141f, 10) MULTIEQUAL (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10)]
[(unique, 0x10001429, 8) MULTIEQUAL (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8)]
[(unique, 0x10001431, 8) MULTIEQUAL (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8)]
[(unique, 0x10001439, 8) MULTIEQUAL (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8)]
[(unique, 0x10001441, 8) MULTIEQUAL (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8)]
[(unique, 0x10001449, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(unique, 0x10001451, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4)]
[(unique, 0x10001455, 4) MULTIEQUAL (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4)]
[(unique, 0x10001459, 4) MULTIEQUAL (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4)]
[(unique, 0x1000145d, 4) MULTIEQUAL (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4)]
[(unique, 0x10001461, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(unique, 0x10001469, 4) MULTIEQUAL (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4)]
[(unique, 0x1000146d, 4) MULTIEQUAL (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4)]
[(unique, 0x10001471, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(unique, 0x10001479, 4) MULTIEQUAL (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4)]
[(unique, 0x1000147d, 4) MULTIEQUAL (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4)]
[(unique, 0x10001481, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(unique, 0x10001489, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(unique, 0x10001491, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(unique, 0x10001499, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(unique, 0x100014a1, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(unique, 0x100014a9, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(unique, 0x100014d1, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(unique, 0x100014d5, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(unique, 0x100014d9, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(unique, 0x100014e1, 2) MULTIEQUAL (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2)]
[(unique, 0x100014e3, 4) MULTIEQUAL (unique, 0x10002d5c, 4) , (unique, 0x10002d60, 4) , (unique, 0x10002d60, 4)]
[(unique, 0x100014e7, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(unique, 0x100014eb, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4)]
[(unique, 0x100014ef, 4) MULTIEQUAL (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4)]
[(unique, 0x100014f3, 4) MULTIEQUAL (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4)]
[(unique, 0x100014f7, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(unique, 0x100014ff, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(unique, 0x10001507, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(unique, 0x1000150f, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(unique, 0x10001517, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(unique, 0x1000151f, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(unique, 0x10001527, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(unique, 0x1000152f, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(unique, 0x10001537, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(unique, 0x1000153f, 4) MULTIEQUAL (unique, 0x10002ca8, 4) , (unique, 0x10002071, 4) , (unique, 0x10002071, 4)]
[(unique, 0x10001543, 1) MULTIEQUAL (register, 0x80, 1) , (unique, 0x10002075, 1) , (unique, 0x10002075, 1)]
[(stack, 0xffffffffffffff19, 15) SUBPIECE (unique, 0x100020ec, 16) , (const, 0x0, 4), (unique, 0x100020ec, 16) INT_RIGHT (unique, 0x100014b1, 16) , (const, 0x8, 4), (unique, 0x100014b1, 16) MULTIEQUAL (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16)]
[(stack, 0xffffffffffffff2c, 12) SUBPIECE (unique, 0x100020fc, 16) , (const, 0x0, 4), (unique, 0x100020fc, 16) INT_RIGHT (unique, 0x100014c1, 16) , (const, 0x20, 4), (unique, 0x100014c1, 16) MULTIEQUAL (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16)]
[ ---  CBRANCH (ram, 0x46bd9d, 1) , (unique, 0x100013fe, 1), (unique, 0x100013fe, 1) INT_EQUAL (unique, 0x10001545, 1) , (const, 0x0, 1), (unique, 0x10001545, 1) INT_AND (unique, 0x100013fd, 1) , (const, 0x40, 1), (unique, 0x100013fd, 1) MULTIEQUAL (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1)]
[ ---  CBRANCH (ram, 0x46c8a8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x100014d5, 4) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x46e36e, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRSUB (register, 0x38, 8) , (const, 0x30, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRSUB (register, 0x38, 8) , (const, 0x28, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3800, 8) , (unique, 0x3100, 8), (unique, 0x3800, 8) PTRSUB (register, 0x38, 8) , (const, 0x28, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[(ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x5e6, 4), (ram, 0x4ae380, 16) INDIRECT (unique, 0x10001407, 16) , (const, 0x5e4, 4)]
[(ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x5e6, 4), (ram, 0x4ae390, 8) INDIRECT (unique, 0x10001417, 8) , (const, 0x5e4, 4)]
[(ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x5e6, 4), (ram, 0x4ae3a0, 10) INDIRECT (unique, 0x1000141f, 10) , (const, 0x5e4, 4)]
[(ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x5e6, 4), (ram, 0x4ae3b0, 8) INDIRECT (unique, 0x10001429, 8) , (const, 0x5e4, 4)]
[(ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x5e6, 4), (ram, 0x4ae3c0, 8) INDIRECT (unique, 0x10001431, 8) , (const, 0x5e4, 4)]
[(ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x5e6, 4), (ram, 0x4ae3c8, 8) INDIRECT (unique, 0x10001439, 8) , (const, 0x5e4, 4)]
[(ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x5e6, 4), (ram, 0x4ae3d0, 8) INDIRECT (unique, 0x10001441, 8) , (const, 0x5e4, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0xbd80, 8) , (const, 0x2b, 1)]
[ ---  BRANCH (ram, 0x46be48, 1)]
[(stack, 0xffffffffffffff18, 16) INT_ADD (unique, 0x1000271c, 16) , (unique, 0x10001543, 1), (unique, 0x1000271c, 16) INT_LEFT (unique, 0x1000270c, 16) , (const, 0x8, 16), (unique, 0x1000270c, 16) INT_SEXT (stack, 0xffffffffffffff19, 15)]
[(register, 0x30, 4) COPY (const, 0x2b, 4)]
[(stack, 0xffffffffffffff28, 16) INT_ADD (unique, 0x1000273c, 16) , (unique, 0x1000153f, 4), (unique, 0x1000273c, 16) INT_LEFT (unique, 0x1000272c, 16) , (const, 0x20, 16), (unique, 0x1000272c, 16) INT_SEXT (stack, 0xffffffffffffff2c, 12)]
[ ---  BRANCH (ram, 0x46e150, 1)]
[ ---  CBRANCH (ram, 0x46e18c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3c80, 8), (unique, 0x3c80, 8) PTRSUB (register, 0x38, 8) , (const, 0xa0, 8)]
[ ---  CBRANCH (ram, 0x46e18c, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESSEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10003777, 8), (unique, 0x10003777, 8) INT_ADD (unique, 0x1000376f, 8) , (const, 0x28, 8), (unique, 0x1000376f, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10003767, 8), (unique, 0x10003767, 8) INT_ADD (unique, 0x1000375f, 8) , (const, 0x20, 8), (unique, 0x1000375f, 8) CAST (unique, 0xbd80, 8)]
[(stack, 0xffffffffffffff18, 16) INT_ADD (unique, 0x1000269c, 16) , (unique, 0x10001543, 1), (unique, 0x1000269c, 16) INT_LEFT (unique, 0x1000268c, 16) , (const, 0x8, 16), (unique, 0x1000268c, 16) INT_SEXT (stack, 0xffffffffffffff19, 15)]
[(stack, 0xffffffffffffff28, 16) INT_ADD (unique, 0x100026bc, 16) , (unique, 0x1000153f, 4), (unique, 0x100026bc, 16) INT_LEFT (unique, 0x100026ac, 16) , (const, 0x20, 16), (unique, 0x100026ac, 16) INT_SEXT (stack, 0xffffffffffffff2c, 12)]
[ ---  BRANCH (ram, 0x46ddfc, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10003787, 8), (unique, 0x10003787, 8) INT_ADD (unique, 0x1000377f, 8) , (const, 0x20, 8), (unique, 0x1000377f, 8) CAST (unique, 0xbd80, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x1, 8) , (const, 0x4, 8)]
[(ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x5c5, 4), (ram, 0x4ae380, 16) INDIRECT (unique, 0x10001407, 16) , (const, 0x5c3, 4)]
[(ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x5c5, 4), (ram, 0x4ae390, 8) INDIRECT (unique, 0x10001417, 8) , (const, 0x5c3, 4)]
[(ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x5c5, 4), (ram, 0x4ae3a0, 10) INDIRECT (unique, 0x1000141f, 10) , (const, 0x5c3, 4)]
[(ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x5c5, 4), (ram, 0x4ae3b0, 8) INDIRECT (unique, 0x10001429, 8) , (const, 0x5c3, 4)]
[(ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x5c5, 4), (ram, 0x4ae3c0, 8) INDIRECT (unique, 0x10001431, 8) , (const, 0x5c3, 4)]
[(ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x5c5, 4), (ram, 0x4ae3c8, 8) INDIRECT (unique, 0x10001439, 8) , (const, 0x5c3, 4)]
[(ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x5c5, 4), (ram, 0x4ae3d0, 8) INDIRECT (unique, 0x10001441, 8) , (const, 0x5c3, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0xbd80, 8) , (const, 0x2b, 4)]
[ ---  CBRANCH (ram, 0x46be4c, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x10000e8b, 1) , (const, 0x0, 1), (unique, 0x10000e8b, 1) INT_AND (unique, 0x100013fd, 1) , (const, 0x10, 1)]
[ ---  CBRANCH (ram, 0x46c9ca, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x100014d5, 4) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x46e562, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESSEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRSUB (register, 0x38, 8) , (const, 0x30, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRSUB (register, 0x38, 8) , (const, 0x28, 8)]
[(stack, 0xffffffffffffff18, 16) INT_ADD (unique, 0x1000280c, 16) , (unique, 0x10001543, 1), (unique, 0x1000280c, 16) INT_LEFT (unique, 0x100027fc, 16) , (const, 0x8, 16), (unique, 0x100027fc, 16) INT_SEXT (stack, 0xffffffffffffff19, 15)]
[(register, 0x30, 4) COPY (const, 0x20, 4)]
[(stack, 0xffffffffffffff28, 16) INT_ADD (unique, 0x1000282c, 16) , (unique, 0x1000153f, 4), (unique, 0x1000282c, 16) INT_LEFT (unique, 0x1000281c, 16) , (const, 0x20, 16), (unique, 0x1000281c, 16) INT_SEXT (stack, 0xffffffffffffff2c, 12)]
[ ---  BRANCH (ram, 0x46e150, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3800, 8) , (unique, 0x3100, 8), (unique, 0x3800, 8) PTRSUB (register, 0x38, 8) , (const, 0x28, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[(ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x588, 4), (ram, 0x4ae380, 16) INDIRECT (unique, 0x10001407, 16) , (const, 0x586, 4)]
[(ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x588, 4), (ram, 0x4ae390, 8) INDIRECT (unique, 0x10001417, 8) , (const, 0x586, 4)]
[(ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x588, 4), (ram, 0x4ae3a0, 10) INDIRECT (unique, 0x1000141f, 10) , (const, 0x586, 4)]
[(ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x588, 4), (ram, 0x4ae3b0, 8) INDIRECT (unique, 0x10001429, 8) , (const, 0x586, 4)]
[(ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x588, 4), (ram, 0x4ae3c0, 8) INDIRECT (unique, 0x10001431, 8) , (const, 0x586, 4)]
[(ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x588, 4), (ram, 0x4ae3c8, 8) INDIRECT (unique, 0x10001439, 8) , (const, 0x586, 4)]
[(ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x588, 4), (ram, 0x4ae3d0, 8) INDIRECT (unique, 0x10001441, 8) , (const, 0x586, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0xbd80, 8) , (const, 0x20, 1)]
[ ---  BRANCH (ram, 0x46be48, 1)]
[ ---  CBRANCH (ram, 0x46e385, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3c80, 8), (unique, 0x3c80, 8) PTRSUB (register, 0x38, 8) , (const, 0xa0, 8)]
[ ---  CBRANCH (ram, 0x46e385, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESSEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100037a7, 8), (unique, 0x100037a7, 8) INT_ADD (unique, 0x1000379f, 8) , (const, 0x28, 8), (unique, 0x1000379f, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10003797, 8), (unique, 0x10003797, 8) INT_ADD (unique, 0x1000378f, 8) , (const, 0x20, 8), (unique, 0x1000378f, 8) CAST (unique, 0xbd80, 8)]
[(stack, 0xffffffffffffff18, 16) INT_ADD (unique, 0x1000275c, 16) , (unique, 0x10001543, 1), (unique, 0x1000275c, 16) INT_LEFT (unique, 0x1000274c, 16) , (const, 0x8, 16), (unique, 0x1000274c, 16) INT_SEXT (stack, 0xffffffffffffff19, 15)]
[(stack, 0xffffffffffffff28, 16) INT_ADD (unique, 0x1000277c, 16) , (unique, 0x1000153f, 4), (unique, 0x1000277c, 16) INT_LEFT (unique, 0x1000276c, 16) , (const, 0x20, 16), (unique, 0x1000276c, 16) INT_SEXT (stack, 0xffffffffffffff2c, 12)]
[ ---  BRANCH (ram, 0x46ddfc, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100037b7, 8), (unique, 0x100037b7, 8) INT_ADD (unique, 0x100037af, 8) , (const, 0x20, 8), (unique, 0x100037af, 8) CAST (unique, 0xbd80, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x1, 8) , (const, 0x4, 8)]
[(ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x566, 4), (ram, 0x4ae380, 16) INDIRECT (unique, 0x10001407, 16) , (const, 0x564, 4)]
[(ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x566, 4), (ram, 0x4ae390, 8) INDIRECT (unique, 0x10001417, 8) , (const, 0x564, 4)]
[(ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x566, 4), (ram, 0x4ae3a0, 10) INDIRECT (unique, 0x1000141f, 10) , (const, 0x564, 4)]
[(ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x566, 4), (ram, 0x4ae3b0, 8) INDIRECT (unique, 0x10001429, 8) , (const, 0x564, 4)]
[(ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x566, 4), (ram, 0x4ae3c0, 8) INDIRECT (unique, 0x10001431, 8) , (const, 0x564, 4)]
[(ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x566, 4), (ram, 0x4ae3c8, 8) INDIRECT (unique, 0x10001439, 8) , (const, 0x564, 4)]
[(ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x566, 4), (ram, 0x4ae3d0, 8) INDIRECT (unique, 0x10001441, 8) , (const, 0x564, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0xbd80, 8) , (const, 0x20, 4)]
[ ---  BRANCH (ram, 0x46be48, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 4) MULTIEQUAL (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4)]
[(stack, 0xffffffffffffff5c, 4) MULTIEQUAL (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4)]
[(stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff52, 2) MULTIEQUAL (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee4, 4) MULTIEQUAL (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4)]
[(stack, 0xfffffffffffffee0, 4) MULTIEQUAL (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed4, 4) MULTIEQUAL (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4)]
[(stack, 0xfffffffffffffed0, 4) MULTIEQUAL (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffec4, 4) MULTIEQUAL (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4)]
[(stack, 0xfffffffffffffec0, 4) MULTIEQUAL (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4)]
[(stack, 0xfffffffffffffebc, 4) MULTIEQUAL (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4)]
[(stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(ram, 0x4ae3d0, 8) MULTIEQUAL (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8)]
[(ram, 0x4ae3c8, 8) MULTIEQUAL (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8)]
[(ram, 0x4ae3c0, 8) MULTIEQUAL (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8)]
[(ram, 0x4ae3b0, 8) MULTIEQUAL (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8)]
[(ram, 0x4ae3a0, 10) MULTIEQUAL (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10)]
[(ram, 0x4ae390, 8) MULTIEQUAL (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8)]
[(ram, 0x4ae380, 16) MULTIEQUAL (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xa8, 4) MULTIEQUAL (register, 0xa8, 4) , (unique, 0xbc80, 4)]
[(register, 0x80, 1) MULTIEQUAL (unique, 0xd080, 1) , (register, 0x80, 1)]
[(register, 0x8, 4) MULTIEQUAL (unique, 0x10002ca4, 4) , (unique, 0x10002ca8, 4)]
[(stack, 0xffffffffffffff19, 15) SUBPIECE (stack, 0xffffffffffffff18, 16) , (const, 0x1, 8), (stack, 0xffffffffffffff18, 16) MULTIEQUAL (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16)]
[(stack, 0xffffffffffffff2c, 12) SUBPIECE (stack, 0xffffffffffffff28, 16) , (const, 0x4, 8), (stack, 0xffffffffffffff28, 16) MULTIEQUAL (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16)]
[ ---  CBRANCH (ram, 0x46bf68, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffff3c, 4) , (const, 0x0, 4), (stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[ ---  CBRANCH (ram, 0x46e13e, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESSEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRSUB (register, 0x38, 8) , (const, 0x30, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRSUB (register, 0x38, 8) , (const, 0x28, 8)]
[(stack, 0xffffffffffffff18, 16) INT_ADD (unique, 0x1000265c, 16) , (register, 0x80, 1), (unique, 0x1000265c, 16) INT_LEFT (unique, 0x1000264c, 16) , (const, 0x8, 16), (unique, 0x1000264c, 16) INT_SEXT (stack, 0xffffffffffffff19, 15)]
[(register, 0x30, 4) COPY (const, 0x2d, 4)]
[(stack, 0xffffffffffffff28, 16) INT_ADD (unique, 0x1000267c, 16) , (register, 0x8, 4), (unique, 0x1000267c, 16) INT_LEFT (unique, 0x1000266c, 16) , (const, 0x20, 16), (unique, 0x1000266c, 16) INT_SEXT (stack, 0xffffffffffffff2c, 12)]
[(register, 0xa8, 4) MULTIEQUAL (register, 0xa8, 4) , (unique, 0x100014e3, 4) , (unique, 0x100014e3, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x4c9, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (unique, 0x100013ff, 8) , (unique, 0x100013ff, 8)]
[(ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x4c9, 4), (ram, 0x4ae380, 16) MULTIEQUAL (ram, 0x4ae380, 16) , (unique, 0x10001407, 16) , (unique, 0x10001407, 16)]
[(ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x4c9, 4), (ram, 0x4ae390, 8) MULTIEQUAL (ram, 0x4ae390, 8) , (unique, 0x10001417, 8) , (unique, 0x10001417, 8)]
[(ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x4c9, 4), (ram, 0x4ae3a0, 10) MULTIEQUAL (ram, 0x4ae3a0, 10) , (unique, 0x1000141f, 10) , (unique, 0x1000141f, 10)]
[(ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x4c9, 4), (ram, 0x4ae3b0, 8) MULTIEQUAL (ram, 0x4ae3b0, 8) , (unique, 0x10001429, 8) , (unique, 0x10001429, 8)]
[(ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x4c9, 4), (ram, 0x4ae3c0, 8) MULTIEQUAL (ram, 0x4ae3c0, 8) , (unique, 0x10001431, 8) , (unique, 0x10001431, 8)]
[(ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x4c9, 4), (ram, 0x4ae3c8, 8) MULTIEQUAL (ram, 0x4ae3c8, 8) , (unique, 0x10001439, 8) , (unique, 0x10001439, 8)]
[(ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x4c9, 4), (ram, 0x4ae3d0, 8) MULTIEQUAL (ram, 0x4ae3d0, 8) , (unique, 0x10001441, 8) , (unique, 0x10001441, 8)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x4c9, 4), (stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (unique, 0x10001449, 8) , (unique, 0x10001449, 8)]
[(stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x4c9, 4), (stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (unique, 0x10001451, 4) , (unique, 0x10001451, 4)]
[(stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x4c9, 4), (stack, 0xfffffffffffffebc, 4) MULTIEQUAL (stack, 0xfffffffffffffebc, 4) , (unique, 0x10001455, 4) , (unique, 0x10001455, 4)]
[(stack, 0xfffffffffffffec0, 4) INDIRECT (stack, 0xfffffffffffffec0, 4) , (const, 0x4c9, 4), (stack, 0xfffffffffffffec0, 4) MULTIEQUAL (stack, 0xfffffffffffffec0, 4) , (unique, 0x10001459, 4) , (unique, 0x10001459, 4)]
[(stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x4c9, 4), (stack, 0xfffffffffffffec4, 4) MULTIEQUAL (stack, 0xfffffffffffffec4, 4) , (unique, 0x1000145d, 4) , (unique, 0x1000145d, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x4c9, 4), (stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (unique, 0x10001461, 8) , (unique, 0x10001461, 8)]
[(stack, 0xfffffffffffffed0, 4) INDIRECT (stack, 0xfffffffffffffed0, 4) , (const, 0x4c9, 4), (stack, 0xfffffffffffffed0, 4) MULTIEQUAL (stack, 0xfffffffffffffed0, 4) , (unique, 0x10001469, 4) , (unique, 0x10001469, 4)]
[(stack, 0xfffffffffffffed4, 4) INDIRECT (stack, 0xfffffffffffffed4, 4) , (const, 0x4c9, 4), (stack, 0xfffffffffffffed4, 4) MULTIEQUAL (stack, 0xfffffffffffffed4, 4) , (unique, 0x1000146d, 4) , (unique, 0x1000146d, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x4c9, 4), (stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (unique, 0x10001471, 8) , (unique, 0x10001471, 8)]
[(stack, 0xfffffffffffffee0, 4) INDIRECT (stack, 0xfffffffffffffee0, 4) , (const, 0x4c9, 4), (stack, 0xfffffffffffffee0, 4) MULTIEQUAL (stack, 0xfffffffffffffee0, 4) , (unique, 0x10001479, 4) , (unique, 0x10001479, 4)]
[(stack, 0xfffffffffffffee4, 4) INDIRECT (stack, 0xfffffffffffffee4, 4) , (const, 0x4c9, 4), (stack, 0xfffffffffffffee4, 4) MULTIEQUAL (stack, 0xfffffffffffffee4, 4) , (unique, 0x1000147d, 4) , (unique, 0x1000147d, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x4c9, 4), (stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (unique, 0x10001481, 8) , (unique, 0x10001481, 8)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x4c9, 4), (stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (unique, 0x10001489, 8) , (unique, 0x10001489, 8)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x4c9, 4), (stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (unique, 0x10001491, 8) , (unique, 0x10001491, 8)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x4c9, 4), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (unique, 0x10001499, 8) , (unique, 0x10001499, 8)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x4c9, 4), (stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (unique, 0x100014a1, 8) , (unique, 0x100014a1, 8)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x4c9, 4), (stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (unique, 0x100014a9, 8) , (unique, 0x100014a9, 8)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x4c9, 4), (stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (unique, 0x100014d1, 4) , (unique, 0x100014d1, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x4c9, 4), (stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (unique, 0x100014d5, 4) , (unique, 0x100014d5, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x4c9, 4), (stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (unique, 0x100014d9, 8) , (unique, 0x100014d9, 8)]
[(stack, 0xffffffffffffff52, 2) INDIRECT (stack, 0xffffffffffffff52, 2) , (const, 0x4c9, 4), (stack, 0xffffffffffffff52, 2) MULTIEQUAL (stack, 0xffffffffffffff52, 2) , (unique, 0x100014e1, 2) , (unique, 0x100014e1, 2)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x4c9, 4), (stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (unique, 0x100014e7, 4) , (unique, 0x100014e7, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x4c9, 4), (stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (unique, 0x100014eb, 4) , (unique, 0x100014eb, 4)]
[(stack, 0xffffffffffffff5c, 4) INDIRECT (stack, 0xffffffffffffff5c, 4) , (const, 0x4c9, 4), (stack, 0xffffffffffffff5c, 4) MULTIEQUAL (stack, 0xffffffffffffff5c, 4) , (unique, 0x100014ef, 4) , (unique, 0x100014ef, 4)]
[(stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0x4c9, 4), (stack, 0xffffffffffffff60, 4) MULTIEQUAL (stack, 0xffffffffffffff60, 4) , (unique, 0x100014f3, 4) , (unique, 0x100014f3, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x4c9, 4), (stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (unique, 0x100014f7, 8) , (unique, 0x100014f7, 8)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x4c9, 4), (stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (unique, 0x100014ff, 8) , (unique, 0x100014ff, 8)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x4c9, 4), (stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (unique, 0x10001507, 8) , (unique, 0x10001507, 8)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x4c9, 4), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (unique, 0x1000150f, 8) , (unique, 0x1000150f, 8)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x4c9, 4), (stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (unique, 0x10001517, 8) , (unique, 0x10001517, 8)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x4c9, 4), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (unique, 0x1000151f, 8) , (unique, 0x1000151f, 8)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x4c9, 4), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (unique, 0x10001527, 8) , (unique, 0x10001527, 8)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x4c9, 4), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (unique, 0x1000152f, 8) , (unique, 0x1000152f, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x4c9, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (unique, 0x10001537, 8) , (unique, 0x10001537, 8)]
[(register, 0x0, 4) CALL (ram, 0x41e9e0, 8) , (register, 0x38, 8) , (register, 0x30, 4), (register, 0x30, 4) MULTIEQUAL (register, 0x30, 4) , (register, 0x30, 4) , (register, 0x30, 4)]
[(stack, 0xffffffffffffff28, 4) SUBPIECE (stack, 0xffffffffffffff28, 16) , (const, 0x0, 8), (stack, 0xffffffffffffff28, 16) INDIRECT (stack, 0xffffffffffffff28, 16) , (const, 0x4c9, 4), (stack, 0xffffffffffffff28, 16) MULTIEQUAL (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16)]
[(stack, 0xffffffffffffff18, 1) SUBPIECE (stack, 0xffffffffffffff18, 16) , (const, 0x0, 8), (stack, 0xffffffffffffff18, 16) INDIRECT (stack, 0xffffffffffffff18, 16) , (const, 0x4c9, 4), (stack, 0xffffffffffffff18, 16) MULTIEQUAL (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16)]
[ ---  BRANCH (ram, 0x46de18, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3800, 8) , (unique, 0x3100, 8), (unique, 0x3800, 8) PTRSUB (register, 0x38, 8) , (const, 0x28, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[(ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x4bd, 4), (ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x4bb, 4)]
[(ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x4bd, 4), (ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x4bb, 4)]
[(ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x4bd, 4), (ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x4bb, 4)]
[(ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x4bd, 4), (ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x4bb, 4)]
[(ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x4bd, 4), (ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x4bb, 4)]
[(ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x4bd, 4), (ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x4bb, 4)]
[(ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x4bd, 4), (ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x4bb, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0xbd80, 8) , (const, 0x2d, 1)]
[ ---  BRANCH (ram, 0x46be48, 1)]
[ ---  CBRANCH (ram, 0x46ddea, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3c80, 8), (unique, 0x3c80, 8) PTRSUB (register, 0x38, 8) , (const, 0xa0, 8)]
[ ---  CBRANCH (ram, 0x46ddea, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESSEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100037d7, 8), (unique, 0x100037d7, 8) INT_ADD (unique, 0x100037cf, 8) , (const, 0x28, 8), (unique, 0x100037cf, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100037c7, 8), (unique, 0x100037c7, 8) INT_ADD (unique, 0x100037bf, 8) , (const, 0x20, 8), (unique, 0x100037bf, 8) CAST (unique, 0xbd80, 8)]
[(stack, 0xffffffffffffff18, 16) INT_ADD (unique, 0x100025fc, 16) , (register, 0x80, 1), (unique, 0x100025fc, 16) INT_LEFT (unique, 0x100025ec, 16) , (const, 0x8, 16), (unique, 0x100025ec, 16) INT_SEXT (stack, 0xffffffffffffff19, 15)]
[(stack, 0xffffffffffffff28, 16) INT_ADD (unique, 0x1000261c, 16) , (register, 0x8, 4), (unique, 0x1000261c, 16) INT_LEFT (unique, 0x1000260c, 16) , (const, 0x20, 16), (unique, 0x1000260c, 16) INT_SEXT (stack, 0xffffffffffffff2c, 12)]
[(register, 0xa8, 4) MULTIEQUAL (register, 0xa8, 4) , (unique, 0x100014e3, 4) , (unique, 0x100014e3, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x487, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (unique, 0x100013ff, 8) , (unique, 0x100013ff, 8)]
[(ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x487, 4), (ram, 0x4ae380, 16) MULTIEQUAL (ram, 0x4ae380, 16) , (unique, 0x10001407, 16) , (unique, 0x10001407, 16)]
[(ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x487, 4), (ram, 0x4ae390, 8) MULTIEQUAL (ram, 0x4ae390, 8) , (unique, 0x10001417, 8) , (unique, 0x10001417, 8)]
[(ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x487, 4), (ram, 0x4ae3a0, 10) MULTIEQUAL (ram, 0x4ae3a0, 10) , (unique, 0x1000141f, 10) , (unique, 0x1000141f, 10)]
[(ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x487, 4), (ram, 0x4ae3b0, 8) MULTIEQUAL (ram, 0x4ae3b0, 8) , (unique, 0x10001429, 8) , (unique, 0x10001429, 8)]
[(ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x487, 4), (ram, 0x4ae3c0, 8) MULTIEQUAL (ram, 0x4ae3c0, 8) , (unique, 0x10001431, 8) , (unique, 0x10001431, 8)]
[(ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x487, 4), (ram, 0x4ae3c8, 8) MULTIEQUAL (ram, 0x4ae3c8, 8) , (unique, 0x10001439, 8) , (unique, 0x10001439, 8)]
[(ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x487, 4), (ram, 0x4ae3d0, 8) MULTIEQUAL (ram, 0x4ae3d0, 8) , (unique, 0x10001441, 8) , (unique, 0x10001441, 8)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x487, 4), (stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (unique, 0x10001449, 8) , (unique, 0x10001449, 8)]
[(stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x487, 4), (stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (unique, 0x10001451, 4) , (unique, 0x10001451, 4)]
[(stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x487, 4), (stack, 0xfffffffffffffebc, 4) MULTIEQUAL (stack, 0xfffffffffffffebc, 4) , (unique, 0x10001455, 4) , (unique, 0x10001455, 4)]
[(stack, 0xfffffffffffffec0, 4) INDIRECT (stack, 0xfffffffffffffec0, 4) , (const, 0x487, 4), (stack, 0xfffffffffffffec0, 4) MULTIEQUAL (stack, 0xfffffffffffffec0, 4) , (unique, 0x10001459, 4) , (unique, 0x10001459, 4)]
[(stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x487, 4), (stack, 0xfffffffffffffec4, 4) MULTIEQUAL (stack, 0xfffffffffffffec4, 4) , (unique, 0x1000145d, 4) , (unique, 0x1000145d, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x487, 4), (stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (unique, 0x10001461, 8) , (unique, 0x10001461, 8)]
[(stack, 0xfffffffffffffed0, 4) INDIRECT (stack, 0xfffffffffffffed0, 4) , (const, 0x487, 4), (stack, 0xfffffffffffffed0, 4) MULTIEQUAL (stack, 0xfffffffffffffed0, 4) , (unique, 0x10001469, 4) , (unique, 0x10001469, 4)]
[(stack, 0xfffffffffffffed4, 4) INDIRECT (stack, 0xfffffffffffffed4, 4) , (const, 0x487, 4), (stack, 0xfffffffffffffed4, 4) MULTIEQUAL (stack, 0xfffffffffffffed4, 4) , (unique, 0x1000146d, 4) , (unique, 0x1000146d, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x487, 4), (stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (unique, 0x10001471, 8) , (unique, 0x10001471, 8)]
[(stack, 0xfffffffffffffee0, 4) INDIRECT (stack, 0xfffffffffffffee0, 4) , (const, 0x487, 4), (stack, 0xfffffffffffffee0, 4) MULTIEQUAL (stack, 0xfffffffffffffee0, 4) , (unique, 0x10001479, 4) , (unique, 0x10001479, 4)]
[(stack, 0xfffffffffffffee4, 4) INDIRECT (stack, 0xfffffffffffffee4, 4) , (const, 0x487, 4), (stack, 0xfffffffffffffee4, 4) MULTIEQUAL (stack, 0xfffffffffffffee4, 4) , (unique, 0x1000147d, 4) , (unique, 0x1000147d, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x487, 4), (stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (unique, 0x10001481, 8) , (unique, 0x10001481, 8)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x487, 4), (stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (unique, 0x10001489, 8) , (unique, 0x10001489, 8)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x487, 4), (stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (unique, 0x10001491, 8) , (unique, 0x10001491, 8)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x487, 4), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (unique, 0x10001499, 8) , (unique, 0x10001499, 8)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x487, 4), (stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (unique, 0x100014a1, 8) , (unique, 0x100014a1, 8)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x487, 4), (stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (unique, 0x100014a9, 8) , (unique, 0x100014a9, 8)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x487, 4), (stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (unique, 0x100014d1, 4) , (unique, 0x100014d1, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x487, 4), (stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (unique, 0x100014d5, 4) , (unique, 0x100014d5, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x487, 4), (stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (unique, 0x100014d9, 8) , (unique, 0x100014d9, 8)]
[(stack, 0xffffffffffffff52, 2) INDIRECT (stack, 0xffffffffffffff52, 2) , (const, 0x487, 4), (stack, 0xffffffffffffff52, 2) MULTIEQUAL (stack, 0xffffffffffffff52, 2) , (unique, 0x100014e1, 2) , (unique, 0x100014e1, 2)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x487, 4), (stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (unique, 0x100014e7, 4) , (unique, 0x100014e7, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x487, 4), (stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (unique, 0x100014eb, 4) , (unique, 0x100014eb, 4)]
[(stack, 0xffffffffffffff5c, 4) INDIRECT (stack, 0xffffffffffffff5c, 4) , (const, 0x487, 4), (stack, 0xffffffffffffff5c, 4) MULTIEQUAL (stack, 0xffffffffffffff5c, 4) , (unique, 0x100014ef, 4) , (unique, 0x100014ef, 4)]
[(stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0x487, 4), (stack, 0xffffffffffffff60, 4) MULTIEQUAL (stack, 0xffffffffffffff60, 4) , (unique, 0x100014f3, 4) , (unique, 0x100014f3, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x487, 4), (stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (unique, 0x100014f7, 8) , (unique, 0x100014f7, 8)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x487, 4), (stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (unique, 0x100014ff, 8) , (unique, 0x100014ff, 8)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x487, 4), (stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (unique, 0x10001507, 8) , (unique, 0x10001507, 8)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x487, 4), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (unique, 0x1000150f, 8) , (unique, 0x1000150f, 8)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x487, 4), (stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (unique, 0x10001517, 8) , (unique, 0x10001517, 8)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x487, 4), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (unique, 0x1000151f, 8) , (unique, 0x1000151f, 8)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x487, 4), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (unique, 0x10001527, 8) , (unique, 0x10001527, 8)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x487, 4), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (unique, 0x1000152f, 8) , (unique, 0x1000152f, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x487, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (unique, 0x10001537, 8) , (unique, 0x10001537, 8)]
[(register, 0x0, 4) CALL (ram, 0x478c50, 8) , (register, 0x38, 8)]
[(stack, 0xffffffffffffff28, 4) SUBPIECE (stack, 0xffffffffffffff28, 16) , (const, 0x0, 8), (stack, 0xffffffffffffff28, 16) INDIRECT (stack, 0xffffffffffffff28, 16) , (const, 0x487, 4), (stack, 0xffffffffffffff28, 16) MULTIEQUAL (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16)]
[(stack, 0xffffffffffffff18, 1) SUBPIECE (stack, 0xffffffffffffff18, 16) , (const, 0x0, 8), (stack, 0xffffffffffffff18, 16) INDIRECT (stack, 0xffffffffffffff18, 16) , (const, 0x487, 4), (stack, 0xffffffffffffff18, 16) MULTIEQUAL (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 4) MULTIEQUAL (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4)]
[(stack, 0xffffffffffffff5c, 4) MULTIEQUAL (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4)]
[(stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff52, 2) MULTIEQUAL (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff28, 16) MULTIEQUAL (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16)]
[(stack, 0xffffffffffffff18, 16) MULTIEQUAL (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee4, 4) MULTIEQUAL (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4)]
[(stack, 0xfffffffffffffee0, 4) MULTIEQUAL (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed4, 4) MULTIEQUAL (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4)]
[(stack, 0xfffffffffffffed0, 4) MULTIEQUAL (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffec4, 4) MULTIEQUAL (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4)]
[(stack, 0xfffffffffffffec0, 4) MULTIEQUAL (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4)]
[(stack, 0xfffffffffffffebc, 4) MULTIEQUAL (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4)]
[(stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(ram, 0x4ae3d0, 8) MULTIEQUAL (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8)]
[(ram, 0x4ae3c8, 8) MULTIEQUAL (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8)]
[(ram, 0x4ae3c0, 8) MULTIEQUAL (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8)]
[(ram, 0x4ae3b0, 8) MULTIEQUAL (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8)]
[(ram, 0x4ae3a0, 10) MULTIEQUAL (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10)]
[(ram, 0x4ae390, 8) MULTIEQUAL (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8)]
[(ram, 0x4ae380, 16) MULTIEQUAL (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16)]
[(unique, 0xbb00, 1) MULTIEQUAL (stack, 0xffffffffffffff18, 1) , (stack, 0xffffffffffffff18, 1)]
[(unique, 0xbc80, 4) MULTIEQUAL (stack, 0xffffffffffffff28, 4) , (stack, 0xffffffffffffff28, 4)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xa8, 4) MULTIEQUAL (register, 0xa8, 4) , (register, 0xa8, 4)]
[(unique, 0x100029fc, 8) COPY (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x46be48, 1) , (register, 0x0, 1), (register, 0x0, 1) INT_EQUAL (register, 0x0, 4) , (const, 0xffffffff, 4), (register, 0x0, 4) MULTIEQUAL (register, 0x0, 4) , (register, 0x0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100037e7, 8), (unique, 0x100037e7, 8) INT_ADD (unique, 0x100037df, 8) , (const, 0x20, 8), (unique, 0x100037df, 8) CAST (unique, 0xbd80, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x1, 8) , (const, 0x4, 8)]
[(ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x1dc, 4), (ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x1da, 4)]
[(ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x1dc, 4), (ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x1da, 4)]
[(ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x1dc, 4), (ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x1da, 4)]
[(ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x1dc, 4), (ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x1da, 4)]
[(ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x1dc, 4), (ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x1da, 4)]
[(ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x1dc, 4), (ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x1da, 4)]
[(ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x1dc, 4), (ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x1da, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0xbd80, 8) , (const, 0x2d, 4)]
[ ---  BRANCH (ram, 0x46be48, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (unique, 0x10001537, 8) , (unique, 0x10001537, 8) , (unique, 0x10001537, 8) , (unique, 0x10001537, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (unique, 0x1000152f, 8) , (unique, 0x1000152f, 8) , (unique, 0x1000152f, 8) , (unique, 0x1000152f, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (unique, 0x10001527, 8) , (unique, 0x10001527, 8) , (unique, 0x10001527, 8) , (unique, 0x10001527, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (unique, 0x1000151f, 8) , (unique, 0x1000151f, 8) , (unique, 0x1000151f, 8) , (unique, 0x1000151f, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (unique, 0x10001517, 8) , (unique, 0x10001517, 8) , (unique, 0x10001517, 8) , (unique, 0x10001517, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (unique, 0x1000150f, 8) , (unique, 0x1000150f, 8) , (unique, 0x1000150f, 8) , (unique, 0x1000150f, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (unique, 0x10001507, 8) , (unique, 0x10001507, 8) , (unique, 0x10001507, 8) , (unique, 0x10001507, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (unique, 0x100014ff, 8) , (unique, 0x100014ff, 8) , (unique, 0x100014ff, 8) , (unique, 0x100014ff, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (unique, 0x100014f7, 8) , (unique, 0x100014f7, 8) , (unique, 0x100014f7, 8) , (unique, 0x100014f7, 8)]
[(stack, 0xffffffffffffff60, 4) MULTIEQUAL (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4) , (unique, 0x100014f3, 4) , (unique, 0x100014f3, 4) , (unique, 0x100014f3, 4) , (unique, 0x100014f3, 4)]
[(stack, 0xffffffffffffff5c, 4) MULTIEQUAL (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4) , (unique, 0x100014ef, 4) , (unique, 0x100014ef, 4) , (unique, 0x100014ef, 4) , (unique, 0x100014ef, 4)]
[(stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4) , (unique, 0x100014eb, 4) , (unique, 0x100014eb, 4) , (unique, 0x100014eb, 4) , (unique, 0x100014eb, 4)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (unique, 0x100014e7, 4) , (unique, 0x100014e7, 4) , (unique, 0x100014e7, 4) , (unique, 0x100014e7, 4)]
[(stack, 0xffffffffffffff52, 2) MULTIEQUAL (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2) , (unique, 0x100014e1, 2) , (unique, 0x100014e1, 2) , (unique, 0x100014e1, 2) , (unique, 0x100014e1, 2)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (unique, 0x100014d9, 8) , (unique, 0x100014d9, 8) , (unique, 0x100014d9, 8) , (unique, 0x100014d9, 8)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (unique, 0x100014d5, 4) , (unique, 0x100014d5, 4) , (unique, 0x100014d5, 4) , (unique, 0x100014d5, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (unique, 0x100014d1, 4) , (unique, 0x100014d1, 4) , (unique, 0x100014d1, 4) , (unique, 0x100014d1, 4)]
[(stack, 0xffffffffffffff28, 16) MULTIEQUAL (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16) , (unique, 0x100014c1, 16) , (unique, 0x100014c1, 16) , (unique, 0x100014c1, 16) , (unique, 0x100014c1, 16)]
[(stack, 0xffffffffffffff18, 16) MULTIEQUAL (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16) , (unique, 0x100014b1, 16) , (unique, 0x100014b1, 16) , (unique, 0x100014b1, 16) , (unique, 0x100014b1, 16)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (unique, 0x100014a9, 8) , (unique, 0x100014a9, 8) , (unique, 0x100014a9, 8) , (unique, 0x100014a9, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (unique, 0x100014a1, 8) , (unique, 0x100014a1, 8) , (unique, 0x100014a1, 8) , (unique, 0x100014a1, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (unique, 0x10001499, 8) , (unique, 0x10001499, 8) , (unique, 0x10001499, 8) , (unique, 0x10001499, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (unique, 0x10001491, 8) , (unique, 0x10001491, 8) , (unique, 0x10001491, 8) , (unique, 0x10001491, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (unique, 0x10001489, 8) , (unique, 0x10001489, 8) , (unique, 0x10001489, 8) , (unique, 0x10001489, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (unique, 0x10001481, 8) , (unique, 0x10001481, 8) , (unique, 0x10001481, 8) , (unique, 0x10001481, 8)]
[(stack, 0xfffffffffffffee4, 4) MULTIEQUAL (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4) , (unique, 0x1000147d, 4) , (unique, 0x1000147d, 4) , (unique, 0x1000147d, 4) , (unique, 0x1000147d, 4)]
[(stack, 0xfffffffffffffee0, 4) MULTIEQUAL (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4) , (unique, 0x10001479, 4) , (unique, 0x10001479, 4) , (unique, 0x10001479, 4) , (unique, 0x10001479, 4)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (unique, 0x10001471, 8) , (unique, 0x10001471, 8) , (unique, 0x10001471, 8) , (unique, 0x10001471, 8)]
[(stack, 0xfffffffffffffed4, 4) MULTIEQUAL (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4) , (unique, 0x1000146d, 4) , (unique, 0x1000146d, 4) , (unique, 0x1000146d, 4) , (unique, 0x1000146d, 4)]
[(stack, 0xfffffffffffffed0, 4) MULTIEQUAL (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4) , (unique, 0x10001469, 4) , (unique, 0x10001469, 4) , (unique, 0x10001469, 4) , (unique, 0x10001469, 4)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (unique, 0x10001461, 8) , (unique, 0x10001461, 8) , (unique, 0x10001461, 8) , (unique, 0x10001461, 8)]
[(stack, 0xfffffffffffffec4, 4) MULTIEQUAL (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4) , (unique, 0x1000145d, 4) , (unique, 0x1000145d, 4) , (unique, 0x1000145d, 4) , (unique, 0x1000145d, 4)]
[(stack, 0xfffffffffffffec0, 4) MULTIEQUAL (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4) , (unique, 0x10001459, 4) , (unique, 0x10001459, 4) , (unique, 0x10001459, 4) , (unique, 0x10001459, 4)]
[(stack, 0xfffffffffffffebc, 4) MULTIEQUAL (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4) , (unique, 0x10001455, 4) , (unique, 0x10001455, 4) , (unique, 0x10001455, 4) , (unique, 0x10001455, 4)]
[(stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4) , (unique, 0x10001451, 4) , (unique, 0x10001451, 4) , (unique, 0x10001451, 4) , (unique, 0x10001451, 4)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (unique, 0x10001449, 8) , (unique, 0x10001449, 8) , (unique, 0x10001449, 8) , (unique, 0x10001449, 8)]
[(ram, 0x4ae3d0, 8) MULTIEQUAL (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8)]
[(ram, 0x4ae3c8, 8) MULTIEQUAL (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8)]
[(ram, 0x4ae3c0, 8) MULTIEQUAL (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8)]
[(ram, 0x4ae3b0, 8) MULTIEQUAL (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8)]
[(ram, 0x4ae3a0, 10) MULTIEQUAL (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10)]
[(ram, 0x4ae390, 8) MULTIEQUAL (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8)]
[(ram, 0x4ae380, 16) MULTIEQUAL (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (unique, 0x100013ff, 8) , (unique, 0x100013ff, 8) , (unique, 0x100013ff, 8) , (unique, 0x100013ff, 8)]
[(register, 0x80, 1) MULTIEQUAL (register, 0x80, 1) , (unique, 0xbb00, 1) , (register, 0x80, 1) , (unique, 0x10001543, 1) , (unique, 0x10001543, 1) , (unique, 0x10001543, 1) , (unique, 0x10001543, 1)]
[(register, 0x8, 4) MULTIEQUAL (register, 0x8, 4) , (unique, 0xbc80, 4) , (register, 0x8, 4) , (unique, 0x1000153f, 4) , (unique, 0x1000153f, 4) , (unique, 0x1000153f, 4) , (unique, 0x1000153f, 4)]
[(register, 0xa8, 4) INT_ADD (register, 0xa8, 4) , (const, 0x1, 4), (register, 0xa8, 4) MULTIEQUAL (register, 0xa8, 4) , (register, 0xa8, 4) , (register, 0xa8, 4) , (unique, 0x100014e3, 4) , (unique, 0x100014e3, 4) , (unique, 0x100014e3, 4) , (unique, 0x100014e3, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (unique, 0x10001537, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (unique, 0x1000152f, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (unique, 0x10001527, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (unique, 0x1000151f, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (unique, 0x10001517, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (unique, 0x1000150f, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (unique, 0x10001507, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (unique, 0x100014ff, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (unique, 0x100014f7, 8)]
[(stack, 0xffffffffffffff60, 4) MULTIEQUAL (stack, 0xffffffffffffff60, 4) , (unique, 0x100014f3, 4)]
[(stack, 0xffffffffffffff5c, 4) MULTIEQUAL (stack, 0xffffffffffffff5c, 4) , (unique, 0x100014ef, 4)]
[(stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (unique, 0x100014eb, 4)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (unique, 0x100014e7, 4)]
[(stack, 0xffffffffffffff52, 2) MULTIEQUAL (stack, 0xffffffffffffff52, 2) , (unique, 0x100014e1, 2)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (unique, 0x100014d9, 8)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (unique, 0x100014d1, 4)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (unique, 0x100014a9, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (unique, 0x100014a1, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (unique, 0x10001499, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (unique, 0x10001491, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (unique, 0x10001489, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (unique, 0x10001481, 8)]
[(stack, 0xfffffffffffffee4, 4) MULTIEQUAL (stack, 0xfffffffffffffee4, 4) , (unique, 0x1000147d, 4)]
[(stack, 0xfffffffffffffee0, 4) MULTIEQUAL (stack, 0xfffffffffffffee0, 4) , (unique, 0x10001479, 4)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (unique, 0x10001471, 8)]
[(stack, 0xfffffffffffffed4, 4) MULTIEQUAL (stack, 0xfffffffffffffed4, 4) , (unique, 0x1000146d, 4)]
[(stack, 0xfffffffffffffed0, 4) MULTIEQUAL (stack, 0xfffffffffffffed0, 4) , (unique, 0x10001469, 4)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (unique, 0x10001461, 8)]
[(stack, 0xfffffffffffffec4, 4) MULTIEQUAL (stack, 0xfffffffffffffec4, 4) , (unique, 0x1000145d, 4)]
[(stack, 0xfffffffffffffec0, 4) MULTIEQUAL (stack, 0xfffffffffffffec0, 4) , (unique, 0x10001459, 4)]
[(stack, 0xfffffffffffffebc, 4) MULTIEQUAL (stack, 0xfffffffffffffebc, 4) , (unique, 0x10001455, 4)]
[(stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (unique, 0x10001451, 4)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (unique, 0x10001449, 8)]
[(ram, 0x4ae3d0, 8) MULTIEQUAL (ram, 0x4ae3d0, 8) , (unique, 0x10001441, 8)]
[(ram, 0x4ae3c8, 8) MULTIEQUAL (ram, 0x4ae3c8, 8) , (unique, 0x10001439, 8)]
[(ram, 0x4ae3c0, 8) MULTIEQUAL (ram, 0x4ae3c0, 8) , (unique, 0x10001431, 8)]
[(ram, 0x4ae3b0, 8) MULTIEQUAL (ram, 0x4ae3b0, 8) , (unique, 0x10001429, 8)]
[(ram, 0x4ae3a0, 10) MULTIEQUAL (ram, 0x4ae3a0, 10) , (unique, 0x1000141f, 10)]
[(ram, 0x4ae390, 8) MULTIEQUAL (ram, 0x4ae390, 8) , (unique, 0x10001417, 8)]
[(ram, 0x4ae380, 16) MULTIEQUAL (ram, 0x4ae380, 16) , (unique, 0x10001407, 16)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (unique, 0x100013ff, 8)]
[(register, 0xa8, 4) MULTIEQUAL (register, 0xa8, 4) , (unique, 0x100014e3, 4)]
[(register, 0x80, 1) MULTIEQUAL (register, 0x80, 1) , (unique, 0x10001543, 1)]
[(register, 0x8, 4) MULTIEQUAL (register, 0x8, 4) , (unique, 0x1000153f, 4)]
[(stack, 0xffffffffffffff19, 15) SUBPIECE (stack, 0xffffffffffffff18, 16) , (const, 0x1, 8), (stack, 0xffffffffffffff18, 16) MULTIEQUAL (stack, 0xffffffffffffff18, 16) , (unique, 0x100014b1, 16)]
[(stack, 0xffffffffffffff2c, 12) SUBPIECE (stack, 0xffffffffffffff28, 16) , (const, 0x4, 8), (stack, 0xffffffffffffff28, 16) MULTIEQUAL (stack, 0xffffffffffffff28, 16) , (unique, 0x100014c1, 16)]
[ ---  CBRANCH (ram, 0x46c770, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffff3c, 4) , (const, 0x0, 4), (stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (unique, 0x100014d5, 4)]
[(unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (register, 0xb0, 8)]
[ ---  CBRANCH (ram, 0x46dce0, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) BOOL_OR (register, 0x200, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x100037f7, 8) , (unique, 0xbd80, 8), (unique, 0x100037f7, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (register, 0x200, 1) INT_LESS (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRSUB (register, 0x38, 8) , (const, 0x30, 8), (unique, 0xbd80, 8) CAST (unique, 0x100037ef, 8), (unique, 0x100037ef, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRSUB (register, 0x38, 8) , (const, 0x28, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x468, 4)]
[(ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x468, 4)]
[(ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x468, 4)]
[(ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x468, 4)]
[(ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x468, 4)]
[(ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x468, 4)]
[(ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x468, 4)]
[(ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x468, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x468, 4)]
[(stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x468, 4)]
[(stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x468, 4)]
[(stack, 0xfffffffffffffec0, 4) INDIRECT (stack, 0xfffffffffffffec0, 4) , (const, 0x468, 4)]
[(stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x468, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x468, 4)]
[(stack, 0xfffffffffffffed0, 4) INDIRECT (stack, 0xfffffffffffffed0, 4) , (const, 0x468, 4)]
[(stack, 0xfffffffffffffed4, 4) INDIRECT (stack, 0xfffffffffffffed4, 4) , (const, 0x468, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x468, 4)]
[(stack, 0xfffffffffffffee0, 4) INDIRECT (stack, 0xfffffffffffffee0, 4) , (const, 0x468, 4)]
[(stack, 0xfffffffffffffee4, 4) INDIRECT (stack, 0xfffffffffffffee4, 4) , (const, 0x468, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x468, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x468, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x468, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x468, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x468, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x468, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x468, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x468, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x468, 4)]
[(stack, 0xffffffffffffff52, 2) INDIRECT (stack, 0xffffffffffffff52, 2) , (const, 0x468, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x468, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x468, 4)]
[(stack, 0xffffffffffffff5c, 4) INDIRECT (stack, 0xffffffffffffff5c, 4) , (const, 0x468, 4)]
[(stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0x468, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x468, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x468, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x468, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x468, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x468, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x468, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x468, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x468, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x468, 4)]
[(stack, 0xffffffffffffff28, 4) SUBPIECE (stack, 0xffffffffffffff28, 16) , (const, 0x0, 8), (stack, 0xffffffffffffff28, 16) INDIRECT (stack, 0xffffffffffffff28, 16) , (const, 0x468, 4), (stack, 0xffffffffffffff28, 16) INT_ADD (unique, 0x1000257c, 16) , (register, 0x8, 4), (unique, 0x1000257c, 16) INT_LEFT (unique, 0x1000256c, 16) , (const, 0x20, 16), (unique, 0x1000256c, 16) INT_SEXT (stack, 0xffffffffffffff2c, 12)]
[(stack, 0xffffffffffffff18, 1) SUBPIECE (stack, 0xffffffffffffff18, 16) , (const, 0x0, 8), (stack, 0xffffffffffffff18, 16) INDIRECT (stack, 0xffffffffffffff18, 16) , (const, 0x468, 4), (stack, 0xffffffffffffff18, 16) INT_ADD (unique, 0x1000255c, 16) , (register, 0x80, 1), (unique, 0x1000255c, 16) INT_LEFT (unique, 0x1000254c, 16) , (const, 0x8, 16), (unique, 0x1000254c, 16) INT_SEXT (stack, 0xffffffffffffff19, 15)]
[(unique, 0x10002a04, 8) COPY (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x46c78f, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0xffffffff, 4), (register, 0x0, 4) CALL (ram, 0x41e9e0, 8) , (register, 0x38, 8) , (register, 0x30, 4), (register, 0x30, 4) INT_ZEXT (unique, 0xbb00, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3800, 8) , (unique, 0x100037ff, 8), (unique, 0x100037ff, 8) CAST (unique, 0x3100, 8), (unique, 0x3800, 8) PTRSUB (register, 0x38, 8) , (const, 0x28, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[(ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x3b0, 4), (ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x3ae, 4)]
[(ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x3b0, 4), (ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x3ae, 4)]
[(ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x3b0, 4), (ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x3ae, 4)]
[(ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x3b0, 4), (ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x3ae, 4)]
[(ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x3b0, 4), (ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x3ae, 4)]
[(ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x3b0, 4), (ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x3ae, 4)]
[(ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x3b0, 4), (ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x3ae, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0xbd80, 8) , (unique, 0xbb00, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 4) MULTIEQUAL (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4)]
[(stack, 0xffffffffffffff5c, 4) MULTIEQUAL (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4)]
[(stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff52, 2) MULTIEQUAL (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff28, 16) MULTIEQUAL (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16)]
[(stack, 0xffffffffffffff18, 16) MULTIEQUAL (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee4, 4) MULTIEQUAL (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4)]
[(stack, 0xfffffffffffffee0, 4) MULTIEQUAL (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed4, 4) MULTIEQUAL (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4)]
[(stack, 0xfffffffffffffed0, 4) MULTIEQUAL (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffec4, 4) MULTIEQUAL (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4)]
[(stack, 0xfffffffffffffec0, 4) MULTIEQUAL (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4)]
[(stack, 0xfffffffffffffebc, 4) MULTIEQUAL (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4)]
[(stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(ram, 0x4ae3d0, 8) MULTIEQUAL (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8)]
[(ram, 0x4ae3c8, 8) MULTIEQUAL (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8)]
[(ram, 0x4ae3c0, 8) MULTIEQUAL (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8)]
[(ram, 0x4ae3b0, 8) MULTIEQUAL (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8)]
[(ram, 0x4ae3a0, 10) MULTIEQUAL (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10)]
[(ram, 0x4ae390, 8) MULTIEQUAL (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8)]
[(ram, 0x4ae380, 16) MULTIEQUAL (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x80, 1) MULTIEQUAL (register, 0x80, 1) , (stack, 0xffffffffffffff18, 1)]
[(register, 0x8, 4) MULTIEQUAL (register, 0x8, 4) , (stack, 0xffffffffffffff28, 4)]
[(unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb0, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x46dca9, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) BOOL_OR (register, 0x200, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x1000380f, 8) , (unique, 0xbd80, 8), (unique, 0x1000380f, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (register, 0x200, 1) INT_LESS (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRSUB (register, 0x38, 8) , (const, 0x30, 8), (unique, 0xbd80, 8) CAST (unique, 0x10003807, 8), (unique, 0x10003807, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRSUB (register, 0x38, 8) , (const, 0x28, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x448, 4)]
[(ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x448, 4)]
[(ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x448, 4)]
[(ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x448, 4)]
[(ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x448, 4)]
[(ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x448, 4)]
[(ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x448, 4)]
[(ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x448, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x448, 4)]
[(stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x448, 4)]
[(stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x448, 4)]
[(stack, 0xfffffffffffffec0, 4) INDIRECT (stack, 0xfffffffffffffec0, 4) , (const, 0x448, 4)]
[(stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x448, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x448, 4)]
[(stack, 0xfffffffffffffed0, 4) INDIRECT (stack, 0xfffffffffffffed0, 4) , (const, 0x448, 4)]
[(stack, 0xfffffffffffffed4, 4) INDIRECT (stack, 0xfffffffffffffed4, 4) , (const, 0x448, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x448, 4)]
[(stack, 0xfffffffffffffee0, 4) INDIRECT (stack, 0xfffffffffffffee0, 4) , (const, 0x448, 4)]
[(stack, 0xfffffffffffffee4, 4) INDIRECT (stack, 0xfffffffffffffee4, 4) , (const, 0x448, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x448, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x448, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x448, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x448, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x448, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x448, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x448, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x448, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x448, 4)]
[(stack, 0xffffffffffffff52, 2) INDIRECT (stack, 0xffffffffffffff52, 2) , (const, 0x448, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x448, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x448, 4)]
[(stack, 0xffffffffffffff5c, 4) INDIRECT (stack, 0xffffffffffffff5c, 4) , (const, 0x448, 4)]
[(stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0x448, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x448, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x448, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x448, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x448, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x448, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x448, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x448, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x448, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x448, 4)]
[(stack, 0xffffffffffffff28, 4) SUBPIECE (stack, 0xffffffffffffff28, 16) , (const, 0x0, 8), (stack, 0xffffffffffffff28, 16) INDIRECT (stack, 0xffffffffffffff28, 16) , (const, 0x448, 4), (stack, 0xffffffffffffff28, 16) INT_ADD (unique, 0x1000253c, 16) , (register, 0x8, 4), (unique, 0x1000253c, 16) INT_LEFT (unique, 0x1000252c, 16) , (const, 0x20, 16), (unique, 0x1000252c, 16) INT_SEXT (stack, 0xffffffffffffff2c, 12), (stack, 0xffffffffffffff2c, 12) SUBPIECE (stack, 0xffffffffffffff28, 16) , (const, 0x4, 8)]
[(stack, 0xffffffffffffff18, 1) SUBPIECE (stack, 0xffffffffffffff18, 16) , (const, 0x0, 8), (stack, 0xffffffffffffff18, 16) INDIRECT (stack, 0xffffffffffffff18, 16) , (const, 0x448, 4), (stack, 0xffffffffffffff18, 16) INT_ADD (unique, 0x1000251c, 16) , (register, 0x80, 1), (unique, 0x1000251c, 16) INT_LEFT (unique, 0x1000250c, 16) , (const, 0x8, 16), (unique, 0x1000250c, 16) INT_SEXT (stack, 0xffffffffffffff19, 15), (stack, 0xffffffffffffff19, 15) SUBPIECE (stack, 0xffffffffffffff18, 16) , (const, 0x1, 8)]
[(unique, 0x10002a0c, 8) COPY (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x46c7af, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0xffffffff, 4), (register, 0x0, 4) CALL (ram, 0x41e9e0, 8) , (register, 0x38, 8) , (register, 0x30, 4), (register, 0x30, 4) INT_ZEXT (unique, 0xbb00, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3800, 8) , (unique, 0x10003817, 8), (unique, 0x10003817, 8) CAST (unique, 0x3100, 8), (unique, 0x3800, 8) PTRSUB (register, 0x38, 8) , (const, 0x28, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[(ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x3cd, 4), (ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x3cb, 4)]
[(ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x3cd, 4), (ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x3cb, 4)]
[(ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x3cd, 4), (ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x3cb, 4)]
[(ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x3cd, 4), (ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x3cb, 4)]
[(ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x3cd, 4), (ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x3cb, 4)]
[(ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x3cd, 4), (ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x3cb, 4)]
[(ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x3cd, 4), (ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x3cb, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0xbd80, 8) , (unique, 0xbb00, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 4) MULTIEQUAL (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4)]
[(stack, 0xffffffffffffff5c, 4) MULTIEQUAL (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4)]
[(stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff52, 2) MULTIEQUAL (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff28, 16) MULTIEQUAL (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16)]
[(stack, 0xffffffffffffff18, 16) MULTIEQUAL (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee4, 4) MULTIEQUAL (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4)]
[(stack, 0xfffffffffffffee0, 4) MULTIEQUAL (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed4, 4) MULTIEQUAL (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4)]
[(stack, 0xfffffffffffffed0, 4) MULTIEQUAL (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffec4, 4) MULTIEQUAL (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4)]
[(stack, 0xfffffffffffffec0, 4) MULTIEQUAL (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4)]
[(stack, 0xfffffffffffffebc, 4) MULTIEQUAL (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4)]
[(stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(ram, 0x4ae3d0, 8) MULTIEQUAL (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8)]
[(ram, 0x4ae3c8, 8) MULTIEQUAL (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8)]
[(ram, 0x4ae3c0, 8) MULTIEQUAL (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8)]
[(ram, 0x4ae3b0, 8) MULTIEQUAL (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8)]
[(ram, 0x4ae3a0, 10) MULTIEQUAL (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10)]
[(ram, 0x4ae390, 8) MULTIEQUAL (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8)]
[(ram, 0x4ae380, 16) MULTIEQUAL (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16)]
[(register, 0x8, 4) MULTIEQUAL (register, 0x8, 4) , (stack, 0xffffffffffffff28, 4)]
[(register, 0x80, 1) MULTIEQUAL (register, 0x80, 1) , (stack, 0xffffffffffffff18, 1)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb0, 8) , (const, 0x2, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x46dd6d, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRSUB (register, 0x38, 8) , (const, 0x30, 8), (unique, 0xbd80, 8) CAST (unique, 0x1000381f, 8), (unique, 0x1000381f, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRSUB (register, 0x38, 8) , (const, 0x28, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x428, 4)]
[(ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x428, 4)]
[(ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x428, 4)]
[(ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x428, 4)]
[(ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x428, 4)]
[(ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x428, 4)]
[(ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x428, 4)]
[(ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x428, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x428, 4)]
[(stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x428, 4)]
[(stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x428, 4)]
[(stack, 0xfffffffffffffec0, 4) INDIRECT (stack, 0xfffffffffffffec0, 4) , (const, 0x428, 4)]
[(stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x428, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x428, 4)]
[(stack, 0xfffffffffffffed0, 4) INDIRECT (stack, 0xfffffffffffffed0, 4) , (const, 0x428, 4)]
[(stack, 0xfffffffffffffed4, 4) INDIRECT (stack, 0xfffffffffffffed4, 4) , (const, 0x428, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x428, 4)]
[(stack, 0xfffffffffffffee0, 4) INDIRECT (stack, 0xfffffffffffffee0, 4) , (const, 0x428, 4)]
[(stack, 0xfffffffffffffee4, 4) INDIRECT (stack, 0xfffffffffffffee4, 4) , (const, 0x428, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x428, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x428, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x428, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x428, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x428, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x428, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x428, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x428, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x428, 4)]
[(stack, 0xffffffffffffff52, 2) INDIRECT (stack, 0xffffffffffffff52, 2) , (const, 0x428, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x428, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x428, 4)]
[(stack, 0xffffffffffffff5c, 4) INDIRECT (stack, 0xffffffffffffff5c, 4) , (const, 0x428, 4)]
[(stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0x428, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x428, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x428, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x428, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x428, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x428, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x428, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x428, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x428, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x428, 4)]
[(stack, 0xffffffffffffff28, 4) SUBPIECE (stack, 0xffffffffffffff28, 16) , (const, 0x0, 8), (stack, 0xffffffffffffff28, 16) INDIRECT (stack, 0xffffffffffffff28, 16) , (const, 0x428, 4), (stack, 0xffffffffffffff28, 16) INT_ADD (unique, 0x100025bc, 16) , (register, 0x8, 4), (unique, 0x100025bc, 16) INT_LEFT (unique, 0x100025ac, 16) , (const, 0x20, 16), (unique, 0x100025ac, 16) INT_SEXT (stack, 0xffffffffffffff2c, 12), (stack, 0xffffffffffffff2c, 12) SUBPIECE (stack, 0xffffffffffffff28, 16) , (const, 0x4, 8)]
[(stack, 0xffffffffffffff18, 1) SUBPIECE (stack, 0xffffffffffffff18, 16) , (const, 0x0, 8), (stack, 0xffffffffffffff18, 16) INDIRECT (stack, 0xffffffffffffff18, 16) , (const, 0x428, 4), (stack, 0xffffffffffffff18, 16) INT_ADD (unique, 0x1000259c, 16) , (register, 0x80, 1), (unique, 0x1000259c, 16) INT_LEFT (unique, 0x1000258c, 16) , (const, 0x8, 16), (unique, 0x1000258c, 16) INT_SEXT (stack, 0xffffffffffffff19, 15), (stack, 0xffffffffffffff19, 15) SUBPIECE (stack, 0xffffffffffffff18, 16) , (const, 0x1, 8)]
[(unique, 0x10002a14, 8) COPY (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x46c7cf, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0xffffffff, 4), (register, 0x0, 4) CALL (ram, 0x41e9e0, 8) , (register, 0x38, 8) , (register, 0x30, 4), (register, 0x30, 4) INT_ZEXT (unique, 0xbb00, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3800, 8) , (unique, 0x10003827, 8), (unique, 0x10003827, 8) CAST (unique, 0x3100, 8), (unique, 0x3800, 8) PTRSUB (register, 0x38, 8) , (const, 0x28, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x1, 8) , (const, 0x1, 8)]
[(ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x3ea, 4), (ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x3e8, 4)]
[(ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x3ea, 4), (ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x3e8, 4)]
[(ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x3ea, 4), (ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x3e8, 4)]
[(ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x3ea, 4), (ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x3e8, 4)]
[(ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x3ea, 4), (ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x3e8, 4)]
[(ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x3ea, 4), (ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x3e8, 4)]
[(ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x3ea, 4), (ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x3e8, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0xbd80, 8) , (unique, 0xbb00, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 4) MULTIEQUAL (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4)]
[(stack, 0xffffffffffffff5c, 4) MULTIEQUAL (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4)]
[(stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff52, 2) MULTIEQUAL (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff28, 16) MULTIEQUAL (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16)]
[(stack, 0xffffffffffffff18, 16) MULTIEQUAL (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee4, 4) MULTIEQUAL (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4)]
[(stack, 0xfffffffffffffee0, 4) MULTIEQUAL (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed4, 4) MULTIEQUAL (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4)]
[(stack, 0xfffffffffffffed0, 4) MULTIEQUAL (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffec4, 4) MULTIEQUAL (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4)]
[(stack, 0xfffffffffffffec0, 4) MULTIEQUAL (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4)]
[(stack, 0xfffffffffffffebc, 4) MULTIEQUAL (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4)]
[(stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(ram, 0x4ae3d0, 8) MULTIEQUAL (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8)]
[(ram, 0x4ae3c8, 8) MULTIEQUAL (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8)]
[(ram, 0x4ae3c0, 8) MULTIEQUAL (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8)]
[(ram, 0x4ae3b0, 8) MULTIEQUAL (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8)]
[(ram, 0x4ae3a0, 10) MULTIEQUAL (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10)]
[(ram, 0x4ae390, 8) MULTIEQUAL (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8)]
[(ram, 0x4ae380, 16) MULTIEQUAL (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16)]
[(register, 0x8, 4) MULTIEQUAL (register, 0x8, 4) , (stack, 0xffffffffffffff28, 4)]
[(register, 0x80, 1) MULTIEQUAL (register, 0x80, 1) , (stack, 0xffffffffffffff18, 1)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xa8, 4) INT_ADD (register, 0xa8, 4) , (const, 0x3, 4)]
[(unique, 0x10002994, 8) COPY (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x46bf29, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x58c00, 1) , (const, 0x0, 1), (unique, 0x58c00, 1) INT_AND (unique, 0xbb00, 1) , (const, 0x20, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x1000382f, 8), (unique, 0x1000382f, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (stack, 0xffffffffffffff40, 8) , (const, 0x3, 8) , (const, 0x4, 8), (stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(unique, 0x1000299c, 8) COPY (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x46bf29, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x80, 1) , (const, 0x0, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x417, 4)]
[(ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x417, 4)]
[(ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x417, 4)]
[(ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x417, 4)]
[(ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x417, 4)]
[(ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x417, 4)]
[(ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x417, 4)]
[(ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x417, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x417, 4)]
[(stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x417, 4)]
[(stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x417, 4)]
[(stack, 0xfffffffffffffec0, 4) INDIRECT (stack, 0xfffffffffffffec0, 4) , (const, 0x417, 4)]
[(stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x417, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x417, 4)]
[(stack, 0xfffffffffffffed0, 4) INDIRECT (stack, 0xfffffffffffffed0, 4) , (const, 0x417, 4)]
[(stack, 0xfffffffffffffed4, 4) INDIRECT (stack, 0xfffffffffffffed4, 4) , (const, 0x417, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x417, 4)]
[(stack, 0xfffffffffffffee0, 4) INDIRECT (stack, 0xfffffffffffffee0, 4) , (const, 0x417, 4)]
[(stack, 0xfffffffffffffee4, 4) INDIRECT (stack, 0xfffffffffffffee4, 4) , (const, 0x417, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x417, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x417, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x417, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x417, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x417, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x417, 4)]
[(stack, 0xffffffffffffff18, 16) INDIRECT (stack, 0xffffffffffffff18, 16) , (const, 0x417, 4)]
[(stack, 0xffffffffffffff28, 16) INDIRECT (stack, 0xffffffffffffff28, 16) , (const, 0x417, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x417, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x417, 4)]
[(stack, 0xffffffffffffff52, 2) INDIRECT (stack, 0xffffffffffffff52, 2) , (const, 0x417, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x417, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x417, 4)]
[(stack, 0xffffffffffffff5c, 4) INDIRECT (stack, 0xffffffffffffff5c, 4) , (const, 0x417, 4)]
[(stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0x417, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x417, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x417, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x417, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x417, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x417, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x417, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x417, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x417, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x417, 4)]
[(register, 0x0, 8) CALL (ram, 0x418b00, 8) , (register, 0x38, 8) , (const, 0x20, 4) , (register, 0x18, 8), (register, 0x18, 8) INT_SEXT (unique, 0x10003837, 4), (unique, 0x10003837, 4) CAST (register, 0x8, 4)]
[(stack, 0xffffffffffffff40, 4) SUBPIECE (stack, 0xffffffffffffff40, 8) , (const, 0x0, 8), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x417, 4), (stack, 0xffffffffffffff40, 8) CAST (unique, 0x10003843, 8), (unique, 0x10003843, 8) INT_OR (unique, 0x10001058, 8) , (unique, 0x10001060, 8), (unique, 0x10001060, 8) INT_ZEXT (register, 0x8, 4), (unique, 0x10001058, 8) INT_AND (unique, 0x1000383b, 8) , (const, 0xffffffff00000000, 8), (unique, 0x1000383b, 8) CAST (stack, 0xffffffffffffff40, 8)]
[ ---  BRANCH (ram, 0x46bf1d, 1)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (register, 0xb8, 8)]
[ ---  CBRANCH (ram, 0x46c8d0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3c80, 8), (unique, 0x3c80, 8) PTRSUB (register, 0x38, 8) , (const, 0xa0, 8)]
[ ---  CBRANCH (ram, 0x46c8d0, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESSEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10003863, 8), (unique, 0x10003863, 8) INT_ADD (unique, 0x1000385b, 8) , (const, 0x28, 8), (unique, 0x1000385b, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10003853, 8), (unique, 0x10003853, 8) INT_ADD (unique, 0x1000384b, 8) , (const, 0x20, 8), (unique, 0x1000384b, 8) CAST (unique, 0xbd80, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x364, 4)]
[(ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x364, 4)]
[(ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x364, 4)]
[(ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x364, 4)]
[(ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x364, 4)]
[(ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x364, 4)]
[(ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x364, 4)]
[(ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x364, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x364, 4)]
[(stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x364, 4)]
[(stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x364, 4)]
[(stack, 0xfffffffffffffec0, 4) INDIRECT (stack, 0xfffffffffffffec0, 4) , (const, 0x364, 4)]
[(stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x364, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x364, 4)]
[(stack, 0xfffffffffffffed0, 4) INDIRECT (stack, 0xfffffffffffffed0, 4) , (const, 0x364, 4)]
[(stack, 0xfffffffffffffed4, 4) INDIRECT (stack, 0xfffffffffffffed4, 4) , (const, 0x364, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x364, 4)]
[(stack, 0xfffffffffffffee0, 4) INDIRECT (stack, 0xfffffffffffffee0, 4) , (const, 0x364, 4)]
[(stack, 0xfffffffffffffee4, 4) INDIRECT (stack, 0xfffffffffffffee4, 4) , (const, 0x364, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x364, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x364, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x364, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x364, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x364, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x364, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x364, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x364, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x364, 4)]
[(stack, 0xffffffffffffff52, 2) INDIRECT (stack, 0xffffffffffffff52, 2) , (const, 0x364, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x364, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x364, 4)]
[(stack, 0xffffffffffffff5c, 4) INDIRECT (stack, 0xffffffffffffff5c, 4) , (const, 0x364, 4)]
[(stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0x364, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x364, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x364, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x364, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x364, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x364, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x364, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x364, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x364, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x364, 4)]
[(stack, 0xffffffffffffff28, 4) SUBPIECE (stack, 0xffffffffffffff28, 16) , (const, 0x0, 8), (stack, 0xffffffffffffff28, 16) INDIRECT (stack, 0xffffffffffffff28, 16) , (const, 0x364, 4), (stack, 0xffffffffffffff28, 16) INT_ADD (unique, 0x1000227c, 16) , (register, 0x8, 4), (unique, 0x1000227c, 16) INT_LEFT (unique, 0x1000226c, 16) , (const, 0x20, 16), (unique, 0x1000226c, 16) INT_SEXT (stack, 0xffffffffffffff2c, 12)]
[(stack, 0xffffffffffffff18, 1) SUBPIECE (stack, 0xffffffffffffff18, 16) , (const, 0x0, 8), (stack, 0xffffffffffffff18, 16) INDIRECT (stack, 0xffffffffffffff18, 16) , (const, 0x364, 4), (stack, 0xffffffffffffff18, 16) INT_ADD (unique, 0x1000225c, 16) , (register, 0x80, 1), (unique, 0x1000225c, 16) INT_LEFT (unique, 0x1000224c, 16) , (const, 0x8, 16), (unique, 0x1000224c, 16) INT_SEXT (stack, 0xffffffffffffff19, 15)]
[(unique, 0x100029cc, 8) COPY (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x46c898, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0xffffffff, 4), (register, 0x0, 4) CALL (ram, 0x478c50, 8) , (register, 0x38, 8)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb8, 8) , (const, 0x1, 8) , (const, 0x4, 8)]
[ ---  CBRANCH (ram, 0x46be9b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3c80, 8), (unique, 0x3c80, 8) PTRSUB (register, 0x38, 8) , (const, 0xa0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10003873, 8), (unique, 0x10003873, 8) INT_ADD (unique, 0x1000386b, 8) , (const, 0x20, 8), (unique, 0x1000386b, 8) CAST (unique, 0xbd80, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x1, 8) , (const, 0x4, 8)]
[(ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x21e, 4), (ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x21c, 4)]
[(ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x21e, 4), (ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x21c, 4)]
[(ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x21e, 4), (ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x21c, 4)]
[(ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x21e, 4), (ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x21c, 4)]
[(ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x21e, 4), (ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x21c, 4)]
[(ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x21e, 4), (ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x21c, 4)]
[(ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x21e, 4), (ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x21c, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0xbd80, 8) , (unique, 0xbc80, 4)]
[(unique, 0x100029a4, 8) COPY (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x46c898, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbc80, 4) , (const, 0xffffffff, 4)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb8, 8) , (const, 0x1, 8) , (const, 0x4, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 4) MULTIEQUAL (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4)]
[(stack, 0xffffffffffffff5c, 4) MULTIEQUAL (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4)]
[(stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff52, 2) MULTIEQUAL (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff28, 16) MULTIEQUAL (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16)]
[(stack, 0xffffffffffffff18, 16) MULTIEQUAL (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee4, 4) MULTIEQUAL (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4)]
[(stack, 0xfffffffffffffee0, 4) MULTIEQUAL (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed4, 4) MULTIEQUAL (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4)]
[(stack, 0xfffffffffffffed0, 4) MULTIEQUAL (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffec4, 4) MULTIEQUAL (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4)]
[(stack, 0xfffffffffffffec0, 4) MULTIEQUAL (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4)]
[(stack, 0xfffffffffffffebc, 4) MULTIEQUAL (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4)]
[(stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(ram, 0x4ae3d0, 8) MULTIEQUAL (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8)]
[(ram, 0x4ae3c8, 8) MULTIEQUAL (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8)]
[(ram, 0x4ae3c0, 8) MULTIEQUAL (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8)]
[(ram, 0x4ae3b0, 8) MULTIEQUAL (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8)]
[(ram, 0x4ae3a0, 10) MULTIEQUAL (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10)]
[(ram, 0x4ae390, 8) MULTIEQUAL (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8)]
[(ram, 0x4ae380, 16) MULTIEQUAL (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x80, 1) MULTIEQUAL (register, 0x80, 1) , (stack, 0xffffffffffffff18, 1)]
[(register, 0x30, 4) MULTIEQUAL (unique, 0xbc80, 4) , (unique, 0xbc80, 4)]
[(register, 0x8, 4) MULTIEQUAL (register, 0x8, 4) , (stack, 0xffffffffffffff28, 4)]
[(register, 0x18, 8) PTRADD (register, 0xb8, 8) , (const, 0x2, 8) , (const, 0x4, 8)]
[ ---  CBRANCH (ram, 0x46c915, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) BOOL_OR (register, 0x200, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (register, 0x200, 1) INT_LESS (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10003893, 8), (unique, 0x10003893, 8) INT_ADD (unique, 0x1000388b, 8) , (const, 0x28, 8), (unique, 0x1000388b, 8) CAST (register, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10003883, 8), (unique, 0x10003883, 8) INT_ADD (unique, 0x1000387b, 8) , (const, 0x20, 8), (unique, 0x1000387b, 8) CAST (register, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8)]
[(register, 0x18, 8) PTRADD (register, 0xb8, 8) , (const, 0x2, 8) , (const, 0x4, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x32d, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x32d, 4), (ram, 0x4ae380, 16) MULTIEQUAL (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16)]
[(ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x32d, 4), (ram, 0x4ae390, 8) MULTIEQUAL (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8)]
[(ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x32d, 4), (ram, 0x4ae3a0, 10) MULTIEQUAL (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10)]
[(ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x32d, 4), (ram, 0x4ae3b0, 8) MULTIEQUAL (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8)]
[(ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x32d, 4), (ram, 0x4ae3c0, 8) MULTIEQUAL (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8)]
[(ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x32d, 4), (ram, 0x4ae3c8, 8) MULTIEQUAL (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8)]
[(ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x32d, 4), (ram, 0x4ae3d0, 8) MULTIEQUAL (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x32d, 4), (stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x32d, 4), (stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4)]
[(stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x32d, 4), (stack, 0xfffffffffffffebc, 4) MULTIEQUAL (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4)]
[(stack, 0xfffffffffffffec0, 4) INDIRECT (stack, 0xfffffffffffffec0, 4) , (const, 0x32d, 4), (stack, 0xfffffffffffffec0, 4) MULTIEQUAL (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4)]
[(stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x32d, 4), (stack, 0xfffffffffffffec4, 4) MULTIEQUAL (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x32d, 4), (stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffed0, 4) INDIRECT (stack, 0xfffffffffffffed0, 4) , (const, 0x32d, 4), (stack, 0xfffffffffffffed0, 4) MULTIEQUAL (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4)]
[(stack, 0xfffffffffffffed4, 4) INDIRECT (stack, 0xfffffffffffffed4, 4) , (const, 0x32d, 4), (stack, 0xfffffffffffffed4, 4) MULTIEQUAL (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x32d, 4), (stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffee0, 4) INDIRECT (stack, 0xfffffffffffffee0, 4) , (const, 0x32d, 4), (stack, 0xfffffffffffffee0, 4) MULTIEQUAL (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4)]
[(stack, 0xfffffffffffffee4, 4) INDIRECT (stack, 0xfffffffffffffee4, 4) , (const, 0x32d, 4), (stack, 0xfffffffffffffee4, 4) MULTIEQUAL (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x32d, 4), (stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x32d, 4), (stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x32d, 4), (stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x32d, 4), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x32d, 4), (stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x32d, 4), (stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x32d, 4), (stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x32d, 4), (stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x32d, 4), (stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff52, 2) INDIRECT (stack, 0xffffffffffffff52, 2) , (const, 0x32d, 4), (stack, 0xffffffffffffff52, 2) MULTIEQUAL (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x32d, 4), (stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x32d, 4), (stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4)]
[(stack, 0xffffffffffffff5c, 4) INDIRECT (stack, 0xffffffffffffff5c, 4) , (const, 0x32d, 4), (stack, 0xffffffffffffff5c, 4) MULTIEQUAL (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4)]
[(stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0x32d, 4), (stack, 0xffffffffffffff60, 4) MULTIEQUAL (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x32d, 4), (stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x32d, 4), (stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x32d, 4), (stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x32d, 4), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x32d, 4), (stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x32d, 4), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x32d, 4), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x32d, 4), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x32d, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff28, 4) SUBPIECE (stack, 0xffffffffffffff28, 16) , (const, 0x0, 8), (stack, 0xffffffffffffff28, 16) INDIRECT (stack, 0xffffffffffffff28, 16) , (const, 0x32d, 4), (stack, 0xffffffffffffff28, 16) INT_ADD (unique, 0x100022bc, 16) , (register, 0x8, 4), (unique, 0x100022bc, 16) INT_LEFT (unique, 0x100022ac, 16) , (const, 0x20, 16), (unique, 0x100022ac, 16) INT_SEXT (stack, 0xffffffffffffff2c, 12), (stack, 0xffffffffffffff2c, 12) SUBPIECE (stack, 0xffffffffffffff28, 16) , (const, 0x4, 8), (register, 0x8, 4) MULTIEQUAL (register, 0x8, 4) , (stack, 0xffffffffffffff28, 4), (stack, 0xffffffffffffff28, 16) MULTIEQUAL (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16)]
[(stack, 0xffffffffffffff18, 1) SUBPIECE (stack, 0xffffffffffffff18, 16) , (const, 0x0, 8), (stack, 0xffffffffffffff18, 16) INDIRECT (stack, 0xffffffffffffff18, 16) , (const, 0x32d, 4), (stack, 0xffffffffffffff18, 16) INT_ADD (unique, 0x1000229c, 16) , (register, 0x80, 1), (unique, 0x1000229c, 16) INT_LEFT (unique, 0x1000228c, 16) , (const, 0x8, 16), (unique, 0x1000228c, 16) INT_SEXT (stack, 0xffffffffffffff19, 15), (stack, 0xffffffffffffff19, 15) SUBPIECE (stack, 0xffffffffffffff18, 16) , (const, 0x1, 8), (register, 0x80, 1) MULTIEQUAL (register, 0x80, 1) , (stack, 0xffffffffffffff18, 1), (stack, 0xffffffffffffff18, 16) MULTIEQUAL (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16)]
[(unique, 0x100029c4, 8) COPY (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x46c898, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0xffffffff, 4), (register, 0x0, 4) CALL (ram, 0x478c50, 8) , (register, 0x38, 8)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x46bec2, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3c80, 8), (unique, 0x3c80, 8) PTRSUB (register, 0x38, 8) , (const, 0xa0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100038a3, 8), (unique, 0x100038a3, 8) INT_ADD (unique, 0x1000389b, 8) , (const, 0x20, 8), (unique, 0x1000389b, 8) CAST (register, 0x0, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x1, 8) , (const, 0x4, 8)]
[(ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x251, 4), (ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x24f, 4)]
[(ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x251, 4), (ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x24f, 4)]
[(ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x251, 4), (ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x24f, 4)]
[(ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x251, 4), (ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x24f, 4)]
[(ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x251, 4), (ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x24f, 4)]
[(ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x251, 4), (ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x24f, 4)]
[(ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x251, 4), (ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x24f, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0xbd80, 8) , (register, 0x30, 4)]
[(unique, 0x100029ac, 8) COPY (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x46c898, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x30, 4) , (const, 0xffffffff, 4)]
[(unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (register, 0x18, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 4) MULTIEQUAL (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4)]
[(stack, 0xffffffffffffff5c, 4) MULTIEQUAL (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4)]
[(stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff52, 2) MULTIEQUAL (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff28, 16) MULTIEQUAL (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16)]
[(stack, 0xffffffffffffff18, 16) MULTIEQUAL (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee4, 4) MULTIEQUAL (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4)]
[(stack, 0xfffffffffffffee0, 4) MULTIEQUAL (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed4, 4) MULTIEQUAL (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4)]
[(stack, 0xfffffffffffffed0, 4) MULTIEQUAL (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffec4, 4) MULTIEQUAL (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4)]
[(stack, 0xfffffffffffffec0, 4) MULTIEQUAL (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4)]
[(stack, 0xfffffffffffffebc, 4) MULTIEQUAL (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4)]
[(stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(ram, 0x4ae3d0, 8) MULTIEQUAL (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8)]
[(ram, 0x4ae3c8, 8) MULTIEQUAL (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8)]
[(ram, 0x4ae3c0, 8) MULTIEQUAL (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8)]
[(ram, 0x4ae3b0, 8) MULTIEQUAL (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8)]
[(ram, 0x4ae3a0, 10) MULTIEQUAL (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10)]
[(ram, 0x4ae390, 8) MULTIEQUAL (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8)]
[(ram, 0x4ae380, 16) MULTIEQUAL (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x80, 1) MULTIEQUAL (register, 0x80, 1) , (stack, 0xffffffffffffff18, 1)]
[(register, 0x30, 4) MULTIEQUAL (unique, 0xbc80, 4) , (unique, 0xbc80, 4)]
[(register, 0x8, 4) MULTIEQUAL (register, 0x8, 4) , (stack, 0xffffffffffffff28, 4)]
[ ---  CBRANCH (ram, 0x46c958, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESSEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100038c3, 8), (unique, 0x100038c3, 8) INT_ADD (unique, 0x100038bb, 8) , (const, 0x28, 8), (unique, 0x100038bb, 8) CAST (register, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100038b3, 8), (unique, 0x100038b3, 8) INT_ADD (unique, 0x100038ab, 8) , (const, 0x20, 8), (unique, 0x100038ab, 8) CAST (register, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (unique, 0xbd80, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x310, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x310, 4), (ram, 0x4ae380, 16) MULTIEQUAL (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16)]
[(ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x310, 4), (ram, 0x4ae390, 8) MULTIEQUAL (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8)]
[(ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x310, 4), (ram, 0x4ae3a0, 10) MULTIEQUAL (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10)]
[(ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x310, 4), (ram, 0x4ae3b0, 8) MULTIEQUAL (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8)]
[(ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x310, 4), (ram, 0x4ae3c0, 8) MULTIEQUAL (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8)]
[(ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x310, 4), (ram, 0x4ae3c8, 8) MULTIEQUAL (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8)]
[(ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x310, 4), (ram, 0x4ae3d0, 8) MULTIEQUAL (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x310, 4), (stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x310, 4), (stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4)]
[(stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x310, 4), (stack, 0xfffffffffffffebc, 4) MULTIEQUAL (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4)]
[(stack, 0xfffffffffffffec0, 4) INDIRECT (stack, 0xfffffffffffffec0, 4) , (const, 0x310, 4), (stack, 0xfffffffffffffec0, 4) MULTIEQUAL (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4)]
[(stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x310, 4), (stack, 0xfffffffffffffec4, 4) MULTIEQUAL (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x310, 4), (stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffed0, 4) INDIRECT (stack, 0xfffffffffffffed0, 4) , (const, 0x310, 4), (stack, 0xfffffffffffffed0, 4) MULTIEQUAL (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4)]
[(stack, 0xfffffffffffffed4, 4) INDIRECT (stack, 0xfffffffffffffed4, 4) , (const, 0x310, 4), (stack, 0xfffffffffffffed4, 4) MULTIEQUAL (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x310, 4), (stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffee0, 4) INDIRECT (stack, 0xfffffffffffffee0, 4) , (const, 0x310, 4), (stack, 0xfffffffffffffee0, 4) MULTIEQUAL (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4)]
[(stack, 0xfffffffffffffee4, 4) INDIRECT (stack, 0xfffffffffffffee4, 4) , (const, 0x310, 4), (stack, 0xfffffffffffffee4, 4) MULTIEQUAL (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x310, 4), (stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x310, 4), (stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x310, 4), (stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x310, 4), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x310, 4), (stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x310, 4), (stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x310, 4), (stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x310, 4), (stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x310, 4), (stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff52, 2) INDIRECT (stack, 0xffffffffffffff52, 2) , (const, 0x310, 4), (stack, 0xffffffffffffff52, 2) MULTIEQUAL (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x310, 4), (stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x310, 4), (stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4)]
[(stack, 0xffffffffffffff5c, 4) INDIRECT (stack, 0xffffffffffffff5c, 4) , (const, 0x310, 4), (stack, 0xffffffffffffff5c, 4) MULTIEQUAL (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4)]
[(stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0x310, 4), (stack, 0xffffffffffffff60, 4) MULTIEQUAL (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x310, 4), (stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x310, 4), (stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x310, 4), (stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x310, 4), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x310, 4), (stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x310, 4), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x310, 4), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x310, 4), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x310, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(register, 0x0, 4) CALL (ram, 0x478c50, 8) , (register, 0x38, 8)]
[(stack, 0xffffffffffffff28, 4) SUBPIECE (stack, 0xffffffffffffff28, 16) , (const, 0x0, 8), (stack, 0xffffffffffffff28, 16) INDIRECT (stack, 0xffffffffffffff28, 16) , (const, 0x310, 4), (stack, 0xffffffffffffff28, 16) INT_ADD (unique, 0x100022fc, 16) , (register, 0x8, 4), (unique, 0x100022fc, 16) INT_LEFT (unique, 0x100022ec, 16) , (const, 0x20, 16), (unique, 0x100022ec, 16) INT_SEXT (stack, 0xffffffffffffff2c, 12), (stack, 0xffffffffffffff2c, 12) SUBPIECE (stack, 0xffffffffffffff28, 16) , (const, 0x4, 8), (register, 0x8, 4) MULTIEQUAL (register, 0x8, 4) , (stack, 0xffffffffffffff28, 4), (stack, 0xffffffffffffff28, 16) MULTIEQUAL (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16)]
[(stack, 0xffffffffffffff18, 1) SUBPIECE (stack, 0xffffffffffffff18, 16) , (const, 0x0, 8), (stack, 0xffffffffffffff18, 16) INDIRECT (stack, 0xffffffffffffff18, 16) , (const, 0x310, 4), (stack, 0xffffffffffffff18, 16) INT_ADD (unique, 0x100022dc, 16) , (register, 0x80, 1), (unique, 0x100022dc, 16) INT_LEFT (unique, 0x100022cc, 16) , (const, 0x8, 16), (unique, 0x100022cc, 16) INT_SEXT (stack, 0xffffffffffffff19, 15), (stack, 0xffffffffffffff19, 15) SUBPIECE (stack, 0xffffffffffffff18, 16) , (const, 0x1, 8), (register, 0x80, 1) MULTIEQUAL (register, 0x80, 1) , (stack, 0xffffffffffffff18, 1), (stack, 0xffffffffffffff18, 16) MULTIEQUAL (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16)]
[ ---  BRANCH (ram, 0x46bee0, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100038d3, 8), (unique, 0x100038d3, 8) INT_ADD (unique, 0x100038cb, 8) , (const, 0x20, 8), (unique, 0x100038cb, 8) CAST (register, 0x0, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x1, 8) , (const, 0x4, 8)]
[(ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x28b, 4), (ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x288, 4)]
[(ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x28b, 4), (ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x288, 4)]
[(ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x28b, 4), (ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x288, 4)]
[(ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x28b, 4), (ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x288, 4)]
[(ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x28b, 4), (ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x288, 4)]
[(ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x28b, 4), (ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x288, 4)]
[(ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x28b, 4), (ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x288, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0xbd80, 8) , (register, 0x30, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 4) MULTIEQUAL (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4)]
[(stack, 0xffffffffffffff5c, 4) MULTIEQUAL (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4)]
[(stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff52, 2) MULTIEQUAL (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff28, 16) MULTIEQUAL (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16)]
[(stack, 0xffffffffffffff18, 16) MULTIEQUAL (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee4, 4) MULTIEQUAL (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4)]
[(stack, 0xfffffffffffffee0, 4) MULTIEQUAL (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed4, 4) MULTIEQUAL (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4)]
[(stack, 0xfffffffffffffed0, 4) MULTIEQUAL (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffec4, 4) MULTIEQUAL (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4)]
[(stack, 0xfffffffffffffec0, 4) MULTIEQUAL (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4)]
[(stack, 0xfffffffffffffebc, 4) MULTIEQUAL (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4)]
[(stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(ram, 0x4ae3d0, 8) MULTIEQUAL (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8)]
[(ram, 0x4ae3c8, 8) MULTIEQUAL (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8)]
[(ram, 0x4ae3c0, 8) MULTIEQUAL (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8)]
[(ram, 0x4ae3b0, 8) MULTIEQUAL (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8)]
[(ram, 0x4ae3a0, 10) MULTIEQUAL (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10)]
[(ram, 0x4ae390, 8) MULTIEQUAL (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8)]
[(ram, 0x4ae380, 16) MULTIEQUAL (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x80, 1) MULTIEQUAL (register, 0x80, 1) , (stack, 0xffffffffffffff18, 1)]
[(register, 0x8, 4) MULTIEQUAL (register, 0x8, 4) , (stack, 0xffffffffffffff28, 4)]
[(unique, 0x100029b4, 8) COPY (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x46c898, 1) , (register, 0x0, 1), (register, 0x0, 1) INT_NOTEQUAL (unique, 0x10000e8c, 4) , (const, 0xffffffff, 4), (unique, 0x10000e8c, 4) MULTIEQUAL (register, 0x30, 4) , (register, 0x0, 4)]
[(register, 0xa8, 4) INT_ADD (register, 0xa8, 4) , (const, 0x3, 4)]
[(unique, 0x10002974, 8) COPY (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x46bf29, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x58c00, 1) , (const, 0x0, 1), (unique, 0x58c00, 1) INT_AND (unique, 0xbb00, 1) , (const, 0x20, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x100038db, 8), (unique, 0x100038db, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (stack, 0xffffffffffffff40, 8) , (const, 0x3, 8) , (const, 0x4, 8)]
[(unique, 0x1000297c, 8) COPY (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x46bf29, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x80, 1) , (const, 0x0, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x2c3, 4)]
[(ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x2c3, 4)]
[(ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x2c3, 4)]
[(ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x2c3, 4)]
[(ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x2c3, 4)]
[(ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x2c3, 4)]
[(ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x2c3, 4)]
[(ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x2c3, 4)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x2c3, 4)]
[(stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x2c3, 4)]
[(stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x2c3, 4)]
[(stack, 0xfffffffffffffec0, 4) INDIRECT (stack, 0xfffffffffffffec0, 4) , (const, 0x2c3, 4)]
[(stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x2c3, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x2c3, 4)]
[(stack, 0xfffffffffffffed0, 4) INDIRECT (stack, 0xfffffffffffffed0, 4) , (const, 0x2c3, 4)]
[(stack, 0xfffffffffffffed4, 4) INDIRECT (stack, 0xfffffffffffffed4, 4) , (const, 0x2c3, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x2c3, 4)]
[(stack, 0xfffffffffffffee0, 4) INDIRECT (stack, 0xfffffffffffffee0, 4) , (const, 0x2c3, 4)]
[(stack, 0xfffffffffffffee4, 4) INDIRECT (stack, 0xfffffffffffffee4, 4) , (const, 0x2c3, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x2c3, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x2c3, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x2c3, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x2c3, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x2c3, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x2c3, 4)]
[(stack, 0xffffffffffffff18, 16) INDIRECT (stack, 0xffffffffffffff18, 16) , (const, 0x2c3, 4)]
[(stack, 0xffffffffffffff28, 16) INDIRECT (stack, 0xffffffffffffff28, 16) , (const, 0x2c3, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x2c3, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x2c3, 4)]
[(stack, 0xffffffffffffff52, 2) INDIRECT (stack, 0xffffffffffffff52, 2) , (const, 0x2c3, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x2c3, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x2c3, 4)]
[(stack, 0xffffffffffffff5c, 4) INDIRECT (stack, 0xffffffffffffff5c, 4) , (const, 0x2c3, 4)]
[(stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0x2c3, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x2c3, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x2c3, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x2c3, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x2c3, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x2c3, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x2c3, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x2c3, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x2c3, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2c3, 4)]
[(register, 0x0, 8) CALL (ram, 0x478510, 8) , (register, 0x38, 8) , (const, 0x20, 8) , (register, 0x18, 8), (register, 0x18, 8) INT_SEXT (unique, 0x100038e3, 4), (unique, 0x100038e3, 4) CAST (register, 0x8, 4)]
[(stack, 0xffffffffffffff40, 4) SUBPIECE (stack, 0xffffffffffffff40, 8) , (const, 0x0, 8), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x2c3, 4), (stack, 0xffffffffffffff40, 8) CAST (unique, 0x100038ef, 8), (unique, 0x100038ef, 8) INT_OR (unique, 0x10000ff0, 8) , (unique, 0x10000ff8, 8), (unique, 0x10000ff8, 8) INT_ZEXT (register, 0x8, 4), (unique, 0x10000ff0, 8) INT_AND (unique, 0x100038e7, 8) , (const, 0xffffffff00000000, 8), (unique, 0x100038e7, 8) CAST (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 4) MULTIEQUAL (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4)]
[(stack, 0xffffffffffffff5c, 4) MULTIEQUAL (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4)]
[(stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff52, 2) MULTIEQUAL (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff28, 16) MULTIEQUAL (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16)]
[(stack, 0xffffffffffffff18, 16) MULTIEQUAL (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee4, 4) MULTIEQUAL (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4)]
[(stack, 0xfffffffffffffee0, 4) MULTIEQUAL (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed4, 4) MULTIEQUAL (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4)]
[(stack, 0xfffffffffffffed0, 4) MULTIEQUAL (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffec4, 4) MULTIEQUAL (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4)]
[(stack, 0xfffffffffffffec0, 4) MULTIEQUAL (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4)]
[(stack, 0xfffffffffffffebc, 4) MULTIEQUAL (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4)]
[(stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(ram, 0x4ae3d0, 8) MULTIEQUAL (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8)]
[(ram, 0x4ae3c8, 8) MULTIEQUAL (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8)]
[(ram, 0x4ae3c0, 8) MULTIEQUAL (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8)]
[(ram, 0x4ae3b0, 8) MULTIEQUAL (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8)]
[(ram, 0x4ae3a0, 10) MULTIEQUAL (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10)]
[(ram, 0x4ae390, 8) MULTIEQUAL (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8)]
[(ram, 0x4ae380, 16) MULTIEQUAL (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x8, 4) MULTIEQUAL (stack, 0xffffffffffffff40, 4) , (stack, 0xffffffffffffff40, 4)]
[(register, 0xa8, 4) INT_ADD (register, 0xa8, 4) , (const, 0x3, 4)]
[(unique, 0x100029bc, 8) COPY (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x46c898, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (register, 0x18, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8), (register, 0x18, 8) MULTIEQUAL (register, 0x18, 8) , (register, 0x18, 8)]
[(register, 0xa8, 4) INT_ADD (register, 0xa8, 4) , (register, 0x8, 4)]
[(unique, 0x10002984, 8) COPY (register, 0x20, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 4) MULTIEQUAL (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4)]
[(stack, 0xffffffffffffff5c, 4) MULTIEQUAL (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4)]
[(stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff52, 2) MULTIEQUAL (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff28, 16) MULTIEQUAL (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16)]
[(stack, 0xffffffffffffff18, 16) MULTIEQUAL (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee4, 4) MULTIEQUAL (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4)]
[(stack, 0xfffffffffffffee0, 4) MULTIEQUAL (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed4, 4) MULTIEQUAL (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4)]
[(stack, 0xfffffffffffffed0, 4) MULTIEQUAL (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffec4, 4) MULTIEQUAL (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4)]
[(stack, 0xfffffffffffffec0, 4) MULTIEQUAL (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4)]
[(stack, 0xfffffffffffffebc, 4) MULTIEQUAL (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4)]
[(stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(ram, 0x4ae3d0, 8) MULTIEQUAL (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8)]
[(ram, 0x4ae3c8, 8) MULTIEQUAL (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8)]
[(ram, 0x4ae3c0, 8) MULTIEQUAL (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8)]
[(ram, 0x4ae3b0, 8) MULTIEQUAL (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8)]
[(ram, 0x4ae3a0, 10) MULTIEQUAL (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10)]
[(ram, 0x4ae390, 8) MULTIEQUAL (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8)]
[(ram, 0x4ae380, 16) MULTIEQUAL (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xa8, 4) COPY (const, 0xffffffff, 4)]
[(unique, 0x1000298c, 8) COPY (register, 0x20, 8), (register, 0x20, 8) MULTIEQUAL (unique, 0x100029a4, 8) , (unique, 0x100029ac, 8) , (unique, 0x100029b4, 8) , (unique, 0x100029bc, 8) , (unique, 0x100029c4, 8) , (unique, 0x100029cc, 8) , (unique, 0x100029d4, 8) , (unique, 0x100029dc, 8) , (unique, 0x100029e4, 8) , (unique, 0x100029ec, 8) , (unique, 0x100029f4, 8) , (unique, 0x100029fc, 8) , (unique, 0x10002a04, 8) , (unique, 0x10002a0c, 8) , (unique, 0x10002a14, 8)]
[ ---  BRANCH (ram, 0x46bf29, 1)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff68, 8) MULTIEQUAL (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8) , (stack, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffff60, 4) MULTIEQUAL (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4) , (stack, 0xffffffffffffff60, 4)]
[(stack, 0xffffffffffffff5c, 4) MULTIEQUAL (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4) , (stack, 0xffffffffffffff5c, 4)]
[(stack, 0xffffffffffffff58, 4) MULTIEQUAL (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4) , (stack, 0xffffffffffffff58, 4)]
[(stack, 0xffffffffffffff54, 4) MULTIEQUAL (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4) , (stack, 0xffffffffffffff54, 4)]
[(stack, 0xffffffffffffff52, 2) MULTIEQUAL (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2) , (stack, 0xffffffffffffff52, 2)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff3c, 4) MULTIEQUAL (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4) , (stack, 0xffffffffffffff3c, 4)]
[(stack, 0xffffffffffffff38, 4) MULTIEQUAL (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4) , (stack, 0xffffffffffffff38, 4)]
[(stack, 0xffffffffffffff28, 16) MULTIEQUAL (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16) , (stack, 0xffffffffffffff28, 16)]
[(stack, 0xffffffffffffff18, 16) MULTIEQUAL (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16) , (stack, 0xffffffffffffff18, 16)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff08, 8) MULTIEQUAL (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8) , (stack, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xfffffffffffffef8, 8) MULTIEQUAL (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8) , (stack, 0xfffffffffffffef8, 8)]
[(stack, 0xfffffffffffffef0, 8) MULTIEQUAL (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8) , (stack, 0xfffffffffffffef0, 8)]
[(stack, 0xfffffffffffffee8, 8) MULTIEQUAL (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8) , (stack, 0xfffffffffffffee8, 8)]
[(stack, 0xfffffffffffffee4, 4) MULTIEQUAL (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4) , (stack, 0xfffffffffffffee4, 4)]
[(stack, 0xfffffffffffffee0, 4) MULTIEQUAL (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4) , (stack, 0xfffffffffffffee0, 4)]
[(stack, 0xfffffffffffffed8, 8) MULTIEQUAL (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8) , (stack, 0xfffffffffffffed8, 8)]
[(stack, 0xfffffffffffffed4, 4) MULTIEQUAL (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4) , (stack, 0xfffffffffffffed4, 4)]
[(stack, 0xfffffffffffffed0, 4) MULTIEQUAL (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4) , (stack, 0xfffffffffffffed0, 4)]
[(stack, 0xfffffffffffffec8, 8) MULTIEQUAL (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8) , (stack, 0xfffffffffffffec8, 8)]
[(stack, 0xfffffffffffffec4, 4) MULTIEQUAL (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4) , (stack, 0xfffffffffffffec4, 4)]
[(stack, 0xfffffffffffffec0, 4) MULTIEQUAL (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4) , (stack, 0xfffffffffffffec0, 4)]
[(stack, 0xfffffffffffffebc, 4) MULTIEQUAL (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4) , (stack, 0xfffffffffffffebc, 4)]
[(stack, 0xfffffffffffffeb8, 4) MULTIEQUAL (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4) , (stack, 0xfffffffffffffeb8, 4)]
[(stack, 0xfffffffffffffeb0, 8) MULTIEQUAL (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8) , (stack, 0xfffffffffffffeb0, 8)]
[(ram, 0x4ae3d0, 8) MULTIEQUAL (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8) , (ram, 0x4ae3d0, 8)]
[(ram, 0x4ae3c8, 8) MULTIEQUAL (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8) , (ram, 0x4ae3c8, 8)]
[(ram, 0x4ae3c0, 8) MULTIEQUAL (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8) , (ram, 0x4ae3c0, 8)]
[(ram, 0x4ae3b0, 8) MULTIEQUAL (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8) , (ram, 0x4ae3b0, 8)]
[(ram, 0x4ae3a0, 10) MULTIEQUAL (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10) , (ram, 0x4ae3a0, 10)]
[(ram, 0x4ae390, 8) MULTIEQUAL (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8) , (ram, 0x4ae390, 8)]
[(ram, 0x4ae380, 16) MULTIEQUAL (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16) , (ram, 0x4ae380, 16)]
[(register, 0xa8, 4) MULTIEQUAL (register, 0xa8, 4) , (register, 0xa8, 4) , (register, 0xa8, 4) , (register, 0xa8, 4) , (register, 0xa8, 4) , (register, 0xa8, 4) , (register, 0xa8, 4) , (register, 0xa8, 4) , (register, 0xa8, 4) , (register, 0x0, 4) , (register, 0xa8, 4)]
[(register, 0x20, 8) MULTIEQUAL (unique, 0x10002974, 8) , (unique, 0x1000297c, 8) , (unique, 0x10002984, 8) , (unique, 0x1000298c, 8) , (unique, 0x10002994, 8) , (unique, 0x1000299c, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x46e5e2, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffffc0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x100038f7, 8), (unique, 0x100038f7, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(ram, 0x4ae380, 16) COPY (ram, 0x4ae380, 16)]
[(ram, 0x4ae390, 8) COPY (ram, 0x4ae390, 8)]
[(ram, 0x4ae3a0, 10) COPY (ram, 0x4ae3a0, 10)]
[(ram, 0x4ae3b0, 8) COPY (ram, 0x4ae3b0, 8)]
[(ram, 0x4ae3c0, 8) COPY (ram, 0x4ae3c0, 8)]
[(ram, 0x4ae3c8, 8) COPY (ram, 0x4ae3c8, 8)]
[(ram, 0x4ae3d0, 8) COPY (ram, 0x4ae3d0, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 4), (register, 0x0, 4) COPY (register, 0xa8, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100038ff, 8) , (const, 0x46e5e7, 8), (unique, 0x100038ff, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x302, 4), (stack, 0xfffffffffffffeb0, 8) INDIRECT (stack, 0xfffffffffffffeb0, 8) , (const, 0x301, 4)]
[(stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x302, 4), (stack, 0xfffffffffffffeb8, 4) INDIRECT (stack, 0xfffffffffffffeb8, 4) , (const, 0x301, 4)]
[(stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x302, 4), (stack, 0xfffffffffffffebc, 4) INDIRECT (stack, 0xfffffffffffffebc, 4) , (const, 0x301, 4)]
[(stack, 0xfffffffffffffec0, 4) INDIRECT (stack, 0xfffffffffffffec0, 4) , (const, 0x302, 4), (stack, 0xfffffffffffffec0, 4) INDIRECT (stack, 0xfffffffffffffec0, 4) , (const, 0x301, 4)]
[(stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x302, 4), (stack, 0xfffffffffffffec4, 4) INDIRECT (stack, 0xfffffffffffffec4, 4) , (const, 0x301, 4)]
[(stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x302, 4), (stack, 0xfffffffffffffec8, 8) INDIRECT (stack, 0xfffffffffffffec8, 8) , (const, 0x301, 4)]
[(stack, 0xfffffffffffffed0, 4) INDIRECT (stack, 0xfffffffffffffed0, 4) , (const, 0x302, 4), (stack, 0xfffffffffffffed0, 4) INDIRECT (stack, 0xfffffffffffffed0, 4) , (const, 0x301, 4)]
[(stack, 0xfffffffffffffed4, 4) INDIRECT (stack, 0xfffffffffffffed4, 4) , (const, 0x302, 4), (stack, 0xfffffffffffffed4, 4) INDIRECT (stack, 0xfffffffffffffed4, 4) , (const, 0x301, 4)]
[(stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x302, 4), (stack, 0xfffffffffffffed8, 8) INDIRECT (stack, 0xfffffffffffffed8, 8) , (const, 0x301, 4)]
[(stack, 0xfffffffffffffee0, 4) INDIRECT (stack, 0xfffffffffffffee0, 4) , (const, 0x302, 4), (stack, 0xfffffffffffffee0, 4) INDIRECT (stack, 0xfffffffffffffee0, 4) , (const, 0x301, 4)]
[(stack, 0xfffffffffffffee4, 4) INDIRECT (stack, 0xfffffffffffffee4, 4) , (const, 0x302, 4), (stack, 0xfffffffffffffee4, 4) INDIRECT (stack, 0xfffffffffffffee4, 4) , (const, 0x301, 4)]
[(stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x302, 4), (stack, 0xfffffffffffffee8, 8) INDIRECT (stack, 0xfffffffffffffee8, 8) , (const, 0x301, 4)]
[(stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x302, 4), (stack, 0xfffffffffffffef0, 8) INDIRECT (stack, 0xfffffffffffffef0, 8) , (const, 0x301, 4)]
[(stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x302, 4), (stack, 0xfffffffffffffef8, 8) INDIRECT (stack, 0xfffffffffffffef8, 8) , (const, 0x301, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x302, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x301, 4)]
[(stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x302, 4), (stack, 0xffffffffffffff08, 8) INDIRECT (stack, 0xffffffffffffff08, 8) , (const, 0x301, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x302, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x301, 4)]
[(stack, 0xffffffffffffff18, 16) INDIRECT (stack, 0xffffffffffffff18, 16) , (const, 0x302, 4), (stack, 0xffffffffffffff18, 16) INDIRECT (stack, 0xffffffffffffff18, 16) , (const, 0x301, 4)]
[(stack, 0xffffffffffffff28, 16) INDIRECT (stack, 0xffffffffffffff28, 16) , (const, 0x302, 4), (stack, 0xffffffffffffff28, 16) INDIRECT (stack, 0xffffffffffffff28, 16) , (const, 0x301, 4)]
[(stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x302, 4), (stack, 0xffffffffffffff38, 4) INDIRECT (stack, 0xffffffffffffff38, 4) , (const, 0x301, 4)]
[(stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x302, 4), (stack, 0xffffffffffffff3c, 4) INDIRECT (stack, 0xffffffffffffff3c, 4) , (const, 0x301, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x302, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x301, 4)]
[(stack, 0xffffffffffffff52, 2) INDIRECT (stack, 0xffffffffffffff52, 2) , (const, 0x302, 4), (stack, 0xffffffffffffff52, 2) INDIRECT (stack, 0xffffffffffffff52, 2) , (const, 0x301, 4)]
[(stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x302, 4), (stack, 0xffffffffffffff54, 4) INDIRECT (stack, 0xffffffffffffff54, 4) , (const, 0x301, 4)]
[(stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x302, 4), (stack, 0xffffffffffffff58, 4) INDIRECT (stack, 0xffffffffffffff58, 4) , (const, 0x301, 4)]
[(stack, 0xffffffffffffff5c, 4) INDIRECT (stack, 0xffffffffffffff5c, 4) , (const, 0x302, 4), (stack, 0xffffffffffffff5c, 4) INDIRECT (stack, 0xffffffffffffff5c, 4) , (const, 0x301, 4)]
[(stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0x302, 4), (stack, 0xffffffffffffff60, 4) INDIRECT (stack, 0xffffffffffffff60, 4) , (const, 0x301, 4)]
[(stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x302, 4), (stack, 0xffffffffffffff68, 8) INDIRECT (stack, 0xffffffffffffff68, 8) , (const, 0x301, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x302, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x301, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x302, 4), (stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x301, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x302, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x301, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x302, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x301, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x302, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x301, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x302, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x301, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x302, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x301, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x302, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x301, 4)]
[ ---  CALL (ram, 0x458dd0, 8)]
[(ram, 0x4ae380, 16) COPY (ram, 0x4ae380, 16), (ram, 0x4ae380, 16) INDIRECT (ram, 0x4ae380, 16) , (const, 0x302, 4)]
[(ram, 0x4ae390, 8) COPY (ram, 0x4ae390, 8), (ram, 0x4ae390, 8) INDIRECT (ram, 0x4ae390, 8) , (const, 0x302, 4)]
[(ram, 0x4ae3a0, 10) COPY (ram, 0x4ae3a0, 10), (ram, 0x4ae3a0, 10) INDIRECT (ram, 0x4ae3a0, 10) , (const, 0x302, 4)]
[(ram, 0x4ae3b0, 8) COPY (ram, 0x4ae3b0, 8), (ram, 0x4ae3b0, 8) INDIRECT (ram, 0x4ae3b0, 8) , (const, 0x302, 4)]
[(ram, 0x4ae3c0, 8) COPY (ram, 0x4ae3c0, 8), (ram, 0x4ae3c0, 8) INDIRECT (ram, 0x4ae3c0, 8) , (const, 0x302, 4)]
[(ram, 0x4ae3c8, 8) COPY (ram, 0x4ae3c8, 8), (ram, 0x4ae3c8, 8) INDIRECT (ram, 0x4ae3c8, 8) , (const, 0x302, 4)]
[(ram, 0x4ae3d0, 8) COPY (ram, 0x4ae3d0, 8), (ram, 0x4ae3d0, 8) INDIRECT (ram, 0x4ae3d0, 8) , (const, 0x302, 4)]
[ ---  RETURN (const, 0x1, 4)]
