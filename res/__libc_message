[(register, 0x38, 4) INT_AND (register, 0x38, 4) , (const, 0x1, 4)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff68, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff68, 8)]
[(stack, 0xffffffffffffffa8, 8) COPY (register, 0x10, 8)]
[(stack, 0xffffffffffffffb0, 8) COPY (register, 0x8, 8)]
[(stack, 0xffffffffffffffb8, 8) COPY (register, 0x80, 8)]
[(stack, 0xffffffffffffffc0, 8) COPY (register, 0x88, 8)]
[(stack, 0xffffffffffffff90, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x100003a2, 8), (unique, 0x100003a2, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8)]
[(stack, 0xffffffffffffff78, 4) COPY (const, 0x10, 4)]
[(stack, 0xffffffffffffff80, 8) COPY (unique, 0x100003aa, 8), (unique, 0x100003aa, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0x20, 8) , (const, 0x8, 8)]
[(stack, 0xffffffffffffff88, 8) COPY (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff98, 8)]
[(unique, 0x10000330, 1) COPY (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x1000039a, 8), (unique, 0x1000039a, 8) CAST (register, 0x30, 8)]
[(unique, 0x10000336, 4) COPY (register, 0xb0, 4), (register, 0xb0, 4) COPY (const, 0x0, 4)]
[(unique, 0x1000034a, 8) COPY (register, 0xa0, 8), (register, 0xa0, 8) COPY (const, 0x0, 8)]
[(unique, 0x1000036a, 8) COPY (register, 0x20, 8), (register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff68, 8)]
[(unique, 0x1000038a, 8) COPY (register, 0x30, 8)]
[ ---  CBRANCH (ram, 0x41b310, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x1000039a, 8), (unique, 0x1000039a, 8) CAST (register, 0x30, 8)]
[(register, 0x18, 8) MULTIEQUAL (unique, 0x10000382, 8) , (unique, 0x1000038a, 8) , (unique, 0x10000392, 8)]
[(unique, 0xbb00, 1) MULTIEQUAL (unique, 0x1000032f, 1) , (unique, 0x10000330, 1) , (unique, 0x10000331, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 4) MULTIEQUAL (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(ram, 0x4c77c0, 8) MULTIEQUAL (ram, 0x4c77c0, 8) , (ram, 0x4c77c0, 8) , (ram, 0x4c77c0, 8)]
[(ram, 0x4c6118, 8) MULTIEQUAL (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x30, 8) , (register, 0x18, 8)]
[(register, 0x20, 8) COPY (unique, 0x1000037a, 8), (unique, 0x1000037a, 8) MULTIEQUAL (unique, 0x10000362, 8) , (unique, 0x1000036a, 8) , (unique, 0x10000372, 8)]
[(register, 0xa0, 8) COPY (unique, 0x1000035a, 8), (unique, 0x1000035a, 8) MULTIEQUAL (unique, 0x10000342, 8) , (unique, 0x1000034a, 8) , (unique, 0x10000352, 8)]
[(register, 0xb0, 4) COPY (unique, 0x1000033e, 4), (unique, 0x1000033e, 4) MULTIEQUAL (unique, 0x10000332, 4) , (unique, 0x10000336, 4) , (unique, 0x1000033a, 4)]
[ ---  CBRANCH (ram, 0x41b0f0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x25, 1), (unique, 0xbb00, 1) MULTIEQUAL (unique, 0xbb00, 1) , (unique, 0xbb00, 1) , (unique, 0xbb00, 1)]
[ ---  CBRANCH (ram, 0x41b0f0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x73, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100003ba, 8), (unique, 0x100003ba, 8) INT_ADD (unique, 0x100003b2, 8) , (const, 0x1, 8), (unique, 0x100003b2, 8) CAST (register, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100003d2, 8) , (const, 0x41b0fe, 8), (unique, 0x100003d2, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x3a3, 4)]
[(ram, 0x4c6118, 8) INDIRECT (ram, 0x4c6118, 8) , (const, 0x3a3, 4)]
[(ram, 0x4c77c0, 8) INDIRECT (ram, 0x4c77c0, 8) , (const, 0x3a3, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x3a3, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x3a2, 4)]
[(stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0x3a3, 4), (stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0x3a2, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x3a3, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x3a3, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x3a3, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x3a3, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x3a3, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x3a3, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x3a3, 4)]
[(unique, 0x1000032f, 1) COPY (unique, 0xbb00, 1)]
[(unique, 0x10000332, 4) COPY (register, 0xb0, 4)]
[(unique, 0x10000342, 8) COPY (register, 0xa0, 8)]
[(unique, 0x10000362, 8) COPY (register, 0x20, 8)]
[(unique, 0x10000382, 8) COPY (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x41b110, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x100003e2, 8), (unique, 0x100003e2, 8) CAST (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x100003da, 8), (unique, 0x100003da, 8) CALL (ram, 0x4010a0, 8) , (unique, 0x3100, 8) , (const, 0x25, 8), (unique, 0x3100, 8) CAST (unique, 0x100003ca, 8), (unique, 0x100003ca, 8) INT_ADD (unique, 0x100003c2, 8) , (const, 0x1, 8), (unique, 0x100003c2, 8) CAST (register, 0x0, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff78, 4) MULTIEQUAL (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(ram, 0x4c77c0, 8) MULTIEQUAL (ram, 0x4c77c0, 8) , (ram, 0x4c77c0, 8)]
[(ram, 0x4c6118, 8) MULTIEQUAL (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[(unique, 0x100002ab, 8) COPY (stack, 0xffffffffffffff80, 8), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[ ---  CBRANCH (ram, 0x41b178, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x25, 1)]
[ ---  CBRANCH (ram, 0x41b116, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x73, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100003f2, 8), (unique, 0x100003f2, 8) INT_ADD (unique, 0x100003ea, 8) , (const, 0x1, 8), (unique, 0x100003ea, 8) CAST (register, 0x18, 8)]
[(register, 0x80, 8) CAST (unique, 0x1000040a, 8), (unique, 0x1000040a, 8) INT_SUB (unique, 0x100003fa, 8) , (unique, 0x10000402, 8), (unique, 0x10000402, 8) CAST (register, 0x18, 8), (unique, 0x100003fa, 8) CAST (register, 0x0, 8)]
[(unique, 0x100002c3, 8) COPY (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x41b332, 1) , (unique, 0xc900, 1), (unique, 0xc900, 1) INT_LESS (stack, 0xffffffffffffff78, 4) , (const, 0x30, 4)]
[(stack, 0xffffffffffffff80, 8) COPY (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (stack, 0xffffffffffffff80, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[ ---  BRANCH (ram, 0x41b196, 1)]
[(register, 0x10, 8) CAST (unique, 0x10000412, 8), (unique, 0x10000412, 8) PTRADD (stack, 0xffffffffffffff88, 8) , (register, 0x10, 8) , (const, 0x1, 8), (register, 0x10, 8) INT_ZEXT (stack, 0xffffffffffffff78, 4)]
[(stack, 0xffffffffffffff78, 4) COPY (register, 0x0, 4), (register, 0x0, 4) INT_ADD (stack, 0xffffffffffffff78, 4) , (const, 0x8, 4)]
[(register, 0x18, 8) CAST (unique, 0x1000042a, 8), (unique, 0x1000042a, 8) INT_ADD (unique, 0x10000422, 8) , (const, 0x2, 8), (unique, 0x10000422, 8) CAST (register, 0x18, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000432, 8) , (const, 0x41b1ac, 8), (unique, 0x10000432, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x38f, 4)]
[(ram, 0x4c6118, 8) INDIRECT (ram, 0x4c6118, 8) , (const, 0x38f, 4)]
[(ram, 0x4c77c0, 8) INDIRECT (ram, 0x4c77c0, 8) , (const, 0x38f, 4)]
[(stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0x38f, 4), (stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0x38e, 4), (stack, 0xffffffffffffff78, 4) MULTIEQUAL (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x38f, 4), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x38f, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x38f, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x38f, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x38f, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x38f, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x38f, 4)]
[(register, 0x0, 8) CAST (unique, 0x1000043a, 8), (unique, 0x1000043a, 8) CALL (ram, 0x401190, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) CAST (unique, 0x1000041a, 8), (unique, 0x1000041a, 8) LOAD (const, 0x1b1, 4) , (register, 0x10, 8), (register, 0x10, 8) MULTIEQUAL (register, 0x10, 8) , (unique, 0x100002ab, 8)]
[(unique, 0x100002cb, 8) COPY (stack, 0xffffffffffffff70, 8), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x38f, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x38e, 4), (stack, 0xffffffffffffff70, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) CAST (unique, 0x1000041a, 8), (unique, 0x1000041a, 8) LOAD (const, 0x1b1, 4) , (register, 0x10, 8), (register, 0x10, 8) MULTIEQUAL (register, 0x10, 8) , (unique, 0x100002ab, 8)]
[ ---  BRANCH (ram, 0x41b122, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xffffffffffffffe0, 8) , (const, 0x1, 8)]
[(register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xffffffffffffffe0, 8) , (const, 0x1, 8)]
[(register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xffffffffffffffe0, 8) , (const, 0x1, 8)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0xe5, 4), (stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0xe5, 4), (stack, 0xffffffffffffff78, 4) MULTIEQUAL (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000044a, 8) , (unique, 0xbe00, 8), (unique, 0x1000044a, 8) CAST (unique, 0x3800, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000442, 8), (unique, 0x10000442, 8) CAST (unique, 0x3800, 8), (unique, 0x3800, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x0, 8) , (unique, 0x10000462, 8), (unique, 0x10000462, 8) CAST (register, 0x8, 8), (register, 0x0, 8) CAST (unique, 0x1000045a, 8), (unique, 0x1000045a, 8) INT_AND (unique, 0x10000452, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x10000452, 8) CAST (unique, 0x3800, 8), (unique, 0x3800, 8) PTRADD (register, 0x20, 8) , (const, 0xffffffffffffffef, 8) , (const, 0x1, 8), (register, 0x8, 8) MULTIEQUAL (unique, 0x100002c3, 8) , (unique, 0x100002cb, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0x1000046a, 8), (unique, 0x1000046a, 8) CAST (register, 0x80, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x8, 8), (register, 0x0, 8) CAST (unique, 0x1000045a, 8), (unique, 0x1000045a, 8) INT_AND (unique, 0x10000452, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x10000452, 8) CAST (unique, 0x3800, 8), (unique, 0x3800, 8) PTRADD (register, 0x20, 8) , (const, 0xffffffffffffffef, 8) , (const, 0x1, 8), (register, 0x80, 8) MULTIEQUAL (register, 0x80, 8) , (register, 0x0, 8)]
[(ram, 0x4c6118, 8) INDIRECT (ram, 0x4c6118, 8) , (const, 0x104, 4), (ram, 0x4c6118, 8) INDIRECT (ram, 0x4c6118, 8) , (const, 0x101, 4), (ram, 0x4c6118, 8) INDIRECT (ram, 0x4c6118, 8) , (const, 0xfe, 4), (ram, 0x4c6118, 8) MULTIEQUAL (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8)]
[(ram, 0x4c77c0, 8) INDIRECT (ram, 0x4c77c0, 8) , (const, 0x104, 4), (ram, 0x4c77c0, 8) INDIRECT (ram, 0x4c77c0, 8) , (const, 0x101, 4), (ram, 0x4c77c0, 8) INDIRECT (ram, 0x4c77c0, 8) , (const, 0xfe, 4), (ram, 0x4c77c0, 8) MULTIEQUAL (ram, 0x4c77c0, 8) , (ram, 0x4c77c0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0x10000472, 8), (unique, 0x10000472, 8) CAST (register, 0xa0, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x2, 8) , (const, 0x8, 8), (register, 0x0, 8) CAST (unique, 0x1000045a, 8), (unique, 0x1000045a, 8) INT_AND (unique, 0x10000452, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x10000452, 8) CAST (unique, 0x3800, 8), (unique, 0x3800, 8) PTRADD (register, 0x20, 8) , (const, 0xffffffffffffffef, 8) , (const, 0x1, 8)]
[(unique, 0x10000331, 1) COPY (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x1000047a, 8), (unique, 0x1000047a, 8) CAST (register, 0x18, 8), (register, 0x18, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x18, 8)]
[(unique, 0x1000033a, 4) COPY (register, 0x10, 4), (register, 0x10, 4) INT_ADD (register, 0xb0, 4) , (const, 0x1, 4)]
[(unique, 0x10000352, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x1000045a, 8), (unique, 0x1000045a, 8) INT_AND (unique, 0x10000452, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x10000452, 8) CAST (unique, 0x3800, 8), (unique, 0x3800, 8) PTRADD (register, 0x20, 8) , (const, 0xffffffffffffffef, 8) , (const, 0x1, 8)]
[(unique, 0x10000372, 8) COPY (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xffffffffffffffe0, 8) , (const, 0x1, 8)]
[(unique, 0x10000392, 8) COPY (register, 0x18, 8), (register, 0x18, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x18, 8)]
[ ---  CBRANCH (ram, 0x41b1bb, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x0, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x1000047a, 8), (unique, 0x1000047a, 8) CAST (register, 0x18, 8), (register, 0x18, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x18, 8)]
[(register, 0x18, 8) PTRADD (register, 0x20, 8) , (unique, 0x100001b7, 8) , (const, 0x1, 8), (unique, 0x100001b7, 8) INT_SUB (const, 0xffffffffffffffe0, 8) , (register, 0x30, 8), (register, 0x30, 8) INT_AND (register, 0x0, 8) , (const, 0xfffffffffffff000, 8), (register, 0x0, 8) INT_ADD (register, 0x0, 8) , (const, 0x10, 8), (register, 0x0, 8) INT_MULT (register, 0x10, 8) , (const, 0x10, 8), (register, 0x10, 8) INT_SEXT (register, 0x10, 4)]
[(unique, 0x1000031f, 8) COPY (register, 0x20, 8)]
[(unique, 0x1000016d, 8) MULTIEQUAL (unique, 0x1000031f, 8) , (unique, 0x10000327, 8)]
[(unique, 0x10000175, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x41b1f6, 1) , (unique, 0x1000016c, 1), (unique, 0x1000016c, 1) INT_NOTEQUAL (register, 0x20, 8) , (register, 0x18, 8), (register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8)]
[(register, 0x20, 8) PTRADD (unique, 0x1000016d, 8) , (const, 0xfffffffffffff000, 8) , (const, 0x1, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000048a, 8) , (unique, 0xbe00, 8), (unique, 0x1000048a, 8) CAST (unique, 0x3c80, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000482, 8), (unique, 0x10000482, 8) CAST (unique, 0x3c80, 8), (unique, 0x3c80, 8) PTRADD (unique, 0x1000016d, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x20, 8) PTRADD (unique, 0x1000016d, 8) , (const, 0xfffffffffffff000, 8) , (const, 0x1, 8)]
[(unique, 0x10000327, 8) COPY (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x1000016d, 8) , (const, 0xfffffffffffff000, 8) , (const, 0x1, 8)]
[(register, 0x20, 8) PTRADD (unique, 0x10000175, 8) , (unique, 0x100000f9, 8) , (const, 0x1, 8), (unique, 0x100000f9, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_ZEXT (register, 0x0, 4), (register, 0x0, 4) INT_AND (register, 0x0, 4) , (const, 0xfff, 4), (register, 0x0, 4) SUBPIECE (register, 0x0, 8) , (const, 0x0, 4)]
[(register, 0x20, 8) PTRADD (unique, 0x10000175, 8) , (unique, 0x100000f9, 8) , (const, 0x1, 8), (unique, 0x100000f9, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_ZEXT (register, 0x0, 4), (register, 0x0, 4) INT_AND (register, 0x0, 4) , (const, 0xfff, 4), (register, 0x0, 4) SUBPIECE (register, 0x0, 8) , (const, 0x0, 4)]
[(register, 0x20, 8) PTRADD (unique, 0x10000175, 8) , (unique, 0x100000f9, 8) , (const, 0x1, 8), (unique, 0x100000f9, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_ZEXT (register, 0x0, 4), (register, 0x0, 4) INT_AND (register, 0x0, 4) , (const, 0xfff, 4), (register, 0x0, 4) SUBPIECE (register, 0x0, 8) , (const, 0x0, 4)]
[(register, 0x20, 8) PTRADD (unique, 0x10000175, 8) , (unique, 0x100000f9, 8) , (const, 0x1, 8), (unique, 0x100000f9, 8) INT_2COMP (register, 0x0, 8), (register, 0x0, 8) INT_ZEXT (register, 0x0, 4), (register, 0x0, 4) INT_AND (register, 0x0, 4) , (const, 0xfff, 4), (register, 0x0, 4) SUBPIECE (register, 0x0, 8) , (const, 0x0, 4)]
[ ---  CBRANCH (ram, 0x41b343, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) INT_ZEXT (register, 0x0, 4), (register, 0x0, 4) INT_AND (register, 0x0, 4) , (const, 0xfff, 4), (register, 0x0, 4) SUBPIECE (register, 0x0, 8) , (const, 0x0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000049a, 8) , (unique, 0xbe00, 8), (unique, 0x1000049a, 8) CAST (unique, 0x3880, 8), (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000492, 8), (unique, 0x10000492, 8) CAST (unique, 0x3880, 8), (unique, 0x3880, 8) PTRADD (unique, 0x10000175, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[ ---  BRANCH (ram, 0x41b207, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3400, 8) , (unique, 0x100004ba, 8), (unique, 0x100004ba, 8) CAST (register, 0x8, 8), (unique, 0x3400, 8) CAST (unique, 0x100004b2, 8), (unique, 0x100004b2, 8) PTRADD (register, 0x18, 8) , (unique, 0x100001ef, 8) , (const, 0x8, 8), (unique, 0x100001ef, 8) INT_MULT (register, 0xa8, 8) , (const, 0x2, 8), (register, 0x18, 8) CAST (unique, 0x100004aa, 8), (unique, 0x100004aa, 8) INT_AND (unique, 0x100004a2, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x100004a2, 8) CAST (unique, 0x3800, 8), (unique, 0x3800, 8) PTRADD (unique, 0x10000175, 8) , (unique, 0x100001cf, 8) , (const, 0x1, 8), (unique, 0x100001cf, 8) INT_ADD (unique, 0x100000f9, 8) , (const, 0xf, 8), (register, 0xa8, 8) INT_SEXT (register, 0xb0, 4)]
[(ram, 0x4c6118, 8) INDIRECT (ram, 0x4c6118, 8) , (const, 0x1df, 4), (ram, 0x4c6118, 8) INDIRECT (ram, 0x4c6118, 8) , (const, 0x1dc, 4)]
[(ram, 0x4c77c0, 8) INDIRECT (ram, 0x4c77c0, 8) , (const, 0x1df, 4), (ram, 0x4c77c0, 8) INDIRECT (ram, 0x4c77c0, 8) , (const, 0x1dc, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0x100004c2, 8), (unique, 0x100004c2, 8) CAST (register, 0x80, 8), (unique, 0x3100, 8) PTRADD (unique, 0x3400, 8) , (const, 0x1, 8) , (const, 0x8, 8), (unique, 0x3400, 8) CAST (unique, 0x100004b2, 8), (unique, 0x100004b2, 8) PTRADD (register, 0x18, 8) , (unique, 0x100001ef, 8) , (const, 0x8, 8), (unique, 0x100001ef, 8) INT_MULT (register, 0xa8, 8) , (const, 0x2, 8), (register, 0x18, 8) CAST (unique, 0x100004aa, 8), (unique, 0x100004aa, 8) INT_AND (unique, 0x100004a2, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x100004a2, 8) CAST (unique, 0x3800, 8), (unique, 0x3800, 8) PTRADD (unique, 0x10000175, 8) , (unique, 0x100001cf, 8) , (const, 0x1, 8), (unique, 0x100001cf, 8) INT_ADD (unique, 0x100000f9, 8) , (const, 0xf, 8), (register, 0xa8, 8) INT_SEXT (register, 0xb0, 4)]
[ ---  CBRANCH (ram, 0x41b25b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xb0, 4) , (const, 0x0, 4)]
[(register, 0x38, 8) PTRADD (register, 0x18, 8) , (unique, 0x1000022f, 8) , (const, 0x8, 8), (unique, 0x1000022f, 8) INT_ADD (unique, 0x10000227, 8) , (unique, 0x1000021f, 8), (unique, 0x10000227, 8) INT_MULT (register, 0xa8, 8) , (const, 0x2, 8), (unique, 0x1000021f, 8) INT_ADD (unique, 0x10000217, 8) , (const, 0xfffffffffffffffe, 8), (unique, 0x10000217, 8) INT_MULT (register, 0x8, 8) , (const, 0xfffffffffffffffe, 8), (register, 0x8, 8) INT_ZEXT (unique, 0x3100, 4), (unique, 0x3100, 4) INT_SUB (register, 0xb0, 4) , (const, 0x1, 4)]
[(unique, 0x100002b3, 8) COPY (unique, 0x3400, 8)]
[(unique, 0xbd80, 8) CAST (unique, 0x100004ca, 8), (unique, 0x100004ca, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRADD (register, 0xa0, 8) , (const, 0x2, 8) , (const, 0x8, 8), (register, 0xa0, 8) MULTIEQUAL (register, 0xa0, 8) , (unique, 0xbd80, 8)]
[(register, 0x80, 8) CAST (unique, 0x100004e2, 8), (unique, 0x100004e2, 8) INT_ADD (unique, 0x100004d2, 8) , (unique, 0x100004da, 8), (unique, 0x100004da, 8) CAST (unique, 0xbd80, 8), (unique, 0x100004d2, 8) CAST (register, 0x80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRADD (register, 0xa0, 8) , (const, 0x1, 8) , (const, 0x8, 8), (register, 0x80, 8) MULTIEQUAL (register, 0x80, 8) , (register, 0x80, 8), (register, 0xa0, 8) MULTIEQUAL (register, 0xa0, 8) , (unique, 0xbd80, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x0, 8) , (unique, 0xbd80, 8), (register, 0x0, 8) PTRADD (register, 0x0, 8) , (const, 0xfffffffffffffffe, 8) , (const, 0x8, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0xa0, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x100002b3, 8) , (unique, 0x100002bb, 8), (register, 0xa0, 8) MULTIEQUAL (register, 0xa0, 8) , (unique, 0xbd80, 8)]
[(ram, 0x4c6118, 8) INDIRECT (ram, 0x4c6118, 8) , (const, 0x23d, 4), (ram, 0x4c6118, 8) INDIRECT (ram, 0x4c6118, 8) , (const, 0x23a, 4), (ram, 0x4c6118, 8) MULTIEQUAL (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8)]
[(ram, 0x4c77c0, 8) INDIRECT (ram, 0x4c77c0, 8) , (const, 0x23d, 4), (ram, 0x4c77c0, 8) INDIRECT (ram, 0x4c77c0, 8) , (const, 0x23a, 4), (ram, 0x4c77c0, 8) MULTIEQUAL (ram, 0x4c77c0, 8) , (ram, 0x4c77c0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0xbd80, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0xffffffffffffffff, 8) , (const, 0x8, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRADD (register, 0xa0, 8) , (const, 0x1, 8) , (const, 0x8, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x100002b3, 8) , (unique, 0x100002bb, 8), (register, 0xa0, 8) MULTIEQUAL (register, 0xa0, 8) , (unique, 0xbd80, 8)]
[(unique, 0x100002bb, 8) COPY (register, 0x0, 8), (register, 0x0, 8) PTRADD (register, 0x0, 8) , (const, 0xfffffffffffffffe, 8) , (const, 0x8, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x100002b3, 8) , (unique, 0x100002bb, 8)]
[ ---  CBRANCH (ram, 0x41b23a, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x100004ea, 8) , (register, 0x0, 8), (unique, 0x100004ea, 8) CAST (register, 0x38, 8), (register, 0x0, 8) PTRADD (register, 0x0, 8) , (const, 0xfffffffffffffffe, 8) , (const, 0x8, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x100002b3, 8) , (unique, 0x100002bb, 8)]
[(ram, 0x4c77c0, 8) MULTIEQUAL (ram, 0x4c77c0, 8) , (ram, 0x4c77c0, 8)]
[(ram, 0x4c6118, 8) MULTIEQUAL (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8)]
[(register, 0x80, 8) MULTIEQUAL (register, 0x80, 8) , (register, 0x80, 8)]
[ ---  CALLOTHER (const, 0x5, 4)]
[(unique, 0x1000031b, 4) COPY (register, 0x38, 4), (register, 0x38, 4) COPY (const, 0x2, 4)]
[ ---  CBRANCH (ram, 0x41b314, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x38, 4) , (const, 0x0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100004fa, 8) , (const, 0x41b2b4, 8), (unique, 0x100004fa, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x10000175, 8) , (unique, 0x100001d7, 8) , (const, 0x1, 8), (unique, 0x100001d7, 8) INT_ADD (unique, 0x100000f9, 8) , (const, 0xfffffffffffffff8, 8)]
[(ram, 0x4c6118, 8) INDIRECT (ram, 0x4c6118, 8) , (const, 0x29a, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x29a, 4)]
[(stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0x29a, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x29a, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x29a, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x29a, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x29a, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x29a, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x29a, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x29a, 4)]
[(unique, 0x100002d3, 8) COPY (register, 0x20, 8)]
[(unique, 0x100002f3, 8) COPY (ram, 0x4c77c0, 8), (ram, 0x4c77c0, 8) INDIRECT (ram, 0x4c77c0, 8) , (const, 0x29a, 4)]
[ ---  CBRANCH (ram, 0x41b301, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0xffffffffffffffff, 8), (register, 0x0, 8) CAST (unique, 0x10000502, 8), (unique, 0x10000502, 8) CALL (ram, 0x4561f0, 8) , (const, 0x0, 8) , (register, 0x80, 8) , (const, 0x3, 4) , (const, 0x22, 4) , (const, 0xffffffff, 4) , (const, 0x0, 8), (register, 0x80, 8) INT_AND (register, 0x80, 8) , (register, 0x0, 8), (register, 0x0, 8) INT_2COMP (ram, 0x4c6118, 8), (register, 0x80, 8) INT_ADD (unique, 0x100004f2, 8) , (ram, 0x4c6118, 8), (unique, 0x100004f2, 8) CAST (register, 0x80, 8)]
[(ram, 0x4c6118, 8) INDIRECT (ram, 0x4c6118, 8) , (const, 0x2cc, 4)]
[(ram, 0x4c77c0, 8) INDIRECT (ram, 0x4c77c0, 8) , (const, 0x2cc, 4)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x0, 8) , (register, 0xa0, 4), (register, 0xa0, 4) SUBPIECE (register, 0x80, 8) , (const, 0x0, 4)]
[(unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x4, 8)]
[(unique, 0x3a00, 8) PTRADD (register, 0x18, 8) , (unique, 0x10000277, 8) , (const, 0x8, 8), (unique, 0x10000277, 8) INT_ADD (unique, 0x1000026f, 8) , (const, 0x2, 8), (unique, 0x1000026f, 8) INT_MULT (register, 0xa8, 8) , (const, 0x2, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000050a, 8) , (const, 0x41b2e0, 8), (unique, 0x1000050a, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x10000175, 8) , (unique, 0x100001df, 8) , (const, 0x1, 8), (unique, 0x100001df, 8) INT_ADD (unique, 0x100000f9, 8) , (const, 0xfffffffffffffff8, 8)]
[(ram, 0x4c6118, 8) INDIRECT (ram, 0x4c6118, 8) , (const, 0x2e3, 4), (ram, 0x4c6118, 8) MULTIEQUAL (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8)]
[(ram, 0x4c77c0, 8) INDIRECT (ram, 0x4c77c0, 8) , (const, 0x2e3, 4), (ram, 0x4c77c0, 8) MULTIEQUAL (ram, 0x4c77c0, 8) , (ram, 0x4c77c0, 8)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x2e3, 4), (stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0x2e3, 4), (stack, 0xffffffffffffff78, 4) MULTIEQUAL (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x2e3, 4), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x2e3, 4), (stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x2e3, 4), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x2e3, 4), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x2e3, 4), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x2e3, 4), (stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2e3, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(register, 0x0, 8) CAST (unique, 0x10000512, 8), (unique, 0x10000512, 8) CALL (ram, 0x401160, 8) , (register, 0x38, 8) , (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x18, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x1, 8) , (const, 0x8, 8), (register, 0x18, 8) MULTIEQUAL (register, 0x18, 8) , (register, 0x18, 8), (register, 0x38, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x41b2d0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x18, 8) , (unique, 0x3a00, 8), (register, 0x18, 8) PTRADD (register, 0x18, 8) , (const, 0x2, 8) , (const, 0x8, 8), (register, 0x18, 8) MULTIEQUAL (register, 0x18, 8) , (register, 0x18, 8)]
[(ram, 0x4c6118, 8) INDIRECT (ram, 0x4c6118, 8) , (const, 0x2f1, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000051a, 8) , (const, 0x0, 1), (unique, 0x1000051a, 8) CAST (register, 0x0, 8)]
[(unique, 0x100002a3, 8) COPY (ram, 0x4c77c0, 8), (ram, 0x4c77c0, 8) INDIRECT (ram, 0x4c77c0, 8) , (const, 0x2f1, 4)]
[(unique, 0x100002db, 8) COPY (register, 0x20, 8)]
[(unique, 0x100002fb, 8) COPY (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x41b301, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (ram, 0x4c77c0, 8) , (const, 0x0, 8), (ram, 0x4c77c0, 8) INDIRECT (ram, 0x4c77c0, 8) , (const, 0x2f1, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000522, 8) , (const, 0x41b301, 8), (unique, 0x10000522, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x10000175, 8) , (unique, 0x100001e7, 8) , (const, 0x1, 8), (unique, 0x100001e7, 8) INT_ADD (unique, 0x100000f9, 8) , (const, 0xfffffffffffffff8, 8)]
[(ram, 0x4c6118, 8) INDIRECT (ram, 0x4c6118, 8) , (const, 0x305, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x305, 4)]
[(stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0x305, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x305, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x305, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x305, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x305, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x305, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x305, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x305, 4)]
[ ---  CALL (ram, 0x4562a0, 8) , (unique, 0x100002a3, 8) , (register, 0x30, 8), (register, 0x30, 8) INT_ZEXT (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (ram, 0x4c77c0, 8)]
[(unique, 0x100002e3, 8) COPY (register, 0x20, 8)]
[(unique, 0x10000303, 8) COPY (ram, 0x4c77c0, 8), (ram, 0x4c77c0, 8) INDIRECT (unique, 0x100002eb, 8) , (const, 0x305, 4), (unique, 0x100002eb, 8) COPY (register, 0x0, 8)]
[(unique, 0x1000030b, 8) COPY (ram, 0x4c77c0, 8)]
[ ---  CBRANCH (ram, 0x41b301, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x38, 4) , (const, 0x0, 4)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff78, 4) MULTIEQUAL (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4)]
[(stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(ram, 0x4c77c0, 8) MULTIEQUAL (ram, 0x4c77c0, 8) , (ram, 0x4c77c0, 8)]
[(ram, 0x4c6118, 8) MULTIEQUAL (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8)]
[(register, 0x38, 4) MULTIEQUAL (unique, 0x1000031b, 4) , (register, 0x38, 4)]
[(register, 0x30, 8) MULTIEQUAL (register, 0x18, 8) , (register, 0x30, 8)]
[(register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x41b34e, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffff90, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x1000052a, 8), (unique, 0x1000052a, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(ram, 0x4c6118, 8) COPY (ram, 0x4c6118, 8)]
[(ram, 0x4c77c0, 8) COPY (ram, 0x4c77c0, 8)]
[ ---  RETURN (const, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000532, 8) , (unique, 0x10000187, 8), (unique, 0x10000532, 8) CAST (register, 0x20, 8), (unique, 0x10000187, 8) PTRSUB (const, 0x0, 8) , (const, 0x41b353, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x32e, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x32d, 4)]
[(stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0x32e, 4), (stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0x32d, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x32e, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x32d, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x32e, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x32d, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x32e, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x32d, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x32e, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x32d, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x32e, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x32d, 4)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x32e, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x32d, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x32e, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x32d, 4)]
[ ---  CALL (ram, 0x458dd0, 8) , (register, 0x38, 4) , (register, 0x30, 8)]
[(ram, 0x4c6118, 8) COPY (ram, 0x4c6118, 8), (ram, 0x4c6118, 8) INDIRECT (ram, 0x4c6118, 8) , (const, 0x32e, 4)]
[(ram, 0x4c77c0, 8) COPY (ram, 0x4c77c0, 8), (ram, 0x4c77c0, 8) INDIRECT (ram, 0x4c77c0, 8) , (const, 0x32e, 4)]
[ ---  RETURN (const, 0x1, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000053a, 8) , (unique, 0x1000017f, 8), (unique, 0x1000053a, 8) CAST (register, 0x20, 8), (unique, 0x1000017f, 8) PTRSUB (const, 0x0, 8) , (const, 0x41b306, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8), (register, 0x20, 8) MULTIEQUAL (unique, 0x100002d3, 8) , (unique, 0x100002db, 8) , (unique, 0x100002e3, 8) , (register, 0x20, 8)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x308, 4), (stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x307, 4), (stack, 0xffffffffffffff70, 8) MULTIEQUAL (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8) , (stack, 0xffffffffffffff70, 8)]
[(stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0x308, 4), (stack, 0xffffffffffffff78, 4) INDIRECT (stack, 0xffffffffffffff78, 4) , (const, 0x307, 4), (stack, 0xffffffffffffff78, 4) MULTIEQUAL (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4) , (stack, 0xffffffffffffff78, 4)]
[(stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x308, 4), (stack, 0xffffffffffffff80, 8) INDIRECT (stack, 0xffffffffffffff80, 8) , (const, 0x307, 4), (stack, 0xffffffffffffff80, 8) MULTIEQUAL (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8) , (stack, 0xffffffffffffff80, 8)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x308, 4), (stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x307, 4), (stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x308, 4), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x307, 4), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x308, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x307, 4), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x308, 4), (stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x307, 4), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x308, 4), (stack, 0xffffffffffffffb8, 8) INDIRECT (stack, 0xffffffffffffffb8, 8) , (const, 0x307, 4), (stack, 0xffffffffffffffb8, 8) MULTIEQUAL (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8) , (stack, 0xffffffffffffffb8, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x308, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x307, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CALL (ram, 0x4011c4, 8)]
[(ram, 0x4c6118, 8) COPY (ram, 0x4c6118, 8), (ram, 0x4c6118, 8) INDIRECT (ram, 0x4c6118, 8) , (const, 0x308, 4), (ram, 0x4c6118, 8) MULTIEQUAL (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8) , (ram, 0x4c6118, 8)]
[(ram, 0x4c77c0, 8) COPY (ram, 0x4c77c0, 8), (ram, 0x4c77c0, 8) INDIRECT (ram, 0x4c77c0, 8) , (const, 0x308, 4), (ram, 0x4c77c0, 8) COPY (unique, 0x10000313, 8), (unique, 0x10000313, 8) MULTIEQUAL (unique, 0x100002f3, 8) , (unique, 0x100002fb, 8) , (unique, 0x10000303, 8) , (unique, 0x1000030b, 8)]
[ ---  RETURN (const, 0x1, 4)]
