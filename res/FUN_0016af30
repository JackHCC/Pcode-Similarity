[(register, 0xa0, 4) COPY (const, 0xffffffff, 4)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffff7d78, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffff7d78, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x2f, 4)]
[(ram, 0x4eaf60, 8) INDIRECT (ram, 0x4eaf60, 8) , (const, 0x2f, 4)]
[(ram, 0x4f08a8, 8) INDIRECT (ram, 0x4f08a8, 8) , (const, 0x2f, 4)]
[(ram, 0x4f08b0, 8) INDIRECT (ram, 0x4f08b0, 8) , (const, 0x2f, 4)]
[(ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x2f, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x2f, 4)]
[(stack, 0xffffffffffff7d78, 8) INDIRECT (stack, 0xffffffffffff7d78, 8) , (const, 0x2f, 4)]
[(stack, 0xffffffffffff7d80, 8) INDIRECT (stack, 0xffffffffffff7d80, 8) , (const, 0x2f, 4)]
[(stack, 0xffffffffffff7d98, 4) INDIRECT (stack, 0xffffffffffff7d98, 4) , (const, 0x2f, 4)]
[(stack, 0xffffffffffff7e0c, 4) INDIRECT (stack, 0xffffffffffff7e0c, 4) , (const, 0x2f, 4)]
[(stack, 0xffffffffffff7e20, 8) INDIRECT (stack, 0xffffffffffff7e20, 8) , (const, 0x2f, 4)]
[(stack, 0xffffffffffff7e38, 8) INDIRECT (stack, 0xffffffffffff7e38, 8) , (const, 0x2f, 4)]
[(stack, 0xffffffffffff7e58, 4) INDIRECT (stack, 0xffffffffffff7e58, 4) , (const, 0x2f, 4)]
[(stack, 0xffffffffffff7e70, 8) INDIRECT (stack, 0xffffffffffff7e70, 8) , (const, 0x2f, 4)]
[(stack, 0xffffffffffff7e90, 8) INDIRECT (stack, 0xffffffffffff7e90, 8) , (const, 0x2f, 4)]
[(stack, 0xffffffffffff7e98, 8) INDIRECT (stack, 0xffffffffffff7e98, 8) , (const, 0x2f, 4)]
[(stack, 0xffffffffffff7ea0, 8) INDIRECT (stack, 0xffffffffffff7ea0, 8) , (const, 0x2f, 4)]
[(stack, 0xffffffffffff7fb0, 8) INDIRECT (stack, 0xffffffffffff7fb0, 8) , (const, 0x2f, 4)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x2f, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x100001fd, 8), (unique, 0x100001fd, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8)]
[ ---  CBRANCH (ram, 0x16b0bd, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 4) , (const, 0x1, 4), (register, 0x0, 4) CALL (ram, 0x186f70, 8) , (register, 0x38, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x6a, 4)]
[(ram, 0x4eaf60, 8) INDIRECT (ram, 0x4eaf60, 8) , (const, 0x6a, 4)]
[(ram, 0x4f08a8, 8) INDIRECT (ram, 0x4f08a8, 8) , (const, 0x6a, 4)]
[(ram, 0x4f08b0, 8) INDIRECT (ram, 0x4f08b0, 8) , (const, 0x6a, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x6a, 4)]
[(stack, 0xffffffffffff7d78, 8) INDIRECT (stack, 0xffffffffffff7d78, 8) , (const, 0x6a, 4)]
[(stack, 0xffffffffffff7d80, 8) INDIRECT (stack, 0xffffffffffff7d80, 8) , (const, 0x6a, 4)]
[(stack, 0xffffffffffff7d98, 4) INDIRECT (stack, 0xffffffffffff7d98, 4) , (const, 0x6a, 4), (stack, 0xffffffffffff7d98, 4) COPY (const, 0xfbad8004, 4)]
[(stack, 0xffffffffffff7e0c, 4) INDIRECT (unique, 0xbc80, 4) , (const, 0x6a, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x38, 8) , (const, 0x1d, 8) , (const, 0x4, 8)]
[(stack, 0xffffffffffff7e20, 8) INDIRECT (stack, 0xffffffffffff7e20, 8) , (const, 0x6a, 4), (stack, 0xffffffffffff7e20, 8) COPY (const, 0x0, 8)]
[(stack, 0xffffffffffff7e38, 8) INDIRECT (unique, 0x3200, 8) , (const, 0x6a, 4), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffff7e78, 8)]
[(stack, 0xffffffffffff7e58, 4) INDIRECT (stack, 0xffffffffffff7e58, 4) , (const, 0x6a, 4), (stack, 0xffffffffffff7e58, 4) COPY (const, 0x1, 4)]
[(stack, 0xffffffffffff7e70, 8) INDIRECT (stack, 0xffffffffffff7e70, 8) , (const, 0x6a, 4), (stack, 0xffffffffffff7e70, 8) PTRSUB (const, 0x0, 8) , (const, 0x4e7820, 8)]
[(stack, 0xffffffffffff7e90, 8) INDIRECT (unique, 0x3c80, 8) , (const, 0x6a, 4), (unique, 0x3c80, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffff7fc8, 8)]
[(stack, 0xffffffffffff7e98, 8) INDIRECT (unique, 0x100001ed, 8) , (const, 0x6a, 4), (unique, 0x100001ed, 8) COPY (unique, 0x3c80, 8), (unique, 0x3c80, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffff7fc8, 8)]
[(stack, 0xffffffffffff7ea0, 8) INDIRECT (unique, 0x3c80, 8) , (const, 0x6a, 4), (unique, 0x3c80, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffc8, 8)]
[(stack, 0xffffffffffff7fb0, 8) INDIRECT (unique, 0x100001f5, 8) , (const, 0x6a, 4), (unique, 0x100001f5, 8) COPY (register, 0x38, 8)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0x6a, 4)]
[(register, 0x0, 4) CALL (ram, 0x167d60, 8) , (unique, 0x3800, 8) , (register, 0x30, 8) , (register, 0x10, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffff7d98, 8)]
[(unique, 0x100001e1, 4) COPY (ram, 0x4f08e8, 4), (ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x6a, 4)]
[ ---  CBRANCH (ram, 0x16b198, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4f08e8, 4) , (const, 0x0, 4), (ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x6a, 4)]
[(register, 0x0, 8) COPY (ram, 0x4eaf60, 8)]
[(unique, 0x100001e5, 8) COPY (register, 0x38, 8)]
[ ---  BRANCH (ram, 0x16b031, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x9e, 4)]
[(ram, 0x4eaf60, 8) INDIRECT (ram, 0x4eaf60, 8) , (const, 0x9e, 4)]
[(ram, 0x4f08a8, 8) INDIRECT (ram, 0x4f08a8, 8) , (const, 0x9e, 4)]
[(ram, 0x4f08b0, 8) INDIRECT (ram, 0x4f08b0, 8) , (const, 0x9e, 4)]
[(ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x9e, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x9e, 4)]
[(stack, 0xffffffffffff7d78, 8) INDIRECT (stack, 0xffffffffffff7d78, 8) , (const, 0x9e, 4)]
[(stack, 0xffffffffffff7d80, 8) INDIRECT (stack, 0xffffffffffff7d80, 8) , (const, 0x9e, 4)]
[(stack, 0xffffffffffff7d98, 4) INDIRECT (stack, 0xffffffffffff7d98, 4) , (const, 0x9e, 4)]
[(stack, 0xffffffffffff7e0c, 4) INDIRECT (stack, 0xffffffffffff7e0c, 4) , (const, 0x9e, 4)]
[(stack, 0xffffffffffff7e20, 8) INDIRECT (stack, 0xffffffffffff7e20, 8) , (const, 0x9e, 4)]
[(stack, 0xffffffffffff7e38, 8) INDIRECT (stack, 0xffffffffffff7e38, 8) , (const, 0x9e, 4)]
[(stack, 0xffffffffffff7e58, 4) INDIRECT (stack, 0xffffffffffff7e58, 4) , (const, 0x9e, 4)]
[(stack, 0xffffffffffff7e70, 8) INDIRECT (stack, 0xffffffffffff7e70, 8) , (const, 0x9e, 4)]
[(stack, 0xffffffffffff7e90, 8) INDIRECT (stack, 0xffffffffffff7e90, 8) , (const, 0x9e, 4)]
[(stack, 0xffffffffffff7e98, 8) INDIRECT (stack, 0xffffffffffff7e98, 8) , (const, 0x9e, 4)]
[(stack, 0xffffffffffff7ea0, 8) INDIRECT (stack, 0xffffffffffff7ea0, 8) , (const, 0x9e, 4)]
[(stack, 0xffffffffffff7fb0, 8) INDIRECT (stack, 0xffffffffffff7fb0, 8) , (const, 0x9e, 4)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0x9e, 4)]
[ ---  CALLIND (register, 0x0, 8) , (register, 0x20, 8) , (ram, 0x4eaf60, 8) , (register, 0x38, 8), (register, 0x0, 8) CAST (unique, 0x1000020d, 8), (unique, 0x1000020d, 8) INT_XOR (register, 0x0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10000205, 8), (unique, 0x10000205, 8) INT_ADD (register, 0x110, 8) , (const, 0x30, 8), (register, 0x0, 8) INT_OR (unique, 0x4ff00, 8) , (unique, 0x50000, 8), (unique, 0x50000, 8) INT_LEFT (ram, 0x4f08a8, 8) , (const, 0x2f, 4), (unique, 0x4ff00, 8) INT_RIGHT (ram, 0x4f08a8, 8) , (const, 0x11, 4)]
[(stack, 0xffffffffffffffd0, 8) MULTIEQUAL (stack, 0xffffffffffffffd0, 8) , (stack, 0xffffffffffffffd0, 8)]
[(stack, 0xffffffffffff7fb0, 8) MULTIEQUAL (stack, 0xffffffffffff7fb0, 8) , (stack, 0xffffffffffff7fb0, 8)]
[(stack, 0xffffffffffff7ea0, 8) MULTIEQUAL (stack, 0xffffffffffff7ea0, 8) , (stack, 0xffffffffffff7ea0, 8)]
[(stack, 0xffffffffffff7e98, 8) MULTIEQUAL (stack, 0xffffffffffff7e98, 8) , (stack, 0xffffffffffff7e98, 8)]
[(stack, 0xffffffffffff7e90, 8) MULTIEQUAL (stack, 0xffffffffffff7e90, 8) , (stack, 0xffffffffffff7e90, 8)]
[(stack, 0xffffffffffff7e70, 8) MULTIEQUAL (stack, 0xffffffffffff7e70, 8) , (stack, 0xffffffffffff7e70, 8)]
[(stack, 0xffffffffffff7e58, 4) MULTIEQUAL (stack, 0xffffffffffff7e58, 4) , (stack, 0xffffffffffff7e58, 4)]
[(stack, 0xffffffffffff7e38, 8) MULTIEQUAL (stack, 0xffffffffffff7e38, 8) , (stack, 0xffffffffffff7e38, 8)]
[(stack, 0xffffffffffff7e20, 8) MULTIEQUAL (stack, 0xffffffffffff7e20, 8) , (stack, 0xffffffffffff7e20, 8)]
[(stack, 0xffffffffffff7e0c, 4) MULTIEQUAL (stack, 0xffffffffffff7e0c, 4) , (stack, 0xffffffffffff7e0c, 4)]
[(stack, 0xffffffffffff7d98, 4) MULTIEQUAL (stack, 0xffffffffffff7d98, 4) , (stack, 0xffffffffffff7d98, 4)]
[(stack, 0xffffffffffff7d80, 8) MULTIEQUAL (stack, 0xffffffffffff7d80, 8) , (unique, 0x100001e5, 8)]
[(stack, 0xffffffffffff7d78, 8) MULTIEQUAL (stack, 0xffffffffffff7d78, 8) , (register, 0x0, 8)]
[(ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(ram, 0x4f08e8, 4) MULTIEQUAL (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4)]
[(ram, 0x4f08b0, 8) MULTIEQUAL (ram, 0x4f08b0, 8) , (ram, 0x4f08b0, 8)]
[(ram, 0x4f08a8, 8) MULTIEQUAL (ram, 0x4f08a8, 8) , (ram, 0x4f08a8, 8)]
[(ram, 0x4eaf60, 8) MULTIEQUAL (ram, 0x4eaf60, 8) , (ram, 0x4eaf60, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x16b138, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) INT_AND (unique, 0xbc80, 4) , (const, 0x8000, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (register, 0x38, 8)]
[ ---  CBRANCH (ram, 0x16b18a, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000225, 8), (unique, 0x10000225, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x2, 8) , (const, 0x4, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x1000021d, 8), (unique, 0x1000021d, 8) INT_ADD (register, 0x110, 8) , (const, 0x10, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000215, 8), (unique, 0x10000215, 8) CAST (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (register, 0x38, 8) , (const, 0x22, 8) , (const, 0x4, 8)]
[ ---  CBRANCH (ram, 0x16b164, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4f08f8, 4) , (const, 0x0, 4)]
[ ---  CBRANCH (const, 0x5, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0xbd80, 8)]
[(ram, 0x4eaf60, 8) INDIRECT (ram, 0x4eaf60, 8) , (const, 0x273, 4)]
[(ram, 0x4f08a8, 8) INDIRECT (ram, 0x4f08a8, 8) , (const, 0x273, 4)]
[(ram, 0x4f08b0, 8) INDIRECT (ram, 0x4f08b0, 8) , (const, 0x273, 4)]
[(ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x273, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x273, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0xbd80, 8) , (const, 0x1, 4)]
[ ---  CALLOTHER (const, 0x11, 4)]
[ ---  CBRANCH (const, 0x5, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0xbd80, 8)]
[(ram, 0x4eaf60, 8) INDIRECT (ram, 0x4eaf60, 8) , (const, 0x22e, 4)]
[(ram, 0x4f08a8, 8) INDIRECT (ram, 0x4f08a8, 8) , (const, 0x22e, 4)]
[(ram, 0x4f08b0, 8) INDIRECT (ram, 0x4f08b0, 8) , (const, 0x22e, 4)]
[(ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x22e, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x22e, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0xbd80, 8) , (const, 0x1, 4)]
[ ---  BRANCH (ram, 0x16b17f, 1)]
[(register, 0x80, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x256, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x256, 4)]
[(ram, 0x4eaf60, 8) INDIRECT (ram, 0x4eaf60, 8) , (const, 0x256, 4)]
[(ram, 0x4f08a8, 8) INDIRECT (ram, 0x4f08a8, 8) , (const, 0x256, 4)]
[(ram, 0x4f08b0, 8) INDIRECT (ram, 0x4f08b0, 8) , (const, 0x256, 4)]
[(ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x256, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x256, 4)]
[(stack, 0xffffffffffff7d78, 8) INDIRECT (stack, 0xffffffffffff7d78, 8) , (const, 0x256, 4)]
[(stack, 0xffffffffffff7d80, 8) INDIRECT (stack, 0xffffffffffff7d80, 8) , (const, 0x256, 4)]
[(stack, 0xffffffffffff7d98, 4) INDIRECT (stack, 0xffffffffffff7d98, 4) , (const, 0x256, 4)]
[(stack, 0xffffffffffff7e0c, 4) INDIRECT (stack, 0xffffffffffff7e0c, 4) , (const, 0x256, 4)]
[(stack, 0xffffffffffff7e20, 8) INDIRECT (stack, 0xffffffffffff7e20, 8) , (const, 0x256, 4)]
[(stack, 0xffffffffffff7e38, 8) INDIRECT (stack, 0xffffffffffff7e38, 8) , (const, 0x256, 4)]
[(stack, 0xffffffffffff7e58, 4) INDIRECT (stack, 0xffffffffffff7e58, 4) , (const, 0x256, 4)]
[(stack, 0xffffffffffff7e70, 8) INDIRECT (stack, 0xffffffffffff7e70, 8) , (const, 0x256, 4)]
[(stack, 0xffffffffffff7e90, 8) INDIRECT (stack, 0xffffffffffff7e90, 8) , (const, 0x256, 4)]
[(stack, 0xffffffffffff7e98, 8) INDIRECT (stack, 0xffffffffffff7e98, 8) , (const, 0x256, 4)]
[(stack, 0xffffffffffff7ea0, 8) INDIRECT (stack, 0xffffffffffff7ea0, 8) , (const, 0x256, 4)]
[(stack, 0xffffffffffff7fb0, 8) INDIRECT (stack, 0xffffffffffff7fb0, 8) , (const, 0x256, 4)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0x256, 4)]
[ ---  CALL (ram, 0x230690, 8) , (unique, 0xbd80, 8)]
[(stack, 0xffffffffffffffd0, 8) MULTIEQUAL (stack, 0xffffffffffffffd0, 8) , (stack, 0xffffffffffffffd0, 8) , (stack, 0xffffffffffffffd0, 8)]
[(stack, 0xffffffffffff7fb0, 8) MULTIEQUAL (stack, 0xffffffffffff7fb0, 8) , (stack, 0xffffffffffff7fb0, 8) , (stack, 0xffffffffffff7fb0, 8)]
[(stack, 0xffffffffffff7ea0, 8) MULTIEQUAL (stack, 0xffffffffffff7ea0, 8) , (stack, 0xffffffffffff7ea0, 8) , (stack, 0xffffffffffff7ea0, 8)]
[(stack, 0xffffffffffff7e98, 8) MULTIEQUAL (stack, 0xffffffffffff7e98, 8) , (stack, 0xffffffffffff7e98, 8) , (stack, 0xffffffffffff7e98, 8)]
[(stack, 0xffffffffffff7e90, 8) MULTIEQUAL (stack, 0xffffffffffff7e90, 8) , (stack, 0xffffffffffff7e90, 8) , (stack, 0xffffffffffff7e90, 8)]
[(stack, 0xffffffffffff7e70, 8) MULTIEQUAL (stack, 0xffffffffffff7e70, 8) , (stack, 0xffffffffffff7e70, 8) , (stack, 0xffffffffffff7e70, 8)]
[(stack, 0xffffffffffff7e58, 4) MULTIEQUAL (stack, 0xffffffffffff7e58, 4) , (stack, 0xffffffffffff7e58, 4) , (stack, 0xffffffffffff7e58, 4)]
[(stack, 0xffffffffffff7e38, 8) MULTIEQUAL (stack, 0xffffffffffff7e38, 8) , (stack, 0xffffffffffff7e38, 8) , (stack, 0xffffffffffff7e38, 8)]
[(stack, 0xffffffffffff7e20, 8) MULTIEQUAL (stack, 0xffffffffffff7e20, 8) , (stack, 0xffffffffffff7e20, 8) , (stack, 0xffffffffffff7e20, 8)]
[(stack, 0xffffffffffff7e0c, 4) MULTIEQUAL (stack, 0xffffffffffff7e0c, 4) , (stack, 0xffffffffffff7e0c, 4) , (stack, 0xffffffffffff7e0c, 4)]
[(stack, 0xffffffffffff7d98, 4) MULTIEQUAL (stack, 0xffffffffffff7d98, 4) , (stack, 0xffffffffffff7d98, 4) , (stack, 0xffffffffffff7d98, 4)]
[(stack, 0xffffffffffff7d80, 8) MULTIEQUAL (stack, 0xffffffffffff7d80, 8) , (stack, 0xffffffffffff7d80, 8) , (stack, 0xffffffffffff7d80, 8)]
[(stack, 0xffffffffffff7d78, 8) MULTIEQUAL (stack, 0xffffffffffff7d78, 8) , (stack, 0xffffffffffff7d78, 8) , (stack, 0xffffffffffff7d78, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eaf60, 8) INDIRECT (ram, 0x4eaf60, 8) , (const, 0x237, 4), (ram, 0x4eaf60, 8) MULTIEQUAL (ram, 0x4eaf60, 8) , (ram, 0x4eaf60, 8) , (ram, 0x4eaf60, 8)]
[(ram, 0x4f08a8, 8) INDIRECT (ram, 0x4f08a8, 8) , (const, 0x237, 4), (ram, 0x4f08a8, 8) MULTIEQUAL (ram, 0x4f08a8, 8) , (ram, 0x4f08a8, 8) , (ram, 0x4f08a8, 8)]
[(ram, 0x4f08b0, 8) INDIRECT (ram, 0x4f08b0, 8) , (const, 0x237, 4), (ram, 0x4f08b0, 8) MULTIEQUAL (ram, 0x4f08b0, 8) , (ram, 0x4f08b0, 8) , (ram, 0x4f08b0, 8)]
[(ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x237, 4), (ram, 0x4f08e8, 4) MULTIEQUAL (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x237, 4), (ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000235, 8) , (register, 0x80, 8), (unique, 0x10000235, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x2, 8) , (const, 0x4, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x1000022d, 8), (unique, 0x1000022d, 8) CAST (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (register, 0x38, 8) , (const, 0x22, 8) , (const, 0x4, 8), (register, 0x80, 8) MULTIEQUAL (unique, 0xbd80, 8) , (register, 0x80, 8) , (unique, 0xbd80, 8)]
[(stack, 0xffffffffffffffd0, 8) MULTIEQUAL (stack, 0xffffffffffffffd0, 8) , (stack, 0xffffffffffffffd0, 8)]
[(stack, 0xffffffffffff7fb0, 8) MULTIEQUAL (stack, 0xffffffffffff7fb0, 8) , (stack, 0xffffffffffff7fb0, 8)]
[(stack, 0xffffffffffff7ea0, 8) MULTIEQUAL (stack, 0xffffffffffff7ea0, 8) , (stack, 0xffffffffffff7ea0, 8)]
[(stack, 0xffffffffffff7e98, 8) MULTIEQUAL (stack, 0xffffffffffff7e98, 8) , (stack, 0xffffffffffff7e98, 8)]
[(stack, 0xffffffffffff7e90, 8) MULTIEQUAL (stack, 0xffffffffffff7e90, 8) , (stack, 0xffffffffffff7e90, 8)]
[(stack, 0xffffffffffff7e70, 8) MULTIEQUAL (stack, 0xffffffffffff7e70, 8) , (stack, 0xffffffffffff7e70, 8)]
[(stack, 0xffffffffffff7e58, 4) MULTIEQUAL (stack, 0xffffffffffff7e58, 4) , (stack, 0xffffffffffff7e58, 4)]
[(stack, 0xffffffffffff7e38, 8) MULTIEQUAL (stack, 0xffffffffffff7e38, 8) , (stack, 0xffffffffffff7e38, 8)]
[(stack, 0xffffffffffff7e20, 8) MULTIEQUAL (stack, 0xffffffffffff7e20, 8) , (stack, 0xffffffffffff7e20, 8)]
[(stack, 0xffffffffffff7e0c, 4) MULTIEQUAL (stack, 0xffffffffffff7e0c, 4) , (stack, 0xffffffffffff7e0c, 4)]
[(stack, 0xffffffffffff7d98, 4) MULTIEQUAL (stack, 0xffffffffffff7d98, 4) , (stack, 0xffffffffffff7d98, 4)]
[(stack, 0xffffffffffff7d80, 8) MULTIEQUAL (stack, 0xffffffffffff7d80, 8) , (stack, 0xffffffffffff7d80, 8)]
[(stack, 0xffffffffffff7d78, 8) MULTIEQUAL (stack, 0xffffffffffff7d78, 8) , (stack, 0xffffffffffff7d78, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eaf60, 8) INDIRECT (ram, 0x4eaf60, 8) , (const, 0x23f, 4), (ram, 0x4eaf60, 8) MULTIEQUAL (ram, 0x4eaf60, 8) , (ram, 0x4eaf60, 8)]
[(ram, 0x4f08a8, 8) INDIRECT (ram, 0x4f08a8, 8) , (const, 0x23f, 4), (ram, 0x4f08a8, 8) MULTIEQUAL (ram, 0x4f08a8, 8) , (ram, 0x4f08a8, 8)]
[(ram, 0x4f08b0, 8) INDIRECT (ram, 0x4f08b0, 8) , (const, 0x23f, 4), (ram, 0x4f08b0, 8) MULTIEQUAL (ram, 0x4f08b0, 8) , (ram, 0x4f08b0, 8)]
[(ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x23f, 4), (ram, 0x4f08e8, 4) MULTIEQUAL (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x23f, 4), (ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0xbd00, 4), (unique, 0xbd00, 4) INT_ADD (unique, 0xbd00, 4) , (const, 0x1, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x1, 8) , (const, 0x4, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8)]
[ ---  BRANCH (ram, 0x16b03e, 1)]
[(stack, 0xffffffffffffffd0, 8) MULTIEQUAL (stack, 0xffffffffffffffd0, 8) , (stack, 0xffffffffffffffd0, 8)]
[(stack, 0xffffffffffff7fb0, 8) MULTIEQUAL (stack, 0xffffffffffff7fb0, 8) , (stack, 0xffffffffffff7fb0, 8)]
[(stack, 0xffffffffffff7ea0, 8) MULTIEQUAL (stack, 0xffffffffffff7ea0, 8) , (stack, 0xffffffffffff7ea0, 8)]
[(stack, 0xffffffffffff7e98, 8) MULTIEQUAL (stack, 0xffffffffffff7e98, 8) , (stack, 0xffffffffffff7e98, 8)]
[(stack, 0xffffffffffff7e90, 8) MULTIEQUAL (stack, 0xffffffffffff7e90, 8) , (stack, 0xffffffffffff7e90, 8)]
[(stack, 0xffffffffffff7e70, 8) MULTIEQUAL (stack, 0xffffffffffff7e70, 8) , (stack, 0xffffffffffff7e70, 8)]
[(stack, 0xffffffffffff7e58, 4) MULTIEQUAL (stack, 0xffffffffffff7e58, 4) , (stack, 0xffffffffffff7e58, 4)]
[(stack, 0xffffffffffff7e20, 8) MULTIEQUAL (stack, 0xffffffffffff7e20, 8) , (stack, 0xffffffffffff7e20, 8)]
[(stack, 0xffffffffffff7e0c, 4) MULTIEQUAL (stack, 0xffffffffffff7e0c, 4) , (stack, 0xffffffffffff7e0c, 4)]
[(stack, 0xffffffffffff7d98, 4) MULTIEQUAL (stack, 0xffffffffffff7d98, 4) , (stack, 0xffffffffffff7d98, 4)]
[(stack, 0xffffffffffff7d80, 8) MULTIEQUAL (stack, 0xffffffffffff7d80, 8) , (stack, 0xffffffffffff7d80, 8)]
[(stack, 0xffffffffffff7d78, 8) MULTIEQUAL (stack, 0xffffffffffff7d78, 8) , (stack, 0xffffffffffff7d78, 8)]
[(ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(ram, 0x4f08e8, 4) MULTIEQUAL (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4)]
[(ram, 0x4f08b0, 8) MULTIEQUAL (ram, 0x4f08b0, 8) , (ram, 0x4f08b0, 8)]
[(ram, 0x4f08a8, 8) MULTIEQUAL (ram, 0x4f08a8, 8) , (ram, 0x4f08a8, 8)]
[(ram, 0x4eaf60, 8) MULTIEQUAL (ram, 0x4eaf60, 8) , (ram, 0x4eaf60, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x16b095, 1) , (unique, 0xce80, 1), (unique, 0xce80, 1) INT_SLESS (const, 0x0, 4) , (register, 0x28, 4), (register, 0x28, 4) SUBPIECE (register, 0x28, 8) , (const, 0x0, 4), (register, 0x28, 8) INT_SRIGHT (register, 0x28, 8) , (const, 0x2, 4), (register, 0x28, 8) INT_SUB (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000255, 8), (unique, 0x10000255, 8) INT_ADD (unique, 0x1000024d, 8) , (const, 0x20, 8), (unique, 0x1000024d, 8) CAST (stack, 0xffffffffffff7e38, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000245, 8), (unique, 0x10000245, 8) INT_ADD (unique, 0x1000023d, 8) , (const, 0x18, 8), (unique, 0x1000023d, 8) CAST (stack, 0xffffffffffff7e38, 8), (stack, 0xffffffffffff7e38, 8) MULTIEQUAL (stack, 0xffffffffffff7e38, 8) , (stack, 0xffffffffffff7e38, 8)]
[ ---  CBRANCH (ram, 0x16b1b0, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (const, 0xd67, 8) , (register, 0x8, 8), (register, 0x8, 8) INT_SUB (unique, 0xbd80, 8) , (const, 0x4e7760, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x1000025d, 8), (unique, 0x1000025d, 8) CAST (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (register, 0x38, 8) , (const, 0x36, 8) , (const, 0x4, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1f3, 4)]
[(ram, 0x4eaf60, 8) INDIRECT (ram, 0x4eaf60, 8) , (const, 0x1f3, 4)]
[(ram, 0x4f08a8, 8) INDIRECT (ram, 0x4f08a8, 8) , (const, 0x1f3, 4)]
[(ram, 0x4f08b0, 8) INDIRECT (ram, 0x4f08b0, 8) , (const, 0x1f3, 4)]
[(ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x1f3, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x1f3, 4)]
[(stack, 0xffffffffffff7d78, 8) INDIRECT (stack, 0xffffffffffff7d78, 8) , (const, 0x1f3, 4)]
[(stack, 0xffffffffffff7d80, 8) INDIRECT (stack, 0xffffffffffff7d80, 8) , (const, 0x1f3, 4)]
[(stack, 0xffffffffffff7d98, 4) INDIRECT (stack, 0xffffffffffff7d98, 4) , (const, 0x1f3, 4)]
[(stack, 0xffffffffffff7e0c, 4) INDIRECT (stack, 0xffffffffffff7e0c, 4) , (const, 0x1f3, 4)]
[(stack, 0xffffffffffff7e20, 8) INDIRECT (stack, 0xffffffffffff7e20, 8) , (const, 0x1f3, 4)]
[(stack, 0xffffffffffff7e58, 4) INDIRECT (stack, 0xffffffffffff7e58, 4) , (const, 0x1f3, 4)]
[(stack, 0xffffffffffff7e70, 8) INDIRECT (stack, 0xffffffffffff7e70, 8) , (const, 0x1f3, 4)]
[(stack, 0xffffffffffff7e90, 8) INDIRECT (stack, 0xffffffffffff7e90, 8) , (const, 0x1f3, 4)]
[(stack, 0xffffffffffff7e98, 8) INDIRECT (stack, 0xffffffffffff7e98, 8) , (const, 0x1f3, 4)]
[(stack, 0xffffffffffff7ea0, 8) INDIRECT (stack, 0xffffffffffff7ea0, 8) , (const, 0x1f3, 4)]
[(stack, 0xffffffffffff7fb0, 8) INDIRECT (stack, 0xffffffffffff7fb0, 8) , (const, 0x1f3, 4)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0x1f3, 4)]
[ ---  CALL (ram, 0x18a150, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000026d, 8), (unique, 0x1000026d, 8) INT_ADD (unique, 0x10000265, 8) , (const, 0x18, 8), (unique, 0x10000265, 8) CAST (stack, 0xffffffffffff7e38, 8), (stack, 0xffffffffffff7e38, 8) INDIRECT (stack, 0xffffffffffff7e38, 8) , (const, 0x1f3, 4)]
[ ---  BRANCH (ram, 0x16b080, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x116, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eaf60, 8) INDIRECT (ram, 0x4eaf60, 8) , (const, 0x116, 4), (ram, 0x4eaf60, 8) MULTIEQUAL (ram, 0x4eaf60, 8) , (ram, 0x4eaf60, 8)]
[(ram, 0x4f08a8, 8) INDIRECT (ram, 0x4f08a8, 8) , (const, 0x116, 4), (ram, 0x4f08a8, 8) MULTIEQUAL (ram, 0x4f08a8, 8) , (ram, 0x4f08a8, 8)]
[(ram, 0x4f08b0, 8) INDIRECT (ram, 0x4f08b0, 8) , (const, 0x116, 4), (ram, 0x4f08b0, 8) MULTIEQUAL (ram, 0x4f08b0, 8) , (ram, 0x4f08b0, 8)]
[(ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x116, 4), (ram, 0x4f08e8, 4) MULTIEQUAL (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x116, 4), (ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(stack, 0xffffffffffff7d78, 8) INDIRECT (stack, 0xffffffffffff7d78, 8) , (const, 0x116, 4), (stack, 0xffffffffffff7d78, 8) MULTIEQUAL (stack, 0xffffffffffff7d78, 8) , (stack, 0xffffffffffff7d78, 8)]
[(stack, 0xffffffffffff7d80, 8) INDIRECT (stack, 0xffffffffffff7d80, 8) , (const, 0x116, 4), (stack, 0xffffffffffff7d80, 8) MULTIEQUAL (stack, 0xffffffffffff7d80, 8) , (stack, 0xffffffffffff7d80, 8)]
[(stack, 0xffffffffffff7d98, 4) INDIRECT (stack, 0xffffffffffff7d98, 4) , (const, 0x116, 4), (stack, 0xffffffffffff7d98, 4) MULTIEQUAL (stack, 0xffffffffffff7d98, 4) , (stack, 0xffffffffffff7d98, 4)]
[(stack, 0xffffffffffff7e0c, 4) INDIRECT (stack, 0xffffffffffff7e0c, 4) , (const, 0x116, 4), (stack, 0xffffffffffff7e0c, 4) MULTIEQUAL (stack, 0xffffffffffff7e0c, 4) , (stack, 0xffffffffffff7e0c, 4)]
[(stack, 0xffffffffffff7e20, 8) INDIRECT (stack, 0xffffffffffff7e20, 8) , (const, 0x116, 4), (stack, 0xffffffffffff7e20, 8) MULTIEQUAL (stack, 0xffffffffffff7e20, 8) , (stack, 0xffffffffffff7e20, 8)]
[(stack, 0xffffffffffff7e38, 8) INDIRECT (stack, 0xffffffffffff7e38, 8) , (const, 0x116, 4), (stack, 0xffffffffffff7e38, 8) MULTIEQUAL (stack, 0xffffffffffff7e38, 8) , (stack, 0xffffffffffff7e38, 8)]
[(stack, 0xffffffffffff7e58, 4) INDIRECT (stack, 0xffffffffffff7e58, 4) , (const, 0x116, 4), (stack, 0xffffffffffff7e58, 4) MULTIEQUAL (stack, 0xffffffffffff7e58, 4) , (stack, 0xffffffffffff7e58, 4)]
[(stack, 0xffffffffffff7e70, 8) INDIRECT (stack, 0xffffffffffff7e70, 8) , (const, 0x116, 4), (stack, 0xffffffffffff7e70, 8) MULTIEQUAL (stack, 0xffffffffffff7e70, 8) , (stack, 0xffffffffffff7e70, 8)]
[(stack, 0xffffffffffff7e90, 8) INDIRECT (stack, 0xffffffffffff7e90, 8) , (const, 0x116, 4), (stack, 0xffffffffffff7e90, 8) MULTIEQUAL (stack, 0xffffffffffff7e90, 8) , (stack, 0xffffffffffff7e90, 8)]
[(stack, 0xffffffffffff7e98, 8) INDIRECT (stack, 0xffffffffffff7e98, 8) , (const, 0x116, 4), (stack, 0xffffffffffff7e98, 8) MULTIEQUAL (stack, 0xffffffffffff7e98, 8) , (stack, 0xffffffffffff7e98, 8)]
[(stack, 0xffffffffffff7ea0, 8) INDIRECT (stack, 0xffffffffffff7ea0, 8) , (const, 0x116, 4), (stack, 0xffffffffffff7ea0, 8) MULTIEQUAL (stack, 0xffffffffffff7ea0, 8) , (stack, 0xffffffffffff7ea0, 8)]
[(stack, 0xffffffffffff7fb0, 8) INDIRECT (stack, 0xffffffffffff7fb0, 8) , (const, 0x116, 4), (stack, 0xffffffffffff7fb0, 8) MULTIEQUAL (stack, 0xffffffffffff7fb0, 8) , (stack, 0xffffffffffff7fb0, 8)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0x116, 4), (stack, 0xffffffffffffffd0, 8) MULTIEQUAL (stack, 0xffffffffffffffd0, 8) , (stack, 0xffffffffffffffd0, 8)]
[ ---  CBRANCH (ram, 0x16b095, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x28, 4) , (register, 0x0, 4), (register, 0x0, 4) CALLIND (unique, 0xbd80, 8) , (register, 0x38, 8) , (register, 0x30, 8) , (register, 0x10, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000275, 8), (unique, 0x10000275, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x38, 8), (register, 0x10, 8) INT_SEXT (register, 0x28, 4), (register, 0x30, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8)]
[(register, 0xa0, 4) COPY (const, 0xffffffff, 4)]
[(stack, 0xffffffffffffffd0, 8) MULTIEQUAL (stack, 0xffffffffffffffd0, 8) , (stack, 0xffffffffffffffd0, 8) , (stack, 0xffffffffffffffd0, 8)]
[(stack, 0xffffffffffff7fb0, 8) MULTIEQUAL (stack, 0xffffffffffff7fb0, 8) , (stack, 0xffffffffffff7fb0, 8) , (stack, 0xffffffffffff7fb0, 8)]
[(stack, 0xffffffffffff7ea0, 8) MULTIEQUAL (stack, 0xffffffffffff7ea0, 8) , (stack, 0xffffffffffff7ea0, 8) , (stack, 0xffffffffffff7ea0, 8)]
[(stack, 0xffffffffffff7e98, 8) MULTIEQUAL (stack, 0xffffffffffff7e98, 8) , (stack, 0xffffffffffff7e98, 8) , (stack, 0xffffffffffff7e98, 8)]
[(stack, 0xffffffffffff7e90, 8) MULTIEQUAL (stack, 0xffffffffffff7e90, 8) , (stack, 0xffffffffffff7e90, 8) , (stack, 0xffffffffffff7e90, 8)]
[(stack, 0xffffffffffff7e70, 8) MULTIEQUAL (stack, 0xffffffffffff7e70, 8) , (stack, 0xffffffffffff7e70, 8) , (stack, 0xffffffffffff7e70, 8)]
[(stack, 0xffffffffffff7e58, 4) MULTIEQUAL (stack, 0xffffffffffff7e58, 4) , (stack, 0xffffffffffff7e58, 4) , (stack, 0xffffffffffff7e58, 4)]
[(stack, 0xffffffffffff7e38, 8) MULTIEQUAL (stack, 0xffffffffffff7e38, 8) , (stack, 0xffffffffffff7e38, 8) , (stack, 0xffffffffffff7e38, 8)]
[(stack, 0xffffffffffff7e20, 8) MULTIEQUAL (stack, 0xffffffffffff7e20, 8) , (stack, 0xffffffffffff7e20, 8) , (stack, 0xffffffffffff7e20, 8)]
[(stack, 0xffffffffffff7e0c, 4) MULTIEQUAL (stack, 0xffffffffffff7e0c, 4) , (stack, 0xffffffffffff7e0c, 4) , (stack, 0xffffffffffff7e0c, 4)]
[(stack, 0xffffffffffff7d98, 4) MULTIEQUAL (stack, 0xffffffffffff7d98, 4) , (stack, 0xffffffffffff7d98, 4) , (stack, 0xffffffffffff7d98, 4)]
[(stack, 0xffffffffffff7d80, 8) MULTIEQUAL (stack, 0xffffffffffff7d80, 8) , (stack, 0xffffffffffff7d80, 8) , (stack, 0xffffffffffff7d80, 8)]
[(stack, 0xffffffffffff7d78, 8) MULTIEQUAL (stack, 0xffffffffffff7d78, 8) , (stack, 0xffffffffffff7d78, 8) , (stack, 0xffffffffffff7d78, 8)]
[(ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(ram, 0x4f08e8, 4) MULTIEQUAL (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4)]
[(ram, 0x4f08b0, 8) MULTIEQUAL (ram, 0x4f08b0, 8) , (ram, 0x4f08b0, 8) , (ram, 0x4f08b0, 8)]
[(ram, 0x4f08a8, 8) MULTIEQUAL (ram, 0x4f08a8, 8) , (ram, 0x4f08a8, 8) , (ram, 0x4f08a8, 8)]
[(ram, 0x4eaf60, 8) MULTIEQUAL (ram, 0x4eaf60, 8) , (ram, 0x4eaf60, 8) , (ram, 0x4eaf60, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xa0, 4) MULTIEQUAL (register, 0x0, 4) , (register, 0x0, 4) , (register, 0xa0, 4)]
[ ---  CBRANCH (ram, 0x16b0f0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x58e00, 4) , (const, 0x0, 4), (unique, 0x58e00, 4) INT_AND (unique, 0xbd00, 4) , (const, 0x8000, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (register, 0x38, 8)]
[(ram, 0x4eaf60, 8) INDIRECT (ram, 0x4eaf60, 8) , (const, 0x1a0, 4)]
[(ram, 0x4f08a8, 8) INDIRECT (ram, 0x4f08a8, 8) , (const, 0x1a0, 4)]
[(ram, 0x4f08b0, 8) INDIRECT (ram, 0x4f08b0, 8) , (const, 0x1a0, 4)]
[(ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x1a0, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x1a0, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (unique, 0xbd00, 4), (unique, 0xbd00, 4) INT_ADD (unique, 0xbd00, 4) , (const, 0xffffffff, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x1, 8) , (const, 0x4, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x1000027d, 8), (unique, 0x1000027d, 8) CAST (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (register, 0x38, 8) , (const, 0x22, 8) , (const, 0x4, 8)]
[ ---  CBRANCH (ram, 0x16b09d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd00, 4) , (const, 0x0, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x1, 8) , (const, 0x4, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x1000027d, 8), (unique, 0x1000027d, 8) CAST (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (register, 0x38, 8) , (const, 0x22, 8) , (const, 0x4, 8)]
[(ram, 0x4eaf60, 8) INDIRECT (ram, 0x4eaf60, 8) , (const, 0x1ae, 4)]
[(ram, 0x4f08a8, 8) INDIRECT (ram, 0x4f08a8, 8) , (const, 0x1ae, 4)]
[(ram, 0x4f08b0, 8) INDIRECT (ram, 0x4f08b0, 8) , (const, 0x1ae, 4)]
[(ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x1ae, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000285, 8) , (const, 0x0, 8), (unique, 0x10000285, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x2, 8) , (const, 0x4, 8)]
[ ---  CBRANCH (ram, 0x16b115, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4f08f8, 4) , (const, 0x0, 4), (ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x1ae, 4)]
[(ram, 0x4eaf60, 8) INDIRECT (ram, 0x4eaf60, 8) , (const, 0x1e6, 4)]
[(ram, 0x4f08a8, 8) INDIRECT (ram, 0x4f08a8, 8) , (const, 0x1e6, 4)]
[(ram, 0x4f08b0, 8) INDIRECT (ram, 0x4f08b0, 8) , (const, 0x1e6, 4)]
[(ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x1e6, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x1e6, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0xbd80, 8) , (unique, 0xbd00, 4), (unique, 0xbd00, 4) INT_ADD (unique, 0xbd00, 4) , (const, 0xffffffff, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0xbd80, 8)]
[(unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0xbd80, 8)]
[ ---  CALLOTHER (const, 0x11, 4)]
[(ram, 0x4eaf60, 8) INDIRECT (ram, 0x4eaf60, 8) , (const, 0x1be, 4)]
[(ram, 0x4f08a8, 8) INDIRECT (ram, 0x4f08a8, 8) , (const, 0x1be, 4)]
[(ram, 0x4f08b0, 8) INDIRECT (ram, 0x4f08b0, 8) , (const, 0x1be, 4)]
[(ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x1be, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x1be, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0xbd80, 8) , (unique, 0xbd00, 4), (unique, 0xbd00, 4) INT_ADD (unique, 0xbd00, 4) , (const, 0xffffffff, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0xbd80, 8)]
[(unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0xbd80, 8)]
[(unique, 0x100001bf, 8) MULTIEQUAL (ram, 0x4eaf60, 8) , (ram, 0x4eaf60, 8)]
[(unique, 0x100001c7, 8) MULTIEQUAL (ram, 0x4f08a8, 8) , (ram, 0x4f08a8, 8)]
[(unique, 0x100001cf, 8) MULTIEQUAL (ram, 0x4f08b0, 8) , (ram, 0x4f08b0, 8)]
[(unique, 0x100001d7, 4) MULTIEQUAL (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4)]
[(unique, 0x100001db, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[ ---  CBRANCH (ram, 0x16b12f, 1) , (unique, 0x100001be, 1), (unique, 0x100001be, 1) INT_NOTEQUAL (unique, 0xbd00, 4) , (const, 0x0, 4), (unique, 0xbd00, 4) MULTIEQUAL (unique, 0xbd00, 4) , (unique, 0xbd00, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1d8, 4)]
[(ram, 0x4eaf60, 8) INDIRECT (unique, 0x100001bf, 8) , (const, 0x1d8, 4)]
[(ram, 0x4f08a8, 8) INDIRECT (unique, 0x100001c7, 8) , (const, 0x1d8, 4)]
[(ram, 0x4f08b0, 8) INDIRECT (unique, 0x100001cf, 8) , (const, 0x1d8, 4)]
[(ram, 0x4f08e8, 4) INDIRECT (unique, 0x100001d7, 4) , (const, 0x1d8, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (unique, 0x100001db, 4) , (const, 0x1d8, 4)]
[(stack, 0xffffffffffff7d78, 8) INDIRECT (stack, 0xffffffffffff7d78, 8) , (const, 0x1d8, 4)]
[(stack, 0xffffffffffff7d80, 8) INDIRECT (stack, 0xffffffffffff7d80, 8) , (const, 0x1d8, 4)]
[(stack, 0xffffffffffff7d98, 4) INDIRECT (stack, 0xffffffffffff7d98, 4) , (const, 0x1d8, 4)]
[(stack, 0xffffffffffff7e0c, 4) INDIRECT (stack, 0xffffffffffff7e0c, 4) , (const, 0x1d8, 4)]
[(stack, 0xffffffffffff7e20, 8) INDIRECT (stack, 0xffffffffffff7e20, 8) , (const, 0x1d8, 4)]
[(stack, 0xffffffffffff7e38, 8) INDIRECT (stack, 0xffffffffffff7e38, 8) , (const, 0x1d8, 4)]
[(stack, 0xffffffffffff7e58, 4) INDIRECT (stack, 0xffffffffffff7e58, 4) , (const, 0x1d8, 4)]
[(stack, 0xffffffffffff7e70, 8) INDIRECT (stack, 0xffffffffffff7e70, 8) , (const, 0x1d8, 4)]
[(stack, 0xffffffffffff7e90, 8) INDIRECT (stack, 0xffffffffffff7e90, 8) , (const, 0x1d8, 4)]
[(stack, 0xffffffffffff7e98, 8) INDIRECT (stack, 0xffffffffffff7e98, 8) , (const, 0x1d8, 4)]
[(stack, 0xffffffffffff7ea0, 8) INDIRECT (stack, 0xffffffffffff7ea0, 8) , (const, 0x1d8, 4)]
[(stack, 0xffffffffffff7fb0, 8) INDIRECT (stack, 0xffffffffffff7fb0, 8) , (const, 0x1d8, 4)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0x1d8, 4)]
[ ---  CALL (ram, 0x2306c0, 8) , (unique, 0xbd80, 8)]
[(stack, 0xffffffffffffffd0, 8) MULTIEQUAL (stack, 0xffffffffffffffd0, 8) , (stack, 0xffffffffffffffd0, 8) , (stack, 0xffffffffffffffd0, 8) , (stack, 0xffffffffffffffd0, 8)]
[(stack, 0xffffffffffff7fb0, 8) MULTIEQUAL (stack, 0xffffffffffff7fb0, 8) , (stack, 0xffffffffffff7fb0, 8) , (stack, 0xffffffffffff7fb0, 8) , (stack, 0xffffffffffff7fb0, 8)]
[(stack, 0xffffffffffff7ea0, 8) MULTIEQUAL (stack, 0xffffffffffff7ea0, 8) , (stack, 0xffffffffffff7ea0, 8) , (stack, 0xffffffffffff7ea0, 8) , (stack, 0xffffffffffff7ea0, 8)]
[(stack, 0xffffffffffff7e98, 8) MULTIEQUAL (stack, 0xffffffffffff7e98, 8) , (stack, 0xffffffffffff7e98, 8) , (stack, 0xffffffffffff7e98, 8) , (stack, 0xffffffffffff7e98, 8)]
[(stack, 0xffffffffffff7e90, 8) MULTIEQUAL (stack, 0xffffffffffff7e90, 8) , (stack, 0xffffffffffff7e90, 8) , (stack, 0xffffffffffff7e90, 8) , (stack, 0xffffffffffff7e90, 8)]
[(stack, 0xffffffffffff7e70, 8) MULTIEQUAL (stack, 0xffffffffffff7e70, 8) , (stack, 0xffffffffffff7e70, 8) , (stack, 0xffffffffffff7e70, 8) , (stack, 0xffffffffffff7e70, 8)]
[(stack, 0xffffffffffff7e58, 4) MULTIEQUAL (stack, 0xffffffffffff7e58, 4) , (stack, 0xffffffffffff7e58, 4) , (stack, 0xffffffffffff7e58, 4) , (stack, 0xffffffffffff7e58, 4)]
[(stack, 0xffffffffffff7e38, 8) MULTIEQUAL (stack, 0xffffffffffff7e38, 8) , (stack, 0xffffffffffff7e38, 8) , (stack, 0xffffffffffff7e38, 8) , (stack, 0xffffffffffff7e38, 8)]
[(stack, 0xffffffffffff7e20, 8) MULTIEQUAL (stack, 0xffffffffffff7e20, 8) , (stack, 0xffffffffffff7e20, 8) , (stack, 0xffffffffffff7e20, 8) , (stack, 0xffffffffffff7e20, 8)]
[(stack, 0xffffffffffff7e0c, 4) MULTIEQUAL (stack, 0xffffffffffff7e0c, 4) , (stack, 0xffffffffffff7e0c, 4) , (stack, 0xffffffffffff7e0c, 4) , (stack, 0xffffffffffff7e0c, 4)]
[(stack, 0xffffffffffff7d98, 4) MULTIEQUAL (stack, 0xffffffffffff7d98, 4) , (stack, 0xffffffffffff7d98, 4) , (stack, 0xffffffffffff7d98, 4) , (stack, 0xffffffffffff7d98, 4)]
[(stack, 0xffffffffffff7d80, 8) MULTIEQUAL (stack, 0xffffffffffff7d80, 8) , (stack, 0xffffffffffff7d80, 8) , (stack, 0xffffffffffff7d80, 8) , (stack, 0xffffffffffff7d80, 8)]
[(stack, 0xffffffffffff7d78, 8) MULTIEQUAL (stack, 0xffffffffffff7d78, 8) , (stack, 0xffffffffffff7d78, 8) , (stack, 0xffffffffffff7d78, 8) , (stack, 0xffffffffffff7d78, 8)]
[(ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4) , (unique, 0x100001db, 4)]
[(ram, 0x4f08e8, 4) MULTIEQUAL (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4) , (unique, 0x100001d7, 4)]
[(ram, 0x4f08b0, 8) MULTIEQUAL (ram, 0x4f08b0, 8) , (ram, 0x4f08b0, 8) , (ram, 0x4f08b0, 8) , (unique, 0x100001cf, 8)]
[(ram, 0x4f08a8, 8) MULTIEQUAL (ram, 0x4f08a8, 8) , (ram, 0x4f08a8, 8) , (ram, 0x4f08a8, 8) , (unique, 0x100001c7, 8)]
[(ram, 0x4eaf60, 8) MULTIEQUAL (ram, 0x4eaf60, 8) , (ram, 0x4eaf60, 8) , (ram, 0x4eaf60, 8) , (unique, 0x100001bf, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x16b0bd, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x100001e1, 4) , (const, 0x0, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x168, 4)]
[(ram, 0x4eaf60, 8) INDIRECT (ram, 0x4eaf60, 8) , (const, 0x168, 4)]
[(ram, 0x4f08a8, 8) INDIRECT (ram, 0x4f08a8, 8) , (const, 0x168, 4)]
[(ram, 0x4f08b0, 8) INDIRECT (ram, 0x4f08b0, 8) , (const, 0x168, 4)]
[(ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x168, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x168, 4)]
[(stack, 0xffffffffffff7d78, 8) INDIRECT (stack, 0xffffffffffff7d78, 8) , (const, 0x168, 4)]
[(stack, 0xffffffffffff7d80, 8) INDIRECT (stack, 0xffffffffffff7d80, 8) , (const, 0x168, 4)]
[(stack, 0xffffffffffff7d98, 4) INDIRECT (stack, 0xffffffffffff7d98, 4) , (const, 0x168, 4)]
[(stack, 0xffffffffffff7e0c, 4) INDIRECT (stack, 0xffffffffffff7e0c, 4) , (const, 0x168, 4)]
[(stack, 0xffffffffffff7e20, 8) INDIRECT (stack, 0xffffffffffff7e20, 8) , (const, 0x168, 4)]
[(stack, 0xffffffffffff7e38, 8) INDIRECT (stack, 0xffffffffffff7e38, 8) , (const, 0x168, 4)]
[(stack, 0xffffffffffff7e58, 4) INDIRECT (stack, 0xffffffffffff7e58, 4) , (const, 0x168, 4)]
[(stack, 0xffffffffffff7e70, 8) INDIRECT (stack, 0xffffffffffff7e70, 8) , (const, 0x168, 4)]
[(stack, 0xffffffffffff7e90, 8) INDIRECT (stack, 0xffffffffffff7e90, 8) , (const, 0x168, 4)]
[(stack, 0xffffffffffff7e98, 8) INDIRECT (stack, 0xffffffffffff7e98, 8) , (const, 0x168, 4)]
[(stack, 0xffffffffffff7ea0, 8) INDIRECT (stack, 0xffffffffffff7ea0, 8) , (const, 0x168, 4)]
[(stack, 0xffffffffffff7fb0, 8) INDIRECT (stack, 0xffffffffffff7fb0, 8) , (const, 0x168, 4)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0x168, 4)]
[ ---  CALLIND (register, 0x0, 8) , (register, 0x20, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10000295, 8), (unique, 0x10000295, 8) INT_XOR (register, 0x0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x1000028d, 8), (unique, 0x1000028d, 8) INT_ADD (register, 0x110, 8) , (const, 0x30, 8), (register, 0x0, 8) INT_OR (unique, 0x4ff00, 8) , (unique, 0x50000, 8), (unique, 0x50000, 8) INT_LEFT (ram, 0x4f08b0, 8) , (const, 0x2f, 4), (unique, 0x4ff00, 8) INT_RIGHT (ram, 0x4f08b0, 8) , (const, 0x11, 4)]
[(stack, 0xffffffffffff7fb0, 8) MULTIEQUAL (stack, 0xffffffffffff7fb0, 8) , (stack, 0xffffffffffff7fb0, 8) , (stack, 0xffffffffffff7fb0, 8)]
[(stack, 0xffffffffffff7ea0, 8) MULTIEQUAL (stack, 0xffffffffffff7ea0, 8) , (stack, 0xffffffffffff7ea0, 8) , (stack, 0xffffffffffff7ea0, 8)]
[(stack, 0xffffffffffff7e98, 8) MULTIEQUAL (stack, 0xffffffffffff7e98, 8) , (stack, 0xffffffffffff7e98, 8) , (stack, 0xffffffffffff7e98, 8)]
[(stack, 0xffffffffffff7e90, 8) MULTIEQUAL (stack, 0xffffffffffff7e90, 8) , (stack, 0xffffffffffff7e90, 8) , (stack, 0xffffffffffff7e90, 8)]
[(stack, 0xffffffffffff7e70, 8) MULTIEQUAL (stack, 0xffffffffffff7e70, 8) , (stack, 0xffffffffffff7e70, 8) , (stack, 0xffffffffffff7e70, 8)]
[(stack, 0xffffffffffff7e58, 4) MULTIEQUAL (stack, 0xffffffffffff7e58, 4) , (stack, 0xffffffffffff7e58, 4) , (stack, 0xffffffffffff7e58, 4)]
[(stack, 0xffffffffffff7e38, 8) MULTIEQUAL (stack, 0xffffffffffff7e38, 8) , (stack, 0xffffffffffff7e38, 8) , (stack, 0xffffffffffff7e38, 8)]
[(stack, 0xffffffffffff7e20, 8) MULTIEQUAL (stack, 0xffffffffffff7e20, 8) , (stack, 0xffffffffffff7e20, 8) , (stack, 0xffffffffffff7e20, 8)]
[(stack, 0xffffffffffff7e0c, 4) MULTIEQUAL (stack, 0xffffffffffff7e0c, 4) , (stack, 0xffffffffffff7e0c, 4) , (stack, 0xffffffffffff7e0c, 4)]
[(stack, 0xffffffffffff7d98, 4) MULTIEQUAL (stack, 0xffffffffffff7d98, 4) , (stack, 0xffffffffffff7d98, 4) , (stack, 0xffffffffffff7d98, 4)]
[(stack, 0xffffffffffff7d80, 8) MULTIEQUAL (stack, 0xffffffffffff7d80, 8) , (stack, 0xffffffffffff7d80, 8) , (stack, 0xffffffffffff7d80, 8)]
[(stack, 0xffffffffffff7d78, 8) MULTIEQUAL (stack, 0xffffffffffff7d78, 8) , (stack, 0xffffffffffff7d78, 8) , (stack, 0xffffffffffff7d78, 8)]
[(ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(ram, 0x4f08e8, 4) MULTIEQUAL (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4) , (ram, 0x4f08e8, 4)]
[(ram, 0x4f08b0, 8) MULTIEQUAL (ram, 0x4f08b0, 8) , (ram, 0x4f08b0, 8) , (ram, 0x4f08b0, 8)]
[(ram, 0x4f08a8, 8) MULTIEQUAL (ram, 0x4f08a8, 8) , (ram, 0x4f08a8, 8) , (ram, 0x4f08a8, 8)]
[(ram, 0x4eaf60, 8) MULTIEQUAL (ram, 0x4eaf60, 8) , (ram, 0x4eaf60, 8) , (ram, 0x4eaf60, 8)]
[(register, 0x0, 4) COPY (register, 0xa0, 4), (register, 0xa0, 4) MULTIEQUAL (register, 0xa0, 4) , (register, 0xa0, 4) , (register, 0xa0, 4)]
[ ---  CBRANCH (ram, 0x16b1c6, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffffd0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x1000029d, 8), (unique, 0x1000029d, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8), (stack, 0xffffffffffffffd0, 8) MULTIEQUAL (stack, 0xffffffffffffffd0, 8) , (stack, 0xffffffffffffffd0, 8) , (stack, 0xffffffffffffffd0, 8)]
[(ram, 0x4eaf60, 8) COPY (ram, 0x4eaf60, 8)]
[(ram, 0x4f08a8, 8) COPY (ram, 0x4f08a8, 8)]
[(ram, 0x4f08b0, 8) COPY (ram, 0x4f08b0, 8)]
[(ram, 0x4f08e8, 4) COPY (ram, 0x4f08e8, 4)]
[(ram, 0x4f08f8, 4) COPY (ram, 0x4f08f8, 4)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 4)]
[(stack, 0xffffffffffff7d78, 8) INDIRECT (stack, 0xffffffffffff7d78, 8) , (const, 0x193, 4)]
[(stack, 0xffffffffffff7d80, 8) INDIRECT (stack, 0xffffffffffff7d80, 8) , (const, 0x193, 4)]
[(stack, 0xffffffffffff7d98, 4) INDIRECT (stack, 0xffffffffffff7d98, 4) , (const, 0x193, 4)]
[(stack, 0xffffffffffff7e0c, 4) INDIRECT (stack, 0xffffffffffff7e0c, 4) , (const, 0x193, 4)]
[(stack, 0xffffffffffff7e20, 8) INDIRECT (stack, 0xffffffffffff7e20, 8) , (const, 0x193, 4)]
[(stack, 0xffffffffffff7e38, 8) INDIRECT (stack, 0xffffffffffff7e38, 8) , (const, 0x193, 4)]
[(stack, 0xffffffffffff7e58, 4) INDIRECT (stack, 0xffffffffffff7e58, 4) , (const, 0x193, 4)]
[(stack, 0xffffffffffff7e70, 8) INDIRECT (stack, 0xffffffffffff7e70, 8) , (const, 0x193, 4)]
[(stack, 0xffffffffffff7e90, 8) INDIRECT (stack, 0xffffffffffff7e90, 8) , (const, 0x193, 4)]
[(stack, 0xffffffffffff7e98, 8) INDIRECT (stack, 0xffffffffffff7e98, 8) , (const, 0x193, 4)]
[(stack, 0xffffffffffff7ea0, 8) INDIRECT (stack, 0xffffffffffff7ea0, 8) , (const, 0x193, 4)]
[(stack, 0xffffffffffff7fb0, 8) INDIRECT (stack, 0xffffffffffff7fb0, 8) , (const, 0x193, 4)]
[(stack, 0xffffffffffffffd0, 8) INDIRECT (stack, 0xffffffffffffffd0, 8) , (const, 0x193, 4)]
[ ---  CALL (ram, 0x234c80, 8)]
[(ram, 0x4eaf60, 8) COPY (ram, 0x4eaf60, 8), (ram, 0x4eaf60, 8) INDIRECT (ram, 0x4eaf60, 8) , (const, 0x193, 4)]
[(ram, 0x4f08a8, 8) COPY (ram, 0x4f08a8, 8), (ram, 0x4f08a8, 8) INDIRECT (ram, 0x4f08a8, 8) , (const, 0x193, 4)]
[(ram, 0x4f08b0, 8) COPY (ram, 0x4f08b0, 8), (ram, 0x4f08b0, 8) INDIRECT (ram, 0x4f08b0, 8) , (const, 0x193, 4)]
[(ram, 0x4f08e8, 4) COPY (ram, 0x4f08e8, 4), (ram, 0x4f08e8, 4) INDIRECT (ram, 0x4f08e8, 4) , (const, 0x193, 4)]
[(ram, 0x4f08f8, 4) COPY (ram, 0x4f08f8, 4), (ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x193, 4)]
[ ---  RETURN (const, 0x1, 4)]
