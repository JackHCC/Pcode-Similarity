[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff08, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff08, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff08, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff08, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff08, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff08, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff08, 8)]
[(register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff08, 8)]
[(stack, 0xffffffffffffff28, 8) COPY (register, 0x10, 8)]
[(stack, 0xffffffffffffffc0, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10000d34, 8), (unique, 0x10000d34, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8)]
[(stack, 0xffffffffffffff20, 8) COPY (register, 0x80, 8)]
[ ---  CBRANCH (ram, 0x209100, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x30, 8)]
[ ---  CBRANCH (ram, 0x2094c0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x3d, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) CAST (unique, 0x10000d4c, 8), (unique, 0x10000d4c, 8) INT_ADD (unique, 0x3880, 8) , (unique, 0x10000d44, 8), (unique, 0x10000d44, 8) CAST (unique, 0xbd80, 8), (unique, 0x3880, 8) INT_ADD (unique, 0x10000d3c, 8) , (const, 0xffffffffffffffff, 8), (unique, 0x10000d3c, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x38, 8)]
[ ---  CBRANCH (ram, 0x209100, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x88, 8) , (const, 0x0, 8)]
[(stack, 0xffffffffffffff40, 8) COPY (register, 0x88, 8)]
[(stack, 0xffffffffffffff38, 8) COPY (register, 0x8, 8)]
[ ---  CBRANCH (ram, 0x2094c9, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbb00, 1) , (const, 0x3a, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x68, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x68, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x68, 4), (stack, 0xffffffffffffff00, 8) COPY (const, 0x2090d6, 8)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x68, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x68, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x68, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x68, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x68, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x68, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x68, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x68, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x68, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x68, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x68, 4)]
[(register, 0x0, 8) CALL (ram, 0x121110, 8) , (unique, 0x10000d54, 8) , (const, 0x3d, 4), (unique, 0x10000d54, 8) CAST (unique, 0xbd80, 8)]
[ ---  CBRANCH (ram, 0x2094c9, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffff40, 8) , (const, 0x0, 8), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x68, 4)]
[(unique, 0x10000b5c, 8) COPY (stack, 0xffffffffffffff38, 8)]
[ ---  CBRANCH (ram, 0x2094c9, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  CBRANCH (ram, 0x209680, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) CAST (unique, 0x10000d5c, 8), (unique, 0x10000d5c, 8) LOAD (const, 0x1b1, 4) , (unique, 0x1000069b, 8), (unique, 0x1000069b, 8) PTRSUB (stack, 0xffffffffffffff28, 8) , (const, 0x0, 8), (stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000843, 8) , (unique, 0x3100, 8), (unique, 0x10000843, 8) PTRSUB (stack, 0xffffffffffffff28, 8) , (const, 0x0, 8), (unique, 0x3100, 8) CAST (unique, 0x10000d6c, 8), (unique, 0x10000d6c, 8) INT_ADD (unique, 0x10000d64, 8) , (const, 0x4, 8), (unique, 0x10000d64, 8) CAST (unique, 0x10000813, 8), (unique, 0x10000813, 8) PTRSUB (unique, 0x1000080b, 8) , (const, 0x0, 8), (unique, 0x1000080b, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x2, 8) , (const, 0x30, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x7ac, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x7ac, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x7a8, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x7ac, 4), (stack, 0xffffffffffffff00, 8) COPY (const, 0x209696, 8)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x7ac, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x7ac, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x7ac, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x7ac, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x7ac, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x7ac, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x7ac, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x7ac, 4)]
[ ---  CBRANCH (ram, 0x209971, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10000d7c, 8), (unique, 0x10000d7c, 8) CALL (ram, 0x121020, 8) , (unique, 0xbd80, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) INT_ADD (unique, 0x10000d74, 8) , (const, 0x5, 8), (unique, 0x10000d74, 8) CAST (unique, 0x10000833, 8), (unique, 0x10000833, 8) PTRSUB (unique, 0x1000082b, 8) , (const, 0x0, 8), (unique, 0x1000082b, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x2, 8) , (const, 0x30, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x30, 8)]
[ ---  BRANCH (ram, 0x2094e3, 1)]
[(register, 0xb0, 8) COPY (const, 0x0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x7c8, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x7c8, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x7c8, 4), (stack, 0xffffffffffffff00, 8) COPY (const, 0x20997c, 8)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x7c8, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x7c8, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x7c8, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x7c8, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x7c8, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x7c8, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x7c8, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x7c8, 4)]
[ ---  CALL (ram, 0x1212c8, 8) , (unique, 0xbd80, 8)]
[(register, 0x8, 8) COPY (const, 0x1, 8)]
[ ---  BRANCH (ram, 0x2094fa, 1)]
[(register, 0x8, 8) COPY (const, 0x1, 8)]
[(unique, 0x10000cd4, 8) COPY (unique, 0xbd80, 8)]
[ ---  CBRANCH (ram, 0x2094fa, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (const, 0x0, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3400, 8) , (const, 0x7e, 1), (unique, 0x3400, 8) CAST (unique, 0x10000d94, 8), (unique, 0x10000d94, 8) INT_ADD (unique, 0x10000d84, 8) , (unique, 0x10000d8c, 8), (unique, 0x10000d8c, 8) CAST (unique, 0x100006a3, 8), (unique, 0x10000d84, 8) CAST (unique, 0x100006b3, 8), (unique, 0x100006b3, 8) PTRSUB (register, 0xb8, 8) , (const, 0x0, 8), (unique, 0x100006a3, 8) PTRSUB (register, 0xb0, 8) , (const, 0x0, 8), (register, 0xb0, 8) MULTIEQUAL (unique, 0x10000cd4, 8) , (register, 0x0, 8), (register, 0xb8, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x30, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000da4, 8), (unique, 0x10000da4, 8) INT_ADD (unique, 0x10000d9c, 8) , (const, 0x1, 8), (unique, 0x10000d9c, 8) CAST (unique, 0x100006c3, 8), (unique, 0x100006c3, 8) PTRSUB (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x30, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x795, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x790, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x78a, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3a00, 8) , (const, 0x0, 1), (unique, 0x3a00, 8) CAST (unique, 0x10000dbc, 8), (unique, 0x10000dbc, 8) INT_ADD (unique, 0x10000db4, 8) , (unique, 0x10000a53, 8), (unique, 0x10000db4, 8) CAST (unique, 0x10000a5b, 8), (unique, 0x10000a5b, 8) PTRSUB (register, 0xb0, 8) , (const, 0x0, 8), (unique, 0x10000a53, 8) INT_ADD (unique, 0x10000dac, 8) , (const, 0x1, 8), (unique, 0x10000dac, 8) CAST (unique, 0x100006d3, 8), (unique, 0x100006d3, 8) PTRSUB (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x30, 8), (register, 0xb0, 8) MULTIEQUAL (unique, 0x10000cd4, 8) , (register, 0x0, 8)]
[(register, 0x8, 8) COPY (const, 0x0, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8) , (register, 0x8, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x7a1, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x38, 8) , (register, 0xb0, 8), (register, 0xb0, 8) MULTIEQUAL (unique, 0x10000cd4, 8) , (register, 0xb0, 8) , (register, 0xb0, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x0, 8) INT_ZEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) CAST (unique, 0x10000de4, 8), (unique, 0x10000de4, 8) INT_ADD (unique, 0x10000dd4, 8) , (unique, 0x10000ddc, 8), (unique, 0x10000ddc, 8) CAST (unique, 0x10000453, 8), (unique, 0x10000dd4, 8) CAST (unique, 0x10000463, 8), (unique, 0x10000463, 8) PTRSUB (unique, 0x3100, 8) , (const, 0x0, 8), (unique, 0x10000453, 8) PTRSUB (register, 0x8, 8) , (const, 0x0, 8), (unique, 0x3100, 8) CAST (unique, 0x10000dcc, 8), (unique, 0x10000dcc, 8) INT_ADD (unique, 0x10000dc4, 8) , (const, 0x1, 8), (unique, 0x10000dc4, 8) CAST (unique, 0x10000443, 8), (unique, 0x10000443, 8) PTRSUB (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (stack, 0xffffffffffffff20, 8), (register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8) , (unique, 0x10000b5c, 8), (stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[ ---  CBRANCH (ram, 0x209528, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (unique, 0xbb00, 1) , (const, 0x3b, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8), (unique, 0x3400, 8) CAST (unique, 0x10000de4, 8), (unique, 0x10000de4, 8) INT_ADD (unique, 0x10000dd4, 8) , (unique, 0x10000ddc, 8), (unique, 0x10000ddc, 8) CAST (unique, 0x10000453, 8), (unique, 0x10000dd4, 8) CAST (unique, 0x10000463, 8), (unique, 0x10000463, 8) PTRSUB (unique, 0x3100, 8) , (const, 0x0, 8), (unique, 0x10000453, 8) PTRSUB (register, 0x8, 8) , (const, 0x0, 8), (unique, 0x3100, 8) CAST (unique, 0x10000dcc, 8), (unique, 0x10000dcc, 8) INT_ADD (unique, 0x10000dc4, 8) , (const, 0x1, 8), (unique, 0x10000dc4, 8) CAST (unique, 0x10000443, 8), (unique, 0x10000443, 8) PTRSUB (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (stack, 0xffffffffffffff20, 8), (register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8) , (unique, 0x10000b5c, 8), (stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[ ---  CBRANCH (ram, 0x209135, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbb00, 1) , (const, 0x5c, 1)]
[ ---  CBRANCH (ram, 0x2095d0, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_NOTEQUAL (unique, 0x1d680, 8) , (const, 0x0, 8), (unique, 0x1d680, 8) INT_AND (unique, 0x1d600, 8) , (const, 0x1, 8), (unique, 0x1d600, 8) INT_RIGHT (const, 0x400800100000201, 8) , (unique, 0x1d580, 8), (unique, 0x1d580, 8) INT_AND (register, 0x0, 8) , (const, 0x3f, 8)]
[(register, 0x0, 8) INT_ZEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) CAST (unique, 0x10000dfc, 8), (unique, 0x10000dfc, 8) INT_ADD (unique, 0x10000df4, 8) , (unique, 0x100009db, 8), (unique, 0x10000df4, 8) CAST (unique, 0x100009e3, 8), (unique, 0x100009e3, 8) PTRSUB (register, 0x8, 8) , (const, 0x0, 8), (unique, 0x100009db, 8) INT_ADD (unique, 0x10000dec, 8) , (const, 0x1, 8), (unique, 0x10000dec, 8) CAST (unique, 0x10000473, 8), (unique, 0x10000473, 8) PTRSUB (unique, 0x3100, 8) , (const, 0x0, 8)]
[(unique, 0x3100, 8) CAST (unique, 0x10000e0c, 8), (unique, 0x10000e0c, 8) INT_ADD (unique, 0x10000e04, 8) , (const, 0x2, 8), (unique, 0x10000e04, 8) CAST (unique, 0x10000483, 8), (unique, 0x10000483, 8) PTRSUB (unique, 0xbd80, 8) , (const, 0x0, 8)]
[(unique, 0x10000cfc, 8) COPY (unique, 0x3100, 8)]
[ ---  CBRANCH (ram, 0x209171, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (unique, 0xbb00, 1) , (const, 0x3b, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) CAST (unique, 0x10000dfc, 8), (unique, 0x10000dfc, 8) INT_ADD (unique, 0x10000df4, 8) , (unique, 0x100009db, 8), (unique, 0x10000df4, 8) CAST (unique, 0x100009e3, 8), (unique, 0x100009e3, 8) PTRSUB (register, 0x8, 8) , (const, 0x0, 8), (unique, 0x100009db, 8) INT_ADD (unique, 0x10000dec, 8) , (const, 0x1, 8), (unique, 0x10000dec, 8) CAST (unique, 0x10000473, 8), (unique, 0x10000473, 8) PTRSUB (unique, 0x3100, 8) , (const, 0x0, 8)]
[(unique, 0x10000b84, 8) COPY (register, 0x10, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0x3100, 8) , (unique, 0x3100, 8)]
[ ---  CBRANCH (ram, 0x209538, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 1) , (const, 0x5c, 1), (register, 0x0, 1) SUBPIECE (register, 0x0, 8) , (const, 0x0, 4), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[(register, 0x0, 8) INT_ZEXT (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) CAST (unique, 0x10000e24, 8), (unique, 0x10000e24, 8) INT_ADD (unique, 0x10000e1c, 8) , (unique, 0x100009f3, 8), (unique, 0x10000e1c, 8) CAST (unique, 0x100009fb, 8), (unique, 0x100009fb, 8) PTRSUB (register, 0x8, 8) , (const, 0x0, 8), (unique, 0x100009f3, 8) INT_ADD (unique, 0x10000e14, 8) , (const, 0x1, 8), (unique, 0x10000e14, 8) CAST (unique, 0x10000493, 8), (unique, 0x10000493, 8) PTRSUB (register, 0x10, 8) , (const, 0x0, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0x10000b7c, 8) , (unique, 0x10000b84, 8)]
[(unique, 0x3100, 8) CAST (unique, 0x10000e34, 8), (unique, 0x10000e34, 8) INT_ADD (unique, 0x10000e2c, 8) , (const, 0x1, 8), (unique, 0x10000e2c, 8) CAST (unique, 0x100004a3, 8), (unique, 0x100004a3, 8) PTRSUB (register, 0x10, 8) , (const, 0x0, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0x10000b7c, 8) , (unique, 0x10000b84, 8)]
[(unique, 0x10000d04, 8) COPY (register, 0x10, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0x10000b7c, 8) , (unique, 0x10000b84, 8)]
[ ---  CBRANCH (ram, 0x209150, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (const, 0x3a, 1) , (unique, 0xbb00, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3a00, 8), (unique, 0x3a00, 8) CAST (unique, 0x10000e24, 8), (unique, 0x10000e24, 8) INT_ADD (unique, 0x10000e1c, 8) , (unique, 0x100009f3, 8), (unique, 0x10000e1c, 8) CAST (unique, 0x100009fb, 8), (unique, 0x100009fb, 8) PTRSUB (register, 0x8, 8) , (const, 0x0, 8), (unique, 0x100009f3, 8) INT_ADD (unique, 0x10000e14, 8) , (const, 0x1, 8), (unique, 0x10000e14, 8) CAST (unique, 0x10000493, 8), (unique, 0x10000493, 8) PTRSUB (register, 0x10, 8) , (const, 0x0, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0x10000b7c, 8) , (unique, 0x10000b84, 8)]
[(register, 0xb8, 8) MULTIEQUAL (unique, 0x10000cfc, 8) , (unique, 0x10000d04, 8)]
[(unique, 0x10000b7c, 8) COPY (register, 0x10, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0x3100, 8) , (unique, 0x3100, 8)]
[ ---  CBRANCH (ram, 0x209160, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_NOTEQUAL (unique, 0x1d680, 8) , (const, 0x0, 8), (unique, 0x1d680, 8) INT_AND (unique, 0x1d600, 8) , (const, 0x1, 8), (unique, 0x1d600, 8) INT_RIGHT (const, 0x400800100000201, 8) , (unique, 0x1d580, 8), (unique, 0x1d580, 8) INT_AND (register, 0x0, 8) , (const, 0x3f, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x2095d0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x3100, 8) , (register, 0x10, 8)]
[(register, 0xa8, 8) COPY (const, 0x3e8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3400, 8) , (const, 0x0, 1), (unique, 0x3400, 8) CAST (unique, 0x10000e74, 8), (unique, 0x10000e74, 8) INT_ADD (unique, 0x10000e6c, 8) , (register, 0x0, 8), (unique, 0x10000e6c, 8) CAST (unique, 0x3800, 8), (unique, 0x3800, 8) CAST (unique, 0x10000e64, 8), (unique, 0x10000e64, 8) INT_ADD (unique, 0x10000e5c, 8) , (unique, 0x10000175, 8), (unique, 0x10000e5c, 8) CAST (unique, 0x10000a13, 8), (unique, 0x10000a13, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff10, 8), (unique, 0x10000175, 8) INT_2COMP (register, 0x10, 8), (register, 0x10, 8) INT_AND (unique, 0x3100, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3100, 8) INT_ADD (register, 0x0, 8) , (const, 0x1f, 8), (register, 0x0, 8) CALL (ram, 0x121000, 8) , (unique, 0x10000e54, 8) , (register, 0x30, 8), (unique, 0x10000e54, 8) CAST (unique, 0x3400, 8), (register, 0x30, 8) CAST (unique, 0x10000e4c, 8), (unique, 0x10000e4c, 8) INT_SUB (unique, 0x10000e3c, 8) , (unique, 0x10000e44, 8), (unique, 0x10000e44, 8) CAST (unique, 0xbd80, 8), (unique, 0x10000e3c, 8) CAST (register, 0xb8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000e7c, 8) , (const, 0x2091b7, 8), (unique, 0x10000e7c, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x10000a2b, 8) , (unique, 0x10000a23, 8) , (const, 0x1, 8), (unique, 0x10000a2b, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff08, 8), (unique, 0x10000a23, 8) INT_ADD (unique, 0x10000175, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0x10000175, 8) INT_2COMP (register, 0x10, 8), (register, 0x10, 8) INT_AND (unique, 0x3100, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3100, 8) INT_ADD (register, 0x0, 8) , (const, 0x1f, 8), (register, 0x0, 8) CALL (ram, 0x121000, 8) , (unique, 0x10000e54, 8) , (register, 0x30, 8), (unique, 0x10000e54, 8) CAST (unique, 0x3400, 8), (register, 0x30, 8) CAST (unique, 0x10000e4c, 8), (unique, 0x10000e4c, 8) INT_SUB (unique, 0x10000e3c, 8) , (unique, 0x10000e44, 8), (unique, 0x10000e44, 8) CAST (unique, 0xbd80, 8), (unique, 0x10000e3c, 8) CAST (register, 0xb8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x121, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0xf9, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x121, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x11e, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0xf9, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x121, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x120, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0xf9, 4), (stack, 0xffffffffffffff00, 8) COPY (const, 0x209194, 8)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x121, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x120, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0xf9, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x121, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x120, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0xf9, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x121, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x120, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0xf9, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x121, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x120, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0xf9, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x121, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x120, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0xf9, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x121, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x120, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0xf9, 4)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x121, 4), (stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x120, 4), (stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0xf9, 4)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x121, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x120, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0xf9, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x121, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x120, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0xf9, 4)]
[(stack, 0xffffffffffffff40, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10000e84, 8), (unique, 0x10000e84, 8) CALL (ram, 0x121160, 8) , (unique, 0x3800, 8) , (unique, 0x3400, 8) , (register, 0x0, 8), (unique, 0x3800, 8) CAST (unique, 0x10000e64, 8), (unique, 0x10000e64, 8) INT_ADD (unique, 0x10000e5c, 8) , (unique, 0x10000175, 8), (unique, 0x10000e5c, 8) CAST (unique, 0x10000a13, 8), (unique, 0x10000a13, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff10, 8), (unique, 0x10000175, 8) INT_2COMP (register, 0x10, 8), (register, 0x10, 8) INT_AND (unique, 0x3100, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3100, 8) INT_ADD (register, 0x0, 8) , (const, 0x1f, 8), (register, 0x0, 8) CALL (ram, 0x121000, 8) , (unique, 0x10000e54, 8) , (register, 0x30, 8), (unique, 0x10000e54, 8) CAST (unique, 0x3400, 8), (register, 0x30, 8) CAST (unique, 0x10000e4c, 8), (unique, 0x10000e4c, 8) INT_SUB (unique, 0x10000e3c, 8) , (unique, 0x10000e44, 8), (unique, 0x10000e44, 8) CAST (unique, 0xbd80, 8), (unique, 0x10000e3c, 8) CAST (register, 0xb8, 8)]
[(stack, 0xffffffffffffff38, 8) COPY (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x10000e8c, 8), (unique, 0x10000e8c, 8) PTRADD (unique, 0x10000aac, 8) , (const, 0x8, 8) , (const, 0x1, 8), (unique, 0x10000aac, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff30, 8) COPY (unique, 0x3100, 8), (unique, 0x3100, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff88, 8)]
[(unique, 0x10000bbc, 8) COPY (register, 0x20, 8), (register, 0x20, 8) PTRADD (unique, 0x1000038e, 8) , (unique, 0x10000175, 8) , (const, 0x1, 8), (unique, 0x1000038e, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffb08, 8), (unique, 0x10000175, 8) INT_2COMP (register, 0x10, 8), (register, 0x10, 8) INT_AND (unique, 0x3100, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3100, 8) INT_ADD (register, 0x0, 8) , (const, 0x1f, 8), (register, 0x0, 8) CALL (ram, 0x121000, 8) , (unique, 0x10000e54, 8) , (register, 0x30, 8), (unique, 0x10000e54, 8) CAST (unique, 0x3400, 8), (register, 0x30, 8) CAST (unique, 0x10000e4c, 8), (unique, 0x10000e4c, 8) INT_SUB (unique, 0x10000e3c, 8) , (unique, 0x10000e44, 8), (unique, 0x10000e44, 8) CAST (unique, 0xbd80, 8), (unique, 0x10000e3c, 8) CAST (register, 0xb8, 8)]
[(unique, 0x10000cac, 8) COPY (unique, 0x3800, 8), (unique, 0x3800, 8) CAST (unique, 0x10000e9c, 8), (unique, 0x10000e9c, 8) INT_ADD (unique, 0x10000e94, 8) , (unique, 0x10000175, 8), (unique, 0x10000e94, 8) CAST (unique, 0x10000396, 8), (unique, 0x10000396, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffb10, 8), (unique, 0x10000175, 8) INT_2COMP (register, 0x10, 8), (register, 0x10, 8) INT_AND (unique, 0x3100, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x3100, 8) INT_ADD (register, 0x0, 8) , (const, 0x1f, 8), (register, 0x0, 8) CALL (ram, 0x121000, 8) , (unique, 0x10000e54, 8) , (register, 0x30, 8), (unique, 0x10000e54, 8) CAST (unique, 0x3400, 8), (register, 0x30, 8) CAST (unique, 0x10000e4c, 8), (unique, 0x10000e4c, 8) INT_SUB (unique, 0x10000e3c, 8) , (unique, 0x10000e44, 8), (unique, 0x10000e44, 8) CAST (unique, 0xbd80, 8), (unique, 0x10000e3c, 8) CAST (register, 0xb8, 8)]
[ ---  BRANCH (ram, 0x209239, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000ea4, 8) , (const, 0x209252, 8), (unique, 0x10000ea4, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8), (register, 0x20, 8) MULTIEQUAL (unique, 0x10000bbc, 8) , (unique, 0x10000bc4, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x150, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x150, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x150, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x14f, 4), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x150, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x14f, 4), (stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x150, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x14f, 4), (stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x150, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x14f, 4), (stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x150, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x14f, 4), (stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x150, 4), (stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x14f, 4), (stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x150, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x14f, 4), (stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x150, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x14f, 4), (stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x150, 4), (stack, 0xffffffffffffff50, 8) INDIRECT (stack, 0xffffffffffffff50, 8) , (const, 0x14f, 4), (stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x150, 4), (stack, 0xffffffffffffffa8, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x14f, 4), (stack, 0xffffffffffffffa8, 8) MULTIEQUAL (stack, 0xffffffffffffffa8, 8) , (stack, 0xffffffffffffffa8, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x150, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x14f, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CBRANCH (ram, 0x2091f0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x1e3810, 8) , (unique, 0x10000eac, 8) , (unique, 0x10000acc, 8) , (register, 0xb0, 8) , (register, 0x8, 8) , (unique, 0x10000eb4, 8), (unique, 0x10000eb4, 8) CAST (unique, 0x10000adc, 8), (unique, 0x10000eac, 8) CAST (unique, 0x10000af4, 8), (register, 0x8, 8) INT_SEXT (register, 0xa8, 4), (register, 0xa8, 4) SUBPIECE (register, 0xa8, 8) , (const, 0x0, 4), (unique, 0x10000acc, 8) COPY (stack, 0xffffffffffffff30, 8), (unique, 0x10000adc, 8) COPY (stack, 0xffffffffffffff38, 8), (unique, 0x10000af4, 8) COPY (stack, 0xffffffffffffff40, 8), (register, 0xa8, 8) MULTIEQUAL (register, 0xa8, 8) , (register, 0xa8, 8), (register, 0xb0, 8) MULTIEQUAL (unique, 0x10000cac, 8) , (unique, 0x10000cb4, 8), (stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8), (stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8), (stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x38, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x30, 8)]
[(unique, 0xbd80, 8) CAST (unique, 0x10000ebc, 8), (unique, 0x10000ebc, 8) LOAD (const, 0x1b1, 4) , (unique, 0x100004fb, 8), (unique, 0x100004fb, 8) PTRSUB (stack, 0xffffffffffffff28, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x209399, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffff50, 8) , (const, 0x0, 8)]
[(stack, 0xffffffffffffff38, 8) COPY (unique, 0x100003a7, 8), (unique, 0x100003a7, 8) CAST (unique, 0x10000ecc, 8), (unique, 0x10000ecc, 8) INT_AND (unique, 0x10000ec4, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10000ec4, 8) CAST (stack, 0xffffffffffffff38, 8)]
[ ---  CBRANCH (ram, 0x209399, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x10000ed4, 8) , (const, 0x0, 8), (unique, 0x10000ed4, 8) CAST (stack, 0xffffffffffffffa8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000ee4, 8) , (const, 0x2092ae, 8), (unique, 0x10000ee4, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x38, 8) INDIRECT (stack, 0xffffffffffffffa8, 8) , (const, 0x194, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x194, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x194, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x194, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x193, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x194, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x193, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x194, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x193, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x194, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x193, 4)]
[(unique, 0x10000afc, 8) COPY (stack, 0xffffffffffffff40, 8), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x194, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x193, 4), (stack, 0xffffffffffffff40, 8) COPY (unique, 0x10000edc, 8), (unique, 0x10000edc, 8) CAST (stack, 0xffffffffffffffa8, 8)]
[(unique, 0x10000ad4, 8) COPY (stack, 0xffffffffffffff30, 8), (stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x194, 4), (stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x193, 4), (stack, 0xffffffffffffff30, 8) COPY (unique, 0xbd80, 8)]
[(stack, 0xffffffffffffff38, 4) SUBPIECE (stack, 0xffffffffffffff38, 8) , (const, 0x0, 8), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x194, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x193, 4)]
[ ---  CBRANCH (ram, 0x209880, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (stack, 0xffffffffffffff18, 8) , (unique, 0x3400, 8), (unique, 0x3400, 8) CAST (unique, 0x10000f04, 8), (unique, 0x10000f04, 8) INT_ADD (unique, 0x10000ef4, 8) , (unique, 0x10000efc, 8), (unique, 0x10000efc, 8) CAST (unique, 0x10000503, 8), (unique, 0x10000ef4, 8) CAST (unique, 0x10000513, 8), (unique, 0x10000513, 8) PTRSUB (stack, 0xffffffffffffff10, 8) , (const, 0x0, 8), (unique, 0x10000503, 8) PTRSUB (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10000eec, 8), (unique, 0x10000eec, 8) CALL (ram, 0x121100, 8) , (stack, 0xffffffffffffffa8, 8), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x194, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x194, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x193, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x193, 4), (stack, 0xffffffffffffff18, 8) COPY (unique, 0xbd80, 8), (stack, 0xffffffffffffff10, 8) COPY (unique, 0xbd80, 8)]
[(unique, 0x10000b6c, 8) COPY (stack, 0xffffffffffffff10, 8)]
[(unique, 0x10000c74, 8) COPY (unique, 0x10000c64, 8), (unique, 0x10000c64, 8) COPY (stack, 0xffffffffffffff30, 8)]
[(unique, 0x10000c7c, 8) COPY (stack, 0xffffffffffffff40, 8)]
[(unique, 0x10000d14, 4) COPY (stack, 0xffffffffffffff38, 4)]
[ ---  CBRANCH (ram, 0x209350, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffff30, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x2092ee, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffff18, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x20961b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffff30, 8) , (const, 0x0, 8)]
[(stack, 0xffffffffffffff40, 8) COPY (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff30, 8) CAST (unique, 0x10000f24, 8), (unique, 0x10000f24, 8) INT_OR (unique, 0x100003b8, 8) , (unique, 0x100003c0, 8), (unique, 0x100003c0, 8) INT_AND (unique, 0x10000f1c, 8) , (const, 0xffffffff, 8), (unique, 0x10000f1c, 8) CAST (stack, 0xffffffffffffff38, 8), (unique, 0x100003b8, 8) INT_AND (unique, 0x10000f14, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10000f14, 8) CAST (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff38, 8) COPY (unique, 0x10000afc, 8)]
[ ---  CBRANCH (ram, 0x20931b, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (unique, 0x1000036e, 8) , (const, 0x64, 8), (unique, 0x1000036e, 8) INT_MULT (unique, 0x10000f0c, 8) , (const, 0x2, 8), (unique, 0x10000f0c, 8) CAST (register, 0x0, 8)]
[(register, 0x0, 8) COPY (const, 0x64, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000543, 8) , (register, 0x0, 8), (unique, 0x10000543, 8) PTRSUB (stack, 0xffffffffffffff28, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10000f34, 8), (unique, 0x10000f34, 8) INT_ADD (unique, 0x10000f2c, 8) , (register, 0x0, 8), (unique, 0x10000f2c, 8) CAST (unique, 0x10000523, 8), (unique, 0x10000523, 8) PTRSUB (stack, 0xffffffffffffff18, 8) , (const, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x1000036e, 8) , (register, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000f3c, 8) , (const, 0x20932d, 8), (unique, 0x10000f3c, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x1f6, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x1f6, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x1f2, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x1f6, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x1f5, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x1f6, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x1f5, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x1f6, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x1f5, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x1f6, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x1f5, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x1f6, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x1f5, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x1f6, 4), (stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x1f5, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x1f6, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x1f5, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1f6, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x1f5, 4)]
[(unique, 0x10000c44, 8) COPY (stack, 0xffffffffffffff40, 8), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x1f6, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x1f5, 4)]
[ ---  CBRANCH (ram, 0x209961, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10000f4c, 8), (unique, 0x10000f4c, 8) CALL (ram, 0x121020, 8) , (unique, 0x10000ad4, 8) , (unique, 0x10000f44, 8), (unique, 0x10000f44, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x1, 8), (register, 0x0, 8) CAST (unique, 0x10000f34, 8), (unique, 0x10000f34, 8) INT_ADD (unique, 0x10000f2c, 8) , (register, 0x0, 8), (unique, 0x10000f2c, 8) CAST (unique, 0x10000523, 8), (unique, 0x10000523, 8) PTRSUB (stack, 0xffffffffffffff18, 8) , (const, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x1000036e, 8) , (register, 0x0, 8)]
[(stack, 0xffffffffffffff30, 4) SUBPIECE (stack, 0xffffffffffffff30, 8) , (const, 0x0, 8)]
[(unique, 0x10000b64, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x30, 8)]
[(unique, 0x10000c5c, 8) COPY (register, 0x0, 8)]
[(unique, 0x10000c84, 8) COPY (stack, 0xffffffffffffff38, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000f7c, 8) , (const, 0x20936c, 8), (unique, 0x10000f7c, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x21b, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x21b, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x21a, 4), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x21b, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x21a, 4), (stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x21b, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x21a, 4), (stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x21b, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x21a, 4), (stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x21b, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x21a, 4), (stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x21b, 4), (stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x21a, 4), (stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x21b, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x21a, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x0, 8) , (const, 0x0, 1), (register, 0x0, 8) CAST (unique, 0x10000f8c, 8), (unique, 0x10000f8c, 8) CALL (ram, 0x121230, 8) , (unique, 0x3400, 8) , (register, 0x88, 8) , (unique, 0x10000f84, 8), (unique, 0x10000f84, 8) CAST (register, 0x0, 8), (unique, 0x3400, 8) CAST (unique, 0x10000f64, 8), (unique, 0x10000f64, 8) INT_ADD (unique, 0x10000f54, 8) , (unique, 0x10000f5c, 8), (unique, 0x10000f5c, 8) CAST (unique, 0x1000054b, 8), (unique, 0x10000f54, 8) CAST (unique, 0x1000055b, 8), (unique, 0x1000055b, 8) PTRSUB (register, 0x10, 8) , (const, 0x0, 8), (unique, 0x1000054b, 8) PTRSUB (register, 0x80, 8) , (const, 0x0, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0x10000b64, 8) , (unique, 0x10000b6c, 8), (register, 0x80, 8) MULTIEQUAL (unique, 0x10000c5c, 8) , (unique, 0x10000c64, 8), (register, 0x88, 8) MULTIEQUAL (unique, 0x10000c84, 8) , (unique, 0x10000c7c, 8)]
[(register, 0x8, 8) INT_AND (unique, 0x10000f94, 8) , (const, 0xffffffff, 8), (unique, 0x10000f94, 8) CAST (stack, 0xffffffffffffff38, 8), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x21b, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x21a, 4), (stack, 0xffffffffffffff38, 8) CAST (unique, 0x10000f74, 8), (unique, 0x10000f74, 8) INT_OR (unique, 0x100003ca, 8) , (unique, 0x100003d2, 8), (unique, 0x100003d2, 8) INT_ZEXT (register, 0x8, 4), (unique, 0x100003ca, 8) INT_AND (unique, 0x10000f6c, 8) , (const, 0xffffffff00000000, 8), (unique, 0x10000f6c, 8) CAST (stack, 0xffffffffffffff38, 8), (register, 0x8, 4) MULTIEQUAL (stack, 0xffffffffffffff30, 4) , (unique, 0x10000d14, 4), (stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x22b, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x220, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x21b, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x30, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) CAST (unique, 0x10000fac, 8), (unique, 0x10000fac, 8) INT_ADD (unique, 0x10000f9c, 8) , (unique, 0x10000fa4, 8), (unique, 0x10000fa4, 8) CAST (unique, 0x1000056b, 8), (unique, 0x10000f9c, 8) CAST (unique, 0x1000057b, 8), (unique, 0x1000057b, 8) PTRSUB (register, 0x0, 8) , (const, 0x0, 8), (unique, 0x1000056b, 8) PTRSUB (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x30, 8)]
[(unique, 0x10000c54, 8) COPY (stack, 0xffffffffffffff40, 8), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x21b, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x21a, 4), (stack, 0xffffffffffffff40, 8) COPY (register, 0x80, 8), (register, 0x80, 8) MULTIEQUAL (unique, 0x10000c5c, 8) , (unique, 0x10000c64, 8)]
[ ---  BRANCH (ram, 0x2094aa, 1)]
[ ---  CBRANCH (ram, 0x209388, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd00, 4) , (const, 0x22, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000fb4, 8), (unique, 0x10000fb4, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (ram, 0x4eae68, 8) , (register, 0x110, 8) , (const, 0x1, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x38, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x30, 8)]
[(unique, 0xbd80, 8) CAST (unique, 0x10000fbc, 8), (unique, 0x10000fbc, 8) LOAD (const, 0x1b1, 4) , (unique, 0x1000058b, 8), (unique, 0x1000058b, 8) PTRSUB (stack, 0xffffffffffffff28, 8) , (const, 0x0, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(register, 0x80, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8) , (unique, 0xbd80, 8)]
[ ---  CBRANCH (ram, 0x209578, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x30, 8) , (register, 0x10, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (register, 0x30, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8) , (unique, 0xbd80, 8)]
[ ---  CBRANCH (ram, 0x209590, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x80, 8) , (const, 0x0, 8)]
[(unique, 0x10000bf4, 8) COPY (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x209590, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x30, 8) , (const, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000076b, 8) , (unique, 0x3100, 8), (unique, 0x1000076b, 8) PTRSUB (stack, 0xffffffffffffff28, 8) , (const, 0x0, 8), (unique, 0x3100, 8) CAST (unique, 0x10000fcc, 8), (unique, 0x10000fcc, 8) INT_ADD (unique, 0x10000fc4, 8) , (const, 0x4, 8), (unique, 0x10000fc4, 8) CAST (unique, 0x1000073b, 8), (unique, 0x1000073b, 8) PTRSUB (unique, 0x10000733, 8) , (const, 0x0, 8), (unique, 0x10000733, 8) PTRADD (register, 0x30, 8) , (const, 0x2, 8) , (const, 0x30, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000fdc, 8) , (const, 0x2095b1, 8), (unique, 0x10000fdc, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x45d, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x45d, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x459, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x45d, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x45c, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x45d, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x45c, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x45d, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x45c, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x45d, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x45c, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x45d, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x45c, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x45d, 4), (stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x45c, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x45d, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x45c, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x45d, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x45c, 4)]
[(unique, 0x10000ae4, 8) COPY (stack, 0xffffffffffffff38, 8), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x45d, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x45c, 4), (stack, 0xffffffffffffff38, 8) COPY (register, 0x80, 8)]
[ ---  CBRANCH (ram, 0x2096aa, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10000fe4, 8), (unique, 0x10000fe4, 8) CALL (ram, 0x121020, 8) , (register, 0x80, 8) , (register, 0x30, 8), (register, 0x30, 8) INT_ADD (unique, 0x10000fd4, 8) , (const, 0x5, 8), (unique, 0x10000fd4, 8) CAST (unique, 0x1000075b, 8), (unique, 0x1000075b, 8) PTRSUB (unique, 0x10000753, 8) , (const, 0x0, 8), (unique, 0x10000753, 8) PTRADD (register, 0x30, 8) , (const, 0x2, 8) , (const, 0x30, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000fec, 8) , (const, 0x2096b2, 8), (unique, 0x10000fec, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x472, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x472, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x472, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x471, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x472, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x471, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x472, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x471, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x472, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x471, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x472, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x471, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x472, 4), (stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x471, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x472, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x471, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x472, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x471, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x472, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x471, 4)]
[ ---  CALL (ram, 0x1212c8, 8) , (unique, 0x10000ae4, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x30, 8)]
[ ---  BRANCH (ram, 0x2093ab, 1)]
[ ---  CBRANCH (ram, 0x2096b8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x80, 8) , (const, 0x0, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3400, 8) , (const, 0x7e, 1), (unique, 0x3400, 8) CAST (unique, 0x10001004, 8), (unique, 0x10001004, 8) INT_ADD (unique, 0x10000ff4, 8) , (unique, 0x10000ffc, 8), (unique, 0x10000ffc, 8) CAST (unique, 0x10000593, 8), (unique, 0x10000ff4, 8) CAST (unique, 0x100005a3, 8), (unique, 0x100005a3, 8) PTRSUB (register, 0x10, 8) , (const, 0x0, 8), (unique, 0x10000593, 8) PTRSUB (register, 0x80, 8) , (const, 0x0, 8), (register, 0x10, 8) MULTIEQUAL (register, 0x10, 8) , (unique, 0xbd80, 8), (register, 0x80, 8) MULTIEQUAL (register, 0x80, 8) , (register, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x30, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10001014, 8), (unique, 0x10001014, 8) INT_ADD (unique, 0x1000100c, 8) , (const, 0x1, 8), (unique, 0x1000100c, 8) CAST (unique, 0x100005b3, 8), (unique, 0x100005b3, 8) PTRSUB (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x30, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3a00, 8) , (const, 0x0, 1), (unique, 0x3a00, 8) CAST (unique, 0x1000102c, 8), (unique, 0x1000102c, 8) INT_ADD (unique, 0x10001024, 8) , (unique, 0x10000a3b, 8), (unique, 0x10001024, 8) CAST (unique, 0x10000a43, 8), (unique, 0x10000a43, 8) PTRSUB (register, 0x80, 8) , (const, 0x0, 8), (unique, 0x10000a3b, 8) INT_ADD (unique, 0x1000101c, 8) , (const, 0x1, 8), (unique, 0x1000101c, 8) CAST (unique, 0x100005c3, 8), (unique, 0x100005c3, 8) PTRSUB (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x30, 8), (register, 0x80, 8) MULTIEQUAL (register, 0x80, 8) , (register, 0x0, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x310, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x30e, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x309, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x300, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x38, 8) , (register, 0x80, 8), (register, 0x80, 8) MULTIEQUAL (register, 0x80, 8) , (register, 0x0, 8)]
[(unique, 0x10000b44, 8) COPY (stack, 0xffffffffffffff40, 8), (stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(unique, 0x10000b4c, 8) COPY (register, 0x8, 8), (register, 0x8, 8) CAST (unique, 0x10001044, 8), (unique, 0x10001044, 8) INT_ADD (unique, 0x1000103c, 8) , (const, 0x4, 8), (unique, 0x1000103c, 8) CAST (unique, 0x100005db, 8), (unique, 0x100005db, 8) PTRSUB (register, 0x8, 8) , (const, 0x0, 8), (register, 0x8, 8) COPY (unique, 0x10000b54, 8), (unique, 0x10000b54, 8) MULTIEQUAL (unique, 0x10000b44, 8) , (unique, 0x10000b4c, 8)]
[ ---  CBRANCH (ram, 0x2093cb, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) INT_AND (register, 0x0, 4) , (const, 0x80808080, 4), (register, 0x0, 4) INT_AND (unique, 0x3200, 4) , (register, 0x10, 4), (register, 0x10, 4) INT_NEGATE (unique, 0xbc80, 4), (unique, 0x3200, 4) INT_ADD (unique, 0xbc80, 4) , (const, 0xfefefeff, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10001034, 8), (unique, 0x10001034, 8) CAST (unique, 0x100005d3, 8), (unique, 0x100005d3, 8) PTRSUB (register, 0x8, 8) , (const, 0x0, 8), (register, 0x8, 8) COPY (unique, 0x10000b54, 8), (unique, 0x10000b54, 8) MULTIEQUAL (unique, 0x10000b44, 8) , (unique, 0x10000b4c, 8)]
[(register, 0x10, 4) INT_RIGHT (register, 0x0, 4) , (const, 0x10, 4)]
[(unique, 0x10000d18, 4) COPY (register, 0x0, 4)]
[ ---  CBRANCH (ram, 0x2093f6, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x58a00, 4) , (const, 0x0, 4), (unique, 0x58a00, 4) INT_AND (register, 0x0, 4) , (const, 0x8080, 4)]
[(unique, 0x10000d1c, 4) COPY (register, 0x10, 4)]
[(register, 0x0, 4) MULTIEQUAL (unique, 0x10000d18, 4) , (unique, 0x10000d1c, 4)]
[(unique, 0x3100, 8) CAST (unique, 0x10001054, 8), (unique, 0x10001054, 8) INT_ADD (unique, 0x1000104c, 8) , (const, 0x6, 8), (unique, 0x1000104c, 8) CAST (unique, 0x100005eb, 8), (unique, 0x100005eb, 8) PTRSUB (register, 0x8, 8) , (const, 0x0, 8)]
[(unique, 0x10000b2c, 8) COPY (register, 0x8, 8)]
[ ---  CBRANCH (ram, 0x209400, 1) , (register, 0x206, 1)]
[(unique, 0x10000b34, 8) COPY (unique, 0x3100, 8)]
[(unique, 0x10000b1c, 8) COPY (register, 0x8, 8), (register, 0x8, 8) CAST (unique, 0x10001074, 8), (unique, 0x10001074, 8) INT_ADD (unique, 0x1000106c, 8) , (unique, 0x10000603, 8), (unique, 0x1000106c, 8) CAST (register, 0x8, 8), (unique, 0x10000603, 8) INT_SUB (unique, 0x100005fb, 8) , (unique, 0x10001064, 8), (unique, 0x10001064, 8) CAST (stack, 0xffffffffffffff40, 8), (unique, 0x100005fb, 8) INT_SUB (const, 0xfffffffffffffffd, 8) , (unique, 0x12600, 8), (unique, 0x12600, 8) INT_ZEXT (register, 0x200, 1), (register, 0x200, 1) INT_CARRY (register, 0x0, 1) , (register, 0x0, 1), (register, 0x0, 1) SUBPIECE (register, 0x0, 4) , (const, 0x0, 4), (register, 0x8, 8) MULTIEQUAL (unique, 0x10000b2c, 8) , (unique, 0x10000b34, 8)]
[ ---  CBRANCH (ram, 0x209474, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (unique, 0xbd80, 8) , (unique, 0x3400, 8), (unique, 0x3400, 8) CAST (unique, 0x10001094, 8), (unique, 0x10001094, 8) INT_ADD (unique, 0x10001084, 8) , (unique, 0x1000108c, 8), (unique, 0x1000108c, 8) CAST (unique, 0x10000613, 8), (unique, 0x10001084, 8) CAST (unique, 0x10000623, 8), (unique, 0x10000623, 8) COPY (unique, 0x1000107c, 8), (unique, 0x1000107c, 8) CAST (unique, 0xbd80, 8), (unique, 0x10000613, 8) PTRSUB (register, 0x8, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x1000060b, 8), (unique, 0x1000060b, 8) PTRSUB (stack, 0xffffffffffffff28, 8) , (const, 0x0, 8), (register, 0x8, 8) CAST (unique, 0x10001074, 8), (unique, 0x10001074, 8) INT_ADD (unique, 0x1000106c, 8) , (unique, 0x10000603, 8), (unique, 0x1000106c, 8) CAST (register, 0x8, 8), (unique, 0x10000603, 8) INT_SUB (unique, 0x100005fb, 8) , (unique, 0x10001064, 8), (unique, 0x10001064, 8) CAST (stack, 0xffffffffffffff40, 8), (unique, 0x100005fb, 8) INT_SUB (const, 0xfffffffffffffffd, 8) , (unique, 0x12600, 8), (unique, 0x12600, 8) INT_ZEXT (register, 0x200, 1), (unique, 0xbd80, 8) CAST (unique, 0x1000105c, 8), (unique, 0x1000105c, 8) LOAD (const, 0x1b1, 4) , (register, 0x30, 8), (register, 0x200, 1) INT_CARRY (register, 0x0, 1) , (register, 0x0, 1), (register, 0x0, 1) SUBPIECE (register, 0x0, 4) , (const, 0x0, 4), (register, 0x8, 8) MULTIEQUAL (unique, 0x10000b2c, 8) , (unique, 0x10000b34, 8)]
[ ---  CBRANCH (ram, 0x20961b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (const, 0x0, 8)]
[(stack, 0xffffffffffffff38, 8) COPY (register, 0x80, 8)]
[(stack, 0xffffffffffffff30, 8) COPY (register, 0x8, 8)]
[ ---  CBRANCH (ram, 0x209448, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (unique, 0x1000035e, 8) , (const, 0x64, 8), (unique, 0x1000035e, 8) INT_MULT (unique, 0x1000109c, 8) , (const, 0x2, 8), (unique, 0x1000109c, 8) CAST (register, 0x8, 8)]
[(register, 0x0, 8) COPY (const, 0x64, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000653, 8) , (register, 0x0, 8), (unique, 0x10000653, 8) PTRSUB (stack, 0xffffffffffffff28, 8) , (const, 0x0, 8), (register, 0x0, 8) PTRADD (unique, 0xbd80, 8) , (register, 0x0, 8) , (const, 0x1, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x1000035e, 8) , (register, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100010a4, 8) , (const, 0x209457, 8), (unique, 0x100010a4, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x3dd, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x3dd, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x3da, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x3dd, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x3dc, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x3dd, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x3dc, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x3dd, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x3dc, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x3dd, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x3dc, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x3dd, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x3dc, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x3dd, 4), (stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x3dc, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x3dd, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x3dc, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x3dd, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x3dc, 4)]
[(unique, 0x10000c3c, 8) COPY (stack, 0xffffffffffffff38, 8), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x3dd, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x3dc, 4)]
[ ---  CBRANCH (ram, 0x209961, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x100010b4, 8), (unique, 0x100010b4, 8) CALL (ram, 0x121020, 8) , (register, 0x80, 8) , (unique, 0x100010ac, 8), (unique, 0x100010ac, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x1, 8), (register, 0x0, 8) PTRADD (unique, 0xbd80, 8) , (register, 0x0, 8) , (const, 0x1, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x1000035e, 8) , (register, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100010bc, 8) , (const, 0x209969, 8), (unique, 0x100010bc, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x269, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x269, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x269, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x268, 4), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x269, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x268, 4), (stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x269, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x268, 4), (stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x269, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x268, 4), (stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x269, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x268, 4), (stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x269, 4), (stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x268, 4), (stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x269, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x268, 4), (stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x269, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x268, 4), (stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x269, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x268, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CALL (ram, 0x1212c8, 8) , (register, 0x80, 8), (register, 0x80, 8) MULTIEQUAL (unique, 0x10000c44, 8) , (unique, 0x10000c3c, 8)]
[(unique, 0x10000c6c, 8) COPY (register, 0x80, 8), (register, 0x80, 8) COPY (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x209889, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x80, 8) MULTIEQUAL (unique, 0x10000c6c, 8) , (unique, 0x10000c74, 8)]
[(register, 0x8, 8) COPY (const, 0x1, 8)]
[ ---  BRANCH (ram, 0x2094aa, 1)]
[(unique, 0xbd80, 8) CAST (unique, 0x100010c4, 8), (unique, 0x100010c4, 8) LOAD (const, 0x1b1, 4) , (register, 0x30, 8)]
[(unique, 0x10000b24, 8) COPY (stack, 0xffffffffffffff30, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100010ec, 8) , (const, 0x209494, 8), (unique, 0x100010ec, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x406, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x406, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x405, 4), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x406, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x405, 4), (stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x406, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x405, 4), (stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x406, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x405, 4), (stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x406, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x405, 4), (stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x406, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x405, 4), (stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x406, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x405, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x0, 8) , (const, 0x0, 1), (register, 0x0, 8) CAST (unique, 0x100010fc, 8), (unique, 0x100010fc, 8) CALL (ram, 0x121230, 8) , (register, 0x38, 8) , (unique, 0x10000b04, 8) , (unique, 0x100010f4, 8), (unique, 0x100010f4, 8) CAST (register, 0x8, 8), (register, 0x38, 8) CAST (unique, 0x100010e4, 8), (unique, 0x100010e4, 8) INT_ADD (unique, 0x100010d4, 8) , (unique, 0x100010dc, 8), (unique, 0x100010dc, 8) CAST (unique, 0x1000065b, 8), (unique, 0x100010d4, 8) CAST (unique, 0x1000066b, 8), (unique, 0x1000066b, 8) PTRSUB (register, 0x80, 8) , (const, 0x0, 8), (unique, 0x1000065b, 8) COPY (unique, 0x100010cc, 8), (unique, 0x100010cc, 8) CAST (register, 0x38, 8), (unique, 0x10000b04, 8) COPY (stack, 0xffffffffffffff40, 8), (register, 0x8, 8) MULTIEQUAL (unique, 0x10000b1c, 8) , (unique, 0x10000b24, 8), (register, 0x38, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (register, 0x80, 8) MULTIEQUAL (register, 0x80, 8) , (register, 0x0, 8), (stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x415, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x40e, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x406, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x30, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) CAST (unique, 0x10001114, 8), (unique, 0x10001114, 8) INT_ADD (unique, 0x10001104, 8) , (unique, 0x1000110c, 8), (unique, 0x1000110c, 8) CAST (unique, 0x1000067b, 8), (unique, 0x10001104, 8) CAST (unique, 0x1000068b, 8), (unique, 0x1000068b, 8) PTRSUB (stack, 0xffffffffffffff38, 8) , (const, 0x0, 8), (unique, 0x1000067b, 8) PTRSUB (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x30, 8), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x406, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x405, 4), (stack, 0xffffffffffffff38, 8) COPY (register, 0x8, 8), (register, 0x8, 8) MULTIEQUAL (unique, 0x10000b1c, 8) , (unique, 0x10000b24, 8)]
[(register, 0x8, 8) COPY (const, 0x0, 8)]
[(unique, 0x10000c4c, 8) COPY (stack, 0xffffffffffffff30, 8), (stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x406, 4), (stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x405, 4), (stack, 0xffffffffffffff30, 8) COPY (register, 0x80, 8), (register, 0x80, 8) MULTIEQUAL (register, 0x80, 8) , (register, 0x0, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8) , (register, 0x8, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x237, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x38, 8) , (register, 0x80, 8), (register, 0x80, 8) MULTIEQUAL (unique, 0x10000c54, 8) , (register, 0x80, 8) , (unique, 0x10000c4c, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x42a, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x38, 8) , (const, 0x0, 8)]
[(register, 0x8, 8) COPY (const, 0x1, 8)]
[ ---  BRANCH (ram, 0x2094ae, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x23c, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[ ---  STORE (const, 0x1b1, 4) , (stack, 0xffffffffffffff20, 8) , (register, 0xb8, 8), (stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(unique, 0x10000b8c, 8) COPY (register, 0x20, 8)]
[ ---  BRANCH (ram, 0x2094fe, 1)]
[(register, 0x88, 4) INT_ADD (register, 0x0, 4) , (register, 0xa8, 4), (register, 0x0, 4) INT_AND (register, 0x0, 4) , (const, 0xfffffff0, 4), (register, 0x0, 4) INT_ADD (register, 0xa8, 4) , (const, 0x3f7, 4)]
[(register, 0x20, 8) PTRADD (register, 0x20, 8) , (unique, 0x100001a1, 8) , (const, 0x1, 8), (unique, 0x100001a1, 8) INT_2COMP (unique, 0x3100, 8), (unique, 0x3100, 8) INT_ADD (register, 0x8, 8) , (const, 0x10, 8), (register, 0x8, 8) INT_SEXT (unique, 0x1000111c, 4), (unique, 0x1000111c, 4) CAST (register, 0x0, 4), (register, 0x0, 4) INT_AND (register, 0x0, 4) , (const, 0xfffffff0, 4), (register, 0x0, 4) INT_ADD (register, 0xa8, 4) , (const, 0x3f7, 4)]
[(unique, 0x10000d0c, 4) COPY (register, 0x0, 4), (register, 0x0, 4) INT_AND (register, 0x0, 4) , (const, 0xfffffff0, 4), (register, 0x0, 4) INT_ADD (register, 0xa8, 4) , (const, 0x3f7, 4)]
[ ---  CBRANCH (ram, 0x209236, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x10001140, 8) , (register, 0x8, 8), (unique, 0x10001140, 8) CAST (register, 0xb0, 8), (register, 0x8, 8) CAST (unique, 0x10001138, 8), (unique, 0x10001138, 8) INT_ADD (unique, 0x10001130, 8) , (register, 0x8, 8), (unique, 0x10001130, 8) CAST (unique, 0x100004eb, 8), (unique, 0x100004eb, 8) PTRSUB (register, 0x10, 8) , (const, 0x0, 8), (register, 0x10, 8) CAST (unique, 0x10001128, 8), (unique, 0x10001128, 8) INT_AND (unique, 0x10001120, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x10001120, 8) CAST (unique, 0x3800, 8), (unique, 0x3800, 8) PTRADD (register, 0x20, 8) , (unique, 0x100004e3, 8) , (const, 0x1, 8), (unique, 0x100004e3, 8) INT_ADD (unique, 0x100001a1, 8) , (const, 0xf, 8), (unique, 0x100001a1, 8) INT_2COMP (unique, 0x3100, 8), (unique, 0x3100, 8) INT_ADD (register, 0x8, 8) , (const, 0x10, 8), (register, 0x8, 8) INT_SEXT (unique, 0x1000111c, 4), (unique, 0x1000111c, 4) CAST (register, 0x0, 4), (register, 0x0, 4) INT_AND (register, 0x0, 4) , (const, 0xfffffff0, 4), (register, 0x0, 4) INT_ADD (register, 0xa8, 4) , (const, 0x3f7, 4)]
[(unique, 0x10000d10, 4) COPY (register, 0x88, 4)]
[(register, 0xa8, 8) CAST (unique, 0x10001148, 8), (unique, 0x10001148, 8) INT_ZEXT (register, 0x0, 4), (register, 0x0, 4) MULTIEQUAL (unique, 0x10000d0c, 4) , (unique, 0x10000d10, 4)]
[(unique, 0x10000bc4, 8) COPY (register, 0x20, 8)]
[(unique, 0x10000cb4, 8) COPY (unique, 0x10001150, 8), (unique, 0x10001150, 8) CAST (register, 0x10, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x38, 8)]
[ ---  CBRANCH (ram, 0x209898, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) CAST (unique, 0x10001158, 8), (unique, 0x10001158, 8) LOAD (const, 0x1b1, 4) , (unique, 0x100006e3, 8), (unique, 0x100006e3, 8) PTRSUB (stack, 0xffffffffffffff28, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x2098a6, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x209582, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (const, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000943, 8) , (unique, 0x3100, 8), (unique, 0x10000943, 8) PTRSUB (stack, 0xffffffffffffff28, 8) , (const, 0x0, 8), (unique, 0x3100, 8) CAST (unique, 0x10001168, 8), (unique, 0x10001168, 8) INT_ADD (unique, 0x10001160, 8) , (const, 0x4, 8), (unique, 0x10001160, 8) CAST (unique, 0x10000913, 8), (unique, 0x10000913, 8) PTRSUB (unique, 0x1000090b, 8) , (const, 0x0, 8), (unique, 0x1000090b, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x2, 8) , (const, 0x30, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x73f, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x73f, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x73b, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x73f, 4), (stack, 0xffffffffffffff00, 8) COPY (const, 0x2098c0, 8)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x73f, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x73f, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x73f, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x73f, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x73f, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x73f, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x73f, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x73f, 4)]
[ ---  CBRANCH (ram, 0x209993, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10001178, 8), (unique, 0x10001178, 8) CALL (ram, 0x121020, 8) , (unique, 0xbd80, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) INT_ADD (unique, 0x10001170, 8) , (const, 0x5, 8), (unique, 0x10001170, 8) CAST (unique, 0x10000933, 8), (unique, 0x10000933, 8) PTRSUB (unique, 0x1000092b, 8) , (const, 0x0, 8), (unique, 0x1000092b, 8) PTRADD (unique, 0xbd80, 8) , (const, 0x2, 8) , (const, 0x30, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x30, 8)]
[ ---  BRANCH (ram, 0x209556, 1)]
[(register, 0xb8, 8) COPY (const, 0x0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x75b, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x75b, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x75b, 4), (stack, 0xffffffffffffff00, 8) COPY (const, 0x20999e, 8)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x75b, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x75b, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x75b, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x75b, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x75b, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x75b, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x75b, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x75b, 4)]
[ ---  CALL (ram, 0x1212c8, 8) , (unique, 0xbd80, 8)]
[(register, 0x8, 8) COPY (const, 0x1, 8)]
[ ---  BRANCH (ram, 0x20956d, 1)]
[(register, 0x8, 8) COPY (const, 0x1, 8)]
[(unique, 0x10000cec, 8) COPY (unique, 0xbd80, 8)]
[ ---  CBRANCH (ram, 0x20956d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (const, 0x0, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3400, 8) , (const, 0x7e, 1), (unique, 0x3400, 8) CAST (unique, 0x10001190, 8), (unique, 0x10001190, 8) INT_ADD (unique, 0x10001180, 8) , (unique, 0x10001188, 8), (unique, 0x10001188, 8) CAST (unique, 0x100006eb, 8), (unique, 0x10001180, 8) CAST (unique, 0x100006fb, 8), (unique, 0x100006fb, 8) PTRSUB (register, 0xa8, 8) , (const, 0x0, 8), (unique, 0x100006eb, 8) PTRSUB (register, 0xb8, 8) , (const, 0x0, 8), (register, 0xa8, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (register, 0xb8, 8) MULTIEQUAL (unique, 0x10000cec, 8) , (register, 0x0, 8)]
[(register, 0x8, 8) COPY (const, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x30, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100011a0, 8), (unique, 0x100011a0, 8) INT_ADD (unique, 0x10001198, 8) , (const, 0x1, 8), (unique, 0x10001198, 8) CAST (unique, 0x1000070b, 8), (unique, 0x1000070b, 8) PTRSUB (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x30, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x71b, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x716, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x706, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3a00, 8) , (const, 0x0, 1), (unique, 0x3a00, 8) CAST (unique, 0x100011b8, 8), (unique, 0x100011b8, 8) INT_ADD (unique, 0x100011b0, 8) , (unique, 0x10000a6b, 8), (unique, 0x100011b0, 8) CAST (unique, 0x10000a73, 8), (unique, 0x10000a73, 8) PTRSUB (register, 0xb8, 8) , (const, 0x0, 8), (unique, 0x10000a6b, 8) INT_ADD (unique, 0x100011a8, 8) , (const, 0x1, 8), (unique, 0x100011a8, 8) CAST (unique, 0x1000071b, 8), (unique, 0x1000071b, 8) PTRSUB (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x30, 8), (register, 0xb8, 8) MULTIEQUAL (unique, 0x10000cec, 8) , (register, 0x0, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8) , (register, 0x8, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x71d, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x38, 8) , (register, 0xb8, 8), (register, 0xb8, 8) MULTIEQUAL (unique, 0x10000cec, 8) , (register, 0xb8, 8) , (register, 0xb8, 8)]
[(unique, 0x10000bb4, 8) COPY (register, 0x20, 8)]
[ ---  BRANCH (ram, 0x2094fe, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x4d5, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x4d5, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x4d5, 4), (stack, 0xffffffffffffff00, 8) COPY (const, 0x2095dc, 8)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x4d5, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x4d5, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x4d5, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x4d5, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x4d5, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x4d5, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x4d5, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x4d5, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x4d5, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x4d5, 4)]
[ ---  CBRANCH (ram, 0x2096f0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x100011c0, 8), (unique, 0x100011c0, 8) CALL (ram, 0x1426e0, 8) , (unique, 0x100003fb, 8), (unique, 0x100003fb, 8) COPY (const, 0x2b54a4, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x521, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x521, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x521, 4), (stack, 0xffffffffffffff00, 8) COPY (const, 0x2096f5, 8)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x521, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x521, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x521, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x521, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x521, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x521, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x521, 4)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x521, 4)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x521, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x521, 4)]
[(register, 0x0, 4) CALL (ram, 0x1e5900, 8)]
[(stack, 0xffffffffffffff40, 8) COPY (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x100011c8, 8), (unique, 0x100011c8, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff38, 8) COPY (unique, 0x3200, 8), (unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff58, 8)]
[(unique, 0x10000bdc, 8) COPY (register, 0x20, 8), (register, 0x20, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffb08, 8)]
[(unique, 0x10000cbc, 8) COPY (register, 0x90, 8), (register, 0x90, 8) PTRSUB (register, 0x20, 8) , (const, 0xfffffffffffffb10, 8)]
[(unique, 0x10000d20, 4) COPY (register, 0xa8, 4), (register, 0xa8, 4) COPY (const, 0x3e8, 4)]
[ ---  BRANCH (ram, 0x209781, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100011d4, 8) , (const, 0x209796, 8), (unique, 0x100011d4, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8), (register, 0x20, 8) MULTIEQUAL (unique, 0x10000bdc, 8) , (unique, 0x10000be4, 8) , (unique, 0x10000bec, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x54f, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x54f, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x54f, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x54e, 4), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x54f, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x54e, 4), (stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x54f, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x54e, 4), (stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x54f, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x54e, 4), (stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x54f, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x54e, 4), (stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x54f, 4), (stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x54e, 4), (stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x54f, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x54e, 4), (stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x54f, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x54e, 4), (stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x54f, 4), (stack, 0xffffffffffffff48, 8) INDIRECT (stack, 0xffffffffffffff48, 8) , (const, 0x54e, 4), (stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x54f, 4), (stack, 0xffffffffffffff78, 8) INDIRECT (stack, 0xffffffffffffff78, 8) , (const, 0x54e, 4), (stack, 0xffffffffffffff78, 8) MULTIEQUAL (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8) , (stack, 0xffffffffffffff78, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x54f, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x54e, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(unique, 0x10000d2c, 8) COPY (register, 0x20, 8), (register, 0x20, 8) MULTIEQUAL (unique, 0x10000bdc, 8) , (unique, 0x10000be4, 8) , (unique, 0x10000bec, 8)]
[ ---  CBRANCH (ram, 0x209738, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 4) , (const, 0x0, 4), (register, 0x0, 4) CALL (ram, 0x1e3bf0, 8) , (register, 0x0, 4) , (unique, 0x10000aec, 8) , (unique, 0x100011dc, 8) , (register, 0x8, 8) , (unique, 0x100011e4, 8), (unique, 0x100011e4, 8) CAST (unique, 0x10000b0c, 8), (unique, 0x100011dc, 8) CAST (register, 0xb0, 8), (register, 0x8, 8) INT_SEXT (unique, 0x100011d0, 4), (unique, 0x100011d0, 4) CAST (register, 0xa8, 4), (unique, 0x10000aec, 8) COPY (stack, 0xffffffffffffff38, 8), (unique, 0x10000b0c, 8) COPY (stack, 0xffffffffffffff40, 8), (register, 0xa8, 4) MULTIEQUAL (unique, 0x10000d20, 4) , (unique, 0x10000d24, 4) , (unique, 0x10000d28, 4), (register, 0xb0, 8) MULTIEQUAL (unique, 0x10000cbc, 8) , (unique, 0x10000cc4, 8) , (unique, 0x10000cc4, 8), (stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8), (stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x30, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x38, 8)]
[(unique, 0xbd80, 8) CAST (unique, 0x100011ec, 8), (unique, 0x100011ec, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000873, 8), (unique, 0x10000873, 8) PTRSUB (stack, 0xffffffffffffff28, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x2098e5, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffff48, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x2098e5, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x100011f4, 8) , (const, 0x0, 8), (unique, 0x100011f4, 8) CAST (stack, 0xffffffffffffff78, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100011fc, 8) , (const, 0x2097d8, 8), (unique, 0x100011fc, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x38, 8) INDIRECT (unique, 0x10000c1c, 8) , (const, 0x586, 4), (unique, 0x10000c1c, 8) COPY (stack, 0xffffffffffffff78, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x586, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x586, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x586, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x585, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x586, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x585, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x586, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x585, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x586, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x585, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x586, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x585, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x586, 4), (stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x585, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x586, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x585, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x586, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x585, 4)]
[(unique, 0x10000b14, 8) COPY (stack, 0xffffffffffffff40, 8), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x586, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x585, 4), (stack, 0xffffffffffffff40, 8) COPY (unique, 0xbd80, 8)]
[ ---  CBRANCH (ram, 0x209950, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (stack, 0xffffffffffffff40, 8) , (unique, 0x3400, 8), (unique, 0x3400, 8) CAST (unique, 0x1000121c, 8), (unique, 0x1000121c, 8) INT_ADD (unique, 0x1000120c, 8) , (unique, 0x10001214, 8), (unique, 0x10001214, 8) CAST (unique, 0x1000087b, 8), (unique, 0x1000120c, 8) CAST (unique, 0x1000088b, 8), (unique, 0x1000088b, 8) PTRSUB (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0x1000087b, 8) PTRSUB (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10001204, 8), (unique, 0x10001204, 8) CALL (ram, 0x121100, 8) , (stack, 0xffffffffffffff78, 8), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x586, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x585, 4), (stack, 0xffffffffffffff40, 8) COPY (unique, 0xbd80, 8)]
[ ---  CBRANCH (ram, 0x2096d9, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x2097fd, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x20961b, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffff40, 8) , (const, 0x0, 8)]
[(stack, 0xffffffffffffff40, 8) COPY (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x20981c, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (unique, 0x10000376, 8) , (const, 0x64, 8), (unique, 0x10000376, 8) INT_MULT (unique, 0x10001224, 8) , (const, 0x2, 8), (unique, 0x10001224, 8) CAST (register, 0x0, 8)]
[(register, 0x0, 8) COPY (const, 0x64, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100008bb, 8) , (register, 0x0, 8), (unique, 0x100008bb, 8) PTRSUB (stack, 0xffffffffffffff28, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x10001234, 8), (unique, 0x10001234, 8) INT_ADD (unique, 0x1000122c, 8) , (register, 0x0, 8), (unique, 0x1000122c, 8) CAST (unique, 0x1000089b, 8), (unique, 0x1000089b, 8) PTRSUB (unique, 0x10000b14, 8) , (const, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x10000376, 8) , (register, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000123c, 8) , (const, 0x20982e, 8), (unique, 0x1000123c, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x5d3, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x5d3, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x5cf, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x5d3, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x5d2, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x5d3, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x5d2, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x5d3, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x5d2, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x5d3, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x5d2, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x5d3, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x5d2, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x5d3, 4), (stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x5d2, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x5d3, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x5d2, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x5d3, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x5d2, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x5d3, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x5d2, 4)]
[ ---  CBRANCH (ram, 0x2099a8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x1000124c, 8), (unique, 0x1000124c, 8) CALL (ram, 0x121020, 8) , (unique, 0xbd80, 8) , (unique, 0x10001244, 8), (unique, 0x10001244, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x1, 8), (register, 0x0, 8) CAST (unique, 0x10001234, 8), (unique, 0x10001234, 8) INT_ADD (unique, 0x1000122c, 8) , (register, 0x0, 8), (unique, 0x1000122c, 8) CAST (unique, 0x1000089b, 8), (unique, 0x1000089b, 8) PTRSUB (unique, 0x10000b14, 8) , (const, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x10000376, 8) , (register, 0x0, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x30, 8)]
[(unique, 0x10000b3c, 8) COPY (register, 0x0, 8)]
[(unique, 0x10000c8c, 8) COPY (stack, 0xffffffffffffff40, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000126c, 8) , (const, 0x209861, 8), (unique, 0x1000126c, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x5f1, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x5f1, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x5f0, 4), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x5f1, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x5f0, 4), (stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x5f1, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x5f0, 4), (stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x5f1, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x5f0, 4), (stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x5f1, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x5f0, 4), (stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x5f1, 4), (stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x5f0, 4), (stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x5f1, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x5f0, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x0, 8) , (const, 0x0, 1), (register, 0x0, 8) CAST (unique, 0x1000127c, 8), (unique, 0x1000127c, 8) CALL (ram, 0x121230, 8) , (unique, 0x3400, 8) , (stack, 0xffffffffffffff78, 8) , (unique, 0x10001274, 8), (unique, 0x10001274, 8) CAST (register, 0x88, 8), (unique, 0x3400, 8) CAST (unique, 0x10001264, 8), (unique, 0x10001264, 8) INT_ADD (unique, 0x10001254, 8) , (unique, 0x1000125c, 8), (unique, 0x1000125c, 8) CAST (unique, 0x100008c3, 8), (unique, 0x10001254, 8) CAST (unique, 0x100008d3, 8), (unique, 0x100008d3, 8) PTRSUB (register, 0xa8, 8) , (const, 0x0, 8), (unique, 0x100008c3, 8) PTRSUB (register, 0x8, 8) , (const, 0x0, 8), (register, 0x8, 8) MULTIEQUAL (unique, 0x10000b3c, 8) , (unique, 0xbd80, 8), (register, 0x88, 8) MULTIEQUAL (unique, 0x10000c8c, 8) , (register, 0x0, 8), (register, 0xa8, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x30, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) CAST (unique, 0x10001294, 8), (unique, 0x10001294, 8) INT_ADD (unique, 0x10001284, 8) , (unique, 0x1000128c, 8), (unique, 0x1000128c, 8) CAST (unique, 0x100008e3, 8), (unique, 0x10001284, 8) CAST (unique, 0x100008f3, 8), (unique, 0x100008f3, 8) PTRSUB (stack, 0xffffffffffffff40, 8) , (const, 0x0, 8), (unique, 0x100008e3, 8) PTRSUB (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x30, 8), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x5f1, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x5f0, 4), (stack, 0xffffffffffffff40, 8) COPY (register, 0x88, 8), (register, 0x88, 8) MULTIEQUAL (unique, 0x10000c8c, 8) , (register, 0x0, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x60b, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x600, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x5f6, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x5f1, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x38, 8) , (stack, 0xffffffffffffff38, 8), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x5f1, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x5f0, 4), (stack, 0xffffffffffffff38, 8) COPY (register, 0x8, 8), (register, 0x8, 8) MULTIEQUAL (unique, 0x10000b3c, 8) , (unique, 0xbd80, 8)]
[(register, 0x8, 8) COPY (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x2094fe, 1)]
[ ---  CBRANCH (ram, 0x2098d4, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd00, 4) , (const, 0x22, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (unique, 0x1000129c, 8), (unique, 0x1000129c, 8) CAST (unique, 0x4f00, 8), (unique, 0x4f00, 8) PTRADD (ram, 0x4eae68, 8) , (register, 0x110, 8) , (const, 0x1, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x38, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x30, 8)]
[(unique, 0xbd80, 8) CAST (unique, 0x100012a4, 8), (unique, 0x100012a4, 8) LOAD (const, 0x1b1, 4) , (unique, 0x1000094b, 8), (unique, 0x1000094b, 8) PTRSUB (stack, 0xffffffffffffff28, 8) , (const, 0x0, 8)]
[(register, 0xb8, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8) , (unique, 0xbd80, 8)]
[ ---  CBRANCH (ram, 0x209913, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x10, 8) , (register, 0x8, 8), (register, 0x8, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8) , (unique, 0xbd80, 8)]
[ ---  CBRANCH (ram, 0x209921, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x10, 8) , (const, 0x0, 8)]
[(unique, 0x10000bfc, 8) COPY (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x209582, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xb8, 8) , (const, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100012ac, 8) , (const, 0x209587, 8), (unique, 0x100012ac, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8), (register, 0x20, 8) MULTIEQUAL (unique, 0x10000bf4, 8) , (unique, 0x10000bfc, 8) , (register, 0x20, 8)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x444, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x443, 4), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x444, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x443, 4), (stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x444, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x443, 4), (stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x444, 4), (stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x443, 4), (stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x444, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x443, 4), (stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x444, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x443, 4), (stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x444, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x443, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CALL (ram, 0x1213f8, 8)]
[(ram, 0x4eae68, 8) COPY (ram, 0x4eae68, 8), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x444, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[ ---  RETURN (const, 0x1, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100009d3, 8) , (unique, 0x3100, 8), (unique, 0x100009d3, 8) PTRSUB (stack, 0xffffffffffffff28, 8) , (const, 0x0, 8), (unique, 0x3100, 8) CAST (unique, 0x100012bc, 8), (unique, 0x100012bc, 8) INT_ADD (unique, 0x100012b4, 8) , (const, 0x4, 8), (unique, 0x100012b4, 8) CAST (unique, 0x100009a3, 8), (unique, 0x100009a3, 8) PTRSUB (unique, 0x1000099b, 8) , (const, 0x0, 8), (unique, 0x1000099b, 8) PTRADD (register, 0x10, 8) , (const, 0x2, 8) , (const, 0x30, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100012cc, 8) , (const, 0x20993b, 8), (unique, 0x100012cc, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x67a, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x67a, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x676, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x67a, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x679, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x67a, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x679, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x67a, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x679, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x67a, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x679, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x67a, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x679, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x67a, 4), (stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x679, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x67a, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x679, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x67a, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x679, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x67a, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x679, 4)]
[ ---  CBRANCH (ram, 0x2099a8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x100012d4, 8), (unique, 0x100012d4, 8) CALL (ram, 0x121020, 8) , (register, 0xb8, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) INT_ADD (unique, 0x100012c4, 8) , (const, 0x5, 8), (unique, 0x100012c4, 8) CAST (unique, 0x100009c3, 8), (unique, 0x100009c3, 8) PTRSUB (unique, 0x100009bb, 8) , (const, 0x0, 8), (unique, 0x100009bb, 8) PTRADD (register, 0x10, 8) , (const, 0x2, 8) , (const, 0x30, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100012dc, 8) , (const, 0x2099b0, 8), (unique, 0x100012dc, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x61a, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x61a, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x61a, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x619, 4), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x61a, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x619, 4), (stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x61a, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x619, 4), (stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x61a, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x619, 4), (stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x61a, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x619, 4), (stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x61a, 4), (stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x619, 4), (stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x61a, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x619, 4), (stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x61a, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x619, 4), (stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x61a, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x619, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CALL (ram, 0x1212c8, 8) , (register, 0xb8, 8), (register, 0xb8, 8) MULTIEQUAL (unique, 0xbd80, 8) , (register, 0xb8, 8)]
[ ---  BRANCH (ram, 0x2096d9, 1)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x30, 8)]
[ ---  BRANCH (ram, 0x2098f3, 1)]
[(unique, 0x10000ce4, 8) COPY (register, 0xb8, 8)]
[ ---  CBRANCH (ram, 0x2096d9, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xb8, 8) , (const, 0x0, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3400, 8) , (const, 0x7e, 1), (unique, 0x3400, 8) CAST (unique, 0x100012f4, 8), (unique, 0x100012f4, 8) INT_ADD (unique, 0x100012e4, 8) , (unique, 0x100012ec, 8), (unique, 0x100012ec, 8) CAST (unique, 0x10000953, 8), (unique, 0x100012e4, 8) CAST (unique, 0x10000963, 8), (unique, 0x10000963, 8) PTRSUB (register, 0x10, 8) , (const, 0x0, 8), (unique, 0x10000953, 8) PTRSUB (register, 0xb8, 8) , (const, 0x0, 8), (register, 0x10, 8) MULTIEQUAL (register, 0x10, 8) , (unique, 0xbd80, 8), (register, 0xb8, 8) MULTIEQUAL (unique, 0x10000ce4, 8) , (register, 0x0, 8)]
[(register, 0x8, 8) COPY (const, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x30, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10001304, 8), (unique, 0x10001304, 8) INT_ADD (unique, 0x100012fc, 8) , (const, 0x1, 8), (unique, 0x100012fc, 8) CAST (unique, 0x10000973, 8), (unique, 0x10000973, 8) PTRSUB (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x30, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3a00, 8) , (const, 0x0, 1), (unique, 0x3a00, 8) CAST (unique, 0x1000131c, 8), (unique, 0x1000131c, 8) INT_ADD (unique, 0x10001314, 8) , (unique, 0x10000a83, 8), (unique, 0x10001314, 8) CAST (unique, 0x10000a8b, 8), (unique, 0x10000a8b, 8) PTRSUB (register, 0xb8, 8) , (const, 0x0, 8), (unique, 0x10000a83, 8) INT_ADD (unique, 0x1000130c, 8) , (const, 0x1, 8), (unique, 0x1000130c, 8) CAST (unique, 0x10000983, 8), (unique, 0x10000983, 8) PTRSUB (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x30, 8), (register, 0xb8, 8) MULTIEQUAL (unique, 0x10000ce4, 8) , (register, 0x0, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x656, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x654, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x64f, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x63f, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x38, 8) , (register, 0xb8, 8), (register, 0xb8, 8) MULTIEQUAL (unique, 0x10000ce4, 8) , (register, 0x0, 8)]
[ ---  BRANCH (ram, 0x2094fe, 1)]
[(unique, 0x3400, 4) INT_ADD (register, 0x0, 4) , (register, 0xa8, 4), (register, 0x0, 4) INT_AND (register, 0x0, 4) , (const, 0xfffffff0, 4), (register, 0x0, 4) INT_ADD (register, 0xa8, 4) , (const, 0x3f7, 4)]
[(register, 0x20, 8) PTRADD (register, 0x20, 8) , (unique, 0x100002b6, 8) , (const, 0x1, 8), (unique, 0x100002b6, 8) INT_2COMP (unique, 0x3100, 8), (unique, 0x3100, 8) INT_ADD (register, 0x8, 8) , (const, 0x10, 8), (register, 0x8, 8) INT_SEXT (unique, 0x10001324, 4), (unique, 0x10001324, 4) CAST (register, 0x0, 4), (register, 0x0, 4) INT_AND (register, 0x0, 4) , (const, 0xfffffff0, 4), (register, 0x0, 4) INT_ADD (register, 0xa8, 4) , (const, 0x3f7, 4)]
[(unique, 0x10000be4, 8) COPY (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (unique, 0x100002b6, 8) , (const, 0x1, 8), (unique, 0x100002b6, 8) INT_2COMP (unique, 0x3100, 8), (unique, 0x3100, 8) INT_ADD (register, 0x8, 8) , (const, 0x10, 8), (register, 0x8, 8) INT_SEXT (unique, 0x10001324, 4), (unique, 0x10001324, 4) CAST (register, 0x0, 4), (register, 0x0, 4) INT_AND (register, 0x0, 4) , (const, 0xfffffff0, 4), (register, 0x0, 4) INT_ADD (register, 0xa8, 4) , (const, 0x3f7, 4)]
[(unique, 0x10000cc4, 8) COPY (register, 0x10, 8), (register, 0x10, 8) CAST (unique, 0x10001330, 8), (unique, 0x10001330, 8) INT_AND (unique, 0x10001328, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x10001328, 8) CAST (unique, 0x3800, 8), (unique, 0x3800, 8) PTRADD (register, 0x20, 8) , (unique, 0x1000086b, 8) , (const, 0x1, 8), (unique, 0x1000086b, 8) INT_ADD (unique, 0x100002b6, 8) , (const, 0xf, 8), (unique, 0x100002b6, 8) INT_2COMP (unique, 0x3100, 8), (unique, 0x3100, 8) INT_ADD (register, 0x8, 8) , (const, 0x10, 8), (register, 0x8, 8) INT_SEXT (unique, 0x10001324, 4), (unique, 0x10001324, 4) CAST (register, 0x0, 4), (register, 0x0, 4) INT_AND (register, 0x0, 4) , (const, 0xfffffff0, 4), (register, 0x0, 4) INT_ADD (register, 0xa8, 4) , (const, 0x3f7, 4)]
[(unique, 0x10000d24, 4) COPY (register, 0x0, 4), (register, 0x0, 4) INT_AND (register, 0x0, 4) , (const, 0xfffffff0, 4), (register, 0x0, 4) INT_ADD (register, 0xa8, 4) , (const, 0x3f7, 4)]
[ ---  CBRANCH (ram, 0x20977e, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xb0, 8) , (register, 0x8, 8), (register, 0x8, 8) CAST (unique, 0x10001340, 8), (unique, 0x10001340, 8) INT_ADD (unique, 0x10001338, 8) , (register, 0x8, 8), (unique, 0x10001338, 8) CAST (unique, 0x10000abc, 8), (unique, 0x10000abc, 8) PTRSUB (register, 0x10, 8) , (const, 0x0, 8), (register, 0x10, 8) CAST (unique, 0x10001330, 8), (unique, 0x10001330, 8) INT_AND (unique, 0x10001328, 8) , (const, 0xfffffffffffffff0, 8), (unique, 0x10001328, 8) CAST (unique, 0x3800, 8), (unique, 0x3800, 8) PTRADD (register, 0x20, 8) , (unique, 0x1000086b, 8) , (const, 0x1, 8), (unique, 0x1000086b, 8) INT_ADD (unique, 0x100002b6, 8) , (const, 0xf, 8), (unique, 0x100002b6, 8) INT_2COMP (unique, 0x3100, 8), (unique, 0x3100, 8) INT_ADD (register, 0x8, 8) , (const, 0x10, 8), (register, 0x8, 8) INT_SEXT (unique, 0x10001324, 4), (unique, 0x10001324, 4) CAST (register, 0x0, 4), (register, 0x0, 4) INT_AND (register, 0x0, 4) , (const, 0xfffffff0, 4), (register, 0x0, 4) INT_ADD (register, 0xa8, 4) , (const, 0x3f7, 4)]
[(unique, 0x10000bec, 8) COPY (register, 0x20, 8)]
[(unique, 0x10000d28, 4) COPY (unique, 0x3400, 4)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x38, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x4e6, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x4e6, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x4e6, 4), (stack, 0xffffffffffffff00, 8) COPY (const, 0x2095f4, 8)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x4e6, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x4e6, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x4e6, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x4e6, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x4e6, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x4e6, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x4e6, 4)]
[ ---  CBRANCH (ram, 0x2096d0, 1) , (unique, 0xc780, 1), (unique, 0xc780, 1) INT_LESS (unique, 0xbd80, 8) , (unique, 0x3400, 8), (unique, 0x3400, 8) CAST (unique, 0x10001370, 8), (unique, 0x10001370, 8) INT_ADD (unique, 0x10001360, 8) , (unique, 0x10001368, 8), (unique, 0x10001368, 8) CAST (unique, 0x1000077b, 8), (unique, 0x10001360, 8) CAST (unique, 0x1000078b, 8), (unique, 0x1000078b, 8) PTRSUB (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0x1000077b, 8) COPY (unique, 0x10001358, 8), (unique, 0x10001358, 8) CAST (register, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000773, 8), (unique, 0x10000773, 8) PTRSUB (stack, 0xffffffffffffff28, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x30, 8), (register, 0x0, 8) CAST (unique, 0x10001350, 8), (unique, 0x10001350, 8) CALL (ram, 0x121100, 8) , (unique, 0x10001348, 8), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x4e6, 4), (unique, 0x10001348, 8) CAST (register, 0x0, 8)]
[(unique, 0x10000c0c, 8) COPY (register, 0x20, 8)]
[(unique, 0x10000c2c, 8) COPY (unique, 0x10001378, 8), (unique, 0x10001378, 8) CAST (stack, 0xffffffffffffff28, 8)]
[(unique, 0x10000c9c, 8) COPY (unique, 0xbd80, 8)]
[ ---  CBRANCH (ram, 0x209620, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (const, 0x0, 8)]
[(unique, 0x10000c14, 8) COPY (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x209620, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (const, 0x0, 8)]
[(register, 0xb8, 8) MULTIEQUAL (register, 0xb8, 8) , (register, 0xb8, 8) , (register, 0x0, 8) , (unique, 0xbd80, 8)]
[(register, 0xb0, 8) MULTIEQUAL (register, 0xb0, 8) , (register, 0xb0, 8) , (register, 0x0, 8) , (stack, 0xffffffffffffff78, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001380, 8) , (const, 0x209620, 8), (unique, 0x10001380, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8), (register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8)]
[(register, 0x38, 8) INDIRECT (register, 0x38, 8) , (const, 0x279, 4), (register, 0x38, 8) MULTIEQUAL (register, 0x38, 8) , (unique, 0xbd80, 8) , (unique, 0x10000c2c, 8) , (register, 0x38, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x279, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x279, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x279, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x278, 4), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x279, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x278, 4), (stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x279, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x278, 4), (stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x279, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x278, 4), (stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x279, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x278, 4), (stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x279, 4), (stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x278, 4), (stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x279, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x278, 4), (stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x279, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x278, 4), (stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x279, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x278, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CALL (ram, 0x12141b, 8)]
[(unique, 0x10000b74, 8) COPY (register, 0x10, 8), (register, 0x10, 8) INDIRECT (const, 0x0, 8) , (const, 0x279, 4)]
[(unique, 0x10000c04, 8) COPY (register, 0x20, 8), (register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8)]
[(unique, 0x10000c94, 8) COPY (register, 0xa8, 8), (register, 0xa8, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0xa8, 8) , (unique, 0xbd80, 8) , (unique, 0xbd80, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb8, 8) MULTIEQUAL (register, 0xb8, 8) , (register, 0x0, 8) , (register, 0x0, 8)]
[(register, 0xa8, 8) MULTIEQUAL (unique, 0x10000c94, 8) , (unique, 0x10000c9c, 8) , (unique, 0x10000c9c, 8)]
[(register, 0x38, 8) MULTIEQUAL (register, 0x38, 8) , (unique, 0x10000c2c, 8) , (unique, 0x10000c2c, 8)]
[(register, 0x20, 8) MULTIEQUAL (unique, 0x10000c04, 8) , (unique, 0x10000c0c, 8) , (unique, 0x10000c14, 8)]
[(register, 0x10, 8) MULTIEQUAL (unique, 0x10000b74, 8) , (unique, 0xbd80, 8) , (unique, 0xbd80, 8)]
[ ---  CBRANCH (ram, 0x209631, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (unique, 0x10000366, 8) , (const, 0x64, 8), (unique, 0x10000366, 8) INT_MULT (unique, 0x10001388, 8) , (const, 0x2, 8), (unique, 0x10001388, 8) CAST (register, 0xb0, 8), (register, 0xb0, 8) MULTIEQUAL (register, 0xb0, 8) , (register, 0x0, 8) , (register, 0x0, 8)]
[(register, 0x0, 8) COPY (const, 0x64, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100007bb, 8) , (register, 0x0, 8), (unique, 0x100007bb, 8) COPY (unique, 0x10001390, 8), (unique, 0x10001390, 8) CAST (register, 0x38, 8), (register, 0x0, 8) PTRADD (register, 0x10, 8) , (register, 0x0, 8) , (const, 0x1, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x10000366, 8) , (register, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001398, 8) , (const, 0x209643, 8), (unique, 0x10001398, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x29a, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x29a, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x296, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x29a, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x299, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x29a, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x299, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x29a, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x299, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x29a, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x299, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x29a, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x299, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x29a, 4), (stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x299, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x29a, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x299, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x29a, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x299, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x29a, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x299, 4)]
[ ---  CBRANCH (ram, 0x209986, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x100013a8, 8), (unique, 0x100013a8, 8) CALL (ram, 0x121020, 8) , (register, 0xa8, 8) , (unique, 0x100013a0, 8), (unique, 0x100013a0, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x0, 8) , (const, 0x1, 8) , (const, 0x1, 8), (register, 0x0, 8) PTRADD (register, 0x10, 8) , (register, 0x0, 8) , (const, 0x1, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0x10000366, 8) , (register, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100013b0, 8) , (const, 0x20998e, 8), (unique, 0x100013b0, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x2d8, 4)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x2d8, 4)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x2d8, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x2d7, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x2d8, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x2d7, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x2d8, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x2d7, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x2d8, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x2d7, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x2d8, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x2d7, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x2d8, 4), (stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x2d7, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x2d8, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x2d7, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x2d8, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x2d7, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2d8, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2d7, 4)]
[ ---  CALL (ram, 0x1212c8, 8) , (register, 0xa8, 8)]
[(unique, 0x10000bcc, 8) COPY (register, 0x20, 8)]
[ ---  BRANCH (ram, 0x2096d9, 1)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x30, 8)]
[(unique, 0x10000bd4, 8) COPY (register, 0x20, 8)]
[ ---  CBRANCH (ram, 0x209948, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (const, 0x0, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x2db, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x38, 8) , (const, 0x0, 8)]
[(register, 0x8, 8) COPY (const, 0x1, 8)]
[(unique, 0x10000b9c, 8) COPY (register, 0x20, 8), (register, 0x20, 8) MULTIEQUAL (unique, 0x10000bcc, 8) , (unique, 0x10000bd4, 8) , (register, 0x20, 8) , (register, 0x20, 8) , (register, 0x20, 8)]
[ ---  BRANCH (ram, 0x2094fe, 1)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x100013d0, 8) , (const, 0x209668, 8), (unique, 0x100013d0, 8) CAST (register, 0x20, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8), (register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x2b2, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x2b2, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x2b1, 4), (stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x2b2, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x2b1, 4), (stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x2b2, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x2b1, 4), (stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x2b2, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x2b1, 4), (stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x2b2, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x2b1, 4), (stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x2b2, 4), (stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x2b1, 4), (stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x2b2, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x2b1, 4), (stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2b2, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2b1, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x0, 8) , (const, 0x0, 1), (register, 0x0, 8) CAST (unique, 0x100013e0, 8), (unique, 0x100013e0, 8) CALL (ram, 0x121230, 8) , (unique, 0x3400, 8) , (register, 0xb8, 8) , (unique, 0x100013d8, 8), (unique, 0x100013d8, 8) CAST (register, 0xb0, 8), (unique, 0x3400, 8) CAST (unique, 0x100013c8, 8), (unique, 0x100013c8, 8) INT_ADD (unique, 0x100013b8, 8) , (unique, 0x100013c0, 8), (unique, 0x100013c0, 8) CAST (unique, 0x100007c3, 8), (unique, 0x100013b8, 8) CAST (unique, 0x100007d3, 8), (unique, 0x100007d3, 8) PTRSUB (register, 0x0, 8) , (const, 0x0, 8), (unique, 0x100007c3, 8) PTRSUB (register, 0x8, 8) , (const, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (register, 0x8, 8) MULTIEQUAL (register, 0x0, 8) , (unique, 0xbd80, 8), (register, 0xb0, 8) MULTIEQUAL (register, 0xb0, 8) , (register, 0x0, 8), (register, 0xb8, 8) MULTIEQUAL (register, 0xb8, 8) , (register, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x30, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) CAST (unique, 0x10001400, 8), (unique, 0x10001400, 8) INT_ADD (unique, 0x100013f0, 8) , (unique, 0x100013f8, 8), (unique, 0x100013f8, 8) CAST (unique, 0x100007e3, 8), (unique, 0x100013f0, 8) CAST (unique, 0x100007f3, 8), (unique, 0x100007f3, 8) COPY (unique, 0x100013e8, 8), (unique, 0x100013e8, 8) CAST (register, 0xb0, 8), (unique, 0x100007e3, 8) PTRSUB (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x30, 8), (register, 0xb0, 8) MULTIEQUAL (register, 0xb0, 8) , (register, 0x0, 8)]
[(ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x2c9, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x2be, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x2b7, 4), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x2b2, 4), (ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x38, 8) , (stack, 0xffffffffffffff40, 8), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x2b2, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x2b1, 4), (stack, 0xffffffffffffff40, 8) COPY (register, 0x8, 8), (register, 0x8, 8) MULTIEQUAL (register, 0x0, 8) , (unique, 0xbd80, 8)]
[(register, 0x8, 8) COPY (const, 0x0, 8)]
[(unique, 0x10000b94, 8) COPY (register, 0x20, 8), (register, 0x20, 8) MULTIEQUAL (register, 0x20, 8) , (register, 0x20, 8)]
[ ---  BRANCH (ram, 0x2094fe, 1)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(stack, 0xffffffffffffff38, 8) MULTIEQUAL (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8) , (stack, 0xffffffffffffff38, 8)]
[(stack, 0xffffffffffffff30, 8) MULTIEQUAL (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8) , (stack, 0xffffffffffffff30, 8)]
[(stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8)]
[(stack, 0xffffffffffffff20, 8) MULTIEQUAL (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8) , (stack, 0xffffffffffffff20, 8)]
[(stack, 0xffffffffffffff18, 8) MULTIEQUAL (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8) , (stack, 0xffffffffffffff18, 8)]
[(stack, 0xffffffffffffff10, 8) MULTIEQUAL (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8) , (stack, 0xffffffffffffff10, 8)]
[(stack, 0xffffffffffffff00, 8) MULTIEQUAL (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8) , (stack, 0xffffffffffffff00, 8)]
[(ram, 0x4eae68, 8) MULTIEQUAL (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8) , (ram, 0x4eae68, 8)]
[(register, 0x20, 8) MULTIEQUAL (unique, 0x10000b8c, 8) , (unique, 0x10000b94, 8) , (unique, 0x10000b9c, 8) , (unique, 0x10000d2c, 8) , (unique, 0x10000d2c, 8) , (unique, 0x10000bb4, 8) , (register, 0x20, 8)]
[(register, 0x0, 8) COPY (register, 0x8, 8), (register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8) , (register, 0x8, 8) , (register, 0x8, 8) , (register, 0x8, 8) , (register, 0x8, 8) , (register, 0x8, 8)]
[ ---  CBRANCH (ram, 0x2099b5, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffffc0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10001408, 8), (unique, 0x10001408, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(ram, 0x4eae68, 8) COPY (ram, 0x4eae68, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10001410, 8) , (unique, 0x100003f3, 8), (unique, 0x10001410, 8) CAST (register, 0x20, 8), (unique, 0x100003f3, 8) PTRSUB (const, 0x0, 8) , (const, 0x2099ba, 8), (register, 0x20, 8) PTRADD (register, 0x20, 8) , (const, 0xfffffffffffffff8, 8) , (const, 0x1, 8)]
[(stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x263, 4), (stack, 0xffffffffffffff00, 8) INDIRECT (stack, 0xffffffffffffff00, 8) , (const, 0x262, 4)]
[(stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x263, 4), (stack, 0xffffffffffffff10, 8) INDIRECT (stack, 0xffffffffffffff10, 8) , (const, 0x262, 4)]
[(stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x263, 4), (stack, 0xffffffffffffff18, 8) INDIRECT (stack, 0xffffffffffffff18, 8) , (const, 0x262, 4)]
[(stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x263, 4), (stack, 0xffffffffffffff20, 8) INDIRECT (stack, 0xffffffffffffff20, 8) , (const, 0x262, 4)]
[(stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x263, 4), (stack, 0xffffffffffffff28, 8) INDIRECT (stack, 0xffffffffffffff28, 8) , (const, 0x262, 4)]
[(stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x263, 4), (stack, 0xffffffffffffff30, 8) INDIRECT (stack, 0xffffffffffffff30, 8) , (const, 0x262, 4)]
[(stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x263, 4), (stack, 0xffffffffffffff38, 8) INDIRECT (stack, 0xffffffffffffff38, 8) , (const, 0x262, 4)]
[(stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x263, 4), (stack, 0xffffffffffffff40, 8) INDIRECT (stack, 0xffffffffffffff40, 8) , (const, 0x262, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x263, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x262, 4)]
[ ---  CALL (ram, 0x234c80, 8)]
[(ram, 0x4eae68, 8) COPY (ram, 0x4eae68, 8), (ram, 0x4eae68, 8) INDIRECT (ram, 0x4eae68, 8) , (const, 0x263, 4)]
[ ---  RETURN (const, 0x1, 4)]
