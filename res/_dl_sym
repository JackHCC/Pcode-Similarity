[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x34, 4)]
[(ram, 0x4eade8, 8) INDIRECT (ram, 0x4eade8, 8) , (const, 0x34, 4)]
[(ram, 0x4eae58, 8) INDIRECT (ram, 0x4eae58, 8) , (const, 0x34, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x34, 4), (stack, 0xffffffffffffff60, 8) COPY (const, 0x0, 8)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x34, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x34, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x34, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x34, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x34, 4)]
[(stack, 0xffffffffffffffa0, 4) INDIRECT (stack, 0xffffffffffffffa0, 4) , (const, 0x34, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x34, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x34, 4), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x100003ea, 8), (unique, 0x100003ea, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8)]
[ ---  CBRANCH (ram, 0x266e20, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x100003f2, 8), (unique, 0x100003f2, 8) CALL (ram, 0x1211a0, 8) , (register, 0x10, 8)]
[(unique, 0x10000372, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x100003fa, 8), (unique, 0x100003fa, 8) CAST (ram, 0x4eade8, 8)]
[ ---  CBRANCH (ram, 0x266d73, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x38, 8) , (const, 0x0, 8)]
[(unique, 0x1000036a, 8) COPY (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x266e33, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x38, 8) , (const, 0x0, 8)]
[(unique, 0x100003e2, 8) COPY (register, 0xa0, 8), (register, 0xa0, 8) MULTIEQUAL (unique, 0x1000036a, 8) , (unique, 0x10000372, 8)]
[ ---  CBRANCH (ram, 0x266fb0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x38, 8) , (const, 0xffffffffffffffff, 8)]
[(unique, 0x1000032a, 8) COPY (register, 0xa0, 8)]
[ ---  CBRANCH (ram, 0x266fcb, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xa0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000402, 8), (unique, 0x10000402, 8) CAST (ram, 0x4eade8, 8)]
[ ---  CBRANCH (ram, 0x2670dc, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0xa0, 8) , (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x2670dc, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (register, 0x10, 8) , (unique, 0x1000040a, 8), (unique, 0x1000040a, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3c80, 8), (unique, 0x3c80, 8) PTRADD (register, 0xa0, 8) , (const, 0x68, 8) , (const, 0x8, 8)]
[(unique, 0x10000332, 8) COPY (register, 0xa0, 8)]
[ ---  CBRANCH (ram, 0x266fcb, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESSEQUAL (unique, 0x10000412, 8) , (register, 0x10, 8), (unique, 0x10000412, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3c80, 8), (unique, 0x3c80, 8) PTRADD (register, 0xa0, 8) , (const, 0x69, 8) , (const, 0x8, 8)]
[(ram, 0x4eade8, 8) INDIRECT (ram, 0x4eade8, 8) , (const, 0x2d4, 4)]
[(ram, 0x4eae58, 8) INDIRECT (ram, 0x4eae58, 8) , (const, 0x2d4, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x2d4, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x2d4, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x2d4, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x2d4, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x2d4, 4)]
[(stack, 0xffffffffffffffa0, 4) INDIRECT (stack, 0xffffffffffffffa0, 4) , (const, 0x2d4, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x2d4, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x2d4, 4)]
[ ---  CALL (ram, 0x267220, 8) , (const, 0x0, 8) , (const, 0x0, 8) , (const, 0x0, 8) , (unique, 0x10000218, 8), (unique, 0x10000218, 8) COPY (const, 0x2baf30, 8)]
[(unique, 0x1000033a, 8) COPY (unique, 0xbd80, 8), (unique, 0xbd80, 8) CAST (unique, 0x1000041a, 8), (unique, 0x1000041a, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (register, 0x8, 8) , (const, 0x5b, 8) , (const, 0x8, 8), (register, 0x8, 8) COPY (unique, 0x10000342, 8), (unique, 0x10000342, 8) MULTIEQUAL (unique, 0x1000032a, 8) , (unique, 0x10000332, 8) , (unique, 0x1000033a, 8)]
[ ---  CBRANCH (ram, 0x266fc8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) CAST (unique, 0x1000041a, 8), (unique, 0x1000041a, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (register, 0x8, 8) , (const, 0x5b, 8) , (const, 0x8, 8), (register, 0x8, 8) COPY (unique, 0x10000342, 8), (unique, 0x10000342, 8) MULTIEQUAL (unique, 0x1000032a, 8) , (unique, 0x10000332, 8) , (unique, 0x1000033a, 8)]
[(register, 0x8, 8) PTRADD (register, 0x8, 8) , (const, 0x71, 8) , (const, 0x8, 8)]
[(stack, 0xffffffffffffff28, 8) COPY (const, 0x0, 8)]
[(unique, 0x10000362, 8) COPY (register, 0xa0, 8)]
[ ---  BRANCH (ram, 0x266d96, 1)]
[(unique, 0x3200, 8) PTRADD (register, 0x38, 8) , (const, 0x71, 8) , (const, 0x8, 8)]
[(stack, 0xffffffffffffff28, 8) COPY (const, 0x2, 8)]
[(unique, 0x1000035a, 8) COPY (register, 0x38, 8)]
[(unique, 0x1000039a, 8) COPY (stack, 0xffffffffffffff30, 8), (stack, 0xffffffffffffff30, 8) COPY (const, 0x0, 8)]
[(register, 0xa0, 8) MULTIEQUAL (register, 0x0, 8) , (unique, 0xbd80, 8)]
[ ---  CBRANCH (ram, 0x267000, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x10000422, 8), (unique, 0x10000422, 8) INT_ADD (register, 0x110, 8) , (const, 0x18, 8)]
[(unique, 0xbd80, 8) CAST (unique, 0x1000042a, 8), (unique, 0x1000042a, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3c80, 8), (unique, 0x3c80, 8) PTRADD (register, 0xa0, 8) , (const, 0x70, 8) , (const, 0x8, 8)]
[(stack, 0xffffffffffffff30, 8) COPY (const, 0x0, 8)]
[(stack, 0xffffffffffffff28, 8) COPY (const, 0x3, 8)]
[(unique, 0x1000038a, 8) COPY (register, 0xa0, 8)]
[ ---  BRANCH (ram, 0x266d96, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x79, 4)]
[(ram, 0x4eade8, 8) INDIRECT (ram, 0x4eade8, 8) , (const, 0x79, 4)]
[(ram, 0x4eae58, 8) INDIRECT (ram, 0x4eae58, 8) , (const, 0x79, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x79, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x79, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x79, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x79, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x79, 4)]
[(stack, 0xffffffffffffffa0, 4) INDIRECT (stack, 0xffffffffffffffa0, 4) , (const, 0x79, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x79, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x79, 4)]
[(unique, 0x1000034a, 8) COPY (register, 0x0, 8), (register, 0x0, 8) CAST (unique, 0x1000043a, 8), (unique, 0x1000043a, 8) CALLIND (unique, 0xbd80, 8) , (register, 0x30, 8) , (register, 0x30, 8) , (register, 0x10, 8) , (register, 0x8, 8) , (const, 0x0, 8) , (const, 0x0, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff30, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000432, 8), (unique, 0x10000432, 8) CAST (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (ram, 0x4eae58, 8) , (const, 0x178, 8) , (const, 0x1, 8), (register, 0x10, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff60, 8), (register, 0x8, 8) MULTIEQUAL (unique, 0x3200, 8) , (register, 0x8, 8) , (unique, 0xbd80, 8), (register, 0x30, 8) MULTIEQUAL (unique, 0x1000035a, 8) , (unique, 0x10000362, 8) , (register, 0xa0, 8), (stack, 0xffffffffffffff28, 8) MULTIEQUAL (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8) , (stack, 0xffffffffffffff28, 8), (stack, 0xffffffffffffff30, 8) MULTIEQUAL (unique, 0x1000039a, 8) , (register, 0xa0, 8) , (stack, 0xffffffffffffff30, 8)]
[(unique, 0x10000392, 8) COPY (register, 0xa0, 8), (register, 0xa0, 8) MULTIEQUAL (unique, 0x100003e2, 8) , (unique, 0x100003e2, 8) , (unique, 0x1000038a, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x4f00, 8) , (const, 0x1, 4), (unique, 0x4f00, 8) CAST (unique, 0x10000442, 8), (unique, 0x10000442, 8) INT_ADD (register, 0x110, 8) , (const, 0x1c, 8)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x360, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x360, 4)]
[(stack, 0xffffffffffffff70, 8) INDIRECT (stack, 0xffffffffffffff70, 8) , (const, 0x360, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (unique, 0x100003b2, 8) , (const, 0x360, 4), (unique, 0x100003b2, 8) COPY (register, 0x30, 8)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x360, 4), (stack, 0xffffffffffffff98, 8) COPY (const, 0x0, 8)]
[(stack, 0xffffffffffffffa0, 4) INDIRECT (stack, 0xffffffffffffffa0, 4) , (const, 0x360, 4), (stack, 0xffffffffffffffa0, 4) COPY (const, 0x7, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (unique, 0x3800, 8) , (const, 0x360, 4), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x360, 4)]
[(register, 0x0, 4) CALL (ram, 0x267270, 8) , (unique, 0x3800, 8) , (unique, 0x10000210, 8) , (unique, 0x3800, 8), (unique, 0x10000210, 8) PTRSUB (const, 0x0, 8) , (const, 0x266840, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff88, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff68, 8)]
[(unique, 0x10000302, 8) COPY (stack, 0xffffffffffffff88, 8), (stack, 0xffffffffffffff88, 8) INDIRECT (unique, 0x100003aa, 8) , (const, 0x360, 4), (unique, 0x100003aa, 8) COPY (register, 0xa0, 8)]
[(ram, 0x4eade8, 8) INDIRECT (ram, 0x4eade8, 8) , (const, 0x371, 4), (ram, 0x4eade8, 8) INDIRECT (ram, 0x4eade8, 8) , (const, 0x360, 4), (ram, 0x4eade8, 8) INDIRECT (ram, 0x4eade8, 8) , (const, 0x357, 4)]
[(ram, 0x4eae58, 8) INDIRECT (ram, 0x4eae58, 8) , (const, 0x371, 4), (ram, 0x4eae58, 8) INDIRECT (ram, 0x4eae58, 8) , (const, 0x360, 4), (ram, 0x4eae58, 8) INDIRECT (ram, 0x4eae58, 8) , (const, 0x357, 4)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x4f00, 8) , (const, 0x0, 4), (unique, 0x4f00, 8) CAST (unique, 0x1000044a, 8), (unique, 0x1000044a, 8) INT_ADD (register, 0x110, 8) , (const, 0x1c, 8), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x360, 4)]
[ ---  CBRANCH (ram, 0x26708d, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0x2, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x1000044a, 8), (unique, 0x1000044a, 8) INT_ADD (register, 0x110, 8) , (const, 0x1c, 8), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x360, 4)]
[ ---  CALLOTHER (const, 0x5, 4)]
[(unique, 0x10000352, 8) COPY (stack, 0xffffffffffffff88, 8)]
[ ---  CBRANCH (ram, 0x266dab, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffff70, 8) , (const, 0x0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x3b9, 4)]
[(ram, 0x4eade8, 8) INDIRECT (ram, 0x4eade8, 8) , (const, 0x3b9, 4)]
[(ram, 0x4eae58, 8) INDIRECT (ram, 0x4eae58, 8) , (const, 0x3b9, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x3b9, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x3b9, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x3b9, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x3b9, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x3b9, 4)]
[(stack, 0xffffffffffffffa0, 4) INDIRECT (stack, 0xffffffffffffffa0, 4) , (const, 0x3b9, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x3b9, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x3b9, 4)]
[(register, 0x0, 8) CAST (unique, 0x10000452, 8), (unique, 0x10000452, 8) CALL (ram, 0x2671d0, 8) , (register, 0x0, 4) , (unique, 0x3800, 8) , (const, 0x0, 8)]
[(unique, 0x100003a2, 8) COPY (register, 0x30, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa0, 4) MULTIEQUAL (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff68, 4) MULTIEQUAL (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4)]
[(ram, 0x4eae58, 8) MULTIEQUAL (ram, 0x4eae58, 8) , (ram, 0x4eae58, 8)]
[(ram, 0x4eade8, 8) MULTIEQUAL (ram, 0x4eade8, 8) , (ram, 0x4eade8, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xa0, 8) MULTIEQUAL (unique, 0x10000392, 8) , (register, 0xa0, 8)]
[(register, 0x18, 8) MULTIEQUAL (unique, 0x1000034a, 8) , (unique, 0x10000352, 8)]
[ ---  CBRANCH (ram, 0x266ff8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffff60, 8) , (const, 0x0, 8), (stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(unique, 0x1000031a, 8) COPY (register, 0x0, 8), (register, 0x0, 8) COPY (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x266df3, 1)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (stack, 0xffffffffffffff60, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x266e68, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x10, 1) , (const, 0x6, 1), (register, 0x10, 1) INT_AND (unique, 0xbb00, 1) , (const, 0xf, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000462, 8), (unique, 0x10000462, 8) INT_ADD (unique, 0x1000045a, 8) , (const, 0x4, 8), (unique, 0x1000045a, 8) CAST (stack, 0xffffffffffffff60, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x25e, 4)]
[(ram, 0x4eade8, 8) INDIRECT (ram, 0x4eade8, 8) , (const, 0x25e, 4)]
[(ram, 0x4eae58, 8) INDIRECT (ram, 0x4eae58, 8) , (const, 0x25e, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x25e, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (unique, 0xbd80, 8) , (const, 0x25e, 4), (unique, 0xbd80, 8) CAST (unique, 0x1000046a, 8), (unique, 0x1000046a, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (register, 0x18, 8) , (const, 0x89, 8) , (const, 0x8, 8)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (unique, 0x100003ba, 8) , (const, 0x25e, 4), (unique, 0x100003ba, 8) COPY (unique, 0xbd80, 8)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x25e, 4)]
[(stack, 0xffffffffffffffa0, 4) INDIRECT (stack, 0xffffffffffffffa0, 4) , (const, 0x25e, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x25e, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x25e, 4)]
[(register, 0x0, 8) CAST (unique, 0x10000472, 8), (unique, 0x10000472, 8) CALL (ram, 0x121060, 8) , (unique, 0x3800, 8), (unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff88, 8)]
[(register, 0x10, 1) INT_AND (unique, 0xbb00, 1) , (const, 0xf, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000482, 8), (unique, 0x10000482, 8) INT_ADD (unique, 0x1000047a, 8) , (const, 0x4, 8), (unique, 0x1000047a, 8) CAST (stack, 0xffffffffffffff60, 8), (stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x25e, 4)]
[ ---  BRANCH (ram, 0x266dd5, 1)]
[ ---  CBRANCH (ram, 0x266dd5, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x18, 8) , (const, 0x0, 8)]
[(register, 0x0, 8) CAST (unique, 0x10000492, 8), (unique, 0x10000492, 8) INT_ADD (unique, 0x1000048a, 8) , (unique, 0xbd80, 8), (unique, 0x1000048a, 8) CAST (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x18, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa0, 4) MULTIEQUAL (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff68, 4) MULTIEQUAL (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(ram, 0x4eae58, 8) MULTIEQUAL (ram, 0x4eae58, 8) , (ram, 0x4eae58, 8) , (ram, 0x4eae58, 8)]
[(ram, 0x4eade8, 8) MULTIEQUAL (ram, 0x4eade8, 8) , (ram, 0x4eade8, 8) , (ram, 0x4eade8, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0x0, 8) MULTIEQUAL (unique, 0xbd80, 8) , (register, 0x0, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x266e98, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (register, 0x10, 1) , (const, 0xa, 1), (register, 0x10, 1) MULTIEQUAL (register, 0x10, 1) , (register, 0x10, 1) , (register, 0x10, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x24f, 4)]
[(ram, 0x4eade8, 8) INDIRECT (ram, 0x4eade8, 8) , (const, 0x24f, 4)]
[(ram, 0x4eae58, 8) INDIRECT (ram, 0x4eae58, 8) , (const, 0x24f, 4)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x24f, 4)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x24f, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x24f, 4)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x24f, 4)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x24f, 4)]
[(stack, 0xffffffffffffffa0, 4) INDIRECT (stack, 0xffffffffffffffa0, 4) , (const, 0x24f, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x24f, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x24f, 4)]
[(register, 0x0, 8) CAST (unique, 0x100004a2, 8), (unique, 0x100004a2, 8) CALLIND (unique, 0x1000049a, 8), (unique, 0x1000049a, 8) CAST (register, 0x0, 8)]
[ ---  BRANCH (ram, 0x266dde, 1)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa0, 4) MULTIEQUAL (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff68, 4) MULTIEQUAL (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(ram, 0x4eade8, 8) MULTIEQUAL (ram, 0x4eade8, 8) , (ram, 0x4eade8, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x1000030a, 8) COPY (register, 0x0, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x266ea0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x100004aa, 8), (unique, 0x100004aa, 8) CAST (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (ram, 0x4eae58, 8) , (const, 0x1b0, 8) , (const, 0x1, 8), (ram, 0x4eae58, 8) MULTIEQUAL (ram, 0x4eae58, 8) , (ram, 0x4eae58, 8)]
[(unique, 0x10000312, 8) COPY (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x266df3, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x100001af, 1) , (const, 0x0, 1), (unique, 0x100001af, 1) INT_AND (register, 0x30, 1) , (const, 0x10, 1), (register, 0x30, 1) INT_OR (unique, 0xbb00, 1) , (unique, 0xba80, 1), (unique, 0xba80, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3c80, 8), (unique, 0x3c80, 8) CAST (unique, 0x100004ca, 8), (unique, 0x100004ca, 8) INT_ADD (unique, 0x100004c2, 8) , (const, 0x315, 8), (unique, 0x100004c2, 8) CAST (register, 0xa0, 8), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) CAST (unique, 0x100004ba, 8), (unique, 0x100004ba, 8) INT_ADD (unique, 0x100004b2, 8) , (const, 0x315, 8), (unique, 0x100004b2, 8) CAST (register, 0x18, 8)]
[(unique, 0x3c80, 8) PTRADD (register, 0xa0, 8) , (const, 0x8e, 8) , (const, 0x8, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x100004d2, 8), (unique, 0x100004d2, 8) CAST (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (ram, 0x4eae58, 8) , (const, 0x1a8, 8) , (const, 0x1, 8)]
[(register, 0x18, 8) PTRADD (register, 0x18, 8) , (const, 0x8e, 8) , (const, 0x8, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100004da, 8), (unique, 0x100004da, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x8, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0xd, 8) , (const, 0x8, 8)]
[(unique, 0x10000208, 8) LOAD (const, 0x1b1, 4) , (stack, 0xffffffffffffff60, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (stack, 0xffffffffffffff60, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[(unique, 0x3e80, 8) PTRADD (register, 0xa0, 8) , (unique, 0x10000288, 8) , (const, 0x8, 8), (unique, 0x10000288, 8) INT_ADD (unique, 0x10000280, 8) , (const, 0x90, 8), (unique, 0x10000280, 8) INT_MULT (register, 0x0, 8) , (const, 0x2, 8), (register, 0x0, 8) INT_ZEXT (register, 0x0, 4), (register, 0x0, 4) INT_SUB (unique, 0xbc80, 4) , (const, 0x1, 4)]
[(unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff68, 8)]
[(register, 0x28, 8) CAST (unique, 0x100004fe, 8), (unique, 0x100004fe, 8) INT_ZEXT (unique, 0x100004fa, 4), (unique, 0x100004fa, 4) CAST (register, 0x28, 4), (register, 0x28, 4) INT_MULT (register, 0x28, 4) , (const, 0xaaaaaaab, 4), (register, 0x28, 4) SUBPIECE (register, 0x28, 8) , (const, 0x0, 4), (register, 0x28, 8) INT_SRIGHT (register, 0x28, 8) , (const, 0x3, 4), (register, 0x28, 8) CAST (unique, 0x100004f2, 8), (unique, 0x100004f2, 8) INT_SUB (unique, 0x100004ea, 8) , (unique, 0xbd80, 8), (unique, 0x100004ea, 8) CAST (stack, 0xffffffffffffff60, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x100004e2, 8), (unique, 0x100004e2, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x8, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (register, 0x18, 8) , (const, 0xe, 8) , (const, 0x8, 8)]
[(register, 0xa0, 8) COPY (const, 0x0, 8)]
[(unique, 0x3800, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffff88, 8)]
[(unique, 0x100003c2, 8) COPY (register, 0x0, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa0, 4) MULTIEQUAL (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (unique, 0xbd80, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (unique, 0x10000208, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff68, 4) MULTIEQUAL (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (unique, 0x3800, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (unique, 0x3800, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (unique, 0xbd80, 8) , (stack, 0xffffffffffffff40, 8)]
[(ram, 0x4eae58, 8) MULTIEQUAL (ram, 0x4eae58, 8) , (ram, 0x4eae58, 8)]
[(ram, 0x4eade8, 8) MULTIEQUAL (ram, 0x4eade8, 8) , (ram, 0x4eade8, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb0, 8) MULTIEQUAL (unique, 0x3c80, 8) , (register, 0xb0, 8)]
[(register, 0xa8, 8) MULTIEQUAL (unique, 0x3e80, 8) , (register, 0xa8, 8)]
[(register, 0xa0, 8) MULTIEQUAL (register, 0xa0, 8) , (register, 0xa0, 8)]
[(register, 0x28, 8) MULTIEQUAL (register, 0x28, 8) , (register, 0x28, 8)]
[(register, 0x18, 8) MULTIEQUAL (register, 0x18, 8) , (register, 0x18, 8)]
[(unique, 0x100003ca, 8) COPY (stack, 0xffffffffffffff90, 8), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (unique, 0x100003c2, 8) , (stack, 0xffffffffffffff90, 8)]
[ ---  CBRANCH (ram, 0x266f91, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000506, 8), (unique, 0x10000506, 8) INT_ADD (register, 0xb8, 8) , (const, 0x20, 8), (register, 0xb8, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8)]
[ ---  CBRANCH (ram, 0x2670b0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x58c00, 1) , (const, 0x0, 1), (unique, 0x58c00, 1) INT_AND (unique, 0xbb00, 1) , (const, 0x2, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x1000050e, 8), (unique, 0x1000050e, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xb0, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa0, 4) MULTIEQUAL (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff68, 4) MULTIEQUAL (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (unique, 0x100003a2, 8)]
[(ram, 0x4eae58, 8) MULTIEQUAL (ram, 0x4eae58, 8) , (ram, 0x4eae58, 8)]
[(ram, 0x4eade8, 8) MULTIEQUAL (ram, 0x4eade8, 8) , (ram, 0x4eade8, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xb8, 8) MULTIEQUAL (register, 0xb8, 8) , (register, 0xb8, 8)]
[(register, 0xb0, 8) MULTIEQUAL (register, 0xb0, 8) , (register, 0xb0, 8)]
[(register, 0xa8, 8) MULTIEQUAL (register, 0xa8, 8) , (register, 0x30, 8)]
[(register, 0xa0, 8) MULTIEQUAL (register, 0xa0, 8) , (register, 0xa0, 8)]
[(register, 0x28, 8) MULTIEQUAL (register, 0x28, 8) , (unique, 0x3800, 8)]
[(register, 0x0, 8) MULTIEQUAL (unique, 0xbd80, 8) , (register, 0x0, 8)]
[ ---  CBRANCH (ram, 0x266f91, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0x58c00, 1) , (const, 0x0, 1), (unique, 0x58c00, 1) INT_AND (unique, 0xbb00, 1) , (const, 0x1, 1), (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x10000516, 8), (unique, 0x10000516, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x18, 8) , (const, 0x1, 8) , (const, 0x8, 8), (register, 0x18, 8) MULTIEQUAL (register, 0x18, 8) , (unique, 0x10000302, 8)]
[(register, 0xb8, 8) MULTIEQUAL (register, 0xb8, 8) , (register, 0xb8, 8)]
[(register, 0xa8, 8) MULTIEQUAL (register, 0xa8, 8) , (register, 0xa8, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x209, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x4eade8, 8) INDIRECT (ram, 0x4eade8, 8) , (const, 0x209, 4), (ram, 0x4eade8, 8) MULTIEQUAL (ram, 0x4eade8, 8) , (ram, 0x4eade8, 8)]
[(ram, 0x4eae58, 8) INDIRECT (ram, 0x4eae58, 8) , (const, 0x209, 4), (ram, 0x4eae58, 8) MULTIEQUAL (ram, 0x4eae58, 8) , (ram, 0x4eae58, 8)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x209, 4), (stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (register, 0x10, 4) , (const, 0x209, 4), (register, 0x10, 4) INT_OR (unique, 0x100001a7, 4) , (const, 0x8, 4), (unique, 0x100001a7, 4) SUBPIECE (register, 0xa0, 8) , (const, 0x0, 4), (register, 0xa0, 8) MULTIEQUAL (register, 0xa0, 8) , (register, 0xa0, 8)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x209, 4), (stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x209, 4), (stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffffa0, 4) INDIRECT (stack, 0xffffffffffffffa0, 4) , (const, 0x209, 4), (stack, 0xffffffffffffffa0, 4) MULTIEQUAL (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x209, 4), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x209, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(unique, 0x100003d2, 8) COPY (stack, 0xffffffffffffff90, 8), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x209, 4), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[ ---  CBRANCH (ram, 0x266f91, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x0, 8) , (stack, 0xffffffffffffff90, 8), (register, 0x0, 8) CAST (unique, 0x10000536, 8), (unique, 0x10000536, 8) CALLIND (register, 0x0, 8) , (stack, 0xffffffffffffff50, 8) , (register, 0x30, 8) , (register, 0xb0, 8) , (register, 0x18, 8) , (stack, 0xffffffffffffff48, 8) , (register, 0x88, 8), (stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x209, 4), (register, 0x88, 8) INT_ADD (register, 0x88, 8) , (unique, 0x1000052e, 8), (unique, 0x1000052e, 8) CAST (stack, 0xffffffffffffff40, 8), (register, 0x88, 8) INT_ZEXT (unique, 0xbc80, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (unique, 0x10000526, 8), (unique, 0x10000526, 8) CAST (stack, 0xffffffffffffff60, 8), (register, 0x30, 8) INT_AND (unique, 0x1000051e, 8) , (const, 0xffffffff, 8), (unique, 0x1000051e, 8) CAST (register, 0x28, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0xbd80, 8) , (register, 0x0, 8), (register, 0x18, 8) MULTIEQUAL (register, 0x18, 8) , (register, 0x18, 8), (register, 0x28, 8) MULTIEQUAL (register, 0x28, 8) , (register, 0x28, 8), (register, 0xb0, 8) MULTIEQUAL (register, 0xb0, 8) , (register, 0xb0, 8), (stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8), (stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8), (stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8), (stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(register, 0xa0, 8) CAST (unique, 0x1000053e, 8), (unique, 0x1000053e, 8) PTRSUB (const, 0x0, 8) , (const, 0x10, 8)]
[(unique, 0x100003da, 8) COPY (register, 0x0, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa0, 4) MULTIEQUAL (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff68, 4) MULTIEQUAL (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff50, 8) MULTIEQUAL (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8) , (stack, 0xffffffffffffff50, 8)]
[(stack, 0xffffffffffffff48, 8) MULTIEQUAL (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8) , (stack, 0xffffffffffffff48, 8)]
[(stack, 0xffffffffffffff40, 8) MULTIEQUAL (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8) , (stack, 0xffffffffffffff40, 8)]
[(ram, 0x4eae58, 8) MULTIEQUAL (ram, 0x4eae58, 8) , (ram, 0x4eae58, 8) , (ram, 0x4eae58, 8) , (ram, 0x4eae58, 8)]
[(ram, 0x4eade8, 8) MULTIEQUAL (ram, 0x4eade8, 8) , (ram, 0x4eade8, 8) , (ram, 0x4eade8, 8) , (ram, 0x4eade8, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xa0, 8) MULTIEQUAL (register, 0xa0, 8) , (register, 0xa0, 8) , (register, 0xa0, 8) , (register, 0xa0, 8)]
[(register, 0x28, 8) MULTIEQUAL (register, 0x28, 8) , (register, 0x28, 8) , (register, 0x28, 8) , (register, 0x28, 8)]
[(register, 0x18, 8) PTRADD (register, 0x18, 8) , (const, 0x2, 8) , (const, 0x8, 8), (register, 0x18, 8) MULTIEQUAL (register, 0x18, 8) , (register, 0x18, 8) , (register, 0x18, 8) , (register, 0x18, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000546, 8), (unique, 0x10000546, 8) INT_ADD (register, 0xb8, 8) , (const, 0x40, 8), (register, 0xb8, 8) MULTIEQUAL (register, 0xb8, 8) , (register, 0xb8, 8) , (register, 0xb8, 8) , (register, 0xb8, 8)]
[(unique, 0x10000322, 8) COPY (stack, 0xffffffffffffff90, 8), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (unique, 0x100003ca, 8) , (unique, 0x100003d2, 8) , (unique, 0x100003da, 8) , (stack, 0xffffffffffffff90, 8)]
[ ---  CBRANCH (ram, 0x266f40, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0xb0, 8) , (register, 0xa8, 8), (register, 0xb0, 8) PTRADD (register, 0xb0, 8) , (const, 0x2, 8) , (const, 0x8, 8), (register, 0xa8, 8) MULTIEQUAL (register, 0xa8, 8) , (register, 0xa8, 8) , (register, 0xa8, 8) , (register, 0xa8, 8), (register, 0xb0, 8) MULTIEQUAL (register, 0xb0, 8) , (register, 0xb0, 8) , (register, 0xb0, 8) , (register, 0xb0, 8)]
[(stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffa0, 4) MULTIEQUAL (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4)]
[(stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff68, 4) MULTIEQUAL (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4)]
[(stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(ram, 0x4eae58, 8) MULTIEQUAL (ram, 0x4eae58, 8) , (ram, 0x4eae58, 8) , (ram, 0x4eae58, 8) , (ram, 0x4eae58, 8)]
[(ram, 0x4eade8, 8) MULTIEQUAL (ram, 0x4eade8, 8) , (ram, 0x4eade8, 8) , (ram, 0x4eade8, 8) , (ram, 0x4eade8, 8)]
[(register, 0x0, 8) MULTIEQUAL (unique, 0x1000030a, 8) , (unique, 0x10000312, 8) , (unique, 0x1000031a, 8) , (unique, 0x10000322, 8)]
[ ---  CBRANCH (ram, 0x2670ee, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffffc0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x1000054e, 8), (unique, 0x1000054e, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(ram, 0x4eade8, 8) COPY (ram, 0x4eade8, 8)]
[(ram, 0x4eae58, 8) COPY (ram, 0x4eae58, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8)]
[(stack, 0xffffffffffffff60, 8) INDIRECT (stack, 0xffffffffffffff60, 8) , (const, 0x101, 4), (stack, 0xffffffffffffff60, 8) MULTIEQUAL (stack, 0xffffffffffffff60, 8) , (stack, 0xffffffffffffff60, 8)]
[(stack, 0xffffffffffffff68, 4) INDIRECT (stack, 0xffffffffffffff68, 4) , (const, 0x101, 4), (stack, 0xffffffffffffff68, 4) MULTIEQUAL (stack, 0xffffffffffffff68, 4) , (stack, 0xffffffffffffff68, 4)]
[(stack, 0xffffffffffffff88, 8) INDIRECT (stack, 0xffffffffffffff88, 8) , (const, 0x101, 4), (stack, 0xffffffffffffff88, 8) MULTIEQUAL (stack, 0xffffffffffffff88, 8) , (stack, 0xffffffffffffff88, 8)]
[(stack, 0xffffffffffffff90, 8) INDIRECT (stack, 0xffffffffffffff90, 8) , (const, 0x101, 4), (stack, 0xffffffffffffff90, 8) MULTIEQUAL (stack, 0xffffffffffffff90, 8) , (stack, 0xffffffffffffff90, 8)]
[(stack, 0xffffffffffffff98, 8) INDIRECT (stack, 0xffffffffffffff98, 8) , (const, 0x101, 4), (stack, 0xffffffffffffff98, 8) MULTIEQUAL (stack, 0xffffffffffffff98, 8) , (stack, 0xffffffffffffff98, 8)]
[(stack, 0xffffffffffffffa0, 4) INDIRECT (stack, 0xffffffffffffffa0, 4) , (const, 0x101, 4), (stack, 0xffffffffffffffa0, 4) MULTIEQUAL (stack, 0xffffffffffffffa0, 4) , (stack, 0xffffffffffffffa0, 4)]
[(stack, 0xffffffffffffffb0, 8) INDIRECT (stack, 0xffffffffffffffb0, 8) , (const, 0x101, 4), (stack, 0xffffffffffffffb0, 8) MULTIEQUAL (stack, 0xffffffffffffffb0, 8) , (stack, 0xffffffffffffffb0, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x101, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[ ---  CALL (ram, 0x234c80, 8)]
[(ram, 0x4eade8, 8) COPY (ram, 0x4eade8, 8), (ram, 0x4eade8, 8) INDIRECT (ram, 0x4eade8, 8) , (const, 0x101, 4), (ram, 0x4eade8, 8) MULTIEQUAL (ram, 0x4eade8, 8) , (ram, 0x4eade8, 8)]
[(ram, 0x4eae58, 8) COPY (ram, 0x4eae58, 8), (ram, 0x4eae58, 8) INDIRECT (ram, 0x4eae58, 8) , (const, 0x101, 4), (ram, 0x4eae58, 8) MULTIEQUAL (ram, 0x4eae58, 8) , (ram, 0x4eae58, 8)]
[ ---  RETURN (const, 0x1, 4)]
