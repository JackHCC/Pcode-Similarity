[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x100004fc, 8), (unique, 0x100004fc, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8)]
[(stack, 0xffffffffffffee80, 8) COPY (const, 0x0, 8)]
[(stack, 0xffffffffffffee78, 8) COPY (const, 0x0, 8)]
[(stack, 0xffffffffffffee70, 8) COPY (const, 0x0, 8)]
[(stack, 0xffffffffffffee68, 8) COPY (const, 0x0, 8)]
[(stack, 0xffffffffffffee20, 8) PTRSUB (const, 0x0, 8) , (const, 0x4ebc40, 8)]
[(unique, 0x3c80, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffee98, 8)]
[(stack, 0xffffffffffffee50, 8) COPY (const, 0x0, 8)]
[(stack, 0xffffffffffffee60, 8) COPY (const, 0x0, 8)]
[(stack, 0xffffffffffffee48, 8) COPY (const, 0x0, 8)]
[(stack, 0xffffffffffffee58, 8) COPY (const, 0x0, 8)]
[(stack, 0xffffffffffffee80, 8) MULTIEQUAL (stack, 0xffffffffffffee80, 8) , (unique, 0x1000025c, 8)]
[(stack, 0xffffffffffffee78, 8) MULTIEQUAL (stack, 0xffffffffffffee78, 8) , (unique, 0x10000254, 8)]
[(stack, 0xffffffffffffee70, 8) MULTIEQUAL (stack, 0xffffffffffffee70, 8) , (unique, 0xbd80, 8)]
[(stack, 0xffffffffffffee68, 8) MULTIEQUAL (stack, 0xffffffffffffee68, 8) , (unique, 0xbd80, 8)]
[(stack, 0xffffffffffffee60, 8) MULTIEQUAL (stack, 0xffffffffffffee60, 8) , (unique, 0xbd80, 8)]
[(stack, 0xffffffffffffee58, 8) MULTIEQUAL (stack, 0xffffffffffffee58, 8) , (unique, 0xbd80, 8)]
[(stack, 0xffffffffffffee50, 8) MULTIEQUAL (stack, 0xffffffffffffee50, 8) , (unique, 0xbd80, 8)]
[(stack, 0xffffffffffffee48, 8) MULTIEQUAL (stack, 0xffffffffffffee48, 8) , (unique, 0xbd80, 8)]
[(stack, 0xffffffffffffee20, 8) MULTIEQUAL (stack, 0xffffffffffffee20, 8) , (unique, 0x10000264, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x6c, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (unique, 0x1000026d, 8)]
[(ram, 0x2bc050, 8) INDIRECT (ram, 0x2bc050, 8) , (const, 0x6c, 4), (ram, 0x2bc050, 8) MULTIEQUAL (ram, 0x2bc050, 8) , (unique, 0x10000275, 8)]
[(ram, 0x2bc058, 8) INDIRECT (ram, 0x2bc058, 8) , (const, 0x6c, 4), (ram, 0x2bc058, 8) MULTIEQUAL (ram, 0x2bc058, 8) , (unique, 0x1000027d, 8)]
[(ram, 0x4eb2a8, 4) INDIRECT (ram, 0x4eb2a8, 4) , (const, 0x6c, 4), (ram, 0x4eb2a8, 4) MULTIEQUAL (ram, 0x4eb2a8, 4) , (unique, 0x10000285, 4)]
[(ram, 0x4eb2b8, 8) INDIRECT (ram, 0x4eb2b8, 8) , (const, 0x6c, 4), (ram, 0x4eb2b8, 8) MULTIEQUAL (ram, 0x4eb2b8, 8) , (unique, 0x10000289, 8)]
[(stack, 0xffffffffffffefd8, 8) INDIRECT (stack, 0xffffffffffffefd8, 8) , (const, 0x6c, 4), (stack, 0xffffffffffffefd8, 8) MULTIEQUAL (stack, 0xffffffffffffefd8, 8) , (unique, 0x100002ad, 8)]
[(stack, 0xffffffffffffefe0, 8) INDIRECT (stack, 0xffffffffffffefe0, 8) , (const, 0x6c, 4), (stack, 0xffffffffffffefe0, 8) MULTIEQUAL (stack, 0xffffffffffffefe0, 8) , (unique, 0x100002b5, 8)]
[(stack, 0xffffffffffffefe8, 8) INDIRECT (stack, 0xffffffffffffefe8, 8) , (const, 0x6c, 4), (stack, 0xffffffffffffefe8, 8) MULTIEQUAL (stack, 0xffffffffffffefe8, 8) , (unique, 0x100002bd, 8)]
[(stack, 0xffffffffffffeff0, 8) INDIRECT (stack, 0xffffffffffffeff0, 8) , (const, 0x6c, 4), (stack, 0xffffffffffffeff0, 8) MULTIEQUAL (stack, 0xffffffffffffeff0, 8) , (unique, 0x100002c5, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x6c, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0x100002cd, 8)]
[(ram, 0x4ec4b0, 8) INDIRECT (ram, 0x4ec4b0, 8) , (const, 0x6c, 4), (ram, 0x4ec4b0, 8) MULTIEQUAL (ram, 0x4ec4b0, 8) , (ram, 0x4ec4b0, 8)]
[(ram, 0x4ec4c8, 8) INDIRECT (ram, 0x4ec4c8, 8) , (const, 0x6c, 4), (ram, 0x4ec4c8, 8) MULTIEQUAL (ram, 0x4ec4c8, 8) , (ram, 0x4ec4c8, 8)]
[ ---  CALL (ram, 0x164dc0, 8) , (register, 0x38, 8) , (unique, 0x100002e8, 8), (unique, 0x100002e8, 8) COPY (const, 0x2b4cd7, 8)]
[ ---  CBRANCH (ram, 0x190e96, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4f08f8, 4) , (const, 0x0, 4), (ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x6c, 4), (ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (unique, 0x10000291, 4)]
[ ---  CBRANCH (const, 0x5, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (stack, 0xffffffffffffee20, 8)]
[(ram, 0x2bc050, 8) INDIRECT (ram, 0x2bc050, 8) , (const, 0x56b, 4)]
[(ram, 0x2bc058, 8) INDIRECT (ram, 0x2bc058, 8) , (const, 0x56b, 4)]
[(ram, 0x4eb2a8, 4) INDIRECT (ram, 0x4eb2a8, 4) , (const, 0x56b, 4)]
[(ram, 0x4eb2b8, 8) INDIRECT (ram, 0x4eb2b8, 8) , (const, 0x56b, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x56b, 4)]
[(ram, 0x4ec4b0, 8) INDIRECT (ram, 0x4ec4b0, 8) , (const, 0x56b, 4)]
[(ram, 0x4ec4c8, 8) INDIRECT (ram, 0x4ec4c8, 8) , (const, 0x56b, 4)]
[ ---  STORE (const, 0x1b1, 4) , (stack, 0xffffffffffffee20, 8) , (const, 0x1, 4)]
[ ---  CALLOTHER (const, 0x11, 4)]
[ ---  CBRANCH (const, 0x5, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbc80, 4) , (const, 0x0, 4), (unique, 0xbc80, 4) LOAD (const, 0x1b1, 4) , (stack, 0xffffffffffffee20, 8)]
[(ram, 0x2bc050, 8) INDIRECT (ram, 0x2bc050, 8) , (const, 0x99, 4)]
[(ram, 0x2bc058, 8) INDIRECT (ram, 0x2bc058, 8) , (const, 0x99, 4)]
[(ram, 0x4eb2a8, 4) INDIRECT (ram, 0x4eb2a8, 4) , (const, 0x99, 4)]
[(ram, 0x4eb2b8, 8) INDIRECT (ram, 0x4eb2b8, 8) , (const, 0x99, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x99, 4)]
[(ram, 0x4ec4b0, 8) INDIRECT (ram, 0x4ec4b0, 8) , (const, 0x99, 4)]
[(ram, 0x4ec4c8, 8) INDIRECT (ram, 0x4ec4c8, 8) , (const, 0x99, 4)]
[ ---  STORE (const, 0x1b1, 4) , (stack, 0xffffffffffffee20, 8) , (const, 0x1, 4)]
[ ---  BRANCH (ram, 0x190eb1, 1)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x54e, 4)]
[(ram, 0x2bc050, 8) INDIRECT (ram, 0x2bc050, 8) , (const, 0x54e, 4)]
[(ram, 0x2bc058, 8) INDIRECT (ram, 0x2bc058, 8) , (const, 0x54e, 4)]
[(ram, 0x4eb2a8, 4) INDIRECT (ram, 0x4eb2a8, 4) , (const, 0x54e, 4)]
[(ram, 0x4eb2b8, 8) INDIRECT (ram, 0x4eb2b8, 8) , (const, 0x54e, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x54e, 4)]
[(stack, 0xffffffffffffefd8, 8) INDIRECT (stack, 0xffffffffffffefd8, 8) , (const, 0x54e, 4)]
[(stack, 0xffffffffffffefe0, 8) INDIRECT (stack, 0xffffffffffffefe0, 8) , (const, 0x54e, 4)]
[(stack, 0xffffffffffffefe8, 8) INDIRECT (stack, 0xffffffffffffefe8, 8) , (const, 0x54e, 4)]
[(stack, 0xffffffffffffeff0, 8) INDIRECT (stack, 0xffffffffffffeff0, 8) , (const, 0x54e, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x54e, 4)]
[(ram, 0x4ec4b0, 8) INDIRECT (ram, 0x4ec4b0, 8) , (const, 0x54e, 4)]
[(ram, 0x4ec4c8, 8) INDIRECT (ram, 0x4ec4c8, 8) , (const, 0x54e, 4)]
[ ---  CALL (ram, 0x230690, 8) , (stack, 0xffffffffffffee20, 8)]
[(ram, 0x4ec4c8, 8) MULTIEQUAL (ram, 0x4ec4c8, 8) , (ram, 0x4ec4c8, 8) , (ram, 0x4ec4c8, 8)]
[(ram, 0x4ec4b0, 8) MULTIEQUAL (ram, 0x4ec4b0, 8) , (ram, 0x4ec4b0, 8) , (ram, 0x4ec4b0, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffeff0, 8) MULTIEQUAL (stack, 0xffffffffffffeff0, 8) , (stack, 0xffffffffffffeff0, 8) , (stack, 0xffffffffffffeff0, 8)]
[(stack, 0xffffffffffffefe8, 8) MULTIEQUAL (stack, 0xffffffffffffefe8, 8) , (stack, 0xffffffffffffefe8, 8) , (stack, 0xffffffffffffefe8, 8)]
[(stack, 0xffffffffffffefe0, 8) MULTIEQUAL (stack, 0xffffffffffffefe0, 8) , (stack, 0xffffffffffffefe0, 8) , (stack, 0xffffffffffffefe0, 8)]
[(stack, 0xffffffffffffefd8, 8) MULTIEQUAL (stack, 0xffffffffffffefd8, 8) , (stack, 0xffffffffffffefd8, 8) , (stack, 0xffffffffffffefd8, 8)]
[(ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(ram, 0x4eb2b8, 8) MULTIEQUAL (ram, 0x4eb2b8, 8) , (ram, 0x4eb2b8, 8) , (ram, 0x4eb2b8, 8)]
[(ram, 0x4eb2a8, 4) MULTIEQUAL (ram, 0x4eb2a8, 4) , (ram, 0x4eb2a8, 4) , (ram, 0x4eb2a8, 4)]
[(ram, 0x2bc058, 8) MULTIEQUAL (ram, 0x2bc058, 8) , (ram, 0x2bc058, 8) , (ram, 0x2bc058, 8)]
[(ram, 0x2bc050, 8) MULTIEQUAL (ram, 0x2bc050, 8) , (ram, 0x2bc050, 8) , (ram, 0x2bc050, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x3100, 8) CAST (unique, 0x10000504, 8), (unique, 0x10000504, 8) PTRADD (stack, 0xffffffffffffee20, 8) , (const, 0x4, 8) , (const, 0x4, 8)]
[(register, 0x88, 8) COPY (const, 0x0, 8)]
[(register, 0x90, 8) COPY (const, 0x0, 8)]
[(unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffefd8, 8)]
[(unique, 0x100004a4, 8) COPY (unique, 0x3c80, 8)]
[(register, 0x90, 8) MULTIEQUAL (register, 0x90, 8) , (register, 0x90, 8)]
[(register, 0x88, 8) MULTIEQUAL (register, 0x88, 8) , (register, 0x88, 8)]
[(register, 0x8, 8) MULTIEQUAL (unique, 0x100004a4, 8) , (unique, 0x100004ac, 8)]
[ ---  CBRANCH (ram, 0x1911d0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0x38, 8), (register, 0x38, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0x38, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (const, 0x0, 8), (unique, 0x3100, 8) PTRADD (register, 0x8, 8) , (const, 0x3, 8) , (const, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (const, 0x0, 8), (unique, 0x3100, 8) PTRADD (register, 0x8, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[(register, 0x10, 8) COPY (const, 0x0, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x8, 8) , (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x190f19, 1)]
[(register, 0x10, 8) COPY (const, 0x0, 8)]
[(register, 0x30, 8) INT_AND (unique, 0xbd80, 8) , (const, 0xfffffffffffffff8, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000050c, 8), (unique, 0x1000050c, 8) INT_ADD (unique, 0xbd80, 8) , (const, 0x8, 8)]
[(register, 0x10, 8) INT_ADD (register, 0x10, 8) , (const, 0x1, 8), (register, 0x10, 8) MULTIEQUAL (register, 0x10, 8) , (register, 0x10, 8)]
[ ---  CBRANCH (ram, 0x190ef0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000514, 8), (unique, 0x10000514, 8) INT_ADD (register, 0x0, 8) , (const, 0x10, 8), (register, 0x0, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8)]
[(register, 0x88, 8) INT_ADD (register, 0x88, 8) , (register, 0x10, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (register, 0x30, 8), (unique, 0x3100, 8) PTRADD (register, 0x8, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (register, 0x10, 8), (unique, 0x3100, 8) PTRADD (register, 0x8, 8) , (const, 0x3, 8) , (const, 0x8, 8)]
[(register, 0x90, 8) INT_ADD (register, 0x90, 8) , (register, 0x0, 8), (register, 0x0, 8) INT_MULT (register, 0x30, 8) , (register, 0x10, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x8, 8) , (unique, 0x3100, 8), (unique, 0x3100, 8) INT_SUB (register, 0x30, 8) , (const, 0xf, 8)]
[(register, 0x90, 8) MULTIEQUAL (register, 0x90, 8) , (register, 0x90, 8)]
[(register, 0x88, 8) MULTIEQUAL (register, 0x88, 8) , (register, 0x88, 8)]
[(register, 0x38, 8) PTRADD (register, 0x38, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (register, 0x10, 8), (unique, 0x3100, 8) PTRADD (register, 0x8, 8) , (const, 0x2, 8) , (const, 0x8, 8), (register, 0x10, 8) INT_MULT (register, 0x10, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x8, 8) , (const, 0x1, 8) , (const, 0x8, 8), (register, 0x10, 8) MULTIEQUAL (register, 0x10, 8) , (register, 0x10, 8)]
[(unique, 0x100004ac, 8) COPY (register, 0x8, 8), (register, 0x8, 8) PTRADD (register, 0x8, 8) , (const, 0x4, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x190ed0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x8, 8) , (unique, 0x3200, 8), (register, 0x8, 8) PTRADD (register, 0x8, 8) , (const, 0x4, 8) , (const, 0x8, 8)]
[(register, 0x90, 8) COPY (const, 0x0, 8)]
[(unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffefd8, 8)]
[(unique, 0x3200, 8) PTRSUB (register, 0x20, 8) , (const, 0xffffffffffffffb8, 8)]
[(unique, 0x3100, 8) PTRADD (stack, 0xffffffffffffee20, 8) , (const, 0x18, 8) , (const, 0x4, 8)]
[(register, 0x18, 8) COPY (const, 0x0, 8)]
[(register, 0x90, 8) MULTIEQUAL (register, 0x90, 8) , (register, 0xb0, 8)]
[(register, 0x18, 8) MULTIEQUAL (register, 0x18, 8) , (register, 0x18, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x80, 8) , (ram, 0x2bc050, 8), (register, 0x80, 8) MULTIEQUAL (unique, 0x3200, 8) , (register, 0x80, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000244, 8) , (ram, 0x2bc058, 8), (unique, 0x10000244, 8) PTRADD (register, 0x80, 8) , (const, 0x1, 8) , (const, 0x8, 8), (register, 0x80, 8) MULTIEQUAL (unique, 0x3200, 8) , (register, 0x80, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (const, 0x0, 16), (unique, 0x3100, 8) CAST (unique, 0x10000524, 8), (unique, 0x10000524, 8) PTRADD (register, 0x80, 8) , (const, 0x2, 8) , (const, 0x8, 8), (register, 0x80, 8) MULTIEQUAL (unique, 0x3200, 8) , (register, 0x80, 8)]
[ ---  CBRANCH (ram, 0x1911c0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x1000051c, 8), (unique, 0x1000051c, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x88, 8) , (const, 0x4, 8) , (const, 0x4, 8), (register, 0x88, 8) MULTIEQUAL (unique, 0x3100, 8) , (register, 0x88, 8)]
[ ---  CBRANCH (ram, 0x1911c0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (register, 0x88, 8)]
[(register, 0x8, 8) COPY (const, 0x0, 8)]
[(register, 0x30, 8) COPY (const, 0xffffffffffffffff, 8)]
[(register, 0x38, 8) COPY (const, 0x0, 8)]
[(unique, 0x100004b4, 8) COPY (register, 0x28, 8), (register, 0x28, 8) COPY (const, 0x1, 8)]
[ ---  BRANCH (ram, 0x190fa3, 1)]
[(register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8)]
[(register, 0x28, 8) COPY (unique, 0x100004c4, 8), (unique, 0x100004c4, 8) MULTIEQUAL (unique, 0x100004b4, 8) , (unique, 0x100004bc, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000534, 8), (unique, 0x10000534, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x4, 8) , (const, 0x4, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8)]
[(register, 0x38, 8) INT_ADD (register, 0x38, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x1000052c, 8), (unique, 0x1000052c, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x2, 8) , (const, 0x4, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (register, 0x38, 8) MULTIEQUAL (register, 0x38, 8) , (register, 0x38, 8)]
[(unique, 0x100004cc, 8) COPY (register, 0x30, 8), (register, 0x30, 8) MULTIEQUAL (register, 0x30, 8) , (register, 0x30, 8)]
[ ---  CBRANCH (ram, 0x190fb5, 1) , (unique, 0xc800, 1), (unique, 0xc800, 1) INT_LESS (unique, 0xbd80, 8) , (register, 0x30, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x1000052c, 8), (unique, 0x1000052c, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x10, 8) , (const, 0x2, 8) , (const, 0x4, 8), (register, 0x10, 8) MULTIEQUAL (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (register, 0x30, 8) MULTIEQUAL (register, 0x30, 8) , (register, 0x30, 8)]
[(unique, 0x100004d4, 8) COPY (unique, 0xbd80, 8)]
[(register, 0x30, 8) MULTIEQUAL (unique, 0x100004cc, 8) , (unique, 0x100004d4, 8)]
[(unique, 0x10000494, 8) COPY (register, 0x8, 8)]
[ ---  CBRANCH (ram, 0x190fbc, 1) , (register, 0x200, 1), (register, 0x200, 1) INT_LESS (register, 0x8, 8) , (unique, 0xbd80, 8)]
[(unique, 0x1000049c, 8) COPY (unique, 0xbd80, 8)]
[(register, 0x8, 8) MULTIEQUAL (unique, 0x10000494, 8) , (unique, 0x1000049c, 8)]
[(unique, 0x100004bc, 8) COPY (unique, 0x3100, 8), (unique, 0x3100, 8) INT_ADD (register, 0x28, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x190fa0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (register, 0x88, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x80, 8) , (register, 0x30, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x10000234, 8) , (register, 0x8, 8), (unique, 0x10000234, 8) PTRADD (register, 0x80, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x3100, 8) , (register, 0x38, 8), (unique, 0x3100, 8) PTRADD (register, 0x80, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (unique, 0x1000023c, 8) , (register, 0x28, 8), (unique, 0x1000023c, 8) PTRADD (register, 0x80, 8) , (const, 0x3, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x1911c0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x80, 8) , (const, 0x3, 8) , (const, 0x8, 8)]
[ ---  STORE (const, 0x1b1, 4) , (register, 0x80, 8) , (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x191000, 1)]
[(register, 0x18, 8) INT_ADD (register, 0x18, 8) , (unique, 0xbd80, 8)]
[(register, 0x18, 8) MULTIEQUAL (register, 0x18, 8) , (register, 0x18, 8)]
[(register, 0x88, 8) PTRADD (register, 0x88, 8) , (const, 0x4, 8) , (const, 0x4, 8)]
[(register, 0xb0, 8) INT_ADD (unique, 0xbd80, 8) , (register, 0x90, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0x80, 8) , (const, 0x2, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x190f60, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0x3200, 8) , (register, 0x80, 8), (register, 0x80, 8) PTRADD (register, 0x80, 8) , (const, 0x4, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x1911ee, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffee20, 8) , (unique, 0x10000330, 8), (unique, 0x10000330, 8) PTRSUB (const, 0x0, 8) , (const, 0x4ebc40, 8)]
[(stack, 0xffffffffffffee90, 8) COPY (const, 0x0, 8)]
[(stack, 0xffffffffffffee88, 8) COPY (const, 0x0, 8)]
[(stack, 0xffffffffffffee18, 8) COPY (const, 0x0, 8)]
[ ---  BRANCH (ram, 0x191070, 1)]
[(register, 0x30, 8) COPY (const, 0x0, 8)]
[(register, 0x8, 8) COPY (const, 0x0, 8)]
[(register, 0x10, 8) COPY (const, 0x0, 8)]
[(register, 0x0, 8) INT_AND (unique, 0xbd80, 8) , (const, 0xfffffffffc000000, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x1000053c, 8), (unique, 0x1000053c, 8) CAST (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (stack, 0xffffffffffffee20, 8) , (const, 0x18, 8) , (const, 0x4, 8)]
[(register, 0x10, 8) INT_ADD (register, 0x10, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000544, 8), (unique, 0x10000544, 8) INT_ADD (register, 0x0, 8) , (const, 0x10, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (unique, 0xbd80, 8), (register, 0x10, 8) MULTIEQUAL (register, 0x10, 8) , (register, 0x10, 8)]
[(register, 0x8, 8) INT_ADD (register, 0x8, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x1000054c, 8), (unique, 0x1000054c, 8) INT_ADD (register, 0x0, 8) , (const, 0x18, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (unique, 0xbd80, 8), (register, 0x8, 8) MULTIEQUAL (register, 0x8, 8) , (register, 0x8, 8)]
[(register, 0x30, 8) INT_ADD (register, 0x30, 8) , (const, 0x1, 8), (register, 0x30, 8) MULTIEQUAL (register, 0x30, 8) , (register, 0x30, 8)]
[ ---  CBRANCH (ram, 0x191048, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (const, 0x0, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) CAST (unique, 0x10000554, 8), (unique, 0x10000554, 8) INT_ADD (register, 0x0, 8) , (const, 0x8, 8), (register, 0x0, 8) MULTIEQUAL (register, 0x0, 8) , (unique, 0xbd80, 8)]
[(stack, 0xffffffffffffee90, 8) MULTIEQUAL (stack, 0xffffffffffffee90, 8) , (register, 0x30, 8)]
[(stack, 0xffffffffffffee88, 8) MULTIEQUAL (stack, 0xffffffffffffee88, 8) , (register, 0x8, 8)]
[(stack, 0xffffffffffffee18, 8) MULTIEQUAL (stack, 0xffffffffffffee18, 8) , (register, 0x10, 8)]
[ ---  CBRANCH (ram, 0x191080, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (ram, 0x4f08f8, 4) , (const, 0x0, 4)]
[(ram, 0x2bc050, 8) INDIRECT (ram, 0x2bc050, 8) , (const, 0x516, 4)]
[(ram, 0x2bc058, 8) INDIRECT (ram, 0x2bc058, 8) , (const, 0x516, 4)]
[(ram, 0x4eb2a8, 4) INDIRECT (ram, 0x4eb2a8, 4) , (const, 0x516, 4)]
[(ram, 0x4eb2b8, 8) INDIRECT (ram, 0x4eb2b8, 8) , (const, 0x516, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x516, 4)]
[(ram, 0x4ec4b0, 8) INDIRECT (ram, 0x4ec4b0, 8) , (const, 0x516, 4)]
[(ram, 0x4ec4c8, 8) INDIRECT (ram, 0x4ec4c8, 8) , (const, 0x516, 4)]
[ ---  STORE (const, 0x1b1, 4) , (stack, 0xffffffffffffee20, 8) , (unique, 0xbd00, 4), (unique, 0xbd00, 4) INT_ADD (unique, 0xbd00, 4) , (const, 0xffffffff, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (stack, 0xffffffffffffee20, 8)]
[(unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (stack, 0xffffffffffffee20, 8)]
[ ---  CALLOTHER (const, 0x11, 4)]
[(ram, 0x2bc050, 8) INDIRECT (ram, 0x2bc050, 8) , (const, 0x2b1, 4)]
[(ram, 0x2bc058, 8) INDIRECT (ram, 0x2bc058, 8) , (const, 0x2b1, 4)]
[(ram, 0x4eb2a8, 4) INDIRECT (ram, 0x4eb2a8, 4) , (const, 0x2b1, 4)]
[(ram, 0x4eb2b8, 8) INDIRECT (ram, 0x4eb2b8, 8) , (const, 0x2b1, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x2b1, 4)]
[(ram, 0x4ec4b0, 8) INDIRECT (ram, 0x4ec4b0, 8) , (const, 0x2b1, 4)]
[(ram, 0x4ec4c8, 8) INDIRECT (ram, 0x4ec4c8, 8) , (const, 0x2b1, 4)]
[ ---  STORE (const, 0x1b1, 4) , (stack, 0xffffffffffffee20, 8) , (unique, 0xbd00, 4), (unique, 0xbd00, 4) INT_ADD (unique, 0xbd00, 4) , (const, 0xffffffff, 4), (unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (stack, 0xffffffffffffee20, 8)]
[(unique, 0xbd00, 4) LOAD (const, 0x1b1, 4) , (stack, 0xffffffffffffee20, 8)]
[(unique, 0x10000459, 8) MULTIEQUAL (ram, 0x2bc050, 8) , (ram, 0x2bc050, 8)]
[(unique, 0x10000461, 8) MULTIEQUAL (ram, 0x2bc058, 8) , (ram, 0x2bc058, 8)]
[(unique, 0x10000469, 4) MULTIEQUAL (ram, 0x4eb2a8, 4) , (ram, 0x4eb2a8, 4)]
[(unique, 0x1000046d, 8) MULTIEQUAL (ram, 0x4eb2b8, 8) , (ram, 0x4eb2b8, 8)]
[(unique, 0x10000475, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(unique, 0x10000479, 8) MULTIEQUAL (ram, 0x4ec4b0, 8) , (ram, 0x4ec4b0, 8)]
[(unique, 0x10000481, 8) MULTIEQUAL (ram, 0x4ec4c8, 8) , (ram, 0x4ec4c8, 8)]
[ ---  CBRANCH (ram, 0x19109a, 1) , (unique, 0x10000458, 1), (unique, 0x10000458, 1) INT_NOTEQUAL (unique, 0xbd00, 4) , (const, 0x0, 4), (unique, 0xbd00, 4) MULTIEQUAL (unique, 0xbd00, 4) , (unique, 0xbd00, 4)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x508, 4)]
[(ram, 0x2bc050, 8) INDIRECT (unique, 0x10000459, 8) , (const, 0x508, 4)]
[(ram, 0x2bc058, 8) INDIRECT (unique, 0x10000461, 8) , (const, 0x508, 4)]
[(ram, 0x4eb2a8, 4) INDIRECT (unique, 0x10000469, 4) , (const, 0x508, 4)]
[(ram, 0x4eb2b8, 8) INDIRECT (unique, 0x1000046d, 8) , (const, 0x508, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (unique, 0x10000475, 4) , (const, 0x508, 4)]
[(stack, 0xffffffffffffefd8, 8) INDIRECT (stack, 0xffffffffffffefd8, 8) , (const, 0x508, 4)]
[(stack, 0xffffffffffffefe0, 8) INDIRECT (stack, 0xffffffffffffefe0, 8) , (const, 0x508, 4)]
[(stack, 0xffffffffffffefe8, 8) INDIRECT (stack, 0xffffffffffffefe8, 8) , (const, 0x508, 4)]
[(stack, 0xffffffffffffeff0, 8) INDIRECT (stack, 0xffffffffffffeff0, 8) , (const, 0x508, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x508, 4)]
[(ram, 0x4ec4b0, 8) INDIRECT (unique, 0x10000479, 8) , (const, 0x508, 4)]
[(ram, 0x4ec4c8, 8) INDIRECT (unique, 0x10000481, 8) , (const, 0x508, 4)]
[ ---  CALL (ram, 0x2306c0, 8) , (stack, 0xffffffffffffee20, 8)]
[(ram, 0x4ec4c8, 8) MULTIEQUAL (ram, 0x4ec4c8, 8) , (unique, 0x10000481, 8)]
[(ram, 0x4ec4b0, 8) MULTIEQUAL (ram, 0x4ec4b0, 8) , (unique, 0x10000479, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffeff0, 8) MULTIEQUAL (stack, 0xffffffffffffeff0, 8) , (stack, 0xffffffffffffeff0, 8)]
[(stack, 0xffffffffffffefe8, 8) MULTIEQUAL (stack, 0xffffffffffffefe8, 8) , (stack, 0xffffffffffffefe8, 8)]
[(stack, 0xffffffffffffefe0, 8) MULTIEQUAL (stack, 0xffffffffffffefe0, 8) , (stack, 0xffffffffffffefe0, 8)]
[(stack, 0xffffffffffffefd8, 8) MULTIEQUAL (stack, 0xffffffffffffefd8, 8) , (stack, 0xffffffffffffefd8, 8)]
[(ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (unique, 0x10000475, 4)]
[(ram, 0x4eb2b8, 8) MULTIEQUAL (ram, 0x4eb2b8, 8) , (unique, 0x1000046d, 8)]
[(ram, 0x4eb2a8, 4) MULTIEQUAL (ram, 0x4eb2a8, 4) , (unique, 0x10000469, 4)]
[(ram, 0x2bc058, 8) MULTIEQUAL (ram, 0x2bc058, 8) , (unique, 0x10000461, 8)]
[(ram, 0x2bc050, 8) MULTIEQUAL (ram, 0x2bc050, 8) , (unique, 0x10000459, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0xbd80, 8) INT_ADD (stack, 0xffffffffffffee58, 8) , (register, 0x18, 8)]
[(register, 0x28, 8) COPY (const, 0x0, 8)]
[(unique, 0xbd80, 8) INT_ADD (stack, 0xffffffffffffee48, 8) , (register, 0x88, 8)]
[(unique, 0xbd80, 8) INT_ADD (stack, 0xffffffffffffee60, 8) , (register, 0xb0, 8)]
[(unique, 0xbd80, 8) INT_ADD (stack, 0xffffffffffffee50, 8) , (register, 0x90, 8)]
[(unique, 0x100004dc, 8) COPY (unique, 0x3c80, 8)]
[(ram, 0x4ec4c8, 8) MULTIEQUAL (ram, 0x4ec4c8, 8) , (ram, 0x4ec4c8, 8)]
[(ram, 0x4ec4b0, 8) MULTIEQUAL (ram, 0x4ec4b0, 8) , (ram, 0x4ec4b0, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffeff0, 8) MULTIEQUAL (stack, 0xffffffffffffeff0, 8) , (stack, 0xffffffffffffeff0, 8)]
[(stack, 0xffffffffffffefe8, 8) MULTIEQUAL (stack, 0xffffffffffffefe8, 8) , (stack, 0xffffffffffffefe8, 8)]
[(stack, 0xffffffffffffefe0, 8) MULTIEQUAL (stack, 0xffffffffffffefe0, 8) , (stack, 0xffffffffffffefe0, 8)]
[(stack, 0xffffffffffffefd8, 8) MULTIEQUAL (stack, 0xffffffffffffefd8, 8) , (stack, 0xffffffffffffefd8, 8)]
[(ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(ram, 0x4eb2b8, 8) MULTIEQUAL (ram, 0x4eb2b8, 8) , (ram, 0x4eb2b8, 8)]
[(ram, 0x4eb2a8, 4) MULTIEQUAL (ram, 0x4eb2a8, 4) , (ram, 0x4eb2a8, 4)]
[(ram, 0x2bc058, 8) MULTIEQUAL (ram, 0x2bc058, 8) , (ram, 0x2bc058, 8)]
[(ram, 0x2bc050, 8) MULTIEQUAL (ram, 0x2bc050, 8) , (ram, 0x2bc050, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xa8, 8) , (const, 0x3, 8) , (const, 0x8, 8), (register, 0xa8, 8) MULTIEQUAL (unique, 0x100004dc, 8) , (register, 0xa8, 8)]
[ ---  CBRANCH (ram, 0x1910e8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x28, 8) , (const, 0xa, 8), (register, 0x28, 8) MULTIEQUAL (register, 0x28, 8) , (register, 0x28, 8)]
[ ---  CBRANCH (ram, 0x1910e8, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (unique, 0xbd80, 8) , (const, 0x0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x341, 4)]
[(ram, 0x2bc050, 8) INDIRECT (ram, 0x2bc050, 8) , (const, 0x341, 4)]
[(ram, 0x2bc058, 8) INDIRECT (ram, 0x2bc058, 8) , (const, 0x341, 4)]
[(ram, 0x4eb2a8, 4) INDIRECT (ram, 0x4eb2a8, 4) , (const, 0x341, 4)]
[(ram, 0x4eb2b8, 8) INDIRECT (ram, 0x4eb2b8, 8) , (const, 0x341, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x341, 4)]
[(stack, 0xffffffffffffefd8, 8) INDIRECT (stack, 0xffffffffffffefd8, 8) , (const, 0x341, 4)]
[(stack, 0xffffffffffffefe0, 8) INDIRECT (stack, 0xffffffffffffefe0, 8) , (const, 0x341, 4)]
[(stack, 0xffffffffffffefe8, 8) INDIRECT (stack, 0xffffffffffffefe8, 8) , (const, 0x341, 4)]
[(stack, 0xffffffffffffeff0, 8) INDIRECT (stack, 0xffffffffffffeff0, 8) , (const, 0x341, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x341, 4)]
[(ram, 0x4ec4b0, 8) INDIRECT (ram, 0x4ec4b0, 8) , (const, 0x341, 4)]
[(ram, 0x4ec4c8, 8) INDIRECT (ram, 0x4ec4c8, 8) , (const, 0x341, 4)]
[ ---  CALL (ram, 0x164dc0, 8) , (register, 0x38, 8) , (unique, 0x10000300, 8) , (unique, 0xbd80, 8) , (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (unique, 0x10000300, 8) COPY (const, 0x2b8450, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (register, 0xa8, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xa8, 8) , (const, 0x2, 8) , (const, 0x8, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3100, 8), (unique, 0x3100, 8) PTRADD (register, 0xa8, 8) , (const, 0x1, 8) , (const, 0x8, 8)]
[(ram, 0x4ec4c8, 8) MULTIEQUAL (ram, 0x4ec4c8, 8) , (ram, 0x4ec4c8, 8) , (ram, 0x4ec4c8, 8)]
[(ram, 0x4ec4b0, 8) MULTIEQUAL (ram, 0x4ec4b0, 8) , (ram, 0x4ec4b0, 8) , (ram, 0x4ec4b0, 8)]
[(stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(stack, 0xffffffffffffeff0, 8) MULTIEQUAL (stack, 0xffffffffffffeff0, 8) , (stack, 0xffffffffffffeff0, 8) , (stack, 0xffffffffffffeff0, 8)]
[(stack, 0xffffffffffffefe8, 8) MULTIEQUAL (stack, 0xffffffffffffefe8, 8) , (stack, 0xffffffffffffefe8, 8) , (stack, 0xffffffffffffefe8, 8)]
[(stack, 0xffffffffffffefe0, 8) MULTIEQUAL (stack, 0xffffffffffffefe0, 8) , (stack, 0xffffffffffffefe0, 8) , (stack, 0xffffffffffffefe0, 8)]
[(stack, 0xffffffffffffefd8, 8) MULTIEQUAL (stack, 0xffffffffffffefd8, 8) , (stack, 0xffffffffffffefd8, 8) , (stack, 0xffffffffffffefd8, 8)]
[(ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(ram, 0x4eb2b8, 8) MULTIEQUAL (ram, 0x4eb2b8, 8) , (ram, 0x4eb2b8, 8) , (ram, 0x4eb2b8, 8)]
[(ram, 0x4eb2a8, 4) MULTIEQUAL (ram, 0x4eb2a8, 4) , (ram, 0x4eb2a8, 4) , (ram, 0x4eb2a8, 4)]
[(ram, 0x2bc058, 8) MULTIEQUAL (ram, 0x2bc058, 8) , (ram, 0x2bc058, 8) , (ram, 0x2bc058, 8)]
[(ram, 0x2bc050, 8) MULTIEQUAL (ram, 0x2bc050, 8) , (ram, 0x2bc050, 8) , (ram, 0x2bc050, 8)]
[(register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8) , (register, 0x110, 8)]
[(register, 0xa8, 8) PTRADD (register, 0xa8, 8) , (const, 0x4, 8) , (const, 0x8, 8)]
[ ---  CBRANCH (ram, 0x1910c0, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (register, 0x28, 8) , (const, 0x89, 8), (register, 0x28, 8) INT_ADD (register, 0x28, 8) , (const, 0x1, 8)]
[ ---  CBRANCH (ram, 0x1912d9, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_NOTEQUAL (stack, 0xffffffffffffeff0, 8) , (const, 0x0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x4fa, 4)]
[(ram, 0x2bc050, 8) INDIRECT (ram, 0x2bc050, 8) , (const, 0x4fa, 4)]
[(ram, 0x2bc058, 8) INDIRECT (ram, 0x2bc058, 8) , (const, 0x4fa, 4)]
[(ram, 0x4eb2a8, 4) INDIRECT (ram, 0x4eb2a8, 4) , (const, 0x4fa, 4)]
[(ram, 0x4eb2b8, 8) INDIRECT (ram, 0x4eb2b8, 8) , (const, 0x4fa, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x4fa, 4)]
[(stack, 0xffffffffffffefd8, 8) INDIRECT (stack, 0xffffffffffffefd8, 8) , (const, 0x4fa, 4)]
[(stack, 0xffffffffffffefe0, 8) INDIRECT (stack, 0xffffffffffffefe0, 8) , (const, 0x4fa, 4)]
[(stack, 0xffffffffffffefe8, 8) INDIRECT (stack, 0xffffffffffffefe8, 8) , (const, 0x4fa, 4)]
[(stack, 0xffffffffffffeff0, 8) INDIRECT (stack, 0xffffffffffffeff0, 8) , (const, 0x4fa, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x4fa, 4)]
[(ram, 0x4ec4b0, 8) INDIRECT (ram, 0x4ec4b0, 8) , (const, 0x4fa, 4)]
[(ram, 0x4ec4c8, 8) INDIRECT (ram, 0x4ec4c8, 8) , (const, 0x4fa, 4)]
[ ---  CALL (ram, 0x164dc0, 8) , (register, 0x38, 8) , (unique, 0x10000308, 8) , (stack, 0xffffffffffffefd8, 8) , (stack, 0xffffffffffffefe0, 8) , (stack, 0xffffffffffffefe8, 8), (unique, 0x10000308, 8) COPY (const, 0x2b8498, 8)]
[ ---  BRANCH (ram, 0x19110a, 1)]
[(unique, 0xbd80, 8) INT_ADD (stack, 0xffffffffffffee68, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x1000055c, 8), (unique, 0x1000055c, 8) CAST (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (stack, 0xffffffffffffee20, 8) , (const, 0x222, 8) , (const, 0x4, 8)]
[(unique, 0xbd80, 8) INT_ADD (stack, 0xffffffffffffee70, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000564, 8), (unique, 0x10000564, 8) CAST (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (stack, 0xffffffffffffee20, 8) , (const, 0x224, 8) , (const, 0x4, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x3b6, 4), (register, 0x110, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(ram, 0x2bc050, 8) INDIRECT (ram, 0x2bc050, 8) , (const, 0x3b6, 4), (ram, 0x2bc050, 8) MULTIEQUAL (ram, 0x2bc050, 8) , (ram, 0x2bc050, 8)]
[(ram, 0x2bc058, 8) INDIRECT (ram, 0x2bc058, 8) , (const, 0x3b6, 4), (ram, 0x2bc058, 8) MULTIEQUAL (ram, 0x2bc058, 8) , (ram, 0x2bc058, 8)]
[(ram, 0x4eb2a8, 4) INDIRECT (ram, 0x4eb2a8, 4) , (const, 0x3b6, 4), (ram, 0x4eb2a8, 4) MULTIEQUAL (ram, 0x4eb2a8, 4) , (ram, 0x4eb2a8, 4)]
[(ram, 0x4eb2b8, 8) INDIRECT (ram, 0x4eb2b8, 8) , (const, 0x3b6, 4), (ram, 0x4eb2b8, 8) MULTIEQUAL (ram, 0x4eb2b8, 8) , (ram, 0x4eb2b8, 8)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x3b6, 4), (ram, 0x4f08f8, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(stack, 0xffffffffffffefd8, 8) INDIRECT (stack, 0xffffffffffffefd8, 8) , (const, 0x3b6, 4), (stack, 0xffffffffffffefd8, 8) MULTIEQUAL (stack, 0xffffffffffffefd8, 8) , (stack, 0xffffffffffffefd8, 8)]
[(stack, 0xffffffffffffefe0, 8) INDIRECT (stack, 0xffffffffffffefe0, 8) , (const, 0x3b6, 4), (stack, 0xffffffffffffefe0, 8) MULTIEQUAL (stack, 0xffffffffffffefe0, 8) , (stack, 0xffffffffffffefe0, 8)]
[(stack, 0xffffffffffffefe8, 8) INDIRECT (stack, 0xffffffffffffefe8, 8) , (const, 0x3b6, 4), (stack, 0xffffffffffffefe8, 8) MULTIEQUAL (stack, 0xffffffffffffefe8, 8) , (stack, 0xffffffffffffefe8, 8)]
[(stack, 0xffffffffffffeff0, 8) INDIRECT (stack, 0xffffffffffffeff0, 8) , (const, 0x3b6, 4), (stack, 0xffffffffffffeff0, 8) MULTIEQUAL (stack, 0xffffffffffffeff0, 8) , (stack, 0xffffffffffffeff0, 8)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x3b6, 4), (stack, 0xffffffffffffffc0, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(ram, 0x4ec4b0, 8) INDIRECT (ram, 0x4ec4b0, 8) , (const, 0x3b6, 4), (ram, 0x4ec4b0, 8) MULTIEQUAL (ram, 0x4ec4b0, 8) , (ram, 0x4ec4b0, 8)]
[(ram, 0x4ec4c8, 8) INDIRECT (ram, 0x4ec4c8, 8) , (const, 0x3b6, 4), (ram, 0x4ec4c8, 8) MULTIEQUAL (ram, 0x4ec4c8, 8) , (ram, 0x4ec4c8, 8)]
[ ---  CALL (ram, 0x164dc0, 8) , (register, 0x38, 8) , (unique, 0x10000310, 8) , (register, 0x88, 8) , (register, 0x90, 8) , (register, 0x18, 8) , (register, 0xb0, 8) , (unique, 0xbd80, 8) , (unique, 0xbd80, 8), (unique, 0x10000310, 8) COPY (const, 0x2b84d8, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000564, 8), (unique, 0x10000564, 8) CAST (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (stack, 0xffffffffffffee20, 8) , (const, 0x224, 8) , (const, 0x4, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x1000055c, 8), (unique, 0x1000055c, 8) CAST (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (stack, 0xffffffffffffee20, 8) , (const, 0x222, 8) , (const, 0x4, 8)]
[ ---  CBRANCH (ram, 0x191210, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffee20, 8) , (unique, 0x10000338, 8), (unique, 0x10000338, 8) PTRSUB (const, 0x0, 8) , (const, 0x4ebc40, 8)]
[ ---  CALL (ram, 0x164dc0, 8) , (register, 0x38, 8) , (unique, 0x10000320, 8) , (ram, 0x4ec4c8, 8) , (ram, 0x4ec4c8, 8), (unique, 0x10000320, 8) COPY (const, 0x2b85f0, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x4d0, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x4a6, 4)]
[(ram, 0x2bc050, 8) INDIRECT (ram, 0x2bc050, 8) , (const, 0x4d0, 4), (ram, 0x2bc050, 8) INDIRECT (ram, 0x2bc050, 8) , (const, 0x4a6, 4)]
[(ram, 0x2bc058, 8) INDIRECT (ram, 0x2bc058, 8) , (const, 0x4d0, 4), (ram, 0x2bc058, 8) INDIRECT (ram, 0x2bc058, 8) , (const, 0x4a6, 4)]
[(ram, 0x4eb2a8, 4) INDIRECT (ram, 0x4eb2a8, 4) , (const, 0x4d0, 4), (ram, 0x4eb2a8, 4) INDIRECT (ram, 0x4eb2a8, 4) , (const, 0x4a6, 4)]
[(ram, 0x4eb2b8, 8) INDIRECT (ram, 0x4eb2b8, 8) , (const, 0x4d0, 4), (ram, 0x4eb2b8, 8) INDIRECT (ram, 0x4eb2b8, 8) , (const, 0x4a6, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x4d0, 4), (ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x4a6, 4)]
[(stack, 0xffffffffffffefd8, 8) INDIRECT (stack, 0xffffffffffffefd8, 8) , (const, 0x4d0, 4), (stack, 0xffffffffffffefd8, 8) INDIRECT (stack, 0xffffffffffffefd8, 8) , (const, 0x4a6, 4)]
[(stack, 0xffffffffffffefe0, 8) INDIRECT (stack, 0xffffffffffffefe0, 8) , (const, 0x4d0, 4), (stack, 0xffffffffffffefe0, 8) INDIRECT (stack, 0xffffffffffffefe0, 8) , (const, 0x4a6, 4)]
[(stack, 0xffffffffffffefe8, 8) INDIRECT (stack, 0xffffffffffffefe8, 8) , (const, 0x4d0, 4), (stack, 0xffffffffffffefe8, 8) INDIRECT (stack, 0xffffffffffffefe8, 8) , (const, 0x4a6, 4)]
[(stack, 0xffffffffffffeff0, 8) INDIRECT (stack, 0xffffffffffffeff0, 8) , (const, 0x4d0, 4), (stack, 0xffffffffffffeff0, 8) INDIRECT (stack, 0xffffffffffffeff0, 8) , (const, 0x4a6, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x4d0, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x4a6, 4)]
[(ram, 0x4ec4c8, 8) INDIRECT (ram, 0x4ec4c8, 8) , (const, 0x4d0, 4), (ram, 0x4ec4c8, 8) INDIRECT (ram, 0x4ec4c8, 8) , (const, 0x4a6, 4)]
[ ---  CALL (ram, 0x17f1f0, 8) , (unique, 0x100002f8, 8) , (register, 0x38, 8), (unique, 0x100002f8, 8) COPY (const, 0x2b4cef, 8)]
[(unique, 0x100004e4, 8) COPY (unique, 0x1000056c, 8), (unique, 0x1000056c, 8) CAST (ram, 0x4ec4b0, 8), (ram, 0x4ec4b0, 8) INDIRECT (ram, 0x4ec4b0, 8) , (const, 0x4d0, 4), (ram, 0x4ec4b0, 8) INDIRECT (ram, 0x4ec4b0, 8) , (const, 0x4a6, 4)]
[(unique, 0x100004f4, 8) COPY (unique, 0x1000048c, 8), (unique, 0x1000048c, 8) COPY (ram, 0x4ec4c8, 8), (ram, 0x4ec4c8, 8) INDIRECT (ram, 0x4ec4c8, 8) , (const, 0x4a6, 4)]
[ ---  CALL (ram, 0x164dc0, 8) , (register, 0x38, 8) , (unique, 0x10000318, 8) , (stack, 0xffffffffffffee18, 8) , (stack, 0xffffffffffffee88, 8) , (stack, 0xffffffffffffee90, 8), (unique, 0x10000318, 8) COPY (const, 0x2b8580, 8)]
[(register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x404, 4), (register, 0x110, 8) INDIRECT (register, 0x110, 8) , (const, 0x3dd, 4)]
[(ram, 0x2bc050, 8) INDIRECT (ram, 0x2bc050, 8) , (const, 0x404, 4), (ram, 0x2bc050, 8) INDIRECT (ram, 0x2bc050, 8) , (const, 0x3dd, 4)]
[(ram, 0x2bc058, 8) INDIRECT (ram, 0x2bc058, 8) , (const, 0x404, 4), (ram, 0x2bc058, 8) INDIRECT (ram, 0x2bc058, 8) , (const, 0x3dd, 4)]
[(ram, 0x4eb2a8, 4) INDIRECT (ram, 0x4eb2a8, 4) , (const, 0x404, 4), (ram, 0x4eb2a8, 4) INDIRECT (ram, 0x4eb2a8, 4) , (const, 0x3dd, 4)]
[(ram, 0x4eb2b8, 8) INDIRECT (ram, 0x4eb2b8, 8) , (const, 0x404, 4), (ram, 0x4eb2b8, 8) INDIRECT (ram, 0x4eb2b8, 8) , (const, 0x3dd, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x404, 4), (ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x3dd, 4)]
[(stack, 0xffffffffffffefd8, 8) INDIRECT (stack, 0xffffffffffffefd8, 8) , (const, 0x404, 4), (stack, 0xffffffffffffefd8, 8) INDIRECT (stack, 0xffffffffffffefd8, 8) , (const, 0x3dd, 4)]
[(stack, 0xffffffffffffefe0, 8) INDIRECT (stack, 0xffffffffffffefe0, 8) , (const, 0x404, 4), (stack, 0xffffffffffffefe0, 8) INDIRECT (stack, 0xffffffffffffefe0, 8) , (const, 0x3dd, 4)]
[(stack, 0xffffffffffffefe8, 8) INDIRECT (stack, 0xffffffffffffefe8, 8) , (const, 0x404, 4), (stack, 0xffffffffffffefe8, 8) INDIRECT (stack, 0xffffffffffffefe8, 8) , (const, 0x3dd, 4)]
[(stack, 0xffffffffffffeff0, 8) INDIRECT (stack, 0xffffffffffffeff0, 8) , (const, 0x404, 4), (stack, 0xffffffffffffeff0, 8) INDIRECT (stack, 0xffffffffffffeff0, 8) , (const, 0x3dd, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x404, 4), (stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x3dd, 4)]
[(ram, 0x4ec4b0, 8) INDIRECT (ram, 0x4ec4b0, 8) , (const, 0x404, 4), (ram, 0x4ec4b0, 8) INDIRECT (ram, 0x4ec4b0, 8) , (const, 0x3dd, 4)]
[(ram, 0x4ec4c8, 8) INDIRECT (ram, 0x4ec4c8, 8) , (const, 0x404, 4), (ram, 0x4ec4c8, 8) INDIRECT (ram, 0x4ec4c8, 8) , (const, 0x3dd, 4)]
[ ---  CALL (ram, 0x17f1f0, 8) , (unique, 0x100002f0, 8) , (register, 0x38, 8), (unique, 0x100002f0, 8) COPY (const, 0x2b4cef, 8)]
[(unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x10000574, 8), (unique, 0x10000574, 8) CAST (unique, 0x3200, 8), (unique, 0x3200, 8) PTRADD (stack, 0xffffffffffffee20, 8) , (const, 0x21c, 8) , (const, 0x4, 8)]
[(unique, 0x100004ec, 8) COPY (stack, 0xffffffffffffee88, 8)]
[(ram, 0x4ec4c8, 8) MULTIEQUAL (ram, 0x4ec4c8, 8) , (ram, 0x4ec4c8, 8)]
[(ram, 0x4ec4b0, 8) MULTIEQUAL (ram, 0x4ec4b0, 8) , (ram, 0x4ec4b0, 8)]
[(unique, 0x1000026d, 8) MULTIEQUAL (register, 0x110, 8) , (register, 0x110, 8)]
[(unique, 0x10000275, 8) MULTIEQUAL (ram, 0x2bc050, 8) , (ram, 0x2bc050, 8)]
[(unique, 0x1000027d, 8) MULTIEQUAL (ram, 0x2bc058, 8) , (ram, 0x2bc058, 8)]
[(unique, 0x10000285, 4) MULTIEQUAL (ram, 0x4eb2a8, 4) , (ram, 0x4eb2a8, 4)]
[(unique, 0x10000289, 8) MULTIEQUAL (ram, 0x4eb2b8, 8) , (ram, 0x4eb2b8, 8)]
[(unique, 0x10000291, 4) MULTIEQUAL (ram, 0x4f08f8, 4) , (ram, 0x4f08f8, 4)]
[(unique, 0x100002ad, 8) MULTIEQUAL (stack, 0xffffffffffffefd8, 8) , (stack, 0xffffffffffffefd8, 8)]
[(unique, 0x100002b5, 8) MULTIEQUAL (stack, 0xffffffffffffefe0, 8) , (stack, 0xffffffffffffefe0, 8)]
[(unique, 0x100002bd, 8) MULTIEQUAL (stack, 0xffffffffffffefe8, 8) , (stack, 0xffffffffffffefe8, 8)]
[(unique, 0x100002c5, 8) MULTIEQUAL (stack, 0xffffffffffffeff0, 8) , (stack, 0xffffffffffffeff0, 8)]
[(unique, 0x100002cd, 8) MULTIEQUAL (stack, 0xffffffffffffffc0, 8) , (stack, 0xffffffffffffffc0, 8)]
[(unique, 0x1000025c, 8) INT_ADD (stack, 0xffffffffffffee80, 8) , (unique, 0x100002de, 8), (unique, 0x100002de, 8) MULTIEQUAL (unique, 0x100004f4, 8) , (unique, 0x100004ec, 8)]
[(unique, 0x10000254, 8) INT_ADD (stack, 0xffffffffffffee78, 8) , (unique, 0x100002d6, 8), (unique, 0x100002d6, 8) MULTIEQUAL (unique, 0x1000048c, 8) , (stack, 0xffffffffffffee18, 8)]
[ ---  CBRANCH (ram, 0x1911b2, 1) , (unique, 0x1000026c, 1), (unique, 0x1000026c, 1) INT_EQUAL (unique, 0x10000264, 8) , (unique, 0x10000340, 8), (unique, 0x10000340, 8) PTRSUB (const, 0x0, 8) , (const, 0x4ebc40, 8), (unique, 0x10000264, 8) MULTIEQUAL (unique, 0x100004e4, 8) , (unique, 0xbd80, 8)]
[(ram, 0x2bc050, 8) INDIRECT (unique, 0x10000275, 8) , (const, 0x450, 4)]
[(ram, 0x2bc058, 8) INDIRECT (unique, 0x1000027d, 8) , (const, 0x450, 4)]
[(ram, 0x4eb2a8, 4) INDIRECT (unique, 0x10000285, 4) , (const, 0x450, 4)]
[(ram, 0x4eb2b8, 8) INDIRECT (unique, 0x10000289, 8) , (const, 0x450, 4)]
[(ram, 0x4f08f8, 4) INDIRECT (unique, 0x10000291, 4) , (const, 0x450, 4)]
[(ram, 0x4ec4b0, 8) INDIRECT (ram, 0x4ec4b0, 8) , (const, 0x450, 4)]
[(ram, 0x4ec4c8, 8) INDIRECT (ram, 0x4ec4c8, 8) , (const, 0x450, 4)]
[ ---  CALL (ram, 0x164dc0, 8) , (register, 0x38, 8) , (unique, 0x10000328, 8) , (unique, 0xbd80, 8) , (unique, 0xbd80, 8) , (unique, 0xbd80, 8) , (unique, 0xbd80, 8) , (register, 0x0, 8) , (unique, 0x10000289, 8) , (unique, 0xbd80, 8) , (unique, 0xbd80, 8) , (unique, 0x10000254, 8) , (unique, 0x1000025c, 8), (unique, 0x10000328, 8) COPY (const, 0x2b8638, 8), (register, 0x0, 8) INT_ZEXT (unique, 0x10000285, 4)]
[(register, 0x0, 8) COPY (const, 0x0, 8)]
[ ---  CBRANCH (ram, 0x191307, 1) , (register, 0x206, 1), (register, 0x206, 1) INT_EQUAL (stack, 0xffffffffffffffc0, 8) , (unique, 0xbd80, 8), (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x4f00, 8), (unique, 0x4f00, 8) CAST (unique, 0x1000057c, 8), (unique, 0x1000057c, 8) INT_ADD (register, 0x110, 8) , (const, 0x28, 8), (stack, 0xffffffffffffffc0, 8) INDIRECT (unique, 0x100002cd, 8) , (const, 0x450, 4), (register, 0x110, 8) INDIRECT (unique, 0x1000026d, 8) , (const, 0x450, 4)]
[(stack, 0xffffffffffffffc0, 8) INDIRECT (stack, 0xffffffffffffffc0, 8) , (const, 0x48e, 4)]
[ ---  CALL (ram, 0x234c80, 8)]
[(ram, 0x2bc050, 8) COPY (ram, 0x2bc050, 8), (ram, 0x2bc050, 8) INDIRECT (ram, 0x2bc050, 8) , (const, 0x48e, 4)]
[(ram, 0x2bc058, 8) COPY (ram, 0x2bc058, 8), (ram, 0x2bc058, 8) INDIRECT (ram, 0x2bc058, 8) , (const, 0x48e, 4)]
[(ram, 0x4eb2a8, 4) COPY (ram, 0x4eb2a8, 4), (ram, 0x4eb2a8, 4) INDIRECT (ram, 0x4eb2a8, 4) , (const, 0x48e, 4)]
[(ram, 0x4eb2b8, 8) COPY (ram, 0x4eb2b8, 8), (ram, 0x4eb2b8, 8) INDIRECT (ram, 0x4eb2b8, 8) , (const, 0x48e, 4)]
[(ram, 0x4f08f8, 4) COPY (ram, 0x4f08f8, 4), (ram, 0x4f08f8, 4) INDIRECT (ram, 0x4f08f8, 4) , (const, 0x48e, 4)]
[(ram, 0x4ec4b0, 8) COPY (ram, 0x4ec4b0, 8), (ram, 0x4ec4b0, 8) INDIRECT (ram, 0x4ec4b0, 8) , (const, 0x48e, 4)]
[(ram, 0x4ec4c8, 8) COPY (ram, 0x4ec4c8, 8), (ram, 0x4ec4c8, 8) INDIRECT (ram, 0x4ec4c8, 8) , (const, 0x48e, 4)]
[ ---  RETURN (const, 0x1, 4)]
[(ram, 0x2bc050, 8) COPY (ram, 0x2bc050, 8)]
[(ram, 0x2bc058, 8) COPY (ram, 0x2bc058, 8)]
[(ram, 0x4eb2a8, 4) COPY (ram, 0x4eb2a8, 4)]
[(ram, 0x4eb2b8, 8) COPY (ram, 0x4eb2b8, 8)]
[(ram, 0x4f08f8, 4) COPY (ram, 0x4f08f8, 4)]
[(ram, 0x4ec4b0, 8) COPY (ram, 0x4ec4b0, 8)]
[(ram, 0x4ec4c8, 8) COPY (ram, 0x4ec4c8, 8)]
[ ---  RETURN (const, 0x0, 8) , (register, 0x0, 8)]
